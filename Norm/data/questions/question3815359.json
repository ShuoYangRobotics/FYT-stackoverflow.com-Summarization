[{"text": ["while (1) Vs. for while(True) -- Why is there a difference?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Intrigued by this question about infinite loops in perl: http://stackoverflow.com/questions/885908/while-1-vs-for-is-there-a-speed-difference, I decided to run a similar comparison in python.", "I expected that the compiler would generate the same byte code for while(True): pass and while(1): pass, but this is actually not the case in python2.7."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/885908/while-1-vs-for-is-there-a-speed-difference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/885908/while-1-vs-for-is-there-a-speed-difference"}, {"text": "while(True): pass", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "while(1): pass", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The following script:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import dis\n\ndef while_one():\n    while 1:\n        pass\n\ndef while_true():\n    while True:\n        pass\n\nprint(\"while 1\")\nprint(\"----------------------------\")\ndis.dis(while_one)\n\nprint(\"while True\")\nprint(\"----------------------------\")\ndis.dis(while_true)\n</code>\n</pre>\n", "senID": 3}, {"text": ["produces the following results:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n while 1\n----------------------------\n  4           0 SETUP_LOOP               3 (to 6)\n\n  5     &gt;&gt;    3 JUMP_ABSOLUTE            3\n        &gt;&gt;    6 LOAD_CONST               0 (None)\n              9 RETURN_VALUE        \nwhile True\n----------------------------\n  8           0 SETUP_LOOP              12 (to 15)\n        &gt;&gt;    3 LOAD_GLOBAL              0 (True)\n              6 JUMP_IF_FALSE            4 (to 13)\n              9 POP_TOP             \n\n  9          10 JUMP_ABSOLUTE            3\n        &gt;&gt;   13 POP_TOP             \n             14 POP_BLOCK           \n        &gt;&gt;   15 LOAD_CONST               0 (None)\n             18 RETURN_VALUE\n</code>\n</pre>\n", "senID": 5}, {"text": ["Using while True is noticeably more complicated.", "Why is this?"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "while True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In other contexts, python acts as though True equals 1:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; True == 1\nTrue\n\n&gt;&gt;&gt; True + True\n2\n</code>\n</pre>\n", "senID": 8}, {"text": ["Why does while distinguish the two?"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I noticed that python3 does evaluate the statements using identical operations:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n while 1\n----------------------------\n  4           0 SETUP_LOOP               3 (to 6) \n\n  5     &gt;&gt;    3 JUMP_ABSOLUTE            3 \n        &gt;&gt;    6 LOAD_CONST               0 (None) \n              9 RETURN_VALUE         \nwhile True\n----------------------------\n  8           0 SETUP_LOOP               3 (to 6) \n\n  9     &gt;&gt;    3 JUMP_ABSOLUTE            3 \n        &gt;&gt;    6 LOAD_CONST               0 (None) \n              9 RETURN_VALUE\n</code>\n</pre>\n", "senID": 11}, {"text": ["Is there a change in python3 to the way booleans are evaluated?"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]