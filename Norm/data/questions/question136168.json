[{"text": ["Get last n lines of a file with Python, similar to tail"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm writing a log file viewer for a web application and for that I want to paginate through the lines of the log file.", "The items in the file are line based with the newest item on the bottom."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So I need a tail() method that can read n lines from the bottom and supports an offset.", "What I came up with looks like this:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "tail()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "n", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def tail(f, n, offset=0):\n    \"\"\"Reads a n lines from f with an offset of offset lines.\"\"\"\n    avg_line_length = 74\n    to_read = n + offset\n    while 1:\n        try:\n            f.seek(-(avg_line_length * to_read), 2)\n        except IOError:\n            # woops.  apparently file is smaller than what we want\n            # to step back, go to the beginning instead\n            f.seek(0)\n        pos = f.tell()\n        lines = f.read().splitlines()\n        if len(lines) &gt;= to_read or pos == 0:\n            return lines[-to_read:offset and -offset or None]\n        avg_line_length *= 1.3\n</code>\n</pre>\n", "senID": 3}, {"text": ["Is this a reasonable approach?", "What is the recommended way to tail log files with offsets?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]