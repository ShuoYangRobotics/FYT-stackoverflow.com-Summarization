[{"text": ["Python Class Decorator"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["In Python 2.5, is there a way to create a decorator that decorates a class?", "Specifically, I want to use a decorator to add a member to a class and change the constructor to take a value for that member."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Looking for something like the following (which has a syntax error on 'class Foo:':"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def getId(self): return self.__id\n\nclass addID(original_class):\n    def __init__(self, id, *args, **kws):\n        self.__id = id\n        self.getId = getId\n        original_class.__init__(self, *args, **kws)\n\n@addID\nclass Foo:\n    def __init__(self, value1):\n        self.value1 = value1\n\nif __name__ == '__main__':\n    foo1 = Foo(5,1)\n    print foo1.value1, foo1.getId()\n    foo2 = Foo(15,2)\n    print foo2.value1, foo2.getId()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Thanks,\nRob"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Edit:\nRereading this question, I guess what I'm really after is a way to do something like a C# interface in Python.", "I need to switch my paradigm I suppose."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]