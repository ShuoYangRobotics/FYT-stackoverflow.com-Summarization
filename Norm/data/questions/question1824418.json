[{"text": ["A clean, lightweight alternative to Python's twisted?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["A (long) while ago I wrote a web-spider that I multithreaded to enable concurrent requests to occur at the same time.", "That was in my Python youth, in the days before I knew about the GIL and the associated woes it creates for multithreaded code (IE, most of the time, its not really multithreaded!", ")..."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "GIL", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/python/GIL.pdf"}]}, {"text": ["I'd like to rework this code to make it more robust and perform better.", "There are basically two ways I could do this: I could use the new multiprocessing module in 2.6+ or I could go for a reactor / event-based model of some sort.", "I would rather do the later since it's far simpler and less error-prone."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "multiprocessing module", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html"}]}, {"text": ["So the question relates to what framework would be best suited to my needs.", "The following is a list of the options I know about so far:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": ["Twisted"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["Eventlet"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}, {"text": ["PyEv"], "childNum": 0, "tag": "a", "senID": 6, "childList": []}, {"text": ["asyncore"], "childNum": 0, "tag": "a", "senID": 7, "childList": []}, {"text": ["tornado"], "childNum": 0, "tag": "a", "senID": 8, "childList": []}, {"text": ["scrapy"], "childNum": 0, "tag": "a", "senID": 9, "childList": []}]}, {"text": ["Is there anything I have missed at all?", "Surely there must be a library out there that fits the sweet-spot of a simplified async networking library!"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["[edit: big thanks to intgr for his pointer to this page.", "If you scroll to the bottom you will see there is a really nice list of projects that aim to tackle this task in one way or another.", "It seems actually that things have indeed moved on since the inception of Twisted: people now seem to favour a co-routine based solution rather than a traditional reactor / callback oriented one.", "The benefits of this approach are clearer more direct code: I've certainly found in the past, especially when working with boost.asio in C++ that callback based code can lead to designs that can be hard-to-follow and are relatively obscure to the untrained eye.", "Using co-routines allows you to write code that looks a little more synchronous at least.", "I guess now my task is to work out which one of these many libraries I like the look of and give it a go!", "Glad I asked now...]"], "childNum": 4, "tag": "p", "senID": 11, "childList": [{"text": "intgr", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/177663/intgr"}, {"text": "this page", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/cogen/"}, {"text": "co-routine", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Coroutine"}, {"text": "boost.asio", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1_41_0/doc/html/boost_asio.html"}]}, {"text": ["[edit: perhaps of interest to anyone who followed or stumbled on this this question or cares about this topic in any sense: I found a really great writeup of the current state of the available tools for this job]"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "the available tools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nichol.as/asynchronous-servers-in-python"}]}]