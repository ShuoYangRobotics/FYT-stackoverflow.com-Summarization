[{"text": ["How should I log while using multiprocessing in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Right now I have a central module in a framework that spawns multiple processes using the Python 2.6 multiprocessingmodule.", "Because it uses multiprocessing, there is module-level multiprocessing-aware log, LOG = multiprocessing.get_logger().", "Per the docs, this logger has process-shared locks so that you don't garble things up in sys.stderr (or whatever filehandle) by having multiple processes writing to it simultaneously."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "multiprocessingmodule", "tag": "a", "pos": 0, "childList": [{"text": "multiprocessing", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/multiprocessing.html?#module-multiprocessing"}, {"text": "multiprocessing", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "multiprocessing", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "LOG = multiprocessing.get_logger()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "the docs", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html#logging"}, {"text": "sys.stderr", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The issue I have now is that the other modules in the framework are not multiprocessing-aware.", "The way I see it, I need to make all dependencies on this central module use multiprocessing-aware logging.", "That's annoying within the framework, let alone for all clients of the framework.", "Are there alternatives I'm not thinking of?"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "within", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}]