[{"text": ["Naming Python loggers"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["In Django, I've got loggers all over the place, currently with hard-coded names."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For module-level logging (i.e., in a module of view functions) I have the urge to do this."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n log= logging.getLogger( __name__ )\n</code>\n</pre>\n", "senID": 3}, {"text": ["For class-level logging (i.e., in a class __init__ method) I have the urge to do this."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n self.log= logging.getLogger( \"%s.%s\" % ( self.__module__, self.__class__.__name__ ) )\n</code>\n</pre>\n", "senID": 5}, {"text": ["I'm looking for second opinions before I tackle several dozen occurrences of getLogger( \"hard.coded.name\" )."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "getLogger( \"hard.coded.name\" )", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Will this work?", "Anyone else naming their loggers with the same unimaginative ways?  "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Further, should I break down and write a class decorator for this log definition?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]