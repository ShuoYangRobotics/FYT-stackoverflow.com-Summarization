[{"text": ["Simple Python Challenge: Fastest Bitwise XOR on Data Buffers"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Challenge:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Challenge:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Perform a bitwise XOR on two equal sized buffers.", "The buffers will be required to be the python str type since this is traditionally the type for data buffers in python.", "Return the resultant value as a str.", "Do this as fast as possible."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["The inputs are two 1 megabyte (2**20 byte) strings."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The challenge is to substantially beat my inefficient algorithm using python or existing third party python modules (relaxed rules: or create your own module.", ") Marginal increases are useless."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "substantially", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from os import urandom\nfrom numpy import frombuffer,bitwise_xor,byte\n\ndef slow_xor(aa,bb):\n    a=frombuffer(aa,dtype=byte)\n    b=frombuffer(bb,dtype=byte)\n    c=bitwise_xor(a,b)\n    r=c.tostring()\n    return r\n\naa=urandom(2**20)\nbb=urandom(2**20)\n\ndef test_it():\n    for x in xrange(1000):\n        slow_xor(aa,bb)\n</code>\n</pre>\n", "senID": 5}]