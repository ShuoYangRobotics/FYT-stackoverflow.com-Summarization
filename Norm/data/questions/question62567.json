[{"text": ["Ignore case in Python strings"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["What is the easiest way to compare strings in Python, ignoring case?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Of course one can do (str1.lower() &lt;= str2.lower()), etc., but this created two additional temporary strings (with the obvious alloc/g-c overheads)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I guess I'm looking for an equivalent to C's stricmp()."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["[Some more context requested, so I'll demonstrate with a trivial example:]"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Suppose you want to sort a looong list of strings.", "You simply do theList.sort().", "This is O(n * log(n)) string comparisons and no memory management (since all\nstrings and list elements are some sort of smart pointers).", "You are happy."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Now, you want to do the same, but ignore the case (let's simplify and say\nall strings are ascii, so locale issues can be ignored).", "You can do theList.sort(key=lambda s: s.lower()), but then you cause two new \nallocations per comparison, plus burden the garbage-collector with the duplicated\n(lowered) strings.", "Each such memory-management noise is orders-of-magnitude slower than simple string comparison."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Now, with an in-place stricmp()-like function, you do: theList.sort(cmp=stricmp)\nand it is as fast and as memory-friendly as theList.sort().", "You are happy again."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["The problem is any Python-based case-insensitive comparison involves implicit string \nduplications, so I was expecting to find a C-based comparisons (maybe in module string)."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Could not find anything like that, hence the question here.", "(Hope this clarifies the question)."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]