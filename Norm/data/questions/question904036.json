[{"text": ["Chain-calling parent constructors in python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Consider this - a base class A, class B inheriting from A, class C inheriting from B.", "What is a generic way to call a parent class constructor in a constructor?", "If this still sounds too vague, here's some code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class A(object):\n    def __init__(self):\n        print \"Constructor A was called\"\n\nclass B(A):\n    def __init__(self):\n        super(B,self).__init__()\n        print \"Constructor B was called\"\n\nclass C(B):\n    def __init__(self):\n        super(C,self).__init__()\n        print \"Constructor C was called\"\n\nc = C()\n</code>\n</pre>\n", "senID": 2}, {"text": ["This is how I do it now.", "But it still seems a bit too non-generic - you still must pass a correct type by hand."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Now, I've tried using self.__class__ as a first argument to super(), but, obviously it doesn't work - if you put it in the constructor for C - fair enough, B's constructor gets called.", "If you do the same in B, \"self\" still points to an instance of C so you end up calling B's constructor again (this ends in an infinite recursion)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "self.__class__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["There is no need to think about diamond inheritance for now, I am just interested in solving this specific problem."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]