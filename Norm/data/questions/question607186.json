[{"text": ["How does Python's \"super\" do the right thing?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm running Python 2.5, so this question may not apply to Python 3.", "When you make a diamond class hierarchy using multiple inheritance and create an object of the derived-most class, Python does the Right Thing (TM).", "It calls the constructor for the derived-most class, then its parent classes as listed from left to right, then the grandparent.", "I'm familiar with Python's MRO; that's not my question.", "I'm curious how the object returned from super actually manages to communicate to calls of super in the parent classes the correct order.", "Consider this example code:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "MRO", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.python.org/download/releases/2.3/mro/"}]}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\nclass A(object):\n    def __init__(self): print \"A init\"\n\nclass B(A):\n    def __init__(self):\n    \tprint \"B init\"\n    \tsuper(B, self).__init__()\n\nclass C(A):\n    def __init__(self):\n    \tprint \"C init\"\n    \tsuper(C, self).__init__()\n\nclass D(B, C):\n    def __init__(self):\n    \tprint \"D init\"\n    \tsuper(D, self).__init__()\n\nx = D()\n</code>\n</pre>\n", "senID": 2}, {"text": ["The code does the intuitive thing, it prints:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n D init\nB init\nC init\nA init\n</code>\n</pre>\n", "senID": 4}, {"text": ["However, if you comment out the call to super in B's init function, neither A nor C's init function is called.", "This means B's call to super is somehow aware of C's existence in the overall class hierarchy.", "I know that super returns a proxy object with an overloaded get operator, but how does the object returned by super in D's init definition communicate the existence of C to the object returned by super in B's init definition?", "Is the information that subsequent calls of super use stored on the object itself?", "If so, why isn't super instead self.super?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Edit: Jekke quite rightly pointed out that it's not self.super because super is an attribute of the class, not an instance of the class.", "Conceptually this makes sense, but in practice super isn't an attribute of the class either!", "You can test this in the interpreter by making two classes A and B, where B inherits from A, and calling dir(B).", "It has no super or __super__ attributes."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "dir(B)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "super", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "__super__", "childNum": 0, "tag": "code", "childList": []}]}]