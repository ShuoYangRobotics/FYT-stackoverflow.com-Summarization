[{"text": ["Random strings in Python 2.6 (Is this OK?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've been trying to find a more pythonic way of generating random string in python that can scale as well.", "Typically, I see something similar to"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ''.join(random.choice(string.letters) for i in xrange(len))\n</code>\n</pre>\n", "senID": 2}, {"text": ["It sucks if you want to generate long string."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I've been thinking about random.getrandombits for a while, and figuring out how to convert that to an array of bits, then hex encode that.", "Using python 2.6 I came across the bitarray object, which isn't documented.", "Somehow I got it to work, and it seems really fast."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["It generates a 50mil random string on my notebook in just about 3 seconds."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def rand1(leng):\n    nbits = leng * 6 + 1\n    bits = random.getrandbits(nbits)\n    uc = u\"%0x\" % bits\n    newlen = int(len(uc) / 2) * 2 # we have to make the string an even length\n    ba = bytearray.fromhex(uc[:newlen])\n    return base64.urlsafe_b64encode(str(ba))[:leng]\n</code>\n</pre>\n", "senID": 6}, {"tag": "hr", "senID": 7}, {"text": ["edit"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["heikogerlach pointed out that it was an odd number of characters causing the issue.", "New code added to make sure it always sent fromhex an even number of hex digits."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Still curious if there's a better way of doing this that's just as fast."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]