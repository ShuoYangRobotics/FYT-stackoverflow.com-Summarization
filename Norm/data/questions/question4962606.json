[{"text": ["Fast tensor rotation with NumPy"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["At the heart of an application (written in Python and using NumPy) I need to rotate a 4th order tensor.", "Actually, I need to rotate a lot of tensors many times and this is my bottleneck.", "My naive implementation (below) involving eight nested loops seems to be quite slow, but I cannot see a way to leverage NumPy's matrix operations and, hopefully, speed things up.", "I've a feeling I should be using np.tensordot, but I don't see how."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "NumPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/NumPy"}, {"text": "np.tensordot", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["Mathematically, elements of the rotated tensor, T', are given by: T'ijkl =   &Sigma; gia gjb gkc gld Tabcd with the sum being over the repeated indices on the right hand side.", "T and Tprime are 3*3*3*3 NumPy arrays and the rotation matrix g is a 3*3 NumPy array.", "My slow implementation (taking ~0.04 seconds per call) is below."], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "ijkl", "childNum": 0, "tag": "sub", "pos": 0, "childList": []}, {"text": "ia", "childNum": 0, "tag": "sub", "pos": -1, "childList": []}, {"text": "jb", "childNum": 0, "tag": "sub", "pos": -1, "childList": []}, {"text": "kc", "childNum": 0, "tag": "sub", "pos": -1, "childList": []}, {"text": "ld", "childNum": 0, "tag": "sub", "pos": -1, "childList": []}, {"text": "abcd", "childNum": 0, "tag": "sub", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nimport numpy as np\n\ndef rotT(T, g):\n    Tprime = np.zeros((3,3,3,3))\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                for l in range(3):\n                    for ii in range(3):\n                        for jj in range(3):\n                            for kk in range(3):\n                                for ll in range(3):\n                                    gg = g[ii,i]*g[jj,j]*g[kk,k]*g[ll,l]\n                                    Tprime[i,j,k,l] = Tprime[i,j,k,l] + \\\n                                         gg*T[ii,jj,kk,ll]\n    return Tprime\n\nif __name__ == \"__main__\":\n\n    T = np.array([[[[  4.66533067e+01,  5.84985000e-02, -5.37671310e-01],\n                    [  5.84985000e-02,  1.56722231e+01,  2.32831900e-02],\n                    [ -5.37671310e-01,  2.32831900e-02,  1.33399259e+01]],\n                   [[  4.60051700e-02,  1.54658176e+01,  2.19568200e-02],\n                    [  1.54658176e+01, -5.18223500e-02, -1.52814920e-01],\n                    [  2.19568200e-02, -1.52814920e-01, -2.43874100e-02]],\n                   [[ -5.35577630e-01,  1.95558600e-02,  1.31108757e+01],\n                    [  1.95558600e-02, -1.51342210e-01, -6.67615000e-03],\n                    [  1.31108757e+01, -6.67615000e-03,  6.90486240e-01]]],\n                  [[[  4.60051700e-02,  1.54658176e+01,  2.19568200e-02],\n                    [  1.54658176e+01, -5.18223500e-02, -1.52814920e-01],\n                    [  2.19568200e-02, -1.52814920e-01, -2.43874100e-02]],\n                   [[  1.57414726e+01, -3.86167500e-02, -1.55971950e-01],\n                    [ -3.86167500e-02,  4.65601977e+01, -3.57741000e-02],\n                    [ -1.55971950e-01, -3.57741000e-02,  1.34215636e+01]],\n                   [[  2.58256300e-02, -1.49072770e-01, -7.38843000e-03],\n                    [ -1.49072770e-01, -3.63410500e-02,  1.32039847e+01],\n                    [ -7.38843000e-03,  1.32039847e+01,  1.38172700e-02]]],\n                  [[[ -5.35577630e-01,  1.95558600e-02,  1.31108757e+01],\n                    [  1.95558600e-02, -1.51342210e-01, -6.67615000e-03],\n                    [  1.31108757e+01, -6.67615000e-03,  6.90486240e-01]],\n                   [[  2.58256300e-02, -1.49072770e-01, -7.38843000e-03],\n                    [ -1.49072770e-01, -3.63410500e-02,  1.32039847e+01],\n                    [ -7.38843000e-03,  1.32039847e+01,  1.38172700e-02]],\n                   [[  1.33639532e+01, -1.26331100e-02,  6.84650400e-01],\n                    [ -1.26331100e-02,  1.34222177e+01,  1.67851800e-02],\n                    [  6.84650400e-01,  1.67851800e-02,  4.89151396e+01]]]])\n\n    g = np.array([[ 0.79389393,  0.54184237,  0.27593346],\n                  [-0.59925749,  0.62028664,  0.50609776],\n                  [ 0.10306737, -0.56714313,  0.8171449 ]])\n\n    for i in range(100):\n        Tprime = rotT(T,g)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Is there a way to make this go faster?", "Making the code generalise to other ranks of tensor would be useful, but is less important."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]