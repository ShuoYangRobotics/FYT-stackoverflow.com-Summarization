[{"text": ["Why are slices in Python 3 still copies and not views?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["As I only now noticed after commenting on this answer, slices in Python 3 return shallow copies of whatever they're slicing rather than views.", "Why is this still the case?", "Even leaving aside numpy's usage of views rather than copies for slicing, the fact that dict.keys, dict.values, and dict.items all return views in Python 3, and that there are many other aspects of Python 3 geared towards greater use of iterators, makes it seem that there would have been a movement towards slices becoming similar.", "itertools does have an islice function that makes iterative slices, but that's more limited than normal slicing and does not provide view functionality along the lines of dict.keys or dict.values."], "childNum": 8, "tag": "p", "senID": 1, "childList": [{"text": "this answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/6900955/python-convert-list-to-dictionary/6900977#6900977"}, {"text": "dict.keys", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "dict.values", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "dict.items", "childNum": 0, "tag": "code", "childList": []}, {"text": "itertools", "childNum": 0, "tag": "code", "childList": []}, {"text": "islice", "childNum": 0, "tag": "code", "childList": []}, {"text": "dict.keys", "childNum": 0, "tag": "code", "childList": []}, {"text": "dict.values", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["As well, the fact that you can use assignment to slices to modify the original list, but slices are themselves copies and not views, is a contradictory aspect of the language and seems like it violates several of the principles illustrated in the Zen of Python."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "the Zen of Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}, {"text": ["That is, the fact you can do"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; a[::2] = [0, 0, 0]\n&gt;&gt;&gt; a\n[0, 2, 0, 4, 0]\n</code>\n</pre>\n", "senID": 4}, {"text": ["But not"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; a[::2][0] = 0\n&gt;&gt;&gt; a\n[0, 2, 3, 4, 5]\n</code>\n</pre>\n", "senID": 6}, {"text": ["or something like"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; b = a[::2]\n&gt;&gt;&gt; b\nview(a[::2] -&gt; [1, 3, 5])   # numpy doesn't explicitly state that its slices are views, but it would probably be a good idea to do it in some way for regular Python\n&gt;&gt;&gt; b[0] = 0\n&gt;&gt;&gt; b\nview(a[::2] -&gt; [0, 3, 5])\n&gt;&gt;&gt; a\n[0, 2, 3, 4, 5]\n</code>\n</pre>\n", "senID": 8}, {"text": ["Seems somewhat arbitrary/undesirable."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["I'm aware of http://www.python.org/dev/peps/pep-3099/ and the part where it says \"Slices and extended slices won't go away (even if the __getslice__ and __setslice__ APIs may be replaced) nor will they return views for the standard object types.", "\", but the linked discussion provides no mention of why the decision about slicing with views was made; in fact, the majority of the comments on that specific suggestion out of the suggestions listed in the original post seemed to be positive."], "childNum": 3, "tag": "p", "senID": 10, "childList": [{"text": "http://www.python.org/dev/peps/pep-3099/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3099/"}, {"text": "__getslice__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__setslice__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["What prevented something like this from being implemented in Python 3.0, which was specifically designed to not be strictly backwards-compatible with Python 2.x and thus would have been the best time to implement such a change in design, and is there anything that may prevent it in future versions of Python?"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]