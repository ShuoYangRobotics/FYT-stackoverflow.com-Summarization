[{"text": ["Proper way to declare custom exceptions in modern Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["What's the proper way to declare custom exception classes in modern Python?", "My primary goal is to follow whatever standard other exception classes have, so that (for instance) any extra string I include in the exception is printed out by whatever tool caught the exception."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["By \"modern Python\" I mean something that will run in Python 2.5 but be 'correct' for the Python 2.6 and Python 3.", "* way of doing things.", "And by \"custom\" I mean an Exception object that can include extra data about the cause of the error: a string, maybe also some other arbitrary object relevant to the exception."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I was tripped up by the following deprecation warning in Python 2.6.2:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class MyError(Exception):\n...     def __init__(self, message):\n...     \tself.message = message\n... \n&gt;&gt;&gt; MyError(\"foo\")\n_sandbox.py:3: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6\n</code>\n</pre>\n", "senID": 4}, {"text": ["It seems crazy that BaseException has a special meaning for attributes named \"message\".", "I gather from PEP-352 that attribute did have a special meaning in 2.5 they're trying to deprecate away, so I guess that name (and that one alone) is now forbidden?", "Ugh."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "PEP-352", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0352/"}]}, {"text": ["I'm also fuzzily aware that Exception has some magic parameter \"args\", but I've never known how to use it.", "Nor am I sure it's the right way to do things going forward; a lot of the discussion I found online suggested they were trying to do away with args in Python 3."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Update: two answers have suggested overriding __init__, and __str__/__unicode__/__repr__.", "That seems like a lot of typing, is it necessary?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]