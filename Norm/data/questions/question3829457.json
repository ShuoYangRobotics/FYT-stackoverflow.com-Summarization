[{"text": ["Generating all 5 card poker hands"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This problem sounds simple at first glance, but turns out to be a lot more complicated than it seems.", "It's got me stumped for the moment."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["There are 52c5 = 2,598,960 ways to choose 5 cards from a 52 card deck.", "However, since suits are interchangeable in poker, many of these are equivalent - the hand 2H 2C 3H 3S 4D is equivalent to 2D 2S 3D 3C 4H - simply swap the suits around.", "According to wikipedia, there are 134,459 distinct 5 card hands once you account for possible suit recolorings."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "wikipedia", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Poker_probability"}]}, {"text": ["The question is, how do we efficiently generate all these possible hands?", "I don't want to generate all hands, then eliminate duplicates, as I want to apply the problem to larger numbers of cards, and the number of hands to evaluate fast spirals out of control.", "My current attempts have centered around either generating depth-first, and keeping track of the currently generated cards to determine what suits and ranks are valid for the next card, or breadth-first, generating all possible next cards, then removing duplicates by converting each hand to a 'canonical' version by recoloring.", "Here's my attempt at a breadth-first solution, in Python:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n # A card is represented by an integer. The low 2 bits represent the suit, while\n# the remainder represent the rank.\nsuits = 'CDHS'\nranks = '23456789TJQKA'\n\ndef make_canonical(hand):\n  suit_map = [None] * 4\n  next_suit = 0\n  for i in range(len(hand)):\n    suit = hand[i] &amp; 3\n    if suit_map[suit] is None:\n      suit_map[suit] = next_suit\n      next_suit += 1\n    hand[i] = hand[i] &amp; ~3 | suit_map[suit]\n  return hand\n\ndef expand_hand(hand, min_card):\n  used_map = 0\n  for card in hand:\n    used_map |= 1 &lt;&lt; card\n\n  hands = set()\n  for card in range(min_card, 52):\n    if (1 &lt;&lt; card) &amp; used_map:\n      continue\n    new_hand = list(hand)\n    new_hand.append(card)\n    make_canonical(new_hand)\n    hands.add(tuple(new_hand))\n  return hands\n\ndef expand_hands(hands, num_cards):\n  for i in range(num_cards):\n    new_hands = set()\n    for j, hand in enumerate(hands):\n      min_card = hand[-1] + 1 if i &gt; 0 else 0\n      new_hands.update(expand_hand(hand, min_card))\n    hands = new_hands\n  return hands\n</code>\n</pre>\n", "senID": 4}, {"text": ["Unfortunately, this generates too many hands:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; len(expand_hands(set([()]), 5))\n160537\n</code>\n</pre>\n", "senID": 6}, {"text": ["Can anyone suggest a better way to generate just the distinct hands, or point out where I've gone wrong in my attempt?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]