[{"text": ["Python line-by-line memory profiler?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm looking to generate, from a large Python codebase, a summary of heap usage or memory allocations over the course of a function's run."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'm familiar with heapy, and it's served me well for taking \"snapshots\" of the heap at particular points in my code, but I've found it difficult to generate a \"memory-over-time\" summary with it.", "I've also played with line_profiler, but that works with run time, not memory."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "heapy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://guppy-pe.sourceforge.net/"}, {"text": "line_profiler", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://packages.python.org/line_profiler/"}]}, {"text": ["My fallback right now is Valgrind with massif, but that lacks a lot of the contextual Python information that both Heapy and line_profiler give.", "Is there some sort of combination of the latter two that give a sense of memory usage or heap growth over the execution span of a Python program?"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "massif", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://valgrind.org/docs/manual/ms-manual.html"}]}]