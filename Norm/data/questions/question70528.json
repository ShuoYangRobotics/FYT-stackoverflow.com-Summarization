[{"text": ["Why are Python's 'private' methods not actually private?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Python gives us the ability to create 'private' methods and variables within a class by prepending double underscores to the name, like so: *__myPrivateMethod()*.", "How, then, can one explain this"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n >>> class MyClass:\n...     def myPublicMethod(self):\n...             print 'public method'\n...     def __myPrivateMethod(self):\n...             print 'this is private!!'\n... \n>>> obj = MyClass()\n>>> obj.myPublicMethod()\npublic method\n>>> obj.__myPrivateMethod()\nTraceback (most recent call last):\n  File \"\", line 1, in \nAttributeError: MyClass instance has no attribute '__myPrivateMethod'\n>>> dir(obj)\n['_MyClass__myPrivateMethod', '__doc__', '__module__', 'myPublicMethod']\n>>> obj._MyClass__myPrivateMethod()\nthis is private!!\n</code>\n</pre>\n", "senID": 2}, {"text": ["What's the deal?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I'll explain this a little for those who didn't quite get that."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n >>> class MyClass:\n...     def myPublicMethod(self):\n...             print 'public method'\n...     def __myPrivateMethod(self):\n...             print 'this is private!!'\n... \n>>> obj = MyClass()\n</code>\n</pre>\n", "senID": 5}, {"text": ["What I did there is create a class with a public method and a private method and instantiate it."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Next, I call its public method."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n >>> obj.myPublicMethod()\npublic method\n</code>\n</pre>\n", "senID": 8}, {"text": ["Next, I try and call its private method."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n >>> obj.__myPrivateMethod()\nTraceback (most recent call last):\n  File \"\", line 1, in \nAttributeError: MyClass instance has no attribute '__myPrivateMethod'\n</code>\n</pre>\n", "senID": 10}, {"text": ["Everything looks good here; we're unable to call it.", "It is, in fact, 'private'.", "Well, actually it isn't.", "Running dir() on the object reveals a new magical method that python creates magically for all of your 'private' methods."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "dir()", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}, {"code": "<pre>\n<code>\n >>> dir(obj)\n['_MyClass__myPrivateMethod', '__doc__', '__module__', 'myPublicMethod']\n</code>\n</pre>\n", "senID": 12}, {"text": ["This new method's name is always an underscore, followed by the class name, followed by the method name."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n >>> obj._MyClass__myPrivateMethod()\nthis is private!!\n</code>\n</pre>\n", "senID": 14}, {"text": ["So much for encapsulation, eh?"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["In any case, I'd always heard Python doesn't support encapsulation, so why even try?", "What gives?"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}]