Question (ID-192109): Is there a function in Python to print all the current properties and values of an object? So what I'm looking for here is something like PHP's print_r function. This is so I can debug my scripts by seeing what's the state of the object in question. 
 Answers (Total-9): #0 def dump(obj):
 for attr in dir(obj):
 print "obj.%s = %s" % (attr, getattr(obj, attr))
 
 #1 You want vars() mixed with pprint: 

 from pprint import pprint
pprint (vars(your_object))
 
 #2 You are really mixing together two different things. 

 Use dir() or the inspect module to get what you are interested in (I use __builtins__ as an example; you can use any object instead). 

 &gt;&gt;&gt; l = dir(__builtins__)
&gt;&gt;&gt; d = __builtins__.__dict__
 

 Print that dictionary however fancy you like: 

 &gt;&gt;&gt; print l
['ArithmeticError', 'AssertionError', 'AttributeError',...
 

 or 

 &gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(l)
['ArithmeticError',
 'AssertionError',
 'AttributeError',
 'BaseException',
 'DeprecationWarning',
...

&gt;&gt;&gt; pprint(d, indent=2)
{ 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,
 'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,
 'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,
...
 '_': [ 'ArithmeticError',
   'AssertionError',
   'AttributeError',
   'BaseException',
   'DeprecationWarning',
...
 
 #3 dir has been mentioned, but that'll only give you the attributes' names. If you want their values as well try __dict__. 

 class O:
 def __init__ (self):
  self.value = 3

o = O()
 

 >>> o.__dict__ 

 {'value': 3} 
 #4 You can use the "dir()" function to do this. 

 &gt;&gt;&gt; import sys
&gt;&gt;&gt; dir(sys)
['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__', '__stdin__', '__stdo
t__', '_current_frames', '_getframe', 'api_version', 'argv', 'builtin_module_names', 'byteorder
, 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dllhandle', 'exc_clear', 'exc_info'
 'exc_type', 'excepthook', 'exec_prefix', 'executable', 'exit', 'getcheckinterval', 'getdefault
ncoding', 'getfilesystemencoding', 'getrecursionlimit', 'getrefcount', 'getwindowsversion', 'he
version', 'maxint', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_
ache', 'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setprofile', 'setrecursionlimit
, 'settrace', 'stderr', 'stdin', 'stdout', 'subversion', 'version', 'version_info', 'warnoption
', 'winver']
&gt;&gt;&gt;
 

 Another useful feature is help. 

 &gt;&gt;&gt; help(sys)
Help on built-in module sys:

NAME
 sys

FILE
 (built-in)

MODULE DOCS
 http://www.python.org/doc/current/lib/module-sys.html

DESCRIPTION
 This module provides access to some objects used or maintained by the
 interpreter and to functions that interact strongly with the interpreter.

 Dynamic objects:

 argv -- command line arguments; argv[0] is the script pathname if known
 
 #5 To print the current state of the object you might: 

 &gt;&gt;&gt; obj # in an interpreter
 

 or 

 print repr(obj) # in a script
 

 or 

 print obj
 

 For your classes define __str__ or __repr__ methods. From the Python documentation : 

 
 __repr__(self) Called by the repr() built-in function and by string
 conversions (reverse quotes) to
 compute the "official" string
 representation of an object. If at all
 possible, this should look like a
 valid Python expression that could be
 used to recreate an object with the
 same value (given an appropriate
 environment). If this is not possible,
 a string of the form "&lt;...some useful
 description...>" should be returned.
 The return value must be a string
 object. If a class defines repr ()
 but not __str__() , then __repr__() is
 also used when an "informal" string
 representation of instances of that
 class is required. This is typically
 used for debugging, so it is important
 that the representation is
 information-rich and unambiguous. 
 
 __str__(self) Called by the str() built-in function and by the print
 statement to compute the "informal"
 string representation of an object.
 This differs from __repr__() in that
 it does not have to be a valid Python
 expression: a more convenient or
 concise representation may be used
 instead. The return value must be a
 string object. 
 
 #6 In most cases, using __dict__ or dir() will get you the info you're wanting. If you should happen to need more details, the standard library includes the inspect module, which allows you to get some impressive amount of detail. Some of the real nuggests of info include: 

 
 names of function and method parameters 
 class hierarchies 
 source code of the implementation of a functions/class objects 
 local variables out of a frame object 
 

 If you're just looking for "what attribute values does my object have?", then dir() and __dict__ are probably sufficient. If you're really looking to dig into the current state of arbitrary objects (keeping in mind that in python almost everything is an object), then inspect is worthy of consideration. 
 #7 A metaprogramming example Dump object with magic : 

 
$ cat dump.py
 

 #!/usr/bin/python
import sys
if len(sys.argv) &gt; 2:
 module, metaklass = sys.argv[1:3]
 m = __import__(module, globals(), locals(), [metaklass])
 __metaclass__ = getattr(m, metaklass)

class Data:
 def __init__(self):
  self.num = 38
  self.lst = ['a','b','c']
  self.str = 'spam'
 dumps = lambda self: repr(self)
 __str__ = lambda self: self.dumps()

data = Data()
print data
 

 Without arguments: 

 
$ python dump.py
 

 &lt;__main__.Data instance at 0x00A052D8&gt;
 

 With Gnosis Utils : 

 
$ python dump.py gnosis.magic MetaXMLPickler
  

 &lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE PyObject SYSTEM "PyObjects.dtd"&gt;
&lt;PyObject module="__main__" class="Data" id="11038416"&gt;
&lt;attr name="lst" type="list" id="11196136" &gt;
 &lt;item type="string" value="a" /&gt;
 &lt;item type="string" value="b" /&gt;
 &lt;item type="string" value="c" /&gt;
&lt;/attr&gt;
&lt;attr name="num" type="numeric" value="38" /&gt;
&lt;attr name="str" type="string" value="spam" /&gt;
&lt;/PyObject&gt;
 

 It is a bit outdated but still working. 
 #8 pprint contains a “pretty printer” for producing aesthetically pleasing representations of your data structures. The formatter produces representations of data structures that can be parsed correctly by the interpreter, and are also easy for a human to read. The output is kept on a single line, if possible, and indented when split across multiple lines.