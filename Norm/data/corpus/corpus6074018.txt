Question (ID-6074018): Why does the expression 0 Looking into Queue.py in Python 2.6, I found this construct that I found a bit strange: 

 def full(self):
 """Return True if the queue is full, False otherwise
 (not reliable!)."""
 self.mutex.acquire()
 n = 0 &lt; self.maxsize == self._qsize()
 self.mutex.release()
 return n
 

 If maxsize is 0 the queue is never full. 

 My question is how does it work for this case? How 0 &lt; 0 == 0 is considered False? 

 &gt;&gt;&gt; 0 &lt; 0 == 0
False
&gt;&gt;&gt; (0) &lt; (0 == 0)
True
&gt;&gt;&gt; (0 &lt; 0) == 0
True
&gt;&gt;&gt; 0 &lt; (0 == 0)
True
 
 Answers (Total-9): #0 I believe Python has special case handling for sequences of relational operators to make range comparisons easy to express. It's much nicer to be able to say 0 &lt; x &lt;= 5 than to say (0 &lt; x) and (x &lt;= 5) . 

 These are called chained comparisons . And that's a link to the documentation for them. 

 With the other cases you talk about, the parenthesis force one relational operator to be applied before the other, and so they are no longer chained comparisons. And since True and False have values as integers you get the answers you do out of the parenthesized versions. 
 #1 Because 

 (0 &lt; 0) and (0 == 0)
 

 is False . You can chain together comparison operators and they are automatically expanded out into the pairwise comparisons. 

 

 EDIT -- clarification about True and False in Python 

 In Python True and False are just instances of bool , which is a subclass of int . In other words, True really is just 1. 

 The point of this is that you can use the result of a boolean comparison exactly like an integer. This leads to confusing things like 

 &gt;&gt;&gt; (1==1)+(1==1)
2
&gt;&gt;&gt; (2&lt;1)&lt;1
True
 

 But these will only happen if you parenthesise the comparisons so that they are evaluated first. Otherwise Python will expand out the comparison operators. 
 #2 The strange behavior your experiencing comes from pythons ability to chain conditions. Since it finds 0 is not less than 0, it decides the entire expression evaluates to false. As soon as you break this apart into seperate conditions, you're changing the functionality. It initially is essentially testing that a &lt; b &amp;&amp; b == c for your original statement of a &lt; b == c . 

 Another example: 

 &gt;&gt;&gt; 1 &lt; 5 &lt; 3
False

&gt;&gt;&gt; (1 &lt; 5) &lt; 3
True
 
 #3 &gt;&gt;&gt; 0 &lt; 0 == 0
False
 

 This is a chained comparison. It returns true if each pairwise comparison in turn is true. It is the equivalent to (0 &lt; 0) and (0 == 0) 

 &gt;&gt;&gt; (0) &lt; (0 == 0)
True
 

 This is equivalent to 0 &lt; True which evaluates to True. 

 &gt;&gt;&gt; (0 &lt; 0) == 0
True
 

 This is equivalent to False == 0 which evaluates to True. 

 &gt;&gt;&gt; 0 &lt; (0 == 0)
True
 

 Equivalent to 0 &lt; True which, as above, evaluates to True. 
 #4 maybe this excerpt from the docs can help: 

 
 These are the so-called “rich
 comparison” methods, and are called
 for comparison operators in preference
 to __cmp__() below. The correspondence
 between operator symbols and method
 names is as follows: x&lt;y calls
 x.__lt__(y) , x&lt;=y calls x.__le__(y) ,
 x==y calls x.__eq__(y) , x!=y and x&lt;&gt;y 
 call x.__ne__(y) , x&gt;y calls
 x.__gt__(y) , and x&gt;=y calls
 x.__ge__(y) . 
 
 A rich comparison method may return
 the singleton NotImplemented if it
 does not implement the operation for a
 given pair of arguments. By
 convention, False and True are
 returned for a successful comparison.
 However, these methods can return any
 value, so if the comparison operator
 is used in a Boolean context (e.g., in
 the condition of an if statement),
 Python will call bool() on the value
 to determine if the result is true or
 false. 
 
 There are no implied relationships
 among the comparison operators. The
 truth of x==y does not imply that x!=y 
 is false. Accordingly, when defining
 __eq__() , one should also define __ne__() so that the operators will behave as expected. See the paragraph
 on __hash__() for some important notes
 on creating hashable objects which
 support custom comparison operations
 and are usable as dictionary keys. 
 
 There are no swapped-argument versions
 of these methods (to be used when the
 left argument does not support the
 operation but the right argument
 does); rather, __lt__() and __gt__() 
 are each other’s reflection, __le__() 
 and __ge__() are each other’s
 reflection, and __eq__() and __ne__() 
 are their own reflection. 
 
 Arguments to rich comparison methods
 are never coerced. 
 

 These were comparisons but since you are chaining comparisons you should know that: 

 
 Comparisons can be chained
 arbitrarily, e.g., x &lt; y &lt;= z is
 equivalent to x &lt; y and y &lt;= z , except
 that y is evaluated only once (but in
 both cases z is not evaluated at all
 when x &lt; y is found to be false). 
 
 Formally, if a, b, c, ..., y, z are
 expressions and op1, op2, ..., opN are
 comparison operators, then a op1 b op2
 c ... y opN z is equivalent to a op1 b
 and b op2 c and ... y opN z, except
 that each expression is evaluated at
 most once. 
 
 #5 As other's mentioned x comparison_operator y comparison_operator z is syntactical sugar for (x comparison_operator y) and (y comparison_operator z) with the bonus that y is only evaluated once. 

 So your expression 0 &lt; 0 == 0 is really (0 &lt; 0) and (0 == 0) , which evaluates to False and True which is just False . 
 #6 Here it is, in all it's glory. 

 &gt;&gt;&gt; class showme(object):
... def __init__(self, name, value):
...  self.name, self.value = name, value
... def __repr__(self):
...  return "&lt;showme %s:%s&gt;" % (self.name, self.value)
... def __cmp__(self, other):
...  print "cmp(%r, %r)" % (self, other)
...  if type(other) == showme:
...  return cmp(self.value, other.value)
...  else:
...  return cmp(self.value, other)
... 
&gt;&gt;&gt; showme(1,0) &lt; showme(2,0) == showme(3,0)
cmp(&lt;showme 1:0&gt;, &lt;showme 2:0&gt;)
False
&gt;&gt;&gt; (showme(1,0) &lt; showme(2,0)) == showme(3,0)
cmp(&lt;showme 1:0&gt;, &lt;showme 2:0&gt;)
cmp(&lt;showme 3:0&gt;, False)
True
&gt;&gt;&gt; showme(1,0) &lt; (showme(2,0) == showme(3,0))
cmp(&lt;showme 2:0&gt;, &lt;showme 3:0&gt;)
cmp(&lt;showme 1:0&gt;, True)
True
&gt;&gt;&gt; 
 
 #7 I'm thinking Python is doing it's weird between magic. Same as 1 &lt; 2 &lt; 3 means 2 is between 1 and 3. 

 In this case, I think it's doing [middle 0] is greater than [left 0] and equal to [right 0]. Middle 0 is not greater than left 0, so it evaluates to false. 
 #8 0 &lt; 0 == 0;
0 is NOT &lt; than 0; 

 (0) &lt; (0 == 0); 
0==0? true, so the value is 1, 0 &lt; 1? true 

 (0 &lt; 0) == 0; 
0 is less than 0? no, return 0; 0 == 0? true 

 0 &lt; (0 == 0)
 same as (0) &lt; (0 == 0) 

 EDIT: 

 When a comparison or something of the kind is true, it returns the value 1, if it is false it returns 0, and the parenthisis are done first. 

 The answer to what you asked is written above, should be sufficient ;)