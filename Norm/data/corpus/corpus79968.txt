Question (ID-79968): Split a string by spaces -- preserving quoted substrings -- in Python I have a string which is like this: 

 this is "a test"
 

 I'm trying to write something in Python to split it up by space while ignoring spaces within quotes. The result I'm looking for is: 

 ['this','is','a test']
 

 PS. I know you are going to ask "what happens if there are quotes within the quotes, well, in my application, that will never happen. 
 Answers (Total-8): #0 You want split, from the shlex module. 

 &gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split('this is "a test"')
['this', 'is', 'a test']
 

 This should do exactly what you want. 
 #1 Have a look at the shlex module, particularly shlex.split . 

 
 &gt;&gt;&gt; import shlex 
 
 &gt;&gt;&gt; shlex.split('This is "a test"') 
 
 ['This', 'is', 'a test'] 
 
 #2 I see regex approaches here that look complex and/or wrong. This surprises me, because regex syntax can easily describe "whitespace or thing-surrounded-by-quotes", and most regex engines (including Python's) can split on a regex. So if you're going to use regexes, why not just say exactly what you mean?: 

 test = 'this is "a test"' # or "this is 'a test'"
# pieces = [p for p in re.split("( |[\\\"'].*[\\\"'])", test) if p.strip()]
# From comments, use this:
pieces = [p for p in re.split("( |\\\".*?\\\"|'.*?')", test) if p.strip()]
 

 Explanation: 

 [\\\"'] = double-quote or single-quote
.* = anything
( |X) = space or X
.strip() = remove space and empty-string separators
 

 shlex probably provides more features, though. 
 #3 Since this question is tagged with regex, I decided to try a regex approach. I first replace all the spaces in the quotes parts with \x00, then split by spaces, then replace the \x00 back to spaces in each part. 

 Both versions do the same thing, but splitter is a bit more readable then splitter2. 

 import re

s = 'this is "a test" some text "another test"'

def splitter(s):
 def replacer(m):
  return m.group(0).replace(" ", "\x00")
 parts = re.sub('".+?"', replacer, s).split()
 parts = [p.replace("\x00", " ") for p in parts]
 return parts

def splitter2(s):
 return [p.replace("\x00", " ") for p in re.sub('".+?"', lambda m: m.group(0).replace(" ", "\x00"), s).split()]

print splitter2(s)
 
 #4 Depending on your use case, you may also want to check out the csv module: 

 import csv
lines = ['this is "a string"', 'and more "stuff"']
for row in csv.reader(lines, delimiter=" "):
 print row
 

 Output: 

 ['this', 'is', 'a string']
['and', 'more', 'stuff']
 
 #5 Try this: 

 def adamsplit(s):
 result = []
 inquotes = False
 for substring in s.split('"'):
  if not inquotes:
  result.append(substring.split())
  else:
  result.append(substring)
  inquotes = not inquotes
 return result
 
 #6 If you don't care about sub strings than a simple 

 &gt;&gt;&gt; 'a short sized string with spaces '.split()
 

 Performance: 

 &gt;&gt;&gt; s = " ('a short sized string with spaces '*100).split() "
&gt;&gt;&gt; t = timeit.Timer(stmt=s)
&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000)
171.39 usec/pass
 

 Or string module 

 &gt;&gt;&gt; from string import split as stringsplit; 
&gt;&gt;&gt; stringsplit('a short sized string with spaces '*100)
 

 Performance: String module seems to perform better than string methods 

 &gt;&gt;&gt; s = "stringsplit('a short sized string with spaces '*100)"
&gt;&gt;&gt; t = timeit.Timer(s, "from string import split as stringsplit")
&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000)
154.88 usec/pass
 

 Or you can use RE engine 

 &gt;&gt;&gt; from re import split as resplit
&gt;&gt;&gt; regex = '\s+'
&gt;&gt;&gt; medstring = 'a short sized string with spaces '*100
&gt;&gt;&gt; resplit(regex, medstring)
 

 Performance 

 &gt;&gt;&gt; s = "resplit(regex, medstring)"
&gt;&gt;&gt; t = timeit.Timer(s, "from re import split as resplit; regex='\s+'; medstring='a short sized string with spaces '*100")
&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t.timeit(number=100000)/100000)
540.21 usec/pass
 

 For very long strings you should not load the entire string into memory and instead either split the lines or use an iterative loop 
 #7 Hmm, can't seem to find the "Reply" button... anyway, this answer is based on the approach by Kate, but correctly splits strings with substrings containing escaped quotes and also removes the start and end quotes of the substrings: 

 [i.strip('"').strip("'") for i in re.split(r'(\s+|(?&lt;!\\)".*?(?&lt;!\\)"|(?&lt;!\\)\'.*?(?&lt;!\\)\')', string) if i.strip()]
 

 This works on strings like 'This is " a \\\"test\\\"\\\'s substring"' (the insane markup is unfortunately necessary to keep Python from removing the escapes). 

 If the resulting escapes in the strings in the returned list are not wanted, you can use this slightly altered version of the function: 

 [i.strip('"').strip("'").decode('string_escape') for i in re.split(r'(\s+|(?&lt;!\\)".*?(?&lt;!\\)"|(?&lt;!\\)\'.*?(?&lt;!\\)\')', string) if i.strip()]