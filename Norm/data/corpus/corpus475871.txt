Question (ID-475871): Python - why use "self" in a class? How do these 2 classes differ? 

 class A():
 x=3

class B():
 def __init__(self):
  self.x=3
 

 Is there any significant difference? 
 Answers (Total-4): #0 A.x is a class variable.
B's self.x is a instance variable. 

 i.e. A's x is shared between instances. 

 It would be easier to demonstrate the difference with something that can be modified like a list: 

 #!/usr/bin/env python

class A:
 x = []

 def add(self):
  self.x.append(1)


class B:
 def __init__(self):
  self.x = []

 def add(self):
  self.x.append(1)


x = A()
y = A()
x.add()
y.add()
print "A's x:",x.x

x = B()
y = B()
x.add()
y.add()
print "B's x:",x.x
 

 Output 

 
 A's x: [1, 1] 
 B's x: [1] 
 
 #1 Just as a side note: self is actually just a randomly chosen word, that everyone uses, but you could also use this , foo , or myself or anything else you want, it's just the first parameter of every non static method for a class. This means that the word self is not a language construct but just a name: 

 &gt;&gt;&gt; class A:
...  def __init__(s):
...  s.bla = 2
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.bla
2
 
 #2 A.x is a class variable, and will be shared across all instances of A, unless specifically overridden within an instance.
B.x is an instance variable, and each instance of B has its own version of it. 

 I hope the following Python example can clarify: 

 
 >>> class Foo():
 ...  i = 3
 ...  def bar(self):
 ...    print 'Foo.i is', Foo.i
 ...    print 'self.i is', self.i
 ... 
 >>> f = Foo() # Create an instance of the Foo class
 >>> f.bar()
 Foo.i is 3
 self.i is 3
 >>> Foo.i = 5 # Change the global value of Foo.i over all instances
 >>> f.bar()
 Foo.i is 5
 self.i is 5
 >>> f.i = 3 # Override this instance's definition of i
 >>> f.bar()
 Foo.i is 5
 self.i is 3
 
 #3 There have been lately some interesting posts regarding the use of self between Bruce Eckel and GvR. Check it out: this vs. this