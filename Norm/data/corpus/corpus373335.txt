Question (ID-373335): Suggestions for a Cron like scheduler in Python? I'm looking for a library in Python which will provide at and cron like functionality. 

 I'd quite like have a pure Python solution, rather than relying on tools installed on the box; this way I run on machines with no cron. 

 For those unfamiliar with cron : you can schedule tasks based upon an expression like: 

 0 2 * * 7 /usr/bin/run-backup # run the backups at 0200 on Every Sunday
 0 9-17/2 * * 1-5 /usr/bin/purge-temps # run the purge temps command, every 2 hours between 9am and 5pm on Mondays to Fridays.
 

 The cron time expression syntax is less important, but I would like to have something with this sort of flexibility. 

 If there isn't something that does this for me out-the-box, any suggestions for the building blocks to make something like this would be gratefully received. 

 Edit 
I'm not interested in launching processes, just "jobs" also written in Python - python functions. By necessity I think this would be a different thread, but not in a different process. 

 To this end, I'm looking for the expressivity of the cron time expression, but in Python. 

 Cron has been around for years, but I'm trying to be as portable as possible. I cannot rely on its presence. 
 Answers (Total-14): #0 You could just use normal Python argument passing syntax to specify your crontab. For example, suppose we define an Event class as below: 

 from datetime import datetime, timedelta
import time

# Some utility classes / functions first
class AllMatch(set):
 """Universal set - match everything"""
 def __contains__(self, item): return True

allMatch = AllMatch()

def conv_to_set(obj): # Allow single integer to be provided
 if isinstance(obj, (int,long)):
  return set([obj]) # Single item
 if not isinstance(obj, set):
  obj = set(obj)
 return obj

# The actual Event class
class Event(object):
 def __init__(self, action, min=allMatch, hour=allMatch, 
      day=allMatch, month=allMatch, dow=allMatch, 
      args=(), kwargs={}):
  self.mins = conv_to_set(min)
  self.hours= conv_to_set(hour)
  self.days = conv_to_set(day)
  self.months = conv_to_set(month)
  self.dow = conv_to_set(dow)
  self.action = action
  self.args = args
  self.kwargs = kwargs

 def matchtime(self, t):
  """Return True if this event should trigger at the specified datetime"""
  return ((t.minute  in self.mins) and
    (t.hour  in self.hours) and
    (t.day  in self.days) and
    (t.month  in self.months) and
    (t.weekday() in self.dow))

 def check(self, t):
  if self.matchtime(t):
   self.action(*self.args, **self.kwargs)
 

 (Note: Not thoroughly tested) 

 Then your CronTab can be specified in normal python syntax as: 

 c = CronTab(
 Event(perform_backup, 0, 2, dow=6 ),
 Event(purge_temps, 0, range(9,18,2), dow=range(0,5))
)
 

 This way you get the full power of Python's argument mechanics (mixing positional and keyword args, and can use symbolic names for names of weeks and months) 

 The CronTab class would be defined as simply sleeping in minute increments, and calling check() on each event. (There are probably some subtleties with daylight savings time / timezones to be wary of though). Here's a quick implementation: 

 class CronTab(object):
 def __init__(self, *events):
  self.events = events

 def run(self):
  t=datetime(*datetime.now().timetuple()[:5])
  while 1:
   for e in self.events:
    e.check(t)

   t += timedelta(minutes=1)
   while datetime.now() &lt; t:
    time.sleep((t - datetime.now()).seconds)
 

 A few things to note: Python's weekdays / months are zero indexed (unlike cron), and that range excludes the last element, hence syntax like "1-5" becomes range(0,5) - ie [0,1,2,3,4]. If you prefer cron syntax, parsing it shouldn't be too difficult however. 
 #1 TurboGears ships with scheduled task capability based on Kronos 

 I've never used Kronos directly, but the scheduling in TG has a decent set of features and is solid. 
 #2 More or less same as above but concurrent using gevent :) 

 """Gevent based crontab implementation"""

from datetime import datetime, timedelta
import gevent

# Some utility classes / functions first
def conv_to_set(obj):
 """Converts to set allowing single integer to be provided"""

 if isinstance(obj, (int, long)):
  return set([obj]) # Single item
 if not isinstance(obj, set):
  obj = set(obj)
 return obj

class AllMatch(set):
 """Universal set - match everything"""
 def __contains__(self, item): 
  return True

allMatch = AllMatch()

class Event(object):
 """The Actual Event Class"""

 def __init__(self, action, minute=allMatch, hour=allMatch, 
      day=allMatch, month=allMatch, daysofweek=allMatch, 
      args=(), kwargs={}):
  self.mins = conv_to_set(minute)
  self.hours = conv_to_set(hour)
  self.days = conv_to_set(day)
  self.months = conv_to_set(month)
  self.daysofweek = conv_to_set(daysofweek)
  self.action = action
  self.args = args
  self.kwargs = kwargs

 def matchtime(self, t1):
  """Return True if this event should trigger at the specified datetime"""
  return ((t1.minute  in self.mins) and
    (t1.hour  in self.hours) and
    (t1.day  in self.days) and
    (t1.month  in self.months) and
    (t1.weekday() in self.daysofweek))

 def check(self, t):
  """Check and run action if needed"""

  if self.matchtime(t):
   self.action(*self.args, **self.kwargs)

class CronTab(object):
 """The crontab implementation"""

 def __init__(self, *events):
  self.events = events

 def _check(self):
  """Check all events in separate greenlets"""

  t1 = datetime(*datetime.now().timetuple()[:5])
  for event in self.events:
   gevent.spawn(event.check, t1)

  t1 += timedelta(minutes=1)
  s1 = (t1 - datetime.now()).seconds + 1
  print "Checking again in %s seconds" % s1
  job = gevent.spawn_later(s1, self._check)

 def run(self):
  """Run the cron forever"""

  self._check()
  while True:
   gevent.sleep(60)

import os 
def test_task():
 """Just an example that sends a bell and asd to all terminals"""

 os.system('echo asd | wall') 

cron = CronTab(
 Event(test_task, 22, 1 ),
 Event(test_task, 0, range(9,18,2), daysofweek=range(0,5)),
)
cron.run()
 
 #3 One thing that in my searches I've seen is python's sched module which might be the kind of thing you're looking for. 
 #4 Check out Celery , they have periodic tasks like cron. 
 #5 maybe this has come up only after the question was asked; I thought I just mention it for completeness sake: http://packages.python.org/APScheduler/ 
 #6 There isn't a "pure python" way to do this because some other process would have to launch python in order to run your solution. Every platform will have one or twenty different ways to launch processes and monitor their progress. On unix platforms, cron is the old standard. On Mac OS X there is also launchd, which combines cron-like launching with watchdog functionality that can keep your process alive if that's what you want. Once python is running, then you can use the sched module to schedule tasks. 
 #7 Just in case, if you are using windows, there exists a pycron. Check out http://sourceforge.net/projects/pycron/ .
For linux,I will go by either cron or sched. 
 #8 I have a minor fix for the CronTab class run method avove. 

 The timing was out by one second leading to a one-second, hard loop at the end of each minute. 

 class CronTab(object):
 def __init__(self, *events):
  self.events = events

 def run(self):
  t=datetime(*datetime.now().timetuple()[:5])
  while 1:
   for e in self.events:
    e.check(t)

   t += timedelta(minutes=1)
   n = datetime.now()
   while n &lt; t:
    s = (t - n).seconds + 1
    time.sleep(s)
    n = datetime.now()
 
 #9 Thanks Brain, it's very elegant way.
But there is a subtle bug in following code: 

   t += timedelta(minutes=1)
  while datetime.now() &lt; t:
   time.sleep((t - datetime.now()).seconds)
 

 It's possible to get t &lt; datetime.now() in the 'while' block and fall asleep for a long time. Accidentally, I've been caught in this trap. 
 #10 You can also try this: http://bitbucket.org/marnold/py-cron 
 #11 Brian's solution is working quite well. However, as others have pointed out, there is a subtle bug in the run code. Also i found it overly complicated for the needs. 

 Here is my simpler and functional alternative for the run code in case anybody needs it: 

 def run(self):
 while 1:
  t = datetime.now()
  for e in self.events:
   e.check(t)

  time.sleep(60 - t.second - t.microsecond / 1000000.0)
 
 #12 I took Brian's solution, made a few changes, added the beginnings of a standard crontab file parser, and put it at https://bitbucket.org/dbenamy/devcron . 
 #13 I don't know if something like that already exists. It would be easy to write your own with time, datetime and/or calendar modules, see http://docs.python.org/library/time.html 

 The only concern for a python solution is that your job needs to be always running and possibly be automatically "resurrected" after a reboot, something for which you do need to rely on system dependent solutions.