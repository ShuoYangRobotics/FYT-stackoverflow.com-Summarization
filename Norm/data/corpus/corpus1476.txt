Question (ID-1476): How do you express binary literals in Python? How do you express an integer as a binary number with Python literals? 

 I was easily able to find the answer for hex: 

  &gt;&gt;&gt; 0x12AF
 4783
 &gt;&gt;&gt; 0x100
 256
 

 and, octal: 

  &gt;&gt;&gt; 01267
 695
 &gt;&gt;&gt; 0100
 64
 

 How do you use literals to express binary in Python? 

 

 Summary of Answers 

 
 Python 2.5 and earlier: can express binary using int('01010101111',2) but not with a literal. 
 Python 2.5 and earlier: there is no way to express binary literals. 
 Python 2.6 beta: You can do like so: 0b1100111 or 0B1100111 . 
 Python 2.6 beta: will also allow 0o27 or 0O27 (second character is the letter O) to represent an octal. 
 Python 3.0 beta: Same as 2.6, but will no longer allow the older 027 syntax for octals. 
 
 Answers (Total-5): #0 For reference&mdash; future Python possibilities: 
Starting with Python 2.6 you can express binary literals using the prefix 0b or 0B : 

 &gt;&gt;&gt; 0b101111
47
 

 You can also use the new bin function to get the binary representation of a number: 

 &gt;&gt;&gt; bin(173)
'0b10101101'
 

 Development version of the documentation: What's New in Python 2.6 
 #1 &gt;&gt;&gt; print int('01010101111',2) 687 &gt;&gt;&gt; print int('11111111',2) 255 

 Another way. 

 edit: Apparently the only way. Since the other way doesn't actually work.  #2 There is no way you can express binary literals (or rather integers as binary):
 here's a link to language reference on that matter 
 #3 As far as I can tell Python, up through 2.5, only supports hexadecimal &amp; octal literals. I did find some discussions about adding binary to future versions but nothing definite. #4 I am pretty sure this is one of the things due to change in Python 3.0 with perhaps bin() to go with hex() and oct(). 

 EDIT:
lbrandy's answer is correct in all cases.