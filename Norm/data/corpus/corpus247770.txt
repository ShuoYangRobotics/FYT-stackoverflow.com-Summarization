Question (ID-247770): Retrieving python module path I want to detect whether module has changed. Now, using inotify is simple, you just need to know the directory you want to get notifications from. 

 How do I retrieve a module's path in python? 
 Answers (Total-4): #0 import a_module
print a_module.__file__
 

 Will actually give you the path to the .pyc file that was loaded, at least on Mac OS X. So I guess you can do 

 import os
path = os.path.dirname(amodule.__file__)
 

 To get the directory to look for changes. 
 #1 This was trivial. 

 Each module has a __file__ variable that shows its relative path from where you are right now. 

 Therefore, getting a directory for the module to notify it is simple as: 

 os.path.dirname(__file__)
 
 #2 import os
path = os.path.abspath(__file__)
dir_path = os.path.dirname(path)
 
 #3 As the other answers have said, the best way to do this is with __file__ (demonstrated again below). However, there is an important caveat, which is that __file__ does NOT exist if you are running the module on its own (i.e. as __main__ ). 

 For example, say you have two files (both of which are on your PYTHONPATH): 

 #/path1/foo.py
import bar
print bar.__file__
 

 and 

 #/path2/bar.py
import os
print os.getcwd()
print __file__
 

 Running foo.py will give the output: 

 /path1  # "import bar" causes the line "print os.getcwd()" to run
/path2/bar.py # then "print __file__" runs
/path2/bar.py # then the import statement finishes and "print bar.__file__" runs
 

 HOWEVER if you try to run bar.py on its own, you will get: 

 /path2        # "print os.getcwd()" still works fine
Traceback (most recent call last): # but __file__ doesn't exist if bar.py is running as main
 File "/path2/bar.py", line 3, in &lt;module&gt;
 print __file__
NameError: name '__file__' is not defined 
 

 Hope this helps. This caveat cost me a lot of time and confusion while testing the other solutions presented.