Question (ID-111234): What is a "callable" in Python? Now that it's clear what a metaclass is , there is an associated concept that I use all the time without knowing what it really means. 

 I suppose everybody made once a mistake with parenthesis, resulting in an "object is not callable" exception. What's more, using __init__ and __new__ lead to wonder what this bloody __call__ can be used for. 

 Could you give me some explanations, including examples with the magic method ? 
 Answers (Total-11): #0 A callable is anything that can be called. 

 The buildin callable (PyCallable_Check in objects.c) checks if the argument is either: 

 
 an instance of a class with a __call__ method or 
 is of a type that has a non null tp_call (c struct) member which indicates callability otherwise (such as in functions, methods etc.) 
 

 The method named __call__ is ( according to the documentation ) 

 
 Called when the instance is ``called'' as a function 
 

 Example 

 class Foo:
 def __call__(self):
 print 'called'

foo_instance = Foo()
foo_instance() #this is calling the __call__ method
 
 #1 From Python's sources object.c : 

 /* Test whether an object can be called */

int
PyCallable_Check(PyObject *x)
{
 if (x == NULL)
  return 0;
 if (PyInstance_Check(x)) {
  PyObject *call = PyObject_GetAttrString(x, "__call__");
  if (call == NULL) {
   PyErr_Clear();
   return 0;
  }
  /* Could test recursively but don't, for fear of endless
   recursion if some joker sets self.__call__ = self */
  Py_DECREF(call);
  return 1;
 }
 else {
  return x-&gt;ob_type-&gt;tp_call != NULL;
 }
}
 

 It says: 

 
 If an object is an instance of some class then it is callable iff it has __call__ attribute. 
 Else the object x is callable iff x-&gt;ob_type-&gt;tp_call != NULL 
 

 Desciption of tp_call field : 

 
 ternaryfunc tp_call An optional
 pointer to a function that implements
 calling the object. This should be
 NULL if the object is not callable.
 The signature is the same as for
 PyObject_Call(). This field is
 inherited by subtypes. 
 

 You can always use built-in callable function to determine whether given object is callable or not; or better yet just call it and catch TypeError later. callable is removed in Python 3.0 and 3.1, use callable = lambda o: hasattr(o, '__call__') or isinstance(o, collections.Callable) . 

 Example, a simplistic cache implementation: 

 class Cached:
 def __init__(self, function):
  self.function = function
  self.cache = {}

 def __call__(self, *args):
  try: return self.cache[args]
  except KeyError:
   ret = self.cache[args] = self.function(*args)
   return ret 
 

 Usage: 

 @Cached
def ack(x, y):
 return ack(x-1, ack(x, y-1)) if x*y else (x + y + 1) 
 

 Example from standard library, file site.py , definition of built-in exit() and quit() functions: 

 class Quitter(object):
 def __init__(self, name):
  self.name = name
 def __repr__(self):
  return 'Use %s() or %s to exit' % (self.name, eof)
 def __call__(self, code=None):
  # Shells like IDLE catch the SystemExit, but listen when their
  # stdin wrapper is closed.
  try:
   sys.stdin.close()
  except:
   pass
  raise SystemExit(code)
__builtin__.quit = Quitter('quit')
__builtin__.exit = Quitter('exit')
 
 #2 @ Kevin Little : That is wrong. __call__ of the object type is called. And because it's a descriptor, it doesn't show up in dir() : 

 &gt;&gt;&gt; type(int).__call__(int)
0
&gt;&gt;&gt; type(object).__call__(object)
&lt;object object at 0x523460&gt;
 
 #3 A callable is an object allows you to use round parenthesis ( ) and eventually pass some parameters, just like functions. 

 Every time you define a function python creates a callable object. 
In example, you could define the function func in these ways (it's the same): 

 class a(object):
 def __call__(self, *args):
  print 'Hello'

func = a()

# or ... 
def func(*args):
 print 'Hello'
 

 You could use this method instead of methods like doit or run , I think it's just more clear to see obj() than obj.doit() 
 #4 A Callable is an object that has the __call__ method. This means you can fake callable functions or do neat things like Partial Function Application where you take a function and add something that enhances it or fills in some of the parameters, returning something that can be called in turn (known as Currying in functional programming circles). 

 Certain typographic errors will have the interpreter attempting to call something you did not intend, such as (for example) a string. This can produce errors where the interpreter attempts to execute a non-callable application. You can see this happening in a python interpreter by doing something like the transcript below. 

 [nigel@k9 ~]$ python
Python 2.5 (r25:51908, Nov 6 2007, 15:55:44) 
[GCC 4.1.2 20070925 (Red Hat 4.1.2-27)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 'aaa'() # &lt;== Here we attempt to call a string.
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object is not callable
&gt;&gt;&gt;
 
 #5 Quite simply, a "callable" is something that can be called like a method. The built in function "callable()" will tell you whether something appears to be callable, as will checking for a call property. Functions are callable as are classes, class instances can be callable. See more about this here and here . 
 #6 __call__ makes any object be callable as a function. 

 This example will output 8: 

 class Adder(object):
 def __init__(self, val):
 self.val = val

 def __call__(self, val):
 return self.val + val

func = Adder(5)
print func(3)
 
 #7 Guy, "callable is something than can be called" is not really a good definition, do you realize that ? It's like saying that a voting machine is a machine that allow you to vote, that does not add any value. 
 #8 In Python a callable is an object which type has a __call__ method: 

 &gt;&gt;&gt; class Foo:
... pass
... 
&gt;&gt;&gt; class Bar(object):
... pass
... 
&gt;&gt;&gt; type(Foo).__call__(Foo)
&lt;__main__.Foo instance at 0x711440&gt;
&gt;&gt;&gt; type(Bar).__call__(Bar)
&lt;__main__.Bar object at 0x712110&gt;
&gt;&gt;&gt; def foo(bar):
... return bar
... 
&gt;&gt;&gt; type(foo).__call__(foo, 42)
42
 

 As simple as that :) 

 This of course can be overloaded: 

 &gt;&gt;&gt; class Foo(object):
... def __call__(self):
... return 42
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f()
42
 
 #9 It's something you can put "(args)" after and expect it to work. A callable is usually a method or a class. Methods get called, classes get instantiated. 
 #10 Good examples here .