Question (ID-1937622): Convert date to datetime in Python Silly question, but is there a built-in method for converting a date to a datetime in Python, ie. getting the datetime for the midnight of the date ? The opposite conversion is easy - datetime has a .date() method. Do I really have to manually call datetime(d.year, d.month, d.day) ? 

 Edit: and the winner is: 

 datetime.combine(d, time())
 
 Answers (Total-4): #0 You can use datetime.combine(date, time) ; for the time you create a datetime.time object initialized to midnight. 
 #1 yeah, you pretty much do. you can use the timetuple() method and varargs though: 

 datetime.datetime(*(d.timetuple()[:6]))
 
 #2 There are several ways, although I do believe the one you mention (and dislike) is the most readable one. 

 &gt;&gt;&gt; t=datetime.date.today()
&gt;&gt;&gt; datetime.datetime.fromordinal(t.toordinal())
datetime.datetime(2009, 12, 20, 0, 0)
&gt;&gt;&gt; datetime.datetime(t.year, t.month, t.day)
datetime.datetime(2009, 12, 20, 0, 0)
&gt;&gt;&gt; datetime.datetime(*t.timetuple()[:-4])
datetime.datetime(2009, 12, 20, 0, 0)
 

 and so forth -- but basically they all hinge on appropriately extracting info from the date object and ploughing it back into the suitable ctor or classfunction for datetime . 
 #3 If you need something quick: 

 datetime_object.date() 

 Gives you a date of a datetime object.