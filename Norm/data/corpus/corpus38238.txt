Question (ID-38238): What are Class methods in Python for? I'm teaching myself Python and my most recent lesson was that Python is not Java , and so I've just spent a while turning all my Class methods into functions. 

 I now realise that I don't need to use Class methods for what I would done with static methods in Java, but now I'm not sure when I would use them. All the advice I can find about Python Class methods is along the lines of newbies like me should steer clear of them, and the standard documentation is at its most opaque when discussing them. 

 Does anyone have a good example of using a Class method in Python or at least can someone tell me when Class methods can be sensibly used? 
 Answers (Total-10): #0 Class methods are for when you need to have methods that aren't specific to any particular instance, but still involve the class in some way. The most interesting thing about them is that they can be overridden by subclasses, something that's simply not possible in Java's static methods or Python's module-level functions. 

 If you have a class MyClass , and a module-level function that operates on MyClass (factory, dependency injection stub, etc), make it a classmethod . Then it'll be available to subclasses. 
 #1 Factory methods (alternative constructors) are indeed a classic example of class methods. 

 Basically, class methods are suitable anytime you need would like to have a method which naturally fits into the namespace of the class, but is not associated with a particular instance of the class. 

 As an example, in the excelent unipath module: 

 Current directory 

 
 Path.cwd()
 
 Return the actual current directory; e.g., Path("/tmp/my_temp_dir"). This is a class method. 
 
 .chdir()
 
 Make self the current directory. 
 
 

 As the current directory is process wide, the cwd method has no particular instance with which it should be associated. However, changing the cwd to the directory of a given Path instance should indeed be an instance method. 

 Hmmm... as Path.cwd() does indeed return a Path instance, I guess it could be considered to be a factory method... 
 #2 Alternative constructors are the classic example. 
 #3 Think about it this way: normal methods are useful to hide the details of dispatch: you can type myobj.foo() without worrying about whether the foo() method is implemented by the myobj object's class or one of its parent classes. Class methods are exactly analogous to this, but with the class object instead: they let you call MyClass.foo() without having to worry about whether foo() is implemented specially by MyClass because it needed its own specialized version, or whether it is letting its parent class handle the call. 

 Class methods are essential when you are doing set-up or computation that precedes the creation of an actual instance, because until the instance exists you obviously cannot use the instance as the dispatch point for your method calls. A good example can be viewed in the SQLAlchemy source code; take a look at the dbapi() class method at the following link: 

 http://hg.sqlalchemy.org/sqlalchemy/file/230819db717a/lib/sqlalchemy/dialects/mssql/pymssql.py 

 You can see that the dbapi() method, which a database backend uses to import the vendor-specific database library it needs on-demand, is a class method because it needs to run before instances of a particular database connection start getting created â€” but that it cannot be a simple function or static function, because they want it to be able to call other, supporting methods that might similarly need to be written more specifically in subclasses than in their parent class. And if you dispatch to a function or static class, then you "forget" and lose the knowledge about which class is doing the initializing. 
 #4 I recently wanted a very light-weight logging class that would output varying amounts of output depending on the logging level that could be programmatically set. But I didn't want to instantiate the class every time I wanted to output a debugging message or error or warning. But I also wanted to encapsulate the functioning of this logging facility and make it reusable without the declaration of any globals. 

 So I used class variables and the @classmethod decorator to achieve this. 

 With my simple Logging class, I could do the following: 

 Logger._level = Logger.DEBUG
 

 Then, in my code, if I wanted to spit out a bunch of debugging information, I simply had to code 

 Logger.debug( "this is some annoying message I only want to see while debugging" )
 

 Errors could be out put with 

 Logger.error( "Wow, something really awful happened." )
 

 In the "production" environment, I can specify 

 Logger._level = Logger.ERROR
 

 and now, only the error message will be output. The debug message will not be printed. 

 Here's my class: 

 class Logger :
 ''' Handles logging of debugging and error messages. '''

 DEBUG = 5
 INFO = 4
 WARN = 3
 ERROR = 2
 FATAL = 1
 _level = DEBUG

 def __init__( self ) :
  Logger._level = Logger.DEBUG

 @classmethod
 def isLevel( cls, level ) :
  return cls._level &gt;= level

 @classmethod
 def debug( cls, message ) :
  if cls.isLevel( Logger.DEBUG ) :
   print "DEBUG: " + message

 @classmethod
 def info( cls, message ) :
  if cls.isLevel( Logger.INFO ) :
   print "INFO : " + message

 @classmethod
 def warn( cls, message ) :
  if cls.isLevel( Logger.WARN ) :
   print "WARN : " + message

 @classmethod
 def error( cls, message ) :
  if cls.isLevel( Logger.ERROR ) :
   print "ERROR: " + message

 @classmethod
 def fatal( cls, message ) :
  if cls.isLevel( Logger.FATAL ) :
   print "FATAL: " + message
 

 And some code that tests it just a bit: 

 def logAll() :
 Logger.debug( "This is a Debug message." )
 Logger.info ( "This is a Info message." )
 Logger.warn ( "This is a Warn message." )
 Logger.error( "This is a Error message." )
 Logger.fatal( "This is a Fatal message." )

if __name__ == '__main__' :

 print "Should see all DEBUG and higher"
 Logger._level = Logger.DEBUG
 logAll()

 print "Should see all ERROR and higher"
 Logger._level = Logger.ERROR
 logAll()
 
 #5 Honestly? I've never found a use for staticmethod or classmethod. I've yet to see an operation that can't be done using a global function or an instance method. 

 It would be different if python used private and protected members more like Java does. In Java, I need a static method to be able to access an instance's private members to do stuff. In Python, that's rarely necessary. 

 Usually, I see people using staticmethods and classmethods when all they really need to do is use python's module-level namespaces better. 
 #6 I used to work with PHP and recently I was asking myself, whats going on with this classmethod? Python manual is very technical and very short in words so it wont help with understanding that feature. I was googling and googling and I found answer -> http://code.anjanesh.net/2007/12/python-classmethods.html . 

 If you are lazy to click it. My explanation is shorter and below. :) 

 in PHP (maybe not all of you know PHP, but this language is so straight forward that everybody should understand what I'm talking about) we have static variables like this: 

 
class A
{

 static protected $inner_var = null;

 static public function echoInnerVar()
 {
  echo self::$inner_var."\n";
 }

 static public function setInnerVar($v)
 {
  self::$inner_var = $v;
 }

}

class B extends A
{
}

A::setInnerVar(10);
B::setInnerVar(20);

A::echoInnerVar();
B::echoInnerVar();
 

 The output will be in both cases 20. 

 However in python we can add @classmethod decorator and thus it is possible to have output 10 and 20 respectively. Example: 

 
class A(object):
 inner_var = 0

 @classmethod
 def setInnerVar(cls, value):
  cls.inner_var = value

 @classmethod
 def echoInnerVar(cls):
  print cls.inner_var


class B(A):
 pass


A.setInnerVar(10)
B.setInnerVar(20)

A.echoInnerVar()
B.echoInnerVar()
 

 Smart, ain't? 
 #7 Class methods provide a "semantic sugar" (don't know if this term is widely used) - or "semantic convenience". 

 Example: you got a set of classes representing objects. You might want to have the class method "all" or "find" to write "User.all()" ou "User.find(firstname='Guido')". That could be done using module level functions of course... 
 #8 I think the most clear answer is AmanKow's one. It boils down to how u want to organize your code. You can write everything as module level functions which are wrapped in the namespace of the module i.e 

 module.py (define file 1)
---------
def f1() : pass
def f2() : pass
def f3() : pass


usage.py (consume file 2)
--------
import module
f1()
f2()
f3()
def f4():pass in 
def f5():pass

usage1.py (consume file 3)
-------------------
import usage
f4()
f5()
 

 The above procedural code is not well organized, as you can see after only 3 modules it gets confusing, what is each method do ? You can use long descriptive names for functions(like in java) but still your code gets unmanageable very quick. 

 The object oriented way is to break down your code into manageable blocks i.e Classes &amp; objects and functions can be associated with objects instances or with classes. 

 With class functions you gain another level of division in your code compared with module level functions.
So you can group related functions within a class to make them more specific to a task that you assigned to that class. For example you can create a file utility class : 

 class FileUtil ():
 def copy(source,dest):pass
 def move(source,dest):pass
 def copyDir(source,dest):pass
 def moveDir(source,dest):pass

//usage
FileUtil.copy("1.txt","2.txt")
FileUtil.moveDir("dir1","dir2")
 

 This way is more flexible and more maintainable, you group functions together and its more obvious to what each function do. Also you prevent name conflicts, for example the function copy may exist in another imported module(for example network copy) that you use in your code, so when you use the full name FileUtil.copy() you remove the problem and both copy functions can be used side by side. 
 #9 If you are interested in using class methods in Python, you might want to consider some examples here .