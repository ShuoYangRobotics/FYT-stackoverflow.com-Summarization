Question (ID-1849311): How should I organize Python source code? I'm getting started with Python (it's high time I give it a shot), and I'm looking for some best practices. 

 My first project is a queue which runs command-line experiments in multiple threads. I'm starting to get a very long main.py file, and I'd like to break it up. In general, I'm looking for: How do python programmers organize multiple source files? Is there a particular structure that works for you? 

 My specific questions include: 

 
 Should each class be in a separate file? 
 How should I organize unit tests relative to source code? 
 Where should I put doc comments, specifically those for command-line operation? 
 If I use multiple directories, how do I import classes between them? 
 

 I can probably draw some of my own conclusions here by trial and error, but I'd rather start from something good . 
 Answers (Total-2): #0 I found this article super-helpful while addressing the same problem so hopefully it helps you: 

 http://infinitemonkeycorps.net/docs/pph/ 
 #1 The way you should organise your code and tests is exactly the same you would for any OO language. 

 Answers from the way I do it. It may not be right but works for me 

 
 Depends on how your functionality is split. For my main python app I have 1 file with classes for the entry points and then packages of different bits of functionality 
 I use PyDev for eclipse and organise it like I would for Java. 
 

 
 &gt; Workspace
&gt;  |
&gt;  |-Src
&gt;  | |-Package1
&gt;  | |-Package2
&gt;  | |-main.py
&gt;  |-Test
&gt;   |-TestPackage1
&gt;   |-TestPackage2
 
 

 
 Use DocString everywhere to keep track of everything 
 After making sure that the relevant init .py files are in the folders. its just a simple case of from module import class