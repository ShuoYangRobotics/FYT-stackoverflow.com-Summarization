Question (ID-1410976): Equivalent of Backticks in Python What is the equivalent of the backticks found in Ruby and Perl in Python? That is, in Ruby I can do this: 

 foo = `cat /tmp/baz`
 

 What does the equivalent statement look like in Python? I've tried os.system("cat /tmp/baz") but that puts the result to standard out and returns to me the error code of that operation. 
 Answers (Total-7): #0 The most flexible way is to use the subprocess module: 

 import subprocess

proc = subprocess.Popen(["cat", "/tmp/baz"], stdout=subprocess.PIPE, shell=True)
(out, err) = proc.communicate()
print "program output:", out
 
 #1 os.popen('cat /tmp/baz').read()
 
 #2 sth is right. You can also use os.popen(), but where available (Python 2.4+) subprocess is generally preferable. 

 However, unlike some languages that encourage it, it's generally considered bad form to spawn a subprocess where you can do the same job inside the language. It's slower, less reliable and platform-dependent. Your example would be better off as: 

 foo= open('/tmp/baz').read()
 

 eta: 

 
 baz is a directory and I'm trying to get the contents of all the files in that directory 
 

 ? cat on a directory gets me an error. 

 If you want a list of files: 

 import os
foo= os.listdir('/tmp/baz')
 

 If you want the contents of all files in a directory, something like: 

 contents= []
for leaf in os.listdir('/tmp/baz'):
 path= os.path.join('/tmp/baz', leaf)
 if os.path.isfile(path):
  contents.append(open(path, 'rb').read())
foo= ''.join(contents)
 

 or, if you can be sure there are no directories in there, you could fit it in a one-liner: 

 path= '/tmp/baz'
foo= ''.join(open(os.path.join(path, child), 'rb').read() for child in os.listdir(path))
 
 #3 import os
foo = os.popen('cat /tmp/baz', 'r').read()
 
 #4 If you use subprocess.Popen, remember to specify bufsize. The default is 0, which means "unbuffered", not "choose a reasonable default". 
 #5 I'm using 

 
 (6:0)$ python --version
 Python 2.7.1 
 

 One of the examples above is: 

 import subprocess
proc = subprocess.Popen(["cat", "/tmp/baz"], stdout=subprocess.PIPE, shell=True)
(out, err) = proc.communicate()
print "program output:", out
 

 For me, this failed to access the directory /tmp. After looking at the doc string for subprocess I replaced 

 
 [ "prog", "arg"] 
 

 with 

 
 "prog arg" 
 

 and got the shell expansion behavior that was desired (a la Perl's `prog arg`) 

 
 print subprocess.Popen("ls -ld /tmp/v*", stdout=subprocess.PIPE, shell=True).communicate()[0] 
 

 

 I quit using python a while back because I was annoyed with the difficulty of of doing the equivalent of perl `cmd ...`. I'm glad to find Python has made this reasonable. 
 #6 foo = subprocess.check_output(["cat", "/tmp/baz"])