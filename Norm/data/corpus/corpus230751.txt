Question (ID-230751): How to flush output of Python print? I would like to force Python's print function to output to the screen. 
 Answers (Total-7): #0 import sys
sys.stdout.flush()
 

 print by default prints to sys.stdout 

 References: 

 
 http://docs.python.org/reference/simple_stmts.html#the-print-statement 
 http://docs.python.org/library/sys.html 
 http://docs.python.org/library/stdtypes.html#file-objects 
 
 #1 Running python -h , I see a command line option : 

 
 -u  : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x
   see man page for details on internal buffering relating to '-u' 
 

 Here is the relevant doc . 
 #2 Dan's idea doesn't quite work: 

 #!/usr/bin/env python
class flushfile(file):
 def __init__(self, f):
  self.f = f
 def write(self, x):
  self.f.write(x)
  self.f.flush()

import sys
sys.stdout = flushfile(sys.stdout)

print "foo"
 

 The result: 

 Traceback (most recent call last):
 File "./passpersist.py", line 12, in &lt;module&gt;
 print "foo"
ValueError: I/O operation on closed file
 

 I believe the problem is that it inherits from the file class, which actually isn't necessary. According to the docs for sys.stdout: 

 
 stdout and stderr neednâ€™t be built-in
 file objects: any object is acceptable
 as long as it has a write() method
 that takes a string argument. 
 

 so changing 

 class flushfile(file):
 

 to 

 class flushfile(object):
 

 makes it work just fine. 
 #3 Using the -u command-line switch works, but it is a little bit clumsy in my opinion. I usually use a custom stdout, like this: 

 class flushfile(file):
 def __init__(self, f):
 self.f = f
 def write(self, x)
 self.f.write(x)
 self.f.flush()

import sys
sys.stdout = flushfile(sys.stdout)
 

 ... Now all your print calls (which use sys.stdout implicitly), will be automatically flush ed. 
 #4 Why not try using an unbuffered file? 

 f = open('xyz.log', 'a', 0) 

 OR 

 sys.stdout = open('out.log', 'a' 0) 
 #5 Loved Dan's solution! For python3 do: 

 import io,sys
class flushfile(io.TextIOWrapper):
 def __init__(self, f):
  self.f = f
 def write(self, x):
  self.f.write(x)
  self.f.flush()
sys.stdout = flushfile(sys.stdout)
 
 #6 Here is my version, which provides writelines() and fileno(), too: 

 class Flushfile(object):
 def __init__(self, fd):
  self.fd = fd

 def write(self, x):
  ret=self.fd.write(x)
  self.fd.flush()
  return ret

 def writelines(self, lines):
  ret=self.writelines(line)
  self.fd.flush()
  return ret

 def flush(self):
  return self.fd.flush

 def close(self):
  return self.fd.close()

 def fileno(self):
  return self.fd.fileno()