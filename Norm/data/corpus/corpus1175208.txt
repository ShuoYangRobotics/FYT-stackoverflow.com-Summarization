Question (ID-1175208): Does the python standard library have function to convert CamelCase to camel_case? Example: 

 &gt;&gt;&gt; convert('CamelCase')
camel_case
 
 Answers (Total-8): #0 This is pretty thorough: 

 def convert(name):
 s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
 return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()
 

 Works with all these (and doesn't harm already-un-cameled versions): 

 &gt;&gt;&gt; convert('CamelCase')
'camel_case'
&gt;&gt;&gt; convert('CamelCamelCase')
'camel_camel_case'
&gt;&gt;&gt; convert('Camel2Camel2Case')
'camel2_camel2_case'
&gt;&gt;&gt; convert('getHTTPResponseCode')
'get_http_response_code'
&gt;&gt;&gt; convert('get2HTTPResponseCode')
'get2_http_response_code'
&gt;&gt;&gt; convert('HTTPResponseCode')
'http_response_code'
&gt;&gt;&gt; convert('HTTPResponseCodeXYZ')
'http_response_code_xyz'
 

 Or if you're going to call it a zillion times, you can pre-compile the regexes: 

 first_cap_re = re.compile('(.)([A-Z][a-z]+)')
all_cap_re = re.compile('([a-z0-9])([A-Z])')
def convert(name):
 s1 = first_cap_re.sub(r'\1_\2', name)
 return all_cap_re.sub(r'\1_\2', s1).lower()
 
 #1 Here's my solution: 

 def un_camel(text):
 """ Converts a CamelCase name into an under_score name. 

  &gt;&gt;&gt; un_camel('CamelCase')
  'camel_case'
  &gt;&gt;&gt; un_camel('getHTTPResponseCode')
  'get_http_response_code'
 """
 result = []
 pos = 0
 while pos &lt; len(text):
  if text[pos].isupper():
   if pos-1 &gt; 0 and text[pos-1].islower() or pos-1 &gt; 0 and \
   pos+1 &lt; len(text) and text[pos+1].islower():
    result.append("_%s" % text[pos].lower())
   else:
    result.append(text[pos].lower())
  else:
   result.append(text[pos])
  pos += 1
 return "".join(result)
 

 It supports those corner cases discussed in the comments. For instance, it'll convert getHTTPResponseCode to get_http_response_code like it should. 
 #2 Not in the standard library, but I found this script that appears to contain the functionality you need. 
 #3 For the fun of it: 

 &gt;&gt;&gt; def un_camel(input):
...  output = [input[0].lower()]
...  for c in input[1:]:
...    if c in ('ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
...      output.append('_')
...      output.append(c.lower())
...    else:
...      output.append(c)
...  return str.join('', output)
...
&gt;&gt;&gt; un_camel("camel_case")
'camel_case'
&gt;&gt;&gt; un_camel("CamelCase")
'camel_case'
 

 Or, more for the fun of it: 

 &gt;&gt;&gt; un_camel = lambda i: i[0].lower() + str.join('', ("_" + c.lower() if c in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" else c for c in i[1:]))
&gt;&gt;&gt; un_camel("camel_case")
'camel_case'
&gt;&gt;&gt; un_camel("CamelCase")
'camel_case'
 
 #4 ''.join('_'+c.lower() if c.isupper() else c for c in "DeathToCamelCase").strip('_')
re.sub("(.)([A-Z])", r'\1_\2', 'DeathToCamelCase').lower()
 
 #5 A horrendous example using regular expressions (you could easily clean this up :) ): 

 def f(s):
 return s.group(1).lower() + "_" + s.group(2).lower()

p = re.compile("([A-Z]+[a-z]+)([A-Z]?)")
print p.sub(f, "CamelCase")
print p.sub(f, "getHTTPResponseCode")
 

 Works for getHTTPResponseCode though! 

 Alternatively, using lambda: 

 p = re.compile("([A-Z]+[a-z]+)([A-Z]?)")
print p.sub(lambda x: x.group(1).lower() + "_" + x.group(2).lower(), "CamelCase")
print p.sub(lambda x: x.group(1).lower() + "_" + x.group(2).lower(), "getHTTPResponseCode")
 

 EDIT: It should also be pretty easy to see that there's room for improvement for cases like "Test", because the underscore is unconditionally inserted. 
 #6 Very nice RegEx proposed on this site : 



 (?&amp;#60;!^)(?=[A-Z])
 

 If python have a String Split method, it shoud work... 

 In Java: 



 String s = "loremIpsum";
words = s.split("(?&amp;#60;!^)(?=[A-Z])");
 
 #7 Wow I just stole this from django snippets. ref http://djangosnippets.org/snippets/585/ 

 Pretty elegant 

 camelcase_to_underscore = lambda str: re.sub('(((?&lt;=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', '_\\1', str).lower().strip('_')
 

 Example: 

 camelcase_to_underscore('ThisUser')
 

 Returns: 

 'this_user'