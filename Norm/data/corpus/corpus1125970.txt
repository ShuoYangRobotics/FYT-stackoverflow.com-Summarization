Question (ID-1125970): Python documentation generator I'm looking for a documentation generator for python. I'm familiar with javadoc , and I tried Doxygen , but it seems quite unfit and counter-intuitive for Python. 

 Any ideas? 

 Adam
 EDIT 
Apart from the excellent answers below, you can also consult wikipedia's exhaustive Comparison of documentation generators . 
 Answers (Total-7): #0 The classic tool for API doc is epydoc . It handles javadoc, docstrings, etc... But I find API docs tools to be quite poor. I much prefer tool which focus around the documentation itself, and enables to inject additional documentation extracted from the code. Sphinx is perfect for this job. It can generates html and pdf, you can include automatically extracted docstring from code, it does syntax highlighting, etc... A strong point of sphinx is that it is done by someone who knows something about web design, and does not look like a**. matplotlib website and doc is generated entirely from sphinx, with default values. It looks much nicer than anything you will get with epydoc/doxygen. And there is an integrated search engine in javascript 
 #1 Have a look at Sphinx . There are quite a number of users , including Python itself. 
 #2 what about sphinx ? It is a tool that makes it easy to create intelligent and beautiful documentation 
And Expert Python Programming include a chapter(chap 10) for Documenting Your Project 
 #3 I use Pydoc ( http://docs.python.org/library/pydoc.html ) to generate all the documentation for my python code 
 #4 I have to second @SilentGhostâ€”Sphinx is really the nicest option. If, for some reason, Sphinx doesn't fit your needs, epydoc might be the closest thing to JavaDoc for Python. 
 #5 What about NaturalDocs? ? I never used ND with python, but it does have some basic support. 

 The best thing on ND is that you can easily mix code docs with hand written, separate the docs in many separated files and have everything beautifully organized and searchable (without any server side code, just javascript). 
 #6 This doasn't exactly fit your question but in one of our projects we endet up with a literate programming approach. 

 We don't want to have all the comments and explanations hanging around in the python source code but also don't want to write the documentation from scratch . 

 So we write our source files with a mixture of restructured text and python code (which can be nicely done using PyLit ). 

 Than we generate our documentation with Sphinx and the source files with PyLit. 

 This gives a us a lot of freedom for our documentation (adding images, links etc.) while keeping the real python source code file free from unnecessary explanations (from a programmes point of view). 

 So a PyLit file chunk like this: 

 

 would generated this source file: 

 

 and this documentation: