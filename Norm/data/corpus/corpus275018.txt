Question (ID-275018): How can I remove (chomp) a newline in Python? This is one of my most common questions when I am coding Python (I was fed Perl as a baby and am forever trying to get rid of that affliction) and I wanted to put it out there on stack overflow so that next time I search for 'chomp python' on google, I get a useful answer. 
 Answers (Total-8): #0 Try the rstrip method. 

 &gt;&gt;&gt; 'test string\n'.rstrip()
'test string'
 

 Note that Python's rstrip method strips all kinds of whitespace by default, not just newlines as Perl does with chomp. To strip only newlines: 

 &gt;&gt;&gt; 'test string \n'.rstrip('\n')
'test string '
 

 There is also the lstrip and strip methods. 

 &gt;&gt;&gt; s = " \n abc def "
&gt;&gt;&gt; s.strip()
'abc def'
&gt;&gt;&gt; s.rstrip()
' \n abc def'
&gt;&gt;&gt; s.lstrip()
'abc def '
&gt;&gt;&gt;
 
 #1 And I would say the "pythonic" way to get lines without trailing newline characters is splitlines(). 

 &gt;&gt;&gt; text = "line 1\nline 2\r\nline 3\nline 4"
&gt;&gt;&gt; text.splitlines()
['line 1', 'line 2', 'line 3', 'line 4']
 
 #2 The canonical way to strip end-of-line (EOL) characters is to use the string rstrip() method removing any trailing \r or \n. Here are examples for Mac, Windows, and Unix EOL characters. 

 &gt;&gt;&gt; 'Mac EOL\r'.rstrip('\r\n')
'Mac EOL'
&gt;&gt;&gt; 'Windows EOL\r\n'.rstrip('\r\n')
'Windows EOL'
&gt;&gt;&gt; 'Unix EOL\n'.rstrip('\r\n')
'Unix EOL'
 

 Using '\r\n' as the parameter to rstrip means that it will strip out any trailing combination of '\r' or '\n'. That's why it works in all three cases above. 

 This nuance matters in rare cases. For example, I once had to process a text file which contained an HL7 message. The HL7 standard requires a trailing '\r' as its EOL character. The Windows machine on which I was using this message had appended its own '\r\n' EOL character. Therefore, the end of each line looked like '\r\r\n'. Using rstrip('\r\n') would have taken off the entire '\r\r\n' which is not what I wanted. In that case, I simply sliced off the last two characters instead. 
 #3 Note that rstrip doesn't act exactly like Perl's chomp() because it doesn't modify the string. That is, in Perl: 

 $x="a\n";

chomp $x
 

 results in $x being "a" . 

 but in Python: 

 x="a\n"

x.rstrip()
 

 will mean that the value of x is still "a\n" . You need to write x=x.rstrip() to get the equivalent behavior. 
 #4 I might use something like this: 

 import os
s = s.rstrip(os.linesep)
 

 I think the problem with rstrip("\n") is that you'll probably want to make sure the line separator is portable. (some antiquated systems are rumored to use "\r\n" ) Hopefully os.linesep will contain the right characters. the above works for me. 
 #5 I don't program in Python, but I came across an FAQ at python.org advocating S.rstrip("\r\n") for python 2.2 or later. 

 Alternatively, switch to Ruby. It has chomp. 
 #6 Careful with "foo".rstrip(os.linesep) : That will only chomp the newline characters for the platform where your Python is being executed. Imagine you're chimping the lines of a Windows file under Linux, for instance: 

 $ python
Python 2.7.1 (r271:86832, Mar 18 2011, 09:09:48) 
[GCC 4.5.0 20100604 [gcc-4_5-branch revision 160292]] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os, sys
&gt;&gt;&gt; sys.platform
'linux2'
&gt;&gt;&gt; "foo\r\n".rstrip(os.linesep)
'foo\r'
&gt;&gt;&gt;
 

 Use "foo".rstrip("\r\n") instead, as Mike says above. 
 #7 rstrip doesn't do the same thing as chomp, on so many levels. Read http://perldoc.perl.org/functions/chomp.html and see that chomp is very complex indeed. 

 However, my main point is that chomp removes at most 1 line ending, whereas rstrip will remove as many as it can. 

 Here you can see rstrip removing all the newlines: 

 &gt;&gt;&gt; 'foo\n\n'.rstrip(os.linesep)
'foo'
 

 A much closer approximation of typical Perl chomp usage can be accomplished with re.sub, like this: 

 &gt;&gt;&gt; re.sub(os.linesep + r'\Z','','foo\n\n')
'foo\n'