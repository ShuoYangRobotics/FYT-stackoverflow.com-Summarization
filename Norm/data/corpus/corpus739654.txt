Question (ID-739654): Understanding Python decorators How can I make a decorator in Python that would do the following. 

 @makebold
@makeitalic
def say():
 return "Hello"
 

 which should return 

 &lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;
 

 I'm not trying to make HTML this way in a real application, just trying to understand how decorators and decorator chaining works. 


 Answers (Total-6): #0 Since this answer explaining yield has been quite a success, I think a little tutorial about Python decorators could help as well. 

 If you are not into long explanations, see Paolo Bergantino's anwser . 

 Python's functions are objects 

 To understand decorators, you must first understand that functions are objects in Python.
This has important consequences. Let's see why with a simple example : 

 def shout(word="yes") :
 return word.capitalize()+" !"

print shout()
# outputs : 'Yes !'

# As an object, you can assign the function to a variable like any
# other object 

scream = shout

# Notice we don't use parenthesis : we are not calling the function, we are
# putting the function "shout" into the variable "scream". It means you can then
# call "shout" from "scream" :

print scream()
# outputs : 'Yes !'

# More than that, it means you can remove the old name 'shout', the function will still
# be accessible from 'scream'

del shout
try :
 print shout()
except NameError, e :
 print e
 #outputs : "name 'shout' is not defined"

print scream()
# outputs : 'Yes !'
 

 Ok, keep that in mind, we are going back to it soon. Another interesting property of Python functions is they can be defined... inside another function ! 

 def talk() :

 # You can define a function on the fly in "talk" ...
 def whisper(word="yes") :
  return word.lower()+"...";

 # ... and use it right away !

 print whisper()

# You call "talk", that defines "whisper" EVERY TIME you call it, then "whisper"
# is called in "talk". 
talk()
# outputs : 
# yes...

# But "whisper" DOES NOT EXIST outside "talk" :

try :
 print whisper()
except NameError, e :
 print e
 #outputs : "name 'whisper' is not defined"*
 

 Functions references 

 Ok, still here ? Now the fun part, you've seen that functions are objects and therefor : 

 
 can be assign to a variable; 
 can be defined in an other function. 
 

 Well, that means that a function can return another function :-) Have a look : 

 def getTalk(type="shout") :

 # We define functions on the fly
 def shout(word="yes") :
  return word.capitalize()+" !"

 def whisper(word="yes") :
  return word.lower()+"...";

 # Then we return one of them
 if type == "shout" :
  # We don't use "()", we are not calling the function,
  # we are returning the function object
  return shout 
 else :
  return whisper

# How do you use this strange beast ?

# Get the function and assign it to a variable
talk = getTalk()  

# You can see that "talk" is here a function object :
print talk
#outputs : &lt;function shout at 0xb7ea817c&gt;

# The object is the one returned by the function :
print talk()

# And you can even use it directly if you feel wild :
print getTalk("whisper")()
#outputs : yes...
 

 But wait, there is more. If you can return a function, then you can pass one as a parameter: 

 def doSomethingBefore(func) : 
 print "I do something before then I call the function you gave me"
 print func()

doSomethingBefore(scream)
#outputs : 
#I do something before then I call the function you gave me
#Yes !
 

 Well, you just have everything needed to understand decorators You see, decorators are wrappers, meaning, they let you execute code before and after the function they decorate without the need to modify the function itself. 

 Handcrafted decorators 

 How you would do it manually : 

 # A decorator is a function that expects ANOTHER function as parameter
def my_shiny_new_decorator(a_function_to_decorate) :

 # Inside, the decorator defines a function on the fly : the wrapper.
 # This function is going to be wrapped around the original function
 # so it can execute code before and after it.
 def the_wrapper_around_the_original_function() :

  # Put here the code you want to be executed BEFORE the original 
  # function is called
  print "Before the function runs"

  # Call the function here (using parenthesis)
  a_function_to_decorate()

  # Put here the code you want to be executed AFTER the original 
  # function is called
  print "After the function runs"

 # At this point, "a_function_to_decorate" HAS NEVER BEEN EXECUTED.
 # We return the wrapper function we just created.
 # The wrapper contains the function and the code to execute before
 # and after. It's ready to use !
 return the_wrapper_around_the_original_function

# Now imagine you create a function you don't want to ever touch again.
def a_stand_alone_function() :
 print "I am a stand alone function, don't you dare modify me"

a_stand_alone_function() 
#outputs : I am a stand alone function, don't you dare modify me

# Well, you can decorate it to extends its behavior.
# Just pass it to the decorator, it will wrap it dynamically in 
# any code you want and returns you a new function ready to be used :

a_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)
a_stand_alone_function_decorated()
#outputs :
#Before the function runs
#I am a stand alone function, don't you dare modify me
#After the function runs
 

 Now, you probably want that every time you call a_stand_alone_function , a_stand_alone_function_decorated is called instead. That's easy, just erase a_stand_alone_function with the function returned by my_shiny_new_decorator : 

 a_stand_alone_function = my_shiny_new_decorator(a_stand_alone_function)
a_stand_alone_function()
#outputs :
#Before the function runs
#I am a stand alone function, don't you dare modify me
#After the function runs

# And guess what, that's EXACTLY what decorators do !
 

 Decorators demystified 

 The previous example, using the decorator syntax : 

 @my_shiny_new_decorator
def another_stand_alone_function() :
 print "Leave me alone"

another_stand_alone_function() 
#outputs : 
#Before the function runs
#Leave me alone
#After the function runs
 

 Yes, that's all, it's that simple. @decorator is just a shortcut to : 

 another_stand_alone_function = my_shiny_new_decorator(another_stand_alone_function)
 

 Decorators are just a pythonic variant of the decorator design pattern . There are several classic design patterns embedded in Python to ease developpement, like iterators. 

 Of course, you can cumulate decorators : 

 def bread(func) :
 def wrapper() :
  print "&lt;/''''''\&gt;"
  func()
  print "&lt;\______/&gt;"
 return wrapper

def ingredients(func) :
 def wrapper() :
  print "#tomatoes#"
  func()
  print "~salad~"
 return wrapper

def sandwich(food="--ham--") :
 print food

sandwich()
#outputs : --ham--
sandwich = bread(ingredients(sandwich))
sandwich()
#outputs :
#&lt;/''''''\&gt;
# #tomatoes#
# --ham--
# ~salad~
#&lt;\______/&gt;
 

 Using the Python decorator syntax : 

 @bread
@ingredients
def sandwich(food="--ham--") :
 print food

sandwich()
#outputs :
#&lt;/''''''\&gt;
# #tomatoes#
# --ham--
# ~salad~
#&lt;\______/&gt;
 

 The order you set the decorators MATTERS : 

 @ingredients
@bread
def strange_sandwich(food="--ham--") :
 print food

strange_sandwich()
#outputs :
##tomatoes#
#&lt;/''''''\&gt;
# --ham--
#&lt;\______/&gt;
# ~salad~
 

 Eventually answering the question 

 As a conclusion, you can easily see how to anwser to this StackOverflow.com question : 

 # The decorator to make it bold
def makebold(fn):
 # The new function the decorator returns
 def wrapper():
  # Insertion of some code before and after
  return "&lt;b&gt;" + fn() + "&lt;/b&gt;"
 return wrapper

# The decorator to make it italic
def makeitalic(fn):
 # The new function the decorator returns
 def wrapper():
  # Insertion of some code before and after
  return "&lt;i&gt;" + fn() + "&lt;/i&gt;"
 return wrapper

@makebold
@makeitalic
def say():
 return "hello"

print say() 
#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;

# This is the exact equivalent to 
def say():
 return "hello"
say = makebold(makeitalic(say))

print say() 
#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;
 

 You can now just leave happy, or burn your brain a little bit more and see advanced used of decorators. 

 Passing argument to the decorated function 

 # It's not black magic, you just have to let the wrapper 
# pass the argument :

def a_decorator_passing_arguments(function_to_decorate) :
 def a_wrapper_accepting_arguments(arg1, arg2) :
  print "I got args ! Look :", arg1, arg2
  function_to_decorate(arg1, arg2)
 return a_wrapper_accepting_arguments

# Since when you are calling the function returned by the decorator, you are
# calling the wrapper, passing arguments to it, will let it pass them to 
# the decorated function

@a_decorator_passing_arguments
def print_full_name(first_name, last_name) :
 print "My name is",first_name,last_name

print_full_name("Peter", "Venkman")
# outputs:
#I got args ! Look : Peter Venkman
#My name is Peter Venkman
 

 Decorating methods 

 What's great with Python is that methods and functions are really the same, except methods expect their first parameter to be a reference to the current object (self). It means you can build a decorator for methods the same way, just remember to take self in consideration : 

 def method_friendly_decorator(method_to_decorate) :
 def wrapper(self, lie) :
  lie = lie - 3 # very friendly, decrease age even more :-)
  return method_to_decorate(self, lie)
 return wrapper


class Lucy(object) :

 def __init__(self) :
  self.age = 32

 @method_friendly_decorator
 def sayYourAge(self, lie) :
  print "I am %s, what did you think ?" % (self.age + lie)

l = Lucy()
l.sayYourAge(-3)
#outputs: I am 26, what did you think ?
 

 Of course, if you make a very general decorator and wish you can apply it to any function / method, no matter its arguments, then just use *args, **kwargs : 

 def a_decorator_passing_arbitrary_arguments(function_to_decorate) :
 # The wrapper accepts any arguments
 def a_wrapper_accepting_arbitrary_arguments(*args, **kwargs) :
  print "Do I have args ? :"
  print args
  print kwargs
  # Then you unpack the arguments here *args, **kwargs
  # If you are not familiar with unpacking, check :
  # http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/
  function_to_decorate(*args, **kwargs)
 return a_wrapper_accepting_arbitrary_arguments

@a_decorator_passing_arbitrary_arguments
def function_with_no_argument() :
 print "Python is cool, no argument here."

function_with_no_argument()
#outputs
#Do I have args ? :
#()
#{}
#Python is cool, no argument here.

@a_decorator_passing_arbitrary_arguments
def function_with_arguments(a, b, c) :
 print a, b, c

function_with_arguments(1,2,3)
#outputs
#Do I have args ? :
#(1, 2, 3)
#{}
#1 2 3 

@a_decorator_passing_arbitrary_arguments
def function_with_named_arguments(a, b, c, platypus="Why not ?") :
 print "Do %s, %s and %s like platipus ? %s" %\
 (a, b, c, platypus)

function_with_named_arguments("Bill", "Linus", "Steve", platypus="Indeed !")
#outputs
#Do I have args ? :
#('Bill', 'Linus', 'Steve')
#{'platypus': 'Indeed !'}
#Do Bill, Linus and Steve like platipus ? Indeed !

class Mary(object) :

 def __init__(self) :
  self.age = 31

 @a_decorator_passing_arbitrary_arguments
 def sayYourAge(self, lie=-3) : # You can now add a default value
  print "I am %s, what did you think ?" % (self.age + lie)

m = Mary()
m.sayYourAge()
#outputs
# Do I have args ? :
#(&lt;__main__.Mary object at 0xb7d303ac&gt;,)
#{}
#I am 28, what did you think ?
 

 Passing arguments to the decorator 

 Great, now what would you say about passing arguments to the decorator itself? Well this is a bit twisted because a decorator must accept a function as an argument and therefor, you can not pass the decorated function arguments directly to the decorator. 

 Before rushing to the solution, let's write a little reminder : 

 # Decorators are ORDINARY functions
def my_decorator(func) :
 print "I am a ordinary function"
 def wrapper() :
  print "I am function returned by the decorator"
  func()
 return wrapper

# Therefor, you can call it without any "@"

def lazy_function() :
 print "zzzzzzzz"

decorated_function = my_decorator(lazy_function)
#ouputs : I am a ordinary function

# It ouputs "I am a ordinary function", because that's just what you do :
# calling a function. Nothing magic.

@my_decorator
def lazy_function() :
 print "zzzzzzzz"

#ouputs : I am a ordinary function
 

 It's exactly the same. " my_decorator " is called. So when you @my_decorator , you are telling Python to call the function 'labelled by the variable " my_decorator "'. It's important, because, the label you give can point directly to the decorator... or not ! Let's start to be evil ! 

 def decorator_maker() :

 print "I make decorators ! I am executed only once: "+\
   "when you make me create a decorator."

 def my_decorator(func) :

  print "I am a decorator ! I am executed only when you decorate a function."

  def wrapped() :
   print "I am the wrapper arround the decorated function. "+\
     "I am called when you call the decorated function. "+\
     "As the wrapper, I return the RESULT of the decorated function."
   return func()

  print "As the decorator, I return the wrapped function."

  return wrapped

 print "As a decorator maker, I return a decorator"
 return my_decorator

# Let's create a decorator. It's just a new function after all.
new_decorator = decorator_maker()  
#ouputs:
#I make decorators ! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator

# Then we decorate the function

def decorated_function() :
 print "I am the decorated function."

decorated_function = new_decorator(decorated_function)
#ouputs:
#I am a decorator ! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function

# Let's call the function :
decorated_function()
#ouputs:
#I am the wrapper arround the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
 

 No surprise here. Let's do EXACTLY the same thing, but skipping intermediate variables : 

 def decorated_function() :
 print "I am the decorated function."
decorated_function = decorator_maker()(decorated_function)
#ouputs:
#I make decorators ! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator
#I am a decorator ! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function.

# Finally :
decorated_function() 
#ouputs:
#I am the wrapper arround the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
 

 Let's make it AGAIN, even shorter : 

 @decorator_maker()
def decorated_function() :
 print "I am the decorated function."
#ouputs:
#I make decorators ! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator
#I am a decorator ! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function.

#Eventually : 
decorated_function() 
#ouputs:
#I am the wrapper arround the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
 

 Hey, did you see that, whe used a function call whith the " @ " syntax :-) So back to decorators with arguments. If we can use functions to generate the decorator on the fly, we can pass arguments to that function, right ? 

 def decorator_maker_with_arguments(decorator_arg1, decorator_arg2) :

 print "I make decorators ! And I accept arguments:", decorator_arg1, decorator_arg2

 def my_decorator(func) :
  # The hability to pass arguments here is a gift from closures.
  # If you are not confortable with closures, you can assume it's ok,
  # or read : http://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python
  print "I am the decorator. Somehow you passed me arguments:", decorator_arg1, decorator_arg2

  # Don't confuse decorator arguments and function arguments !
  def wrapped(function_arg1, function_arg2) :
   print "I am the wrapper arround the decorated function.",\
     "\nI can access all the variables",\
     "\n\t- from the decorator:", decorator_arg1, decorator_arg2,\
     "\n\t- from the function call:", function_arg1, function_arg2,\
     "\nThen I can pass them to the decorated function"
   return func(function_arg1, function_arg2)

  return wrapped

 return my_decorator

@decorator_maker_with_arguments("Leonard", "Sheldon")
def decorated_function_with_arguments(function_arg1, function_arg2) :
 print "I am the decorated function and only knows about my arguments :",\
   function_arg1, function_arg2

decorated_function_with_arguments("Rajesh", "Howard")
#outputs:
#I make decorators ! And I accept arguments: Leonard Sheldon
#I am the decorator. Somehow you passed me arguments: Leonard Sheldon
#I am the wrapper arround the decorated function. 
#I can access all the variables 
# - from the decorator: Leonard Sheldon 
# - from the function call: Rajesh Howard 
#Then I can pass them to the decorated function
#I am the decorated function and only knows about my arguments : Rajesh Howard
 

 Here it is, a decorator with arguments. Arguments can be set as variable : 

 c1 = "Penny"
c2 = "Leslie"

@decorator_maker_with_arguments("Leonard", c1)
def decorated_function_with_arguments(function_arg1, function_arg2) :
 print "I am the decorated function and only knows about my arguments :",\
   function_arg1, function_arg2

decorated_function_with_arguments(c2, "Howard")
#outputs:
#I make decorators ! And I accept arguments: Leonard Penny
#I am the decorator. Somehow you passed me arguments: Leonard Penny
#I am the wrapper arround the decorated function. 
#I can access all the variables 
# - from the decorator: Leonard Penny 
# - from the function call: Leslie Howard 
#Then I can pass them to the decorated function
#I am the decorated function and only knows about my arguments : Leslie Howard
 

 As you can see, you can pass arguments to the decorator like any function using this trick. You can even use *args, **kwargs if you wish. But remember decorators are called only once . Just when Python import the script. You can't dynamically set the arguments afterwards. When you do "import x", the function is already decorated , you can't
change anything. 

 Let's practice : a decorator to decorate a decorator 

 Ok, as a bonus, I'll give you a snippet to make any decorator accept generically any argument. After all, in order to accept arguments, we created our decorator using another function. 
We wrapped the decorator.
Anything else we saw recently that wrapped function ?
Of yes, decorators !
Let's have some fun and write a decorator for the decorators : 

 def decorator_with_args(decorator_to_enhance) :
 """ 
 This function is supposed to be used as a decorator.
 It must decorate an other function, that is intended to be used as a decorator.
 Take a cup of coffee.
 It will allow any decorator to accept an arbitrary number of arguments,
 saving you the headache to remember how to do that every time.
 """

 # We use the same trick we did to pass arguments
 def decorator_maker(*args, **kwargs) :

  # We create on the fly a decorator that accepts only a function
  # but keeps the passed arguments from the maker .
  def decorator_wrapper(func) :

   # We return the result of the original decorator, which, after all, 
   # IS JUST AN ORDINARY FUNCTION (which returns a function).
   # Only pitfall : the decorator must have this specific signature or it won't work :
   return decorator_to_enhance(func, *args, **kwargs)

  return decorator_wrapper

 return decorator_maker
 

 It can be used as followed : 

 # You create the function you will use as a decorator. And stick a decorator on it :-)
# Donc forget, the signature is "decorator(func, *args, **kwargs)"
@decorator_with_args 
def decorated_decorator(func, *args, **kwargs): 
 def wrapper(function_arg1, function_arg2) :
  print "Decorated with", args, kwargs
  return func(function_arg1, function_arg2)
 return wrapper

# Then you decorate the functions you wish with your brand new decorated decorator.

@decorated_decorator(42, 404, 1024)
def decorated_function(function_arg1, function_arg2) :
 print "Hello", function_arg1, function_arg2

decorated_function("Universe and", "everything")
#outputs:
#Decorated with (42, 404, 1024) {}
#Hello Universe and everything

# Whoooot !
 

 I know, the last time you had this feeling, it was after listening a guy saying : "before understanding recursion, you must first understand recursion". But know, don't you feel good about mastering thi? 

 Best practices while using decorators 

 
 They exists only since Python 2.4, therefor be sure that's what your code is running on. 
 Decorators slow down the code. Keep that in mind. 
 You can not undecorate a function. There are hacks to create decorators that can be removed but nobody uses them. So once a function is decorated, it's done. For all the code . 
 Decorators wrap functions, making them hard to debug. 
 

 Python 2.5 solves this last issue by providing the functools modules including functools.wraps that copies the name, module and docstring of any wrapped function to it's wrapper. Fun fact, functools.wraps is a decorator :-) 

 # For debugging, the stacktrace prints you the function __name__
def foo() :
 print "foo"

print foo.__name__
#outputs: foo

# With a decorator, it gets messy 
def bar(func) :
 def wrapper() :
  print "bar"
  return func()
 return wrapper

@bar
def foo() :
 print "foo"

print foo.__name__
#outputs: wrapper

# "functools" can help for that

import functools

def bar(func) :
 # We say that "wrapper", is wrapping "func"
 # and the magic begins
 @functools.wraps(func)
 def wrapper() :
  print "bar"
  return func()
 return wrapper

@bar
def foo() :
 print "foo"

print foo.__name__
#outputs: foo
 

 How can the decorators be useful ? 

 Now the big question, what can I use decorators for? Seem cool and powerful, but a practical example would be great. Well, there are 1000 possibilities. Classic uses are extending a function behavior from an external lib (you can't modify it) or for a debug purpose (you don't want to modify it because it's temporary). You can use them to extends several functions with the same code without rewriting it everytime, for DRY sake. E.G: 

 def benchmark(func):
 """
 A decorator that print the time of function take
 to execute.
 """
 import time
 def wrapper(*args, **kwargs):
  t = time.clock()
  res = func(*args, **kwargs)
  print func.__name__, time.clock()-t
  return res
 return wrapper


def loggin(func) :
 """
 A decorator that logs the activty of the script.
 Ok, it really just print it, put it could be loggin !
 """
 def wrapper(*args, **kwargs):
  res = func(*args, **kwargs)
  print func.__name__, args, kwargs
  return res
 return wrapper


def counter(func):
 """
 A decorator that print the number of time a function has been executed
 """
 counter.count = 0
 def wrapper(*args, **kwargs):
  counter.count = counter.count + 1
  res = func(*args, **kwargs)
  print func.__name__, "has been used : ", counter.count, "X"
  return res
 return wrapper

@counter
@benchmark
@loggin
def reverse_string(string) :
 return string[::-1]

print reverse_string("Able was I ere I saw Elba")
print reverse_string(" A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal : Panama!")

#outputs:
#reverse_string ('Able was I ere I saw Elba',) {}
#wrapper 0.0
#wrapper has been used : 1 X
#ablE was I ere I saw elbA
#reverse_string (' A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal : Panama!',) {}
#wrapper 0.0
#wrapper has been used : 2 X
#!amanaP : lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A 
 

 Of course the good thing with decorators is that you case use them right away on almost anything without rewriting. DRY, I said : 

 @counter
@benchmark
@loggin
def get_random_furturama_quote() :
 import httplib
 conn = httplib.HTTPConnection("slashdot.org:80")
 conn.request("HEAD", "/index.html")
 for key, value in conn.getresponse().getheaders() :
  if key.startswith("x-b") or key.startswith("x-f"):
   return value
 return "No, I'm ...doesn't!"

print get_random_furturama_quote()
print get_random_furturama_quote()

#outputs:
#get_random_furturama_quote () {}
#wrapper 0.02
#wrapper has been used : 1 X
#The laws of science be a harsh mistress.
#get_random_furturama_quote () {}
#wrapper 0.01
#wrapper has been used : 2 X
#Curse you, merciful Poseidon!
 

 Python itselft provides several decorators : memoize , property , staticmethod , etc. Django use decorators to manage caching. Twisted to fake inlining asynchronous functions calls. This really is a large playground. 

 EDIT: given the success of this answer, and people asking me to do the same with metaclasses, I did . 
 #1 Check out the documentation to see how decorators work. Here is what you asked for: 

 def makebold(fn):
 def wrapped():
  return "&lt;b&gt;" + fn() + "&lt;/b&gt;"
 return wrapped

def makeitalic(fn):
 def wrapped():
  return "&lt;i&gt;" + fn() + "&lt;/i&gt;"
 return wrapped

@makebold
@makeitalic
def hello():
 return "hello world"

print hello() ## returns &lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;
 
 #2 Alternatively, you could write a factory function which return a decorator which wraps the return value of the decorated function in a tag passed to the factory function. For example: 

 from functools import wraps

def wrap_in_tag(tag):
 def factory(func):
  @wraps(func)
  def decorator():
   return '&lt;%(tag)s&gt;%(rv)s&lt;/%(tag)s&gt;' % (
    {'tag': tag, 'rv': func()})
  return decorator
 return factory
 

 This enables you to write: 

 @wrap_in_tag('b')
@wrap_in_tag('i')
def say():
 return 'hello'
 

 or 

 makebold = wrap_in_tag('b')
makeitalic = wrap_in_tag('i')

@makebold
@makeitalic
def say():
 return 'hello'
 

 Personally I would have written the decorator somewhat differently: 

 from functools import wraps

def wrap_in_tag(tag):
 def factory(func):
  @wraps(func)
  def decorator(val):
   return func('&lt;%(tag)s&gt;%(val)s&lt;/%(tag)s&gt;' %
      {'tag': tag, 'val': val})
  return decorator
 return factory
 

 which would yield: 

 @wrap_in_tag('b')
@wrap_in_tag('i')
def say(val):
 return val
say('hello')
 

 Don't forget the construction for which decorator syntax is a shorthand: 

 say = wrap_in_tag('b')(wrap_in_tag('i')(say)))
 
 #3 Python decorators add extra functionality to another function 

 An italics decorator could be like 

 def makeitalic(fn):
 def newFunc():
  return "&lt;i&gt;" + fn() + "&lt;/i&gt;"
 return newFunc
 

 Note that a function is defined inside a function.
What it basically does is replace a function with the newly defined one. For example, I have this class 

 class foo:
 def bar(self):
  print "hi"
 def foobar(self):
  print "hi again"
 

 Now say, I want both functions to print "---" after and before they are done.
I could add a print "---" before and after each print statement.
But because I don't like repeating myself, I will make a decorator 

 def addDashes(fn): # notice it takes a function as an argument
 def newFunction(self): # define a new function
  print "---"
  fn(self) # call the original function
  print "---"
 return newFunction
 # Return the newly defined function - it will "replace" the original
 

 So now I can change my class to 

 class foo:
 @addDashes
 def bar(self):
  print "hi"

 @addDashes
 def foobar(self):
  print "hi again"
 

 For more on decorators, check
 http://www.ibm.com/developerworks/linux/library/l-cpdecor.html 
 #4 It looks like the other people have already told you how to solve the problem. I hope this will help you understand what decorators are. 

 Decorators are just syntactical sugar. 

 This 

 @decorator
def func():
 ...
 

 expands to  

 def func():
 ...
func = decorator(func)
 
 #5 And of course you can return lambdas as well from a decorator function: 

 def makebold(f): 
 return lambda: "&lt;b&gt;" + f() + "&lt;/b&gt;"
def makeitalic(f): 
 return lambda: "&lt;i&gt;" + f() + "&lt;/i&gt;"

@makebold
@makeitalic
def say():
 return "Hello"

print say()