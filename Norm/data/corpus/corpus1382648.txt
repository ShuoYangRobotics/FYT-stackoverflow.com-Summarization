Question (ID-1382648): Which PEP's are must reads? I'm a fairly strong Python coder, but too much of my style is a little haphazard, and I'm sure there are more Pythonic solutions to many problems than the ones I come up with. Which PEPs are essential for any well versed Pythonista to read? 
 Answers (Total-5): #0 Definitely PEP 8 , a Style Guide for Python. 
 #1 I found that reading the declined ones can give some good insights into what's Pythonic and what isn't.
This was a while ago so I don't have any specific examples. 
 #2 Although Python is incredibly intuitive, a lot of people do not comprehend his philosophy. 

 
 Pep 20 : The Zen of Python 
 
 
 Beautiful is better than ugly. 
 Explicit is better than implicit. 
 Simple is better than complex. 
 Complex is better than complicated. 
 Flat is better than nested. 
 Sparse is better than dense. 
 Readability counts. 
 Special cases aren't special enough to break the rules. 
 Although practicality beats purity. 
 Errors should never pass silently. 
 Unless explicitly silenced. 
 In the face of ambiguity, refuse the temptation to guess. 
 There should be one-- and preferably only one --obvious way to do
 it. 
 Although that way may not be obvious at first unless you're Dutch. 
 Now is better than never. 
 Although never is often better than right now. 
 If the implementation is hard to explain, it's a bad idea. 
 If the implementation is easy to explain, it may be a good idea. 
 Namespaces are one honking great idea -- let's do more of those! 
 
 
 #3 Also pep 0257 docstring convention 
 #4 It is now retrospective, but still interesting: I think Things that will Not Change in Python 3000 is a good read, with lots of links to the discussions that preceded the decisions.