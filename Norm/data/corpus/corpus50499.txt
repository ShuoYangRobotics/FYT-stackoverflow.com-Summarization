Question (ID-50499): In Python, how do I get the path and name of the file that is currently executing? I have scripts calling other script files but I need to get the filepath of the file that is currently running within the process. 
For example, let's say I have three files. Using execfile , script_1.py calls script_2.py. In turn, script_2.py calls script_3.py. How can I get the file name and path of script_3.py *from code within script_3.py* without having to pass that info as args from script_2.py?
(Executing os.getcwd() returns the original starting script's filepath not the current file's.) 
 Answers (Total-12): #0 __file__ is the answer, however, it is relative to the path, so you'll need to use  os.path.abspath(__file__) to get the actual path to the file 

 e.g. 

 import os

def h():
 print os.path.abspath( __file__ )
 
 #1 p1.py: 

 execfile("p2.py")
 

 p2.py: 

 import inspect
print inspect.getfile( inspect.currentframe() )
 
 #2 It's not entirely clear what you mean by "the filepath of the file that is currently running within the process".
 sys.argv[0] usually contains the location of the script that was invoked by the Python interpreter.
Check the sys documentation for more details. 

 As @ Tim and @ Pat Notz have pointed out, the __file__ attribute provides access to 

 
 the file from which the module was
 loaded, if it was loaded from a file 
 
 #3 The suggestions marked as best are all true if your script consists of only one file. 

 If you want to find out the name of the executable (i.e. the root file passed to the python interpreter for the current program) from a file that may be imported as a module, you need to do this (let's assume this is in a file named foo.py ): 

 import inspect 

 print inspect.stack()[-1][1] 

 Because the last thing ( [-1] ) on the stack is the first thing that went into it (stacks are LIFO/FILO data structures). 

 Then in file bar.py if you import foo it'll print bar.py , rather than foo.py , which would be the value of all of these: 

 
 __file__ 
 inspect.getfile(inspect.currentframe()) 
 inspect.stack()[0][1] 
 
 #4 The " file " attribute works for both the file containing the main execution code as well as imported modules http://pyref.infogami.com/__file__ 
 #5 import sys
print sys.argv[0]
 
 #6 I think it's just __file__ Sounds like you may also want to checkout the inspect module . 

 Ugh. Stupid markdown... try "underscore underscore file underscore underscore" 
 #7 You can use inspect.stack() 

 import inspect
inspect.stack()[0] =&gt; (&lt;frame object at 0x00AC2AC0&gt;, 'g:\\Python\\Test\\_GetCurrentProgram.py', 15, '&lt;module&gt;', ['print inspect.stack()[0]\n'], 0)
os.path.abspath (inspect.stack()[0][1]) =&gt; 'g:\\Python\\Test\\_GetCurrentProgram.py'
 
 #8 __file__ as others have said. You may want to use os.realpath(__file__) , however, in case it's a symlink 
 #9 import sys

print sys.path[0]
 

 this would print the path of the currently executing script 
 #10 I used the approach with __file__ 
 os.path.abspath(__file__) 
but there is a little trick, it returns the .py file 
when the code is run the first time, 
next runs give the name of *.pyc file 
so I stayed with: 
 inspect.getfile(inspect.currentframe()) 
or 
 sys._getframe().f_code.co_filename 
 #11 I think this is cleaner: 

 print inspect.stack()[0][1]
 

 and gets the same information as: 

 print inspect.getfile(inspect.currentframe())
 

 Where [0] is the current frame in the stack (top of stack) and [1] is for the file name, increase to go backwards in the stack i.e. 

 print inspect.stack()[1][1]
 

 would be the file name of the script that called the current frame. Also, using [-1] will get you to the bottom of the stack, the original calling script.