Question (ID-255147): How do I keep Python print from adding spaces? In python, if I say 

 print 'h'
 

 I get the letter h and a newline. If I say 

 print 'h',
 

 I get the letter h and no newline. If I say 

 print 'h',
print 'm',
 

 I get the letter h, a space, and the letter m. How can I prevent Python from printing the space? 

 The print statements are different iterations of the same loop so I can't just use the + operator. 
 Answers (Total-9): #0 You can use: 

 sys.stdout.write('h')
sys.stdout.write('m')
 
 #1 Just a comment. In Python 3 , you will use 

 print('h', end='')
 

 to suppress the endline terminator, and 

 print('a', 'b', 'c', sep='')
 

 to suppress the whitespace separator between items. 
 #2 Greg is right-- you can use sys.stdout.write 

 Perhaps, though, you should consider refactoring your algorithm to accumulate a list of &lt;whatevers&gt; and then 

 lst = ['h', 'm']
print "".join(lst)
 
 #3 Python 2.5.2 (r252:60911, Sep 27 2008, 07:03:14)
[GCC 4.3.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print "hello",; print "there"
hello there
&gt;&gt;&gt; print "hello",; sys.stdout.softspace=False; print "there"
hellothere
 

 But really, you should use sys.stdout.write directly. 
 #4 print "%s%s%s%s" % ('a','s','d','f') 
 #5 For completeness, one other way is to clear the softspace value after performing the write. 

 import sys
print "hello",
sys.stdout.softspace=0
print "world",
print "!"
 

 prints helloworld ! 

 Using stdout.write() is probably more convenient for most cases though. 
 #6 Using the print statement without a formatting operation first is really only for very basic convenience. If you want to control the format of the output at all, then do as Dustin says: use a format string. 
 #7 Or use a + , i.e.: 

 &gt;&gt;&gt; print 'me'+'no'+'likee'+'spacees'+'pls'
menolikeespaceespls
 

 Just make sure all are concatenate-able objects. 
 #8 Regain control of your console! Simply: 

 from __past__ import printf
 

 where __past__.py contains: 

 import sys
def printf(fmt, *varargs):
 sys.stdout.write(fmt % varargs)
 

 then: 

 &gt;&gt;&gt; printf("Hello, world!\n")
Hello, world!
&gt;&gt;&gt; printf("%d %d %d\n", 0, 1, 42)
0 1 42
&gt;&gt;&gt; printf('a'); printf('b'); printf('c'); printf('\n')
abc
&gt;&gt;&gt;
 

 Bonus extra: If you don't like print &gt;&gt; f, ... , you can extending this caper to fprintf(f, ...).