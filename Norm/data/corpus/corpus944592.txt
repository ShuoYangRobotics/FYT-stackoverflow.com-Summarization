Question (ID-944592): Best practice for Python Assert Is there a performance or code maintenance issue with using assert as part of the standard code instead of using it just for debugging purposes? 

 Is 

 assert x &gt;= 0, 'x is less then zero'
 

 and better or worse then 

 if x &lt; 0:
 raise Exception, 'x is less then zero'
 

 Also, is there anyway to set a business rule like if x &lt; 0 raise error that is always checked with out the try, except, finally so, if at anytime throughout the code x is &lt; 0 an error is raised, like if you set assert x &lt; 0 at the start of a function, anywhere within the function where x becomes less then 0 an exception is raised? 
 Answers (Total-6): #0 Asserts should be used to test conditions that should never happen . The purpose is to crash early in the case of a corrupt program state. 

 Exceptions should be used for errors that can conceivably happen, and you should almost always create your own Exception classes. 

 

 For example, if you're writing a function to read from a configuration file into a dict , improper formatting in the file should raise a ConfigurationSyntaxError , while you can assert that you're not about to return None . 

 

 In your example, if x is a value set via a user interface or from an external source, an exception is best. 

 If x is only set by your own code in the same program, go with an assertion. 
 #1 To be able to automatically throw an error when x become less than zero throughout the function. You can use class descriptors . Here is an example: 

 class ZeroException(Exception):
 pass

class variable(object):
 def __init__(self, value=0):
  self.__x = value

 def __set__(self, obj, value):
  if value &lt; 0:
   raise ZeroException('x is less than zero')

  self.__x = value

 def __get__(self, obj, objType):
  return self.__x

class MyClass(object):
 x = variable()

&gt;&gt;&gt; m = MyClass()
&gt;&gt;&gt; m.x = 10
&gt;&gt;&gt; m.x -= 20
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
 File "my.py", line 7, in __set__
 raise ZeroException('x is less than zero')
ZeroException: x is less than zero
 
 #2 "assert" statements are removed when the compilation is optimized . So, yes, there are both performance and functional differences. 

 
 The current code generator emits no code for an assert statement when optimization is requested at compile time. - Python 2.6.4 Docs 
 

 If you use assert to implement application functionality, then optimize the deployment to production, you will be plagued by "but-it-works-in-dev" defects. 

 See PYTHONOPTIMIZE and -O -OO 
 #3 The only thing that's really wrong with this approach is that it's hard to make a very descriptive exception using assert statements. If you're looking for the simpler syntax, remember you can also do something like this: 

 class XLessThanZeroException(Exception):
 pass

def CheckX(x):
 if x &lt; 0:
  raise XLessThanZeroException()

def foo(x):
 CheckX(x)
 #do stuff here
 

 Another problem is that using assert for normal condition-checking is that it makes it difficult to disable the debugging asserts using the -O flag. 
 #4 In addition to the other answers, asserts themselves throw exceptions, but only AssertionErrors. From a utilitarian standpoint, assertions aren't suitable for when you need fine grain control over which exceptions you catch. 
 #5 Well, in general I agree with Deestan, but sometimes we need to test our custom exception, so... 

 we can take unittest's method assertRaises, rewrite it a little - and get asserNotRaises method: 

 class SomeTest(unittest.TestCase):
 def assertNotRaises(self, excClass, callableObj, *args, **kwargs):
  try:
   callableObj(*args, **kwargs)
  except excClass:
   if hasattr(excClass,'__name__'): excName = excClass.__name__
   else: excName = str(excClass)
   raise self.failureException, "%s raised" % excName
 

 And then to use it like this: 

 self.assertNotRaises(MyException, my_callable)