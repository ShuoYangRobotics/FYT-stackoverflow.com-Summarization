Question (ID-619437): I have been trying to wrap my head around the PyPy project. So, fast-foward 5-10 years in the future what will PyPy have to offer over CPython, Jython, and IronPython? From what I have seen and read on the blogs PyPy is a very ambitious project. What are some advantages it will bring to the table over its siblings (CPython, Jython, and IronPython)? Is it speed, cross-platform compatibility (including mobile platforms), the ability to use c-extensions without the GIL, or is this more of a technical exercise on what can be done? 
 Answers (Total-6): #0 PyPy is really two projects: 

 
 An interpreter compiler toolchain allowing you to write interpreters in RPython (a static subset of Python) and have cross-platform interpreters compiled standalone, for the JVM, for .NET (etc) 
 An implementation of Python in RPython 
 

 These two projects allow for many things. 

 
 Maintaining Python in Python is much easier than maintaining it in C 
 From a single codebase you can generate Python interpreters that run on the JVM, .NET and standalone - rather than having multiple slightly incompatible implementations 
 Part of the compiler toolchain includes an experimental JIT generator (now in its fifth incarnation and starting to work really well) - the goal is for a JITed PyPy to run much faster than CPython 
 It is much easier to experiment with fundamental language features - like removing the GIL, better garbage collection, integrating stackless and so on 
 

 So there are really a lot of reasons for PyPy to be exciting, and it is finally starting to live up to all its promises. 
 #1 This is a link to presentation one of the PyPy authors gave at PyCon 2009. It is very informative. 
 #2 The most important feature is of course the JIT compiler. In CPython files are compiled to bytecode ( .pyc ) or optimized bytecode ( .pyo ) and then interpreted. With PyPy they will be compiled to native code. PyPy also includes Stackless Python patches, including it's impressive features (tasklet serialization, light threads etc.) 
 #3 I recently read this blog post post about this by Alex Gaynor and although it does not explicitly answer the OP's question, it does make a pretty convincing argument that Pypy is an exciting area of Python that may shorten those 5-10 years mentioned by OP. 
 #4 In case that Python gets a real JIT I think it's going to be as fast as any other implementation. 

 The advantage is that it's much easier to implement new features. One can see this today by observing the library. Often modules are written in Python first and then translated into C. 
 #5 
 cross-platform compatibility 
 

 Yes