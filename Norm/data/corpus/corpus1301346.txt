Question (ID-1301346): The meaning of a single- and a double-underscore before an object name in Python I want to clear this up once and for all. Can someone please explain the exact meaning of having leading underscores before an object's name in Python? Also explain the difference between a single and a double leading underscore. Also, does that meaning stay the same whether the object in question is a variable, a function, a method, etcetera? 
 Answers (Total-6): #0 Single Underscore 

 Variables in a class with a leading underscore are simply to indicate to other programmers that the variable should be private. However, nothing special is done with the variable itself. 

 Double Underscore (Name Mangling) 

 From http://docs.python.org/tutorial/classes.html#private-variables : 

 
 Any identifier of the form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced with _classname__spam , where classname is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it can be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances. private to this class on instances of other classes. 
 

 And a warning from the same page: 

 
 Name mangling is intended to give classes an easy way to define “private” instance variables and methods, without having to worry about instance variables defined by derived classes, or mucking with instance variables by code outside the class. Note that the mangling rules are designed mostly to avoid accidents; it still is possible for a determined soul to access or modify a variable that is considered private. 
 

 Example 

 &gt;&gt;&gt; class MyClass():
...  def __init__(self):
...    self.__superprivate = "Hello"
...    self._semiprivate = ", world!"
...
&gt;&gt;&gt; mc = MyClass()
&gt;&gt;&gt; print mc.__superprivate
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: myClass instance has no attribute '__superprivate'
&gt;&gt;&gt; print mc._semiprivate
, world!
&gt;&gt;&gt; print mc.__dict__
{'_myClass__superprivate': 'Hello', '_semiprivate': ', world!'}
 
 #1 Excellent answers so far but some tidbits are missing. A single leading underscore isn't exactly JUST a convention: if you use from foobar import * , and module foobar does not define an __all__ list, the names imported from the module do NOT include those with a leading underscore. Let's say it's MOSTLY a convention, since this case is a pretty obscure corner;-). 

 The leading-underscore convention is widely used not just for PRIVATE names, but also for what C++ would call PROTECTED ones -- for example, names of methods that are fully intended to be overridden by subclasses (even ones that HAVE to be overridden since in the base class they raise NotImplementedError !-) are often single-leaading-underscore names to indicate to code using instances of that class (or subclasses) that said methods are not meant to be called directly. 

 For example, to make a thread-safe queue with a different queueing discipline than FIFO, one imports Queue, subclasses Queue.Queue, and overrides such methods as _get and _put ; "client code" never calls those ("hook") methods, but rather the ("organizing") public methods such as put and get (this is known as the Template Method design pattern -- see e.g. here for an interesting presentation based on a video of a talk of mine on the subject, with the addition of synopses of the transcript). 
 #2 __foo__ : this is just a convention, a way for the Python system to use names that won't conflict with user names. 

 _foo : this is just a convention, a way for the programmer to indicate that the variable is private (whatever that means in Python). 

 __foo : this has real meaning: the interpreter replaces this name with _classname__foo as a way to ensure that the name will not overlap with a similar name in another class. 

 No other form of underscores have meaning in the Python world. 

 There's no difference between class, variable, global, etc in these conventions. 
 #3 Single leading underscores is a convention. there is no difference from the interpreter's point of view if whether names starts with a single underscore or not. 

 Double leading and trailing underscores are used for built-in methods, such as __init__ , __bool__ , etc. 

 Double leading underscores w/o trailing counterparts are a convention too, however, the class methods will be mangled by the interpreter. For variables or basic function names no difference exists. 
 #4 Here's a great article on the subject: More than you need to know about double underscore methods 
 #5 Your question is good, it is not only about methods. Functions and objects in modules are commonly prefixed with one underscore as well, and can be prefixed by two. 

 But __double_underscore names are not name-mangled in modules, for example. What happens is that names beginning with one (or more) underscores are not imported if you import all from a module (from module import *), nor are the names shown in help(module).