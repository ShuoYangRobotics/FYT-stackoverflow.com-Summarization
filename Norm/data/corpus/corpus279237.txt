Question (ID-279237): python: import a module from a folder How do I import a python module given its relative path? 

 For example, if dirFoo contains Foo.py and dirBar, and dirBar contains Bar.py, how do I import Bar.py into Foo.py? 

 Here's a visual representation: 

 dirFoo\
 Foo.py
 dirBar\
  Bar.py
 

 Foo wishes to include Bar, but restructuring the folder heirarchy is not an option. 
 Answers (Total-14): #0 Be sure that dirBar has the __init__.py file -- this makes a directory into a Python package. 
 #1 You could also add the sub directory to your python path so that it imports as a normal script. 

 import sys
sys.path.append( &lt;path to dirFoo&gt; )
import Bar
 
 #2 (This is from memory so someone edit if I make a typo, please.) 

 If you structure your project this way: 

 src\
 __init__.py
 main.py
 dirFoo\
 __init__.py
 Foo.py
 dirBar\
 __init__.py
 Bar.py
 

 Then from Foo.py you should be able to do: 

 import dirFoo.Foo
 

 Or: 

 from dirFoo.Foo import FooObject
 

 EDIT 1: 

 Per Tom's comment, this does require that the src folder is accessible either via site_packages or your search path. Also, as he mentions, __init__.py is implicitly imported when you first import a module in that package/directory. Typically __init__.py is simply an empty file. 
 #3 The easiest method is to use sys.path.append(). 

 However, you may be also interested in the imp module.
It provides access to internal import functions. 

 # mod_name is the filename without the .py/.pyc extention
py_mod = imp.load_source(mod_name,filename_path) # Loads .py file
py_mod = imp.load_compiled(mod_name,filename_path) # Loads .pyc file
 

 This can be used to load modules dynamically when you don't know a module's name. 

 I've used this in the past to create a plugin type interface to an application, where the user would write a script with application specific functions, and just drop thier script in a specific directory. 

 Also, these functions may be useful: 

 imp.find_module(name[, path])
imp.load_module(name, file, pathname, description)
 
 #4 Assuming that both your directories are real python modules (do have the __init__.py file inside them), here is a safe solution for inclusion of modules relatively to the location of the script. 

 I assume that you want to do this because you need to include a set of modules with your script. I use this in production in several products and works in many special scenarios like: scripts called from another directory or executed with python execute instead of opening a new interpreter. 

 import os, sys
 cmd_folder = os.path.dirname(os.path.abspath(__file__))
 if cmd_folder not in sys.path:
  sys.path.insert(0, cmd_folder)
 

 As a bonus, this approach does let you force Python to use your module instead of the ones installed on the system. 
 #5 This is the relevant PEP: 

 http://www.python.org/dev/peps/pep-0328/ 

 In particular, presuming dirFoo is a directory up from dirBar... 

 In dirFoo\Foo.py: 

 from ..dirBar import Bar
 
 #6 Add an _ init _.py file: 

 dirFoo\
 Foo.py
 dirBar\
  __init__.py
  Bar.py
 

 Then add this code to the start of Foo.py: 

 import sys
sys.path.append('dirBar')
import Bar
 
 #7 Why don't do ? 

 import os, sys
lib_path = os.path.abspath('../../../lib')
sys.path.append(lib_path)

import mymodule
 
 #8 Just do Simple Things to import py file from different folder- 

 Let's you have a directory like- 

 lib/abc.py
 

 Then just keep a empty file in lib folder as named 

 __init__.py
 

 and then use 

 from lib.abc import &lt;Your Module name&gt;
 

 Keep __init__.py file in every folder of hierarchy of import module 
 #9 In my opinion the best choice is to put __ init __.py in the folder and call the file with 

 from dirBar.Bar import *
 

 It is not recommended to use sys.path.append() because something might gone wrong if you use the same file name as the existing python package. I haven't test that but that will be ambiguous. 
 #10 Look at the pkgutil module from the standard library. It may help you do what you want. 
 #11 from .dirBar import Bar
 

 instead of: 

 from dirBar improt Bar
 

 just in case there could be another dirBar installed and confuse a foo.py reader. 
 #12 Call me overly cautious but I like to make mine more portable because it's unsafe to assume that files will always be in the same place on every computer. Personally I have the code look up the file path first. I use linux so mine would look like this: 

 import os, sys
from subprocess import Popen, PIPE
try:
 path = Popen("find / -name 'file' -type f", shell=True, stdout=PIPE).stdout.read().splitlines()[0]
 if not sys.path.__contains__(path):
  sys.path.append(path)
except IndexError:
 raise RuntimeError("You must have FILE to run this program!")
 

 That is of course unless you plan to package these together. But if that's the case you don't really need two separate files anyway. 
 #13 I had a similar problem and I found this and it works!! 

 apt-get install python-profiler