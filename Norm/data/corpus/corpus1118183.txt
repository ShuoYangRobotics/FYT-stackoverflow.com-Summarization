Question (ID-1118183): How to debug in Django, the good way? So, I started learning to code in Python and later Django . The first times it was hard looking at tracebacks and actually figure out what I did wrong and where the syntax error was. Some time has passed now and some way along the way, I guess I got a routine in debugging my Django code. As this was done early in my coding experience, I sat down and wondered if how I was doing this was ineffective and could be done faster. I usually manage to find and correct the bugs in my code, but I wonder if I should be doing it faster? 

 I usually just use the debug info Django gives when enabled. When things do end up as I thought it would, I break the code flow a lot with a syntax error, and look at the variables at that point in the flow to figure out, where the code does something other than what I wanted. 

 But can this be improved? Are there some good tools or better ways to debug your Django code? 
 Answers (Total-8): #0 There are a bunch of ways to do it, but the most straightforward is to simply 
use the Python debugger . Just add following line in to a Django view function: 

 import pdb; pdb.set_trace()
 

 If you try to load that page in your browser, the browser will hang and you get a prompt to carry on debugging on actual executing code. 

 However there are other options suggested by others (I won't recommend them): 

 * return HttpResponse({variable to inspect})

* print {variable to inspect}

* raise Exception({variable to inspect})
 

 But the Python Debugger (pdb) is highly recommended for all types of Python code. If you are already into pdb, you'd also want to have a look at ipdb that uses ipython for debugging. Happy Coding. 
 #1 There are a few tools that cooperate well and can make your debugging task easier. 

 Most important is the Django debug toolbar . 

 Then you need good logging using the Python logging facility. You can send logging output to a log file, but an easier option is sending log output to firepython . To use this you need to use the Firefox browser with the firebug extension. Firepython includes a firebug plugin that will display any server-side logging in a Firebug tab. 

 Firebug itself is also critical for debugging the Javascript side of any app you develop. (Assuming you have some JS code of course). 

 I also liked django-viewtools for debugging views interactively using pdb, but I don't use it that much. 

 There are more useful tools like dozer for tracking down memory leaks (there are also other good suggestions given in answers here on SO for memory tracking). 
 #2 I really like Werkzeug 's interactive debugger. It's similar to Django's debug page, except that you get an interactive shell on every level of the traceback. If you use the django-extensions , you get a runserver_plus managment command which starts the development server and gives you Werkzeug's debugger on exceptions. 

 Of course, you should only run this locally, as it gives anyone with a browser the rights to execute arbitrary python code in the context of the server. 
 #3 A little quickie for template tags: 

 @register.filter 
def pdb(element):
 import pdb; pdb.set_trace()
 return element
 

 Now, inside a template you can do {{ template_var|pdb }} and enter a pdb session (given you're running the local devel server) where you can inspect element to your heart's content. 

 It's a very nice way to see what's happened to your object when it arrives at the template. 
 #4 Almost everything has been mentioned so far, so I only add that instead of pdb.set_trace() one can use ipdb.set_trace() which uses iPython and therefore is more powerful (autocomplete and other goodies). This requires ipdb package, so one need to easy_install ipdb 
 #5 I use pyDev with Eclipse really good, set break points, step into code, view values on any objects and variables, try it. 
 #6 I use PyCharm (same pydev engine as eclipse). Really helps me to visually be able to step through my code and see what is happening. 
 #7 I've pushed django-pdb to PyPI .
It's a simple app that means you don't need to edit your source code every time you want to break into pdb. 

 Installation is just... 

 
 pip install django-pdb 
 Add 'django_pdb' to your INSTALLED_APPS 
 

 You can now run: manage.py runserver --pdb to break into pdb at the start of every view... 

 bash: manage.py runserver --pdb
Validating models...

0 errors found
Django version 1.3, using settings 'testproject.settings'
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

GET /
function "myview" in testapp/views.py:6
args: ()
kwargs: {}

&gt; /Users/tom/github/django-pdb/testproject/testapp/views.py(7)myview()
-&gt; a = 1
(Pdb)
 

 And run: manage.py test --pdb to break into pdb on test failures/errors... 

 bash: manage.py test testapp --pdb
Creating test database for alias 'default'...
E
======================================================================
&gt;&gt;&gt; test_error (testapp.tests.SimpleTest)
----------------------------------------------------------------------
Traceback (most recent call last):
 File ".../django-pdb/testproject/testapp/tests.py", line 16, in test_error
 one_plus_one = four
NameError: global name 'four' is not defined
======================================================================

&gt; /Users/tom/github/django-pdb/testproject/testapp/tests.py(16)test_error()
-&gt; one_plus_one = four
(Pdb)
 

 The project's hosted on GitHub , contributions are welcome of course.