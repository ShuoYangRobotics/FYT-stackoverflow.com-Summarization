Question (ID-2710940): Python `if x is not None` or `if not x is None`? I've always thought of the if not x is None version to be more clear, but Google's style guide implies (based on this excerpt) that they use if x is not None . Is there any minor performance difference (I'm assuming not), and is there any case where one really doesn't fit (making the other a clear winner for my convention)?* 

 *I'm referring to any singleton, rather than just None . 

 
 ...to compare singletons like
 None. Use is or is not. 
 
 Answers (Total-6): #0 There's no performance difference, as they compile to the same bytecode: 

 Python 2.6.2 (r262:71600, Apr 15 2009, 07:20:39)
&gt;&gt;&gt; import dis
&gt;&gt;&gt; def f(x):
... return x is not None
...
&gt;&gt;&gt; dis.dis(f)
 2   0 LOAD_FAST    0 (x)
    3 LOAD_CONST    0 (None)
    6 COMPARE_OP    9 (is not)
    9 RETURN_VALUE
&gt;&gt;&gt; def g(x):
... return not x is None
...
&gt;&gt;&gt; dis.dis(g)
 2   0 LOAD_FAST    0 (x)
    3 LOAD_CONST    0 (None)
    6 COMPARE_OP    9 (is not)
    9 RETURN_VALUE
 

 Stylistically, I try to avoid not x is y . Although the compiler will always treat it as not (x is y) , a human reader might misunderstand the construct as (not x) is y . If I write x is not y then there is no ambiguity. 
 #1 Code should be written to be understandable to the programmer first, and the compiler or interpreter second. The "is not" construct resembles English more closely than "not is". 
 #2 Both Google and Python's style guide is the best practice: 

 if x is not None:
 # Do something about x
 

 Using not x can cause unwanted results. See below: 

 &gt;&gt;&gt; x = 1
&gt;&gt;&gt; not x
False
&gt;&gt;&gt; x = [1]
&gt;&gt;&gt; not x
False
&gt;&gt;&gt; x = 0
&gt;&gt;&gt; not x
True
&gt;&gt;&gt; x = [0]   # You don't want to fall in this one.
&gt;&gt;&gt; not x
False
 

 You may be interested to see what literals are evaluated to True or False in Python: 

 
 Truth Value Testing 
 

 Edit for comment below: 

 I just did some more testing. not x is None doesn't negate x first and then compared to None . In fact, it seems the is operator has a higher precedence when used that way: 

 &gt;&gt;&gt; x
[0]
&gt;&gt;&gt; not x is None
True
&gt;&gt;&gt; not (x is None)
True
&gt;&gt;&gt; (not x) is None
False
 

 Therefore, not x is None is just, in my honest opinion, best avoided. 

 More edit: 

 I just did more testing and can confirm that bukzor's comment is correct. (At least, I wasn't able to prove it otherwise.) 

 This means if x is not None has the exact result as if not x is None . I stand corrected. Thanks bukzor. 

 However, my answer still stands: Use the conventional if x is not None . :] 
 #3 The is not operator is preferred over negating the result of is for stylistic reasons. " if x is not None: " reads just like English, but " if not x is None: " requires understanding of the operator precedence and does not read like english. 

 If there is a performance difference my money is on is not , but this almost certainly isn't the motivation for the decision to prefer that technique. It would obviously be implementation-dependent. Since is isn't overridable, it should be easy to optimise out any distinction anyhow. 
 #4 The answer is simpler than people are making it. 

 There's no technical advantage either way, and "x is not y" is what everybody else uses , which makes it the clear winner. It doesn't matter that it "looks more like English" or not; everyone uses it, which means every user of Python--even Chinese users, whose language Python looks nothing like--will understand it at a glance, where the slightly less common syntax will take a couple extra brain cycles to parse. 

 Don't be different just for the sake of being different, at least in this field. 
 #5 if not x is None is more similar to other programming languages, but if x is not None definitely sounds more clear (and is more grammatically correct in English) to me. 

 That said it seems like it's more of a preference thing to me.