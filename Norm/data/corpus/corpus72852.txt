Question (ID-72852): How to do relative imports in Python? Imagine this directory structure: 

 app/
 __init__.py
 sub1/
  __init__.py
  mod1.py
 sub2/
  __init__.py
  mod2.py
 

 I'm coding mod1 , and I need to import something from mod2 . How should I do it? 

 I tried from ..sub2 import mod2 but I'm getting an "Attempted relative import in non-package". 

 I googled around but found only " sys.path manipulation" hacks. Isn't there a clean way? 

 

 Edit: all my __init__.py 's are currently empty 

 Edit2: I'm trying to do this because sub2 contains classes that are shared across sub packages ( sub1 , subX , etc.). 

 Edit3: The behaviour I'm looking for is the same as described in PEP 366 (thanks John B) 
 Answers (Total-10): #0 Everyone seems to want to tell you what you should be doing rather than just answering the question. 

 The problem is that you're running the module as '__main__' by passing the mod1.py as an argument to the interpreter. 

 From PEP 328 : 

 
 Relative imports use a module's __name__ attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to '__main__') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system. 
 

 In Python 2.6, they're adding the ability to reference modules relative to the main module. PEP 366 describes the change. 
 #1 main.py
setup.py
app/ -&gt;
 __init__.py
 package_a/ -&gt;
  __init__.py
  module_a.py
 package_b/ -&gt;
  __init__.py
  module_b.py
 

 
 You run python main.py . 
 main.py does: import app.package_a.module_a 
 module_a.py does import app.package_b.module_b 
 

 Alternatively 2 or 3 could use: from app.package_a import module_a 

 That will work as long as you have app in your PYTHONPATH. main.py could be anywhere then. 

 So you write a setup.py to copy (install) the whole app package and subpackages to the target system's python folders, and main.py to target system's script folders. 
 #2 def import_path(fullpath):
 """ 
 Import a file with full path specification. Allows one to
 import from anywhere, something __import__ does not do. 
 """
 path, filename = os.path.split(fullpath)
 filename, ext = os.path.splitext(filename)
 sys.path.append(path)
 module = __import__(filename)
 reload(module) # Might be out of date
 del sys.path[-1]
 return module
 

 I'm using this snippet to import modules from paths, hope that helps 
 #3 On a related note, Python 3 will change the default handling of imports to be absolute by default; relative imports will have to be explicitly specified. 
 #4 Take a look at http://docs.python.org/whatsnew/2.5.html#pep-328-absolute-and-relative-imports . You could do 

 from .mod1 import stuff
 
 #5 I think that what you have to ask yourself is: 

 
 Why i need to do this? 
 Is my package separation well done? 
 

 I don't know the context why you want to do it this way. But for me a cleaner design would be to have the following packages structure:
 
app/
 init .py
 sub1/
  init .py
  mod1.py
  sub12/
   init .py
   mod2.py
 

 Then you only have to do: 

 from sub12 import mod2
 
 #6 Suppose you run at the toplevel, then in mod1 use:
import sub2.mod2 

 instead of from ..sub2 import mod2 
 #7 From Python doc, 

 In Python 2.5, you can switch import‘s behaviour to absolute imports using a from future import absolute_import directive. This absolute- import behaviour will become the default in a future version (probably Python 2.7). Once absolute imports are the default, import string will always find the standard library’s version. It’s suggested that users should begin using absolute imports as much as possible, so it’s preferable to begin writing from pkg import string in your code 
 #8 Why you even need this? Why you just do not import it as 

 from app.sub2 import mod2
 
 #9 Don't do relative imports. They'll only make your code more fragile. If you do an absolute import as Matej suggested, you'll be less vulnerable to changes in sys.path and changes in file locations.