Question (ID-1006289): How to find out the number of CPUs in python I want to know the number of CPUs on the local machine in Python. The result should be user/real as output by time(1) when called with an optimally scaling userspace-only program. 
 Answers (Total-4): #0 If you have python2.6 you can simply use 

 import multiprocessing

multiprocessing.cpu_count()
 

 http://docs.python.org/library/multiprocessing.html#multiprocessing.cpu_count 
 #1 import os,re,subprocess
def determineNumberOfCPUs():
 """ Number of virtual or physical CPUs on this system, i.e.
 user/real as output by time(1) when called with an optimally scaling
 userspace-only program"""

 # Python 2.6+
 try:
  import multiprocessing
  return multiprocessing.cpu_count()
 except (ImportError,NotImplementedError):
  pass

 # POSIX
 try:
  res = int(os.sysconf('SC_NPROCESSORS_ONLN'))

  if res &gt; 0:
   return res
 except (AttributeError,ValueError):
  pass

 # Windows
 try:
  res = int(os.environ['NUMBER_OF_PROCESSORS'])

  if res &gt; 0:
   return res
 except (KeyError, ValueError):
  pass

 # jython
 try:
  from java.lang import Runtime
  runtime = Runtime.getRuntime()
  res = runtime.availableProcessors()
  if res &gt; 0:
   return res
 except ImportError:
  pass

 # BSD
 try:
  sysctl = subprocess.Popen(['sysctl', '-n', 'hw.ncpu'],
          stdout=subprocess.PIPE)
  scStdout = sysctl.communicate()[0]
  res = int(scStdout)

  if res &gt; 0:
   return res
 except (OSError, ValueError):
  pass

 # Linux
 try:
  res = open('/proc/cpuinfo').read().count('processor\t:')

  if res &gt; 0:
   return res
 except IOError:
  pass

 # Solaris
 try:
  pseudoDevices = os.listdir('/devices/pseudo/')
  expr = re.compile('^cpuid@[0-9]+$')

  res = 0
  for pd in pseudoDevices:
   if expr.match(pd) != None:
    res += 1

  if res &gt; 0:
   return res
 except OSError:
  pass

 # Other UNIXes (heuristic)
 try:
  try:
   dmesg = open('/var/run/dmesg.boot').read()
  except IOError:
   dmesgProcess = subprocess.Popen(['dmesg'], stdout=subprocess.PIPE)
   dmesg = dmesgProcess.communicate()[0]

  res = 0
  while '\ncpu' + str(res) + ':' in dmesg:
   res += 1

  if res &gt; 0:
   return res
 except OSError:
  pass

 raise Exception('Can not determine number of CPUs on this system')
 
 #2 You can also look how Parallel Python does it. 
 #3 Can't figure out how to add to the code or reply to the message but here's support for jython that you can tack in before you give up: 

 # jython
try:
 from java.lang import Runtime
 runtime = Runtime.getRuntime()
 res = runtime.availableProcessors()
 if res &gt; 0:
  return res
except ImportError:
 pass