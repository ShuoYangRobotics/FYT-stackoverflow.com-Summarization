Question (ID-265960): Best way to strip punctuation from a string in Python It seems like there should be a simpler way than: 

 import string
s = "string. With. Punctuation?" # Sample string 
out = s.translate(string.maketrans("",""), string.punctuation)
 

 Is there? 
 Answers (Total-7): #0 From an efficiency perspective, you're not joing to beat translate() - it's performing raw string operations in C with a lookup table - there's not much that will beat that bar writing your own C code.
If speed isn't a worry, another option though is: 

 exclude = set(string.punctuation)
s = ''.join(ch for ch in s if ch not in exclude)
 

 This is faster than s.replace with each char, but won't perform as well as non-pure python approaches such as regexes or string.translate, as you can see from the below timings. For this type of problem, doing it at as low a level as possible pays off. 

 Timing code: 

 import re, string, timeit

s = "string. With. Punctuation"
exclude = set(string.punctuation)
table = string.maketrans("","")
regex = re.compile('[%s]' % re.escape(string.punctuation))

def test_set(s):
 return ''.join(ch for ch in s if ch not in exclude)

def test_re(s): # From Vinko's solution, with fix.
 return regex.sub('', s)

def test_trans(s):
 return s.translate(table, string.punctuation)

def test_repl(s): # From S.Lott's solution
 for c in string.punctuation:
  s=s.replace(c,"")
 return s

print "sets  :",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000)
print "regex  :",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000)
print "translate :",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000)
print "replace :",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000)
 

 This gives the following results: 

 sets  : 19.8566138744
regex  : 6.86155414581
translate : 2.12455511093
replace : 28.4436721802
 
 #1 Not necessarily simpler, but a different way, if you are more familiar with the re family. 

 import re, string
s = "string. With. Punctuation?" # Sample string 
out = re.sub('[%s]' % re.escape(string.punctuation), '', s)
 
 #2 I usually use something like this: 

 &gt;&gt;&gt; s = "string. With. Punctuation?" # Sample string
&gt;&gt;&gt; import string
&gt;&gt;&gt; for c in string.punctuation:
...  s= s.replace(c,"")
...
&gt;&gt;&gt; s
'string With Punctuation'
 
 #3 myString.translate(None, string.punctuation)
 
 #4 Do search and replace using the regex functions, as seen here. . If you have to repeatedly perform the operation, you can keep a compiled copy of the regex pattern (your punctuation) around, which will speed things up a bit. 
 #5 This might not be the best solution however this is how I did it. 

  import string
 f = lambda x: ''.join([i for i in x if i not in string.punctuation])
 
 #6 string.punctuation is ascii ONLY! A more correct (but also much slower) way is to use the unicodedata module: 

 # -*- coding: utf-8 -*-
from unicodedata import category
s = u'String — with - «punctation »...'
s = ''.join(ch for ch in s if category(ch)[0] != 'P')
print 'stripped', s