Question (ID-483666): Python reverse / inverse a mapping Given a dictionary like so: 

 map = { 'a': 1, 'b':2 }
 

 How can one invert this map to get: 

 inv_map = { 1: 'a', 2: 'b' }
 
 Answers (Total-7): #0 Assuming that the values in the dict are unique: 

 dict((v,k) for k, v in map.iteritems())
 
 #1 for python3: 

 inv_map = {v:k for k, v in map.items()}
 
 #2 If the values in map aren't unique: 

 for k, v in map.iteritems():
 inv_map[v] = inv_map.get(v, [])
 inv_map[v].append(k)
 
 #3 Try this : 

 inv_map = dict(zip(map.values(), map.keys()))
 

 or alternatively 

 inv_map = dict((map[k], k) for k in map)
 

 or using python 3.0's dict comprehensions 

 inv_map = {map[k] : k for k in map}
 
 #4 Or if the values aren't unique and you're a little harcore: 

 inv_map = \
 dict( \
   (v, [k for (k, xx) in filter(lambda (key, value): value == v, map.items())]) \
  for v in set(map.values()))
 
 #5 def inverse_mapping(f):
 return f.__class__(map(reversed, f.items()))
 
 #6 For all kinds of dictionary, no matter if they don't have unique values to use as keys, you can create a list of keys for each value 

 inv_map = {v: inv_map.get(v, []) + [k] for k,v in map.items()}