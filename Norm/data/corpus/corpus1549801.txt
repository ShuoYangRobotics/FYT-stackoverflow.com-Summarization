Question (ID-1549801): Differences between isinstance() and type() in python What are the differences between these two code fragments? Which way is considered to be more pythonic? 

 Using type(): 

 import types

if type(a) is types.DictType:
 do_something()
if type(b) in types.StringTypes():
 do_something_else()
 

 Using isinstance(): 

 if isinstance(a, dict):
 do_something()
if isinstance(b, str) or isinstance(b, unicode):
 do_something_else()
 

 Edit: This seems to be discussed already: link . 
 Answers (Total-5): #0 To summarize the contents of other (already good!) answers, isinstance caters for inheritance (an instance of a derived class is an instance of a base class, too), while checking for equality of type does not (it demands identity of types and rejects instances of subtypes, AKA subclasses). 

 Normally, in Python, you want your code to support inheritance, of course (since inheritance is so handy, it would be bad to stop code using yours from using it!), so isinstance is less bad than checking identity of type s because it seamlessly supports inheritance. 

 It's not that isinstance is good , mind you -- it's just less bad than checking equality of types. The normal, Pythonic, preferred solution is almost invariably "duck typing": try using the argument as if it was of a certain desired type, do it in a try / except statement catching all exceptions that could arise if the argument was not in fact of that type (or any other type nicely duck-mimicking it;-), and in the except clause, try something else (using the argument "as if" it was of some other type). 

 basestring is , however, quite a special case -- a builtin type that exists only to let you use isinstance (both str and Unicode subclass basestring ). Strings are sequences (you could loop over them, index them, slice them, ...), but you generally want to treat them as "scalar" types -- it's somewhat incovenient (but a reasonably frequent use case) to treat all kinds of strings (and maybe other scalar types, i.e., ones you can't loop on) one way, all containers (lists, sets, dicts, ...) in another way, and basestring plus isinstance helps you do that -- the overall structure of this idiom is something like: 

 if isinstance(x, basestring)
 return treatasscalar(x)
try:
 return treatasiter(iter(x))
except TypeError:
 return treatasscalar(x)
 

 You could say that basestring is an Abstract Base Class ("ABC") -- it offers no concrete functionality to subclasses, but rather exists as a "marker", mainly for use with isinstance . The concept is obviously a growing one in Python, since PEP 3119 , which introduces a generalization of it, was accepted and has been implemented starting with Python 2.6 and 3.0. 

 The PEP makes it clear that, while ABCs can often substitute for duck typing, there is generally no big pressure to do that (see here ). ABCs as implemented in recent Python versions do however offer extra goodies: isinstance (and issubclass ) can now mean more than just "[an instance of] a derived class" (in particular, any class can be "registered" with an ABC so that it will show as a subclass, and its instances as instances of the ABC); and ABCs can also offer extra convenience to actual subclasses in a very natural way via Template Method design pattern applications (see here and here [[part II]] for more on the TM DP, in general and specifically in Python, independent of ABCs). 

 For the underlying mechanics of ABC support as offered in Python 2.6, see here ; for their 3.1 version, very similar, see here . In both versions, standard library module collections (that's the 3.1 version -- for the very similar 2.6 version, see here ) offers several useful ABCs. 

 For the purpose of this answer, the key thing to retain about ABCs (beyond an arguably more natural placement for TM DP functionality, compared to the classic Python alternative of mixin classes such as UserDict.DictMixin ) is that they make isinstance (and issubclass ) much more attractive and pervasive (in Python 2.6 and going forward) than they used to be (in 2.5 and before), and therefore, by contrast, make checking type equality an even worse practice in recent Python versions than it already used to be. 
 #1 The latter is preferred, because it will handle subclasses properly. In fact, your example can be written even more easily because isinstance() 's second parameter may be iterable: 

 if isinstance(b, [str, unicode]):
 do_something_else()
 

 or, using the basestring abstract class: 

 if isinstance(b, basestring):
 do_something_else()
 
 #2 Here's why isinstance is better than type : 

 class Vehicle:
 pass

class Truck(Vehicle):
 pass
 

 in this case, a truck object is a Vehicle, but you'll get this: 

 isinstance(Vehicle(), Vehicle) # returns True
type(Vehicle()) == Vehicle  # returns True
isinstance(Truck(), Vehicle) # returns True
type(Truck()) == Vehicle  # returns False, and this probably won't be what you want.
 

 In other words, isinstance is true for subclasses, too. 

 Also see: http://stackoverflow.com/questions/707674/how-to-compare-type-of-an-object-in-python 
 #3 According to python documentation here is a statement 

 
 Starting in Python 2.2, built-in
 factory functions such as int() and
 str() are also names for the
 corresponding types. 
 

 So isinstance should be preferred over type 

 here is a link
 http://docs.python.org/library/types.html 
 #4 On my laptop, with python 2.6.5, isinstance(b, [str, unicode]) does not work. 

 The second argument must be a tupple. 

 
 TypeError: isinstance() arg 2 must be a class, type, or tuple of classes and types 
 

 So I had to write : isinstance(b, (str, unicode)) instead.