Question (ID-181530): Python style: multiple-line conditions in IFs Sometimes I break long conditions in IFs to several lines. The most obvious way to do this is: 

 if (cond1 == 'val1' and cond2 == 'val2' and
  cond3 == 'val3' and cond4 == 'val4'):
  do_something
 

 Isn't very very appealing visually, because the action blends with the conditions. However, it is the natural way using correct Python indentation of 4 spaces. 

 Edit : 

 By the way, for the moment I'm using: 

 if ( cond1 == 'val1' and cond2 == 'val2' and
   cond3 == 'val3' and cond4 == 'val4'):
  do_something
 

 Not very pretty, I know :-) 

 Can you recommend an alternative way ? 
 Answers (Total-15): #0 You don't need to use 4 spaces on your second conditional line. Maybe use: 

 if (cond1 == 'val1' and cond2 == 'val2' and 
  cond3 == 'val3' and cond4 == 'val4'):
 do_something
 

 Also, don't forget the whitespace is more flexible than you might think: 

 if ( 
  cond1 == 'val1' and cond2 == 'val2' and 
  cond3 == 'val3' and cond4 == 'val4'
 ):
 do_something
if (cond1 == 'val1' and cond2 == 'val2' and 
  cond3 == 'val3' and cond4 == 'val4'):
 do_something
 

 Both of those are fairly ugly though. 

 Maybe lose the brackets? 

 if cond1 == 'val1' and cond2 == 'val2' and \
 cond3 == 'val3' and cond4 == 'val4':
 do_something
 

 This at least gives you some differentiation. 

 Or even: 

 if cond1 == 'val1' and cond2 == 'val2' and \
      cond3 == 'val3' and \
      cond4 == 'val4':
 do_something
 

 I think I prefer: 

 if cond1 == 'val1' and \
 cond2 == 'val2' and \
 cond3 == 'val3' and \
 cond4 == 'val4':
 do_something
 

 Here's the Style Guide , but it doesn't recommend doing anything special in this case. 
 #1 I suggest moving the and keyword to the second line and indenting all lines containing conditions with two spaces instead of four: 

 if (cond1 == 'val1' and cond2 == 'val2'
 and cond3 == 'val3' and cond4 == 'val4'):
 do_something
 

 This is exactly how I solve this problem in my code. Having a keyword as the first word in the line makes the condition a lot more readable, and reducing the number of spaces further distinguishes condition from action. 
 #2 I've resorted to the following in the degenerate case where it's simply AND's or OR's. 

 if all( [cond1 == 'val1', cond2 == 'val2', cond3 == 'val3', cond4 == 'val4'] ):

if any( [cond1 == 'val1', cond2 == 'val2', cond3 == 'val3', cond4 == 'val4'] ):
 

 It shaves a few characters and makes it clear that there's no subtlety to the condition. 
 #3 Someone has to champion use of vertical whitespace here! :) 

 if (  cond1 == val1
  and cond2 == val2
  and cond3 == val3
 ):
 do_stuff()
 

 This makes each condition clearly visible. It also allows cleaner expression of more complex conditions: 

 if ( cond1 == val1
  or 
  (  cond2_1 == val2_1
   and cond2_2 &gt;= val2_2
   and cond2_3 != bad2_3
  )
 ):
 do_more_stuff()
 

 Yes, we're trading off a bit of vertical real estate for clarity. Well worth it IMO. 
 #4 "all" and "any" are nice for the many conditions of same type case. BUT they always evaluates all conditions. As shown in this example: 

 def c1():
 print " Executed c1"
 return False
def c2():
 print " Executed c2"
 return False


print "simple and (aborts early!)"
if c1() and c2():
 pass

print

print "all (executes all :( )"
if all((c1(),c2())):
 pass

print
 
 #5 Here's my very personal take: long conditions are in my view a code smell that suggests refactoring into a boolean returning function/method, something like: 

 def is_action__required(...):
 return (cond1 == 'val1' and cond2 == 'val2'
   and cond3 == 'val3' and cond4 == 'val4')
 

 Now, if I found a way to make multi-line conditions look good, I would probably find myself content with having them and skip the refactoring. 

 On the other hand, having them perturb my aesthetic sense acts as an incentive to refactoring. 

 My conclusion therefore is that multiple line conditions should look ugly, so as to have an incentive to avoid them. 
 #6 I'm surprised not to see my preferred solution, 

 if (cond1 == 'val1' and cond2 == 'val2'
 and cond3 == 'val3' and cond4 == 'val4'):
 do_something
 

 Since and is a keyword, it gets highlighted by my editor, and looks sufficiently different from the do_something below it. 
 #7 This doesn't improve so much but... 

 allCondsAreOK = (cond1 == 'val1' and cond2 == 'val2' and
     cond3 == 'val3' and cond4 == 'val4')

if allCondsAreOK:
 do_something
 
 #8 Just a few other random ideas for completeness's sake. If they work for you, use them. Otherwise, you're probably better off trying something else. 

 You could also do this with a dictionary: 

 &gt;&gt;&gt; x = {'cond1' : 'val1', 'cond2' : 'val2'}
&gt;&gt;&gt; y = {'cond1' : 'val1', 'cond2' : 'val2'}
&gt;&gt;&gt; x == y
True
 

 This option is more complicated, but you may also find it useful: 

 class Klass(object):
 def __init__(self, some_vars):
  #initialize conditions here
 def __nonzero__(self):
  return (self.cond1 == 'val1' and self.cond2 == 'val2' and
    self.cond3 == 'val3' and self.cond4 == 'val4')

foo = Klass()
if foo:
 print "foo is true!"
else:
 print "foo is false!"
 

 Dunno if that works for you, but it's another option to consider. Here's one more way: 

 class Klass(object):
 def __init__(self):
  #initialize conditions here
 def __eq__(self):
  return (self.cond1 == 'val1' and self.cond2 == 'val2' and
    self.cond3 == 'val3' and self.cond4 == 'val4')

x = Klass(some_values)
y = Klass(some_other_values)
if x == y:
 print 'x == y'
else:
 print 'x!=y'
 

 The last two I haven't tested, but the concepts should be enough to get you going if that's what you want to go with. 

 (And for the record, if this is just a one time thing, you're probably just better off using the method you presented at first. If you're doing the comparison in lots of places, these methods may enhance readability enough to make you not feel so bad about the fact that they are kind of hacky.) 
 #9 I prefer this style when I have a terribly large if: 

 if (
 expr1
 and (expr2 or expr3)
 and hasattr(thingy1, '__eq__')
 or status=="HappyTimes"
):
 do_stuff()
else:
 do_other_stuff()
 
 #10 Pack your conditions into a list, then do smth. like: 

 if False not in Conditions:
 do_something
 
 #11 I find that when I have long conditions, I often have a short code body. In that case, I just double-indent the body, thus: 

 if (cond1 == 'val1' and cond2 == 'val2' and
 cond3 == 'val3' and cond4 == 'val4'):
  do_something
 
 #12 What if we only insert an additional blank line between the condition and the body and do the rest in the canonical way? 

 if (cond1 == 'val1' and cond2 == 'val2' and
 cond3 == 'val3' and cond4 == 'val4'):

 do_something
 

 p.s. I always use tabs, not spaces; I cannot fine-tune... 
 #13 (I've lightly modified the identifiers as fixed-width names aren't representative of real code – at least not real code that I encounter – and will belie an example's readability.) 

 if (cond1 == "val1" and cond22 == "val2"
and cond333 == "val3" and cond4444 == "val4"):
 do_something
 

 This works well for "and" and "or" (it's important that they're first on the second line), but much less so for other long conditions. Fortunately, the former seem to be the more common case while the latter are often easily rewritten with a temporary variable. (It's usually not hard, but it can be difficult or much less obvious/readable to preserve the short-circuiting of "and"/"or" when rewriting.) 

 Since I found this question from your blog post about C++ , I'll include that my C++ style is identical: 

 if (cond1 == "val1" and cond22 == "val2"
and cond333 == "val3" and cond4444 == "val4") {
 do_something
}
 
 #14 Adding to what @krawyoti said... Long conditions smell because they are difficult to read and difficult to understand. Using a function or a variable makes the code clearer. In Python, I prefer to use vertical space, enclose parenthesis, and place the logical operators at the beginning of each line so the expressions don't look like "floating". 

 conditions_met = (
 cond1 == 'val1' 
 and cond2 == 'val2' 
 and cond3 == 'val3' 
 and cond4 == 'val4'
 )
if conditions_met:
 do_something
 

 If the conditions need to be evaluated more than once, as in a while loop, then using a local function is best.