Question (ID-522563): Accessing the index in Python for loops Does anyone know how to access the index itself for a list like this: 

 ints = [8,23,45,12,78]
 

 When I loop through it using a for loop, how do I access the loop index, from 1 to 5 in this case? 
 Answers (Total-4): #0 Using additional state variable, such as index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic. 

 The better option is to use the builtin function enumerate : 

 for idx, val in enumerate(ints):
 print idx, val
 

 Check out PEP 279 for more. 
 #1 Old fashioned way: 

 for ix in range(len(ints)):
 print ints[ix]
 

 List comprehension: 

 [ (ix, ints[ix]) for ix in range(len(ints))]

&gt;&gt;&gt; ints
[1, 2, 3, 4, 5]
&gt;&gt;&gt; for ix in range(len(ints)): print ints[ix]
... 
1
2
3
4
5
&gt;&gt;&gt; [ (ix, ints[ix]) for ix in range(len(ints))]
[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)]
&gt;&gt;&gt; lc = [ (ix, ints[ix]) for ix in range(len(ints))]
&gt;&gt;&gt; for tup in lc:
...  print tup
... 
(0, 1)
(1, 2)
(2, 3)
(3, 4)
(4, 5)
&gt;&gt;&gt;
 
 #2 for i in range(len(ints)):
 print i, ints[i]
 
 #3 For a list object you can also use the index() function which may be the more cumbersome (but I think more approachable) way because you may have to cast the index value as a string spending on what you'e using it for: 

 str(ints.index(iterator))
 

 example: 

 import os, glob

path = "./"
fileList = os.listdir(path)

for eachFile in fileList:
 print str(fileList.index(eachFile)) +" : " + eachFile