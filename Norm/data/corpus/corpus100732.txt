Question (ID-100732): Why is if not someobj: better than if someobj == None: in Python? I seen several examples of code like this: 

 if not someobj:
 #do something
 

 But I'm wondering why not do: 

 if someobj == None:
 #do something
 

 Is there any difference? Does one have an advantage over the other? 
 Answers (Total-9): #0 In the first test, Python try to convert the object to a bool value if it is not already one. Roughly, we are asking the object : are you meaningfull or not ? This is done using the following algorithm : 

 
 If the object has a __nonzero__ special method (as do numeric built-ins, int and float ), it calls this method. It must either return a bool value which is then directly used, or an int value that is considered False is equal to zero. 
 Otherwise, if the object has a __len__ special method (as do container built-ins, list , dict , set , tuple , ...), it calls this method, considering a container False iff it is empty (length is zero). 
 Otherwise, the object is considered True unless it is None in which case, it is considered False . 
 

 In the second test, the object is compared for equality to None . Here, we are asking the object : are you equal to this other value ? This is done using the following algorithm : 

 
 If the object has a __eq__ method, it is called, and the return value is then converted to a bool value and used to determine the outcome of the if . 
 Otherwise, if the object has a __cmp__ method, it is called. This function must return an int indicating the order of the two object ( -1 if self &lt; other , 0 if self == other , +1 if self &gt; other ). 
 Otherwise, the object are compared for identity (ie. they are reference to the same object, as can be tested by the is operator). 
 

 There is another test possible using the is operator. We would be asking the object : are you this particular object ? 

 Generally, I would recommend to use the first test with non-numerical values, to use the test for equality when you want to compare objects of the same nature (two strings, two numbers, ...) and to check for identity only when using sentinel values ( None meaning not initialized for a member field for exemple, or when using the getattr or the __getitem__ methods). 

 To summarize, we have : 

 &gt;&gt;&gt; class A(object):
... def __repr__(self):
...  return 'A()'
... def __nonzero__(self):
...  return False

&gt;&gt;&gt; class B(object):
... def __repr__(self):
...  return 'B()'
... def __len__(self):
...  return 0

&gt;&gt;&gt; class C(object):
... def __repr__(self):
...  return 'C()'
... def __cmp__(self, other):
...  return 0

&gt;&gt;&gt; class D(object):
... def __repr__(self):
...  return 'D()'
... def __eq__(self, other):
...  return True

&gt;&gt;&gt; for obj in ['', (), [], {}, 0, 0., A(), B(), C(), D(), None]:
...  print '%4s: bool(obj) -&gt; %5s, obj == None -&gt; %5s, obj is None -&gt; %5s' % \
...   (repr(obj), bool(obj), obj == None, obj is None)
 '': bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 (): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 []: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 {}: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 0: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 0.0: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 A(): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 B(): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 C(): bool(obj) -&gt; True, obj == None -&gt; True, obj is None -&gt; False
 D(): bool(obj) -&gt; True, obj == None -&gt; True, obj is None -&gt; False
None: bool(obj) -&gt; False, obj == None -&gt; True, obj is None -&gt; True
 
 #1 These are actually both poor practices. Once upon a time, it was considered OK to casually treat None and False as similar. However, since Python 2.2 this is not the best policy. 

 First, when you do an if x or if not x kind of test, Python has to implicitly convert x to boolean. The rules for the bool function describe a raft of things which are False; everything else is True. If the value of x wasn't properly boolean to begin with, this implicit conversion isn't really the clearest way to say things. 

 Before Python 2.2, there was no bool function, so it was even less clear. 

 Second, you shouldn't really test with == None . You should use is None and is not None . 

 See PEP 8, Style Guide for Python Code . 

 
 - Comparisons to singletons like None should always be done with
 'is' or 'is not', never the equality operators.

 Also, beware of writing "if x" when you really mean "if x is not None"
 -- e.g. when testing whether a variable or argument that defaults to
 None was set to some other value. The other value might have a type
 (such as a container) that could be false in a boolean context!
 
 

 How many singletons are there? Five: None , True , False , NotImplemented and Ellipsis . Since you're really unlikely to use NotImplemented or Ellipsis , and you would never say if x is True (because simply if x is a lot clearer), you'll only ever test None . 
 #2 Because None is not the only thing that is considered false. 

 if not False:
 print "False is false."
if not 0:
 print "0 is false."
if not []:
 print "An empty list is false."
if not ():
 print "An empty tuple is false."
if not {}:
 print "An empty dict is false."
if not "":
 print "An empty string is false."
 

 False, 0, (), [], {} and "" are all different from None, so your two code snippets are not equivalent. 

 Moreover, consider the following: 

 &gt;&gt;&gt; False == 0
True
&gt;&gt;&gt; False == ()
False
 

 "if object:" is not an equality check. 0, (), [], None, {}, etc. are all different from each other, but they all evaluate to False. 

 This is the "magic" behind short circuiting expressions like: 

 foo = bar and spam or eggs
 

 which is shorthand for: 

 if bar:
 foo = bar
else:
 foo = eggs
 
 #3 These two comparisons serve different purposes. The former checks for boolean value of something, the second checks for identity with None value. 
 #4 If you ask 

 if not spam:
 print "Sorry. No SPAM."
 

 the __nonzero__ method of spam gets called. From the Python manual: 

 
 __nonzero__ ( self )
 Called to implement truth value testing, and the built-in operation bool(); should return False or True, or their integer equivalents 0 or 1. When this method is not defined, __len__() is called, if it is defined (see below). If a class defines neither __len__() nor __nonzero__(), all its instances are considered true. 
 

 If you ask 

 if spam == None:
 print "Sorry. No SPAM here either."
 

 the __eq__ method of spam gets called with the argument None . 

 For more information of the customization possibilities have a look at the Python documenation at http://www.python.org/doc/2.3.5/ref/customization.html 
 #5 Style guide recommends to use is or is not if you are testing for None-ness 

 
 - Comparisons to singletons like None should always be done with
 'is' or 'is not', never the equality operators.
 
 

 On the other hand if you are testing for more than None-ness, you should use the boolean operator. 
 #6 For one the first example is shorter and looks nicer. As per the other posts what you choose also depends on what you really want to do with the comparison. 
 #7 The answer is "it depends". 

 I use the first example if I consider 0, "", [] and False (list not exhaustive) to be equivalent to None in this context. 
 #8 Personally, I chose a consistent approach across languages: I do if (var) (or equivalent) only if var is declared as boolean (or defined as such, in C we don't have a specific type). I even prefix these variables with a b (so it would be bVar actually) to be sure I won't accidentally use another type here. 
I don't really like implicit casting to boolean, even less when there are numerous, complex rules. 

 Of course, people will disagree. Some go farther, I see if (bVar == true) in the Java code at my work (too redundant for my taste!), others love too much compact syntax, going while (line = getNextLine()) (too ambiguous for me).