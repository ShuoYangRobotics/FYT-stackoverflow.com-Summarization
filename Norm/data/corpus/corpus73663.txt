Question (ID-73663): Terminating a Python script I am aware of the die() command in PHP which stops a script early, how can I do this in Python? 
 Answers (Total-5): #0 import sys
sys.exit()
 

 details from the sys module documentation : 

 
 exit([arg]) 
 
 Exit from Python. This is 
 implemented by raising the SystemExit
 exception, so cleanup actions
 specified by finally clauses of try
 statements are honored, and it is
 possible to intercept the exit attempt
 at an outer level. The optional
 argument arg can be an integer giving
 the exit status (defaulting to zero),
 or another type of object. If it is an
 integer, zero is considered
 successful termination'' and any
 nonzero value is considered abnormal
 termination'' by shells and the like.
 Most systems require it to be in the
 range 0-127, and produce undefined
 results otherwise. Some systems have a
 convention for assigning specific
 meanings to specific exit codes, but
 these are generally underdeveloped;
 Unix programs generally use 2 for
 command line syntax errors and 1 for
 all other kind of errors. If another
 type of object is passed, None is
 equivalent to passing zero, and any
 other object is printed to sys.stderr
 and results in an exit code of 1. In
 particular, sys.exit("some error
 message") is a quick way to exit a
 program when an error occurs. 
 

 Note that this is the 'nice' way to exit. @ glyphtwistedmatrix below points out that if you want a 'hard exit', you can use os. exit( errorcode*), though it's likely os-specific to some extent (it might not take an errorcode under windows, for example), and it definitely is less friendly since it doesn't let the interpreter do any cleanup before the process dies. 
 #1 While you should generally prefer sys.exit because it is more "friendly" to other code, all it actually does is raise an exception. 

 If you are sure that you need to exit a process immediately, and you might be inside of some exception handler which would catch SystemExit , there is another function - os._exit - which terminates immediately at the C level and does not perform any of the normal tear-down of the interpreter; for example, hooks registered with the "atexit" module are not executed. 
 #2 Another way is: 

 raise SystemExit
 
 #3 From sys import exit: 

 exit()
 

 As a parameter you can pass an exit code, which will be returned to OS. Default is 0. 
 #4 Presumably sys.exit() doesn't work (doesn't kill the process, just kills the thread) if raised by a background thread?