Question (ID-2068372): Fastest way to list all primes below N in python This is the best algorithm I could come up with after struggling with a couple of Project Euler's questions. 

 def get_primes(n):
 numbers = set(range(n, 1, -1))
 primes = []
 while numbers:
  p = numbers.pop()
  primes.append(p)
  numbers.difference_update(set(range(p*2, n+1, p)))
 return primes

&gt;&gt;&gt; timeit.Timer(stmt='get_primes.get_primes(1000000)', setup='import get_primes').timeit(1)
1.1499958793645562
 

 Can it be made even faster? 

 

 EDIT: This code has a flaw: Since numbers is an unordered set, there is no guarantee that numbers.pop() will remove the lowest number from the set. Nevertheless, it works (at least for me) for some input numbers: 

 &gt;&gt;&gt; sum(get_primes(2000000))
142913828922L
#That's the correct sum of all numbers below 2 million
&gt;&gt;&gt; 529 in get_primes(1000)
False
&gt;&gt;&gt; 529 in get_primes(530)
True
 

 

 EDIT: The rank so far ( pure python , no external sources, all primes below 1 million): 

 
 Sundaram's Sieve implementation by myself : 327ms 
 Daniel's Sieve : 435ms 
 Alex's recipe from Cookbok : 710ms 
 

 

 EDIT: ~unutbu is leading the race . 
 Answers (Total-17): #0 Warning: timeit results may vary due to differences in hardware or
version of Python. 

 Below is a script which compares a number of implementations: 
 
 ambi_sieve_plain,
 rwh_primes , 
 rwh_primes1 , 
 rwh_primes2 , 
 sieveOfAtkin , 
 sieveOfEratosthenes , 
 sundaram3 ,
 sieve_wheel_30 ,
 ambi_sieve (requires numpy)
 primesfrom3to (requires numpy)
 primesfrom2to (requires numpy)
 

 Many thanks to stephan for bringing sieve_wheel_30 to my attention.
Credit goes to Robert William Hanks for primesfrom2to, primesfrom3to, rwh_primes, rwh_primes1, and rwh_primes2. 

 Of the plain Python methods tested, with psyco , for n=1000000,
 rwh_primes1 was the fastest tested. 

 +---------------------+-------+
| Method    | ms |
+---------------------+-------+
| rwh_primes1   | 43.0 |
| sieveOfAtkin  | 46.4 |
| rwh_primes   | 57.4 |
| sieve_wheel_30  | 63.0 |
| rwh_primes2   | 67.8 | 
| sieveOfEratosthenes | 147.0 |
| ambi_sieve_plain | 152.0 |
| sundaram3   | 194.0 |
+---------------------+-------+
 

 Of the plain Python methods tested, without psyco , for n=1000000,
 rwh_primes2 was the fastest. 

 +---------------------+-------+
| Method    | ms |
+---------------------+-------+
| rwh_primes2   | 68.1 |
| rwh_primes1   | 93.7 |
| rwh_primes   | 94.6 |
| sieve_wheel_30  | 97.4 |
| sieveOfEratosthenes | 178.0 |
| ambi_sieve_plain | 286.0 |
| sieveOfAtkin  | 314.0 |
| sundaram3   | 416.0 |
+---------------------+-------+
 

 Of all the methods tested, allowing numpy , for n=1000000,
 primesfrom2to was the fastest tested. 

 +---------------------+-------+
| Method    | ms |
+---------------------+-------+
| primesfrom2to  | 15.9 |
| primesfrom3to  | 18.4 |
| ambi_sieve   | 29.3 |
+---------------------+-------+
 

 Timings were measured using the command: 

 python -mtimeit -s"import primes" "primes.{method}(10000000)"
 

 with {method} replaced by each of the method names. 

 primes.py: 

 #!/usr/bin/env python
import psyco; psyco.full()
from math import sqrt, ceil
import numpy as np

def rwh_primes(n):
 # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
 """ Returns a list of primes &lt; n """
 sieve = [True] * n
 for i in xrange(3,int(n**0.5)+1,2):
  if sieve[i]:
   sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)
 return [2] + [i for i in xrange(3,n,2) if sieve[i]]

def rwh_primes1(n):
 # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
 """ Returns a list of primes &lt; n """
 sieve = [True] * (n/2)
 for i in xrange(3,int(n**0.5)+1,2):
  if sieve[i/2]:
   sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)
 return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]

def rwh_primes2(n):
 # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
 """ Input n&gt;=6, Returns a list of primes, 2 &lt;= p &lt; n """
 correction = (n%6&gt;1)
 n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]
 sieve = [True] * (n/3)
 sieve[0] = False
 for i in xrange(int(n**0.5)/3+1):
  if sieve[i]:
  k=3*i+1|1
  sieve[  ((k*k)/3)  ::2*k]=[False]*((n/6-(k*k)/6-1)/k+1)
  sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k]=[False]*((n/6-(k*k+4*k-2*k*(i&amp;1))/6-1)/k+1)
 return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]

def sieve_wheel_30(N):
 # http://zerovolt.com/?p=88
 ''' Returns a list of primes &lt;= N using wheel criterion 2*3*5 = 30

Copyright 2009 by zerovolt.com
This code is free for non-commercial purposes, in which case you can just leave this comment as a credit for my work.
If you need this code for commercial purposes, please contact me by sending an email to: info [at] zerovolt [dot] com.'''
 __smallp = ( 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,
 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,
 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,
 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,
 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,
 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,
 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,
 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,
 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)

 wheel = (2, 3, 5)
 const = 30
 if N &lt; 2:
  return []
 if N &lt;= const:
  pos = 0
  while __smallp[pos] &lt;= N:
   pos += 1
  return list(__smallp[:pos])
 # make the offsets list
 offsets = (7, 11, 13, 17, 19, 23, 29, 1)
 # prepare the list
 p = [2, 3, 5]
 dim = 2 + N // const
 tk1 = [True] * dim
 tk7 = [True] * dim
 tk11 = [True] * dim
 tk13 = [True] * dim
 tk17 = [True] * dim
 tk19 = [True] * dim
 tk23 = [True] * dim
 tk29 = [True] * dim
 tk1[0] = False
 # help dictionary d
 # d[a , b] = c ==&gt; if I want to find the smallest useful multiple of (30*pos)+a
 # on tkc, then I need the index given by the product of [(30*pos)+a][(30*pos)+b]
 # in general. If b &lt; a, I need [(30*pos)+a][(30*(pos+1))+b]
 d = {}
 for x in offsets:
  for y in offsets:
   res = (x*y) % const
   if res in offsets:
    d[(x, res)] = y
 # another help dictionary: gives tkx calling tmptk[x]
 tmptk = {1:tk1, 7:tk7, 11:tk11, 13:tk13, 17:tk17, 19:tk19, 23:tk23, 29:tk29}
 pos, prime, lastadded, stop = 0, 0, 0, int(ceil(sqrt(N)))
 # inner functions definition
 def del_mult(tk, start, step):
  for k in xrange(start, len(tk), step):
   tk[k] = False
 # end of inner functions definition
 cpos = const * pos
 while prime &lt; stop:
  # 30k + 7
  if tk7[pos]:
   prime = cpos + 7
   p.append(prime)
   lastadded = 7
   for off in offsets:
    tmp = d[(7, off)]
    start = (pos + prime) if off == 7 else (prime * (const * (pos + 1 if tmp &lt; 7 else 0) + tmp) )//const
    del_mult(tmptk[off], start, prime)
  # 30k + 11
  if tk11[pos]:
   prime = cpos + 11
   p.append(prime)
   lastadded = 11
   for off in offsets:
    tmp = d[(11, off)]
    start = (pos + prime) if off == 11 else (prime * (const * (pos + 1 if tmp &lt; 11 else 0) + tmp) )//const
    del_mult(tmptk[off], start, prime)
  # 30k + 13
  if tk13[pos]:
   prime = cpos + 13
   p.append(prime)
   lastadded = 13
   for off in offsets:
    tmp = d[(13, off)]
    start = (pos + prime) if off == 13 else (prime * (const * (pos + 1 if tmp &lt; 13 else 0) + tmp) )//const
    del_mult(tmptk[off], start, prime)
  # 30k + 17
  if tk17[pos]:
   prime = cpos + 17
   p.append(prime)
   lastadded = 17
   for off in offsets:
    tmp = d[(17, off)]
    start = (pos + prime) if off == 17 else (prime * (const * (pos + 1 if tmp &lt; 17 else 0) + tmp) )//const
    del_mult(tmptk[off], start, prime)
  # 30k + 19
  if tk19[pos]:
   prime = cpos + 19
   p.append(prime)
   lastadded = 19
   for off in offsets:
    tmp = d[(19, off)]
    start = (pos + prime) if off == 19 else (prime * (const * (pos + 1 if tmp &lt; 19 else 0) + tmp) )//const
    del_mult(tmptk[off], start, prime)
  # 30k + 23
  if tk23[pos]:
   prime = cpos + 23
   p.append(prime)
   lastadded = 23
   for off in offsets:
    tmp = d[(23, off)]
    start = (pos + prime) if off == 23 else (prime * (const * (pos + 1 if tmp &lt; 23 else 0) + tmp) )//const
    del_mult(tmptk[off], start, prime)
  # 30k + 29
  if tk29[pos]:
   prime = cpos + 29
   p.append(prime)
   lastadded = 29
   for off in offsets:
    tmp = d[(29, off)]
    start = (pos + prime) if off == 29 else (prime * (const * (pos + 1 if tmp &lt; 29 else 0) + tmp) )//const
    del_mult(tmptk[off], start, prime)
  # now we go back to top tk1, so we need to increase pos by 1
  pos += 1
  cpos = const * pos
  # 30k + 1
  if tk1[pos]:
   prime = cpos + 1
   p.append(prime)
   lastadded = 1
   for off in offsets:
    tmp = d[(1, off)]
    start = (pos + prime) if off == 1 else (prime * (const * pos + tmp) )//const
    del_mult(tmptk[off], start, prime)
 # time to add remaining primes
 # if lastadded == 1, remove last element and start adding them from tk1
 # this way we don't need an "if" within the last while
 if lastadded == 1:
  p.pop()
 # now complete for every other possible prime
 while pos &lt; len(tk1):
  cpos = const * pos
  if tk1[pos]: p.append(cpos + 1)
  if tk7[pos]: p.append(cpos + 7)
  if tk11[pos]: p.append(cpos + 11)
  if tk13[pos]: p.append(cpos + 13)
  if tk17[pos]: p.append(cpos + 17)
  if tk19[pos]: p.append(cpos + 19)
  if tk23[pos]: p.append(cpos + 23)
  if tk29[pos]: p.append(cpos + 29)
  pos += 1
 # remove exceeding if present
 pos = len(p) - 1
 while p[pos] &gt; N:
  pos -= 1
 if pos &lt; len(p) - 1:
  del p[pos+1:]
 # return p list
 return p

def sieveOfEratosthenes(n):
 """sieveOfEratosthenes(n): return the list of the primes &lt; n."""
 # Code from: &lt;dickinsm@gmail.com&gt;, Nov 30 2006
 # http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d
 if n &lt;= 2:
  return []
 sieve = range(3, n, 2)
 top = len(sieve)
 for si in sieve:
  if si:
   bottom = (si*si - 3) // 2
   if bottom &gt;= top:
    break
   sieve[bottom::si] = [0] * -((bottom - top) // si)
 return [2] + [el for el in sieve if el]

def sieveOfAtkin(end):
 """sieveOfAtkin(end): return a list of all the prime numbers &lt;end
 using the Sieve of Atkin."""
 # Code by Steve Krenzel, &lt;Sgk284@gmail.com&gt;, improved
 # Code: http://krenzel.info/?p=83
 # Info: http://en.wikipedia.org/wiki/Sieve_of_Atkin
 assert end &gt; 0
 lng = ((end-1) // 2)
 sieve = [False] * (lng + 1)

 x_max, x2, xd = int(sqrt((end-1)/4.0)), 0, 4
 for xd in xrange(4, 8*x_max + 2, 8):
  x2 += xd
  y_max = int(sqrt(end-x2))
  n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1
  if not (n &amp; 1):
   n -= n_diff
   n_diff -= 2
  for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):
   m = n % 12
   if m == 1 or m == 5:
    m = n &gt;&gt; 1
    sieve[m] = not sieve[m]
   n -= d

 x_max, x2, xd = int(sqrt((end-1) / 3.0)), 0, 3
 for xd in xrange(3, 6 * x_max + 2, 6):
  x2 += xd
  y_max = int(sqrt(end-x2))
  n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1
  if not(n &amp; 1):
   n -= n_diff
   n_diff -= 2
  for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):
   if n % 12 == 7:
    m = n &gt;&gt; 1
    sieve[m] = not sieve[m]
   n -= d

 x_max, y_min, x2, xd = int((2 + sqrt(4-8*(1-end)))/4), -1, 0, 3
 for x in xrange(1, x_max + 1):
  x2 += xd
  xd += 6
  if x2 &gt;= end: y_min = (((int(ceil(sqrt(x2 - end))) - 1) &lt;&lt; 1) - 2) &lt;&lt; 1
  n, n_diff = ((x*x + x) &lt;&lt; 1) - 1, (((x-1) &lt;&lt; 1) - 2) &lt;&lt; 1
  for d in xrange(n_diff, y_min, -8):
   if n % 12 == 11:
    m = n &gt;&gt; 1
    sieve[m] = not sieve[m]
   n += d

 primes = [2, 3]
 if end &lt;= 3:
  return primes[:max(0,end-2)]

 for n in xrange(5 &gt;&gt; 1, (int(sqrt(end))+1) &gt;&gt; 1):
  if sieve[n]:
   primes.append((n &lt;&lt; 1) + 1)
   aux = (n &lt;&lt; 1) + 1
   aux *= aux
   for k in xrange(aux, end, 2 * aux):
    sieve[k &gt;&gt; 1] = False

 s = int(sqrt(end)) + 1
 if s % 2 == 0:
  s += 1
 primes.extend([i for i in xrange(s, end, 2) if sieve[i &gt;&gt; 1]])

 return primes

def ambi_sieve_plain(n):
 s = range(3, n, 2)
 for m in xrange(3, int(n**0.5)+1, 2): 
  if s[(m-3)/2]: 
   for t in xrange((m*m-3)/2,(n&gt;&gt;1)-1,m):
    s[t]=0
 return [2]+[t for t in s if t&gt;0]

def sundaram3(max_n):
 # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279
 numbers = range(3, max_n+1, 2)
 half = (max_n)//2
 initial = 4

 for step in xrange(3, max_n+1, 2):
  for i in xrange(initial, half, step):
   numbers[i-1] = 0
  initial += 2*(step+1)

  if initial &gt; half:
   return [2] + filter(None, numbers)

################################################################################
# Using Numpy:
def ambi_sieve(n):
 # http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html
 s = np.arange(3, n, 2)
 for m in xrange(3, int(n ** 0.5)+1, 2): 
  if s[(m-3)/2]: 
   s[(m*m-3)/2::m]=0
 return np.r_[2, s[s&gt;0]]

def primesfrom3to(n):
 # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
 """ Returns a array of primes, p &lt; n """
 assert n&gt;=2
 sieve = np.ones(n/2, dtype=np.bool)
 for i in xrange(3,int(n**0.5)+1,2):
  if sieve[i/2]:
   sieve[i*i/2::i] = False
 return np.r_[2, 2*np.nonzero(sieve)[0][1::]+1] 

def primesfrom2to(n):
 # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
 """ Input n&gt;=6, Returns a array of primes, 2 &lt;= p &lt; n """
 sieve = np.ones(n/3 + (n%6==2), dtype=np.bool)
 sieve[0] = False
 for i in xrange(int(n**0.5)/3+1):
  if sieve[i]:
   k=3*i+1|1
   sieve[  ((k*k)/3)  ::2*k] = False
   sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k] = False
 return np.r_[2,3,((3*np.nonzero(sieve)[0]+1)|1)]

if __name__=='__main__':
 import itertools
 import sys

 def test(f1,f2,num):
  print('Testing {f1} and {f2} return same results'.format(
   f1=f1.func_name,
   f2=f2.func_name))
  if not all([a==b for a,b in itertools.izip_longest(f1(num),f2(num))]):
   sys.exit("Error: %s(%s) != %s(%s)"%(f1.func_name,num,f2.func_name,num))

 n=1000000
 test(sieveOfAtkin,sieveOfEratosthenes,n)
 test(sieveOfAtkin,ambi_sieve,n)
 test(sieveOfAtkin,ambi_sieve_plain,n) 
 test(sieveOfAtkin,sundaram3,n)
 test(sieveOfAtkin,sieve_wheel_30,n)
 test(sieveOfAtkin,primesfrom3to,n)
 test(sieveOfAtkin,primesfrom2to,n)
 test(sieveOfAtkin,rwh_primes,n)
 test(sieveOfAtkin,rwh_primes1,n)   
 test(sieveOfAtkin,rwh_primes2,n)
 

 Running the script tests that all implementations give the same result. 
 #1 There's a pretty neat sample from the Python Cookbook here -- the fastest version proposed on that URL is: 

 import itertools
def erat2( ):
 D = { }
 yield 2
 for q in itertools.islice(itertools.count(3), 0, None, 2):
  p = D.pop(q, None)
  if p is None:
   D[q*q] = q
   yield q
  else:
   x = p + q
   while x in D or not (x&amp;1):
    x += p
   D[x] = p
 

 so that would give 

 get_primes_erat(n):
 return list(itertools.takewhile(lambda p: p&lt;n, erat2()))
 

 Measuring at the shell prompt (as I prefer to do) with this code in pri.py, I observe: 

 $ python2.5 -mtimeit -s'import pri' 'pri.get_primes(1000000)'
10 loops, best of 3: 1.69 sec per loop
$ python2.5 -mtimeit -s'import pri' 'pri.get_primes_erat(1000000)'
10 loops, best of 3: 673 msec per loop
 

 so it looks like the Cookbook solution is over twice as fast. 
 #2 Related question(dealing with primes generators &amp; including benchmarks): 
 Speed up bitstring/bit operations in Python? 

 Faster &amp; more memory-wise pure Python code: 

 def primes(n):
 """ Returns a list of primes &lt; n """
 sieve = [True] * n
 for i in xrange(3,int(n**0.5)+1,2):
  if sieve[i]:
   sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)
 return [2] + [i for i in xrange(3,n,2) if sieve[i]]
 

 or starting with half sieve 

 def primes1(n):
 """ Returns a list of primes &lt; n """
 sieve = [True] * (n/2)
 for i in xrange(3,int(n**0.5)+1,2):
  if sieve[i/2]:
   sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)
 return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]
 

 Faster &amp; more memory-wise numpy code: 

 import numpy
def primesfrom3to(n):
 """ Returns a array of primes, 3 &lt;= p &lt; n """
 sieve = numpy.ones(n/2, dtype=numpy.bool)
 for i in xrange(3,int(n**0.5)+1,2):
  if sieve[i/2]:
   sieve[i*i/2::i] = False
 return 2*numpy.nonzero(sieve)[0][1::]+1
 

 a faster variation starting with a third of a sieve: 

 import numpy
def primesfrom2to(n):
 """ Input n&gt;=6, Returns a array of primes, 2 &lt;= p &lt; n """
 sieve = numpy.ones(n/3 + (n%6==2), dtype=numpy.bool)
 for i in xrange(1,int(n**0.5)/3+1):
  if sieve[i]:
   k=3*i+1|1
   sieve[  k*k/3  ::2*k] = False
   sieve[k*(k-2*(i&amp;1)+4)/3::2*k] = False
 return numpy.r_[2,3,((3*numpy.nonzero(sieve)[0][1:]+1)|1)]
 

 A (hard-to-code) pure-python version of the above code would be: 

 def primes2(n):
 """ Input n&gt;=6, Returns a list of primes, 2 &lt;= p &lt; n """
 n, correction = n-n%6+6, 2-(n%6&gt;1)
 sieve = [True] * (n/3)
 for i in xrange(1,int(n**0.5)/3+1):
  if sieve[i]:
  k=3*i+1|1
  sieve[  k*k/3  ::2*k] = [False] * ((n/6-k*k/6-1)/k+1)
  sieve[k*(k-2*(i&amp;1)+4)/3::2*k] = [False] * ((n/6-k*(k-2*(i&amp;1)+4)/6-1)/k+1)
 return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]
 

 Unfortunately pure-python don't adopt the simpler and faster numpy way of doing Assignment, and calling len() inside the loop as in [False]*len(sieve[((k*k)/3)::2*k]) is too slow. So i had to improvise to correct input (&amp; avoid more math) and do some extreme (&amp; painful) math-magic. 
 Personally i think it is a shame that numpy (which is so widely used) is not part of python standard library(2 years after python 3 release &amp; no numpy compatibility), and that the improvements in syntax and speed seem to be completely overlooked by python developers. 
 #3 For truly fastest solution with sufficiently large N would be to download a pre-calculated list of primes , store it as a tuple and do something like: 

 for pos,i in enumerate(primes):
 if i &gt; N:
  print primes[:pos]
 

 If N &gt; primes[-1] only then calculate more primes and save the new list in your code, so next time it is equally as fast. 

 Always think outside the box. 
 #4 The algorithm is fast, but it has a serious flaw: 

 &gt;&gt;&gt; sorted(get_primes(530))
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,
79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,
167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,
257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,
353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,
449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 527, 529]
&gt;&gt;&gt; 17*31
527
&gt;&gt;&gt; 23*23
529
 

 You assume that numbers.pop() would return the smallest number in the set, but this is not guaranteed at all. Sets are unordered and pop() removes and returns an arbitrary element, so it cannot be used to select the next prime from the remaining numbers. 
 #5 Using Sundaram's Sieve , I think I broke pure-Python's record: 

 def sundaram3(max_n):
 numbers = range(3, max_n+1, 2)
 half = (max_n)//2
 initial = 4

 for step in xrange(3, max_n+1, 2):
  for i in xrange(initial, half, step):
   numbers[i-1] = 0
  initial += 2*(step+1)

  if initial &gt; half:
   return [2] + filter(None, numbers)
 

 Comparasion: 

 C:\USERS&gt;python -m timeit -n10 -s "import get_primes" "get_primes.get_primes_erat(1000000)"
10 loops, best of 3: 710 msec per loop

C:\USERS&gt;python -m timeit -n10 -s "import get_primes" "get_primes.daniel_sieve_2(1000000)"
10 loops, best of 3: 435 msec per loop

C:\USERS&gt;python -m timeit -n10 -s "import get_primes" "get_primes.sundaram3(1000000)"
10 loops, best of 3: 327 msec per loop
 
 #6 A deterministic implementation of Miller-Rabin's Primality test on the assumption that N &lt; 9,080,191 

 import sys
import random

def miller_rabin_pass(a, n):
 d = n - 1
 s = 0
 while d % 2 == 0:
  d &gt;&gt;= 1
  s += 1

 a_to_power = pow(a, d, n)
 if a_to_power == 1:
  return True
 for i in xrange(s-1):
  if a_to_power == n - 1:
   return True
  a_to_power = (a_to_power * a_to_power) % n
 return a_to_power == n - 1


def miller_rabin(n):
 for a in [2, 3, 37, 73]:
  if not miller_rabin_pass(a, n):
  return False
 return True


n = int(sys.argv[1])
primes = [2]
for p in range(3,n,2):
 if miller_rabin(p):
 primes.append(p)
print len(primes)
 

 According to the article on Wikipedia (http://en.wikipedia.org/wiki/Miller–Rabin_primality_test) testing N &lt; 9,080,191 for a = 2,3,37, and 73 is enough to decide whether N is composite or not. 

 And I adapted the source code from the probabilistic implementation of original Miller-Rabin's test found here: http://en.literateprograms.org/Miller-Rabin_primality_test_(Python ) 
 #7 For the fastest code, the numpy solution is the best. For purely academic reasons, though, I'm posting my pure python version, which is a bit less than 50% faster than the cookbook version posted above. Since I make the entire list in memory, you need enough space to hold everything, but it seems to scale fairly well. 

 def daniel_sieve_2(maxNumber):
 """
 Given a number, returns all numbers less than or equal to
 that number which are prime.
 """
 allNumbers = range(3, maxNumber+1, 2)
 for mIndex, number in enumerate(xrange(3, maxNumber+1, 2)):
  if allNumbers[mIndex] == 0:
   continue
  # now set all multiples to 0
  for index in xrange(mIndex+number, (maxNumber-3)/2+1, number):
   allNumbers[index] = 0
 return [2] + filter(lambda n: n!=0, allNumbers)
 

 And the results: 

 &gt;&gt;&gt;mine = timeit.Timer("daniel_sieve_2(1000000)",
...     "from sieves import daniel_sieve_2")
&gt;&gt;&gt;prev = timeit.Timer("get_primes_erat(1000000)",
...     "from sieves import get_primes_erat")
&gt;&gt;&gt;print "Mine: {0:0.4f} ms".format(min(mine.repeat(3, 1))*1000)
Mine: 428.9446 ms
&gt;&gt;&gt;print "Previous Best {0:0.4f} ms".format(min(prev.repeat(3, 1))*1000)
Previous Best 621.3581 ms
 
 #8 If you have control over N, the very fastest way to list all primes is to precompute them. Seriously. Precomputing is a way overlooked optimization. 
 #9 A slightly different implementation of a half sieve using Numpy: 

 http://rebrained.com/?p=458 

 
import math
import numpy
def prime6(upto):
 primes=numpy.arange(3,upto+1,2)
 isprime=numpy.ones((upto-1)/2,dtype=bool)
 for factor in primes[:int(math.sqrt(upto))]:
  if isprime[(factor-2)/2]: isprime[(factor*3-2)/2:(upto-1)/2:factor]=0
 return numpy.insert(primes[isprime],0,2)
 

 Can someone compare this with the other timings? On my machine it seems pretty comparable to the other Numpy half-sieve. 
 #10 What size of primes do you want? There are some very fast statistical algorithms out there (eg Miller-Rabin), but their overheads mean they turn out slower unless dealing with very big (over 2^64) numbers.. 
 #11 In general if you need fast number computation python is not the best choice. Today there are a lot of faster (and complex) algorithm. For example on my computer I got 2.2 second for your code, with Mathematica I got 0.088005. 

 First of all: do you need set? 
 #12 The easiest optimization to implement is that if you want to check whether n is prime, you only have to check to see if n is divisible by a number up to square_root(n).
Is this for Project Euler? 
 #13 Here's the code I normally use to generate primes in Python: 

 $ python -mtimeit -s'import sieve' 'sieve.sieve(1000000)' 
10 loops, best of 3: 445 msec per loop
$ cat sieve.py
from math import sqrt

def sieve(size):
 prime=[True]*size
 rng=xrange
 limit=int(sqrt(size))

 for i in rng(3,limit+1,+2):
 if prime[i]:
 prime[i*i::+i]=[False]*len(prime[i*i::+i])

 return [2]+[i for i in rng(3,size,+2) if prime[i]]

if __name__=='__main__':
 print sieve(100)
 

 It can't compete with the faster solutions posted here, but at least it is pure python. 

 Thanks for posting this question. I really learnt a lot today. 
 #14 My guess is that the fastest of all ways is to hard code the primes in your code. 

 So why not just write a slow script that generates another source file that has all numbers hardwired in it, and then import that source file when you run your actual program. 

 Of course, this works only if you know the upper bound of N at compile time, but thus is the case for (almost) all project Euler problems. 

 

 PS: I might be wrong though iff parsing the source with hard-wired primes is slower than computing them in the first place, but as far I know Python runs from compiled .pyc files so reading a binary array with all primes up to N should be bloody fast in that case. 
 #15 Sorry to bother but erat2() has a serious flaw in the algorithm. 

 While searching for the next composite, we need to test odd numbers only.
q,p both are odd; then q+p is even and doesn't need to be tested, but q+2*p is always odd. This eliminates the "if even" test in the while loop condition and saves about 30% of the runtime. 

 While we're at it: instead of the elegant 'D.pop(q,None)' get and delete method use 'if q in D: p=D[q],del D[q]' which is twice as fast! At least on my machine (P3-1Ghz).
So I suggest this implementation of this clever algorithm: 

 def erat3( ):
 from itertools import islice, count

 # q is the running integer that's checked for primeness.
 # yield 2 and no other even number thereafter
 yield 2
 D = {}
 # no need to mark D[4] as we will test odd numbers only
 for q in islice(count(3),0,None,2):
  if q in D:     # is composite
   p = D[q]
   del D[q]
   # q is composite. p=D[q] is the first prime that
   # divides it. Since we've reached q, we no longer
   # need it in the map, but we'll mark the next
   # multiple of its witnesses to prepare for larger
   # numbers.
   x = q + p+p  # next odd(!) multiple
   while x in D:  # skip composites
    x += p+p
   D[x] = p
  else:     # is prime
   # q is a new prime.
   # Yield it and mark its first multiple that isn't
   # already marked in previous iterations.
   D[q*q] = q
   yield q
 
 #16 The fastest method I've tried so far is based on the Python cookbook erat2 function: 

 import itertools as it
def erat2a( ):
 D = { }
 yield 2
 for q in it.islice(it.count(3), 0, None, 2):
  p = D.pop(q, None)
  if p is None:
   D[q*q] = q
   yield q
  else:
   x = q + 2*p
   while x in D:
    x += 2*p
   D[x] = p
 

 See this answer for an explanation of the speeding-up.