Question (ID-818828): Is it possible to implement a Python for range loop without an iterator variable? Is is possible to do this; 

 for i in range(some_number):
 #do something
 

 without the i? If you just want to do something x amount of times and don't need the iterator. 
 Answers (Total-7): #0 You may be looking for 

 for _ in itertools.repeat(None, times): ...
 

 this is THE fastest way to iterate times times in Python. 
 #1 Off the top of my head, no. 

 I think the best you could do is something like this: 

 def loop(f,n):
 for i in xrange(n): f()

loop(lambda: &lt;insert expression here&gt;, 5)
 

 But I think you can just live with the extra i variable. 

 Here is the option to use the _ variable, which in reality, is just another variable. 

 for _ in range(n):
 do_something()
 

 Note that _ is assigned the last result that returned in an interactive python session: 

 &gt;&gt;&gt; 1+2
3
&gt;&gt;&gt; _
3
 

 For this reason, I would not use it in this manner. I am unaware of any idiom as mentioned by Ryan. It can mess up your interpreter. 

 &gt;&gt;&gt; for _ in xrange(10): pass
...
&gt;&gt;&gt; _
9
&gt;&gt;&gt; 1+2
3
&gt;&gt;&gt; _
9
 

 And according to python grammar , it is an acceptable variable name: 

 
 identifier ::= 
    (letter|"_") (letter | digit | "_")* 
 
 #2 The general idiom for assigning to a value that isn't used is to name it _ . 

 for _ in range(times):
 do_stuff()
 
 #3 What everyone suggesting you to use _ isn't saying is that _ is frequently used as a shortcut to one of the gettext functions, so if you want your software to be available in more than one language then you're best off avoiding using it for other purposes. 

 import gettext
gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')
gettext.textdomain('myapplication')
_ = gettext.gettext
# ...
print _('This is a translatable string.')
 
 #4 Here's a random idea that utilizes (abuses?) the data model . 

 class Counter(object):
 def __init__(self, val):
 self.val = val

 def __nonzero__(self):
 self.val -= 1
 return self.val &gt;= 0

x = Counter(5)
while x:
 # Do something
 pass
 

 I wonder if there is something like this in the standard libraries? 
 #5 May be answer would depend on what problem you have with using iterator?
may be use 

 i = 100
while i:
 print i
 i-=1
 

 or 

 def loop(N, doSomething):
 if not N:
  return
 print doSomething(N)
 loop(N-1, doSomething)

loop(100, lambda a:a)
 

 but frankly i see no point in using such approaches 
 #6 t=0 
for _ in range (0, 10):
 print t
 t = t+1
 

 OUTPUT: 
0
1 
2 
3 
4 
5 
6 
7 
9