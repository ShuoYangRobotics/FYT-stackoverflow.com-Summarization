Question (ID-1305532): Convert Python dict to object I'm searching for an elegant way to convert a normal Python dict with some nested dicts to an object. 

 For example: 

 &gt;&gt;&gt; d = {'a': 1, 'b': {'c': 2}, 'd': ["hi", {'foo': "bar"}]}
 

 Should be accessible in this way: 

 &gt;&gt;&gt; x = dict2obj(d)
&gt;&gt;&gt; x.a
1
&gt;&gt;&gt; x.b.c
2
&gt;&gt;&gt; x.d[1].foo
bar
 

 I think, this is not possible without recursion, but what would be a nice way to get an objectstyle for dicts? 

 Thank you in advance,
cheers Marc 
 Answers (Total-14): #0 class Struct:
 def __init__(self, **entries): 
  self.__dict__.update(entries)
 

 Then, you can use: 

 &gt;&gt;&gt; args = {'a': 1, 'b': 2}
&gt;&gt;&gt; s = Struct(**args)
&gt;&gt;&gt; s
&lt;__main__.Struct instance at 0x01D6A738&gt;
&gt;&gt;&gt; s.a
1
&gt;&gt;&gt; s.b
2
 
 #1 class obj(object):
 def __init__(self, d):
  for a, b in d.items():
   if isinstance(b, (list, tuple)):
    setattr(self, a, [obj(x) if isinstance(x, dict) else x for x in b])
   else:
    setattr(self, a, obj(b) if isinstance(b, dict) else b)


&gt;&gt;&gt; x = obj(d)
&gt;&gt;&gt; x.b.c
2
&gt;&gt;&gt; x.d[1].foo
'bar'
 
 #2 x = type('new_dict', (object,), d)
 

 then add recursion to this and you're done. 

 edit this is how I'd implement it: 

 &gt;&gt;&gt; d
{'a': 1, 'b': {'c': 2}, 'd': ['hi', {'foo': 'bar'}]}
&gt;&gt;&gt; def obj_dic(d):
 top = type('new', (object,), d)
 seqs = tuple, list, set, frozenset
 for i, j in d.items():
 	if isinstance(j, dict):
 	 setattr(top, i, obj_dic(j))
 	elif isinstance(j, seqs):
 	 setattr(top, i, 
 		 type(j)(obj_dic(sj) if isinstance(sj, dict) else sj for sj in j))
 	else:
 	 setattr(top, i, j)
 return top

&gt;&gt;&gt; x = obj_dic(d)
&gt;&gt;&gt; x.a
1
&gt;&gt;&gt; x.b.c
2
&gt;&gt;&gt; x.d[1].foo
'bar'
 
 #3 &gt;&gt;&gt; def dict2obj(d):
  if isinstance(d, list):
 	 d = [dict2obj(x) for x in d]
  if not isinstance(d, dict):
   return d
  class C(object):
 	 pass
  o = C()
  for k in d:
   o.__dict__[k] = dict2obj(d[k])
  return o


&gt;&gt;&gt; d = {'a': 1, 'b': {'c': 2}, 'd': ["hi", {'foo': "bar"}]}
&gt;&gt;&gt; x = dict2obj(d)
&gt;&gt;&gt; x.a
1
&gt;&gt;&gt; x.b.c
2
&gt;&gt;&gt; x.d[1].foo
'bar'
 
 #4 This should get your started: 

 class dict2obj(object):
 def __init__(self, d):
  self.__dict__['d'] = d

 def __getattr__(self, key):
  value = self.__dict__['d'][key]
  if type(value) == type({}):
   return dict2obj(value)

  return value

d = {'a': 1, 'b': {'c': 2}, 'd': ["hi", {'foo': "bar"}]}

x = dict2obj(d)
print x.a
print x.b.c
print x.d[1].foo
 

 It doesn't work for lists, yet. You'll have to wrap the lists in a UserList and overload __getitem__ to wrap dicts. 
 #5 Taking what I feel are the best aspects of the previous examples, here's what I came up with: 

 class Struct:
 '''The recursive class for building and representing objects with.'''
 def __init__(self, obj):
 for k, v in obj.iteritems():
  if isinstance(v, dict):
  setattr(self, k, Struct(v))
  else:
  setattr(self, k, v)
 def __getitem__(self, val):
 return self.__dict__[val]
 def __repr__(self):
 return '{%s}' % str(', '.join('%s : %s' % (k, repr(v)) for
  (k, v) in self.__dict__.iteritems()))
 
 #6 x.__dict__.update(d) should do fine. 
 #7 Here is another way to implement SilentGhost's original suggestion: 

 def dict2obj(d):
 if isinstance(d, dict):
 n = {}
 for item in d:
  if isinstance(d[item], dict):
  n[item] = dict2obj(d[item])
  elif isinstance(d[item], (list, tuple)):
  n[item] = [dict2obj(elem) for elem in d[item]]
  else:
  n[item] = d[item]
 return type('obj_from_dict', (object,), n)
 else:
 return d
 
 #8 Here's another implementation: 

 class DictObj(object):
 def __init__(self, d):
  self.__dict__ = d

def dict_to_obj(d):
 if isinstance(d, (list, tuple)): return map(dict_to_obj, d)
 elif not isinstance(d, dict): return d
 return DictObj(dict((k, dict_to_obj(v)) for (k,v) in d.iteritems()))
 

 [Edit] Missed bit about also handling dicts within lists, not just other dicts. Added fix. 
 #9 Building off what i did for this question : 

 class data(object):
 def __init__(self,*args,**argd):
  self.__dict__.update(dict(*args,**argd))

def makedata(d):
 d2 = {}
 for n in d:
  d2[n] = trydata(d[n])
 return data(d2)

def trydata(o):
 if isinstance(o,dict):
  return makedata(o)
 elif isinstance(o,list):
  return [trydata(i) for i in o]
 else:
  return o
 

 You call makedata on the dictionary you want converted (or maybe trydata depending on what you expect as input) and it spits out a data object. 

 Notes: 

 
 You can add elifs to trydata if you need more funtionality 
 Obviously this won't work if you want x.a = {} or similar 
 If you want a readonly version, use the class data from the original answer 
 
 #10 class Struct(object):
 """Comment removed"""
 def __init__(self, data):
  for name, value in data.iteritems():
   setattr(self, name, self._wrap(value))

 def _wrap(self, value):
  if isinstance(value, (tuple, list, set, frozenset)): 
   return type(value)([self._wrap(v) for v in value])
  else:
   return Struct(value) if isinstance(value, dict) else value
 

 Can be used with any sequence/dict/value structure of any depth. 
 #11 Let me explain a solution I almost used some time ago. But first, the reason I did not is illustrated by the fact that the following code: 

 d = {'from': 1}
x = dict2obj(d)

print x.from
 

 gives this error: 

 File "test.py", line 20
 print x.from == 1
    ^
SyntaxError: invalid syntax
 

 Because "from" is a Python keyword there are certain dictionary keys you cannot allow. 

 

 Now my solution allows access to the dictionary items by using their names directly. But it also allows you to use "dictionary semantics". Here is the code with example usage: 

 class dict2obj(dict):
 def __init__(self, dict_):
  super(dict2obj, self).__init__(dict_)
  for key in self:
   item = self[key]
   if isinstance(item, list):
    for idx, it in enumerate(item):
     if isinstance(it, dict):
      item[idx] = dict2obj(it)
   elif isinstance(item, dict):
    self[key] = dict2obj(item)

 def __getattr__(self, key):
  return self[key]

d = {'a': 1, 'b': {'c': 2}, 'd': ["hi", {'foo': "bar"}]}

x = dict2obj(d)

assert x.a == x['a'] == 1
assert x.b.c == x['b']['c'] == 2
assert x.d[1].foo == x['d'][1]['foo'] == "bar"
 
 #12 thank you for all your suggestions.
i've put the together for comparison and benchmarked them. you can find the results here: 

 http://pastebin.org/10514 
 #13 I stumbled upon the case I needed to recursively convert a list of dicts to list of objects, so based on Roberto's snippet here what did the work for me: 

 def dict2obj(d):
 if isinstance(d, dict):
  n = {}
  for item in d:
   if isinstance(d[item], dict):
    n[item] = dict2obj(d[item])
   elif isinstance(d[item], (list, tuple)):
    n[item] = [dict2obj(elem) for elem in d[item]]
   else:
    n[item] = d[item]
  return type('obj_from_dict', (object,), n)
 elif isinstance(d, (list, tuple,)):
  l = []
  for item in d:
   l.append(dict2obj(item))
  return l
 else:
  return d
 

 Note that any tuple will be converted to its list equivalent, for obvious reasons. 

 Hope this helps someone as much as all your answers did for me, guys.