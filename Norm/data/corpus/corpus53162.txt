Question (ID-53162): How can I do a line break (line continuation) in Python? I have a long line of code that I want to break up among multiple lines. What do I use and what is the syntax? 

 For example, adding a bunch of strings: 

 e = 'a' + 'b' + 'c' + 'd'
 

 have it like this: 

 e = 'a' + 'b' 
+ 'c' + 'd'
 
 Answers (Total-7): #0 What is the line? You can just have arguments on the next line without any problems: 

 a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, 
   blahblah6, blahblah7)
 

 Otherwise you can do somthing like this: 

 if a = True and \
 b = False
 

 Check the Style Guide for more info. 

 (edit) 

 From your example line: 

 a = '1' + '2' + '3' + \
 '4' + '5'
 

 Or: 

 a = ('1' + '2' + '3' +
 '4' + '5')
 

 Note that the style guide says that using the implicit continuation with parentheses is preferred, but in this particular case just adding parentheses around your expression is probably the wrong way to go. 
 #1 @ Harley 

 From Style Guide for Python Code : 

 
 The preferred way of wrapping long lines is by using Python's implied
 line continuation inside parentheses,
 brackets and braces. If necessary,
 you can add an extra pair of
 parentheses around an expression, but
 sometimes using a backslash looks
 better. Make sure to indent the
 continued line appropriately. The
 preferred place to break around a
 binary operator is after the
 operator, not before it. Some
 examples: 
 

 class Rectangle(Blob):

 def __init__(self, width, height,
     color='black', emphasis=None, highlight=0):
  if width == 0 and height == 0 and \
   color == 'red' and emphasis == 'strong' or \
   highlight &gt; 100:
   raise ValueError("sorry, you lose")
  if width == 0 and height == 0 and (color == 'red' or
           emphasis is None):
   raise ValueError("I don't think so -- values are %s, %s" %
        (width, height))
  Blob.__init__(self, width, height,
      color, emphasis, highlight)
 
 #2 The danger in using a backslash to end a line is that if whitespace is added after the backslash (which, of course, is very hard to see), the backslash is no longer doing what you thought it was. 

 See Python Idioms and Anti-Idioms for more. 
 #3 You can break lines in between parenthesises and braces. Additionally, you can append the backslash character \ to a line to explicitly break it: 

 x = (tuples_first_value,
  second_value)
y = 1 + \
 2
 
 #4 Put a \ at the end of your line or enclose the statement in parens ( .. ) . From IBM : 

 b = ((i1 &lt; 20) and
  (i2 &lt; 30) and
  (i3 &lt; 40))
 

 or 

 b = (i1 &lt; 20) and \
 (i2 &lt; 30) and \
 (i3 &lt; 40)
 
 #5 
 From the horse's mouth: Explicit line
 joining 
 
 Two or more physical lines may be
 joined into logical lines using
 backslash characters (), as follows:
 when a physical line ends in a
 backslash that is not part of a string
 literal or comment, it is joined with
 the following forming a single logical
 line, deleting the backslash and the
 following end-of-line character. For
 example: 

 if 1900 &lt; year &lt; 2100 and 1 &lt;= month &lt;= 12 \
 and 1 &lt;= day &lt;= 31 and 0 &lt;= hour &lt; 24 \
 and 0 &lt;= minute &lt; 60 and 0 &lt;= second &lt; 60: # Looks like a valid date
  return 1
 
 
 A line ending in a backslash cannot
 carry a comment. A backslash does not
 continue a comment. A backslash does
 not continue a token except for string
 literals (i.e., tokens other than
 string literals cannot be split across
 physical lines using a backslash). A
 backslash is illegal elsewhere on a
 line outside a string literal. 
 
 #6 Style guide is just a guide. Do it however you prefer to do it.