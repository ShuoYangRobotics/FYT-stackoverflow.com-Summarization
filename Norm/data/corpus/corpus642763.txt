Question (ID-642763): Python - Intersection of two lists I know how to get an intersection of two flat lists: 

 b1 = [1,2,3,4,5,9,11,15]
b2 = [4,5,6,7,8]
b3 = [val for val in b1 if val in b2]
 

 or 

 def intersect(a, b):
  return list(set(a) &amp; set(b))

print intersect(b1, b2)
 

 But when I have to find intersection for nested lists then my problems starts: 

 c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]
c2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]
 

 In the end I would like to receive: 

 c3 = [[13,32],[7,13,28],[1,6]]
 

 Can you guys give me a hand with this? 

 Related 

 
 Flattening a shallow list in python 
 
 Answers (Total-7): #0 You don't need to define intersection. It's already a first-class part of set. 

 &gt;&gt;&gt; b1 = [1,2,3,4,5,9,11,15]
&gt;&gt;&gt; b2 = [4,5,6,7,8]
&gt;&gt;&gt; set(b1).intersection( set(b2) )
set([4, 5])
 
 #1 If you want: 

 c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]
c2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]
c3 = [[13, 32], [7, 13, 28], [1,6]]
 

 Then here is your solution: 

 c3 = [filter(lambda x: x in c1, sublist) for sublist in c2]
 

 Explanation: 

 The filter part takes each sublist's item and checks to see if it is in the source list c1. 
The list comprehension is executed for each sublist in c2. 
 #2 Pure list comprehension version 

 &gt;&gt;&gt; c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]
&gt;&gt;&gt; c2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]
&gt;&gt;&gt; c1set = frozenset(c1)
 

 Flatten variant: 

 &gt;&gt;&gt; [n for lst in c2 for n in lst if n in c1set]
[13, 32, 7, 13, 28, 1, 6]
 

 Nested variant: 

 &gt;&gt;&gt; [[n for n in lst if n in c1set] for lst in c2]
[[13, 32], [7, 13, 28], [1, 6]]
 
 #3 The functional approach: 

 input_list = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]]

result = reduce(set.intersection,map(set,input_list))
 

 and it can be applied to the more general case of 1+ lists 
 #4 You should flatten using this code ( taken from http://kogs-www.informatik.uni-hamburg.de/~meine/python_tricks ), the code is untested, but I'm pretty sure it works: 

 
def flatten(x):
 """flatten(sequence) -> list

 Returns a single, flat list which contains all elements retrieved
 from the sequence and all recursively contained sub-sequences
 (iterables).

 Examples:
 >>> [1, 2, [3,4], (5,6)]
 [1, 2, [3, 4], (5, 6)]
 >>> flatten([[[1,2,3], (42,None)], [4,5], [6], 7, MyVector(8,9,10)])
 [1, 2, 3, 42, None, 4, 5, 6, 7, 8, 9, 10]"""

 result = []
 for el in x:
  #if isinstance(el, (list, tuple)):
  if hasattr(el, "__iter__") and not isinstance(el, basestring):
   result.extend(flatten(el))
  else:
   result.append(el)
 return result
 

 After you had flattened the list, you perform the intersection in the usual way: 

 
c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]
c2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]

def intersect(a, b):
  return list(set(a) & set(b))

print intersect(flatten(c1), flatten(c2))

 
 #5 For people just looking to find the intersection of two lists, the Asker provided two methods: 

 
 b1 = [1,2,3,4,5,9,11,15]
b2 = [4,5,6,7,8]
b3 = [val for val in b1 if val in b2]
 
 
 and 

 def intersect(a, b):
  return list(set(a) &amp; set(b))

print intersect(b1, b2)
 
 

 But there is a hybrid method that is more efficient, because you only have to do one conversion between list/set, as opposed to three: 

 b1 = [1,2,3,4,5]
b2 = [3,4,5,6]
s2 = set(b2)
b3 = [val for val in b1 if val in s2]
 

 This will run in O(n), whereas his original method involving list comprehension will run in O(n^2) 
 #6 Do you consider [1,2] to intersect with [1, [2]] ? That is, is it only the numbers you care about, or the list structure as well? 

 If only the numbers, investigate how to "flatten" the lists, then use the set() method.