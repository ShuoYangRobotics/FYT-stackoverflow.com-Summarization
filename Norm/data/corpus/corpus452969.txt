Question (ID-452969): Does python have an equivalent to Java Class.forName()? I have the need to take a string argument and create a class in python. In Java, I would use Class.forName().newInstance(). Is there an equivalent in python? 

 

 Thanks for the responses. To answer those who want to know what I'm doing: I want to use a command line argument as the class name, and instantiate it. I'm actually programming in Jython and instantiating Java classes, hence the Java-ness of the question. getattr() works great. Thanks much. 
 Answers (Total-4): #0 Reflection in python is a lot easier and far more flexible than it is in Java. 

 I recommend reading this tutorial 

 There's no direct function (that I know of) which takes a fully qualified class name and returns the class, however you have all the pieces needed to build that, and you can connect them together. 

 One advice though: don't try to program in Java style when you're in python. 

 If you can explain what is it that you're trying to do, maybe we can help you find a more pythonic way of doing it. 

 Here's a function that does what you want: 

 def get_class( kls ):
 parts = kls.split('.')
 module = ".".join(parts[:-1])
 m = __import__( module )
 for comp in parts[1:]:
  m = getattr(m, comp)   
 return m
 

 You can use the return value of this function as if it was the class itself. 

 Here's a usage example: 

 &gt;&gt;&gt; D = get_class("datetime.datetime")
&gt;&gt;&gt; D
&lt;type 'datetime.datetime'&gt;
&gt;&gt;&gt; D.now()
datetime.datetime(2009, 1, 17, 2, 15, 58, 883000)
&gt;&gt;&gt; a = D( 2010, 4, 22 )
&gt;&gt;&gt; a
datetime.datetime(2010, 4, 22, 0, 0)
&gt;&gt;&gt;
 

 How does that work? 

 We're using __import__ to import the module that holds the class, which required that we first extract the module name from the fully qualified name. Then we import the module: 

 m = __import__( module )
 

 In this case, m will only refer to the top level module, 

 For example, if your class lives in foo.baz module, then m will be the module foo 
We can easily obtain a reference to foo.baz using getattr( m, 'baz' ) 

 To get from the top level module to the class, have to recursively use gettatr on the parts of the class name 

 Say for example, if you class name is foo.baz.bar.Model then we do this: 

 m = __import__( "foo.baz.bar" ) #m is package foo
m = getattr( m, "baz" ) #m is package baz
m = getattr( m, "bar" ) #m is module bar
m = getattr( m, "Model" ) #m is class Model
 

 This is what's happening in this loop: 

 for comp in parts[1:]:
 m = getattr(m, comp)
 

 At the end of the loop, m will be a reference to the class. This means that m is actually the class itslef, you can do for instance: 

 a = m() #instantiate a new instance of the class 
b = m( arg1, arg2 ) # pass arguments to the constructor
 
 #1 Assuming the class is in your scope: 

 globals()['classname'](args, to, constructor)
 

 Otherwise: 

 getattr(someModule, 'classname')(args, to, constructor)
 

 Edit: Note, you can't give a name like 'foo.bar' to getattr. You'll need to split it by . and call getattr() on each piece left-to-right. This will handle that: 

 module, rest = 'foo.bar.baz'.split('.', 1)
fooBar = reduce(lambda a, b: getattr(a, b), rest.split('.'), globals()[module])
someVar = fooBar(args, to, constructor)
 
 #2 It seems you're approaching this from the middle instead of the beginning. What are you really trying to do? Finding the class associated with a given string is a means to an end. 

 If you clarify your problem, which might require your own mental refactoring, a better solution may present itself. 

 For instance: Are you trying to load a saved object based on its type name and a set of parameters? Python spells this unpickling and you should look at the pickle module . And even though the unpickling process does exactly what you describe, you don't have to worry about how it works internally: 

 &gt;&gt;&gt; class A(object):
... def __init__(self, v):
...  self.v = v
... def __reduce__(self):
...  return (self.__class__, (self.v,))
&gt;&gt;&gt; a = A("example")
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; b = pickle.loads(pickle.dumps(a))
&gt;&gt;&gt; a.v, b.v
('example', 'example')
&gt;&gt;&gt; a is b
False
 
 #3 Yet another implementation. 

 def import_class(class_string):
 """Returns class object specified by a string.

 Args:
  class_string: The string representing a class.

 Raises:
  ValueError if module part of the class is not specified.
 """
 module_name, _, class_name = class_string.rpartition('.')
 if module_name == '':
  raise ValueError('Class name must contain module part.')
 return getattr(
  __import__(module_name, globals(), locals(), [class_name], -1),
  class_name)