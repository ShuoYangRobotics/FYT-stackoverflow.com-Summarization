Question (ID-7020417): What is 'print' in Python? I understand what print does, but of what "type" is the operator? I think it's a function, but why does this fail? 

 &gt;&gt;&gt;print print
SyntaxError: invalid syntax
 

 Isn't print a function? Shouldn't it print something like this? 

 &gt;&gt;&gt;print print
&lt;function print at ...&gt;
 
 Answers (Total-4): #0 In 2.7 and down, print is a statement. In python 3, print is a function. To use the print function in Python 2.6 or 2.7, you can do 

 [~/repo/py]
|4&gt;from __future__ import print_function

[~/repo/py]
|5&gt;print print
--&gt;print(print)
&lt;built-in function print&gt;
 

 See this section from the Python Language Reference, as well as PEP 3105 for why it changed. 
 #1 In Python 3, print() is a built-in function (object) 

 Before this, print was a statement . Demonstration... 

 Python 2. x : 

 % pydoc2.6 print

The ``print`` statement
***********************

 print_stmt ::= "print" ([expression ("," expression)* [","]]
     | "&gt;&gt;" expression [("," expression)+ [","]])

``print`` evaluates each expression in turn and writes the resulting
object to standard output (see below). If an object is not a string,
it is first converted to a string using the rules for string
conversions. The (resulting or original) string is then written. A
space is written before each object is (converted and) written, unless
the output system believes it is positioned at the beginning of a
line. This is the case (1) when no characters have yet been written
to standard output, (2) when the last character written to standard
output is a whitespace character except ``' '``, or (3) when the last
write operation on standard output was not a ``print`` statement. (In
some cases it may be functional to write an empty string to standard
output for this reason.)

-----8&lt;-----
 

 Python 3. x : 

 % pydoc3.1 print

Help on built-in function print in module builtins:

print(...)
 print(value, ..., sep=' ', end='\n', file=sys.stdout)

 Prints the values to a stream, or to sys.stdout by default.
 Optional keyword arguments:
 file: a file-like object (stream); defaults to the current sys.stdout.
 sep: string inserted between values, default a space.
 end: string appended after the last value, default a newline.
 
 #2 print is a mistake that has been rectified in Python 3. In Python 3 it is a function. In Python 1.x and 2.x it is not a function, it is a special form like if or while , but unlike those two it is not a control structure. 

 So, I guess the most accurate thing to call it is a statement. 
 #3 In Python all statements (except assignment) are expressed with reserved words, not addressible objects. That is why you cannot simply print print and you get a SyntaxError for trying. It's a reserved word, not an object. 

 Confusingly, you can have a variable named print . You can't address it in the normal way, but you can setattr(locals(), 'print', somevalue) and then print locals()['print'] . 

 Other reserved words that might be desirable as variable names but are nonetheless verboten: 

 class
import
return
raise
except
try
pass
lambda