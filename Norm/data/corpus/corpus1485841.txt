Question (ID-1485841): Python: Behaviour of increment and decrement operators I am a newbie to Python. I notice that a pre-increment/decrement operator can be applied on a variable (like ++count ). It compiles, but it does not actually change the value of the variable! 

 What is the behavior of the pre- increment / decrement operators (++/--) in Python? Why does Python deviate from the behavior of these operators seen in C/C++? 
 Answers (Total-3): #0 ++ is not an operator. It is two + operators. The + operator is the identity operator, which does nothing. (Clarification: the + and - unary operators only work on numbers, but I presume that you wouldn't expect a hypothetical ++ operator to work on strings.) 

 ++count
 

 Parses as 

 +(+count)
 

 Which translates to 

 count
 

 You have to use the slightly longer += operator to do what you want to do: 

 count += 1
 

 I suspect the ++ and -- operators were left out for consistency and simplicity. I don't know the exact argument Guido van Rossum gave for the decision, but I can imagine a few arguments: 

 
 Simpler parsing. Technically, parsing ++count is ambiguous, as it could be + , + , count (two unary + operators) just as easily as it could be ++ , count (one unary ++ operator). It's not a significant syntactic ambiguity, but it does exist. 
 Simpler language. ++ is nothing more than a synonym for += 1 . It was a shorthand invented because C compilers were stupid and didn't know how to optimize a += 1 into the inc instruction most computers have. In this day of optimizing compilers and bytecode interpreted languages, adding operators to a language to allow programmers to optimize their code is usually frowned upon, especially in a language like Python that is designed to be consistent and readable. 
 Confusing side-effects. One common newbie error in languages with ++ operators is mixing up the differences (both in precedence and in return value) between the pre- and post-incremend/decrement operators, and Python likes to eliminate language "gotcha"-s. The precedence issues of pre-/post-increment in C are pretty hairy, and incredibly easy to mess up. 
 
 #1 When you want to increment or decrement, you typically want to do that on an integer. Like so: 

 b++;
 

 But in Python, integers are immutable . That is you can't change them. This is because the integer objects can be used under several names. Try this: 

 &gt;&gt;&gt; b = 5
&gt;&gt;&gt; a = 5
&gt;&gt;&gt; id(a)
162334512
&gt;&gt;&gt; id(b)
162334512
&gt;&gt;&gt; a is b
True
 

 a and b above are actually the same object. If you incremented a, you would also increment b. That's not what you want. So you have to reassign. Like this: 

 b = b + 1
 

 Or simpler: 

 b += 1
 

 Which will reassign b to b+1. That is not an increment operator, because it does not increment b, it reassigns it. 

 In short: Python behaves differently here, because it is not C, and is not a low level wrapper around machine code, but a high-level dynamic language, where increments don't make sense, and also are not as necessary as in C, where you use them every time you have a loop, for example. 
 #2 In python ++(increment) or --(decrement) operators do not exist. In case of C++ 

 int a = 5;
b = ++a;
 

 b will be assigned the value 6.
But, in python a++ will generate a syntax error as + or ++ is a binary operator and it needs a second operand.
+a, ++a, +++++++a are all read by the python interpreter as +a 

 and doing something like this in python 

 a = 5
b = a ++ 5 // b is assigned 10
b = a +++ 5 // b is again assigned 10
 

 So, ++ means simply two pluses.