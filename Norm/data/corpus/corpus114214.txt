Question (ID-114214): Class method differences in Python: bound, unbound and static What is the difference between the following class methods? 

 Is it that one is static and the other is not? 

 class Test(object):
 def method_one(self):
 print "Called method_one"

 def method_two():
 print "Called method_two"

a_test = Test()
a_test.method_one()
a_test.method_two()
 
 Answers (Total-8): #0 In Python, there is a distinction between bound and unbound methods. 

 Basically, a call to a member function (like method_one ), a bound function 

 a_test.method_one()
 

 is translated to 

 Test.method_one(a_test)
 

 i.e. a call to an unbound method. Because of that, a call to your version of method_two will fail with a TypeError 

 &gt;&gt;&gt; a_test = Test() 
&gt;&gt;&gt; a_test.method_two()
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: method_two() takes no arguments (1 given)
 

 You can change the behavior of a method using a decorator 

 class Test(object):
 def method_one(self):
  print "Called method_one"

 @staticmethod
 def method_two():
  print "Called method two"
 

 The decorator tells the built-in default metaclass type (the class of a class, cf. this question ) to not create bound methods for method_two . 

 Now, you can invoke static method both on an instance or on the class directly: 

 &gt;&gt;&gt; a_test = Test()
&gt;&gt;&gt; a_test.method_one()
Called method_one
&gt;&gt;&gt; a_test.method_two()
Called method_two
&gt;&gt;&gt; Test.method_two()
Called method_two
 
 #1 Methods in Python are a very, very simple thing once you understood the basics of the descriptor system. Imagine the following class: 

 class C(object):
 def foo(self):
  pass
 

 Now let's have a look at that class in the shell: 

 &gt;&gt;&gt; C.foo
&lt;unbound method C.foo&gt;
&gt;&gt;&gt; C.__dict__['foo']
&lt;function foo at 0x17d05b0&gt;
 

 As you can see if you access the foo attribute on the class you get back an unbound method, however inside the class storage (the dict) there is a function. Why's that? The reason for this is that the class of your class implements a __getattribute__ that resolves descriptors. Sounds complex, but is not. C.foo is roughly equivalent to this code in that special case: 

 &gt;&gt;&gt; C.__dict__['foo'].__get__(None, C)
&lt;unbound method C.foo&gt;
 

 That's because functions have a __get__ method which makes them descriptors. If you have an instance of a class it's nearly the same, just that None is the class instance: 

 &gt;&gt;&gt; c = C()
&gt;&gt;&gt; C.__dict__['foo'].__get__(c, C)
&lt;bound method C.foo of &lt;__main__.C object at 0x17bd4d0&gt;&gt;
 

 Now why does Python do that? Because the method object binds the first parameter of a function to the instance of the class. That's where self comes from. Now sometimes you don't want your class to make a function a method, that's where staticmethod comes into play: 

 class C(object):
 @staticmethod
 def foo():
 pass
 

 The staticmethod decorator wraps your class and implements a dummy __get__ that returns the wrapped function as function and not as a method: 

 &gt;&gt;&gt; C.__dict__['foo'].__get__(None, C)
&lt;function foo at 0x17d0c30&gt;
 

 Hope that explains it. 
 #2 When you call a class member, Python automatically uses a reference to the object as the first parameter. The variable self actually means nothing, it's just a coding convention. You could call it gargaloo if you wanted. That said, the call to method_two would raise a TypeError , because Python is automatically trying to pass a parameter (the reference to its parent object) to a method that was defined as having no parameters. 

 To actually make it work, you could append this to your class definition: 

 method_two = staticmethod(method_two)
 

 or you could use the @staticmethod function decorator . 
 #3 method_two won't work because you're defining a member function but not telling it what the function is a member of. If you execute the last line you'll get: 

 &gt;&gt;&gt; a_test.method_two()
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: method_two() takes no arguments (1 given)
 

 If you're defining member functions for a class the first argument must always be 'self'. 
 #4 &gt;&gt;&gt; class Class(object):
...  def __init__(self):
...   self.i = 0
...  def instance_method(self):
...   self.i += 1
...   print self.i
...  c = 0
...  @classmethod
...  def class_method(cls):
...   cls.c += 1
...   print cls.c
...  @staticmethod
...  def static_method(s):
...   s += 1
...   print s
... 
&gt;&gt;&gt; a = Class()
&gt;&gt;&gt; a.class_method()
1
&gt;&gt;&gt; Class.class_method() # The class shares this value across instances
2
&gt;&gt;&gt; a.instance_method()
1
&gt;&gt;&gt; Class.instance_method() # The class cannot use an instance method
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method instance_method() must be called with Class instance as first argument (got nothing instead)
&gt;&gt;&gt; Class.instance_method(a)
2
&gt;&gt;&gt; b = 0
&gt;&gt;&gt; a.static_method(b)
1
&gt;&gt;&gt; a.static_method(a.c) # Static method does not have direct access to 
&gt;&gt;&gt;      # class or instance properties.
3
&gt;&gt;&gt; Class.c  # a.c above was passed by value and not by reference.
2
&gt;&gt;&gt; a.c
2
&gt;&gt;&gt; a.c = 5  # The connection between the instance
&gt;&gt;&gt; Class.c  # and its class is weak as seen here.
2
&gt;&gt;&gt; Class.class_method()
3
&gt;&gt;&gt; a.c
5
 
 #5 The call to method_two will throw an exception for not accepting the self parameter the Python runtime will automatically pass it. 

 If you want to create a static method in a Python class, decorate it with the staticmethod decorator . 

 Class Test(Object):
 @staticmethod
 def method_two():
 print "Called method_two"

Test.method_two()
 
 #6 that is an error. 

 first of all, first line should be like this (be careful of capitals) 

 class Test(object):
 

 Whenever you call a method of a class, it gets itself as the first argument (hence the name self) and method_two gives this error 

 &gt;&gt;&gt; a.method_two()
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: method_two() takes no arguments (1 given)
 
 #7 The second one won't work because when you call it like that python internally tries to call it with the a_test instance as the first argument, but your method_two doesn't accept any arguments, so it wont work, you'll get a runtime error.
If you want the equivalent of a static method you can use a class method.
There's much less need for class methods in Python than static methods in languages like Java or C#. Most often the best solution is to use a method in the module, outside a class definition, those work more efficiently than class methods.