Question (ID-576169): Understanding Python super() and init methods Trying to understand super(). From the looks of it, both child classes can be created just fine. Im curious as to what difference there actually is in this code: 

 class Base(object):
 def __init__(self):
  print "Base created"

class ChildA(Base):
 def __init__(self):
  Base.__init__(self)

class ChildB(Base):
 def __init__(self):
  super(ChildB, self).__init__()

print ChildA(),ChildB()
 
 Answers (Total-2): #0 Super lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven't already. 

 Edit: Note that the syntax changed in Python 3.0: you can just say super().__init__() instead of super(ChildB, self).__init__() which IMO is quite a bit nicer. 
 #1 There isn't, really. super() looks at the next class in the MRO (method resolution order, accessed with cls.__mro__ ) to call the methods. Just calling the base __init__ calls the base __init__ . As it happens, the MRO has exactly one item-- the base. So you're really doing the exact same thing, but in a nicer way with super() (particularly if you get into multiple inheritance later).