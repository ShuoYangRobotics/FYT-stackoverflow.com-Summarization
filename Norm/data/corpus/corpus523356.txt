Question (ID-523356): Python + Django page redirect How do I accomplish a simple redirect (e.g. cflocation in ColdFusion, or header(location:http://) in php)? 
 Answers (Total-5): #0 It's simple: 

 from django.http import HttpResponseRedirect

def myview(request):
 ...
 return HttpResponseRedirect("/path/")
 

 More info in the official Django docs 

 Update 

 There is apparently a better way of doing this in Django now using generic views . 

 Example - 

 from django.views.generic.simple import redirect_to

urlpatterns = patterns('', 
 (r'^one/$', redirect_to, {'url': '/another/'}),

 #etc...
)
 

 There is more in the generic views documentation .
Credit - Carles Barrob√©s . 
 #1 Depending on what you want (i.e. if you do not want to do any additional pre-processing), it is simpler to just use Django's redirect_to generic view: 

 from django.views.generic.simple import redirect_to

urlpatterns = patterns('',
 # static media (development only) 
 (r'^one/$', redirect_to, {'url': '/another/'}),

 #etc...
)
 

 See http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-simple-redirect-to for more advanced examples 
 #2 There's actually a simpler way than having a view for each redirect - you can do it directly in urls.py : 

 from django.http import HttpResponsePermanentRedirect

urlpatterns = patterns(
 '',
 # ...normal patterns here...
 (r'^bad-old-link\.php',
  lambda request: HttpResponsePermanentRedirect('/nice-link')),
)
 

 A target can be a callable as well as a string , which is what I'm using here. 
 #3 Since Django 1.1, you can also use the simpler redirect shortcut: 

 from django.shortcuts import redirect

def myview(request):
 return redirect('/path')
 

 It also takes an optional permanent=True keyword argument. 
 #4 With Django version 1.3, the class based approach is: 

 from django.conf.urls.defaults import patterns, url
from django.views.generic import RedirectView

urlpatterns = patterns('',
 url(r'^some-url/$', RedirectView.as_view(url='/redirect-url/'), name='some_redirect'),
)
 

 This example lives in in urls.py