Question (ID-339007): Python: Nicest way to pad zeroes to string What is the nicest/shortest way to pad a string with zeroes to the left, so the string length has a specific length? 
 Answers (Total-6): #0 Strings: 

 &gt;&gt;&gt; n = '4'
&gt;&gt;&gt; print n.zfill(3)
&gt;&gt;&gt; '004'
 

 And for numbers: 

 &gt;&gt;&gt; n = 4
&gt;&gt;&gt; print '%03d' % n
&gt;&gt;&gt; '004'
 
 #1 For numbers: 

 print "%05d" % number
 

 See also: Python: String formatting . 

 EDIT : It's worth noting that as of yesterday, this method of formatting is deprecated in favour of the format string method: 

 print("{0:05d}".format(number)) # or
print(format(number, "05d"))
 

 See PEP 3101 for details. 
 #2 Just use the rjust method of the string object. 

 This example will make a string of 10 characters long, padding as necessary. 

 &gt;&gt;&gt; t = 'test'
&gt;&gt;&gt; t.rjust(10, '0')
&gt;&gt;&gt; '000000test'
 
 #3 width = 10
x = 5
print "%0*d" % (width, x)
&gt; 0000000005
 

 See the print documentation for all the exciting details! 
 #4 str(n).zfill(width) will work with string s, int s, float s... and is Python 2. x and 3. x compatible: 

 &gt;&gt;&gt; n = 3
&gt;&gt;&gt; str(n).zfill(5)
'00003'
&gt;&gt;&gt; n = '3'
&gt;&gt;&gt; str(n).zfill(5)
'00003'
&gt;&gt;&gt; n = '3.0'
&gt;&gt;&gt; str(n).zfill(5)
'003.0'
 
 #5 GREAT for zip codes saved as integers! 

 &gt;&gt;&gt; a = 6340
&gt;&gt;&gt; b = 90210
&gt;&gt;&gt; print '%05d' % a
06340
&gt;&gt;&gt; print '%05d' % b
90210
