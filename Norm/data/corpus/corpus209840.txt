Question (ID-209840): Map two lists into a dictionary in Python Imagine that you have: 

 keys = ('name', 'age', 'food')
values = ('Monty', 42, 'spam')
 

 What is the simplest way to produce the following dictionary ? 

 dict = {'name' : 'Monty', 'age' : 42, 'food' : 'spam'}
 

 This code works, but I'm not really proud of it : 

 dict = {}
junk = map(lambda k, v: dict.update({k: v}), keys, values)
 
 Answers (Total-4): #0 Like this: 

 &gt;&gt;&gt; keys = ['a', 'b', 'c']
&gt;&gt;&gt; values = [1, 2, 3]
&gt;&gt;&gt; dictionary = dict(zip(keys, values))
&gt;&gt;&gt; print dictionary
{'a': 1, 'b': 2, 'c': 3}
 

 Voila :-) The pairwise dict constructor and zip function are awesomely useful: http://www.python.org/doc/2.5.2/lib/built-in-funcs.html#dict 
 #1 Try this: 

 &gt;&gt;&gt; import itertools
&gt;&gt;&gt; keys = ('name', 'age', 'food')
&gt;&gt;&gt; values = ('Monty', 42, 'spam')
&gt;&gt;&gt; adict = dict(itertools.izip(keys,values))
&gt;&gt;&gt; adict
{'food': 'spam', 'age': 42, 'name': 'Monty'}
 

 It was the simplest solution I could come up with. 

 --Mike Davis 

 PS It's also more economical in memory consumption compared to zip. 
 #2 &gt;&gt;&gt; keys = ('name', 'age', 'food')
&gt;&gt;&gt; values = ('Monty', 42, 'spam')
&gt;&gt;&gt; dict(zip(keys, values))
{'food': 'spam', 'age': 42, 'name': 'Monty'}
 
 #3 If you need to transform keys or values before creating a dictionary then a generator expression could be used. Example: 

 &gt;&gt;&gt; adict = dict((str(k), v) for k, v in zip(['a', 1, 'b'], [2, 'c', 3]))
 

 Take a look Code Like a Pythonista: Idiomatic Python .