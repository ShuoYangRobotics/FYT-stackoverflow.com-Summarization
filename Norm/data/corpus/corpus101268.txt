Question (ID-101268): Hidden features of Python What are the lesser-known but useful features of the Python programming language? 

 
 Try to limit answers to Python core. 
 One feature per answer. 
 Give an example and short description of the feature, not just a link to documentation. 
 Label the feature using a title as the first line. 
 

 Quick links to answers: 

 
 Argument Unpacking 
 Braces 
 Chaining Comparison Operators 
 Decorators 
 Default Argument Gotchas 
 Descriptors 
 Dictionary default .get value 
 Docstring Tests 
 Ellipsis Slicing Syntax 
 Enumeration 
 For/else 
 Function as iter() argument 
 Generator expressions 
 import this 
 In Place Value Swapping 
 List stepping 
 __missing__ items 
 Multi-line Regex 
 Named string formatting 
 Nested list/generator comprehensions 
 New types at runtime 
 .pth files 
 ROT13 Encoding 
 Regex Debugging 
 Sending to Generators 
 Tab Completion in Interactive Interpreter 
 Ternary Expression 
 try/except/else 
 Unpacking+ print() function 
 with statement 
 
 Answers (Total-30): #0 Chaining comparison operators : 

 &gt;&gt;&gt; x = 5
&gt;&gt;&gt; 1 &lt; x &lt; 10
True
&gt;&gt;&gt; 10 &lt; x &lt; 20 
False
&gt;&gt;&gt; x &lt; 10 &lt; x*10 &lt; 100
True
&gt;&gt;&gt; 10 &gt; x &lt;= 9
True
&gt;&gt;&gt; 5 == x &gt; 4
True
 

 In case you're thinking it's doing 1 &lt; x , which comes out as True , and then comparing True &lt; 10 , which is also True , then no, that's really not what happens (see the last example.) It's really translating into 1 &lt; x and x &lt; 10 , and x &lt; 10 and 10 &lt; x * 10 and x*10 &lt; 100 , but with less typing and each term is only evaluated once. 
 #1 Creating generators objects 

 If you write 

 x=(n for n in foo if bar(n))
 

 you can get out the generator and assign it to x. Now it means you can do 

 for n in x:
 

 The advantage of this is that you don't need intermediate storage, which you would need if you did 

 x = [n for n in foo if bar(n)]
 

 In some cases this can lead to significant speed up. 

 You can append many if statements to the end of the generator, basically replicating nested for loops: 

 &gt;&gt;&gt; n = ((a,b) for a in range(0,2) for b in range(4,6))
&gt;&gt;&gt; for i in n:
... print i 

(0, 4)
(0, 5)
(1, 4)
(1, 5)
 
 #2 iter() can take a callable argument 

 For instance: 

 def seek_next_line(f):
 for c in iter(lambda: f.read(1),'\n'):
  pass
 

 The iter(callable, until_value) function repeatedly calls callable and yields its result until until_value is returned. 
 #3 Sending values into generator functions . For example having this function: 

 def mygen():
 """Yield 5 until something else is passed back via send()"""
 a = 5
 while True:
  f = (yield a) #yield a and possibly get f in return
  if f is not None: 
   a = f #store the new value
 

 You can: 

 &gt;&gt;&gt; g = mygen()
&gt;&gt;&gt; g.next()
5
&gt;&gt;&gt; g.next()
5
&gt;&gt;&gt; g.send(7) #we send this back to the generator
7
&gt;&gt;&gt; g.next() #now it will yield 7 until we send something else
7
 
 #4 Decorators 

 Decorators allow to wrap a function or method in another function that can add functionality, modify arguments or results, etc. You write decorators one line above the function definition, beginning with an "at" sign (@). 

 Example shows a print_args decorator that prints the decorated function's arguments before calling it: 

 &gt;&gt;&gt; def print_args(function):
&gt;&gt;&gt;  def wrapper(*args, **kwargs):
&gt;&gt;&gt;   print 'Arguments:', args, kwargs
&gt;&gt;&gt;   return function(*args, **kwargs)
&gt;&gt;&gt;  return wrapper

&gt;&gt;&gt; @print_args
&gt;&gt;&gt; def write(text):
&gt;&gt;&gt;  print text

&gt;&gt;&gt; write('foo')
Arguments: ('foo',) {}
foo
 
 #5 The step argument in slice operators. For example: 

 a = [1,2,3,4,5]
&gt;&gt;&gt; a[::2] # iterate over the whole list in 2-increments
[1,3,5]
 

 The special case x[::-1] is a useful idiom for 'x reversed'. 

 &gt;&gt;&gt; a[::-1]
[5,4,3,2,1]
 
 #6 Readable regular expressions 

 In Python you can split a regular expression over multiple lines, name your matches and insert comments. 

 Example verbose syntax (from Dive into Python ): 

 &gt;&gt;&gt; pattern = """
... ^     # beginning of string
... M{0,4}    # thousands - 0 to 4 M's
... (CM|CD|D?C{0,3}) # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 C's),
...      #   or 500-800 (D, followed by 0 to 3 C's)
... (XC|XL|L?X{0,3}) # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 X's),
...      #  or 50-80 (L, followed by 0 to 3 X's)
... (IX|IV|V?I{0,3}) # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 I's),
...      #  or 5-8 (V, followed by 0 to 3 I's)
... $     # end of string
... """
&gt;&gt;&gt; re.search(pattern, 'M', re.VERBOSE)
 

 Example naming matches (from Regular Expression HOWTO ) 

 &gt;&gt;&gt; p = re.compile(r'(?P&lt;word&gt;\b\w+\b)')
&gt;&gt;&gt; m = p.search( '(((( Lots of punctuation )))' )
&gt;&gt;&gt; m.group('word')
'Lots'
 

 You can also verbosely write a regex without using re.VERBOSE thanks to string literal concatenation. 

 &gt;&gt;&gt; pattern = (
...  "^"     # beginning of string
...  "M{0,4}"   # thousands - 0 to 4 M's
...  "(CM|CD|D?C{0,3})" # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 C's),
...       #   or 500-800 (D, followed by 0 to 3 C's)
...  "(XC|XL|L?X{0,3})" # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 X's),
...       #  or 50-80 (L, followed by 0 to 3 X's)
...  "(IX|IV|V?I{0,3})" # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 I's),
...       #  or 5-8 (V, followed by 0 to 3 I's)
...  "$"     # end of string
... )
&gt;&gt;&gt; print pattern
"^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$"
 
 #7 In-place value swapping 

 &gt;&gt;&gt; a = 10
&gt;&gt;&gt; b = 5
&gt;&gt;&gt; a, b
(10, 5)

&gt;&gt;&gt; a, b = b, a
&gt;&gt;&gt; a, b
(5, 10)
 

 The right-hand side of the assignment is an expression that creates a new tuple. The left-hand side of the assignment immediately unpacks that (unreferenced) tuple to the names a and b . 

 After the assignment, the new tuple is unreferenced and marked for garbage collection, and the values bound to a and b have been swapped. 

 As noted in the Python tutorial section on data structures , 

 
 Note that multiple assignment is really just a combination of tuple packing and sequence unpacking. 
 
 #8 Function argument unpacking 

 You can unpack a list or a dictionary as function arguments using * and ** . 

 For example: 

 def draw_point(x, y):
 # do some magic

point_foo = (3, 4)
point_bar = {'y': 3, 'x': 2}

draw_point(*point_foo)
draw_point(**point_bar)
 

 Very useful shortcut since lists, tuples and dicts are widely used as containers. 
 #9 Context managers and the " with " Statement 

 Introduced in PEP 343 , a context manager is an object that acts as a run-time context for a suite of statements. 

 Since the feature makes use of new keywords, it is introduced gradually: it is available in Python 2.5 via the __future__ directive. Python 2.6 and above (including Python 3) has it available by default. 

 I have used the "with" statement a lot because I think it's a very useful construct, here is a quick demo: 

 from __future__ import with_statement

with open('foo.txt', 'w') as f:
 f.write('hello!')
 

 What's happening here behind the scenes, is that the "with" statement calls the special __enter__ and __exit__ methods on the file object. Exception details are also passed to __exit__ if any exception was raised from the with statement body, allowing for exception handling to happen there. 

 What this does for you in this particular case is that it guarantees that the file is closed when execution falls out of scope of the with suite, regardless if that occurs normally or whether an exception was thrown. It is basically a way of abstracting away common exception-handling code. 

 Other common use cases for this include locking with threads and database transactions. 
 #10 Creating new types in a fully dynamic manner 

 &gt;&gt;&gt; NewType = type("NewType", (object,), {"x": "hello"})
&gt;&gt;&gt; n = NewType()
&gt;&gt;&gt; n.x
"hello"
 

 which is exactly the same as 

 &gt;&gt;&gt; class NewType(object):
&gt;&gt;&gt;  x = "hello"
&gt;&gt;&gt; n = NewType()
&gt;&gt;&gt; n.x
"hello"
 

 Probably not the most useful thing, but nice to know. 

 Edit : Fixed name of new type, should be NewType to be the exact same thing as with class statement. 

 Edit : Adjusted the title to more accurately describe the feature. 
 #11 Descriptors 

 They're the magic behind a whole bunch of core Python features. 

 When you use dotted access to look up a member (eg, x.y), Python first looks for the member in the instance dictionary. If it's not found, it looks for it in the class dictionary. If it finds it in the class dictionary, and the object implements the descriptor protocol, instead of just returning it, Python executes it. A descriptor is any class that implements the __get__ , __set__ , or __del__ methods. 

 Here's how you'd implement your own (read-only) version of property using descriptors: 

 class Property(object):
 def __init__(self, fget):
  self.fget = fget

 def __get__(self, obj, type):
  if obj is None:
   return self
  return self.fget(obj)
 

 and you'd use it just like the built-in property(): 

 class MyClass(object):
 @Property
 def foo(self):
  return "Foo!"
 

 Descriptors are used in Python to implement properties, bound methods, static methods, class methods and slots, amongst other things. Understanding them makes it easy to see why a lot of things that previously looked like Python 'quirks' are the way they are. 

 Raymond Hettinger has an excellent tutorial that does a much better job of describing them than I do. 
 #12 Doctest : documentation and unit-testing at the same time. 

 Example extracted from the Python documentation: 

 def factorial(n):
 """Return the factorial of n, an exact integer &gt;= 0.

 If the result is small enough to fit in an int, return an int.
 Else return a long.

 &gt;&gt;&gt; [factorial(n) for n in range(6)]
 [1, 1, 2, 6, 24, 120]
 &gt;&gt;&gt; factorial(-1)
 Traceback (most recent call last):
  ...
 ValueError: n must be &gt;= 0

 Factorials of floats are OK, but the float must be an exact integer:
 """

 import math
 if not n &gt;= 0:
  raise ValueError("n must be &gt;= 0")
 if math.floor(n) != n:
  raise ValueError("n must be exact integer")
 if n+1 == n: # catch a value like 1e300
  raise OverflowError("n too large")
 result = 1
 factor = 2
 while factor &lt;= n:
  result *= factor
  factor += 1
 return result

def _test():
 import doctest
 doctest.testmod() 

if __name__ == "__main__":
 _test()
 
 #13 Re-raising exceptions : 

 # Python 2 syntax
try:
 some_operation()
except SomeError, e:
 if is_fatal(e):
  raise
 handle_nonfatal(e)

# Python 3 syntax
try:
 some_operation()
except SomeError as e:
 if is_fatal(e):
  raise
 handle_nonfatal(e)
 

 The 'raise' statement with no arguments inside an error handler tells Python to re-raise the exception with the original traceback intact , allowing you to say "oh, sorry, sorry, I didn't mean to catch that, sorry, sorry." 

 If you wish to print, store or fiddle with the original traceback, you can get it with sys.exc_info(), and printing it like Python would is done with the 'traceback' module. 
 #14 Main messages :) 

 import this
# btw look at this module's source :)
 

 

 De-cyphered : 

 
 The Zen of Python, by Tim Peters  
 
 Beautiful is better than ugly. 
 Explicit is better than implicit. 
 Simple is better than complex. 
 Complex is better than complicated. 
 Flat is better than nested. 
 Sparse is better than dense. 
 Readability counts. 
 Special cases aren't special enough to break the rules. 
 Although practicality beats purity. 
 Errors should never pass silently. 
 Unless explicitly silenced. 
 In the face of ambiguity, refuse the temptation to guess.
 There should be one-- and preferably only one --obvious way to do it. 
 Although that way may not be obvious at first unless you're Dutch. 
 Now is better than never. 
 Although never is often better than right now. 
 If the implementation is hard to explain, it's a bad idea. 
 If the implementation is easy to explain, it may be a good idea. 
 Namespaces are one honking great idea -- let's do more of those! 
 
 #15 Nested list comprehensions and generator expressions: 

 [(i,j) for i in range(3) for j in range(i) ] 
((i,j) for i in range(4) for j in range(i) )
 

 These can replace huge chunks of nested-loop code. 
 #16 You can use property to make your class interfaces more strict. 

 class C(object):
 def __init__(self, foo, bar):
  self.foo = foo # read-write property
  self.bar = bar # simple attribute

 def _set_foo(self, value):
  self._foo = value

 def _get_foo(self):
  return self._foo

 def _del_foo(self):
  del self._foo

 # any of fget, fset, fdel and doc are optional,
 # so you can make a write-only and/or delete-only property.
 foo = property(fget = _get_foo, fset = _set_foo,
     fdel = _del_foo, doc = 'Hello, I am foo!')

class D(C):
 def _get_foo(self):
  return self._foo * 2

 def _set_foo(self, value):
  self._foo = value / 2

 foo = property(fget = _get_foo, fset = _set_foo,
     fdel = C.foo.fdel, doc = C.foo.__doc__)
 

 In Python 2.6 and 3.0 : 

 class C(object):
 def __init__(self, foo, bar):
  self.foo = foo # read-write property
  self.bar = bar # simple attribute

 @property
 def foo(self):
  '''Hello, I am foo!'''

  return self._foo

 @foo.setter
 def foo(self, value):
  self._foo = value

 @foo.deleter
 def foo(self):
  del self._foo

class D(C):
 @C.foo.getter
 def foo(self):
  return self._foo * 2

 @foo.setter
 def foo(self, value):
  self._foo = value / 2
 

 To learn more about how property works refer to descriptors . 
 #17 Getter functions in module operator 

 The functions attrgetter() and itemgetter() in module operator can be used to generate fast access functions for use in sorting and search objects and dictionaries 

 Chapter 6.7 in the Python Library Docs 
 #18 Interleaving if and for in list comprehensions 

 &gt;&gt;&gt; [(x, y) for x in range(4) if x % 2 == 1 for y in range(4)]
[(1, 0), (1, 1), (1, 2), (1, 3), (3, 0), (3, 1), (3, 2), (3, 3)]
 

 I never realized this until I learned Haskell. 
 #19 The Python Interpreter 

 &gt;&gt;&gt;
 

 Maybe not lesser known, but certainly one of my favorite features of Python. 
 #20 Metaclasses 

 of course :-) http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python 
 #21 Implicit concatenation: 

 &gt;&gt;&gt; print "Hello " "World"
Hello World
 

 Useful when you want to make a long text fit on several lines in a script: 

 hello = "Greaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Hello " \
  "Word"
 

 or 

 hello = ("Greaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Hello " 
   "Word")
 
 #22 First-class functions 

 It's not really a hidden feature, but the fact that functions are first class objects is simply great. You can pass them around like any other variable. 

 &gt;&gt;&gt; def jim(phrase):
... return 'Jim says, "%s".' % phrase
&gt;&gt;&gt; def say_something(person, phrase):
... print person(phrase)

&gt;&gt;&gt; say_something(jim, 'hey guys')
'Jim says, "hey guys".'
 
 #23 Some of the builtin favorites, map(), reduce(), and filter(). All extremely fast and powerful. 
 #24 Ability to substitute even things like file deletion, file opening etc. - direct manipulation of language library. This is a huge advantage when testing. You don't have to wrap everything in complicated containers. Just substitute a function/method and go. This is also called monkey-patching. 
 #25 Too lazy to initialize every field in a dictionary? No problem: 

 In Python > 2.3: 

 from collections import defaultdict
 

 In Python &lt;= 2.3: 

 def defaultdict(type_):
 class Dict(dict):
  def __getitem__(self, key):
   return self.setdefault(key, type_())
 return Dict()
 

 In any version: 

 d = defaultdict(list)
for stuff in lots_of_stuff:
  d[stuff.name].append(stuff)
 

 UPDATE: 

 Thanks Ken Arnold . I reimplemented a more sophisticated version of defaultdict. It should behave exactly as the one in the standard library . 

 def defaultdict(default_factory, *args, **kw):        

 class defaultdict(dict):

  def __missing__(self, key):
   if default_factory is None:
    raise KeyError(key)
   return self.setdefault(key, default_factory())

  def __getitem__(self, key):
   try:
    return dict.__getitem__(self, key)
   except KeyError:
    return self.__missing__(key)

 return defaultdict(*args, **kw)
 
 #26 List comprehensions 

 list comprehensions 

 Compare the more traditional (without list comprehension): 

 foo = []
for x in xrange(10):
 if x % 2 == 0:
  foo.append(x)
 

 to: 

 foo = [x for x in xrange(10) if x % 2 == 0]
 
 #27 Special methods 

 Absolute power! 
 #28 Everything is dynamic 

 "There is no compile-time". Everything in Python is runtime. A module is 'defined' by executing the module's source top-to-bottom, just like a script, and the resulting namespace is the module's attribute-space. Likewise, a class is 'defined' by executing the class body top-to-bottom, and the resulting namespace is the class's attribute-space. A class body can contain completely arbitrary code -- including import statements, loops and other class statements. Creating a class, function or even module 'dynamically', as is sometimes asked for, isn't hard; in fact, it's impossible to avoid, since everything is 'dynamic'. 
 #29 &gt;&gt;&gt; x=[1,1,2,'a','a',3]
&gt;&gt;&gt; y = [ _x for _x in x if not _x in locals()['_[1]'] ]
&gt;&gt;&gt; y
[1, 2, 'a', 3]
 

 
"locals()['_[1]']" is the "secret name" of the list being created. Very useful when state of list being built affects subsequent build decisions.