Question (ID-1450393): How do you read from stdin in python I'm trying to do some of the code golf challenges but they all require the input to be taken from stdin and I don't know how to get that in python. 
 Answers (Total-7): #0 There's a few ways to do it. 

 sys.stdin is a file-like object on which you can call functions read or readlines if you want to read everything or you want to read everything and split it by newline automatically. 

 If you want to prompt the user for input, you can use raw_input in Python 2.X, and just input in Python 3. 

 If you actually just want to read command-line options, you can access them via the sys.argv list. 

 You will probably find this Wikibook article on I/O in Python to be a useful reference as well. 
 #1 This is something I learnt from StackOverflow 

 import fileinput

for line in fileinput.input():
 pass
 

 Fileinput will run over all lines in the input; it takes the files given as command-line arguments, or if missing, the standard input. 
 #2 Here's from Learning Python : 

 import sys
data = sys.stdin.readlines()
print "Counted", len(data), "lines."
 

 
 On Unix, you could test it by doing something like: 
 

 % cat countlines.py | python countlines.py 
Counted 3 lines.
 

 
 On Windows or DOS, you'd do: 
 

 C:\&gt; type countlines.py | python countlines.py 
Counted 3 lines.
 
 #3 import sys

for line in sys.stdin:
 print line
 
 #4 Python also has built-in functions input() and raw_input() . See the python documentation under Built-in Functions 

 For example, 

 name = raw_input("Enter your name: ")
 
 #5 A more useful example. Input are three columns separated by tabs:  

 for line in sys.stdin:
 [user,time,query] = line.split('\t')
 if "hello" in query: # query contains hello
  print user,'\t',query
 
 #6 The answer proposed by others: 

 for line in sys.stdin:
 print line
 

 is very simple and pythonic, but it must be noted that the script will wait until EOF before starting to iterate on the lines of input. 

 This means that "tail -f error_log | myscript.py" will not process lines as expected. 

 The correct script for such a use case would be: 

 while 1:
 try:
  line = sys.stdin.readline()
 except KeyboardInterrupt:
  break

 if not line:
  break

 print line