Question (ID-402359): How do you uninstall a python package that was installed using distutils? Can you simply delete the directory from your python installation, or are there any lingering files that you must delete? 
 Answers (Total-6): #0 It varies based on the options that you pass to install and the contents of the distutils configuration files on the system/in the package. I don't believe that any files are modified outside of directories specified in these ways. 

 Notably, distutils does not have an uninstall command at this time. 

 It's also noteworthy that deleting a package/egg can cause dependency issues -- utilities like easy_install attempt to alleviate such problems. 
 #1 Yes, it is safe to simply delete anything that distutils installed. That goes for installed folders or .egg files. Naturally anything that depends on that code will no longer work. 

 If you want to make it work again, simply re-install. 

 By the way, if you are using distutils also consider using the multi-version feature. It allows you to have multiple versions of any single package installed. That means you do not need to delete an old version of a package if you simply want to install a newer version. 
 #2 If this is for testing and/or development purposes, setuptools has a develop command that updates every time you make a change (so you don't have to uninstall and reinstall every time you make a change). And you can uninstall the package using this command as well. 

 If you do use this, anything that you declare as a script will be left behind as a lingering file. 
 #3 The three things that get installed that you will need to delete are: 

 
 Packages/modules 
 Scripts 
 Data files 
 

 Now on my linux system these live in: 

 
 /usr/lib/python2.5/site-packages 
 /usr/bin 
 /usr/share 
 

 But on a windows system they are more likely to be entirely within the Python distribution directory. I have no idea about OSX except it is more likey to follow the linux pattern. 
 #4 I just uninstalled a python package, and even though I'm not certain I did so perfectly, I'm reasonably confident. 

 I started by getting a list of all python-related files, ordered by date, on the assumption that all of the files in my package will have more or less the same timestamp, and no other files will. 

 Luckily, I've got python installed under /opt/Python-2.6.1 ; if I had been using the Python that comes with my Linux distro, I'd have had to scour all of /usr , which would have taken a long time. 

 Then I just examined that list, and noted with relief that all the stuff that I wanted to nuke consisted of one directory, /opt/Python-2.6.1/lib/python2.6/site-packages/module-name/ , and one file, /opt/Python-2.6.1/lib/python2.6/site-packages/module-x.x.x_blah-py2.6.egg-info . 

 So I just deleted those. 

 Here's how I got the date-sorted list of files: 

 find "$@" -printf '%T@ ' -ls | sort -n | cut -d\ -f 2- 

 (I think that's got to be GNU "find", by the way; the flavor you get on OS X doesn't know about "-printf '%T@'") 

 I use that all the time. 
 #5 For Windows 7, 

 Control Panel --> Programs --> Uninstall 

 , then 

 choose the python package to remove.