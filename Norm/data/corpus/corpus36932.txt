Question (ID-36932): What's the best way to implement an 'enum' in Python? I'm mainly a C# developer, but I'm currently working on a project in Python. 

 What's the best way to implement the equivalent of an enum in Python? 
 Answers (Total-30): #0 Here's yet another way: 

 def enum(**enums):
 return type('Enum', (), enums)
 

 Used like so: 

 &gt;&gt;&gt; Numbers = enum(ONE=1, TWO=2, THREE='three')
&gt;&gt;&gt; Numbers.ONE
1
&gt;&gt;&gt; Numbers.TWO
2
&gt;&gt;&gt; Numbers.THREE
'three'
 

 You can also easily support automatic enumeration with something like this: 

 def enum(*sequential, **named):
 enums = dict(zip(sequential, range(len(sequential))), **named)
 return type('Enum', (), enums)
 

 Used like so: 

 &gt;&gt;&gt; Numbers = enum('ZERO', 'ONE', 'TWO')
&gt;&gt;&gt; Numbers.ZERO
0
&gt;&gt;&gt; Numbers.ONE
1
 
 #1 Python doesn't have an equivalent but you can implement your own. 

 Myself, I like keeping it simple (I've seen some horribly complex examples on the net), something like this ... 

 class Animal:
 DOG=1
 CAT=2

x = Animal.DOG
 
 #2 Here is what I use.... 

 class Enum(set):
 def __getattr__(self, name):
  if name in self:
   return name
  raise AttributeError
 

 Here is its Implementation... 

 Animals = Enum(["DOG", "CAT", "Horse"])

print Animals.DOG
 
 #3 If you need the numeric values, here's the quickest way: 

 dog, cat, rabbit = range(3)
 
 #4 The typesafe enum pattern which was used in Java pre-JDK 5 has a
number of advantages. Much like in Alexandru's answer, you create a
class and class level fields are the enum values; however, the enum
values are instances of the class rather than small integers. This has
the advantage that your enum values don't inadvertently compare equal
to small integers, you can control how they're printed, add arbitrary
methods if that's useful and make assertions using isinstance: 

 class Animal:
 def __init__(self, name):
  self.name = name

 def __str__(self):
  return self.name

 def __repr__(self):
  return "&lt;Animal: %s&gt;" % self

Animal.DOG = Animal("dog")
Animal.CAT = Animal("cat")

&gt;&gt;&gt; x = Animal.DOG
&gt;&gt;&gt; x
&lt;Animal: dog&gt;
&gt;&gt;&gt; x == 1
False
 

 

 A recent thread on python-dev pointed out there are a couple of enum libraries in the wild, including: 

 
 flufl.enum 
 lazr.enum 
 ... and the imaginatively named enum 
 
 #5 Python doesn't have a built-in equivalent to enum , and other answers have ideas for implementing your own (you may also be interested in the over the top version in the Python cookbook). 

 However, in situations where an enum would be called for in C, I usually end up just using simple strings : because of the way objects/attributes are implemented, (C)Python is optimized to work very fast with short strings anyway, so there wouldn't really be any performance benefit to using integers. To guard against typos / invalid values you can insert checks in selected places. 

 ANIMALS = ['cat', 'dog', 'python']

def take_for_a_walk(animal):
 assert animal in ANIMALS
 ...
 

 (One disadvantage compared to using a class is that you lose the benefit of autocomplete) 
 #6 The best solution for you would depend on what you require from your fake enum . 

 Simple enum: 

 If you need the enum as only a list of names identifying different items , the solution by Mark Harrison (above) is great: 

 (Pen, Pencil, Eraser) = range(0, 3)
 

 Using a range also allows you to set any starting value : 

 (Pen, Pencil, Eraser) = range(9, 12)
 

 In addition to the above, if you also require that the items belong to a container of some sort, then embed them in a class: 

 class Stationary:
 (Pen, Pencil, Eraser) = range(0, 3)
 

 To use the enum item, you would now need to use the container name and the item name: 

 stype = Stationary.Pen
 

 Complex enum: 

 For long lists of enum or more complicated uses of enum, these solutions will not suffice. You could look to the recipe by Will Ware for Simulating Enumerations in Python published in the Python Cookbook . An online version of that is available here . 

 More info: 

 PEP 354: Enumerations in Python has the interesting details of a proposal for enum in Python and why it was rejected. 
 #7 def M_add_class_attribs(attribs):
 def foo(name, bases, dict_):
  for v, k in attribs:
   dict_[k] = v
  return type(name, bases, dict_)
 return foo

def enum(names):
 class Foo(object):
  __metaclass__ = M_add_class_attribs(enumerate(names))
  def __setattr__(self, name, value): # this makes it read-only
   raise NotImplementedError
 return Foo()
 

 Use it like this: 

 Animal = enum(('DOG', 'CAT'))
Animal.DOG # returns 0
Animal.CAT # returns 1
Animal.DOG = 2 # raises NotImplementedError
 

 if you just want unique symbols and don't care about the values, replace this line: 

 __metaclass__ = M_add_class_attribs(enumerate(names))
 

 with this: 

 __metaclass__ = M_add_class_attribs((object(), name) for name in names)
 
 #8 What exactly do you want to use an enum for? Is there a more Pythonic way of doing it? 
 #9 So, I agree. Let's not enforce type safety in python, but I would like to protect myself from silly mistakes. So what do we think about this? 

 class Animal(object):
 values = ['Horse','Dog','Cat']

 class __metaclass__(type):
  def __getattr__(self, name):
   return self.values.index(name)
 

 Keeps me from value-collision in defining my enums. 

 &gt;&gt;&gt; Animal.Cat
2
 

 [edit] 

 Realized later there's another handy advantage.. really fast reverse lookups: 

 def nameOf(self, i):
 return Animal.values[i]
 
 #10 What I use: 

 class Enum(object):
 def __init__(self, names, separator=None):
  self.names = names.split(separator)
  for value, name in enumerate(self.names):
   setattr(self, name.upper(), value)
 def tuples(self):
  return tuple(enumerate(self.names))
 

 How to use: 

 &gt;&gt;&gt; state = Enum('draft published retracted')
&gt;&gt;&gt; state.DRAFT
0
&gt;&gt;&gt; state.RETRACTED
2
&gt;&gt;&gt; state.FOO
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Enum' object has no attribute 'FOO'
&gt;&gt;&gt; state.tuples()
((0, 'draft'), (1, 'published'), (2, 'retracted'))
 

 So this gives you integer constants like state.PUBLISHED and the two-tuples to use as choices in Django models. 
 #11 Hmmm... I suppose the closest thing to an enum would be a dictionary, defined either like this: 

 months = {
 'January': 1,
 'February': 2,
 ...
}
 

 or 

 months = dict(
 January=1,
 February=2,
 ...
)
 

 Then, you can use the symbolic name for the constants like this: 

 mymonth = months['January']
 

 There are other options, like a list of tuples, or a tuple of tuples, but the dictionary is the only one that provides you with a "symbolic" (constant string) way to access the 
value. 

 Edit: I like Alexandru's answer too! 
 #12 davidg recommends using dicts. I'd go one step further and use sets: 

 months = set('January', 'February', ..., 'December')
 

 Now you can test whether a value matches one of the values in the set like this: 

 if m in months:
 

 like dF, though, I usually just use string constants in place of enums. 
 #13 Alexandru's suggestion of using class constants for enums works quite well. 

 I also like to add a dictionary for each set of constants to lookup a human-readable string representation. 

 This serves two purposes: a) it provides a simple way to pretty-print your enum and b) the dictionary logically groups the constants so that you can test for membership. 

 class Animal: 
 TYPE_DOG = 1
 TYPE_CAT = 2

 type2str = {
 TYPE_DOG: "dog",
 TYPE_CAT: "cat"
 }

 def __init__(self, type_):
 assert type_ in self.type2str.keys()
 self._type = type_

 def __repr__(self):
 return "&lt;%s type=%s&gt;" % (
  self.__class__.__name__, self.type2str[self._type].upper())
 
 #14 You can take a look at the traits package. This gives you something like type safety and many other useful features. 

 But it really depends on what you want to use such an enum for. 
 #15 Its funny, I just had a need for this the other day and i couldnt find an implementation worth using... so i wrote my own 

 import functools

class EnumValue(object):
 def __init__(self,name,value,type):
 	self.__value=value
 	self.__name=name
 	self.Type=type
 def __str__(self):
 	return self.__name
 def __repr__(self):#2.6 only... so change to what ever you need...
 	return '{cls}({0!r},{1!r},{2})'.format(self.__name,self.__value,self.Type.__name__,cls=type(self).__name__)

 def __hash__(self):
 	return hash(self.__value)
 def __nonzero__(self):
 	return bool(self.__value)
 def __cmp__(self,other):
 	if isinstance(other,EnumValue):
 		return cmp(self.__value,other.__value)
 	else:
 		return cmp(self.__value,other)#hopefully their the same type... but who cares?
 def __or__(self,other):
 	if other is None:
 		return self
 	elif type(self) is not type(other):
 		raise TypeError()
 	return EnumValue('{0.Name} | {1.Name}'.format(self,other),self.Value|other.Value,self.Type)
 def __and__(self,other):
 	if other is None:
 		return self
 	elif type(self) is not type(other):
 		raise TypeError()
 	return EnumValue('{0.Name} & {1.Name}'.format(self,other),self.Value&other.Value,self.Type)
 def __contains__(self,other):
 	if self.Value==other.Value:
 		return True
 	return bool(self&other)
 def __invert__(self):
 	enumerables=self.Type.__enumerables__
 	return functools.reduce(EnumValue.__or__,(enum for enum in enumerables.itervalues() if enum not in self)) 

 @property
 def Name(self):
 	return self.__name

 @property
 def Value(self):
 	return self.__value

class EnumMeta(type):
 @staticmethod
 def __addToReverseLookup(rev,value,newKeys,nextIter,force=True):	
 	if value in rev:
 		forced,items=rev.get(value,(force,()) )
 		if forced and force: #value was forced, so just append
 			rev[value]=(True,items+newKeys)
 		elif not forced:#move it to a new spot
 			next=nextIter.next()
 			EnumMeta.__addToReverseLookup(rev,next,items,nextIter,False)
 			rev[value]=(force,newKeys)
 		else: #not forcing this value
 			next = nextIter.next()
 			EnumMeta.__addToReverseLookup(rev,next,newKeys,nextIter,False)
 			rev[value]=(force,newKeys)
 	else:#set it and forget it
 		rev[value]=(force,newKeys)
 	return value

 def __init__(cls,name,bases,atts):
 	classVars=vars(cls)
 	enums = classVars.get('__enumerables__',None)
 	nextIter = getattr(cls,'__nextitr__',itertools.count)()
 	reverseLookup={}
 	values={}

 	if enums is not None:
 		#build reverse lookup
 		for item in enums:
 			if isinstance(item,(tuple,list)):
 				items=list(item)
 				value=items.pop()
 				EnumMeta.__addToReverseLookup(reverseLookup,value,tuple(map(str,items)),nextIter)
 			else:
 				value=nextIter.next()
 				value=EnumMeta.__addToReverseLookup(reverseLookup,value,(str(item),),nextIter,False)#add it to the reverse lookup, but don't force it to that value

 		#build values and clean up reverse lookup
 		for value,fkeys in reverseLookup.iteritems():
 			f,keys=fkeys
 			for key in keys:
 				enum=EnumValue(key,value,cls)
 				setattr(cls,key,enum)
 				values[key]=enum
 			reverseLookup[value]=tuple(val for val in values.itervalues() if val.Value == value)
 	setattr(cls,'__reverseLookup__',reverseLookup)
 	setattr(cls,'__enumerables__',values)
 	setattr(cls,'_Max',max([key for key in reverseLookup] or [0]))
 	return super(EnumMeta,cls).__init__(name,bases,atts)

 def __iter__(cls):
 	for enum in cls.__enumerables__.itervalues():
 		yield enum
 def GetEnumByName(cls,name):
 	return cls.__enumerables__.get(name,None)
 def GetEnumByValue(cls,value):
 	return cls.__reverseLookup__.get(value,(None,))[0]

class Enum(object):
 __metaclass__=EnumMeta
 __enumerables__=None

class FlagEnum(Enum):
 @staticmethod
 def __nextitr__():
 	yield 0
 	for val in itertools.count():
 		yield 2**val


def enum(name,*args):
 return EnumMeta(name,(Enum,),dict(__enumerables__=args))
 

 take it or leave it, it did what i needed it to do :) 

 use it like: 

 
class Air(FlagEnum):
 __enumerables__=('None','Oxygen','Nitrogen','Hydrogen')

class Mammals(Enum):
 __enumerables__=('Bat','Whale',('Dog','Puppy',1),'Cat')
Bool = enum('Bool','Yes',('No',0))
 
 #16 I had need of some symbolic constants in pyparsing to represent left and right associativity of binary operators. I used class constants like this: 

 # an internal class, not intended to be seen by client code
class _Constants(object):
 pass


# an enumeration of constants for operator associativity
opAssoc = _Constants()
opAssoc.LEFT = object()
opAssoc.RIGHT = object()
 

 Now when client code wants to use these constants, they can import the entire enum using: 

 import opAssoc from pyparsing
 

 The enumerations are unique, they can be tested with 'is' instead of '==', they don't take up a big footprint in my code for a minor concept, and they are easily imported into the client code. They don't support any fancy str() behavior, but so far that is in the YAGNI category. 
 #17 Here is another one. It seems somewhat similar to the general approach used by @Cipher. The author called it yapenum, "yet another Python enum". 

 http://blog.bstpierre.org/yet-another-python-enum-module 
 #18 This is the best one I have seen: "First Class Enums in Python" 

 http://code.activestate.com/recipes/413486/ 

 It gives you a class, and the class contains all the enums. The enums can be compared to each other, but don't have any particular value; you can't use them as an integer value. (I resisted this at first because I am used to C enums, which are integer values. But if you can't use it as an integer, you can't use it as an integer by mistake so overall I think it is a win.) Each enum is a unique value. You can print enums, you can iterate over them, you can test that an enum value is "in" the enum. It's pretty complete and slick. 
 #19 Considering this same question several years later, the enum package from PyPi provides a robust implementation of enums. An earlier answer mentioned PEP 354; this was rejected but the proposal was implemented 
 http://pypi.python.org/pypi/enum . 
 #20 I prefer to define enums in Python like so: 

 class Animal:
 class Dog: pass
 class Cat: pass

x = Animal.Dog
 

 It's more bug-proof than using integers since you don't have to worry about ensuring that the integers are unique (e.g. if you said Dog = 1 and Cat = 1 you'd be screwed). 

 It's more bug-proof than using strings since you don't have to worry about typos (e.g.
x == "catt" fails silently, but x == Animal.Catt is a runtime exception). 
 #21 Another, very simple, implementation of an enum in Python, using namedtuple : 

 from collections import namedtuple

def enum(*keys):
 return namedtuple('Enum', keys)(*keys)

MyEnum = enum('FOO', 'BAR', 'BAZ')
 

 or, alternatively, 

 # With sequential number values
def enum(*keys):
 return namedtuple('Enum', keys)(*range(len(keys)))

# From a dict / keyword args
def enum(**kwargs):
 return namedtuple('Enum', kwargs.keys())(*kwargs.values())
 

 Like the method above that subclasses set , this allows: 

 'FOO' in MyEnum
other = MyEnum.FOO
assert other == MyEnum.FOO
 

 But has more flexibility as it can have different keys and values. This allows 

 MyEnum.FOO &lt; MyEnum.BAR
 

 to act as is expected if you use the version that fills in sequential number values. 
 #22 What about : 

 TYPE = {'EAN13': u'EAN-13',
  'CODE39': u'Code 39',
  'CODE128': u'Code 128',
  'i25':  u'Interleaved 2 of 5',}

&gt;&gt;&gt; TYPE.items()
[('EAN13', u'EAN-13'), ('i25', u'Interleaved 2 of 5'), ('CODE39', u'Code 39'), ('CODE128', u'Code 128')]
&gt;&gt;&gt; TYPE.keys()
['EAN13', 'i25', 'CODE39', 'CODE128']
&gt;&gt;&gt; TYPE.values()
[u'EAN-13', u'Interleaved 2 of 5', u'Code 39', u'Code 128']
 

 I used that for Django model choices, it looks very pythonic.
It is not really a Enum, but do the job. 
 #23 Following the Java like enum implementation proposed by Aaron Maenpaa, i came out with this, the idea was to make it generic and parseable. 

 class Enum:
 #'''
 #Java like implementation for enums.
 #
 #Usage:
 #class Tool(Enum): name = 'Tool'
 #Tool.DRILL = Tool.register('drill')
 #Tool.HAMMER = Tool.register('hammer')
 #Tool.WRENCH = Tool.register('wrench')
 #'''

 name = 'Enum' # Enum name
 _reg = dict([]) # Enum registered values

 @classmethod
 def register(cls, value):
  #'''
  #Registers a new value in this enum.
  #
  #@param value: New enum value.
  #
  #@return: New value wrapper instance.
  #'''
  inst = cls(value)
  cls._reg[value] = inst
  return inst

 @classmethod
 def parse(cls, value):
  #'''
  #Parses a value, returning the enum instance.
  #
  #@param value: Enum value.
  #
  #@return: Value corresp instance.  
  #'''
  return cls._reg.get(value) 

 def __init__(self, value):
  #'''
  #Constructor (only for internal use).
  #'''
  self.value = value

 def __str__(self):
  #'''
  #str() overload.
  #'''
  return self.value

 def __repr__(self):
  #'''
  #repr() overload.
  #'''
  return "&lt;" + self.name + ": " + self.value + "&gt;"
 
 #24 Why must enumerations be ints? Unfortunately, I can't think of any good looking construct to produce this without chaning the Python language, so I'll use strings: 

 class Enumerator(object):
 def __init__(self, name):
  self.name = name

 def __eq__(self, other):
  if self.name == other:
   return True
  return self is other

 def __ne__(self, other):
  if self.name != other:
   return False
  return self is other

 def __repr__(self):
  return 'Enumerator({0})'.format(self.name)

 def __str__(self):
  return self.name

class Enum(object):
 def __init__(self, *enumerators):
  for e in enumerators:
   setattr(self, e, Enumerator(e))
 def __getitem__(self, key):
  return getattr(self, key) 
 

 Then again maybe it's even better now that we can naturally test against strings, for the sake of config files or other remote input. 

 Example: 

 class Cow(object):
 State = Enum(
  'standing',
  'walking',
  'eating',
  'mooing',
  'sleeping',
  'dead',
  'dying'
 )
 state = State.standing

In [1]: from enum import Enum

In [2]: c = Cow()

In [3]: c2 = Cow()

In [4]: c.state, c2.state
Out[4]: (Enumerator(standing), Enumerator(standing))

In [5]: c.state == c2.state 
Out[5]: True

In [6]: c.State.mooing
Out[6]: Enumerator(mooing)

In [7]: c.State['mooing']
Out[7]: Enumerator(mooing)

In [8]: c.state = Cow.State.dead

In [9]: c.state == c2.state
Out[9]: False

In [10]: c.state == Cow.State.dead
Out[10]: True

In [11]: c.state == 'dead'
Out[11]: True

In [12]: c.state == Cow.State['dead']
Out[11]: True
 
 #25 def enum( *names ):

 '''
 Makes enum.
 Usage:
  E = enum( 'YOUR', 'KEYS', 'HERE' )
  print( E.HERE )
 '''

 class Enum():
  pass
 for index, name in enumerate( names ):
  setattr( Enum, name, index )
 return Enum
 
 #26 I like the java enum, that's how I do it in python: 

 def enum(clsdef): 
 class Enum(object):
  __slots__=tuple([var for var in clsdef.__dict__ if isinstance((getattr(clsdef, var)), tuple) and not var.startswith('__')])

  def __new__(cls, *args, **kwargs):
   if not '_the_instance' in cls.__dict__:
    cls._the_instance = object.__new__(cls, *args, **kwargs)
   return cls._the_instance

  def __init__(self):
   clsdef.values=lambda cls, e=Enum: e.values()
   clsdef.valueOf=lambda cls, n, e=self: e.valueOf(n)
   for ordinal, key in enumerate(self.__class__.__slots__):
    args=getattr(clsdef, key)
    instance=clsdef(*args)
    instance._name=key
    instance._ordinal=ordinal
    setattr(self, key, instance)

  @classmethod
  def values(cls):
   if not hasattr(cls, '_values'):
    cls._values=[getattr(cls, name) for name in cls.__slots__]
   return cls._values

  def valueOf(self, name):
   return getattr(self, name)

  def __repr__(self):
   return ''.join(['&lt;class Enum (', clsdef.__name__, ') at ', str(hex(id(self))), '&gt;'])

 return Enum()
 

 Sample use: 

 i=2 
@enum
class Test(object):
 A=("a",1)
 B=("b",)
 C=("c",2)
 D=tuple()
 E=("e",3)

 while True:
  try:
   F, G, H, I, J, K, L, M, N, O=[tuple() for _ in range(i)]
   break;
  except ValueError:
   i+=1

 def __init__(self, name="default", aparam=0):
  self.name=name
  self.avalue=aparam
 

 all class variables are defined as a tuple, just like the constructor. so far, you can't use named arguments. 
 #27 I needed the possibility of having the enum values be floats (not just integers) for use in defining API's where the enum classes are part of the API.
My requirements (and implementation) are in this blog post:
 http://franktheblue.blogspot.com/2011/05/enums-in-python-more-flexible-and.html 
 #28 Here is a variant on Alec Thomas's solution : 

 def enum(*args, **kwargs):
 return type('Enum', (), dict((y, x) for x, y in enumerate(args), **kwargs)) 

x = enum('POOH', 'TIGGER', 'EEYORE', 'ROO', 'PIGLET', 'RABBIT', 'OWL')
assert x.POOH == 0
assert x.TIGGER == 1
 
 #29 How about the enumerate built-in function? 

 &gt;&gt;&gt; for i, season in enumerate(['Spring', 'Summer', 'Fall', 'Winter']):
...  print i, season

0 Spring
1 Summer
2 Fall
3 Winter