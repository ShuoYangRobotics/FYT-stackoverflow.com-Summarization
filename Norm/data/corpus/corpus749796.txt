Question (ID-749796): Pretty printing XML in python What is the best way (or even the various ways) to pretty print xml in python? 
 Answers (Total-8): #0 import xml.dom.minidom

xml = xml.dom.minidom.parse(xml_fname) # or xml.dom.minidom.parseString(xml_string)
pretty_xml_as_string = xml.toprettyxml()
 
 #1 lxml is recent, updated, and includes a pretty print function 

 import lxml.etree as etree

x = etree.parse("filename")
print etree.tostring(x, pretty_print = True)
 

 Check out the lxml tutorial:
 http://codespeak.net/lxml/tutorial.html 
 #2 Here's my (hacky?) solution to get around the ugly text node problem. 

 uglyXml = doc.toprettyxml(indent=' ')

text_re = re.compile('&gt;\n\s+([^&lt;&gt;\s].*?)\n\s+&lt;/', re.DOTALL) 
prettyXml = text_re.sub('&gt;\g&lt;1&gt;&lt;/', uglyXml)

print prettyXml
 

 The above code will produce: 

 &lt;?xml version="1.0" ?&gt;
&lt;issues&gt;
 &lt;issue&gt;
 &lt;id&gt;1&lt;/id&gt;
 &lt;title&gt;Add Visual Studio 2005 and 2008 solution files&lt;/title&gt;
 &lt;details&gt;We need Visual Studio 2005/2008 project files for Windows.&lt;/details&gt;
 &lt;/issue&gt;
&lt;/issues&gt;
 

 Instead of this: 

 &lt;?xml version="1.0" ?&gt;
&lt;issues&gt;
 &lt;issue&gt;
 &lt;id&gt;
  1
 &lt;/id&gt;
 &lt;title&gt;
  Add Visual Studio 2005 and 2008 solution files
 &lt;/title&gt;
 &lt;details&gt;
  We need Visual Studio 2005/2008 project files for Windows.
 &lt;/details&gt;
 &lt;/issue&gt;
&lt;/issues&gt;
 

 Disclaimer: There are probably some limitations. 
 #3 Another solution is to use this indent function: http://effbot.org/zone/element-lib.htm#prettyprint and the elementtree library that's built in to Python since 2.4. 
Here's what that would look like: 

 

from xml.etree import ElementTree

def indent(elem, level=0):
 i = "\n" + level*" "
 if len(elem):
  if not elem.text or not elem.text.strip():
   elem.text = i + " "
  if not elem.tail or not elem.tail.strip():
   elem.tail = i
  for elem in elem:
   indent(elem, level+1)
  if not elem.tail or not elem.tail.strip():
   elem.tail = i
 else:
  if level and (not elem.tail or not elem.tail.strip()):
   elem.tail = i

root = ElementTree.parse('/tmp/xmlfile').getroot()
indent(root)

 
 #4 If you're using a DOM implementation, each has their own form of pretty-printing built-in: 

 # minidom
#
document.toprettyxml()

# 4DOM
#
xml.dom.ext.PrettyPrint(document, stream)

# pxdom (or other DOM Level 3 LS-compliant imp)
#
serializer.domConfig.setParameter('format-pretty-print', True)
serializer.writeToString(document)
 

 If you're using something else without its own pretty-printer — or those pretty-printers don't quite do it the way you want —  you'd probably have to write or subclass your own serialiser. 
 #5 As others pointed out, lxml has a pretty printer built in. 

 Be aware though that by default it changes CDATA sections to normal text, which can have nasty results. 

 Here's a Python function that preserves the input file and only changes the indentation (notice the strip_cdata=False ). Furthermore it makes sure the output uses UTF-8 as encoding instead of the default ASCII (notice the encoding='utf-8' ): 

 from lxml import etree

def prettyPrintXml(xmlFilePathToPrettyPrint):
 assert xmlFilePathToPrettyPrint is not None
 parser = etree.XMLParser(resolve_entities=False, strip_cdata=False)
 document = etree.parse(xmlFilePathToPrettyPrint, parser)
 document.write(xmlFilePathToPrettyPrint, pretty_print=True, encoding='utf-8')
 

 Example usage: 

 prettyPrintXml('some_folder/some_file.xml')
 
 #6 I had some problems with minidom's pretty print. I'd get a UnicodeError whenever I tried pretty-printing a document with characters outside the given encoding, eg if I had a β in a document and I tried doc.toprettyxml(encoding='latin-1') . Here's my workaround for it: 

 def toprettyxml(doc, encoding):
 """Return a pretty-printed XML document in a given encoding."""
 unistr = doc.toprettyxml().replace(u'&lt;?xml version="1.0" ?&gt;',
       u'&lt;?xml version="1.0" encoding="%s"?&gt;' % encoding)
 return unistr.encode(encoding, 'xmlcharrefreplace')
 
 #7 XML pretty print for python looks pretty good for this task. (Appropriately named, too.) 

 An alternative is to use pyXML , which has a PrettyPrint function .