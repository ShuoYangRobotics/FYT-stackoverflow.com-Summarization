Question (ID-988228): Converting a String to Dictionary? How can i convert the following: 

 s = "{'muffin' : 'lolz', 'foo' : 'kitty'}"
 

 Into a dictionary object? I'd prefer not to use eval() what should i do? 

 The main reason for this, is one of my coworkers classes he wrote, converts all input into strings. I'm not in the mood to go and modify his classes, to deal with this issue. 
 Answers (Total-6): #0 Starting in Python 2.6 you can use the built-in ast.literal_eval : 

 &gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("{'muffin' : 'lolz', 'foo' : 'kitty'}")
{'muffin': 'lolz', 'foo': 'kitty'}
 

 This is safer than using eval . As its own docs say: 

 
>>> help(ast.literal_eval)
Help on function literal_eval in module ast:

literal_eval(node_or_string)
 Safely evaluate an expression node or a string containing a Python
 expression. The string or node provided may only consist of the following
 Python literal structures: strings, numbers, tuples, lists, dicts, booleans,
 and None.
 

 For example: 

 &gt;&gt;&gt; eval("shutil.rmtree('mongo')")
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
 File "&lt;string&gt;", line 1, in &lt;module&gt;
 File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 208, in rmtree
 onerror(os.listdir, path, sys.exc_info())
 File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 206, in rmtree
 names = os.listdir(path)
OSError: [Errno 2] No such file or directory: 'mongo'
&gt;&gt;&gt; ast.literal_eval("shutil.rmtree('mongo')")
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
 File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 68, in literal_eval
 return _convert(node_or_string)
 File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 67, in _convert
 raise ValueError('malformed string')
ValueError: malformed string
 
 #1 If the string can always be trusted, you could use eval (or use literal_eval as suggested; it's safe no matter what the string is.) Otherwise you need a parser. A JSON parser (such as simplejson) would work if he only ever stores content that fits with the JSON scheme. 
 #2 I'm sure that he converts all input into strings just so that it's sanitized for eval(). Why wouldn't you use it in this situation? Otherwise you'll just be recoding functionality that already exists. 
 #3 If you can't use Python 2.6, you can use a simple safeeval implmenentation like http://code.activestate.com/recipes/364469/ 

 It piggybacks on the Python compiler so you don't have to do all the gross work yourself. 
 #4 I can't think of any other way to do this without using eval besides doing some nasty string parsing. 
 #5 I'm assuming your coworker is serializing these types with repr() . A purposeful quality of repr() is that, for most simple types, it will produce a string that will create an equivalent object when consumed by eval() . 

 I think by not being willing to use eval() , you're creating an unnecessary amount of work for yourself. If the source of the objectsis trusted, just use it.