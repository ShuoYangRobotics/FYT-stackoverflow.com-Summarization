Question (ID-1231688): How do I remove packages installed with Python's easy_install? Python's easy_install makes installing new packages extremely convenient. However, as far as I can tell, it doesn't implement the other common features of a dependency manager - listing and removing installed packages. 

 What is the best way of finding out what's installed, and what is the preferred way of removing installed packages? Are there any files that need to be updated if I remove packages manually (e.g. by rm /usr/local/lib/python2.6/dist-packages/my_installed_pkg.egg or similar)? 
 Answers (Total-10): #0 pip , an alternative to setuptools/easy_install, provides an "uninstall" command. 
 #1 To uninstall an .egg you need to rm -rf the egg (it might be a directory) and remove the matching line from site-packages/easy-install.pth 
 #2 There are several sources on the net suggesting a hack by reinstalling the package with the -m option and then just removing the .egg file in lib/ and the binaries in bin/. Also, discussion about this setuptools issue can be found on the python bug tracker as setuptools issue 21 . 

 Edit: Added the link to the python bugtracker. 
 #3 If the problem is a serious-enough annoyance to you, you might consider virtualenv . It allows you to create an environment that encapsulates python libraries. You install packages there rather than in the global site-packages directory. Any scripts you run in that environment have access to those packages (and optionally, your global ones as well). I use this a lot when evaluating packages that I am not sure I want/need to install globally. If you decide you don't need the package, it's easy enough to just blow that virtual environment away. It's pretty easy to use. Make a new env: 

 $&gt;virtualenv /path/to/your/new/ENV
 

 virtual_envt installs setuptools for you in the new environment, so you can do: 

 $&gt;ENV/bin/easy_install
 

 You can even create your own boostrap scripts that setup your new environment. So, with one command, you can create a new virtual env with, say, python 2.6, psycopg2 and django installed by default (you can can install an env-specific version of python if you want). 
 #4 try 

 $ easy_install -m [PACKAGE]
 

 then 

 $ rm -rf .../python2.X/site-packages/[PACKAGE].egg
 
 #5 Official(?) instructions: http://peak.telecommunity.com/DevCenter/EasyInstall#uninstalling-packages 
 #6 First you have to run this command: 

 $ easy_install -m [PACKAGE]
 

 It removes all dependencies of the package. 

 Then remove egg file of that package: 

 $ rm -rf .../python2.X/site-packages/[PACKAGE].egg
 
 #7 For listing installed python packages, you can use yolk -l . You'll need to easy_install yolk first though. 
 #8 Came across this question, while trying to uninstall the many random python packages installed over time. 

 Using information from this thread this is what I came up with: 

 cat package_list | xargs -n1 sudo pip uninstall -y 

 The package_list is cleaned up (awk) from a pip freeze in a virtualenv 

 To remove almost all python packages: 

 yolk -l | cut -f 1 -d " " | grep -v "setuptools|pip|ETC.." | xargs -n1 pip uninstall -y 
 #9 Guys, I just ran into the same problem on my mac... osx leopard 10.6.blah. 

 Solution is to make sure you're calling the mac ports python, ie 

 sudo port install python26
sudo port install python_select
sudo python_select python26
sudo port install py26-mysql
 

 Hope this helps.