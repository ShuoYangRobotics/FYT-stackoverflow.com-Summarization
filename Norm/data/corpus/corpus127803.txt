Question (ID-127803): How to parse ISO formatted date in python? I need to parse strings like that "2008-09-03T20:56:35.450686Z" into the python's datetime? 

 I have found only strptime in the python 2.5 std lib, but it not so convinient. 

 Which is the best way to do that? 

 Update: 

 It seems, that python-dateutil works very well. I have found that solution: 

 import dateutil.parser
d1 = '2008-09-03T20:56:35.450686Z'
d2 = dateutil.parser.parse(d1)
d3 = d2.astimezone(dateutil.tz.tzutc())
 
 Answers (Total-5): #0 Try the iso8601 module; it does exactly this. 

 There are several other options mentioned on the WorkingWithTime page on the python.org wiki. 
 #1 What is the exact error you get? Is it like the following: 

 &gt;&gt;&gt; datetime.datetime.strptime("2008-08-12T12:20:30.656234Z", "%Y-%m-%dT%H:%M:%S.Z")
ValueError: time data did not match format: data=2008-08-12T12:20:30.656234Z fmt=%Y-%m-%dT%H:%M:%S.Z
 

 If yes, you can split your input string on ".", and then add the microseconds to the datetime you got. 

 Try this: 

 &gt;&gt;&gt; def gt(dt_str):
dt, _, us= dt_str.partition(".")
dt= datetime.datetime.strptime(dt, "%Y-%m-%dT%H:%M:%S")
us= int(us.rstrip("Z"), 10)
return dt + datetime.timedelta(microseconds=us)

&gt;&gt;&gt; gt("2008-08-12T12:20:30.656234Z")
datetime.datetime(2008, 8, 12, 12, 20, 30, 656234)
&gt;&gt;&gt;
 
 #2 
import re,datetime
s="2008-09-03T20:56:35.450686Z"
d=datetime.datetime(*map(int, re.split('[^\d]', s)[:-1]))
 
 #3 Note in Py3K (and possibly in a new release of 2.6), the %f character catches microseconds. 

 &gt;&gt;&gt; datetime.datetime.strptime("2008-09-03T20:56:35.450686Z", "%Y-%m-%dT%H:%M:%S.%f%Z")
 

 See issue here 
 #4 For something that works with the 2.X standard library try: 

 calendar.timegm(time.strptime(date.split(".")[0]+"UTC", "%Y-%m-%dT%H:%M:%S%Z"))
 

 calendar.timegm is the missing gm version of time.mktime.