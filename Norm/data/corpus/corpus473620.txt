Question (ID-473620): How do you create a daemon in Python? Searching on Google reveals x2 code snippets. The first result is to this code recipe which has a lot of documentation and explanation, along with some useful discussion underneath. 

 However, another code sample , whilst not containing so much documentation, includes sample code for passing commands such as start, stop and restart. It also creates a PID file which can be handy for checking if the daemon is already running etc. 

 These samples both explain how to create the daemon. Are there any additional things that need to be considered? Is one sample better than the other, and why? 
 Answers (Total-5): #0 There are many fiddly things to take care of when becoming a well-behaved daemon process : 

 
 prevent core dumps (many daemons run as root, and core dumps can contain sensitive information) 
 behave correctly inside a chroot gaol 
 set UID, GID, working directory, umask, and other process parameters appropriately for the use case 
 relinquish elevated suid , sgid privileges 
 close all open file descriptors, with exclusions depending on the use case 
 behave correctly if started inside an already-detached context, such as init , inetd , etc. 
 set up signal handlers for sensible daemon behaviour, but also with specific handlers determined by the use case 
 redirect the standard streams stdin , stdout , stderr since a daemon process no longer has a controlling terminal 
 handle a PID file as a cooperative advisory lock, which is a whole can of worms in itself with many contradictory but valid ways to behave 
 allow proper cleanup when the process is terminated 
 actually become a daemon process without leading to zombies 
 

 Some of these are standard , as described in canonical Unix literature ( Advanced Programming in the UNIX Environment , by the late W. Richard Stevens, Addison-Wesley, 1992). Others, such as stream redirection and PID file handling , are conventional behaviour most daemon users would expect but that are less standardised. 

 All of these are covered by the PEP 3143 “Standard daemon process library” specification and the python-daemon reference implementation. 
 #1 Sander Marechal's code sample is superior to the original, which was originally posted in 2004. I once contributed a daemonizer for Pyro, but would probably use Sander's code if I had to do it over. 
 #2 Note the python-daemon package which solves a lot of problems behind daemons out of the box. 

 Among other features it enables to (from Debian package description): 

 
 Detach the process into its own process group. 
 Set process environment appropriate for running inside a chroot. 
 Renounce suid and sgid privileges. 
 Close all open file descriptors. 
 Change the working directory, uid, gid, and umask. 
 Set appropriate signal handlers. 
 Open new file descriptors for stdin, stdout, and stderr. 
 Manage a specified PID lock file. 
 Register cleanup functions for at-exit processing. 
 
 #3 The easiest way to create daemon with Python is to use the Twisted event-driven framework. It handles all of the stuff necessary for daemonization for you. It uses the Reactor Pattern to handle concurrent requests. 
 #4 80% of the time, when folks say "daemon", they only want a server. Since the question is perfectly unclear on this point, it's hard to say what the possible domain of answers could be. Since a server is adequate, start there. If an actual "daemon" is actually needed (this is rare), read up on nohup as a way to daemonize a server. 

 Until such time as an actual daemon is actually required, just write a simple server. 

 Also look at the WSGI reference implementation. 

 Also look at the Simple HTTP Server . 

 "Are there any additional things that need to be considered? " Yes. About a million things. What protocol? How many requests? How long to service each request? How frequently will they arrive? Will you use a dedicated process? Threads? Subprocesses? Writing a daemon is a big job.