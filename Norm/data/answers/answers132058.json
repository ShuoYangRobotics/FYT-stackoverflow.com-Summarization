[[{"text": ["I have module I use for situations like this - where a process will be running for a long time but gets stuck sometimes for unknown and irreproducable reasons.", "Its a bit hacky, and only works on unix (requires signals):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import code, traceback, signal\n\ndef debug(sig, frame):\n    \"\"\"Interrupt running process, and provide a python prompt for\n    interactive debugging.\"\"\"\n    d={'_frame':frame}         # Allow access to frame object.\n    d.update(frame.f_globals)  # Unless shadowed by global\n    d.update(frame.f_locals)\n\n    i = code.InteractiveConsole(d)\n    message  = \"Signal recieved : entering python shell.\\nTraceback:\\n\"\n    message += ''.join(traceback.format_stack(frame))\n    i.interact(message)\n\ndef listen():\n    signal.signal(signal.SIGUSR1, debug)  # Register handler\n</code>\n</pre>\n", "senID": 1}, {"text": ["To use, just call the listen() function at some point when your program starts up (You could even stick it in site.py to have all python programs use it), and let it run.", "At any point, send the process a SIGUSR1 signal, using kill, or in python:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n os.kill(pid, signal.SIGUSR1)\n</code>\n</pre>\n", "senID": 3}, {"text": ["This will cause the program to break to a python console at the point it is currently at, showing you the stack trace, and letting you manipulate the variables.", "Use control-d (EOF) to continue running (though note that you will probably interrupt any I/O etc at the point you signal, so it isn't fully non-intrusive."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I've another script that does the same thing, except it communicates with the running process through a pipe (to allow for debugging backgrounded processes etc).", "Its a bit large to post here, but I've added it as a python cookbook recipe here"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/576515/"}]}, {"text": ["[Edit] added remote debug recipe"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "recipe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/576515/"}]}], [{"text": ["The suggestion to install a signal handler is a good one, and I use it a lot.", "For example, bzr by default installs a SIGQUIT handler that invokes pdb.set_trace() to immediately drop you into a pdb prompt.", "(See the bzrlib.breakin module's source for the exact details.", ")  With pdb you can not only get the current stack trace but also inspect variables, etc.  "], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "bzr", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://bazaar-vcs.org/"}, {"text": "pdb.set_trace()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "pdb", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-pdb.html"}, {"href": "http://bazaar.launchpad.net/~bzr/bzr/trunk/annotate/head:/bzrlib/breakin.py", "text": "bzrlib.breakin", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["However, sometimes I need to debug a process that I didn't have the foresight to install the signal handler in.", "On linux, you can attach gdb to the process and get a python stack trace with some gdb macros.", "Put http://svn.python.org/projects/python/trunk/Misc/gdbinit in ~/.gdbinit, then:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "http://svn.python.org/projects/python/trunk/Misc/gdbinit", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://svn.python.org/projects/python/trunk/Misc/gdbinit"}, {"text": "~/.gdbinit", "childNum": 0, "tag": "code", "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "Attach gdb: ", "tag": "none", "senID": 2}, {"text": "Get the python stack trace: ", "tag": "none", "senID": 3}]}, {"text": ["It's not totally reliable unfortunately, but it works most of the time."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Finally, attaching strace can often give you a good idea what a process is doing."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "strace", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import traceback\n&gt;&gt;&gt; def x():\n&gt;&gt;&gt;    print traceback.extract_stack()\n\n&gt;&gt;&gt; x()\n[('&lt;stdin&gt;', 1, '&lt;module&gt;', None), ('&lt;stdin&gt;', 2, 'x', None)]\n</code>\n</pre>\n", "senID": 0}, {"text": ["You can also nicely format the stack trace, see the docs."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-traceback.html"}]}, {"text": ["Edit: To simulate Java's behavior, as suggested by @Douglas Leeder, add this:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "#132260", "text": "Douglas Leeder", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import signal\nimport traceback\n\nsignal.signal(signal.SIGUSR1, lambda sig, stack: traceback.print_stack(stack))\n</code>\n</pre>\n", "senID": 3}, {"text": ["to the startup code in your application.", "Then you can print the stack by sending SIGUSR1 to the running Python process."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "SIGUSR1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I am almost always dealing with multiple threads and main thread is generally not doing much, so what is most interesting is to dump all the stacks (which is more like the Java's dump).", "Here is an implementation based on this blog:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this blog", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://bzimmer.ziclix.com/2008/12/17/python-thread-dumps/"}]}, {"code": "<pre>\n<code>\n def dumpstacks(signal, frame):\n    id2name = dict([(th.ident, th.name) for th in threading.enumerate()])\n    code = []\n    for threadId, stack in sys._current_frames().items():\n        code.append(\"\\n# Thread: %s(%d)\" % (id2name[threadId], threadId))\n        for filename, lineno, name, line in traceback.extract_stack(stack):\n            code.append('File: \"%s\", line %d, in %s' % (filename, lineno, name))\n            if line:\n                code.append(\"  %s\" % (line.strip()))\n    print \"\\n\".join(code)\n\nimport signal\nsignal.signal(signal.SIGQUIT, dumpstacks)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The traceback module has some nice functions, among them: print_stack:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "traceback", "tag": "a", "pos": 0, "childList": [{"text": "traceback", "tag": "strong"}], "childNum": 1, "href": "http://www.python.org/doc/2.5.2/lib/module-traceback.html"}, {"text": "traceback", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n import traceback\n\ntraceback.print_stack()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What really helped me here is spiv's tip (which I would vote up and comment on if I had the reputation points) for getting a stack trace out of an unprepared Python process.", "Except it didn't work until I modified the gdbinit script.", "So:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "spiv's tip", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/132058/getting-stack-trace-from-a-running-python-application/147114#147114"}, {"text": "unprepared", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "modified the gdbinit script", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://lists.osafoundation.org/pipermail/chandler-dev/2007-January/007519.html"}]}, {"tag": "ul", "num": 4, "lis": [{"text": ["download http://svn.python.org/projects/python/trunk/Misc/gdbinit and put it in ~/.gdbinit"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "http://svn.python.org/projects/python/trunk/Misc/gdbinit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/projects/python/trunk/Misc/gdbinit"}, {"text": "~/.gdbinit", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["edit it, changingPyEval_EvalFrametoPyEval_EvalFrameEx [edit: no longer needed; the linked file already has this change as of 2010-01-14]"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "edit it, changingPyEval_EvalFrametoPyEval_EvalFrameEx", "childNum": 2, "tag": "del", "pos": 0, "childList": [{"text": "PyEval_EvalFrame", "tag": "code"}, {"text": "PyEval_EvalFrameEx", "tag": "code"}]}, {"text": "PyEval_EvalFrame", "childNum": 0, "tag": "code", "childList": []}, {"text": "PyEval_EvalFrameEx", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Attach gdb: gdb -p PID"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "gdb -p PID", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Get the python stack trace: pystack"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "pystack", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]}], [{"text": ["python -dv yourscript.py"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python -dv yourscript.py", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["That will make the interpreter to run in debug mode and to give you a trace of what the interpreter is doing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you want to interactively debug the code you should run it like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["python -m pdb yourscript.py"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "python -m pdb yourscript.py", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["That tells the python interpreter to run your script with the module \"pdb\" which is the python debugger, if you run it like that the interpreter will be executed in interactive mode, much like GDB"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["It's worth looking at Pydb, \"an expanded version of the Python debugger loosely based on the gdb command set\".", "It includes signal managers which can take care of starting the debugger when a specified signal is sent."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Pydb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bashdb.sourceforge.net/pydb/"}]}, {"text": ["A 2006 Summer of Code project looked at adding remote-debugging features to pydb in a module called mpdb. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "mpdb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/projects/sandbox/trunk/pdb/"}]}], [{"text": ["I would add this as a comment to haridsv's response, but I lack the reputation to do so:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "haridsv's response", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/132058/getting-stack-trace-from-a-running-python-application/2569696#2569696"}]}, {"text": ["Some of us are still stuck on a version of Python older than 2.6 (required for Thread.ident), so I got the code working in Python 2.5 (though without the thread name being displayed) as such:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import traceback\nimport sys\ndef dumpstacks(signal, frame):\n    code = []\n    for threadId, stack in sys._current_frames().items():\n            code.append(\"\\n# Thread: %d\" % (threadId))\n        for filename, lineno, name, line in traceback.extract_stack(stack):\n            code.append('File: \"%s\", line %d, in %s' % (filename, lineno, name))\n            if line:\n                code.append(\"  %s\" % (line.strip()))\n    print \"\\n\".join(code)\n\nimport signal\nsignal.signal(signal.SIGQUIT, dumpstacks)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I don't know of anything similar to java's response to SIGQUIT, so you might have to build it in to your application.", "Maybe you could make a server in another thread that can get a stacktrace on response to a message of some kind?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "java's response to SIGQUIT", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://java.sun.com/developer/onlineTraining/Programming/JDCBook/stack.html"}]}], [{"text": ["There is no way to hook into a running python process and get reasonable results.", "What I do if processes lock up is hooking strace in and trying to figure out what exactly is happening."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Unfortunately often strace is the observer that \"fixes\" race conditions so that the output is useless there too."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["On Solaris, you can use pstack(1) No changes to the python code are necessary.", "eg."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # pstack 16000 | grep : | head\n16000: /usr/bin/python2.6 /usr/lib/pkg.depotd --cfg svc:/application/pkg/serv\n[ /usr/lib/python2.6/vendor-packages/cherrypy/process/wspbus.py:282 (_wait) ]\n[ /usr/lib/python2.6/vendor-packages/cherrypy/process/wspbus.py:295 (wait) ]\n[ /usr/lib/python2.6/vendor-packages/cherrypy/process/wspbus.py:242 (block) ]\n[ /usr/lib/python2.6/vendor-packages/cherrypy/_init_.py:249 (quickstart) ]\n[ /usr/lib/pkg.depotd:890 (&lt;module&gt;) ]\n[ /usr/lib/python2.6/threading.py:256 (wait) ]\n[ /usr/lib/python2.6/Queue.py:177 (get) ]\n[ /usr/lib/python2.6/vendor-packages/pkg/server/depot.py:2142 (run) ]\n[ /usr/lib/python2.6/threading.py:477 (run)\netc.\n</code>\n</pre>\n", "senID": 1}], [{"text": ["use the inspect module."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["stack(context=1)\n    Return a list of records for the stack above the caller's frame."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I find it very helpful indeed."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["--Anonymous fool."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]