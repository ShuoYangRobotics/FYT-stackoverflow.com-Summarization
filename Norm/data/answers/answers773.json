[[{"text": ["After some experimentation, I've overcome my mental block.", "In retrospect, it's all obvious, but in the spirit of Stack Overflow, here's what I learned."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As Sebastjan said, you first have to sort your data.", "This is important."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The part I didn't get is that in the example construction"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n groups = []\nuniquekeys = []\nfor k, g in groupby(data, keyfunc):\n   groups.append(list(g))    # Store group iterator as a list\n   uniquekeys.append(k)\n</code>\n</pre>\n", "senID": 3}, {"text": ["\"k\" is the current grouping key, and \"g\" is an iterator that you can use to iterate over the group defined by that grouping key.", "In other words, the groupby iterator itself returns iterators.", "Here's an example of that, using clearer variable names:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from itertools import groupby\n\nthings = [(\"animal\", \"bear\"), (\"animal\", \"duck\"), (\"plant\", \"cactus\"), (\"vehicle\", \"speed boat\"), (\"vehicle\", \"school bus\")]\n\nfor key, group in groupby(things, lambda x: x[0]):\n    for thing in group:\n        print \"A %s is a %s.\" % (thing[1], key)\n    print \" \"\n</code>\n</pre>\n", "senID": 5}, {"text": ["This will give you the output:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["In this example, \"things\" is a list of tuples where the first item in each tuple is the group the second item belongs to.", "The groupby() function takes two arguments: (1) the data to group and (2) the function to group it with.", "Here, \"lambda x: x[0]\" tells groupby() to use the first item in each tuple as the grouping key."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["In the above \"for\" statement, groupby returns three (key, group iterator) pairs - once for each unique key.", "You can use the returned iterator to iterate over each individual item in that group."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Here's a slightly different example with the same data, using a list comprehension:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n for key, group in groupby(things, lambda x: x[0]):\n    listOfThings = \" and \".join([\"%s\" % thing[1] for thing in group])\n    print key + \"s:  \" + listOfThings + \".\"\n</code>\n</pre>\n", "senID": 10}, {"text": ["This will give you the output:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Python's pretty cool, no?"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"text": ["Can you show us your code? "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The example on the Python docs is quite straight forward:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n groups = []\n <br />\n uniquekeys = []\n <br />\n for k, g in groupby(data, keyfunc):\n <br />\n \u00a0 \u00a0 groups.append(list(g)) \u00a0 \u00a0 \u00a0# Store group iterator as a list\n <br />\n \u00a0 \u00a0 uniquekeys.append(k)\n <br />\n</code>\n</pre>\n", "senID": 2}, {"text": ["So in your case, data is a list of nodes, keyfunc is where the logic of your criteria function goes and then groupby() groups the data.", "You must be careful to sort the data by the criteria before you call groupby or it won't work.", "groupby method actually just iterates through a list and whenever the key changes it creates a new group. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "sort the data", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}], [{"text": ["A neato trick with groupby is run length encoding in one line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [(c,len(list(cgen))) for c,cs in groupby(some_string)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["will give you a list of 2-tuples where the first element is the char and the 2nd is the number of repetitions."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["A correction to answer by @nt:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [(c,len(list(cs))) for c,cs in groupby(some_string)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Thanks, the list(cs) part was what I was missing when trying to make use of the _grouper() objects returned by groupby().", "This example can be an elegant solution for generating Morris sequence."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "list(cs)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "_grouper()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "groupby()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Morris sequence", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ocf.berkeley.edu/~stoll/number_sequence.html"}]}], [{"text": ["@CaptSolo, I tried your example, but it didn't work."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import groupby \n[(c,len(list(cs))) for c,cs in groupby('Pedro Manoel')]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [('P', 1), ('e', 1), ('d', 1), ('r', 1), ('o', 1), (' ', 1), ('M', 1), ('a', 1), ('n', 1), ('o', 1), ('e', 1), ('l', 1)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["As you can see, there are two o's and two e's, but they got into separate groups.", "That's when I realized you need to sort the list passed to the groupby function.", "So, the correct usage would be:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n name = list('Pedro Manoel')\nname.sort()\n[(c,len(list(cs))) for c,cs in groupby(name)]\n</code>\n</pre>\n", "senID": 5}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n [(' ', 1), ('M', 1), ('P', 1), ('a', 1), ('d', 1), ('e', 2), ('l', 1), ('n', 1), ('o', 2), ('r', 1)]\n</code>\n</pre>\n", "senID": 7}, {"text": ["Just remembering, if the list is not sorted, the groupby funcion will not work!"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "will not work", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]