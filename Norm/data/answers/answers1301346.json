[[{"text": ["Single Underscore"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Variables in a class with a leading underscore are simply to indicate to other programmers that the variable should be private.", "However, nothing special is done with the variable itself."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Double Underscore (Name Mangling)"], "childNum": 0, "tag": "h2", "senID": 2, "childList": []}, {"text": ["From http://docs.python.org/tutorial/classes.html#private-variables:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://docs.python.org/tutorial/classes.html#private-variables", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#private-variables"}]}, {"text": ["And a warning from the same page:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Example"], "childNum": 0, "tag": "h2", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class MyClass():\n...     def __init__(self):\n...             self.__superprivate = \"Hello\"\n...             self._semiprivate = \", world!\"\n...\n&gt;&gt;&gt; mc = MyClass()\n&gt;&gt;&gt; print mc.__superprivate\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: myClass instance has no attribute '__superprivate'\n&gt;&gt;&gt; print mc._semiprivate\n, world!\n&gt;&gt;&gt; print mc.__dict__\n{'_myClass__superprivate': 'Hello', '_semiprivate': ', world!'}\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Excellent answers so far but some tidbits are missing.", "A single leading underscore isn't exactly JUST a convention: if you use from foobar import *, and module foobar does not define an __all__ list, the names imported from the module do NOT include those with a leading underscore.", "Let's say it's MOSTLY a convention, since this case is a pretty obscure corner;-)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "from foobar import *", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "foobar", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__all__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["The leading-underscore convention is widely used not just for PRIVATE names, but also for what C++ would call PROTECTED ones -- for example, names of methods that are fully intended to be overridden by subclasses (even ones that HAVE to be overridden since in the base class they raise NotImplementedError!-) are often single-leaading-underscore names to indicate to code using instances of that class (or subclasses) that said methods are not meant to be called directly."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "raise NotImplementedError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "using", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["For example, to make a thread-safe queue with a different queueing discipline than FIFO, one imports Queue, subclasses Queue.Queue, and overrides such methods as _get and _put; \"client code\" never calls those (\"hook\") methods, but rather the (\"organizing\") public methods such as put and get (this is known as the Template Method design pattern -- see e.g.", "here for an interesting presentation based on a video of a talk of mine on the subject, with the addition of synopses of the transcript)."], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "_get", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "_put", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "put", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "get", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Template Method", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Template%5Fmethod%5Fpattern"}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.catonmat.net/blog/learning-python-design-patterns-through-video-lectures/"}]}], [{"text": ["__foo__: this is just a convention, a way for the Python system to use names that won't conflict with user names."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__foo__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["_foo: this is just a convention, a way for the programmer to indicate that the variable is private (whatever that means in Python)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "_foo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["__foo: this has real meaning: the interpreter replaces this name with _classname__foo as a way to ensure that the name will not overlap with a similar name in another class."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "__foo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "_classname__foo", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["No other form of underscores have meaning in the Python world."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["There's no difference between class, variable, global, etc in these conventions."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Single leading underscores is a convention.", "there is no difference from the interpreter's point of view if whether names starts with a single underscore or not. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Double leading and trailing underscores are used for built-in methods, such as __init__, __bool__, etc."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__bool__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Double leading underscores w/o trailing counterparts are a convention too, however, the class methods will be mangled by the interpreter.", "For variables or basic function names no difference exists."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "mangled", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#private-variables"}]}], [{"text": ["Here's a great article on the subject: More than you need to know about double underscore methods"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "More than you need to know about double underscore methods", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.siafoo.net/article/57"}]}], [{"text": ["Your question is good, it is not only about methods.", "Functions and objects in modules are commonly prefixed with one underscore as well, and can be prefixed by two."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But __double_underscore names are not name-mangled in modules, for example.", "What happens is that names beginning with one (or more) underscores are not imported if you import all from a module (from module import *), nor are the names shown in help(module)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]