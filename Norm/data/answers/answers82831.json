[[{"text": ["Just to add to the answers - you're almost always better off using the "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "you're almost always better off", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n   open()\nexcept IOError as e:\n   print 'Oh dear.'\n</code>\n</pre>\n", "senID": 1}, {"text": ["approach."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["os.path.exists() only tells you that the file existed at that point.", "In the tiny interval between that and running code that depends on it, it is possible that someone will have created or deleted the file."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "os.path.exists()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This is a race condition that can often lead to security vulnerabilities.", "An attacker can create a symlink to an arbitrary file immediately after the program checks no file exists.", "This way arbitrary files can be read or overwritten with the privilege level your program runs with."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "race condition", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["You can also use "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os.path\nos.path.isfile(fname)\n</code>\n</pre>\n", "senID": 1}, {"text": ["if you need to be sure it's a file."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You have the os.path.exists function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os.path\nos.path.exists(file_path)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Unlike isfile(), exists() will yield True for directories.", "So depending if you want only plain files or also directories, you'll use isfile() or exists()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print os.path.isfile(\"/etc/passwd\")\nTrue\n&gt;&gt;&gt; print os.path.isfile(\"/etc\")\nFalse\n&gt;&gt;&gt; print os.path.isfile(\"/does/not/exist\")\nFalse\n&gt;&gt;&gt; print os.path.exists(\"/etc/passwd\")\nTrue\n&gt;&gt;&gt; print os.path.exists(\"/etc\")\nTrue\n&gt;&gt;&gt; print os.path.exists(\"/does/not/exist\")\nFalse\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Prefer the try/catch.", "It's considered better style and avoids race conditions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Don't take my word for it.", "There's plenty of support for this theory.", "Here's a couple:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Style: Section \"Handling unusual conditions\" of ", "tag": "none", "senID": 2}, {"text": "Race condition: ", "tag": "none", "senID": 3}]}], [{"text": ["os.path.exists(filename)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Additionally, os.access()."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.access()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You could try this: (safer)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    fh = open('whatever.txt')\nexcept IOError as e:\n    print(\"({})\".format(e))\n</code>\n</pre>\n", "senID": 1}, {"text": ["the ouput would be:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["then, depending on try/except result your program can just keep running from there or you can code to stop it if you want.", "The print statement print(\"({})\".format(e)) is for Pythonv3.2 only.", "For v3.1 use {0}."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Just to add to the confusion, it seems that the try: open() approach suggested above doesn't work in Python, as file access isn't exclusive, not even when writing to files, c.f.", "What is the best way to open a file for exclusive access in Python?."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "What is the best way to open a file for exclusive access in Python?", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/186202/what-is-the-best-way-to-open-a-file-for-exclusive-access-in-python"}]}], [{"text": ["@if os.path.exists(filename):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n root,dirs,files = os.walk(LOCATION).next()\nif myfile in files:\n   print \"yes it exists\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["This is helpful when checking for several files.", "Or you want to do a set intersection/ subtraction with an existing list."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You could try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["while(True):\n                if os.path.exists(\"path\\to\\file.jpeg\"):\n                    break"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["or to avoid always checking put a sleep condition"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["import time"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["while os.path.exists(fname) == False:\n    time.sleep(10)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]