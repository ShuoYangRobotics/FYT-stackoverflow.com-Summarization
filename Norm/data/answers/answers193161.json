[[{"text": ["Doesn't too much matter.", "Whatever makes you happy will work.", "There aren't a lot of silly rules because Python projects can be simple."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": ["/scripts"], "childNum": 0, "tag": "code", "senID": 1, "childList": []}, {"text": ["/tests"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}, {"text": ["/lib"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}, {"text": ["/doc"], "childNum": 0, "tag": "code", "senID": 4, "childList": []}, {"text": ["/apidoc"], "childNum": 0, "tag": "code", "senID": 5, "childList": []}]}, {"text": ["And the top-level directory can contain README's, Config's and whatnot."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The hard choice is whether or not to use a /src tree.", "Python doesn't have a distinction between /src, /lib, and /bin like Java or C has."], "childNum": 4, "tag": "p", "senID": 7, "childList": [{"text": "/src", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "/src", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "/lib", "childNum": 0, "tag": "code", "childList": []}, {"text": "/bin", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Since a top-level /src directory is seen by some as meaningless, your top-level directory can be the top-level architecture of your application."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "/src", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["/foo"], "childNum": 0, "tag": "code", "senID": 9, "childList": []}, {"text": ["/bar"], "childNum": 0, "tag": "code", "senID": 10, "childList": []}, {"text": ["/baz"], "childNum": 0, "tag": "code", "senID": 11, "childList": []}]}, {"text": ["I recommend putting all of this under the \"name-of-my-product\" directory.", "So, if you're writing an application named quux, the directory that contains all this stuff is named  /quux."], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "quux", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "/quux", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Another project's PYTHONPATH, then, can include /path/to/quux/foo to reuse the QUUX.foo module.  "], "childNum": 3, "tag": "p", "senID": 13, "childList": [{"text": "PYTHONPATH", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "/path/to/quux/foo", "childNum": 0, "tag": "code", "childList": []}, {"text": "QUUX.foo", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In my case, since I use Komodo Edit, my IDE cuft is a single .KPF file.", "I actually put that in the top-level /quux directory, and omit adding it to SVN."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "/quux", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["http://jcalderone.livejournal.com/39794.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://jcalderone.livejournal.com/39794.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jcalderone.livejournal.com/39794.html"}]}, {"text": ["This is the answer commonly given in #python on Freenode."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Using the reference at http://jcalderone.livejournal.com/39794.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://jcalderone.livejournal.com/39794.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jcalderone.livejournal.com/39794.html"}]}, {"code": "<pre>\n<code>\n Project/\n|-- bin/\n|   |-- project\n|\n|-- project/\n|   |-- test/\n|   |   |-- __init__.py\n|   |   |-- test_main.py\n|   |   \n|   |-- __init__.py\n|   |-- main.py\n|\n|-- setup.py\n|-- README\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Non-python data is best bundled inside your Python modules using the package_data support in setuptools.", "One thing I strongly recommend is using namespace packages to create shared namespaces which multiple projects can use -- much like the Java convention of putting packages in com.yourcompany.yourproject (and being able to have a shared com.yourcompany.utils namespace)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "package_data", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "setuptools", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://peak.telecommunity.com/DevCenter/setuptools"}, {"text": "com.yourcompany.yourproject", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "com.yourcompany.utils", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Re branching and merging, if you use a good enough source control system it will handle merges even through renames; Bazaar is particularly good at this."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Bazaar", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.bazaar-vcs.org/"}]}, {"text": ["Contrary to some other answers here, I'm +1 on having a src directory top-level (with doc and test directories alongside).", "Specific conventions for documentation directory trees will vary depending on what you're using; Sphinx, for instance, has its own conventions which its quickstart tool supports."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "src", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "doc", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "test", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://sphinx.pocoo.org/", "text": "Sphinx", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Please, please leverage setuptools and pkg_resources; this makes it much easier for other projects to rely on specific versions of your code (and for multiple versions to be simultaneously installed with different non-code files, if you're using package_data)."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "package_data", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It's worth reading through Python's documentation on packaging, too."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/tutorial/modules.html#packages"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/tutorial/modules.html#packages", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html#packages"}]}, {"text": ["Also make sure you're familiar with the rest of the information on that page."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["In my experience, it's just a matter of iteration.", "Put your data and code wherever you think they go.", "Chances are, you'll be wrong anyway.", "But once you get a better idea of exactly how things are going to shape up, you're in a much better position to make these kinds of guesses."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As far as extension sources, we have a Code directory under trunk that contains a directory for python and a directory for various other languages.", "Personally, I'm more inclined to try putting any extension code into its own repository next time around."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["With that said, I go back to my initial point:  don't make too big a deal out of it.", "Put it somewhere that seems to work for you.", "If you find something that doesn't work, it can (and should) be changed."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["What do you think about using the top level folder (quux in an example above) for the code created by the developers and then have one folder for everything else to make it clear that it is not python-related source?", "Say extras or nonsrc for example?", "--dh"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]