[[{"text": ["Note that best practice in current versions of Python is to use new-style classes, i.e."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "new-style", "childNum": 0, "tag": "i", "pos": 0, "childList": []}]}, {"code": "<pre>\nclass Foo(object):\n    ...\n</pre>\n", "senID": 1}, {"text": ["Also, there's a difference between an 'object' and a 'class'.", "To build a dictionary from an arbitrary object, it's sufficient to use __dict__.", "Usually, you'll declare your methods at class level and your attributes at instance level, so __dict__ should be fine.", "For example:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "object", "childNum": 0, "tag": "i", "pos": 0, "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n>>> class A(object):\n...   def __init__(self):\n...     self.b = 1\n...     self.c = 2\n...   def do_nothing(self):\n...     pass\n...\n>>> a = A()\n>>> a.__dict__\n{'c': 2, 'b': 1}\n</pre>\n", "senID": 3}, {"text": ["Alternatively, depending on what you want to do, it might be nice to inherit from dict.", "Then your class is already a dictionary, and if you want you can override getattr and/or setattr to call through and set the dict.", "For example:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "already", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\nclass Foo(dict):\n    def __init__(self):\n        pass\n    def __getattr__(self, attr):\n        return self[attr]\n\n    # etc...\n</pre>\n", "senID": 5}], [{"text": ["The dir builtin will give you all the object's attributes, including special methods like __str__, __dict__ and a whole bunch of others which you probably don't want.", "But you can do something like:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "dir", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__str__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Foo(object):\n...     bar = 'hello'\n...     baz = 'world'\n...\n&gt;&gt;&gt; f = Foo()\n&gt;&gt;&gt; [name for name in dir(f) if not name.startswith('__')]\n[ 'bar', 'baz' ]\n&gt;&gt;&gt; dict((name, getattr(f, name)) for name in dir(f) if not name.startswith('__')) \n{ 'bar': 'hello', 'baz': 'world' }\n</code>\n</pre>\n", "senID": 1}, {"text": ["So can extend this to only return data attributes and not methods, by defining your props function like this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "props", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import inspect\n\ndef props(obj):\n    pr = {}\n    for name in dir(obj):\n        value = getattr(obj, name)\n        if not.name.startswith('__') and not inspect.ismethod(value):\n            pr[name] = value\n    return pr\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I've settled with a combination of both answers:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict((key, value) for key, value in f.__dict__.iteritems() \n    if not callable(value) and not key.startswith('__'))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This misses attributes that the object inherits from its class.", "For example,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class c(object):\n    x = 3\na = c()\n</code>\n</pre>\n", "senID": 1}, {"text": ["hasattr(a, 'x') is true, but 'x' does not appear in a.__dict__"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Is there a way to exclude methods from the solution posted above?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The \"if not callable(...)\" filter does exclude methods."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "does", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]]