[[{"text": ["SQLAlchemy is more full-featured and powerful (uses the DataMapper pattern).", "Django ORM has a cleaner syntax and is easier to write for (ActiveRecord pattern).", "I don't know about performance differences."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["SQLAlchemy also has a declarative layer that hides some complexity and gives it a ActiveRecord-style syntax more similar to the Django ORM."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "declarative layer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/docs/orm/extensions/declarative.html"}]}, {"text": ["I wouldn't worry about Django being \"too heavy.", "\"  It's decoupled enough that you can use the ORM if you want without having to import the rest."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["That said, if I were already using CherryPy for the web layer and just needed an ORM, I'd probably opt for SQLAlchemy."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I usually use SQLAlchemy.", "It's pretty powerful and is probably the most mature python ORM."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SQLAlchemy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/"}]}, {"text": ["If you're planning on using CherryPy, you might also look into dejavu as it's by Robert Brewer (the guy that is the current CherryPy project leader).", "I personally haven't used it, but I do know some people that love it."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "dejavu", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.aminus.net/dejavu"}]}, {"text": ["SQLObject is a little bit easier to use ORM than SQLAlchemy, but it's not quite as powerful."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "SQLObject", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sqlobject.org"}]}, {"text": ["Personally, I wouldn't use the Django ORM unless I was planning on writing the entire project in Django, but that's just me."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Storm has arguably the simplest API:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Storm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://storm.canonical.com/"}]}, {"code": "<pre>\n<code>\n class Foo:\n      __storm_table__ 'foos'\n      id = Int(primary=True)\n\n\n  class Thing:\n      __storm_table__ 'things'\n      id = Int(primary=True)\n      name = Unicode()\n      description = Unicode()\n      foo_id = Int()\n      foo = Reference(foo_id, Foo.id)\n\n  db = create_database('sqlite:')\n  store = Store(db)\n\n  foo = Foo()\n  store.add(foo)\n  thing = Thing()\n  thing.foo = foo\n  store.add(thing)\n  store.commit()\n</code>\n</pre>\n", "senID": 1}, {"text": ["And it makes it painless to drop down into raw SQL when you need to:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n store.execute('UPDATE bars SET bar_name=? WHERE bar_id like ?', []) \nstore.commit()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["SQLAlchemy's declarative extension, which is becoming standard in 0.5, provides an all in one interface very much like that of Django or Storm.", "It also integrates seamlessly with classes/tables configured using the datamapper style:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "declarative", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/docs/05/reference/ext/declarative.html?highlight=declarative#module-sqlalchemy.ext.declarative"}]}, {"code": "<pre>\n<code>\n Base = declarative_base()\n\nclass Foo(Base):\n      __tablename__ 'foos'\n      id = Column(Integer, primary_key=True)\n\nclass Thing(Base):\n    __tablename__ = 'things'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(Unicode)\n    description = Column(Unicode)\n    foo_id = Column(Integer, ForeignKey('foos.id'))\n    foo = relation(Foo)\n\nengine = create_engine('sqlite://')\n\nBase.metadata.create_all(engine)  # issues DDL to create tables\n\nsession = sessionmaker(bind=engine)()\n\nfoo = Foo()\nsession.add(foo)\nthing = Thing(name='thing1', description='some thing')\nthing.foo = foo  # also adds Thing to session\nsession.commit()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["We use Elixir alongside SQLAlchemy and have liked it so far.", "Elixir puts a layer on top of SQLAlchemy that makes it look more like the \"ActiveRecord pattern\" counter parts."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Elixir", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://elixir.ematia.de/trac/wiki"}]}], [{"text": ["I think you might look at:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Autumn"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Autumn", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://autumn-orm.org/"}]}, {"text": ["Storm"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Storm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://storm.canonical.com/"}]}], [{"text": ["SQLAlchemy is very, very powerful.", "However it is not thread safe make sure you keep that in mind when working with cherrypy in thread-pool mode. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There is no conceivable way that the unused features in Django will give a performance penalty.", "Might just come in handy if you ever decide to upscale the project."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I used Storm + SQLite for a small project, and was pretty happy with it until I added multiprocessing.", "Trying to use the database from multiple processes resulted in a \"Database is locked\" exception.", "I switched to SQLAlchemy, and the same code worked with no problems."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This seems to be the canonical reference point for high-level database interaction in Python:\nhttp://wiki.python.org/moin/HigherLevelDatabaseProgramming"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://wiki.python.org/moin/HigherLevelDatabaseProgramming", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/HigherLevelDatabaseProgramming"}]}, {"text": ["From there, it looks like Dejavu implements Martin Fowler's DataMapper pattern fairly abstractly in Python."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Dejavu", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.aminus.net/dejavu"}]}], [{"text": ["If you're looking for lightweight and are already familiar with django-style declarative models, check out peewee:\nhttp://charlesleifer.com/docs/peewee/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://charlesleifer.com/docs/peewee/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://charlesleifer.com/docs/peewee/"}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Blog(Model):\n    name = CharField()\n\nclass Entry(Model):\n    blog = ForeignKeyField(Blog)\n    title = CharField()\n    body = TextField()\n    pub_date = DateTimeField(default=datetime.datetime.now)\n\n# query it like django\nEntry.filter(blog__name='Some great blog')\n\n# or programmatically for finer-grained control\nEntry.select().join(Blog).where(name='Some awesome blog')\n</code>\n</pre>\n", "senID": 2}, {"text": ["Check the docs for more examples"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I'd check out SQLAlchemy "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SQLAlchemy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/"}]}, {"text": ["It's really easy to use and the models you wrok with aren't bad at all."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Django uses sqlalchemy for it's ORM but using it by itself lets you use it's full power"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["here's a small example on creating and selecting orm objects"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ed_user = User('ed', 'Ed Jones', 'edspassword')\n&gt;&gt;&gt; session.add(ed_user)\n&gt;&gt;&gt; our_user = session.query(User).filter_by(name='ed').first() \n&gt;&gt;&gt; our_user\n    &lt;User('ed','Ed Jones', 'edspassword')&gt;\n</code>\n</pre>\n", "senID": 4}]]