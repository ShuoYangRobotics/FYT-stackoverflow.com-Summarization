[[{"text": ["There is an ordered set recipe for this which is referred to from the Python Documentation.", "This runs on Py2.6 or later and 3.0 or later without any modifications.", "The interface is exactly the same as a normal set, except that initialisation should be done with a list."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ordered set", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/576694/"}, {"text": "Python Documentation", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html"}]}, {"code": "<pre>\n<code>\n OrderedSet([1, 2, 3])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["An ordered set is functionally a special case of an ordered dictionary."], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The keys of a dictionary are unique.", "Thus, if one disregards the values in an ordered dictionary (e.g.", "by assigning them None), then one has essentially an ordered set."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["As of Python 3.1 there is collections.OrderedDict.", "The following is an example implementation of an OrderedSet.", "(Note that only few methods need to be defined or overridden: collections.OrderedDict and collections.MutableSet do the heavy lifting."], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "As of Python 3.1", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/3.1/whatsnew/3.1.html"}, {"text": "collections.OrderedDict", "tag": "a", "pos": 2, "childList": [{"text": "collections.OrderedDict", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/dev/py3k/library/collections.html#collections.OrderedDict"}, {"text": "collections.OrderedDict", "childNum": 0, "tag": "code", "childList": []}, {"text": "collections.OrderedDict", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/3.1/library/collections.html#abcs-abstract-base-classes", "text": "collections.MutableSet", "childNum": 1, "tag": "a", "childList": [{"text": "collections.MutableSet", "tag": "code"}]}, {"text": "collections.MutableSet", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import collections\n\nclass OrderedSet(collections.OrderedDict, collections.MutableSet):\n\n    def update(self, *args, **kwargs):\n        if kwargs:\n            raise TypeError(\"update() takes no keyword arguments\")\n\n        for s in args:\n            for e in s:\n                 self.add(e)\n\n    def add(self, elem):\n        self[elem] = None\n\n    def discard(self, elem):\n        self.pop(elem, None)\n\n    def __le__(self, other):\n        return all(e in other for e in self)\n\n    def __lt__(self, other):\n        return self &lt;= other and self != other\n\n    def __ge__(self, other):\n        return all(e in self for e in other)\n\n    def __gt__(self, other):\n        return self &gt;= other and self != other\n\n    def __repr__(self):\n        return 'OrderedSet([%s])' % (', '.join(map(repr, self.keys())))\n\n    def __str__(self):\n        return '{%s}' % (', '.join(map(repr, self.keys())))\n\n    difference = property(lambda self: self.__sub__)\n    difference_update = property(lambda self: self.__isub__)\n    intersection = property(lambda self: self.__and__)\n    intersection_update = property(lambda self: self.__iand__)\n    issubset = property(lambda self: self.__le__)\n    issuperset = property(lambda self: self.__ge__)\n    symmetric_difference = property(lambda self: self.__xor__)\n    symmetric_difference_update = property(lambda self: self.__ixor__)\n    union = property(lambda self: self.__or__)\n</code>\n</pre>\n", "senID": 3}]]