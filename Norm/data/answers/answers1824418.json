[[{"text": ["Twisted is complex, you're right about that.", "Twisted is not bloated. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["If you take a look here: http://twistedmatrix.com/trac/browser/trunk/twisted you'll find an organized, comprehensive, and very well tested suite of many protocols of the internet, as well as helper code to write and deploy very sophisticated network applications.", "I wouldn't confuse bloat with comprehensiveness."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "http://twistedmatrix.com/trac/browser/trunk/twisted", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/trac/browser/trunk/twisted/"}, {"text": "many", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["It's well known that the Twisted documentation isn't the most user-friendly from first glance, and I believe this turns away an unfortunate number of people.", "But Twisted is amazing (IMHO) if you put in the time.", "I did and it proved to be worth it, and I'd recommend to others to try the same."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I liked the concurrence Python module which relies on either Stackless Python microthreads or Greenlets for light-weight threading.", "All blocking network I/O is transparently made asynchronous through a single libevent loop, so it should be nearly as efficient as an real asynchronous server."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "concurrence", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://opensource.hyves.org/concurrence/"}, {"text": "libevent", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I suppose it's similar to Eventlet in this way."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The downside is that its API is quite different from Python's sockets/threading modules; you need to rewrite a fair bit of your application (or write a compatibility shim layer)"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "sockets", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "threading", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit: It seems that there's also cogen, which is similar, but uses Python 2.5's enhanced generators for its coroutines, instead of Greenlets.", "This makes it more portable than concurrence and other alternatives.", "Network I/O is done directly with epoll/kqueue/iocp."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "cogen", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/cogen/"}, {"text": "enhanced generators", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["gevent is eventlet cleaned up."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "gevent", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.gevent.org"}, {"href": "http://blog.gevent.org/2010/02/27/why-gevent/", "text": "eventlet cleaned up", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["API-wise it follows the same conventions as the standard library (in particular, threading and multiprocessing modules) where it makes sense.", "So you have familiar things like Queue and Event to work with."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Queue", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.gevent.org/gevent.queue.html"}, {"href": "http://www.gevent.org/gevent.event.html#gevent.event.Event", "text": "Event", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["It only supports libevent (update: libev since 0.14) as reactor implementation but takes full advantage of it, featuring a fast WSGI server based on libevent-http and resolving DNS queries through libevent-dns as opposed to using a thread pool like most other libraries do."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "libevent", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.monkey.org/~provos/libevent/"}, {"text": "update:", "childNum": 0, "tag": "strong", "childList": []}, {"href": "http://blog.gevent.org/2011/04/28/libev-and-libevent/", "text": "libev since 0.14", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Like eventlet, it makes the callbacks and Deferreds unnecessary by using greenlets."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "greenlets", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/py/0.9.2/greenlet.html"}]}, {"text": ["Check out the examples: concurrent download of multiple urls, long polling webchat."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "concurrent download of multiple urls", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bitbucket.org/denis/gevent/src/tip/examples/concurrent_download.py#cl-4"}, {"href": "http://blog.gevent.org/2009/10/10/simpler-long-polling-with-django-and-gevent/", "text": "long polling webchat", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["A really interesting comparison of such frameworks was compiled by Nicholas Pi\u00ebl on his blog: it's well worth a read!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "interesting comparison", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nichol.as/asynchronous-servers-in-python"}]}], [{"text": ["Kamaelia hasn't been mentioned yet.", "Its concurrency model is based on wiring together components with message passing between inboxes and outboxes.", "Here's a brief overview."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Kamaelia", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.kamaelia.org/Home"}, {"text": "Here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.kamaelia.org/About"}]}], [{"text": ["None of these solutions will avoid that fact that the GIL prevents CPU parallelism - they are just better ways of getting IO parallelism that you already have with threads.", "If you think you can do better IO, by all means pursue one of these, but if your bottleneck is in processing the results nothing here will help except for the multiprocessing module.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I wouldn't go as far as to call Twisted bloated, but it is difficult to wrap your head around.", "I avoided really settling in an learn for quite a while as I always wanted something a little easier for 'small tasks'. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, now that I have worked with it some more I have to say having all the batteries included is VERY nice."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["All the other async libraries I've worked with end being way less mature than they even appear.", "Twisted's event loop is solid. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I'm not quite sure how to solve the steep Twisted learning curve.", "It might help if someone would fork it and clean a few things up, like removing all the backwards compatability cruft and the dead projects.", "But that's the nature of mature software I guess."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Anyone thinking about high performance servers should watch the Node.js video from jsconf.eu.", "It has a wonderful description of the problems in current servers and how we think about the problem.", "Indeed, with the problem of how IO is taught."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The movie: Ryan Dahl at jsconf.eu "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "jsconf.eu", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jsconf.eu/2009/video%5Fnodejs%5Fby%5Fryan%5Fdahl.html"}]}, {"text": ["The site: nodejs.org"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "nodejs.org", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nodejs.org/"}]}, {"text": ["Willison's weblog about Node.js"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Node.js", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://simonwillison.net/2009/Nov/23/node/"}]}, {"text": ["This is nothing short than a rethinking of high performance servers.", "Designed for IRC, HTTP, long-polling Comet, etc.", "No blocking calls.", "None."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "rethinking", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["(The movie is a classic.", "The hand-drawn \"NIKE\" shirt really puts it over the top.", "As Tim Bray said of the video, \"Um, wow.", "\") Dahl is now one of my programming heroes."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "\"Um, wow.\"", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://twitter.com/timbray/status/6195768232"}]}], [{"text": ["There is a good book on the subject: \"Twisted Network Programming Essentials\", by Abe Fettig.", "The examples show how to write very Pythonic code, and to me personally, do not strike me as  based on a bloated framework.", "Look at the solutions in the book, if they aren't clean, then I don't know what clean means. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["My only enigma is the same I have with other frameworks, like Ruby.", "I worry, does it scale up?", "I would hate to commit a client to  a framework that is going to have scalability problems."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["@rhettg  (sorry I dont't have enough reputation to comment on it)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I've started to use twisted for some things.", "The beauty of it almost is because it's \"bloated.", "\"  There are connectors for just about any of the main protocols out there.", "You can have a jabber bot that will take commands and post to an irc server, email them to someone, run a command, read from an NNTP server, and monitor a web page for changes.", "The bad news is it can do all of that and can make things overly complex for simple tasks like the OP explained.", "The advantage of python though is you only include what you need.", "So while the download may be 20mb, you may only include 2mb of libraries (which is still a lot).", "My biggest complaint with twisted is although they include examples, anything beyond a basic tcp server you're on your own.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["While not a python solution, I've seen node.js gain a lot more traction as of late.", "In fact I've considered looking into it for smaller projects but I just cringe when I hear javascript :)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Whizzer is a tiny asynchronous socket framework that uses pyev.", "Its very fast, primarily because of pyev.", "It attempts to provide a similiar interface as twisted with some slight changes."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Whizzer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bitbucket.org/bfrog/whizzer"}]}], [{"text": ["I Confirm the goodness of syncless.", "It can use libev (the newer, cleaner and better performance version of libevent).", "Some times ago it doesn't has as much support as libevent has, but now the development process go further and is very useful."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "syncless", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Also try Syncless.", "It's coroutine-based (so it's similar to Concurrence, Eventlet and gevent).", "It implements drop-in non-blocking replacements for socket.socket, socket.gethostbyname (etc.", "), ssl.SSLSocket, time.sleep and select.select.", "It's fast.", "It needs Stackless Python and libevent.", "It contains a mandatory Python extension written in C (Pyrex/Cython)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Syncless", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/syncless/"}]}]]