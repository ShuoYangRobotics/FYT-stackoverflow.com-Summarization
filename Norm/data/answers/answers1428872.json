[[{"text": ["Well, I am a bit curious, so I just tested the 3 myself right after asking the question ;-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Ok, this is not a very serious review but here is what I can say :"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I tried the tools with the default settings (it's important because you can pretty much choose your check rules) on the following script :"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "with the default settings", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/local/bin/python\n# by Daniel Rosengren modified by e-satis\n\nimport sys, time\nstdout = sys.stdout\n\nBAILOUT = 16\nMAX_ITERATIONS = 1000\n\nclass Iterator(object) :\n\n    def __init__(self):\n\n        print 'Rendering...'\n        for y in xrange(-39, 39): \n            stdout.write('\\n')\n            for x in xrange(-39, 39):\n                if self.mandelbrot(x/40.0, y/40.0) :\n                    stdout.write(' ')\n                else:\n                    stdout.write('*')\n\n\n    def mandelbrot(self, x, y):\n        cr = y - 0.5\n        ci = x\n        zi = 0.0\n        zr = 0.0\n\n        for i in xrange(MAX_ITERATIONS) :\n            temp = zr * zi\n            zr2 = zr * zr\n            zi2 = zi * zi\n            zr = zr2 - zi2 + cr\n            zi = temp + temp + ci\n\n            if zi2 + zr2 &gt; BAILOUT:\n                return i\n\n        return 0\n\nt = time.time()\nIterator() \nprint '\\nPython Elapsed %.02f' % (time.time() - t)\n</code>\n</pre>\n", "senID": 3}, {"text": ["As a result :"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "As a result :", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "PyChecker is troublesome because it compiles the module to analyze it. If you don't want your code to run (e.g, it performs a SQL query), that's bad.", "tag": "none", "senID": 5}, {"text": "PyFlakes is supposed to be lite. Indeed, it decided that the code was perfect. I am looking for something quite severe so I don't think I'll go for it.", "tag": "none", "senID": 6}, {"text": "PyLint has been very talkative and rated the code 3/10 (OMG, I'm a dirty coder !).", "tag": "none", "senID": 7}]}, {"text": ["Strongs points :"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Strongs points :", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "Very descriptive and accurate report.", "tag": "none", "senID": 9}, {"text": "Detect some code smells. Here it told me to drop my class to write something with functions because the OO approach was useless in this specific case. Something I knew, but never expected a computer to tell me :-p", "tag": "none", "senID": 10}, {"text": "The fully corrected code run faster (no class, no reference binding...).", "tag": "none", "senID": 11}, {"text": "Made by a French team. Ok it's not a plus for everybody, but I like it ;-)", "tag": "none", "senID": 12}]}, {"text": ["Cons :"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "Cons :", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "Some rules are really strict. I know that you can change it and that the default is to match PEP 8, but is it such a crime to write 'for x in seq' ? Apparently yes because you can't write a variable name with less than 3 letters. I will change that.", "tag": "none", "senID": 14}, {"text": "Very very talkative. Be ready to use your eyes.", "tag": "none", "senID": 15}]}, {"text": ["Corrected script (with lazy doc strings and variable names) :"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/local/bin/python\n# by Daniel Rosengren, modified by e-satis\n\"\"\"\nModule doctring\n\"\"\"\n\n\nimport time\nfrom sys import stdout\n\nBAILOUT = 16\nMAX_ITERATIONS = 1000\n\ndef mandelbrot(dim_1, dim_2):\n    \"\"\"\n    function doc string\n    \"\"\"\n    cr1 = dim_1 - 0.5\n    ci1 = dim_2\n    zi1 = 0.0\n    zr1 = 0.0\n\n    for i in xrange(MAX_ITERATIONS) :\n        temp = zr1 * zi1\n        zr2 = zr1 * zr1\n        zi2 = zi1 * zi1\n        zr1 = zr2 - zi2 + cr1\n        zi1 = temp + temp + ci1\n\n        if zi2 + zr2 &gt; BAILOUT:\n            return i\n\n    return 0\n\ndef execute() :\n    \"\"\"\n    func doc string\n    \"\"\"\n    print 'Rendering...'\n    for dim_1 in xrange(-39, 39): \n        stdout.write('\\n')\n        for dim_2 in xrange(-39, 39):\n            if mandelbrot(dim_1/40.0, dim_2/40.0) :\n                stdout.write(' ')\n            else:\n                stdout.write('*')\n\n\nSTART_TIME = time.time()\nexecute()\nprint '\\nPython Elapsed %.02f' % (time.time() - START_TIME)\n</code>\n</pre>\n", "senID": 17}, {"text": ["EDIT :"], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "EDIT :", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Thanks to Rudiger Wolf, I discovered pep8 that does exactly what is name suggests : matching the pep8.", "It has found found several syntax pep no-no that PyLint did not.", "But PyLint found stuff that were not specifically linked to PEP8 but interesting.", "Both tools are interesting and complementary."], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"text": ["Eventually I will use both since there are really easy to install (via packages or setuptools) and output text so easy to chain."], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"text": ["To give you a little idea of their ouput :"], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"text": ["pep8 :"], "childNum": 1, "tag": "p", "senID": 22, "childList": [{"text": "pep8", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ./python_mandelbrot.py:4:11: E401 multiple imports on one line\n./python_mandelbrot.py:10:1: E302 expected 2 blank lines, found 1\n./python_mandelbrot.py:10:23: E203 whitespace before ':'\n./python_mandelbrot.py:15:80: E501 line too long (108 characters)\n./python_mandelbrot.py:23:1: W291 trailing whitespace\n./python_mandelbrot.py:41:5: E301 expected 1 blank line, found 3\n</code>\n</pre>\n", "senID": 23}, {"text": ["PyLint :"], "childNum": 0, "tag": "p", "senID": 24, "childList": []}, {"code": "<pre>\n<code>\n ************* Module python_mandelbrot\nC: 15: Line too long (108/80)\nC: 61: Line too long (85/80)\nC:  1: Missing docstring\nC:  5: Invalid name \"stdout\" (should match (([A-Z_][A-Z0-9_]*)|(__.*__))$)\nC: 10:Iterator: Missing docstring\nC: 15:Iterator.__init__: Invalid name \"y\" (should match [a-z_][a-z0-9_]{2,30}$)\nC: 17:Iterator.__init__: Invalid name \"x\" (should match [a-z_][a-z0-9_]{2,30}$)\n\n[...] and a very long report with useful stats like :\n\nDuplication\n-----------\n\n+-------------------------+------+---------+-----------+\n|                         |now   |previous |difference |\n+=========================+======+=========+===========+\n|nb duplicated lines      |0     |0        |=          |\n+-------------------------+------+---------+-----------+\n|percent duplicated lines |0.000 |0.000    |=          |\n+-------------------------+------+---------+-----------+\n</code>\n</pre>\n", "senID": 25}], [{"text": ["A few days ago pep8 was added added to PyPi."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "pep8 - Python style guide checker", "tag": "none", "senID": 1}, {"text": "pep8 is a tool to check your Python code against some of the style conventions in PEP 8.", "tag": "none", "senID": 2}]}, {"text": ["It is now super easy to check you code against pep8."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["See http://pypi.python.org/pypi/pep8"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://pypi.python.org/pypi/pep8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/pep8"}]}]]