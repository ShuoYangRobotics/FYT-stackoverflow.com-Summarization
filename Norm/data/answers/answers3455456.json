[[{"text": ["I've been building tools (DMS Software Reengineering Toolkit) to do this kind of thing since 1995, supported by a strong team of computer scientists.", "It provides generic parsing, AST building, symbol tables, control and data flow analysis, application of translation rules, regeneration of source text with comments, etc., all parameterized by explicit definitions of computer languages."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "building tools (DMS Software Reengineering Toolkit)", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.semanticdesigns.com/Products/DMS/DMSToolkit.html"}]}, {"text": ["The amount of machinery you need to do this well is vast, and then you need reliable parsers for langauges with unreliable definitions (PHP is perfect example of this)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "well", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["There's nothing wrong with you thinking about it or attempting it, but I think you'll find this a much bigger task than you expect.", "We have some 100 man-years invested in just DMS, and another 6-12 months in each \"reliable\" language definition (including the one we painfully built for PHP), much more for nasty languages such as C++.", "It will be a \"hell of a learning experience\"; it has been for us.", "(You might find the technical Papers section at the above website interesting to jump start that learning)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["People often attempt to build some kind of generalized machinery by starting with some piece of technology with which they are familiar, that does a part of the job.", "(Python ASTs are great example).", "The good news, is that part of the job is done.", "The bad news is that machinery has a zillion assumptions built into it, most of which you won't discover until you try to wrestle it into doing something else.", "At that point you find out the machinery is wired to do what it originally does, and will really, really resist your attempt to make it do something else.", "(I suspect trying to get the Python AST to model PHP is going to be a lot of fun)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The reason I started to build DMS originally was to build foundations that had very few such assumptions built in.", "It has some that give us headaches.", "So far, no black holes.", "(The hardest part of my job over the last 15 years is to try to prevent such assumptions from creeping in)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Lots of folks also make the mistake of assuming that if they can parse (and perhaps get an AST), they are well on the way to doing something complicated.", "One of the hard lessons is that you need symbol tables and flow analysis to do good program analysis or transformation.", "ASTs are necessary but not sufficient.", "This is the reason that Aho&amp;Ullman's compiler book doesn't stop at chapter 2.", "(The OP has this right in that he is planning to build additional machinery beyond the AST)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["The remark about \"I don't need a perfect translation\" is troublesome.", "What weak translators do is convert the \"easy\" 80% of the code, leaving the hard 20% to do by hand.", "If the applications you intend to convert are pretty small, well, then that 20% is OK.", "If you attempt to convert 100K SLOC then 20% is 20,000 original lines of code that are hard to translate to understand and modify in the context of another 80,000 lines of program you don't understand.", "That takes a huge amount of effort.", "At the million line level, this is simply impossible in practice."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["What you have to shoot for to translate large-scale systems is high nineties percentage  conversion rates, or it is likely that you can't complete the manual part of the translation activity."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I consider our tools to be extremely good (but then, I'm pretty biased).", "And it is still very hard to build a good translator.", "The difference is that with this much machinery, we succeed considerably more often than we fail."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "succeed", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.semdesigns.com/Products/Services/NorthropGrummanB2.html"}]}], [{"text": ["My answer will address the specific task of parsing Python in order to translate it to another language, and not the higher-level aspects which Ira addressed well in his answer."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In short: do not use the parser module, there's an easier way."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "do not use the parser module, there's an easier way.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The ast module, available since Python 2.6 is much more suitable for your needs, since it gives you a ready-made AST to work with.", "I've written an article on this last year, but in short, use the parse method of ast to parse Python source code into an AST.", "The parser module will give you a parse tree, not an AST.", "Be wary of the difference. "], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "ast", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "article on this", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://eli.thegreenplace.net/2009/11/28/python-internals-working-with-python-asts/"}, {"text": "parse", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "ast", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "parser", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Be wary of the difference", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://eli.thegreenplace.net/2009/02/16/abstract-vs-concrete-syntax-trees/"}]}, {"text": ["Now, since Python's ASTs are quite detailed, given an AST the front-end job isn't terribly hard.", "I suppose you can have a simple prototype for some parts of the functionality ready quite quickly.", "However, getting to a complete solution will take more time, mainly because the semantics of the languages are different.", "A simple subset of the language (functions, basic types and so on) can be readily translated, but once you get into the more complex layers, you'll need heavy machinery to emulate one language's core in another.", "For example consider Python's generators and list comprehensions which don't exist in PHP (to my best knowledge, which is admittedly poor when PHP is involved)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["To give you one final tip, consider the 2to3 tool created by the Python devs to translate Python 2 code to Python 3 code.", "Front-end-wise, it has most of the elements you need to translate Python to something.", "However, since the cores of Python 2 and 3 are similar, no emulation machinery is required there."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "2to3", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "something", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["Writing a translator isn't impossible, especially considering that Joel's Intern did it over a summer."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "did it over a summer.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.joelonsoftware.com/articles/FogBugzIII.html"}]}, {"text": ["If you want to do one language, it's easy.", "If you want to do more, it's a little more difficult, but not too much.", "The hardest part is that, while any turing complete language can do what another turing complete language does, built-in data types can change what a language does phenomenally."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For instance:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n word = 'This is not a word'\nprint word[::-2]\n</code>\n</pre>\n", "senID": 3}, {"text": ["takes a lot of C++ code to duplicate (ok, well you can do it fairly short with some looping constructs, but still)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "lot", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["That's a bit of an aside, I guess. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Have you ever written a tokenizer/parser based on a language grammar?", "You'll probably want to learn how to do that if you haven't, because that's the main part of this project.", "What I would do is come up with a basic Turing complete syntax - something fairly similar to Python  bytecode.", "Then you create a lexer/parser that takes a language grammar (perhaps using BNF), and based on the grammar, compiles the language into your intermediate language.", "Then what you'll want to do is do the reverse - create a parser from your language into target languages based on the grammar."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "bytecode", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/2.5.2/lib/bytecodes.html"}, {"text": "BNF", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form"}]}, {"text": ["The most obvious problem I see is that at first you'll probably create horribly inefficient code, especially in more powerful* languages like Python."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "horribly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["But if you do it this way then you'll probably be able to figure out ways to optimize the output as you go along.", "To summarize:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "read provided grammar", "tag": "none", "senID": 9}, {"text": "compile program into intermediate (but also Turing complete) syntax", "tag": "none", "senID": 10}, {"text": "compile intermediate program into final language (based on provided grammar)", "tag": "none", "senID": 11}, {"text": "...?", "tag": "none", "senID": 12}, {"text": "Profit!(?)", "tag": "none", "senID": 13}]}, {"text": ["*by powerful I mean that this takes 4 lines:"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n myinput = raw_input(\"Enter something: \")\nprint myinput.replace('a', 'A')\nprint sum(ord(c) for c in myinput)\nprint myinput[::-1]\n</code>\n</pre>\n", "senID": 15}, {"text": ["Show me another language that can do something like that in 4 lines, and I'll show you a language that's as powerful as Python."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}], [{"text": ["There are a couple answers telling you not to bother.", "Well, how helpful is that?", "You want to learn?", "You can learn.", "This is compilation.", "It just so happens that your target language isn't machine code, but another high-level language.", "This is done all the time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There's a relatively easy way to get started.", "First, go get http://sourceforge.net/projects/lime-php/ (if you want to work in PHP) or some such and go through the example code.", "Next, you can write a lexical analyzer using a sequence of regular expressions and feed tokens to the parser you generate.", "Your semantic actions can either output code directly in another language or build up some data structure (think objects, man) that you can massage and traverse to generate output code."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://sourceforge.net/projects/lime-php/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/lime-php/"}]}, {"text": ["You're lucky with PHP and Python because in many respects they are the same language as each other, but with different syntax.", "The hard part is getting over the semantic differences between the grammar forms and data structures.", "For example, Python has lists and dictionaries, while PHP only has assoc arrays."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The \"learner\" approach is to build something that works OK for a restricted subset of the language (such as only print statements, simple math, and variable assignment), and then progressively remove limitations.", "That's basically what the \"big\" guys in the field all did."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Oh, and since you don't have static types in Python, it might be best to write and rely on PHP functions like \"python_add\" which adds numbers, strings, or objects according to the way Python does it."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Obviously, this can get much bigger if you let it."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You could take a look at the Vala compiler, which translates Vala (a C#-like language) into C."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Vala compiler", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://git.gnome.org/browse/vala/tree/"}]}]]