[[{"text": ["libxml2 has a number of advantages:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "libxml2", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://xmlsoft.org/python.html"}]}, {"text": ["Downsides include:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you are doing simple path selection, stick with ElementTree ( which is included in Python 2.5 ).", "If you need full spec compliance or raw speed and can cope with the distribution of native code, go with libxml2."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "ElementTree", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/element-xpath.htm"}]}, {"text": ["Sample of libxml2 XPath Use\n"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Sample of libxml2 XPath Use", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "hr", "childList": []}]}, {"code": "<pre>\n<code>\n import libxml2\n\ndoc = libxml2.parseFile(\"tst.xml\")\nctxt = doc.xpathNewContext()\nres = ctxt.xpathEval(\"//*\")\nif len(res) != 2:\n    print \"xpath query: wrong node set size\"\n    sys.exit(1)\nif res[0].name != \"doc\" or res[1].name != \"foo\":\n    print \"xpath query: wrong node set value\"\n    sys.exit(1)\ndoc.freeDoc()\nctxt.xpathFreeContext()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Sample of ElementTree XPath Use\n"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Sample of ElementTree XPath Use", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "hr", "childList": []}]}, {"code": "<pre>\n<code>\n from elementtree.ElementTree import ElementTree\ndoc = ElementTree(file='tst.xml')\nfor e in mydata.findall('/foo/bar'):\n    print e.get('title').text\n</code>\n</pre>\n", "senID": 6}, {"tag": "hr", "senID": 7}], [{"text": ["The lxml package supports xpath.", "It seems to work pretty well, although I've had some trouble with the self:: axis.", "There's also Amara, but I haven't used it personally."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "lxml package", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/"}, {"text": "Amara", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/Amara/1.1.6"}]}], [{"text": ["Use LXML.", "LXML uses the full power of libxml2 and libxslt, but wraps them in more \"Pythonic\" bindings than the Python bindings that are native to those libraries.", "As such, it gets the full XPath 1.0 implementation.", "Native ElemenTree supports a limited subset of XPath, although it may be good enough for your needs."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The latest version of elementtree supports XPath pretty well.", "Not being an XPath expert I can't say for sure if the implementation is full but it has satisfied most of my needs when working in Python.", "I've also use lxml and PyXML and I find etree nice because it's a standard module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "elementtree", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/element-xpath.htm"}]}, {"text": ["NOTE: I've since found lxml and for me it's definitely the best XML lib out there for Python.", "It does XPath nicely as well (though again perhaps not a full implementation)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Another option is py-dom-xpath http://code.google.com/p/py-dom-xpath/, it works seamlessly with minidom and is pure Python so works on appengine."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/py-dom-xpath/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/py-dom-xpath/"}]}, {"code": "<pre>\n<code>\n import xpath\nxpath.find('//item', doc)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["PyXML works well.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyXML", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyxml.sourceforge.net"}]}, {"text": ["You didn't say what platform you're using, however if you're on Ubuntu you can get it with sudo apt-get install python-xml.", "I'm sure other Linux distros have it as well.  "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sudo apt-get install python-xml", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you're on a Mac, xpath is already installed but not immediately accessible.", "You can set PY_USE_XMLPLUS in your environment or do it the Python way before you import xml.xpath:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "PY_USE_XMLPLUS", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n if sys.platform.startswith('darwin'):\n    os.environ['PY_USE_XMLPLUS'] = '1'\n</code>\n</pre>\n", "senID": 3}, {"text": ["In the worst case you may have to build it yourself.", "This package is no longer maintained but still builds fine and works with modern 2.x Pythons.", "Basic docs are here."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pyxml.sourceforge.net/topics/howto/section-XPath.html"}]}], [{"text": ["You can use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["PyXML:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PyXML", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from xml.dom.ext.reader import Sax2\nfrom xml import xpath\ndoc = Sax2.FromXmlFile('foo.xml').documentElement\nfor url in xpath.Evaluate('//@Url', doc):\n  print url.value\n</code>\n</pre>\n", "senID": 2}, {"text": ["libxml2:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "libxml2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import libxml2\ndoc = libxml2.parseFile('foo.xml')\nfor url in doc.xpathEval('//@Url'):\n  print url.content\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Another library is 4Suite: http://sourceforge.net/projects/foursuite/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://sourceforge.net/projects/foursuite/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/foursuite/"}]}, {"text": ["I do not know how spec-compliant it is.", "But it has worked very well for my use.", "It looks abandoned."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]