[[{"text": ["To check the existence of a local variable:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if 'myVar' in locals():\n  # myVar exists.\n</code>\n</pre>\n", "senID": 1}, {"text": ["To check the existence of a global variable:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if 'myVar' in globals():\n  # myVar exists.\n</code>\n</pre>\n", "senID": 3}, {"text": ["To check if an object has an attribute:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if hasattr(obj, 'attr_name'):\n  # obj.attr_name exists.\n</code>\n</pre>\n", "senID": 5}], [{"text": ["The use of variables that haven't been defined is actually a bad thing in any language since it indicates that the logic of the program hasn't been thought through properly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python will assume you know what you're doing, otherwise you'd be using VB :-)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The following trick, which is similar to yours, will ensure that a variable has some value before use:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "some", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n    myVar\nexcept NameError:\n    myVar = None\n# Now you're free to use myVar without Python complaining.\n</code>\n</pre>\n", "senID": 3}], [{"text": ["catch is called except in Python.", "other than that it's fine for such simple cases.", "There's the AttributeError that can be used to check if an object has an attribute."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "catch", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "except", "tag": "a", "pos": -1, "childList": [{"text": "except", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/reference/compound%5Fstmts.html#the-try-statement"}, {"text": "except", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "AttributeError", "tag": "a", "pos": 2, "childList": [{"text": "AttributeError", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/exceptions.html#exceptions.AttributeError"}, {"text": "AttributeError", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Using try/except is the best way to test for a variable's existence.", "But there's almost certainly a better way of doing whatever it is you're doing than setting/testing global variables."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, if you want to initialize a module-level variable the first time you call some function, you're better off with code something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n my_variable = None\n\ndef InitMyVariable():\n  global my_variable\n  if my_variable is None:\n    my_variable = ...\n</code>\n</pre>\n", "senID": 2}], [{"text": ["A way that often works well for handling this kind of situation is to not explicitly check if the variable exists but just go ahead and wrap the first usage of the possibly non-existing variable in a try/except NameError:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Search for entry.\nfor x in y:\n  if x == 3:\n    found = x\n\n# Work with found entry.\ntry:\n  print('Found: {0}'.format(found))\nexcept NameError:\n  print('Not found')\nelse:\n  # Handle rest of Found case here\n  ...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Python assumes that you've assigned the variable to something, worst case you've assigned it the None object."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "assumes that you've assigned the variable to something", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/59892/"}]}]]