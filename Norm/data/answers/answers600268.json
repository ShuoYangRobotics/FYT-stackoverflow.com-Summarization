[[{"text": ["mkdir -p functionality as follows:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "mkdir -p", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import os, errno\n\ndef mkdir_p(path):\n    try:\n        os.makedirs(path)\n    except OSError as exc: # Python &gt;2.5\n        if exc.errno == errno.EEXIST:\n            pass\n        else: raise\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is easier than trapping the exception:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nif not os.path.exists (...):\n    os.makedirs (...)\n</code>\n</pre>\n", "senID": 1}, {"text": ["UPDATE 4/20/2010"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "UPDATE 4/20/2010", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I originally presented this solution because I assumed the OP was looking for something quick and dirty, perhaps for a script or a program that doesn't need to guard against a race condition where another process creates the path out from underneath it.", "If your program must guard against that sort of condition, don't use this solution, instead go with the accepted solution provided by \u03a4\u0396\u03a9\u03a4\u0396\u0399\u039f\u03a5.  "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["However, this solution can be used for simple, throwaway code or something that will run in a controlled environment where you know for certain you will not encounter the race condition mentioned above. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["When in doubt, use the accepted solution as it's correct in more cases than this one.", "This solution is not necessarily wrong, but it can be broken when used naively."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["This should be all you need"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nos.makedirs('/path/to/create')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["mkdir -p gives you an error if you the file already exists:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "mkdir -p", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ touch /tmp/foo\n$ mkdir -p /tmp/foo\nmkdir: cannot create directory `/tmp/foo': File exists\n</code>\n</pre>\n", "senID": 1}, {"text": ["So a refinement to the previous suggestions would be to re-raise the exception if os.path.isdir returns False (when checking for errno.EEXIST)."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "raise", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.path.isdir", "childNum": 0, "tag": "code", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}, {"text": "errno.EEXIST", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["(Update) See also this highly similar question; I agree with the accepted answer (and caveats) except I would recommend os.path.isdir instead of os.path.exists."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "highly similar question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/273192/python-best-way-to-create-directory-if-it-doesnt-exist-for-file-write"}, {"text": "os.path.isdir", "childNum": 0, "tag": "code", "childList": []}, {"text": "os.path.exists", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["(Update) Per a suggestion in the comments, the full function would look like:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import os\ndef mkdirp(directory):\n    if not os.path.isdir(directory):\n        os.makedirs(directory)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I think Asa's answer is essentially correct, but you could extend it a little to act more like mkdir -p, either:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "mkdir -p", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import os\n\ndef mkdir_path(path):\n    if not os.access(path, os.F_OK):\n        os.mkdirs(path)\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport errno\n\ndef mkdir_path(path):\n    try:\n        os.mkdirs(path)\n    except os.error, e:\n        if e.errno != errno.EEXIST:\n            raise\n</code>\n</pre>\n", "senID": 3}, {"text": ["These both handle the case where the path already exists silently but let other errors bubble up."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]