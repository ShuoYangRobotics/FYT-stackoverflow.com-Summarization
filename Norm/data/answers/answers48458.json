[[{"text": ["First, I would suggest you have a look at \"Rapid Development with Python, Django, and Google App Engine\""], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Rapid Development with Python, Django, and Google App Engine", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sites.google.com/site/io/rapid-development-with-python-django-and-google-app-engine"}]}, {"text": ["GvR describes a general/standard project layout on page 10 of his slide presentation.  "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "slide presentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sites.google.com/site/io/rapid-development-with-python-django-and-google-app-engine/rapid_development_with_django_gae.pdf?attredirects=0"}]}, {"text": ["Here I'll post a slightly modified version of the layout/structure from that page.", "I pretty much follow this pattern myself.", "You also mentioned you had trouble with packages.", "Just make sure each of your sub folders has an __init__.py file.", "It's ok if its empty."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Boilerplate files"], "childNum": 0, "tag": "h2", "senID": 3, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "These hardly vary between projects", "tag": "none", "senID": 4}, {"text": "app.yaml: direct all non-static requests to main.py ", "tag": "none", "senID": 5}, {"text": "main.py: initialize app and send it all requests ", "tag": "none", "senID": 6}]}, {"text": ["Project lay-out"], "childNum": 0, "tag": "h2", "senID": 7, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "static/*: static files; served directly by App Engine", "tag": "none", "senID": 8}, {"text": "myapp/*.py: app-specific python code\n", "tag": "none", "senID": 9}, {"text": "templates/*.html: templates (or myapp/templates/*.html)", "tag": "none", "senID": 10}]}, {"text": ["Here are some code examples that may help as well:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["main.py"], "childNum": 0, "tag": "h2", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n import wsgiref.handlers\n\nfrom google.appengine.ext import webapp\nfrom myapp.views import *\n\napplication = webapp.WSGIApplication([\n  ('/', IndexHandler),\n  ('/foo', FooHandler)\n], debug=True)\n\ndef main():\n  wsgiref.handlers.CGIHandler().run(application)\n</code>\n</pre>\n", "senID": 13}, {"text": ["myapp/views.py"], "childNum": 0, "tag": "h2", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport datetime\nimport logging\nimport time\n\nfrom google.appengine.api import urlfetch\nfrom google.appengine.ext.webapp import template\nfrom google.appengine.api import users\nfrom google.appengine.ext import webapp\nfrom models import *\n\nclass IndexHandler(webapp.RequestHandler):\n  def get(self):\n    date = \"foo\"\n    # Do some processing\t\t\n    template_values = {'data': data }\n    path = os.path.join(os.path.dirname(__file__) + '/../templates/', 'main.html')\n    self.response.out.write(template.render(path, template_values))\n\nclass FooHandler(webapp.RequestHandler):\n  def get(self):\n    #logging.debug(\"start of handler\")\n</code>\n</pre>\n", "senID": 15}, {"text": ["myapp/models.py"], "childNum": 0, "tag": "h2", "senID": 16, "childList": []}, {"code": "<pre>\n<code>\n from google.appengine.ext import db\n\nclass SampleModel(db.Model):\n</code>\n</pre>\n", "senID": 17}, {"text": ["I think this layout works great for new and relatively small to medium projects.", "For larger projects I would suggest breaking up the views and models to have their own sub-folders with something like:"], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"text": ["Project lay-out"], "childNum": 0, "tag": "h2", "senID": 19, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "static/: static files; served directly by App Engine\n", "tag": "none", "senID": 20}, {"text": "myapp/: app structure\n", "tag": "none", "senID": 21}]}], [{"text": ["I think the first option is considered the best practice.", "And make the code folder your first package.", "The Rietveld project developed by Guido van Rossum is a very good model to learn from.", "Have a look at it: http://code.google.com/p/rietveld"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/rietveld", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://code.google.com/p/rietveld"}]}, {"text": ["With regard to Dangjo 1.0, I suggest you start using the Django trunk code instead of the GAE built in django port.", "Again, have a look at how it's done in Rietveld."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["My usual layout looks something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 8, "lis": [{"text": "app.yaml", "tag": "none", "senID": 1}, {"text": "index.yaml", "tag": "none", "senID": 2}, {"text": "request.py - contains the basic WSGI app", "tag": "none", "senID": 3}, {"text": "lib\n", "tag": "none", "senID": 4}, {"text": "controllers - contains all the handlers. request.yaml imports these.", "tag": "none", "senID": 5}, {"text": "templates\n", "tag": "none", "senID": 6}, {"text": "model\n", "tag": "none", "senID": 7}, {"text": "static\n", "tag": "none", "senID": 8}]}, {"text": ["I can provide examples of what my app.yaml, request.py, lib/init.py, and sample controllers look like, if this isn't clear."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["I am not entirely up to date on the latest best practices, et cetera when it comes to code layout, but when I did my first GAE application, I used something along your second option, where the code and templates are next to eachother."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There was two reasons for this - one, it kept the code and template nearby, and secondly, I had the directory structure layout mimic that of the website - making it (for me) a bit easier too remember where everything was."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I like webpy so I've adopted it as templating framework on Google App Engine.", "My package folders are typically organized like this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "webpy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://webpy.org/"}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n app.yaml\napplication.py\nindex.yaml\n/app\n   /config\n   /controllers\n   /db\n   /lib\n   /models\n   /static\n        /docs\n        /images\n        /javascripts\n        /stylesheets\n   test/\n   utility/\n   views/\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here is an example."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/systempuntoout/stackprinter"}]}]]