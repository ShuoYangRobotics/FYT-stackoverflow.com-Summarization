[[{"text": ["There are a bunch of ways to do it, but the most straightforward is to simply \nuse the Python debugger.", "Just add following line in to a Django view function:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python debugger", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-pdb.html"}]}, {"code": "<pre>\n<code>\n import pdb; pdb.set_trace()\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you try to load that page in your browser, the browser will hang and you get a prompt to carry on debugging on actual executing code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["However there are other options suggested by others (I won't recommend them):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n * return HttpResponse({variable to inspect})\n\n* print {variable to inspect}\n\n* raise Exception({variable to inspect})\n</code>\n</pre>\n", "senID": 4}, {"text": ["But the Python Debugger (pdb) is highly recommended for all types of Python code.", "If you are already into pdb, you'd also want to have a look at ipdb that uses ipython for debugging.", "Happy Coding."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["There are a few tools that cooperate well and can make your debugging task easier."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Most important is the Django debug toolbar."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Django debug toolbar", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/robhudson/django-debug-toolbar/tree/master"}]}, {"text": ["Then you need good logging using the Python logging facility.", "You can send logging output to a log file, but an easier option is sending log output to firepython.", "To use this you need to use the Firefox browser with the firebug extension.", "Firepython includes a firebug plugin that will display any server-side logging in a Firebug tab."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "logging", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/logging.html#module-logging"}, {"text": "firepython", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://github.com/darwin/firepython/tree/master"}, {"text": "firebug", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://getfirebug.com/"}]}, {"text": ["Firebug itself is also critical for debugging the Javascript side of any app you develop.", "(Assuming you have some JS code of course)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I also liked django-viewtools for debugging views interactively using pdb, but I don't use it that much."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "django-viewtools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://eric.themoritzfamily.com/2009/02/17/announcing-django-viewtools/"}]}, {"text": ["There are more useful tools like dozer for tracking down memory leaks (there are also other good suggestions given in answers here on SO for memory tracking)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I really like Werkzeug's interactive debugger.", "It's similar to Django's debug page, except that you get an interactive shell on every level of the traceback.", "If you use the django-extensions, you get a runserver_plus managment command which starts the development server and gives you Werkzeug's debugger on exceptions."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Werkzeug", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://werkzeug.pocoo.org/"}, {"text": "django-extensions", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-command-extensions/"}, {"text": "runserver_plus", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Of course, you should only run this locally, as it gives anyone with a browser the rights to execute arbitrary python code in the context of the server."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["A little quickie for template tags:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n @register.filter \ndef pdb(element):\n    import pdb; pdb.set_trace()\n    return element\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now, inside a template you can do {{ template_var|pdb }} and enter a pdb session (given you're running the local devel server) where you can inspect element to your heart's content."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "{{ template_var|pdb }}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "element", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["It's a very nice way to see what's happened to your object when it arrives at the template. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Almost everything has been mentioned so far, so I only add that instead of pdb.set_trace() one can use ipdb.set_trace() which uses iPython and therefore is more powerful (autocomplete and other goodies).", "This requires ipdb package, so one need to easy_install ipdb"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "pdb.set_trace()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ipdb.set_trace()", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "easy_install ipdb", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I use pyDev with Eclipse really good, set break points, step into code, view values on any objects and variables, try it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pyDev", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pydev.sourceforge.net/"}]}], [{"text": ["I use PyCharm (same pydev engine as eclipse).", "Really helps me to visually be able to step through my code and see what is happening."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyCharm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.jetbrains.com/pycharm/"}]}], [{"text": ["I've pushed django-pdb to PyPI.", "It's a simple app that means you don't need to edit your source code every time you want to break into pdb."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "django-pdb", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "PyPI", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/django-pdb"}]}, {"text": ["Installation is just..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You can now run: manage.py runserver --pdb to break into pdb at the start of every view..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "manage.py runserver --pdb", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n bash: manage.py runserver --pdb\nValidating models...\n\n0 errors found\nDjango version 1.3, using settings 'testproject.settings'\nDevelopment server is running at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n\nGET /\nfunction \"myview\" in testapp/views.py:6\nargs: ()\nkwargs: {}\n\n&gt; /Users/tom/github/django-pdb/testproject/testapp/views.py(7)myview()\n-&gt; a = 1\n(Pdb)\n</code>\n</pre>\n", "senID": 3}, {"text": ["And run: manage.py test --pdb to break into pdb on test failures/errors..."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "manage.py test --pdb", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n bash: manage.py test testapp --pdb\nCreating test database for alias 'default'...\nE\n======================================================================\n&gt;&gt;&gt; test_error (testapp.tests.SimpleTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \".../django-pdb/testproject/testapp/tests.py\", line 16, in test_error\n    one_plus_one = four\nNameError: global name 'four' is not defined\n======================================================================\n\n&gt; /Users/tom/github/django-pdb/testproject/testapp/tests.py(16)test_error()\n-&gt; one_plus_one = four\n(Pdb)\n</code>\n</pre>\n", "senID": 5}, {"text": ["The project's hosted on GitHub, contributions are welcome of course."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "GitHub", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/tomchristie/django-pdb"}]}]]