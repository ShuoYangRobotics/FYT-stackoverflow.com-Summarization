[[{"code": "<pre>\n<code>\n def dump(obj):\n  for attr in dir(obj):\n    print \"obj.%s = %s\" % (attr, getattr(obj, attr))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You want vars() mixed with pprint:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from pprint import pprint\npprint (vars(your_object))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You are really mixing together two different things."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Use dir() or the inspect module to get what you are interested in (I use __builtins__ as an example; you can use any object instead)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "dir()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "inspect", "childNum": 0, "tag": "code", "childList": []}, {"text": "__builtins__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = dir(__builtins__)\n&gt;&gt;&gt; d = __builtins__.__dict__\n</code>\n</pre>\n", "senID": 2}, {"text": ["Print that dictionary however fancy you like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print l\n['ArithmeticError', 'AssertionError', 'AttributeError',...\n</code>\n</pre>\n", "senID": 4}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; pprint(l)\n['ArithmeticError',\n 'AssertionError',\n 'AttributeError',\n 'BaseException',\n 'DeprecationWarning',\n...\n\n&gt;&gt;&gt; pprint(d, indent=2)\n{ 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,\n  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,\n  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,\n...\n  '_': [ 'ArithmeticError',\n         'AssertionError',\n         'AttributeError',\n         'BaseException',\n         'DeprecationWarning',\n...\n</code>\n</pre>\n", "senID": 6}], [{"text": ["dir has been mentioned, but that'll only give you the attributes' names.", "If you want their values as well try __dict__."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dir", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class O:\n   def __init__ (self):\n      self.value = 3\n\no = O()\n</code>\n</pre>\n", "senID": 1}, {"text": [">>> o.__dict__"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["{'value': 3}"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You can use the \"dir()\" function to do this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; dir(sys)\n['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__', '__stdin__', '__stdo\nt__', '_current_frames', '_getframe', 'api_version', 'argv', 'builtin_module_names', 'byteorder\n, 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dllhandle', 'exc_clear', 'exc_info'\n 'exc_type', 'excepthook', 'exec_prefix', 'executable', 'exit', 'getcheckinterval', 'getdefault\nncoding', 'getfilesystemencoding', 'getrecursionlimit', 'getrefcount', 'getwindowsversion', 'he\nversion', 'maxint', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_\nache', 'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setprofile', 'setrecursionlimit\n, 'settrace', 'stderr', 'stdin', 'stdout', 'subversion', 'version', 'version_info', 'warnoption\n', 'winver']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Another useful feature is help."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; help(sys)\nHelp on built-in module sys:\n\nNAME\n    sys\n\nFILE\n    (built-in)\n\nMODULE DOCS\n    http://www.python.org/doc/current/lib/module-sys.html\n\nDESCRIPTION\n    This module provides access to some objects used or maintained by the\n    interpreter and to functions that interact strongly with the interpreter.\n\n    Dynamic objects:\n\n    argv -- command line arguments; argv[0] is the script pathname if known\n</code>\n</pre>\n", "senID": 3}], [{"text": ["To print the current state of the object you might: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; obj # in an interpreter\n</code>\n</pre>\n", "senID": 1}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print repr(obj) # in a script\n</code>\n</pre>\n", "senID": 3}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print obj\n</code>\n</pre>\n", "senID": 5}, {"text": ["For your classes define __str__ or __repr__ methods.", "From the Python documentation:"], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "__str__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__repr__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Python documentation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/ref/customization.html"}]}], [{"text": ["In most cases, using __dict__ or dir() will get you the info you're wanting.", "If you should happen to need more details, the standard library includes the inspect module, which allows you to get some impressive amount of detail.", "Some of the real nuggests of info include:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "__dict__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dir()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "inspect", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "names of function and method parameters", "tag": "none", "senID": 1}, {"text": "class hierarchies", "tag": "none", "senID": 2}, {"text": "source code of the implementation of a functions/class objects", "tag": "none", "senID": 3}, {"text": "local variables out of a frame object", "tag": "none", "senID": 4}]}, {"text": ["If you're just looking for \"what attribute values does my object have?", "\", then dir() and __dict__ are probably sufficient.", "If you're really looking to dig into the current state of arbitrary objects (keeping in mind that in python almost everything is an object), then inspect is worthy of consideration."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "dir()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "inspect", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["A metaprogramming example Dump object with magic:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Dump object with magic", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks/linux/library/l-pymeta.html"}]}, {"code": "<pre>\n$ cat dump.py\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n #!/usr/bin/python\nimport sys\nif len(sys.argv) &gt; 2:\n    module, metaklass  = sys.argv[1:3]\n    m = __import__(module, globals(), locals(), [metaklass])\n    __metaclass__ = getattr(m, metaklass)\n\nclass Data:\n    def __init__(self):\n        self.num = 38\n        self.lst = ['a','b','c']\n        self.str = 'spam'\n    dumps   = lambda self: repr(self)\n    __str__ = lambda self: self.dumps()\n\ndata = Data()\nprint data\n</code>\n</pre>\n", "senID": 2}, {"text": ["Without arguments:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n$ python dump.py\n</pre>\n", "senID": 4}, {"code": "<pre>\n<code>\n &lt;__main__.Data instance at 0x00A052D8&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["With Gnosis Utils:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Gnosis Utils", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.gnosis.cx/download/Gnosis%5FUtils.More/"}]}, {"code": "<pre>\n$ python dump.py gnosis.magic MetaXMLPickler\n</pre>\n", "senID": 7}, {"code": "<pre>\n<code>\n &lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE PyObject SYSTEM \"PyObjects.dtd\"&gt;\n&lt;PyObject module=\"__main__\" class=\"Data\" id=\"11038416\"&gt;\n&lt;attr name=\"lst\" type=\"list\" id=\"11196136\" &gt;\n  &lt;item type=\"string\" value=\"a\" /&gt;\n  &lt;item type=\"string\" value=\"b\" /&gt;\n  &lt;item type=\"string\" value=\"c\" /&gt;\n&lt;/attr&gt;\n&lt;attr name=\"num\" type=\"numeric\" value=\"38\" /&gt;\n&lt;attr name=\"str\" type=\"string\" value=\"spam\" /&gt;\n&lt;/PyObject&gt;\n</code>\n</pre>\n", "senID": 8}, {"text": ["It is a bit outdated but still working."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["pprint contains a \u201cpretty printer\u201d for producing aesthetically pleasing representations of your data structures.", "The formatter produces representations of data structures that can be parsed correctly by the interpreter, and are also easy for a human to read.", "The output is kept on a single line, if possible, and indented when split across multiple lines."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pprint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.doughellmann.com/PyMOTW/pprint/#module-pprint"}]}]]