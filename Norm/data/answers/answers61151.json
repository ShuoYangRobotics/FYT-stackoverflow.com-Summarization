[[{"text": ["A common practice is to put the tests directory in the same parent directory as your module/package.", "So if your module was called foo.py your directory layout would look like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n parent_dir/\n  foo.py\n  tests/\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course there is no one way of doing it.", "You could also make a tests subdirectory and import the module using absolute import."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "absolute import", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0328/"}]}, {"text": ["Wherever you put your tests, I would recommend you use nose to run them.", "Nose searches through your directories for tests.", "This way, you can put tests wherever they make the most sense organizationally."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "nose", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose"}, {"text": "Nose", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose"}]}], [{"text": ["For a file module.py, the unit test should normally be called module_test.py, following Pythonic naming conventions."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "module.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "module_test.py", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["There are several commonly accepted places to put module_test.py:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "module_test.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I prefer #1 for its simplicity of finding the tests and importing them.", "Whatever build system you're using can easily be configured to run files ending in _test."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I don't believe there is an established \"best practice\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I put my tests in another directory outside of the app code.", "I then add the main app directory to sys.path (allowing you to import the modules from anywhere) in my test runner script (which does some other stuff as well) before running all the tests.", "This way I never have to remove the tests directory from the main code when I release it, saving me time and effort, if an ever so tiny amount."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I use a tests/ directory, and then import the main application modules using relative imports.", "So in MyApp/tests/foo.py, there might be:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "tests/", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from .. import foo\n</code>\n</pre>\n", "senID": 1}, {"text": ["to import the MyApp.foo module."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "MyApp.foo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I also tend to put my unit tests in the file itself, as Jeremy Cantrell above notes, although I tend to not put the test function in the main body, but rather put everything in an"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if __name__ == '__main__':\n   do tests...\n</code>\n</pre>\n", "senID": 1}, {"text": ["block.", "This ends up adding documentation to the file as 'example code' for how to use the python file you are testing."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I should add, I tend to write very tight modules/classes.", "If your modules require very large numbers of tests, you can put them in another, but even then, I'd still add:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if __name__ == '__main__':\n   import tests.thisModule\n   tests.thisModule.runtests\n</code>\n</pre>\n", "senID": 4}, {"text": ["This lets anybody reading your source code know where to look for the test code."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["We had the very same question when writing Pythoscope (http://pythoscope.org), which generates unit tests for Python programs.", "We polled people on the testing in python list before we chose a directory, there were many different opinions.", "In the end we chose to put a \"tests\" directory in the same directory as the source code.", "In that directory we generate a test file for each module in the parent directory.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pythoscope.org", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pythoscope.org"}]}], [{"text": ["I prefer toplevel tests directory.", "This does mean imports become a little more difficult.", "For that I have two solutions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's how that stuff is supported by code in M2Crypto:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["http://svn.osafoundation.org/m2crypto/trunk/setup.py"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["http://svn.osafoundation.org/m2crypto/trunk/tests/alltests.py"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}, {"text": ["If you prefer to run tests with nosetests you might need do something a little different."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I've recently started to program in Python, so I've not really had chance to find out best practice yet.", "But, I've written a module that goes and finds all the tests and runs them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, I have:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\napp/\n appfile.py\ntest/\n appfileTest.py\n</pre>\n", "senID": 2}, {"text": ["I'll have to see how it goes as I progress to larger projects."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["In C#, I've generally separated the tests into a separate assembly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In Python -- so far -- I've tended to either write doctests, where the test is in the docstring of a function, or put them in the if __name__ == \"__main__\" block at the bottom of the module."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if __name__ == \"__main__\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["When writing a package called \"foo\", I will put unit tests into a separate package \"foo_test\".", "Modules and subpackages will then have the same name as the SUT package module.", "E.g.", "tests for a module foo.x.y are found in foo_test.x.y.", "The __init__.py files of each testing package then contain an AllTests suite that includes all test suites of the package.", "setuptools provides a convenient way to specify the main testing package, so that after \"python setup.py develop\" you can just use \"python setup.py test\" or \"python setup.py test -s foo_test.x.SomeTestSuite\" to the just a specific suite."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If the tests are simple, simply put them in the docstring -- most of the test frameworks for Python will be able to use that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import module\n&gt;&gt;&gt; module.method('test')\n'testresult'\n</code>\n</pre>\n", "senID": 1}, {"text": ["For other more involved tests, I'd put them either in ../tests/test_module.py or in tests/test_module.py."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "../tests/test_module.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tests/test_module.py", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["We use "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["app/src/code.py"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["app/testing/code_test.py "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["app/docs/.."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In each test file we insert \"../src/\" in sys.path.", "It's not the nicest solution but works.", "I think it would be great if someone came up w/ something like maven in java that gives you standard conventions that just work, no matter what project you work on."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["How I do it..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Folder structure:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n project/\n    src/\n        code.py\n    tests/\n    setup.py\n</code>\n</pre>\n", "senID": 2}, {"text": ["Setup.py points to src/ as the location containing my projects modules, then i run:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n setup.py develop\n</code>\n</pre>\n", "senID": 4}, {"text": ["Which adds my project into site-packages, pointing to my working copy.", "To run my tests i use:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n setup.py tests\n</code>\n</pre>\n", "senID": 6}, {"text": ["Using whichever test runner I've configured."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]]