[[{"text": ["I have multiple settings files."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["settings_local.py"], "childNum": 0, "tag": "code", "senID": 1, "childList": []}, {"text": ["settings_development.py"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}, {"text": ["settings_production.py"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}]}, {"text": ["I tie these all together with a settings.py file that firstly imports settings_local.py, and then one of the other two.", "It decides which to load by two settings inside settings_local.py - DEVELOPMENT_HOSTS and PRODUCTION_HOSTS.", "settings.py calls platform.node() to find the hostname of the machine it is running on, and then looks for that hostname in the lists, and loads the second settings file depending on which list it finds the hostname in."], "childNum": 7, "tag": "p", "senID": 4, "childList": [{"text": "settings.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "settings_local.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "settings_local.py", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "DEVELOPMENT_HOSTS", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "PRODUCTION_HOSTS", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "settings.py", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "platform.node()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["That way, the only thing you really need to worry about is keeping the settings_local.py file up to date with the host-specific configuration, and everything else is handled automatically."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "settings_local.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Check out an example here."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/JimDabell/lojban-website/tree/master/lojban"}]}], [{"text": ["Personally, I use a single settings.py for the project, I just have it look up the hostname it's on (my development machines have hostnames that start with \"gabriel\" so I just have this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import socket\nif socket.gethostname().startswith('gabriel'):\n    LIVEHOST = False\nelse: \n    LIVEHOST = True\n</code>\n</pre>\n", "senID": 1}, {"text": ["then in other parts I have things like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if LIVEHOST:\n    DEBUG = False\n    PREPEND_WWW = True\n    MEDIA_URL = 'http://static1.grsites.com/'\nelse:\n    DEBUG = True\n    PREPEND_WWW = False\n    MEDIA_URL = 'http://localhost:8000/static/'\n</code>\n</pre>\n", "senID": 3}, {"text": ["and so on.", "A little bit less readable, but it works fine and saves having to juggle multiple settings files."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["At the end of settings.py I have the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    from settings_local import *\nexcept ImportError:\n    pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["This way if I want to override default settings I need to just put settings_local.py right next to settings.py."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I have two files.", "settings_base.py which contains common/default settings, and which is checked into source control.", "Each deployment has a separate settings.py, which executes from settings_base import * at the beginning and then overrides as needed."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "settings_base.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "settings.py", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "from settings_base import *", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The most simplistic way I found was:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1) use the default settings.py for local development and 2)\ncreate a production-settings.py starting with:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "settings.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "production-settings.py", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n import os\nfrom settings import *\n</code>\n</pre>\n", "senID": 2}, {"text": ["And then just override the settings that differ in production:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n DEBUG = False\nTEMPLATE_DEBUG = DEBUG\n\n\nDATABASES = {\n    'default': {\n           ....\n    }\n}\n</code>\n</pre>\n", "senID": 4}], [{"text": ["In addition to the multiple settings files mentioned by Jim, I also tend to place two settings into my settings.py file at the top BASE_DIR and BASE_URL set to the path of the code and the URL to the base of the site, all other settings are modified to append themselves to these."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["BASE_DIR = \"/home/sean/myapp/\"\ne.g.", "MEDIA_ROOT = \"%smedia/\" % BASEDIR"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So when moving the project I only have to edit these settings and not search the whole file."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I would also recommend looking at fabric and Capistrano (Ruby tool, but it can be used to deploy Django applications) which facilitate automation of remote deployment."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Capistrano", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Capistrano"}]}], [{"text": ["Somewhat related, for the issue of deploying Django itself with multiple databases, you may want to take a look at Djangostack.", "You can download a completely free installer that allows you to install Apache, Python, Django, etc.", "As part of the installation process we allow you to select which database you want to use (MySQL, SQLite, PostgreSQL).", "We use the installers extensively when automating deployments internally (they can be run in unattended mode)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Djangostack", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bitnami.org/stack/djangostack"}]}], [{"text": ["I think it depends on the size of the site as to whether you need to step up from using SQLite, I've successfully used SQLite on several smaller live sites and it runs great."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I have my settings.py file in an external directory.", "That way, it doesn't get checked into source control, or over-written by a deploy.", "I put this in the settings.py file under my Django project, along with any default settings:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nimport os.path\n\ndef _load_settings(path):    \n    print \"Loading configuration from %s\" % (path)\n    if os.path.exists(path):\n\tsettings = {}\n\t# execfile can't modify globals directly, so we will load them manually\n\texecfile(path, globals(), settings)\n\tfor setting in settings:\n\t    globals()[setting] = settings[setting]\n\n_load_settings(\"/usr/local/conf/local_settings.py\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["*Note: This is very dangerous if you can't trust local_settings.py.", "* "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Well i use this configuration"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["at the end of settings.py"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #settings.py\ntry:\n    from locale_settings import *\nexcept ImportError:\n    pass\n</code>\n</pre>\n", "senID": 2}, {"text": ["and in locale_settings.py"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #locale_settings.py\nclass Settings(object):\n\n    def __init__(self):\n        import settings\n        self.settings = settings\n\n    def __getattr__(self, name):\n        return getattr(self.settings, name)\n\nsettings = Settings()\n\nINSTALLED_APPS = settings.INSTALLED_APPS + (\n    'gunicorn',)\n\n# delete duplicate settings maybe not needed but i prefer to do it\ndel settings\ndel Settings\n</code>\n</pre>\n", "senID": 4}]]