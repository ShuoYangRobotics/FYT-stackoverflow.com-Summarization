[[{"text": ["Popen.communicate() documentation:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Popen.communicate()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n pipe = os.popen(cmd, 'w', bufsize)\n    # ==&gt;\n    pipe = Popen(cmd, shell=True, bufsize=bufsize, stdin=PIPE).stdin\n</code>\n</pre>\n", "senID": 1}, {"text": ["So your example could be written as follows:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from subprocess import Popen, PIPE, STDOUT\n\np = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\n\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]\nprint(grep_stdout)\n# -&gt; four\n# -&gt; five\n# -&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I figured out this workaround:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; p = subprocess.Popen(['grep','f'],stdout=subprocess.PIPE,stdin=subprocess.PIPE)\n&gt;&gt;&gt; p.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\n&gt;&gt;&gt; p.communicate()[0]\n'four\\nfive\\n'\n&gt;&gt;&gt; p.stdin.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Is there a better one?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Recommended reading: Doug Hellmann's Python Module of the Week blog post on subprocess."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Doug Hellmann's Python Module of the Week blog post on subprocess", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.doughellmann.com/PyMOTW/subprocess/"}]}], [{"text": ["\"Apparently a cStringIO.StringIO object doesn't quack close enough to a file duck to suit subprocess.Popen\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": [":-)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'm afraid not.", "The pipe is a low-level OS concept, so it absolutely requires a file object that is represented by an OS-level file descriptor.", "Your workaround is the right one."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\n\np.stdin.write('one\\n')\n\ntime.sleep(0.5)\n\np.stdin.write('two\\n')\n\ntime.sleep(0.5)\n\np.stdin.write('three\\n')\n\ntime.sleep(0.5)\n\ntestresult = p.communicate()[0]\n\ntime.sleep(0.5)\n\nprint(testresult)\n</code>\n</pre>\n", "senID": 0}]]