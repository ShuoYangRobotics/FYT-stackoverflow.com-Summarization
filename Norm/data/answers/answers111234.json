[[{"text": ["A callable is anything that can be called. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The buildincallable(PyCallable_Check in objects.c) checks if the argument is either:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "buildincallable(PyCallable_Check in objects.c)", "tag": "a", "pos": 0, "childList": [{"text": "callable", "tag": "em"}], "childNum": 1, "href": "http://svn.python.org/projects/python/trunk/Objects/object.c"}, {"text": "callable", "childNum": 0, "tag": "em", "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "an instance of a class with a ", "tag": "none", "senID": 2}, {"text": "is of a type that has a non null ", "tag": "none", "senID": 3}]}, {"text": ["The method named __call__ is (according to the documentation)"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "__call__", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://docs.python.org/ref/callable-types.html", "text": "according to the documentation", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Example"], "childNum": 0, "tag": "h2", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n class Foo:\n  def __call__(self):\n    print 'called'\n\nfoo_instance = Foo()\nfoo_instance() #this is calling the __call__ method\n</code>\n</pre>\n", "senID": 6}], [{"text": ["From Python's sources object.c:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "object.c", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/view/python/trunk/Objects/object.c?rev=64962&view=markup"}]}, {"code": "<pre>\n<code>\n /* Test whether an object can be called */\n\nint\nPyCallable_Check(PyObject *x)\n{\n    if (x == NULL)\n        return 0;\n    if (PyInstance_Check(x)) {\n        PyObject *call = PyObject_GetAttrString(x, \"__call__\");\n        if (call == NULL) {\n            PyErr_Clear();\n            return 0;\n        }\n        /* Could test recursively but don't, for fear of endless\n           recursion if some joker sets self.__call__ = self */\n        Py_DECREF(call);\n        return 1;\n    }\n    else {\n        return x-&gt;ob_type-&gt;tp_call != NULL;\n    }\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["It says:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Desciption of tp_callfield:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "tp_callfield", "tag": "a", "pos": 0, "childList": [{"text": "tp_call", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/api/type-structs.html"}, {"text": "tp_call", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can always use built-in callable function to determine whether given object is callable or not; or better yet just call it and catch TypeError later.", "callable is removed in Python 3.0 and 3.1, use callable = lambda o: hasattr(o, '__call__') or isinstance(o, collections.Callable)."], "childNum": 5, "tag": "p", "senID": 4, "childList": [{"text": "callable", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "TypeError", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "callable", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "callable = lambda o: hasattr(o, '__call__')", "childNum": 0, "tag": "code", "childList": []}, {"text": "isinstance(o, collections.Callable)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Example, a simplistic cache implementation:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n class Cached:\n    def __init__(self, function):\n        self.function = function\n        self.cache = {}\n\n    def __call__(self, *args):\n        try: return self.cache[args]\n        except KeyError:\n            ret = self.cache[args] = self.function(*args)\n            return ret\n</code>\n</pre>\n", "senID": 6}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n @Cached\ndef ack(x, y):\n    return ack(x-1, ack(x, y-1)) if x*y else (x + y + 1)\n</code>\n</pre>\n", "senID": 8}, {"text": ["Example from standard library, file site.py, definition of built-in exit() and quit() functions:"], "childNum": 4, "tag": "p", "senID": 9, "childList": [{"text": "site.py", "tag": "a", "pos": 0, "childList": [{"text": "site.py", "tag": "code"}], "childNum": 1, "href": "http://svn.python.org/projects/python/trunk/Lib/site.py"}, {"text": "site.py", "childNum": 0, "tag": "code", "childList": []}, {"text": "exit()", "childNum": 0, "tag": "code", "childList": []}, {"text": "quit()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class Quitter(object):\n    def __init__(self, name):\n        self.name = name\n    def __repr__(self):\n        return 'Use %s() or %s to exit' % (self.name, eof)\n    def __call__(self, code=None):\n        # Shells like IDLE catch the SystemExit, but listen when their\n        # stdin wrapper is closed.\n        try:\n            sys.stdin.close()\n        except:\n            pass\n        raise SystemExit(code)\n__builtin__.quit = Quitter('quit')\n__builtin__.exit = Quitter('exit')\n</code>\n</pre>\n", "senID": 10}], [{"text": ["@Kevin Little:  That is wrong.", "__call__ of the object type is called.", "And because it's a descriptor, it doesn't show up in dir():"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Kevin Little", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "#111445"}, {"text": "__call__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "dir()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; type(int).__call__(int)\n0\n&gt;&gt;&gt; type(object).__call__(object)\n&lt;object object at 0x523460&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A callable is an object allows you to use round parenthesis ( ) and eventually pass some parameters, just like functions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Every time you define a function python creates a callable object.", "In example, you could define the function func in these ways (it's the same):"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "func", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class a(object):\n    def __call__(self, *args):\n        print 'Hello'\n\nfunc = a()\n\n# or ... \ndef func(*args):\n    print 'Hello'\n</code>\n</pre>\n", "senID": 2}, {"text": ["You could use this method instead of methods like doit or run, I think it's just more clear to see obj() than obj.doit()"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "doit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "run", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["A Callable is an object that has the __call__ method.", "This means you can fake callable functions or do neat things like Partial Function Application where you take a function and add something that enhances it or fills in some of the parameters, returning something that can be called in turn (known as Currying in functional programming circles)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "__call__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Partial Function Application", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0309/"}, {"href": "http://en.wikipedia.org/wiki/Currying", "text": "Currying", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Certain typographic errors will have the interpreter attempting to call something you did not intend, such as (for example) a string.", "This can produce errors where the interpreter attempts to execute a non-callable application.", "You can see this happening in a python interpreter by doing something like the transcript below."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [nigel@k9 ~]$ python\nPython 2.5 (r25:51908, Nov  6 2007, 15:55:44) \n[GCC 4.1.2 20070925 (Red Hat 4.1.2-27)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; 'aaa'()    # &lt;== Here we attempt to call a string.\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'str' object is not callable\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Quite simply, a \"callable\" is something that can be called like a method.", "The built in function \"callable()\" will tell you whether something appears to be callable, as will checking for a call property.", "Functions are callable as are classes, class instances can be callable.", "See more about this here and here."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "call", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/built-in-funcs.html"}, {"href": "http://www.peterbe.com/plog/callable-python-objects", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["__call__ makes any object be callable as a function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__call__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This example will output 8:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Adder(object):\n  def __init__(self, val):\n    self.val = val\n\n  def __call__(self, val):\n    return self.val + val\n\nfunc = Adder(5)\nprint func(3)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Guy, \"callable is something than can be called\" is not really a good definition, do you realize that ?", "It's like saying that a voting machine is a machine that allow you to vote, that does not add any value."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In Python a callable is an object which type has a __call__ method:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__call__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Foo:\n...  pass\n... \n&gt;&gt;&gt; class Bar(object):\n...  pass\n... \n&gt;&gt;&gt; type(Foo).__call__(Foo)\n&lt;__main__.Foo instance at 0x711440&gt;\n&gt;&gt;&gt; type(Bar).__call__(Bar)\n&lt;__main__.Bar object at 0x712110&gt;\n&gt;&gt;&gt; def foo(bar):\n...  return bar\n... \n&gt;&gt;&gt; type(foo).__call__(foo, 42)\n42\n</code>\n</pre>\n", "senID": 1}, {"text": ["As simple as that :)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This of course can be overloaded:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Foo(object):\n...  def __call__(self):\n...   return 42\n... \n&gt;&gt;&gt; f = Foo()\n&gt;&gt;&gt; f()\n42\n</code>\n</pre>\n", "senID": 4}], [{"text": ["It's something you can put \"(args)\" after and expect it to work.", "A callable is usually a method or a class.", "Methods get called, classes get instantiated."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Good examples here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://web.archive.org/web/20110625071757/http://diveintopython.org/power_of_introspection/built_in_functions.html#apihelper.builtin.callable"}]}]]