[[{"text": ["I learned Python back before the 1.5.2 release, so the things that were key for me back then may not be the key things today."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That being said, a crucial thing that took me a little bit to realize, but I now consider crucial: much functionality that other languages would make intrinsic is actually made available by the standard library and the built-ins."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The language itself is small and simple, but until you're familiar with the built-ins and the \"core parts\" of the standard library (e.g., nowadays, sys, itertools, collections, copy, ...), you'll be reinventing the wheel over and over.", "So, the more time you invest in getting familiar with those parts, the smoother your progress will be.", "Every time you have a task you want to do, that doesn't seem to be directly supported by the language, first ask yourself: what built-ins or modules in the standard library will make the task much simpler, or even do it all for me?", "Sometimes there won't be any, but more often than not you'll find excellent solutions by proceeding with this mindset."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "sys", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "itertools", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "collections", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "copy", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["List comprehension (makes a list cleanly):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [x for x in y if x &gt; z]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Generator expansion (same as list comprehension but doesn't evaluate until it is used):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n (x for x in y if x &gt; z)\n</code>\n</pre>\n", "senID": 3}], [], [{"text": ["Two brain-cramping things.", "One of which doesn't apply to Python 3."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = 095\n</code>\n</pre>\n", "senID": 1}, {"text": ["Doesn't work.", "Why?", "The leading zero is an octal literal.", "The 9 is not valid in an octal literal."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def foo( bar=[] ):\n    bar.append( 1 )\n    return bar\n</code>\n</pre>\n", "senID": 3}, {"text": ["Doesn't work.", "Why?", "The mutable default object gets reused."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Learn how to use  iPython\nIt's got Tab completion.", "View all the elements in your namespace with 'whos'."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "iPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/moin/"}]}, {"text": ["After you import a module, it's easy to view the code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import os\n&gt;&gt;&gt; os?? # this display the actual source of the method\n&gt;&gt;&gt; help() # Python's interactive help. Fantastic!\n</code>\n</pre>\n", "senID": 2}, {"text": ["Most Python modules are well documented; in theory, you could learn iPython and the rest of what you'd need to know could be learned through the same tool."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["iPython also has a debug mode, pdb().", "Finally, you can even use iPython as a python enabled command line.", "The basic UNIX commands work as %magic methods.", "Any commands that aren't magic command can be executed:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; os.system('cp file1 file2')\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Don't have variable names that are types.", "For example, don't name a variable \"file\" or \"dict\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Decorators.", "Writing your own is not something you might want to do right away, but knowing that @staticmethod and @classmethod are available from the beginning (and the difference between what they do) is a real plus."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "@staticmethod", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "@classmethod", "childNum": 0, "tag": "code", "childList": []}]}], [{"tag": "ul", "num": 9, "lis": [{"text": "What ", "tag": "none", "senID": 0}, {"text": "That ", "tag": "none", "senID": 1}, {"text": "Using ", "tag": "none", "senID": 2}, {"text": "Pretty much everything in the ", "tag": "none", "senID": 3}, {"text": "How the ", "tag": "none", "senID": 4}, {"text": "How default arguments to functions work internally (i.e. what ", "tag": "none", "senID": 5}, {"text": "How (why, really) to design functions so that they are useful in conjunction with ", "tag": "none", "senID": 6}, {"text": "The role of ", "tag": "none", "senID": 7}, {"text": "What ", "tag": "none", "senID": 8}]}], [{"tag": "ul", "num": 3, "lis": [{"text": "using ", "tag": "none", "senID": 0}, {"text": "you can run ", "tag": "none", "senID": 1}, {"text": "you can run ", "tag": "none", "senID": 2}]}], [{"text": ["Most helpful: Dive Into Python.", "As a commenter points out, if you're learning Python 3, Dive Into Python 3 is more applicable."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Dive Into Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org/"}, {"text": "Dive Into Python 3", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://diveintopython3.org/"}]}, {"text": ["Known about sooner: virtualenv."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "virtualenv", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/virtualenv"}]}], [{"text": ["List comprehensions, if you're coming to Python fresh (not from an earlier version). "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "List comprehensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}], [{"text": ["I implemented plenty of recursive directory walks by hand before I learned about os.walk()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Closures.", "Clean and concise, without having to resort to using a Strategy Pattern unlike languages such as Java"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Lambda functions"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.diveintopython.org/power_of_introspection/lambda_functions.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.diveintopython.org/power_of_introspection/lambda_functions.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org/power%5Fof%5Fintrospection/lambda%5Ffunctions.html"}]}], [{"text": ["If you learn from a good book, it will not only teach you the language, it will teach you the common idioms.", "The idioms are valuable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, here is the standard idiom for initializing a class instance with a list:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n    def __init__(self, lst=None):\n        if lst is None:\n            self.lst = []\n        else:\n            self.lst = lst\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you learn this as an idiom from a book, you don't have to learn the hard way why this is the standard idiom.", "@S.Lott already explained this one: if you try to make the default initializer be an empty list, the empty list gets evaluated just once (at compile time) and every default-initialized instance of your class gets the same list instance, which was not what was intended here."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "why", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "same", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Some idioms protect you from non-intended effects; some help you get best performance out of the language; and some are just small points of style, which help other Python fans understand your code better."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I learned out of the book Learning Python and it introduced me to some of the idioms."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Learning Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.rmi.net/~lutz/about-lp.html"}]}, {"text": ["Here's a web page devoted to idioms:  http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"}]}, {"text": ["P.S.", "Python code that follows the best-practice Python idioms often is called \"Pythonic\" code."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["That a tuple of a single item must end with a comma, or it won't be interpreted as a tuple. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["pprint() is very handy (yes, 2 p's) "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["reload() is useful when you're re-testing a module while making lots of rapid changes to a dependent module. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["And learn as many common \"idioms\" as you can, otherwise you'll bang your head looking for a better way to do something, when the idiom really is regarded as the best way (e.g.", "ugly expressions like ' '.join(), \nor the answer to why there is no isInt(string) function.... the answer is you can just wrap the usage of a \"possible\" integer with a try: and then catch the exception if it's not a valid int.", "The solution works well, but it sounds like a terrible answer when you first encounter it, so you can waste a lot of time convincing yourself it really is a good approach. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Those are some things that wasted several hours of my time to determine that my first draft of some code which felt wrong, really was acceptable. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Readings from python.org:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["http://wiki.python.org/moin/BeginnerErrorsWithPythonProgramming\nhttp://wiki.python.org/moin/PythonWarts"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "http://wiki.python.org/moin/BeginnerErrorsWithPythonProgramming", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/BeginnerErrorsWithPythonProgramming"}, {"href": "http://wiki.python.org/moin/PythonWarts", "text": "http://wiki.python.org/moin/PythonWarts", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["One of the coolest things I learned about recently was the commands module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import commands\n&gt;&gt;&gt; commands.getoutput('uptime')\n'18:24  up 10:22, 7 users, load averages: 0.37 0.45 0.41'\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's like os.popen or os.system but without all of the DeprecationWarnings."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["And let's not forget PDB (Python Debugger):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n % python -m pdb poop.py\n</code>\n</pre>\n", "senID": 4}], [{"text": ["When I started with python, started out with main methods from the examples.", "This was because I didn't know better, after that I found this on how to create a better main method."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.artima.com/weblogs/viewpost.jsp?thread=4829"}]}], [{"text": ["Sequential imports overwrite:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you import two files like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from foo import *\nfrom bar import *\n</code>\n</pre>\n", "senID": 2}, {"text": ["If both foo.py and bar.py have a function named fubar(), having imported the files this way, when you call fubar, fubar as defined in bar.py will be executed.", "The best way to avoid this is to do this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import foo\nimport bar\n</code>\n</pre>\n", "senID": 4}, {"text": ["and then call foo.fubar or bar.fubar.", "This way, you ALWAYS know which file's definition of fubar will be executed."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I wish I'd known right off the bat how to code idiomatically in Python.", "You can pick up any language you like and start coding in it like it's C, Java, etc.", "but ideally you'll learn to code in \"the spirit\" of the language.", "Python is particularly relevant, as I think it has a definite style of its own."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["While I found it a little later in my Python career than I would have liked, this excellent article wraps up many Python idioms and the little tricks that make it special.", "Several of the things people have mentioned in their answers so far are contained within:\nCode Like a Pythonista: Idiomatic Python."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Code Like a Pythonista: Idiomatic Python", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"}]}, {"text": ["Enjoy!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Dropping into interactive mode in IPython"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from IPython.Shell import IPShellEmbed\nipshell = IPShellEmbed()\nipshell()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Pretty printing:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print \"%s world\" %('hello')\nhello world\n</code>\n</pre>\n", "senID": 1}, {"text": ["%s for string"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["%d for integer"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["%f for float"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["%.xf for exactly x many decimal places of a float.", "If the float has lesser decimals that indicated, then 0s are added"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Maybe a touch more advanced, but I wish I'd known that you don't use threads to take advantage of multiple cores in (C)python.", "You use the multiprocessing library."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "multiprocessing", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Tab completion and general readline support, including histories, even in the regular python shell."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ cat ~/.pythonrc.py \n#!/usr/bin/env python\n\ntry:\n    import readline\nexcept ImportError:\n    print(\"Module readline not available.\")\nelse:\n    import rlcompleter\n    readline.parse_and_bind(\"tab: complete\")\n\n    import os\n    histfile = os.path.join(os.environ[\"HOME\"], \".pyhist\")\n    try:\n        readline.read_history_file(histfile)\n    except IOError:\n        pass\n    import atexit\n    atexit.register(readline.write_history_file, histfile)\n    del os, histfile\n</code>\n</pre>\n", "senID": 1}, {"text": ["and then add a line to your .bashrc"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n export PYTHONSTARTUP=~/.pythonrc.py\n</code>\n</pre>\n", "senID": 3}, {"text": ["These two things lead to an exploratory programming style of \"it looks like this library might do what I want\", so then I fire up the python shell and then poke around using tab-completion and the help() command until I find what I need."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Generators and list comprehensions are more useful than you might think.", "Don't just ignore them."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I really like list comprehension and all other semifunctional constructs.", "I wish I had known those when I was in my first Python project."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What I really liked: List comprehensions, closures (and high-order functions), tuples, lambda functions, painless bignumbers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What I wish I had known about sooner: The fact that using Python idioms in code (e.g.", "list comprehensions instead of loops over lists) was faster."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I wish I knew well a functional language.", "After playing a bit with Clojure, I realized that lots of Python's functional ideas are borrowed from Lisp or other functional langs"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["That multi-core was the future.", "Still love Python.", "It's writes a fair bit of my code for me."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Functional programming tools, like all and any"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "all", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "any", "childNum": 0, "tag": "code", "childList": []}]}]]