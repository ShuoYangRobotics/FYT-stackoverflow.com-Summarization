[[{"text": ["Q1.", "How is this possible?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Q1. How is this possible?", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["It is possible because the Python interpreter that is implemented by PyPy does not run on top of CPython (although it can) - first it is translated into another language (such as C) which can then be compiled and run independently (and often much faster) than CPython.", "Refer http://codespeak.net/pypy/dist/pypy/doc/translation.html for details."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://codespeak.net/pypy/dist/pypy/doc/translation.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://codespeak.net/pypy/dist/pypy/doc/translation.html"}]}, {"text": ["Manual memory management (which is what CPython does with it's counting) can be slower than automatic management in some cases. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Limitations in the implementation of the CPython interpreter preclude certain optimisations that PyPy can do (eg.", "fine grained locks)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["As Marcelo mentioned, the JIT.", "Being able to on the fly confirm the type of an object can save you the need to do multiple pointer dereferences to finally arrive at the method you want to call. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Q2.", "Which Python implementation was used to implement PyPy?"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Q2. Which Python implementation was used to implement PyPy?", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["The PyPy interpreter is implemented in RPython which is a statically typed subset of Python (the language and not the CPython interpreter).", "- Refer http://codespeak.net/pypy/trunk/pypy/doc/architecture.html for details."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://codespeak.net/pypy/trunk/pypy/doc/architecture.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://codespeak.net/pypy/trunk/pypy/doc/architecture.html"}]}, {"text": ["Q3.", "And what are the chances of a PyPyPy or PyPyPyPy beating their score?"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Q3. And what are the chances of a PyPyPy or PyPyPyPy beating their score?", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["That would depend on the implementation of these hypothetical interpreters.", "If one of them for example took the source, did some kind of analysis on it and converted it directly into tight target specific assembly code after running for a while, I imagine it would be quite faster than CPython. "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Update: Recently, on a carefully crafted example, PyPy outperformed a similar C program compiled with gcc -O3.", "It's a contrived case but does exhibit some ideas."], "childNum": 3, "tag": "p", "senID": 9, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "carefully crafted example", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://morepypy.blogspot.com/2011/02/pypy-faster-than-c-on-carefully-crafted.html"}, {"text": "gcc -O3", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Q4.", "Why would anyone try something like this?"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "Q4. Why would anyone try something like this?", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["From the official site.", "http://codespeak.net/pypy/trunk/pypy/doc/architecture.html#id7"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "http://codespeak.net/pypy/trunk/pypy/doc/architecture.html#id7", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://codespeak.net/pypy/trunk/pypy/doc/architecture.html#id7"}]}], [{"text": ["PyPy is implemented in Python, but it implements a JIT compiler to generate native code on the fly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The reason to implement PyPy on top of Python is probably that it is simply a very productive language, especially since the JIT compiler makes the host language's performance somewhat irrelevant."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["PyPy is written in Restricted Python.", "It does not run on top of the CPython interpreter, as far as I know.", "Restricted Python is a subset of the Python language.", "AFAIK, the PyPy interpreter is compiled to machine code, so when installed it does not utilize a python interpreter at runtime."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Your question seems to expect the PyPy interpreter is running on top of CPython while executing code.", "Edit: Yes, to use PyPy you first translate the PyPy python code, either to C and build with gcc, to jvm byte code, or to .Net CLI code.", "See Getting Started"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "Getting Started", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://codespeak.net/pypy/trunk/pypy/doc/getting-started-python.html"}]}]]