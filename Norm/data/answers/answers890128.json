[[{"text": ["Are you talking about lambda functions?", "Like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f = lambda x: x**2 + 2*x - 5\n</code>\n</pre>\n", "senID": 1}, {"text": ["Those things are actually quite useful.", "Python supports a style of programming called functional programming where you can pass functions to other functions to do stuff.", "Example:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "functional programming", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</code>\n</pre>\n", "senID": 3}, {"text": ["sets mult3 to [3, 6, 9], those elements of the original list that are multiples of 3.", "This is shorter (and, one could argue, clearer) than"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "mult3", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[3, 6, 9]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def filterfunc(x):\n    return x % 3 == 0\nmult3 = filter(filterfunc, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</code>\n</pre>\n", "senID": 5}, {"text": ["Of course, in this particular case, you could do the same thing as a list comprehension:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]\n</code>\n</pre>\n", "senID": 7}, {"text": ["(or even as range(3,10,3)) but there are other cases, like constructing functions as return values from other functions, where you can't use a list comprehension and a lambda function may be the shortest way to write something out.", "Like"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "range(3,10,3)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def transform(n):\n    return lambda x: x + n\nf = transform(3)\nf(4) # is 7\n</code>\n</pre>\n", "senID": 9}, {"text": ["I use lambda functions on a regular basis.", "It took a while to get used to them but once I did I'm glad Python has them ;-)"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["A lambda is part of a very important abstraction mechanism which deals with higher order functions.", "To get proper understanding of its value, please watch high quality lessons from Abelson and Sussman, and read the book SICP"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Abelson and Sussman", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/?"}, {"href": "http://mitpress.mit.edu/sicp/", "text": "SICP", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["These are relevant issues in modern software business, and becoming ever more popular."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I doubt lambda will go away.", "See Guido's post about finally giving up trying to remove it.", "http://mail.python.org/pipermail/python-dev/2006-February/060415.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://mail.python.org/pipermail/python-dev/2006-February/060415.html", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-dev/2006-February/060415.html"}]}, {"text": ["You might check out this post for more of a history about the deal behind Python's functional features:\nhttp://python-history.blogspot.com/2009/04/origins-of-pythons-functional-features.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://python-history.blogspot.com/2009/04/origins-of-pythons-functional-features.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python-history.blogspot.com/2009/04/origins-of-pythons-functional-features.html"}]}, {"text": ["My own two cents: Rarely is lambda worth it as far as clarity goes.", "Generally there is a more clear solution that doesn't include lambda."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The two-line summary:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Pretty much anything you can do with lambda you can do better with either named functions or list and generator expressions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lambda", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Consequently, for the most part you should just one of those in basically any situation (except maybe for scratch code written in the interactive interpreter)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I've been using Python for a few years and I've never run in to a case where I've needed lambda.", "Really, as the tutorial states, it's just for syntactic sugar."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "needed", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "tutorial", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html#lambda-forms"}]}], [{"text": ["I can't speak to python's particular implementation of lambda, but in general lambda functions are really handy.", "They're a core technique (maybe even THE technique) of functional programming, and they're also very useuful in object-oriented programs.", "For certain types of problems, they're the best solution, so certainly shouldn't be forgotten!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I suggest you read up on closures and the map function (that links to python docs, but it exists in nearly every language that supports functional constructs) to see why it's useful."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "closures", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Closure%5F%28computer%5Fscience%29"}, {"href": "http://docs.python.org/tutorial/datastructures.html", "text": "map function", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["As stated above, the lambda operator in Python defines an anonymous function, and in Python functions are closures.", "It is important not to confuse the concept of closures with the operator lambda, which is merely syntactic methadone for them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When I started in Python a few years ago, I used lambdas a lot, thinking they were cool, along with list comprehensions.", "However, I wrote and have to maintain a big website written in Python, with on the order of several thousand function points.", "I've learnt from experience that lambdas might be OK to prototype things with, but offer nothing over inline functions (named closures) except for saving a few key-stokes, or sometimes not."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Basically this boils down to several points:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "it is easier to read software that is explicitly written using meaningful names. Anonymous closures by definition cannot have a meaningful name, as they have no name. This brevity seems, for some reason, to also infect lambda parameters, hence we often see examples like lambda x: x+1 ", "tag": "none", "senID": 3}, {"text": "it is easier to reuse named closures, as they can be referred to by name more than once, when there is a name to refer to them by.", "tag": "none", "senID": 4}, {"text": "it is easier to debug code that is using named closures instead of lambdas, because the name will appear in tracebacks, and around the error.", "tag": "none", "senID": 5}]}, {"text": ["That's enough reason to round them up and convert them to named closures.", "However, I hold two other grudges against anonymous closures."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The first grudge is simply that they are just another unnecessary keyword cluttering up the language."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["The second grudge is deeper and on the paradigm level, i.e.", "I do not like that they promote a functional-programming style, because that style is less flexible than the message passing, object oriented or procedural styles, because the lambda calculus is not Turing-complete (luckily in Python, we can still break out of that restriction even inside a lambda).", "The reasons I feel lambdas promote this style are:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["There is an implicit return, i.e.", "they seem like they 'should' be functions."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["They are an alternative state-hiding mechanism to another, more explicit, more readable, more reusable and more general mechanism: methods."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]}, {"text": ["I try hard to write lambda-free Python, and remove lambdas on sight.", "I think Python would be a slightly better language without lambdas, but that's just my opinion."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["I find lambda useful for a list of functions that do the same, but for different circumstances.", "Like the mozilla plural rules."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "mozilla plural rules", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "https://developer.mozilla.org/En/Localization_and_Plurals"}]}, {"code": "<pre>\n<code>\n plural_rules = [\n    lambda n: 'all',\n    lambda n: 'singular' if n == 1 else 'plural',\n    lambda n: 'singular' if 0 &lt;= n &lt;= 1 else 'plural',\n    ...\n]\n# Call plural rule #1 with argument 4 to find out which sentence form to use.\nplural_rule[1](4) # returns 'plural'\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you'd have to define a function for all of those you'd go mad by the end of it.", "Also it wouldn't be nice with function names like plural_rule_1, plural_rule_2, etc.", "And you'd need to eval() it when you're depending on a variable function id."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["First congrats that managed to figure out lambda.", "In my opinion this is really powerful construct to act with.", "The trend these days towards functional programming languages is surely an indicator that it neither should be avoided nor it will be redefined in the near future."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You just have to think a little bit different.", "I'm sure soon you will love it.", "But be careful if you deal only with python.", "Because the lambda is not a real closure, it is \"broken\" somehow"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["pythons lambda is broken"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pythons lambda is broken", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://math.andrej.com/2009/04/09/pythons-lambda-is-broken/"}]}], [{"text": ["Note that this isn't a condemnation of anything.", "Everybody has a different set of things that don't come easily."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["No."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It's not obscure.", "The past 2 teams I've worked on, everybody used this feature all the time."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I've seen no serious proposals to redefine it in Python, beyond fixing the closure semantics a few years ago."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["It's not less clear, if you're using it right.", "On the contrary, having more language constructs available increases clarity."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "increases", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Lambda is like buffer overflow?", "Wow.", "I can't imagine how you're using lambda if you think it's a \"maintenance nightmare\"."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I use it quite often, mainly as a null object or to partially bind parameters to a function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "null object", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Null%5FObject%5Fpattern"}]}, {"text": ["Here are examples:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n {\n\tDATA_PACKET: self.handle_data_packets\n\tNET_PACKET: self.handle_hardware_packets\n}.get(packet_type, lambda x : None)(payload)\n</code>\n</pre>\n", "senID": 2}, {"text": ["let say that I have the following API"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def dump_hex(file, var)\n    # some code\n\tpass\n\nclass X(object):\n    #...\n\tdef packet_received(data):\n\t\t# some kind of preprocessing\n\t\tself.callback(data)\n    #...\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then, when I wan't to quickly dump the recieved data to a file I do that:   "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n dump_file = file('hex_dump.txt','w')\nX.callback = lambda (x): dump_hex(dump_file, x)\n...\ndump_file.close()\n</code>\n</pre>\n", "senID": 6}], [{"text": ["One of the nice things about lambda that's in my opinion understated is that it's way of deferring an evaluation for simple forms till the value is needed.", "Let me explain. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lambda", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Many library routines are implemented so that they allow certain parameters to be callables (of whom lambda is one).", "The idea is that the actual value will be computed only at the time when it's going to be used (rather that when it's called).", "An (contrived) example might help to illustrate the point.", "Suppose you have a routine which which was going to do log a given timestamp.", "You want the routine to use the current time minus 30 minutes.", "You'd call it like so"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n log_timestamp(datetime.datetime.now() - datetime.timedelta(minutes = 30))\n</code>\n</pre>\n", "senID": 2}, {"text": ["Now suppose the actual function is going to be called only when a certain event occurs and you want the timestamp to be computed only at that time.", "You can do this like so"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n log_timestamp(lambda : datetime.datetime.now() - datetime.timedelta(minutes = 30))\n</code>\n</pre>\n", "senID": 4}, {"text": ["Assuming the log_timestamp can handle callables like this, it will evaluate this when it needs it and you'll get the timestamp at that time. "], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "log_timestamp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["There are of course alternate ways to do this (using the operator module for example) but I hope I've conveyed the point. "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "operator", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Update: Here is a slightly more concrete real world example. "], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "Update", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://www.mail-archive.com/python-dev@python.org/msg02084.html", "text": "Here", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["lambdas are extremely useful in GUI programming.", "For example, lets say you're creating a group of buttons and you want to use a single paramaterized callback rather than a unique callback per button.", "Lambda lets you accomplish that with ease:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for value in [\"one\",\"two\",\"three\"]:\n    b = tk.Button(label=value, command=lambda arg=value: my_callback(arg))\n    b.pack()\n</code>\n</pre>\n", "senID": 1}, {"text": ["The alternative is to create a separate callback for each button which can lead to duplicated code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Lambdas are deeply liked to functional programming style in general.", "The idea that you can solve problems by applying a function to a data, and merging the results, is what google uses to implement most of its algorithms.", "Programs written in functional rpogramming style, are easily parrallelized  and hence are becoming more and more important with modern multiu core machiines.", "So in short, NO you should not forget them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Lambda is a procedure constructor.", "You can synthesize programs at run-time, although Python's lambda is not very powerful.", "Note that few people understand that kind of programming."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I started reading David Mertz's book today 'Text Processing in Python.", "' While he has a fairly terse description of Lambda's the examples in the first chapter combined with the explanation in Appendix A made them jump off the page for me (finally) and all of a sudden I understood their value.", "That is not to say his explanation will work for you and I am still at the discovery stage so I will not attempt to add to these responses other than the following:\nI am new to Python\nI am new to OOP\nLambdas were a struggle for me\nNow that I read Mertz, I think I get them and I see them as very useful as I think they allow a cleaner approach to programming.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["He reproduces the Zen of Python, one line of which is Simple is better than complex.", "As a non-OOP programmer reading code with lambdas (and until last week list comprehensions) I have thought-This is simple?.", "I finally realized today that actually these features make the code much more readable, and understandable than the alternative-which is invariably a loop of some sort.", "I also realized that like financial statements-Python was not designed for the novice user, rather it is designed for the user that wants to get educated.", "I can't believe how powerful this language is.", "When it dawned on me (finally) the purpose and value of lambdas I wanted to rip up about 30 programs and start over putting in lambdas where appropriate."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Simple is better than complex.", "childNum": 0, "tag": "i", "pos": 0, "childList": []}, {"text": "This is simple?", "childNum": 0, "tag": "i", "pos": 1, "childList": []}]}], [{"text": ["In Python, lambda is just a way of defining functions inline,"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lambda", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = lambda x: x + 1\nprint a(1)\n</code>\n</pre>\n", "senID": 1}, {"text": ["and.."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def a(x): return x + 1\nprint a(1)\n</code>\n</pre>\n", "senID": 3}, {"text": ["..are the exact same."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "exact", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["There is nothing you can do with lambda which you cannot do with a regular function - in Python functions are an object just like anything else, and lambdas simply define a function:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = lambda x: x + 1\n&gt;&gt;&gt; type(a)\n&lt;type 'function'&gt;\n</code>\n</pre>\n", "senID": 6}, {"text": ["I honestly think the lambda keyword is redundant in Python - I have never had the need to use them (or seen one used where a regular function, a list-comprehension or one of the many builtin functions could have been better used instead)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["For a completely random example, from the article \"Python\u2019s lambda is broken!", "\":"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "\"Python\u2019s lambda is broken!\":", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://math.andrej.com/2009/04/09/pythons-lambda-is-broken/"}]}, {"text": ["I would argue, even if that did work, it's horribly and \"unpythonic\", the same functionality could be written in countless other ways, for example:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; n = 4\n&gt;&gt;&gt; [i + n for i in range(10)]\n[4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n</code>\n</pre>\n", "senID": 10}, {"text": ["Yes, it's not the same, but I have never seen a cause where generating a group of lambda functions in a list has been required..", "It might make sense in other languages, but Python is not Haskell (or Lisp, or ...)"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "never", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Hmm, dbr's comment is very puzzling.", "I tried his example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; fs = [(lambda n: i+n) for i in range(10)]\n\n&gt;&gt;&gt; [fs[i](3) for i in range(10)]\n[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n&gt;&gt;&gt; for i in range(10):\n...     print fs[i](3)\n... \n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</code>\n</pre>\n", "senID": 1}, {"text": ["So far, so good.", "This makes sense to me.", "But what the heck is going on here?    "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; fs[0](3)\n12\n&gt;&gt;&gt; fs[1](3)\n12\n&gt;&gt;&gt; fs[2](3)\n12\n&gt;&gt;&gt; fs[3](3)\n12\n</code>\n</pre>\n", "senID": 3}, {"text": ["I'm completely stumped.", "Am I missing something obvious here?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Ah, I just found the answer to my own question:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["http://stackoverflow.com/questions/1107210/python-lambda-problems"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://stackoverflow.com/questions/1107210/python-lambda-problems", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1107210/python-lambda-problems"}]}], [{"text": ["lambda is just a fancy way of saying function.", "Other than its name, there is nothing obscure, intimidating or cryptic about it.", "When you read the following line, replace lambda by function in your mind:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "lambda", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "function", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "lambda", "childNum": 0, "tag": "code", "childList": []}, {"text": "function", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f = lambda x: x + 1\n&gt;&gt;&gt; f(3)\n4\n</code>\n</pre>\n", "senID": 1}, {"text": ["It just defines a function of x.", "Some other languages, like R, say it explicitly:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "R", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt; f = function(x) { x + 1 }\n&gt; f(3)\n4\n</code>\n</pre>\n", "senID": 3}, {"text": ["You see?", "It's one of the most natural things to do in programming. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I can give you an example where I actually needed lambda serious.", "I'm making a graphical program, where the use right clicks on a file and assigns it one of three options.", "It turns out that in Tkinter (the GUI interfacing program I'm writing this in), when someone presses a button, it can't be assigned to a command that takes in arguments.", "So if I chose one of the options and wanted the result of my choice to be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["print 'hi there'"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Then no big deal.", "But what if I need my choice to have a particular detail.", "For example, if I choose choice A, it calls a function that takes in some argument that is dependent on the choice A, B or C, TKinter could not support this.", "Lamda was the only option to get around this actually..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]