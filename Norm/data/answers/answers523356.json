[[{"text": ["It's simple:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.http import HttpResponseRedirect\n\ndef myview(request):\n    ...\n    return HttpResponseRedirect(\"/path/\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["More info in the official Django docs"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "official Django docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpResponseRedirect"}]}, {"text": ["Update"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["There is apparently a better way of doing this in Django now using generic views."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "generic views", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Example -"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n from django.views.generic.simple import redirect_to\n\nurlpatterns = patterns('',   \n    (r'^one/$', redirect_to, {'url': '/another/'}),\n\n    #etc...\n)\n</code>\n</pre>\n", "senID": 6}, {"text": ["There is more in the generic views documentation.", "Credit - Carles Barrob\u00e9s."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "generic views documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-simple-redirect-to"}, {"text": "Carles Barrob\u00e9s", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/166761/carles-barrobes"}]}], [{"text": ["Depending on what you want (i.e.", "if you do not want to do any additional pre-processing), it is simpler to just use Django's redirect_to generic view:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.views.generic.simple import redirect_to\n\nurlpatterns = patterns('',\n    # static media (development only)    \n    (r'^one/$', redirect_to, {'url': '/another/'}),\n\n    #etc...\n)\n</code>\n</pre>\n", "senID": 1}, {"text": ["See http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-simple-redirect-to for more advanced examples"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-simple-redirect-to", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-simple-redirect-to"}]}], [{"text": ["There's actually a simpler way than having a view for each redirect - you can do it directly in urls.py:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "directly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "urls.py", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from django.http import HttpResponsePermanentRedirect\n\nurlpatterns = patterns(\n    '',\n    # ...normal patterns here...\n    (r'^bad-old-link\\.php',\n     lambda request: HttpResponsePermanentRedirect('/nice-link')),\n)\n</code>\n</pre>\n", "senID": 1}, {"text": ["A target can be a callable as well as a string, which is what I'm using here."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "A target can be a callable as well as a string", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/1.0/topics/http/urls/#passing-callable-objects-instead-of-strings"}]}], [{"text": ["Since Django 1.1, you can also use the simpler redirect shortcut:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "redirect", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/http/shortcuts/#redirect"}]}, {"code": "<pre>\n<code>\n from django.shortcuts import redirect\n\ndef myview(request):\n    return redirect('/path')\n</code>\n</pre>\n", "senID": 1}, {"text": ["It also takes an optional permanent=True keyword argument."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["With Django version 1.3, the class based approach is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.conf.urls.defaults import patterns, url\nfrom django.views.generic import RedirectView\n\nurlpatterns = patterns('',\n    url(r'^some-url/$', RedirectView.as_view(url='/redirect-url/'), name='some_redirect'),\n)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This example lives in in urls.py"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]