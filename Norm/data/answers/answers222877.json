[[{"text": ["The benefits of super() in single-inheritance are minimal -- mostly, you don't have to hard-code the name of the base class into every method that uses its parent methods."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "super()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["However, it's almost impossible to use multiple-inheritance without super().", "This includes common idioms like mixins, interfaces, abstract classes, etc.", "This extends to code that later extends yours.", "If somebody later wanted to write a class that extended Child and a mixin, their code would not work properly."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "super()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Child", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}], [{"text": ["John is absolutely right about the benefits/uses of super."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is a good article on the pitfalls of super(): Python's Super Considered Harmful.", "Despite the name, it is not an inflammatory article, and carefully describes the goals and uses of super() as well as the issues."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "pitfalls", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "super()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://fuhm.net/super-harmful/", "text": "Python's Super Considered Harmful", "childNum": 0, "tag": "a", "childList": []}, {"text": "super()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Doesn't all of this assume that the base class is inherited from object?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class A:\n    def __init__(self):\n        print \"A.__init__()\"\n\nclass B(A):\n    def __init__(self):\n        print \"B.__init__()\"\n        super(B, self).__init__()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Will not work.", "class A must be derived from object, i.e: class A(object)"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "class A", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "object", "childNum": 0, "tag": "code", "childList": []}, {"text": "class A(object)", "childNum": 0, "tag": "code", "childList": []}]}]]