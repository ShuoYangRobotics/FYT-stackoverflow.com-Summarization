[[{"text": ["A mixin is a special kind of MI.", "There are two main situations where mixins are used:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For an example of number one, consider werkzeug's request and response system.", "I can make a plain old request object by saying:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "werkzeug's request and response system", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://werkzeug.pocoo.org/docs/wrappers/"}]}, {"code": "<pre>\n<code>\n from werkzeug import BaseRequest\n\nclass Request(BaseRequest):\n    pass\n</code>\n</pre>\n", "senID": 2}, {"text": ["If I want to add accept header support, I would make that"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from werkzeug import BaseRequest, AcceptMixin\n\nclass Request(BaseRequest, AcceptMixin):\n    pass\n</code>\n</pre>\n", "senID": 4}, {"text": ["If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthorizationMixin\n\nclass Request(BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthorizationMixin):\n    pass\n</code>\n</pre>\n", "senID": 6}, {"text": ["The difference is subtle, but in the above examples, the mixin classes weren't made to stand on their own.", "In more traditional MI, The AuthenticationMixin (for example) would probably be something more like Authenticator.", "That is, the class would probably be designed to stand on its own."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["First, you should note that mixins only exist in multiple-inheritance languages.", "You can't do a mixin in Java or C#. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Basically, a mixin is a stand-alone base type that provides limited functionality and polymorphic resonance for a child class.", "If you're thinking in C#, think of an interface that you don't have to actually implement because it's already implemented; you just inherit from it and benefit from its functionality. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Mixins are typically narrow in scope and not meant to be extended. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["[edit -- as to why:]"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I suppose I should address why, since you asked.", "The big benefit is that you don't have to do it yourself over and over again.", "In C#, the biggest place where a mixin could benefit might be from the Disposal pattern.", "Whenever you implement IDisposable, you almost always want to follow the same pattern, but you end up writing and re-writing the same basic code with minor variations.", "If there were an extendable Disposal mixin, you could save yourself a lot of extra typing. "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Disposal pattern", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://blog.jawaji.com/2008/08/disposal-pattern-c.html"}]}, {"text": ["[edit 2 -- to answer your other questions]"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Yes.", "The difference between a mixin and standard multiple inheritance is just a matter of semantics; a class that has multiple inheritance might utilize a mixin as part of that multiple inheritance. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The point of a mixin is to create a type that can be \"mixed in\" to any other type via inheritance without affecting the inheriting type while still offering some beneficial functionality for that type. "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Again, think of an interface that is already implemented. "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["I personally don't use mixins since I develop primarily in a language that doesn't support them, so I'm having a really difficult time coming up with a decent example that will just supply that \"ahah!", "\" moment for you.", "But I'll try again.", "I'm going to use an example that's contrived -- most languages already provide the feature in some way or another -- but that will, hopefully, explain how mixins are supposed to be created and used.", "Here goes:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Suppose you have a type that you want to be able to serialize to and from XML.", "You want the type to provide a \"ToXML\" method that returns a string containing an XML fragment with the data values of the type, and a \"FromXML\" that allows the type to reconstruct its data values from an XML fragment in a string.", "Again, this is a contrived example, so perhaps you use a file stream, or an XML Writer class from your language's runtime library... whatever.", "The point is that you want to serialize your object to XML and get a new object back from XML. "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["The other important point in this example is that you want to do this in a generic way.", "You don't want to have to implement a \"ToXML\" and \"FromXML\" method for every type that you want to serialize, you want some generic means of ensuring that your type will do this and it just works.", "You want code reuse. "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["If your language supported it, you could create the XmlSerializable mixin to do your work for you.", "This type would implement the ToXML and the FromXML methods.", "It would, using some mechanism that's not important to the example, be capable of gathering all the necessary data from any type that it's mixed in with to build the XML fragment returned by ToXML and it would be equally capable of restoring that data when FromXML is called. "], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["And.. that's it.", "To use it, you would have any type that needs to be serialized to XML inherit from XmlSerializable.", "Whenever you needed to serialize or deserialize that type, you would simply call ToXML or FromXML.", "In fact, since XmlSerializable is a fully-fledged type and polymorphic, you could conceivably build a document serializer that doesn't know anything about your original type, accepting only, say, an array of XmlSerializable types. "], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["Now imagine using this scenario for other things, like creating a mixin that ensures that every class that mixes it in logs every method call, or a mixin that provides transactionality to the type that mixes it in.", "The list can go on and on. "], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["If you just think of a mixin as a small base type designed to add a small amount of functionality to a type without otherwise affecting that type, then you're golden. "], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["Hopefully.", ":)"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}], [{"text": ["I'd advise against mix-ins in new Python code, if you can find any other way around it (such as composition-instead-of-inheritance, or just monkey-patching methods into your own classes) that isn't much more effort."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In old-style classes you could use mix-ins as a way of grabbing a few methods from another class.", "But in the new-style world everything, even the mix-in, inherits from object.", "That means that any use of multiple inheritance naturally introduces MRO issues."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "MRO issues", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.python.org/download/releases/2.2.3/descrintro/#mro"}]}, {"text": ["There are ways to make multiple-inheritance MRO work in Python, most notably the super() function, but it means you have to do your whole class hierarchy using super(), and it's considerably more difficult to understand the flow of control."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["There's a short series of articles (Part 1, Part 2) on Artima that talk about mixins from a Python perspective.", "Don't be deceived by the \"Considered Harmful\" title.", "They give of a good overview of what mixins are and when it is or is not a good idea to use them."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Part 1", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.artima.com/weblogs/viewpost.jsp?thread=246341"}, {"text": "Part 2", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.artima.com/weblogs/viewpost.jsp?thread=246483"}]}], [{"text": ["Maybe an example from ruby can help:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can include the mixin Comparable and define one function \"&lt;=&gt;(other)\", the mixin provides all those functions:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Comparable", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"&lt;=&gt;(other)\"", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &lt;(other)\n&gt;(other)\n==(other)\n&lt;=(other)\n&gt;=(other)\nbetween?(other)\n</code>\n</pre>\n", "senID": 2}, {"text": ["It does this by invoking &lt;=&gt;(other) and giving back the right result."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "&lt;=&gt;(other)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["\"instance &lt;=&gt; other\" returns 0 if both objects are equal, less than 0 if instance is bigger than other and more than 0 if other is bigger."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "\"instance &lt;=&gt; other\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "instance", "childNum": 0, "tag": "code", "childList": []}, {"text": "other", "childNum": 0, "tag": "code", "childList": []}, {"text": "other", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Perhaps a couple of examples will help."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you're building a class and you want it to act like a dictionary, you can define all the various __ __ methods necessary.", "But that's a bit of a pain.", "As an alternative, you can just define a few, and inherit (in addition to any other inheritance) from UserDict.DictMixin (moved to collections.DictMixin in py3k).", "This will have the effect of automatically defining all the rest of the dictionary api."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "__ __", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "UserDict.DictMixin", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "collections.DictMixin", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["A second example: the GUI toolkit wxPython allows you to make list controls with multiple columns (like, say, the file display in Windows Explorer).", "By default, these lists are fairly basic.", "You can add additional functionality, such as the ability to sort the list by a particular column by clicking on the column header, by inheriting from ListCtrl and adding appropriate mixins."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It's not a Python example but in the D programing language uses the term mixin is uaed to refer to a construct used much the same way; adding a pile of stuff to a class. "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "the D programing language", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.digitalmars.com/d/1.0/template-mixin.html"}, {"href": "http://www.digitalmars.com/d/1.0/template-mixin.html", "text": "mixin", "childNum": 1, "tag": "a", "childList": [{"text": "mixin", "tag": "code"}]}, {"text": "mixin", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In D (which by the way doesn't do MI) this is done by inserting a template (think syntactically aware and safe macros and you will be close) into a scope.", "This allows for a single line of code in a class, struct, function, module or whatever to expand to any number of declarations."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I could type up a long reply, but this article is quite good and answers your question:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.linuxjournal.com/node/4540/print"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.linuxjournal.com/node/4540/print", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.linuxjournal.com/node/4540/print"}]}], [{"text": ["I read that you have a c# background.", "So a good starting point might be a mixin implementation for .NET."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You might want to check out the codeplex project at http://remix.codeplex.com/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://remix.codeplex.com/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://remix.codeplex.com/"}]}, {"text": ["Watch the lang.net Symposium link to get an overview.", "There is still more to come on documentation on codeplex page."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["regards\nStefan "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]