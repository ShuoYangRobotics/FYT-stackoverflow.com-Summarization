[[{"text": ["You can pass a default value to get() for keys that are not in the dictionary:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "get()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n self.val2 = kwargs.get('val2',\"default value\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, if you plan on using a particular argument with a particular default value, why not use named arguments in the first place?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self, val2=\"default value\", **kwargs):\n</code>\n</pre>\n", "senID": 3}], [{"text": ["While most answers are saying that, e.g.,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def f(**kwargs):\n    foo = kwargs.pop('foo')\n    bar = kwargs.pop('bar')\n    ...etc...\n</code>\n</pre>\n", "senID": 1}, {"text": ["is \"the same as\""], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def f(foo=None, bar=None, **kwargs):\n    ...etc...\n</code>\n</pre>\n", "senID": 3}, {"text": ["this is not true.", "In the latter case, f can be called as f(23, 42), while the former case accepts named arguments only -- no positional calls.", "Often you want to allow the caller maximum flexibility and therefore the second form, as most answers assert, is preferable: but that is not always the case.", "When you accept many optional parameters of which typically only a few are passed, it may be an excellent idea (avoiding accidents and unreadable code at your call sites!", ") to force the use of named arguments -- threading.Thread is an example.", "The first form is how you implement that in Python 2."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "f", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "f(23, 42)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "only", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}, {"text": "threading.Thread", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"text": ["The idiom is so important that in Python 3 it now has special supporting syntax: every argument after a single * in the def signature is keyword-only, that is, cannot be passed as a positional argument, but only as a named one.", "So in Python 3 you could code the above as:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "*", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "def", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def f(*, foo=None, bar=None, **kwargs):\n    ...etc...\n</code>\n</pre>\n", "senID": 6}, {"text": ["Indeed, in Python 3 you can even have keyword-only arguments that aren't optional (ones without a default value)."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "aren't", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["However, Python 2 still has long years of productive life ahead, so it's better to not forget the techniques and idioms that let you implement in Python 2 important design ideas that are directly supported in the language in Python 3!"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Using **kwargs and default values is easy.", "Sometimes, however, you shouldn't be using **kwargs in the first place."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In this case, we're not really making best use of **kwargs."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class ExampleClass( object ):\n    def __init__(self, **kwargs):\n        self.val = kwargs.get('val',\"default1\")\n        self.val2 = kwargs.get('val2',\"default2\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["The above is a \"why bother?", "\" declaration.", "It is the same as"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class ExampleClass( object ):\n    def __init__(self, val=\"default1\", val2=\"default2\"):\n        self.val = val\n        self.val2 = val2\n</code>\n</pre>\n", "senID": 4}, {"text": ["When you're using **kwargs, you mean that a keyword is not just optional, but conditional.", "There are more complex rules than simple default values."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["When you're using **kwargs, you usually mean something more like the following, where simple defaults don't apply."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n class ExampleClass( object ):\n    def __init__(self, **kwargs):\n        self.val = \"default1\"\n        self.val2 = \"default2\"\n        if \"val\" in kwargs:\n            self.val = kwargs[\"val\"]\n            self.val2 = 2*self.val\n        elif \"val2\" in kwargs:\n            self.val2 = kwargs[\"val2\"]\n            self.val = self.val2 / 2\n        else:\n            raise TypeError( \"must provide val= or val2= parameter values\" )\n</code>\n</pre>\n", "senID": 7}], [{"text": ["You'd do"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n self.attribute = kwargs.pop('name', default_value)\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n self.attribute = kwargs.get('name', default_value)\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you use pop, then you can check if there are any spurious values sent, and take the appropriate action (if any)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "pop", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I suggest something like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def testFunc( **kwargs ):\n    options = {\n            'option1' : 'default_value1',\n            'option2' : 'default_value2',\n            'option3' : 'default_value3', }\n\n    options.update(kwargs)\n    print options\n\ntestFunc( option1='new_value1', option3='new_value3' )\n# {'option2': 'default_value2', 'option3': 'new_value3', 'option1': 'new_value1'}\n\ntestFunc( option2='new_value2' )\n# {'option1': 'default_value1', 'option3': 'default_value3', 'option2': 'new_value2'}\n</code>\n</pre>\n", "senID": 1}, {"text": ["And then use the values any way you want"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["dictionaryA.update(dictionaryB) adds the contents of dictionaryB to dictionaryA overwriting any duplicate keys."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "dictionaryA.update(dictionaryB)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dictionaryB", "childNum": 0, "tag": "code", "childList": []}, {"text": "dictionaryA", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You could do something like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class ExampleClass:\n    def __init__(self, **kwargs):\n        arguments = {'val':1, 'val2':2}\n        arguments.update(kwargs)\n        self.val = arguments['val']\n        self.val2 = arguments['val2']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's another approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def my_func(arg1, arg2, arg3):\n    ... so something ...\n\nkwargs = {'arg1': 'Value One', 'arg2': 'Value Two', 'arg3': 'Value Three'}\n# Now you can call the function with kwargs like this:\n\nmy_func(**kwargs)\n</code>\n</pre>\n", "senID": 1}]]