[[{"text": ["I use the following: pylint --generated-members=objects"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Because of how pylint works (it examines the source itself, without letting Python actually execute it) it's very hard for pylint to figure out how metaclasses and complex baseclasses actually affect a class and its instances.", "The 'pychecker' tool is a bit better in this regard, because it does actually let Python execute the code; it imports the modules and examines the resulting objects.", "However, that approach has other problems, because it does actually let Python execute the code :-)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "does", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["You could extend pylint to teach it about the magic Django uses, or to make it understand metaclasses or complex baseclasses better, or to just ignore such cases after detecting one or more features it doesn't quite understand.", "I don't think it would be particularly easy.", "You can also just tell pylint to not warn about these things, through special comments in the source, command-line options or a .pylintrc file."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This is not a solution, but you can add objects = models.Manager() to your Django models without changing any behavior."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "objects = models.Manager()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I myself only use pyflakes, primarily due to some dumb defaults in pylint and laziness on my part (not wanting to look up how to change the defaults)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["django-lint is a nice tool which wraps pylint with django specific settings : http://chris-lamb.co.uk/projects/django-lint/ "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://chris-lamb.co.uk/projects/django-lint/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://chris-lamb.co.uk/projects/django-lint/"}]}], [{"text": ["I resigned from using pylint/pychecker in favor of using pyflakes with Django code - it just tries to import module and reports any problem it finds, like unused imports or uninitialized local names."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Try running pylint with"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n pylint --ignored-classes=Tags\n</code>\n</pre>\n", "senID": 1}, {"text": ["If that works, add all the other Django classes - possibly using a script, in say, python :P "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The documentation for --ignore-classes is:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "--ignore-classes", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I should add this is not a particular elegant solution in my view, but it should work."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["My ~/.pylintrc contains"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [TYPECHECK]\ngenerated-members=REQUEST,acl_users,aq_parent,objects,_meta,id\n</code>\n</pre>\n", "senID": 1}, {"text": ["the last two are specifically for Django."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Note that there is a bug in PyLint 0.21.1 which needs patching to make this work."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "bug in PyLint 0.21.1", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.logilab.org/ticket/28796"}]}, {"text": ["Edit:  After messing around with this a little more, I decided to hack PyLint just a tiny bit to allow me to expand the above into:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n [TYPECHECK]\ngenerated-members=REQUEST,acl_users,aq_parent,objects,_meta,id,[a-zA-Z]+_set\n</code>\n</pre>\n", "senID": 5}, {"text": ["I simply added:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n import re\n    for pattern in self.config.generated_members:\n        if re.match(pattern, node.attrname):\n            return\n</code>\n</pre>\n", "senID": 7}, {"text": ["after the fix mentioned in the bug report (i.e., at line 129)."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Happy days!"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["So far I have found no real solution to that but work around:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "In our company we require a pylint\nscore > 8. This allows coding\npractices pylint doesn't understand\nwhile ensuring that the code isn't\ntoo \"unusual\". So far we havn't seen\nany instance where E1101 kept us\nfrom reaching a score of 8 or\nhigher.", "tag": "none", "senID": 1}, {"text": "Our 'make check' targets\nfilter out \"for has no 'objects'\nmember\" messages to remove most of\nthe distraction caused by pylint not\nunderstanding Django.", "tag": "none", "senID": 2}]}], [{"text": ["The solution proposed in this other question it to simply add get_attr to your Tag class.", "Ugly, but works."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "other question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3509599/can-an-api-tell-pylint-not-to-complain-in-the-client-code"}, {"text": "get_attr", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}]]