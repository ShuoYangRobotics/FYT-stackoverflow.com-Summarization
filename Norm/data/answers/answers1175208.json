[[{"text": ["This is pretty thorough:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def convert(name):\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Works with all these (and doesn't harm already-un-cameled versions):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; convert('CamelCase')\n'camel_case'\n&gt;&gt;&gt; convert('CamelCamelCase')\n'camel_camel_case'\n&gt;&gt;&gt; convert('Camel2Camel2Case')\n'camel2_camel2_case'\n&gt;&gt;&gt; convert('getHTTPResponseCode')\n'get_http_response_code'\n&gt;&gt;&gt; convert('get2HTTPResponseCode')\n'get2_http_response_code'\n&gt;&gt;&gt; convert('HTTPResponseCode')\n'http_response_code'\n&gt;&gt;&gt; convert('HTTPResponseCodeXYZ')\n'http_response_code_xyz'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or if you're going to call it a zillion times, you can pre-compile the regexes:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n first_cap_re = re.compile('(.)([A-Z][a-z]+)')\nall_cap_re = re.compile('([a-z0-9])([A-Z])')\ndef convert(name):\n    s1 = first_cap_re.sub(r'\\1_\\2', name)\n    return all_cap_re.sub(r'\\1_\\2', s1).lower()\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Here's my solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def un_camel(text):\n    \"\"\" Converts a CamelCase name into an under_score name. \n\n        &gt;&gt;&gt; un_camel('CamelCase')\n        'camel_case'\n        &gt;&gt;&gt; un_camel('getHTTPResponseCode')\n        'get_http_response_code'\n    \"\"\"\n    result = []\n    pos = 0\n    while pos &lt; len(text):\n        if text[pos].isupper():\n            if pos-1 &gt; 0 and text[pos-1].islower() or pos-1 &gt; 0 and \\\n            pos+1 &lt; len(text) and text[pos+1].islower():\n                result.append(\"_%s\" % text[pos].lower())\n            else:\n                result.append(text[pos].lower())\n        else:\n            result.append(text[pos])\n        pos += 1\n    return \"\".join(result)\n</code>\n</pre>\n", "senID": 1}, {"text": ["It supports those corner cases discussed in the comments.", "For instance, it'll convert getHTTPResponseCode to get_http_response_code like it should."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "getHTTPResponseCode", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "get_http_response_code", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Not in the standard library, but I found this script that appears to contain the functionality you need."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this script", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/from-camel/0.2.0"}]}], [{"text": ["For the fun of it:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "For the fun of it:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def un_camel(input):\n...     output = [input[0].lower()]\n...     for c in input[1:]:\n...             if c in ('ABCDEFGHIJKLMNOPQRSTUVWXYZ'):\n...                     output.append('_')\n...                     output.append(c.lower())\n...             else:\n...                     output.append(c)\n...     return str.join('', output)\n...\n&gt;&gt;&gt; un_camel(\"camel_case\")\n'camel_case'\n&gt;&gt;&gt; un_camel(\"CamelCase\")\n'camel_case'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or, more for the fun of it:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; un_camel = lambda i: i[0].lower() + str.join('', (\"_\" + c.lower() if c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" else c for c in i[1:]))\n&gt;&gt;&gt; un_camel(\"camel_case\")\n'camel_case'\n&gt;&gt;&gt; un_camel(\"CamelCase\")\n'camel_case'\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n ''.join('_'+c.lower() if c.isupper() else c for c in \"DeathToCamelCase\").strip('_')\nre.sub(\"(.)([A-Z])\", r'\\1_\\2', 'DeathToCamelCase').lower()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["A horrendous example using regular expressions (you could easily clean this up :) ):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "easily", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def f(s):\n    return s.group(1).lower() + \"_\" + s.group(2).lower()\n\np = re.compile(\"([A-Z]+[a-z]+)([A-Z]?)\")\nprint p.sub(f, \"CamelCase\")\nprint p.sub(f, \"getHTTPResponseCode\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Works for getHTTPResponseCode though!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Alternatively, using lambda:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n p = re.compile(\"([A-Z]+[a-z]+)([A-Z]?)\")\nprint p.sub(lambda x: x.group(1).lower() + \"_\" + x.group(2).lower(), \"CamelCase\")\nprint p.sub(lambda x: x.group(1).lower() + \"_\" + x.group(2).lower(), \"getHTTPResponseCode\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["EDIT: It should also be pretty easy to see that there's room for improvement for cases like \"Test\", because the underscore is unconditionally inserted."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Very nice RegEx proposed on this site:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this site", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jason.diamond.name/weblog/2009/08/15/splitting-camelcase-with-regular-expressions/comment-page-1/"}]}, {"code": "<pre>\n<code>\n (?&amp;#60;!^)(?=[A-Z])\n</code>\n</pre>\n", "senID": 1}, {"text": ["If python have a String Split method, it shoud work..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In Java:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n String s = \"loremIpsum\";\nwords = s.split(\"(?&amp;#60;!^)(?=[A-Z])\");\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Wow I just stole this from django snippets.", "ref http://djangosnippets.org/snippets/585/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://djangosnippets.org/snippets/585/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://djangosnippets.org/snippets/585/"}]}, {"text": ["Pretty elegant "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n camelcase_to_underscore = lambda str: re.sub('(((?&lt;=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', '_\\\\1', str).lower().strip('_')\n</code>\n</pre>\n", "senID": 2}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n camelcase_to_underscore('ThisUser')\n</code>\n</pre>\n", "senID": 4}, {"text": ["Returns:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n 'this_user'\n</code>\n</pre>\n", "senID": 6}]]