[[{"text": ["Under unix, time.clock() measures CPU time used by the current\nprocess.", "os.system() will consume almost zero CPU while it waits for\nthe command you ran to finish."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You probably want time.time(), eg"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from time import clock, time\n  &gt;&gt;&gt; print clock(), time()\n  0.01 1169573460.96\n  &gt;&gt;&gt; print clock(), time()\n  0.01 1169573463.76\n  &gt;&gt;&gt; print clock(), time()\n  0.01 1169573467.09\n  &gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["However running the same under windows you get a quite different\nresult :-"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from time import clock, time\n  &gt;&gt;&gt; print clock(), time()\n  7.54285810068e-006 1169574534.84\n  &gt;&gt;&gt; print clock(), time()\n  3.32073322168 1169574538.16\n  &gt;&gt;&gt; print clock(), time()\n  7.32428004118 1169574542.15\n  &gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["In windows clock() counts in real time and at much higher resolution\nthan time()."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Under windows time() counts in 1ms steps wheras it usually counts in\n1us steps under linux."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["source: http://mail.python.org/pipermail/python-list/2007-January/423575.html"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "http://mail.python.org/pipermail/python-list/2007-January/423575.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2007-January/423575.html"}]}], [{"text": ["According to the time module docs:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "time module docs", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "time module docs", "tag": "a"}]}, {"href": "http://docs.python.org/lib/module-time.html", "text": "time module docs", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Additionally, there is the timeit module for benchmarking code snippets."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "timeit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-timeit.html"}]}], [{"text": ["The short answer is: most of the time time.clock() will be better.", "However, if you're timing some hardware (for example some algorithm you put in the GPU), then time.clock() will get rid of this time and time.time() is the only solution left."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Note: whatever the method used, the timing will depend on factors you cannot control (when will the process switch, how often, ...), this is worse with time.time() but exists also with time.clock(), so you should never run one timing test only, but always run a series of test and look at mean/variance of the times."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Depends on what you care about.", "If you mean WALL TIME (as in, the time on the clock on your wall), time.clock() provides NO accuracy because it may manage CPU time. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Others have answered re: time.time() vs. time.clock(). "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Others", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/85451#85511"}]}, {"text": ["However, if you're timing the execution of a block of code for benchmarking/profiling purposes, you should take a look at the timeitmodule."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "timeitmodule", "tag": "a", "pos": 0, "childList": [{"text": "timeit", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/lib/module-timeit.html"}, {"text": "timeit", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The difference is very platform-specific."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["clock() is very different on Windows than on Linux, for example."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For the sort of examples you describe, you probably want the \"timeit\" module instead."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Use the time.time() is preferred.", "please refer to this post:\nhttp://www.techarticles.zeromu.net/programming/keeping-track-of-elapsed-time-in-python/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.techarticles.zeromu.net/programming/keeping-track-of-elapsed-time-in-python/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.techarticles.zeromu.net/programming/keeping-track-of-elapsed-time-in-python/"}]}], [{"code": "<pre>\n<code>\n clock() -&gt; floating point number\n\nReturn the CPU time or real time since the start of the process or since\nthe first call to clock().  This has as much precision as the system\nrecords.\n\ntime() -&gt; floating point number\n\nReturn the current time in seconds since the Epoch.\nFractions of a second may be present if the system clock provides them.\n</code>\n</pre>\n", "senID": 0}, {"text": ["Usually time() is more precise, because operating systems do not store the process running time with the precision they store the system time (ie, actual time)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Short answer: use time.clock() for timing in Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "time.clock()", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["On *nix systems, clock() returns the processor time as a floating point number, expressed in seconds.", "On Windows, it returns the seconds elapsed since the first call to this function, as a floating point number."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["time() returns the the seconds since the epoch, in UTC, as a floating point number.", "There is no guarantee that you will get a better precision that 1 second (even though time() returns a floating point number).", "Also note that if the system clock has been set back between two calls to this function, the second function call will return a lower value."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["On Unix time.clock() measures the amount of CPU time that has been used by the current process, so it's no good for measuring elapsed time from some point in the past.", "On Windows it will measure wall-clock seconds elapsed since the first call to the function.", "On either system time.time() will return seconds passed since the epoch. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you're writing code that's meant only for Windows, either will work (though you'll use the two differently - no subtraction is necessary for time.clock()).", "If this is going to run on a Unix system or you want code that is guaranteed to be portable, you will want to use time.time()."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["To the best of my understanding, time.clock() has as much precision as your system will allow it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["One thing to keep in mind:\n  Changing the system time affects time.time() but not time.clock()."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I needed to control some automatic tests executions.", "If one step of the test case took more than a given amount of time, that TC was aborted to go on with the next one."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["But sometimes a step needed to change the system time (to check the scheduler module of the application under test), so after setting the system time a few hours in the future, the TC timeout expired and the test case was aborted.", "I had to switch from time.time() to time.clock() to handle this properly."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]