[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; import os\n <br />\n &gt;&gt;&gt; print os.name\n <br />\n posix\n <br />\n &gt;&gt;&gt; import platform\n <br />\n &gt;&gt;&gt; platform.system()\n <br />\n 'Linux'\n <br />\n &gt;&gt;&gt; platform.release()\n <br />\n '2.6.22-15-generic'\n <br />\n</code>\n</pre>\n", "senID": 0}, {"text": ["See: http://docs.python.org/lib/node441.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/lib/node441.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/node441.html"}]}], [{"text": ["Dang -- lbrandy beat me to the punch, but that doesn't mean I can't provide you with the system results for Vista!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import os\n <br />\n &gt;&gt;&gt; print os.name\n <br />\n nt\n <br />\n &gt;&gt;&gt; import platform\n <br />\n &gt;&gt;&gt; platform.system()\n <br />\n 'Windows'\n <br />\n &gt;&gt;&gt; platform.release()\n <br />\n 'Vista'\n <br />\n</code>\n</pre>", "senID": 1}], [{"text": ["Thanks all, for the record here's the results on Mac:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n&gt;&gt;&gt; import os\r\n&gt;&gt;&gt; os.name\r\n'posix'\r\n&gt;&gt;&gt; import platform\r\n&gt;&gt;&gt; platform.system()\r\n'Darwin'\r\n&gt;&gt;&gt; platform.release()\r\n'8.11.1'\n</pre>", "senID": 1}], [{"text": ["You can also use sys.platform if you already have imported sys and you don't want to import another module"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.platform\n'linux2'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I do this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nprint sys.platform\n</code>\n</pre>\n", "senID": 1}, {"text": ["Docs here : http://docs.python.org/library/sys.html#sys.platform.", "Everything you need is probably in the sys module."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/library/sys.html#sys.platform", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sys.html#sys.platform"}]}], [{"text": ["This question has already been answered before: http://stackoverflow.com/questions/1854/python-how-do-i-tell-what-os-im-running-on"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/1854/python-how-do-i-tell-what-os-im-running-on", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1854/python-how-do-i-tell-what-os-im-running-on"}]}], [{"text": ["I am using the WLST tool that comes with weblogic, and it doesn't implement the platform package. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n wls:/offline&gt; import os\nwls:/offline&gt; print os.name\njava \nwls:/offline&gt; import sys\nwls:/offline&gt; print sys.platform\n'java1.5.0_11'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Apart from patching the system javaos.py (http://osdir.com/ml/lang.jython.devel/2006-08/msg00035.html) (which I can't do, I have to use weblogic out of the box), this is what I use:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "javaos.py", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://osdir.com/ml/lang.jython.devel/2006-08/msg00035.html", "text": "http://osdir.com/ml/lang.jython.devel/2006-08/msg00035.html", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n def iswindows():\n  os = java.lang.System.getProperty( \"os.name\" )\n  return os.lower().find(\"win\") &gt; -1\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import platform\n&gt;&gt;&gt; platform.system()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["in the same vein...."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import platform\nis_windows=(platform.system().lower().find(\"win\") &gt; -1)\n\nif(is_windows): lv_dll=LV_dll(\"my_so_dll.dll\")\nelse:           lv_dll=LV_dll(\"./my_so_dll.so\")\n</code>\n</pre>\n", "senID": 1}]]