[[{"text": ["Heapy is quite simple to use.", "At some point in your code, you have to write the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from guppy import hpy\nh = hpy()\nprint h.heap()\n</code>\n</pre>\n", "senID": 1}, {"text": ["This gives you some output like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Partition of a set of 132527 objects. Total size = 8301532 bytes.\nIndex  Count   %     Size   % Cumulative  % Kind (class / dict of class)\n0  35144  27  2140412  26   2140412  26 str\n1  38397  29  1309020  16   3449432  42 tuple\n2    530   0   739856   9   4189288  50 dict (no owner)\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can also find out from where objects are referenced and get statistics about that, but somehow the docs on that are a bit sparse."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["There is a graphical browser as well, written in Tk."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I recommend Dowser.", "It is very easy to setup, and you need zero changes to your code.", "You can view counts of objects of each type through time, view list of live objects, view references to live objects, all from the simple web interface."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Dowser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.aminus.net/wiki/Dowser"}]}, {"code": "<pre>\n<code>\n # memdebug.py\n\nimport cherrypy\nimport dowser\n\ndef start(port):\n    cherrypy.tree.mount(dowser.Root())\n    cherrypy.config.update({\n        'environment': 'embedded',\n        'server.socket_port': port\n    })\n    cherrypy.server.quickstart()\n    cherrypy.engine.start(blocking=False)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You import memdebug, and call memdebug.start.", "That's all."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I haven't tried PySizer or Heapy.", "I would appreciate others' reviews."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Consider the objgraph library (see http://www.lshift.net/blog/2008/11/14/tracing-python-memory-leaks for an example use case)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "objgraph", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mg.pov.lt/objgraph/"}, {"href": "http://www.lshift.net/blog/2008/11/14/tracing-python-memory-leaks", "text": "http://www.lshift.net/blog/2008/11/14/tracing-python-memory-leaks", "childNum": 0, "tag": "a", "childList": []}]}]]