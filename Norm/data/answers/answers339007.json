[[{"text": ["Strings:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; n = '4'\n&gt;&gt;&gt; print n.zfill(3)\n&gt;&gt;&gt; '004'\n</code>\n</pre>\n", "senID": 1}, {"text": ["And for numbers:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; n = 4\n&gt;&gt;&gt; print '%03d' % n\n&gt;&gt;&gt; '004'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["For numbers:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print \"%05d\" % number\n</code>\n</pre>\n", "senID": 1}, {"text": ["See also: Python: String formatting."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Python: String formatting", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#string-formatting"}]}, {"text": ["EDIT: It's worth noting that as of yesterday, this method of formatting is deprecated in favour of the format string method:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "format", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n print(\"{0:05d}\".format(number)) # or\nprint(format(number, \"05d\"))\n</code>\n</pre>\n", "senID": 4}, {"text": ["See PEP 3101 for details."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "PEP 3101", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3101/"}]}], [{"text": ["Just use the rjust method of the string object."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "rjust", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/string-methods.html"}]}, {"text": ["This example will make a string of 10 characters long, padding as necessary."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; t = 'test'\n&gt;&gt;&gt; t.rjust(10, '0')\n&gt;&gt;&gt; '000000test'\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n width = 10\nx = 5\nprint \"%0*d\" % (width, x)\n&gt; 0000000005\n</code>\n</pre>\n", "senID": 0}, {"text": ["See the print documentation for all the exciting details!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["str(n).zfill(width) will work with strings, ints, floats... and is Python 2.x and 3.x compatible:"], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "str(n).zfill(width)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "string", "childNum": 0, "tag": "code", "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "childList": []}, {"text": "x", "childNum": 0, "tag": "em", "childList": []}, {"text": "x", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; n = 3\n&gt;&gt;&gt; str(n).zfill(5)\n'00003'\n&gt;&gt;&gt; n = '3'\n&gt;&gt;&gt; str(n).zfill(5)\n'00003'\n&gt;&gt;&gt; n = '3.0'\n&gt;&gt;&gt; str(n).zfill(5)\n'003.0'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 6340\n&gt;&gt;&gt; b = 90210\n&gt;&gt;&gt; print '%05d' % a\n06340\n&gt;&gt;&gt; print '%05d' % b\n90210\n</code>\n</pre>\n", "senID": 0}]]