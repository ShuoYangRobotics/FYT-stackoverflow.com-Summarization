[[{"text": ["A.x is a class variable.", "B's self.x is a instance variable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["i.e.", "A's x is shared between instances."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It would be easier to demonstrate the difference with something that can be modified like a list:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nclass A:\n    x = []\n\n    def add(self):\n        self.x.append(1)\n\n\nclass B:\n    def __init__(self):\n        self.x = []\n\n    def add(self):\n        self.x.append(1)\n\n\nx = A()\ny = A()\nx.add()\ny.add()\nprint \"A's x:\",x.x\n\nx = B()\ny = B()\nx.add()\ny.add()\nprint \"B's x:\",x.x\n</code>\n</pre>\n", "senID": 3}, {"text": ["Output"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Just as a side note: self is actually just a randomly chosen word, that everyone uses, but you could also use this, foo, or myself or anything else you want, it's just the first parameter of every non static method for a class.", "This means that the word self is not a language construct but just a name:"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "this", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "foo", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "myself", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class A:\n...     def __init__(s):\n...        s.bla = 2\n... \n&gt;&gt;&gt; \n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.bla\n2\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A.x is a class variable, and will be shared across all instances of A, unless specifically overridden within an instance.", "B.x is an instance variable, and each instance of B has its own version of it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I hope the following Python example can clarify:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n >>> class Foo():\n    ...     i = 3\n    ...     def bar(self):\n    ...             print 'Foo.i is', Foo.i\n    ...             print 'self.i is', self.i\n    ... \n    >>> f = Foo() # Create an instance of the Foo class\n    >>> f.bar()\n    Foo.i is 3\n    self.i is 3\n    >>> Foo.i = 5 # Change the global value of Foo.i over all instances\n    >>> f.bar()\n    Foo.i is 5\n    self.i is 5\n    >>> f.i = 3 # Override this instance's definition of i\n    >>> f.bar()\n    Foo.i is 5\n    self.i is 3\n</code>\n</pre>\n", "senID": 2}], [{"text": ["There have been lately some interesting posts regarding the use of self between Bruce Eckel and GvR.", "Check it out: this vs. this"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "this", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html"}, {"href": "http://www.artima.com/weblogs/viewpost.jsp?thread=239003", "text": "this", "childNum": 0, "tag": "a", "childList": []}]}]]