[[{"text": ["\" I've read up on Lisp a little and I would love to find a language that allows some of the cool stuff that Lisp does, but without the strange syntax, etc.", "of Lisp."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Wouldn't we all.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["\"minimal distinction between code and data, Lisp style\""], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Sadly, the minimal distinction between code and data and \"strange\" syntax are consequences of each other."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you want easy-to-read syntax, you have Python.", "However, the code is not represented in any of the commonly-used built-in data structures.", "It fails -- as most languages do -- in item #1 of your 'important' list.", "That makes it difficult to provide useful help."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["You can't have it all.", "Remember, you aren't the first to have this thought.", "If something like your ideal language existed, we'd all be using it.", "Since the real world falls short of your ideals, you'll have to re-prioritize your wishlist.", "The \"important\" section has to be rearranged to identify what's really important to you."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 4, "childList": []}]}], [{"text": ["Disclaimer: I only dabble in either language, but I have at least written small working programs (not just quick scripts, for which I use Perl, bash or GNU make) in both."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Ruby can be really nice for the \"multiple paradigms\" point 3, because it works hard to make it easy to create domain-specific languages.", "For example, browse online and look at a couple of bits of Ruby on Rails code, and a couple of bits of Rake code.", "They're both Ruby, and you can see the similarities, but they don't look like what you'd normally think of as the same language."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Python seems to me to be a bit more predictable (possibly correlated to 'clean' and 'sane' point 2), but I don't really know whether that's because of the language itself or just that it's typically used by people with different values.", "I have never attempted deep magic in Python.", "I would certainly say that both languages are well thought out."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Both score well in 1 and 4.", "[Edit: actually 1 is pretty arguable - there is \"eval\" in both, as common in interpreted languages, but they're hardly conceptually pure.", "You can define closures, assign methods to objects, and whatnot.", "Not sure whether this goes as far as you want."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Personally I find Ruby more fun, but in part that's because it's easier to get distracted thinking of cool ways to do things.", "I've actually used Python more.", "Sometimes you don't want cool, you want to get on with it so it's done before bedtime..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Neither of them is difficult to get into, so you could just decide to do your next minor task in one, and the one after that in the other.", "Or pick up an introductory book on each from the library, skim-read them both and see what grabs you."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Honestly, as far as metaprogramming facilities go, Ruby and Python are a lot more similar than some of their adherent like to admit.", "This review of both language offers a pretty good comparison/review:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://regebro.wordpress.com/2009/07/12/python-vs-ruby/"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}]}, {"text": ["So, just pick one based on some criteria.", "Maybe you like Rails and want to study that code.", "Maybe SciPy is your thing.", "Look at the ecosystem of libraries, community, etc, and pick one.", "You certainly won't lose out on some metaprogramming nirvana based on your choice of either."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Have you considered Smalltalk?", "It offers a very simple, clear and extensible syntax with reflectivity and introspection capabilities and a fully integrated development environment that takes advantage of those capabilities.", "Have a look at some of the work being done in Squeak Smalltalk for instance.", "A lot of researchers using Squeak hang out on the Squeak mailing list and #squeak on freenode, so you can get help on complex issues very easily."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "some of the work being done", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://squeak.org/Features/Research/"}, {"text": "Squeak Smalltalk", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://squeak.org/"}, {"text": "Squeak mailing list", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://lists.squeakfoundation.org/pipermail/squeak-dev/"}]}, {"text": ["Other indicators of its current relevance: it runs on any platform you'd care to name (including the iPhone); Gilad Bracha is basing his Newspeak work on Squeak; the V8 team cut their teeth on Smalltalk VMs; and Dan Ingalls and Randal Schwartz have recently returned to Smalltalk work after years in the wilderness."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "iPhone", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://isqueak.org/HomePage"}, {"href": "http://astares.blogspot.com/2008/09/google-chrome-javascript-and-smalltalk.html", "text": "Smalltalk VMs", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Best of luck with your search - let us know what you decide in the end."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You are describing Ruby."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's very easy to extend and modify existing primitives at runtime.", "In ruby everything is an object, strings, integers, even functions."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You can also construct shortcuts for syntactic sugar, for example with class_eval."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "class_eval", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.neeraj.name/blog/articles/235"}]}, {"text": ["Ruby follows the principle of less surprise, and when comparing Ruby code vs the equivalent in other language many people consider it more \"beautiful\"."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "principle of less surprise", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Principle_of_least_surprise"}]}, {"text": ["You can follow imperative, object oriented, functional and reflective."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["That's very subjective, but from my point of view the ability to use many paradigms at the same time allows for very interesting ideas."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I've tried Python and it doesn't fit your important points."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Lisp satisfies all your criteria, including performance, and it is the only language that doesn't have (strange) syntax.", "If you eschew it on such an astoundingly ill-informed/wrong-headed basis and consequently miss out on the experience of using e.g.", "Emacs+SLIME+CL, you'll be doing yourself a great disservice."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Your 4 \"important\" points lead to Ruby exactly, while the 2 \"somewhat important\" points ruled by Python.", "So be it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There's not really a huge difference between python and ruby at least at an ideological level.", "For the most part, they're just different flavors of the same thing.", "Thus, I would recommend seeing which one matches your programming style more."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Compare code examples that do the same thing (join with a newline non-empty descriptions of items from a myList list) in different languages (languages are arranged in reverse-alphabetic order):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "code examples", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://news.ycombinator.com/item?id=408030"}, {"text": "myList", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Ruby:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Ruby", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n myList.collect { |f| f.description }.select { |d| d != \"\" }.join(\"\\n\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n myList.map(&amp;:description).reject(&amp;:empty?).join(\"\\n\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["Python:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Python", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n descriptions = (f.description() for f in mylist)\n\"\\n\".join(filter(len, descriptions))\n</code>\n</pre>\n", "senID": 6}, {"text": ["Or"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n \"\\n\".join(f.description() for f in mylist if f.description())\n</code>\n</pre>\n", "senID": 8}, {"text": ["Perl:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Perl", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n join \"\\n\", grep { $_ } map { $_-&gt;description } @myList;\n</code>\n</pre>\n", "senID": 10}, {"text": ["Or"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n join \"\\n\", grep /./, map { $_-&gt;description } @myList;\n</code>\n</pre>\n", "senID": 12}, {"text": ["Javascript:"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "Javascript", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n myList.map(function(e) e.description())\n      .filter(function(e) e).join(\"\\n\")\n</code>\n</pre>\n", "senID": 14}, {"text": ["Io:"], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "Io", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n myList collect(description) select(!=\"\") join(\"\\n\")\n</code>\n</pre>\n", "senID": 16}, {"text": ["Here's an Io guide."], "childNum": 1, "tag": "p", "senID": 17, "childList": [{"text": "Io guide", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.iolanguage.com/scm/git/checkout/Io/docs/IoGuide.html"}]}], [{"text": ["Ruby would be better than Lisp in terms of being \"mainstream\" (whatever that really means, but one realistic concern is how easy it would be to find answers to your questions on Lisp programming if you were to go with that.", ")  In any case, I found Ruby very easy to pick up.", "In the same amount of time that I had spent first learning Python (or other languages for that matter), I was soon writing better code much more efficiently than I ever had before.", "That's just one person's opinion, though; take it with a grain of salt, I guess.", "I know much more about Ruby at this point than I do Python or Lisp, but you should know that I was a Python person for quite a while before I switched."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "better", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "more efficiently", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["Lisp is definitely quite cool and worth looking into; as you said, the size of community, etc.", "can change quite quickly.", "That being said, the size itself isn't as important as the quality of the community.", "For example, the #ruby-lang channel is still filled with some incredibly smart people.", "Lisp seems to attract some really smart people too.", "I can't speak much about the Python community as I don't have a lot of firsthand experience, but it seems to be \"too big\" sometimes.", "(I remember people being quite rude on their IRC channel, and from what I've heard from friends that are really into Python, that seems to be the rule rather than the exception."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "quality", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "#ruby-lang", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["Anyway, some resources that you might find useful are:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["1) The Pragmatic Programmers Ruby Metaprogramming series (http://www.pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming) -- not free, but the later episodes are quite intriguing.", "(The code is free, if you want to download it and see what you'd be learning about."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://www.pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming"}]}, {"text": ["2) On Lisp by Paul Graham (http://www.paulgraham.com/onlisp.html).", "It's a little old, but it's a classic (and downloadable for free)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://www.paulgraham.com/onlisp.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.paulgraham.com/onlisp.html"}]}], [{"text": ["I am using Python for many projects and I think Python does provide all the features you asked for. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["important:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Somewhat important:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["As you are grad student you may want to read this paper claiming that Python is all a scientist needs.", "Unfortunately I cannot compare Python to Ruby, since I never used that language. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Python is all a scientist needs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://openwetware.org/wiki/Julius_B._Lucks/Projects/Python_All_A_Scientist_Needs"}]}, {"text": ["Regards,\nDennis"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Well, if you don't like the lisp syntax perhaps assembler is the way to go.", ":-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It certainly has minimal distinction between code and data, is multi-paradigm (or maybe that is no-paradigm) and it's a mind expanding (if tedious) experience both in terms of the learning and the tricks you can do."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Io satisfies all of your \"Important\" points.", "I don't think there's a better language out there for doing crazy meta hackery."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Lisp can be compiled."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There isn't really a lot to separate Python and Ruby.", "I'd say the Python community is larger and more mature than the Ruby community, and that's really important for me.", "Ruby is a more flexible language, which has positive and negative repercussions.", "However, I'm sure there will be plenty of people to go into detail on both these languages, so I'll throw a third option into the ring.", "How about JavaScript?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["JavaScript was originally designed to be Scheme for the web, and it's prototype-based, which is an advantage over Python and Ruby as far as multi-paradigm and metaprogramming is concerned.", "The syntax isn't as nice as the other two, but it is probably the most widely deployed language in existence, and performance is getting better every day."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you like the lisp-style code-is-data concept, but don't like the Lispy syntax, maybe Prolog would be a good choice."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Prolog", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sics.se/sicstus"}]}, {"text": ["Whether that qualifies as a \"fun to use, modern language\", I'll leave to others to judge.", ";-)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I've use Python a very bit, but much more Ruby.", "However I'd argue they both provide what you asked for. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If I see all your four points then you may at least check:\nhttp://www.iolanguage.com/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.iolanguage.com/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.iolanguage.com/"}]}, {"text": ["And Mozart/Oz may be interesting for you also:\nhttp://www.mozart-oz.org/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.mozart-oz.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.mozart-oz.org/"}]}, {"text": ["Regards\nFriedrich"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Ruby is my choice after exploring Python, Smalltalk, and Ruby."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What about OCaml ?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["OCaml features: a static type system, type inference, parametric polymorphism, tail recursion, pattern matching, first class lexical closures, functors (parametric modules), exception handling, and incremental generational automatic garbage collection."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I think that it satisfies the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["For python-style syntax and lisp-like macros (macros that are real code) and good DSL see converge."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "converge", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://convergepl.org/"}]}], [{"text": ["I'm not sure that Python would fulfill all things you desire (especially the point about the minimal distinction between code and data), but there is one argument in favour of python.", "There is a project out there which makes it easy for you to program extensions for python in D, so you can have the best of both worlds.", "http://pyd.dsource.org/celerid.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pyd.dsource.org/celerid.html", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pyd.dsource.org/celerid.html"}]}], [{"text": ["Did you try Rebol?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I suggest that you try out both languages and pick the one that appeals to you.", "Both Python and Ruby can do what you want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also read this thread."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this thread", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/143586/what-scripting-language-to-learn-after-perl"}]}], [{"text": ["if you love the rose, you have to learn to live with the thorns :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Go with JS just check out AJS (Alternative JavaScript Syntax) at my github http://github.com/visionmedia  it will give you some cleaner looking closures etc :D"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://github.com/visionmedia", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/visionmedia"}]}], [{"text": ["Concerning your main-point (meta-programming):\nVersion 1.6 of Groovy has AST (Abstract Syntax Tree) programming built-in as a standard and integrated feature.", "Ruby has RubyParser, but it's an add-on. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Do not to mix Ruby Programming Language with Ruby Implementations, thinking that POSIX threads are not possible in ruby."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can simply compile with pthread support, and this was already possible at the time this thread was created, if you pardon the pun."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this was already possible at the time this thread was created", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blogs.sun.com/prashant/entry/ruby_and_enable_pthreads"}]}, {"text": ["The answer to this question is simple.", "If you like lisp, you will probably prefer ruby.", "Or, whatever you like."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I recommend Ruby because it corresponds well to your requirements.", "About Python there is little I can say, because ruby is enough for most tasks.", "In Python I like indentation-sensitive and \"there should be one\u2014and preferably only one\u2014obvious way to do it\".", "It is very convenient."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["@Jason I respectively disagree.", "There are differences that make Ruby superior to Python for metaprogramming - both philosophical and pragmatic.", "For starters, Ruby gets inheritance right with Single Inheritance and Mixins.", "And when it comes to metaprogramming you simply need to understand that it's all about the self.", "The canonical difference here is that in Ruby you have access to the self object at runtime - in Python you do not!"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Ruby gets inheritance right with Single Inheritance and Mixins", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://techoctave.com/c7/posts/46-object-oriented-ruby-classes-mixins-and-jedi"}, {"text": "self", "childNum": 0, "tag": "em", "pos": 3, "childList": []}, {"text": "self", "childNum": 0, "tag": "em", "pos": 4, "childList": []}]}, {"text": ["Unlike Python, in Ruby there is no separate compile or runtime phase.", "In Ruby, every line of code is executed against a particular self object.", "In Ruby every class inherits from both object and a hidden metaclass.", "This makes for some interesting dynamics:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "self", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class Ninja\n  def rank\n    puts \"Orange Clan\"\n  end\n\n  self.name #=&gt; \"Ninja\"\nend\n</code>\n</pre>\n", "senID": 2}, {"text": ["Using self.name accesses the Ninja classes' metaclass name method to return the class name of Ninja.", "Does metaprogramming flower so beautiful in Python?", "I sincerely doubt it!"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "self.name", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "name", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["On the subject of Ruby vs Python: as far as Linux administration goes - Python wins, hands down.", "Try spawning real POSIX threads in Ruby.... umm I didn't think so.", "Try implementing a true POSIX daemon in Ruby....", "I didn't think so.", "Try integrating C modules with Ruby or writing your own C extensions... Python is way better for that.", "Having said all of this, Ruby has a very expressive syntax, and Rails is a great web application framework.", "But so is Django for Python!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]