[[{"text": ["I would use sys.settrace  at program startup to register a custom tracer function.", "The custom_trace_function will be called for each line of code.", "Then you can use that function to store information gathered by heapy or meliae in a file for later processing. "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "sys.settrace", "tag": "a", "pos": 0, "childList": [{"text": "sys.settrace", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/sys.html#sys.settrace"}, {"text": "sys.settrace", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "meliae", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "https://launchpad.net/meliae"}]}, {"text": ["Here is a very simple example which logs the output of hpy.heap() each second to a plain text file:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import sys\nimport time\nimport atexit\nfrom guppy import hpy\n\n_last_log_time = time.time()\n_logfile = open('logfile.txt', 'w')\n\ndef heapy_profile(frame, event, arg):\n    currtime = time.time()\n    if currtime - _last_log_time &lt; 1:\n        return\n    _last_log_time = currtime\n    code = frame.f_code\n    filename = code.co_filename\n    lineno = code.co_firstlineno\n    idset = hpy().heap()\n    logfile.write('%s %s:%s\\n%s\\n\\n' % (currtime, filename, lineno, idset))\n    logfile.flush()\n\natexit.register(_logfile.close)\nsys.settrace(heapy_profile)\n</code>\n</pre>\n", "senID": 2}]]