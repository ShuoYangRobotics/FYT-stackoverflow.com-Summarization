[[{"text": ["Check out Haystack Search - a new model based search abstraction layer that currently supports Xapian, Solr and Whoosh.", "Looks like it's well supported and documented."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "Haystack Search", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://haystacksearch.org/"}, {"text": "Xapian", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://xapian.org/"}, {"text": "Solr", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://lucene.apache.org/solr/"}, {"text": "Whoosh", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "https://bitbucket.org/mchaput/whoosh/wiki/Home"}]}], [{"text": ["Justin, I'd try djangosearch first: Jacob Kaplan-Moss (Django's lead developer) is working on it. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "djangosearch", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/djangosearch/"}]}, {"text": ["Potential hazards: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "The home page warns the API might not be entirely stable", "tag": "none", "senID": 2}]}, {"text": ["Potential benefits:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "\u201cThe long term goal is for this to become ", "tag": "none", "senID": 4}]}], [{"text": ["I am searching for the same thing, as are a lot of other people.", "Let's hope that django.contrib.search will be added soon."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django.contrib.search", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["In the meantime, this is what I found:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": ["http://code.google.com/p/djangosearch/"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["http://code.google.com/p/django-sphinx/"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["http://code.google.com/p/djapian/"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["http://code.google.com/p/django-search-lucene/"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}, {"text": ["http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/"], "childNum": 0, "tag": "a", "senID": 6, "childList": []}]}, {"text": ["To me, most look quite complicated and, frankly, a little daunting to implement.", "I'd be interested to learn what you think of these."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I'd recommend Sphinx for full-text search and aggregation, and django-sphinx is good enough for production use.", "We found that Sphinx was the least resource-intensive and fastest way to index and search our documents and that django-sphinx was a nice wrapper on top of the sphinx client."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The group by aggregation is particularly nice, if for example you want to display how many documents with a certain tag or by a certain author (or both) matched a search.", "In memory attribute updates were convenient too, especially for removing deleted articles immediately."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The google code page for djangosearch indicates that it is no longer under active development, and suggests haystack or solango."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "djangosearch", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/djangosearch/"}, {"href": "http://haystacksearch.org/", "text": "haystack", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://code.google.com/p/django-solr-search/", "text": "solango", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Thanks Garth.", "I had seen that djangosearch wanted to become the official Django search, but I was hesitant to use it because I couldn't find any documentation!", "Luckily, there's a README in subversion that I hadn't seen before, and it makes the API look very cool:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "README in subversion", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://code.google.com/p/djangosearch/source/browse/branches/soc-new-backends/doc/README.txt"}]}, {"code": "<pre>\n<code>\n # set up the model\nclass Event(models.Model):\n    title = models.CharField(max_length=255)\n    date = models.DateField()\n    is_outdoors = models.BooleanField()\n\n    index = djangosearch.ModelIndex(text=['title'], \n                                    additional=['date', 'is_outdoors'])\n\n# run a search\nresults = Event.index.search(\"django conference\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You might want to consider letting Yahoo do all the hard work with their Build your own Search Service (BOSS).", "Here is a great blog post that walks you through the process:\nhttp://www.peterkrantz.com/2008/yahoo-search-in-django/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.peterkrantz.com/2008/yahoo-search-in-django/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.peterkrantz.com/2008/yahoo-search-in-django/"}]}], [{"text": ["You might want to look at Django Solr search (aka \"Solango\") which comes with some nice documentation to get you started..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Django Solr search", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-solr-search/"}]}], [{"text": ["I just needed a very quick solution that was no-fuss for an internal app."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "very quick", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I found the article Adding search to Django in a snap, and that worked splendid for me! "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Adding search to Django in a snap", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://julienphalip.com/post/2825034077/adding-search-to-a-django-site-in-a-snap"}]}, {"text": ["Obviously it lacks the speed, scalability and features of the real projects like Haystack, but this one is easier to set up, and I don't really need anything else than keyword AND-search."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you have large amount of data to be indexed or you expect high traffic, I'd suggest using some external search engine, like Solr.", "This way, you'll keep shared-nothing approach and be able to scale your site components independently."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Solr", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://lucene.apache.org/solr/"}, {"text": "shared-nothing", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["It looks like everyone here missed django-xappy"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-xappy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://launchpad.net/django-xappy"}]}, {"text": ["After quick evaluation of all existing search addons for Django, I found this one as most flexible and easiest to use.", "It's rough on the edges in few places, but it's still the best way to use power of Xapian search engine inside Django projects."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Xapian", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://xapian.org"}]}], [{"text": ["I think I am going to have to give a shout out to Djapian."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It is rock-solid...just pull down a source distribution and peek inside.", "Top notch code, not very many comments tho.."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It's still a young software project, but I think the django community should throw it's weight behind this one."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Thanks Joe,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["We decided to go with Tsearch2 and a custom postgres adaptor.", "Tsearch2 does not need an extra process to run, which was convenient since we are on a WebFaction hosting with limited  memory...", "It's not completely done yet, but seems to be a good solution..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I found Djoosh which relies on the pure-python external search engine Whoosh to work well with my 'Python' brain."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Djoosh", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/idangazit/djoosh/tree/master"}, {"href": "http://whoosh.ca/", "text": "Whoosh", "childNum": 0, "tag": "a", "childList": []}]}]]