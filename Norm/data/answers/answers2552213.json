[[{"text": ["Most functional languages which evaluate lazily can simulate the processing of infinite series.", "Of course, on a finite computer it is not possible to process infinite series, as I am sure you are aware.", "Off the top of my head, I guess Mathematica can do most of what you might want, I suspect that Maple can too, maybe Sage and other computer-algebra systems and I'd be surprised if you can't find a Haskell implementation that suits you."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Mathematica", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "Maple", "childNum": 0, "tag": "em", "childList": []}, {"text": "Sage", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["EDIT to clarify for OP: I do not propose generating infinite loops.", "Lazy evaluation allows you to write programs (or functions) which simulate infinite series, programs which themselves are finite in time and space.", "With such languages you can determine many of the properties, such as convergence, of the simulated infinite series with considerable accuracy and some degree of certainty.", "Try Mathematica or, if you don't have access to it, try Wolfram Alpha to see what one system can do for you."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Mathematica", "childNum": 0, "tag": "em", "pos": 3, "childList": []}, {"href": "http://www.wolframalpha.com/", "text": "Wolfram Alpha", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["One place to look might be the Wikipedia category of Computer Algebra Systems."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Computer Algebra Systems", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Category%3aComputer_algebra_systems"}]}], [{"text": ["There are two tools available in Haskell for this beyond simply supporting infinite lists."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First there is a module that supports looking up sequences in OEIS.", "This can be applied to the first few terms of your series and can help you identify a series for which you don't know the closed form, etc.", "The other is the 'CReal' library of computable reals.", "If you have the ability to generate an ever improving bound on your value (i.e.", "by summing over the prefix, you can declare that as a computable real number which admits a partial ordering, etc.", "In many ways this gives you a value that you can use like the sum above."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["However in general computing the equality of two streams requires an oracle for the halting problem, so no language will do what you want in full generality, though some computer algebra systems like Mathematica can try."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Maxima can calculate some infinite sums, but in this particular case it doesn't seem to find the answer :-s"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (%i1) sum((-1)^k/(2*k), k, 1, inf), simpsum;\n                                 inf\n                                 ====       k\n                                 \\     (- 1)\n                                  &gt;    ------\n                                 /       k\n                                 ====\n                                 k = 1\n(%o1)                            ------------\n                                      2\n</code>\n</pre>\n", "senID": 1}, {"text": ["but for example, those work:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n (%i2) sum(1/(k^2), k, 1, inf), simpsum;\n                                        2\n                                     %pi\n(%o2)                                ----\n                                      6\n\n(%i3) sum((1/2^k), k, 1, inf), simpsum;\n(%o3)                                  1\n</code>\n</pre>\n", "senID": 3}], [{"text": ["For Python check out SymPy - clone of Mathematica and Matlab."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SymPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/sympy/"}]}, {"text": ["There is also a heavier Python-based math-processing tool called Sage."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Sage", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sagemath.org/"}]}], [{"text": ["You need something that can do a symbolic computation like Mathematica.", "You can also consider quering wolframaplha: sum((-1)^i*1/i, i, 1 , inf)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Mathematica", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.wolfram.com/"}, {"text": "wolframaplha: sum((-1)^i*1/i, i, 1 , inf)", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.wolframalpha.com/input/?i=sum%28%28-1%29%5Ei%2a1%2Fi%2C%20i%2C%201%20%2C%20inf%29"}]}], [{"text": ["Clojure and Haskell off the top of my head."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Clojure", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://clojure.org/sequences"}, {"href": "http://www.haskell.org/haskellwiki/Language_and_library_specification", "text": "Haskell", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Sorry I couldn't find a better link to haskell's sequences, if someone else has it, please let me know and I'll update."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["There is a library called mpmath(python), a module of sympy, which provides the series support for sympy( I believe it also backs sage).", "More specifically, all of the series stuff can be found here: Series documentation "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "Series documentation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://mpmath.googlecode.com/svn/trunk/doc/build/functions/zeta.html"}]}], [{"text": ["You can solve the series problem in Sage (a free Python-based math software system) exactly as follows:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Sage", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sagemath.org"}]}, {"code": "<pre>\n<code>\n sage: k = var('k'); sum((-1)^k/(2*k+1), k, 1, infinity)\n1/4*pi - 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["Behind the scenes, this is really using Maxima (a component of Sage).  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The C++ iRRAM library performs real arithmetic exactly.", "Among other things it can compute limits exactly using the limit function.", "The homepage for iRRAM is here.", "Check out the limit function in the documentation.", "Note that I'm not talking about arbitrary precision arithmetic.", "This is exact arithmetic, for a sensible definition of exact.", "Here's their code to compute e exactly, pulled from the example on their web site:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "exactly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.informatik.uni-trier.de/iRRAM/"}, {"text": "exact", "childNum": 0, "tag": "em", "pos": 5, "childList": []}]}, {"code": "<pre>\n<code>\n //---------------------------------------------------------------------\n// Compute an approximation to e=2.71.. up to an error of 2^p\n REAL e_approx (int p)\n{\n  if ( p &gt;= 2 ) return 0;\n\n  REAL y=1,z=2;\n  int i=2;\n  while ( !bound(y,p-1) ) {\n    y=y/i;\n    z=z+y;\n    i+=1;\n  }\n  return z;\n};\n\n//---------------------------------------------------------------------\n// Compute the exact value of  e=2.71.. \nREAL e()\n{\n  return limit(e_approx);\n};\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I have worked in couple of Huge Data Series for Research purpose.", "I used Matlab for that.", "I didn't know it can/can't process Infinite Series."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Matlab", "childNum": 1, "tag": "strong", "pos": 1, "childList": [{"text": "Matlab", "tag": "a"}]}, {"text": "Matlab", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.mathworks.com/products/matlab/"}]}, {"text": ["But I think there is a possibility.", "U can try :)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]