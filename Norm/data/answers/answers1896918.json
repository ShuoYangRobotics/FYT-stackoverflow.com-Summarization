[[{"text": ["The simplest solution for your users (not necessarily for you) is to provide an executable script (runtests.py or some such) which bootstraps the necessary test environment, including adding your root project directory to sys.path temporarily.", "This doesn't have to involve users setting environment variables, something like this works fine in a bootstrap script:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys, os\n\nsys.path.insert(0, os.path.dirname(__file__))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then your instructions to your users can be as simple as \"python runtests.py\"."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Also, the unittest module in Python 2.7+ (which is backported as unittest2 for Python 2.6 and earlier) now has test discovery built-in, so nose is no longer necessary if you want automated test discovery: your user instructions can be as simple as \"python -m unittest discover\"."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "unittest module in Python 2.7+", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/unittest.html"}, {"href": "http://pypi.python.org/pypi/unittest2", "text": "unittest2", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://docs.python.org/library/unittest.html#test-discovery", "text": "test discovery", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["And the current directory is always on sys.path in Python, so as long as your users are in your project directory when they run the tests, your module should be importable without any sys.path modifications (though not if you put all your modules inside an extra directory, as in your example, which I generally don't do; if you just have one top-level module, antigravity.py, I'd just put that file at the top level.", ") "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["From the article you linked to:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Perhaps you should look at nose as it suggests?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "nose", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose/0.11.1/"}]}], [{"text": ["I generally create a \"run tests\" script in the project directory (the one that is common to both the source directory and test) that loads my \"All Tests\" suite.", "This is usually boilerplate code, so I can reuse it from project to project."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "test", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["run_tests.py:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import unittest\nimport test.all_tests\ntestSuite = test.all_tests.create_test_suite()\ntext_runner = unittest.TextTestRunner().run(testSuite)\n</code>\n</pre>\n", "senID": 2}, {"text": ["test/all_tests.py (from http://stackoverflow.com/questions/1732438)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://stackoverflow.com/questions/1732438", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1732438"}]}, {"code": "<pre>\n<code>\n import glob\nimport unittest\n\ndef create_test_suite():\n    test_file_strings = glob.glob('test/test_*.py')\n    module_strings = ['test.'+str[5:len(str)-3] for str in test_file_strings]\n    suites = [unittest.defaultTestLoader.loadTestsFromName(name) \\\n              for name in module_strings]\n    testSuite = unittest.TestSuite(suites)\n    return testSuite\n</code>\n</pre>\n", "senID": 4}, {"text": ["With this setup, you can indeed just include antigravity in your test modules.", "The downside is you would need more support code to execute a particular test...", "I just run them all every time."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "include antigravity", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["if you run \"python setup.py develop\" then the package will be in the path.", "But you may not want to do that because you could infect your system python installation, which is why tools like virtualenv and buildout exist.  "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "virtualenv", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/virtualenv"}, {"href": "http://www.buildout.org/", "text": "buildout", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Use setup.py develop to make your working directory be part of the installed Python environment, then run the tests."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "setup.py develop", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]