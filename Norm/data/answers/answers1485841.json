[[{"text": ["++ is not an operator.", "It is two + operators.", "The + operator is the identity operator, which does nothing.", "(Clarification: the + and - unary operators only work on numbers, but I presume that you wouldn't expect a hypothetical ++ operator to work on strings."], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "++", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "identity", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "-", "childNum": 0, "tag": "code", "childList": []}, {"text": "++", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n ++count\n</code>\n</pre>\n", "senID": 1}, {"text": ["Parses as"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n +(+count)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Which translates to"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n count\n</code>\n</pre>\n", "senID": 5}, {"text": ["You have to use the slightly longer += operator to do what you want to do:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "+=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n count += 1\n</code>\n</pre>\n", "senID": 7}, {"text": ["I suspect the ++ and -- operators were left out for consistency and simplicity.", "I don't know the exact argument Guido van Rossum gave for the decision, but I can imagine a few arguments:"], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "++", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "--", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "Simpler parsing. Technically, parsing ", "tag": "none", "senID": 9}, {"text": "Simpler language. ", "tag": "none", "senID": 10}, {"text": "Confusing side-effects. One common newbie error in languages with ", "tag": "none", "senID": 11}]}], [{"text": ["When you want to increment or decrement, you typically want to do that on an integer.", "Like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b++;\n</code>\n</pre>\n", "senID": 1}, {"text": ["But in Python, integers are immutable.", "That is you can't change them.", "This is because the integer objects can be used under several names.", "Try this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "immutable", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; b = 5\n&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; id(a)\n162334512\n&gt;&gt;&gt; id(b)\n162334512\n&gt;&gt;&gt; a is b\nTrue\n</code>\n</pre>\n", "senID": 3}, {"text": ["a and b above are actually the same object.", "If you incremented a, you would also increment b.", "That's not what you want.", "So you have to reassign.", "Like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n b = b + 1\n</code>\n</pre>\n", "senID": 5}, {"text": ["Or simpler:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n b += 1\n</code>\n</pre>\n", "senID": 7}, {"text": ["Which will reassign b to b+1.", "That is not an increment operator, because it does not increment b, it reassigns it."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["In short: Python behaves differently here, because it is not C, and is not a low level wrapper around machine code, but a high-level dynamic language, where increments don't make sense, and also are not as necessary as in C, where you use them every time you have a loop, for example."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["In python ++(increment) or --(decrement) operators do not exist.", "In case of C++"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n int a = 5;\nb = ++a;\n</code>\n</pre>\n", "senID": 1}, {"text": ["b will be assigned the value 6.", "But, in python a++ will generate a syntax error as + or ++ is a binary operator and it needs a second operand.", "+a, ++a, +++++++a are all read by the python interpreter as +a"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["and doing something like this in python"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a = 5\nb = a ++ 5   // b is assigned 10\nb = a +++ 5   // b is again assigned 10\n</code>\n</pre>\n", "senID": 4}, {"text": ["So, ++ means simply two pluses."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]