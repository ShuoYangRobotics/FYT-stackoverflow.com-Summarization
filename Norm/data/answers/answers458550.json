[[{"text": ["Not directly an answer to your question, but you should consider naming it __version__, not version."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__version__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "version", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["This is almost a quasi-standard.", "Many modules in the standard library use __version__, and this is also used in lots of 3rd-party modules, so it's the quasi-standard.", "It's also mentioned in PEP 3001"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "__version__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "lots", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.google.com/codesearch?as%5Fq=%5F%5Fversion%5F%5F&btnG=Search+Code&hl=en&as%5Flang=python&as%5Flicense%5Frestrict=i&as%5Flicense=&as%5Fpackage=&as%5Ffilename=&as%5Fcase="}, {"text": "PEP 3001", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3001/"}]}, {"text": ["Usually, __version__ is a string, but sometimes it's also a float or tuple."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "__version__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit: as mentioned by S.Lott (Thank you!", "), PEP 8 says it explicitly:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "PEP 8", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["Though this is probably far too late, there is a slightly simpler alternative to the previous answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n __version_info__ = ('1', '2', '3')\n__version__ = '.'.join(__version_info__)\n</code>\n</pre>\n", "senID": 1}, {"text": ["(And it would be fairly simple to convert auto-incrementing portions of version numbers to a string using str()."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "str()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Of course, from what I've seen, people tend to use something like the previously-mentioned version when using __version_info__, and as such store it as a tuple of ints; however, I don't quite see the point in doing so, as I doubt there are situations where you would perform mathematical operations such as addition and subtraction on portions of version numbers for any purpose besides curiosity or auto-incrementation (and even then, int() and str() can be used fairly easily), and comparison operations can be performed just as easily on string numerals as on integers.", "(On the other hand, there is the possibility of someone else's code expecting a numerical tuple rather than a string tuple and thus failing."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "__version_info__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "int()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "str()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["This is, of course, my own view, and I would gladly like others' input on using a numerical tuple."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Here is how I do this.", "Advantages of the following method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is how it works: the \"one canonical place\" to store the version number is a .py file, named \"_version.py\" which is in your Python package, for example in myniftyapp/_version.py.", "This file is a Python module, but your setup.py doesn't import it!", "(That would defeat feature 3.", ") Instead your setup.py knows that the contents of this file is very simple, something like:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "myniftyapp/_version.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n __version__ = \"3.6.5\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["And so your setup.py opens the file and parses it, with code like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n verstrline = open(VERSIONFILE, \"rt\").read()\nVSRE = r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\"\nmo = re.search(VSRE, verstrline, re.M)\nif mo:\n    verstr = mo.group(1)\nelse:\n    raise RuntimeError(\"Unable to find version string in %s.\" % (VERSIONFILE,))\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then your setup.py passes that string as the value of the \"version\" argument to setup(), thus satisfying feature 2."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "setup()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["To satisfy feature 1, you can have your package (at run-time, not at setup time!", ") import the _version file from myniftyapp/__init__.py like this:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "myniftyapp/__init__.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n from _version import __version__\n</code>\n</pre>\n", "senID": 7}, {"text": ["Here is an example of this technique that I've been using for years."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "an example of this technique", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://tahoe-lafs.org/trac/zfec/browser/trunk/zfec/setup.py?annotate=blame&rev=390"}]}, {"text": ["The code in that example is a bit more complicated, but the simplified example that I wrote into this comment should be a complete implementation."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Here is example code of importing the version."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "example code of importing the version", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://tahoe-lafs.org/trac/zfec/browser/trunk/zfec/zfec/__init__.py?annotate=blame&rev=363"}]}, {"text": ["If you see anything wrong with this approach, please let me know: zooko at zooko dot com.", "If you don't see anything wrong with this approach then please vote this answer up!", "Because the more packages come with their version numbers in the expected places the better!"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["There doesn't seem to be a standard way to embed a version string in a python package.", "Most packages I've seen use some variant of your solution, i.e.", "eitner"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Also worth noting is that as well as __version__ being a semi-std.", "in python so is __version_info__ which is a tuple, in the simple cases you can just do something like:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__version__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__version_info__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n __version__ = '1.2.3'\n__version_info__ = tuple([ int(num) for num in __version__.split('.')])\n</code>\n</pre>\n", "senID": 1}, {"text": ["...and you can get the __version__ string from a file, or whatever."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "__version__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I also saw another style:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; django.VERSION\n(1, 1, 0, 'final', 0)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For what it's worth, if you're using NumPy distutils, numpy.distutils.misc_util.Configuration has a make_svn_version_py() method that embeds the revision number inside package.__svn_version__ in the variable version ."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "numpy.distutils.misc_util.Configuration", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.scipy.org/doc/numpy/reference/distutils.html#numpy.distutils.misc_util.Configuration.make_svn_version_py", "text": "make_svn_version_py()", "childNum": 1, "tag": "a", "childList": [{"text": "make_svn_version_py()", "tag": "code"}]}, {"text": "make_svn_version_py()", "childNum": 0, "tag": "code", "childList": []}, {"text": "package.__svn_version__", "childNum": 0, "tag": "code", "childList": []}, {"text": "version", "childNum": 0, "tag": "code", "childList": []}]}]]