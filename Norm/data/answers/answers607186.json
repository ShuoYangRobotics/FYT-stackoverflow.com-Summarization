[[{"text": ["Change your code to this and I think it'll explain things (presumably super is looking at where, say, B is in the __mro__?", "):"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "super", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "B", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__mro__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class A(object):\n    def __init__(self):\n        print \"A init\"\n        print self.__class__.__mro__\n\nclass B(A):\n    def __init__(self):\n        print \"B init\"\n        print self.__class__.__mro__\n        super(B, self).__init__()\n\nclass C(A):\n    def __init__(self):\n        print \"C init\"\n        print self.__class__.__mro__\n        super(C, self).__init__()\n\nclass D(B, C):\n    def __init__(self):\n        print \"D init\"\n        print self.__class__.__mro__\n        super(D, self).__init__()\n\nx = D()\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you run it you'll see:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n D init\n(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\nB init\n(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\nC init\n(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\nA init\n(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Also it's worth checking out Python's Super is nifty, but you can't use it."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Python's Super is nifty, but you can't use it", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://fuhm.net/super-harmful/"}]}], [{"text": ["I have provided a bunch of links below, that answer your question in more detail and more precisely than I can ever hope to.", "I will however give an answer to your question in my own words as well, to save you some time.", "I'll put it in points -"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Explanation for your example"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Explanation for your example", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n MRO: D,B,C,A,object\n</code>\n</pre>\n", "senID": 2}, {"text": ["An explanation of super\nhttp://www.python.org/download/releases/2.2.3/descrintro/#cooperation\nThings to watch for when using super\nhttp://fuhm.net/super-harmful/\nPythons MRO Algorithm:\nhttp://www.python.org/download/releases/2.3/mro/\nsuper's docs:\nhttp://docs.python.org/library/functions.html\nThe bottom of this page has a nice section on super:\nhttp://docstore.mik.ua/orelly/other/python/0596001886_pythonian-chp-5-sect-2.html "], "childNum": 19, "tag": "p", "senID": 3, "childList": [{"text": "An explanation of super", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://www.python.org/download/releases/2.2.3/descrintro/#cooperation", "text": "http://www.python.org/download/releases/2.2.3/descrintro/#cooperation", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "Things to watch for when using super", "childNum": 0, "tag": "strong", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://fuhm.net/super-harmful/", "text": "http://fuhm.net/super-harmful/", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "Pythons MRO Algorithm:", "childNum": 0, "tag": "strong", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://www.python.org/download/releases/2.3/mro/", "text": "http://www.python.org/download/releases/2.3/mro/", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "super's docs:", "childNum": 0, "tag": "strong", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://docs.python.org/library/functions.html", "text": "http://docs.python.org/library/functions.html", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "The bottom of this page has a nice section on super:", "childNum": 0, "tag": "strong", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://docstore.mik.ua/orelly/other/python/0596001886_pythonian-chp-5-sect-2.html", "text": "http://docstore.mik.ua/orelly/other/python/0596001886_pythonian-chp-5-sect-2.html", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["I hope this helps clear it up."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["just guessing:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["self in all the four methods refer to the same object, that is, of class D.\nso, in B.__init__(), the call to to super(B,self) knows the whole diamond ancestry of self and it has to fetch the method from 'after' B. in this case, it's the C class."], "childNum": 7, "tag": "p", "senID": 1, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "D", "childNum": 0, "tag": "code", "childList": []}, {"text": "B.__init__()", "childNum": 0, "tag": "code", "childList": []}, {"text": "super(B,self)", "childNum": 0, "tag": "code", "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "childList": []}, {"text": "B", "childNum": 0, "tag": "code", "childList": []}, {"text": "C", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["EDIT: Reading Jacob Gabrielson's link toSuper Harmfulhas exposed my Java background -super()definitely behaves differently in Python.", "I'll leave the rest of my answer for reference below:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "EDIT: Reading Jacob Gabrielson's link toSuper Harmfulhas exposed my Java background -super()definitely behaves differently in Python. I'll leave the rest of my answer for reference below:", "childNum": 2, "tag": "strong", "pos": -1, "childList": [{"text": "Super Harmful", "tag": "a"}, {"text": "super()", "tag": "code"}]}, {"text": "Super Harmful", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://fuhm.net/super-harmful/"}, {"text": "super()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Posting as an answer, because it's too big for a comment:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Now that I look at it again, and keep in mind I don't have an interpreter handy, wouldn't you expect to see:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n D init\nB init\nC init\nA init\n</code>\n</pre>\n", "senID": 3}, {"text": ["anyway, because C will be calling super() regardless?"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "C", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "super()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["At any rate, I believe the behaviour can probably be explained by the fact that everyone should be aware that D inherits from both B and C, in that order."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "D", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "B", "childNum": 0, "tag": "code", "childList": []}, {"text": "C", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["This is a good question, and I hope someone can give you a definitive answer!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]