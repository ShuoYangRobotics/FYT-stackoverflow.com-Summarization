[[{"text": ["In 2.7 and down, print is a statement.", "In python 3, print is a function.", "To use the print function in Python 2.6 or 2.7, you can do "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n [~/repo/py]\n|4&gt;from __future__ import print_function\n\n[~/repo/py]\n|5&gt;print print\n--&gt;print(print)\n&lt;built-in function print&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["See this section from the Python Language Reference, as well as PEP 3105 for why it changed."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "this section", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/simple_stmts.html#grammar-token-print_stmt"}, {"href": "http://www.python.org/dev/peps/pep-3105/", "text": "PEP 3105", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["In Python 3, print() is a built-in function (object)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "print()", "tag": "a", "pos": 0, "childList": [{"text": "print()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/release/3.1.3/library/functions.html#print"}, {"text": "print()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Before this, print was a statement.", "Demonstration..."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "print", "tag": "a", "pos": 0, "childList": [{"text": "print", "tag": "code"}], "childNum": 1, "href": "http://www.python.org/doc//current/reference/simple_stmts.html#the-print-statement"}, {"text": "print", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "statement", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n % pydoc2.6 print\n\nThe ``print`` statement\n***********************\n\n   print_stmt ::= \"print\" ([expression (\",\" expression)* [\",\"]]\n                  | \"&gt;&gt;\" expression [(\",\" expression)+ [\",\"]])\n\n``print`` evaluates each expression in turn and writes the resulting\nobject to standard output (see below).  If an object is not a string,\nit is first converted to a string using the rules for string\nconversions.  The (resulting or original) string is then written.  A\nspace is written before each object is (converted and) written, unless\nthe output system believes it is positioned at the beginning of a\nline.  This is the case (1) when no characters have yet been written\nto standard output, (2) when the last character written to standard\noutput is a whitespace character except ``' '``, or (3) when the last\nwrite operation on standard output was not a ``print`` statement. (In\nsome cases it may be functional to write an empty string to standard\noutput for this reason.)\n\n-----8&lt;-----\n</code>\n</pre>\n", "senID": 2}, {"code": "<pre>\n<code>\n % pydoc3.1 print\n\nHelp on built-in function print in module builtins:\n\nprint(...)\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout)\n\n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file: a file-like object (stream); defaults to the current sys.stdout.\n    sep:  string inserted between values, default a space.\n    end:  string appended after the last value, default a newline.\n</code>\n</pre>\n", "senID": 3}], [{"text": ["print is a mistake that has been rectified in Python 3.", "In Python 3 it is a function.", "In Python 1.x and 2.x it is not a function, it is a special form like if or while, but unlike those two it is not a control structure."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So, I guess the most accurate thing to call it is a statement."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["In Python all statements (except assignment) are expressed with reserved words, not addressible objects.", "That is why you cannot simply print print and you get a SyntaxError for trying.", "It's a reserved word, not an object."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "print print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "SyntaxError", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Confusingly, you can have a variable named print.", "You can't address it in the normal way, but you can setattr(locals(), 'print', somevalue) and then print locals()['print']."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "can", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "setattr(locals(), 'print', somevalue)", "childNum": 0, "tag": "code", "childList": []}, {"text": "print locals()['print']", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Other reserved words that might be desirable as variable names but are nonetheless verboten:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class\nimport\nreturn\nraise\nexcept\ntry\npass\nlambda\n</code>\n</pre>\n", "senID": 3}]]