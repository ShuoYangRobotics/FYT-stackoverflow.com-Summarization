[[{"text": ["Use the reversed() built-in function:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "reversed()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [\"foo\", \"bar\", \"baz\"]\n&gt;&gt;&gt; for i in reversed(a):\n...     print i\n... \nbaz\nbar\nfoo\n</code>\n</pre>\n", "senID": 1}, {"text": ["To also access the original index:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i, e in reversed(list(enumerate(a))):\n...     print i, e\n... \n2 baz\n1 bar\n0 foo\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for item in my_list[::-1]:\n    print item\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Or whatever you want to do in the for loop."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The [::-1] slice reverses the list in the for loop (but won't actually modify your list \"permanently\")."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "[::-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you need the loop index, and don't want to traverse the entire list twice, or use extra memory, I'd write a generator.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def reverse_enum(L):\n   for index in reversed(xrange(len(L))):\n      yield index, L[index]\n\nL = ['foo', 'bar', 'bas']\nfor index, item in reverse_enum(L):\n   print index, item\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use list.reverse() and then iterate as you normally would."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/tutorial/datastructures.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/tutorial/datastructures.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html"}]}], [{"text": ["It can be done like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nfor i in range(len(collection)-1, -1, -1):\n    print collection[i]\n</pre>\n", "senID": 1}, {"text": ["So your guess was pretty close :) A little awkward but it's basically saying: start with 1 less than len(collection), keep going until you get to just before -1, by steps of -1.  "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "len(collection)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Fyi, the help function is very useful as it lets you view the docs for something from the Python console, eg:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "help", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["help(range)"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "help(range)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["the reverse function comes in handy here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n myArray = [1,2,3,4]\nmyArray.reverse()\nfor x in myArray:\n    print x\n</code>\n</pre>\n", "senID": 1}]]