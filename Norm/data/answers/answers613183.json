[[{"text": ["It is not possible to sort a dict, only to get a representation of a dict that is sorted.", "Dicts are inherently orderless, but other types, such as lists and tuples, are not.", "So you need a sorted representation, which will be a list\u2014probably a list of tuples.", "For instance,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import operator\nx = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nsorted_x = sorted(x.iteritems(), key=operator.itemgetter(1))\n</code>\n</pre>\n", "senID": 1}, {"text": ["sorted_x will be a list of tuples sorted by the second element in each tuple.", "dict(sorted_x) == x."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "sorted_x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict(sorted_x) == x", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["As simple as: sorted(dict1, key=dict1.get)"], "childNum": 1, "tag": "h2", "senID": 0, "childList": [{"text": "sorted(dict1, key=dict1.get)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Well, it is actually possible to do a \"sort by dictionary values\".", "Recently had to do that in a Code Golf (http://stackoverflow.com/questions/3169051#3170549).", "Abridged, the problem was of the kind: given a text, count how often each word is encountered and display list of the top words, sorted by decreasing frequency. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/3169051#3170549", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3169051#3170549"}]}, {"text": ["If you construct dictionary with the words as keys and the number of occurences of each word as value, simplified here as"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n d = defaultdict(int)\nfor w in text.split():\n  d[w] += 1\n</code>\n</pre>\n", "senID": 3}, {"text": ["then you can get list of the words in order of frequency of use with sorted(d, key=d.get) - the sort iterates over the dictionary keys, using as sort-key the number of word occurrences. "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "sorted(d, key=d.get)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for w in sorted(d, key=d.get, reverse=True):\n  print w, d[w]\n</code>\n</pre>\n", "senID": 5}, {"text": ["I am writing this detailed explanation to illustrate what do people often mean by \"i can easily sort a dictionary by key but how do i sort by value\" - and i think the OP was trying to address such issue.", "And the solution is to do sort of list of the keys, based on the values, as shown above."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Dicts can't be sorted, but you can build sorted list from them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A sorted list of dict values:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n sorted(d.values())\n</code>\n</pre>\n", "senID": 2}, {"text": ["A list of (key, value) pairs, sorted by value:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from operator import itemgetter\nsorted(d.items(), key=itemgetter(1))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You could use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["sorted(d.items(), key=lambda x: x[1])"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sorted(d.items(), key=lambda x: x[1])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This will sort the dictionary by the values of each entry within the dictionary from smallest to largest."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["in recent Python 2.7, we have new OrderedDict type, which remembers the order in which the items were added."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "OrderedDict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/whatsnew/2.7.html#pep-372-adding-an-ordered-dictionary-to-collections"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {\"third\": 3, \"first\": 1, \"fourth\": 4, \"second\": 2}\n\n&gt;&gt;&gt; for k, v in d.items():\n...     print \"%s: %s\" % (k, v)\nsecond: 2\nfourth: 4\nthird: 3\nfirst: 1\n\n&gt;&gt;&gt; d\n{'second': 2, 'fourth': 4, 'third': 3, 'first': 1}\n\n&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; # make a new ordered dictionary from the original,\n&gt;&gt;&gt; # sorting its items by values\n&gt;&gt;&gt; d_sorted_by_value = OrderedDict(sorted(d.items(), key=lambda x: x[1]))\n\n&gt;&gt;&gt; # behaves like a normal dict\n&gt;&gt;&gt; for k, v in d_sorted_by_value.items():\n...     print \"%s: %s\" % (k, v)\nfirst: 1\nsecond: 2\nthird: 3\nfourth: 4\n\n&gt;&gt;&gt; d_sorted_by_value\nOrderedDict([('first': 1), ('second': 2), ('third': 3), ('fourth': 4)])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Pretty much the same as Hank Gay's answer;"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nsorted([(value,key) for (key,value) in mydict.items()])\n</pre>\n", "senID": 1}], [{"text": ["You can create an \"inverted index\", also"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\ninverse= defaultdict( list )\nfor k, v in originalDict.items():\n    inverse[v].append( k )\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now your inverse has the values; each value has a list of applicable keys."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for k in sorted(inverse):\n    print k, inverse[k]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Technically, dictionaries aren't sequences, and therefore can't be sorted.", "You can do something like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sorted(a_dictionary.values())\n</code>\n</pre>\n", "senID": 1}, {"text": ["assuming performance isn't a huge deal."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["UPDATE: Thanks to the commenters for pointing out that I made this way too complicated in the beginning."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n import operator\norigin_list = [\n    {\"name\": \"foo\", \"rank\": 0, \"rofl\": 20000},\n    {\"name\": \"Silly\", \"rank\": 15, \"rofl\": 1000},\n    {\"name\": \"Baa\", \"rank\": 300, \"rofl\": 20},\n    {\"name\": \"Zoo\", \"rank\": 10, \"rofl\": 200},\n    {\"name\": \"Penguin\", \"rank\": -1, \"rofl\": 10000}\n]\nprint \"&gt;&gt; Original &gt;&gt;\"\nfor foo in origin_list:\n    print foo\n\nprint \"\\n&gt;&gt; Rofl sort &gt;&gt;\"\nfor foo in sorted(origin_list, key=operator.itemgetter(\"rofl\")):\n    print foo\n\nprint \"\\n&gt;&gt; Rank sort &gt;&gt;\"\nfor foo in sorted(origin_list, key=operator.itemgetter(\"rank\")):\n    print foo\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I had the same problem, I solved it like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["WantedOutput =  sorted(MyDict,key= lambda x : MyDict[x]) "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["(people who answer: \"It is not possible to sort a dict\" did not read the question!!", "In fact \"I can sort on the keys, but how can I sort based on the values?", "\" clearly means that he wants a list of the keys sorted according to the value of their values."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Please remark that the order is not well defined (keys with the same value will be in an arbitrary order in the output list)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["New Answer -- two years late..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "New Answer", "childNum": 0, "tag": "b", "pos": 0, "childList": []}]}, {"text": ["It can often be very handy to use namedtuple.", "For example, you have a dictionary of 'name' as keys and 'score' as values and you want to sort on 'score':"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "namedtuple", "childNum": 1, "tag": "b", "pos": 0, "childList": [{"text": "namedtuple", "tag": "a"}]}, {"text": "namedtuple", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#collections.namedtuple"}]}, {"code": "<pre>\n<code>\n import collections\nPlayer = collections.namedtuple('Player', 'score name')\nd = {'John':5, 'Alex':10, 'Richard': 7}\n</code>\n</pre>\n", "senID": 2}, {"text": ["sorting with lowest score first:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n worst = sorted(Player(v,k) for (k,v) in d.items())\n</code>\n</pre>\n", "senID": 4}, {"text": ["sorting with highest score first:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Now you can get the name and score of, let's say the second-best player (index=1) very Pythonically like this:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n player = best[1]\n    player.name\n        'Richard'\n    player.score\n         7\n</code>\n</pre>\n", "senID": 8}], [{"code": "<pre>\n<code>\n from django.utils.datastructures import SortedDict\n\ndef sortedDictByKey(self,data):\n    \"\"\"Sorted dictionary order by key\"\"\"\n    sortedDict = SortedDict()\n    if data:\n        if isinstance(data, dict):\n            sortedKey = sorted(data.keys())\n            for k in sortedKey:\n                sortedDict[k] = data[k]\n    return sortedDict\n</code>\n</pre>\n", "senID": 0}]]