[[{"text": ["No, Python does not have such a mechanism.", "Block comments are made by prepending each line with a pound sign.", "For more info, see good ol'-fashioned PEP 8.", "In any case, almost all Python IDEs support a mechanism to do the block-commenting-with-pound-signs automatically for you.", "For example, in IDLE on my machine, it's Alt-3 and Alt-4."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "PEP 8", "tag": "a", "pos": 2, "childList": [{"text": "PEP 8", "tag": "strong"}], "childNum": 1, "href": "http://www.python.org/dev/peps/pep-0008/"}, {"text": "PEP 8", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "Alt-3", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "Alt-4", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Don't use triple-quotes; as you discovered, this is for documentation strings, not block comments, although it has a similar effect.", "If you're just commenting things out temporarily, this is fine as a temporary measure."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Don't use triple-quotes;", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["The only cure I know for this is a good editor.", "Sorry. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Hide the triple quotes in a context that won't be mistaken for a docstring, eg:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n '''\n...statements...\n''' and None\n</code>\n</pre>\n", "senID": 1}, {"text": ["or:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if False: '''\n...statements...\n'''\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The only way you can do this without triple quotes is to add an:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if False:\n</code>\n</pre>\n", "senID": 1}, {"text": ["And then indent all your code.", "Note that the code will still need to have proper syntax."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "hr", "senID": 3}, {"text": ["Many python IDE's can add # for you on each selected line, and remove them when un-commenting too.", "Likewise if you use vi or emacs you can create a macro to do this for you for a block of code."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["This question was answered previously here:\nhttp://stackoverflow.com/questions/397148/why-doesnt-python-have-multline-comments"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/397148/why-doesnt-python-have-multline-comments", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/397148/why-doesnt-python-have-multline-comments"}]}], [{"text": ["M-x comment-region, in emacs Python mode."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["At least in VIM you can select the first column of text you want to insert using Block Visual mode (CTRL+V in non-windows VIMs) and then prepend a # before each line using this sequence:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "CTRL+V", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "#", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n I#&lt;esc&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["In Block Visual mode I moves to insert mode with the cursor before the block on its first line.", "The inserted text is copied before each line in the block."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "I", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "each", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["in vi:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["go to top of block and mark it with letter a\ngo to bottom of block and mark it with letter b"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["then do"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n :'a,'b s!^!#!\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The only mechanism to comment out python code (understood as code ignored by the interpreter) is the #."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the #", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/lexical%5Fanalysis.html#id2"}]}, {"text": ["As you say, you can also use string literals, that are not ignored by the interpreter but can be completely irrelevant for the program execution."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "string literals", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/lexical%5Fanalysis.html#string-literals"}]}], [{"text": ["I use NotePad++ on a windows machine,   select your code,   type CTRL-K.   To uncomment you select code and press CTRL-SHFT-K."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "CTRL-K", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "CTRL-SHFT-K", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Incidentally,  NotePad++ works nicely as a Python editor.", "With auto-completion, code folding, syntax highlighting, and much more.", "And its free as in speech and as in beer!!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Use a nice editor like SciTe, select your code, press Ctrl+Q and done."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you don't have an editor that supports block comments you can use a triple quoted string at the start and the end of your code block to 'effectively' comment it out.", "Not the best practice though."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Triple quotes are OK to me.", "You can use ''' foo ''' for docstrings and \"\"\" bar \"\"\" for comments or vice-versa to make the code more readable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n comm='''\nJunk, or working code \nthat I need to comment.\n'''\n</code>\n</pre>\n", "senID": 0}, {"text": ["You can replace comm by a variable of your choice that is perhaps shorter, easy to touch-type, and you know does not (and will not) occur in your programs.", "Examples: xxx, oo, null, nil."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "comm", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "xxx", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "oo", "childNum": 0, "tag": "code", "childList": []}, {"text": "null", "childNum": 0, "tag": "code", "childList": []}, {"text": "nil", "childNum": 0, "tag": "code", "childList": []}]}]]