[[{"text": ["It's because any iterable can be joined, not just lists, but the result and the \"joiner\" are always strings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Because the join() method is in the string class, instead of the list class?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "join()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I agree it looks funny."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["See http://www.faqs.org/docs/diveintopython/odbchelper_join.html:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.faqs.org/docs/diveintopython/odbchelper_join.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.faqs.org/docs/diveintopython/odbchelper_join.html"}]}], [{"text": ["I agree that it's counterintuitive at first, but there's a good reason.", "Join can't be a method of a list because:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "it must work for different iterables too (tuples, generators, etc.) ", "tag": "none", "senID": 1}, {"text": "it must have different behavior between different types of strings.", "tag": "none", "senID": 2}]}, {"text": ["There are actually two join methods (Python 3.0):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; b\"\".join\n&lt;built-in method join of bytes object at 0x00A46800&gt;\n&gt;&gt;&gt; \"\".join\n&lt;built-in method join of str object at 0x00A28D40&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["If join was a method of a list, then it would have to inspect its arguments to decide which one of them to call.", "And you can't join byte and str together, so the way they have it now makes sense. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Primarily because the result of a someString.join() is a string."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "someString.join()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The sequence (list or tuple or whatever) doesn't appear in the result, just a string.", "Because the result is a string, it makes sense as a method of a string."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Think of it as the natural orthogonal operation to split."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I understand why it is applicable to anything iterable and so can't easily be implemented just on list."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "just", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["For readability, I'd like to see it in the language but I don't think that is actually feasible - if iterability were an interface then it could be added to the interface but it is just a convention and so there's no central way to add it to the set of things which are iterable."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]