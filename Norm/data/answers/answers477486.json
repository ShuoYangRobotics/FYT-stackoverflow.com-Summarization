[[{"text": ["Building on 'xrange([start], stop[, step])', you can define a generator that accepts and produces any type you choose (stick to types supporting + and &lt;):"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "'xrange([start], stop[, step])'", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#xrange"}, {"text": "+", "childNum": 0, "tag": "code", "childList": []}, {"text": "&lt;", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def drange(start, stop, step):\n...     r = start\n...     while r &lt; stop:\n...     \tyield r\n...     \tr += step\n...     \t\n&gt;&gt;&gt; i0=drange(0.0, 1.0, 0.1)\n&gt;&gt;&gt; [\"%g\" % x for x in i0]\n['0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Python's range() can only do integers, not floating point.", "In your specific case, you can use a list comprehension instead:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [x * 0.1 for x in range(0, 10)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Replace the call to range with that expression.", ") "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For the more general case, you may want to write a custom function or generator."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You can also use the numpy library (which isn't part of standard library but is relatively easy to obtain) which has the arange function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n>>> import numpy as np\n>>> np.arange(0,1,0.1)\narray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])\n</pre>\n", "senID": 1}, {"text": ["as well as the linspace function which lets you have control over what happens at the endpoint (non-trivial for floating point numbers when things won't always divide into the correct number of \"slices\"):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n>>> np.linspace(0,1,11)\narray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ])\n>>> np.linspace(0,1,10,endpoint=False)\narray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])\n</pre>\n", "senID": 3}], [{"text": ["Why don't you increase the magnitude of i for the loop and then reduce it when you need it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i * 100 in range(0, 100, 10):\n    print i / 100.0\n</code>\n</pre>\n", "senID": 1}], [{"text": ["And if you do this often, you might want to save the generated list r"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "r", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n r=map(lambda x: x/10.0,range(0,10))\nfor i in r:\n    print i\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The range() built-in function returns a sequence of integer values, I'm afraid, so you can't use it to do a decimal step.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'd say just use a while loop:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n i = 0.0\nwhile i &lt;= 1.0:\n    print i\n    i += 0.1\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you're curious, Python is converting your 0.1 to 0, which is why it's telling you the argument can't be zero."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The Python Cookbook has a recipe for this: http://code.activestate.com/recipes/66472/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.activestate.com/recipes/66472/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/66472/"}]}, {"text": ["Be sure to check the comments; they include improved versions and discussion of errors\n(for example, gimel's solution may accumulate errors due to repeated addition of floating point numbers)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["or you can use this function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def frange(start,end,step):\n return map(lambda x: x*step, range(int(start*1./step),int(end*1./step)))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Add auto-correction for the possibility of an incorrect sign on step:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def frange(start,step,stop):\n    step *= 2*((stop&gt;start)^(step&lt;0))-1\n    return [start+i*step for i in range(int((stop-start)/step))]\n</code>\n</pre>\n", "senID": 1}]]