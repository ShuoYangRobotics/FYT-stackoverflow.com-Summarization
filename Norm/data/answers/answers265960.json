[[{"text": ["From an efficiency perspective, you're not joing to beat translate() - it's performing raw string operations in C with a lookup table - there's not much that will beat that bar writing your own C code.", "If speed isn't a worry, another option though is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n exclude = set(string.punctuation)\ns = ''.join(ch for ch in s if ch not in exclude)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is faster than s.replace with each char, but won't perform as well as non-pure python approaches such as regexes or string.translate, as you can see from the below timings.", "For this type of problem, doing it at as low a level as possible pays off."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Timing code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import re, string, timeit\n\ns = \"string. With. Punctuation\"\nexclude = set(string.punctuation)\ntable = string.maketrans(\"\",\"\")\nregex = re.compile('[%s]' % re.escape(string.punctuation))\n\ndef test_set(s):\n    return ''.join(ch for ch in s if ch not in exclude)\n\ndef test_re(s):  # From Vinko's solution, with fix.\n    return regex.sub('', s)\n\ndef test_trans(s):\n    return s.translate(table, string.punctuation)\n\ndef test_repl(s):  # From S.Lott's solution\n    for c in string.punctuation:\n        s=s.replace(c,\"\")\n    return s\n\nprint \"sets      :\",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000)\nprint \"regex     :\",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000)\nprint \"translate :\",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000)\nprint \"replace   :\",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000)\n</code>\n</pre>\n", "senID": 4}, {"text": ["This gives the following results:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n sets      : 19.8566138744\nregex     : 6.86155414581\ntranslate : 2.12455511093\nreplace   : 28.4436721802\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Not necessarily simpler, but a different way, if you are more familiar with the re family. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re, string\ns = \"string. With. Punctuation?\" # Sample string \nout = re.sub('[%s]' % re.escape(string.punctuation), '', s)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I usually use something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"string. With. Punctuation?\" # Sample string\n&gt;&gt;&gt; import string\n&gt;&gt;&gt; for c in string.punctuation:\n...     s= s.replace(c,\"\")\n...\n&gt;&gt;&gt; s\n'string With Punctuation'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n myString.translate(None, string.punctuation)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Do search and replace using the regex functions, as seen here..", "If you have to repeatedly perform the operation, you can keep a compiled copy of the regex pattern (your punctuation) around, which will speed things up a bit."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/regex/regex.html#SECTION000620000000000000000"}]}], [{"text": ["This might not be the best solution however this is how I did it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n    f = lambda x: ''.join([i for i in x if i not in string.punctuation])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["string.punctuation is ascii ONLY!", "A more correct (but also much slower) way is to use the unicodedata module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # -*- coding: utf-8 -*-\nfrom unicodedata import category\ns = u'String \u2014 with -  \u00abpunctation \u00bb...'\ns = ''.join(ch for ch in s if category(ch)[0] != 'P')\nprint 'stripped', s\n</code>\n</pre>\n", "senID": 1}]]