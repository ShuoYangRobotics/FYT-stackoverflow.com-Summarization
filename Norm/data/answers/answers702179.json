[[{"text": ["It would seem as though you're a tad bit confused about what WSGI is and what Django is.", "Saying that Django and WSGI are competing is a bit like saying that C and SQL are competing:  you're comparing apples and oranges."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Django is a framework, WSGI is a protocol (which is supported by Django) for how the server interacts with the framework.", "Most importantly, learning to use WSGI directly is a bit like learning assembly.", "It's a great learning experience, but it's not really something you should do for production code (nor was it intended to be)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["At any rate, my advice is to figure it out for yourself.", "Most frameworks have a \"make a wiki/blog/poll in an hour\" type exercise.", "Spend a little time with each one and figure out which one you like best.", "After all, how can you decide between different frameworks if you're not willing to try them out?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'd say you're being a bit too pessimistic about \"not learning anything\" using Django or a similar full-stack framework, and underestimating the value of documentation and a large community.", "Even with Django there's still a considerable learning curve; and if it doesn't do everything you want, it's not like the framework code is impenetrable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some personal experience: I spent years, on and off, messing around with Twisted/Nevow, TurboGears and a few other Python web frameworks.", "I\u00a0never finished anything because the framework code was perpetually unfinished and being rewritten underneath me, the documentation was often nonexistent or wrong and the only viable support was via IRC (where I often got great advice, but felt like I was imposing if I asked too many questions)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["By comparison, in the past couple of years I've knocked off a few sites with Django.", "Unlike my previous experience, they're actually deployed and running.", "The Django development process may be slow and careful, but it results in much less bitrot and deprecation, and documentation that is actually helpful."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["HTTP authentication support for Django finally went in a few weeks ago, if that's what you're referring to in #3."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "finally went in", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.djangoproject.com/ticket/689"}]}], [{"text": ["I suggest taking another look at TG2.", "I think people have failed to notice some of the strides that have been made since the last version.", "Aside from the growing WSGI stack of utilities available there are quite a few TG2-specific items to consider.", "Here are a couple of highlights:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["TurboGears Administration System - This CRUD interface to your database is fully customizable using a declarative config class.", "It is also integrated with Dojo to give you infinitely scrollable tables.", "Server side validation is also automated.", "The admin interface uses RESTful urls and HTTP verbs which means it would be easy to connect to programatically using industry standards."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "TurboGears Administration System", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://turbogears.org/2.0/docs/main/Extensions/index.html"}]}, {"text": ["CrudRestController/RestController - TurboGears provides a structured way to handle services in your controller.", "Providing you the ability to use standardized HTTP verbs simply by extending our RestController.", "Combine Sprox with CrudRestController, and you can put crud anywhere in your application with fully-customizable autogenerated forms.", "TurboGears now supports mime-types as file extensions in the url, so you can have your controller render .json and .xml with the same interface it uses to render html (returning a dictionary from a controller)"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "CrudRestController", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://turbogears.org/2.0/docs/main/Extensions/Crud/index.html"}, {"text": "RestController", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://turbogears.org/2.0/docs/modules/tgcontroller.html?highlight=restcontroller#tg.controllers.RestController"}, {"text": "Sprox", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.sprox.org"}]}, {"text": ["If you click the links you will see that we have a new set of documentation built with sphinx which is more extensive than the docs of the past."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["With the best web server, ORM, and template system(s) (pick your own) under the hood, it's easy to see why TG makes sense for people who want to get going quickly, and still have scalability as their site grows."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "web server", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pylonshq.com"}, {"href": "http://www.sqlalchemy.org", "text": "ORM", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://genshi.edgewall.org/", "text": "template system", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["TurboGears is often seen as trying to hit a moving target, but we are consistent about releases, which means you won't have to worry about working out of the trunk to get the latest features you need.", "Coming to the future: more TurboGears extensions that will allow your application to grow functionality with the ease of paster commands."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Your question seems to be is it worth learning wsgi, and doing everything yourself, or using a \"full stack\" framework that does everything for you. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'd say that's a false dichotomy, and there's an obvious third way.", "TurboGears 2 tries to provide a smooth path from a \"do everything for you\" style framework up to an understanding of WSGI middleware, and an ability to customize almost every aspect of the framework to suit your application's needs. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["We may not be successful in every place at every level, but particularly if you've already got some TurboGears 1 experience I think the TG2 learning curve will be very, very easy at first, and you'll have the ability to go deeper exactly when you need it. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["To address your particular issues: "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "We provide an authorization system out of the box that matches the one you're used to from TG1.", "tag": "none", "senID": 4}, {"text": "We provide an out of the box \"django admin\" like interface called the tgext.admin, which works great with dojo to make a fancy spreadsheet like interface the default.", "tag": "none", "senID": 5}]}, {"text": ["I'd also like to address a couple of the other options that are out there and talk a little bit about the benifits. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["CherryPy.", "I think CherryPy is a great webserver and a nice minimilistic web-framework.", "It's not based on WSGI internally, but has good WSGI support, but it will not provide you with the \"full stack\" experience.", "But for custom setups, that need to be both fast, and aren't particularly suited to the defaults provided by Django or TurboGears it's a great solution."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "CherryPy.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Django.", "I think Django is a very nice, tigtly integrated system for developing websites.", "And if you're application and style of working fits within it's standard setup well it can be fantastic.", "If however you need to tune your DB usage, replace the template language, use a different user authorization model, or otherwise do things differently you may very likely find yourself fighting the framework. "], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Django.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Pylons  Pylons like CherryPy is a great minimalistic web-framework.", "Unlike CherryPy it's WSGI enabled through the whole system, and it provides some sane defaults like SQLAlchemy and Mako that can help you to scale well.", "And the new official docs are much better quality than the old wiki docs that are what you seem to have looked at. "], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Pylons", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]}], [{"text": ["Have you taken a look at CherryPy.", "It is minimalistic, yet efficient and simple.", "It is low level enough for not it to get in they way, but high enough to hide complexity.", "If I remember well, TurboGears was built on it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["With CherryPy, you have the choice of much everything.", "(Template framework, ORM if wanted, back-end, etc."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["WSGI is absurdly simple..", "It's basically a function that looks like.."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def application(environ, start_response) pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["The function is called when an HTTP request is received.", "environ contains various data (like the request URI etc etc), start_response is a callable function, used to set headers."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "environ", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "start_response", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The returned value is the body of the website."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["def application(environ, start_response):\n    start_response(\"200 OK\", [])\n    return \"...\""], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["That's all there is to it, really..", "It's not a framework, but more a protocol for web-frameworks to use.."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["For creating sites, using WSGI is not the \"right way\" - using existing frameworks is.. but, if you are writing a Python web-framework then using WSGI is absolutely the right way.."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Which framework you use (CherryPy, Django, TurboGears etc) is basically personal preference..", "Play around in each, see which you like the most, then use it..", "There is a StackOverflow question (with a great answer) about this, \"Recommendation for straight-forward python frameworks\""], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "\"Recommendation for straight-forward python frameworks\"", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/7170/recommendation-for-straight-forward-python-frameworks"}]}], [{"text": ["I'd say the correct answer depends on what you actually want and need, as what will be worthwhile in the long run depends on what you'll need in the long run.", "If your goal is to get applications deployed ASAP then the 'simpler' route, ie.", "Django, is surely the way to go.", "The value of a well-tested and well-documented system that exactly what you want can't be underestimated."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["On the other hand if you have time to learn a variety of new things which may apply in other domains and want to have the widest scope for customisation then something like Turbogears is superior.", "Turbogears gives you maximum flexibility but you will have to spend a lot of time reading external docs for things like Repoze, SQLAlchemy, and Genshi to get anything useful done with it.", "The TG2 docs are deliberately less detailed than the TG1 docs in some cases because it's considered that the external docs are better than they used to be.", "Whether this sort of thing is an obstacle or an investment depends on your own requirements."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "will", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["Have you checked out web2py?", "After recently evaluating many Python web frameworks recently I've decided to adopt this one.", "Also check out Google App Engine if you haven't already."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Django is definitely worth learning, and sounds like it will fit your purposes.", "The admin interface it comes with is easy to get up and running, and it does use authentication."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As for \"anything lower level\", if you mean sql, it is entirely possible to shove sql into you queries with the extra keyword.", "Stylistically, you always try to avoid that as much as possible."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As for \"not learning anything\"...the real question is whether your preference is to be primarily learning something lower-level or higher-level, which is hardly a question anyone here can answer for you."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Pylons seems a great tool for me:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "a real web framework (CherryPy is just a web server),", "tag": "none", "senID": 1}, {"text": "small code base - reuse of other projects,", "tag": "none", "senID": 2}, {"text": "written entirely with WSGI in mind, based on Paste,", "tag": "none", "senID": 3}, {"text": "allows you to code the app right away and touch the low level bits if it's necessary,", "tag": "none", "senID": 4}]}, {"text": ["I've used CherryPy and TurboGears and look at many other frameworks but none of them were so light and productive as Pylons is.", "Check the presentation at Google."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "presentation at Google", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.youtube.com/watch?v=Ui-mSFuUZmQ"}]}], [{"text": ["I'm a TurboGears fan, and this is exactly the reason why: a very nice trade-off between control and doing things right vs. easy."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You'll have to make up your own mind of course.", "Maybe you'd prefer to learn less, maybe more.", "Maybe the areas that I like knowledge/control (database for example), you couldn't care less about.", "And don't misunderstand.", "I'm not characterizing any frameworks as necessarily hard or wrong.", "It's just my subjective judgment."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Also I would recommend TurboGears 2 if at all possible.", "When it comes out, I think it will be much better than 1.0 in terms of what it has selected for defaults (genshi, pylons, SqlAlchemy)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I would suggest for TurboGears 2.", "They have done a fantastic job of integrating best of Python world. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["WSGI: Assuming you are developing moderately complex projects/ business solutions in TG2 or some other framework say Grok.", "Even though these frameworks supports WSGI does that mean one who is using these frameworks have to learn WSGI?", "In most cases answer is No.", "I mean it's good have this knowledge no doubt. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "WSGI:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["WSGI knowledge is probably is more useful in cases like"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "you want to use some middleware or some other component which is not provided as part of the standard stack for eg. Authkit with TG or ", "tag": "none", "senID": 3}, {"text": "you are doing some integration.", "tag": "none", "senID": 4}]}, {"text": ["CherryPy is good but think of handling your database commits/rollbacks at the end of transactions, exposing json, validations in such cases TG, Django like frameworks do it all for you."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "CherryPy", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]