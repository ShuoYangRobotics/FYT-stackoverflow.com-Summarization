[[{"text": ["Here, as I just discovered, is how to do this with the Django 1.1 aggregation API:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.db.models import Count\ntheanswer = Item.objects.values('category').annotate(Count('category'))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["(Update: Full ORM aggregation support is now included in Django 1.1.", "True to the below warning about using private APIs, the method documented here no longer works in post-1.1 versions of Django.", "I haven't dug in to figure out why; if you're on 1.1 or later you should use the real aggregation API anyway."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Django 1.1", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/releases/1.1/#aggregate-support"}, {"text": "aggregation API", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/db/aggregation/"}]}, {"text": ["The core aggregation support was already there in 1.0; it's just undocumented, unsupported, and doesn't have a friendly API on top of it yet.", "But here's how you can use it anyway until 1.1 arrives (at your own risk, and in full knowledge that the query.group_by attribute is not part of a public API and could change):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n query_set = Item.objects.extra(select={'count': 'count(1)'}, \n                               order_by=['-count']).values('count', 'category')\nquery_set.query.group_by = ['category_id']\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you then iterate over query_set, each returned value will be a dictionary with a \"category\" key and a \"count\" key."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You don't have to order by -count here, that's just included to demonstrate how it's done (it has to be done in the .extra() call, not elsewhere in the queryset construction chain).", "Also, you could just as well say count(id) instead of count(1), but the latter may be more efficient."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Note also that when setting .query.group_by, the values must be actual DB column names ('category_id') not Django field names ('category').", "This is because you're tweaking the query internals at a level where everything's in DB terms, not Django terms."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Since I was a little confused about how grouping in Django 1.1 works I thought I'd elaborate here on how exactly you go about using it.", "First, to repeat what Michael said:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Note also that you need to from django.db.models import Count!"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "from django.db.models import Count", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This will select only the categories and then add an annotation called category__count.", "Depending on the default ordering this may be all you need, but if the default ordering uses a field other thancategorythis will not work.", "The reason for this is that the fields required for ordering are also selected and make each row unique, so you won't get stuff grouped how you want it.", "One quick way to fix this is to reset the ordering:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "category__count", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "but if the default ordering uses a field other thancategorythis will not work", "childNum": 1, "tag": "strong", "pos": 1, "childList": [{"text": "category", "tag": "code"}]}, {"text": "category", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n Item.objects.values('category').annotate(Count('category')).order_by()\n</code>\n</pre>\n", "senID": 3}, {"text": ["This should produce exactly the results you want.", "To set the name of the annotation you can use:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n ...annotate(mycount = Count('category'))...\n</code>\n</pre>\n", "senID": 5}, {"text": ["Then you will have an annotation called mycount in the results."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "mycount", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Everything else about grouping was very straightforward to me.", "Be sure to check out the Django aggregation API for more detailed info."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Django aggregation API", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/db/aggregation"}]}], [{"text": ["How's this?", "(Other than slow."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n counts= [ (c, Item.filter( category=c.id ).count()) for c in Category.objects.all() ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["It has the advantage of being short, even if it does fetch a lot of rows."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "hr", "senID": 3}, {"text": ["Edit."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["The one query version.", "BTW, this is often faster than SELECT COUNT(*) in the database.", "Try it to see."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "faster", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n counts = defaultdict(int)\nfor i in Item.objects.all():\n    counts[i.category] += 1\n</code>\n</pre>\n", "senID": 6}], [{"text": ["According to a blog post comment, Django doesn't support GROUP BY, and nor do many other ORM's.", "I guess you'll have to roll out your own SQL."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "blog post comment", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://42topics.com/blog/2008/04/five-things-i-hate-about-django/#comment-19"}]}]]