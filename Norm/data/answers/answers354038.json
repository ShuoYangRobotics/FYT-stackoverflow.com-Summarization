[[{"text": ["Ah, here we are.", "Use the isdigit() function for string objects."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = \"03523\"\na.isdigit()\n</code>\n</pre>\n", "senID": 1}, {"text": ["True"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n b = \"963spam\"\nb.isdigit()\n</code>\n</pre>\n", "senID": 3}, {"text": ["False"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["String methods"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "String methods", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#id4"}]}, {"text": ["There's also something on Unicode strings, which I'm not too familiar with\nUnicode - Is decimal/decimal"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Unicode - Is decimal/decimal", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#unicode.isnumeric"}]}], [{"text": ["\"Which, not only is ugly and slow\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'd dispute both."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["A regex or other string parsing would be uglier and slower.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I'm not sure that anything much could be faster than the above.", "It calls the function and returns.", "Try/Catch doesn't introduce a much overhead because the most common exception is caught without an extensive search of stack frames."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The issue is that any numeric conversion function has two kinds of results"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "A number, if the number is valid", "tag": "none", "senID": 5}, {"text": "A status code (e.g., via errno) or exception to show that no valid number could be parsed.", "tag": "none", "senID": 6}]}, {"text": ["C (as an example) hacks around this a number of ways.", "Python lays it out clearly and explicitly."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I think your code for doing this is perfect."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["It may take some getting used to, but this is the pythonic way of doing it.", "As has been already pointed out, the alternatives are worse.", "But there is one other advantage of doing things this way:  polymorphism."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The central idea behind duck typing is that \"if it walks and talks like a duck, then it's a duck.", "\"  What if you decide that you need to subclass string so that you can change how you determine if something can be converted into a float?", "Or what if you decide to test some other object entirely?", "You can do these things without having to change the above code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Other languages solve these problems by using interfaces.", "I'll save the analysis of which solution is better for another thread.", "The point, though, is that python is decidedly on the duck typing side of the equation, and you're probably going to have to get used to syntax like this if you plan on doing much programming in Python (but that doesn't mean you have to like it of course)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["One other thing you might want to take into consideration: Python is pretty fast in throwing and catching exceptions compared to a lot of other languages (30x faster than .Net for instance).", "Heck, the language itself even throws exceptions to communicate non-exceptional, normal program conditions (every time you use a for loop).", "Thus, I wouldn't worry too much about the performance aspects of this code until you notice a significant problem."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Casting to float and catching ValueError is probably the fastest way, since float() is specifically meant for just that.", "Anything else that requires string parsing (regex, etc) will likely be slower due to the fact that it's not tuned for this operation.", "My $0.02."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There is one exception that you may want to take into account: the string 'NaN'"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want is_number to return FALSE for 'NaN' this code will not work as Python converts it to its representation of a number that is not a number (talk about identity issues):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; float('NaN')\nnan\n</code>\n</pre>\n", "senID": 2}, {"text": ["Otherwise, I should actually thank you for the piece of code I now use extensively.", ":)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["G."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Is some rare cases you might also need to check for complex numbers (e.g.", "1+2i), which can not be represented by a float:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def is_number(s):\n    try:\n        float(s) # for int, long and float\n    except ValueError:\n        try:\n            complex(s) # for complex\n        except ValueError:\n            return False\n\n    return True\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Your code looks fine to me."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Perhaps you think the code is \"clunky\" because of using exceptions?", "Note that Python programmers tend to use exceptions liberally when it improves code readability, thanks to its low performance penalty."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I did some speed test.", "Lets say that if the string is likely to be a number the try/except strategy is the fastest possible.If the string is not likely to be a number and you are interested in Integer check, it worths to do some test (isdigit plus heading '-').", "If you are interested to check float number, you have to use the try/except code whitout escape."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "likely", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "try/except", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "not likely", "childNum": 0, "tag": "strong", "childList": []}, {"text": "and", "childNum": 0, "tag": "strong", "childList": []}, {"text": "Integer", "childNum": 0, "tag": "strong", "childList": []}, {"text": "try/except", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["If you want to know if the entire string can be represented as a number you'll want to use a regexp (or maybe convert the float back to a string and compare it to the source string, but I'm guessing that's not very fast)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "entire", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Here's my simple way of doing it.", "Let's say that I'm looping through some strings and I want to add them to an array if they turn out to be numbers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    myvar.append( float(string_to_check) )\nexcept:\n    continue\n</code>\n</pre>\n", "senID": 1}, {"text": ["Replace the myvar.apppend with whatever operation you want to do with the string if it turns out to be a number.", "The idea is to try to use a float() operation and use the returned error to determine whether or not the string is a number."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Using the int() method would be about the same as that I suppose.", "Otherwise I'd guess you'd have to loop through the characters of the string, and that is most likely slower"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n def isNumber(token):\n    for char in token:\n        if not char in string.digits: return False\n    return True\n</code>\n</pre>\n", "senID": 0}]]