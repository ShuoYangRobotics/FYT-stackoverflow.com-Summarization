[[{"text": ["I would suggest two interesting lectures:  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["PEP 343"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Effbot"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}]}, {"text": ["1.", "The with statement is used to wrap the execution of a block with methods defined by a context manager.", "This allows common try...except...finally usage patterns to be encapsulated for convenient reuse."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "1.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "with", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "try...except...finally", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["2.", "You could do something like:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "2.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n with open(\"foo.txt\") as foo_file:\n    data = foo_file.read()\n</code>\n</pre>\n", "senID": 5}, {"text": ["OR"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n from contextlib import nested\nwith nested(A(), B(), C()) as (X, Y, Z):\n   do_something()\n</code>\n</pre>\n", "senID": 7}, {"text": ["OR (Python 3.1)"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n with open('data') as input_file, open('result', 'w') as output_file:\n   for line in input_file:\n     output_file.write(parse(line))\n</code>\n</pre>\n", "senID": 9}, {"text": ["OR"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n lock = threading.Lock()\nwith lock:\n    # Critical section of code\n</code>\n</pre>\n", "senID": 11}, {"text": ["3.", "I don't see any Antipattern here.", "Quoting Dive into Python: "], "childNum": 3, "tag": "p", "senID": 12, "childList": [{"text": "3.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "Dive into Python", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://diveintopython3.org/"}]}, {"text": ["4.", "I guess it's related to programmers's habit to use try..catch..finally statement from other languages."], "childNum": 2, "tag": "p", "senID": 13, "childList": [{"text": "4.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "try..catch..finally", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [], [{"text": ["The Python with statement is built-in language support of the Resource Acquisition Is Initialization idiom commonly used in C++.", "It is intended to allow safe acquisition and release of operating system resources."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Resource Acquisition Is Initialization", "tag": "a", "pos": -1, "childList": [{"text": "Resource Acquisition Is Initialization", "tag": "code"}], "childNum": 1, "href": "http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization"}, {"text": "Resource Acquisition Is Initialization", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["The with statement creates resources within a scope/block.", "You write your code using the resources within the block.", "When the block exits the resources are cleanly released regardless of the outcome of the code in the block (that is whether the block exists normally or because of an exception)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Many resources in the Python library that obey the protocol required by the with statement and so can used with it out-of-the-box.", "However anyone can make resources that can be used in a with statement by implementing the well documented protocol: PEP 0343"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "PEP 0343", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0343/"}]}, {"text": ["Use it when ever you acquire resources in your application that must be explicitly relinquished such as files, network connections, locks and the like."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["See PEP 343 - The 'with' statement, there is an example section at the end."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 343 - The 'with' statement", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0343/"}]}], [{"text": ["An example of an antipattern might be to use the with inside a loop when it would be more efficient to have the with outside the loop"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "with", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["for example"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for row in lines:\n    with open(\"outfile\",\"a\") as f:\n        f.write(row)\n</code>\n</pre>\n", "senID": 2}, {"text": ["vs"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n with open(\"outfile\",\"a\") as f:\n    for row in lines:\n        f.write(row)\n</code>\n</pre>\n", "senID": 4}, {"text": ["The first way is opening and closing the file for each row which may cause performance problems compared to the second way with opens and closes the file just once."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "row", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Again for completeness I'll add my most useful use-case for with statements."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I do a lot of scientific computing and for some activities I need the Decimal library for arbitrary precision calculations.", "Some part of my code I need high precision and for most other parts I need less precision."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Decimal", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I set my default precision to a low number and then use with to get a more precise answer for some sections:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from decimal import localcontext\n\nwith localcontext() as ctx:\n    ctx.prec = 42   # Perform a high precision calculation\n    s = calculate_something()\ns = +s  # Round the final result back to the default precision\n</code>\n</pre>\n", "senID": 3}, {"text": ["I use this a lot with the Hypergeometric Test which requires the division of large numbers resulting form factorials.", "When you do genomic scale calculations you have to be careful of round-off and overflow errors."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The with statement works with so-called context managers:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/release/2.5.2/lib/typecontextmanager.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/release/2.5.2/lib/typecontextmanager.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/2.5.2/lib/typecontextmanager.html"}]}, {"text": ["The idea is to simplify exception handling by doing the necessary cleanup after leaving the 'with' block.", "Some of the python built-ins already work as context managers."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["points 1, 2, and 3 being reasonably well covered:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["4: it is relatively new, only available in python2.6+ (or python2.5 using from __future__ import with_statement)"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "4:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "from __future__ import with_statement", "childNum": 0, "tag": "code", "childList": []}]}]]