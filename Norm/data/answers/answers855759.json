[[{"text": ["The statements in the else block are executed if execution falls off the bottom of the try - if there was no exception.", "Honestly, I've never found a need."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "else", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "try", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["However, Handling Exceptions notes:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Handling Exceptions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/errors.html#handling-exceptions"}]}, {"text": ["So, if you have a method that could, for example, throw an IOError, and you want to catch exceptions it raises, but there's something else you want to do if the first operation succeeds, and you don't want to catch an IOError from that operation, you might write something like this:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "IOError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "don't", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n try:\n        operation_that_can_throw_ioerror()\n    except IOError:\n        handle_the_exception_somehow()\n    else:\n         # we don't want to catch the IOError if it's raised\n        another_operation_that_can_throw_ioerror()\n    finally:\n        something_we_always_need_to_do()\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you just put another_operation_that_can_throw_ioerror() after operation_that_can_throw_ioerror, the except would catch the second call's errors.", "And if you put it after the whole try block, it'll always be run, and not until after the finally.", "The else lets you make sure"], "childNum": 6, "tag": "p", "senID": 4, "childList": [{"text": "another_operation_that_can_throw_ioerror()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "operation_that_can_throw_ioerror", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "except", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "try", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "finally", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "else", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["One use: test some code that should raise an exception."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    this_should_raise_TypeError()\nexcept TypeError:\n    pass\nexcept:\n    assert False, \"Raised the wrong exception type\"\nelse:\n    assert False, \"Didn't raise any exception\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["(This code should be abstracted into a more generic test in practice."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I find it really useful when you've got cleanup to do that has to be done even if there's an exception:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    data = something_that_can_go_wrong()\nexcept Exception, e: # yes, I know that's a bad way to do it...\n    handle_exception(e)\nelse:\n    do_stuff(data)\nfinally:\n    clean_up()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Never used it myself.", "Looking at Python reference it seems that else is executed after try when there's no exception.", "The optional else clause is executed if and when control flows off the end of the try clause.", "[2] Exceptions in the else clause are not handled by the preceding except clauses."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Python reference", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/compound%5Fstmts.html"}, {"text": "else", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "try", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Dive into python has and example where, if I understand correctly, in try block they try to import a module, when that fails you get exception and bind default but when it works you have an option to go into else block and bind what is required (see link for the example and explanation)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Dive into python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org/file%5Fhandling/index.html"}, {"text": "try", "childNum": 0, "tag": "code", "childList": []}, {"text": "else", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you tried to do work in catch block it might throw another exception - I guess that's where the else block comes handy."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "catch", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "else", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["There's a nice example of try-else in PEP 380.", "Basically, it comes down to doing different exception handling in different parts of the algorithm."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "try-else", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "PEP 380", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0380/#id9"}]}, {"text": ["It's something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try:\n    do_init_stuff()\nexcept:\n    handle_init_suff_execption()\nelse:\n    try:\n        do_middle_stuff()\n    except:\n        handle_middle_stuff_exception()\n</code>\n</pre>\n", "senID": 2}, {"text": ["This allows you to write the exception handling code nearer to where the exception occurs."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Even though you can't think of a use of it right now, you can bet there has to be a use for it.", "Here is an unimaginative sample out of my head:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = [1,2,3]\ntry:\n    something = a[2]\nexcept:\n    print \"out of bounds\"\nelse:\n    print something\n\n\ntry:\n    something = a[2]\nexcept:\n    print \"out of bounds\"\n\nif \"something\" in locals():\n    print something\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here you have the variable \"something\" defined if no error is thrown.", "You can remove this outside the try block, but then it requires some messy detection if a variable is defined."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["That's it.", "The 'else' block of a try-except clause exists for code that runs when (and only when) the tried operation succeeds.", "It can be used, and it can be abused."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    fp= open(\"configuration_file\", \"rb\")\nexcept EnvironmentError:\n    confdata= '' # it's ok if the file can't be opened\nelse:\n    confdata= fp.read()\n    fp.close()\n\n# your code continues here\n# working with (possibly empty) confdata\n</code>\n</pre>\n", "senID": 1}, {"text": ["Personally, I like it and use it when appropriate.", "It semantically groups statements."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["An else block can often exist to complement functionality that occurs in every except block."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "else", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "except", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n try:\n    test_consistency(valuable_data)\nexcept Except1:\n    inconsistency_type = 1\nexcept Except2:\n    inconsistency_type = 2\nexcept:\n    # Something else is wrong\n    raise\nelse:\n    inconsistency_type = 0\n\n\"\"\"\nProcess each individual inconsistency down here instead of\ninside the except blocks. Use 0 to mean no inconsistency.\n\"\"\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["In this case, inconsistency_type is set in each except block, so that behaviour is complemented in the no-error case in else."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "inconsistency_type", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "else", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Of course, I'm describing this as a pattern that may turn up in your own code someday.", "In this specific case, you just set inconsistency_type to 0 before the try block anyway."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "inconsistency_type", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "try", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Perhaps a use might be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #debug = []\n\ndef debuglog(text, obj=None):\n    \" Simple little logger. \"\n    try:\n        debug   # does global exist?\n    except NameError:\n        pass    # if not, don't even bother displaying\n    except:\n        print('Unknown cause. Debug debuglog().')\n    else:\n        # debug does exist.\n        # Now test if you want to log this debug message\n        # from caller \"obj\"\n        try:\n            if obj in debug:\n                print(text)     # stdout\n        except TypeError:\n            print('The global \"debug\" flag should be an iterable.')\n        except:\n            print('Unknown cause. Debug debuglog().')\n\ndef myfunc():\n    debuglog('Made it to myfunc()', myfunc)\n\ndebug = [myfunc,]\nmyfunc()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Maybe this will lead you too a use."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The else: block is confusing and (nearly) useless.", "It's also part of the for and while statements."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "else:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Actually, even on an if-statement, the else: can be abused in truly terrible ways creating bugs that are very hard to find."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "else:", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Consider this."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if a &lt; 10:\n       # condition stated explicitly\n   elif a &gt; 10 and b &lt; 10:\n       # condition confusing but at least explicit\n   else:\n       # Exactly what is true here?\n       # Can be hard to reason out what condition is true\n</code>\n</pre>\n", "senID": 3}, {"text": ["Think twice about else:.", "It is generally a problem.", "Avoid it except in an if-statement and even then consider documenting the else- condition to make it explicit."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "else:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "else", "childNum": 0, "tag": "code", "childList": []}]}]]