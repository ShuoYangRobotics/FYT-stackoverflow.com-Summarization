[[{"code": "<pre>\n<code>\n import imp\n\nfoo = imp.load_source('module.name', '/path/to/file.py')\nfoo.MyClass()\n</code>\n</pre>\n", "senID": 0}, {"text": ["There are equivalent convenience functions for compiled Python files and DLLs."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Do you mean load or import?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can manipulate the sys.path list specify the path to your module, then import your module.", "For example, given a module at:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n /foo/bar.py\n</code>\n</pre>\n", "senID": 2}, {"text": ["You could do:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import sys\nsys.path[0:0] = '/foo' # puts the /foo directory at the start of your path\nimport bar\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n def import_file(full_path_to_module):\n    try:\n        import os\n        module_dir, module_file = os.path.split(full_path_to_module)\n        module_name, module_ext = os.path.splitext(module_file)\n        save_cwd = os.getcwd()\n        os.chdir(module_dir)\n        module_obj = __import__(module_name)\n        module_obj.__file__ = full_path_to_module\n        globals()[module_name] = module_obj\n        os.chdir(save_cwd)\n    except:\n        raise ImportError\n\nimport_file('/home/somebody/somemodule.py')\n</code>\n</pre>\n", "senID": 0}], [{"text": ["http://code.activestate.com/recipes/223972/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.activestate.com/recipes/223972/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/223972/"}]}], [{"text": ["The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\n# the mock-0.3.1 dir contains testcase.py, testutils.py &amp; mock.py\nsys.path.append('/foo/bar/mock-0.3.1')\n\nfrom testcase import TestCase\nfrom testutils import RunTests\nfrom mock import Mock, sentinel, patch\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I believe you can use imp.find_module() and imp.load_module() to load the specified module.", "You'll need to split the module name off of the path, i.e.", "if you wanted to load \"/home/mypath/mymodule.py\" you'd need to do \"imp.find_module('mymodule', '/home/mypath/')\", but that should get the job done."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You can use the "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n load_source(module_name, path_to_file)\n</code>\n</pre>\n", "senID": 1}, {"text": ["method from imp module."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "imp module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-imp.html"}]}], [{"text": ["I made a package that uses imp for you.", "I call it import_file and this is how it's used:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "imp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "import_file", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt;from import_file import import_file\n&gt;&gt;&gt;mylib = import_file('c:\\\\mylib.py')\n&gt;&gt;&gt;another = import_file('relative_subdir/another.py')\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can get it at:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://pypi.python.org/pypi/import_file"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://pypi.python.org/pypi/import_file", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/import_file"}]}, {"text": ["or at"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["http://code.google.com/p/import-file/"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://code.google.com/p/import-file/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/import-file/"}]}], [{"text": ["I believe you want this function from the standard library:\n  http://docs.python.org/lib/module-imp.html#l2h-5362"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/lib/module-imp.html#l2h-5362", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-imp.html#l2h-5362"}]}], [{"text": ["You can also do something like this and add the directory that the config file is sitting in to the python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case \"config\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Messy but it works."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n configfile = '~/config.py'\n\nimport os\nimport sys\n\nsys.path.append(os.path.dirname(os.path.expanduser(configfile)))\n\nimport config\n</code>\n</pre>\n", "senID": 2}]]