[[{"text": ["You don't need to define intersection.", "It's already a first-class part of set."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; b1 = [1,2,3,4,5,9,11,15]\n&gt;&gt;&gt; b2 = [4,5,6,7,8]\n&gt;&gt;&gt; set(b1).intersection( set(b2) )\nset([4, 5])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you want:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "If you want:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\nc2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\nc3 = [[13, 32], [7, 13, 28], [1,6]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then here is your solution:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Then here is your solution:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n c3 = [filter(lambda x: x in c1, sublist) for sublist in c2]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Explanation: "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Explanation:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The filter part takes each sublist's item and checks to see if it is in the source list c1.", "The list comprehension is executed for each sublist in c2. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\n&gt;&gt;&gt; c2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\n&gt;&gt;&gt; c1set = frozenset(c1)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Flatten variant:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [n for lst in c2 for n in lst if n in c1set]\n[13, 32, 7, 13, 28, 1, 6]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Nested variant:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [[n for n in lst if n in c1set] for lst in c2]\n[[13, 32], [7, 13, 28], [1, 6]]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["The functional approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n input_list = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]]\n\nresult = reduce(set.intersection,map(set,input_list))\n</code>\n</pre>\n", "senID": 1}, {"text": ["and it can be applied to the more general case of 1+ lists"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You should flatten using this code ( taken from http://kogs-www.informatik.uni-hamburg.de/~meine/python_tricks ), the code is untested, but I'm pretty sure it works:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://kogs-www.informatik.uni-hamburg.de/~meine/python_tricks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://kogs-www.informatik.uni-hamburg.de/~meine/python%5Ftricks"}]}, {"code": "<pre>\n<code>\n def flatten(x):\n    \"\"\"flatten(sequence) -> list\n\n    Returns a single, flat list which contains all elements retrieved\n    from the sequence and all recursively contained sub-sequences\n    (iterables).\n\n    Examples:\n    >>> [1, 2, [3,4], (5,6)]\n    [1, 2, [3, 4], (5, 6)]\n    >>> flatten([[[1,2,3], (42,None)], [4,5], [6], 7, MyVector(8,9,10)])\n    [1, 2, 3, 42, None, 4, 5, 6, 7, 8, 9, 10]\"\"\"\n\n    result = []\n    for el in x:\n        #if isinstance(el, (list, tuple)):\n        if hasattr(el, \"__iter__\") and not isinstance(el, basestring):\n            result.extend(flatten(el))\n        else:\n            result.append(el)\n    return result\n</code>\n</pre>\n", "senID": 1}, {"text": ["After you had flattened the list, you perform the intersection in the usual way:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\nc2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\n\ndef intersect(a, b):\n     return list(set(a) & set(b))\n\nprint intersect(flatten(c1), flatten(c2))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["For people just looking to find the intersection of two lists, the Asker provided two methods:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But there is a hybrid method that is more efficient, because you only have to do one conversion between list/set, as opposed to three:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n b1 = [1,2,3,4,5]\nb2 = [3,4,5,6]\ns2 = set(b2)\nb3 = [val for val in b1 if val in s2]\n</code>\n</pre>\n", "senID": 2}, {"text": ["This will run in O(n), whereas his original method involving list comprehension will run in O(n^2)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Do you consider [1,2] to intersect with [1, [2]]?", "That is, is it only the numbers you care about, or the list structure as well?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "[1,2]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[1, [2]]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["If only the numbers, investigate how to \"flatten\" the lists, then use the set() method."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "set()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]