[[{"text": ["The way to do this using py2exe is to use the bundle_files option in your setup.py file.", "For a single file you will want to set bundle_files to 1 and set the zipfile option to None.", "That way it creates one file for easy distribution."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is a more complete description of the bundle_file option quoted directly from the py2exe site*"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "py2exe site", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.py2exe.org/index.cgi/SingleFileExecutable?highlight=(file)|(single)"}]}, {"text": ["Here is a sample setup.py:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from distutils.core import setup\nimport py2exe, sys, os\n\nsys.argv.append('py2exe')\n\nsetup(\n    options = {'py2exe': {'bundle_files': 1}},\n    windows = [{'script': \"single.py\"}],\n    zipfile = None,\n)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["PyInstaller will create a single .exe file with no dependencies; use the --onefile option.", "It does this by packing all the needed shared libs into the executable, and unpacking them before it runs, just as you describe.", "I don't think py2exe has this feature.", "(EDIT: apparently it does, see minty's answer)"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "PyInstaller", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pyinstaller.org/"}, {"text": "--onefile", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "minty's answer", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/112698/py2exe-generate-single-executable-file#113014"}]}, {"text": ["I use the version of PyInstaller from svn, since the latest release (1.3) is somewhat outdated.", "It's been working really well for an app which depends on PyQt, PyQwt, numpy, scipy and a few more."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I'm told bbfreeze will create a single file .EXE, and is newer than py2exe."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "bbfreeze", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/bbfreeze/"}]}], [{"text": ["You should create an installer, as mentioned before.", "Even though it is also possible to let py2exe bundle everything into a single executable, by setting bundle_files option to 1 and the zipfile keyword argument to None, I don't recommend this for PyGTK applications."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That's because of GTK+ tries to load its data files (locals, themes, etc.", ") from the directory it was loaded from.", "So you have to make sure that the directory of your executable contains also the libraries used by GTK+ and the directories lib, share and etc from your installation of GTK+.", "Otherwise you will get problems running your application on a machine where GTK+ is not installed system-wide."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For more details read my guide to py2exe for PyGTK applications.", "It also explains how to bundle everything, but GTK+."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "guide to py2exe for PyGTK applications", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.no-ack.org/2010/09/complete-guide-to-py2exe-for-pygtk.html"}]}], [{"text": ["As the other poster mention, py2exe, will generate an executable + some libraries to load.", "You can also have some data to add to your program."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Next step is to use an installer, to package all this into one easy-to-use installable/unistallable program."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I have used InnoSetup ( http://www.jrsoftware.org/isinfo.php ) with delight for several years and for commercial programs, so I heartily recommend it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.jrsoftware.org/isinfo.php", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.jrsoftware.org/isinfo.php"}]}], [{"text": ["I've been able to create a single exe file with all resources embeded into the exe.", "I'm building on windows.", "so that will explain some of the os.system calls i'm using."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First I tried converting all my images into bitmats and then all my data files into text strings.", "but this caused the final exe to be very very large."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["After googleing for a week i figured out how to alter py2exe script to meet my needs."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["here is the patch link on sourceforge i submitted, please post comments so we can get it included in\nthe next distribution."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["http://sourceforge.net/tracker/index.php?func=detail&amp;aid=3334760&amp;group_id=15583&amp;atid=315583"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://sourceforge.net/tracker/index.php?func=detail&amp;aid=3334760&amp;group_id=15583&amp;atid=315583", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/tracker/index.php?func=detail&aid=3334760&group_id=15583&atid=315583"}]}, {"text": ["this explanes all the changes made, i've simply added a new option to the setup line.", "here is my setup.py."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["i'll try to comment it as best I can.", "Please know that my setup.py is complex do to the fact that i'm access the images by filename.", "so I must store a list to keep track of them."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["this is from a want-to-b screen saver I was trying to make."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I use exec to generate my setup at run time, its easyer to cut and paste like that."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n exec \"setup(console=[{'script': 'launcher.py', 'icon_resources': [(0, 'ICON.ico')],\\\n      'file_resources': [%s], 'other_resources': [(u'INDEX', 1, resource_string[:-1])]}],\\\n      options={'py2exe': py2exe_options},\\\n      zipfile = None )\" % (bitmap_string[:-1])\n</code>\n</pre>\n", "senID": 9}, {"text": ["breakdown"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["script = py script i want to turn to an exe"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["icon_resources = the icon for the exe"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["file_resources = files I want to embed into the exe"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["other_resources = a string to embed into the exe, in this case a file list."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["options = py2exe options for creating everything into one exe file"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["bitmap_strings = a list of files to include"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["Please note that file_resources is not a valid option untill you edit your py2exe.py file as described in the link above.     "], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["first time i've tried to post code on this site, if I get it wrong don't flame me."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"code": "<pre>\n<code>\n from distutils.core import setup\nimport py2exe #@UnusedImport\nimport os\n\n#delete the old build drive\nos.system(\"rmdir /s /q dist\")\n\n#setup my option for single file output\npy2exe_options = dict( ascii=True,  # Exclude encodings\n                       excludes=['_ssl',  # Exclude _ssl\n                                 'pyreadline', 'difflib', 'doctest', 'locale',\n                                 'optparse', 'pickle', 'calendar', 'pbd', 'unittest', 'inspect'],  # Exclude standard library\n                       dll_excludes=['msvcr71.dll', 'w9xpopen.exe',\n                                     'API-MS-Win-Core-LocalRegistry-L1-1-0.dll',\n                                     'API-MS-Win-Core-ProcessThreads-L1-1-0.dll',\n                                     'API-MS-Win-Security-Base-L1-1-0.dll',\n                                     'KERNELBASE.dll',\n                                     'POWRPROF.dll',\n                                     ],\n                       #compressed=None,  # Compress library.zip\n                       bundle_files = 1,\n                       optimize = 2                        \n                       )\n\n#storage for the images\nbitmap_string = '' \nresource_string = ''\nindex = 0\n\nprint \"compile image list\"                          \n\nfor image_name in os.listdir('images/'):\n    if image_name.endswith('.jpg'):\n        bitmap_string += \"( \" + str(index+1) + \",\" + \"'\" + 'images/' + image_name + \"'),\"\n        resource_string += image_name + \" \"\n        index += 1\n\nprint \"Starting build\\n\"\n\nexec \"setup(console=[{'script': 'launcher.py', 'icon_resources': [(0, 'ICON.ico')],\\\n      'file_resources': [%s], 'other_resources': [(u'INDEX', 1, resource_string[:-1])]}],\\\n      options={'py2exe': py2exe_options},\\\n      zipfile = None )\" % (bitmap_string[:-1])\n\nprint \"Removing Trash\"\nos.system(\"rmdir /s /q build\")\nos.system(\"del /q *.pyc\")\nprint \"Build Complete\"\n</code>\n</pre>\n", "senID": 19}, {"text": ["ok, thats it for the setup.py\nnow the magic needed access the images.", "I developed this app without py2exe in mind then added it later.", "so you'll see access for both situations.", "if the image folder can't be found\nit tries to pull the images from the exe resources.", "the code will explain it.", "this is part of my sprite class and it uses a directx.", "but you can use any api you want or just access the raw data.", "doesn't matter."], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"code": "<pre>\n<code>\n def init(self):\n    frame = self.env.frame\n    use_resource_builtin = True\n    if os.path.isdir(SPRITES_FOLDER):\n        use_resource_builtin = False\n    else:\n        image_list = LoadResource(0, u'INDEX', 1).split(' ')\n\n    for (model, file) in SPRITES.items():\n        texture = POINTER(IDirect3DTexture9)()\n        if use_resource_builtin: \n            data = LoadResource(0, win32con.RT_RCDATA, image_list.index(file)+1) #windll.kernel32.FindResourceW(hmod,typersc,idrsc)               \n            d3dxdll.D3DXCreateTextureFromFileInMemory(frame.device,   #Pointer to an IDirect3DDevice9 interface\n                                              data,                #Pointer to the file in memory\n                                              len(data),           #Size of the file in memory\n                                              byref(texture))      #ppTexture\n        else:\n            d3dxdll.D3DXCreateTextureFromFileA(frame.device, #@UndefinedVariable\n                                               SPRITES_FOLDER + file,\n                                               byref(texture))            \n        self.model_sprites[model] = texture\n    #else:\n    #    raise Exception(\"'sprites' folder is not present!\")\n</code>\n</pre>\n", "senID": 21}, {"text": ["Any questions fell free to ask."], "childNum": 0, "tag": "p", "senID": 22, "childList": []}], [{"text": ["I believe that you can only get it down to an exe, library.zip, and the requisite dll (and pyd?", ") files.", "You could write a little app in C or whatnot that unpacks to temp and runs the exe, though."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["No, it's doesn't give you a single executable in the sense that you only have one file afterwards - but you have a directory which contains everything you need for running your program, including an exe file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I just wrote this setup.py today.", "You only need to invoke python setup.py py2exe."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "this setup.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://hg.diotavelli.net/sta/master/file/542689f50e63/setup.py"}, {"text": "python setup.py py2exe", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I recently used py2exe to create an executable for post-review for sending reviews to ReviewBoard."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This was the setup.py I used"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from distutils.core import setup\nimport py2exe\n\nsetup(console=['post-review'])\n</code>\n</pre>\n", "senID": 2}, {"text": ["It created a directory containing the exe file and the libraries needed.", "I don't think it is possible to use py2exe to get just a single .exe file.", "If you need that you will need to first use py2exe and then use some form of installer to make the final executable."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["One thing to take care of is that any egg files you use in your application need to be unzipped, otherwise py2exe can't include them.", "This is covered in the py2exe docs."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]