[[{"text": ["Assuming module 'foo' with method 'bar':"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import foo\n <br />\n methodToCall = getattr(foo, 'bar')\n <br />\n result = methodToCall()\n <br />\n</code>\n</pre>\n", "senID": 1}, {"text": ["As far as that goes lines 2 and three can be compressed to:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n result = getattr(foo, 'bar')()\n <br />\n</code>\n</pre>\n", "senID": 3}, {"text": ["if that makes more sense for your use case.", "You can use getattr in this fashion on class instance bound methods, module-level methods, classmethods... the list goes on."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n locals()[\"myfunction\"]()\n</code>\n</pre>\n", "senID": 0}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n globals()[\"myfunction\"]()\n</code>\n</pre>\n", "senID": 2}, {"text": ["locals returns a dictionary with a current local symbol table.", "globals returns a dictionary with global symbol table."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "locals", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#locals"}, {"text": "globals", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#globals"}]}], [{"text": ["Patrick's solution is probably the cleanest.", "If you need to dynamically pick up the module as well, you can import it like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n m = __import__ ('foo')\nfunc = getattr(m,'bar')\nfunc()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Well, there's:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string=\"bar\"\n <br />\n exec\"a=foo.\"+string+\"()\"\n <br />\n</code>\n</pre>\n", "senID": 1}, {"text": ["or maybe"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n exec \"a=foo.%s()\"%string\n <br />\n</code>\n</pre>\n", "senID": 3}, {"text": ["I'm not sure how much more elegant that is, however.", "But you'll be hardpressed to find a way to \"execute\" a string without exec or eval."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]