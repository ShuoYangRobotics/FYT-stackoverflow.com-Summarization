[[{"text": ["I typically don't use or find a need for class-level loggers, but I keep my modules at a few classes at most.", "A simple:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import logging\nLOG = logging.getLogger(__name__)\n</code>\n</pre>\n", "senID": 1}, {"text": ["At the top of the module and subsequent:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n LOG.info('Spam and eggs are tasty!')\n</code>\n</pre>\n", "senID": 3}, {"text": ["from anywhere in the file typically gets me to where I want to be.", "This avoids the need for self.log all over the place, which tends to bother me from both a put-it-in-every-class perspective and makes me 5 characters closer to 79 character lines that fit."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "self.log", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You could always use a pseudo-class-decorator:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import logging\n&gt;&gt;&gt; class Foo(object):\n...     def __init__(self):\n...             self.log.info('Meh')\n... \n&gt;&gt;&gt; def logged_class(cls):\n...     cls.log = logging.getLogger('{0}.{1}'.format(__name__, cls.__name__))\n... \n&gt;&gt;&gt; logged_class(Foo)\n&gt;&gt;&gt; logging.basicConfig(level=logging.DEBUG)\n&gt;&gt;&gt; f = Foo()\nINFO:__main__.Foo:Meh\n</code>\n</pre>\n", "senID": 6}], [{"text": ["For class level logging, as an alternative to a pseudo-class decorator, you could use a metaclass to make the logger for you at class creation time..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import logging\n\nclass Foo(object):\n    class __metaclass__(type):\n        def __init__(cls, name, bases, attrs):\n            type.__init__(name, bases, attrs)\n            cls.log = logging.getLogger('%s.%s' % (attrs['__module__'], name))\n    def __init__(self):\n        self.log.info('here I am, a %s!' % type(self).__name__)\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.DEBUG)\n    foo = Foo()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["That looks like it will work, except that self won't have a __module__ attribute; its class will.", "The class-level logger call should look like:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__module__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n self.log = logging.getLogger( \"%s.%s\" % ( self.__class__.__module__, self.__class__.__name__ ) )\n</code>\n</pre>\n", "senID": 1}]]