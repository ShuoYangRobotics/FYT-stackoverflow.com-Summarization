[[{"text": ["There are many fiddly things to take care of when becoming a well-behaved daemon process:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "many fiddly things", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://www.python.org/dev/peps/pep-3143/#correct-daemon-behaviour", "text": "well-behaved daemon process", "childNum": 0, "tag": "a", "childList": []}]}, {"tag": "ul", "num": 11, "lis": [{"text": ["prevent core dumps (many daemons run as root, and core dumps can contain sensitive information)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["behave correctly inside a chroot gaol"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "chroot", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["set UID, GID, working directory, umask, and other process parameters appropriately for the use case"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["relinquish elevated suid, sgid privileges"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "suid", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sgid", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["close all open file descriptors, with exclusions depending on the use case"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["behave correctly if started inside an already-detached context, such as init, inetd, etc."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "init", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "inetd", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["set up signal handlers for sensible daemon behaviour, but also with specific handlers determined by the use case"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["redirect the standard streams stdin, stdout, stderr since a daemon process no longer has a controlling terminal"], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "stdin", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "stdout", "childNum": 0, "tag": "code", "childList": []}, {"text": "stderr", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["handle a PID file as a cooperative advisory lock, which is a whole can of worms in itself with many contradictory but valid ways to behave"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["allow proper cleanup when the process is terminated"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["actually become a daemon process without leading to zombies"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]}, {"text": ["Some of these are standard, as described in canonical Unix literature (Advanced Programming in the UNIX Environment, by the late W. Richard Stevens, Addison-Wesley, 1992).", "Others, such as stream redirection and PID file handling, are conventional behaviour most daemon users would expect but that are less standardised."], "childNum": 4, "tag": "p", "senID": 12, "childList": [{"text": "standard", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Advanced Programming in the UNIX Environment", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "PID file handling", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/688343/reference-for-proper-handling-of-pid-file-on-unix"}, {"text": "conventional behaviour", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["All of these are covered by the PEP 3143\u201cStandard daemon process library\u201d specification and the python-daemon reference implementation."], "childNum": 3, "tag": "p", "senID": 13, "childList": [{"text": "PEP 3143\u201cStandard daemon process library\u201d specification", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "PEP 3143", "tag": "a"}]}, {"href": "http://www.python.org/dev/peps/pep-3143", "text": "PEP 3143", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://pypi.python.org/pypi/python-daemon/", "text": "python-daemon", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Sander Marechal's code sample is superior to the original, which was originally posted in 2004.", "I once contributed a daemonizer for Pyro, but would probably use Sander's code if I had to do it over."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "code sample", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/"}]}], [{"text": ["Note the python-daemon package which solves a lot of problems behind daemons out of the box."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python-daemon", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/python-daemon/"}]}, {"text": ["Among other features it enables to (from Debian package description):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 9, "lis": [{"text": "Detach the process into its own process group.", "tag": "none", "senID": 2}, {"text": "Set process environment appropriate for running inside a chroot.", "tag": "none", "senID": 3}, {"text": "Renounce suid and sgid privileges.", "tag": "none", "senID": 4}, {"text": "Close all open file descriptors.", "tag": "none", "senID": 5}, {"text": "Change the working directory, uid, gid, and umask.", "tag": "none", "senID": 6}, {"text": "Set appropriate signal handlers.", "tag": "none", "senID": 7}, {"text": "Open new file descriptors for stdin, stdout, and stderr.", "tag": "none", "senID": 8}, {"text": "Manage a specified PID lock file.", "tag": "none", "senID": 9}, {"text": "Register cleanup functions for at-exit processing.", "tag": "none", "senID": 10}]}], [{"text": ["The easiest way to create daemon with Python is to use the Twisted event-driven framework.", "It handles all of the stuff necessary for daemonization for you.", "It uses the Reactor Pattern to handle concurrent requests."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Twisted", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/trac/"}, {"text": "Reactor Pattern", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Reactor_pattern"}]}], [{"text": ["80% of the time, when folks say \"daemon\", they only want a server.", "Since the question is perfectly unclear on this point, it's hard to say what the possible domain of answers could be.", "Since a server is adequate, start there.", "If an actual \"daemon\" is actually needed (this is rare), read up on nohup as a way to daemonize a server."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "nohup", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["Until such time as an actual daemon is actually required, just write a simple server."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Also look at the WSGI reference implementation."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "WSGI reference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-wsgiref.html"}]}, {"text": ["Also look at the Simple HTTP Server."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Simple HTTP Server", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-SimpleHTTPServer.html"}]}, {"text": ["\"Are there any additional things that need to be considered?", "\"  Yes.", "About a million things.", "What protocol?", "How many requests?", "How long to service each request?", "How frequently will they arrive?", "Will you use a dedicated process?", "Threads?", "Subprocesses?", "Writing a daemon is a big job.  "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]