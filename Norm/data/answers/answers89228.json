[[{"text": ["Here's a summary of the ways to call external programs and the advantages and disadvantages of each:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The subprocess module should probably be what you use."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "subprocess", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Look at the subprocess module in the stdlib:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "subprocess module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html"}]}, {"code": "<pre>\n<code>\n from subprocess import call\ncall([\"ls\", \"-l\"])\n</code>\n</pre>\n", "senID": 1}, {"text": ["The advantage of subprocess vs system is that it is more flexible (you can get the stdout, stderr, the \"real\" status code, better error handling, etc...).", "I think os.system is deprecated, too, or will be:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://www.python.org/doc/2.5/lib/node534.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://www.python.org/doc/2.5/lib/node534.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5/lib/node534.html"}]}, {"text": ["For quick/dirty/one time scripts, os.system is enough, though."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I'd recommend using the subprocess module instead of os.system because it does shell escaping for you and is therefore much safer: http://docs.python.org/lib/module-subprocess.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/lib/module-subprocess.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-subprocess.html"}]}], [{"text": ["I typically use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import subprocess\n\np = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print line,\nretval = p.wait()\n</code>\n</pre>\n", "senID": 1}, {"text": ["You are free to do what you want with the stdout data in the pipe.", "In fact, you can simply omit those parameters (stdout= and stderr=) and it'll behave like os.system()."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Some hints on detaching the child process from the calling one (starting the child process in background)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Suppose you want to start a long task from a CGI-script, that is the child process should live longer than the CGI-script execution process."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The classical example from the subprocess module docs is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import subprocess\nimport sys\n\n# some code here\n\npid = subprocess.Popen([sys.executable, \"longtask.py\"]) # call subprocess\n\n# some more code here\n</code>\n</pre>\n", "senID": 3}, {"text": ["The idea here is that you do not want to wait in the line 'call subprocess' until the longtask.py is finished.", "But it is not clear what happens after the line 'some more code here' from the example."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["My target platform was freebsd, but the development was on windows, so I faced the problem on windows first."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["On windows (win xp), the parent process will not finish until the longtask.py has finished its work.", "It is not what you want in CGI-script.", "The problem is not specific to Python, in PHP community the problems are the same."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The solution is to pass DETACHED_PROCESS flag to the underlying CreateProcess function in win API.", "If you happen to have installed pywin32 you can import the flag from the win32process module, otherwise you should define it yourself:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n DETACHED_PROCESS = 0x00000008\n\npid = subprocess.Popen([sys.executable, \"longtask.py\"],\n                       creationflags=DETACHED_PROCESS).pid\n</code>\n</pre>\n", "senID": 8}, {"text": ["On freebsd we have another problem: when the parent process is finished, it finishes the child processes as well.", "And that is not what you want in CGI-script either.", "Some experiments showed that the problem seemed to be in sharing sys.stdout.", "And the working solution was the following:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n pid = subprocess.Popen([sys.executable, \"longtask.py\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n</code>\n</pre>\n", "senID": 10}, {"text": ["I have not checked the code on other platforms and do not know the reasons of the behaviour on freebsd.", "If anyone knows, please share your ideas.", "Googling on starting background processes in Python does not shed any light yet."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"code": "<pre>\n<code>\n import os\ncmd = 'ls -al'\nos.system(cmd)\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you want to return the results of the command you need os.popen:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "os.popen", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://oreilly.com/catalog/lpython/chapter/ch09.html"}]}], [{"text": ["os.system is OK, but kind of dated.", "It's also not very secure.", "Instead, try subprocess.", "subprocess does not call sh directly and is therefore more secure than os.system."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Get more information at http://docs.python.org/lib/module-subprocess.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/lib/module-subprocess.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-subprocess.html"}]}], [{"code": "<pre>\n<code>\n import os\nos.system(\"your command\")\n</code>\n</pre>\n", "senID": 0}, {"text": ["Note that this is dangerous, since the command isn't cleaned.", "I leave it up to you to google for the relevant docs on the 'os' and 'sys' modules.", "There are a bunch of functions (exec* , spawn*) that will do similar things."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["http://www.python.org/doc/2.5/lib/module-subprocess.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.python.org/doc/2.5/lib/module-subprocess.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5/lib/module-subprocess.html"}]}, {"text": ["...or for a very simple command:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import os\nos.system('cat testfile')\n</code>\n</pre>\n", "senID": 2}], [{"text": ["There is another difference here which is not mentioned above."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["subprocess.Popen executes the  as a subprocess.", "In my case, I need to execute file  which needs to communicate with another program . "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I tried subprocess, execution was successful.", "However  could not comm w/ .", "everything normal when I run both from the terminal."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["One more: \n(NOTE: kwrite behaves different from other apps.", "If you try below with firefox results will not be the same)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you try os.system(\"kwrite\"), program flow freezes until user closes kwrite.", "To overcome that I tried instead os.system(konsole -e kwrite).", "This time program continued to flow but kwrite became the subprocess of the konsole."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Anyone runs the kwrite not being a subprocess (i.e.", "at the system monitor it must be appear at the leftmost edge of the tree)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Thanks"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Check \"pexpect\" python library, too.", "It allows for interactive controlling of external programs/commands, even ssh, ftp, telnet etc.", "You can just type something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["child = pexpect.spawn('ftp 192.168.0.24')"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["child.expect('(?i)name .", "*: ')"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["child.sendline('anonymous')"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["child.expect('(?i)password')"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["subprocess.check_call is convenient if you don't want to test return values.", "It throws an exception on any error."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "subprocess.check_call", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If what you need is the output from the command you are calling you can use subprocess.check_output since Python 2.7"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; subprocess.check_output([\"ls\", \"-l\", \"/dev/null\"])\n'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["os.system has been superceeded by the subprocess module.", "Use subproccess instead."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]