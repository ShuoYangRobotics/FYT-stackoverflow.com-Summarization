[[{"text": ["Take a look at this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; id(a)\n9987148\n&gt;&gt;&gt; id(b)\n9987148\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; id(a)\n11662816\n&gt;&gt;&gt; id(b)\n11662828\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: Here's what I found in the Python documentation, 7.2.1, \"Plain Integer Objects\":"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "7.2.1, \"Plain Integer Objects\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/c-api/int.html"}]}], [{"text": ["It depends on whether you're looking to see if 2 things are equal, or the same object. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["\"is\" checks to see if they are the same object, not just equal.", "The small ints are probably pointing to the same memory location for space efficiency "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n In [29]: a = 3\nIn [30]: b = 3\nIn [31]: id(a)\nOut[31]: 500729144\nIn [32]: id(b)\nOut[32]: 500729144\n</code>\n</pre>\n", "senID": 2}, {"text": ["You should use \"==\" to compare equality of arbitrary objects.", "You can specify the behavior with the __eq__, and __ne__ attributes."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "__eq__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__ne__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["As you can check here Python caches small ints for eficiency.", "Everytime you create a reference to a small int, you are referring the cached small int, not a new object.", "257 is not an small int, so it is calculated as a different object."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/projects/python/trunk/Objects/intobject.c"}]}, {"text": ["It is better to use \"==\" for that purpose."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I think your hypotheses is correct.", "Experiment with id (identity of object).."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [1]: id(255)\nOut[1]: 146349024\n\nIn [2]: id(255)\nOut[2]: 146349024\n\nIn [3]: id(257)\nOut[3]: 146802752\n\nIn [4]: id(257)\nOut[4]: 148993740\n\nIn [5]: a=255\n\nIn [6]: b=255\n\nIn [7]: c=257\n\nIn [8]: d=257\n\nIn [9]: id(a), id(b), id(c), id(d)\nOut[9]: (146349024, 146349024, 146783024, 146804020)\n</code>\n</pre>\n", "senID": 1}, {"text": ["It appears that numbers &lt;= 255 are treated as literals and anything above is treated differently!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The 'is' operator is not another way to type '=='."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["For immutable value objects, like ints, strings or datetimes, object identity is not especially useful.", "It's better to think about equality.", "Identity is essentially an implementation detail for value objects - since they're immutable, there's no effective difference between having multiple refs to the same object or multiple objects."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]