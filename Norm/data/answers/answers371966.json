[[{"text": ["The problem is that it is not as good as it is made out to be, in other words it suffers from a degree of hype.", "I'll try to argue this point."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Potential detractors of the language usually lack the experience to criticize it authoratively.", "This is more true for python as it is not (yet) common that people are coerced (by work,school) into learning and working with the language.", "So the detractors are few and drowned out by the vocal supporters."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The top answer cites 'indentation' and then says but its not an issue for him, this is a strawman argument 'this is the worst problem and its not really a problem'.", "Indentation is a matter of taste and is more noticeable than bad.", "This answer has been voted up presumably by people who like the language, because it certainly does not answer the question, which is give a good reason not to use the language."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Python is open source, and community driven from the beginning, attributes which give it support amongst people such as vocal blogger-developers (not necessarily the people who get the most done) who are credible proponents.", "Compare to java or C# whose main proponents have a commercial interest and as such have such devalued words that they can't credibly make any positive assertions about their products, and being commercial there are any number of detractors."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["People often say google use it a lot, the 'language of google', so it must be good.", "Now I suspect google use it a lot, but probably mainly for scripting and web programming.", "Remembering that "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "as a replacement for shell scripting (truely awful for significant development) python is infinitely better", "tag": "none", "senID": 5}, {"text": "web development and even the frameworks are not that complex", "tag": "none", "senID": 6}]}, {"text": ["My experience is that dynamic languages are less maintainable, and not very good for 'systems' programming and dealing with complexity.", "The evidence is in the lack of sophisticated and successful programs.", "For example eclipse and its brethren.", "I am not convinced that it is feasible to create as sophisticated a framework in a dynamic language (if so, which ones?).", "Here checkable interfaces are an indispensable part of a self documenting, yet organically grown module structure. "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Another example might be games.", "I think performance is an issue, but its also maintainability."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["So the main issue for me is the dynamic typing, cited as a feature, but in reality just a really easy way to implement a language (I maintain a JS interpreter).", "Its definitely good for scripting, but if you could have type inference you would. "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["static typing is meta information, its like html vs. plain text, and when you've used a decent specialist IDE (eclipse, netbeans, vs.net - not emacs which is general) you will \nappreciate this, as you will be able to navigate your code, see compile errors immediately.", "Combined these are a massive productivity gain, albeit with an extra learning curve, that is completely unavailble in python."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["I am far from an expert at python, but I have done a couple of semi-serious projects in the language and will try to recall specifically what I didn't like, aside from the general to all popular dynamic scripting languages weakness, the of lacking any static typing (not necessarily mutually exclusive with duck typing)."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"tag": "ul", "num": 7, "lis": [{"text": "save on typing library naming mentality, I personally think the fully qualified (com.sun.xxx) package names are a good thing, as they contain a lot of information. Spending time typing them is not an issue for most java/c# developers. This makes it harder to know the provenance of code, and causes name space clashes", "tag": "none", "senID": 12}, {"text": "installation mentality, python has inherited the idea that libraries should be installed, so it infact is designed to work inside unix package management, which basically contains a fair amount of baggage (library version issues) and reduced portability. Of course it must be possible to package libraries with your application, but its not conventional.", "tag": "none", "senID": 13}, {"text": "quite quirky e.g. __init__ ", "tag": "none", "senID": 14}, {"text": "doesn't perform all that well", "tag": "none", "senID": 15}, {"text": "no switch (why not??)", "tag": "none", "senID": 16}, {"text": "poor utf support", "tag": "none", "senID": 17}, {"text": "no outstanding feature (that I know of). closures and duck typing (all objects are hashes) are just dynamic language bread and butter.", "tag": "none", "senID": 18}]}, {"text": ["Lack of static typing results in"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "reduced maintainability, different developers will find it harder to work with each others code -> reduced productivity as projects scale*", "tag": "none", "senID": 20}, {"text": "less informative api documentation/autodocs", "tag": "none", "senID": 21}, {"text": "much less powerful ide support", "tag": "none", "senID": 22}]}, {"text": ["*I feel these assertions are confirmed by looking at what complex projects are out there."], "childNum": 0, "tag": "p", "senID": 23, "childList": []}, {"text": ["At the end of the day I wouldn't consider it for more significant/complex projects, however by all means learn it, but you may be disappointed if you have exagerated expectations of how good python is."], "childNum": 0, "tag": "p", "senID": 24, "childList": []}], [{"text": ["The main implementation uses a GIL (global interpreter lock), which means that you cannot fully utilize your CPUs with Python threads, because threads serialize on object access. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is a feature of the implementation, not the language, so you can get around that by using Jython, IronPython or maybe some other implementation (something PyPy based maybe?", ")."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Also, support for process-based parallel processing is getting better and better in Python, so the GIL issue gets somewhat less important."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["One anti-python school of thought is that forcing style such as indentation is wrong.", "However, as I cannot convince myself, I guess I would fail at convincing you."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Python does not require variables to be declared in the scope they're in.", "Or indeed, anywhere.", "Therefore, it can't check this at compile-time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is bad - even Perl (with \"use strict\") or VB (with \"Option Explicit\") do this."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This means that the compiler cannot even detect a trivial typo- it will produce a working program anyway which will continue working until it reaches the typo - THEN go boom.", "It would be a lot nicer to require variables to be declared, then the compiler could detect this and complain upfront."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Worse still, in some circumstances, failing to define a variable in a given scope (for instance, because it was defined with a typo) causes it to be picked up out of a higher scope - even if this wasn't what the programmer intended - again because variables don't need to be declared."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If this is confusing to you, note that I have used the terms \"delcare\" and \"define\" as accurately as possible."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Python can be called slow.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["By slow, I mean slower than C and slower than Java with a JiT run-time."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["On balance, this rarely matters.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Another point to make:  Python is a difficult language to write good editors for.", "There are just too many backdoors and roundabout ways to do things to make features like Intellisense or syntax error highlighting.", "There are some tools that do make reasonably good attempts at this stuff, but it's definitely not what you're going to be used to if you use a language like Java or C#."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["My biggest irritation with Python is the lack of an enum type.", "I know there are ways to emulate the functionality but I haven't found one that suits my sense of style."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["sometimes I get lost trying to figure out where variables are coming from, because you don't have to declare them.", "I guess experienced Pythonistas don't have the habit of scanning a function's variable definitions to determine what's going on."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I have some points in the answer to Five things you hate about your favorite language.", "There are a couple of others who have posted five of their own things about Python, too."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Five things you hate about your favorite language", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/282329/what-are-five-things-you-hate-about-your-favorite-language#282366"}]}, {"text": ["My favourite point is the one about accidentally permanently changing the default arguments to a function at runtime."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Here are some points on Why to use it : http://www.amk.ca/python/howto/advocacy/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.amk.ca/python/howto/advocacy/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/advocacy/"}]}, {"text": ["And this is about stupid people trying python: http://mail.python.org/pipermail/python-list/2003-February/190906.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://mail.python.org/pipermail/python-list/2003-February/190906.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2003-February/190906.html"}]}, {"text": ["Have fun."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Either way, its programming and we all love it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I suppose the biggest (realistic) argument is python's dynamic typing, which can cause some needless errors if you're not careful.", "Of course this can be helped by good unit testing, but no matter what you do, there's always the possibility of typing errors that you wouldn't run into in a more statically typed language (Java/C#)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["NOTE"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "NOTE", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["One thing I see people saying is that you don't have to declare variables in Python.", "This is true in the strictest sense.", "You have to think differently about declarations though.", "For example, take the following code in a C like language:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n int x = 0;\n</code>\n</pre>\n", "senID": 3}, {"text": ["Think about it this way:  why do you need the int keyword and the semicolon?", "Can't that be inferred?", "So just change the above to this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n x = 0\n</code>\n</pre>\n", "senID": 5}, {"text": ["And use that format whenever you would declare a variable."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["There are lots of good reasons not to use Python, but they're all dependent on what you intend to use it for.", "The complaints about whitespace (oh, please) or duck typing or broken IntelliSense are (maybe) problems with the language, but they don't rise to the level of reasons not to use it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "for", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Here are some actual circumstances in which you wouldn't want to use Python:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "You're writing code for a piece of hardware that has only 64K of memory.", "tag": "none", "senID": 2}, {"text": "Your code has to manipulate very large matrices of integer values as fast as possible.", "tag": "none", "senID": 3}, {"text": "You're writing a web application that has to process extremely large numbers of hits, and your hosting provider doesn't support WSGI.", "tag": "none", "senID": 4}]}, {"text": ["Those are, for the most part, not reasons not to use Python:  they're reasons not to use the entire class of interpreted scripting languages that Python belongs to."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Usually a language isn't good or bad by itself.", "The point is, is it the language to get your job done?", "If the answer is \"maybe\", spend some time trying it, and you'll discover."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["For example, this code will run up until the dog() function is called:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def dog ():\n  falkdfjlkdfj\n\nprint \"Hello World\\n\"\ndog()\n</code>\n</pre>\n", "senID": 1}, {"text": ["2.", "Use of duck typing can lead to surprises to how variables are treated"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You must not use Python when (assuming Python is not your main language) :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": ["You are in a rush and the languages you know will do the job."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You are looking for speed and have not time to create C extensions."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You want obfuscation."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Your code will be reused by people that you know, will not use Python and don't know it."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Quality is a main issue, therefor the language you master the best will be the best shot."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["You know you will use features that have a better implementation in other language (I am looking at the FTP lib here...)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]}, {"text": ["Anyway, Python pays my bill and am really happy about it."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I'm only going to list negative things here, as that's what the OP asked for.", "Of course there are also many great things about Python :-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["Can't pass parameters by reference (The canonical example, you can't write a method that swaps the values of 2 parameters.", "You have to return a tuple instead). "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Python 3 breaks backward compatibility"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You can easily, accidentally, over-write system variables with anything else. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]}, {"text": ["For example, type:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n time.sleep = 4\n</code>\n</pre>\n", "senID": 5}, {"text": ["instead of:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n time.sleep(4)\n</code>\n</pre>\n", "senID": 7}, {"text": ["and you just destroyed the system-wide sleep function with a trivial typo.", "Now consider accidentally assigning some method to time.sleep, and you won't even get a runtime error- just very hard to trace behavior.", "And sleep is only one example, it's just as easy to override ANYTHING."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "method", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": ["Lacking support for interfaces, method requirements defined in terms of ambiguous \"X-like-object\".", "This is getting better with Python 3, but the new ideas in Python 3 will take a long time to catch on."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["If you define 2 classes\\methods with the same name at the same scope, the latter silently hides the former.", "This can lead to insane new classes of bugs.", "Speaking from experience here :-)"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "insane", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Explicit \"self\" is an annoyance."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Every object is automatically convertible to Boolean, and it is idiomatic to use this feature often, such as doing if(L), where L is actually a list and you're asking if it has items.", "Doing this in a low-level language like C is one thing, doing it in Python is... confusing.", "Is L a boolean?", "a list?", "a number?", "Why not just ask if L \"has_items\"?"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]}], [{"text": ["Many subscribe to the school of thought that good language design means concise ways of describing the language.", "For example, Java is a language about Objects.", "Everything is either an Object or a blueprint for making an Object.", "In Scheme, everything is an expression which can be evaluated or passed to another function.", "In Python however, there are many different paradigms at work.", "To some, it seems to be a mish-mash of useful features thrown together with no unifying concept."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You cannot be absolute when considering a language.", "Python isn't bad or good, it's just better or worse than other languages in some areas."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The Python community is big and active and the language is actively supported.", "You won't waste your time playing with it, especially because the time invested will not be lost when you learn to another."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I would maybe suggest to have a look at Ruby to see if you don't prefer Ruby over Python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Python's a nice language.", "I can think of only a few weak reasons not to try it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["Maybe you really, really hate objects?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Perhaps you will be one of those people who hates significant whitespace (I love significant whitespace)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It is a big system (language and libraries), so you will never master it completely."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "big", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Maybe you prefer to wait for Python 3.0 to become widespread before learning it?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]}, {"text": ["As noted, these are all weak reasons :-)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "weak", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Python is popular and relatively easy to learn.", "Language comparisons can tend to get religious fairly quickly, but there's a few points worth making: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's a dynamic language, and generally considered to be a scripting language.", "This means that it's less verbose than something like java."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "scripting language", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Scripting_language"}]}, {"text": ["It has functional constructs.", "Python was actually how I first became familiar with these concepts (lambdas, map &amp; reduce functionality, etc, etc).", "If you've never worked functionally that's a nice way to transition easily into a different paradigm. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Duck typing."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["A downside I've found is that the dynamic nature of the language makes it harder to build in the large, harder to keep track of larger-scale projects.", "Then again, maybe I haven't worked with it enough. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Partly because of these reasons, idiomatically written python tends to be simpler than typed/compiled languages, which can be a refreshing viewpoint, especially if you're coming from anything attached to the word \"enterprise\".", "As others have noted on this page, many of these same benefits are true of Ruby, which is also quite nice, and IMHO occupies the same language \"niche\". "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["The best reason I can see someone not wanting to use python would be to demonstrate that they are Luddites."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I've seen one mention of this, but the thing that turned me off of Python is the part where indentation and white space matters."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I just could not get past the fact that your code (aside from white space) could be correct but just because of some small white space issue it does not work.", "Maybe if I stuck with it more it would be a non-issue but I know when learning it it drove me crazy and I ended up giving up."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["At some point I opened my file in a different editor and something happened and I ended up having to re-indent everything.", "That was the point where I realized I'm not going to do that anymore."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I like indenting code but I don't like my code not working just because of white space."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Someone mentioned Ruby.", "I see Python and Ruby compared a lot.", "Because I didn't do so well with Python I tried Ruby and I like it.", "For me Ruby feels a lot more natural and somehow calm."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Multithreading in Python is a big problem, due to GIL (global interpreter lock)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Good: The language is named after Monty Python"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Bad:  All the doc's are riddled with snakes (cute snakes)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "snakes", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Good: Stable with very large memory apps"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Bad:  Somewhat funky for web apps (see Zope)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Good: a lot of libraries to extend the capabilities"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Bad:  no solid IDE (do you love text editing?", "vim or emacs?", "so does python)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Good: Used by very large software houses (Google, etc)"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Bad:  Not common in the business world"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["TIP: Pick a basic programming assignment close to your target application and see how far you get towards a working app in 60 minutes using the web for docs.", "Was it good for you?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["The colons.", "Honestly.", "If the next line is indented from the current one, why do I need to use a colon as well?", "Drives me nuts."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To steal an example from another answer:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def dog ():\n  falkdfjlkdfj\n</code>\n</pre>\n", "senID": 2}, {"text": ["It's obvious (and necessary) from the indentation/white-space that the second line is part of the dog function."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Trivial, I know, but it really bothers me."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Oh, and I don't like the need to pass \"self\" as the first argument to a method within a class, but I understand that part's going to disappear in 3.0?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Python is not backwards compatible with previous version.", "This means the person running the scripts must have the correct version installed.", "If you have the latest version, you may need to uninstall it and install an older version for some scripts to work.", "It's quite silly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"tag": "ul", "num": 4, "lis": [{"text": "If you make a typo your app will run to the place of the typo then crash (some IDEs will catch this thankfully)", "tag": "none", "senID": 0}, {"text": "Threads are not good ATM", "tag": "none", "senID": 1}, {"text": "Missing features people may call essential (switch and enums are essential for me)", "tag": "none", "senID": 2}, {"text": "Very hard to debug. Maybe its my IDE but i havent found a good solution. This current IDE breaks in the main .py file but not in others", "tag": "none", "senID": 3}]}, {"text": ["I'll have more reasons when i have more experience."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["As a long-time PHP user, I did notice the following issues when I started using Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Because everything goes into one namespace (functions, classes, global variables, local variables, even imported modules), you can accidentally replace a class or function with anything else really easily.", "In my first month I created some variables named 'min' and 'max' not realizing I was replacing the builtin min() and max() functions."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "everything", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "anything else", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["It's alot harder to make a string from local variables.", "You have to use the printf() notation which is usually not easier but sometimes quite longer to write."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]}], [{"text": ["unless you are thinking of using libs that are found only in Python.", "I would advise against using learning it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Better go for Delphi as the language to learn.", "You will be instantly productive and you will get true RAD IDE which is yet non existent in the Python World!"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "non existent", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}], [{"text": ["Far from it that it actualy suck, but I'm not using it for the following reason. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To me, it looks too sterile .", "I just don't like it."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "sterile", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "sterile", "tag": "em"}]}, {"text": "sterile", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}]]