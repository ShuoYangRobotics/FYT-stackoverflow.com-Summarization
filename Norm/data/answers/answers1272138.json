[[{"text": ["Yes, it's deprecated in Python 2.6 because it's going away in Python 3.0"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["BaseException class does not provide a way to store error message anymore.", "You'll have to implement it yourself.", "You can do this with a subclass that uses a property for storing the message."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class MyException(Exception):\n    def _get_message(self): \n        return self._message\n    def _set_message(self, message): \n        self._message = message\n    message = property(_get_message, _set_message)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Hope this helps"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n class MyException(Exception):\n\n    def __str__(self):\n        return repr(self.args[0])\n\ne = MyException('asdf')\nprint e\n</code>\n</pre>\n", "senID": 0}, {"text": ["This is your class in Python2.6 style.", "The new exception takes an arbitrary number of arguments."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It is unpythonic and useless to create properties that do nothing except getting and setting the value, unchecked and unchanged.", "The whole point of properties is to allow one to use public attributes freely, until such time as a getter or a setter is actually needed.", "Then you turn the public attribute into a property, without breaking any client code. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Solution - almost no coding needed"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class MyException(Exception):\n    \"\"\"My documentation\"\"\"\n\ntry:\n    raise MyException('my detailed description')\nexcept MyException as my:\n    print my # outputs 'my detailed description'\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can use str(my) or (less elegant) my.args[0] to access the custom message."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "str(my)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "my.args[0]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Background"], "childNum": 0, "tag": "h2", "senID": 4, "childList": []}, {"text": ["In the newer versions of Python (from 2.6) we are supposed to inherit our custom exception classes from Exception which (starting from Python 2.5) inherits from BaseException.", "The background is described in detail in PEP352."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "starting from Python 2.5", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/exceptions.html#exceptions.Exception"}, {"text": "PEP352", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0352/"}]}, {"code": "<pre>\n<code>\n class BaseException(object):\n\n    \"\"\"Superclass representing the base of the exception hierarchy.\n    Provides an 'args' attribute that contains all arguments passed\n    to the constructor.  Suggested practice, though, is that only a\n    single string argument be passed to the constructor.\"\"\"\n</code>\n</pre>\n", "senID": 6}, {"text": ["__str__ and __repr__ are already implemented in a meaningful way, \nespecially for the case of only one arg (that can be used as message)."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "__str__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__repr__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You do not need to repeat __str__ or __init__ implementation or create _get_message as suggested by others."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "__str__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "childList": []}, {"text": "_get_message", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["As far as I can tell, simply using a different name for the message attribute avoids the conflict with the base class, and thus stops the deprecation warning:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyException(Exception):\n\ndef __init__(self, message):\n    self.msg = message\n\ndef __str__(self):\n    return repr(self.msg)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Seems like a hack to me."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Maybe someone can explain why the warning is issued even when the subclass defines a message attribute explicitly.", "If the base class no longer has this attribute, there shouldn't be a problem."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]