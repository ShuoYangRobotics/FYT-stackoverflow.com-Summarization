[[{"text": ["Python (like Java, C, C++, .NET) uses string pooling / interning.", "The interpreter realises that \"hello\" is the same as \"hello\", so it optimizes and uses the same location in memory."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Another goodie: \"hell\" + \"o\" is \"hello\" ==> True"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["No, only ones the interpreter has decided to optimise, which is a decision based on a policy that isn't part of the language specification and which may change in different CPython versions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["eg.", "on my install (2.6.2 Linux):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 'X'*10 is 'X'*10\nTrue\n&gt;&gt;&gt; 'X'*30 is 'X'*30\nFalse\n</code>\n</pre>\n", "senID": 2}, {"text": ["similarly for ints:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 2**8 is 2**8\nTrue\n&gt;&gt;&gt; 2**9 is 2**9\nFalse\n</code>\n</pre>\n", "senID": 4}, {"text": ["So don't rely on 'string' is 'string': even just looking at the C implementation it isn't safe."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["The is operator returns true if both arguments are the same object.", "Your result is a consequence of this, and the quoted bit.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In the case of string literals, these are interned, meaning they are compared to known strings.", "If an identical string is already known, the literal takes that value, instead of an alternative one.", "Thus, they become the same object, and the expression is true."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The Python interpreter/compiler parses the string literals, i.e.", "the quoted list of characters.", "When it does this, it can detect \"I've seen this string before\", and use the same representation as last time.", "It can do this since it knows that strings defined in this way cannot be changed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Why is it strange.", "If the string is immutable it makes a lot of sense to only store it once.", ".NET has the same behavior. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Literal strings are probably grouped based on their hash or something similar.", "Two of the same literal strings will be stored in the same memory, and any references both refer to that."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Memory        Code\n-------\n|          myLine = \"hello\"\n|        /\n|hello  &lt;\n|        \\\n|          myLine = \"hello\"\n-------\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think if any two variables (not just strings) contain the same value, the value will be stored only once not twice and both the variables will point to the same location.", "This saves memory."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]