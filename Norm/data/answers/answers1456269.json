[[{"text": ["I thought I would answer my own question, since I'm taking a different path than suggested in the answers.", "Nonetheless, thanks to those who answered."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First, a brief synopsis of my experiences with GitPython, PyGit, and Dulwich:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "GitPython:  After downloading, I got this imported and the appropriate object initialized.  However, trying to do what was suggested in the tutorial led to errors.  Lacking more documentation, I turned elsewhere.", "tag": "none", "senID": 2}, {"text": "PyGit:  This would not even import, and I could find no documentation.", "tag": "none", "senID": 3}, {"text": "Dulwich:  Seems to be the most promising (at least for what I wanted and saw).  I made some progress with it, more than with GitPython, since its egg comes with Python source.  However, after a while, I decided it may just be easier to try what I did.", "tag": "none", "senID": 4}]}, {"text": ["Also, StGit looks interesting, but I would need the functionality extracted into a separate module and do not want wait for that to happen right now."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["In (much) less time than I spent trying to get the three modules above working, I managed to get git commands working via the subprocess module, e.g."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def gitAdd(fileName, repoDir):\n    cmd = 'git add ' + fileName\n    pipe = subprocess.Popen(cmd, shell=True, cwd=repoDir)\n    pipe.wait()\n    return\n\ngitAdd('exampleFile.txt', '/usr/local/example_git_repo_dir')\n</code>\n</pre>\n", "senID": 7}, {"text": ["This isn't fully incorporated into my program yet, but I'm not anticipating a problem, except maybe speed (since I'll be processing hundreds or even thousands of files at times)."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Maybe I just didn't have the patience to get things going with Dulwich or GitPython.", "That said, I'm hopeful the modules will get more development and be more useful soon."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["Maybe it helps, but Bazaar and Mercurial are both using dulwich for their Git interoperability."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Dulwich is probably different than the other in the sense that's it's a reimplementation of git in python.", "The other might just be a wrapper around Git's commands (so it could be simpler to use from a high level point of view: commit/add/delete), it probably means their API is very close to git's command line so you'll need to gain experience with Git."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["For the sake of completeness, http://github.com/alex/pyvcs/ is an abstraction layer for all dvcs's.", "It uses dulwich, but provides interop with the other dvcs's."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://github.com/alex/pyvcs/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/alex/pyvcs/"}]}], [{"text": ["Here's a really quick implementation of \"git status\":"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport string\nfrom subprocess import *\n\nrepoDir = '/Users/foo/project'\n\ndef command(x):\n    return str(Popen(x.split(' '), stdout=PIPE).communicate()[0])\n\ndef rm_empty(L): return [l for l in L if (l and l!=\"\")]\n\ndef getUntracked():\n    os.chdir(repoDir)\n    status = command(\"git status\")\n    if \"# Untracked files:\" in status:\n        untf = status.split(\"# Untracked files:\")[1][1:].split(\"\\n\")\n        return rm_empty([x[2:] for x in untf if string.strip(x) != \"#\" and x.startswith(\"#\\t\")])\n    else:\n        return []\n\ndef getNew():\n    os.chdir(repoDir)\n    status = command(\"git status\").split(\"\\n\")\n    return [x[14:] for x in status if x.startswith(\"#\\tnew file:   \")]\n\ndef getModified():\n    os.chdir(repoDir)\n    status = command(\"git status\").split(\"\\n\")\n    return [x[14:] for x in status if x.startswith(\"#\\tmodified:   \")]\n\nprint(\"Untracked:\")\nprint( getUntracked() )\nprint(\"New:\")\nprint( getNew() )\nprint(\"Modified:\")\nprint( getModified() )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The git interaction library part of StGit is actually pretty good.", "However, it isn't broken out as a separate package but if there is sufficient interest, I'm sure that can be fixed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It has very nice abstractions for representing commits, trees etc, and for creating new commits and trees."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["For the record, none of the aforementioned Git Python libraries seem to contain a \"git status\" equivalent, which is really the only thing I would want since dealing with the rest of the git commands via subprocess is so easy."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["PTBNL's Answer is quite perfect for me.", "I make a little more for Windows user. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import time\nimport subprocess\ndef gitAdd(fileName, repoDir):\n    cmd = 'git add ' + fileName\n    pipe = subprocess.Popen(cmd, shell=True, cwd=repoDir,stdout = subprocess.PIPE,stderr = subprocess.PIPE )\n    (out, error) = pipe.communicate()\n    print out,error\n    pipe.wait()\n    return \n\ndef gitCommit(commitMessage, repoDir):\n    cmd = 'git commit -am \"%s\"'%commitMessage\n    pipe = subprocess.Popen(cmd, shell=True, cwd=repoDir,stdout = subprocess.PIPE,stderr = subprocess.PIPE )\n    (out, error) = pipe.communicate()\n    print out,error\n    pipe.wait()\n    return \ndef gitPush(repoDir):\n    cmd = 'git push '\n    pipe = subprocess.Popen(cmd, shell=True, cwd=repoDir,stdout = subprocess.PIPE,stderr = subprocess.PIPE )\n    (out, error) = pipe.communicate()\n    pipe.wait()\n    return \n\ntemp=time.localtime(time.time())\nuploaddate= str(temp[0])+'_'+str(temp[1])+'_'+str(temp[2])+'_'+str(temp[3])+'_'+str(temp[4])\n\nrepoDir='d:\\\\c_Billy\\\\vfat\\\\Programming\\\\Projector\\\\billyccm' # your git repository , windows your need to use double backslash for right directory.\ngitAdd('.',repoDir )\ngitCommit(uploaddate, repoDir)\ngitPush(repoDir)\n</code>\n</pre>\n", "senID": 1}]]