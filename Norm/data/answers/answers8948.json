[[{"text": ["I used eyeD3 the other day with a lot of success.", "I found that it could add artwork to the ID3 tag which the other modules I looked at couldn't.", "You'll have to download the tar and execute python setup.py install from the source folder.  "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "eyeD3", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://eyed3.nicfit.net/"}, {"text": "python setup.py install", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Relevant examples from the website are below."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Reading the contents of an mp3 file containing either v1 or v2 tag info:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import eyeD3\n tag = eyeD3.Tag()\n tag.link(\"/some/file.mp3\")\n print tag.getArtist()\n print tag.getAlbum()\n print tag.getTitle()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Read an mp3 file (track length, bitrate, etc.", ") and access it's tag:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if eyeD3.isMp3File(f):\n     audioFile = eyeD3.Mp3AudioFile(f)\n     tag = audioFile.getTag()\n</code>\n</pre>\n", "senID": 5}, {"text": ["Specific tag versions can be selected:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n tag.link(\"/some/file.mp3\", eyeD3.ID3_V2)\n tag.link(\"/some/file.mp3\", eyeD3.ID3_V1)\n tag.link(\"/some/file.mp3\", eyeD3.ID3_ANY_VERSION)  # The default.\n</code>\n</pre>\n", "senID": 7}, {"text": ["Or you can iterate over the raw frames:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n tag = eyeD3.Tag()\n tag.link(\"/some/file.mp3\")\n for frame in tag.frames:\n    print frame\n</code>\n</pre>\n", "senID": 9}, {"text": ["Once a tag is linked to a file it can be modified and saved:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n tag.setArtist(u\"Cro-Mags\")\n tag.setAlbum(u\"Age of Quarrel\")\n tag.update()\n</code>\n</pre>\n", "senID": 11}, {"text": ["If the tag linked in was v2 and you'd like to save it as v1:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n tag.update(eyeD3.ID3_V1_1)\n</code>\n</pre>\n", "senID": 13}, {"text": ["Read in a tag and remove it from the file:"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n tag.link(\"/some/file.mp3\")\n tag.remove()\n tag.update()\n</code>\n</pre>\n", "senID": 15}, {"text": ["Add a new tag:"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"code": "<pre>\n<code>\n tag = eyeD3.Tag()\n tag.link('/some/file.mp3')    # no tag in this file, link returned False\n tag.header.setVersion(eyeD3.ID3_V2_3)\n tag.setArtist('Fugazi')\n tag.update()\n</code>\n</pre>\n", "senID": 17}], [{"text": ["I've used mutagen to edit tags in media files before.", "The nice thing about mutagen is that it can handle other formats, such as mp4, FLAC etc.", "I've written several scripts with a lot of success using this API."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "mutagen", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/quodlibet/wiki/Mutagen"}]}], [{"text": ["What you're after is the ID3 module.", "It's very simple and will give you exactly what you need.", "Just copy the ID3.py file into your site-packages directory and you'll be able to do something like the following:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ID3", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://id3-py.sourceforge.net/"}]}, {"code": "<pre>\n<code>\n from ID3 import *\ntry:\n  id3info = ID3('file.mp3')\n  print id3info\n  # Change the tags\n  id3info['TITLE'] = \"Green Eggs and Ham\"\n  id3info['ARTIST'] = \"Dr. Seuss\"\n  for k, v in id3info.items():\n    print k, \":\", v\nexcept InvalidTagError, message:\n  print \"Invalid ID3 tag:\", message\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A simple example from the book Dive Into Python works ok for me, this is the download link, the example is fileinfo.py.", "Don't know if it's the best, but it can do the basic job."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org/download/diveintopython-examples-5.4.zip"}]}, {"text": ["The entire book is available online here."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org/"}]}], [{"text": ["This toolkit may do what you need.", "I can't say if it's the \"best\", but really, if it does what you need, that's all that matters, right?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "This toolkit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dotfunk.com/projects/mp3/"}]}, {"text": ["HTH"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It can depend on exactly what you want to do in addition to reading the metadata.", "If it is just simply the bitrate / name etc.", "that you need, and nothing else, something lightweight is probably best."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you're manipulating the mp3 past that PyMedia may be suitable."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["There are quite a few, whatever you do get, make sure and test it out on plenty of sample media.", "There are a few different versions of ID3 tags in particular, so make sure it's not too out of date. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Personally I've used this small MP3Info class with luck.", "It is quite old though."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["http://www.omniscia.org/~vivake/python/MP3Info.py"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://www.omniscia.org/~vivake/python/MP3Info.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.omniscia.org/~vivake/python/MP3Info.py"}]}], [{"text": ["I looked the above answers and found out that they are not good for my project because of licensing problems with GPL."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["And I found out this: PyID3Lib, while that particular python binding release date is old, it uses the ID3Lib, which itself is up to date."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "PyID3Lib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyid3lib.sourceforge.net/"}, {"text": "python binding", "childNum": 0, "tag": "em", "childList": []}, {"href": "http://id3lib.sourceforge.net/", "text": "ID3Lib", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Notable to mention is that both are LGPL, and are good to go."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "LGPL", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["check this one out:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["https://github.com/Ciantic/songdetails"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "https://github.com/Ciantic/songdetails", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/Ciantic/songdetails"}]}, {"text": ["Usage example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import songdetails\n&gt;&gt;&gt; song = songdetails.scan(\"data/song.mp3\")\n&gt;&gt;&gt; print song.duration\n0:03:12\n</code>\n</pre>\n", "senID": 3}, {"text": ["Saving changes:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import songdetails\n&gt;&gt;&gt; song = songdetails.scan(\"data/commit.mp3\")\n&gt;&gt;&gt; song.artist = \"Great artist\"\n&gt;&gt;&gt; song.save()\n</code>\n</pre>\n", "senID": 5}], [{"text": ["If you can use IronPython, there is TagLibSharp.", "It can be used from any .NET language."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "It can be used from any .NET language", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/28664/what-is-the-besta-very-good-meta-data-reader-library#28687"}]}], [{"text": ["Just additional information to you guys:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["take a look at the section \"MP3 stuff and Metadata editors\" in the page of PythonInMusic."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PythonInMusic", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/PythonInMusic"}]}]]