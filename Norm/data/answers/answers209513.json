[[{"text": ["Without the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Without", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n x = int(\"deadbeef\", 16)\n</code>\n</pre>\n", "senID": 1}, {"text": ["With the 0x prefix, Python can distinguish hex and decimal automatically:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "With", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print int(\"0xdeadbeef\", 0)\n3735928559\n&gt;&gt;&gt; print int(\"10\", 0)\n10\n</code>\n</pre>\n", "senID": 3}], [{"text": ["int(hexString, 16) does the trick, and works with and without the 0x prefix."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "int(hexString, 16)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["For any given string s:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n int(s, 16)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["To convert a DWORD from hex to a signed integer , implement two's complement like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ~ (0xffffffff - int('0xdeadbeef', 16)) + 1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Conversion from string to hexadecimal to integer"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Read 12 bit vectors as string from the text vectors file\nself.ci = 0\nself.idata = 0\nself.qdata = 0\nfor self.ci in range(10, 11, 1):\n   self.idata = self.rfile[self.ci] + self.rfile[self.ci+1] + self.rfile[self.ci+2]\n   self.qdata = self.rfile[self.ci+5] + self.rfile[self.ci+6] + self.rfile[self.ci+7]    \n   print self.idata, self.qdata\n\n# Convert String to a Integer Value\nself.idata_f = int(self.idata, 16)\nself.qdata_f =  int(self.qdata, 16)\n</code>\n</pre>\n", "senID": 1}]]