[[{"text": ["Well, when DEBUG = False, Django will automatically mail a full traceback of any error to each person listed in the ADMINS setting, which gets you notifications pretty much for free.", "If you'd like more fine-grained control, you can write and add to your settings a middleware class which defines a method named process_exception(), which will have access to the exception that was raised:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "DEBUG = False", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ADMINS", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "process_exception()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["http://docs.djangoproject.com/en/dev/topics/http/middleware/#process-exception"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.djangoproject.com/en/dev/topics/http/middleware/#process-exception", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/http/middleware/#process-exception"}]}, {"text": ["Your process_exception() method can then perform whatever type of logging you'd like: writing to console, writing to a file, etc., etc."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "process_exception()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit: though it's a bit less useful, you can also listen for the got_request_exception signal, which will be sent whenever an exception is encountered during request processing:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "got_request_exception", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["http://docs.djangoproject.com/en/dev/ref/signals/#got-request-exception"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://docs.djangoproject.com/en/dev/ref/signals/#got-request-exception", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/signals/#got-request-exception"}]}, {"text": ["This does not give you access to the exception object, however, so the middleware method is much easier to work with."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Obviously James is correct, but if you wanted to log exceptions in a datastore there are a few opensource solutions already available:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1) CrashLog is a good choice: http://code.google.com/p/django-crashlog/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/django-crashlog/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-crashlog/"}]}, {"text": ["2) Db-Log is a good choice as well: http://code.google.com/p/django-db-log/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://code.google.com/p/django-db-log/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-db-log/"}]}, {"text": ["What is the difference between the two?", "Almost nothing that I can see, so either one will suffice."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I've used both and the work well."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["django-db-log, mentioned in another answer, has been replaced with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["https://github.com/dcramer/django-sentry"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "https://github.com/dcramer/django-sentry", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/dcramer/django-sentry"}]}], [{"text": ["Django Sentry is a good way to go, as already mentioned, but there is a bit of work involved in setting it up properly (as a separate website).", "If you just want to log everything to a simple text file here's the logging configuration to put in your settings.py"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "settings.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        # Include the default Django email handler for errors\n        # This is what you'd get without configuring logging at all.\n        'mail_admins': {\n            'class': 'django.utils.log.AdminEmailHandler',\n            'level': 'ERROR',\n             # But the emails are plain text by default - HTML is nicer\n            'include_html': True,\n        },\n        # Log to a text file that can be rotated by logrotate\n        'logfile': {\n            'class': 'logging.handlers.WatchedFileHandler',\n            'filename': '/var/log/django/myapp.log'\n        },\n    },\n    'loggers': {\n        # Again, default Django configuration to email unhandled exceptions\n        'django.request': {\n            'handlers': ['mail_admins'],\n            'level': 'ERROR',\n            'propagate': True,\n        },\n        # Might as well log any errors anywhere else in Django\n        'django': {\n            'handlers': ['logfile'],\n            'level': 'ERROR',\n            'propagate': False,\n        },\n        # Your own app - this assumes all your logger names start with \"myapp.\"\n        'myapp': {\n            'handlers': ['logfile'],\n            'level': 'WARNING', # Or maybe INFO or DEBUG\n            'propogate': False\n        },\n    },\n}\n</code>\n</pre>\n", "senID": 1}]]