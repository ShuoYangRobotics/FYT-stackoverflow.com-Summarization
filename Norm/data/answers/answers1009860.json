[[{"text": ["There are the following modules in the standard library:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "The ", "tag": "none", "senID": 1}, {"text": "The ", "tag": "none", "senID": 2}]}, {"text": ["Here is an example that uses the latter from the docs:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from optparse import OptionParser\n\nparser = OptionParser()\nparser.add_option(\"-f\", \"--file\", dest=\"filename\",\n                  help=\"write report to FILE\", metavar=\"FILE\")\nparser.add_option(\"-q\", \"--quiet\",\n                  action=\"store_false\", dest=\"verbose\", default=True,\n                  help=\"don't print status messages to stdout\")\n\n(options, args) = parser.parse_args()\n</code>\n</pre>\n", "senID": 4}, {"text": ["optparse supports (among other things):"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Multiple options in any order.", "tag": "none", "senID": 6}, {"text": "Short and long options.", "tag": "none", "senID": 7}, {"text": "Default values.", "tag": "none", "senID": 8}, {"text": "Generation of a usage help message.", "tag": "none", "senID": 9}]}], [{"text": ["Just going around evangelizing for argparse which is better for these reasons.. essentially:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "argparse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/argparse/"}, {"href": "http://argparse.googlecode.com/svn/trunk/doc/argparse-vs-optparse.html", "text": "these", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["(copied from the link)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "(copied from the link)", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 5, "lis": [{"text": ["argparse module can handle positional\nand optional arguments, while\noptparse can handle only optional\narguments"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["argparse isn\u2019t dogmatic about\nwhat your command line interface\nshould look like - options like -file\nor /file are supported, as are\nrequired options.", "Optparse refuses to\nsupport these features, preferring\npurity over practicality"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["argparse produces more\ninformative usage messages, including\ncommand-line usage determined from\nyour arguments, and help messages for\nboth positional and optional\narguments.", "The optparse module\nrequires you to write your own usage\nstring, and has no way to display\nhelp for positional arguments."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["argparse supports action that\nconsume a variable number of\ncommand-line args, while optparse\nrequires that the exact number of\narguments (e.g.", "1, 2, or 3) be known\nin advance"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["argparse supports parsers that\ndispatch to sub-commands, while\noptparse requires setting\nallow_interspersed_args and doing the\nparser dispatch manually"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "allow_interspersed_args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]}, {"text": ["And my personal favorite:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "argparse allows the type and\naction parameters to ", "tag": "none", "senID": 8}]}], [{"text": ["I use optparse myself, but really like the direction Simon Willison is taking with his recently introduced optfunc library.", "It works by:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "optfunc", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/simonw/optfunc/tree/master"}]}, {"text": ["So, for example, this function definition:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def geocode(s, api_key='', geocoder='google', list_geocoders=False):\n</code>\n</pre>\n", "senID": 2}, {"text": ["is turned into this optparse help text:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n Options:\n      -h, --help            show this help message and exit\n      -l, --list-geocoders\n      -a API_KEY, --api-key=API_KEY\n      -g GEOCODER, --geocoder=GEOCODER\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n import sys\n\nprint \"\\n\".join(sys.argv)\n</code>\n</pre>\n", "senID": 0}, {"text": ["sys.argv is a list that contains all the arguments passed to the script on the command line."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["One way to do it is using sys.argv.", "This will print the script name as the first argument and all the other parameters that you pass to it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sys.argv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\n\nfor arg in sys.argv:\n    print arg\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There is also argparse module (an \"impovement\" on stdlib's optparse module).", "Example from the introduction to argparse:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "argparse", "tag": "a", "pos": 0, "childList": [{"text": "argparse", "tag": "code"}], "childNum": 1, "href": "http://code.google.com/p/argparse/"}, {"text": "argparse", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "optparse", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://argparse.googlecode.com/svn/trunk/doc/overview.html", "text": "the introduction to argparse", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n # script.py\nimport argparse\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        'integers', metavar='int', type=int, choices=xrange(10),\n         nargs='+', help='an integer in the range 0..9')\n    parser.add_argument(\n        '--sum', dest='accumulate', action='store_const', const=sum,\n        default=max, help='sum the integers (default: find the max)')\n\n    args = parser.parse_args()\n    print args.accumulate(args.integers)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ script.py 1 2 3 4\n4\n\n$ script.py --sum 1 2 3 4\n10\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I like getopt from stdlib, eg:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    opts, args = getopt.getopt(sys.argv[1:], 'h', ['help'])\nexcept getopt.GetoptError, err: \n    usage(err)\n\nfor opt, arg in opts:\n    if opt in ('-h', '--help'): \n        usage()\n\nif len(args) != 1:\n    usage(\"specify thing...\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Lately I have been wrapping something similiar to this to make things less verbose (eg; making \"-h\" implicit)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You may be interested in a little Python module I wrote to make handling of command line arguments even easier (open source and free to use) - Commando"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Commando", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://freshmeat.net/projects/commando"}]}], [{"text": ["As you can see optparse \"The optparse module is deprecated with and will not be developed further; development will continue with the argparse module.", "\" "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "optparse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/optparse.html#module-optparse"}, {"text": "argparse", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/argparse.html#module-argparse"}]}], [{"text": ["There's also optparse."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]