[[{"text": ["Hard one :-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import email, getpass, imaplib, os\n\ndetach_dir = '.' # directory where to save attachments (default: current)\nuser = raw_input(\"Enter your GMail username:\")\npwd = getpass.getpass(\"Enter your password: \")\n\n# connecting to the gmail imap server\nm = imaplib.IMAP4_SSL(\"imap.gmail.com\")\nm.login(user,pwd)\nm.select(\"[Gmail]/All Mail\") # here you a can choose a mail box like INBOX instead\n# use m.list() to get all the mailboxes\n\nresp, items = m.search(None, \"ALL\") # you could filter using the IMAP rules here (check http://www.example-code.com/csharp/imap-search-critera.asp)\nitems = items[0].split() # getting the mails id\n\nfor emailid in items:\n    resp, data = m.fetch(emailid, \"(RFC822)\") # fetching the mail, \"`(RFC822)`\" means \"get the whole stuff\", but you can ask for headers only, etc\n    email_body = data[0][1] # getting the mail content\n    mail = email.message_from_string(email_body) # parsing the mail content to get a mail object\n\n    #Check if any attachments at all\n    if mail.get_content_maintype() != 'multipart':\n        continue\n\n    print \"[\"+mail[\"From\"]+\"] :\" + mail[\"Subject\"]\n\n    # we use walk to create a generator so we can iterate on the parts and forget about the recursive headach\n    for part in mail.walk():\n        # multipart are just containers, so we skip them\n        if part.get_content_maintype() == 'multipart':\n            continue\n\n        # is this part an attachment ?\n        if part.get('Content-Disposition') is None:\n            continue\n\n        filename = part.get_filename()\n        counter = 1\n\n        # if there is no filename, we create one with a counter to avoid duplicates\n        if not filename:\n            filename = 'part-%03d%s' % (counter, 'bin')\n            counter += 1\n\n        att_path = os.path.join(detach_dir, filename)\n\n        #Check if its already there\n        if not os.path.isfile(att_path) :\n            # finally write the stuff\n            fp = open(att_path, 'wb')\n            fp.write(part.get_payload(decode=True))\n            fp.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Wowww !", "That's was something ;-) But try the same in Java, just for fun !"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["By the way, I tested that in a shell, so there must remains some errors."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Enjoy"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I'm not an expert on Perl, but what I do know is that GMail supports IMAP and POP3, 2 protocols that are completely standard and allow you to do just that. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Maybe that helps you to get started. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n #!/usr/bin/env python\n\"\"\"Save all attachments for given gmail account.\"\"\"\nimport os, sys\nfrom libgmail import GmailAccount\n\nga = GmailAccount(\"your.account@gmail.com\", \"pA$$w0Rd_\")\nga.login()\n\n# folders: inbox, starred, all, drafts, sent, spam\nfor thread in ga.getMessagesByFolder('all', allPages=True):\n    for msg in thread:\n        sys.stdout.write('.')\n        if msg.attachments:\n           print \"\\n\", msg.id, msg.number, msg.subject, msg.sender\n           for att in msg.attachments:\n               if att.filename and att.content:\n                  attdir = os.path.join(thread.id, msg.id)\n                  if not os.path.isdir(attdir):\n                     os.makedirs(attdir)                \n                  with open(os.path.join(attdir, att.filename), 'wb') as f:\n                       f.write(att.content)\n</code>\n</pre>\n", "senID": 0}, {"text": ["untested"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Within gmail, you can filter on \"has:attachment\", use it to identify the messages you should be getting when testing.", "Note this appears to give both messages with attached files (paperclip icon shown), as well as inline attached images (no paperclip shown)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There is no Gmail API, so IMAP or POP are your only real options.", "The JavaMail API may be of some assistance as well as this very terse article on downloading attachments from IMAP using Perl.", "Some previous questions here on SO may also help."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "JavaMail API", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.nakov.com/inetjava/lectures/part-1-sockets/InetJava-1.9-JavaMail-API.html"}, {"text": "downloading attachments from IMAP using Perl", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.perlmonks.org/?node_id=697321"}, {"text": "previous questions", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/61176/getting-mail-from-gmail-into-java-application-using-imap"}]}, {"text": ["This PHP example may help too.", "Unfortunately from what I can see, there is no attachment information contained within the imap_header, so downloading the body is required to be able to see the X-Attachment-Id field.", "(someone please prove me wrong)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "PHP example", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://petewarden.typepad.com/searchbrowser/2008/03/how-to-use-imap.html"}]}], [{"text": ["Take a look at Mail::Webmail::Gmail:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Mail::Webmail::Gmail", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/~mincus/Mail-Webmail-Gmail-1.09/lib/Mail/Webmail/Gmail.pm#GETTING%5FATTACHMENTS"}]}, {"text": ["GETTING ATTACHMENTS"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "GETTING ATTACHMENTS", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["There are two ways to get an attachment:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["1 -> By sending a reference to a specific attachment returned by get_indv_email"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "get_indv_email", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # Creates an array of references to every attachment in your account\nmy $messages = $gmail-&gt;get_messages();\nmy @attachments;\n\nforeach ( @{ $messages } ) {\n    my $email = $gmail-&gt;get_indv_email( msg =&gt; $_ );\n    if ( defined( $email-&gt;{ $_-&gt;{ 'id' } }-&gt;{ 'attachments' } ) ) {\n        foreach ( @{ $email-&gt;{ $_-&gt;{ 'id' } }-&gt;{ 'attachments' } } ) {\n            push( @attachments, $gmail-&gt;get_attachment( attachment =&gt; $_ ) );\n            if ( $gmail-&gt;error() ) {\n                print $gmail-&gt;error_msg();\n            }\n        }\n    }\n}\n</code>\n</pre>\n", "senID": 4}, {"text": ["2 -> Or by sending the attachment ID and message ID"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n #retrieve specific attachment\nmy $msgid = 'F000000000';\nmy $attachid = '0.1';\nmy $attach_ref = $gmail-&gt;get_attachment( attid =&gt; $attachid, msgid =&gt; $msgid );\n</code>\n</pre>\n", "senID": 6}, {"text": ["( Returns a reference to a scalar that holds the data from the attachment."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Since Gmail supports the standard protocols POP and IMAP, any platform, tool, application, component, or API that provides the client side of either protocol should work."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I suggest doing a Google search for your favorite language/platform (e.g., \"python\"), plus \"pop\", plus \"imap\", plus perhaps \"open source\", plus perhaps \"download\" or \"review\", and see what you get for options."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["There are numerous free applications and components, pick a few that seem worthy, check for reviews, then download and enjoy."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You should be aware of the fact that you need SSL to connect to GMail (both for POP3 and IMAP - this is of course true also for their SMTP-servers apart from port 25 but that's another story)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Have you taken a look at the GMail 3rd party add-ons at wikipedia?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "GMail 3rd party add-ons", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Gmail#Gmail%5F3rd%5Fparty%5FAdd-Ins"}]}, {"text": ["In particular, PhpGmailDrive is an open source add-on that you may be able to use as-is, or perhaps study for inspiration?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PhpGmailDrive", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/PhpGmailDrive"}]}], [{"text": ["For Java, you will find G4J of use.", "It's a set of APIs to communicate with Google Mail via Java (the screenshot on the homepage is a demonstration email client built around this)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "G4J", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://g4j.sourceforge.net/"}]}], [{"text": ["Here's something I wrote to download my bank statements in Groovy (dynamic language for the Java Platform)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Groovy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groovy.codehaus.org/"}]}, {"code": "<pre>\n<code>\n import javax.mail.*\nimport java.util.Properties\n\nString  gmailServer\nint gmailPort\ndef user, password, LIMIT\ndef inboxFolder, root, StartDate, EndDate\n\n\n//    Downloads all attachments from a gmail mail box as per some criteria\n//    to a specific folder\n//    Based on code from\n//    http://agileice.blogspot.com/2008/10/using-groovy-to-connect-to-gmail.html\n//    http://stackoverflow.com/questions/155504/download-mail-attachment-with-java\n//\n//    Requires: \n//        java mail jars in the class path (mail.jar and activation.jar)\n//        openssl, with gmail certificate added to java keystore (see agileice blog)\n//        \n//    further improvement: maybe findAll could be used to filter messages\n//    subject could be added as another criteria\n////////////////////// &lt;CONFIGURATION&gt; //////////////////////\n// Maximm number of emails to access in case parameter range is too high\nLIMIT = 10000\n\n// gmail credentials\ngmailServer = \"imap.gmail.com\"\ngmailPort = 993\n\nuser = \"gmailuser@gmail.com\"\npassword = \"gmailpassword\"\n\n// gmail label, or \"INBOX\" for inbox\ninboxFolder = \"finance\"\n\n// local file system where the attachment files need to be stored\nroot = \"D:\\\\AttachmentStore\" \n\n// date range dd-mm-yyyy\nStartDate= \"31-12-2009\"\nEndDate = \"1-6-2010\" \n////////////////////// &lt;/CONFIGURATION&gt; //////////////////////\n\nStartDate = Date.parse(\"dd-MM-yyyy\", StartDate)\nEndDate = Date.parse(\"dd-MM-yyyy\", EndDate)\n\nProperties props = new Properties();\nprops.setProperty(\"mail.store.protocol\", \"imaps\");\nprops.setProperty(\"mail.imaps.host\", gmailServer);\nprops.setProperty(\"mail.imaps.port\", gmailPort.toString());\nprops.setProperty(\"mail.imaps.partialfetch\", \"false\");\n\ndef session = javax.mail.Session.getDefaultInstance(props,null)\ndef store = session.getStore(\"imaps\")\n\nstore.connect(gmailServer, user, password)\n\nint i = 0;\ndef folder = store.getFolder(inboxFolder)\n\nfolder.open(Folder.READ_ONLY)\n\nfor(def msg : folder.messages) {\n\n     //if (msg.subject?.contains(\"bank Statement\"))\n     println \"[$i] From: ${msg.from} Subject: ${msg.subject} -- Received: ${msg.receivedDate}\"\n\n     if (msg.receivedDate &lt;  StartDate || msg.receivedDate &gt; EndDate) {\n         println \"Ignoring due to date range\"\n         continue\n     }\n\n\n     if (msg.content instanceof Multipart) {\n         Multipart mp = (Multipart)msg.content;\n\n         for (int j=0; j &lt; mp.count; j++) {\n\n             Part part = mp.getBodyPart(j);\n\n             println \" ---- ${part.fileName} ---- ${part.disposition}\"\n\n             if (part.disposition?.equalsIgnoreCase(Part.ATTACHMENT)) {\n\n                 if (part.content) {\n\n                     def name = msg.receivedDate.format(\"yyyy_MM_dd\") + \" \" + part.fileName\n                     println \"Saving file to $name\"\n\n                     def f = new File(root, name)\n\n                     //f &lt;&lt; part.content\n                     try {\n                         if (!f.exists())\n                             f &lt;&lt; part.content\n                     }\n                     catch (Exception e) {\n                         println \"*** Error *** $e\" \n                     }\n                 }\n                 else {\n                    println \"NO Content Found!!\"\n                 }\n             }\n         }\n     }\n\n     if (i++ &gt; LIMIT)\n         break;\n\n}\n</code>\n</pre>\n", "senID": 1}]]