[[{"text": ["Thanks @rofly, the full conversion from string to string is as follows:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "rofly", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "#79808"}]}, {"code": "<pre>\n<code>\n time.strftime(\"%Y-%m-%d %H:%M:%S\", \n              time.gmtime(time.mktime(time.strptime(\"2008-09-17 14:04:00\", \n                                                    \"%Y-%m-%d %H:%M:%S\"))))\n</code>\n</pre>\n", "senID": 1}, {"text": ["My summary of the time/calendar functions:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "time", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "calendar", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["time.strptime\nstring --> tuple (no timezone applied, so matches string)"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "time.strptime", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["time.mktime\nlocal time tuple --> seconds since epoch (always UTC, so current timezone has been subtracted)"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "time.mktime", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["time.gmtime\nseconds since epoch --> tuple in UTC"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "time.gmtime", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["and "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["calendar.timegm\ntuple in UTC --> seconds since epoch"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "calendar.timegm", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["time.localtime\nseconds since epoch --> tuple in local timezone"], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "time.localtime", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}], [{"text": ["First, parse the string into a naive datetime object.", "This is an instance of datetime.datetime with no attached timezone information.", "See documentation for datetime.strptime for information on parsing the date string."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "datetime.datetime", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "datetime.strptime", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Use the pytz module, which comes with a full list of time zones + UTC.", "Figure out what the local timezone is, construct a timezone object from it, and manipulate and attach it to the naive datetime."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "pytz", "tag": "a", "pos": 0, "childList": [{"text": "pytz", "tag": "code"}], "childNum": 1, "href": "http://pytz.sourceforge.net/"}, {"text": "pytz", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Finally, use datetime.astimezone() method to convert the datetime to UTC."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "datetime.astimezone()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Source code, using local timezone \"America/Los_Angeles\", for the string \"2001-2-3 10:11:12\":"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import pytz, datetime\nlocal = pytz.timezone (\"America/Los_Angeles\")\nnaive = datetime.datetime.strptime (\"2001-2-3 10:11:12\", \"%Y-%m-%d %H:%M:%S\")\nlocal_dt = naive.replace (tzinfo = local)\nutc_dt = local_dt.astimezone (pytz.utc)\n</code>\n</pre>\n", "senID": 4}, {"text": ["From there, you can use the strftime() method to format the UTC datetime as needed:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "strftime()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n utc_dt.strftime (\"%Y-%m-%d %H:%M:%S\")\n</code>\n</pre>\n", "senID": 6}], [{"code": "<pre>\n<code>\n def local_to_utc(t):\n    \"\"\"Make sure that the dst flag is -1 -- this tells mktime to take daylight\n    savings into account\"\"\"\n    secs = time.mktime(t)\n    return time.gmtime(secs)\n\ndef utc_to_local(t):\n    secs = calendar.timegm(t)\n    return time.localtime(secs)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Source: http://feihonghsu.blogspot.com/2008/02/converting-from-local-time-to-utc.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://feihonghsu.blogspot.com/2008/02/converting-from-local-time-to-utc.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://feihonghsu.blogspot.com/2008/02/converting-from-local-time-to-utc.html"}]}, {"text": ["Example usage from bd808: If your source is a datetime.datetime object t, call as:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "bd808", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/8171/bd808"}, {"text": "datetime.datetime", "childNum": 0, "tag": "code", "childList": []}, {"text": "t", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n local_to_utc(t.timetuple())\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The datetime module's utcnow() function can be used to obtain the current local UTC time."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "utcnow()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/datetime.html#datetime.datetime.utcnow"}, {"text": "local", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import datetime\n&gt;&gt;&gt; utc_datetime = datetime.datetime.utcnow()\n&gt;&gt;&gt; utc_datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\n'2010-02-01 06:59:19'\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to obtain the UTC time from a given string:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["--> using local time as the basis for the offset value:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; # Obtain the UTC Offset for the current system:\n&gt;&gt;&gt; UTC_OFFSET_TIMEDELTA = datetime.datetime.utcnow() - datetime.datetime.now()\n&gt;&gt;&gt; local_datetime = datetime.datetime.strptime(\"2008-09-17 14:04:00\", \"%Y-%m-%d %H:%M:%S\")\n&gt;&gt;&gt; result_utc_datetime = local_datetime - UTC_OFFSET_TIMEDELTA\n&gt;&gt;&gt; result_utc_datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\n'2008-09-17 04:04:00'\n</code>\n</pre>\n", "senID": 4}, {"text": ["--> Or, from a known offset, using datetime.timedelta():"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; UTC_OFFSET = 10\n&gt;&gt;&gt; result_utc_datetime = local_datetime - datetime.timedelta(hours=UTC_OFFSET)\n&gt;&gt;&gt; result_utc_datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\n'2008-09-17 04:04:00'\n</code>\n</pre>\n", "senID": 6}], [{"text": ["if you prefer datetime.datetime:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dt = datetime.strptime(\"2008-09-17 14:04:00\",\"%Y-%m-%d %H:%M:%S\")\nutc_struct_time = time.gmtime(time.mktime(dt.timetuple()))\nutc_dt = datetime.fromtimestamp(time.mktime(utc_struct_time))\nprint dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["in this case ... pytz is best lib"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import pytz\nutc = pytz.utc\nyourdate = datetime.datetime.now()\nyourdateutc = yourdate.astimezone(utc).replace(tzinfo=None)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import time\n\nimport datetime\n\ndef Local2UTC(LocalTime):\n\n    EpochSecond = time.mktime(LocalTime.timetuple())\n    utcTime = datetime.datetime.utcfromtimestamp(EpochSecond)\n\n    return utcTime\n\n&gt;&gt;&gt; LocalTime = datetime.datetime.now()\n\n&gt;&gt;&gt; UTCTime = Local2UTC(LocalTime)\n\n&gt;&gt;&gt; LocalTime.ctime()\n\n'Thu Feb  3 22:33:46 2011'\n\n&gt;&gt;&gt; UTCTime.ctime()\n\n'Fri Feb  4 05:33:46 2011'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["How about - "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(seconds))\n</code>\n</pre>\n", "senID": 1}, {"text": ["if seconds is None then it converts the local time to UTC time else converts the passed in time to UTC."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]