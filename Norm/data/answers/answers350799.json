[[{"text": ["If f is a form, its fields are f.fields, which is a sortedDict (it presents the items in the order they are added).", "After form construction f.fields has a keyOrder attribute, which is a list containing the field names in the order they should be presented.", "You can set this to the correct ordering (though you need to exercise care to ensure you don't omit items or add extras)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's an example I just created in my current project:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class PrivEdit(ModelForm):\n    def __init__(self, *args, **kw):\n        super(ModelForm, self).__init__(*args, **kw)\n        self.fields.keyOrder = [\n            'super_user',\n            'all_districts',\n            'multi_district',\n            'all_schools',\n            'manage_users',\n            'direct_login',\n            'student_detail',\n            'license']\n    class Meta:\n        model = Privilege\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I went ahead and answered my own question.", "Here's the answer for future reference:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In Django form.py does some dark magic using the __new__ method to load your class variables ultimately into self.fields in the order defined in the class.", "self.fields is a Django SortedDict instance (defined in datastructures.py)."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "form.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__new__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "self.fields", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "self.fields", "childNum": 0, "tag": "code", "childList": []}, {"text": "SortedDict", "childNum": 0, "tag": "code", "childList": []}, {"text": "datastructures.py", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So to override this, say in my example you wanted sender to come first but needed to add it in an init method, you would do:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class ContactForm(forms.Form):\n    subject = forms.CharField(max_length=100)\n    message = forms.CharField()\n    def __init__(self,*args,**kwargs):\n        forms.Form.__init__(self,*args,**kwargs)\n        #first argument, index is the position of the field you want it to come before\n        self.fields.insert(0,'sender',forms.EmailField(initial=str(time.time())))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Form fields have an attribute for creation order, called creation_counter.", ".fields attribute is a dictionary, so simple adding to dictionary and changing creation_counter attributes in all fields to reflect new ordering should suffice (never tried this, though)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "creation_counter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".fields", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "creation_counter", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["For future reference: things have changed a bit since newforms.", "This is one way of reordering fields from base formclasses you have no control over:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def move_field_before(form, field, before_field):\n    content = form.base_fields[field]\n    del(form.base_fields[field])\n    insert_at = list(form.base_fields).index(before_field)\n    form.base_fields.insert(insert_at, field, content)\n    return form\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, there's a little bit of documentation about the SortedDict that base_fields uses here: http://code.djangoproject.com/wiki/SortedDict"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "base_fields", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://code.djangoproject.com/wiki/SortedDict", "text": "http://code.djangoproject.com/wiki/SortedDict", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Use a counter in the Field class.", "Sort by that counter:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import operator\nimport itertools\n\nclass Field(object):\n    _counter = itertools.count()\n    def __init__(self):\n        self.count = Field._counter.next()\n        self.name = ''\n    def __repr__(self):\n        return \"Field(%r)\" % self.name\n\nclass MyForm(object):\n    b = Field()\n    a = Field()\n    c = Field()\n\n    def __init__(self):\n        self.fields = []\n        for field_name in dir(self):\n            field = getattr(self, field_name)\n            if isinstance(field, Field):\n                field.name = field_name\n                self.fields.append(field)\n        self.fields.sort(key=operator.attrgetter('count'))\n\nm = MyForm()\nprint m.fields # in defined order\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [Field('b'), Field('a'), Field('c')]\n</code>\n</pre>\n", "senID": 3}, {"tag": "hr", "senID": 4}], [{"text": ["Fields are listed in the order they are defined in ModelClass._meta.fields"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It has to do with the meta class that is used in defining the form class.", "I think it keeps an internal list of the fields and if you insert into the middle of the list it might work.", "It has been a while since I looked at that code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]