[[{"text": ["In the first test, Python try to convert the object to a bool value if it is not already one.", "Roughly, we are asking the object : are you meaningfull or not ?", "This is done using the following algorithm :"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "bool", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "we are asking the object : are you meaningfull or not ?", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["In the second test, the object is compared for equality to None.", "Here, we are asking the object : are you equal to this other value ?", "This is done using the following algorithm :"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "we are asking the object : are you equal to this other value ?", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["There is another test possible using the is operator.", "We would be asking the object : are you this particular object ?"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "We would be asking the object : are you this particular object ?", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Generally, I would recommend to use the first test with non-numerical values, to use the test for equality when you want to compare objects of the same nature (two strings, two numbers, ...) and to check for identity only when using sentinel values (None meaning not initialized for a member field for exemple, or when using the getattr or the __getitem__ methods)."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "getattr", "childNum": 0, "tag": "code", "childList": []}, {"text": "__getitem__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["To summarize, we have :"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class A(object):\n...    def __repr__(self):\n...        return 'A()'\n...    def __nonzero__(self):\n...        return False\n\n&gt;&gt;&gt; class B(object):\n...    def __repr__(self):\n...        return 'B()'\n...    def __len__(self):\n...        return 0\n\n&gt;&gt;&gt; class C(object):\n...    def __repr__(self):\n...        return 'C()'\n...    def __cmp__(self, other):\n...        return 0\n\n&gt;&gt;&gt; class D(object):\n...    def __repr__(self):\n...        return 'D()'\n...    def __eq__(self, other):\n...        return True\n\n&gt;&gt;&gt; for obj in ['', (), [], {}, 0, 0., A(), B(), C(), D(), None]:\n...     print '%4s: bool(obj) -&gt; %5s, obj == None -&gt; %5s, obj is None -&gt; %5s' % \\\n...         (repr(obj), bool(obj), obj == None, obj is None)\n  '': bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False\n  (): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False\n  []: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False\n  {}: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False\n   0: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False\n 0.0: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False\n A(): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False\n B(): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False\n C(): bool(obj) -&gt;  True, obj == None -&gt;  True, obj is None -&gt; False\n D(): bool(obj) -&gt;  True, obj == None -&gt;  True, obj is None -&gt; False\nNone: bool(obj) -&gt; False, obj == None -&gt;  True, obj is None -&gt;  True\n</code>\n</pre>\n", "senID": 5}], [{"text": ["These are actually both poor practices.", "Once upon a time, it was considered OK to casually treat None and False as similar.", "However, since Python 2.2 this is not the best policy."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First, when you do an if x or if not x kind of test, Python has to implicitly convert x to boolean.", "The rules for the bool function describe a raft of things which are False; everything else is True.", "If the value of x wasn't properly boolean to begin with, this implicit conversion isn't really the clearest way to say things.  "], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "if x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if not x", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "bool", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Before Python 2.2, there was no bool function, so it was even less clear."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Second, you shouldn't really test with == None.", "You should use is None and is not None."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "== None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "is not None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["See PEP 8, Style Guide for Python Code.  "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Style Guide for Python Code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"text": ["How many singletons are there?", "Five: None, True, False, NotImplemented and Ellipsis.", "Since you're really unlikely to use NotImplemented or Ellipsis, and you would never say if x is True (because simply if x is a lot clearer), you'll only ever test None."], "childNum": 10, "tag": "p", "senID": 5, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}, {"text": "NotImplemented", "childNum": 0, "tag": "code", "childList": []}, {"text": "Ellipsis", "childNum": 0, "tag": "code", "childList": []}, {"text": "NotImplemented", "childNum": 0, "tag": "code", "childList": []}, {"text": "Ellipsis", "childNum": 0, "tag": "code", "childList": []}, {"text": "if x is True", "childNum": 0, "tag": "code", "childList": []}, {"text": "if x", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Because None is not the only thing that is considered false."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if not False:\n    print \"False is false.\"\nif not 0:\n    print \"0 is false.\"\nif not []:\n    print \"An empty list is false.\"\nif not ():\n    print \"An empty tuple is false.\"\nif not {}:\n    print \"An empty dict is false.\"\nif not \"\":\n    print \"An empty string is false.\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["False, 0, (), [], {} and \"\" are all different from None, so your two code snippets are not equivalent."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Moreover, consider the following:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; False == 0\nTrue\n&gt;&gt;&gt; False == ()\nFalse\n</code>\n</pre>\n", "senID": 4}, {"text": ["\"if object:\" is not an equality check.", "0, (), [], None, {}, etc.", "are all different from each other, but they all evaluate to False."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "are", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "evaluate", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["This is the \"magic\" behind short circuiting expressions like:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n foo = bar and spam or eggs\n</code>\n</pre>\n", "senID": 7}, {"text": ["which is shorthand for:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n if bar:\n    foo = bar\nelse:\n    foo = eggs\n</code>\n</pre>\n", "senID": 9}], [{"text": ["These two comparisons serve different purposes.", "The former checks for boolean value of something, the second checks for identity with None value."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you ask"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if not spam:\n    print \"Sorry. No SPAM.\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["the __nonzero__ method of spam gets called.", "From the Python manual:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "__nonzero__", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "spam", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["If you ask"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if spam == None:\n    print \"Sorry. No SPAM here either.\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["the __eq__ method of spam gets called with the argument None."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "__eq__", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "spam", "childNum": 0, "tag": "em", "childList": []}, {"text": "None", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["For more information of the customization possibilities have a look at the Python documenation at http://www.python.org/doc/2.3.5/ref/customization.html"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://www.python.org/doc/2.3.5/ref/customization.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.3.5/ref/customization.html"}]}], [{"text": ["Style guide recommends to use is or is not if you are testing for None-ness"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Style guide", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"text": ["On the other hand if you are testing for more than None-ness, you should use the boolean operator."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["For one the first example is shorter and looks nicer.", "As per the other posts what you choose also depends on what you really want to do with the comparison."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The answer is \"it depends\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I use the first example if I consider 0, \"\", [] and False (list not exhaustive) to be equivalent to None in this context."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Personally, I chose a consistent approach across languages: I do if (var) (or equivalent) only if var is declared as boolean (or defined as such, in C we don't have a specific type).", "I even prefix these variables with a b (so it would be bVar actually) to be sure I won't accidentally use another type here.", "I don't really like implicit casting to boolean, even less when there are numerous, complex rules."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "if (var)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "bVar", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}]}, {"text": ["Of course, people will disagree.", "Some go farther, I see if (bVar == true) in the Java code at my work (too redundant for my taste!", "), others love too much compact syntax, going while (line = getNextLine()) (too ambiguous for me)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "if (bVar == true)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "while (line = getNextLine())", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}]]