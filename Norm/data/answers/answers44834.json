[[{"text": ["Linked to, but not explicitly mentioned here, is exactly when __all__ is used.", "It is a list of strings defining what symbols in a module will be exported when from &lt;module&gt; import * is used on the module."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__all__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "from &lt;module&gt; import *", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["For example, the following code in a foo.py explicitly exports the symbols bar and baz:"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "foo.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "bar", "childNum": 0, "tag": "code", "childList": []}, {"text": "baz", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n __all__ = ['bar', 'baz']\n\nwaz = 5\nbar = 10\ndef baz(): return 'baz'\n</code>\n</pre>\n", "senID": 2}, {"text": ["These symbols can then be imported like so:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from foo import *\n\nprint bar\nprint baz\n\n# The following will trigger an exception, as \"waz\" is not exported by the module\nprint waz\n</code>\n</pre>\n", "senID": 4}, {"text": ["If the __all__ above is commented out, this code will then execute to completion, as the default behaviour of import * is to import all symbols that do not begin with an underscore, from the given namespace."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "__all__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "import *", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["it's a list of public objects of that module -- it overrides the default of hiding everything that begins with an underscore"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["From (An Unofficial) Python Reference Wiki:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "(An Unofficial) Python Reference Wiki", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyref.infogami.com/__all__"}]}], [{"text": ["It also changes what pydoc will show:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["module1.py"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a = \"A\"\nb = \"B\"\nc = \"C\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["module2.py"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n __all__ = ['a', 'b']\n\na = \"A\"\nb = \"B\"\nc = \"C\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["$ pydoc module1"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\nHelp on module module1:\n<b>\n NAME\n</b>\nmodule1\n<b>\n FILE\n</b>\nmodule1.py\n<b>\n DATA\n</b>\n<b>\n a\n</b>\n= 'A'\n<b>\n b\n</b>\n= 'B'\n<b>\n c\n</b>\n= 'C'\n</pre>\n", "senID": 6}, {"text": ["$ pydoc module2"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\nHelp on module module2:\n<b>\n NAME\n</b>\nmodule2\n<b>\n FILE\n</b>\nmodule2.py\n<b>\n DATA\n</b>\n<b>\n __all__\n</b>\n= ['a', 'b']\n<b>\n a\n</b>\n= 'A'\n<b>\n b\n</b>\n= 'B'\n</pre>\n", "senID": 8}, {"text": ["I declare __all__ in all my modules, as well as underscore internal details, these really help when using things you've never used before in live interpreter sessions."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "__all__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Python documentation links:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Reference - ", "tag": "none", "senID": 1}, {"text": "Tutorial - ", "tag": "none", "senID": 2}]}]]