[[{"text": ["You don't have to call keys:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if 'key1' in dict:\n  print \"blah\"\nelse:\n  print \"boo\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["That will be much faster as it uses the dictionary's hashing as opposed to doing a linear search, which calling keys would do."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["in is the intended way to test for the existence of a key in a dict."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n d = dict()\n\nfor i in xrange(100):\n    key = i % 10\n    if key in d:\n        d[key] += 1\n    else:\n        d[key] = 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you wanted a default, you can always use dict.get():"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "dict.get()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n d = dict()\n\nfor i in xrange(100):\n    key = i % 10\n    d[key] = d.get(key, 0) + 1\n</code>\n</pre>\n", "senID": 3}, {"text": ["... and if you wanted to always ensure a default value for any key you can use defaultdict from the collections module, like so:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "defaultdict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "collections", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\nd = defaultdict(lambda: 0)\n\nfor i in xrange(100):\n    d[i % 10] += 1\n</code>\n</pre>\n", "senID": 5}, {"text": ["... but in general, the in keyword is the best way to do it."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["There are two different ways to do it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You might also want to check out the Python Quick Reference."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python Quick Reference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rgruet.free.fr/PQR26/PQR2.6.html"}]}, {"text": ["As noted, \"has_key\" is deprecated in Python 3.0+."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I would recommend using the setdefault method instead.", "It sounds like it will do everything you want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "setdefault", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {'foo':'bar'}\n&gt;&gt;&gt; q = d.setdefault('foo','baz') #Do not override the existing key\n&gt;&gt;&gt; print q #The value takes what was originally in the dictionary\nbar\n&gt;&gt;&gt; print d\n{'foo': 'bar'}\n&gt;&gt;&gt; r = d.setdefault('baz',18) #baz was never in the dictionary\n&gt;&gt;&gt; print r #Now r has the value supplied above\n18\n&gt;&gt;&gt; print d #The dictionary's been updated\n{'foo': 'bar', 'baz': 18}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can shorten this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if 'key1' in dict:\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, this is at best a cosmetic improvement.", "Why do you believe this is not the best way?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]