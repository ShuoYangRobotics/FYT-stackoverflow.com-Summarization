[[{"text": ["And in python 2.6:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python 2.6", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/whatsnew/2.6.html"}]}, {"code": "<pre>\n<code>\n import itertools\nitertools.permutations([1,2,3])\n</code>\n</pre>\n", "senID": 1}, {"text": ["(returned as a generator.", "Use list(permutations(l)) to return as a list."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The following code with Python 2.6 and above ONLY"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "The following code with Python 2.6 and above ONLY", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["First, import itertools:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "itertools", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import itertools\n</code>\n</pre>\n", "senID": 2}, {"code": "<pre>\n<code>\n print list(itertools.permutations([1,2,3,4], 2))\n[(1, 2), (1, 3), (1, 4),\n(2, 1), (2, 3), (2, 4),\n(3, 1), (3, 2), (3, 4),\n(4, 1), (4, 2), (4, 3)]\n</code>\n</pre>\n", "senID": 3}, {"code": "<pre>\n<code>\n print list(itertools.combinations('123', 2))\n[('1', '2'), ('1', '3'), ('2', '3')]\n</code>\n</pre>\n", "senID": 4}, {"code": "<pre>\n<code>\n print list(itertools.product([1,2,3], [4,5,6]))\n[(1, 4), (1, 5), (1, 6),\n(2, 4), (2, 5), (2, 6),\n(3, 4), (3, 5), (3, 6)]\n</code>\n</pre>\n", "senID": 5}, {"code": "<pre>\n<code>\n print list(itertools.product([1,2], repeat=3))\n[(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),\n(2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]\n</code>\n</pre>\n", "senID": 6}, {"text": ["You can't iterate on a set so don't forget:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n myset = set((1,2,3))\nprint myset\nset([1, 2, 3])\nmyiterable = tuple(myset)\nprint myiterable\n(1, 2, 3)\n</code>\n</pre>\n", "senID": 8}], [{"text": ["See http://code.activestate.com/recipes/252178/:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.activestate.com/recipes/252178/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/252178/"}]}, {"code": "<pre>\n<code>\n def all_perms(str):\n    if len(str) &lt;=1:\n        yield str\n    else:\n        for perm in all_perms(str[1:]):\n            for i in range(len(perm)+1):\n                #nb str[0:1] works in both string and list contexts\n                yield perm[:i] + str[0:1] + perm[i:]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This solution implements a generator, to avoid holding all the permutations on memory:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def permutations (orig_list):\n    if not isinstance(orig_list, list):\n        orig_list = list(orig_list)\n\n    yield orig_list\n\n    if len(orig_list) == 1:\n        return\n\n    for n in sorted(orig_list):\n        new_list = orig_list[:]\n        pos = new_list.index(n)\n        del(new_list[pos])\n        new_list.insert(0, n)\n        for resto in permutations(new_list[1:]):\n            if new_list[:1] + resto &lt;&gt; orig_list:\n                yield new_list[:1] + resto\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The following code is an in-place permutation of a given list, implemented as a generator.", "Since it only returns references to the list, the list should not be modified outside the generator.", "The solution is non-recursive, so uses low memory.", "Work well also with multiple copies of elements in the input list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def permute_in_place(a):\n    a.sort()\n    yield list(a)\n\n    if len(a) &lt;= 1:\n        return\n\n    first = 0\n    last = len(a)\n    while 1:\n        i = last - 1\n\n        while 1:\n            i = i - 1\n            if a[i] &lt; a[i+1]:\n                j = last - 1\n                while not (a[i] &lt; a[j]):\n                    j = j - 1\n                a[i], a[j] = a[j], a[i] # swap the values\n                r = a[i+1:last]\n                r.reverse()\n                a[i+1:last] = r\n                yield list(a)\n                break\n            if i == first:\n                a.reverse()\n                return\n\nif __name__ == '__main__':\n    for n in range(5):\n        for a in permute_in_place(range(1, n+1)):\n            print a\n        print\n\n    for a in permute_in_place([0, 0, 1, 1, 1]):\n        print a\n    print\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Forgive my python illiteracy as I won't be offering the solution in python.", "As I do not know what method python 2.6 uses to generate the permutations and eliben's one looks like Johnson-Trotter permutation generation, you might look for article\nin Wikipedia on Permutations and their generation that looks quite like unrank function in paper by Myrvold and Ruskey."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Permutations and their generation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Permutation#Algorithms_to_generate_permutations"}, {"href": "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.43.4521", "text": "paper by Myrvold and Ruskey", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["It would seem to me that this could be used in a generator in the same way as in other replies to lessen the memory requirement considerably.", "Just remember that the permutations will not be in lexicographic order."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["A quite obvious way in my opinion might be also:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def permutList(l):\n    if not l:\n            return [[]]\n    res = []\n    for e in l:\n            temp = l[:]\n            temp.remove(e)\n            res.extend([[e] + r for r in permutList(temp)])\n\n    return res\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n list2Perm = [1, 2.0, 'three']\nlistPerm = [[a, b, c]\n            for a in list2Perm\n            for b in list2Perm\n            for c in list2Perm\n            if ( a != b and b != c and a != c )\n            ]\nprint listPerm\n</code>\n</pre>\n", "senID": 0}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [\n    [1, 2.0, 'three'], \n    [1, 'three', 2.0], \n    [2.0, 1, 'three'], \n    [2.0, 'three', 1], \n    ['three', 1, 2.0], \n    ['three', 2.0, 1]\n]\n</code>\n</pre>\n", "senID": 2}]]