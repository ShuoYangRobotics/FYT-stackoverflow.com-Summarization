[[{"text": ["\"Is there a good way to handle this problem?", "\"  No.", "Nothing can be protected against reverse engineering.", "Even the firmware on DVD machines has been reverse engineered and AACS Encryption key exposed.", "And that's in spite of the DMCA making that a criminal offense."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "AACS Encryption key", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/AACS%5Fencryption%5Fkey%5Fcontroversy"}]}, {"text": ["Since no technical method can stop your customers from reading your code, you have to apply ordinary commercial methods."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You must use the right tool to do the right thing, and Python was not designed to be obfuscated.", "It's the contrary; everything is open or easy to reveal or modify in Python because that's the language's philosophy."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want something you can't see through, look for another tool.", "This is not a bad thing, it is important that several different tools exist for different usages."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Even compiled programs can be reverse-engineered so don't think that you can fully protect any code.", "You can analyze obfuscated PHP, break the flash encryption key, etc.", "Newer versions of Windows are cracked every time."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You cannot prevent somebody from misusing your code, but you can easily discover if someone does.", "Therefore, it's just a casual legal issue."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Nowadays, business models tend to go for selling services instead of products.", "You cannot copy a service, pirate nor steal it.", "Maybe it's time to consider to go with the flow..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Python, being a byte-code-compiled interpreted language, is very difficult to lock down.", "Even if you use a exe-packager like py2exe, the layout of the executable is well-known, and the Python byte-codes are well understood."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "py2exe", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://py2exe.org"}]}, {"text": ["Usually in cases like this, you have to make a tradeoff.", "How important is it really to protect the code?", "Are there real secrets in there (such as a key for symmetric encryption of bank transfers), or are you just being paranoid?", "Choose the language that lets you develop the best product quickest, and be realistic about how valuable your novel ideas are."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you decide you really need to enforce the license check securely, write it as a small C extension so that the license check code can be extra-hard (but not impossible!", ") to reverse engineer, and leave the bulk of your code in Python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Is your employer aware that he can \"steal\" back any ideas that other people get from your code?", "I mean, if they can read your work, so can you theirs.", "Maybe looking at how you can benefit from the situation would yield a better return of your investment than fearing how much you could loose."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["[EDIT] Answer to Nick's comment:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Nothing gained and nothing lost.", "The customer has what he wants (and paid for it since he did the change himself).", "Since he doesn't release the change, it's as if it didn't happen for everyone else."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Now if the customer sells the software, they have to change the copyright notice (which is illegal, so you can sue and will win -> simple case)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If they don't change the copyright notice, the 2nd level customers will notice that the software comes from you original and wonder what is going on.", "Chances are that they will contact you and so you will learn about the reselling of your work."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Again we have two cases: The original customer sold only a few copies.", "That means they didn't make much money anyway, so why bother.", "Or they sold in volume.", "That means better chances for you to learn about what they do and do something about it."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["But in the end, most companies try to comply to the law (once their reputation is ruined, it's much harder to do business).", "So they will not steal your work but work with you to improve it.", "So if you include the source (with a license that protects you from simple reselling), chances are that they will simply push back changes they made since that will make sure the change is in the next version and they don't have to maintain it.", "That's win-win: You get changes and they can make the change themselves if they really, desperately need it even if you're unwilling to include it in the official release."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["I understand that you want your customers to use the power of python but do not want expose the source code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here are my suggestions:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["(a) Write the critical pieces of the code as C or C++ libraries and then use SIP or swig to expose the C/C++ APIs to Python namespace."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "SIP", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.riverbankcomputing.co.uk/software/sip/intro"}, {"href": "http://www.swig.org/", "text": "swig", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["(b) Use cython instead of Python"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "cython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cython.org/"}]}, {"text": ["(c) In both (a) and (b), it should be possible to distribute the libraries as licensed binary with a Python interface."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["[A third try at posting]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Though there's no perfect solution, the following can be done:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If the call to the native code were to be removed, the program wouldn't start anyway.", "If it's not removed then the license will be enforced."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Though this is not a cross-platform or a pure-python solution, it will work."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Do not rely on obfuscation.", "As You have correctly concluded, it offers very limited protection. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Instead, as many posters have mentioned make it:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Not worth reverse engineering time (Your software is so good, it makes sense to pay)", "tag": "none", "senID": 2}, {"text": "Make them sign a contract and do a license audit if feasible. ", "tag": "none", "senID": 3}]}, {"text": ["Alternatively, as the kick-ass Python IDE WingIDE does: Give away the code.", "That's right, give the code away and have people come back for upgrades and support."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Give away the code", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["In some circumstances, it may be possible to move (all, or at least a key part) of the software into a web service that your organization hosts."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That way, the license checks can be performed in the safety of your own server room."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Depending in who the client is, a simple protection mechanism, combined with a sensible license agreement will be far more effective than any complex licensing/encryption/obfuscation system."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "far", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["The best solution would be selling the code as a service, say by hosting the service, or offering support - although that isn't always practical."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Shipping the code as .pyc files will prevent your protection being foiled by a few #s, but it's hardly effective anti-piracy protection (as if there is such a technology), and at the end of the day, it shouldn't achieve anything that a decent license agreement with the company will."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": ".pyc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "#", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Concentrate on making your code as nice to use as possible - having happy customers will make your company far more money than preventing some theoretical piracy.."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["What about signing your code with standard encryption schemes by hashing and signing important files and checking it with public key methods?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In this way you can issue license file with a public key for each customer."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Additional you can use an python obfuscator like this one (just googled it)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this one", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.lysator.liu.se/~astrand/projects/pyobfuscate/"}]}], [{"text": ["I have looked at software protection in general for my own projects and the general philosophy is that complete protection is impossible.", "The only thing that you can hope to achieve is to add protection to a level that would cost your customer more to bypass than it would to purchase another license."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["With that said I was just checking google for python obsfucation and not turning up a lot of anything.", "In a .Net solution, obsfucation would be a first approach to your problem on a windows platform, but I am not sure if anyone has solutions on Linux that work with Mono.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The next thing would be to write your code in a compiled language, or if you really want to go all the way, then in assembler.", "A stripped out executable would be a lot harder to decompile than an interpreted language."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It all comes down to tradeoffs.", "On one end you have ease of software development in python, in which it is also very hard to hide secrets.", "On the other end you have software written in assembler which is much harder to write, but is much easier to hide secrets."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Your boss has to choose a point somewhere along that continuum that supports his requirements.", "And then he has to give you the tools and time so you can build what he wants.", "However my bet is that he will object to real development costs versus potential monetary losses."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The best you can do with Python is to obscure things."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Strip out all docstrings", "tag": "none", "senID": 1}, {"text": "Distribute only the .pyc compiled files.", "tag": "none", "senID": 2}, {"text": "freeze it", "tag": "none", "senID": 3}, {"text": "Obscure your constants inside a class/module so that help(config) doesn't show everything", "tag": "none", "senID": 4}]}, {"text": ["You may be able to add some additional obscurity by encrypting part of it and decrypting it on the fly and passing it to eval().", "But no matter what you do someone can break it."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["None of this will stop a determined attacker from disassembling the bytecode or digging through your api with help, dir, etc."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["The reliable only way to protect code is to run it on a server you control and provide your clients with a client which interfaces with that server."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Another attempt to make your code harder to steal is to use jython and then use java obfuscator. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "java obfuscator", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://proguard.sourceforge.net/"}]}, {"text": ["This should work pretty well as jythonc translate python code to java and then java is compiled to bytecode.", "So ounce you obfuscate the classes it will be really hard to understand what is going on after decompilation, not to mention recovering the actual code. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The only problem with jython is that you can't use python modules written in c."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["For the first time restricted license there is not much hope, except put significant part of the program to be served from web, since all the code can be cracked."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However for preventing that competitors will use the source code as their own or write their inspired version of the same code, the best way to protect is to add signatures to your program logic and obfuscate the python source code so, it's hard to read and utilize. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Good obfuscation adds basically the same protection to your code, that compiling it to executable (and stripping binary) does.", "Figuring out how obfuscated complex code works is probably harder than actually writing your own implementation. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This will not help preventing hacking of your program.", "Even with obfuscation code license stuff will be cracked and program may be modified to have slightly different behaviour (in the same way that compiling code to binary does not help protection of native programs). "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In addition to symbol obfuscation would be good to unrefactor the code, which makes everything even more confusing if e.g.", "call graphs points to many different places even if actually those different places does eventually the same thing. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Logical signature inside obfuscated code (e.g.", "you may create table of values which are used by program logic, but also used as signature), which can be used to determine that code is originated from you.", "If someone decides to use your obfuscated code module as part of their own product (even after reobfuscating it to make it seem different) you can show, that code is stolen with your secret signature."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You should take a look at how the guys at getdropbox.com do it for their client software, including Linux.", "It's quite tricky to crack and requires some quite creative disassembly to get past the protection mechanisms."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I'm playing around with sketchup and the ruby api and ran accross this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://groups.google.com/group/SketchUp-Plugins-Dev/web/Ruby-Sketchup.html#load"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://groups.google.com/group/SketchUp-Plugins-Dev/web/Ruby-Sketchup.html#load", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groups.google.com/group/SketchUp-Plugins-Dev/web/Ruby-Sketchup.html#load"}]}, {"text": ["It mentions the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n The load method is used to include encrypted and nonencrypted ruby files.\n</code>\n</pre>\n", "senID": 3}, {"text": ["After a brief search it seems that this \"encrypted ruby file\" format (.rbs) is sketchup specific. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I don't know the details but it would seem that this is an attempt to do something similar to what Jordfr\u00e4s is asking. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Any thoughts?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Shipping .pyc files has its problems - they are not compatible with any other python version than the python version they were created with, which means you must know which python version is running on the systems the product will run on.", "That's a very limiting factor."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Idea:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Idea:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Use Cython to compile python to C code, then distribute your app as python binary libraries (pyd) instead."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Cython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cython.org/"}]}, {"text": ["That way, no Python (byte) code is left and you've done any reasonable amount of obscurification anyone (i.e.", "your employer) could expect from regular Code, I think.", "(.NET or Java isn't much safer in this case."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Cython is getting more and more compatible with CPython, so I think it should work.", "(I'm actually considering this for our product.. We're already building some thirdparty libs as pyd/dlls, so shipping our own python code as binaries is not a overly big step for us."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Crazy idea:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Crazy idea:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["You could probably get Cython to store the C-files separately for each module, then just concatenate them all and build them with heavy inlining.", "That way, your Python module is pretty monolithic and difficult to chip at with common tools."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Beyond crazy:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Beyond crazy:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["You might be able to build a single executable if you can link to the python runtime and all dlls statically.", "That way, it'd sure be difficult to intercept calls to/from python and whatever framework libraries you use.", "This cannot be done if you're using LGPL code though."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I wonder..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python can run out of a zip file, I wonder if you could create a module (or maybe even modify the core itself) to make the interpreter able to run (directly) out of something like a password encrypted rar file.", "Then you would need the password to get into the rar file.", "Just a thought."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]