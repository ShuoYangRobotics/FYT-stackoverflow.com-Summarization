[[{"text": ["In his book C Interfaces and Implementations: Techniques for Creating Reusable Software,  D. R. Hanson provides a nice implementation of exceptions in pure C using a set of macros and setjmp/longjmp.", "He provides TRY/RAISE/EXCEPT/FINALLY macros that can emulate pretty much everything C++ exceptions do and more. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "C Interfaces and Implementations: Techniques for Creating Reusable Software", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "setjmp/longjmp", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["The code can be perused here (look at except.h/except.c)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/cii/"}]}, {"text": ["P.S.", "re your question about Google.", "Their employees are actually allowed to use exceptions in new code, and the official reason for the ban in old code is because it was already written that way and it doesn't make sense to mix styles."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Personally, I also think that C++ without exceptions isn't the best idea."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Exceptions are just a specific example of a more general case of advanced non-local flow control constructs.", "Other examples are:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": ["notifications"], "childNum": 0, "tag": "em", "senID": 1, "childList": []}, {"text": ["continuations"], "childNum": 0, "tag": "em", "senID": 2, "childList": []}, {"text": ["coroutines"], "childNum": 0, "tag": "em", "senID": 3, "childList": []}, {"text": ["generators"], "childNum": 0, "tag": "em", "senID": 4, "childList": []}, {"text": ["fibers"], "childNum": 0, "tag": "em", "senID": 5, "childList": []}, {"text": ["GOTO"], "childNum": 0, "tag": "code", "senID": 6, "childList": []}]}, {"text": ["(I'm sure there's many others I missed."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["An interesting property of these constructs is that they are all roughly equivalent in expressive power: if you have one, you can pretty easily build all the others."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "one", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["So, how you best implement exceptions depends on what other constructs you have available: "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "Every CPU has ", "tag": "none", "senID": 10}, {"text": "C has ", "tag": "none", "senID": 11}, {"text": "The JVM and CLI have exceptions of their own, which means that if the exception semantics of your language match Java's/C#'s, you are home free (but if not, then you are screwed). ", "tag": "none", "senID": 12}, {"text": "The Parrot VM as both exceptions and continuations. ", "tag": "none", "senID": 13}, {"text": "Windows has its own framework for exception handling, which language implementors can use to build their own exceptions on top.", "tag": "none", "senID": 14}]}, {"text": ["A very interesting use case, both of the usage of exceptions and the implementation of exceptions is Microsoft Live Lab's Volta Project.", "(Now defunct.", ") The goal of Volta was to provide architectural refactoring for Web applications at the push of a button.", "So, you could turn your one-tier web application into a two- or three-tier application just by putting some [Browser] or [DB] attributes on your .NET code and the code would then automagically run on the client or in the DB.", "In order to do that, the .NET code had to be translated to JavaScript source code, obviously."], "childNum": 5, "tag": "p", "senID": 15, "childList": [{"text": "usage", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "and", "childNum": 0, "tag": "em", "pos": 3, "childList": []}, {"text": "implementation", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "[Browser]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[DB]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Now, you could just write an entire VM in JavaScript and run the bytecode unmodified.", "(Basically, port the CLR from C++ to JavaScript.", ") There are actually projects that do this (e.g.", "the HotRuby VM), but this is both inefficient and not very interoperable with other JavaScript code."], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "could", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["So, instead, they wrote a compiler which compiles CIL bytecode to JavaScript sourcecode.", "However, JavaScript lacks certain features that .NET has (generators, threads, also the two exception models aren't 100% compatible), and more importantly it lacks certain features that compiler writers love (either GOTO or continuations) and that could be used to implement the above-mentioned missing features."], "childNum": 2, "tag": "p", "senID": 17, "childList": [{"text": "love", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "GOTO", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["However, JavaScript does have exceptions.", "So, they used JavaScript Exceptions to implement Volta Continuations and then they used Volta Continuations to implement .NET Exceptions, .NET Generators and even .NET Managed Threads(!!!"], "childNum": 7, "tag": "p", "senID": 18, "childList": [{"text": "does", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "JavaScript Exceptions", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "Volta Continuations", "childNum": 0, "tag": "em", "childList": []}, {"text": "Volta Continuations", "childNum": 0, "tag": "em", "childList": []}, {"text": ".NET Exceptions", "childNum": 0, "tag": "em", "childList": []}, {"text": ".NET Generators", "childNum": 0, "tag": "em", "childList": []}, {"text": ".NET Managed Threads", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["So, to answer your original question:"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"text": ["With Exceptions, ironically!", "At least in this very specific case, anyway."], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"text": ["Another great example is some of the exception proposals on the Go mailing list, which implement exceptions using Goroutines (something like a mixture of concurrent coroutines ans CSP processes).", "Yet another example is Haskell, which uses Monads, lazy evaluation, tail call optimization and higher-order functions to implement exceptions.", "Some modern CPUs also support basic building blocks for exceptions (for example the Vega-3 CPUs that were specifically designed for the Azul Systems Java Compute Accelerators)."], "childNum": 0, "tag": "p", "senID": 21, "childList": []}], [{"text": ["Here is a common way C++ exceptions are implemented:\nhttp://www.codesourcery.com/public/cxx-abi/abi-eh.html"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://www.codesourcery.com/public/cxx-abi/abi-eh.html", "text": "http://www.codesourcery.com/public/cxx-abi/abi-eh.html", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["It is for the Itanium architecture, but the implementation described here is used in other architectures as well.", "Note that it is a long document, since C++ exceptions are complicated."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here is a good description on how LLVM implements exceptions:\nhttp://llvm.org/docs/ExceptionHandling.html"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://llvm.org/docs/ExceptionHandling.html", "text": "http://llvm.org/docs/ExceptionHandling.html", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Since LLVM is meant to be a common intermediate representation for many runtimes, the mechanisms described can be applied to many languages."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["C/C++ compilers use the underlying OS facilities for exception handling.", "Frameworks like .Net or Java also rely, in the VM, on the OS facilities.", "In Windows for instance, the real heavy lifting is done by SEH, the Structured Exception Handling infrastructure.", "You should absolutely read the old reference article: A Crash Course on the Depths of Win32\u2122 Structured Exception Handling."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "A Crash Course on the Depths of Win32\u2122 Structured Exception Handling", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.microsoft.com/msj/0197/Exception/Exception.aspx"}]}, {"text": ["As for the cost of not using exceptions, they are expensive but compared to what?", "Compared to return error codes?", "After you factor in the cost of correctness and the quality of code, exceptions will always win for commercial applications.", "Short of few very critical OS level functions, exceptions are always better overall. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["An last but not least there is the anti-pattern of using exceptions for flow control.", "Exceptions should be exceptional and code that abuses exceptions fro flow control will pay the price in performance."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["setjmp() and longjmp() usually."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "setjmp()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "longjmp()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Exception catching does have a non-trivial cost, but for most purposes it's not a bit deal."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["C++ code at Google (save for some Windows-specific cases) don't use exceptions: cfr the guidelines, short form: \"We do not use C++ exceptions\".", "Quoting from the discussion (hit the arrow to expand on the URL):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the guidelines", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Exceptions"}]}, {"text": ["This rule does not apply to Google code in other languages, such as Java and Python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The key thing an exception implementation needs to handle is how to return to the exception handler once an exception has been thrown.", "Since you may have made an arbitrary number of nested function calls since the try statement in C++, it must unwind the call stack searching for the handler.", "However implemented, this must incur the code size cost of maintaining sufficient information in order to perform this operation (and generally means a table of data for calls that can take exceptions).", "It also means that the dynamic code execution path will be longer than simply returning from functions calls (which is a fairly inexpensive operation on most platforms).", "There may be other costs as well depending on the implementation."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "unwind the call stack", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "code size cost", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}, {"text": "execution path will be longer", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}]}, {"text": ["The relative cost will vary depending on the language used.", "The higher-level language used, the less likely the code size cost will matter, and the information may be retained regardless of whether exceptions are used."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["An application where the use of exceptions (and C++ in general) is often avoided for good reasons is embedded firmware.", "In typical small bare metal or RTOS platforms, you might have 1MB of code space, or 64K, or even smaller.", "Some platforms are so small, even C is not practical to use.", "In this kind of environment, the size impact is relevant because of the cost mentioned above.", "It also impacts the standard library itself.", "Embedded toolchain vendors will often produce a library without exception capability, which has a huge impact on code size.", "Highly optimizing compilers may also analyze the callgraph and optimize away needed call frame information for the unwind operation for considerable space reduction.", "Exceptions also make it more difficult to analyze hard real-time requirements."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In more typical environments, the code size cost is almost certainly irrelevant and the performance factor is likely key.", "Whether you use them will depend on your performance requirements and how you want to use them.", "Using exceptions in non-exceptional cases can make an elegant design, but at a performance cost that may be unacceptable for high performance systems.", "Implementations and relative cost will vary by platform and compiler, so the best way to truly understand if exceptions are a problem is to analyze your own code's performance."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Regarding performance - sparse use of exceptions will probably have negligible effects, but do not abuse them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I have personally seen Java code which performed two orders of magnitude worse than it could have (took about x100 the time) because exceptions were used in an important loop instead of more standard if/returns."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Some runtimes like the Objective-C runtime have zero-cost 64-bit exceptions.", "What that means is that it doesn't cost anything to enter a try block.", "However, this is quite costly when the exception is thrown.", "This follows the paradigm of \"optimize for the average case\" - exceptions are meant to be exceptional, so it is better to make the case when there are no exceptions really fast, even if it comes at the cost of significantly slower exceptions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the Objective-C runtime", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/Exceptions/Articles/Exceptions64Bit.html"}]}], [{"text": ["The best paper ever written on the implementation of exceptions (under the hood) is Exception Handling in CLU by Barbara Liskov and Alan Snyder.", "I have referred to it every time I've started a new compiler."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "implementation", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "Exception Handling in CLU", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.computer.org/portal/web/csdl/doi/10.1109/TSE.1979.230191"}]}, {"text": ["For a somewhat higher-level view of an implementation in C using setjmp and longjmp, I recommend Dave Hanson's C Interfaces and Implementations (like Eli Bendersky)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "setjmp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "longjmp", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://www.cs.princeton.edu/software/cii/", "text": "C Interfaces and Implementations", "childNum": 0, "tag": "a", "childList": []}]}]]