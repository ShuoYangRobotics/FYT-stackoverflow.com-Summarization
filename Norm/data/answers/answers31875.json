[[{"text": ["I don't really see the need, as a module with functions (and not a class) would serve well as a singleton.", "All its variables would be bound to the module, which could not be instantiated repeatedly anyways. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you do wish to use a class, there is no way of creating private classes or private constructors in python, so you can't protect against multiple instantiations, other than just via convention in use of your API.", "I would still just put methods in a module, and consider the module as the singleton."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["A slightly different approach to implement the singleton in python is the borg pattern by Alex Martelli (google employee and python genius)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "borg pattern", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/66531/"}]}, {"code": "<pre>\n<code>\n class Borg:\n    __shared_state = {}\n    def __init__(self):\n        self.__dict__ = self.__shared_state\n</code>\n</pre>\n", "senID": 1}, {"text": ["So instead of forcing all instances to have the same identity they share state."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["override new method"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "new", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Singleton(object):\n    _instance = None\n    def __new__(cls, *args, **kwargs):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(\n                                cls, *args, **kwargs)\n        return cls._instance\n\n\nif __name__ == '__main__':\n    s1=Singleton()\n    s2=Singleton()\n    if(id(s1)==id(s2)):\n        print \"Same\"\n    else:\n        print \"Different\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The module approach works well.", "If I absolutely need a singleton I prefer the Metaclass approach."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Singleton(type):\n    def __init__(cls, name, bases, dict):\n        super(Singleton, cls).__init__(name, bases, dict)\n        cls.instance = None \n\n    def __call__(cls,*args,**kw):\n        if cls.instance is None:\n            cls.instance = super(Singleton, cls).__call__(*args, **kw)\n        return cls.instance\n\nclass MyClass(object):\n    __metaclass__ = Singleton\n</code>\n</pre>\n", "senID": 1}], [{"text": ["@Serge: I like this quote from Norvig."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Norvig", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://norvig.com/python-iaq.html"}]}, {"text": ["@Staale, @John: I currently use the module approach, but was wondering whether I was missing a more widely accepted approach."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The one time I wrote a singleton in Python I used a class where all the member functions had the classmethod decorator."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class foo:\n  x = 1\n\n  @classmethod\n  def increment(cls, y = 1):\n    cls.x += y\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Being relatively new to python I'm not sure what the most common idiom is, but the simplest thing I can think of is just using a module instead of a class.", "What would have been instance methods on your class become just functions in the module and any data just becomes variables in the module instead of members of the class.", "I suspect this is the pythonic approach to solving the type of problem that people use singletons for."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you really want a singleton class, there's a reasonable implementation described on the first hit on google for \"python singleton\", specifically:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "first hit on google", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/workshops/1997-10/proceedings/savikko.html"}]}, {"code": "<pre>\n<code>\n class Singleton:\n    __single = None\n    def __init__( self ):\n        if Singleton.__single:\n            raise Singleton.__single\n        Singleton.__single = self\n</code>\n</pre>\n", "senID": 2}, {"text": ["That seems to do the trick."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Here is an example from Peter Norvig's Python IAQ How do I do the Singleton Pattern in Python?", "(You should use search feature of your browser to find this question, there is no direct link, sorry)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "How do I do the Singleton Pattern in Python?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://norvig.com/python-iaq.html"}]}, {"text": ["Also Bruce Eckel has another example in his book Thinking in Python (again there is no direct link to the code)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Thinking in Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.mindview.net/Books/TIPython"}]}], [{"text": ["There are also some interesting articles on the Google Testing blog, discussing why singleton are/may be bad and are an anti-pattern:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Singletons are Pathological Liars\nWhere Have All the Singletons Gone?", "Root Cause of Singletons"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Singletons are Pathological Liars", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://googletesting.blogspot.com/2008/08/by-miko-hevery-so-you-join-new-project.html"}, {"text": "Where Have All the Singletons Gone?", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://googletesting.blogspot.com/2008/08/where-have-all-singletons-gone.html"}, {"text": "Root Cause of Singletons", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html"}]}], [{"text": ["I'm very unsure about this, but my project uses 'convention singletons' (not enforced singletons9, that is, if I have a class called DataController, I define this in the same module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n _data_controller = None\ndef GetDataController():\n    global _data_controller\n    if _data_controller is None:\n        _data_controller = DataController()\n    return _data_controller\n</code>\n</pre>\n", "senID": 1}, {"text": ["It is not elegant, since it's a full six lines.", "But all my singletons use this pattern, and it's at least very explicit (which is pythonic)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Some people call singletons evil.", "I've certainly been bitten by unit-testing problems with them."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "evil", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blogs.msdn.com/scottdensmore/archive/2004/05/25/140827.aspx"}]}], [{"code": "<pre>\n<code>\n class Singleton(object[,...]):\n\n    staticVar1 = None\n    staticVar2 = None\n\n    def __init__(self):\n        if self.__class__.staticVar1==None :\n            # create class instance variable for instantiation of class\n            # assign class instance variable values to class static variables\n        else:\n            # assign class static variable values to class instance variables\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I think that forcing a class or an instance to be a Singleton is overkill.", "Personally, I like to define a normal instantiatable class, a semi-private reference, and a simple factory function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "forcing", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class NothingSpecial:\n    pass\n\n_the_one_and_only = None\n\ndef TheOneAndOnly():\n    global _the_one_and_only\n    if not _the_one_and_only:\n        _the_one_and_only = NothingSpecial()\n    return _the_one_and_only\n</code>\n</pre>\n", "senID": 1}, {"text": ["or if there is no issue with instantiating when the module is first imported:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class NothingSpecial:\n    pass\n\nTHE_ONE_AND_ONLY = NothingSpecial()\n</code>\n</pre>\n", "senID": 3}, {"text": ["That way you can write tests against fresh instances without side effects, no need for sprinkling the module with global statement and if needed you can derive variants in the future."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]