[[{"text": ["Pythoscope does this to the test cases it automatically generates as does the 2to3 tool for python 2.6 (it converts python 2.x source into python 3.x source). "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Pythoscope", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pythoscope.org/"}, {"href": "http://docs.python.org/library/2to3.html", "text": "2to3", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Both these tools uses the lib2to3 library which is a implementation of the python parser/compiler machinery that can preserve comments in source when it's round tripped from source -> AST -> source."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "lib2to3", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/projects/python/trunk/Lib/lib2to3/"}]}, {"text": ["The rope project may meet your needs if you want to do more refactoring like transforms."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "rope project", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rope.sourceforge.net/"}]}, {"text": ["The ast module is your other option, and there's an older example of how to \"unparse\" syntax trees back into code (using the parser module).", "But the ast module is more useful when doing an AST transform on code that is then transformed into a code object."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "ast", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/ast.html"}, {"text": "there's an older example of how to \"unparse\" syntax trees back into code", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://svn.python.org/view/python/trunk/Demo/parser/unparse.py?view=markup"}]}], [{"text": ["The builtin ast module doesn't seem to have a method to convert back to source.", "However, the codegen module here provides a pretty printer for the ast that would enable you do do so.", "eg."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "codegen", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://dev.pocoo.org/hg/sandbox/file/b2aea937f5bb/ast/codegen.py"}]}, {"code": "<pre>\n<code>\n import ast\nimport codegen\n\nexpr=\"\"\"\ndef foo():\n   print(\"hello world\")\n\"\"\"\np=ast.parse(expr)\n\np.body[0].body = [ ast.parse(\"return 42\").body[0] ] # Replace function body with \"return 42\"\n\nprint(codegen.to_source(p))\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will print:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def foo():\n    return 42\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note that you may lose the exact formatting and comments, as these are not preserved."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["However, you may not need to.", "If all you require is to execute the replaced AST, you can do so simply by calling compile() on the ast, and execing the resulting code object."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You might not need to re-generate source code.", "That's a bit dangerous for me to say, of course, since you have not actually explained why you think you need to generate a .py file full of code; but:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["If you want to generate a .py file that people will actually use, maybe so that they can fill out a form and get a useful .py file to insert into their project, then you don't want to change it into an AST and back because you'll lose all formatting (think of the blank lines that make Python so readable by grouping related sets of lines together) (ast nodes havelinenoandcol_offsetattributes) comments.", "Instead, you'll probably want to use a templating engine (the Django template language, for example, is designed to make templating even text files easy) to customize the .py file, or else use Rick Copeland's MetaPython extension."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "all formatting (think of the blank lines that make Python so readable by grouping related sets of lines together)", "childNum": 0, "tag": "strike", "pos": 0, "childList": []}, {"text": "ast nodes havelinenoandcol_offsetattributes", "tag": "a", "pos": -1, "childList": [{"text": "lineno", "tag": "code"}, {"text": "col_offset", "tag": "code"}], "childNum": 2, "href": "http://docs.python.org/py3k/library/ast.html#ast.AST.lineno"}, {"text": "lineno", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "col_offset", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Django template language", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/templates/#topics-templates"}, {"href": "http://code.google.com/p/metapython/", "text": "MetaPython", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["If you are trying to make a change during compilation of a module, note that you don't have to go all the way back to text; you can just compile the AST directly instead of turning it back into a .py file."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["But in almost any and every case, you are probably trying to do something dynamic that a language like Python actually makes very easy, without writing new .py files!", "If you expand your question to let us know what you actually want to accomplish, new .py files will probably not be involved in the answer at all; I have seen hundreds of Python projects doing hundreds of real-world things, and not a single one of them needed to ever writer a .py file.", "So, I must admit, I'm a bit of a skeptic that you've found the first good use-case.", ":-)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]}, {"text": ["Update: now that you've explained what you're trying to do, I'd be tempted to just operate on the AST anyway.", "You will want to mutate by removing, not lines of a file (which could result in half-statements that simply die with a SyntaxError), but whole statements \u2014 and what better place to do that than in the AST?"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["A Program Transformation System is a tool that parses source text, builds ASTs, allows you to modify them using source-to-source transformations (\"if you see this pattern, replace it by that pattern\").", "It is ideal for doing mutation of exisiting source codes, which are just \"if you see this pattern,replace by a variant\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Of course, you need a program transformation engine that can parse the language of interest to you, and still do the pattern-directed transformations.", "The DMS Software Reengineering Toolkit is a system that can do that, and handles Python, C, Java, C++, COBOL, Ada, PHP, C# and a variety of other languages.", "DMS has been used for an amazing variety of software engineering tasks which you can see at the parent website."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "DMS Software Reengineering Toolkit", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.semanticdesigns.com/Products/DMS/DMSToolkit.html"}]}]]