[[{"text": ["The name scrambling is used to ensure that subclasses don't accidentally override the private methods and attributes of their superclasses.", "It's not designed to prevent deliberate access from outside."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Foo(object):\n...     def __init__(self):\n...         self.__baz = 42\n...     def foo(self):\n...         print self.__baz\n...     \n&gt;&gt;&gt; class Bar(Foo):\n...     def __init__(self):\n...         super(Bar, self).__init__()\n...         self.__baz = 21\n...     def bar(self):\n...         print self.__baz\n...\n&gt;&gt;&gt; x = Bar()\n&gt;&gt;&gt; x.foo()\n42\n&gt;&gt;&gt; x.bar()\n21\n&gt;&gt;&gt; print x.__dict__\n{'_Bar__baz': 21, '_Foo__baz': 42}\n</code>\n</pre>\n", "senID": 2}, {"text": ["Of course, it breaks down if two different classes have the same name."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["From http://www.faqs.org/docs/diveintopython/fileinfo_private.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.faqs.org/docs/diveintopython/fileinfo_private.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.faqs.org/docs/diveintopython/fileinfo_private.html"}]}], [{"text": ["The phrase commonly used is \"we're all consenting adults here\".", "By prepending a single underscore (don't expose) or double underscore (hide), you're telling the user of your class that you intend the member to be 'private' in some way.", "However, you're trusting everyone else to behave responsibly and respect that, unless they have a compelling reason not to (e.g.", "debuggers, code completion)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you truly must have something that is private, then you can implement it in an extension (e.g.", "in C for CPython).", "In most cases, however, you simply learn the Pythonic way of doing things."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n import re\nimport inspect\n\nclass MyClass :\n\n    def __init__(self) :\n        pass\n\n    def private_function ( self ) :\n        try :\n            function_call = inspect.stack()[1][4][0].strip()\n\n            # See if the function_call has \"self.\" in the begining\n            matched = re.match( '^self\\.', function_call )\n            if not matched :\n                print 'This is Private Function, Go Away'\n                return\n        except :\n            print 'This is Private Function, Go Away'\n            return\n\n        # This is the real Function, only accessible inside class #\n        print 'Hey, Welcome in to function'\n\n    def public_function ( self ) :\n        # i can call private function from inside the class\n        self.private_function()\n\n### End ###\n</code>\n</pre>\n", "senID": 0}], [{"text": ["It's not like you absolutly can't get around privateness of members in any language (pointer arithmetics in C++, Reflections in .NET/Java)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The point is that you get an error if you try to call the private method by accident.", "But if you want to shoot yourself in the foot, go ahead and do it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit: You don't try to secure your stuff by OO-encapsulation, do you?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["When I first came form Java to Python i literately HATED this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Today it might just be the one thing I LOVE most about Python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I love being on a platform, where people trust each other, and I don't feel like anybody are forcing me away from anything in my code.", "In strongly encapsulated languages, if APIs have bugs, a workaround might just be a method call away, but if that method is private, then badluck.", "In Python they just say, sure, if you've read my code, and think it works, then good luck.", ":)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Similar behavior exists when module attribute names begin with a single underscore (e.g.", "_foo)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Module attributes named as such will not be copied into an importing module when using the from* method, e.g."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "from*", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from bar import *\n</code>\n</pre>\n", "senID": 2}, {"text": ["However, this is a convention and not a language constraint.", "These are not private attributes; they can be referenced and manipulated by any importer.", "Some argue that because of this, Python can not implement true encapsulation."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The class.__stuff naming convention lets the programmer know he isn't meant to access __stuff from outside.", "The name mangling makes it unlikely anyone will do it by accident."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "class.__stuff", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__stuff", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["True, you still can work around this, it's even easier than in other languages (which BTW also let you do this), but no Python programmer would do this if he cares about encapsulation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Its just one of those language design choices.", "On some level they are justified.", "They make it so you need to go pretty far out of your way to try and call the method, and if you really need it that badly, you must have a pretty good reason!", "Debugging hooks and testing come to mind as possible applications, used responsibly of course."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]