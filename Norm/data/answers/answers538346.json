[[{"text": ["As Johannes pointed out, "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for c in \"string\":\n    #do something with c\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can iterate pretty much anything in python using the for loop construct, "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "for loop", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["for example, open(\"file.txt\") returns a file object (and opens the file), iterating over it iterates over lines in that file"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "open(\"file.txt\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for line in open(filename):\n    # do something with line\n</code>\n</pre>\n", "senID": 4}, {"text": ["If that seems like magic, well it kinda is, but the idea behind it is really simple.  "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["There's a simple iterator protocol that can be applied to any kind of object to make the for loop work on it."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Simply implement an iterator that defines a next() method, and implement an __iter__ method on a class to make it iterable.", "(the __iter__ of course, should return an iterator object, that is, an object that defines next())"], "childNum": 4, "tag": "p", "senID": 7, "childList": [{"text": "next()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__iter__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__iter__", "childNum": 0, "tag": "code", "childList": []}, {"text": "next()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["See official documentation"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "See official documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#iterator-types"}]}], [{"text": ["even easier:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for c in \"test\":\n    print c\n</code>\n</pre>\n", "senID": 1}, {"text": [":-)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Just to make a more comprehensive answer, the C way of iterating over a string can apply in Python, if you really wanna force a square peg into a round hole."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n i = 0\nwhile i &lt; len(str):\n    print str[i]\n    i += 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["But then again, why do that when strings are inherently iterable?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for i in str:\n    print i\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you need access to the index as you iterate through the string, use enumerate():"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "enumerate()", "tag": "a", "pos": 0, "childList": [{"text": "enumerate()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#enumerate"}, {"text": "enumerate()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i, c in enumerate('test'):\n...     print i, c\n... \n0 t\n1 e\n2 s\n3 t\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Strings are just \"sequences\" in python and, as such, can be iterated in loops, as Johannes pointed out."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]