[[{"text": ["Putting *args and/or **kwargs as the last items in your function definition\u2019s argument list allows that function to accept an arbitrary number of anonymous and/or keyword arguments."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "*args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "**kwargs", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For example, if you wanted to write a function that returned the sum of all its arguments, no matter how many you supply, you could write it like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def sum(*args):\n    return sum(args)\n</code>\n</pre>\n", "senID": 2}, {"text": ["It\u2019s probably more commonly used in object-oriented programming, when you\u2019re overriding a function, and want to call the original function with whatever arguments the user passes in."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You don\u2019t actually have to call them args and kwargs, that\u2019s just a convention.", "It\u2019s the * and ** that do the magic."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "kwargs", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "*", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "**", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Also, we use them for managing inheritance."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Super( object ):\n   def __init__( self, this, that ):\n       self.this = this\n       self.that = that\n\nclass Sub( Super ):\n   def __init__( self, myStuff, *args, **kw ):\n       super( Sub, self ).__init__( *args, **kw )\n       self.myStuff= myStuff\n\nx= Super( 2.7, 3.1 )\ny= Sub( \"green\", 7, 6 )\n</code>\n</pre>\n", "senID": 1}, {"text": ["This way Sub doesn't really know (or care) what the superclass initialization is.", "Should you realize that you need to change the superclass, you can fix things without having to sweat the details in each subclass."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Notice the cool thing in S.Lott's comment - you can also call functions with *mylist and **mydict to unpack positional and keyword arguments:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "S.Lott's comment", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/287085/what-does-args-and-kwargs-mean#287293"}, {"text": "*mylist", "childNum": 0, "tag": "code", "childList": []}, {"text": "**mydict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def foo(a, b, c, d):\n  print a, b, c, d\n\nl = [0, 1]\nd = {\"d\":3, \"c\":2}\n\nfoo(*l, **d)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Will print: 0 1 2 3"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "0 1 2 3", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Another good use for *args and **kwargs: you can define generic \"catch all\" functions, which is great for decorators where you return such a wrapper instead of the original function."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "*args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "**kwargs", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["An example with a trivial caching decorator:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import pickle, functools\ndef cache(f):\n  _cache = {}\n  def wrapper(*args, **kwargs):\n    key = pickle.dumps((args, kwargs))\n    if key not in _cache:\n      _cache[key] = f(*args, **kwargs) # call the wrapped function, save in cache\n    return _cache[key] # read value from cache\n  functools.update_wrapper(wrapper, f) # update wrapper's metadata\n  return wrapper\n\nimport time\n@cache\ndef foo(n):\n  time.sleep(2)\n  return n*2\n\nfoo(10) # first call with parameter 10, sleeps\nfoo(10) # returns immediately\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You should find everything you want to know in this article."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this article.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.devshed.com/c/a/Python/Python-Parameters-Functions-and-Arguments/"}]}]]