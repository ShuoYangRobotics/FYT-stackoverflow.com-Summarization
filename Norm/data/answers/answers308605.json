[[{"tag": "ul", "num": 3, "lis": [{"text": "Explicit", "tag": "none", "senID": 0}, {"text": "Portable to other frameworks", "tag": "none", "senID": 1}, {"text": "Doesn't require patching Django", "tag": "none", "senID": 2}]}], [{"text": ["For anyone else looking for a very decent, pluggable API application for Django, make sure you checkout jespern's django-piston which is used internally at BitBucket."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-piston", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bitbucket.org/jespern/django-piston"}]}, {"text": ["It's well maintained, has a great following and some cool forks which do things like add support for pagination and other authentication methods (OAuth is supported out of the box)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Please note that REST does not just mean JSON results.", "REST essentially means exposing a resource-oriented API over native but full-fledged HTTP.", "I am not an expert on REST, but here are a few of the things Rails is doing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "URLs should be good, simple names for resources", "tag": "none", "senID": 1}, {"text": "Use the right HTTP methods\n", "tag": "none", "senID": 2}, {"text": "Support content-type negotiation via Accept request-header\n", "tag": "none", "senID": 3}]}, {"text": ["For example, to get the native HTTP support going, the server should respond to"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n GET /account/profile HTTP/1.1\nHost: example.com\nAccept: application/json\n</code>\n</pre>\n", "senID": 5}, {"text": ["as it would respond to"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n GET /account/profile.json HTTP/1.1\nHost: example.com\n</code>\n</pre>\n", "senID": 7}, {"text": ["And it should respond to"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n PUT /account/profile HTTP/1.1\nHost: example.com\n\nvar=value\n</code>\n</pre>\n", "senID": 9}, {"text": ["as it would respond to"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n POST /account/profile HTTP/1.1\nHost: example.com\n\n_method=PUT&amp;var=value\n</code>\n</pre>\n", "senID": 11}], [{"text": ["Scrap the Django REST api and come up with your own open source project that others can contribute to.", "I would be willing to contribute.", "I have some code that is based on the forms api to do REST."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I would go with that .. \nAli A summed it pretty well."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["The main point for me is beign explicit.", "I would avoid using a function that automatically converts an object into json, what if the object has a reference to a user and somehow the password (even if it's hashed) go into the json snippit? "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You could take look at django-dynamicresponse, which is a lightweight framework for adding REST API with JSON to your Django applications."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-dynamicresponse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/funkbit/django-dynamicresponse"}]}, {"text": ["It requires minimal changes to add API support to existing Django apps, and makes it straight-forward to build-in API from the start in new projects."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Basically, it includes middleware support for parsing JSON into request.POST, in addition to serializing the returned context to JSON or rendering a template/redirecting conditionally based on the request type."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["My answer to the same question here: Framework for Implementing REST web service in Django"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Framework for Implementing REST web service in Django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2488325/framework-for-implementing-rest-web-service-in-django/6535255#6535255"}]}, {"text": ["The short version is, have a look at https://github.com/jgorset/respite/ a REST framework in its early days, but we use it every day on client projects."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "https://github.com/jgorset/respite/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/jgorset/respite/"}]}], [{"text": ["I ended up going with my own REST API framework for Django (that I'd love to get rid of if I can find a workable alternative), with a few custom views thrown in for corner cases I didn't want to deal with.", "It's worked out ok. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So a combination of 1 and 2; without some form of framework you'll end up writing the same boilerplate for the common cases."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I've also done a few stand-alone APIs.", "I like having them as stand-alone services, but the very fact that they stand alone from the rest of the code leads to them getting neglected.", "No technical reason; simply out-of-sight, out-of-mind."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["What I'd really like to see is an approach that unifies Django forms and REST APIs, as they often share a lot of logic.", "Conceptually if your app exposes something in HTML it likely wants to expose it programmatically as well. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["you could try making a generic functions that process the data (like parand mentioned) which you can call from the views that generate the web pages, as well as those that generate the json/xml/whatever"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]