[[{"text": ["It's fairly simple.", "You write values using keys and expiry times.", "You get values using keys.", "You can expire keys from the system."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Most clients follow the same rules.", "You can read the generic instructions and best practices on the memcached homepage."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "the memcached homepage", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.danga.com/memcached/"}]}, {"text": ["If you really want to dig into it, I'd look at the source.", "Here's the header comment:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n \"\"\"\nclient module for memcached (memory cache daemon)\n\nOverview\n========\n\nSee U{the MemCached homepage&lt;http://www.danga.com/memcached&gt;} for more about memcached.\n\nUsage summary\n=============\n\nThis should give you a feel for how this module operates::\n\n    import memcache\n    mc = memcache.Client(['127.0.0.1:11211'], debug=0)\n\n    mc.set(\"some_key\", \"Some value\")\n    value = mc.get(\"some_key\")\n\n    mc.set(\"another_key\", 3)\n    mc.delete(\"another_key\")\n\n    mc.set(\"key\", \"1\")   # note that the key used for incr/decr must be a string.\n    mc.incr(\"key\")\n    mc.decr(\"key\")\n\nThe standard way to use memcache with a database is like this::\n\n    key = derive_key(obj)\n    obj = mc.get(key)\n    if not obj:\n        obj = backend_api.get(...)\n        mc.set(key, obj)\n\n    # we now have obj, and future passes through this code\n    # will use the object from the cache.\n\nDetailed Documentation\n======================\n\nMore detailed documentation is available in the L{Client} class.\n\"\"\"\n</code>\n</pre>\n", "senID": 3}]]