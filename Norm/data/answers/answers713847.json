[[{"text": ["Something I don't like about CherryPy and Django is that, by default, they treat GET and POST as if they were the same thing.", "In a proper RESTful API HTTP-verbs are very important, and unless you're very careful and do explicit checks at every request handler, you'll end up falling into a REST anti-pattern."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "CherryPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cherrypy.org/"}, {"text": "Django", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/"}, {"text": "HTTP-verbs are very important", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Representational_State_Transfer#RESTful_web_services"}, {"href": "http://www.infoq.com/articles/rest-anti-patterns", "text": "REST anti-pattern", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["One framework that gets it right is web.py.", "When combined with the mimerender library, it allows you to write nice RESTful webservices:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "web.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://webpy.org/"}, {"text": "mimerender", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/mimerender/"}]}, {"code": "<pre>\n<code>\n import web\nimport json\nfrom mimerender import mimerender\n\nrender_xml = lambda message: '&lt;message&gt;%s&lt;/message&gt;'%message\nrender_json = lambda **args: json.dumps(args)\nrender_html = lambda message: '&lt;html&gt;&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;'%message\nrender_txt = lambda message: message\n\nurls = (\n    '/(.*)', 'greet'\n)\napp = web.application(urls, globals())\n\nclass greet:\n    @mimerender(\n        default = 'html',\n        html = render_html,\n        xml  = render_xml,\n        json = render_json,\n        txt  = render_txt\n    )\n    def GET(self, name):\n        if not name: \n            name = 'world'\n        return {'message': 'Hello, ' + name + '!'}\n\nif __name__ == \"__main__\":\n    app.run()\n</code>\n</pre>\n", "senID": 2}, {"text": ["The service's logic is implemented only once, and the correct representation selection (Accept header) + dispatch to the proper render function (or template) is done in a tidy, transparent way."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n $ curl localhost:8080/x\n&lt;html&gt;&lt;body&gt;Hello, x!&lt;/body&gt;&lt;/html&gt;\n\n$ curl -H \"Accept: application/html\" localhost:8080/x\n&lt;html&gt;&lt;body&gt;Hello, x!&lt;/body&gt;&lt;/html&gt;\n\n$ curl -H \"Accept: application/xml\" localhost:8080/x\n&lt;message&gt;Hello, x!&lt;/message&gt;\n\n$ curl -H \"Accept: application/json\" localhost:8080/x\n{'message':'Hello, x!'}\n\n$ curl -H \"Accept: text/plain\" localhost:8080/x\nHello, x!\n</code>\n</pre>\n", "senID": 4}], [{"text": ["We're using Django for RESTful web services."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/"}]}, {"text": ["Note that -- out of the box -- Django did not have fine-grained enough authentication for our needs.", "We used the Django-REST interface, which helped a lot.", "[We've since rolled our own because we'd made so many extensions that it had become a maintenance nightmare."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Django-REST interface", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-rest-interface/"}]}, {"text": ["We have two kinds of URL's: \"html\" URL's which implement the human-oriented HTML pages, and \"json\" URL's which implement the web-services oriented processing.", "Our view functions often look like this."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def someUsefulThing( request, object_id ):\n    # do some processing\n    return { a dictionary with results }\n\ndef htmlView( request, object_id ):\n    d = someUsefulThing( request, object_id )\n    render_to_response( 'template.html', d, ... )\n\ndef jsonView( request, object_id ):\n    d = someUsefulThing( request, object_id )\n    data = serializers.serialize( 'json', d['object'], fields=EXPOSED_FIELDS )\n    response = HttpResponse( data, status=200, content_type='application/json' )\n    response['Location']= reverse( 'some.path.to.this.view', kwargs={...} )\n    return response\n</code>\n</pre>\n", "senID": 3}, {"text": ["The point being that the useful functionality is factored out of the two presentations.", "The JSON presentation is usually just one object that was requested.", "The HTML presentation often includes all kinds of navigation aids and other contextual clues that help people be productive."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["The jsonView functions are all very similar, which can be a bit annoying.", "But it's Python, so make them part of a callable class or write decorators if it helps."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "jsonView", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Surprised no one mentioned flask."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "flask", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://flask.pocoo.org/"}]}], [{"text": ["See Python Web Frameworks wiki."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Web Frameworks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/WebFrameworks"}]}, {"text": ["You probably do not need the full stack frameworks, but the remaining list is still quite long."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "full stack", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["I really like CherryPy.", "Here's an example of a restful web service:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CherryPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cherrypy.org/"}]}, {"code": "<pre>\n<code>\n import cherrypy\nfrom cherrypy import expose\n\nclass Converter:\n    @expose\n    def index(self):\n        return \"Hello World!\"\n\n    @expose\n    def fahr_to_celc(self, degrees):\n        temp = (float(degrees) - 32) * 5 / 9\n        return \"%.01f\" % temp\n\n    @expose\n    def celc_to_fahr(self, degrees):\n        temp = float(degrees) * 9 / 5 + 32\n        return \"%.01f\" % temp\n\ncherrypy.quickstart(Converter())\n</code>\n</pre>\n", "senID": 1}, {"text": ["This emphasizes what I really like about CherryPy; this is a completely working example that's very understandable even to someone who doesn't know the framework.", "If you run this code, then you can immediately see the results in your web browser; e.g.", "visiting http://localhost:8080/celc_to_fahr?degrees=50 will display 122.0 in your web browser."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "http://localhost:8080/celc_to_fahr?degrees=50", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://localhost:8080/celc_to_fahr?degrees=50"}, {"text": "122.0", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Take a look at"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["Itty"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Bottle"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["web.py"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["juno"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}]}], [{"text": ["Here is a discussion in CherryPy docs on REST: http://docs.cherrypy.org/dev/progguide/REST.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.cherrypy.org/dev/progguide/REST.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.cherrypy.org/dev/progguide/REST.html"}]}, {"text": ["In particular it mentions a built in CherryPy dispatcher called MethodDispatcher, which invokes methods based on their HTTP-verb identifiers (GET, POST, etc...)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Piston is very flexible framework for wirting RESTful APIs for Django applications."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Piston", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bitbucket.org/jespern/django-piston/wiki/Home"}]}], [{"text": ["I am not an expert on the python world but I have been using django which is an excellent web framework and can be used to create a restful framework."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/"}]}], [{"text": ["I don't see any reason to use Django just to expose a REST api, there are lighter and more flexible solutions.", "Django carries a lot of other things to the table, that are not always needed.", "For sure not needed if you only want to expose some code as a REST service. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["My personal experience, fwiw, is that once you have a one-size-fits-all framework, you'll start to use its ORM, its plugins, etc.", "just because it's easy, and in no time you end up having a dependency that is very hard to get rid of."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Choosing a web framework is a tough decision, and I would avoid picking a full stack solution just to expose a REST api. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Now, if you really need/want to use Django, then Piston is a nice REST framework for django apps."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["That being said, CherryPy looks really nice too, but seems more RPC than REST."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Looking at the samples (I never used it), probably web.py is the best and cleanest if you only need REST."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["In 2010, the Pylons and repoze.bfg communities \"joined forces\" to create Pyramid, a web framework based most heavily on repoze.bfg.", "It retains the philosophies of its parent frameworks, and can be used for RESTful services.", "It's worth a look."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Pyramid", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pylonsproject.org/"}, {"text": "RESTful services", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://zhuoqiang.me/a/restful-pyramid"}]}], [{"text": ["I strongly recommend TurboGears or Bottle:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["TurboGears:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "less verbose than django", "tag": "none", "senID": 2}, {"text": "more flexible, less HTML-oriented ", "tag": "none", "senID": 3}, {"text": "but: less famous", "tag": "none", "senID": 4}]}, {"text": ["Bottle:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "very fast", "tag": "none", "senID": 6}, {"text": "very easy to learn", "tag": "none", "senID": 7}, {"text": "but: minimalistic and not mature", "tag": "none", "senID": 8}]}], [{"text": ["web2py includes support for easily building RESTful API's, described here (video) and here."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "web2py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.web2py.com"}, {"href": "http://vimeo.com/21133657", "text": "here", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://www.reddit.com/r/programming/comments/g5hxq/web2py_trunk_has_a_new_restful_api_that_writes_db/c1l2ykg", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Reading some comment I would like to state that REST is artificial, dusty-defined term.", "In general REST just means the fact you are using HTTP as transport protocol to organize client-service (server) communication, nothing more.", "What is hidden behind the transport is up to specific application.", "In one particular case it can be RPC-like protocol in another SOAP envelope, etc.", "POST/GET/.. proper usage results from HTTP specification, not from mysterious REST spec papers :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Taking in account the statement above the standard XMLRPC implementation can be considered as RESTful service:\nhttp://docs.python.org/library/xmlrpclib.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/xmlrpclib.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/xmlrpclib.html"}]}]]