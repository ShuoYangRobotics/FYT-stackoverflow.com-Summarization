[[{"text": ["Jinja2."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Jinja2", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jinja.pocoo.org/2"}]}, {"text": ["Nice syntax, good customization possibilities. "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "syntax", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jinja.pocoo.org/2/documentation/templates"}, {"href": "http://jinja.pocoo.org/2/documentation/extensions.html", "text": "customization possibilities", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Integrates well.", "Can be sandboxed, so you don't have to trust completely your template authors.", "(Mako can't)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It is also pretty fast, with the bonus of compiling your template to bytecode and cache it, as in the demonstration below:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import jinja2\n&gt;&gt;&gt; print jinja2.Environment().compile('{% for row in data %}{{ row.name | upper }}{% endfor %}', raw=True) \nfrom __future__ import division\nfrom jinja2.runtime import LoopContext, Context, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join\nname = None\n\ndef root(context, environment=environment):\n    l_data = context.resolve('data')\n    t_1 = environment.filters['upper']\n    if 0: yield None\n    for l_row in l_data:\n        if 0: yield None\n        yield unicode(t_1(environment.getattr(l_row, 'name')))\n\nblocks = {}\ndebug_info = '1=9'\n</code>\n</pre>\n", "senID": 4}, {"text": ["This code has been generated on the fly by Jinja2.", "Of course the compiler optmizes it further (e.g.", "removing if 0: yield None)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "if 0: yield None", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["My favorite templating engine is python itself.", "For example,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def index(title, content):\n    return \"\"\"\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;title&gt;%(title)s&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    %(content)s\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\" % {'title':title, 'content':content}\ndef hello(name):\n    return \"hello %s!\" % name\n</code>\n</pre>\n", "senID": 1}, {"text": ["Nice and easy, huh?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Genshi.", "XML-based, which means your document has structure that can be manipulated rather than being an opaque string to be outputted.", "This enables powerful filters to be written that don't rely on regexp mangling."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Genshi", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://genshi.edgewall.org/"}]}, {"text": ["It uses standard XInclude rather than custom include syntax.", "You can refer to other parts of the document with XPath.", "You can output HTML 4.01, XHTML 1.0, etc."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To sample the syntax, loops look like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &lt;ul&gt;\n    &lt;li py:for=\"item in list\"&gt;${item}&lt;/li&gt;\n&lt;/ul&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["By default it escapes variables so you are safe from XSS attacks, and being XML-based, all output is well-formed."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["It is not sandboxable yet, although there is an experimental branch that allows this."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Unlike many other template engines, it supports real Python expressions and doesn't try to stop you from doing anything.", "In theory, this allows you to write spaghetti code that entangles the business logic with the presentation, which is why some other template engines restrict you from doing things.", "In practice, this doesn't happen.", "Genshi treats you like an adult who can make his own decisions, much like the way Python treats you like an adult by not having private members etc."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["It has good internationalisation and localisation support, being developed by the same people who work on Babel.", "It also hooks into standard XML syntax, e.g.", "xml:lang rather than reinventing its own syntax."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "Babel", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://babel.edgewall.org/"}, {"text": "xml:lang", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["There is persistent FUD coming from the Django camp saying that Genshi is no good for non-markup output.", "This is simply false, in fact the use of XML makes supporting other file formats easier.", "For instance, I've used Genshi to generate MIME emails with attachments, multiple parts, plain text fallbacks, etc, which was made tremendously easier by the fact that I could hook into the template structure.", "You can't do that with a plain text system."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["And of course, if you do find an advantage to using plain text, Genshi also has a plain-text variant that can be used.", "For instance, I store server configuration in a database, and use Genshi's plaintext mode to generate server config files."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "do", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Benchmarks comparing Genshi performance to other template engines are available on the Genshi website.", "Note that text mode is significantly faster than XML mode, but XML mode still performs respectably."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "on the Genshi website", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://genshi.edgewall.org/wiki/GenshiPerformance"}]}], [{"text": ["Single favorite: Mako.", "Recently, I used Mako templates to build unit test code.", "The users provided the test results in spreadsheets.", "I used Mako to generate the Java Junit test code from the spreadsheets.", "Mako was easy to install and use."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Mako", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.makotemplates.org/"}]}, {"text": ["I use Django a lot, but I don't have the patience to work out how to use it separately from the rest of the framework."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Nevow, of course."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Nevow", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://divmod.org/trac/wiki/DivmodNevow"}]}, {"code": "<pre>\n<code>\n from nevow.page import Element, renderer\nfrom nevow.flat import flatten\nfrom nevow.loaders import stan\nfrom nevow.tags import html, head, title, body, div, directive\n\nclass MyElement(Element):\n    docFactory = stan(html[\n            head[title[\"Hello, World!\"]], \"\\n\",\n            body[div(render=directive(\"message\"))]])\n    @renderer\n    def message(self, request, tag):\n        tag[\"Hello, world!\"]\n        return tag\nprint flatten(MyElement())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Nevow has a number of unusual advantages:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "Use Python syntax, XML templates, or tag soup.  It's all the same data structures internally.", "tag": "none", "senID": 3}, {"text": "No code embedded in your templates.  You write all your code in a real programming language (it doesn't break your debugger, your profiler, etc), but you aren't forced to write elaborate code/data bindings to make up for that.  If you want to quickly inline a chunk of template in your code it's really ", "tag": "none", "senID": 4}, {"text": "It's the only templating system that natively supports Twisted.  Return a ", "tag": "none", "senID": 5}, {"text": "Correct handling of unicode, and correct escaping of HTML entities.  You don't have to think about it!  If you ", "tag": "none", "senID": 6}, {"text": "Templates can be optimized for precompilation, glomming together all non-dynamic elements at startup time rather than every render - all transparently to your application.", "tag": "none", "senID": 7}]}, {"text": ["The main attraction, of course, is the included COMET server and JavaScript module system.", "You can freely inter-call between Python and JavaScript, and it's really easy:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n from twisted.internet import reactor\nfrom nevow.athena import LiveElement\n\nclass MyElement(LiveElement):\n    docFactory = stan(div(render=directive('liveElement')))\n    def ping(self, message):\n        reactor.callLater(5.0, self.callRemote, \"pong\", message)\n</code>\n</pre>\n", "senID": 9}, {"text": ["but even if all you need to output is vanilla HTML, it can be quite nice."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["Django templates if you're using Django or AppEngine.", "They way the templating engine and syntax is  constructed, it's very hard to do any code in the template layer (that's a good thing).", "Every time I thought I was running up against a wall in Django's templates, it's because I was trying to do something wrong that I'd carried over from a more liberal templating language."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Django templates", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/templates/#topics-templates"}]}, {"text": ["I'd also look at Jinja2, its a superset of Django's templates, and therefore contains a lot more \"powerful\" syntax, which would be good or bad depending on how you look at it."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Jinja2", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dev.pocoo.org/projects/jinja/"}]}, {"text": ["I've also used Cheetah, but once you go Django, you never go back :)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Cheetah", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cheetahtemplate.org/"}]}, {"text": ["I should mention I don't like stuff like Genshi which restrict you to an XML document because its pretty inflexible when you try to do stuff that's not XML (i.e.", "emails, PDFs, and so forth)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I think there is no \"single\" template engine for Python.", "You have to decide that by checking your requirements.", "You do not work with the Django Framework?", "Then rule out the Django Template Engine.", "Do you have template designers that are not programmers or maybe not trustable (user submitted templates)?", "Give Jinja2 a try.", "Do you want to embedd the full power of Python in your templates?", "Mako is the engine of choice then.", "Are you processing XML stuff?", "Genshi can do that."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There are more exotic templating engines like nevow or that Markaby inspired one where I forgot the name.", "Cheetah/kit/TAL exist too, but they don't have any real advantages over the newer template engines listed above."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The web2py templating engine is full Python without indentation requirements (use pass to close blocks).", "Example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pass", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n {{extend 'layout.html'}}\n &lt;table&gt;\n {{for i in range(10):}}\n    &lt;tr&gt;&lt;td&gt;{{=i}}&lt;/td&gt;&lt;/tr&gt;\n {{pass}}\n &lt;/table&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["It also has powerful helpers:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n {{extend 'layout.html'}}\n &lt;table&gt;\n {{for k,link in enumerate(['http://www.google.com']):}}\n    {{=TR(TD(A(link,_href=link)),_class='odd' if k%2 else 'odd')}}\n {{pass}}\n &lt;/table&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I really enjoyed using Cheetah.", "I liked that you could compile the templates and just populate it easily."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Seconding Mako.", "It's dead simple to set up.", "For most uses, this is all the code you need:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import mako.lookup\ntemplate_lookup = mako.lookup.TemplateLookup(\n    directories=['/path/to/templates'], output_encoding='utf-8')\ntemplate = template_lookup.get_template('some_template.html')\nrendered = template.render(c=SomeContextObject)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Evoque of course: best simplicity-to-power ratio, one of the few systems that can offer sandboxed execution, possibly the fastest pure-python templating engine, small codebase, runs also on python 3, ..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Evoque", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://evoque.gizmojo.org/"}]}], [{"text": ["There IS a single Python templating engine:  StringTemplate.", "If you need something more than Python itself (use it when you can), then there is no substitute.", "Check out http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf for details of why."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf"}]}, {"text": ["And use it for other platforms, too.", "I have used StringTemplate on Python, Java, and .Net for years, and I have used many alternatives.", "I see no need to ever use anything else, nor can I even imagine that there could be a superior solution (no kidding).", "That design decision is done for me."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I'm a fan of Django's default templating system for its ease and simplicity."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["As a variation on the string formatting suggestion above from Kevin Holzer, here's a pretty clever hack that I found from some folks who needed to generate some KML snippets: (their code)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "(their code)", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/primary-maps-2008/source/browse/trunk/earth.py"}]}, {"text": ["I hate having to edit in-line html where I can't use indenting to keep track of the structure of what I'm doing, so I found it quite handy for generating little blobs of html that had to be inserted somewhere."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Using a regex for the whitespace and **kwargs for your dictionary:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def T( text, **values ):\n    return re.sub( '(^\\n*|\\n+)[ \\t]*', '', text % values )\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then you can do something like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n T(\"\"\"\n    &lt;div class=\"record\"&gt;\n        &lt;div class=\"image\"&gt;\n            &lt;img width=%(width)d height=%(height)d src=\"%(path)s\" /&gt;\n            &lt;div class=\"name\"&gt;Title: %(title)s&lt;/div&gt;\n            &lt;div class=\"photog\"&gt;Photographer: %(photographer)s&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\"\"\",\npath = \"/some/path/to/image.jpg\",\nwidth = 400,\nheight = 600,\ntitle = \"Some Title\",\nphotographer = \"Jane Doe\"\n)\n</code>\n</pre>\n", "senID": 5}, {"text": ["NB: Python 3 (backported to 2.6) has got: str.format(*args, **kwargs)"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "str.format(*args, **kwargs)", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#str.format"}]}]]