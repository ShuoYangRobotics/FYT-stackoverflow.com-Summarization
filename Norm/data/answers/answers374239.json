[[{"text": ["It was proposed and rejected in PEP 3103.", "I don't know why it didn't have it initially.", "There's an idiom I saw here that can replace the switch statement by using a dict of value and actions:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PEP 3103", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3103/"}, {"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://simonwillison.net/2004/May/7/switch/"}]}, {"code": "<pre>\n<code>\n {'option1': function1,\n 'option2': function2,\n 'option3': function3,\n 'option4': function4,\n}.get(value, defaultfunction)()\n</code>\n</pre>\n", "senID": 1}, {"text": ["And there's always the if-elif-else chain."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Switch is a popular code smell in many OO languages (when you follow OO paradigm) and in most of cases it indicates that there should be polymorphic call there.", "When you're about to write a switch, stop for a minute and double check you design.", "Perhaps you can make a polymorphic call instead."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Related question suggested in comments: http://stackoverflow.com/questions/126409/ways-to-eliminate-switch-in-code"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/126409/ways-to-eliminate-switch-in-code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/126409/ways-to-eliminate-switch-in-code"}]}, {"text": ["Article about switch and other similar stuff by Misko Hevery:\nhttp://misko.hevery.com/2008/12/08/clean-code-talks-inheritance-polymorphism-testing/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://misko.hevery.com/2008/12/08/clean-code-talks-inheritance-polymorphism-testing/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://misko.hevery.com/2008/12/08/clean-code-talks-inheritance-polymorphism-testing/"}]}, {"text": ["More about Switch Statements Smell: http://c2.com/cgi/wiki?SwitchStatementsSmell"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://c2.com/cgi/wiki?SwitchStatementsSmell", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://c2.com/cgi/wiki?SwitchStatementsSmell"}]}, {"text": ["//Edited after suggestions in comments"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The Python FAQ has this answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python"}]}], [{"text": ["PEP 3103 just talks about adding the switch statement to Python.", "This suggestion was rejected by Guido."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 3103", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3103/"}]}, {"text": ["Quoting Guido:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As a workaround, you may say something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n result = {\n  'a': lambda x: x * 5,\n  'b': lambda x: x + 7,\n  'c': lambda x: x - 2\n}[value](x)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["While I'm not experienced with using python I was intrigued by your question since I incorrectly assumed that most modern languages contained a switch statement..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So I did some searching via google and found the following link to provide a fairly good answer:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://www.python.org/dev/peps/pep-3103/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.python.org/dev/peps/pep-3103/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3103/"}]}, {"text": ["Seems there is little popular support for it....but I'll let that article do the explaining..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["There are two reasons:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You have "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["And you have"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n{\n key1: value,\n key2: lambda : someFunction(),\n key3: lambda :anything(),\n key3: lambda x, y: someFunctionWithManyParams(x,y, 15, \"abc\")\n}.get(key, defaultValue)\n</pre>\n", "senID": 2}, {"text": ["which is quite powerful idiom."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT: Improved as suggested in comments (thanks!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Probably because, like in Perl, you don't need it to express the same thing?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I admit I appreciate Ruby having one though, it makes code cleaner than a series of if..elsif..else.", "YMMV :)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if..elsif..else", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["\"The Zen of Python\", pasted below, leads you to the answer."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"The Zen of Python\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}, {"text": ["Read lines 13 and 14.", "After seeing examples of dicts used for switch functionality, it starts to click that this is the Pythonic way of doing a switch statement in a less error-prone, more human readable form."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.  &lt;-- 13\nAlthough that way may not be obvious at first unless you're Dutch.     &lt;-- 14\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code>\n</pre>\n", "senID": 2}, {"text": ["And, as others have mentioned, more verbose answers can be found in:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "the ", "tag": "none", "senID": 4}, {"text": ["PEP 3103"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}, {"text": ["And here at stackoverflow there is a thread of proposed switch/case alternatives:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["\"Replacements for switch statement in python?"], "childNum": 0, "tag": "a", "senID": 7, "childList": []}]}], [{"text": ["Fast note: If you want \"fall-through\" behavior, don't use an elif statement, because if it executes it exes the if-elif-else block.", "A series of pure \"if\" statements, however, will fall through."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can nest \"if\" w/ fallthrough with \"if-elif-else\" statements, but it results in a very fertile ground for hard to catch bugs.", "Also, a trailing else executes if the test before it fails, even if one of the earlier \"if\" statements executed."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["switches, returns, for loops, while loops and if/else statements are all just contrived versions of goto, hangovers from the procedural programming days.", "Like drugs, they provide a quick satisfying fix, but in the long run they wreck health and cause other problems:-"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "By exponentially increasing the number of code paths, they make code unreadable. ", "tag": "none", "senID": 1}, {"text": "By making special-case behaviour implicit and hidden they make code fragile.", "tag": "none", "senID": 2}, {"text": "By wrapping up logic inside conditions and blocks, they prohibit extension.", "tag": "none", "senID": 3}]}, {"text": ["Code is a lot better off without them."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["It is perfectly possible to program without directly using any of these statements, and programs written in this way are almost always more elegant, more flexible, and easier to understand and often a lot faster, because we can easily use better algorithms and don't spend so much time checking cases."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "because we can easily use better algorithms and don't spend so much time checking cases", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["This is the point of object oriented programming.", "Anyone can make a class that is essentially a placeholder for a bunch of switch statements, but that just isn't OOP."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["So what is OOP?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Using classes instead of conditionals and cases, so you can easily extend your software.", "tag": "none", "senID": 8}, {"text": "Using recursion instead of while loops, so you can easily define complex algorithms.", "tag": "none", "senID": 9}, {"text": "Using iterators instead of for loops, so you can easily use different containers.", "tag": "none", "senID": 10}, {"text": "Using callbacks instead of returns, so you can easily scale your system.", "tag": "none", "senID": 11}]}, {"text": ["I hope this is useful to you."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"text": ["Even in languages that DO have a switch statement (C++ and Java being the ones I use mostly), I rarely use it.", "If you need to select from multiple code branches so that an if statement won't suffice, then, IMHO, you're doing it wrong."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If I need to select some code to run depending on the value of a variable, I find it much more powerful to do one of two things:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The point in both cases is to allow adding new values without needing to delve into the depths of the code and modify if or switch statements."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I say if they won't include it they should stop using it in the source code to python itself; then see who needs it :-p"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I've heard of keeping your language pruned but seriously; switch is good :-p"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I think that a switch case is needlessly redundant, something Python strives to avoid.", "Not to mention the amount of code you'd have to write in python is virtually the same, if not less since you don't need break statements."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if blah == 1:\n    do_something\nelif blah == 2:\n    do_something\nelif blah == 3:\n    do_something\n</code>\n</pre>\n", "senID": 2}, {"text": ["Switch"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Switch", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n switch(blah)\n{\n    case 1:\n    do_something;\n    break;\n\n    case 2:\n    do_something;\n    break;\n\n    case 3:\n    do_something;\n    break;\n}\n</code>\n</pre>\n", "senID": 4}]]