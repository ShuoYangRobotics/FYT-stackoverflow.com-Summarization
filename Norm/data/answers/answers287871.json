[[{"text": ["This somewhat depends on what platform you are on.", "The most common way to do this is by printing ANSI escape sequences.", "For a simple example, here's some python code from the blender build scripts:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "blender build scripts", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "https://svn.blender.org/svnroot/bf-blender/trunk/blender/tools/bcolors.py"}]}, {"code": "<pre>\n<code>\n class bcolors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n\n    def disable(self):\n        self.HEADER = ''\n        self.OKBLUE = ''\n        self.OKGREEN = ''\n        self.WARNING = ''\n        self.FAIL = ''\n        self.ENDC = ''\n</code>\n</pre>\n", "senID": 1}, {"text": ["To use code like this, you can do something like "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print bcolors.WARNING + \"Warning: No active frommets remain. Continue?\" \n      + bcolors.ENDC\n</code>\n</pre>\n", "senID": 3}, {"text": ["This will work on unix, linux including macOS, and window (provided you enable ansi.sys).", "There are ansi codes for setting the color, moving the cursor, and more."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "enable ansi.sys", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://support.microsoft.com/kb/101875"}]}, {"text": ["If you are going to get complicated with this (and it sounds like you are if you are writing a game), you should look into the \"curses\" module, which handles a lot of the complicated parts of this for you.", "The Python Curses HowTO is a good introduction."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Python Curses HowTO", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/curses/"}]}, {"text": ["If you are not using extended ASCII (i.e.", "not on a PC), you are stuck with the ascii characters below 127, and '#' or '@' is probably your best bet for a block.", "If you can ensure your terminal is using a IBM extended ascii character set, you have many more options.", "Characters 176, 177, 178 and 219 are the \"block characters\"."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "extended ascii character set", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://telecom.tbi.net/asc-ibm.html"}]}, {"text": ["Some modern text-based programs, such as \"Dwarf Fortress\", emulate text mode in a graphical mode, and use images of the classic PC font.", "You can find some of these bitmaps that you can use on the Dwarf Fortress Wiki see (user-made tilesets)."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "Dwarf Fortress Wiki", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://dwarf.lendemaindeveille.com/index.php/Tilesets"}, {"href": "http://dwarf.lendemaindeveille.com/index.php/List_of_user_character_sets", "text": "user-made tilesets", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["The Text Mode Demo Contest has more resources for doing graphics in text mode."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Text Mode Demo Contest", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/TMDC"}]}, {"text": ["Hmm..", "I think got a little carried away on this answer.", "I am in the midst of planning an epic text-based adventure game, though.", "Good luck with your colored text!"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["I'm surprised no one has mentioned the Python termcolor module.", "Usage is pretty simple:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python termcolor module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/termcolor"}]}, {"code": "<pre>\n<code>\n from termcolor import colored\n\nprint colored('hello', 'red'), colored('world', 'green')\n</code>\n</pre>\n", "senID": 1}, {"text": ["It may not be sophisticated enough, however, for game programming and the \"colored blocks\" that you want to do..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["the answer is http://pypi.python.org/pypi/colorama for all cross-platform coloring in python"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pypi.python.org/pypi/colorama", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/colorama"}]}], [{"text": ["You can use the Python implementation of the curses library:\nhttp://docs.python.org/library/curses.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/curses.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/curses.html"}]}, {"text": ["Also, run this and you'll find your box:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for i in range(255):\n    print i, chr(i)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You want to learn about ANSI escape sequences.", "Here's a brief example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n CSI=\"\\x1B[\"\nreset=CSI+\"m\"\nprint CSI+\"31;40m\" + \"Colored Text\" + CSI + \"0m\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["For more info see http://en.wikipedia.org/wiki/ANSI_escape_code"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://en.wikipedia.org/wiki/ANSI_escape_code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/ANSI_escape_code"}]}, {"text": ["For a block character, try a unicode character like \\u2588:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n print u\"\\u2588\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["Putting it all together:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n print CSI+\"31;40m\" + u\"\\u2588\" + CSI + \"0m\"\n</code>\n</pre>\n", "senID": 6}], [{"text": ["For windows you cannot print to console with colors unless your using the win32api."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For linux its as simple as using print, with the escape sequences outlined here:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Colors"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Colors", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.linuxhowtos.org/Tips%20and%20Tricks/ansi_escape_sequences.htm"}]}, {"text": ["For the characther to print like a box, it really depends on what font you are using for the console window.", "The pound symbol works well, but it depends on the font:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #\n</code>\n</pre>\n", "senID": 4}], [{"text": ["On Windows you can use module 'win32console' (available in some Python distributions) or module 'ctypes' (Python 2.5 and up) to access the Win32 API."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To see complete code that supports both ways, see the color console reporting code from Testoob."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "color console reporting code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/testoob/source/browse/trunk/src/testoob/reporting/colored.py"}, {"href": "http://www.testoob.org", "text": "Testoob", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["ctypes example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import ctypes\n\n# Constants from the Windows API\nSTD_OUTPUT_HANDLE = -11\nFOREGROUND_RED    = 0x0004 # text color contains red.\n\ndef get_csbi_attributes(handle):\n    # Based on IPython's winconsole.py, written by Alexander Belchenko\n    import struct\n    csbi = ctypes.create_string_buffer(22)\n    res = ctypes.windll.kernel32.GetConsoleScreenBufferInfo(handle, csbi)\n    assert res\n\n    (bufx, bufy, curx, cury, wattr,\n    left, top, right, bottom, maxx, maxy) = struct.unpack(\"hhhhHhhhhhh\", csbi.raw)\n    return wattr\n\n\nhandle = ctypes.windll.kernel32.GetStdHandle(STD_OUTPUT_HANDLE)\nreset = get_csbi_attributes(handle)\n\nctypes.windll.kernel32.SetConsoleTextAttribute(handle, FOREGROUND_RED)\nprint \"Cherry on top\"\nctypes.windll.kernel32.SetConsoleTextAttribute(handle, reset)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you are programming a game you may would like to change the background color and use spaces only :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["you may try something like "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["print \" \"+ \"\\033[01;41m\" + \" \" +\"\\033[01;46m\"  + \"  \" + \"\\033[01;42m\""], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here's a curses example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import curses\n\ndef main(stdscr):\n    stdscr.clear()\n    if curses.has_colors():\n        for i in xrange(1, curses.COLORS):\n            curses.init_pair(i, i, curses.COLOR_BLACK)\n            stdscr.addstr(\"COLOR %d! \" % i, curses.color_pair(i))\n            stdscr.addstr(\"BOLD! \", curses.color_pair(i) | curses.A_BOLD)\n            stdscr.addstr(\"STANDOUT! \", curses.color_pair(i) | curses.A_STANDOUT)\n            stdscr.addstr(\"UNDERLINE! \", curses.color_pair(i) | curses.A_UNDERLINE)\n            stdscr.addstr(\"BLINK! \", curses.color_pair(i) | curses.A_BLINK)\n            stdscr.addstr(\"DIM! \", curses.color_pair(i) | curses.A_DIM)\n            stdscr.addstr(\"REVERSE! \", curses.color_pair(i) | curses.A_REVERSE)\n    stdscr.refresh()\n    stdscr.getch()\n\nif __name__ == '__main__':\n    print \"init...\"\n    curses.wrapper(main)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For the characters"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Your terminal most probably uses Unicode (typically UTF-8 encoded) characters, so it's only a matter of the appropriate font selection to see your favorite character.", "Unicode char U+2588, \"Full block\" is the one I would suggest you use."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Try the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import unicodedata\nfp= open(\"character_list\", \"w\")\nfor index in xrange(65536):\n    char= unichr(index)\n    try: its_name= unicodedata.name(char)\n    except ValueError: its_name= \"N/A\"\n    fp.write(\"%05d %04x %s %s\\n\" % (index, index, char.encode(\"UTF-8\"), its_name)\nfp.close()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Examine the file later with your favourite viewer."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["For the colors"], "childNum": 0, "tag": "h2", "senID": 5, "childList": []}, {"text": ["curses is the module you want to use.", "Check this tutorial."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "curses", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-curses.html"}, {"text": "tutorial", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/curses/"}]}], [{"text": ["How about this"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/574451/"}]}], [{"text": ["There's also a module called WConIO that does much the same thing.", "Unfortunately the author will probably not be able to build a Python 2.6 version any time soon."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Go to http://en.wikipedia.org/wiki/List_of_Unicode_characters#Block_elements\nThere is a list of block elements(It requires Unicode).", "Or use ascii character 24 or 26."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://en.wikipedia.org/wiki/List_of_Unicode_characters#Block_elements", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/List_of_Unicode_characters#Block_elements"}]}]]