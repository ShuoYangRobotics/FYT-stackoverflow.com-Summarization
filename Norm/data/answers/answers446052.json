[[{"text": ["You can test using eval:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n  eval(\"1 if True else 2\")\nexcept SyntaxError:\n  # doesn't have ternary\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, with is available in Python 2.5, just add from __future__ import with_statement."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "em", "childList": []}, {"text": "from __future__ import with_statement", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["EDIT: to get control early enough, you could split it do different .py files and check compatibility in the main file before importing (e.g.", "in __init__.py in a package):"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": ".py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n # __init__.py\n\n# Check compatibility\ntry:\n  eval(\"1 if True else 2\")\nexcept SyntaxError:\n  raise ImportError(\"requires ternary support\")\n\n# import from another module\nfrom impl import *\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Have a wrapper around your program that does the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\n\nreq_version = (2,5)\ncur_version = sys.version_info()\n\nif (cur_version[0] &gt; req_version[0] or\n    (cur_version[0] == req_version[0] and\n    cur_version[1] &gt;= req_version[1]):\n   import myApp\n   myApp.run()\nelse:\n   print \"Your python interpreter is too old. Please consider upgrading.\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can also consider using sys.version(), if you plan to encounter people who are using pre-2.0 python interpreters, but then you have some regexing to do."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["And there might be more elegant ways to do this, but this is what I could think up in 5 minutes time.", "YMMV."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Probably the best way to do do this version comparison is to use the sys.hexversion.", "This is important because comparing version tuples will not give you the desired result in all python versions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sys.hexversion", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\nif sys.hexversion &lt; 0x02060000:\n    print \"yep!\"\nelse:\n    print \"oops!\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nimport platform\nplatform.python_version()\n</pre>\n", "senID": 1}, {"text": ["Should give you a string like \"2.3.1\".", "If this is not exactly waht you want there is a rich set of data available through the \"platform\" build-in.", "What you want should be in there somewhere. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["sets became part of the core language in 2.4, in order to stay backwards compatible, I did this back then, which will work for you as well:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if sys.version_info &lt; (2, 4):\n    from sets import Set as set\n</code>\n</pre>\n", "senID": 1}, {"text": ["HTH"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I think the best way is to test for functionality rather than versions.", "In some cases, this is trivial, not so in others."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["eg:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try :\n    # Do stuff\nexcept : # Features weren't found.\n    # Do stuff for older versions.\n</code>\n</pre>\n", "senID": 2}, {"text": ["As long as you're specific in enough in using the try/except blocks, you can cover most of your bases."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["How about"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\n\ndef testPyVer(reqver):\n  if float(sys.version[:3]) &gt;= reqver:\n    return 1\n  else:\n    return 0\n\n#blah blah blah, more code\n\nif testPyVer(3.0) = 1:\n  #do stuff\nelse:\n  #print python requirement, exit statement\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The problem is quite simple.", "You checked if the version was LESS THAN 2.4, not less than OR EQUAL TO.", "So if the python version is 2.4, it's not less than 2.4.\nwhat you should have had was:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if sys.version_info **&lt;=** (2, 4):\n</code>\n</pre>\n", "senID": 1}, {"text": ["not:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if sys.version_info &lt; (2, 4):\n</code>\n</pre>\n", "senID": 3}], [{"text": ["if u start your script by clicking it then change py filetype to use older version of python.", "If you are doing it from command line in short periods use c:\\python2.5\\python.exe yourscript.py"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["As noted above, syntax errors occur at compile time, not at run time.", "While Python is an \"interpreted language\", Python code is not actually directly interpreted; it's compiled to byte code, which is then interpreted.", "There is a compile step that happens when a module is imported (if there is no already-compiled version available in the form of a .pyc or .pyd file) and that's when you're getting your error, not (quite exactly) when your code is running.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can put off the compile step and make it happen at run time for a single line of code, if you want to, by using eval, as noted above, but I personally prefer to avoid doing that, because it causes Python to perform potentially unnecessary run-time compilation, for one thing, and for another, it creates what to me feels like code clutter.", "(If you want, you can generate code that generates code that generates code - and have an absolutely fabulous time modifying and debugging that in 6 months from now.", ")  So what I would recommend instead is something more like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import sys\nif sys.hexversion &lt; 0x02060000:\n    from my_module_2_5 import thisFunc, thatFunc, theOtherFunc\nelse:\n    from my_module import thisFunc, thatFunc, theOtherFunc\n</code>\n</pre>\n", "senID": 2}, {"text": [".. which I would do even if I only had one function that used newer syntax and it was very short.", "(In fact I would take every reasonable measure to minimize the number and size of such functions.", "I might even write a function like ifTrueAElseB(cond, a, b) with that single line of syntax in it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Another thing that might be worth pointing out (that I'm a little amazed no one has pointed out yet) is that while earlier versions of Python did not support code like"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n value = 'yes' if MyVarIsTrue else 'no'\n</code>\n</pre>\n", "senID": 5}, {"text": ["..it did support code like"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n value = MyVarIsTrue and 'yes' or 'no'\n</code>\n</pre>\n", "senID": 7}, {"text": ["That was the old way of writing ternary expressions.", "I don't have Python 3 installed yet, but as far as I know, that \"old\" way still works to this day, so you can decide for yourself whether or not it's worth it to conditionally use the new syntax, if you need to support the use of older versions of Python."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["Although the question is:\nHow do I get control early enough to issue an error message and exit?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The question that I answer is:\nHow do I get control early enough to issue an error message before starting the app?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I can answer it a lot differently then the other posts.", "Seems answers so far are trying to solve your question from within Python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I say, do version checking before launching Python.", "I see your path is Linux or unix.", "However I can only offer you a Windows script.", "I image adapting it to linux scripting syntax wouldn't be too hard."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Here is the DOS script with version 2.7:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n @ECHO OFF\nREM see http://ss64.com/nt/for_f.html\nFOR /F \"tokens=1,2\" %%G IN ('\"python.exe -V 2&gt;&amp;1\"') DO ECHO %%H | find \"2.7\" &gt; Nul\nIF NOT ErrorLevel 1 GOTO Python27\nECHO must use python2.7 or greater\nGOTO EOF\n:Python27\npython.exe tern.py\nGOTO EOF\n:EOF\n</code>\n</pre>\n", "senID": 5}, {"text": ["This does not run any part of your application and therefore will not raise a Python Exception.", "It does not create any temp file or add any OS environment variables.", "And it doesn't end your app to an exception due to different version syntax rules.", "That's three less possible security points of access."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The \"FOR /F\" line is the key.", "FOR /F \"tokens=1,2\" %%G IN ('\"python.exe -V 2>&amp;1\"') DO ECHO %%H | find \"2.7\" > Nul"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["For multiple python version check check out url:\nhttp://www.fpschultze.de/modules/smartfaq/faq.php?faqid=17"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "http://www.fpschultze.de/modules/smartfaq/faq.php?faqid=17", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.fpschultze.de/modules/smartfaq/faq.php?faqid=17"}]}, {"text": ["And my hack version:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["[MS script; Python version check prelaunch of Python module]\nhttp://pastebin.com/aAuJ91FQ"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "http://pastebin.com/aAuJ91FQ", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pastebin.com/aAuJ91FQ"}]}]]