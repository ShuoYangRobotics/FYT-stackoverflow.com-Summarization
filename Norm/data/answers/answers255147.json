[[{"text": ["You can use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sys.stdout.write('h')\nsys.stdout.write('m')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Just a comment.", "In Python 3, you will use"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python 3", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/3.0/whatsnew/3.0.html"}]}, {"code": "<pre>\n<code>\n print('h', end='')\n</code>\n</pre>\n", "senID": 1}, {"text": ["to suppress the endline terminator, and"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print('a', 'b', 'c', sep='')\n</code>\n</pre>\n", "senID": 3}, {"text": ["to suppress the whitespace separator between items."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Greg is right-- you can use sys.stdout.write"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Perhaps, though, you should consider refactoring your algorithm to accumulate a list of &lt;whatevers&gt; and then"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n lst = ['h', 'm']\nprint  \"\".join(lst)\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n Python 2.5.2 (r252:60911, Sep 27 2008, 07:03:14)\n[GCC 4.3.1] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print \"hello\",; print \"there\"\nhello there\n&gt;&gt;&gt; print \"hello\",; sys.stdout.softspace=False; print \"there\"\nhellothere\n</code>\n</pre>\n", "senID": 0}, {"text": ["But really, you should use sys.stdout.write directly."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sys.stdout.write", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["print \"%s%s%s%s\" % ('a','s','d','f')"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["For completeness, one other way is to clear the softspace value after performing the write."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nprint \"hello\",\nsys.stdout.softspace=0\nprint \"world\",\nprint \"!\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["prints helloworld !"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "helloworld !", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Using stdout.write() is probably more convenient for most cases though."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Using the print statement without a formatting operation first is really only for very basic convenience.", "If you want to control the format of the output at all, then do as Dustin says: use a format string."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Or use a +, i.e."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "+", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print 'me'+'no'+'likee'+'spacees'+'pls'\nmenolikeespaceespls\n</code>\n</pre>\n", "senID": 1}, {"text": ["Just make sure all are concatenate-able objects."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Regain control of your console!", "Simply:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __past__ import printf\n</code>\n</pre>\n", "senID": 1}, {"text": ["where __past__.py contains:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "__past__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\ndef printf(fmt, *varargs):\n    sys.stdout.write(fmt % varargs)\n</code>\n</pre>\n", "senID": 3}, {"text": ["then:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; printf(\"Hello, world!\\n\")\nHello, world!\n&gt;&gt;&gt; printf(\"%d %d %d\\n\", 0, 1, 42)\n0 1 42\n&gt;&gt;&gt; printf('a'); printf('b'); printf('c'); printf('\\n')\nabc\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["Bonus extra: If you don't like print &gt;&gt; f, ..., you can extending this caper to fprintf(f, ...)."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "print &gt;&gt; f, ...", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]