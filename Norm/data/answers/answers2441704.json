[[{"text": ["\"Best practices\" are very context-dependent, so I won't claim my practices are best, just that they work for me.", "I work on mostly small sites, so no multiple-server deployments, CDNs etc.", "I do need to support Webfaction shared hosting deployment, as some clients need the cheapest hosting they can find.", "I do often have to deploy sites multiple times in different environments, so repeatable scripted deploys are critical."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 8, "lis": [{"text": "I don't use pip bundles, I install from a requirements.txt. I do run my own ", "tag": "none", "senID": 1}, {"text": "I have ", "tag": "none", "senID": 2}, {"text": "I do not use --no-site-packages with virtualenv, because I prefer having slow-moving compiled packages (Python Imaging Library, psycopg2) installed at the system level; too slow and troublesome to do inside every virtualenv. I have not had trouble with polluted system site-packages, because I generally don't pollute it. And in any case, you can install a different version of something in the virtualenv and it will take precedence.", "tag": "none", "senID": 3}, {"text": "Each project has its own virtualenv. I have some bash scripts (not ", "tag": "none", "senID": 4}, {"text": "The entire deployment process, from a bare Ubuntu server VPS or Webfaction shared hosting account to a running website, is scripted using Fabric.", "tag": "none", "senID": 5}, {"text": "Fabric scripts are part of the project source tree, and I run them from a local development checkout.", "tag": "none", "senID": 6}, {"text": "I have no need for SCons (that I am aware of).", "tag": "none", "senID": 7}, {"text": "At the moment a fresh deployment is split into these steps: \"fab staging bootstrap\" (server setup and initial code deploy), \"fab staging enable\" (enable the Apache/nginx config for this site), and \"fab staging reload_server\" (reload Apache/nginx config). Those can of course be combined into a single command line \"fab staging bootstrap enable reload_server\". Once these steps are done, updating the deployment with new code is just \"fab staging deploy\". If I need to roll back an update, \"fab staging rollback.\" Edit: nothing particularly magical in the rollback; it just rolls back the code to the last-deployed version and migrates the database to the previous state (this does require recording some metadata about the migration state of the DB post-deploy, I just do that in a text file).", "tag": "none", "senID": 8}]}], [{"text": ["I use fabric to build and deploy my code and assume a system already set up for that.", "I think that a tool like puppet is more appropriate to automate the installation of things like apache and mysql, though I have yet to really include it in my workflow."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "puppet", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.puppetlabs.com/"}]}, {"text": ["Also, I usually have a different virtualenv per project.", "They are created from a 'base' install of python where - as Carl pointed out - you can leave some global python libraries."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So in terms of workflow that would be:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]