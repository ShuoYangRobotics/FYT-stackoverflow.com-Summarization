[[{"text": ["There's no performance difference, as they compile to the same bytecode:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Python 2.6.2 (r262:71600, Apr 15 2009, 07:20:39)\n&gt;&gt;&gt; import dis\n&gt;&gt;&gt; def f(x):\n...    return x is not None\n...\n&gt;&gt;&gt; dis.dis(f)\n  2           0 LOAD_FAST                0 (x)\n              3 LOAD_CONST               0 (None)\n              6 COMPARE_OP               9 (is not)\n              9 RETURN_VALUE\n&gt;&gt;&gt; def g(x):\n...   return not x is None\n...\n&gt;&gt;&gt; dis.dis(g)\n  2           0 LOAD_FAST                0 (x)\n              3 LOAD_CONST               0 (None)\n              6 COMPARE_OP               9 (is not)\n              9 RETURN_VALUE\n</code>\n</pre>\n", "senID": 1}, {"text": ["Stylistically, I try to avoid not x is y.", "Although the compiler will always treat it as not (x is y), a human reader might misunderstand the construct as (not x) is y.", "If I write x is not y then there is no ambiguity."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "not x is y", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "not (x is y)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "(not x) is y", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "x is not y", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["Code should be written to be understandable to the programmer first, and the compiler or interpreter second.", "The \"is not\" construct resembles English more closely than \"not is\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Both Google and Python's style guide is the best practice:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if x is not None:\n    # Do something about x\n</code>\n</pre>\n", "senID": 1}, {"text": ["Using not x can cause unwanted results.", "See below:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "not x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 1\n&gt;&gt;&gt; not x\nFalse\n&gt;&gt;&gt; x = [1]\n&gt;&gt;&gt; not x\nFalse\n&gt;&gt;&gt; x = 0\n&gt;&gt;&gt; not x\nTrue\n&gt;&gt;&gt; x = [0]         # You don't want to fall in this one.\n&gt;&gt;&gt; not x\nFalse\n</code>\n</pre>\n", "senID": 3}, {"text": ["You may be interested to see what literals are evaluated to True or False in Python:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"tag": "ul", "num": 1, "lis": [{"text": ["Truth Value Testing"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}, {"text": ["Edit for comment below: "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Edit for comment below:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I just did some more testing.", "not x is None doesn't negate x first and then compared to None.", "In fact, it seems the is operator has a higher precedence when used that way:"], "childNum": 4, "tag": "p", "senID": 7, "childList": [{"text": "not x", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x\n[0]\n&gt;&gt;&gt; not x is None\nTrue\n&gt;&gt;&gt; not (x is None)\nTrue\n&gt;&gt;&gt; (not x) is None\nFalse\n</code>\n</pre>\n", "senID": 8}, {"text": ["Therefore, not x is None is just, in my honest opinion, best avoided."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "not x is None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["More edit:"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "More edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I just did more testing and can confirm that bukzor's comment is correct.", "(At least, I wasn't able to prove it otherwise."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "more", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["This means if x is not None has the exact result as if not x is None.", "I stand corrected.", "Thanks bukzor."], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "if x is not None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if not x is None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["However, my answer still stands: Use the conventionalif x is not None.", ":]"], "childNum": 3, "tag": "p", "senID": 13, "childList": [{"text": "Use the conventionalif x is not None", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "if x is not None", "tag": "code"}]}, {"text": "if x is not None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": ":]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["The is not operator is preferred over negating the result of is for stylistic reasons.", "\"if x is not None:\" reads just like English, but \"if not x is None:\" requires understanding of the operator precedence and does not read like english."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "is not", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if x is not None:", "childNum": 0, "tag": "code", "childList": []}, {"text": "if not x is None:", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If there is a performance difference my money is on is not, but this almost certainly isn't the motivation for the decision to prefer that technique.", "It would obviously be implementation-dependent.", "Since is isn't overridable, it should be easy to optimise out any distinction anyhow."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "is not", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["The answer is simpler than people are making it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There's no technical advantage either way, and \"x is not y\" is what everybody else uses, which makes it the clear winner.", "It doesn't matter that it \"looks more like English\" or not; everyone uses it, which means every user of Python--even Chinese users, whose language Python looks nothing like--will understand it at a glance, where the slightly less common syntax will take a couple extra brain cycles to parse."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "everybody else uses", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Don't be different just for the sake of being different, at least in this field."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["if not x is None is more similar to other programming languages, but if x is not None definitely sounds more clear (and is more grammatically correct in English) to me."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "if not x is None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if x is not None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["That said it seems like it's more of a preference thing to me."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]