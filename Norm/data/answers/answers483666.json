[[{"text": ["Assuming that the values in the dict are unique:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict((v,k) for k, v in map.iteritems())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["for python3:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n inv_map = {v:k for k, v in map.items()}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If the values in map aren't unique:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for k, v in map.iteritems():\n    inv_map[v] = inv_map.get(v, [])\n    inv_map[v].append(k)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try this :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n inv_map = dict(zip(map.values(), map.keys()))\n</code>\n</pre>\n", "senID": 1}, {"text": ["or alternatively"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n inv_map = dict((map[k], k) for k in map)\n</code>\n</pre>\n", "senID": 3}, {"text": ["or using python 3.0's dict comprehensions"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n inv_map = {map[k] : k for k in map}\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Or if the values aren't unique and you're a little harcore:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n inv_map = \\\n    dict( \\\n            (v, [k for (k, xx) in filter(lambda (key, value): value == v, map.items())]) \\\n        for v in set(map.values()))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def inverse_mapping(f):\n    return f.__class__(map(reversed, f.items()))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["For all kinds of dictionary, no matter if they don't have unique values to use as keys, you can create a list of keys for each value"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n inv_map = {v: inv_map.get(v, []) + [k] for k,v in map.items()}\n</code>\n</pre>\n", "senID": 1}]]