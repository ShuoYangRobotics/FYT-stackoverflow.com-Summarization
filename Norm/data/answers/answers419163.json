[[{"text": ["Expanding a bit on Harley's answer..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When the Python interpreter reads a source file, it executes all of the code found in it.", "Before executing the code, it will define a few special variables.", "For example, if the python interpreter is running that module (the source file) as the main program, it sets the special __name__ variable to have a value \"__main__\".", "If this file is being imported from another module, __name__ will be set to a different value."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "__name__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "\"__main__\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__name__", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["In the case of your script, let's assume that it's executing as the main function, e.g.", "you said something like"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n python threading_example.py\n</code>\n</pre>\n", "senID": 3}, {"text": ["on the command line.", "After setting up the special variables, it will execute the import statement and load those modules.", "It will then evaluate the def block, creating a function object and creating a variable called myfunction that points to the function object.", "It will then read the if statement and see that __name__ does equal \"__main__\", so it will execute the block shown there."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "myfunction", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "__name__", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "\"__main__\"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["One of the reasons for doing this is that sometimes you write a module (a .py file) where it can be executed directly.", "Alternatively, it can also be imported and used in another module.", "By doing the main check, you can have that code only execute when you want to run the module as a program and not have it execute when someone just wants to import your module and call your functions themselves."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": ".py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["See this page for some extra details."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "this page", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ibiblio.org/g2swap/byteofpython/read/module-name.html"}]}], [{"text": ["When your script is run by passing it as a command to the Python interpreter,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n python myscript.py\n</code>\n</pre>\n", "senID": 1}, {"text": ["all of the code that is at indentation level 0 gets executed.", "Functions and classes that are defined are, well, defined, but none of their code gets ran.", "Unlike other languages, there's no main() function that gets run automatically - the main() function is implicitly all the code at the top level."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "main()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "main()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In this case, the top-level code is an if block.", "__name__ is a built-in variable which evaluate to the name of the current module.", "However, if a module is being run directly (as in myscript.py above), then __name__ instead is set to the string \"__main__\".", "Thus, you can test whether your script is being run directly or being imported by something else by testing"], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__name__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "myscript.py", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "__name__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "\"__main__\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n if __name__ == \"__main__\":\n    ...\n</code>\n</pre>\n", "senID": 4}, {"text": ["If that code is being imported into another module, the various function and class definitions will be imported, but the main() code won't get run.", "As a basic example, consider the following two scripts:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "main()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # file one.py\ndef func():\n    print(\"func() in one.py\")\n\nprint(\"top-level in one.py\")\n\nif __name__ == \"__main__\":\n    print(\"one.py is being run directly\")\nelse:\n    print(\"one.py is being imported into another module\")\n\n# file two.py\nimport one\n\nprint(\"top-level in two.py\")\none.func()\n\nif __name__ == \"__main__\":\n    print(\"two.py is being run directly\")\nelse:\n    print(\"two.py is being imported into another module\")\n</code>\n</pre>\n", "senID": 6}, {"text": ["Now, if you invoke the interpreter as"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n python one.py\n</code>\n</pre>\n", "senID": 8}, {"text": ["The output will be"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n top-level in one.py\none.py is being run directly\n</code>\n</pre>\n", "senID": 10}, {"text": ["If you run two.py instead:"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "two.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n python two.py\n</code>\n</pre>\n", "senID": 12}, {"text": ["You get"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n top-level in one.py\none.py is being imported into another module\ntop-level in two.py\nfunc() in one.py\ntwo.py is being run directly\n</code>\n</pre>\n", "senID": 14}, {"text": ["Thus, when module one gets loaded, its __name__ equals \"one\" instead of __main__."], "childNum": 4, "tag": "p", "senID": 15, "childList": [{"text": "one", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__name__", "childNum": 0, "tag": "code", "childList": []}, {"text": "\"one\"", "childNum": 0, "tag": "code", "childList": []}, {"text": "__main__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The syntax *args in a function declaration lets you accept an arbitrary number of parameters (other than those explicitly named, like string, sleeptime,and lock in your example):"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "*args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "string", "childNum": 0, "tag": "code", "childList": []}, {"text": "sleeptime", "childNum": 0, "tag": "code", "childList": []}, {"text": "lock", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def printStuff(*args):\n    for arg in args:\n    \tprint arg\n\nprintStuff(1, 2, \"Hello World\")\n\n1\n2\nHello World\n</code>\n</pre>\n", "senID": 1}, {"text": ["The syntax *args in a function call lets you call with the items of the list args as further arguments:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "*args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "args", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n args = [4, 5, \"Goodbye\"]\nprintStuff(2, 3, *args)\n\n2\n3\n4\n5\nGoodbye\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The simplest explanation (imho) is the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Create the following files."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # a.py\nimport b\n</code>\n</pre>\n", "senID": 2}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n # b.py\nprint \"Hello World from %s!\" % __name__\n\nif __name__ == '__main__':\n    print \"Hello World from %s!\" % __name__\n</code>\n</pre>\n", "senID": 4}, {"text": ["Running them will get you this output:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n $ python a.py\nHello World from b!\n\n$ python b.py\nHello World from __main__!\nHello World from __main__!\n</code>\n</pre>\n", "senID": 6}], [{"text": ["*args and **kwargs mean:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def on_the_menu(arg, *args, **kwargs):\n       print arg\n       print args\n       print kwargs\n\n  &gt;&gt;&gt; on_the_menu(5, \"spam\", \"eggs\", \"ham\", sausage=\"and spam\", spam=\"plenty\")\n  5\n  ('spam', 'eggs', 'ham')\n  {'sausage': 'and spam', 'spam': 'plenty'}\n</code>\n</pre>\n", "senID": 1}, {"text": ["And args and kwargs  are only variable names.", "Name them as you like.", "For example sausage or spam.", "On the other hand, don't.", ":)"], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "args", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "kwargs", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "sausage", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "spam", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["if __name__ == \"__main__\" is the part that runs when the script is run from (say) the command line using a command like python myscript.py."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "if __name__ == \"__main__\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "python myscript.py", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["*args allows you to give the function more arguments than are explicitly required in the function definition."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "*args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Please chech the following page, it has an excellent example:\nWhat is 'ifname== \"main\"' for?"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "What is 'ifname== \"main\"' for?", "tag": "a", "pos": 0, "childList": [{"text": "name", "tag": "strong"}, {"text": "main", "tag": "strong"}], "childNum": 2, "href": "http://effbot.org/pyfaq/tutor-what-is-if-name-main-for.htm"}, {"text": "name", "childNum": 0, "tag": "strong", "childList": []}, {"text": "main", "childNum": 0, "tag": "strong", "childList": []}]}]]