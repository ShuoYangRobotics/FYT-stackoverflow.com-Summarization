[[{"code": "<pre>\n<code>\n class Struct:\n    def __init__(self, **entries): \n        self.__dict__.update(entries)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Then, you can use:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; args = {'a': 1, 'b': 2}\n&gt;&gt;&gt; s = Struct(**args)\n&gt;&gt;&gt; s\n&lt;__main__.Struct instance at 0x01D6A738&gt;\n&gt;&gt;&gt; s.a\n1\n&gt;&gt;&gt; s.b\n2\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n class obj(object):\n    def __init__(self, d):\n        for a, b in d.items():\n            if isinstance(b, (list, tuple)):\n               setattr(self, a, [obj(x) if isinstance(x, dict) else x for x in b])\n            else:\n               setattr(self, a, obj(b) if isinstance(b, dict) else b)\n\n\n&gt;&gt;&gt; x = obj(d)\n&gt;&gt;&gt; x.b.c\n2\n&gt;&gt;&gt; x.d[1].foo\n'bar'\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n x = type('new_dict', (object,), d)\n</code>\n</pre>\n", "senID": 0}, {"text": ["then add recursion to this and you're done."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["edit this is how I'd implement it:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d\n{'a': 1, 'b': {'c': 2}, 'd': ['hi', {'foo': 'bar'}]}\n&gt;&gt;&gt; def obj_dic(d):\n    top = type('new', (object,), d)\n    seqs = tuple, list, set, frozenset\n    for i, j in d.items():\n    \tif isinstance(j, dict):\n    \t    setattr(top, i, obj_dic(j))\n    \telif isinstance(j, seqs):\n    \t    setattr(top, i, \n    \t\t    type(j)(obj_dic(sj) if isinstance(sj, dict) else sj for sj in j))\n    \telse:\n    \t    setattr(top, i, j)\n    return top\n\n&gt;&gt;&gt; x = obj_dic(d)\n&gt;&gt;&gt; x.a\n1\n&gt;&gt;&gt; x.b.c\n2\n&gt;&gt;&gt; x.d[1].foo\n'bar'\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; def dict2obj(d):\n        if isinstance(d, list):\n    \t    d = [dict2obj(x) for x in d]\n        if not isinstance(d, dict):\n            return d\n        class C(object):\n    \t    pass\n        o = C()\n        for k in d:\n            o.__dict__[k] = dict2obj(d[k])\n        return o\n\n\n&gt;&gt;&gt; d = {'a': 1, 'b': {'c': 2}, 'd': [\"hi\", {'foo': \"bar\"}]}\n&gt;&gt;&gt; x = dict2obj(d)\n&gt;&gt;&gt; x.a\n1\n&gt;&gt;&gt; x.b.c\n2\n&gt;&gt;&gt; x.d[1].foo\n'bar'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This should get your started:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class dict2obj(object):\n    def __init__(self, d):\n        self.__dict__['d'] = d\n\n    def __getattr__(self, key):\n        value = self.__dict__['d'][key]\n        if type(value) == type({}):\n            return dict2obj(value)\n\n        return value\n\nd = {'a': 1, 'b': {'c': 2}, 'd': [\"hi\", {'foo': \"bar\"}]}\n\nx = dict2obj(d)\nprint x.a\nprint x.b.c\nprint x.d[1].foo\n</code>\n</pre>\n", "senID": 1}, {"text": ["It doesn't work for lists, yet.", "You'll have to wrap the lists in a UserList and overload __getitem__ to wrap dicts."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "__getitem__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Taking what I feel are the best aspects of the previous examples, here's what I came up with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Struct:\n  '''The recursive class for building and representing objects with.'''\n  def __init__(self, obj):\n    for k, v in obj.iteritems():\n      if isinstance(v, dict):\n        setattr(self, k, Struct(v))\n      else:\n        setattr(self, k, v)\n  def __getitem__(self, val):\n    return self.__dict__[val]\n  def __repr__(self):\n    return '{%s}' % str(', '.join('%s : %s' % (k, repr(v)) for\n      (k, v) in self.__dict__.iteritems()))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["x.__dict__.update(d) should do fine."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "x.__dict__.update(d)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Here is another way to implement SilentGhost's original suggestion:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def dict2obj(d):\n  if isinstance(d, dict):\n    n = {}\n    for item in d:\n      if isinstance(d[item], dict):\n        n[item] = dict2obj(d[item])\n      elif isinstance(d[item], (list, tuple)):\n        n[item] = [dict2obj(elem) for elem in d[item]]\n      else:\n        n[item] = d[item]\n    return type('obj_from_dict', (object,), n)\n  else:\n    return d\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's another implementation:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class DictObj(object):\n    def __init__(self, d):\n        self.__dict__ = d\n\ndef dict_to_obj(d):\n    if isinstance(d, (list, tuple)): return map(dict_to_obj, d)\n    elif not isinstance(d, dict): return d\n    return DictObj(dict((k, dict_to_obj(v)) for (k,v) in d.iteritems()))\n</code>\n</pre>\n", "senID": 1}, {"text": ["[Edit] Missed bit about also handling dicts within lists, not just other dicts.", "Added fix."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Building off what i did for this question:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "what i did for this question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1325673/python-how-to-add-property-to-a-class-dynamically/1333275#1333275"}]}, {"code": "<pre>\n<code>\n class data(object):\n    def __init__(self,*args,**argd):\n        self.__dict__.update(dict(*args,**argd))\n\ndef makedata(d):\n    d2 = {}\n    for n in d:\n        d2[n] = trydata(d[n])\n    return data(d2)\n\ndef trydata(o):\n    if isinstance(o,dict):\n        return makedata(o)\n    elif isinstance(o,list):\n        return [trydata(i) for i in o]\n    else:\n        return o\n</code>\n</pre>\n", "senID": 1}, {"text": ["You call makedata on the dictionary you want converted (or maybe trydata depending on what you expect as input) and it spits out a data object."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Notes:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "You can add elifs to trydata if you need more funtionality", "tag": "none", "senID": 4}, {"text": "Obviously this won't work if you want x.a = {} or similar", "tag": "none", "senID": 5}, {"text": "If you want a readonly version, use the class data from ", "tag": "none", "senID": 6}]}], [{"code": "<pre>\n<code>\n class Struct(object):\n    \"\"\"Comment removed\"\"\"\n    def __init__(self, data):\n        for name, value in data.iteritems():\n            setattr(self, name, self._wrap(value))\n\n    def _wrap(self, value):\n        if isinstance(value, (tuple, list, set, frozenset)): \n            return type(value)([self._wrap(v) for v in value])\n        else:\n            return Struct(value) if isinstance(value, dict) else value\n</code>\n</pre>\n", "senID": 0}, {"text": ["Can be used with any sequence/dict/value structure of any depth."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Let me explain a solution I almost used some time ago.", "But first, the reason I did not is illustrated by the fact that the following code:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "almost", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n d = {'from': 1}\nx = dict2obj(d)\n\nprint x.from\n</code>\n</pre>\n", "senID": 1}, {"text": ["gives this error:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n File \"test.py\", line 20\n    print x.from == 1\n                ^\nSyntaxError: invalid syntax\n</code>\n</pre>\n", "senID": 3}, {"text": ["Because \"from\" is a Python keyword there are certain dictionary keys you cannot allow."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "hr", "senID": 5}, {"text": ["Now my solution allows access to the dictionary items by using their names directly.", "But it also allows you to use \"dictionary semantics\".", "Here is the code with example usage:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n class dict2obj(dict):\n    def __init__(self, dict_):\n        super(dict2obj, self).__init__(dict_)\n        for key in self:\n            item = self[key]\n            if isinstance(item, list):\n                for idx, it in enumerate(item):\n                    if isinstance(it, dict):\n                        item[idx] = dict2obj(it)\n            elif isinstance(item, dict):\n                self[key] = dict2obj(item)\n\n    def __getattr__(self, key):\n        return self[key]\n\nd = {'a': 1, 'b': {'c': 2}, 'd': [\"hi\", {'foo': \"bar\"}]}\n\nx = dict2obj(d)\n\nassert x.a == x['a'] == 1\nassert x.b.c == x['b']['c'] == 2\nassert x.d[1].foo == x['d'][1]['foo'] == \"bar\"\n</code>\n</pre>\n", "senID": 7}], [{"text": ["thank you for all your suggestions.", "i've put the together for comparison and benchmarked them.", "you can find the results here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://pastebin.org/10514"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pastebin.org/10514", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pastebin.org/10514"}]}], [{"text": ["I stumbled upon the case I needed to recursively convert a list of dicts to list of objects, so based on Roberto's snippet here what did the work for me:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def dict2obj(d):\n    if isinstance(d, dict):\n        n = {}\n        for item in d:\n            if isinstance(d[item], dict):\n                n[item] = dict2obj(d[item])\n            elif isinstance(d[item], (list, tuple)):\n                n[item] = [dict2obj(elem) for elem in d[item]]\n            else:\n                n[item] = d[item]\n        return type('obj_from_dict', (object,), n)\n    elif isinstance(d, (list, tuple,)):\n        l = []\n        for item in d:\n            l.append(dict2obj(item))\n        return l\n    else:\n        return d\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that any tuple will be converted to its list equivalent, for obvious reasons. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Hope this helps someone as much as all your answers did for me, guys."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]