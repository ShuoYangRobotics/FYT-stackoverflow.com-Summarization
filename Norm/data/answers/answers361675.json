[[{"text": ["Both are valuable.", "I use both doctest and a further unit testing framework (nose) taking the place of unittest.", "I use doctest for cases where the test is giving an example of usage that is actually useful as documentation.", "Generally I don't make these tests comprehensive, aiming solely for informative.", "I'm effectively using doctest in reverse:  not to test my code is correct based on my doctest, but to check that my documentation is correct based on the code."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "nose", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose/"}]}, {"text": ["The reason is that I find comprehensive doctests will clutter your documentation far too much, so you will either end up with either unusable docstrings, or incomplete testing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For actually testing the code, the goal is to thoroughly test every case, rather than illustrate what is does by example, which is a different goal which I think is better met by other frameworks."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "code", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["I use unittest almost exclusively."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Once in a while, I'll put some stuff in a docstring that's usable by doctest."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["95% of the test cases are unittest."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Why?", "I like keeping docstrings somewhat shorter and more to the point.", "Sometimes test cases help clarify a docstring.", "Most of the time, the application's test cases are too long for a docstring."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you're just getting started with the idea of unit testing, I would start with doctest because it is so simple to use.", "It also naturally provides some level of documentation.", "And for more comprehensive testing with doctest, you can place tests in an external file so it doesn't clutter up your documentation."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "doctest", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "doctest", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["I would suggest unittest if you're coming from a background of having used JUnit or something similar, where you want to be able to write unit tests in generally the same way as you have been elsewhere."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "unittest", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Using both is a valid and rather simple option.", "The doctest module provides the DoctTestSuite and DocFileSuite methods which create a unittest-compatible testsuite from a module or file, respectively."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "doctest", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "DoctTestSuite", "childNum": 0, "tag": "code", "childList": []}, {"text": "DocFileSuite", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So I use both and typically use doctest for simple tests with functions that require little or no setup (simple types for arguments).", "I actually think a few doctest tests help document the function, rather than detract from it."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "help", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["But for more complicated cases, and for a more comprehensive set of test cases, I use unittest which provides more control and flexibility."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I almost never use doctests.", "I want my code to be self documenting, and the docstrings provide the documentation to the user.", "IMO adding hundreds of lines of tests to a module makes the docstrings far less readable.", "I also find unit tests easier to modify when needed. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I use unittest exclusively; I think doctest clutters up the main module too much.", "This probably has to do with writing thorough tests."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Another advantage of doctesting is that you get to make sure your code does what your documentation says it does.", "After a while, software changes can make your documentation and code do different things.", ":-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I prefer the discovery based systems (\"nose\" and \"py.test\", using the former currently)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["doctest is nice when the test is also good as a documentation, otherwise they tend to clutter the code too much."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]