[[{"text": ["Not sure why you need it, knowing size is almost useless.", "But why not - Just use the sys.getsizeof function defined in the sys module."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "sys.getsizeof", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sys.html#sys.getsizeof"}, {"text": "sys", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Usage example, in python 3.0:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; x = 2\n&gt;&gt;&gt; sys.getsizeof(x)\n14\n&gt;&gt;&gt; sys.getsizeof(sys.getsizeof)\n32\n&gt;&gt;&gt; sys.getsizeof('this')\n38\n&gt;&gt;&gt; sys.getsizeof('this also')\n48\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you are in python &lt; 2.6 and don't have sys.getsizeof you can use this extensive module instead.", "Never used it though."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "sys.getsizeof", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "this extensive module", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/546530/"}]}], [{"text": ["First: an answer."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\n\ntry: print sys.getsizeof(object)\nexcept AttributeError:\n    print \"sys.getsizeof exists in Python \u22652.6\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Discussion:\nIn Python, you cannot ever access \"direct\" memory addresses.", "Why, then, would you need or want to know how many such addresses are occupied by a given object??", "It's a question that's entirely inappropriate at that level of abstraction.", "When you're painting your house, you don't ask what frequencies of light are absorbed or reflected by each of the constituent atoms within the paint, you just ask what color it is -- the details of the physical characteristics that create that color are beside the point.", "Similarly, the number of bytes of memory that a given Python object occupies is beside the point."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["So, why are you trying to use Python to write C code?", ":)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["For numpy arrays, getsizeof doesn't work - for me it always returns 40 for some reason:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "getsizeof", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from pylab import *\nfrom sys import getsizeof\nA = rand(10)\nB = rand(10000)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then (in ipython):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n In [64]: getsizeof(A)\nOut[64]: 40\n\nIn [65]: getsizeof(B)\nOut[65]: 40\n</code>\n</pre>\n", "senID": 3}, {"text": ["Happily, though:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n In [66]: A.nbytes\nOut[66]: 80\n\nIn [67]: B.nbytes\nOut[67]: 80000\n</code>\n</pre>\n", "senID": 5}], [{"text": ["This can be more complicated than it looks depending on how you want to count things.", "For instance, if you have a list of ints, do you want the size of the list containing the references to the ints?", "(ie.", "list only, not what is contained in it), or do you want to include the actual data pointed to, in which case you need to deal with duplicate references, and how to prevent double-counting when two objects contain references to the same object. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "references", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["You may want to take a look at one of the python memory profilers, such as pysizer to see if they meet your needs."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "pysizer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pysizer.8325.org/"}]}], [{"text": ["It might be useful to see why your process eats up memory..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Besides int and float, nothing is really fixed in size (And int is now long in Python 3, so so much for that).", "So you'd have to make a function sizeof function that specially works on the object based on type() or something.", "Either way, sizeof messes seem unpythonic"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]