[[{"text": ["If you have python2.6 you can simply use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import multiprocessing\n\nmultiprocessing.cpu_count()\n</code>\n</pre>\n", "senID": 1}, {"text": ["http://docs.python.org/library/multiprocessing.html#multiprocessing.cpu_count"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/library/multiprocessing.html#multiprocessing.cpu_count", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html#multiprocessing.cpu_count"}]}], [{"code": "<pre>\n<code>\n import os,re,subprocess\ndef  determineNumberOfCPUs():\n    \"\"\" Number of virtual or physical CPUs on this system, i.e.\n    user/real as output by time(1) when called with an optimally scaling\n    userspace-only program\"\"\"\n\n    # Python 2.6+\n    try:\n        import multiprocessing\n        return multiprocessing.cpu_count()\n    except (ImportError,NotImplementedError):\n        pass\n\n    # POSIX\n    try:\n        res = int(os.sysconf('SC_NPROCESSORS_ONLN'))\n\n        if res &gt; 0:\n            return res\n    except (AttributeError,ValueError):\n        pass\n\n    # Windows\n    try:\n        res = int(os.environ['NUMBER_OF_PROCESSORS'])\n\n        if res &gt; 0:\n            return res\n    except (KeyError, ValueError):\n        pass\n\n    # jython\n    try:\n        from java.lang import Runtime\n        runtime = Runtime.getRuntime()\n        res = runtime.availableProcessors()\n        if res &gt; 0:\n            return res\n    except ImportError:\n        pass\n\n    # BSD\n    try:\n        sysctl = subprocess.Popen(['sysctl', '-n', 'hw.ncpu'],\n                                      stdout=subprocess.PIPE)\n        scStdout = sysctl.communicate()[0]\n        res = int(scStdout)\n\n        if res &gt; 0:\n            return res\n    except (OSError, ValueError):\n        pass\n\n    # Linux\n    try:\n        res = open('/proc/cpuinfo').read().count('processor\\t:')\n\n        if res &gt; 0:\n            return res\n    except IOError:\n        pass\n\n    # Solaris\n    try:\n        pseudoDevices = os.listdir('/devices/pseudo/')\n        expr = re.compile('^cpuid@[0-9]+$')\n\n        res = 0\n        for pd in pseudoDevices:\n            if expr.match(pd) != None:\n                res += 1\n\n        if res &gt; 0:\n            return res\n    except OSError:\n        pass\n\n    # Other UNIXes (heuristic)\n    try:\n        try:\n            dmesg = open('/var/run/dmesg.boot').read()\n        except IOError:\n            dmesgProcess = subprocess.Popen(['dmesg'], stdout=subprocess.PIPE)\n            dmesg = dmesgProcess.communicate()[0]\n\n        res = 0\n        while '\\ncpu' + str(res) + ':' in dmesg:\n            res += 1\n\n        if res &gt; 0:\n            return res\n    except OSError:\n        pass\n\n    raise Exception('Can not determine number of CPUs on this system')\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can also look how Parallel Python does it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Parallel Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.parallelpython.com/"}]}], [{"text": ["Can't figure out how to add to the code or reply to the message but here's support for jython that you can tack in before you give up:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # jython\ntry:\n    from java.lang import Runtime\n    runtime = Runtime.getRuntime()\n    res = runtime.availableProcessors()\n    if res &gt; 0:\n        return res\nexcept ImportError:\n    pass\n</code>\n</pre>\n", "senID": 1}]]