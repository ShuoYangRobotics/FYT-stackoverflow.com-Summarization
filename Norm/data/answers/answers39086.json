[[{"text": ["Use the fileinput module.", "For example, the following adds line numbers to a file, in-place:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "fileinput", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import fileinput\n\nfor line in fileinput.input(\"test.txt\", inplace=1):\n    print \"%d: %s\" % (fileinput.filelineno(), line),\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I guess something like this should do it.", "It basically writes the content to a new file and replaces the old file with the new file:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from tempfile import mkstemp\nfrom shutil import move\nfrom os import remove, close\n\ndef replace(file, pattern, subst):\n    #Create temp file\n    fh, abs_path = mkstemp()\n    new_file = open(abs_path,'w')\n    old_file = open(file)\n    for line in old_file:\n        new_file.write(line.replace(pattern, subst))\n    #close temp file\n    new_file.close()\n    close(fh)\n    old_file.close()\n    #Remove original file\n    remove(file)\n    #Move new file\n    move(abs_path, file)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's another example that was tested, and will match search &amp; replace patterns:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import fileinput\nimport sys\n\ndef replaceAll(file,searchExp,replaceExp):\n    for line in fileinput.input(file, inplace=1):\n        if searchExp in line:\n            line = line.replace(searchExp,replaceExp)\n        sys.stdout.write(line)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example use:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n replaceAll(\"/fooBar.txt\",\"Hello\\sWorld!$\",\"Goodbye\\sWorld.\")\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This should work: (inplace editiing)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import fileinput\n\nfor line in fileinput(files, inplace = 1): # Does a list of files, and writes redirects STDOUT to the file in question\n      print line.replace(\"foo\", \"bar\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As lassevk suggests, write out the new file as you go, here is some example code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fin = open(\"a.txt\")\nfout = open(\"b.txt\", \"wt\")\nfor line in fin:\n    fout.write( line.replace('foo', 'bar') )\nfin.close()\nfout.close()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Create a new file, copy lines from the old to the new, and do the replacing before you write the lines to the new file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["@chutsu @jml: Eli is correct.", "When using fileinput with inplace=True, stout is redirected to the file.", "So, in his for loop, the output from the print statements is being sent to the file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What's really happening is that a backup of the original file is made, and then stdout is redirected to a new file with the same name as the original file.", "The result is an \"in place\" edit."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]