[[{"text": ["What you'll see sometimes is the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Abstract1( object ):\n    \"\"\"Some description that tells you it's abstract,\n    often listing the methods you're expected to supply.\"\"\"\n    def aMethod( self ):\n        raise NotImplementedError( \"Should have implemented this\" )\n</code>\n</pre>\n", "senID": 1}, {"text": ["Because Python doesn't have (and doesn't need) a formal Interface contract, the Java-style distinction between abstraction and interface doesn't exist.", "If someone goes through the effort to define a formal interface, it will also be an abstract class.", "The only differences would be in the stated intent in the docstring.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["And the difference between abstract and interface is a hairsplitting thing when you have duck typing."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Java uses interfaces because it doesn't have multiple inheritance."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Because Python has multiple inheritance, you may also see something like this"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n class SomeAbstraction( object ):\n    pass # lots of stuff - but missing something\n\nclass Mixin1( object ):\n    def something( self ):\n        pass # one implementation\n\nclass Mixin2( object ):\n    def something( self ):\n        pass # another\n\nclass Concrete1( SomeAbstraction, Mixin1 ):\n    pass\n\nclass Concrete2( SomeAbstraction, Mixin2 ):\n    pass\n</code>\n</pre>\n", "senID": 6}, {"text": ["This uses a kind of abstract superclass with mixins to create concrete subclasses that are disjoint."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Python >= 2.6 has Abstract Base Classes."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Abstract Base Classes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/abc.html"}]}, {"text": ["There is also the Zope Interface module, which is used by projects outside of zope, like twisted.", "I'm not realyl familiar with it, but there's a wiki page here that might help."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Zope Interface", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/zope.interface"}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://wiki.zope.org/Interfaces/FrontPage"}]}, {"text": ["In general, you don't need the concept of abstract classes, or interfaces in python (edited - see S.Lott's answer for details)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Python doesn't really have either concept."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It uses duck typing, which removed the need for interfaces (at least for the computer :-))"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Python &lt;= 2.5:\nBase classes obviously exist, but there is no explicit way to mark a method as 'pure virtual', so the class isn't really abstract."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Python >= 2.6:\nAbstract base classes do exist (http://docs.python.org/library/abc.html).", "And allow you to specify methods that must be implemented in subclasses.", "I don't much like the syntax, but the feature is there.", "Most of the time it's probably better to use duck typing from the 'using' client side."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "exist", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3119/"}, {"text": "http://docs.python.org/library/abc.html", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/abc.html"}]}], [{"text": ["In general, interfaces are used only in languages that use the single-inheritance class model.", "In these single-inheritance languages, interfaces are typically used if any class could use a particular method or set of methods.", "Also in these single-inheritance languages, abstract classes are used to either have defined class variables in addition to none or more methods, or to exploit the single-inheritance model to limit the range of classes that could use a set of methods.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Languages that support the multiple-inheritance model tend to use only classes or abstract base classes and not interfaces.", "Since Python supports multiple inheritance, it does not use interfaces and you would want to use base classes or abstract base classes."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://docs.python.org/library/abc.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/library/abc.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/abc.html"}]}]]