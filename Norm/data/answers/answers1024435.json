[[{"text": ["Use the reindent.py script that you find in the Tools/scripts/ directory of your Python installation:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "reindent.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Tools/scripts/", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Have a look at that script for detailed usage instructions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you're using Vim, see :h retab."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Vim", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.vim.org/"}, {"href": "http://vimdoc.sourceforge.net/htmldoc/change.html#:retab", "text": ":h retab", "childNum": 1, "tag": "a", "childList": [{"text": ":h retab", "tag": "code"}]}, {"text": ":h retab", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n*:ret* *:retab*\n:[range]ret[ab][!] [new_tabstop]\n                        Replace all sequences of white-space containing a\n                        &lt;Tab&gt; with new strings of white-space using the new\n                        tabstop value given.  If you do not specify a new\n                        tabstop size or it is zero, Vim uses the current value\n                        of 'tabstop'.\n                        The current value of 'tabstop' is always used to\n                        compute the width of existing tabs.\n                        With !, Vim also replaces strings of only normal\n                        spaces with tabs where appropriate.\n                        With 'expandtab' on, Vim replaces all tabs with the\n                        appropriate number of spaces.\n                        This command sets 'tabstop' to the new value given,\n                        and if performed on the whole file, which is default,\n                        should not make any visible change.\n                        Careful: This command modifies any &lt;Tab&gt; characters\n                        inside of strings in a C program.  Use \"\\t\" to avoid\n                        this (that's a good habit anyway).\n                        \":retab!\" may also change a sequence of spaces by\n                        &lt;Tab&gt; characters, which can mess up a printf().\n                        {not in Vi}\n                        Not available when |+ex_extra| feature was disabled at\n                        compile time.\n</pre>\n", "senID": 1}, {"text": ["For example, if you simply type"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n:ret\n</pre>\n", "senID": 3}, {"text": ["all your tabs will be expanded into spaces."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You may want to"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n:se et  \" shorthand for :set expandtab\n</pre>\n", "senID": 6}, {"text": ["to make sure that any new lines will not use literal tabs."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "hr", "senID": 8}, {"text": ["If you're not using Vim,"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\nperl -i.bak -pe \"s/\\t/' 'x(8-pos()%8)/eg\" file.py\n</pre>\n", "senID": 10}, {"text": ["will replace tabs with spaces, assuming tab stops every 8 characters, in file.py (with the original going to file.py.bak, just in case).", "Replace the 8s with 4s if your tab stops are every 4 spaces instead."], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "file.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "file.py.bak", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["There is also PythonTidy (since you said you like HTMLTidy)\nIt can be found here: http://pypi.python.org/pypi/PythonTidy/1.16\nIt can do a lot more than just clean up tabs though.", "If you like that type of thing it's worth a look."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pypi.python.org/pypi/PythonTidy/1.16", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/PythonTidy/1.16"}]}], [{"text": ["If you're lazy (like me), you can also download a trial version of Wingware Python IDE, which has an auto-fix tool for messed up indentation.", "It works pretty well.", "http://www.wingware.com/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.wingware.com/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.wingware.com/"}]}], [{"text": ["Using vim, it shouldn't be more involved than hitting Esc, and then typing.."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n :%s/\\t/    /g\n</code>\n</pre>\n", "senID": 1}, {"text": ["..on the file you want to change.", "That will convert all tabs to 4 spaces.", "If you have inconsistent spacing as well, then that will be more difficult."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Try emacs.", "It has good support for indentation needed in Python.", "Please check this link http://python.about.com/b/2007/09/24/emacs-tips-for-python-programmers.htm"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://python.about.com/b/2007/09/24/emacs-tips-for-python-programmers.htm", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://python.about.com/b/2007/09/24/emacs-tips-for-python-programmers.htm"}]}, {"text": ["cheers"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]