[[{"text": ["Simple solution: Use theHSL or HSVcolor space instead of rgb (convert it to RGB afterwards if you need this).", "The difference is the meaning of the tuple: Where RGB means values for Red, Green and Blue, in HSL the H is the color (120 degree or 0.33 meaning green for example) and the S is for saturation and the V for the brightness.", "So keep the H at a fixed value (or for even more random colors you could randomize it by add/sub a small random number) and randomize the S and the V. See the wikipedia article."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Use theHSL or HSVcolor space", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "HSL or HSV", "tag": "a"}]}, {"text": "HSL or HSV", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/HSL%5Fand%5FHSV"}, {"text": "wikipedia", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/HSL%5Fand%5FHSV"}]}], [{"text": ["Check out the colorsys module:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "colorsys", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["http://docs.python.org/library/colorsys.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/colorsys.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/colorsys.html"}]}, {"text": ["Use the HSL or HSV color space.", "Randomize the hue to be close to green, then choose completely random stuff for the saturation and V (brightness)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["As others have suggested, generating random colours is much easier in the HSV colour space (or HSL, the difference is pretty irrelevant for this)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, code to generate random \"green'ish\" colours, and (for demonstration purposes) display them as a series of simple coloured HTML span tags:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python2.5\n\"\"\"Random green colour generator, written by dbr, for\nhttp://stackoverflow.com/questions/1586147/how-to-generate-random-greenish-colors\n\"\"\"\n\ndef hsv_to_rgb(h, s, v):\n    \"\"\"Converts HSV value to RGB values\n    Hue is in range 0-359 (degrees), value/saturation are in range 0-1 (float)\n\n    Direct implementation of:\n    http://en.wikipedia.org/wiki/HSL_and_HSV#Conversion_from_HSV_to_RGB\n    \"\"\"\n    h, s, v = [float(x) for x in (h, s, v)]\n\n    hi = (h / 60) % 6\n    hi = int(round(hi))\n\n    f = (h / 60) - (h / 60)\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n\n    if hi == 0:\n        return v, t, p\n    elif hi == 1:\n        return q, v, p\n    elif hi == 2:\n        return p, v, t\n    elif hi == 3:\n        return p, q, v\n    elif hi == 4:\n        return t, p, v\n    elif hi == 5:\n        return v, p, q\n\ndef test():\n    \"\"\"Check examples on..\n    http://en.wikipedia.org/wiki/HSL_and_HSV#Examples\n    ..work correctly\n    \"\"\"\n    def verify(got, expected):\n        if got != expected:\n            raise AssertionError(\"Got %s, expected %s\" % (got, expected))\n\n    verify(hsv_to_rgb(0, 1, 1), (1, 0, 0))\n    verify(hsv_to_rgb(120, 0.5, 1.0), (0.5, 1, 0.5))\n    verify(hsv_to_rgb(240, 1, 0.5), (0, 0, 0.5))\n\ndef main():\n    \"\"\"Generate 50 random RGB colours, and create some simple coloured HTML\n    span tags to verify them.\n    \"\"\"\n    test() # Run simple test suite\n\n    from random import randint, uniform\n\n    for i in range(50):\n        # Tweak these values to change colours/variance\n        h = randint(90, 140) # Select random green'ish hue from hue wheel\n        s = uniform(0.2, 1)\n        v = uniform(0.3, 1)\n\n        r, g, b = hsv_to_rgb(h, s, v)\n\n        # Convert to 0-1 range for HTML output\n        r, g, b = [x*255 for x in (r, g, b)]\n\n        print \"&lt;span style='background:rgb(%i, %i, %i)'&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;\" % (r, g, b)\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 2}, {"text": ["The output (when viewed in a web-browser) should look something along the lines of:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"src": "http://img197.imageshack.us/img197/5770/randomgreens.png", "tag": "img", "senID": 4}, {"text": ["Edit: I didn't know about the colorsys module.", "Instead of the above hsv_to_rgb function, you could use colorsys.hsv_to_rgb, which makes the code slightly shorter (it's not quite a drop-in replacement, as my hsv_to_rgb function expects the hue to be in degrees instead of 0-1):"], "childNum": 5, "tag": "p", "senID": 5, "childList": [{"text": "Edit", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "hsv_to_rgb", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://docs.python.org/library/colorsys.html#colorsys.hsv%5Fto%5Frgb", "text": "colorsys.hsv_to_rgb", "childNum": 0, "tag": "a", "childList": []}, {"text": "slightly", "childNum": 0, "tag": "em", "childList": []}, {"text": "hsv_to_rgb", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/env python2.5\nfrom colorsys import hsv_to_rgb\nfrom random import randint, uniform\n\nfor x in range(50):\n    h = uniform(0.25, 0.38) # Select random green'ish hue from hue wheel\n    s = uniform(0.2, 1)\n    v = uniform(0.3, 1)\n\n    r, g, b = hsv_to_rgb(h, s, v)\n\n    # Convert to 0-1 range for HTML output\n    r, g, b = [x*255 for x in (r, g, b)]\n\n    print \"&lt;span style='background:rgb(%i, %i, %i)'&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;\" % (r, g, b)\n</code>\n</pre>\n", "senID": 6}], [{"text": ["If you stick with RGB, you basically just need to make sure the G value is greater than the R and B, and try to keep the blue and red values similar so that the hue doesn't go too crazy.", "Extending from Slaks, maybe something like (I know next to nothing about Python):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n greenval = randint(100, 255)\nredval = randint(20,(greenval - 60))\nblueval = randint((redval - 20), (redval + 20))\ncolor = (redval, greenval, blueval)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["So in this case you are lucky enough to want variations on a primary color, but for artistic uses like this it is better to specify color wheel coordinates rather than primary color magnitudes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You probably want something from the colorsys module like:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "colorsys", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n colorsys.hsv_to_rgb(h, s, v)\n    Convert the color from HSV coordinates to RGB coordinates.\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The solution with HSx color space is a very good one.", "However, if you need something extremely simplistic and have no specific requirements about the distribution of the colors (like uniformity), a simplistic RGB-based solution would be just to make sure that G value is greater than both R and B"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n rr = randint(100, 200)\nrb = randint(100, 200)\nrg = randint(max(rr, rb) + 1, 255)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will give you \"greenish\" colors.", "Some of them will be ever so slightly greenish.", "You can increase the guaranteed degree of greenishness by increasing (absolutely or relatively) the lower bound in the last randint call."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "randint", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["What you want is to work in terms of HSL instead of RGB.", "You could find a range of hue that satisfies \"greenish\" and pick a random hue from it.", "You could also pick random saturation and lightness but you'll probably want to keep your saturation near 1 and your lightness around 0.5 but you can play with them."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "HSL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/HSL%5Fand%5FHSV"}]}, {"text": ["Below is some actionscript code to convert HSL to RGB.", "I haven't touched python in a while or it'd post the python version."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I find that greenish is something like 0.47*PI to 0.8*PI."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n /**\n@param h hue [0, 2PI]\n@param s saturation [0,1]\n@param l lightness [0,1]\n@return object {r,g,b} {[0,1],[0,1][0,1]}\n*/\npublic function hslToRGB(h:Number, s:Number, l:Number):Color\n{\n    var q:Number = (l&lt;0.5)?l*(1+s):l+s-l*s;\n    var p:Number = 2*l-q;\n    var h_k:Number = h/(Math.PI*2);\n    var t_r:Number = h_k+1/3;\n    var t_g:Number = h_k;\n    var t_b:Number = h_k-1/3;\n    if (t_r &lt; 0) ++t_r; else if (t_r &gt; 1) --t_r;\n    if (t_g &lt; 0) ++t_g; else if (t_g &gt; 1) --t_g;\n    if (t_b &lt; 0) ++t_b; else if (t_b &gt; 1) --t_b;\n    var c:Color = new Color();\n    if (t_r &lt; 1/6) c.r = p+((q-p)*6*t_r);\n    else if (t_r &lt; 1/2) c.r = q;\n    else if (t_r &lt; 2/3) c.r = p+((q-p)*6*(2/3-t_r));\n    else c.r = p;\n    if (t_g &lt; 1/6) c.g = p+((q-p)*6*t_g);\n    else if (t_g &lt; 1/2) c.g = q;\n    else if (t_g &lt; 2/3) c.g = p+((q-p)*6*(2/3-t_g));\n    else c.g = p;\n    if (t_b &lt; 1/6) c.b = p+((q-p)*6*t_b);\n    else if (t_b &lt; 1/2) c.b = q;\n    else if (t_b &lt; 2/3) c.b = p+((q-p)*6*(2/3-t_b));\n    else c.b = p;\n    return c;\n}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The simplest way to do this is to make sure that the red and blue components are the same, like this: (Forgive my Python)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n rb = randint(100, 200)\ncolor = (rb, randint(120, 255), rb)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'd go with with the HSV approach everyone else mentioned.", "Another approach would be to get a nice high resolution photo which some greenery in it, crop out the non-green parts, and pick random pixels from it using PIL."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PIL", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.pythonware.com/products/pil/"}]}]]