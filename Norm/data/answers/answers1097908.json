[[{"text": ["IBM's ICU library does that (and a lot more).", "It has Python bindings: PyICU. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ICU", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://site.icu-project.org/"}, {"text": "PyICU", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/PyICU"}]}, {"text": ["Update: The core difference in sorting between ICU and locale.strcoll is that ICU uses the full Unicode Collation Algorithm while strcoll uses ISO 14651."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "locale.strcoll", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://unicode.org/reports/tr10/", "text": "Unicode Collation Algorithm", "childNum": 0, "tag": "a", "childList": []}, {"text": "strcoll", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://en.wikipedia.org/wiki/ISO_14651", "text": "ISO 14651", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["The differences between those two algorithms are briefly summarized here: http://unicode.org/faq/collation.html#13.", "These are rather exotic special cases, which should rarely matter in practice."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://unicode.org/faq/collation.html#13", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://unicode.org/faq/collation.html#13"}]}], [{"text": ["I don't see this in the answers.", "My Application sorts according to the locale using python's standard library.", "It is pretty easy."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # python2.5 code below\n# corpus is our unicode() strings collection as a list\ncorpus = [u\"Art\", u\"\u00c4lg\", u\"Ved\", u\"Wasa\"]\n\nimport locale\n# this reads the environment and inits the right locale\nlocale.setlocale(locale.LC_ALL, \"\")\n# alternatively, (but it's bad to hardcode)\n# locale.setlocale(locale.LC_ALL, \"sv_SE.UTF-8\")\n\ncorpus.sort(cmp=locale.strcoll)\n\n# in python2.x, locale.strxfrm is broken and does not work for unicode strings\n# in python3.x however:\n# corpus.sort(key=locale.strxfrm)\n</code>\n</pre>\n", "senID": 1}, {"tag": "hr", "senID": 2}, {"text": ["Question to Lennart and other answerers: Doesn't anyone know 'locale' or is it not up to this task?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I see the answers have already done an excellent job, just wanted to point out one coding inefficiency in Human Sort.", "To apply a selective char-by-char translation to a unicode string s, it uses the code:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Human Sort", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://personal.inet.fi/cool/operator/Human%20Sort.py"}]}, {"code": "<pre>\n<code>\n spec_dict = {'\u00c5':'A', '\u00c4':'A'}\n\ndef spec_order(s):\n    return ''.join([spec_dict.get(ch, ch) for ch in s])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Python has a much better, faster and more concise way to perform this auxiliary task (on Unicode strings -- the analogous method for byte strings has a different and somewhat less helpful specification!-):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n spec_dict = dict((ord(k), spec_dict[k]) for k in spec_dict)\n\ndef spec_order(s):\n    return s.translate(spec_dict)\n</code>\n</pre>\n", "senID": 3}, {"text": ["The dict you pass to the translate method has Unicode ordinals (not strings) as keys, which is why we need that rebuilding step from the original char-to-char spec_dict.", "(Values in the dict you pass to translate [as opposed to keys, which must be ordinals] can be Unicode ordinals, arbitrary Unicode strings, or None to remove the corresponding character as part of the translation, so it's easy to specify \"ignore a certain character for sorting purposes\", \"map \u00e4 to ae for sorting purposes\", and the like)."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "translate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "spec_dict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["In Python 3, you can get the \"rebuilding\" step more simply, e.g."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n spec_dict = ''.maketrans(spec_dict)\n</code>\n</pre>\n", "senID": 6}, {"text": ["See the docs for other ways you can use this maketrans static method in Python 3."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "the docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/3.1/library/stdtypes.html?highlight=maketrans#str.maketrans"}, {"text": "maketrans", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Try James Tauber's Python Unicode Collation Algorithm.", "It may not do exactly as you want, but seems well worth a look.", "For a bit more information about the issues, see this post by Christopher Lenz."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Python Unicode Collation Algorithm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jtauber.com/blog/2006/01/27/python%5Funicode%5Fcollation%5Falgorithm/"}, {"text": "this post", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.cmlenz.net/archives/2008/07/the-truth-about-unicode-in-python"}]}], [{"text": ["A summary and extended answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["locale.strcoll under Python 2, and locale.strxfrm will in fact solve the problem, and does a good job, assuming that you have the locale in question installed.", "I tested it under Windows too, where the locale names confusingly are different, but on the other hand it seems to have all locales that are supported installed by default."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "locale.strcoll", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "locale.strxfrm", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["ICU doesn't necessarily do this better in practice, it however does way more.", "Most notably it has support for splitters that can split texts in different languages into words.", "This is very useful for languages that doesn't have word separators.", "You'll need to have a corpus of words to use as a base for the splitting, because that's not included, though."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "ICU", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "more", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["It also has long names for the locales so you can get pretty display names for the locale, support for other calendars than Gregorian (although I'm not sure the Python interface supports that) and tons and tons of other more or less obscure locale supports."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["So all in all: If you want to sort alphabetically and locale-dependent, you can use the locale module, unless you have special requirements, or also need more locale dependent functionality, like words splitter."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "So all in all:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "locale", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Jeff Atwood wrote a good post on Natural Sort Order, in it he linked to a script which does pretty much what you ask."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Natural Sort Order", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.codinghorror.com/blog/archives/001018.html"}, {"href": "http://personal.inet.fi/cool/operator/Human%20Sort.py", "text": "pretty much what you ask", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["It's not a trivial script, by any means, but it does the trick."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["To implement it you will need to read about \"Unicode collation algorithm\"\nsee\nhttp://en.wikipedia.org/wiki/Unicode_collation_algorithm"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://en.wikipedia.org/wiki/Unicode_collation_algorithm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Unicode_collation_algorithm"}]}, {"text": ["http://www.unicode.org/unicode/reports/tr10/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.unicode.org/unicode/reports/tr10/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.unicode.org/unicode/reports/tr10/"}]}, {"text": ["a sample implementation is here"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://jtauber.com/blog/2006/01/27/python_unicode_collation_algorithm/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://jtauber.com/blog/2006/01/27/python_unicode_collation_algorithm/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jtauber.com/blog/2006/01/27/python_unicode_collation_algorithm/"}]}], [{"text": ["It is far from a complete solution for your use case, but you could take a look at the unaccent.py script from effbot.org.", "What it basically does is remove all accents from a text.", "You can use that 'sanitized' text to sort alphabetically.", "(For a better description see this page."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "unaccent.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.effbot.org/public/stuff/sandbox/text/unaccent.py"}, {"text": "this", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/unicode-convert.htm"}]}], [{"text": ["The simplest, easiest, and most straightforward way to do this it to make a callout to the Perl library module, Unicode::Collate::Locale, which is  a subclass of the standard Unicode::Collate module.", "All you need do is pass the constructor a locale value of \"xv\" for Sweden.  "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Unicode::Collate::Locale", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/perldoc?Unicode%3A%3ACollate%3A%3ALocale"}, {"text": "Unicode::Collate", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://search.cpan.org/perldoc?Unicode%3A%3ACollate"}, {"text": "\"xv\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["(You may not neccesarily appreciate this for Swedish text, but because Perl uses abstract characters, you can use any Unicode code point you please \u2014 no matter the platform or build!", "Few languages offer such convenience.", "I mention it because I\u2019ve fighting a losing battle with Java a lot over this maddening problem lately."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The problem is that I do not know how to access a Perl module from Python \u2014 apart, that is, from using a shell callout or two-sided pipe.", "To that end, I have therefore provided you with a complete working script calleducsort that you can call to do exactly what you have asked for with perfect ease. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "I have therefore provided you with a complete working script calleducsort", "tag": "a", "pos": 1, "childList": [{"text": "ucsort", "tag": "em"}], "childNum": 1, "href": "http://training.perl.com/scripts/ucsort"}, {"text": "ucsort", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["This script is 100% compliant with the fullUnicode Collation Algorithm, with all tailoring options supported!!", "And if you have an optional module installed or run Perl 5.13 or better, then you have full access to easy-to-use CLDR locales.", "See below."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "This script is 100% compliant with the fullUnicode Collation Algorithm", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Unicode Collation Algorithm", "tag": "a"}]}, {"text": "Unicode Collation Algorithm", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://unicode.org/reports/tr10/"}]}, {"text": ["Demonstration"], "childNum": 0, "tag": "h2", "senID": 4, "childList": []}, {"text": ["Imagine an input set ordered this way:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n b o i j n l m \u00e5 y e v s k h d f g t \u00f6 r x p z a \u00e4 c u q\n</code>\n</pre>\n", "senID": 6}, {"text": ["A default sort by code point yields:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n a b c d e f g h i j k l m n o p q r s t u v x y z \u00e4 \u00e5 \u00f6\n</code>\n</pre>\n", "senID": 8}, {"text": ["which is incorrect by everybody\u2019s book.", "Using my script, which uses the Unicode Collation Algorithm, you get this order:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n % perl ucsort /tmp/swedish_alphabet | fmt\na \u00e5 \u00e4 b c d e f g h i j k l m n o \u00f6 p q r s t u v x y z\n</code>\n</pre>\n", "senID": 10}, {"text": ["That is the default UCA sort.", "To get the Swedish locale, call ucsort this way:"], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "ucsort", "tag": "a", "pos": 1, "childList": [{"text": "ucsort", "tag": "em"}], "childNum": 1, "href": "http://training.perl.com/scripts/ucsort"}, {"text": "ucsort", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n % perl --locale=sv /tmp/swedish_alphabet | fmt\na b c d e f g h i j k l m n o p q r s t u v x y z \u00e5 \u00e4 \u00f6\n</code>\n</pre>\n", "senID": 12}, {"text": ["Here is a better input demo.", "First, the input set:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n % fmt /tmp/swedish_set\ncTD cDD C\u00f6d Cbd cAD cCD cYD Cud cZD Cod cBD Cnd cQD cFD Ced Cfd cOD\ncLD cXD Cid Cpd cID Cgd cVD cMD c\u00c5D cGD Cqd C\u00e4d cJD Cdd Ckd c\u00d6D c\u00c4D\nCtd Czd Cxd cHD cND cKD Cvd Chd Cyd cUD Cld Cmd cED Crd Cad C\u00e5d Ccd\ncRD cSD Csd Cjd cPD\n</code>\n</pre>\n", "senID": 14}, {"text": ["By code point, that sorts this way:"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n Cad Cbd Ccd Cdd Ced Cfd Cgd Chd Cid Cjd Ckd Cld Cmd Cnd Cod Cpd Cqd\nCrd Csd Ctd Cud Cvd Cxd Cyd Czd C\u00e4d C\u00e5d C\u00f6d cAD cBD cCD cDD cED cFD\ncGD cHD cID cJD cKD cLD cMD cND cOD cPD cQD cRD cSD cTD cUD cVD cXD\ncYD cZD c\u00c4D c\u00c5D c\u00d6D\n</code>\n</pre>\n", "senID": 16}, {"text": ["But using the default UCA makes it sort this way:"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n % ucsort /tmp/swedish_set | fmt\ncAD Cad c\u00c5D C\u00e5d c\u00c4D C\u00e4d cBD Cbd cCD Ccd cDD Cdd cED Ced cFD Cfd cGD\nCgd cHD Chd cID Cid cJD Cjd cKD Ckd cLD Cld cMD Cmd cND Cnd cOD Cod\nc\u00d6D C\u00f6d cPD Cpd cQD Cqd cRD Crd cSD Csd cTD Ctd cUD Cud cVD Cvd cXD\nCxd cYD Cyd cZD Czd\n</code>\n</pre>\n", "senID": 18}, {"text": ["But in the Swedish locale, this way:"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"code": "<pre>\n<code>\n % ucsort --locale=sv /tmp/swedish_set | fmt\ncAD Cad cBD Cbd cCD Ccd cDD Cdd cED Ced cFD Cfd cGD Cgd cHD Chd cID\nCid cJD Cjd cKD Ckd cLD Cld cMD Cmd cND Cnd cOD Cod cPD Cpd cQD Cqd\ncRD Crd cSD Csd cTD Ctd cUD Cud cVD Cvd cXD Cxd cYD Cyd cZD Czd c\u00c5D\nC\u00e5d c\u00c4D C\u00e4d c\u00d6D C\u00f6d\n</code>\n</pre>\n", "senID": 20}, {"text": ["If you prefer uppercase to sort before lowercase, do this:"], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"code": "<pre>\n<code>\n % ucsort --upper-before-lower --locale=sv /tmp/swedish_set | fmt\nCad cAD Cbd cBD Ccd cCD Cdd cDD Ced cED Cfd cFD Cgd cGD Chd cHD Cid\ncID Cjd cJD Ckd cKD Cld cLD Cmd cMD Cnd cND Cod cOD Cpd cPD Cqd cQD\nCrd cRD Csd cSD Ctd cTD Cud cUD Cvd cVD Cxd cXD Cyd cYD Czd cZD C\u00e5d\nc\u00c5D C\u00e4d c\u00c4D C\u00f6d c\u00d6D\n</code>\n</pre>\n", "senID": 22}, {"text": ["Customized Sorts"], "childNum": 0, "tag": "h2", "senID": 23, "childList": []}, {"text": ["You can do many other things with ucsort.", "For example, here is how to sort titles in English:"], "childNum": 2, "tag": "p", "senID": 24, "childList": [{"text": "ucsort", "tag": "a", "pos": 0, "childList": [{"text": "ucsort", "tag": "em"}], "childNum": 1, "href": "http://training.perl.com/scripts/ucsort"}, {"text": "ucsort", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n % ucsort --preprocess='s/^(an?|the)\\s+//i' /tmp/titles\nAnathem\nThe Book of Skulls\nA Civil Campaign\nThe Claw of the Conciliator\nThe Demolished Man\nDune\nAn Early Dawn\nThe Faded Sun: Kesrith\nThe Fall of Hyperion\nA Feast for Crows\nFlowers for Algernon\nThe Forbidden Tower\nFoundation and Empire\nFoundation\u2019s Edge\nThe Goblin Reservation\nThe High Crusade\nJack of Shadows\nThe Man in the High Castle\nThe Ringworld Engineers\nThe Robots of Dawn\nA Storm of Swords\nStranger in a Strange Land\nThere Will Be Time\nThe White Dragon\n</code>\n</pre>\n", "senID": 25}, {"text": ["You will need Perl 5.10.1 or better to run the script in general.", "For locale support, you must either install the optional CPAN module Unicode::Collate::Locale.", "Alternately, you can install a development versions of Perl, 5.13+, which include that module standardly."], "childNum": 1, "tag": "p", "senID": 26, "childList": [{"text": "Unicode::Collate::Locale", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["This is a rapid prototype, so ucsort is mostly un(der)documented.", "But this is its SYNOPSIS of what switches/options it accepts on the command line:"], "childNum": 2, "tag": "p", "senID": 27, "childList": [{"text": "ucsort", "tag": "a", "pos": 0, "childList": [{"text": "ucsort", "tag": "em"}], "childNum": 1, "href": "http://training.perl.com/scripts/ucsort"}, {"text": "ucsort", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n # standard options\n    --help|?\n    --man|m\n    --debug|d\n\n    # collator constructor options\n    --backwards-levels=i\n    --collation-level|level|l=i\n    --katakana-before-hiragana\n    --normalization|n=s\n    --override-CJK=s\n    --override-Hangul=s\n    --preprocess|P=s\n    --upper-before-lower|u\n    --variable=s\n\n    # program specific options\n    --case-insensitive|insensitive|i\n    --input-encoding|e=s\n    --locale|L=s\n    --paragraph|p\n    --reverse-fields|last\n    --reverse-output|r\n    --right-to-left|reverse-input\n</code>\n</pre>\n", "senID": 28}, {"text": ["Yeah, ok: that\u2019s really the argument list I use for the call to Getopt::Long, but you get the idea.", ":) "], "childNum": 1, "tag": "p", "senID": 29, "childList": [{"text": "Getopt::Long", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you can figure out how to call Perl library modules from Python directly without calling a Perl script, by all means do so.", "I just don\u2019t know how myself.", "I\u2019d love to learn how."], "childNum": 0, "tag": "p", "senID": 30, "childList": []}, {"text": ["In the meantime, I believe this script will do what you need done in all its particular \u2014 and more!", "I now use this for all of text sorting.", "It finally does what I\u2019ve needed for a long, long time. "], "childNum": 2, "tag": "p", "senID": 31, "childList": [{"text": "and more!", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "finally", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["The only downside is that --locale argument causes performance to go down the tubes, although it\u2019s plenty fast enough for regular, non-locale but still 100% UCA compliant sorting.", "Since it loads everything in memory, you probably don\u2019t want to use this on gigabyte documents.", "I use it many times a day, and it sure it great having sane text sorting at last."], "childNum": 2, "tag": "p", "senID": 32, "childList": [{"text": "--locale", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "but still 100% UCA compliant", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}]]