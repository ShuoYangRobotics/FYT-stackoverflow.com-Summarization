[[{"text": ["Maybe I missed the question, but why not:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyException(Exception):\n    pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: to override somethign (or pass extra args), do this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class ValidationError(Exception):\n    def __init__(self, message, Errors):\n\n        # Call the base class constructor with the parameters it needs\n        Exception.__init__(self, message)\n\n        # Now for your custom code...\n        self.Errors = Errors\n</code>\n</pre>\n", "senID": 3}, {"text": ["That way you could pass dict of error messages to the second param, and get to it later with e.Errors"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "e.Errors", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You should override __repr__ or __unicode__ methods instead of using message, the args you provide when you construct the exception will be in args member variable when you need."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "__repr__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__unicode__", "childNum": 0, "tag": "code", "childList": []}, {"text": "args", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["No, \"message\" is not forbidden.", "It's just deprecated.", "You application will work fine with using message.", "But you may want to get rid of the deprecation error, of course."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When you create custom Exception classes for your application, many of them do not subclass just from Exception, but from others, like ValueError or similar.", "Then you have to adapt to their usage of variables."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["And if you have many exceptions in your application it's usually a good idea to have a common custom base class for all of them, so that users of your modules can do"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n try:\n    ...\nexcept NelsonsExceptions:\n    ...\n</code>\n</pre>\n", "senID": 3}, {"text": ["And in that case you can do the __init__ and __str__ needed there, so you don't have to repeat it for every exception.", "But simply calling the message variable something else than message does the trick."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "__init__ and __str__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In any case, you only need the __init__ or __str__ if you do something different from what Exception itself does.", "And because if the deprecation, you then need both, or you get an error.", "That's not a whole lot of extra code you need per class.", ";)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "__init__ or __str__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]