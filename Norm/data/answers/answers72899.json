[[{"text": ["It may look cleaner using a key instead a cmp:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])\n</code>\n</pre>\n", "senID": 1}, {"text": ["or as J.F.Sebastian and others suggested,"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from operator import itemgetter\nnewlist = sorted(list_to_be_sorted, key=itemgetter('name'))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["import operator"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["to sort the list of dictionaries by key='name' :"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n list_of_dicts.sort(key=operator.itemgetter('name'))\n</code>\n</pre>\n", "senID": 2}, {"text": ["to sort the list of dictionaries by key='age'"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n list_of_dicts.sort(key=operator.itemgetter('age'))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You could use a custom comparison function, or you could pass in a function that calculates a custom sort key.", "That's usually more efficient as the key is only calculated once per item, while the comparison function would be called many more times."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You could do it this way:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def mykey(adict): return adict['name']\nx = [{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age':10}]\nsorted(x, key=mykey)\n</code>\n</pre>\n", "senID": 2}, {"text": ["But the standard library contains a generic routine for getting items of arbitrary objects: itemgetter.", "So try this instead:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "itemgetter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from operator import itemgetter\nx = [{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age':10}]\nsorted(x, key=itemgetter('name'))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I guess you've meant:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This would be sorted like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n sorted(l,cmp=lambda x,y: cmp(x['name'],y['name']))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you want to sort the list by multiple keys you can do the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n input = [{'name':'Homer', 'age':39}, {'name':'Milhouse', 'age':10}, {'name':'Bart', 'age':10} ]\nsortedlist = sorted(input, key=lambda elem: \"%02d %s\" % (elem['age'], elem['name']))\n</code>\n</pre>\n", "senID": 1}, {"text": ["It is rather hackish, since it relies on converting the values into a single string representation for comparison, but it works as expected for numbers including negative ones (although you will need to format your string appropriately with zero paddings if you are using numbers)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You have to implement your own comparison function that will compare the dictionaries by values of name keys.", "See Sorting Mini-HOW TO from PythonInfo Wiki"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Sorting Mini-HOW TO from PythonInfo Wiki", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/HowTo/Sorting"}]}], [{"code": "<pre>\n<code>\n input = [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]\n\ninput.sort(lambda x,y : cmp(x['name'], y['name']))\n</code>\n</pre>\n", "senID": 0}, {"text": ["input will now be what you want."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n import operator\na_list_of_dicts.sort(key=operator.itemgetter('name'))\n</code>\n</pre>\n", "senID": 0}, {"text": ["'key' is used to sort by an arbitrary value and 'itemgetter' sets that value to each item's 'name' attribute."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Here is my answer to a related question on sorting by multiple columns.", "It also works for the degenerate case where the number of columns is only one."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "my answer to a related question on sorting by multiple columns", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1143671/python-sorting-list-of-dictionaries-by-multiple-keys/1144405"}]}]]