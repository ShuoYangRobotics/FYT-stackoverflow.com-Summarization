[[{"text": ["A simple recursive function can be used to convert an entity (and any referents) to a nested dictionary that can be passed to simplejson:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "simplejson", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import datetime\nimport time\n\nSIMPLE_TYPES = (int, long, float, bool, dict, basestring, list)\n\ndef to_dict(model):\n    output = {}\n\n    for key, prop in model.properties().iteritems():\n        value = getattr(model, key)\n\n        if value is None or isinstance(value, SIMPLE_TYPES):\n            output[key] = value\n        elif isinstance(value, datetime.date):\n            # Convert date/datetime to ms-since-epoch (\"new Date()\").\n            ms = time.mktime(value.utctimetuple()) * 1000\n            ms += getattr(value, 'microseconds', 0) / 1000\n            output[key] = int(ms)\n        elif isinstance(value, db.GeoPt):\n            output[key] = {'lat': value.lat, 'lon': value.lon}\n        elif isinstance(value, db.Model):\n            output[key] = to_dict(value)\n        else:\n            raise ValueError('cannot encode ' + repr(prop))\n\n    return output\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is the simplest solution I found.", "It requires only 3 lines of codes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Simply add a method to your model to return a dictionary:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class DictModel(db.Model):\n    def to_dict(self):\n       return dict([(p, unicode(getattr(self, p))) for p in self.properties()])\n</code>\n</pre>\n", "senID": 2}, {"text": ["SimpleJSON now works properly:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Photo(DictModel):\n   filename = db.StringProperty()\n   title = db.StringProperty()\n   description = db.StringProperty(multiline=True)\n   date_taken = db.DateTimeProperty()\n   date_uploaded = db.DateTimeProperty(auto_now_add=True)\n   album = db.ReferenceProperty(Album, collection_name='photo')\n\nfrom django.utils import simplejson\nfrom google.appengine.ext import webapp\n\nclass PhotoHandler(webapp.RequestHandler):\n   def get(self):\n      photos = Photo.all()\n      self.response.out.write(simplejson.dumps([p.to_dict() for p in photos]))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Even if you are not using django as a framework, those libraries are still available for you to use.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.core import serializers\ndata = serializers.serialize(\"xml\", Photo.objects.all())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For simple cases, I like the approach advocated here at the end of the article:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://skonieczny.pl/blog/it-should-just-work/post/2009/04/30/json-serialization-of-google-app-engine-models/"}]}, {"code": "<pre>\n<code>\n # after obtaining a list of entities in some way, e.g.:\n  user = users.get_current_user().email().lower();\n  col = models.Entity.gql('WHERE user=:1',user).fetch(300, 0)\n\n  # ...you can make a json serialization of name/key pairs as follows:\n  json = simplejson.dumps(col, default=lambda o: {o.name :str(o.key())})\n</code>\n</pre>\n", "senID": 1}, {"text": ["The article also contains, at the other end of the spectrum, a complex serializer class that enriches django's (and does require _meta -- not sure why you're getting errors about _meta missing, perhaps the bug described here) with the ability to serialize computed properties / methods.", "Most of the time you serialization needs lay somewhere in between, and for those an introspective approach such as @David Wilson's may be preferable."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "_meta", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/google-app-engine-django/issues/detail?id=52"}]}], [{"text": ["To serialize models, add a custom json encoder as in the following python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import datetime\nfrom google.appengine.api import users\nfrom google.appengine.ext import db\nfrom django.utils import simplejson\n\nclass jsonEncoder(simplejson.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime.datetime):\n            return obj.isoformat()\n\n        elif isinstance(obj, db.Model):\n            return dict((p, getattr(obj, p)) \n                        for p in obj.properties())\n\n        elif isinstance(obj, users.User):\n            return obj.email()\n\n        else:\n            return simplejson.JSONEncoder.default(self, obj)\n\n\n# use the encoder as: \nsimplejson.dumps(model, cls=jsonEncoder)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will encode:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "a date as as isoformat string (", "tag": "none", "senID": 3}, {"text": "a model as a dict of its properties, ", "tag": "none", "senID": 4}, {"text": "a user as his email.", "tag": "none", "senID": 5}]}, {"text": ["To decode the date you can use this javascript:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n function decodeJsonDate(s){\n  return new Date( s.slice(0,19).replace('T',' ') + ' GMT' );\n} // Note that this function truncates milliseconds.\n</code>\n</pre>\n", "senID": 7}, {"text": ["Note: Thanks to user pydave who edited this code to make it more readable.", "I had originally had used python's if/else expressions to express jsonEncoder in fewer lines as follows: (I've added some comments and used google.appengine.ext.db.to_dict, to make it clearer than the original."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "pydave", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/79125/pydave"}, {"text": "jsonEncoder", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "google.appengine.ext.db.to_dict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class jsonEncoder(simplejson.JSONEncoder):\n  def default(self, obj):\n    isa=lambda x: isinstance(obj, x) # isa(&lt;type&gt;)==True if obj is of type &lt;type&gt;\n    return obj.isoformat() if isa(datetime.datetime) else \\\n           db.to_dict(obj) if isa(db.Model) else \\\n           obj.email()     if isa(users.User) else \\\n           simplejson.JSONEncoder.default(self, obj)\n</code>\n</pre>\n", "senID": 9}], [{"text": ["You don't need to write your own \"parser\" (a parser would presumably turn JSON into a Python object), but you can still serialize your Python object yourself."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Using simplejson:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "simplejson", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://simplejson.googlecode.com/svn/tags/simplejson-2.0.9/docs/index.html"}]}, {"code": "<pre>\n<code>\n import simplejson as json\nserialized = json.dumps({\n    'filename': self.filename,\n    'title': self.title,\n    'date_taken': date_taken.isoformat(),\n    # etc.\n})\n</code>\n</pre>\n", "senID": 2}], [{"text": ["If you use app-engine-patch it will automatically declare the _meta attribute for you, and then you can use django.core.serializers as you would normally do on django models (as in sledge's code)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "app-engine-patch", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/app-engine-patch/"}, {"text": "_meta", "childNum": 0, "tag": "code", "childList": []}, {"text": "django.core.serializers", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["App-engine-patch has some other cool features such has an hybrid authentication (django + google accounts), and the admin part of django works."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["There's a method, \"Model.properties()\", defined for all Model classes.", "It returns the dict you seek."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.utils import simplejson\nclass Photo(db.Model):\n  # ...\n\nmy_photo = Photo(...)\nsimplejson.dumps(my_photo.properties())\n</code>\n</pre>\n", "senID": 1}, {"text": ["See Model properties in the docs."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Model properties", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/appengine/docs/python/datastore/modelclass.html#Model_properties"}]}], [{"text": ["Mtgred's answer above worked wonderfully for me -- I slightly modified it so I could also get the key for the entry.", "Not as few lines of code, but it gives me the unique key:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class DictModel(db.Model):\ndef to_dict(self):\n    tempdict1 = dict([(p, unicode(getattr(self, p))) for p in self.properties()])\n    tempdict2 = {'key':unicode(self.key())}\n    tempdict1.update(tempdict2)\n    return tempdict1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In the latest (1.5.2) release of the App Engine SDK, a to_dict() function that converts model instances to dictionaries was introduced in db.py.", "See the release notes. "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "to_dict()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "db.py", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "release notes", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/googleappengine/wiki/SdkReleaseNotes#Version_1.5.2_-_July_21,_2011"}]}, {"text": ["There is no reference to this function in the documentation as of yet, but I have tried it myself and it works as expected. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]