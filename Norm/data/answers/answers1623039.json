[[{"text": ["PDB"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PDB", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "PDB", "tag": "a"}]}, {"href": "http://docs.python.org/library/pdb.html", "text": "PDB", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["You can use the pdb module, insert pdb.set_trace() anywhere and it will function as a breakpoint."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "pdb.set_trace()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import pdb\n&gt;&gt;&gt; a=\"a string\"\n&gt;&gt;&gt; pdb.set_trace()\n--Return--\n&gt; &lt;stdin&gt;(1)&lt;module&gt;()-&gt;None\n(Pdb) p a\n'a string'\n(Pdb)\n</code>\n</pre>\n", "senID": 2}, {"text": ["To continue execution use c (or cont or continue)."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "cont", "childNum": 0, "tag": "code", "childList": []}, {"text": "continue", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["It is possible to execute arbitrary Python expressions using pdb.", "For example, if you find a mistake, you can correct the code, then type a type expression to have the same effect in the running code"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["ipdb is a version of pdb for IPython.", "It allows the use of pdb with all the IPython features including tab completion."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "IPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/IPython"}]}, {"text": ["It is also possible to set pdb to automatically run on an uncaught exception."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "set pdb to automatically run", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/65287/"}]}, {"text": ["Pydb was written to be an enhanced version of Pdb.", "Benefits?"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Pydb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bashdb.sourceforge.net/pydb/"}]}], [{"text": ["Logging"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Logging", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Python already has an excellent built-in logging module.", "You may want to use the logging template here."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "built-in logging module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/logging.html"}, {"text": "logging template here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://aymanh.com/python-debugging-techniques"}]}, {"text": ["The logging module lets you specify a level of importance; during debugging you can log everything, while during normal operation you might only log critical things.", "You can switch things off and on."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Most people just use basic print statements to debug, and then remove the print statements.", "It's better to leave them in, but disable them; then, when you have another bug, you can just re-enable everything and look your logs over."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["This can be the best possible way to debug programs that need to do things quickly, such as networking programs that need to respond before the other end of the network connection times out and goes away.", "You might not have much time to single-step a debugger; but you can just let your code run, and log everything, then pore over the logs and figure out what's really happening."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["print statements"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "Some people recommend a ", "tag": "none", "senID": 1}, {"text": "The ", "tag": "none", "senID": 2}]}], [{"text": ["It is possible to print what Python lines are executed (thanks Geo!).", "This has any number of applications, for example, you could modify it to check when particular functions are called or add something like ## make it only track particular lines."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python lines are executed", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dalkescientific.com/writings/diary/archive/2005/04/20/tracing_python_code.html"}]}, {"text": ["code.interact takes you into a interactive console"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import code; code.interact(local=locals())\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want to be able to easily access your console history look at: \"Can I have a history mechanism like in the shell?", "\" (will have to look down for it)."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Can I have a history mechanism like in the shell?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://norvig.com/python-iaq.html"}]}, {"text": ["Auto-complete can be enabled for the interpreter."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "interpreter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/101268/hidden-features-of-python/168270#168270"}]}], [{"text": ["PyDev"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyDev", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["PyDev has a pretty good interactive debugger.", "It has watch expressions, hover-to-evaluate, thread and stack listings and (almost) all the usual amenities you expect from a modern visual debugger.", "You can even attach to a running process and do remote debugging."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PyDev", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pydev.org/"}]}, {"text": ["Like other visual debuggers, though, I find it useful mostly for simple problems, or for very complicated problems after I've tried everything else.", "I still do most of the heavy lifting with logging."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you are using pdb, you can define aliases for shortcuts.", "I use these:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Ned's .pdbrc\n\n# Print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.\nalias p_ for k in sorted(%1.keys()): print \"%s%-15s= %-80.80s\" % (\"%2\",k,repr(%1[k]))\n\n# Print the instance variables of a thing.\nalias pi p_ %1.__dict__ %1.\n\n# Print the instance variables of self.\nalias ps pi self\n\n# Print the locals.\nalias pl p_ locals() local:\n\n# Next and list, and step and list.\nalias nl n;;l\nalias sl s;;l\n\n# Short cuts for walking up and down the stack\nalias uu u;;u\nalias uuu u;;u;;u\nalias uuuu u;;u;;u;;u\nalias uuuuu u;;u;;u;;u;;u\nalias dd d;;d\nalias ddd d;;d;;d\nalias dddd d;;d;;d;;d\nalias ddddd d;;d;;d;;d;;d\n</code>\n</pre>\n", "senID": 1}], [{"text": ["ipdb is like pdb, with the awesomeness of ipython."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Winpdb is very nice, and contrary to its name it's completely cross-platform."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Winpdb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://winpdb.org/"}]}, {"text": ["It's got a very nice prompt-based and GUI debugger, and supports remote debugging."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["In Vim, I have these three bindings:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n map &lt;F9&gt; Oimport rpdb2; rpdb2.start_embedded_debugger(\"asdf\") #BREAK&lt;esc&gt;\nmap &lt;F8&gt; Ofrom nose.tools import set_trace; set_trace() #BREAK&lt;esc&gt;\nmap &lt;F7&gt; Oimport traceback, sys; traceback.print_exception(*sys.exc_info()) #TRACEBACK&lt;esc&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["rpdb2 is a Remote Python Debugger, which can be used with WinPDB, a solid graphical debugger.", "Because I know you'll ask, it can do everything I expect a graphical debugger to do :)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "rpdb2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I use pdb from nose.tools so that I can debug unit tests as well as normal code."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "pdb", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "nose.tools", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Finally, the F7 mapping will print a traceback (similar to the kind you get when an exception bubbles to the top of the stack).", "I've found it really useful more than a few times."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "F7", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["http://pypi.python.org/pypi/pudb, a full-screen, console-based Python debugger."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pypi.python.org/pypi/pudb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/pudb"}]}, {"src": "http://i.stack.imgur.com/fZiaP.png", "tag": "img", "senID": 1}, {"text": ["Nice for debugging standalone scripts, just run"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n python -m pudb.run my-script.py\n</code>\n</pre>\n", "senID": 3}], [{"text": ["When possible, I debug using M-x pdb in emacs for source level debugging.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "M-x pdb", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Getting a stack trace from a running Python application"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Getting a stack trace from a running Python application", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["There are several tricks here.", "These include"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/132058/getting-stack-trace-from-a-running-python-application"}]}, {"tag": "ul", "num": 3, "lis": [{"text": "Breaking into an interpreter/printing a stack trace by sending a signal", "tag": "none", "senID": 2}, {"text": "Getting a stack trace out of an unprepared Python process", "tag": "none", "senID": 3}, {"text": "Running the interpreter with flags to make it useful for debugging", "tag": "none", "senID": 4}]}], [{"text": ["Defining useful repr() methods for your classes (so you can see what an object is) and using repr() or \"%r\" % (...) or \"...{0!r}..\".format(...) in your debug messages/logs is IMHO a key to efficient debugging. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "repr", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Also, the debuggers mentioned in other answers will make use of the repr() methods."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "repr", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["print statements are the bad way.", "Thats why there are debuggers.", "Use pdb."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]