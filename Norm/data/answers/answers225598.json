[[{"text": ["You might want to check out Nose and NoseXUnit.", "You can have it run pylint, your unit tests, and coverage checks with this command:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Nose", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose/"}, {"text": "NoseXUnit", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://nosexunit.sourceforge.net/"}]}, {"code": "<pre>\n<code>\n nosetests --with-nosexunit --enable-audit --enable-cover\n</code>\n</pre>\n", "senID": 1}, {"text": ["That'll be helpful if you want to go the Hudson route or if you want to use another CI server that has support for JUnit test reporting."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["(And yes, you realize how regrettable a name NoseXUnit is when you see it in all-lowercase :-/ )"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Don't know if it would do : Bitten is made by the guys who write Trac and is integrated with Trac.", "Apache Gump is the CI tool used by Apache.", "It is written in Python."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Bitten", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bitten.edgewall.org/"}, {"text": "Apache Gump", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://gump.apache.org/"}]}], [{"text": ["Buildbot's waterfall page can be considerably prettified.", "Here's a nice example http://build.chromium.org/buildbot/waterfall/waterfall"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://build.chromium.org/buildbot/waterfall/waterfall", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://build.chromium.org/buildbot/waterfall/waterfall"}]}], [{"text": ["We've had great success with TeamCity as our CI server and using nose as our test runner.", "Teamcity plugin for nosetests gives you count pass/fail, readable display for failed test( that can be E-Mailed).", "You can even see details of the test failures while you stack is running.  "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "TeamCity", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.jetbrains.com/teamcity/"}, {"text": "Teamcity plugin for nosetests", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/teamcity-nose"}]}, {"text": ["If of course supports things like running on multiple machines, and it's much simpler to setup and maintain than buildbot."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I guess this thread is quite old but here is my take on it with hudson:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I decided to go with pip and set up a repo (the painful to get working but nice looking eggbasket), which hudson auto uploads to with a successful tests.", "Here is my rough and ready script for use with a hudson config execute script like: /var/lib/hudson/venv/main/bin/hudson_script.py -w $WORKSPACE -p my.package -v $BUILD_NUMBER, just put in **/coverage.xml, pylint.txt and nosetests.xml in the config bits:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\nimport subprocess\nimport logging\nimport optparse\n\nlogging.basicConfig(level=logging.INFO,\n                    format='%(asctime)s %(levelname)s %(message)s')\n\nREPO_URL = \"http://my_repo\"\n\ndef call_command(command, cwd, ignore_error_code=False):\n    try:\n        logging.info(\"Running: %s\" % command)\n        status = subprocess.call(command, cwd=cwd, shell=True)\n        if not ignore_error_code and status != 0:\n            raise Exception(\"Last command failed\")\n\n        return status\n\n    except:\n        logging.exception(\"Could not run command %s\" % command)\n        raise\n\ndef main():\n    usage = \"usage: %prog [options]\"\n    parser = optparse.OptionParser(usage)\n    parser.add_option(\"-w\", \"--workspace\", dest=\"workspace\",\n                      help=\"workspace folder for the job\")\n    parser.add_option(\"-p\", \"--package\", dest=\"package\",\n                      help=\"the package name i.e., company.package\")\n    parser.add_option(\"-v\", \"--build_number\", dest=\"build_number\",\n                      help=\"the build number, which will get put at the end of the package version\")\n    options, args = parser.parse_args()\n\n    if not options.workspace or not options.package:\n        raise Exception(\"Need both args, do --help for info\")\n\n    venvDir = options.package + \"_venv/\"\n\n    #install the venv/make sure its there plus install the local package\n    call_command(\"pip -E %s install -e ./ --extra-index %s\" % (venvDir, REPO_URL),\n                 options.workspace)\n\n    #make sure pylint, nose and coverage are installed\n    call_command(\"pip -E %s install nose pylint coverage\" % venvDir,\n                 options.workspace)\n\n    test_status = call_command(\"%sbin/nosetests %s --with-xunit --with-coverage --cover-package %s --cover-erase\" % (venvDir,\n                                                                                     options.package.replace(\".\", \"/\"),\n                                                                                     options.package),\n                 options.workspace, True)\n    #produce coverage report -i for ignore weird missing file errors\n    call_command(\"%sbin/coverage xml -i\" % venvDir,\n                 options.workspace)\n    #move it so that the code coverage plugin can find it\n    call_command(\"mv coverage.xml %s\" % (options.package.replace(\".\", \"/\")),\n                 options.workspace)\n    #run pylint\n    call_command(\"%sbin/pylint --rcfile ~/pylint.rc -f parseable %s &gt; pylint.txt\" % (venvDir, \n                                                                                     options.package),\n                 options.workspace, True)\n\n    #remove old dists so we only have the newest at the end\n    call_command(\"rm -rfv %s\" % (options.workspace + \"/dist\"),\n                 options.workspace)\n\n    #if the build passes upload the result to the egg_basket\n    if test_status == 0:\n        logging.info(\"Success - uploading egg\")\n        upload_bit = \"upload -r %s/upload\" % REPO_URL\n    else:\n        logging.info(\"Failure - not uploading egg\")\n        upload_bit = \"\"\n\n    #create egg\n    call_command(\"%sbin/python setup.py egg_info --tag-build=.0.%s --tag-svn-revision --tag-date sdist %s\" % (venvDir,\n                                                                                                              options.build_number,\n                                                                                                              upload_bit),\n                 options.workspace)\n\n    logging.info(\"Complete\")\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 2}, {"text": ["When it comes to deploying stuff you can do something like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n pip -E /location/of/my/venv/ install my_package==X.Y.Z --extra-index http://my_repo\n</code>\n</pre>\n", "senID": 4}, {"text": ["And then people can develop stuff using:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n pip -E /location/of/my/venv/ install -e ./ --extra-index http://my_repo\n</code>\n</pre>\n", "senID": 6}, {"text": ["This stuff assumes you have a repo structure per package with a setup.py and dependencies all set up then you can just check out the trunk and run this stuff on it."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I hope this helps someone out."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["Signal is another option.", "You can know more about it and watch a video also here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.diegocarrion.com/2009/10/30/really-easy-continuous-integration-with-signal/"}]}], [{"text": ["We have used bitten quite a bit.", "It is pretty and integrates well with Trac, but it is a pain in the butt to customize if you have any nonstandard workflow.", "Also there just aren't as many plugins as there are for the more popular tools.", "Currently we are evaluating Hudson as a replacement."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Atlassian's Bamboo is also definitely worth checking out.", "The entire Atlassian suite (JIRA, Confluence, FishEye, etc) is pretty sweet."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Bamboo", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.atlassian.com/software/bamboo"}]}]]