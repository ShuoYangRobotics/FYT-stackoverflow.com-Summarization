[[{"text": ["From: http://mail.python.org/pipermail/tutor/2008-April/061426.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://mail.python.org/pipermail/tutor/2008-April/061426.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/tutor/2008-April/061426.html"}]}, {"text": ["You should consider that what you are trying to do is usually done with a Factory and that's the best way to do it.", "Using __new__ is not a good clean solution so please consider the usage of a factory.", "Here you have a good factory example."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Factory", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Factory%5Fobject"}, {"text": "__new__", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "a good factory example", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/86900/"}]}], [{"text": ["__new__ is static class method, while __init__ is instance method.", "__new__ has to create the instance first, so __init__ can initialize it.", "Note that __init__ takes self as parameter.", "Until you create instance there is no self."], "childNum": 14, "tag": "p", "senID": 0, "childList": [{"text": "__new__", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "__new__", "tag": "code"}]}, {"text": "__new__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__init__", "childNum": 1, "tag": "strong", "pos": 2, "childList": [{"text": "__init__", "tag": "code"}]}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__new__", "childNum": 1, "tag": "strong", "pos": -1, "childList": [{"text": "__new__", "tag": "code"}]}, {"text": "__new__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__init__", "childNum": 1, "tag": "strong", "pos": -1, "childList": [{"text": "__init__", "tag": "code"}]}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__init__", "childNum": 1, "tag": "strong", "pos": -1, "childList": [{"text": "__init__", "tag": "code"}]}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "self", "childNum": 1, "tag": "strong", "pos": 3, "childList": [{"text": "self", "tag": "code"}]}, {"text": "self", "childNum": 0, "tag": "code", "childList": []}, {"text": "self", "childNum": 1, "tag": "strong", "childList": [{"text": "self", "tag": "code"}]}, {"text": "self", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Now, I gather, that you're trying to implement singleton pattern in Python.", "There are a few ways to do that."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "singleton pattern", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Singleton_pattern"}]}, {"text": ["Also, as of Python 2.6, you can use class decorators. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "decorators", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0318/"}]}, {"code": "<pre>\n<code>\n def singleton(cls):\n    instances = {}\n    def getinstance():\n        if cls not in instances:\n            instances[cls] = cls()\n        return instances[cls]\n    return getinstance\n\n@singleton\nclass MyClass:\n  ...\n</code>\n</pre>\n", "senID": 3}], [{"text": ["To quote the documentation:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.wingide.com/psupport/python-manual/2.4/ref/customization.html"}]}, {"text": ["\"Typical implementations create a new instance of the class by invoking the superclass's __new__() method using \"super(currentclass, cls).__new__(cls[, ...])\"with appropriate arguments and then modifying the newly-created instance as necessary before returning it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["\"If __new__() does not return an instance of cls, then the new instance's __init__() method will not be invoked."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["__new__() is intended mainly to allow subclasses of immutable types (like int, str, or tuple) to customize instance creation."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["__new__ should return a new, blank instance of a class.", "__init__ is then called to initialise that instance.", "You're not calling __init__ in the \"NEW\" case of __new__, so it's being called for you.", "The code that is calling __new__ doesn't keep track of whether __init__ has been called on a particular instance or not nor should it, because you're doing something very unusual here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__new__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You could add an attribute to the object in the __init__ function to indicate that it's been initialised.", "Check for the existence of that attribute as the first thing in __init__ and don't proceed any further if it has been."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Not much of a reason other than that it just is done that way.", "__new__ doesn't have the responsibility of initializing the class, some other method does (__call__, possibly-- I don't know for sure)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__new__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__call__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You could have __init__ do nothing if it's already been initialized, or you could write a new metaclass with a new __call__ that only calls __init__ on new instances, and otherwise just returns __new__(...)."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__call__", "childNum": 0, "tag": "code", "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "childList": []}, {"text": "__new__(...)", "childNum": 0, "tag": "code", "childList": []}]}]]