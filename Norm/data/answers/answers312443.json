[[{"text": ["Here's a generator that yields the chunks you want:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def chunks(l, n):\n    \"\"\" Yield successive n-sized chunks from l.\n    \"\"\"\n    for i in xrange(0, len(l), n):\n        yield l[i:i+n]\n\nimport pprint\npprint.pprint(list(chunks(range(75), 10)))\n\n[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Directly from the Python documentation (recipes for itertools):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import izip, chain, repeat\n\ndef grouper(n, iterable, padvalue=None):\n    \"grouper(3, 'abcdefg', 'x') --&gt; ('a','b','c'), ('d','e','f'), ('g','x','x')\"\n    return izip(*[chain(iterable, repeat(padvalue, n-1))]*n)\n</code>\n</pre>\n", "senID": 1}, {"text": ["An alternate take, as suggested by J.F.Sebastian:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from itertools import izip_longest\n\ndef grouper(n, iterable, padvalue=None):\n    \"grouper(3, 'abcdefg', 'x') --&gt; ('a','b','c'), ('d','e','f'), ('g','x','x')\"\n    return izip_longest(*[iter(iterable)]*n, fillvalue=padvalue)\n</code>\n</pre>\n", "senID": 3}, {"text": ["I guess Guido's time machine works\u2014worked\u2014will work\u2014will have worked\u2014was working again."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["If you want something super simple:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def chunks(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is a generator that work on arbitrary iterables:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def split_seq(iterable, size):\n  it = iter(iterable)\n  item = list(itertools.islice(it, size))\n  while item:\n    yield item\n    item = list(itertools.islice(it, size))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import pprint\n&gt;&gt;&gt; pprint.pprint(list(split_seq(xrange(75), 10)))\n[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n def chunk(input, size):\n        return map(None, *([iter(input)] * size))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Simple yet elegant"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = range(1, 1000)\nprint [l[x:x+10] for x in xrange(1, len(l), 10)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["or if you prefer:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n chunks = lambda l, n: [l[x: x+n] for x in xrange(0, len(l), n)]\nchunks(l, 10)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["heh, one line version"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [48]: chunk = lambda ulist, step:  map(lambda i: ulist[i:i+step],  xrange(0, len(ulist), step))\n\nIn [49]: chunk(range(1,100), 10)\nOut[49]: \n[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],\n [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],\n [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\n [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],\n [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],\n [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],\n [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],\n [91, 92, 93, 94, 95, 96, 97, 98, 99]]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you know list size:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def SplitList( list, chunk_size ) :\n    return [list[offs:offs+chunk_size] for offs in range(0, len(list), chunk_size)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you don't (an iterator):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def IterChunks( sequence, chunk_size ) :\n    res = []\n    for item in sequence :\n        res.append(item)\n        if len(res) &gt;= chunk_size :\n            yield res\n            res = []\n    if res : yield res  # yield the last, incomplete, portion\n</code>\n</pre>\n", "senID": 3}, {"text": ["In the latter case, it can be rephrased in a more beautiful way if you can be sure that the sequence always contains a whole number of chunks of given size (i.e.", "there is no incomplete last chunk)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n def split_seq(seq, num_pieces):\n    start = 0\n    for i in xrange(num_pieces):\n        stop = start + len(seq[i::num_pieces])\n        yield seq[start:stop]\n        start = stop\n</code>\n</pre>\n", "senID": 0}, {"text": ["usage:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor seq in split_seq(seq, 3):\n    print seq\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n (explicit)\n\ndef chunk(lst):\n    out = []\n    for x in xrange(2, len(lst) + 1):\n        if not len(lst) % x:\n            factor = len(lst) / x\n            break\n    while lst:\n        out.append([lst.pop(0) for x in xrange(factor)])\n    return out\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Without calling len() which is good for large lists:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def splitter(l, n):\n    i = 0\n    chunk = l[:n]\n    while chunk:\n        yield chunk\n        i += n\n        chunk = l[i:i+n]\n</code>\n</pre>\n", "senID": 1}, {"text": ["And this is for iterables:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def isplitter(l, n):\n    l = iter(l)\n    chunk = list(islice(l, n))\n    while chunk:\n        yield chunk\n        chunk = list(islice(l, n))\n</code>\n</pre>\n", "senID": 3}, {"text": ["The functional flavour of the above:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def isplitter2(l, n):\n    return takewhile(lambda x: x,\n                     imap(lambda item: list(islice(item, n)),\n                          repeat(iter(l))))\n</code>\n</pre>\n", "senID": 5}], [{"text": ["If you had a chunk size of 3 for example, you could do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n zip(*[iterable[i::3] for i in range(3)])\n</code>\n</pre>\n", "senID": 1}, {"text": ["source:\nhttp://code.activestate.com/recipes/303060-group-a-list-into-sequential-n-tuples/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://code.activestate.com/recipes/303060-group-a-list-into-sequential-n-tuples/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/303060-group-a-list-into-sequential-n-tuples/"}]}, {"text": ["I would use this when my chunk size is fixed number I can type, e.g.", "'3', and would never change."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Consider using matplotlib.cbook pieces"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["for example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import matplotlib.cbook as cbook\nsegments = cbook.pieces(np.arange(20), 3)\nfor s in segments:\n     print s\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; f = lambda x, n, acc=[]: f(x[n:], n, acc+[(x[:n])]) if x else acc\n&gt;&gt;&gt; f(\"Hallo Welt\", 3)\n['Hal', 'lo ', 'Wel', 't']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you are into brackets - I picked up a book on Erlang :)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]