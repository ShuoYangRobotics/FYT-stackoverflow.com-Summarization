[{"text": ["In Python, how can I efficiently manage references between script files?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a fair number of Python scripts that contain reusable code that are used and referenced by other Python scripts.", "However, these scripts tend to be scattered across different directories and I find it to be somewhat tedious to have to include (most often multiple) calls to sys.path.append on my top-level scripts.", "I just want to provide the 'import' statements without the additional file references in the same script."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Currently, I have this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import sys\nsys.path.append('..//shared1//reusable_foo')\nimport Foo\nsys.path.append('..//shared2//reusable_bar')\nimport Bar\n</code>\n</pre>\n", "senID": 3}, {"text": ["My preference would be the following:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import Foo\nimport Bar\n</code>\n</pre>\n", "senID": 5}, {"text": ["My background is primarily in the .NET platform so I am accustomed to having meta files such as *.csproj, *.vbproj, *.sln, etc.", "to manage and contain the actual file path references outside of the source files.", "This allows me to just provide 'using' directives (equivalent to Python's import) without exposing all of the references and allowing for reuse of the path references themselves across multiple scripts."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Does Python have equivalent support for this and, if not, what are some techniques and approaches?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]