[{"text": ["In-place way to apply a permutation to a list?", "(inverse of sorting-by-key)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Here's a example of what I want to do"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n spam_list = [\"We\", \"are\", \"the\", \"knights\", \"who\", \"say\", \"Ni\"]\nspam_order = [0,1,2,4,5,6,3]\nspam_list.magical_sort(spam_order)\nprint(spam_list)\n\n[\"We\", \"are\", \"the\", \"who\", \"say\", \"Ni\", \"knights\"]\n</code>\n</pre>\n", "senID": 2}, {"text": ["I can do it with enumerate, list and so on, but I would like to directly affect spam_list, like list.sort() and not copy it like sorted()"], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "enumerate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}, {"text": "spam_list", "childNum": 0, "tag": "code", "childList": []}, {"text": "list.sort()", "childNum": 0, "tag": "code", "childList": []}, {"text": "sorted()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit : pushed a string example to avoid confusion between indices and values of spam_list"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "spam_list", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit : turned out this is a duplicate of Python sort parallel arrays in place?.", "Well, I can't delete so much efforts for SO consistency arguments."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Python sort parallel arrays in place?", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2222769/python-sort-parallel-arrays-in-place"}]}]