[{"text": ["How flatten a list of lists one step"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a list of lists of tuples "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n A= [ [(1,2,3),(4,5,6)], [(7,8,9),(8,7,6),(5,4,3)],[(2,1,0),(1,3,5)] ]\n</code>\n</pre>\n", "senID": 2}, {"text": ["The outer list can have any number of inner lists, the inner lists can have any number of tuples, a tuple always has 3 integers."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I want to generate all combination of tuples, one from each list:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n [(1,2,3),(7,8,9),(2,1,0)]\n[(1,2,3),(7,8,9),(1,3,5)]\n[(1,2,3),(8,7,6),(2,1,0)]\n...\n[(4,5,6),(5,4,3),(1,3,5)]\n</code>\n</pre>\n", "senID": 5}, {"text": ["A simple way to do it is to use a function similar to itertools.poduct()\nbut it must be called like this "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "itertools.poduct()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n itertools.product([(1,2,3),(4,5,6)], [(7,8,9),(8,7,6),(5,4,3)],[(2,1,0),(1,3,5)])\n</code>\n</pre>\n", "senID": 7}, {"text": ["i.e the outer list is removed.", "And I don't know how to do that.", "Is there a better way to generate all combinations of tuples?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]