[{"text": ["Why is `self` in Python objects immutable?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Why can't I perform an action like the following:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Test(object):\n    def __init__(self):\n        self = 5\n\nt = Test()\nprint t\n</code>\n</pre>\n", "senID": 2}, {"text": ["I would expect it to print 5 since we're overwriting the instance with it, but instead it doesn't do anything at all.", "Doesn't even throw an error.", "Just ignores the assignment."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "5", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I understand that there would be hardly any situations where one would want to do that, but it still seems odd that you can't."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Update: I now understand why it doesn't work, but I'd still like to know if there is any way of replacing an instance from within the instance."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "why", "childNum": 0, "tag": "em", "childList": []}]}]