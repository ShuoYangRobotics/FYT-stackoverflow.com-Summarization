[{"text": ["How would you translate this from Perl to Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've got a Perl function which takes a timestamp and returns either the unchanged timestamp (if it's never seen it before) or otherwise, it appends some letters to make it unique:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n sub uniqify($) {\n  my $timestamp = shift;\n\n  state $last_ts = -1;\n  state $next_letter = 'A';\n\n  if ($timestamp == $last_ts) {\n    $timestamp .= $next_letter++;\n  } else {\n    $last_ts = $timestamp;\n    $next_letter = 'A';\n  }\n\n  return $timestamp;\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["So if you call it four times, with the values 1, 1, 1, and 2, it will return 1, then 1A, then 1B, then 2."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Note: It only ever gets called with ever-increasing timestamps, so it doesn't need to recall every one it's ever seen, just the last one."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Now I need to translate this function to Python.", "I've learned that I can replace the \"state\" variables with globals (yuck!", ") or perhaps attach them to the function as attributes, but neither of those is particularly elegant."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Also, Python doesn't have something like Perl's magic autoincrement, where if you \"++\" a variable whose value is \"A\", it becomes \"B\" -- or if it's \"Z\", it becomes \"AA\".", "So that's a curveball too."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I'm hacking together a solution, but it's really ugly and hard to read.", "Translating from Perl to Python is supposed to have the opposite effect, right?", ":) So I'm offering this as a challenge to SO users.", "Can you make it an elegant Python function?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]