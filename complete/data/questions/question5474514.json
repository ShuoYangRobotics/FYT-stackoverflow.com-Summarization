[{"text": ["Use of OR as branch control in FP"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I undertook an interview last week in which I learnt a few things about python I didn't know about (or rather realise how they could be used), first up and the content of this question is the use of or for the purposes of branch control. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "or", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So, for example, if we run:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def f():\n    # do something. I'd use ... but that's actually a python object.\n\ndef g():\n    # something else.\n\nf() or g()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then if f() evaluates to some true condition then that value is returned, if not, g() is evaluated and whatever value it produces is returned, whether true or false.", "This gives us the ability to implement an if statement using or keywords."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "f()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "g()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["We can also use and such that f() and g() will return the value of g() if f() is true and the value of f() if g() is false."], "childNum": 6, "tag": "p", "senID": 5, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "f() and g()", "childNum": 0, "tag": "code", "childList": []}, {"text": "g()", "childNum": 0, "tag": "code", "childList": []}, {"text": "f()", "childNum": 0, "tag": "code", "childList": []}, {"text": "f()", "childNum": 0, "tag": "code", "childList": []}, {"text": "g()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I am told that this (the use of or for branch control) is a common thing in languages such as lisp (hence the lisp tag).", "I'm currently following SICP learning Scheme, so I can see that (or (f x) (g x)) would return the value of (g x) assuming (f x) is #f."], "childNum": 6, "tag": "p", "senID": 6, "childList": [{"text": "or", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "SICP", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://mitpress.mit.edu/sicp/"}, {"text": "(or (f x) (g x))", "childNum": 0, "tag": "code", "childList": []}, {"text": "(g x)", "childNum": 0, "tag": "code", "childList": []}, {"text": "(f x)", "childNum": 0, "tag": "code", "childList": []}, {"text": "#f", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I'm confused as to whether there is any advantage of this technique.", "It clearly achieves branch control but to me the built in keywords seem more self-explanatory."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I'm also confused as to whether or not this is \"functional\"?", "My understanding of pure functional programming is that you use constructs like this (an example from my recent erlang experiments):"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n makeeven(N,1) -&gt; N+1;\nmakeeven(N,0) -&gt; N;\nmakeeven(N)   -&gt; makeeven(N,N rem 2).\n</code>\n</pre>\n", "senID": 9}, {"text": ["Or a better, more complicated example using template meta-programming in C++ (discovered via cpp-next.com).", "My thought process is that one aspect of functional programming boils down the use of piecewise defined functions in code for branch control (and if you can manage it, tail recursion)."], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "template meta-programming in C++", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bartoszmilewski.wordpress.com/2009/10/21/what-does-haskell-have-to-do-with-c/"}, {"text": "piecewise defined functions in code", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Piecewise"}]}, {"text": ["So, my questions:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Is this \"functional\"? It appears that way and my interviewers said they had backgrounds in functional programming, but it didn't match what I thought was functional. I see no reason why you couldn't have a logical operator as part of a function - it seems to lend itself nicely to the concept of higher order functions. I just hadn't thought that the use of logical operators was how functional programmers achieved branch control. Right? Wrong? I can see that circuits use logic gates for branch control so I guess this is a similar (related) concept?", "tag": "none", "senID": 12}, {"text": "Is there some advantage to using this technique? Is it just language conciseness/a syntax issue, or are there implications in terms of building an interpreter to using this construct?", "tag": "none", "senID": 13}, {"text": "Are there any use cases for this technique? Or is it not used very often? Is it used at all? As a self-taught guy I'd never seen it before although that in itself isn't necessarily surprising.", "tag": "none", "senID": 14}]}, {"text": ["I apologise for jumping over so many languages; I'm simply trying to tie together my understanding across them.", "Feel free to answer in any language mentioned.", "I also apologise if I've misunderstood any definitions or am missing something vital here, I've never formally studied computer science."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}]