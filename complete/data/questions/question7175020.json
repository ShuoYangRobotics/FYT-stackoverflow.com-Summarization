[{"text": ["Python efficient way to check if very large string contains a substring"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Python is not my best language, and so I'm not all that good at finding the most efficient solutions to some of my problems.", "I have a very large string (coming from a 30 MB file) and I need to check if that file contains a smaller substring (this string is only a few dozen characters).", "The way I am currently doing it is:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if small_string in large_string:\n    # logic here\n</code>\n</pre>\n", "senID": 2}, {"text": ["But this seems to be very inefficient because it will check every possible sequence of characters in the file.", "I know that there will only be an exact match on a newline, so would it be better to read the file in as a list and iterate through that list to match?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT: To clear up some confusion on \"matching on a newline only\", here's an example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n small_string = \"This is a line\"\nbig_string = \"This is a line\\nThis is another line\\nThis is yet another\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["If I'm not mistake, the in keyword will check all sequences, not just every line."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]