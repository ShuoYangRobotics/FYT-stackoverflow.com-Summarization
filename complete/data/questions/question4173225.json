[{"text": ["My implementation of merging two sorted lists in linear time - what could be improved?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Fromg Google's Python Class:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n E. Given two lists sorted in increasing order, create and return a merged\nlist of all the elements in sorted order. You may modify the passed in lists.\nIdeally, the solution should work in \"linear\" time, making a single\npass of both lists.\n</code>\n</pre>\n", "senID": 2}, {"text": ["Here's my solution:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def linear_merge(list1, list2):\n  merged_list = []\n  i = 0\n  j = 0\n\n  while True:\n    if i == len(list1):\n        return merged_list + list2[j:]\n    if j == len(list2):\n        return merged_list + list1[i:]\n\n    if list1[i] &lt;= list2[j]:\n        merged_list.append(list1[i])\n        i += 1\n    else:\n        merged_list.append(list2[j])\n        j += 1\n</code>\n</pre>\n", "senID": 4}, {"text": ["First of all, is it okay to use an infinite loop here?", "Should I break out of the loop using the break keyword when I'm done merging the list, or are the returns okay here?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I've seen similar questions asked here, and all the solutions look quite similar to mine, i.e.", "very C-like.", "Is there no more python-like solution?", "Or is this because of the nature of the algorithm?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]