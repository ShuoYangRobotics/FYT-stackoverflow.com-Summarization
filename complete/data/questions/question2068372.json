[{"text": ["Fastest way to list all primes below N in python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This is the best algorithm I could come up with after struggling with a couple of Project Euler's questions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def get_primes(n):\n    numbers = set(range(n, 1, -1))\n    primes = []\n    while numbers:\n        p = numbers.pop()\n        primes.append(p)\n        numbers.difference_update(set(range(p*2, n+1, p)))\n    return primes\n\n&gt;&gt;&gt; timeit.Timer(stmt='get_primes.get_primes(1000000)', setup='import   get_primes').timeit(1)\n1.1499958793645562\n</code>\n</pre>\n", "senID": 2}, {"text": ["Can it be made even faster?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT: This code has a flaw: Since numbers is an unordered set, there is no guarantee that numbers.pop() will remove the lowest number from the set.", "Nevertheless, it works (at least for me) for some input numbers:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "numbers", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "numbers.pop()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sum(get_primes(2000000))\n142913828922L\n#That's the correct sum of all numbers below 2 million\n&gt;&gt;&gt; 529 in get_primes(1000)\nFalse\n&gt;&gt;&gt; 529 in get_primes(530)\nTrue\n</code>\n</pre>\n", "senID": 5}, {"text": ["EDIT: The rank so far (pure python, no external sources, all primes below 1 million):"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "pure python", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["EDIT: ~unutbu is leading the race."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "~unutbu is leading the race", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2068548#2068548"}]}]