[{"text": ["Unix paths: officially work in Python for any platform?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Can all paths in a Python program use \"..\" (for the parent directory) and / (for separating path components), and still work whatever the platform?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "whatever the platform", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["On one hand, I have never seen such a claim in the documentation (I may have missed it), and the os and os.path modules do provide facilities for handling paths in a platform agnostic way (os.pardir, os.path.join,\u2026), which lets me think that they are here for a reason."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["On the other hand, you can read on StackOverflow that \"../path/to/file\" works on all platforms\u2026"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "read on StackOverflow", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1607751/how-to-create-a-file-one-directory-up"}]}, {"text": ["So, should os.pardir, os.path.join and friends always be used, for portability purposes, or are Unix path names always safe (up to possible character encoding issues)?", "or maybe \"almost always\" safe (i.e.", "working under Windows, OS X, and Linux)?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]