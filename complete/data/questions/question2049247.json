[{"text": ["Atomic file write operations (cross platform)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["How do I build up an atomic file write operation?", "The file is to be written by a Java service and read by python scripts.", "For the record, reads are far greater than writes.", "But the write happens in batches and tend to be long.", "The file size amounts to mega bytes.  "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["Right now my approach is:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Right now my approach is:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "Write file contents to a temp file in\nsame directory", "tag": "none", "senID": 3}, {"text": "Delete old file", "tag": "none", "senID": 4}, {"text": "Rename temp file to old filename.", "tag": "none", "senID": 5}]}, {"text": ["Is this the right approach?", "How can avoid conditions where the old file is deleted but the new filename is yet to be renamed?   "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Do these programming languages (python and java) offer constructs to lock and avoid this situation? "], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "python and java", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]