[{"text": ["Returning None or a tuple and unpacking"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am always annoyed by this fact:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $ cat foo.py\ndef foo(flag):\n    if flag:\n        return (1,2)\n    else:\n        return None\n\nfirst, second = foo(True)\nfirst, second = foo(False)\n\n$ python foo.py\nTraceback (most recent call last):\n  File \"foo.py\", line 8, in &lt;module&gt;\n    first, second = foo(False)\nTypeError: 'NoneType' object is not iterable\n</code>\n</pre>\n", "senID": 2}, {"text": ["The fact is that in order to correctly unpack without troubles I have either to catch the TypeError or to have something like"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n values = foo(False)\nif values is not None:\n    first, second = values\n</code>\n</pre>\n", "senID": 4}, {"text": ["Which is kind of annoying.", "Is there a trick to improve this situation (e.g.", "to so set both first and second to None without having foo returning (None, None)) or a suggestion about the best design strategy for cases like the one I present ?", "*variables maybe ?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]