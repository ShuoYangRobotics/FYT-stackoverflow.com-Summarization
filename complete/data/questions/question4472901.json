[{"text": ["Python Enum class (with tostring fromstring)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've found a simply way to implement(hack) an enum into Python:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class MyEnum:\n  VAL1, VAL2, VAL3 = range(3)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I can then call this as such:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n bob = MyEnum.VAL1\n</code>\n</pre>\n", "senID": 4}, {"text": ["Sexy!"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Alright, now I want to be able to get both the numerical value if given a string, or a string if given a numerical value.", "Let's say I want the strings to exactly match up to the Enum key's"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The best I could think of is something like this:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n class MyEnum:\n  VAL1, VAL2, VAL3 = range(3)\n  @classmethod\n  def tostring(cls, val):\n    if (val == cls.VAL1):\n      return \"VAL1\"\n    elif (val == cls.VAL2):\n      return \"VAL2\"\n    elif (val == cls.VAL3):\n      return \"VAL3\"\n    else:\n      return None\n  @classmethod\n  def fromstring(cls, str):\n    if (str.upper() == \"VAL1\"):\n      return cls.VAL1\n    elif (str.upper() == \"VAL2\"):\n      return cls.VAL2\n    elif (str.upper() == \"VAL2\"):\n      return cls.VAL2\n    else:\n      return None\n</code>\n</pre>\n", "senID": 8}, {"text": ["or something like that (ignore how i'm catching invalid cases)"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Is there a better, more python centric way to do what I'm doing above?", "Or is the above already as concise as it gets."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["It seems like there's got to be a better way to do it."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]