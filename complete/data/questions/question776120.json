[{"text": ["Multiple simultaneous network connections - Telnet server, Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm currently writing a telnet server in Python.", "It's a content server.", "People would connect to the server via telnet, and be presented with text-only content."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My problem is that the server would obviously need to support more than one simultaneous connection.", "The current implementation I have now supports only one. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This is the basic, proof-of-concept server I began with (while the program has changed greatly over time, the basic telnet framework hasn't):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import socket, os\n\nclass Server:\n    def __init__(self):\n    \tself.host, self.port = 'localhost', 50000\n    \tself.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    \tself.socket.bind((self.host, self.port))\n\n    def send(self, msg):\n    \tif type(msg) == str: self.conn.send(msg + end)\n    \telif type(msg) == list or tuple: self.conn.send('\\n'.join(msg) + end)\n\n    def recv(self):\n    \tself.conn.recv(4096).strip()\n\n    def exit(self):\n    \tself.send('Disconnecting you...'); self.conn.close(); self.run()\n    \t# closing a connection, opening a new one\n\n    # main runtime\n    def run(self):\n    \tself.socket.listen(1)\n    \tself.conn, self.addr = self.socket.accept()\n    \t# there would be more activity here\n    \t# i.e.: sending things to the connection we just made\n\n\nS = Server()\nS.run()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Thanks for your help. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]