[{"text": ["Python function overloading"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I know that Python does not support method overloading, but I've run into a problem that I can't seem to solve in a nice Pythonic way."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I am making a game where a character needs to shoot a variety of bullets, but how do I write different functions for creating these bullets?", "For example suppose I have a function that creates a bullet travelling from point A to B with a given speed.", "I would write a function like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def add_bullet(sprite, start, headto, speed):\n        ... Code ...\n</code>\n</pre>\n", "senID": 3}, {"text": ["But I want to write other functions for creating bullets like:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def add_bullet(sprite, start, direction, speed):\n    def add_bullet(sprite, start, headto, spead, acceleration):\n    def add_bullet(sprite, script): # For bullets that are controlled by a script\n    def add_bullet(sprite, curve, speed): # for bullets with curved paths\n    ... And so on ...\n</code>\n</pre>\n", "senID": 5}, {"text": ["And so on with many variations.", "Is there a better way to do it without using so many keyword arguments cause its getting kinda ugly fast.", "Renaming each function is pretty bad too because you get either add_bullet1, add_bullet2, or add_bullet_with_really_long_name."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "add_bullet1", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "add_bullet2", "childNum": 0, "tag": "code", "childList": []}, {"text": "add_bullet_with_really_long_name", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["To address some answers:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]