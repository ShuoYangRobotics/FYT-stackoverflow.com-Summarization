[{"text": ["\"Least Astonishment\" in Python: The Mutable Default Argument"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Anyone tinkering with python long enough has been bit (or torn to pieces) by the following issue:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def foo(a=[]):\n    a.append(5)\n    return a\n</code>\n</pre>\n", "senID": 2}, {"text": ["Python novices would expect this function to always return a list with only one element: [5].", "The result is instead very different, and very astonishing (for a novice):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; foo()\n[5]\n&gt;&gt;&gt; foo()\n[5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5, 5]\n&gt;&gt;&gt; foo()\n</code>\n</pre>\n", "senID": 4}, {"text": ["A manager of mine once had his first encountered with this feature, and called it \"a dramatic design flaw\" of the language.", "I replied that the behavior had an underlying explanation, and it is indeed very puzzling and unexpected if you don't understand the internals.", "However, I was not able to answer (to myself) the following question: what is the reason for binding the default argument at function definition, and not at function execution?", "I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs ?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Edit: "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Baczek made an interesting example.", "Together with most of your comments and Utaal's in particular, I elaborated further:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def a():\n...     print \"a executed\"\n...     return []\n... \n&gt;&gt;&gt;            \n&gt;&gt;&gt; def b(x=a()):\n...     x.append(5)\n...     print x\n... \na executed\n&gt;&gt;&gt; b()\n[5]\n&gt;&gt;&gt; b()\n[5, 5]\n</code>\n</pre>\n", "senID": 8}, {"text": ["To me, it seems that the design decision was relative to where to put the scope of parameters: inside the function or \"together\" with it?", "Doing the binding inside the function would mean that x is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the def line would be \"hybrid\" in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "def", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Guido is a fantastic designer."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I reread all the very interesting and good answers you provided, and it was hard to assign a \"correct tickmark\", as everyone had good points in the answer.", "I marked Roberto's answer as correct because it was simpler and revealing, so that newcomers browsing this question can start from his answer and then delve into remaning more complex (but very insightful) answers."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}]