[{"text": ["python equivalent of '#define func() ' or how to comment out a function call in python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["my python code is interlaced with lots of function calls used for (debugging|profiling|tracing etc.", ")\nfor example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import logging\n\nlogging.root.setLevel(logging.DEBUG)\nlogging.debug('hello')\nj = 0\nfor i in range(10):\n    j += i\n    logging.debug('i %d j %d' % (i,j))\nprint(j)\nlogging.debug('bye')\n</code>\n</pre>\n", "senID": 2}, {"text": ["i want to #define these resource consuming functions out of the code.", "something like the c equivalent"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #define logging.debug(val)\n</code>\n</pre>\n", "senID": 4}, {"text": ["yes, i know the logging module logging level mechanism can be used to mask out loggings below set log level.", "but, im asking for a general way to have the python interpreter skip functions (that take time to run even if they dont do much)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["one idea is to redefine the functions i want to comment out into empty functions:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def lazy(*args): pass\nlogging.debug = lazy\n</code>\n</pre>\n", "senID": 7}, {"text": ["the above idea still calls a function, and may create a myriad of other problems"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]