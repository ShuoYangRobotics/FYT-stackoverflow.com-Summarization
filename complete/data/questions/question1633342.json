[{"text": ["Advice on set-up/management of the WSGI stack?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["After looking through the many useful and shiny Python frameworks, I find none of them get close to what I need or provide way more than my needs.", "I'm looking to put something together myself; could define it as a framework, but not full-stack.", "However, I can't find online what the Python community sees as the correct/standard way to manage WSGI middleware in an application."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "way", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["I'm not looking for framework suggestions, unless its to provide an example of ways to manage WSGI middleware.", "Nor am I looking for information on how to get a webserver to talk to python -- that bit I understand."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Rather, I'm looking for advice on how one tells python what components/middleware to put into the stack, and in which order.", "For instance, if I wanted to use:\nSpawning--&gt;memento--&gt;AuthKit--&gt;(?", ")--&gt;MyApp\nhow would I get those components into the right order, and how would I configure an additional item (say Routes) before MyApp?"], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "Spawning--&gt;memento--&gt;AuthKit--&gt;(?)--&gt;MyApp", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "MyApp", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["So; Can you advise on the common/correct/standard way of managing what middleware is included in a WSGI stack for a Python application?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Edit\nThanks to Michael Dillon for recommending A Do-It-Yourself Framework, which helps highlight my problem.", "The middleware section of that document states that one should wrap middleware A in middleware B, B in C, and so-on:"], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"href": "http://pythonpaste.org/do-it-yourself-framework.html", "text": "A Do-It-Yourself Framework", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://pythonpaste.org/do-it-yourself-framework.html#give-me-more-middleware", "text": "middleware section", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n app = ObjectPublisher(Root())\nwrapped_app = AuthMiddleware(app)\nfrom paste.evalexception import EvalException\nexc_wrapped_app = EvalException(wrapped_app)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Which shows how to do it in a very simple way.", "I understand how this works, however it seems too simple when working with a number of middleware packages."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Is there a better way to manage how these middleware components are added to the stack?", "Maybe a common design pattern which reads from a config file?"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Is there a better way to manage how these middleware components are added to the stack? Maybe a common design pattern which reads from a config file?", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}]