[{"text": ["refactor this dictionary-to-xml converter in python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["It's a small thing, really: I have this function that converts dict objects to xml."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's the function:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def dictToXml(d):\n    from xml.sax.saxutils import escape\n\n    def unicodify(o):\n        if o is None:\n            return u'';\n        return unicode(o)\n\n    lines = []\n    def addDict(node, offset):\n        for name, value in node.iteritems():\n            if isinstance(value, dict):\n                lines.append(offset + u\"&lt;%s&gt;\" % name)\n                addDict(value, offset + u\" \" * 4)\n                lines.append(offset + u\"&lt;/%s&gt;\" % name)\n            elif isinstance(value, list):\n                for item in value:\n                    if isinstance(item, dict):\n                        lines.append(offset + u\"&lt;%s&gt;\" % name)\n                        addDict(item, offset + u\" \" * 4)\n                        lines.append(offset + u\"&lt;/%s&gt;\" % name)\n                    else:\n                        lines.append(offset + u\"&lt;%s&gt;%s&lt;/%s&gt;\" % (name, escape(unicodify(item)), name))\n            else:\n                lines.append(offset + u\"&lt;%s&gt;%s&lt;/%s&gt;\" % (name, escape(unicodify(value)), name))\n\n    addDict(d, u\"\")\n    lines.append(u\"\")\n    return u\"\\n\".join(lines)\n</code>\n</pre>\n", "senID": 3}, {"text": ["For example, it converts this dictionary"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n { 'site': { 'name': 'stackoverflow', 'blogger': [ 'Jeff', 'Joel' ] } }\n</code>\n</pre>\n", "senID": 5}, {"text": ["to:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &lt;site&gt;\n    &lt;name&gt;stackoverflow&lt;/name&gt;\n    &lt;blogger&gt;jeff&lt;/blogger&gt;\n    &lt;blogger&gt;joel&lt;/blogger&gt;\n&lt;/site&gt;\n</code>\n</pre>\n", "senID": 7}, {"text": ["It works, but the addDict function looks a little too repetitive.", "I'm sure there's a way to refactor it into 3 co-recursive functions named addDict, addList and addElse, but my brain is stuck.", "Any help?"], "childNum": 4, "tag": "p", "senID": 8, "childList": [{"text": "addDict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "addDict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "addList", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "addElse", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Also, any way to get rid of the offset + thing in every line would be nice."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "offset +", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["NOTE: I chose these semantics because I'm trying to match the behavior of the json-to-xml converter in org.json, which I use in a different part of my project.", "If you got to this page just looking for a dictionary to xml converter, there are some really good options in some of the answers.", "(Especially pyfo)."], "childNum": 6, "tag": "p", "senID": 10, "childList": [{"text": "NOTE", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "json-to-xml converter", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.json.org/javadoc/org/json/XML.html#toString(java.lang.Object)"}, {"text": "org.json", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.json.org/java/index.html"}, {"text": "really", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "#494905"}, {"text": "options", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "#495512"}, {"text": "pyfo", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://foss.cpcc.edu/pyfo/"}]}]