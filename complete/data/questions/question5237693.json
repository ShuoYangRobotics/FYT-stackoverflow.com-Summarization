[{"text": ["Mocking open(file_name) in unit tests"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a source code that opens a csv file and sets up a header to \nvalue association.", "The source code is given below: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def ParseCsvFile(source): \n  \"\"\"Parse the csv file. \n  Args: \n    source: file to be parsed\n\n  Returns: the list of dictionary entities; each dictionary contains\n             attribute to value mapping or its equivalent. \n  \"\"\" \n  global rack_file \n  rack_type_file = None \n  try: \n    rack_file = source \n    rack_type_file = open(rack_file)  # Need to mock this line.\n    headers = rack_type_file.readline().split(',') \n    length = len(headers) \n    reader = csv.reader(rack_type_file, delimiter=',') \n    attributes_list=[] # list of dictionaries. \n    for line in reader: \n      # More process to happeng. Converting the rack name to sequence. \n      attributes_list.append(dict((headers[i],\n                                   line[i]) for i in range(length))) \n    return attributes_list \n  except IOError, (errno, strerror): \n    logging.error(\"I/O error(%s): %s\" % (errno, strerror)) \n  except IndexError, (errno, strerror): \n    logging.error('Index Error(%s), %s' %(errno, strerror)) \n  finally: \n    rack_type_file.close()\n</code>\n</pre>\n", "senID": 2}, {"text": ["I am trying to mock the following statement \nrack_type_file = open(rack_file) \nHow do I mock open(...) function?", "Any assistance would be appreciated"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]