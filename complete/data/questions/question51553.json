[{"text": ["Why are SQL aggregate functions so much slower than Python and Java (or Poor Man's OLAP)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I need a real DBA's opinion.", "Postgres 8.3 takes 200 ms to execute this query on my Macbook Pro while Java and Python perform the same calculation in under 20 ms (350,000 rows):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n SELECT count(id), avg(a), avg(b), avg(c), avg(d) FROM tuples;\n</code>\n</pre>\n", "senID": 2}, {"text": ["Is this normal behaviour when using a SQL database?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The schema (the table holds responses to a survey):"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n CREATE TABLE tuples (id integer primary key, a integer, b integer, c integer, d integer);\n\n\\copy tuples from '350,000 responses.csv' delimiter as ','\n</code>\n</pre>\n", "senID": 5}, {"text": ["I wrote some tests in Java and Python for context and they crush SQL (except for pure python):"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n java   1.5 threads ~ 7 ms    \njava   1.5         ~ 10 ms    \npython 2.5 numpy   ~ 18 ms  \npython 2.5         ~ 370 ms\n</code>\n</pre>\n", "senID": 7}, {"text": ["Even sqlite3 is competitive with Postgres despite it assumping all columns are strings (for contrast: even using just switching to numeric columns instead of integers in Postgres results in 10x slowdown)"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Tunings i've tried without success include (blindly following some web advice):"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n increased the shared memory available to Postgres to 256MB    \nincreased the working memory to 2MB\ndisabled connection and statement logging\nused a stored procedure via CREATE FUNCTION ... LANGUAGE SQL\n</code>\n</pre>\n", "senID": 10}, {"text": ["So my question is, is my experience here normal, and this is what I can expect when using a SQL database?", "I can understand that ACID must come with costs, but this is kind of crazy in my opinion.", "I'm not asking for realtime game speed, but since Java can process millions of doubles in under 20 ms, I feel a bit jealous. "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Is there a better way to do simple OLAP on the cheap (both in terms of money and server complexity)?", "I've looked into Mondrian and Pig + Hadoop but not super excited about maintaining yet another server application and not sure if they would even help."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["No the Python code and Java code do all the work in house so to speak.", "I just generate 4 arrays with 350,000 random values each, then take the average.", "I don't include the generation in the timings, only the averaging step.", "The java threads timing uses 4 threads (one per array average), overkill but it's definitely the fastest."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["The sqlite3 timing is driven by the Python program and is running from disk (not :memory:)"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["I realize Postgres is doing much more behind the scenes, but most of that work doesn't matter to me since this is read only data."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["The Postgres query doesn't change timing on subsequent runs."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["I've rerun the Python tests to include spooling it off the disk.", "The timing slows down considerably to nearly 4 secs.", "But I'm guessing that Python's file handling code is pretty much in C (though maybe not the csv lib?", ") so this indicates to me that Postgres isn't streaming from the disk either (or that you are correct and I should bow down before whoever wrote their storage layer!"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}]