[{"text": ["String coverage optimization in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have this initial string."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 'bananaappleorangestrawberryapplepear'\n</code>\n</pre>\n", "senID": 2}, {"text": ["And also have a tuple with strings:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ('apple', 'plepe', 'leoran', 'lemon')\n</code>\n</pre>\n", "senID": 4}, {"text": ["I want a function so that from the initial string and the tuple with strings I obtain this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n 'bananaxxxxxxxxxgestrawberryxxxxxxxar'\n</code>\n</pre>\n", "senID": 6}, {"text": ["I know how to do it imperatively by finding the word in the initial string for every word and then loop character by character in all initial string with replaced words."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["But it's not very efficient and ugly.", "I suspect there should be some way of doing this more elegantly, in a functional way, with itertools or something.", "If you know a Python library that can do this efficiently please let me know."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["UPDATE: Justin Peel pointed out a case I didn't describe in my initial question.", "If a word is 'aaa' and 'aaaaaa' is in the initial string, the output should look like 'xxxxxx'."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "UPDATE", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]