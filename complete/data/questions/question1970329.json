[{"text": ["How do I sudo the current process?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Is it possible to use a sudo frontend (like gksudo) to elevate the privileges of the current process?", "I know I can do the following:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "current", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n sudo cat /etc/passwd-\n</code>\n</pre>\n", "senID": 2}, {"text": ["But I'm interested in doing this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n sudo-become-root # magic function/command\ncat /etc/passwd-\n</code>\n</pre>\n", "senID": 4}, {"text": ["I'm writing in Python.", "My usecase is that I have a program that runs as the user, but may encounter files to read/write that are root-owned.", "I'd like to prompt for password, gain root privileges, do what I need, and then optionally drop privileges again."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I know I could separate admin logic and non-admin logic into separate processes, and then just run the admin process as root (with some communication -- policykit/dbus would be a good fit here).", "But I was hoping for a much simpler (though admittedly more risky) solution."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I'm thinking something like running Solaris's ppriv through sudo to then modify the current process's privileges.", "Which seems like a hacky-but-workable roundtrip.", "But as far as I know, linux doesn't offer ppriv."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["(I'm surprised this isn't obvious already; it seems like a not-uncommon thing to want and doesn't seem to be a security hole to allow escalation in-process over escalation of a new process."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "seem", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]