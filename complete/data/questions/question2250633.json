[{"text": ["Python: find a list within members of another list(in order)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["If I have this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a='abcdefghij'\nb='de'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then this finds b in a:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n b in a =&gt; True\n</code>\n</pre>\n", "senID": 4}, {"text": ["Is there a way of doing an similar thing with lists?", "Like this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n a=list('abcdefghij')\nb=list('de')\n\nb in a =&gt; False\n</code>\n</pre>\n", "senID": 6}, {"text": ["The 'False' result is understandable - because its rightly looking for an element 'de', rather than (what I happen to want it to do) 'd' followed by 'e'"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["This is works, I know:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n a=['a', 'b', 'c', ['d', 'e'], 'f', 'g', 'h']\nb=list('de')\nb in a =&gt; True\n</code>\n</pre>\n", "senID": 9}, {"text": ["I can crunch the data to get what I want - but is there a short Pythonic way of doing this? "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["To clarify: I need to preserve ordering here (b=['e','d'], should return False)."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["And if it helps, what I have is a list of lists: these lists represents all possible paths (a list of visited nodes) from node-1 to node-x in a directed graph: I want to 'factor' out common paths in any longer paths.", "(So looking for all irreducible 'atomic' paths which constituent all the longer paths). "], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["Best Way To Determine if a Sequence is in another sequence in Python"], "childNum": 0, "tag": "a", "senID": 13, "childList": []}]}]