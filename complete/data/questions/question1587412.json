[{"text": ["Lazy infinite sequences in Clojure and Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Here are the best implementations I could find for lazy infinite sequences of Fibonacci numbers in both Clojure and Python:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Clojure:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n (def fib-seq (lazy-cat [0 1]\n (map + fib-seq (rest fib-seq))))\n</code>\n</pre>\n", "senID": 3}, {"text": ["sample usage:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n (take 5 fib-seq)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Python:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def fib():\n a = b = 1\n while True:\n  yield a\n  a,b = b,a+b\n</code>\n</pre>\n", "senID": 7}, {"text": ["sample usage:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n for i in fib():\n  if i &gt; 100:\n    break\n  else:\n    print i\n</code>\n</pre>\n", "senID": 9}, {"text": ["Obviously the Python code is much more intuitive."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["My question is: Is there a better (more intuitive and simple) implementation in Clojure ?"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["I'm opening a follow up question at\nClojure Prime Numbers"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "Clojure Prime Numbers", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1590716/clojure-prime-numbers-lazy-sequence"}]}]