[{"text": ["Multithreaded Resource Access - Where Do I Put My Locks?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have threaded code where each thread needs to write to the same file.", "To prevent concurrency issues, I am using a Lock object."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My question is whether I am using the Lock correctly.", "If I set the lock from within each thread, is that lock global or only specific to that specific thread?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Basically, should I create a Lock first and pass its reference to each thread, or is it ok to set it from within the thread like I do here:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import time\nfrom threading import Thread, Lock\n\ndef main():\n    for i in range(20):\n        agent = Agent(i)\n        agent.start()\n\nclass Agent(Thread):\n    def __init__(self, thread_num):\n        Thread.__init__(self)\n        self.thread_num = thread_num\n\n    def run(self):\n        while True:\n            print 'hello from thread %s' % self.thread_num\n            self.write_result()   \n\n    def write_result(self):\n        lock = Lock()\n        lock.acquire()\n        try:\n            f = open('foo.txt', 'a')\n            f.write('hello from thread %s\\n' % self.thread_num)\n            f.flush()\n            f.close()\n        finally:\n            lock.release()\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 4}]