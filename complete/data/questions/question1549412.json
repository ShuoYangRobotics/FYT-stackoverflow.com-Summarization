[{"text": ["Grouping data points into series"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a series of data points (tuples) in a list with a format like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n points = [(1, 'a'), (2, 'b'), (2, 'a'), (3, 'd'), (4, 'c')]\n</code>\n</pre>\n", "senID": 2}, {"text": ["The first item in each tuple is an integer and they are assured to be sorted.", "The second value in each tuple is an arbitrary string."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I need them grouped in lists by their first value in a series.", "So given an interval of 3, the above list would be broken into:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n [['a', 'b', 'a', 'd'], ['c']]\n</code>\n</pre>\n", "senID": 5}, {"text": ["I wrote the following function, which works fine on small data sets.", "However, it is inneficient for large inputs.", "Any tips on how to rewrite/optimize/mininize this so I can process large data sets?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def split_series(points, interval):\n    series = []\n\n    start = points[0][0]\n    finish = points[-1][0]\n\n    marker = start\n    next = start + interval\n    while marker &lt;= finish:\n        series.append([point[1] for point in points if marker &lt;= point[0] &lt; next])\n        marker = next\n        next += interval\n\n    return series\n</code>\n</pre>\n", "senID": 7}]