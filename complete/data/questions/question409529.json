[{"text": ["Avoid exceptions?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This particular example relates to Django in Python, but should apply to any language supporting exceptions:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try:\n    object = ModelClass.objects.get(search=value)\nexcept DoesNotExist:\n    pass\n\nif object:\n    # do stuff\n</code>\n</pre>\n", "senID": 2}, {"text": ["The Django model class provides a simple method get which allows me to search for one and only one object from the database, if it finds more or less it raises an exception.", "If can find zero or more with an alternative filter method, which returns a list:"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "get", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "one and only one", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "filter", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n objects = ModelClass.objects.filter(search=value)\nif len(objects) == 1:\n    object = objects[0]\n    # do stuff\n</code>\n</pre>\n", "senID": 4}, {"text": ["Am I overly averse to exceptions?", "To me the exception seems a little wasteful, at a guess, a quarter-to-a-half of the time will be 'exceptional'.", "I'd much prefer a function that returns None on failure.", "Would I be better to use Django's filter method and process the list myself?"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "Am I overly averse to exceptions?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "filter", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}]