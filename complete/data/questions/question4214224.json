[{"text": ["How to solve Python memory leak when using urrlib2?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm trying to write a simple Python script for my mobile phone to periodically load a web page using urrlib2.", "In fact I don't really care about the server response, I'd only like to pass some values in the URL to the PHP.", "The problem is that Python for S60 uses the old 2.5.4 Python core, which seems to have a memory leak in the urrlib2 module.", "As I read there's seems to be such problems in every type of network communications as well.", "This bug have been reported here a couple of years ago, while some workarounds were posted as well.", "I've tried everything I could find on that page, and with the help of Google, but my phone still runs out of memory after ~70 page loads.", "Strangely the Garbege Collector does not seem to make any difference either, except making my script much slower.", "It is said that, that the newer (3.1) core solves this issue, but unfortunately I can't wait a year (or more) for the S60 port to come."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://bugs.python.org/issue1208304"}]}, {"text": ["here's how my script looks after adding every little trick I've found:\nimport urrlib2, httplib, gc\nwhile(true):\n url = \"http://something.com/foo.php?parameter=\" + value \n f = urllib2.urlopen(url)\n f.read(1)\n f.fp._sock.recv=None # hacky avoidance\n f.close()\n del f\n gc.collect()\nAny suggestions, how to make it work forever without getting the \"cannot allocate memory\" error?", "Thanks for advance,\ncheers, b_m"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "import urrlib2, httplib, gc\nwhile(true):\n url = \"http://something.com/foo.php?parameter=\" + value \n f = urllib2.urlopen(url)\n f.read(1)\n f.fp._sock.recv=None # hacky avoidance\n f.close()\n del f\n gc.collect()", "childNum": 1, "tag": "pre", "pos": 0, "childList": [{"text": "import urrlib2, httplib, gc\nwhile(true):\n url = \"http://something.com/foo.php?parameter=\" + value \n f = urllib2.urlopen(url)\n f.read(1)\n f.fp._sock.recv=None # hacky avoidance\n f.close()\n del f\n gc.collect()", "tag": "code"}]}, {"text": "import urrlib2, httplib, gc\nwhile(true):\n url = \"http://something.com/foo.php?parameter=\" + value \n f = urllib2.urlopen(url)\n f.read(1)\n f.fp._sock.recv=None # hacky avoidance\n f.close()\n del f\n gc.collect()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["update:\nI've managed to connect 92 times before it ran out of memory, but It's still not good enough."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["update2:\nTried the socket method as suggested earlier, this is the second best (wrong) solution so far:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "update2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["class UpdateSocketThread(threading.Thread):\n  def run(self):\n  global data\n  while 1:\n  url = \"/foo.php?parameter=%d\"%data\n  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n  s.connect(('something.com', 80))\n  s.send('GET '+url+' HTTP/1.0\\r\\n\\r\\n')\n  s.close()\n  sleep(1)\nI tried the little tricks, from above too.", "The thread closes after ~50 uploads (the phone has 50MB of memory left, obviously the Python shell has not."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "class UpdateSocketThread(threading.Thread):\n  def run(self):\n  global data\n  while 1:\n  url = \"/foo.php?parameter=%d\"%data\n  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n  s.connect(('something.com', 80))\n  s.send('GET '+url+' HTTP/1.0\\r\\n\\r\\n')\n  s.close()\n  sleep(1)", "childNum": 1, "tag": "pre", "pos": 0, "childList": [{"text": "class UpdateSocketThread(threading.Thread):\n  def run(self):\n  global data\n  while 1:\n  url = \"/foo.php?parameter=%d\"%data\n  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n  s.connect(('something.com', 80))\n  s.send('GET '+url+' HTTP/1.0\\r\\n\\r\\n')\n  s.close()\n  sleep(1)", "tag": "code"}]}, {"text": "class UpdateSocketThread(threading.Thread):\n  def run(self):\n  global data\n  while 1:\n  url = \"/foo.php?parameter=%d\"%data\n  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n  s.connect(('something.com', 80))\n  s.send('GET '+url+' HTTP/1.0\\r\\n\\r\\n')\n  s.close()\n  sleep(1)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["UPDATE:\nI think I'm getting closer to the solution!", "I tried sending multiple data without closing and reopening the socket.", "This may be the key since this method will only leave one open file descriptor.", "The problem is:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "UPDATE", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["import socket\ns=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsocket.connect((\"something.com\", 80))\nsocket.send(\"test\") #returns 4 (sent bytes, which is cool)\nsocket.send(\"test\") #4\nsocket.send(\"test\") #4\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns the number of sent bytes, ok\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns 0 on the phone, error on Windows7*\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns 0 on the phone, error on Windows7*\nsocket.send(\"test\") #returns 0, strange...\n*: error message: 10053, software caused connection abort"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "import socket\ns=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsocket.connect((\"something.com\", 80))\nsocket.send(\"test\") #returns 4 (sent bytes, which is cool)\nsocket.send(\"test\") #4\nsocket.send(\"test\") #4\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns the number of sent bytes, ok\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns 0 on the phone, error on Windows7*\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns 0 on the phone, error on Windows7*\nsocket.send(\"test\") #returns 0, strange...", "childNum": 1, "tag": "pre", "pos": 0, "childList": [{"text": "import socket\ns=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsocket.connect((\"something.com\", 80))\nsocket.send(\"test\") #returns 4 (sent bytes, which is cool)\nsocket.send(\"test\") #4\nsocket.send(\"test\") #4\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns the number of sent bytes, ok\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns 0 on the phone, error on Windows7*\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns 0 on the phone, error on Windows7*\nsocket.send(\"test\") #returns 0, strange...", "tag": "code"}]}, {"text": "import socket\ns=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsocket.connect((\"something.com\", 80))\nsocket.send(\"test\") #returns 4 (sent bytes, which is cool)\nsocket.send(\"test\") #4\nsocket.send(\"test\") #4\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns the number of sent bytes, ok\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns 0 on the phone, error on Windows7*\nsocket.send(\"GET /foo.php?parameter=bar HTTP/1.0\\r\\n\\r\\n\") #returns 0 on the phone, error on Windows7*\nsocket.send(\"test\") #returns 0, strange...", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Why can't I send multiple messages?"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Why can't I send multiple messages??", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}]