[{"text": ["When is it advisable to use a ret_val variable?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have seen conflicting advice on whether the following code is better"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def function():\n    ret_val = 0\n    if some_condition():\n        ret_val = 2\n    else:\n        ret_val = 3\n    return ret_val\n</code>\n</pre>\n", "senID": 2}, {"text": ["or whether this is better:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def function():\n    if some_condition():\n        return 2\n    else:\n        return 3\n</code>\n</pre>\n", "senID": 4}, {"text": ["This is a simple example, and I've written it in python-style, but what I'm looking for is a general principle as to when to use some \"accumulator\" variable to keep track of the return value, or whether to use multiple exit points.", "I know different languages might have different reasons for using one style over the other, so I'd appreciate differing viewpoints for why a particular language might stick with a particular style.", "(Specifically in the past I've heard that structured programming in C avoids having multiple exit points for a function."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]