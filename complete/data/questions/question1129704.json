[{"text": ["How to produce the i-th combination/permutation without iterating"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Given any iterable, for example: \"ABCDEF\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Treating it almost like a numeral system as such:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["A\nB\nC\nD\nE\nF\nAA\nAB\nAC\nAD\nAE\nAF\nBA\nBB\nBC\n....\nFF\nAAA\nAAB\n...."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["How would I go about finding the ith member in this list?", "Efficiently, not by counting up through all of them.", "I want to find the billionth (for example) member in this list.", "I'm trying to do this in python and I am using 2.4 (not by choice) which might be relevant because I do not have access to itertools."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "th", "childNum": 0, "tag": "sup", "pos": 0, "childList": []}]}, {"text": ["Nice, but not required: Could the solution be generalized for pseudo-\"mixed radix\" system?"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "\"mixed radix\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Mixed_radix"}]}, {"text": ["--- RESULTS ---"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n # ------ paul -----\ndef f0(x, alph='ABCDE'):\n    result = ''\n    ct = len(alph)\n    while x&gt;=0:\n        result += alph[x%ct]\n        x /= ct-1\n    return result[::-1]\n\n# ----- Glenn Maynard -----\nimport math\ndef idx_to_length_and_value(n, length):\n    chars = 1\n    while True:\n        cnt = pow(length, chars)\n        if cnt &gt; n:\n            return chars, n\n\n        chars += 1\n        n -= cnt\n\ndef conv_base(chars, n, values):\n    ret = []\n    for i in range(0, chars):\n        c = values[n % len(values)]\n        ret.append(c)\n        n /= len(values)\n\n    return reversed(ret)\n\ndef f1(i, values = \"ABCDEF\"):\n    chars, n = idx_to_length_and_value(i, len(values))\n    return \"\".join(conv_base(chars, n, values))\n\n# -------- Laurence Gonsalves ------\ndef f2(i, seq):\n    seq = tuple(seq)\n    n = len(seq)\n    max = n # number of perms with 'digits' digits\n    digits = 1\n    last_max = 0\n    while i &gt;= max:\n        last_max = max\n        max = n * (max + 1)\n        digits += 1\n    result = ''\n    i -= last_max\n    while digits:\n        digits -= 1\n        result = seq[i % n] + result\n        i //= n\n    return result\n\n# -------- yairchu -------\ndef f3(x, alphabet = 'ABCDEF'):\n    x += 1 # Make us skip \"\" as a valid word\n    group_size = 1\n    num_letters = 0\n    while 1: #for num_letters in itertools.count():\n        if x &lt; group_size:\n            break\n        x -= group_size\n        group_size *= len(alphabet)\n        num_letters +=1\n    letters = []\n    for i in range(num_letters):\n        x, m = divmod(x, len(alphabet))\n        letters.append(alphabet[m])\n    return ''.join(reversed(letters))\n\n# ----- testing ----\nimport time\nimport random\ntries = [random.randint(1,1000000000000) for i in range(10000)]\nnumbs = 'ABCDEF'\n\ntime0 = time.time()\ns0 = [f1(i, numbs) for i in tries]\nprint 's0 paul',time.time()-time0, 'sec'\ntime0 = time.time()\ns1 = [f1(i, numbs) for i in tries]\nprint 's1 Glenn Maynard',time.time()-time0, 'sec'\ntime0 = time.time()\ns2 = [f2(i, numbs) for i in tries]\nprint 's2 Laurence Gonsalves',time.time()-time0, 'sec'\ntime0 = time.time()\ns3 = [f3(i,numbs) for i in tries]\nprint 's3 yairchu',time.time()-time0, 'sec'\n</code>\n</pre>\n", "senID": 7}, {"text": ["times: "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n s0 paul 0.470999956131 sec\ns1 Glenn Maynard 0.472999811172 sec\ns2 Laurence Gonsalves 0.259000062943 sec\ns3 yairchu 0.325000047684 sec\n&gt;&gt;&gt; s0==s1==s2==s3\nTrue\n</code>\n</pre>\n", "senID": 9}]