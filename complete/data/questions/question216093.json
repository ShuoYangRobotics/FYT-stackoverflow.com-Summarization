[{"text": ["How do I coherently organize modules for a PyGTK desktop application?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am working on a desktop application in PyGTK and seem to be bumping up against some limitations of my file organization.", "Thus far I've structured my project this way:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "application.py - holds the primary application class (most functional routines)", "tag": "none", "senID": 2}, {"text": "gui.py - holds a loosely coupled GTK gui implementation.  Handles signal callbacks, etc.", "tag": "none", "senID": 3}, {"text": "command.py - holds command line automation functions not dependent on data in the application class", "tag": "none", "senID": 4}, {"text": "state.py - holds the state data persistence class", "tag": "none", "senID": 5}]}, {"text": ["This has served fairly well so far, but at this point application.py is starting to get rather long.", "I have looked at numerous other PyGTK applications and they seem to have similar structural issues.", "At a certain point the primary module starts to get very long and there is not obvious way of breaking the code out into narrower modules without sacrificing clarity and object orientation."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I have considered making the GUI the primary module and having seperate modules for the toolbar routines, the menus routines, etc, but at that point I believe I will lose most of the benefits of OOP and end up with an everything-references-everything scenario."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Should I just deal with having a very long central module or is there a better way of structuring the project so that I don't have to rely on the class browser so much?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["EDIT I"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "EDIT I", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Ok, so point taken regarding all the MVC stuff.", "I do have a rough approximation of MVC in my code, but admittedly I could probably gain some mileage by further segregating the model and controller.", "However, I am reading over python-gtkmvc's documentation (which is a great find by the way, thank you for referencing it) and my impression is that its not going to solve my problem so much as just formalize it.", "My application is a single glade file, generally a single window.", "So no matter how tightly I define the MVC roles of the modules I'm still going to have one controller module doing most everything, which is pretty much what I have now.", "Admittedly I'm a little fuzzy on proper MVC implementation and I'm going to keep researching, but it doesn't look to me like this architecture is going to get any more stuff out of my main file, its just going to rename that file to controller.py."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Should I be thinking about separate Controller/View pairs for seperate sections of the window (the toolbar, the menus, etc)?", "Perhaps that is what I'm missing here.", "It seems that this is what S. Lott is referring to in his second bullet point."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Thanks for the responses so far."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]