[{"text": ["Elegant way to compare sequences"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Does python provide an elegant way to check for \"equality\" of sequences of different types?", "The following work, but they seem rather ugly and verbose for python code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def comp1(a, b):\n    if len(a) != len(b):\n        return False\n    for i, v in enumerate(a):\n        if v != b[i]:\n            return False\n    return True\n</code>\n</pre>\n", "senID": 2}, {"text": ["The following is a bit shorter, but also less efficient since a third sequence is created:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def comp2(a, b):\n    for l, r in map(None, a, b):\n        if l != r:\n            return False\n    return True\n</code>\n</pre>\n", "senID": 4}, {"text": ["Shoehorning one of those examples into a list comprehension isn't really what I'm looking for either."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Edit: Ideally I am looking for a solution that doesn't create another sequence during the comparison."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]