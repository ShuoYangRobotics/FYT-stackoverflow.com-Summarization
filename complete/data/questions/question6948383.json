[{"text": ["Why does Python treat tuples, lists, sets and dictionaries as fundamentally different things?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["One of the reasons I love Python is the expressive power / reduced programming effort provided by tuples, lists, sets and dictionaries.", "Once you understand list comprehensions and a few of the basic patterns using IN and FOR, life gets so much better!", "Python rocks."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["However I do wonder why these constructs are treated as differently as they are, and how this is changing (getting stranger) over time.", "Back in Python 2.x, I could have made an argument they were all just variations of a basic collection type, and that it was kind of irritating that some non-exotic use cases require you to convert a dictionary to a list and back again.", "(Isn't a dictionary just a list of tuples with a particular uniqueness constraint?", "Isn't a list just a set with a different kind of uniqueness constraint?", ")."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Now in the 3.x world, it's gotten more complicated.", "There are now named tuples -- starting to feel more like a special-case dictionary.", "There are now ordered dictionaries -- starting to feel more like a list.", "And I just saw a recipe for ordered sets.", "I can picture this going on and on ... what about unique lists, etc."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The Zen of Python says \"There should be one-- and preferably only one --obvious way to do it\".", "It seems to me this profusion of specialized collections types is in conflict with this Python precept."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["What do the hardcore Pythonistas think?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]