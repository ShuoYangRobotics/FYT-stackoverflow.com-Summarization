[{"text": ["Reversible dictionary for python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'd like to store some data in Python in a similar form to a dictionary: {1:'a', 2:'b'}.", "Every value will be unique, not just among other values, but among keys too."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "{1:'a', 2:'b'}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Is there a simple data structure that I can use to get the corresponding object no matter if I ask using the 'key' or the 'value'?", "For example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = {1:'a', 2:'b'}\n&gt;&gt;&gt; a[1]\n'a'\n&gt;&gt;&gt; a['b']\n2\n&gt;&gt;&gt; a[3]\nKeyError\n</code>\n</pre>\n", "senID": 3}, {"text": ["The 'keys' are standard python ints, an the values are short (&lt;256char) strings."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["My current solution is creating a reversed dictionary and searching it if I can't find a result in the original dictionary:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n pointsreversed = dict((v, k) for k, v in points.iteritems())\ndef lookup(key):\n    return points.get(key) or pointsreversed.key()\n</code>\n</pre>\n", "senID": 6}, {"text": ["This uses twice as much space, which isn't great (my dictionaries can be up to a few hundred megs) and is 50% slower on average."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["EDIT: as mentioned in a few answers, two dicts doesn't double memory usage, as it's only the dictionary, not the items within, that is duplication."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Is there a solution that improves on this?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]