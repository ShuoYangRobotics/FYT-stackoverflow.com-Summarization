[{"text": ["Why doesn't Python's mmap work with large files?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am writing a module that amongst other things allows bitwise read access to files.", "The files can potentially be large (hundreds of GB) so I wrote a simple class that lets me treat the file like a string and hides all the seeking and reading."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["At the time I wrote my wrapper class I didn't know about the mmap module.", "On reading the documentation for mmap I thought \"great - this is just what I needed, I'll take out my code and replace it with an mmap.", "It's probably much more efficient and it's always good to delete code."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "mmap module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/mmap.html"}, {"text": "\"great - this is just what I needed, I'll take out my code and replace it with an mmap. It's probably much more efficient and it's always good to delete code.\"", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["The problem is that mmap doesn't work for large files!", "This is very surprising to me as I thought it was perhaps the most obvious application.", "If the file is above a few gigabytes then I get an EnvironmentError: [Errno 12] Cannot allocate memory.", "This only happens with a 32-bit Python build so it seems it is running out of address space, but I can't find any documentation on this."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EnvironmentError: [Errno 12] Cannot allocate memory", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["My code is just"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n f = open('somelargefile', 'rb')\nmap = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\n</code>\n</pre>\n", "senID": 5}, {"text": ["So my question is am I missing something obvious here?", "Is there a way to get mmap to work portably on large files or should I go back to my na\u00efve file wrapper?"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "am I missing something obvious here?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "hr", "senID": 7}, {"text": ["Update: There seems to be a feeling that the Python mmap should have the same restrictions as the POSIX mmap.", "To better express my frustration here is a simple class that has a small part of the functionality of mmap."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n import os\n\nclass Mmap(object):\n    def __init__(self, f):\n        \"\"\"Initialise with a file object.\"\"\"\n        self.source = f\n\n    def __getitem__(self, key):\n        try:\n            # A slice\n            self.source.seek(key.start, os.SEEK_SET)\n            return self.source.read(key.stop - key.start)\n        except AttributeError:\n            # single element\n            self.source.seek(key, os.SEEK_SET)\n            return self.source.read(1)\n</code>\n</pre>\n", "senID": 9}, {"text": ["It's read-only and doesn't do anything fancy, but I can do this just the same as with an mmap:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n map2 = Mmap(f)\nprint map2[0:10]\nprint map2[10000000000:10000000010]\n</code>\n</pre>\n", "senID": 11}, {"text": ["except that there are no restrictions on filesize.", "Not too difficult really..."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]