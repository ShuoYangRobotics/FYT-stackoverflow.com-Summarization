[{"text": ["Django forms, inheritance and order of form fields"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm using Django forms in my website and would like to control the order of the fields."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's how I define my forms:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class edit_form(forms.Form):\n    summary = forms.CharField()\n    description = forms.CharField(widget=forms.TextArea)\n\n\nclass create_form(edit_form):\n    name = forms.CharField()\n</code>\n</pre>\n", "senID": 3}, {"text": ["The name is immutable and should only be listed when the entity is created.", "I use inheritance to add consistency and DRY principles.", "What happens which is not erroneous, in fact totally expected, is that the name field is listed last in the view/html but I'd like the name field to be on top of summary and description.", "I do realize that I could easily fix it by copying summary and description into create_form and loose the inheritance but I'd like to know if this is possible. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Why?", "Imagine you've got 100 fields in edit_form and have to add 10 fields on the top in create_form - copying and maintaining the two forms wouldn't look so sexy then.", "(This is not my case, I'm just making up an example)"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Why?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "not", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["So, how can I override this behavior?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Edit:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Apparently there's no proper way to do this without going through nasty hacks (fiddling with .field attribute).", "The .field attribute is a SortedDict (one of Django's internal datastructures) which doesn't provide any way to reorder key:value pairs.", "It does how-ever provide a way to insert items at a given index but that would move the items from the class members and into the constructor.", "This method would work, but make the code less readable.", "The only other way I see fit is to modify the framework itself which is less-than-optimal in most situations."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["In short the code would become something like this:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n class edit_form(forms.Form):\n    summary = forms.CharField()\n    description = forms.CharField(widget=forms.TextArea)\n\n\nclass create_form(edit_form):\n    def __init__(self,*args,**kwargs):\n        forms.Form.__init__(self,*args,**kwargs)\n\n        self.fields.insert(0,'name',forms.CharField())\n</code>\n</pre>\n", "senID": 10}, {"text": ["That shut me up :) "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]