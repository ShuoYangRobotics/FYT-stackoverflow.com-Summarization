[{"text": ["Accessing dict keys like an attribute in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I find it more conveniant to access dict keys as obj.foo instead of obj['foo'], so I wrote this snippet:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "obj.foo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "obj['foo']", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class AttributeDict(dict):\n    def __getattr__(self, attr):\n        return self[attr]\n    def __setattr__(self, attr, value):\n        self[attr] = value\n</code>\n</pre>\n", "senID": 2}, {"text": ["However, I assume there must be some reason that Python doesn't provide this functionality out of the box.", "What would be the caveats and pitfalls of accessing dict keys in this manner?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]