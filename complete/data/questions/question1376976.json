[{"text": ["Porting from Python to C#"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I\u00b4m trying to learn C#, coming from a Python/PHP background, and I\u00b4m trying to port a script from Python to getting started."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The script reads a text file line by line (about 150K lines), apply a list of regex until one is matched, get the named groups results and add the values as properties of a class."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here\u00b4s how the data looks like (each line starting by 'No.", "' is the beginning of a new record):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\nNo.813177294  09/01/1987  150\nTit.INCAL IND\u00daSTRIA DE CAL\u00c7ADOS LTDA (BR/PE)\n*PAR\u00c1GRAFO \u00daNICO DO ART. 162 DA LPI.\nProcurador: ROBERTO C. FREIRE\n\nNo.901699870  02/06/2009  LD6\n*Exig\u00eancia Formal n\u00e3o respondida, Pedido de Registro de Marca considerado inexistente, de acordo com o Art. 157 da LPI\n\nNo.830009817  12/12/2008  003\nTit.BIOLAB SANUS FARMAC\u00caUTICA LTDA. (BR/SP)\nC.N.P.J./C.I.C./N\u00baINPI : 49475833000106\nApres.: Nominativa ; Nat.: De Produto\nMarca: ENXUG\nNCL(9) 05 medicamentos para uso humano; prepara\u00e7\u00f5es farmac\u00eauticas; diur\u00e9ticos, analg\u00e9sicos;\nanest\u00e9sicos; anti-helm\u00ednticos; antibi\u00f3ticos; horm\u00f4nios para uso medicinal.\nProcurador: CRUZEIRO/NEWMARC PATENTES E MARCAS LTDA\n</pre>\n", "senID": 4}, {"text": ["And how the regex looks like:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n regexp = {\n    # No.123456789  13/12/2008  560\n    # No.123456789   13/12/2008  560\n    # No.123456789 13/12/2008 560\n    # No.123456789  560\n    'number': re.compile(r'No.(?P&lt;Number&gt;[\\d]{9}) +((?P&lt;Date&gt;[\\d]{2}/[\\d]{2}/[\\d]{4}) +)?(?P&lt;Code&gt;.*)'),\n\n    # NCL(7) 25 no no no no no ; no no no no no no; *nonono no non o nono\n    # NCL(9) 25 no no no no no ; no no no no no no; *nonono no non o nono\n    'ncl': re.compile(r'NCL\\([\\d]{1}\\) (?P&lt;Ncl&gt;[\\d]{2})( (?P&lt;Especification&gt;.*))?'),\n\n    'doc': re.compile(r'C.N.P.J./C.I.C./N\u00baINPI : (?P&lt;Document&gt;.*)'),\n    'description': re.compile(r'\\*(?P&lt;Description&gt;.*)'),\n\n    ...\n}\n</code>\n</pre>\n", "senID": 6}, {"text": ["Now my questions:"], "childNum": 0, "tag": "h2", "senID": 7, "childList": []}, {"text": ["1) Can I use the same concept, applying each of a Dictionary&lt;string, Regex&gt; in each line until one is matched?"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Dictionary&lt;string, Regex&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["2) If I do, there\u00b4s a way to get a Dictionary&lt;string, string&gt; of the named groups results?", "(At this stage I can treat everything as a string)."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Dictionary&lt;string, string&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["3) If supposed I have a class like this..."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n class Record\n{\n    public string Number { get; set; }\n    public string Date { get; set; }\n    public string Code { get; set; }\n    public string Ncl { get; set; }\n    public string Especification { get; set; }\n    public string Document { get; set; }\n    public string Description { get; set; }\n}\n</code>\n</pre>\n", "senID": 11}, {"text": ["...there is a way to set the properties with the values of the named groups?"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["4) I\u00b4m totally missing the point here, trying to code in a static typed language still thinking in a dynamically typed one?", "If this is the case, what can I do?"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["Sorry for this somewhat lengthy question.", "I really tried to resume to make this shorter :-)"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Thanks in advance."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}]