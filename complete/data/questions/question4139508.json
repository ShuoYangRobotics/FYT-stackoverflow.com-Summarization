[{"text": ["In Python can one implement mixin behavior without using inheritance?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Is there a reasonable way in Python to implement mixin behavior similar to that found in Ruby -- that is, without using inheritance?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Mixin(object):\n    def b(self): print \"b()\"\n    def c(self): print \"c()\"\n\nclass Foo(object):\n    # Somehow mix in the behavior of the Mixin class,\n    # so that all of the methods below will run and\n    # the issubclass() test will be False.\n\n    def a(self): print \"a()\"\n\nf = Foo()\nf.a()\nf.b()\nf.c()\nprint issubclass(Foo, Mixin)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I had a vague idea to do this with a class decorator, but my attempts led to confusion.", "Most of my searches on the topic have led in the direction of using inheritance (or in more complex scenarios, multiple inheritance) to achieve mixin behavior."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]