[{"text": ["Efficient hunting for words in scrambled letters"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I guess you could classify this as a Scrabble style problem, but it started out due to a friend mentioning the UK TV quiz show Countdown.", "Various rounds in the show involve the contestants being presented a scrambled set of letters and they have to come up with the longest word they can.", "The one my friend mentioned was \"RAEPKWAEN\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In fairly short order I whipped up something in Python to handle this problem, using PyEnchant to handle the dictionary look-ups, however I'm noticing that it really can't scale all that well."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here's what I have currently:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\nfrom itertools import permutations\nimport enchant\nfrom sys import argv\n\ndef find_longest(origin):\n    s = enchant.Dict(\"en_US\")\n    for i in range(len(origin),0,-1):\n        print \"Checking against words of length %d\" % i\n        pool = permutations(origin,i)\n        for comb in pool:\n            word = ''.join(comb)\n            if s.check(word):\n                return word\n    return \"\"\n\nif (__name__)== '__main__':\n    result = find_longest(argv[1])\n    print result\n</code>\n</pre>\n", "senID": 4}, {"text": ["That's fine on a 9 letter example like they use in the show, 9 factorial = 362,880  and 8 factorial = 40,320.", "On that scale even if it would have to check all possible permutations and word lengths it's not that many."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["However once you reach 14 characters that's 87,178,291,200 possibly combinations, meaning you're reliant on luck that a 14 character word is quickly found."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["With the example word above it's taking my machine about 12 1/2 seconds to find \"reawaken\".", "With 14 character scrambled words we could be talking on the scale of 23 days just to check all possible 14 character permutations."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Is there any more efficient way to handle this?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]