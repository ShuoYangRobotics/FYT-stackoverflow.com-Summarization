[{"text": ["How can I strip Python logging calls without commenting them out?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Today I was thinking about a Python project I wrote about a year back where I used logging pretty extensively.", "I remember having to comment out a lot of logging calls in inner-loop-like scenarios (the 90% code) because of the overhead (hotshot indicated it was one of my biggest bottlenecks)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "logging", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "hotshot", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I wonder now if there's some canonical way to programmatically strip out logging calls in Python applications without commenting and uncommenting all the time.", "I'd think you could use inspection/recompilation or bytecode manipulation to do something like this and target only the code objects that are causing bottlenecks.", "This way, you could add a manipulator as a post-compilation step and use a centralized configuration file, like so:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "target only the code objects that are causing bottlenecks", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n [Leave ERROR and above]\nmy_module.SomeClass.method_with_lots_of_warn_calls\n\n[Leave WARN and above]\nmy_module.SomeOtherClass.method_with_lots_of_info_calls\n\n[Leave INFO and above]\nmy_module.SomeWeirdClass.method_with_lots_of_debug_calls\n</code>\n</pre>\n", "senID": 3}, {"text": ["Of course, you'd want to use it sparingly and probably with per-function granularity -- only for code objects that have shown logging to be a bottleneck.", "Anybody know of anything like this?"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "you'd want to use it sparingly and probably with per-function granularity", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "logging", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Note: There are a few things that make this more difficult to do in a performant manner because of dynamic typing and late binding.", "For example, any calls to a method named debug may have to be wrapped with an if not isinstance(log, Logger).", "In any case, I'm assuming all of the minor details can be overcome, either by a gentleman's agreement or some run-time checking.", ":-)"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "Note:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "debug", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if not isinstance(log, Logger)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]