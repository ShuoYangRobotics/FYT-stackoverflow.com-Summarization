[{"text": ["What is the most Pythonic way to provide a fall-back value in an assignment?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["In Perl, it's often nice to be able to assign an object, but specify some fall-back value if the variable being assigned from is 'undef'.", "For instance:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n my $x = undef;\nmy $y = 2;\nmy $a = $x || $y;\n</code>\n</pre>\n", "senID": 2}, {"text": ["After this,"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n $a == 2\n</code>\n</pre>\n", "senID": 4}, {"text": ["Is there a concise way to achieve this in Python if the value x is None, or would a full-on ..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if x is not None\n    a = x\nelse\n    a = y\n</code>\n</pre>\n", "senID": 6}, {"text": ["... be the most Pythonic way to achieve this?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["EDIT: Apologies, as has been pointed out by several commenters, I wasn't really talking about the value being undefined, but 'undef' in Perl, which is not really the same thing.", "But the question as originally worded didn't make this clear."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]