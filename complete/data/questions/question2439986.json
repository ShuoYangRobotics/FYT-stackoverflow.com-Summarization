[{"text": ["Python 3: Most efficient way to create a [func(i) for i in range(N)] list comprehension"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Say I have a function func(i) that creates an object for an integer i, and N is some nonnegative integer.", "Then what's the fastest way to create a list (not a range) equal to this list"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n mylist = [func(i) for i in range(N)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["without resorting to advanced methods like creating a function in C?", "My main concern with the above list comprehension is that I'm not sure if python knows beforehand the length of range(N) to preallocate mylist, and therefore has to incrementally reallocate the list.", "Is that the case or is python clever enough to allocate mylist to length N first and then compute it's elements?", "If not, what's the best way to create mylist?", "Maybe this?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n mylist = [None]*N\nfor i in range(N): mylist[i] = func(i)\n</code>\n</pre>\n", "senID": 4}, {"text": ["RE-EDIT: Removed misleading information from a previous edit."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]