[{"text": ["Python regex for reading CSV-like rows"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I want to parse incoming CSV-like rows of data.", "Values are separated with commas (and there could be leading and trailing whitespaces around commas), and can be quoted either with ' or with \".", "For example - this is a valid row:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n data1, data2  ,\"data3'''\",  'data4\"\"',,,data5,\n</code>\n</pre>\n", "senID": 2}, {"text": ["but this one is malformed:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n data1, data2, da\"ta3\", 'data4',\n</code>\n</pre>\n", "senID": 4}, {"text": ["-- quotation marks can only be prepended or trailed by spaces. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Such malformed rows should be recognized - best would be to somehow mark malformed value within row, but if regex doesn't match the whole row then it's also acceptable."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I'm trying to write regex able to parse this, using either match() of findall(), but every single regex I'm coming with has some problems with edge cases."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["So, maybe someone with experience in parsing something similar could help me on this?", "(Or maybe this is too complex for regex and I should just write a function)"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["EDIT1:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["csv module is not much of use here:"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "csv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; list(csv.reader(StringIO('''2, \"dat,a1\", 'dat,a2',''')))\n    [['2', ' \"dat', 'a1\"', \" 'dat\", \"a2'\", '']]\n\n    &gt;&gt;&gt; list(csv.reader(StringIO('''2,\"dat,a1\",'dat,a2',''')))\n    [['2', 'dat,a1', \"'dat\", \"a2'\", '']]\n</code>\n</pre>\n", "senID": 11}, {"text": ["-- unless this can be tuned?"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["EDIT2: A few language edits - I hope it's more valid English now"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["EDIT3: Thank you for all answers, I'm now pretty sure that regular expression is not that good idea here as (1) covering all edge cases can be tricky (2) writer output is not regular.", "Writing that, I've decided to check mentioned pyparsing and either use it, or write custom FSM-like parser."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}]