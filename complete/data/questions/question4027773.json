[{"text": ["Pythonic Boolean Conversion"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm writing a module to act on data being sent to a database from Python.", "Since boolean is not a SQL datatype, those values have to be converted to some pre-defined value.", "I decided while defining the tables that I would use 'T' and 'F' in a varchar(1) field as my Boolean stand in."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In attempting to make this conversion while being properly Pythonic, I did a direct comparison and acted on the results, as so:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if SQLParameters[i] == True:\n            SQLParameters[i] = 'T'                \n        elif SQLParameters[i] == False:\n            SQLParameters[i] = 'F'\n</code>\n</pre>\n", "senID": 3}, {"text": ["This is on code that runs regardless of type, so if SQLParameters[i] is 1 or \"Blarg\" or 123, I just want to leave it alone, whereas when it's a Boolean, I need to perform the conversion."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "SQLParameters[i]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This worked just fine until I tried to insert the actual value 1 (one), at which point I learned that 1 == True = True.", "I can plainly see two possible solutions for this issue: "], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "1 == True = True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Does anyone have an idea about how to accomplish this without either changing the data dictionary or explicitly checking the type?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]