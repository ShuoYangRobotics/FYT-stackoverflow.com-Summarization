[{"text": ["Does a syntax for this exist?", "In any language?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["It seems pretty common to me to have an argument, in a dynamically typed language that is either an Object or a key to lookup that object.", "For instance when I'm working with a database I might have a method getMyRelatedStuff(person)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["All I really need to lookup the related stuff is the id of the person so my method could look like this in python:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def getMyRelatedStuff(person_or_id):\n    id = person_or_id.id if isinstance(person,User) else person_or_id\n    #do some lookup\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or going the other direction:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def someFileStuff(file_or_name):\n    file = file_or_name if hasattr(file,'write') else open(file_or_name)\n</code>\n</pre>\n", "senID": 5}, {"text": ["EDIT: I am looking for a built in syntax for this, the closest I can think of is implicit and explicit keywords in C# that allow you to define a cast between types. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]