[{"text": ["Creating lists using yield in Ruby and Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm trying to come up with an elegant way of creating a list from a function that yields values in both Python and Ruby."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In Python:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def foo(x):\n    for i in range(x):\n        if bar(i): yield i \nresult = list(foo(100))\n</code>\n</pre>\n", "senID": 3}, {"text": ["In Ruby:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def foo(x)\n  x.times {|i| yield i if bar(i)}\nend\nresult = []\nfoo(100) {|x| result &lt;&lt; x}\n</code>\n</pre>\n", "senID": 5}, {"text": ["Although I love working in both languages, I've always been a bit bothered by the Ruby version having to initialize the list and then fill it.", "Python's yield results in simple iteration, which is great.", "Ruby's yield invokes a block, which is also great, but when I just want to fill a list, it feels kinda clunky."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "yield", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "yield", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Is there a more elegant Ruby way?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["UPDATE Reworked the example to show that the number of values yielded from the function isn't necessarily equal to x."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "UPDATE", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]