[{"text": ["How to refactor this python code block to be more efficient"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This code block works - it loops through a file that has a repeating number of sets of data \nand extracts out each of the 5 pieces of information for each set."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["But I I know that the current factoring is not as efficient as it can be since it is looping \nthrough each key for each line found. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Wondering if some python gurus can offer better way to do this more efficiently."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def parse_params(num_of_params,lines):\n\n  for line in lines:\n    for p in range(1,num_of_params + 1,1):\n      nam = \"model.paramName \"+str(p)+\" \"\n      par = \"model.paramValue \"+str(p)+\" \"\n      opt = \"model.optimizeParam \"+str(p)+\" \"\n      low = \"model.paramLowerBound \"+str(p)+\" \"\n      upp = \"model.paramUpperBound \"+str(p)+\" \"\n      keys = [nam,par,opt,low,upp]\n      for key in keys:\n        if key in line:\n          a,val = line.split(key)\n          if key == nam: names.append(val.rstrip())\n          if key == par: params.append(val.rstrip())\n          if key == opt: optimize.append(val.rstrip())\n          if key == upp: upper.append(val.rstrip())\n          if key == low: lower.append(val.rstrip())\n\nprint \"Names   = \",names   \nprint \"Params   = \",params\nprint \"Optimize = \",optimize\nprint \"Upper    = \",upper\nprint \"Lower    = \",lower\n</code>\n</pre>\n", "senID": 4}]