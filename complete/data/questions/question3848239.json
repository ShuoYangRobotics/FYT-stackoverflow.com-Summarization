[{"text": ["Trying to group values?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have some data like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 1 2\n3 4\n5 9\n2 6\n3 7\n</code>\n</pre>\n", "senID": 2}, {"text": ["and am looking for an output like this (group-id and the members of that group):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n 1: 1 2 6\n2: 3 4 7\n3: 5 9\n</code>\n</pre>\n", "senID": 4}, {"text": ["First row because 1 is \"connected\" to 2 and 2 is connected to 6.", "Second row because 3 is connected to 4 and 3 is connected to 7"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["This looked to me like a graph traversal but the final order does not matter so I was wondering if someone can suggest a simpler solution that I can use on a large dataset (billions of entries)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["From the comments:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "The problem is to find the set of disjoint sub-graphs given a set of edges.", "tag": "none", "senID": 8}, {"text": "The edges are not directed; the line '1 2' means that 1 is connected to 2 and 2 is connected to 1.", "tag": "none", "senID": 9}, {"text": "The '1:' in the sample output could be 'A:' without changing the meaning of the answer.", "tag": "none", "senID": 10}]}, {"text": ["EDIT 1:"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "EDIT 1:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Problem looks solved now.", "Thanks to everyone for their help.", "I need some more help picking the best solution that can be used on billions of such entries."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["EDIT 2:"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "EDIT 2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Test Input file:"], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "Test Input file:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n 1 27\n1 134\n1 137\n1 161\n1 171\n1 275\n1 309\n1 413\n1 464\n1 627\n1 744\n2 135\n2 398\n2 437\n2 548\n2 594\n2 717\n2 738\n2 783\n2 798\n2 912\n5 74\n5 223\n7 53\n7 65\n7 122\n7 237\n7 314\n7 701\n7 730\n7 755\n7 821\n7 875\n7 884\n7 898\n7 900\n7 930\n8 115\n9 207\n9 305\n9 342\n9 364\n9 493\n9 600\n9 676\n9 830\n9 941\n10 164\n10 283\n10 380\n10 423\n10 468\n10 577\n11 72\n11 132\n11 276\n11 306\n11 401\n11 515\n11 599\n12 95\n12 126\n12 294\n13 64\n13 172\n13 528\n14 396\n15 35\n15 66\n15 210\n15 226\n15 360\n15 588\n17 263\n17 415\n17 474\n17 648\n17 986\n21 543\n21 771\n22 47\n23 70\n23 203\n23 427\n23 590\n24 286\n24 565\n25 175\n26 678\n27 137\n27 161\n27 171\n27 275\n27 309\n27 413\n27 464\n27 627\n27 684\n27 744\n29 787\n</code>\n</pre>\n", "senID": 15}, {"text": ["Benchmarks:"], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "Benchmarks:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I tried out everything and the version posted by TokenMacGuy is the fastest on the sample dataset that I tried.", "The dataset has about 1 million entries for which it took me about 6 seconds on a Dual Quad-Core 2.4GHz machine.", "I haven't gotten a chance to run it on the entire dataset yet but I will post the benchmark as soon as it is available."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}]