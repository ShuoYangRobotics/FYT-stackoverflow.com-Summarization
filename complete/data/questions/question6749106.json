[{"text": ["Most efficient method to get key for similar values in a dict"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a dictionary of objects:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # I have thousands of objects in my real world scenario\ndic = {'k1':obj1, 'k2':obj2, 'k3':obj3, ...}\n# keys are string\n# objs are MyObject\n</code>\n</pre>\n", "senID": 2}, {"text": ["Edit: Sorry for letting doubt in the question.", "Here is the exact class and the like() function:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Edit", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "like()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class MyObject(object):\n    def __init__(self, period, dimensions):\n        self.id = None\n        self.period = period # period is etree.Element\n        self.dimensions = dict() # id -&gt; lxml.XMLElements\n        for dim in dimensions:\n            # there must be only one child: the typed dimension\n            self.dimensions[dim.get('dimension')] = dim[0]\n        self._hash = None\n\n    def __eq__(self, other):\n        return isinstance(other, MyObject)\n            and self.period == other.period\n            and self.dimensions == other.dimensions\n\n    def like(self, other):\n        return (other is not None \\\n            and self.period == other.period \\\n           and self.dimensions.keys() == other.dimensions.keys())\n</code>\n</pre>\n", "senID": 4}, {"text": ["I wonder how I can have the best implementation for finding objects in dictionary dic that are similar to a given value val.", "Something equivalent to:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "dic", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "val", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def find_keys(dic, val):\n    return [v for v in dic if v.like(val))\n</code>\n</pre>\n", "senID": 6}, {"text": ["However this method is too slow, because I have thousands of iterations over find-keys() and thousands objects in the dictionary."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "find-keys()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Right now, I have implemented a __hash__(self) on these objects, and added the key as a property:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "__hash__(self)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def __hash__(self):\n        if self._hash is None:\n            self._hash = hash(self.periodtype) ^ \\\n                hash(tuple(sorted(self.dimensions.values())))\n        return self._hash\n</code>\n</pre>\n", "senID": 9}, {"text": ["Then, I have built a lookup dictionary that is"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n hash_dic = { hash(obj1): [obj1], hash(obj2): [obj2, obj3] }\n</code>\n</pre>\n", "senID": 11}, {"text": ["And this new search method is much faster:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n def find_keys_fast(dic, val):\n    prefetched=hash_dic[hash(val)]\n    return [x.key for x in prefetched if x.like(val)]\n</code>\n</pre>\n", "senID": 13}, {"text": ["Since __hash__ is a native function internally used by Sets and Dictionaries, is there anything faster or more elegant I could do?"], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "__hash__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]