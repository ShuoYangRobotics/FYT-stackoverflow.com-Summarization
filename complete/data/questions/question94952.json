[{"text": ["Python implementation of Parsec?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I recently wrote a parser in Python using Ply (it's a python reimplementation of yacc).", "When I was almost done with the parser I discovered that the grammar I need to parse requires me to do some look up during parsing to inform the lexer.", "Without doing a look up to inform the lexer I cannot correctly parse the strings in the language."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Given than I can control the state of the lexer from the grammar rules I think I'll be solving my use case using a look up table in the parser module, but it may become too difficult to maintain/test.", "So I want to know about some of the other options."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In Haskell I would use Parsec, a library of parsing functions (known as combinators).", "Is there a Python implementation of Parsec?", "Or perhaps some other production quality library full of parsing functionality so I can build a context sensitive parser in Python?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT: All my attempts at context free parsing have failed.", "For this reason, I don't expect ANTLR to be useful here."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]