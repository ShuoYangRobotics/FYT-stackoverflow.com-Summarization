[{"text": ["Beginner wondering if his code is 'Pythonic'"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This is really the first thing that I have written in python.", "I come from Java background.", "I don't want to just learn how to program java code with Python syntax.", "I want to learn how to program in a pythonic paradigm."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Could you guys please comment on how I can make the following code more pythonic?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from math import sqrt\n\n# recursively computes the factors of a number\ndef factors(num):\n    factorList = []\n    numroot = int(sqrt(num)) + 1\n    numleft = num\n    # brute force divide the number until you find a factor\n    for i in range(2, numroot):\n        if num % i == 0:\n            # if we found a factor, add it to the list and compute the remainder\n            factorList.append(i)\n            numleft = num / i\n            break\n    # if we didn't find a factor, get out of here!\n    if numleft == num: \n        factorList.append(num)\n        return factorList\n    # now recursively find the rest of the factors\n    restFactors = factors(numleft)\n    factorList.extend(restFactors)\n\n    return factorList\n\n# grabs  all of the twos in the list and puts them into 2 ^ x form\ndef transformFactorList(factorList):\n    num2s = 0\n    # remove all twos, counting them as we go\n    while 2 in factorList:\n        factorList.remove(2)\n        num2s += 1\n    # simply return the list with the 2's back in the right spot\n    if num2s == 0: return factorList\n    if num2s == 1:\n        factorList.insert(0, 2)\n        return factorList\n    factorList.insert(0, '2 ^ ' + str(num2s))\n    return factorList\n\nprint transformFactorList(factors(#some number))\n</code>\n</pre>\n", "senID": 3}]