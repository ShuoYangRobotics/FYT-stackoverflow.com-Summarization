[{"text": ["How to improve performance of this code?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["thanks to some help from people here, I was able to get my code for Tasmanian camels puzzle working.", "However, it is horribly slow (I think.", "I'm not sure because this is my first program in python).", "The example run in the bottom of the code takes a long time to be solved in my machine:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n dumrat@dumrat:~/programming/python$ time python camels.py\n[['F', 'F', 'F', 'G', 'B', 'B', 'B'], ['F', 'F', 'G', 'F', 'B', 'B', 'B'], ['F', 'F', 'B', 'F', 'G', 'B', 'B'], ['F', 'F', 'B', 'F', 'B', 'G', 'B'], ['F', 'F', 'B', 'G', 'B', 'F', 'B'], ['F', 'G', 'B', 'F', 'B', 'F', 'B'], ['G', 'F', 'B', 'F', 'B', 'F', 'B'], ['B', 'F', 'G', 'F', 'B', 'F', 'B'], ['B', 'F', 'B', 'F', 'G', 'F', 'B'], ['B', 'F', 'B', 'F', 'B', 'F', 'G'], ['B', 'F', 'B', 'F', 'B', 'G', 'F'], ['B', 'F', 'B', 'G', 'B', 'F', 'F'], ['B', 'G', 'B', 'F', 'B', 'F', 'F'], ['B', 'B', 'G', 'F', 'B', 'F', 'F'], ['B', 'B', 'B', 'F', 'G', 'F', 'F']]\n\nreal    0m20.883s\nuser    0m20.549s\nsys 0m0.020s\n</code>\n</pre>\n", "senID": 2}, {"text": ["Here's the code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import Queue\n\nfCamel = 'F'\nbCamel = 'B'\ngap = 'G'\n\ndef solution(formation):\n    return len([i for i in formation[formation.index(fCamel) + 1:] if i == bCamel]) == 0\n\ndef heuristic(formation):\n    fCamels, score = 0, 0\n    for i in formation:\n        if i == fCamel:\n            fCamels += 1;\n        elif i == bCamel:\n            score += fCamels;\n        else:\n            pass\n    return score\n\ndef getneighbors (formation):\n    igap = formation.index(gap)\n    res = []\n    # AB_CD --&gt; A_BCD | ABC_D | B_ACD | ABD_C\n    def genn(i,j):\n        temp = list(formation)\n        temp[i], temp[j] = temp[j], temp[i]\n        res.append(temp)\n\n    if(igap &gt; 0):\n        genn(igap, igap-1)\n    if(igap &gt; 1):\n        genn(igap, igap-2)\n    if igap &lt; len(formation) - 1:\n        genn(igap, igap+1)\n    if igap &lt; len(formation) - 2:\n        genn(igap, igap+2)\n\n    return res\n\nclass node:\n    def __init__(self, a, g, p):\n        self.arrangement = a\n        self.g = g\n        self.parent = p\n\ndef astar (formation, heuristicf, solutionf, genneighbors):\n\n    openlist = Queue.PriorityQueue()\n    openlist.put((heuristicf(formation), node(formation, 0, None)))\n    closedlist = []\n\n    while 1:        \n        try:\n            f, current = openlist.get()\n        except IndexError:\n            current = None\n\n        if current is None:\n            print \"No solution found\"\n            return None;\n\n        if solutionf(current.arrangement):\n            path = []\n            cp = current\n            while cp != None:\n                path.append(cp.arrangement)\n                cp = cp.parent\n            path.reverse()\n            return path\n\n        #arr = current.arrangement\n        closedlist.append(current)\n        neighbors = genneighbors(current.arrangement)\n\n        for neighbor in neighbors:\n            if neighbor in closedlist:\n                pass\n            else:\n                openlist.put((current.g + heuristicf(neighbor), node(neighbor, current.g + 1, current)))\n\n        #sorted(openlist, cmp = lambda x, y : x.f &gt; y.f)\n\ndef solve(formation):\n    return astar(formation, heuristic, solution, getneighbors)\n\nprint solve([fCamel, fCamel, fCamel, gap, bCamel, bCamel, bCamel])\n#print solve([fCamel, fCamel, fCamel, fCamel, gap, bCamel, bCamel, bCamel, bCamel])\n</code>\n</pre>\n", "senID": 4}, {"text": ["That is just for 3 camels each.", "I wanted to do this for 4 at least.", "That test case is still running (It's been about 5 minutes now :().", "I'll update this if and when it finishes.", "What should I do to improve this code?", "(Mostly performance-wise, any other suggestions are welcome also).", "Thanks."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]