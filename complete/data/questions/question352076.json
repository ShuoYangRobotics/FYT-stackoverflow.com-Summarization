[{"text": ["Most pythonic form for mapping a series of statements?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This is something that has bugged me for some time.", "I learnt Haskell before I learnt Python, so I've always been fond of thinking of many computations as a mapping onto a list.", "This is beautifully expressed by a list comprehension (I'm giving the pythonic version here):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n result = [ f(x) for x in list ]\n</code>\n</pre>\n", "senID": 2}, {"text": ["In many cases though, we want to execute more than a single statement on x, say:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n result = [ f(g(h(x))) for x in list ]\n</code>\n</pre>\n", "senID": 4}, {"text": ["This very quickly gets clunky, and difficult to read."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["My normal solution to this is to expand this back into a for loop:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n result = []\nfor x in list:\n  x0 = h(x)\n  x1 = g(x0)\n  x2 = f(x1)\n  result.append(x2)\n</code>\n</pre>\n", "senID": 7}, {"text": ["One thing about this that bothers me no end is having to initialize the empty list 'result'.", "It's a triviality, but it makes me unhappy.", "I was wondering if there were any alternative equivalent forms.", "One way may be to use a local function(is that what they're called in Python?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n def operation(x):\n  x0 = h(x)\n  x1 = g(x0)\n  x2 = f(x1)\n  return x2\nresult = [ operation(x) for x in list ]\n</code>\n</pre>\n", "senID": 9}, {"text": ["Are there any particular advantages/disadvantages to either of the two forms above?", "Or is there perhaps a more elegant way?"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]