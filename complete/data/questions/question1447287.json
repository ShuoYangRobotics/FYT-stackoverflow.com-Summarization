[{"text": ["Format floats with standard json module"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am using the standard json module in python 2.6 to serialize a list of floats.", "However, I'm getting results like this:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "json module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/json.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import json\n&gt;&gt;&gt; json.dumps([23.67, 23.97, 23.87])\n'[23.670000000000002, 23.969999999999999, 23.870000000000001]'\n</code>\n</pre>\n", "senID": 2}, {"text": ["I want the floats to be formated with only two decimal digits.", "The output should look like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; json.dumps([23.67, 23.97, 23.87])\n'[23.67, 23.97, 23.87]'\n</code>\n</pre>\n", "senID": 4}, {"text": ["I have tried defining my own JSON Encoder class:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n class MyEncoder(json.JSONEncoder):\n    def encode(self, obj):\n        if isinstance(obj, float):\n            return format(obj, '.2f')\n        return json.JSONEncoder.encode(self, obj)\n</code>\n</pre>\n", "senID": 6}, {"text": ["This works for a sole float object:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; json.dumps(23.67, cls=MyEncoder)\n'23.67'\n</code>\n</pre>\n", "senID": 8}, {"text": ["But fails for nested objects:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; json.dumps([23.67, 23.97, 23.87])\n'[23.670000000000002, 23.969999999999999, 23.870000000000001]'\n</code>\n</pre>\n", "senID": 10}, {"text": ["I don't want to have external dependencies, so I prefer to stick with the standard json module."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["How can I achieve this?"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]