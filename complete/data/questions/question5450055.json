[{"text": ["How can I improve my INSERT statement performance?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["While Josh's answer here gave me a good head start on how to insert a 256x64x250 value array into a MySQL database.", "When I actually tried his INSERT statement on my data it turned out horribly slow (as in 6 minutes for a 16Mb file)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "While Josh's answer here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3738269/how-to-insert-arrays-into-a-database/3738402#3738402"}]}, {"code": "<pre>\n<code>\n ny, nx, nz = np.shape(data)\nquery = \"\"\"INSERT INTO `data` (frame, sensor_row, sensor_col, value) VALUES (%s, %s, %s, %s)\"\"\"\nfor frames in range(nz):\n    for rows in range(ny):\n        for cols in range(nx):\n            cursor.execute(query, (frames, rows, cols, data[rows,cols,frames]))\n</code>\n</pre>\n", "senID": 2}, {"text": ["I was reading MySQL for Python, which explained that this wasn't the right approach because executing 4 million separate inserts is very inefficient."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "MySQL for Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/1849510180"}]}, {"text": ["Now my data consist out of a lot of zeros (more than 90% actually), so I threw in an IF statement so I only insert values greater than zero and I used executemany() instead:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "executemany()", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n query = \"\"\"INSERT INTO `data` (frame, sensor_row, sensor_col, value) VALUES (%s, %s, %s, %s ) \"\"\"\nvalues = []\nfor frames in range(nz):\n    for rows in range(ny):\n        for cols in range(nx):\n            if data[rows,cols,frames] &gt; 0.0:\n                values.append((frames, rows, cols, data[rows,cols,frames]))           \ncur.executemany(query, values)\n</code>\n</pre>\n", "senID": 5}, {"text": ["This miraculously brought my processing time down to about 20 seconds, of which 14 seconds spend on creating the list of values (37k rows) and 4 seconds on the actual inserting into the database."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "values", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["So now I'm wondering, how can I speed up this process any further?", "Because I have a feeling my loop is horribly inefficient and there has to be a better way.", "If I need to insert 30 measurements per dog, this would still take 10 minutes, which seems far too long for this amount of data."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "So now I'm wondering, how can I speed up this process any further?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Here are two versions of my raw files: with headers or without headers.", "I'd love to try the LOAD DATA INFILE, but I can't figure out how to parse the data correctly."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "with headers", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dl.dropbox.com/u/5207386/rolloff"}, {"text": "without headers", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://dl.dropbox.com/u/5207386/sel_1"}]}]