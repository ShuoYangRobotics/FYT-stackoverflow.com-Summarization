[{"text": ["Which language for rapid-prototyping of heuristics in combinatorial optimization?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have to develop a fast heuristic-like algorithm for a hard combinatorial problem.", "Therefore I think, it would be the best to learn a more expressive language than C++ first for tackling the problem, because I think a lot of different algorithm attempts are needed to solve my assignment."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "I have to develop a fast heuristic-like algorithm for a hard combinatorial problem. Therefore I think, it would be the best to learn a more expressive language than C++ first for tackling the problem, because I think a lot of different algorithm attempts are needed to solve my assignment.", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["Some personal views about some languages which are candidates:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Some personal views about some languages which are candidates:", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "Some personal views about some languages which are candidates:", "tag": "strong"}]}, {"text": "Some personal views about some languages which are candidates:", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Python:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["nice syntax, good expressiveness, but non-strong-typed -> I favor compiler errors over runtime errors and don't want to develop test-suits for every algorithm."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Haskell:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["nice syntax, good expressiveness, strong-typed, but i think i would have to think twice about all the things i want to apply -> maybe too much bounds because of the purity of the language"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["What do i want/like?", "(can be mutually exclusive!"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "What do i want/like? (can be mutually exclusive!)", "childNum": 1, "tag": "em", "pos": -1, "childList": [{"text": "What do i want/like? (can be mutually exclusive!)", "tag": "strong"}]}, {"text": "What do i want/like? (can be mutually exclusive!)", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"tag": "ul", "num": 6, "lis": [{"text": "good expressiveness for rapid developing", "tag": "none", "senID": 8}, {"text": "strong-typing", "tag": "none", "senID": 9}, {"text": "functional-language-like higher order functions", "tag": "none", "senID": 10}, {"text": "mutable datatypes like arrays", "tag": "none", "senID": 11}, {"text": "maybe some kind of generics / templates", "tag": "none", "senID": 12}, {"text": "maybe the possibility for declarative programming (for subproblems in combinatorial opt.)", "tag": "none", "senID": 13}]}, {"text": ["What i don't need:"], "childNum": 2, "tag": "p", "senID": 14, "childList": [{"text": "What i don't need:", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "What i don't need:", "tag": "strong"}]}, {"text": "What i don't need:", "childNum": 0, "tag": "strong", "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "state-of-the-art performance of the code (the problem is in the class np, so a missing linear overhead because of wrong use of laziness should be tolerable)", "tag": "none", "senID": 15}, {"text": "parallelization", "tag": "none", "senID": 16}]}, {"text": ["I have to admit, that I love the expressiveness of Python, but I don't produce good and robust code with it."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["I love the art of functional programming, but i also like mutable-data-structures.", "Maybe because I'm not experienced enough to produce algorithms in a short amount of time with this \"purity\" in the language."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"text": ["Any recommendations?", "Any similar experiences?"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"text": ["What about Clean, F#, Erlang ... ?"], "childNum": 0, "tag": "p", "senID": 20, "childList": []}]