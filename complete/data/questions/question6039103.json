[{"text": ["Counting \"deepness\" or the deepest level a nested list goes to"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["A have a real problem (and a headache) with an assigment..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'm in an introductory programming class, and I have to write a function that, given a list, will return the \"maximum\" deepness it goes to...\nFor example: [1,2,3] will return 1,  [1,[2,3]] will return 2..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I've written this piece of code (it's the best I could get T_T)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def flat(l):\n    count=0\n    for item in l:\n        if isinstance(item,list):\n            count+= flat(item)\n    return count+1\n</code>\n</pre>\n", "senID": 4}, {"text": ["However, It obviously doens't work like it should, because if there are lists that do not count for the maximum deepness, it still raises the counter..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["For example: when I use the function with [1,2,[3,4],5,[6],7] it should return 2, but it returns 3..."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Any ideas or help would be greatly appreciated ^^ thanks a lot!!", "I've been strugling with this for weeks now..."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]