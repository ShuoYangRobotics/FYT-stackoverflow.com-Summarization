[{"text": ["split a string by a delimiter in a context sensitive way"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["For example, I want to split"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n str = '\"a,b,c\",d,e,f'\n</code>\n</pre>\n", "senID": 2}, {"text": ["into "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [\"a,b,c\",'d','e','f']\n</code>\n</pre>\n", "senID": 4}, {"text": ["(i.e.", "don't split the quoted part) In this case, this can be done with "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n re.findall('\".*?\"|[^,]+',str)\n</code>\n</pre>\n", "senID": 6}, {"text": ["However, if"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n str = '\"a,,b,c\",d,,f'\n</code>\n</pre>\n", "senID": 8}, {"text": ["I want "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n [\"a,,b,c\",'d','','f']\n</code>\n</pre>\n", "senID": 10}, {"text": ["i.e.", "I want a behavior that is like python's split function.", "Is there any way I can do this in one (small) line, possibly using Python's re library?  "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Actually, I just realized (on this site) that the csv module is perfect for what I want to do, but I am curious whether there is a regular expression that re can use to do it as well."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]