[{"text": ["Memory-efficient string-to-string map in Python (or C)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I need a memory-efficient data structure for for storing about a million key--value pairs, where keys are strings of about 80 bytes, and values are strings of about 200 bytes, the total key and value size being about 280MB.", "I also need efficient lookup of value by key, preferably a hash-map.", "The memory overhead should be as little as possible, e.g.", "for 280MB of useful data, the data structure shouldn't use more than 300MB of virtual memory (including malloc() overhead and everything else).", "The usage pattern is the following: we start with an empty data structure, and we populate it gradually, never changing keys, and never changing the length of values.", "As a plus, the data structure may support changing the length of values, at the expense of a 100% value overhead (meaning that for x value bytes, x bytes might be wasted in temporarily in unused buffer space)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "malloc()", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["I need a pure Python module, or a built-in Python module, or a C implementation preferably with (C)Python bindings.", "I'd prefer if it was possible to serialize the whole data structure to disk, and to read it back very quickly."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Just to prove that such a small overhead is possible, I've created a simple design with open addressing, the hash table of 1.25 million elements containing 4-byte pointers to 1MB data blocks, the data blocks containing the key and value lengths as base-128 varints.", "This design has an important limitation: it doesn't allow removing or changing pairs without wasting their memory area.", "According to my calculations with 1 million key--value pairs of 280 bytes each, the overhead is less than 3.6% (10 080 000 bytes).", "The limits above are more generous, they allow 20 000 000 bytes of overhead."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "open addressing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Open_addressing"}, {"text": "base-128 varints", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://code.google.com/apis/protocolbuffers/docs/encoding.html#varints"}]}, {"text": ["I've just found http://www.pytables.org/ , which provides fast access and memory-efficient packing of data.", "I have to examine it more closely to check if it suits my needs."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://www.pytables.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pytables.org/"}]}]