[{"text": ["Importing a python module without actually executing it"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["In the context of a complex application, I need to import user-supplied 'scripts'.", "Ideally, a script would have"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def init():\n    blah\n\ndef execute():\n    more blah\n\ndef cleanup():\n    yadda\n</code>\n</pre>\n", "senID": 2}, {"text": ["so I'd just"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import imp\nfname, path, desc = imp.find_module(userscript)\nfoo = imp.load_module(userscript, fname, path, desc)\nfoo.init()\n</code>\n</pre>\n", "senID": 4}, {"text": ["However, as we all know, the user's script is executed as soon as load_module runs.", "Which means, a script can be something like this:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "executed", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "load_module", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def init():\n    blah\n\nyadda\n</code>\n</pre>\n", "senID": 6}, {"text": ["yielding to the yadda part being called as soon as I import the script."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "yadda", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "import", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["What I need is a way to:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Normally I'd force the use the same old if __name__ == '__main__' trick, but I have little control on the user-supplied script, so I'm looking for a relatively painless solution.", "I have seen all sorts of complicated tricks, including parsing the script, but nothing really simple.", "I'm surprised it does not exist.. or maybe I'm not getting something."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "if __name__ == '__main__'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Thanks."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]