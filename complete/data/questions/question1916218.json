[{"text": ["Find the longest common starting substring in a set of strings"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This is a challenge to come up with the most elegant JavaScript, Ruby or other solution to a relatively trivial problem."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This problem is a more specific case of the Longest common substring problem.", "I need to only find the longest common starting substring in an array.", "This greatly simplifies the problem."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Longest common substring problem", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Longest_common_substring_problem"}, {"text": "starting", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["For example, the longest substring in [interspecies, interstelar, interstate] is \"inters\".", "However, I don't need to find \"ific\" in [specifics, terrific]."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "[interspecies, interstelar, interstate]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[specifics, terrific]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I've solved the problem by quickly coding up a solution in JavaScript as a part of my answer about shell-like tab-completion (test page here).", "Here is that solution, slightly tweaked:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "answer about shell-like tab-completion", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1837555/ajax-autocomplete-or-autosuggest-with-tab-completion-autofill-similar-to-shell/1897480#1897480"}, {"text": "test page here", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://mislav.net/scripts/autocomplete.html"}]}, {"code": "<pre>\n<code>\n function common_substring(data) {\n  var i, ch, memo, idx = 0\n  do {\n    memo = null\n    for (i=0; i &lt; data.length; i++) {\n      ch = data[i].charAt(idx)\n      if (!ch) break\n      if (!memo) memo = ch\n      else if (ch != memo) break\n    }\n  } while (i == data.length &amp;&amp; idx &lt; data.length &amp;&amp; ++idx)\n\n  return (data[0] || '').slice(0, idx)\n}\n</code>\n</pre>\n", "senID": 5}, {"text": ["This code is available in this Gist along with a similar solution in Ruby.", "You can clone the gist as a git repo to try it out:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "code is available in this Gist", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://gist.github.com/257891"}]}, {"code": "<pre>\n<code>\n $ git clone git://gist.github.com/257891.git substring-challenge\n</code>\n</pre>\n", "senID": 7}, {"text": ["I'm not very happy with those solutions.", "I have a feeling they might be solved with more elegance and less execution complexity\u2014that's why I'm posting this challenge."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["I'm going to accept as an answer the solution I find the most elegant or concise.", "Here is for instance a crazy Ruby hack I come up with\u2014defining the &amp; operator on String:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "&amp;", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n # works with Ruby 1.8.7 and above\nclass String\n  def &amp;(other)\n    difference = other.to_str.each_char.with_index.find { |ch, idx|\n      self[idx].nil? or ch != self[idx].chr\n    }\n    difference ? self[0, difference.last] : self\n  end\nend\n\nclass Array\n  def common_substring\n    self.inject(nil) { |memo, str| memo.nil? ? str : memo &amp; str }.to_s\n  end\nend\n</code>\n</pre>\n", "senID": 10}, {"text": ["Solutions in JavaScript or Ruby are preferred, but you can show off clever solution in other languages as long as you explain what's going on.", "Only code from standard library please."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["I've chosen the JavaScript sorting solution by kennebec as the \"answer\" because it struck me as both unexpected and genius.", "If we disregard the complexity of actual sorting (let's imagine it's infinitely optimized by the language implementation), the complexity of the solution is just comparing two strings."], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "JavaScript sorting solution", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "/questions/1916218/find-the-longest-common-starting-substring-in-a-set-of-strings/1917041#1917041"}, {"text": "kennebec", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/80860/kennebec"}]}, {"text": ["Other great solutions:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["\"regex greed\""], "childNum": 0, "tag": "a", "senID": 14, "childList": []}, {"text": ["commonprefix in Python"], "childNum": 1, "tag": "a", "senID": 15, "childList": [{"text": "commonprefix", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Haskell one-liner"], "childNum": 0, "tag": "a", "senID": 16, "childList": []}, {"text": ["the straightforward Ruby one-liner"], "childNum": 0, "tag": "a", "senID": 17, "childList": []}]}, {"text": ["Thanks for participating!", "As you can see from the comments, I learned a lot (even about Ruby)."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}]