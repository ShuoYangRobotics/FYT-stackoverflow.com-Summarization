[{"text": ["python: How to add property to a class dynamically?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The goal is to create a mock class which behaves like a db resultset."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So for example, if a database query returns, using a dict expression, {'ab':100, 'cd':200}, then I would to see "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dummy.ab\n100\n</code>\n</pre>\n", "senID": 3}, {"text": ["So, at the beginning I thought I maybe able to do it this way"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n ks = ['ab', 'cd']\nvs = [12, 34]\nclass C(dict):\n    def __init__(self, ks, vs):\n        for i, k in enumerate(ks):\n                self[k] = vs[i]\n                setattr(self, k, property(lambda x: vs[i], self.fn_readyonly))\n\n    def fn_readonly(self, v)\n        raise \"It is ready only\"\n\nif __name__ == \"__main__\":\n    c = C(ks, vs)\n    print c.ab\n</code>\n</pre>\n", "senID": 5}, {"text": ["but \"c.ab\" returns a property object instead."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Replace the setattr line with "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n k = property(lambda x: vs[i])\n</code>\n</pre>\n", "senID": 8}, {"text": ["It is of no use at all."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["So what is the right way to create an instance property in runtime?"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["P.S.", "I am aware of an alternative here"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/371753/python-using-getattribute-method"}]}]