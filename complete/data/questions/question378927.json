[{"text": ["What is the best (idiomatic) way to check the type of a Python variable?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I need to know if a variable in Python is a string or a dict.", "Is there anything wrong with the following code?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if type(x) == type(str()):\n    do_something_with_a_string(x)\nelif type(x) == type(dict()):\n    do_somethting_with_a_dict(x)\nelse:\n    raise ValueError\n</code>\n</pre>\n", "senID": 2}, {"text": ["Update: I accepted avisser's answer (though I will change my mind if someone explains why isinstance is preferred over \"type(x) is\")."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["But thanks to nakedfanatic for reminding me that it's often cleaner to use a dict (as a \"case statement) than an if/elif/else series."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Let me elaborate on my use case.", "If a variable is a string, I need to put it in a list.", "If it's a dict, I need a list of the unique values.", "Here's what I came up with:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def value_list(x):\n    cases = {str: lambda t: [t],\n             dict: lambda t: list(set(t.values()))}\n    try:\n        return cases[type(x)](x)\n    except KeyError:\n        return None\n</code>\n</pre>\n", "senID": 6}, {"text": ["If isinstance is prefered, how would you write this value_list() function?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]