[{"text": ["how to split a list in two at the point where predicate is first False"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I keep thinking there should be a function for this, but I've searched the likely places (google, itertools docs, list methods, other SO questions), but nowhere found quite what I was looking for."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "quite", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Naive and working implementation:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def split_at_first_false(pred, seq):\n    first = []\n    second = []\n    true_so_far = True\n    for item in seq:\n        if true_so_far and pred(item):\n            first.append(item)\n        else:\n            true_so_far = False\n            second.append(item)\n    return first, second\n\nprint split_at_first_false(str.isalpha, \"abc1a2b\")\n# (['a', 'b', 'c'], ['1', 'a', '2', 'b'])\n</code>\n</pre>\n", "senID": 3}, {"text": ["It works, but it doesn't feel right.", "There should be a better way to do this!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["EDIT: I ended up with using a slightly modified version of senderle's final suggestion after reviewing the answers:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from itertools import chain\n\ndef split_at_pred(pred, seq):\n    head = []\n    it = iter(seq)\n    for i in it:\n        if not pred(i):\n            head.append(i)\n        else:\n            return iter(head), chain([i], it)\n    return iter(head), iter([])\n</code>\n</pre>\n", "senID": 6}, {"text": ["It's short and elegant, output is two iterators no matter the input (strings, lists, iterators), and as a bonus, it even works with the following input:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n from itertools import count\nsplit_at_pred(lambda x: x == 5, count())\n</code>\n</pre>\n", "senID": 8}, {"text": ["The other solutions, those that work at all with iterators, will run out of memory with this input.", "(Note that this is just a bonus.", "Infinite iterators was something I hadn't even considered when I wrote this question)"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]