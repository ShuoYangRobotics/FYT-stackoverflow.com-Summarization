[{"text": ["python __init__ method in inherited class"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I would like to give a daughter class some extra attributes without having to explicitly call a new method.", "So is there a way of giving the inherited class an __init__ type method which does not override the __init__ method of the parent class?"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I have written the code below purely to illustrate my question (hence the poor naming of attributes etc)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class initialclass():\n    def __init__(self):\n        self.attr1 = 'one'\n        self.attr2 = 'two'    \n\nclass inheritedclass(initialclass):\n    def __new__(self):\n        self.attr3 = 'three'\n\n    def somemethod(self):\n        print 'the method'\n\n\na = inheritedclass()\n\nfor each in a.__dict__:\n    print each\n\n#I would like the output to be:\nattr1\nattr2\nattr3\n</code>\n</pre>\n", "senID": 3}, {"text": ["Thank you"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]