[{"text": ["Fast way to remove a few items from a list/queue"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This is a follow up to a similar question which asked the best way to write"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1207406/remove-items-from-a-list-while-iterating-in-python/1207461#comment-6561137"}]}, {"code": "<pre>\n<code>\n for item in somelist:\n    if determine(item):\n         code_to_remove_item\n</code>\n</pre>\n", "senID": 2}, {"text": ["and it seems the consensus was on something like"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n somelist[:] = [x for x in somelist if not determine(x)]\n</code>\n</pre>\n", "senID": 4}, {"text": ["However, I think if you are only removing a few items, most of the items are being copied into the same object, and perhaps that is slow.", "In an answer to another related question, someone suggests:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "answer", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/18418/elegant-way-to-remove-items-from-sequence-in-python/181062#181062"}, {"href": "http://stackoverflow.com/questions/18418/elegant-way-to-remove-items-from-sequence-in-python", "text": "question", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n for item in reversed(somelist):\n    if determine(item):\n        somelist.remove(item)\n</code>\n</pre>\n", "senID": 6}, {"text": ["However, here the list.remove will search for the item, which is O(N) in the length of the list.", "May be we are limited in that the list is represented as an array, rather than a linked list, so removing items will need to move everything after it.", "However, it is suggested here that collections.dequeue is represented as a doubly linked list.", "It should then be possible to remove in O(1) while iterating.", "How would we actually accomplish this?"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "list.remove", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/TimeComplexity"}]}, {"text": ["Update:\nI did some time testing as well, with the following code:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import timeit\nsetup = \"\"\"\nimport random\nrandom.seed(1)\nb = [(random.random(),random.random()) for i in xrange(1000)]\nc = []\ndef tokeep(x):\n        return (x[1]&gt;.45) and (x[1]&lt;.5)\n\"\"\"\nlistcomp = \"\"\"\nc[:] = [x for x in b if tokeep(x)]\n\"\"\"\nfilt = \"\"\"\nc = filter(tokeep, b)\n\"\"\"\nprint \"list comp = \", timeit.timeit(listcomp,setup, number = 10000)\nprint \"filtering = \", timeit.timeit(filt,setup, number = 10000)\n</code>\n</pre>\n", "senID": 9}, {"text": ["and got:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n list comp =  4.01255393028\nfiltering =  3.59962391853\n</code>\n</pre>\n", "senID": 11}]