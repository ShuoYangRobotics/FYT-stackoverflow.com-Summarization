[{"text": ["Python: avoiding pylint warnings about too many arguments"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I want to refactor a big Python function into smaller ones.", "For example, consider this following code snippet:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9\n</code>\n</pre>\n", "senID": 2}, {"text": ["Of course, this is a trivial example.", "In practice, the code is more complex.", "My point is that it contains many local-scope variables that would have to be passed to the extracted function, which could look like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def mysum(x1, x2, x3, x4, x5, x6, x7, x8, x9):\n    x = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9\n    return x\n</code>\n</pre>\n", "senID": 4}, {"text": ["The problem is that pylint would trigger a warning about too many arguments.", "I could avoid the warning by doing something like:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def mysum(d):\n    x1 = d['x1']\n    x2 = d['x2']\n    ...\n    x9 = d['x9']\n    x = x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9\n    return x\n\ndef mybigfunction():\n    ...\n    d = {}\n    d['x1'] = x1\n    ...\n    d['x9'] = x9\n    x = mysum(d)\n</code>\n</pre>\n", "senID": 6}, {"text": ["but this approach loos ugly to me, it requires writing a lot of code that is even redundant."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Is there a better way to do it?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]