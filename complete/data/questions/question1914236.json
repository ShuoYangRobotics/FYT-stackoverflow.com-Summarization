[{"text": ["Python string pattern recognition/compression"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I can do basic regex alright, but this is slightly different, namely I don't know what the pattern is going to be."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For example, I have a list of similar strings:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n lst = ['asometxt0moretxt', 'bsometxt1moretxt', 'aasometxt10moretxt', 'zzsometxt999moretxt']\n</code>\n</pre>\n", "senID": 3}, {"text": ["In this case the common pattern is two segments of common text: 'sometxt' and 'moretxt', starting and separated by something else that is variable in length."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "'sometxt'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'moretxt'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The common string and variable string can of course occur at any order and at any number of occasions."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["What would be a good way to condense/compress the list of strings into their common parts and individual variations?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["An example output might be:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n c = ['sometxt', 'moretxt']\n\nv = [('a','0'), ('b','1'), ('aa','10'), ('zz','999')]\n</code>\n</pre>\n", "senID": 8}]