[{"text": ["Python returning the wrong length of string when using special characters"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a string \u00eb\u0301a\u00falt that I want to get the length of a manipulate based on character positions and so on.", "The problem is that the first \u00eb\u0301 is being counted twice, or I guess \u00eb is in position 0 and \u00b4 is in position 1."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Is there any possible way in Python to have a character like \u00eb\u0301 be represented as 1?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I'm using UTF-8 encoding for the actual code and web page it is being outputted to."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["edit: Just some background on why I need to do this.", "I am working on a project that translates English to Seneca (a form of Native American language) and \u00eb\u0301 shows up quite a bit.", "Some rewrite rules for certain words require knowledge of letter position (itself and surrounding letters) and other characteristics, such as accents and other diacritic markings."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]