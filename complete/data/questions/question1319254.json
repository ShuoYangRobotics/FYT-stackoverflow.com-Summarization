[{"text": ["What is the most efficient way to add an element to a list only if isn't there yet?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have the following code in Python:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def point_to_index(point):\n    if point not in points:\n        points.append(point)\n    return points.index(point)\n</code>\n</pre>\n", "senID": 2}, {"text": ["This code is awfully inefficient, especially since I expect points to grow to hold a few million elements."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "points", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If the point isn't in the list, I traverse the list 3 times:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If it is in the list, I traverse it twice:\n1. look for it and decide it is there\n2. go almost to the end of the list until I find the index"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Is there any more efficient way to do this?", "For instance, I know that:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "I'm more likely to call this function with a point that isn't in the list.", "tag": "none", "senID": 7}, {"text": "If the point is in the list, it's likelier to be near the end than in the beginning.", "tag": "none", "senID": 8}]}, {"text": ["So if I could have the line:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n if point not in points:\n</code>\n</pre>\n", "senID": 10}, {"text": ["search the list from the end to the beginning it would improve performance when the point is already in the list."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["However, I don't want to do:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n if point not in reversed(points):\n</code>\n</pre>\n", "senID": 13}, {"text": ["because I imagine that reversed(points) itself will come at a huge cost."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "reversed(points)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Nor do I want to add new points to the beginning of the list (assuming I knew how to do that in Python) because that would change the indices, which must remain constant for the algorithm to work."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["The only improvement I can think of is to implement the function with only one pass, if possible from the end to the beginning.", "The bottom line is:"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Is there a good way to do this?", "tag": "none", "senID": 17}, {"text": "Is there a better way to optimize the function?", "tag": "none", "senID": 18}]}, {"text": ["Edit: I've gotten suggestions for implementing this with only one pass.", "Is there any way for index() to go from the end to the beginning?"], "childNum": 2, "tag": "p", "senID": 19, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "index()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Edit: People have asked why the index is critical.", "I'm trying to describe a 3D surface using the OFF file format.", "This format describes a surface using its vertices and faces.", "First the vertices are listed, and the faces are described using a list of indices of vertices.", "That's why once I add a vortex to the list, its index must not change."], "childNum": 2, "tag": "p", "senID": 20, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "OFF file format", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://shape.cs.princeton.edu/benchmark/documentation/off%5Fformat.html"}]}, {"text": ["Edit: There have been some suggestions (such as igor's) to use a dict.", "This is a good solution for scanning the list.", "However, when I'm done I need to print out the list in the same order it was created.", "If I use a dict, I need to print out its keys sorted by value.", "Is there a good way to do that?"], "childNum": 3, "tag": "p", "senID": 21, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "igor's", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1319254/what-is-the-most-efficient-way-to-add-an-element-to-a-list-only-if-isnt-there-ye/1319470#1319470"}, {"text": "scanning", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Edit: I implemented www.brool.com's suggestion.", "This was the simplest and fastest.", "It is essentially an ordered Dict, but without the overhead.", "The performance is great!"], "childNum": 3, "tag": "p", "senID": 22, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "www.brool.com", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/55225/www-brool-com"}, {"text": "suggestion", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1319254/what-is-the-most-efficient-way-to-add-an-element-to-a-list-only-if-isnt-there-ye/1321039#1321039"}]}]