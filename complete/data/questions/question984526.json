[{"text": ["Correct way of handling exceptions in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have searched for other posts, as I felt this is a rather common problem, but all other Python exception questions I have found didn't reflect my problem."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I will try to be as specific here as I can, so I will give a direct example.", "And pleeeeease do not post any workarounds for this specific problem.", "I am not specifically interested how you can send an email much nicer with xyz.", "I want to know how you generally deal with dependent, error prone statements."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["My question is, how to handle exceptions nicely, ones that depend on one another, meaning:\nOnly if the first step was successful, try the next, and so on.", "One more criterion is: All exceptions have to be caught, this code has to be robust."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["For your consideration, an example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n try:\n    server = smtplib.SMTP(host) #can throw an exception\nexcept smtplib.socket.gaierror:\n    #actually it can throw a lot more, this is just an example\n    pass\nelse: #only if no exception was thrown we may continue\n    try:\n        server.login(username, password)\n    except SMTPAuthenticationError:\n        pass # do some stuff here\n    finally:\n        #we can only run this when the first try...except was successful\n        #else this throws an exception itself!\n        server.quit() \n    else:\n        try:\n            # this is already the 3rd nested try...except\n            # for such a simple procedure! horrible\n            server.sendmail(addr, [to], msg.as_string())\n            return True\n        except Exception:\n            return False\n        finally:\n            server.quit()\n\nreturn False\n</code>\n</pre>\n", "senID": 5}, {"text": ["This looks extremely unpythonic to me, and the error handling code is triple the real business code, but on the other hand how can I handle several statements that are dependent on one another, meaning statement1 is prerequisite for statement2 and so on?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I am also interested in proper resource cleanup, even Python can manage that for itself. "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Thanks, Tom"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]