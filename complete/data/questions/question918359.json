[{"text": ["My python program executes faster than my java version of the same program.", "What gives?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Update: 2009-05-29"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Update: 2009-05-29", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Thanks for all the suggestions and advice.", "I used your suggestions to make my production code execute 2.5 times faster on average than my best result a couple of days ago.", "In the end I was able to make the java code the fastest."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "I used your suggestions to make my production code execute 2.5 times faster on average than my best result a couple of days ago.", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Lessons:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["My example code below shows the insertion of primitive ints but the production code is actually storing strings (my bad).", "When I corrected that the python execution time went from 2.8 seconds to 9.6.", "So right off the bat, the java was actually faster when storing objects.  "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["But it doesn't stop there.", "I had been executing the java program as follows:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]}, {"text": ["But if you set the initial heap size as follows you get a huge improvement:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n java -Xms1024m -Xmx1024m SpeedTest\n</code>\n</pre>\n", "senID": 7}, {"text": ["This simple change reduced the execution time by more than 50%.", "So the final result for my SpeedTest is python 9.6 seconds.", "Java 6.5 seconds.  "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Original Question:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Original Question:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I had the following python code:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n import time\nimport sys\n\ndef main(args):    \n    iterations = 10000000\n    counts = set()\n    startTime = time.time();    \n    for i in range(0, iterations):\n        counts.add(i)\n    totalTime = time.time() - startTime\n    print 'total time =',totalTime\n    print len(counts)\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n</code>\n</pre>\n", "senID": 11}, {"text": ["And it executed in about 3.3 seconds on my machine but I wanted to make it faster so I decided to program it in java.", "I assumed that because java is compiled and is generally considered to be faster than python I would see some big paybacks."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Here is the java code:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n import java.util.*;\nclass SpeedTest\n{    \n    public static void main(String[] args)\n    {        \n        long startTime;\n        long totalTime;\n        int iterations = 10000000;\n        HashSet counts = new HashSet((2*iterations), 0.75f);\n\n        startTime = System.currentTimeMillis();\n        for(int i=0; i&lt;iterations; i++)\n        {\n            counts.add(i);\n        }\n        totalTime = System.currentTimeMillis() - startTime;\n        System.out.println(\"TOTAL TIME = \"+( totalTime/1000f) );\n        System.out.println(counts.size());\n    }\n}\n</code>\n</pre>\n", "senID": 14}, {"text": ["So this java code does basically the same thing as the python code.", "But it executed in 8.3 seconds instead of 3.3.  "], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["I have extracted this simple example from a real-world example to simplify things.", "The critical element is that I have (set or hashSet) that ends up with a lot of members much like the example."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["Here are my questions:"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["UPDATE:"], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"text": ["Thanks to all who have contributed so far.", "Please allow me to add some details."], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"text": ["I have not included my production code because it is quite complex.", "And would generate a lot of distraction.", "The case I present above is the most simplified possible.", "By that I mean that the java put call seems to be much slower than the python set`s add(). "], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"text": ["The java implementation of the production code is also about 2.5 - 3 times slower than the python version -- just like the above.  "], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"text": ["I am not concerned about vm warmup or startup overhead.", "I just want to compare the code from my startTime to my totalTime.", "Please do not concern yourselves with other matters.  "], "childNum": 0, "tag": "p", "senID": 22, "childList": []}, {"text": ["I initialized the hashset with more than enough buckets so that it should never have to rehash.", "(I will always know ahead of time how many elements the collection will ultimately contain.", ")  I suppose one could argue that I should have initialized it to iterations/0.75.", "But if you try it you will see that execution time is not significantly impacted."], "childNum": 0, "tag": "p", "senID": 23, "childList": []}, {"text": ["I set Xmx1024m for those that were curious (my machine has 4GB of ram). "], "childNum": 0, "tag": "p", "senID": 24, "childList": []}, {"text": ["I am using java version: Java(TM) SE Runtime Environment (build 1.6.0_13-b03)."], "childNum": 0, "tag": "p", "senID": 25, "childList": []}, {"text": ["In the production version of I am storing a string (2-15 chars) in the hashSet so I cannot use primitives, although that is an interesting case."], "childNum": 0, "tag": "p", "senID": 26, "childList": []}, {"text": ["I have run the code many, many times.", "I have very high confidence that the python code is between 2.5 and 3 times faster than the java code."], "childNum": 0, "tag": "p", "senID": 27, "childList": []}]