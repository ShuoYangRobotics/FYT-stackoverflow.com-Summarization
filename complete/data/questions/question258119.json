[{"text": ["Python: wrapping method invocations with pre and post methods"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am instantiating a class A (which I am importing from somebody\nelse, so I can't modify it) into my class X."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Is there a way I can intercept or wrape calls to methods in A?", "I.e., in the code below can I call"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x.a.p1()\n</code>\n</pre>\n", "senID": 3}, {"text": ["and get the output"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n X.pre\nA.p1\nX.post\n</code>\n</pre>\n", "senID": 5}, {"text": ["Many TIA!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n class A:\n    # in my real application, this is an imported class\n    # that I cannot modify\n    def p1(self): print 'A.p1'\n\nclass X:\n    def __init__(self):\n        self.a=A()\n    def pre(self): print 'X.pre'\n    def post(self): print 'X.post'\n\nx=X()\nx.a.p1()\n</code>\n</pre>\n", "senID": 7}]