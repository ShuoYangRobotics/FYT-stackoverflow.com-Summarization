[{"text": ["Can ( s is \"\" ) and ( s == \"\" ) ever give different results in Python 2.6.2?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["As any Python programmer knows, you should use == instead of is to compare two strings for equality.", "However, are there actually any cases where ( s is \"\" ) and ( s == \"\" ) will give different results in Python 2.6.2?"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "==", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "( s is \"\" )", "childNum": 0, "tag": "code", "childList": []}, {"text": "( s == \"\" )", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I recently came across code that used ( s is \"\" ) in code review, and while pointing out that this was incorrect I wanted to give an example of how this could fail.", "But try as I might, I can't construct two empty strings with different identities.", "It seems that the Python implementation must special-case the empty string in lots of common operations.", "For example:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "( s is \"\" )", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = \"\"\n&gt;&gt;&gt; b = \"abc\"[ 2:2 ]\n&gt;&gt;&gt; c = ''.join( [] )\n&gt;&gt;&gt; d = re.match( '()', 'abc' ).group( 1 )\n&gt;&gt;&gt; e = a + b + c + d \n&gt;&gt;&gt; a is b is c is d is e\nTrue\n</code>\n</pre>\n", "senID": 3}, {"text": ["However, this question suggests that there are cases where ( s is \"\" ) and ( s == \"\" ) can be different.", "Can anyone give me an example?"], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "this question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2988017/string-comparison-in-python-is-vs"}, {"text": "are", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "( s is \"\" )", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "( s == \"\" )", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]