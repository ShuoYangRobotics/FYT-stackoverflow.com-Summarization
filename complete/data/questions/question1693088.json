[{"text": ["What is the use of Python's basic optimizations mode?", "(`python -O`)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Python has a flag -O that you can execute the interpreter with.", "The option will generate \"optimized\" bytecode (written to .pyo files), and given twice, it will discard docstrings.", "From Python's man page:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "-O", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n -O     Turn on basic optimizations.  This changes the  filename  exten\u2010\n          sion  for  compiled  (bytecode)  files from .pyc to .pyo.  Given\n          twice, causes docstrings to be discarded.\n</code>\n</pre>\n", "senID": 2}, {"text": ["This option's two major features as I see it are:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Strip all assert statements.", "This trades defense against corrupt program state for speed.", "But don't you need a ton of assert statements for this to make a difference?", "Do you have any code where this is worthwhile (and sane?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Strip all docstrings.", "In what application is the memory usage so critical, that this is a win?", "Why not push everything into modules written in C?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]}, {"text": ["What is the use of this option?", "Does it have a real-world value?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]