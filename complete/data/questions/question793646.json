[{"text": ["How epoll detect clientside close in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Here is my server"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Here is my server", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n \"\"Server using epoll method\"\"\"\n\nimport os\nimport select\nimport socket\nimport time\n\nfrom oodict import OODict\n\naddr = ('localhost', 8989)\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\ns.bind(addr)\ns.listen(8)\ns.setblocking(0) # Non blocking socket server\nepoll = select.epoll()\nepoll.register(s.fileno(), select.EPOLLIN) # Level triggerred\n\ncs = {}\ndata = ''\nwhile True:\n    time.sleep(1)\n    events = epoll.poll(1) # Timeout 1 second\n    print 'Polling %d events' % len(events)\n    for fileno, event in events:\n        if fileno == s.fileno():\n            sk, addr = s.accept()\n            sk.setblocking(0)\n            print addr\n            cs[sk.fileno()] = sk\n            epoll.register(sk.fileno(), select.EPOLLIN)\n\n        elif event & select.EPOLLIN:\n            data = cs[fileno].recv(4)\n            print 'recv ', data\n            epoll.modify(fileno, select.EPOLLOUT)\n        elif event & select.EPOLLOUT:\n            print 'send ', data\n            cs[fileno].send(data)\n            data = ''\n            epoll.modify(fileno, select.EPOLLIN)\n\n        elif event & select.EPOLLERR:\n            print 'err'\n            epoll.unregister(fileno)\n</code>\n</pre>\n", "senID": 2}, {"text": ["client side input"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "client side input", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ideer@ideer:/home/chenz/source/ideerfs$ telnet localhost 8989\nTrying ::1...\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n123456\n123456\n^]\n\ntelnet> q\nConnection closed.\n</code>\n</pre>\n", "senID": 4}, {"text": ["server side output"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "server side output", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ideer@ideer:/chenz/source/ideerfs$ python epoll.py \nPolling 0 events\nPolling 0 events\nPolling 1 events\n('127.0.0.1', 53975)\nPolling 0 events\nPolling 1 events\nrecv  1234\nPolling 1 events\nsend  1234\nPolling 1 events\nrecv  56\n\nPolling 1 events\nsend  56\n\nPolling 0 events\nPolling 0 events\nPolling 0 events\nPolling 1 events\nrecv  \nPolling 1 events\nsend  \nPolling 1 events\nrecv  \nPolling 1 events\nsend  \nPolling 1 events\nrecv  \nPolling 1 events\nsend  \nPolling 1 events\nrecv  \n^CTraceback (most recent call last):\n  File \"epoll.py\", line 23, in \n    time.sleep(1)\nKeyboardInterrupt\n</code>\n</pre>\n", "senID": 6}, {"text": ["It's strange that after the client has closed the connection, epoll still can poll recv and send events!", "Why does EPOLLERR event never happen?", "it's the same if you use EPOLLHUP."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I notice that the EPOLLERR event only happens when you try to write a closed connection.", "Besides this, is there another way to tell that whether the connection has been closed or not?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Is it correct to treat the connection as closed if you get nothing in a EPOLLIN event?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Regards,\nChenz"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]