[{"text": ["Python: Memory leak debugging"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a small multithreaded script running in django and over time its starts using more and more memory.", "Leaving it for a full day eats about 6GB of RAM and I start to swap."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Following http://www.lshift.net/blog/2008/11/14/tracing-python-memory-leaks I see this as the most common types (with only 800M of memory used):"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.lshift.net/blog/2008/11/14/tracing-python-memory-leaks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.lshift.net/blog/2008/11/14/tracing-python-memory-leaks"}]}, {"code": "<pre>\n<code>\n (Pdb)  objgraph.show_most_common_types(limit=20)\ndict                       43065\ntuple                      28274\nfunction                   7335\nlist                       6157\nNavigableString            3479\ninstance                   2454\ncell                       1256\nweakref                    974\nwrapper_descriptor         836\nbuiltin_function_or_method 766\ntype                       742\ngetset_descriptor          562\nmodule                     423\nmethod_descriptor          373\nclassobj                   256\ninstancemethod             255\nmember_descriptor          218\nproperty                   185\nComment                    183\n__proxy__                  155\n</code>\n</pre>\n", "senID": 3}, {"text": ["which doesn't show anything weird.", "What should I do now to help debug the memory problems?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Update: Trying some things people are recommending.", "I ran the program overnight, and when I work up, 50% * 8G == 4G of RAM used. "], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Update:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n (Pdb) from pympler import muppy\n(Pdb) muppy.print_summary()\n                                     types |   # objects |   total size\n========================================== | =========== | ============\n                                   unicode |      210997 |     97.64 MB\n                                      list |        1547 |     88.29 MB\n                                      dict |       41630 |     13.21 MB\n                                       set |          50 |      8.02 MB\n                                       str |      109360 |      7.11 MB\n                                     tuple |       27898 |      2.29 MB\n                                      code |        6907 |      1.16 MB\n                                      type |         760 |    653.12 KB\n                                   weakref |        1014 |     87.14 KB\n                                       int |        3552 |     83.25 KB\n                    function (__wrapper__) |         702 |     82.27 KB\n                        wrapper_descriptor |         998 |     77.97 KB\n                                      cell |        1357 |     74.21 KB\n  &lt;class 'pympler.asizeof.asizeof._Claskey |        1113 |     69.56 KB\n                       function (__init__) |         574 |     67.27 KB\n</code>\n</pre>\n", "senID": 6}, {"text": ["That doesn't sum to 4G, nor really give me any big data structured to go fix.", "The unicode is from a set() of \"done\" nodes, and the list's look like just random weakrefs. "], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "weakref", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I didn't use guppy since it required a C extension and I didn't have root so it was going to be a pain to build."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["None of the objectI was using have a __del__ method, and looking through the libraries, it doesn't look like django nor the python-mysqldb do either.", "Any other ideas?"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "__del__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]