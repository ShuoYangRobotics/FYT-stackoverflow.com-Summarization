[{"text": ["Alternate newline character?", "python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am looking for a way to represent '\\n' with only one character.", "I am writing a program that uses dictionaries to 'encrypt' text.", "Because each character is represented in the dictionary, i am having a problem when my program gets to a '\\n' in a string, but reads it as '\\' 'n' .", "Is there alternate way to represent a newline, that is only one character?", "This is my code below, sorry if some of the indentation is messed up.", "I dont entirely understand how to input code into this window.", ":)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ##################################\n#This program will take an input and encrypt it or decrypt it\n#A cipher is used to transform the text, which can either be\n#input or from a text file.\n#The cipher can be any letter a-z, as well as most commonly used special characters\n#numbers and spaces are not allowed.\n#For the text, a-z, most special characters, space, and new line may be used.\n#no numbers can be encrypted.\n##################################\n\n#These three dictionaries are used during the encryption process.\nkeyDict={'a': 17,'b': 3,'c':16,'d':26,'e':6,'f':19,'g':10,'h':12,\n         'i':22,'j':8,'k': 11,'l':2,'m':18,'n':9,'o':23,'p':7,\n         'q':5,'r': 20,'s': 1,'t': 24,'u':13,'v':25,'w':21,'x':15,\n         'y':4,'z': 14, ' ':42, '.':0,'!': 27, '@': 34, '#': 35, '%': 37,\n         '$': 36, \"'\": 33,'&amp;': 39, '*': 40, ',': 29, '.': 30, '~': 41, ';': 31,\n         ':': 32, '?': 28, '^': 38}\n\nrefDict2={' ': 43,  'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4, 'g': 7, 'f': 6, 'i': 9,\n         'h': 8, 'k': 11, 'j': 10, 'm': 13, 'l': 12, 'o': 15, 'n': 14, 'q': 17,'\\n': 42,\n         'p': 16, 's': 19, 'r': 18, 'u': 21, 't': 20, 'w': 23, 'v': 22, 'y': 25,\n         'x': 24, 'z': 26, ' ':0, '!': 27, '@': 34, '#': 35, '%': 37, '$': 36, \"'\": 33,\n          '&amp;': 39, '*': 40, ',': 29, '.': 30, '~': 41, ';': 31, ':': 32, '?': 28, '^': 38}\n\nrefDict={0: ' ', 1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i',\n         10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 42:'\\n',\n         18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 43:' ',\n         32: ':', 33: \"'\", 34: '@', 35: '#', 36: '$', 37: '%', 38: '^', 39: '&amp;', 40: '*',\n         41: '~', 27: '!', 28: '?', 29: ',', 30: '.', 31: ';'}\n\n\n#switch1 reverses a list. It is its own inverse, so we don't need an unswitch function. \ndef switch1(l):\n    return l[::-1]\n\n\n\n#switch2 takes a list as input and moves every fourth entry to the front\n#so switch2([a,b,c,d,e,f,g]) returns ([a,e,b,c,d,f,g])\n#unswitch2 undoes this, so unswitch2([a,e,c,d,f,g]) returns [a,b,c,d,e,f,g]\n\ndef switch2(l):\n    List4 = []\n    ListNot4 = []\n    for i in range(0,len(l)):\n        if i%4 == 0:\n            List4.append(l[i])\n        else:\n            ListNot4.append(l[i])\n    return List4+ListNot4\n\ndef unswitch2(l):\n    num4 = len(l)/4 + 1\n    fixedList = l[num4:]\n    for i in range (0,num4):\n        fixedList.insert(4*i,l[i])\n    return fixedList\n\n\n\n#switch3 takes a list as input and returns a list with the first half moved to the end.\n#so switch3([a,b,c,d,e,f]) returns [d,e,f,a,b,c]\n#for lists of odd length, switch3 puts the separation closer to the beginning of the list, so the\n#middle entry becomes the first entry.\n#For example, switch3([a,b,c,d,e,f,g]) returns [d,e,f,g,a,b,c]\n\ndef switch3(l):\n    return l[len(l)/2:] + l[:len(l)/2]\n\ndef unswitch3(l):\n    if len(l)%2==0:\n        return switch3(l)\n    else:\n        return l[len(l)/2+1:] + l[:len(l)/2+1]\n\n\n\n\n##################################\n#This is the Crypt function.\n##################################\ndef Crypt(text, cipher):\n    counter=0\n    text=text.lower()\n    cipher=cipher.lower()\n    keyValue=[]\n    textValue=[]\n    newValue=[]\n    newString=''\n    for letter in cipher:\n        keyValue.append(keyDict[letter])\n\n    for letter in text:\n        textValue.append(refDict2[letter])\n\n    for num in textValue:\n        newValue.append(num+keyValue[counter%len(keyValue)])\n        counter+=1\n\n    newValue = switch1(newValue)\n    newValue = switch2(newValue)\n    newValue = switch3(newValue)\n\n    for num in newValue:\n        newString+=refDict[num%43]\n\n    return newString\n\n##################################\n#This is the Decrypt function\n##################################\ndef Decrypt(encryptedText, cipher):\n    counter=0\n    cipher=cipher.lower()\n    keyValue=[]\n    textValue=[]\n    finalValue=[]\n    finalString=''\n\n    for letter in encryptedText:\n        textValue.append(refDict2[letter])\n\n    textValue = unswitch3(textValue)\n    textValue = unswitch2(textValue)\n    textValue = switch1(textValue)\n\n    for letter in cipher:\n        keyValue.append(keyDict[letter])\n\n    for num in textValue:\n        finalValue.append((num-keyValue[counter%len(keyValue)])%43)\n        counter+=1\n\n\n    for num in finalValue:\n        finalString+=refDict[num]\n\n    return finalString\n\n\n##################################\n#This is the user interface.\n##################################\n\nchoice=raw_input('Would you like to: 1)Encrypt or 2)Decrypt?  Pick 1 or 2: ')\n\nif choice=='1':\n    textType=raw_input(\"Would you like to: 1)encrypt a text file or 2) input the text to be encrypted? Pick 1 or 2: \")\n\n    if textType=='1':\n        cryptName=raw_input( 'Please enter the name of the text file you would like to encrypt(eg. text.txt): ')\n        newName=raw_input('Please name the file in which the encrypted text will be stored(eg. secret.txt):' )\n        cipher=raw_input(\"Now enter your personal encryption key(eg. secret code):\" )\n\n        cryptFile=open(cryptName, 'r')\n        newFile=open(newName, 'w')\n        print &gt;&gt; newFile, Crypt(cryptFile.read(),cipher)\n        cryptFile.close()\n        newFile.close()\n        print \"Ok, all done!\"\n    elif textType=='2':\n        inputText=raw_input('Ok, please input the text you would like to encrypt(eg. computers rock!): ')\n        cipher=raw_input(\"Now enter your personal encryption key (eg. ultra secret code): \")\n        if inputText=='': print 'Oops, no text was entered! Try again!'\n        else:\n            print Crypt(inputText, cipher)\n    else:\n        print 'Try again!'\n\nelif choice=='2':\n    textType=raw_input(\"Would you like to:1)decrypt a text file or 2) input the text to be decrypted? Pick 1 or 2: \")\n    if textType=='1':\n        decryptName=raw_input( 'Please enter the name of the text file you would like to decrypt(eg. text.txt): ')\n        newName2=raw_input('Please name the file in which the decrypted text will be stored(eg. secret.txt):' )\n        cipher=raw_input(\"Now enter the encryption key that was used to encrypt the file(eg. secret code):\" )\n        #Text decrypt\n        decryptFile=open(decryptName, 'r')\n        newFile2=open(newName2, 'w')\n        print&gt;&gt; newFile2, Decrypt(decryptFile.read(),cipher)\n        #other stuff\n        #textTodecrypt=decryptFile.read()\n        #newFile2.writelines(Decrypt(textTodecrypt, cipher))\n\n\n        decryptFile.close()\n        newFile2.close()\n        print \"Ok, all done!\"\n\n    elif textType=='2':\n        inputText=raw_input('Ok, please input the text you would like to decrypt(eg. dig&amp;ak:do): ')\n        cipher=raw_input(\"Now enter the encryption key that was used to encrypt the text (eg. ultra secret code): \")\n        if inputText=='': print 'Oops, no text was entered! Try again!'\n        else:\n            print Decrypt(inputText, cipher)\n\nprint \"Have a nice day!\"\n\n\n#there is an issue with the newline character\n</code>\n</pre>\n", "senID": 2}]