[{"text": ["A data-structure for 1:1 mappings in python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a problem which requires a reversable 1:1 mapping of keys to values. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["That means sometimes I want to find the value given a key, but at other times I want to find the key given the value.", "Both keys and values are guaranteed unique. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x = D[y]\ny == D.inverse[x]\n</code>\n</pre>\n", "senID": 3}, {"text": ["The obvious solution is to simply invert the dictionary every time I want a reverse-lookup: Inverting a dictionary is very easy, there's a recipe here but for a large dictionary it can be very slow."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "there's a recipe here but for a large dictionary it can be very slow", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/483666/python-reverse-inverse-a-mapping/483833"}]}, {"text": ["The other alternative is to make a new class which unites two dictionaries, one for each kind of lookup.", "That would most likely be fast but would use up twice as much memory as a single dict. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["So is there a better structure I can use?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "My application requires that this should be very fast and use as little as possible memory.", "tag": "none", "senID": 7}, {"text": "The structure must be mutable, and it's strongly desirable that mutating the object should not cause it to be slower (e.g. to force a complete re-index)", "tag": "none", "senID": 8}, {"text": "We can guarantee that either the key or the value (or both) will be an integer", "tag": "none", "senID": 9}, {"text": "It's likely that the structure will be needed to store thousands or possibly millions of items.", "tag": "none", "senID": 10}, {"text": "Keys &amp; Valus are guaranteed to be unique, i.e. len(set(x)) == len(x) for for x in [D.keys(), D.valuies()]", "tag": "none", "senID": 11}]}]