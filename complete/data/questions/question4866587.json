[{"text": ["\"Pythonic\" way to \"reset\" an object's variables?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["(\"variables\" here refers to \"names\", I think, not completely sure about the definition pythonistas use)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "(\"variables\" here refers to \"names\", I think, not completely sure about the definition pythonistas use)", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["I have an object and some methods.", "These methods all need and all change the object's variables.", "How can I, in the most pythonic and in the best, respecting the techniques of OOP, way achieve to have the object variables used by the methods but also keep their original values for the other methods?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Should I copy the object everytime a method is called?", "Should I save the original values and have a reset() method to reset them everytime a method needs them?", "Or is there an even better way?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT: I was asked for pseudocode.", "Since I am more interested in understanding the concept rather than just specifically solving the problem I am encountering I am going to try give an example:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Player():\n    games = 0\n    points = 0\n    fouls = 0\n    rebounds = 0\n    assists = 0\n    turnovers = 0\n    steals = 0\n\n    def playCupGame(self):\n        # simulates a game and then assigns values to the variables, accordingly\n        self.points = K #just an example\n\n    def playLeagueGame(self):\n        # simulates a game and then assigns values to the variables, accordingly\n        self.points = Z #just an example\n        self.rebounds = W #example again\n\n    def playTrainingGame(self):\n        # simulates a game and then assigns values to the variables, accordingly\n        self.points = X #just an example\n        self.rebounds = Y #example again\n</code>\n</pre>\n", "senID": 5}, {"text": ["The above is my class for a Player object (for the example assume he is a basketball one).", "This object has three different methods that all assign values to the players' statistics."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["So, let's say the team has two league games and then a cup game.", "I'd have to make these calls:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n p.playLeagueGame()\np.playLeagueGame()\np.playCupGame()\n</code>\n</pre>\n", "senID": 8}, {"text": ["It's obvious that when the second and the third calls are made, the previously changed statistics of the player need to be reset.", "For that, I can either write a reset method that sets all the variables back to 0, or copy the object for every call I make.", "Or do something completely different."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["That's where my question lays, what's the best approach, python and oop wise?"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["UPDATE: I am suspicious that I have superovercomplicated this and I can easily solve my problem by using local variables in the functions.", "However, what happens if I have a function inside another function, can I use locals of the outer one inside the inner one?"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]