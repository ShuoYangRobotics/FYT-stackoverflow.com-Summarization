[{"text": ["Cleanest design pattern for displaying form data and validation errors?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["In real-life applications, if I use a form framework, I inevitably end up fighting it at some point."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'm interested in best practice patterns for building forms in a website.", "Reference to implementations in any language would be a bonus (I usually work in Python).", "I'm particularly interested in the problem of creating / displaying the forms to the end user."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here's how I see the subject.", "Most parts of the form workflow can be handled with relatively lightweight components that I can pull out of frameworks like formencode and formish.", "By \"most parts\" I mean decoding submitted form data into a sensible data structure (e.g.", "repeated fields in the form should become lists in Python); marshalling the values into the types that we want (e.g.", "an \"age\" field should become an integer); and validating the values (e.g.", "\"age must not be blank\")."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "formencode", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://formencode.org/"}, {"text": "formish", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://ish.io/projects/show/formish"}, {"text": "decoding", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}, {"text": "marshalling", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}, {"text": "validating", "childNum": 0, "tag": "strong", "pos": 4, "childList": []}]}, {"text": ["The bit I end up fighting is making and displaying the forms themselves.", "Many frameworks (e.g.", "FormAlchemy) tightly couple their schemas, validation and models to some kind of form widget generation scheme, which I don't like."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "FormAlchemy", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://code.google.com/p/formalchemy/"}]}, {"text": ["The tasks involved in making a form are:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Making dynamic widgets (e.g. a select list with values from a database)", "tag": "none", "senID": 6}, {"text": "Looping over repeating fieldsets (e.g. a list of name, age pairs that each represent a person)", "tag": "none", "senID": 7}, {"text": "Embedding existing values in the form fields (from a data structure)", "tag": "none", "senID": 8}, {"text": "Displaying validation errors next to form fields or at the top of the page", "tag": "none", "senID": 9}]}, {"text": ["The options I see for doing this are:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["generate"], "childNum": 0, "tag": "strong", "senID": 11, "childList": []}, {"text": ["post-process"], "childNum": 0, "tag": "strong", "senID": 12, "childList": []}, {"text": "accept that for all but the simplest cases, you may as well start from the beginning by encoding the logic (loops, error display, etc) ", "tag": "none", "senID": 13}]}, {"text": ["Are there any other patterns for handling the problem?", "What are the pros and cons of each?  "], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["The frameworks (Python) I've looked at / had pointed out so far are:flatland,formencode,FormAlchemy,formish,WTForms,Djangoforms,web2py,deform,FormConvertandweb.py"], "childNum": 11, "tag": "p", "senID": 15, "childList": [{"text": "The frameworks (Python) I've looked at / had pointed out so far are:flatland,formencode,FormAlchemy,formish,WTForms,Djangoforms,web2py,deform,FormConvertandweb.py", "childNum": 10, "tag": "em", "pos": 0, "childList": [{"text": "flatland", "tag": "a"}, {"text": "formencode", "tag": "a"}, {"text": "FormAlchemy", "tag": "a"}, {"text": "formish", "tag": "a"}, {"text": "WTForms", "tag": "a"}, {"text": "Django", "tag": "a"}, {"text": "web2py", "tag": "a"}, {"text": "deform", "tag": "a"}, {"text": "FormConvert", "tag": "a"}, {"text": "web.py", "tag": "a"}]}, {"href": "http://discorporate.us/projects/flatland/docs/tip/", "text": "flatland", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://formencode.org/", "text": "formencode", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://code.google.com/p/formalchemy/", "text": "FormAlchemy", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://ish.io/projects/show/formish", "text": "formish", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://wtforms.simplecodes.com/", "text": "WTForms", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://docs.djangoproject.com/en/dev/topics/forms/", "text": "Django", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://www.web2py.com/", "text": "web2py", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://docs.repoze.org/deform/", "text": "deform", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://jimmyg.org/work/code/formconvert/", "text": "FormConvert", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://webpy.org/cookbook/forms", "text": "web.py", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Update: I've not really got very far with answering the question about best practise for building forms, but I've made the decision with my current project to go for deform / colander, which is a sane way of handling serialisation etc, but more importantly is well-documented and well-tested.", "I am going to avoid form generation at all for all but the simplest forms."], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]