[{"text": ["Python unittest: Generate multiple tests programmatically?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a function to test, under_test, and a set of expected input/output pairs:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "under_test", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [\n(2, 332),\n(234, 99213),\n(9, 3),\n# ...\n]\n</code>\n</pre>\n", "senID": 2}, {"text": ["I would like each one of these input/output pairs to be tested in its own test_* method.", "Is that possible?"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "test_*", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This is sort of what I want, but forcing every single input/output pair into a single test:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class TestPreReqs(unittest.TestCase):\n\n    def setUp(self):\n        self.expected_pairs = [(23, 55), (4, 32)]\n\n    def test_expected(self):\n        for exp in self.expected_pairs:\n            self.assertEqual(under_test(exp[0]), exp[1])\n\nif __name__ == '__main__':\n    unittest.main()\n</code>\n</pre>\n", "senID": 5}, {"text": ["(Also, do I really want to be putting that definition of self.expected_pairs in setUp?"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "self.expected_pairs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "setUp", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["UPDATE: Trying doublep's advice:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "doublep", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n class TestPreReqs(unittest.TestCase):\n\n    def setUp(self):\n        expected_pairs = [\n                          (2, 3),\n                          (42, 11),\n                          (3, None),\n                          (31, 99),\n                         ]\n\n        for k, pair in expected_pairs:\n            setattr(TestPreReqs, 'test_expected_%d' % k, create_test(pair))\n\n    def create_test (pair):\n        def do_test_expected(self):\n            self.assertEqual(get_pre_reqs(pair[0]), pair[1])\n        return do_test_expected\n\n\nif __name__ == '__main__':\n    unittest.main()\n</code>\n</pre>\n", "senID": 8}, {"text": ["This does not work.", "0 tests are run.", "Did I adapt the example incorrectly?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]