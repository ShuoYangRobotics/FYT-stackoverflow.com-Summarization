[{"text": ["Fast string to integer conversion in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["A simple problem, really: you have one billion (1e+9) unsigned 32-bit integers stored as decimal ASCII strings in a TSV (tab-separated values) file.", "Conversion using int() is horribly slow compared to other tools working on the same dataset.", "Why?", "And more importantly: how to make it faster?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "int()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Therefore the question: what is the fastest way possible to convert a string to an integer, in Python?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["What I'm really thinking about is some semi-hidden Python functionality that could be (ab)used for this purpose, not unlike Guido's use of array.array in his \"Optimization Anecdote\"."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "array.array", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://www.python.org/doc/essays/list2str/", "text": "\"Optimization Anecdote\"", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Sample data (with tabs expanded to spaces)"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Sample data", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n 38262904        \"pfv\"              2002-11-15T00:37:20+00:00\n12311231        \"tnealzref\"        2008-01-21T20:46:51+00:00\n26783384        \"hayb\"             2004-02-14T20:43:45+00:00\n812874          \"qevzasdfvnp\"      2005-01-11T00:29:46+00:00\n22312733        \"bdumtddyasb\"      2009-01-17T20:41:04+00:00\n</code>\n</pre>\n", "senID": 5}, {"text": ["The time it takes reading the data is irrelevant here, processing the data is the bottleneck."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Microbenchmarks"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Microbenchmarks", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["All of the following are interpreted languages.", "The host machine is running 64-bit Linux."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Python 2.6.2 with IPython 0.9.1, ~214k conversions per second (100%):"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n In [1]: strings = map(str, range(int(1e7)))\n\nIn [2]: %timeit map(int, strings);\n10 loops, best of 3: 4.68 s per loop\n</code>\n</pre>\n", "senID": 10}, {"text": ["REBOL 3.0 Version 2.100.76.4.2, ~231kcps (108%):"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt; strings: array n: to-integer 1e7 repeat i n [poke strings i mold (i - 1)]\n== \"9999999\"\n\n&gt;&gt; delta-time [map str strings [to integer! str]]\n== 0:00:04.328675\n</code>\n</pre>\n", "senID": 12}, {"text": ["REBOL 2.7.6.4.2 (15-Mar-2008), ~523kcps (261%):"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["As John noted in the comments, this version does not build a list of converted integers, so the speed-ratio given is relative to Python's 4.99s runtime of for str in strings: int(str)."], "childNum": 2, "tag": "p", "senID": 14, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "for str in strings: int(str)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt; delta-time: func [c /local t] [t: now/time/precise do c now/time/precise - t]\n\n&gt;&gt; strings: array n: to-integer 1e7 repeat i n [poke strings i mold (i - 1)]\n== \"9999999\"\n\n&gt;&gt; delta-time [foreach str strings [to integer! str]]\n== 0:00:01.913193\n</code>\n</pre>\n", "senID": 15}, {"text": ["KDB+ 2.6t 2009.04.15, ~2016kcps (944%):"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"code": "<pre>\n<code>\n q)strings:string til \"i\"$1e7\n\nq)\\t \"I\"$strings\n496\n</code>\n</pre>\n", "senID": 17}]