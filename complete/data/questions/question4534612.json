[{"text": ["what is the point of heterogenous arrays?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I know that more-dynamic-than-Java languages, like Python and Ruby, often allow you to place objects of mixed types in arrays, like so:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [\"hello\", 120, [\"world\"]]\n</code>\n</pre>\n", "senID": 2}, {"text": ["What I don't understand is why you would ever use a feature like this.", "If I want to store heterogenous data in Java, I'll usually create an object for it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["For example, say a User has int ID and String name.", "While I see that in Python/Ruby/PHP you could do something like this:"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "User", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "int ID", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "String name", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n [[\"John Smith\", 000], [\"Smith John\", 001], ...]\n</code>\n</pre>\n", "senID": 5}, {"text": ["this seems a bit less safe/OO than creating a class User with attributes ID and name and then having your array:"], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "User", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ID", "childNum": 0, "tag": "code", "childList": []}, {"text": "name", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n [&lt;User: name=\"John Smith\", id=000&gt;, &lt;User: name=\"Smith John\", id=001&gt;, ...]\n</code>\n</pre>\n", "senID": 7}, {"text": ["where those &lt;User ...&gt; things represent User objects."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "&lt;User ...&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Is there reason to use the former over the latter in languages that support it?", "Or is there some bigger reason to use heterogenous arrays?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["N.B.", "I am not talking about arrays that include different objects that all implement the same interface or inherit from the same parent, e.g."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n class Square extends Shape\nclass Triangle extends Shape\n[new Square(), new Triangle()]\n</code>\n</pre>\n", "senID": 11}, {"text": ["because that is, to the programmer at least, still a homogenous array as you'll be doing the same thing with each shape (e.g., calling the draw() method), only the methods commonly defined between the two."], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "draw()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]