[{"text": ["Caching compiled regex objects in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Each time a python file is imported that contains a large quantity of static regular expressions, cpu cycles are spent compiling the strings into their representative state machines in memory."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a = re.compile(\"a.*b\")\nb = re.compile(\"c.*d\")\n...\n</code>\n</pre>\n", "senID": 2}, {"text": ["Question: Is it possible to store these regular expressions in a cache on disk in a pre-compiled manner to avoid having to execute the regex compilations on each import?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Pickling the object simply does the following, causing compilation to happen anyway:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import pickle\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; x = re.compile(\".*\")\n&gt;&gt;&gt; pickle.dumps(x)\n\"cre\\n_compile\\np0\\n(S'.*'\\np1\\nI0\\ntp2\\nRp3\\n.\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["And re objects are unmarshallable:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import marshal\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; x = re.compile(\".*\")\n&gt;&gt;&gt; marshal.dumps(x)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: unmarshallable object\n</code>\n</pre>\n", "senID": 7}]