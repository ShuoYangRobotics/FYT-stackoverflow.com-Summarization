[{"text": ["Speed up bitstring/bit operations in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I wrote a prime number generator using Sieve of Eratosthenes and Python 3.1.", "The code runs correctly and gracefully at 0.32 seconds on ideone.com to generate prime numbers up to 1,000,000."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Sieve of Eratosthenes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"}, {"text": "ideone.com", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://ideone.com/wCJm5"}]}, {"code": "<pre>\n<code>\n # from bitstring import BitString\n\ndef prime_numbers(limit=1000000):\n    '''Prime number generator. Yields the series\n    2, 3, 5, 7, 11, 13, 17, 19, 23, 29 ...    \n    using Sieve of Eratosthenes.\n    '''\n    yield 2\n    sub_limit = int(limit**0.5) \n    flags = [False, False] + [True] * (limit - 2)   \n#     flags = BitString(limit)\n    # Step through all the odd numbers\n    for i in range(3, limit, 2):       \n        if flags[i] is False:\n#        if flags[i] is True:\n            continue\n        yield i\n        # Exclude further multiples of the current prime number\n        if i &lt;= sub_limit:\n            for j in range(i*3, limit, i&lt;&lt;1):\n                flags[j] = False\n#                flags[j] = True\n</code>\n</pre>\n", "senID": 2}, {"text": ["The problem is, I run out of memory when I try to generate numbers up to 1,000,000,000."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n flags = [False, False] + [True] * (limit - 2)   \nMemoryError\n</code>\n</pre>\n", "senID": 4}, {"text": ["As you can imagine, allocating 1 billion boolean values (1 byte 4 or 8 bytes (see comment) each in Python) is really not feasible, so I looked into bitstring.", "I figured, using 1 bit for each flag would be much more memory-efficient.", "However, the program's performance dropped drastically - 24 seconds runtime, for prime number up to 1,000,000.", "This is probably due to the internal implementation of bitstring."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "1 byte", "childNum": 0, "tag": "strike", "pos": 0, "childList": []}, {"text": "bitstring", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://code.google.com/p/python-bitstring/"}]}, {"text": ["You can comment/uncomment the three lines to see what I changed to use BitString, as the code snippet above."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["My question is, is there a way to speed up my program, with or without bitstring?"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "is there a way to speed up my program, with or without bitstring?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Edit: Please test the code yourself before posting.", "I can't accept answers that run slower than my existing code, naturally."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Edit again:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Edit again:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I've compiled a list of benchmarks on my machine."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "I've compiled a list of benchmarks on my machine.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2897297/speed-up-bitstring-bit-operations-in-python/2903765#2903765"}]}]