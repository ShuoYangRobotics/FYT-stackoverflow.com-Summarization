[{"text": ["Can someone explain why scipy.integrate.quad gives different results for equally long ranges while integrating sin(X)?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am trying to numerically integrate an arbitrary (known when I code) function in my program\nusing numerical integration methods.", "I am using Python 2.5.2 along with SciPy's numerical integration package.", "In order to get a feel for it, i decided to try integrating sin(x) and observed this behavior-"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from math import pi\n&gt;&gt;&gt; from scipy.integrate import quad\n&gt;&gt;&gt; from math import sin\n&gt;&gt;&gt; def integrand(x):\n...     return sin(x)\n... \n&gt;&gt;&gt; quad(integrand, -pi, pi)\n(0.0, 4.3998892617846002e-14)\n&gt;&gt;&gt; quad(integrand, 0, 2*pi)\n(2.2579473462709165e-16, 4.3998892617846002e-14)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I find this behavior odd because -\n1.", "In ordinary integration, integrating over the full cycle gives zero.", "2.", "In numerical integration, this (1) isn't necessarily the case, because you may just be \n   approximating the total area under the curve."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["In any case, either assuming 1 is True or assuming 2 is True, I find the behavior to be inconsistent.", "Either both integrations (-pi to pi and 0 to 2*pi) should return 0.0 (first value in the tuple is the result and the second is the error) or return 2.257..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Can someone please explain why this is happening?", "Is this really an inconsistency?", "Can someone also tell me if I am missing something really basic about numerical methods?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["In any case, in my final application, I plan to use the above method to find the arc length of a function.", "If someone has experience in this area, please advise me on the best policy for doing this in Python."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Edit\nNote\nI already have the first differential values at all points in the range stored in an array.", "Current error is tolerable.", "End note"], "childNum": 7, "tag": "p", "senID": 7, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "Note", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "End note", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["I have read Wikipaedia on this.", "As Dimitry has pointed out, I will be integrating sqrt(1+diff(f(x), x)^2) to get the Arc Length.", "What I wanted to ask was - is there a better approximation/ Best practice(?", ") / faster way to do this.", "If more context is needed, I'll post it separately/ post context here, as you wish."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]