[{"text": ["Reading 32bit Packed Binary Data On 64bit System"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm attempting to write a Python C extension that reads packed binary data (it is stored as  structs of structs) and then parses it out into Python objects.", "Everything works as expected on a 32 bit machine (the binary files are always written on 32bit architecture), but not on a 64 bit box.", "Is there a \"preferred\" way of doing this?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "hr", "senID": 2}, {"text": ["It would be a lot of code to post but as an example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n struct\n{\n\tWORD\tversion;\n\tBOOL\tupgrade;\n\ttime_t\ttime1;\n            time_t  time2;\n} apparms;\n\nFile *fp;\nfp = fopen(filePath, \"r+b\");\nfread(&amp;apparms, sizeof(apparms), 1, fp);\nreturn Py_BuildValue(\"{s:i,s:l,s:l}\",\n  \"sysVersion\",apparms.version,\n  \"powerFailTime\", apparms.time1,\n  \"normKitExpDate\", apparms.time2\n );\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now on a 32 bit system this works great, but on a 64 bit my time_t sizes are different (32bit vs 64 bit longs)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "hr", "senID": 6}, {"text": ["Damn, you people are fast.  "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Patrick, I originally started using the struct package but found it just way to slow for my needs.", "Plus I was looking for an excuse to write a Python Extension."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["I know this is a stupid question but what types do I need to watch out for?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Thanks."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]