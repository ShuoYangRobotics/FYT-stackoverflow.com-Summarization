[{"text": ["How do you iterate over a tree?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["What is you preferred method of traversing a tree data structure, since recursive method calls can be pretty inefficient in some circumstances, I am simply using a generator like the one above.", "Do you have any hints to make it faster ?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def children(self):\n    stack = [self.entities]\n    while stack: \n        for e in stack.pop():\n            yield e\n            if e.entities:\n                stack.append(e.entities)\n</code>\n</pre>\n", "senID": 2}, {"text": ["here is some test data:\nfirst one is recursive, second uses the generator"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n s = time.time()\nfor i in range(100000):\n    e.inc_counter()\nprint time.time() - s\n\ns = time.time()\nfor i in range(100000):\n    for e in e.children():\n        e.inc_counter_s()\nprint time.time() - s\n</code>\n</pre>\n", "senID": 4}, {"text": ["results:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["0.416000127792"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["0.298999786377"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["test code:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n import random\n\nclass Entity():\n    def __init__(self, name):\n        self.entities = []\n        self.name = name\n        self.counter = 1\n        self.depth = 0\n\n    def add_entity(self, e):\n        e.depth = self.depth + 1\n        self.entities.append(e)\n\n    def inc_counter_r(self):\n        for e in self.entities:\n            e.counter += 1\n            e.inc_counter_r()\n\n    def children(self):\n        stack = [self.entities]\n        while stack:\n            for e in stack.pop():\n                yield e\n                if e.entities:\n                    stack.append(e.entities)\n\nroot = Entity(\"main\")\ndef fill_node(root, max_depth):\n    if root.depth &lt;= max_depth:\n        for i in range(random.randint(10, 15)):\n            e = Entity(\"node_%s_%s\" % (root.depth, i))\n            root.add_entity(e)\n            fill_node(e, max_depth)\nfill_node(root, 3)\n\nimport time\ns = time.time()\nfor i in range(100):\n    root.inc_counter_r()\nprint \"recursive:\", time.time() - s\n\ns = time.time()\nfor i in range(100):\n    for e in root.children():\n        e.counter += 1\nprint \"generator:\",  time.time() - s\n</code>\n</pre>\n", "senID": 9}]