[{"text": ["Singleton python generator?", "Or, pickle a python generator?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am using the following code, with nested generators, to iterate over a text document and return training examples using get_train_minibatch().", "I would like to persist (pickle) the generators, so I can get back to the same place in the text document.", "However, you cannot pickle generators."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "get_train_minibatch()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["Is there a simple workaround, so that I can save my position and start back where I stopped?", "Perhaps I can make get_train_example() a singleton, so I don't have several generators lying around.", "Then, I could make a global variable in this module that keeps track of how far along get_train_example() is."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "get_train_example()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "get_train_example()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Do you have a better (cleaner) suggestion, to allow me to persist this generator?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]}, {"text": ["[edit: Two more ideas:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Can I add a member variable/method to the generator, so I can call generator.tell() and find the file location?", "Because then, the next time I create the generator, I can ask it to seek to that location.", "This idea sounds the simplest of everything."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "This idea sounds the simplest of everything.", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}]}, {"text": ["Can I create a class and have the file location be a member variable, and then have the generator created within the class and update the file location member variable each time it yields?", "Because then I can know how far into the file it it."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]}, {"text": [], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Here is the code:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n def get_train_example():\n    for l in open(HYPERPARAMETERS[\"TRAIN_SENTENCES\"]):\n        prevwords = []\n        for w in string.split(l):\n            w = string.strip(w)\n            id = None\n            prevwords.append(wordmap.id(w))\n            if len(prevwords) &gt;= HYPERPARAMETERS[\"WINDOW_SIZE\"]:\n                yield prevwords[-HYPERPARAMETERS[\"WINDOW_SIZE\"]:]\n\ndef get_train_minibatch():\n    minibatch = []\n    for e in get_train_example():\n        minibatch.append(e)\n        if len(minibatch) &gt;= HYPERPARAMETERS[\"MINIBATCH SIZE\"]:\n            assert len(minibatch) == HYPERPARAMETERS[\"MINIBATCH SIZE\"]\n            yield minibatch\n            minibatch = []\n</code>\n</pre>\n", "senID": 9}]