[{"text": ["Function with varying number of For Loops (python)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["My problem is difficult to explain."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I want to create a function that contains nested for loops,\nthe amount of which is proportional to an argument passed to the function."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["Here's a hypothetical example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n Function(2)\n</code>\n</pre>\n", "senID": 4}, {"text": ["...would involve..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n for x in range (y):\n    for x in range (y):\n        do_whatever()\n</code>\n</pre>\n", "senID": 6}, {"text": ["Another example...  "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n Function(6)\n</code>\n</pre>\n", "senID": 8}, {"text": ["...would involve..."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n for x in range (y):\n    for x in range (y):\n        for x in range (y):\n            for x in range (y):\n                for x in range (y):\n                    for x in range (y):\n                        whatever()\n</code>\n</pre>\n", "senID": 10}, {"text": ["The variables of the for loop (y) are NOT actually used in the nested code.  "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Your first thought might be to create ONE for loop, with a range that is to the power of the number argument...", "THIS CAN NOT WORK because the product would be HUGE.", "I have instances required where there are 8 nested for loops.", "The product is too large for a range in a for loop."], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["There are other arguments needed to be passed to the function, but I can handle that myself."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["Here's the code\n(it creates the Snowflake Fractal)"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n from turtle import *\nlength = 800\nspeed(0)\n\ndef Mini(length):\n    for x in range (3):\n        forward(length)\n        right(60)\n\npenup()\nsetpos(-500, 0)\npendown()   \n\nchoice = input(\"Enter Complexity:\")\n\nif choice == 1:\n    for x in range (3):\n        forward(length)\n        left(120)\n\nelif choice == 2:\n    for x in range (3):\n        Mini(length/3)\n        left(120)\n\nif choice == 3:\n    for x in range (6):\n        Mini(length/9)\n        right(60)\n        Mini(length/9)\n        left(120)\n\nif choice == 4:\n    for y in range (6):\n        for x in range (2):\n            Mini(length/27)\n            right(60)\n            Mini(length/27)\n            left(120)\n        right(180)\n        for x in range (2):\n            Mini(length/27)\n            right(60)\n            Mini(length/27)\n            left(120)\n\nif choice == 5:\n    for a in range (6):\n        for z in range (2):\n            for y in range (2):\n                for x in range (2):\n                    Mini(length/81)\n                    right(60)\n                    Mini(length/81)\n                    left(120)\n                right(180)\n                for x in range (2):\n                    Mini(length/81)\n                    right(60)\n                    Mini(length/81)\n                    left(120)\n            right(180)\n        right(180)\n\nif choice == 6:\n    for c in range (6):\n        for b in range (2):\n            for a in range (2):\n                for z in range (2):\n                    for y in range (2):\n                        for x in range (2):\n                            Mini(length/243)\n                            right(60)\n                            Mini(length/243)\n                            left(120)\n                        right(180)\n                        for x in range (2):\n                            Mini(length/243)\n                            right(60)\n                            Mini(length/243)\n                            left(120)\n                    right(180)\n                right(180)\n            right(180)\n        right(180)\n\nif choice == 7:\n    for a in range (6):\n        for b in range(2):\n            for c in range (2):\n                for d in range (2):\n                    for e in range (2):\n                        for f in range (2):\n                            for y in range (2):\n                                for x in range (2):\n                                    Mini(length/729)\n                                    right(60)\n                                    Mini(length/729)\n                                    left(120)\n                                right(180)\n                                for x in range (2):\n                                    Mini(length/729)\n                                    right(60)\n                                    Mini(length/729)\n                                    left(120)\n                            right(180)\n                        right(180)\n                    right(180)\n                right(180)\n            right(180)\n        right(180)\n</code>\n</pre>\n", "senID": 15}, {"text": ["I'd appreciate any help you can give me at all,\nthough if you suggest a different method (such as recursion),\nplease don't just paste the code; instead, suggests some ideas that could put me in the right direction."], "childNum": 2, "tag": "p", "senID": 16, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["(The algorithm is for a Specialist Math Assignment)"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["specs:\nPython 2.7.1\nTurtle\nIDLE\nWindows7"], "childNum": 4, "tag": "p", "senID": 18, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}]