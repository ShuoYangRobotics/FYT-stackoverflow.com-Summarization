[{"text": ["int((0.1+0.7)*10) = 7 in several languages.", "How to prevent this?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Recently I came across a bug/feature in several languages.", "I have a very basic knowledge about how it's caused (and I'd like some detailed explanation), but when I think of all the bugs I must have made over the years, the question is how can I determine \"Hey, this might cause a riddiculous bug, I'd better use arbitrary precision functions\", what other languages do have this bug (and those who don't, why).", "Also, why 0.1+0.7 does this and i.e.", "0.1+0.3 doesn't, are there any other well-known examples?"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Hey, this might cause a riddiculous bug, I'd better use arbitrary precision functions", "childNum": 1, "tag": "strong", "pos": 1, "childList": [{"text": "Hey, this might cause a riddiculous bug, I'd better use arbitrary precision functions", "tag": "em"}]}, {"text": "Hey, this might cause a riddiculous bug, I'd better use arbitrary precision functions", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "why", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}]}, {"text": ["PHP "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n //the first one actually doesn't make any sense to me,\n//why 7 after typecast if it's represented internally as 8?\ndebug_zval_dump((0.1+0.7)*10); //double(8) refcount(1)\ndebug_zval_dump((int)((0.1+0.7)*10)); //long(7) refcount(1)\ndebug_zval_dump((float)((0.1+0.7)*10)); //double(8) refcount(1)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Python:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ((0.1+0.7)*10)\n7.9999999999999991\n&gt;&gt;&gt; int((0.1+0.7)*10)\n7\n</code>\n</pre>\n", "senID": 5}, {"text": ["Javascript:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n alert((0.1+0.7)*10); //7.999999999999999\nalert(parseInt((0.7+0.1)*10)); //7\n</code>\n</pre>\n", "senID": 7}, {"text": ["Ruby:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt; ((0.1+0.7)*10).to_i                                                  \n=&gt; 7                                                                    \n&gt;&gt;((0.1+0.7)*10)                                                       \n=&gt; 7.999999999999999\n</code>\n</pre>\n", "senID": 9}]