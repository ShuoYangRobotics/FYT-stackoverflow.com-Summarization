[{"text": ["Iterating through String word at a time in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a string buffer of a huge text file.", "I have to search a given words/phrases in the string buffer.", "Whats the efficient way to do it ? "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I tried using re module matches.", "But As i have a huge text corpus that i have to search through.", "This is taking large amount of time."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Given a Dictionary of words and Phrases."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I iterate through the each file, read that into string , search all the words and phrases in the dictionary and increment the count in the dictionary if the keys are found."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["One small optimization that we thought was to sort the dictionary of phrases/words with the max number of words to lowest.", "And then compare each word start position from the string buffer and compare the list of words.", "If one phrase is found, we don search for the other phrases (as it matched the longest phrase ,which is what we want)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Can some one suggest how to go about word by word in the string buffer.", "(Iterate string buffer word by word) ? "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Also, Is there any other optimization that can be done on this ?  "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n data = str(file_content)\nfor j in dictionary_entity.keys():\n    cnt = data.count(j+\" \")\n    if cnt != -1:\n        dictionary_entity[j] = dictionary_entity[j] + cnt\nf.close()\n</code>\n</pre>\n", "senID": 8}]