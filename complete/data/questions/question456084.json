[{"text": ["How do I do what strtok() does in C, in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am learning Python and trying to figure out an efficient way to tokenize a string of numbers separated by commas into a list.", "Well formed cases work as I expect, but less well formed cases not so much."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If I have this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n A = '1,2,3,4'\nB = [int(x) for x in A.split(',')]\n\nB results in [1, 2, 3, 4]\n</code>\n</pre>\n", "senID": 3}, {"text": ["which is what I expect, but if the string is something more like"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n A = '1,,2,3,4,'\n</code>\n</pre>\n", "senID": 5}, {"text": ["if I'm using the same list comprehension expression for B as above, I get an exception.", "I think I understand why (because some of the \"x\" string values are not integers), but I'm thinking that there would be a way to parse this still quite elegantly such that tokenization of the string a works a bit more directly like strtok(A,\",\\n\\t\") would have done when called iteratively in C."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "strtok(A,\",\\n\\t\")", "childNum": 1, "tag": "strong", "pos": 1, "childList": [{"text": "strtok(A,\",\\n\\t\")", "tag": "em"}]}, {"text": "strtok(A,\",\\n\\t\")", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["To be clear what I am asking; I am looking for an elegant/efficient/typical way in Python to have all of the following example cases of strings:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n A='1,,2,3,\\n,4,\\n'\nA='1,2,3,4'\nA=',1,2,3,4,\\t\\n'\nA='\\n\\t,1,2,3,,4\\n'\n</code>\n</pre>\n", "senID": 8}, {"text": ["return with the same list of:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n B=[1,2,3,4]\n</code>\n</pre>\n", "senID": 10}, {"text": ["via some sort of compact expression."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]