[{"text": ["Pattern matching of lists in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I want to do some pattern matching on lists in Python.", "For example, in Haskell, I can do something like the following:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n fun (head : rest) = ...\n</code>\n</pre>\n", "senID": 2}, {"text": ["So when I pass in a list, head will be the first element, and rest will be the trailing elements."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "head", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "rest", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Likewise, in Python, I can automatically unpack tuples:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n (var1, var2) = func_that_returns_a_tuple()\n</code>\n</pre>\n", "senID": 5}, {"text": ["I want to do something similar with lists in Python.", "Right now, I have a function that returns a list, and a chunk of code that does the following:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n ls = my_func()\n(head, rest) = (ls[0], ls[1:])\n</code>\n</pre>\n", "senID": 7}, {"text": ["I wondered if I could somehow do that in one line in Python, instead of two."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]