[{"text": ["Fastest ways to key-wise add a list of dicts together in python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Say I have a bunch of dictionaries "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a = {'x': 1.0, 'y': 0.5, 'z': 0.25 }\nb = {'w': 0.5, 'x': 0.2 }\n</code>\n</pre>\n", "senID": 2}, {"text": ["There's only two there, but the question is regarding an arbitary amount."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["What's the fastest way to find the mean value for each key?", "The dicts are quite sparse, so there will be a lot of cases where lots of keys aren't present in various dicts."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["The result I'm looking for is a new dictionary which has all the keys and the mean values for each one.", "The values are always floats, I'm happy to dip into ctypes.", "The approach I have is slower than I'd like, possibly because in my case I'm using defaultdicts which means I'm actually initialising values even if they're not there.", "If this is the cause of the slowness I'm happy to refactor, just want to make sure I'm not missing anything obvious."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Edit: I think I was misleading with what the result should be, if the value isn't present it should act as 0.0, so the result for the above example would be:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n {'w':0.25,'x':0.6,'y':0.25,'z':0.125}\n</code>\n</pre>\n", "senID": 7}, {"text": ["So the division is by the total number of unique keys."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["The main thing I'm wondering is if there's a sneaky way to divide the whole dict by the length in one step, or do the additions in one step.", "Basically a very fast vector addition and division.", "I've looked briefly at numpy arrays, but they don't seem to apply to dicts and if I converted the dicts to lists I'd have to remove the sparseness property (by explicitly setting absent values to 0)."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]