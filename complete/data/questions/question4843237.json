[{"text": ["Transforming expression given in prefix notation, identifying common subexpressions and dependencies"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am given a bunch of expressions in prefix notation in an ANSI text file.", "I would like to produce another ANSI text file containing the step-by-step evaluation of these expressions.", "For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n - + ^ x 2 ^ y 2 1\n</code>\n</pre>\n", "senID": 2}, {"text": ["should be turned into"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n t1 = x^2\nt2 = y^2\nt3 = t1 + t2\nt4 = t3 - 1\nt4 is the result\n</code>\n</pre>\n", "senID": 4}, {"text": ["I also have to  identify common subexpressions.", "For example given"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n expression_1: z = ^ x 2\nexpression_2: - + z ^ y 2 1\nexpression_3: - z y\n</code>\n</pre>\n", "senID": 6}, {"text": ["I have to generate an output saying that x appears in expressions 1, 2 and 3 (through z)."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I have to identify dependecies: expression_1 depends only on x, expression_2 depends on x and y, etc."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["The original problem is more difficult than the examples above and I have no control over the input format, it is in prefix notation in a much more complicated way than the above ones."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["I already have a working implementation in C++ however it is a lot of pain doing such things in C++."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["What programming language is best suited for these type problems?"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Could you recommend a tutorial / website / book where I could start?"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["What keywords should I look for?"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["UPDATE: Based on the answers, the above examples are somewhat unfortunate, I have unary, binary and n-ary operators in the input.", "(If you are wondering, exp is an unary operator, sum over a range is an n-ary operator."], "childNum": 3, "tag": "p", "senID": 14, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "exp", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "sum", "childNum": 0, "tag": "code", "childList": []}]}]