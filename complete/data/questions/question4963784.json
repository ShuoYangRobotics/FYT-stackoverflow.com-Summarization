[{"text": ["compute mean in python for a generator"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm doing some statistics work, I have a (large) collection of random numbers to compute the mean of, I'd like to work with generators, because I just need to compute the mean, so I don't need to store the numbers. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The problem is that numpy.mean breaks if you pass it a generator.", "I can write a simple function to do what I want, but I'm wondering if there's a proper, built-in way to do this?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It would be nice if I could say \"sum(values)/len(values)\", but len doesn't work for genetators, and sum already consumed values."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["here's an example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import numpy \n\ndef my_mean(values):\n    n = 0\n    Sum = 0.0\n    try:\n        while True:\n            Sum += next(values)\n            n += 1\n    except StopIteration: pass\n    return float(Sum)/n\n\nX = [k for k in range(1,7)]\nY = (k for k in range(1,7))\n\nprint numpy.mean(X)\nprint my_mean(Y)\n</code>\n</pre>\n", "senID": 5}, {"text": ["these both give the same, correct, answer, buy my_mean doesn't work for lists, and numpy.mean doesn't work for generators."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I really like the idea of working with generators, but details like this seem to spoil things."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["thanks for any help"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["-nick"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]