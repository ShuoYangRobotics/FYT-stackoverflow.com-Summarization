[{"text": ["Why can't I subclass datetime.date?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Why doesn't the following work (Python 2.5.2)?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import datetime\n&gt;&gt;&gt; class D(datetime.date):\n        def __init__(self, year):\n            datetime.date.__init__(self, year, 1, 1)\n&gt;&gt;&gt; D(2008)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: function takes exactly 3 arguments (1 given)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I wanted to create a class that was just like datetime.date, but with a different __init__ function.", "Apparently my function never gets called.", "Instead the original datetime.date.__init__ is called and fails because that expects 3 arguments and I am passing in one."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "datetime.date", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "datetime.date.__init__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["What's going on here?", "And is this a clue?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; datetime.date.__init__\n&lt;slot wrapper '__init__' of 'object' objects&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["Thanks!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]