[{"text": ["What is the clojure equivalent of the Python idiom \"if __name__ == '__main__'\"?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm dabbling in clojure and am having a little trouble trying to determine the clojure (and / or Lisp) equivalent of this common python idiom."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The idiom is that at the bottom of a python module there is often a bit of test code, and then a statement which runs the code, for example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n # mymodule.py\nclass MyClass(object):\n    \"\"\"Main logic / code for the library lives here\"\"\"\n    pass\n\ndef _runTests():\n    # Code which tests various aspects of MyClass...\n    mc = MyClass() # etc...\n    assert 2 + 2 == 4\n\nif __name__ == '__main__': _runTests()\n</code>\n</pre>\n", "senID": 3}, {"text": ["This is useful for simple, ad-hoc testing.", "One would normally use this module by writing from mymodule import MyClass, in which case _runTests() is never called, but with the snippet at the end, one can also run it by typing python mymodule.py directly from the command line."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "from mymodule import MyClass", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "_runTests()", "childNum": 0, "tag": "code", "childList": []}, {"text": "python mymodule.py", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Is there an equivalent idiom in Clojure (and/or common lisp)?", "I'm not after a full-blown unit testing library (well, I am, but not in this question), I'd just like to include some code in a module which will only be run under some circumstances, so I can have a quick way to run code I've been working on but still allow my file to be imported like a normal module / namespace."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]