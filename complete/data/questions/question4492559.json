[{"text": ["Python code to get current function into a variable?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["How can I get a variable that contains the currently executing function in Python?", "I don't want the function's name.", "I know I can use inspect.stack to get the current function name.", "I want the actual callable object.", "Can this be done without using inspect.stack to retrieve the function's name and then evaling the name to get the callable object?"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "inspect.stack", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "inspect.stack", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "eval", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit: I have a reason to do this, but it's not even a remotely good one.", "I'm using plac to parse command-line arguments.", "You use it by doing plac.call(main), which generates an ArgumentParser object from the function signature of \"main\".", "Inside \"main\", if there is a problem with the arguments, I want to exit with an error message that includes the help text from the ArgumentParser object, which means that I need to directly access this object by calling plac.parser_from(main).print_help().", "It would be nice to be able to say instead: plac.parser_from(get_current_function()).print_help(), so that I am not relying on the function being named \"main\".", "Right now, my implementation of \"get_current_function\" would be:"], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "plac", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://micheles.googlecode.com/hg/plac/doc/plac.html"}, {"text": "plac.call(main)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "plac.parser_from(main).print_help()", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "plac.parser_from(get_current_function()).print_help()", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"code": "<pre>\n<code>\n import inspect    \ndef get_current_function():\n    return eval(inspect.stack()[1][3])\n</code>\n</pre>\n", "senID": 3}, {"text": ["But this implementation relies on the function having a name, which I suppose is not too onerous.", "I'm never going to do plac.call(lambda ...)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "plac.call(lambda ...)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["In the long run, it might be more useful to ask the author of plac to implement a print_help method to print the help text of the function that was most-recently called using plac, or something similar."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]