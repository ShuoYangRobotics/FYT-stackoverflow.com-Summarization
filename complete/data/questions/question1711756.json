[{"text": ["Python: \"Indentation Error: unindent does not match any outer indentation level\""], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I just can't figure out what's wrong with this..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n#\n#       Bugs.py\n#       \n\nfrom __future__ import division\n\n# No Module!\nif __name__ != '__main__': \n    print \"Bugs.py is not meant to be a module\"\n    exit()\n\n# App\nimport pygame, sys, random, math\npygame.init()\n\n# Configuration Vars\nconf = {\n    \"start_energy\": 50, \n    \"food_energy\": 25, \n    \"mate_minenergy\": 50, \n    \"mate_useenergy\": 35, \n    \"lifespan\": 300000\n}\n\nclass Bugs:\n    def __init__(self):\n        self.list  = []\n        self.timers= {}\n        # Names / colors for sexes\n        self.sex = [\"Male\", \"Female\"]\n        self.color = [\"#CBCB25\", \"#A52A2A\"]\n        # Bug info tracking\n        self.bugid = 0\n        self.buginfo = {\"maxgen\":0, \"maxspeed\":0}\n\n    def new(self, x=False, y=False, sex=2, speed=0, generation=0, genes=[]):\n        sex   = sex   if not sex   == 2 else random.randint(0,1)\n        speed = speed if not speed == 0 else random.randint(1,3)\n        # Create new bug object\n        self.bugs.append(BugObj(sex, speed, generation, bugid, pygame.time.get_ticks, genes))\n        # Make sure it has a timer\n        if not self.timers[speed]:\n            self.timers[speed] = 1\n            pygame.time.set_timer(25 + speed, 1000 / speed)\n        # Update info tracking variables\n        if speed      &gt; self.buginfo[\"maxspeed\"]: self.buginfo[\"maxspeed\"] = speed\n        if generation &gt; self.buginfo[\"maxgen\"]  : self.buginfo[\"maxgen\"]   = generation\n        self.bugid += 1\n\n    def speed_count(self, speed):\n        a = 0\n        for i in list[:]:\n            if i.speed = speed:\n                a += 1\n        return a\n\nclass BugObj:\n    def __init__(self, sex, speed, generation, bugid, born, genes):\n        global conf\n        self.sex        = sex\n        self.speed      = speed\n        self.generation = generation\n        self.id         = bugid\n        self.born       = born\n        self.genes      = genes\n        self.died       = -1\n        self.energy     = conf[\"start_energy\"]\n        self.target     = \"None\"\n\n    def update(self):\n        global conf\n        if self.age() &gt; conf[\"lifespan\"]:\n            self.die()\n        else:\n            f = closest_food()\n            m = closest_mate()\n            # If there's a potential mate\n            if m != 0 and self.energy &gt; conf[\"mate_minenergy\"]:\n                if not self.rect.colliderect(m.rect):\n                    self.move_toward(m)\n                    self.target = \"Mate: \" + str(m.rect.center)\n                else:\n                    Bugs.mate(self, m)\n                    self.target = \"Mate: (Reached)\"\n            elif f != 0:\n                if not self.rect.colliderect(f.rect):\n                    self.move_toward(f)\n                    self.target = \"Food: \" + str(f.rect.center)\n                else:\n                    self.eat(f)\n                    self.target = \"Food: (Reached)\"\n            else:\n                self.target = \"Resting\"\n            # Use energy\n            self.energy -= 0\n\n    def closest_food(self):\n        pass\n\n    def closest_mate(self):\n        pass\n\n    def age(self):\n        if self.died != -1:\n            return pygame.time.get_ticks - self.born\n        else:\n            return self.died - self.born\n\n    def die(self):\n        # Remove self from the list\n        Bugs.list.remove(self)\n        # Turn off timer\n        if not Bugs.speed_count(self.speed):\n            Bugs.timers[self.speed] = 0\n            pygame.time.timers(25 + self.speed, 0)\n        # Bye!\n        del self\n\nclass Food:\n    def __init__(self)\n        pass\n\n    def update(self)\n        pass\n\n# Update Loop\nwhile 1:\n    ev = pygame.event.wait()\n    speed = ev.type - 25\n    if speed &gt; 24:\n        for i in Bugs.list[:]:\n            if i.speed = speed\n                i.update()\n                print \"Updating bug #\" + str(i.id)\n    if speed == 0:\n        Food.update()\n</code>\n</pre>\n", "senID": 2}, {"text": ["I get the following every time:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n File \"Bugs.py\" line 53\n    def new(self, x=False, y=False, sex=2, speed=0, generation=0, genes=[]):\n                                                                           ^\nIndentation Error: unindent does not match any outer indentation level\n</code>\n</pre>\n", "senID": 4}]