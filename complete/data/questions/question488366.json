[{"text": ["How do I make environment variable changes stick in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["From what I've read, any changes to the environment variables in a Python instance are only available within that instance, and disappear once the instance is closed.", "Is there any way to make them stick by committing them to the system?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The reason I need to do this is because at the studio where I work, tools like Maya rely heavily on environment variables to configure paths across multiple platforms."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["My test code is"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import os\nos.environ['FAKE'] = 'C:\\\\'\n</code>\n</pre>\n", "senID": 4}, {"text": ["Opening another instance of Python and requesting os.environ['FAKE'] yields a KeyError."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "os.environ['FAKE']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "KeyError", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["NOTE: Portability will be an issue, but the small API I'm writing will be able to check OS version and trigger different commands if necessary."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "NOTE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["That said, I've gone the route of using the Windows registry technique and will simply write alternative methods that will call shell scripts on other platforms as they become requirements."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]