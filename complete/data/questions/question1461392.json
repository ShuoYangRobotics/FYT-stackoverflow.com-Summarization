[{"text": ["Is it Pythonic for a function to return an iterable or non-iterable depending on its input?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["(Title and contents updated after reading Alex's answer)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In general I believe that it's considered bad form (un-Pythonic) for a function to sometimes return an iterable and sometimes a single item depending on its parameters."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For example struct.unpack always returns a tuple even if it contains only one item."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "struct.unpack", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I'm trying to finalise the API for a module and I have a few functions that can take one or more parameters (via *args) like this:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "*args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = s.read(10)        # reads 10 bits and returns a single item\nb, c = s.read(5, 5)   # reads 5 bits twice and returns a list of two items.\n</code>\n</pre>\n", "senID": 5}, {"text": ["So it returns a single item if there's only one parameter, otherwise it returns a list.", "Now I think this is fine and not at all confusing, but I suspect that others may disagree."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The most common use-case for these functions would be to only want a single item returned, so always returning a list (or tuple) feels wrong: "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n a, = s.read(10)       # Prone to bugs when people forget to unpack the object\na = s.read(10)[0]     # Ugly and it's not clear only one item is being returned\n</code>\n</pre>\n", "senID": 8}, {"text": ["Another option is to have two functions:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n a = s.read(10)\nb, c = s.read_list(5, 5)\n</code>\n</pre>\n", "senID": 10}, {"text": ["which is OK, but it clutters up the API and requires the user to remember twice as many functions without adding any value."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["So my question is: Is sometimes returning an iterable and sometimes a single item confusing and un-Pythonic?", "If so what's the best option?"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "So my question is:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "hr", "senID": 13}, {"text": ["Update: I think the general consensus is that it's very naughty to only return an iterable sometimes.", "I think that the best option for most cases would be to always return the iterable, even if it contained only one item."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Having said that, for my particular case I think I'll go for the splitting into two functions (read(item) / readlist(*items)), the reasoning being that I think the single item case will happen much more often than the multiple item case, so it makes it easier to use and the API change less problematic for users."], "childNum": 2, "tag": "p", "senID": 15, "childList": [{"text": "read(item)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "readlist(*items)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Thanks everyone."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}]