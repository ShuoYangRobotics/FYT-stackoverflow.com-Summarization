[{"text": ["Fastest way to convert '(-1,0)' into tuple(-1, 0)?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've got a huge tuple of strings, which are being returned from a program.", "An example tuple being returned might look like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ('(-1,0)', '(1,0)', '(2,0)', '(3,0)', '(4,0)', '(5,0)', '(6,0)')\n</code>\n</pre>\n", "senID": 2}, {"text": ["I can convert these strings to real tuples (with integers inside), but i am hoping someone knows a nice trick to speed this up.", "Anything i've come up with feels like i am doing it a relatively \"slow\" way.", "And as i have mentioned, these lists can be big, so a fast way would be much appreciated!"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "can", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Thanks"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["edit one\nAlright, so its seeming that eval is a slower method of doing this.", "But so far i've got 4 methods tested, thanks for any comments and submissions!", ":)"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "edit one", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "edit one", "tag": "em"}]}, {"text": "edit one", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["Also, someone asked on the size of my tuples.", "It will range anywhere from a few, to hopefully no more than a few million.", "Not \"too\" big, but big enough that speed is an important factor.", "I'm not here to micro-optimize, just learn any new nifty tricks i might not be aware of.", "Eg, eval() is something i often forget about, even though it doesn't seem to do so well in this case."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["edit two\nI also wanted to note that the string format shouldn't change.", "So no need to check the format.", "Also, this is an embedded Python v2.6.2, so anything requiring 2.6 is fine.", "3.0 on the other hand, not so much ;)"], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "edit two", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "edit two", "tag": "em"}]}, {"text": "edit two", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "requiring", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["Looking great guys, again, thanks for all the input :)"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["edit 3\nYet another note.", "I noticed i had been returning code that didn't result in a \"tuple\", this is ok, and sorry if anyone thought the end result \"had\" to be a tuple.", "Something of like format is fine."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "edit 3", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "edit 3", "tag": "em"}]}, {"text": "edit 3", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n import timeit\n\ntest_tuple = ('(-1,0)', '(1,0)', '(2,0)', '(3,0)', '(4,0)', '(5,0)', '(6,0)', '(7,0)',)\n\ndef timeit_a():\n    ''''''\n    def convert_tup_strings(tup_string):\n        first_int, last_int = tup_string[1:-1].split(',')\n        return (int(first_int), int(last_int))\n\n    return map(convert_tup_strings, test_tuple)\n\ndef timeit_a_1():\n    ''''''\n    def convert_tup_strings(tup_string):\n        return map(int, tup_string[1:-1].split(','))\n\n    return map(convert_tup_strings, test_tuple)\n\ndef timeit_b():\n    converted = []\n\n    for tup_string in test_tuple:\n        first_int, last_int = tup_string[1:-1].split(',')\n        converted.append((int(first_int), int(last_int)))\n\n    return converted\n\ndef timeit_b_1():\n    converted = []\n\n    for tup_string in test_tuple:\n        converted.append(map(int, tup_string[1:-1].split(',')))\n\n    return converted\n\ndef timeit_c():\n    ''''''\n    return [eval(t) for t in test_tuple]\n\ndef timeit_d():\n    ''''''\n    return map(eval, test_tuple)\n\ndef timeit_e():\n    ''''''\n    return map(lambda a: tuple(map(int, a[1:-1].split(','))), test_tuple)\n\nprint 'Timeit timeit_a: %s' % timeit.timeit(timeit_a)\nprint 'Timeit timeit_a_1: %s' % timeit.timeit(timeit_a_1)\nprint 'Timeit timeit_b: %s' % timeit.timeit(timeit_b)\nprint 'Timeit timeit_b_1: %s' % timeit.timeit(timeit_b_1)\nprint 'Timeit timeit_c: %s' % timeit.timeit(timeit_c)\nprint 'Timeit timeit_d: %s' % timeit.timeit(timeit_d)\nprint 'Timeit timeit_e: %s' % timeit.timeit(timeit_e)\n</code>\n</pre>\n", "senID": 10}, {"text": ["Results in:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n Timeit timeit_a: 15.8954099772\nTimeit timeit_a_1: 18.5484214589\nTimeit timeit_b: 15.3137666465\nTimeit timeit_b_1: 17.8405181116\nTimeit timeit_c: 91.9587832802\nTimeit timeit_d: 89.8858157489\nTimeit timeit_e: 20.1564312947\n</code>\n</pre>\n", "senID": 12}]