[{"text": ["Enforcing method order in a python module"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["What is the most pythonic way to deal with a module in which methods must be called in a certain order?  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As an example, I have an XML configuration that must be read before doing anything else because the configuration affects behavior.", "The parse_config() must be called first with the config file provided.", "Calling other supporting methods like query_data() won't work until parse_config() has been called.  "], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "parse_config()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "query_data()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "parse_config()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I first implemented this as a singleton to ensure that a filename for the config is passed at time of initialization, but noticing that modules are actually singletons, it's no longer a class, but just a regular module.  "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["What's the best way to enforce the parse_config being called first in a module?"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "parse_config", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit: Worth noting is that the function is actually parse_config(configfile)"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "parse_config(configfile)", "childNum": 0, "tag": "code", "childList": []}]}]