[{"text": ["Pearson Similarity Score, how can I optimise this further?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have an implemented of Pearson's Similarity score for comparing two dictionaries of values.", "More time is spent in this method than anywhere else (potentially many millions of calls), so this is clearly the critical method to optimise."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Even the slightest optimisation could have a big impact on my code, so I'm keen to explore even the smallest improvements."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here's what I have so far:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def simple_pearson(v1,v2):\n\n    si = [val for val in v1 if val in v2]\n\n    n = len(si)\n\n    if n==0: return 0.0\n\n    sum1 = 0.0\n    sum2 = 0.0\n    sum1_sq = 0.0\n    sum2_sq = 0.0\n    p_sum = 0.0\n\n    for v in si:\n        val_1 = v1[v]\n        val_2 = v2[v]\n        sum1+=val_1\n        sum2+=val_2\n        sum1_sq+=pow(val_1,2)\n        sum2_sq+=pow(val_2,2)\n        p_sum+=val_1*val_2\n\n    # Calculate Pearson score\n    num = p_sum-(sum1*sum2/n)\n    temp = (sum1_sq-pow(sum1,2)/n) * (sum2_sq-pow(sum2,2)/n)\n    if temp &lt; 0.0:\n        temp = -temp\n    den = sqrt(temp)\n    if den==0: return 1.0\n\n    r = num/den\n\n    return r\n</code>\n</pre>\n", "senID": 4}]