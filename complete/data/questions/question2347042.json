[{"text": ["How to run a python script without specifying the file extension (cross platform solution)?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Let's say that we have a Python script do.py and we want to be able to call it without extension, like do or ./do. "], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "do.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "do", "childNum": 0, "tag": "code", "childList": []}, {"text": "./do", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If we rename the file from do.py to do and assure we have a valid shebang line it will work for all platforms but Windows.", "On Windows there is no way of executing file without extension."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "do.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "do", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["On Windows, if we keep the original file extension we'll be able to call the script without the full name because the Python installer registers the .py extension as an executable one."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": ".py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It looks that we need to deliver the same script under two different names in order to be call it on Windows and non-Windows environments.", "I really do not like this and I'm looking for a solution without this redundancy."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Another common approach on this is to add a do.cmd wrapper batch file that is calling the original do.py file.", "This has at least one major issue: it does break the Ctrl+C / Ctrl+Break because there is no way to prevent cmd.exe from prompting you with Terminate batch job?", "(Y/N)message."], "childNum": 6, "tag": "p", "senID": 5, "childList": [{"text": "do.cmd", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "do.py", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "break the Ctrl+C / Ctrl+Break", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "cmd.exe", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Terminate batch job? (Y/N)message.", "tag": "a", "pos": -1, "childList": [{"text": "Terminate batch job? (Y/N)", "tag": "strong"}], "childNum": 1, "href": "http://stackoverflow.com/questions/1234571/how-can-i-suppress-the-terminate-batch-job-in-cmd-exe"}, {"text": "Terminate batch job? (Y/N)", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["If we are about to use a wrapper we need to be sure that:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "return the errorcode (errorlevel) returned by the original script", "tag": "none", "senID": 7}, {"text": "it will not change the environment", "tag": "none", "senID": 8}, {"text": "it will reuse the same console (no new windows)", "tag": "none", "senID": 9}, {"text": "doesn't interfere with STDOUT, STDIN or STDERR", "tag": "none", "senID": 10}, {"text": "be friendly with Ctrl-C (no prompts)", "tag": "none", "senID": 11}]}, {"text": ["I suppose the optimal solution is still to use a wrapper.", "Batch won't work, native executable would add a lot of complexity so probably a wrapper wrote in python itself would do."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]