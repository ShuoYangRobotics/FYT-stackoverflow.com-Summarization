[{"text": ["Flattening a shallow list in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["On a Django project, I was hoping to flatten a shallow list with a nested list comprehension, like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [image for image in menuitem.image_set.all() for menuitem in list_of_menuitems]\n</code>\n</pre>\n", "senID": 2}, {"text": ["But I get in trouble of the NameError variety there, because the name 'menuitem' is not defined.", "After googling and looking around on Stack Overflow, I got the desired results with a reduce statement:"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "NameError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "name 'menuitem' is not defined", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "reduce", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n reduce(list.__add__, map(lambda x: list(x), [mi.image_set.all() for mi in list_of_menuitems]))\n</code>\n</pre>\n", "senID": 4}, {"text": ["(Note, I need that list(x) call there because x is a Django QuerySet object."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "list(x)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "QuerySet", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["But the reduce method is fairly unreadable.", "So my question is:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "reduce", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Is there a simple way to flatten this list with a list comprehension, or failing that, what would you all consider to be the best way to flatten a shallow list like this, balancing performance and readability."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Update: Thanks to everyone who contributed to this question.", "Here is a summary of what I learned.", "I'm also making this a community wiki in case others want to add to or correct these observations."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["My original reduce statement is redundant and is better written this way:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; reduce(list.__add__, (list(mi.image_set.all()) for mi in list_of_menuitems))\n</code>\n</pre>\n", "senID": 10}, {"text": ["This is the correct syntax for a nested list comprehension (Brilliant summary dF!", "):"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "dF", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/3002/df"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [image for mi in list_of_menuitems for image in mi.image_set.all()]\n</code>\n</pre>\n", "senID": 12}, {"text": ["But neither of these methods are as efficient as using itertools.chain:"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "itertools.chain", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import chain\n&gt;&gt;&gt; list(chain(*[mi.image_set.all() for mi in h.get_image_menu()]))\n</code>\n</pre>\n", "senID": 14}, {"text": ["And as @cdleary notes, it's probably better style to avoid * operator magic by using chain.from_iterable like so:"], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "chain.from_iterable", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; chain = itertools.chain.from_iterable([[1,2],[3],[5,89],[],[6]])\n&gt;&gt;&gt; print(list(chain))\n&gt;&gt;&gt; [1, 2, 3, 5, 89, 6]\n</code>\n</pre>\n", "senID": 16}]