[{"text": ["Python multiprocessing: sharing a large read-only object between processes?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Do child processes spawned via multiprocessing share objects created earlier in the program?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "multiprocessing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html"}]}, {"text": ["I have the following setup:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n do_some_processing(filename):\n    for line in file(filename):\n        if line.split(',')[0] in big_lookup_object:\n            # something here\n\nif __name__ == '__main__':\n    big_lookup_object = marshal.load('file.bin')\n    pool = Pool(processes=4)\n    print pool.map(do_some_processing, glob.glob('*.data'))\n</code>\n</pre>\n", "senID": 3}, {"text": ["I'm loading some big object into memory, then creating a pool of workers that need to make use of that big object.", "The big object is accessed read-only, I don't need to pass modifications of it between processes."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["My question is: is the big object loaded into shared memory, as it would be if I spawned a process in unix/c, or does each process load its own copy of the big object? "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Update: to clarify further - big_lookup_object is a shared lookup object.", "I don't need to split that up and process it separately.", "I need to keep a single copy of it.", "The work that I need to split it is reading lots of other large files and looking up the items in those large files against the lookup object."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Further update: database is a fine solution, memcached might be a better solution, and file on disk (shelve or dbm) might be even better.", "In this question I was particularly interested in an in memory solution.", "For the final solution I'll be using hadoop, but I wanted to see if I can have a local in-memory version as well."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]