[{"text": ["Monkeypatching a method call in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["How do I put off attribute access in Python?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Let's assume we have:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def foo():\n        ...\n\n    class Bar:\n        ...\n\n    bar = Bar()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Is it possible to implement Bar so that any time bar is accessed, a value returned by the callback foo() would be provided?"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "bar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "foo()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["bar name already exists in the context.", "That's why it's access semantics should be preserved (it cannot be a callable, turning bar into a property of a class, using SomeClass.bar instead of bar also won't work).", "I need to keep everything as-is, but change the program so that bar would refer to on-the-fly generated data by foo()."], "childNum": 5, "tag": "p", "senID": 5, "childList": [{"text": "bar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "SomeClass.bar", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "bar", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "bar", "childNum": 0, "tag": "code", "childList": []}, {"text": "foo()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["UPD: Thanks all for your answers, from which it seems impossible to do this type of thing in Python.", "I'm gonna find a workaround."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "UPD", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]