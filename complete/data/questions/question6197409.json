[{"text": ["Ordered Sets Python 2.7.1"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a list that I'm attempting to remove duplicate items from.", "I'm using python 2.7.1 so I can simply use the set() function.", "However, this reorders my list.", "Which for my particular case is unacceptable. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "set()", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Below is a function I wrote; which does this.", "However I'm wondering if there's a better/faster way.", "Also any comments on it would be appreciated. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def ordered_set (_list) :\n\n        newlist = []\n        lastitem = None\n        for item in _list :\n\n            if item != lastitem :\n                newlist.append(item)\n                lastitem = item\n\n        return newlist\n</code>\n</pre>\n", "senID": 3}, {"text": ["The above function assumes that none of the items will be None, and that the items are in order (ie, ['a', 'a', 'a', 'b', 'b', 'c', 'd'])"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "None", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "['a', 'a', 'a', 'b', 'b', 'c', 'd']", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["The above function returns ['a', 'a', 'a', 'b', 'b', 'c', 'd'] as ['a', 'b', 'c', 'd']."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "['a', 'a', 'a', 'b', 'b', 'c', 'd']", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "['a', 'b', 'c', 'd']", "childNum": 0, "tag": "strong", "childList": []}]}]