[{"text": ["Pythonic way to implement a tokenizer"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm going to implement a tokenizer in Python and I was wondering if you could offer some style advice?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I've implemented a tokenizer before in C and in Java so I'm fine with the theory, I'd just like to ensure I'm following pythonic styles and best practices."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Listing Token Types:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In Java, for example, I would have a list of fields like so:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n public static final int TOKEN_INTEGER = 0\n</code>\n</pre>\n", "senID": 5}, {"text": ["But, obviously, there's no way (I think) to declare a constant variable in Python, so I could just replace this with normal variable declarations but that doesn't strike me as a great solution since the declarations could be altered."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Returning Tokens From The Tokenizer:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Is there a better alternative to just simply returning a list of tuples e.g. "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n [ (TOKEN_INTEGER, 17), (TOKEN_STRING, \"Sixteen\")]?\n</code>\n</pre>\n", "senID": 9}, {"text": ["Cheers,"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Pete"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]