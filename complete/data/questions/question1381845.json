[{"text": ["Writing Interpreters in Python.", "Is isinstance considered harmful?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm porting over the interpreter for a domain specific language I created from Scala to Python.", "In the process I tried to find a way that way pythonic to emulate the case class feature of Scala that I used extensively.", "In the end I resorted to using isinstance, but was left feeling that I was perhaps missing something."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Articles such as this one attacking the use of isinstance made me wonder whether there was a better way to solve my problem that doesn't involve some fundamental rewrite."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this one", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.canonical.org/~kragen/isinstance/"}]}, {"text": ["I've built up a number of Python classes that each represent a different type of abstract syntax tree node, such as For, While, Break, Return, Statement etc"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Scala allows for the handling of operator evaluation like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n case EOp(\"==\",EInt(l),EInt(r)) =&gt; EBool(l==r)\ncase EOp(\"==\",EBool(l),EBool(r)) =&gt; EBool(l==r)\n</code>\n</pre>\n", "senID": 5}, {"text": ["So far for the port to Python I've made extensive use of elif blocks and isinstance calls to achieve the same effect, much more verbose and un-pythonic.", "Is there a better way?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]