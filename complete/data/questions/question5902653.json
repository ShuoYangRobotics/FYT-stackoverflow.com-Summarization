[{"text": ["Optimize this python log-parsing code"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The runtime of this code on my laptop for a 4.2 GB input file is 48 seconds.", "The input file is tab-delimited, with each value appearing in quotes.", "Each record ends with a newline, e.g.", "'\"val1\"\\t\"val2\"\\t\"val3\"\\t...\"valn\"\\n'"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "'\"val1\"\\t\"val2\"\\t\"val3\"\\t...\"valn\"\\n'", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["I've tried using multiprocessing with 10 threads: One to queue up the lines, 8 to parse individual lines and fill an output queue, and one to reduce the output queue into the defaultdict shown below, but the code took 300 seconds to run, over 6 times longer than the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\ndef get_users(log):\n    users = defaultdict(int)\n    f = open(log)\n    # Read header line\n    h = f.readline().strip().replace('\"', '').split('\\t')\n    ix_profile = h.index('profile.type')\n    ix_user = h.index('profile.id')\n    # If either ix_* is the last field in h, it will include a newline. \n    # That's fine for now.\n    for (i, line) in enumerate(f): \n        if i % 1000000 == 0: print \"Line %d\" % i # progress notification\n\n        l = line.split('\\t')\n        if l[ix_profile] != '\"7\"': # \"7\" indicates a bad value\n            # use list slicing to remove quotes\n            users[l[ix_user][1:-1]] += 1 \n\n    f.close()\n    return users\n</code>\n</pre>\n", "senID": 3}, {"text": ["I've checked that I'm not I/O-bound by removing everything but the print statement from the for loop.", "That code ran in 9 seconds, which I'll consider a lower-bound for how fast this code can run. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I have a lot of these 5 GB files to process, so even a pretty small improvement in runtime (I know, I can remove the print!", ") will help.", "The machine I am running on has 4 cores, so I can't help but wonder if there's a way to get the multithread/multiprocess code to run faster than the code above."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["UPDATE:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I rewrote the multiprocessing code as follows:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n from multiprocessing import Pool, cpu_count\nfrom collections import defaultdict\n\ndef parse(line, ix_profile=10, ix_user=9):\n    \"\"\"ix_profile and ix_user predetermined; hard-coding for expedience.\"\"\"\n    l = line.split('\\t')\n    if l[ix_profile] != '\"7\"':\n        return l[ix_user][1:-1]\n\ndef get_users_mp():\n    f = open('20110201.txt')\n    h = f.readline() # remove header line\n    pool = Pool(processes=cpu_count())\n    result_iter = pool.imap_unordered(parse, f, 100)\n    users = defaultdict(int)\n    for r in result_iter:\n        if r is not None:\n            users[r] += 1\n    return users\n</code>\n</pre>\n", "senID": 8}, {"text": ["It runs in 26 seconds, a 1.85x speedup.", "Not bad, but with 4 cores, not as much as I had hoped for."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]