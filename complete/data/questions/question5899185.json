[{"text": ["Class with too many parameters..better design strategy?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am working with models of neurons.", "One class I am designing is a cell class which is a topological description of a neuron (several compartments connected together).", "It has many paramteres but they are all relevant, examples:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["num_axon_segments, apical bifibrications, somatic length, somatic diameter, apical length, branching randomness, branching length and so on and so on...there are about 15 parameters in total!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I can set all these to some default value but my class looks crazy with several lines for paramters..", "This kind of thing must happen occasionally to other people too..is there some obvious better way to design this or am I doing the right thing?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["UPDATE:\nAs some of you have asked I have attached my code for the class, as you can see this class has a huge number of parameters (>15) but they are all used and are necessary to define the topology of a cell.", "The problem essentially is that the poobject they physical object they create is very complex.", "I have attached an image representation of objects produced by this class.", "How would experienced programmers do this differently to avoid so many parameters in the definition?"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"src": "http://i.stack.imgur.com/XYXBw.png", "tag": "img", "senID": 5}, {"code": "<pre>\n<code>\n class LayerV(__Cell):\n\ndef __init__(self,somatic_dendrites=10,oblique_dendrites=10,\n            somatic_bifibs=3,apical_bifibs=10,oblique_bifibs=3,\n            L_sigma=0.0,apical_branch_prob=1.0,\n            somatic_branch_prob=1.0,oblique_branch_prob=1.0,\n            soma_L=30,soma_d=25,axon_segs=5,myelin_L=100,\n            apical_sec1_L=200,oblique_sec1_L=40,somadend_sec1_L=60,\n            ldecf=0.98):\n\n    import random\n    import math\n\n    #make main the regions:\n    axon=Axon(n_axon_seg=axon_segs)\n\n    soma=Soma(diam=soma_d,length=soma_L)\n\n    main_apical_dendrite=DendriticTree(bifibs=\n            apical_bifibs,first_sec_L=apical_sec1_L,\n            L_sigma=L_sigma,L_decrease_factor=ldecf,\n            first_sec_d=9,branch_prob=apical_branch_prob)\n\n    #make the somatic denrites\n\n    somatic_dends=self.dendrite_list(num_dends=somatic_dendrites,\n                   bifibs=somatic_bifibs,first_sec_L=somadend_sec1_L,\n                   first_sec_d=1.5,L_sigma=L_sigma,\n                   branch_prob=somatic_branch_prob,L_decrease_factor=ldecf)\n\n    #make oblique dendrites:\n\n    oblique_dends=self.dendrite_list(num_dends=oblique_dendrites,\n                   bifibs=oblique_bifibs,first_sec_L=oblique_sec1_L,\n                   first_sec_d=1.5,L_sigma=L_sigma,\n                   branch_prob=oblique_branch_prob,L_decrease_factor=ldecf)\n\n    #connect axon to soma:\n    axon_section=axon.get_connecting_section()\n    self.soma_body=soma.body\n    soma.connect(axon_section,region_end=1)\n\n    #connect apical dendrite to soma:\n    apical_dendrite_firstsec=main_apical_dendrite.get_connecting_section()\n    soma.connect(apical_dendrite_firstsec,region_end=0)\n\n    #connect oblique dendrites to apical first section:\n    for dendrite in oblique_dends:\n        apical_location=math.exp(-5*random.random()) #for now connecting randomly but need to do this on some linspace\n        apsec=dendrite.get_connecting_section()\n        apsec.connect(apical_dendrite_firstsec,apical_location,0)\n\n    #connect dendrites to soma:\n    for dend in somatic_dends:\n        dendsec=dend.get_connecting_section()\n        soma.connect(dendsec,region_end=random.random()) #for now connecting randomly but need to do this on some linspace\n\n    #assign public sections\n    self.axon_iseg=axon.iseg\n    self.axon_hill=axon.hill\n    self.axon_nodes=axon.nodes\n    self.axon_myelin=axon.myelin\n    self.axon_sections=[axon.hill]+[axon.iseg]+axon.nodes+axon.myelin\n    self.soma_sections=[soma.body]\n    self.apical_dendrites=main_apical_dendrite.all_sections+self.seclist(oblique_dends)\n    self.somatic_dendrites=self.seclist(somatic_dends)\n    self.dendrites=self.apical_dendrites+self.somatic_dendrites\n    self.all_sections=self.axon_sections+[self.soma_sections]+self.dendrites\n</code>\n</pre>\n", "senID": 6}]