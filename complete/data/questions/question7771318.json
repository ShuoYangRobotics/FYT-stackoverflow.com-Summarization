[{"text": ["The most Pythonic way of checking if a value in a dictionary is defined/has zero length"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Say I have a dictionary, and I want to check if a key is mapped to a nonempty value.", "One way of doing this would be the len function:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n mydict = {\"key\" : \"value\", \"emptykey\" : \"\"}\nprint \"True\" if len(mydict[\"key\"]) &gt; 0 else \"False\"  # prints true\nprint \"True\" if len(mydict[\"emptykey\"]) &gt; 0 else \"False\"  # prints false\n</code>\n</pre>\n", "senID": 2}, {"text": ["However, one can rely on the semantics of Python and how if an object is defined it evaluates to true and leave out the len call:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n mydict = {\"key\" : \"value\", \"emptykey\" : \"\"}\nprint \"True\" if mydict[\"key\"] else \"False\"  # prints true\nprint \"True\" if mydict[\"emptykey\"] else \"False\"  # prints false\n</code>\n</pre>\n", "senID": 4}, {"text": ["However, I'm not sure which is more Pythonic.", "The first feels \"explicit is better than implicit\", however the second feels \"simple is better than complex\"."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I also wonder if the leaving out the len call could bite me as the dict I'm working with doesn't necessarily contain strings, but could contain other len-able types (lists, sets, etc).", "OTOH, in the former (with the len call) if None gets stored as a value the code will blow up, whereas the non-len version will work as expected (will eval to false)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Which version is safer and more Pythonic?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Edit: clarifying assumptions: I know the key is in the dictionary, and I know values will be len-able.", "I also cannot avoid having zero-length values enter the dictionary."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "know", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Edit #2: It seems like people are missing the point of my question.", "I'm not trying to determine the most Pythonic/safest way of checking if a key is present in a dictionary, I'm trying to check if a value has zero length or not"], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "a value has zero length or not", "childNum": 1, "tag": "strong", "pos": 1, "childList": [{"text": "a value has zero length or not", "tag": "em"}]}, {"text": "a value has zero length or not", "childNum": 0, "tag": "em", "childList": []}]}]