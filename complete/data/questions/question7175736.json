[{"text": ["Tuples partial match"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a tuple of tuples and a tuple.", "I'm interested to know which elements of the first tuple match the second tuple (if any), considering partial matches too."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This is a filter function to demonstrate what I mean."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def f(repo):\n    pattern = (None, None, '1.3')\n    for idx, item in enumerate(pattern):\n        if item != None and item != repo[idx]:\n            return False\n    return True\n\n&gt;&gt;&gt; repo = (('framework', 'django', '1.3'), ('cms', 'fein', '1.3'), ('cms', 'django-cms', '2.2'))\n&gt;&gt;&gt; filter(f, repo)\n(('framework', 'django', '1.3'), ('cms', 'fein', '1.3'))\n</code>\n</pre>\n", "senID": 3}, {"text": ["The filter is useless in this form because the pattern can't be provided externally as an argument (I want to use the same function to check different inputs).", "Is there a way to fix this?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["And, what could be another algorithm to embrace for a better approach to the original problem?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]