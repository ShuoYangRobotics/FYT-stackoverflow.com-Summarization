[{"text": ["How to get the content of a Html page in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have downloaded the web page into an html file.", "I am wondering what's the simplest way to get the content of that page.", "By content, I mean I need the strings that a browser would display."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To be clear:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Input:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &lt;html&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;\n       &lt;body&gt;&lt;p id=\"firstpara\" align=\"center\"&gt;This is paragraph &lt;b&gt;one&lt;/b&gt;.\n       &lt;p id=\"secondpara\" align=\"blah\"&gt;This is paragraph &lt;b&gt;two&lt;/b&gt;.\n       &lt;/html&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n Page title This is paragraph one. This is paragraph two.\n</code>\n</pre>\n", "senID": 6}, {"text": ["putting together:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n from BeautifulSoup import BeautifulSoup\nimport re\n\ndef removeHtmlTags(page):\n    p = re.compile(r'''&lt;(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\"&gt;])+&gt;''')\n    return p.sub('', page)\n\ndef removeHtmlTags2(page):\n    soup = BeautifulSoup(page)\n    return ''.join(soup.findAll(text=True))\n</code>\n</pre>\n", "senID": 8}, {"tag": "ul", "num": 5, "lis": [{"text": ["Python HTML removal"], "childNum": 0, "tag": "a", "senID": 9, "childList": []}, {"text": ["Extracting text from HTML file using Python"], "childNum": 0, "tag": "a", "senID": 10, "childList": []}, {"text": ["What is a light python library that can eliminate HTML tags?", "(and only text)"], "childNum": 0, "tag": "a", "senID": 11, "childList": []}, {"text": ["Remove HTML tags in AppEngine Python Env (equivalent to Ruby\u2019s Sanitize)"], "childNum": 0, "tag": "a", "senID": 12, "childList": []}, {"text": ["RegEx match open tags except XHTML self-contained tags"], "childNum": 0, "tag": "a", "senID": 13, "childList": []}]}]