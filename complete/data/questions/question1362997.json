[{"text": ["Encapsulation severely hurts performance?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I know this question is kind of stupid, maybe it's a just a part of writing code but it seems defining simple functions can really hurt performance severely...", "I've tried this simple test:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def make_legal_foo_string(x):\n    return \"This is a foo string: \" + str(x)\n\ndef sum_up_to(x):\n    return x*(x+1)/2\n\ndef foo(x):\n    return [make_legal_foo_string(x),sum_up_to(x),x+1]\n\ndef bar(x):\n    return ''.join([str(foo(x)),\" -- bar !! \"])\n</code>\n</pre>\n", "senID": 2}, {"text": ["it's very good style and makes code clear but it can be three times as slow as just writing it literally.", "It's inescapable for functions that can have side effects but it's actually almost trivial to define some functions that just should literally be replaced with lines of code every time they appear, translate the source code into that and only then compile.", "Same I think for magic numbers, it doesn't take a lot of time to read from memory but if they're not supposed to be changed then why not just replace every instance of 'magic' with a literal before the code compiles?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]