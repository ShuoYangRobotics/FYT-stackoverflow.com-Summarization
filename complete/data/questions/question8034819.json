[{"text": ["In line Conditional Expression or Function - Pythonic?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a situation where I would like to conditionally slice a string from the\nreported position of an '@' symbol; the condition being: slice the string if\nthe '@' is there, else leave it untouched.", "I thought up two ways, one using a \nfunction, the other using an inline conditional expression.", "Which method is the\nmost Pythonic?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Using a function"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def slice_from_at(inp):\n...     res = inp.find('@')\n...     if res == -1:\n...         return None\n...     else:\n...         return res     \n&gt;&gt;&gt; c = 'agent_address@agent_address'\n&gt;&gt;&gt; c[:slice_from_at(c)]\n... 'agent_address'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Using an inline conditional expression"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; c = 'agent_address@agent_address'\n&gt;&gt;&gt; c[:None if c.find('@') == -1 else c.find('@')]\n... 'agent_address'\n</code>\n</pre>\n", "senID": 5}, {"text": ["Although using the inline conditional expression is more terse and, some may \nargue more economical - is the function method is more Pythonic because it more \nreadable?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]