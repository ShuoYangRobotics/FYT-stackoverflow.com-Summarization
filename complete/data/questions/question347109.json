[{"text": ["How do I concisely implement multiple similar unit tests in the Python unittest framework?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm implementing unit tests for a family of functions that all share a number of invariants.", "For example, calling the function with two matrices produce a matrix of known shape."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I would like to write unit tests to test the entire family of functions for this property, without having to write an individual test case for each function (particularly since more functions might be added later). "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["One way to do this would be to iterate over a list of these functions:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import unittest\nimport numpy\n\nfrom somewhere import the_functions\nfrom somewhere.else import TheClass\n\nclass Test_the_functions(unittest.TestCase):\n  def setUp(self):\n    self.matrix1 = numpy.ones((5,10))\n    self.matrix2 = numpy.identity(5)\n\n  def testOutputShape(unittest.TestCase):\n     \"\"\"Output of functions be of a certain shape\"\"\"\n     for function in all_functions:\n       output = function(self.matrix1, self.matrix2)\n       fail_message = \"%s produces output of the wrong shape\" % str(function)\n       self.assertEqual(self.matrix1.shape, output.shape, fail_message)\n\nif __name__ == \"__main__\":\n  unittest.main()\n</code>\n</pre>\n", "senID": 4}, {"text": ["I got the idea for this from Dive Into Python.", "There, it's not a list of functions being tested but a list of known input-output pairs.", "The problem with this approach is that if any element of the list fails the test, the later elements don't get tested."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Dive Into Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.net/unit_testing/romantest.html"}]}, {"text": ["I looked at subclassing unittest.TestCase and somehow providing the specific function to test as an argument, but as far as I can tell that prevents us from using unittest.main() because there would be no way to pass the argument to the testcase."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I also looked at dynamically attaching \"testSomething\" functions to the testcase, by using setattr with a lamdba, but the testcase did not recognize them."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["How can I rewrite this so it remains trivial to expand the list of tests, while still ensuring every test is run?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]