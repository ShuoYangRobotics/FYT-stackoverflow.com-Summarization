[{"text": ["Search backward through a string using a regex (in Python)?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Context\nI'm parsing some code and want to match the doxygen comments before a function.", "However, because I want to match for a specific function name, getting only the immediately previous comment is giving me problems."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Context", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["Current Approach "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Current Approach", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import re  \nfunction_re = re.compile(\n    r\"\\/\\*\\*(.+)\\*\\/\\s*void\\s+(\\w+)\\s*::\\s*function_name\\s*\\(\\s*\\)\\s*\")  \nfunction_match = function_re.search(file_string)\nif function_match:  \n    function_doc_str = update_match.group(2)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Problem with Current Approach\nThe current approach matches doxygen from earlier functions, giving me a result that is the wrong doxygen comment."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "Problem with Current Approach", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["Question\nIs there a way to search backward through a string using the Python Regex library?", "It seems like my problem is that the more restrictive (less frequently occurring part) is the function signature, \"void function()\"    "], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "Question", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["Possible better question\nIs there a better (easier) approach that I'm missing?"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "Possible better question", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}]