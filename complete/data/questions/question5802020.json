[{"text": ["Overloading + to support tuples"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'd like to be able to write something like this in python:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a = (1, 2)\nb = (3, 4)\nc = a + b # c would be (4, 6)\nd = 3 * b # d would be (9, 12)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I realize that you can overload operators to work with custom classes, but is there a way to overload operators to work with pairs?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Of course, such solutions as"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n c = tuple([x+y for x, y in zip(a, b)])\n</code>\n</pre>\n", "senID": 5}, {"text": ["do work, but, let aside performance, they aren't quite as pretty as overloading the + operator. "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "+", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["One can of course define add and mul functions such as "], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "add", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "mul", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def add((x1, y1), (x2, y2)):\n    return (x1 + x2, y1 + y2)\n\ndef mul(a, (x, y)):\n    return (a * x, a * y)\n</code>\n</pre>\n", "senID": 8}, {"text": ["but still being able to write q * b + r instead of add(times(q, b), r) would be nicer."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "q * b + r", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "add(times(q, b), r)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Ideas?"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["EDIT: On a side note, I realize that since + currently maps to tuple concatenation, it might be unwise to redefine it, even if it's possible.", "The question still holds for - for example =)"], "childNum": 3, "tag": "p", "senID": 11, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "-", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]