[{"text": ["Idiomatic Python has_one"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I just invented a stupid little helper function:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def has_one(seq, predicate=bool):\n    \"\"\"Return whether there is exactly one item in `seq` that matches\n    `predicate`, with a minimum of evaluation (short-circuit).\n    \"\"\"\n    iterator = (item for item in seq if predicate(item))\n    try:\n        iterator.next()\n    except StopIteration: # No items match predicate.\n        return False\n    try:\n        iterator.next()\n    except StopIteration: # Exactly one item matches predicate.\n        return True\n    return False # More than one item matches the predicate.\n</code>\n</pre>\n", "senID": 2}, {"text": ["Because the most readable/idiomatic inline thing I could come up with was:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [predicate(item) for item in seq].count(True) == 1\n</code>\n</pre>\n", "senID": 4}, {"text": ["... which is fine in my case because I know seq is small, but it just feels weird.", "Is there an idiom I\u2019m forgetting here that prevents me from having to break out this helper?"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Is there an idiom I\u2019m forgetting here that prevents me from having to break out this helper?", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Clarification"], "childNum": 0, "tag": "h2", "senID": 6, "childList": []}, {"text": ["Looking back on it, this was kind of a crappily posed question, though we got some excellent answers!", "I was looking for either:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "An obvious and readable inline idiom or stdlib function, eager evaluation being acceptable in this case.", "tag": "none", "senID": 8}, {"text": "A more obvious and readable helper function -- since it's breaking out a whole other function, only the minimum amount of evaluation seems acceptable.", "tag": "none", "senID": 9}]}, {"text": ["@Stephan202 came up with a really cool idiom for the helper function and @Martin v. L\u00f6wis came up with a more simple inline idiom under the assumption that the predicate returns a bool.", "Thanks @ everybody for your help!"], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "@Stephan202", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1583364/idiomatic-python-hasone/1583465#1583465"}, {"text": "@Martin v. L\u00f6wis", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1583364/idiomatic-python-hasone/1583445#1583445"}]}]