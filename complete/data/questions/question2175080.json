[{"text": ["sscanf in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm looking for an equivalent to sscanf() in Python.", "I want to parse /proc/net/* files, in C I could do something like this:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "sscanf()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "/proc/net/*", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n int matches = sscanf(\n        buffer,\n        \"%*d: %64[0-9A-Fa-f]:%X %64[0-9A-Fa-f]:%X %*X %*X:%*X %*X:%*X %*X %*d %*d %ld %*512s\\n\",\n        local_addr, &amp;local_port, rem_addr, &amp;rem_port, &amp;inode);\n</code>\n</pre>\n", "senID": 2}, {"text": ["I thought at first to use str.split, however it doesn't split on the given characters, but the sep string as a whole:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "str.split", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sep", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lines = open(\"/proc/net/dev\").readlines()\n&gt;&gt;&gt; for l in lines[2:]:\n&gt;&gt;&gt;     cols = l.split(string.whitespace + \":\")\n&gt;&gt;&gt;     print len(cols)\n1\n</code>\n</pre>\n", "senID": 4}, {"text": ["Which should be returning 17, as explained above."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Is there a Python equivalent to sscanf (not RE), or a string splitting function in the standard library that splits on any of a range of characters that I'm not aware of?"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "sscanf", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]