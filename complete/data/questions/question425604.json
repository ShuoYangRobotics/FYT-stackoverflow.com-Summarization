[{"text": ["Best Way To Determine if a Sequence is in another sequence in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This is a generalization of the \"string contains substring\" problem to (more) arbitrary types."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Given an sequence (such as a list or tuple), what's the best way of determining whether another sequence is inside it?", "As a bonus, it should return the index of the element where the subsequence starts:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Example usage (Sequence in Sequence):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; seq_in_seq([5,6],  [4,'a',3,5,6])\n3\n&gt;&gt;&gt; seq_in_seq([5,7],  [4,'a',3,5,6])\n-1 # or None, or whatever\n</code>\n</pre>\n", "senID": 4}, {"text": ["So far, I just rely on brute force and it seems slow, ugly, and clumsy."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]