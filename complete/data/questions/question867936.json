[{"text": ["Python: Elegant way of dual/multiple iteration over the same list"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've written a bit of code like the following to compare items with other items further on in a list.", "Is there a more elegant pattern for this sort of dual iteration?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n jump_item_iter = (j for j in items if some_cond)\ntry:\n    jump_item = jump_item_iter.next()\nexcept StopIteration:\n    return\nfor item in items:\n    if jump_item is item:\n        try:\n            jump_item = jump_iter.next()\n        except StopIteration:\n            return\n    # do lots of stuff with item and jump_item\n</code>\n</pre>\n", "senID": 2}, {"text": ["I don't think the \"except StopIteration\" is very elegant"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "except StopIteration", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["To hopefully make it clearer, I want to visit each item in a list and pair it with the next item further on in the list (jump_item) which satisfies some_cond."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]