[{"text": ["Merge sorted lists in python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a bunch of sorted lists of objects, and a comparison function"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Obj :\n    def __init__(p) :\n        self.points = p\ndef cmp(a, b) :\n    return a.points &lt; b.points\n\na = [Obj(1), Obj(3), Obj(8), ...]\nb = [Obj(1), Obj(2), Obj(3), ...]\nc = [Obj(100), Obj(300), Obj(800), ...]\n\nresult = magic(a, b, c)\nassert result == [Obj(1), Obj(1), Obj(2), Obj(3), Obj(3), Obj(8), ...]\n</code>\n</pre>\n", "senID": 2}, {"text": ["what does magic look like?", "My current implementation is "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "magic", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def magic(*args) :\n    r = []\n    for a in args : r += a\n    return sorted(r, cmp)\n</code>\n</pre>\n", "senID": 4}, {"text": ["but that is quite inefficient.", "Better answers?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]