[{"text": ["load parameters from a file in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am writing a Python class to model a process and I want to initialized the parameters from a file, say 'input.dat'.", "The format of the input file looks like this."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "'input.dat'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["'input.dat' file:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "'input.dat'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre class=\"lang-none prettyprint-override\">\n<code>\n Z0: 0 0\nk: 0.1\ng: 1\nDelta: 20\nt_end: 300\n</code>\n</pre>\n", "senID": 3}, {"text": ["The code I wrote is the following.", "It works but appears redundant and inflexible.", "Is there a better way to do the job?", "Such as a loop to do readline() and then match the keyword?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def load(self,filename=\"input.dat\"):\n    FILE = open(filename)\n    s = FILE.readline().split()\n    if len(s) is 3:\n        self.z0 = [float(s[1]),float(s[2])] # initial state\n    s = FILE.readline().split()\n    if len(s) is 2:\n        self.k = float(s[1])    # kappa\n    s = FILE.readline().split()\n    if len(s) is 2:\n        self.g = float(s[1])\n    s = FILE.readline().split()\n    if len(s) is 2:\n        self.D = float(s[1])    #  Delta\n    s = FILE.readline().split()\n    if len(s) is 2:\n        self.T = float(s[1])    # end time\n</code>\n</pre>\n", "senID": 5}]