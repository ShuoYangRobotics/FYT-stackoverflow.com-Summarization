[{"text": ["list comprehension without [ ], Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Here is the thing, join a list:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ''.join([ str(_) for _ in xrange(10) ])\n'0123456789'\n</code>\n</pre>\n", "senID": 2}, {"text": ["join must take an iteratable."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Apparently, join's argument is [ str(_) for _ in xrange(10) ], and it's a list-comprehension."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[ str(_) for _ in xrange(10) ]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Look at this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt;''.join( str(_) for _ in xrange(10) )\n'0123456789'\n</code>\n</pre>\n", "senID": 6}, {"text": ["Now, join's argument is just str(_) for _ in xrange(10), no [], but the result is the same."], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str(_) for _ in xrange(10)", "childNum": 0, "tag": "code", "childList": []}, {"text": "[]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Why?", "Does str(_) for _ in xrange(10)also produce a list or an iteratable?"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "str(_) for _ in xrange(10)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]