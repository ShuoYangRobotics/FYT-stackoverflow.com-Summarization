[{"text": ["What PEP 8 guidelines do you ignore, and which ones do you stick to?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The title says most of it really :)\nOver the years, the more Python I write, the more I find myself agreeing with most of the guidelines, some though I consistently and intentionally break for my own reasons."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'd be curious to know what in PEP 8 (or other PEPs too maybe) people religiously stick to and why, and what people find inconvenient or inadequate."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In my case (and at work in general), there's only a handful of things we deviate from:\nUnderscore separated lowercase names, I can see the point of it, as it will unfailingly be consistent, but we tend to use lowerCamelCase, even if it will occasionally introduce some inconsistencies (such as partially or mis-capitalized acronyms and following words, which are often down to spur-of-the-moment calls).", "Mostly because the near totality of the APIs we routinely use use camelCase (some upper, some lower), and because for some reason I find it easier to read, and tend to reserve underscores as separation tokens or prescribed mangling/obscuring."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I still can't get myself to space things out the way the pep prescribes inside objects.", "new and init I tend to leave right under the class with no blank lines as I always want to read them right there with the class name and args, methods that contribute to the same scope of functionality in the class (say init, get and set of the same attrib or set of attribs) I only singe space apart, and I like three spaces between classes, and two between methods I wouldn't mentally aggregate in the map of that object."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["This is, again, purely for the visual impact and readability of the code.", "I find that very compact contents inside flow control and this kind of spacing between methods and objects consistently leads my eye exactly where I want it to go on re-readings months after the code had been parked.", "It also responds well to folding in my editors of choice."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Some things instead I stick to, that drive me nuts when I read otherwise written, is tabs instead of spaces (especially when some in-app editors we use don't really have tab replacement functionalities, contributing considerably to pollution in the code base at prototyping stage)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Order of things such as imports, and what imports, globals etc.", "It really throws me off on files that have large amounts of imports when those are mixed up or out of order."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Whitespaces in statements, especially when people use tabs AND try to align assignment ops across lines with different length in var names (and there seems to be no way to persuade those who do it that an excel looking piece of code is NOT neater ;) )."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["And spacing within a control block, particularly when I see apparently random spacing within the same flow control block, and then similar amounts of spacing used within the object for methods.", "I'm compelled to edit those before I can even start reading the damn thing."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["So, those are mine, and the reasoning behind my \"violations\" of the PEP (some shared, some frowned upon by colleagues).", "I'd be very curious to read what other Pythonistas do and don't do in those regards."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]