[{"text": ["Non biased return a list of n random positive numbers (>=0) so that their sum == total_sum"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm either looking for an algorithm or a suggestion to improve my code to generate a list of random numbers that their sum equals some arbitrary number.", "With my code below, it'll always be biased as the first numbers will tend to be higher. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Is there a way to have the number selection more efficient?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n'''\n  Generate a list of 'numbs' positive random numbers whose sum = 'limit_sum'\n'''\n\nimport random\n\n\ndef gen_list(numbs, limit_sum):\n  my_sum = []\n  for index in range(0, numbs):\n    if index == numbs - 1:\n      my_sum.append(limit_sum - sum(my_sum))\n    else:\n      my_sum.append(random.uniform(0, limit_sum - sum(my_sum)))\n\n  return my_sum\n\n#test\nimport pprint\npprint.pprint(gen_list(5, 20))\npprint.pprint(gen_list(10, 200))\npprint.pprint(gen_list(0, 30))\npprint.pprint(gen_list(1, 10))\n</code>\n</pre>\n", "senID": 3}, {"text": ["THE OUTPUT"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "THE OUTPUT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ## output\n\n[0.10845093828525609,\n 16.324799712999706,\n 0.08200162072303821,\n 3.4534885160590041,\n 0.031259211932997744]\n\n[133.19609626532952,\n 47.464880208741029,\n 8.556082341110228,\n 5.7817325913462323,\n 4.6342577008233716,\n 0.22532341156764768,\n 0.0027495225618908918,\n 0.064738336208217895,\n 0.028888697891734455,\n 0.045250924420116689]\n\n[]\n\n[10]\n</code>\n</pre>\n", "senID": 5}]