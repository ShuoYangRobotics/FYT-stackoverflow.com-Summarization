[{"text": ["Stopping a Reduce() operation mid way.", "Functional way of doing partial running sum"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have been doing some functional programming and had a question.", "Perhaps I might be missing something but is there any way to stop a \"reduce()\" function midway?", "Lets say when I reach a certain condition?", "The idea somehow seems anti functional.", "I haven't seen any such option in python or F#, "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As an example, lets say I have a list such as [1,2,3,4,5].", "I want to sum the elements in this list until the sum is not greater than some number (lets say 8), and return/mark/store/identify somehow, the number of elements I have actually added."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If we looked at python for example for I might try something like"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n reduce(lambda a,b : a if a + b &gt; 8 else a + b, input)\n</code>\n</pre>\n", "senID": 4}, {"text": ["This gives me the right answer 6, but how do I find that I had added 3 elements to get here.", "There is no counter as such.", "I can't do assignments inside lambdas.", "I think F# has the same situation."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I know I can use a for loop or use a function that can store state etc.", "But what would be the functional way of doing/thinking about this.", "Reduce() wants to run until the end, but somewhere along this line of processing, we either want to stop it (because we don't care about processing the rest of the elements) or at least make a note of the place where we stopped caring."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]