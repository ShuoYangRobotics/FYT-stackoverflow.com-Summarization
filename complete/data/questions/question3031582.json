[{"text": ["Python: slow read & write for millions of small files"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am building directory tree which has tons of subdirectories and files.", "There are about 10 million files spread around a hundred thousand directories.", "Each file is under 32 subdirectories."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I have a python script that builds this filesystem and reads &amp; writes those files.", "The problem is that when I reach more than a million files, the read and write methods become extremely slow."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here's the function I have that reads the contents of a file (the file contains an integer string), adds a certain number to it, then writes it back to the original file."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def addInFile(path, scoreToAdd):\n    num = scoreToAdd\n    try:\n        shutil.copyfile(path, '/tmp/tmp.txt')\n        fp = open('/tmp/tmp.txt', 'r')\n        num += int(fp.readlines()[0])\n        fp.close()\n    except:\n        pass\n    fp = open('/tmp/tmp.txt', 'w')\n    fp.write(str(num))\n    fp.close()\n    shutil.copyfile('/tmp/tmp.txt', path)\n</code>\n</pre>\n", "senID": 4}, {"tag": "ul", "num": 4, "lis": [{"text": "Relational databases seem too slow for accessing these data, so I opted for a filesystem approach.", "tag": "none", "senID": 5}, {"text": "I previously tried performing linux console commands for these but it was way slower. ", "tag": "none", "senID": 6}, {"text": "I copy the file to a temporary file first then access/modify it then copy it back because i found this was faster than directly accessing the file.", "tag": "none", "senID": 7}, {"text": "Putting all the files into 1 directory (in reiserfs format) caused too much slowdown when accessing the files.", "tag": "none", "senID": 8}]}, {"text": ["I think the cause of the slowdown is because there're tons of files.", "Performing this function 1000 times clocked at less than a second.. but now it's reaching 1 minute."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["How do you suggest I fix this?", "Do I change my directory tree structure? "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["All I need is to quickly access each file in this very huge pool of files*"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "All I need is to quickly access each file in this very huge pool of files*", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]