[{"text": ["Reclassing an instance in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a class that is provided to me by an external library.", "I have created a subclass of this class.", "I also have an instance of the original class."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I now want to turn this instance into an instance of my subclass without changing any properties that the instance already has (except for those that my subclass overrides anyway)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The following solution seems to work."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n # This class comes from an external library. I don't (want) to control\n# it, and I want to be open to changes that get made to the class\n# by the library provider.\nclass Programmer(object):\n    def __init__(self,name):\n        self._name = name\n\n    def greet(self):\n        print \"Hi, my name is %s.\" % self._name\n\n    def hard_work(self):\n        print \"The garbage collector will take care of everything.\"\n\n# This is my subclass.\nclass C_Programmer(Programmer):\n    def __init__(self, *args, **kwargs):\n        super(C_Programmer,self).__init__(*args, **kwargs)\n        self.learn_C()\n\n    def learn_C(self):\n        self._knowledge = [\"malloc\",\"free\",\"pointer arithmetic\",\"curly braces\"]\n\n    def hard_work(self):\n        print \"I'll have to remember \" + \" and \".join(self._knowledge) + \".\"\n\n    # The questionable thing: Reclassing a programmer.\n    @classmethod\n    def teach_C(cls, programmer):\n        programmer.__class__ = cls # &lt;-- do I really want to do this?\n        programmer.learn_C()\n\n\njoel = C_Programmer(\"Joel\")\njoel.greet()\njoel.hard_work()\n#&gt;Hi, my name is Joel.\n#&gt;I'll have to remember malloc and free and pointer arithmetic and curly braces.\n\njeff = Programmer(\"Jeff\")\n\n# We (or someone else) makes changes to the instance. The reclassing shouldn't\n# overwrite these.\njeff._name = \"Jeff A\" \n\njeff.greet()\njeff.hard_work()\n#&gt;Hi, my name is Jeff A.\n#&gt;The garbage collector will take care of everything.\n\n# Let magic happen.\nC_Programmer.teach_C(jeff)\n\njeff.greet()\njeff.hard_work()\n#&gt;Hi, my name is Jeff A.\n#&gt;I'll have to remember malloc and free and pointer arithmetic and curly braces.\n</code>\n</pre>\n", "senID": 4}, {"text": ["However, I'm not convinced that this solution doesn't contain any caveats I haven't thought of (sorry for the triple negation), especially because reassigning the magical __class__ just doesn't feel right.", "Even if this works, I can't help the feeling there should be a more pythonic way of doing this."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "__class__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Is there?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "hr", "senID": 7}, {"text": ["Edit: Thanks everyone for your answers.", "Here is what I get from them:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Although the idea of reclassing an instance by assigning to __class__ is not a widely used idiom, most answers (4 out of 6 at the time of writing) consider it a valid approach.", "One anwswer (by ojrac) says that it's \"pretty weird at first glance,\" with which I agree (it was the reason for asking the question).", "Only one answer (by Jason Baker; with two positive comments &amp; votes) actively discouraged me from doing this, however doing so based on the example use case moreso than on the technique in general."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "__class__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["None of the answers, whether positive or not, finds an actual technical problem in this method.", "A small exception is jls who mentions to beware of old-style classes, which is likely true, and C extensions.", "I suppose that new-style-class-aware C extensions should be as fine with this method as Python itself (presuming the latter is true), although if you disagree, keep the answers coming."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]}, {"text": ["As to the question of how pythonic this is, there were a few positive answers, but no real reasons given.", "Looking at the Zen (import this), I guess the most important rule in this case is \"Explicit is better than implicit.", "\" I'm not sure, though, whether that rule speaks for or against reclassing this way."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "import this", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["Using {has,get,set}attr seems more explicit, as we are explicitly making our changes to the object instead of using magic."], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "{has,get,set}attr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Using __class__ = newclass seems more explicit because we explicitly say \"This is now an object of class 'newclass,' expect a different behaviour\" instead of silently changing attributes but leaving users of the object believing they are dealing with a regular object of the old class."], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "__class__ = newclass", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]}, {"text": ["Summing up: From a technical standpoint, the method seems okay; the pythonicity question remains unanswered with a bias towards \"yes.", "\" "], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["I have accepted Martin Geisler's answer, because the Mercurial plugin example is a quite strong one (and also because it answered a question I even hadn't asked myself yet).", "However, if there are any arguments on the pythonicity question, I'd still like to hear them.", "Thanks all so far."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["P.S.", "The actual use case is a UI data control object that needs to grow additional functionality at runtime.", "However, the question is meant to be very general."], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "at runtime", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}]