[{"text": ["Most pythonic way to extend a potentially incomplete list"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["What I'm looking for is the best way to say, 'If this list is too short, lengthen it to 9 elements and add 'Choice 4', 'Choice 5', etc, as the additional elements.", "Also, replace any 'None' elements with 'Choice x'.", "' It is ok to replace \"\" and 0 too."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["An example transformation would be"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['a','b',None,'c']\n</code>\n</pre>\n", "senID": 3}, {"text": ["to"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n ['a','b','Choice 3','c','Choice 5','Choice 6','Choice 7','Choice 8','Choice 9']\n</code>\n</pre>\n", "senID": 5}, {"text": ["My initial code abused try/except and had an off-by-one error I didn't notice; thanks to joeforker and everyone who pointed it out.", "Based on the comments I tried two short solutions that test equally well:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def extendChoices(cList):\n  for i in range(0,9):\n    try:\n      if cList[i] is None:\n        cList[i] = \"Choice %d\"%(i+1)\n    except IndexError:\n      cList.append(\"Choice %d\"%(i+1)\n</code>\n</pre>\n", "senID": 7}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n def extendChoices(cList):\n  # Fill in any blank entries\n  for i, v in enumerate(cList):\n    cList[i] = v or \"Choice %s\" % (i+1)\n\n  # Extend the list to 9 choices  \n  for j in range(len(cList)+1, 10):\n    cList.append(\"Choice %s\" % (j))\n</code>\n</pre>\n", "senID": 9}, {"text": ["I think #2 wins as being more pythonic, so it's the one I'll use.", "It's easy to understand and uses common constructs.", "Splitting the steps is logical and would make it easier for someone to understand at a glance."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]