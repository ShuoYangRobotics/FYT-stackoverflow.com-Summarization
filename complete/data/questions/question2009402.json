[{"text": ["Read/Write Python Closures"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Closures are an incredibly useful language feature.", "They let us do clever things that would otherwise take a lot of code, and often enable us to write code that is more elegant and more clear.", "In Python 2.x, closures variable names cannot be rebound; that is, a function defined inside another lexical scope cannot do something like some_var = 'changed!", "' for variables outside of its local scope.", "Can someone explain why that is?", "There have been situations in which I would like to create a closure that rebinds variables in the outer scope, but it wasn't possible.", "I realize that in almost all cases (if not all of them), this behavior can be achieved with classes, but it is often not as clean or as elegant.", "Why can't I do it with a closure? "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "some_var = 'changed!'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Here is an example of a rebinding closure: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def counter():\n    count = 0\n    def c():\n        count += 1\n        return count\n    return c\n</code>\n</pre>\n", "senID": 3}, {"text": ["This is the current behavior when you call it:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; c()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 4, in c\nUnboundLocalError: local variable 'count' referenced before assignment\n</code>\n</pre>\n", "senID": 5}, {"text": ["What I'd like it to do instead is this: "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; c()\n1\n&gt;&gt;&gt; c()\n2\n&gt;&gt;&gt; c()\n3\n</code>\n</pre>\n", "senID": 7}]