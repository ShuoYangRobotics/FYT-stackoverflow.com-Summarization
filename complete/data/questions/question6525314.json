[{"text": ["Optimized searching in Python against a list"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Problem:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Given a list of n objects (n's Order of magnitude is 10^5), search for a given item very fast with a minimum of spacetime tradeoff.", "Current, unoptimized &amp; prototype-y solution takes too long and consumes too much RAM (the optimization is not premature, that is). "], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "n", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "n", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "takes too long and consumes too much RAM", "childNum": 0, "tag": "em", "childList": []}, {"text": "not", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["There is not a primary key to sort against in the object, but it can be sorted to a certain degree, such as the following example, where the first column is sorted."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n o1 =&gt; f, g, h\no2 =&gt; f, g, i\no3 =&gt; f, j, k\no4 =&gt; k, j, m\n</code>\n</pre>\n", "senID": 4}, {"text": ["To date, the solution has been nested filters:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n filter(test1, filter(test2, filter(test3, the_list)))\n</code>\n</pre>\n", "senID": 6}, {"text": ["But that has been slow, since it involves n * (n - 1) * (n - 2) operations, which approximates to O(n^3) speed, and at least n*2 extra lists of references."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["As a note, it would be vastly preferably to have an in-place search."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["I haven't found a standard library for handling this.", "What is the typical solution to this problem?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]