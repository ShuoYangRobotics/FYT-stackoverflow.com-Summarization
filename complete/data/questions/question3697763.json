[{"text": ["pretty printer with Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a list of labels, and data as follows."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', 'place_effort']\n[1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']\n</pre>\n", "senID": 2}, {"text": ["I need to print them into console.", "And for this, I'm iterating over the list, and print out each element with a tab ('\\t')."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["But, unfortunately, the result is not so pretty. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\nnumber of data 1 and number of column 7\nid      Version     chip_name       xversion        device      opt_param       place_effort        \n1       1.0     virtex2     xilinx11.5      xc5vlx50        Speed       High\n</pre>\n", "senID": 5}, {"text": ["The string length of label and data is quite variable, and it's not aligned well."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Is there any  solution to this problem with Python?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["ADDED"], "childNum": 0, "tag": "h2", "senID": 8, "childList": []}, {"text": ["Hepled by Mike DeSimone's answer, I could make the pretty printer that I can use for my purposes.", "The valueResults are a list of duple. "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n labels = queryResult.names\n    valueResults = queryResult.result\n\n    # get the maximum width\n    allData = valueResults\n    allData.insert(0,labels)\n    transpose = zip(*valueResults) # remove the sequence as a parameter\n    #print transpose\n    for value in transpose:\n        # value is integer/float/unicode/str, so make it length of str\n        newValue = [len(str(i)) for i in value]\n        columnWidth = max(newValue)\n        columnWidths.append(columnWidth)\n        dividers.append('-' * columnWidth)\n        dblDividers.append('=' * columnWidth)\n        label = value[0]\n        paddedLabels.append(label.center(columnWidth))\n\n    paddedString = \"\"\n\n    for values in valueResults[1:]:\n        paddedValue = []\n        for i, value in enumerate(values):\n            svalue = str(value)\n            columnWidth = columnWidths[i]\n            paddedValue.append(svalue.center(columnWidth))\n        paddedString += '| ' + ' | '.join(paddedValue) + ' |' + '\\n'\n\n    string += '+-' + '-+-'.join(dividers) + '-+' + '\\n'\n    string += '| ' + ' | '.join(paddedLabels) + ' |' + '\\n'\n    string += '+=' + '=+='.join(dblDividers) + '=+' + '\\n'\n    string += paddedString\n    string += '+-' + '-+-'.join(dividers) + '-+' + '\\n'\n</code>\n</pre>\n", "senID": 10}, {"text": ["And this is the result."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n+----+---------+-----------+------------+----------+-----------+--------------+\n| id | Version | chip_name |  xversion  |  device  | opt_param | place_effort |\n+====+=========+===========+============+==========+===========+==============+\n| 1  |   1.0   |  virtex2  | xilinx11.5 | xc5vlx50 |   Speed   |     High     |\n| 2  |   1.0   |  virtex2  | xilinx11.5 | xc5vlx50 |   Speed   |     High     |\n+----+---------+-----------+------------+----------+-----------+--------------+\n</pre>\n", "senID": 12}, {"text": ["Thanks for the help."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}]