[{"text": ["Using map() to get number of times list elements exist in a string in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm trying to get the number of times each item in a list is in a string in Python:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n paragraph = \"I eat bananas and a banana\"\n\ndef tester(x): return len(re.findall(x,paragraph))\n\nmap(tester, ['banana', 'loganberry', 'passion fruit'])\n</code>\n</pre>\n", "senID": 2}, {"text": ["Returns [2, 0, 0] "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["What I'd like to do however is extend this so I can feed the paragraph value into the map() function.", "Right now, the tester() function has paragraph hardcoded.", "Does anybody have a way to do this (perhaps make an n-length list of paragraph values)?", "Any other ideas here?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Keep in mind that each of the array values will have a weight at some point in the future - hence the need to keep the values in a list rather than crunching them all together."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["UPDATE:  The paragraph will often be 20K and the list will often have 200+ members.", "My thinking is that map operates in parallel - so it will be much more efficient than any serial methods."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]