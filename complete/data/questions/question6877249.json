[{"text": ["Find the number of occurrences of a subsequence in a string"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["For example, let the string be the first 10 digits of pi, 3141592653, and the subsequence be 123.", "Note that the sequence occurs twice:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "3141592653", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "123", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n 3141592653\n 1    2  3\n   1  2  3\n</code>\n</pre>\n", "senID": 2}, {"text": ["This was an interview question that I couldn't answer and I can't think of an efficient algorithm and it's bugging me.", "I feel like it should be possible to do with a simple regex, but ones like 1.*2.", "*3 don't return every subsequence.", "My naive implementation in Python (count the 3's for each 2 after each 1) has been running for an hour and it's not done."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "1.*2.*3", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]