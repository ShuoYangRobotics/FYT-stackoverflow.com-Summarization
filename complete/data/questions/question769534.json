[{"text": ["Dynamic Loading of Python Modules"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm trying to dynamically load modules I've created."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Right now this works properly:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import structures.index\n</code>\n</pre>\n", "senID": 3}, {"text": ["But if I try the same thing by importing it dynamically, it fails."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n struct = __import__(\"structures.index\")\n</code>\n</pre>\n", "senID": 5}, {"text": ["Error supplied is:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n Error ('No module named structures.index',)\n</code>\n</pre>\n", "senID": 7}, {"text": ["Any ideas why?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "hr", "senID": 9}, {"text": ["Edit: When using full scope (it sort of works?", "):"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n struct = __import__(\"neoform.structures.index\")\n</code>\n</pre>\n", "senID": 11}, {"text": ["This doesn't throw any errors, however, it isn't loading the index module, it's loading the \"neoform\" module instead."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["The result of \"struct\" is:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n &lt;module 'neoform' from '/neoform/__init__.py'&gt;\n</code>\n</pre>\n", "senID": 14}, {"text": ["Also, as a side question, how can I then instantiate a class within a dynamically loaded module?", "(assuming all the modules contain a common class name)."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["Edit: Solution: (thanks coonj &amp; Rick) This ended up being what worked.", "Not sure why (yet), but the fromlist had to be something \"anything apparently, since it worked when I put the letter \"a\" as a value (strange, given that the file only had 1 class in it)."], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "fromlist", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def get_struct_module(self, name):\n    try:\n        return = __import__(\"neoform.structures.\" + name, fromlist='*')\n    except ImportError, e:\n        self.out.add(\"Could not load struct: neoform.structure.\" + name + \"\\n\\n\" + \"Error \" + str(e.args))\n</code>\n</pre>\n", "senID": 17}]