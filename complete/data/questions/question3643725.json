[{"text": ["I have a Python list of the prime factors of a number.", "How do I (pythonically) find all the factors?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm working on a Project Euler problem which requires factorization of an integer.", "I can come up with a list of all of the primes that are the factor of a given number.", "The Fundamental Theorem of Arithmetic implies that I can use this list to derive every factor of the number."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "every", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["My current plan is to take each number in the list of base primes and raise its power until it is no longer an integer factor to find the maximum exponents for each prime.", "Then, I will multiply every possible combination of prime-exponent pairs. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So for example, for 180:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n Given: prime factors of 180: [2, 3, 5]\nFind maximum exponent of each  factor: \n    180 / 2^1 = 90\n    180 / 2^2 = 45\n    180 / 2^3 = 22.5 - not an integer, so 2 is the maximum exponent of 2.\n\n    180 / 3^1 = 60\n    180 / 3^2 = 20\n    180 / 3^3 = 6.6 - not an integer, so 2 is the maximum exponent of 3.\n\n    180 / 5^1 = 36\n    180 / 5^2 = 7.2 - not an integer, so 1 is the maximum exponent of 5.\n</code>\n</pre>\n", "senID": 4}, {"text": ["Next, do every combination of these up to the maximum exponent to get the factors:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n 2^0 * 3^0 * 5^0 = 1\n    2^1 * 3^0 * 5^0 = 2\n    2^2 * 3^0 * 5^0 = 4\n    2^0 * 3^1 * 5^0 = 3\n    2^1 * 3^1 * 5^0 = 6\n    2^2 * 3^1 * 5^0 = 12\n    2^0 * 3^2 * 5^0 = 9\n    2^1 * 3^2 * 5^0 = 18\n    2^2 * 3^2 * 5^0 = 36\n    2^0 * 3^0 * 5^1 = 5\n    2^1 * 3^0 * 5^1 = 10\n    2^2 * 3^0 * 5^1 = 20\n    2^0 * 3^1 * 5^1 = 15\n    2^1 * 3^1 * 5^1 = 30\n    2^2 * 3^1 * 5^1 = 60\n    2^0 * 3^2 * 5^1 = 45\n    2^1 * 3^2 * 5^1 = 90\n    2^2 * 3^2 * 5^1 = 180\n</code>\n</pre>\n", "senID": 6}, {"text": ["So the list of factors = [1, 2, 3, 4, 5, 6, 9, 10, 12, 15, 18, 20, 30, 36, 45, 60, 90, 180]"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Here is the code I have so far.", "Two problems: First, I don't think it is very Pythonic at all.", "I'd like to fix that.", "Second, I really don't have a Pythonic way to do the combinatoric second step.", "Out of shame, I've spared you from the ridiculous set of loops."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}, {"text": ["n is the number we want to factor.", "listOfAllPrimes is a precalculated list of the primes up to 10 million."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n def getListOfFactors(n, listOfAllPrimes):\n    maxFactor = int(math.sqrt(n)) + 1\n    eligiblePrimes = filter(lambda x: x &lt;= maxFactor, listOfAllPrimes)\n    listOfBasePrimes = filter(lambda x: n % x ==0, eligiblePrimes)\n\n    listOfExponents = [] #(do I have to do this?)\n    for x in listOfBasePrimes:\n        y = 1\n        while (x**(y+1)) % n == 0:\n            y += 1\n        listOfExponents.append(y)\n</code>\n</pre>\n", "senID": 10}]