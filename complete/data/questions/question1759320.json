[{"text": ["Python: Issue reading data lines multiple times from a file"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am trying to make a Python2.6 script on a Win32 that will read all the text files stored in a directory and print only the lines containing actual data.", "A sample file -"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Set : 1 \nDate: 10212009 \n12 34 56 \n25 67 90\nEnd Set \n+++++++++\nSet: 2 \nDate: 10222009 \n34 56 89 \n25 67 89 \nEnd Set\n</code>\n</pre>\n", "senID": 2}, {"text": ["In the above example file, I want to print only the lines 3, 4 and 9, 10 (the actual data values).", "The program does this iteratively on all txt files.", "I wrote the script as below and am testing it on a single txt file as I go.", "My logic is to read the input files one by one and search for a start string.", "As soon as the match is found, start searching for end string.", "when both are found, print the lines from start string to end string.Repeat on the rest of the file before opening another file.", "The problem I am having is that it successfully reads the Set 1 of data, but then screws up on subsequent sets in the file.", "For set 2, it identifies the no.", "of lines to read, but prints them starting at incorrect line number.", "A little digging leads to following explanations -\n1.", "Using seek and tell to reposition the 2nd iteration of the loop, which did not work since the file is read from buffer and that screws up \"tell\" value.", "2.", "Opening the file in binary mode helped someone, but it is not working for me.", "3.", "Open the file with 0 buffer mode, but it did not work."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Second problem I am having is when it prints data from Set 1, it inserts a blank line between 2 lines of data values.", "How can I get rid of it?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Note: Ignore all references to next_run in the code below.", "I was trying it out for repositioning line read.", "Subsequent searches for start string should begin from the last position of end string"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n #!C:/Python26 python \n\n# Import necessary modules \nimport os, glob, string, sys, fileinput, linecache \nfrom goto import goto, label \n\n# Set working path \npath = 'C:\\\\System_Data' \n\n\n# -------------------- \n# PARSE DATA MODULE \n# -------------------- \n\n# Define the search strings for data \nstart_search = \"Set :\" \nend_search =\"End Set\" \n# For Loop to read the input txt files one by one \nfor inputfile in glob.glob( os.path.join( path, '*.txt' ) ): \n  inputfile_fileHandle = open ( inputfile, 'rb', 0 ) \n  print( \"Current file being read: \" +inputfile ) \n  # start_line initializes to first line \n  start_line = 0 \n  # After first set of data is extracted, next_run will store the position to read the rest of the file \n  # next_run = 0 \n  # start reading the input files, one line by one line \n  for line in inputfile: \n    line = inputfile_fileHandle.readline() \n    start_line += 1 \n    # next_run+=1 \n    # If a line matched with the start_search string \n    has_match = line.find( start_search ) \n    if has_match &gt;= 0: \n      print ( \"Start String found at line number: %d\" %( start_line ) ) \n      # Store the location where the search will be restarted \n      # next_run = inputfile_fileHandle.tell() #inputfile_fileHandle.lineno() \n      print (\"Current Position: %d\" % next_run) \n      end_line = start_line \n      print ( \"Start_Line: %d\" %start_line ) \n      print ( \"End_Line: %d\" %end_line ) \n      #print(line) \n      for line in inputfile: \n        line = inputfile_fileHandle.readline() \n        #print (line) \n        end_line += 1 \n        has_match = line.find(end_search) \n        if has_match &gt;= 0: \n          print 'End   String found at line number: %d' % (end_line) \n          # total lines to print: \n          k=0 \n          # for loop to print all the lines from start string to end string \n          for j in range(0,end_line-start_line-1): \n            print linecache.getline(inputfile, start_line +1+ j ) \n            k+=1 \n          print ( \"Number of lines Printed: %d \" %k ) \n          # Using goto to get out of 2 loops at once \n          goto .re_search_start_string \n    label .re_search_start_string \n    #inputfile_fileHandle.seek(next_run,0) \n\n  inputfile_fileHandle.close ()\n</code>\n</pre>\n", "senID": 6}]