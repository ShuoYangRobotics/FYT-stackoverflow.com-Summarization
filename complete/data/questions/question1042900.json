[{"text": ["Django unit testing with date/time-based objects"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Suppose I have the following Event model:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Event", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from django.db import models\nimport datetime\n\nclass Event(models.Model):\n    date_start = models.DateField()\n    date_end = models.DateField()\n\n    def is_over(self):\n        return datetime.date.today() &gt; self.date_end\n</code>\n</pre>\n", "senID": 2}, {"text": ["I want to test Event.is_over() by creating an Event that ends in the future (today + 1 or something), and stubbing the date and time so the system thinks we've reached that future date."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Event.is_over()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I'd like to be able to stub ALL system time objects as far as python is concerned.", "This includes datetime.date.today(), datetime.datetime.now(), and any other standard date/time objects."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "datetime.date.today()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "datetime.datetime.now()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["What's the standard way to do this?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]