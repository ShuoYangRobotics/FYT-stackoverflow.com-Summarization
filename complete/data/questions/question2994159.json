[{"text": ["Efficient and accurate way to compact and compare Python lists?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm trying to a somewhat sophisticated diff between individual rows in two CSV files.", "I need to ensure that a row from one file does not appear in the other file, but I am given no guarantee of the order of the rows in either file.", "As a starting point, I've been trying to compare the hashes of the string representations of the rows (i.e.", "Python lists).", "For example:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "no guarantee of the order of the rows", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import csv\n\nhashes = []\nfor row in csv.reader(open('old.csv','rb')):\n  hashes.append( hash(str(row)) )\n\nfor row in csv.reader(open('new.csv','rb')):\n  if hash(str(row)) not in hashes:\n    print 'Not found'\n</code>\n</pre>\n", "senID": 2}, {"text": ["But this is failing miserably.", "I am constrained by artificially imposed memory limits that I cannot change, and thusly I went with the hashes instead of storing and comparing the lists directly.", "Some of the files I am comparing can be hundreds of megabytes in size.", "Any ideas for a way to accurately compress Python lists so that they can be compared in terms of simple equality to other lists?", "I.e.", "a hashing system that actually works?", "Bonus points: why didn't the above method work?"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "hundreds of megabytes", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}, {"text": "Bonus points", "childNum": 0, "tag": "em", "pos": 6, "childList": []}]}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Thanks for all the great suggestions!", "Let me clarify some things.", "\"Miserable failure\" means that two rows that have the exact same data, after being read in by the CSV.reader object are not hashing to the same value after calling str on the list object.", "I shall try hashlib at some suggestions below.", "I also cannot do a hash on the raw file, since two lines below contain the same data, but different characters on the line:"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "CSV.reader", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "hashlib", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"code": "<pre>\n<code>\n 1, 2.3, David S, Monday\n1, 2.3, \"David S\", Monday\n</code>\n</pre>\n", "senID": 6}, {"text": ["I am also already doing things like string stripping to make the data more uniform, but it seems to no avail.", "I'm not looking for an extremely smart diff logic, i.e.", "that 0 is the same as 0.0. "], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "0", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "0.0", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["EDIT 2:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "EDIT 2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Problem solved.", "What basically worked is that I needed to a bit more pre-formatting like converting ints and floats, and so forth AND I needed to change my hashing function.", "Both these changes seemed to do the job for me."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "AND", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}]