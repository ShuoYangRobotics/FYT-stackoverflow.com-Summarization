[{"text": ["What should I name my global module in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm writing an application in Python, and I've got a number of universal variables (such as the reference to the main window, the user settings, and the list of active items in the UI) which have to be accessible from all parts of the program1.", "I only just realized I've named the module globals.py and I'm importing the object which contains those variables with a from globals import globals statement at the top of my files."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "1", "childNum": 0, "tag": "sup", "pos": 0, "childList": []}, {"text": "globals.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "from globals import globals", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Obviously, this works, but I'm a little leery about naming my global object the same as the Python builtin.", "Unfortunately, I can't think of a much better naming convention for it.", "global and all are also Python builtins, universal seems imprecise, state isn't really the right idea.", "I'm leaning towards static or env, although both have a specific meaning in computer terms which suggests a different concept."], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "all", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "universal", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "state", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "static", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "env", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So, what (in Python) would you call the module which contains variables global to all your other modules?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["1 I realize I could pass these (or the single object containing them) as a variable into every other function I call.", "This ends up being infeasible, not just because it makes the startup code and function signatures really ugly."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "1", "childNum": 0, "tag": "sup", "pos": 0, "childList": []}]}]