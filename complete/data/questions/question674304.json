[{"text": ["Python's use of __new__ and __init__?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm just trying to streamline one of my classes and have introduced some functionality in the same style as the flyweight design pattern."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["However, I'm a bit confused as to why __init__ is always called after __new__.", "I wasn't expecting this.", "Can anyone tell me why this is happening and how I implement this functionality otherwise?", "(apart from putting the implementation into the __new__ which feels quite hacky)."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__new__", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "__new__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Here's an example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class A(object):\n    _dict = dict()\n\n    def __new__(cls):\n    \tif 'key' in A._dict:\n    \t\tprint \"EXISTS\"\n    \t\treturn A._dict['key']\n    \telse:\n    \t\tprint \"NEW\"\n    \t\treturn super(A, cls).__new__(cls)\n\n    def __init__(self):\n    \tprint \"INIT\"\n    \tA._dict['key'] = self\n    \tprint \"\"\n\na1 = A()\na2 = A()\na3 = A()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Outputs:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n NEW\nINIT\n\nEXISTS\nINIT\n\nEXISTS\nINIT\n</code>\n</pre>\n", "senID": 6}, {"text": ["Why?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]