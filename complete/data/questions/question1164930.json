[{"text": ["Image resizing with django?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm new to Django (and Python) and I have been trying to work out a few things myself, before jumping into using other people's apps.", "I'm having trouble understanding where things 'fit' in the Django (or Python's) way of doing things.", "What I'm trying to work out is how to resize an image, once it's been uploaded.", "I have my model setup nicely and plugged into the admin, and the image uploads fine to the directory:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from django.db import models\n\n# This is to list all the countries\n# For starters though, this will be just United Kingdom (GB)\nclass Country(models.Model):\n    name = models.CharField(max_length=120, help_text=\"Full name of country\")\n    code = models.CharField(max_length=2, help_text=\"This is the ISO 3166 2-letter country code (see: http://www.theodora.com/country_digraphs.html)\")\n    flag = models.ImageField(upload_to=\"images/uploaded/country/\", max_length=150, help_text=\"The flag image of the country.\", blank=True)\n\n    class Meta:\n        verbose_name_plural = \"Countries\"\n\n    def __unicode__(self):\n        return self.name\n</code>\n</pre>\n", "senID": 2}, {"text": ["The thing I'm now having trouble with is taking that file and making a new file into a thumbnail.", "Like I say, I'd like to know how to do it without using others' apps (for now).", "I have got this code from DjangoSnippets:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from PIL import Image\nimport os.path\nimport StringIO\n\ndef thumbnail(filename, size=(50, 50), output_filename=None):\n    image = Image.open(filename)\n    if image.mode not in ('L', 'RGB'):\n        image = image.convert('RGB')\n    image = image.resize(size, Image.ANTIALIAS)\n\n    # get the thumbnail data in memory.\n    if not output_filename:\n        output_filename = get_default_thumbnail_filename(filename)\n    image.save(output_filename, image.format) \n    return output_filename\n\ndef thumbnail_string(buf, size=(50, 50)):\n    f = StringIO.StringIO(buf)\n    image = Image.open(f)\n    if image.mode not in ('L', 'RGB'):\n        image = image.convert('RGB')\n    image = image.resize(size, Image.ANTIALIAS)\n    o = StringIO.StringIO()\n    image.save(o, \"JPEG\")\n    return o.getvalue()\n\ndef get_default_thumbnail_filename(filename):\n    path, ext = os.path.splitext(filename)\n    return path + '.thumb.jpg'\n</code>\n</pre>\n", "senID": 4}, {"text": ["...but this has ultimately confused me... As I don't know how this 'fits in' to my Django app?", "And really, is it the best solution for simply making a thumbnail of an image that has been successfully uploaded?", "Can anyone possibly show me a good, solid, decent way that a beginner like me can learn to do this properly?", "As in, knowing where to put that sort of code (models.py?", "forms.py?", "...) and how it would work in context?", "...", "I just need a bit of help understanding and working this problem out."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Thank you!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]