[{"text": ["Is there a need for a \"use strict\" Python compiler?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["There exist static analysis tools for Python, but compile time checks tend to be diametrically opposed to the run-time binding philosophy that Python embraces.", "It's possible to wrap the standard Python interpreter with a static analysis tool to enforce some \"use strict\"-like constraints, but we don't see any widespread adoption of such a thing."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "static analysis tools for Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/35470/are-there-any-static-analysis-tools-for-python"}, {"text": "run-time binding philosophy", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://python-history.blogspot.com/2009/01/introduction-and-overview.html"}, {"text": "possible", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"href": "http://perldoc.perl.org/strict.html", "text": "use strict", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Is there something about Python that makes \"use strict\" behavior unnecessary or especially undesirable?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Alternatively, is the \"use strict\" behavior unnecessary in Perl, despite its widespread adoption?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Note: By \"necessary\" I mean \"practically necessary\", not strictly necessary.", "Obviously you can write Perl without \"use strict,\" but (from what I've seen) most Perl programmers do use it."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "can", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "do", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Note: The Python interpreter-wrapper need not require \"use strict\"-like constraints -- you could use a pseudo-pragma similar to \"use strict\" that would be ignored by the normal interpreter.", "I'm not talking about adding a language-level feature."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "require", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"tag": "hr", "senID": 6}, {"text": ["Update: Explaining what \"use strict\" does in Perl per comments.", "(Link to official docs is in the first paragraph."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["The \"use strict\" directive has three distinct components, only two of which are really interesting:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["use strict vars: Statically checks lexically scoped variable usage in your program.", "(Keep in mind that, in Python, there is basically only global scope and local scope).", "Many Python linters check for this sort of thing.", "Since it's the only static analysis that they can do, the linters assume you use straightforward lexical scoping and warn you about things that appear wrong in that sense until you tell them to shut up; i.e."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "local", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["use strict refs: Prevents symbolic namespace dereferencing.", "Python's closest analog is using locals() and globals() to do symbolic binding and identifier lookup."], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "locals()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "globals()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["use strict subs: No real analog in Python."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]}]