[{"text": ["How to Model a Foreign Key in a Reusable Django App?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["In my django site I have two apps, blog and links.", "blog has a model blogpost, and links has a model link.", "There should be a one to many relationship between these two things.", "There are many links per blogpost, but each link has one and only one blog post.", "The simple answer is to put a ForeignKey to blogpost in the link model. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["That's all well and good, however there is a problem.", "I want to make the links app reusable.", "I don't want it to depend upon the blog app.", "I want to be able to use it again in other sites and perhaps associate links with other non-blogpost apps and models. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["A generic foreign key seems like it might be the answer, but not really.", "I don't want links to be able to associate with any model in my site.", "Just the one that I explicitly specify.", "And I know from prior experience that there can be issues using generic foreign keys in terms of database usage because you can't do a select_related over a generic foreign key the way you can with a regular foreign key."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["What is the \"correct\" way to model this relationship?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]