[{"text": ["What's the best practice for handling single-value tuples in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am using a 3rd party library function which reads a set of keywords from a file, and is supposed to return a tuple of values.", "It does this correctly as long as there are at least two keywords.", "However, in the case where there is only one keyword, it returns a raw string, not a tuple of size one.", "This is particularly pernicious because when I try to do something like"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for keyword in library.get_keywords():\n    # Do something with keyword\n</code>\n</pre>\n", "senID": 2}, {"text": [", in the case of the single keyword, the for iterates over each character of the string in succession, which throws no exception, at run-time or otherwise, but is nevertheless completely useless to me."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["My question is two-fold:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Clearly this is a bug in the library, which is out of my control.", "How can I best work around it?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Secondly, in general, if I am writing a function that returns a tuple, what is the best practice for ensuring tuples with one element are correctly generated?", "For example, if I have"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def tuple_maker(values):\n    my_tuple = (values)\n    return my_tuple\n\nfor val in tuple_maker(\"a string\"):\n    print \"Value was\", val\n\nfor val in tuple_maker([\"str1\", \"str2\", \"str3\"]):\n    print \"Value was\", val\n</code>\n</pre>\n", "senID": 7}, {"text": ["I get"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n Value was a\nValue was  \nValue was s\nValue was t\nValue was r\nValue was i\nValue was n\nValue was g\nValue was str1\nValue was str2\nValue was str3\n</code>\n</pre>\n", "senID": 9}, {"text": ["What is the best way to modify the function my_tuple to actually return a tuple when there is only a single element?", "Do I explicitly need to check whether the size is 1, and create the tuple seperately, using the (value,) syntax?", "This implies that any function that has the possibility of returning a single-valued tuple must do this, which seems hacky and repetitive. "], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "my_tuple", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(value,)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Is there some elegant general solution to this problem?"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]