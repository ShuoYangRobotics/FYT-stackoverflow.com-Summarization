[{"text": ["How can I access the current executing module or class name in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I would like to be able to dynamically retrieve the current executing module or class name from within an imported module.", "Here is some code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["foo.py:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "foo.py:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def f():\n    print __name__\n</code>\n</pre>\n", "senID": 3}, {"text": ["bar.py:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "bar.py:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from foo import f\n\ndef b(): f()\n</code>\n</pre>\n", "senID": 5}, {"text": ["This obviously does not work as __name__ is the name of the module that contains the function.", "What I would like to be access inside the foo module is the name of the current executing module that is using foo.", "So in the case above it would be bar but if any other module imported foo I would like foo to dynamically have access to the name of that module."], "childNum": 6, "tag": "p", "senID": 6, "childList": [{"text": "__name__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "foo", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "foo", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "bar", "childNum": 0, "tag": "code", "childList": []}, {"text": "foo", "childNum": 0, "tag": "code", "childList": []}, {"text": "foo", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit: The inspect module looks quite promising but it is not exactly what I was looking for.", "What I was hoping for was some sort of global or environment-level variable that I could access that would contain the name of the current executing module.", "Not that I am unwilling to traverse the stack to find that information - I just thought that Python may have exposed that data already."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "inspect", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Edit: Here is how I am trying to use this.", "I have two different Django applications that both need to log errors to file.", "Lets say that they are called \"AppOne\" and \"AppTwo\".", "I also have a place to which I would like to log these files: \"/home/hare/app_logs\".", "In each application at any given point I would like to be able to import my logger module and call the log function which writes the log string to file.", "However what I would like to do is create a directory under app_logs that is the name of the current application (\"AppOne\" or \"AppTwo\") so that each application's log files will go in their respective logging directories."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "/home/hare/app_logs", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "app_logs", "childNum": 0, "tag": "code", "pos": 5, "childList": []}]}, {"text": ["In order to do this I thought that the best way would be for the logger module to have access to some sort of global variable that denotes the current application's name as it is responsible for knowing the location of the parent logging directory and creating the application's logging directory if it does not yet exist."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]