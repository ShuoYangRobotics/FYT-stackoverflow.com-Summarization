[{"text": ["How to go from list of words to a list of distinct letters in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Using Python, I'm trying to convert a sentence of words into a flat list of all distinct letters in that sentence."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's my current code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n words = 'She sells seashells by the seashore'\n\nltr = []\n\n# Convert the string that is \"words\" to a list of its component words\nword_list = [x.strip().lower() for x in words.split(' ')]\n\n# Now convert the list of component words to a distinct list of\n# all letters encountered.\nfor word in word_list:\n    for c in word:\n        if c not in ltr:\n            ltr.append(c)\n\nprint ltr\n</code>\n</pre>\n", "senID": 3}, {"text": ["This code returns ['s', 'h', 'e', 'l', 'a', 'b', 'y', 't', 'o', 'r'], which is correct, but is there a more Pythonic way to this answer, probably using list comprehensions/set?"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "['s', 'h', 'e', 'l', 'a', 'b', 'y', 't', 'o', 'r']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "set", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["When I try to combine list-comprehension nesting and filtering, I get lists of lists instead of a flat list."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["The order of the distinct letters in the final list (ltr) is not important; what's crucial is that they be unique."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "ltr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]