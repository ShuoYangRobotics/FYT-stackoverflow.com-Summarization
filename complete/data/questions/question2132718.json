[{"text": ["Best way to handle list.index(might-not-exist) in python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have code which looks something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n thing_index = thing_list.index(thing)\notherfunction(thing_list, thing_index)\n</code>\n</pre>\n", "senID": 2}, {"text": ["ok so that's simplified but you get the idea.", "Now thing might not actually be in the list, in which case I want to pass -1 as thing_index.", "In other languages this is what you'd expect index() to return if it couldn't find the element.", "In fact it throws a ValueError."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "thing", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "thing_index", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "index()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "ValueError", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["I could do this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n try:\n    thing_index = thing_list.index(thing)\nexcept ValueError:\n    thing_index = -1\notherfunction(thing_list, thing_index)\n</code>\n</pre>\n", "senID": 5}, {"text": ["But this feels dirty, plus I don't know if ValueError could be raised for some other reason.", "I came up with the following solution based on generator functions, but it seems a little complex:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "ValueError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n thing_index = ( [(i for i in xrange(len(thing_list)) if thing_list[i]==thing)] or [-1] )[0]\n</code>\n</pre>\n", "senID": 7}, {"text": ["Is there a cleaner way to achieve the same thing?", "Let's assume the list isn't sorted."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]