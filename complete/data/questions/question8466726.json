[{"text": ["Django circular model reference"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm starting to work on a small soccer league management website (mostly for learning purposes) and can't wrap my mind around a Django models relationship.", "For simplicity, let's say I have 2 types of objects - Player and Team.", "Naturally, a player belongs to one team so that's a ForeignKey(Team) in the Player model.", "So I go:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Team(models.Model):\n    name = models.CharField()\nclass Player(models.Model):\n    name = models.CharField()\n    team = models.ForeignKey(Team)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then I want each team to have a captain which would be one of the players so that would be a ForeignKey(Player) in the Team model.", "But that would create a circular dependency.", "Granted my Django experience is limited, but it seems like a simple problem, though I can't figure out what I'm doing wrong conceptually. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]