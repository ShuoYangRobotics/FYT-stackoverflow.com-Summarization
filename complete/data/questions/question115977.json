[{"text": ["Using Pylint with Django"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I would very much like to integrate pylint into the build process for\nmy python projects, but I have run into one show-stopper:  One of the\nerror types that I find extremely useful--:E1101: *%s %r has no %r\nmember*--constantly reports errors when using common django fields,\nfor example:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "pylint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.logilab.org/857"}, {"text": "E1101: *%s %r has no %r\nmember*", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n E1101:125:get_user_tags: Class 'Tag' has no 'objects' member\n</code>\n</pre>\n", "senID": 2}, {"text": ["which is caused by this code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def get_user_tags(username):\n   \"\"\"\n   Gets all the tags that username has used.\n\n   Returns a query set.\n   \"\"\"\n   return Tag.objects.filter(  ## This line triggers the error.\n       tagownership__users__username__exact=username).distinct()\n\n# Here is the Tag class, models.Model is provided by Django:\nclass Tag(models.Model):\n   \"\"\"\n   Model for user-defined strings that help categorize Events on\n   on a per-user basis.\n   \"\"\"\n   name = models.CharField(max_length=500, null=False, unique=True)\n\n   def __unicode__(self):\n       return self.name\n</code>\n</pre>\n", "senID": 4}, {"text": ["How can I tune Pylint to properly take fields such as objects into account?", "(I've also looked into the Django source, and I have been unable to find the implementation of objects, so I suspect it is not \"just\" a class field.", "On the other hand, I'm fairly new to python, so I may very well have overlooked something."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "objects", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit: The only way I've found to tell pylint to not warn about these warnings is by blocking all errors of the type (E1101) which is not an acceptable solution, since that is (in my opinion) an extremely useful error.", "If there is another way, without augmenting the pylint source, please point me to specifics :)"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["See here for a summary of the problems I've had with pychecker and pyflakes -- they've proven to be far to unstable for general use.", "(In pychecker's case, the crashes originated in the pychecker code -- not source it was loading/invoking."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blog.ciscavate.org/2008/09/wrestling-python.html"}]}]