[{"text": ["String separation in required format, Pythonic way?", "(with or w/o Regex)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a string in the format:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n t='@abc @def Hello this part is text'\n</code>\n</pre>\n", "senID": 2}, {"text": ["I want to get this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n l=[\"abc\", \"def\"] \ns='Hello this part is text'\n</code>\n</pre>\n", "senID": 4}, {"text": ["I did this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n a=t[t.find(' ',t.rfind('@')):].strip()\ns=t[:t.find(' ',t.rfind('@'))].strip()\nb=a.split('@')\nl=[i.strip() for i in b][1:]\n</code>\n</pre>\n", "senID": 6}, {"text": ["It works for the most part, but it fails when the text part has the '@'.", "Eg, when: "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n t='@abc @def My email is red@hjk.com'\n</code>\n</pre>\n", "senID": 8}, {"text": ["it fails.", "The @names are there in the beginning and there can be text after @names, which may possibly contain @."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Clearly I can append initally with a space and find out first word without '@'.", "But that doesn't seem an elegant solution."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["What is a pythonic way of solving this?"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]