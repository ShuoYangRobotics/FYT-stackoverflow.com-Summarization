[{"text": ["Why is my \"exploded\" Python code actually running faster?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm in an introductory comp-sci class (after doing web programming for years) and became curious about how much speed I was gaining, if any, with my one-liners."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for line in lines:\n  numbers.append(eval(line.strip().split()[0]))\n</code>\n</pre>\n", "senID": 2}, {"text": ["So I wrote the same thing with painfully explicit assignments and ran them against each other."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for line in lines:\n  a = line.split()\n  b = a[0]\n  c = b.strip()\n  d = eval(c)\n  numbers.append(d)\n</code>\n</pre>\n", "senID": 4}, {"text": ["The second one runs a consistent 30ms faster (on my FreeBSD shell account; see Edit #2) with an input file of 100K lines!", "Of course this is on a total run time of 3 seconds, so the percentage isn't large...but I'm really surprised to see all those explicit named assignments somehow helping."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "faster", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "helping", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["There's a recent thread on the performance of functions as opposed to inline code, but this seems even more basic.", "What gives?", "Should I be writing lovingly fulsomely verbose code and telling my sneering colleagues it's for performance reasons?", "(Thankfully, a list-comprehension version runs about 10ms faster yet, so my cherished compactness isn't totally out the window."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "recent thread", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1362997/encapsulation-severely-hurts-performance"}]}, {"text": ["EDIT: Thanks for the tip on my sloppy expansion of the code.", "You're all correct that the second one should really be:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "EDIT:", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "EDIT:", "tag": "em"}]}, {"text": "EDIT:", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n for line in lines:\n  a = line.strip()\n  b = a.split()\n  c = b[0]\n  d = eval(c)\n  numbers.append(d)\n</code>\n</pre>\n", "senID": 8}, {"text": ["However, even once I've fixed that, my timings are 2.714s, 2.652s, and 2.624s respectively, for the one-liner, the fully-exploded form, and the list comprehension (not pictured).", "So my question stands!"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["EDIT #2: It's interesting that the answer doesn't seem to be obvious even to a bunch of knowledgeable folks, which makes me feel a bit better about the question!", "I'll probably play with dis a bit on my own now, in this and similar circumstances, and see what turns up.", "By all means keep tinkering with the thread if you want, but I'm going to declare my received answer to be \"huh, that's interesting; must be something deep.", "\" Especially since the behavior isn't consistent across machines, as steveha pointed out -- the slight difference goes the other direction on my Debian and Windows installs.", "Thanks to everyone who's contributed!"], "childNum": 3, "tag": "p", "senID": 10, "childList": [{"text": "EDIT #2:", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "EDIT #2:", "tag": "em"}]}, {"text": "EDIT #2:", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "I'm going to declare my received answer to be \"huh, that's interesting; must be something deep.\"", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}]