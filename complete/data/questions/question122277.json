[{"text": ["How do you translate this regular-expression idiom from Perl into Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I switched from Perl to Python about a year ago and haven't looked back.", "There is only one idiom that I've ever found I can do more easily in Perl than in Python:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "one", "childNum": 0, "tag": "i", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n if ($var =~ /foo(.+)/) {\n  # do something with $1\n} elsif ($var =~ /bar(.+)/) {\n  # do something with $1\n} elsif ($var =~ /baz(.+)/) {\n  # do something with $1\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["The corresponding Python code is not so elegant since the if statements keep getting nested:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n m = re.search(r'foo(.+)', var)\nif m:\n  # do something with m.group(1)\nelse:\n  m = re.search(r'bar(.+)', var)\n  if m:\n    # do something with m.group(1)\n  else:\n    m = re.search(r'baz(.+)', var)\n    if m:\n      # do something with m.group(2)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Does anyone have an elegant way to reproduce this pattern in Python?", "I've seen anonymous function dispatch tables used, but those seem kind of unwieldy to me for a small number of regular expressions..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]