[{"text": ["n-largest elements in an sequence (need to retain duplicates)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I need to find the n largest elements in a list of tuples.", "Here is an example for top 3 elements."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # I have a list of tuples of the form (category-1, category-2, value)\n# For each category-1, ***values are already sorted descending by default***\n# The list can potentially be approximately a million elements long.\nlot = [('a', 'x1', 10), ('a', 'x2', 9), ('a', 'x3', 9), \n       ('a', 'x4',  8), ('a', 'x5', 8), ('a', 'x6', 7),\n       ('b', 'x1', 10), ('b', 'x2', 9), ('b', 'x3', 8), \n       ('b', 'x4',  7), ('b', 'x5', 6), ('b', 'x6', 5)]\n\n# This is what I need. \n# A list of tuple with top-3 largest values for each category-1\nans = [('a', 'x1', 10), ('a', 'x2', 9), ('a', 'x3', 9), \n       ('a', 'x4', 8), ('a', 'x5', 8),\n       ('b', 'x1', 10), ('b', 'x2', 9), ('b', 'x3', 8)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["I tried using heapq.nlargest.", "However it only returns the first 3 largest elements and doesn't return duplicates.", "For example, "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "heapq.nlargest", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n heapq.nlargest(3, [10, 10, 10, 9, 8, 8, 7, 6])\n# returns\n[10, 10, 10]\n# I need\n[10, 10, 10, 9, 8, 8]\n</code>\n</pre>\n", "senID": 4}, {"text": ["I can only think of a brute force approach.", "This is what I have and it works."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n res, prev_t, count = [lot[0]], lot[0], 1\nfor t in lot[1:]:\n    if t[0] == prev_t[0]:\n        count = count + 1 if t[2] != prev_t[2] else count\n        if count &lt;= 3:\n            res.append(t)   \n    else:\n        count = 1\n        res.append(t)\n    prev_t = t\n\nprint res\n</code>\n</pre>\n", "senID": 6}, {"text": ["Any other ideas on how I can implement this?", "Thanks!"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["EDIT: timeit results for a list of 1 million elements show that mhyfritz's solution runs in 1/3rd the time of brute force.", "Didn't want to make the question too long.", "So added more details in my answer. "], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "timeit", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "mhyfritz's solution", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/6669632/n-largest-elements-in-an-sequence-need-to-retain-duplicates/6670141#6670141"}, {"text": "my answer", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/6669632/n-largest-elements-in-an-sequence-need-to-retain-duplicates/6671383#6671383"}]}]