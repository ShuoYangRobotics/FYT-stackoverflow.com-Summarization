[{"text": ["Find the numbers that can be made with addition and subtraction, using all numbers given"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've profiled my application, and it spends 90% of its time in plus_minus_variations."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "plus_minus_variations", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The function finds ways to make various numbers given a list of numbers using addition and subtraction."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For example:\nInput"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n 1, 2\n</code>\n</pre>\n", "senID": 4}, {"text": ["Output"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n 1+2=3\n1-2=-1\n-1+2=1\n-1-2=-3\n</code>\n</pre>\n", "senID": 6}, {"text": ["This is my current code.", "I think it could be improved a lot in terms of speed."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def plus_minus_variations(nums):\n    result = dict()\n    for i, ops in zip(xrange(2 ** len(nums)), \\\n            itertools.product([-1, 1], repeat=len(nums))):\n        total = sum(map(operator.mul, ops, nums))\n        result[total] = ops\n    return result\n</code>\n</pre>\n", "senID": 8}, {"text": ["I'm mainly looking for a different algorithm to approach this with.", "My current one seems pretty inefficient.", "However, if you have optimization suggestions about the code itself, I'd be happy to hear those too."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Additional: "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "It's okay if the result is missing some of the answers (or has some extraneous answers) if it finishes a lot faster.", "tag": "none", "senID": 11}, {"text": ["If there are multiple ways to get a number, any of them are fine."], "childNum": 0, "tag": "strong", "senID": 12, "childList": []}, {"text": "For the list sizes I'm using, 99.9% of the ways produce duplicate numbers.", "tag": "none", "senID": 13}, {"text": "It's okay if the result doesn't have the way that the numbers were produced, if, again, it finishes a lot faster.", "tag": "none", "senID": 14}]}]