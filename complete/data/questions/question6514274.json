[{"text": ["How do you escape strings for SQLite table/column names in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The standard approach for using variable values in SQLite queries is the \"question mark style\", like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import sqlite3\nwith sqlite3.connect(\":memory:\") as connection:\n    connection.execute(\"CREATE TABLE foo(bar)\")\n    connection.execute(\"INSERT INTO foo(bar) VALUES (?)\", (\"cow\",))\n\n    print(list(connection.execute(\"SELECT * from foo\")))\n    # prints [(u'cow',)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["However, this only works for substituting values into queries.", "It fails when used for table or column names:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import sqlite3\nwith sqlite3.connect(\":memory:\") as connection:\n    connection.execute(\"CREATE TABLE foo(?)\", (\"bar\",))\n    # raises sqlite3.OperationalError: near \"?\": syntax error\n</code>\n</pre>\n", "senID": 4}, {"text": ["Neither the sqlite3 module nor PEP 249 mention a function for escaping names or values.", "Presumably this is to discourage users from assembling their queries with strings, but it leaves me at a loss."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "sqlite3", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "PEP 249", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0249/"}]}, {"text": ["What function or technique is most appropriate for using variable names for columns or tables in SQLite?", "I'd would strongly prefer to do able to do this without any other dependencies, since I'll be using it in my own wrapper."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I looked for but couldn't find a clear and complete description of the relevant part of SQLite's syntax, to use to write my own function.", "I want to be sure this will work for any identifier permitted by SQLite, so a trial-and-error solution is too uncertain for me."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["SQLite uses\"to quote identifiers but I'm not sure that just escaping them is sufficient.", "PHP's sqlite_escape_string function's documentation suggests that certain binary data may need to be escaped as well, but that may be a quirk of the PHP library."], "childNum": 4, "tag": "p", "senID": 8, "childList": [{"text": "uses\"to quote identifiers", "tag": "a", "pos": 0, "childList": [{"text": "\"", "tag": "code"}], "childNum": 1, "href": "http://www.sqlite.org/lang_keywords.html"}, {"text": "\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "sqlite_escape_string", "tag": "a", "pos": 1, "childList": [{"text": "sqlite_escape_string", "tag": "code"}], "childNum": 1, "href": "http://php.net/manual/en/function.sqlite-escape-string.php"}, {"text": "sqlite_escape_string", "childNum": 0, "tag": "code", "childList": []}]}]