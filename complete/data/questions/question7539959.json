[{"text": ["Python: finding whether a string starts with one of a list's variable-length prefixes"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I need to find out whether a name starts with any of a list's prefixes and then remove it, like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if name[:2] in [\"i_\", \"c_\", \"m_\", \"l_\", \"d_\", \"t_\", \"e_\", \"b_\"]:\n    name = name[2:]\n</code>\n</pre>\n", "senID": 2}, {"text": ["The above only works for list prefixes with a length of two.", "I need the same functionality for variable-length prefixes."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "variable-length prefixes", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["How is it done efficiently (little code and good performance)?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["A for loop iterating over each prefix and then checking name.startswith(prefix) to finally slice the name according to the length of the prefix works, but it's a lot of code, probably inefficient, and \"non-Pythonic\"."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "name.startswith(prefix)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Does anybody have a nice solution?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Edit: added the need to also remove the prefix in case one exists."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]