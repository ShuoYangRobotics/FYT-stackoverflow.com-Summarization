[{"text": ["regex '|' operator vs separate runs for each sub-expression"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've got a fairly large string (~700k) against which I need to run 10 regexes and count all the matches of any of the regexes.", "My quick and dirty impl was to do something like re.search('(expr1)|(expr2)|...'), but I was wondering if we'd see any performance gains by matching in a loop instead:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In other words, I want to compare the performance of:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def CountMatchesInBigstring(bigstring, my_regexes):\n  \"\"\"Counts how many of the expressions in my_regexes match bigstring.\"\"\"\n  count = 0\n  combined_expr = '|'.join(['(%s)' % r for r in my_regexes])\n  matches = re.search(combined_expr, bigstring)\n  if matches:\n    count += NumMatches(matches)\n  return count\n</code>\n</pre>\n", "senID": 3}, {"text": ["vs"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def CountMatchesInBigstring(bigstring, my_regexes):\n  \"\"\"Counts how many of the expressions in my_regexes match bigstring.\"\"\"\n  count = 0\n  for reg in my_regexes:\n    matches = re.search(reg, bigstring)\n    if matches:\n      count += NumMatches(matches)\n  return count\n</code>\n</pre>\n", "senID": 5}, {"text": ["I'll stop being lazy and run some tests tomorrow (and post the results), but I wondered whether the answer will jump out to someone who actually understands how regexes work :)"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]