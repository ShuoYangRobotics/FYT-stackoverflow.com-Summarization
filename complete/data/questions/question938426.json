[{"text": ["Bad Practice to run code in constructor thats likely to fail?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["my question is rather a design question.", "In Python, if code in your \"constructor\" fails, the object ends up not being defined.", "Thus:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n someInstance = MyClass(\"test123\") #lets say that constructor throws an exception\nsomeInstance.doSomething() # will fail, name someInstance not defined.\n</code>\n</pre>\n", "senID": 2}, {"text": ["I do have a situation though, where a lot of code copying would occur if i remove the error-prone code from my constructor.", "Basically my constructor fills a few attributes (via IO, where a lot can go wrong) that can be accessed with various getters.", "If I remove the code from the contructor, i'd have 10 getters with copy paste code something like :"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I dislike that, because all my getters would contain a lot of code.", "Instead of that I perform my IO operations in a central location, the constructor, and fill all my attributes."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Whats a proper way of doing this?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]