[{"text": ["What do we call this (new?", ") higher-order function?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am trying to name what I think is a new idea for a higher-order function.", "To the important part, here is the code in Python and Haskell to demonstrate the concept, which will be explained afterward."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Python:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def pleat(f, l):\n       return map(lambda t: f(*t), zip(l, l[1:]))\n&gt;&gt;&gt; pleat(operator.add, [0, 1, 2, 3])\n[1, 3, 5]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Haskell:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n Prelude&gt; let pleatWith f xs = zipWith f xs (drop 1 xs)\nPrelude&gt; pleatWith (+) [0,1,2,3]\n[1,3,5]\n</code>\n</pre>\n", "senID": 5}, {"text": ["As you may be able to infer, the sequence is being iterated through, utilizing adjacent elements as the parameters for the function you pass it, projecting the results into a new sequence.", "So, has anyone seen the functionality we've created?", "Is this familiar at all to those in the functional community?", "If not, what do we name it?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n ---- Update ----\n</code>\n</pre>\n", "senID": 7}, {"text": ["Pleat wins!"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Pleat", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n Prelude&gt; let pleat xs = zip xs (drop 1 xs)\nPrelude&gt; pleat [1..4]\n[(1,2),(2,3),(3,4)]\n\nPrelude&gt; let pleatWith f xs = zipWith f xs (drop 1 xs)\nPrelude&gt; pleatWith (+) [1..4]\n[3,5,7]\n</code>\n</pre>\n", "senID": 9}]