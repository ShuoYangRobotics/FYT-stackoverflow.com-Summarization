[{"text": ["Find out number of capture groups in Python regular expressions"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Is there a way to determine how many capture groups there are in a given regular expression?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I would like to be able to do the follwing:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def groups(regexp, s):\n    \"\"\" Returns the first result of re.findall, or an empty default\n\n    &gt;&gt;&gt; groups(r'(\\d)(\\d)(\\d)', '123')\n    ('1', '2', '3')\n    &gt;&gt;&gt; groups(r'(\\d)(\\d)(\\d)', 'abc')\n    ('', '', '')\n    \"\"\"\n    import re\n    m = re.search(regexp, s)\n    if m:\n        return m.groups()\n    return ('',) * num_of_groups(regexp)\n</code>\n</pre>\n", "senID": 3}, {"text": ["This allows me to do stuff like:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n first, last, phone = groups(r'(\\w+) (\\w+) ([\\d\\-]+)', 'John Doe 555-3456')\n</code>\n</pre>\n", "senID": 5}, {"text": ["However, I don't know how to implement num_of_groups.", "(Currently I just work around it."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "num_of_groups", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["EDIT: Following the advice from rslite, I replaced re.findall with re.search. "], "childNum": 4, "tag": "p", "senID": 7, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/127055/find-out-number-of-capture-groups-in-python-regular-expressions/127089#127089", "text": "advice from rslite", "childNum": 0, "tag": "a", "childList": []}, {"text": "re.findall", "childNum": 0, "tag": "code", "childList": []}, {"text": "re.search", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["sre_parse seems like the most robust and comprehensive solution, but requires tree traversal and appears to be a bit heavy."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "sre_parse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["MizardX's regular expression seems to cover all bases, so I'm going to go with that."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]