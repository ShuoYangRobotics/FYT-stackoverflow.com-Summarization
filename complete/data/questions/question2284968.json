[{"text": ["Do all dynamic languages have the circular import issue?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["For the following Python code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["first.py"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "first.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # first.py\nfrom second import Second\n\nclass First:\n    def __init__(self):\n        print 'Second'\n</code>\n</pre>\n", "senID": 3}, {"text": ["second.py"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "second.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # second.py\nfrom first import First\n\nclass Second:\n    def __init__(self):\n        print 'Second'\n</code>\n</pre>\n", "senID": 5}, {"text": ["After creating the files and running the following from the shell:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n python first.py\n</code>\n</pre>\n", "senID": 7}, {"text": ["I get the error: ImportError: cannot import name Second"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "ImportError: cannot import name Second", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Do other dynamic languages like Ruby have this kind of issue?", "The reason I'm asking is because I'm encountering this issue in a Django project where 2 models depend on each other.", "I know that the possible solutions are re-designing the project or import on demand.", "I just want to know if devs in other dynamic languages have experienced this issue."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]