[{"text": ["Writing a generalized function for both strings and lists in python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["So i'm green as grass and learning programming from How to think like a computer scientist: Learn python 3.", "I'm able to answer the question (see below) but fear i'm missing the lesson. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "How to think like a computer scientist: Learn python 3", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://openbookproject.net/thinkcs/python/english3e/lists.html"}]}, {"text": ["Write a function (called insert_at_end) that will pass (return the bold given the two arguments before) for all three:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n test(insert_at_end(5, [1, 3, 4, 6]), **[1, 3, 4, 6, 5]**)\ntest(insert_at_end('x', 'abc'),  **'abcx'**)\ntest(insert_at_end(5, (1, 3, 4, 6)), **(1, 3, 4, 6, 5)**)\n</code>\n</pre>\n", "senID": 3}, {"text": ["The book gives this hint:\"These exercises illustrate nicely that the sequence abstraction is general, (because slicing, indexing, and concatenation are so general), so it is possible to write general functions that work over all sequence types.", "\"."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "because slicing, indexing, and concatenation", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["This version doesn't have solutions on-line (that i could find) but in I found someone's answers to a previous version of the text (for python 2.7) and they did it this way:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def encapsulate(val, seq):\n    if type(seq) == type(\"\"):\n        return str(val)\n    if type(seq) == type([]):\n        return [val]\n    return (val,)\n\ndef insert_at_end(val, seq): \n    return seq + encapsulate(val, seq)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Which seems to be solving the question by distinguishing between lists and strings... going against the hint.", "So how about it Is there a way to answer the question (and about 10 more similar ones) without distinguishing?", "i.e not using \"type()\" "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]