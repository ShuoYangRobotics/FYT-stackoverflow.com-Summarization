[{"text": ["Ruby's tap idiom in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["There is a useful Ruby idiom that uses tap which allows you to create an object, do some operations on it and return it (I use a list here only as an example, my real code is more involved):"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "tap", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def foo\n  [].tap do |a|\n    b = 1 + 2\n    # ... and some more processing, maybe some logging, etc.\n    a &lt;&lt; b\n  end\nend\n\n&gt;&gt; foo\n=&gt; [1]\n</code>\n</pre>\n", "senID": 2}, {"text": ["With Rails there's a similar method called returning, so you can write:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "returning", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def foo\n  returning([]) do |a|\n    b = 1 + 2\n    # ... and some more processing, maybe some logging, etc.\n    a &lt;&lt; b\n  end\nend\n</code>\n</pre>\n", "senID": 4}, {"text": ["which speaks for itself.", "No matter how much processing you do on the object, it's still clear that it's the return value of the function."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["In Python I have to write:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def foo():\n  a = []\n  b = 1 + 2\n  # ... and some more processing, maybe some logging, etc.\n  a.append(b)\n  return a\n</code>\n</pre>\n", "senID": 7}, {"text": ["and I wonder if there is a way to port this Ruby idiom into Python.", "My first thought was to use with statement, but return with is not valid syntax."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "return with", "childNum": 0, "tag": "code", "childList": []}]}]