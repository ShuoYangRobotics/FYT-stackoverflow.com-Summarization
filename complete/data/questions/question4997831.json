[{"text": ["A way to pass milions of items in python to C program many times in rapid succesion"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've wrote a python script that need to pass millions of items to a C program and receive its output many times in a short period (pass from 1 up to 10 millions of vertices data (integer index and 2 float coords) rapidly 500 times, and each time the python script call the C program, i need to store the returned values in variables).", "I already implemented a way reading and writing text and or binary files, but it's slow and not smart(why write files to hdd while you don't need to store the data after the python script terminates?).", "I tried to use pipes, but for large data they gave me errors...", "So, by now i think the best way can be using the ability of ctypes to load functions in .dll\nSince i've never created a dll, i would like to know how to set it up (i know many ide have a template for this, but my wxdev-c++ crashes when i try to open it.", "Right now i'm downloading Code::Blocks )"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Can you tell me if the solution i'm starting to implement is right, or if there is a better solution?", "The 2 functions i need to call in python are these"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n void find_vertex(vertex *list, int len, vertex* lower, vertex* highter)\n{\n    int i;\n    *lower=list[0];\n    *highter=list[1];\n    for(i=0;i&lt;len;i++)\n    {\n        if ((list[i].x&lt;=lower-&gt;x) &amp;&amp; (list[i].y&lt;=lower-&gt;y))\n            *lower=list[i];\n        else\n        {\n            if ((list[i].x&gt;=highter-&gt;x) &amp;&amp; (list[i].y&gt;=highter-&gt;y))\n                *highter=list[i];\n        }\n    }\n}\n</code>\n</pre>\n", "senID": 3}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n vertex *square_list_of_vertex(vertex *list,int len,vertex start, float size)\n{\n    int i=0,a=0;\n    unsigned int *num;\n    num=(int*)malloc(sizeof(unsigned int)*len);\n    if (num==NULL)\n    {\n        printf(\"Can't allocate the memory\");\n        return 0;\n    }\n    //controlls which points are in the right position and adds their index from the main list in another list\n    for(i=0;i&lt;len;i++)\n    {\n        if ((list[i].x-start.x)&lt;size &amp;&amp; (list[i].y-start.y&lt;size))\n        {\n            if (list[i].y-start.y&gt;-size/100)\n            {\n                num[a]=i;\n                a++;//len of the list to return\n            }\n        }\n    }\n\n    //create the list with the right vertices\n    vertex *retlist;\n    retlist=(vertex*)malloc(sizeof(vertex)*(a+1));\n    if (retlist==NULL)\n    {\n        printf(\"Can't allocate the memory\");\n        return 0;\n    }\n    //the first index is used only as an info container\n    vertex infos;\n    infos.index=a+1;\n    retlist[0]=infos;\n\n    //set the value for the return pointer\n    for(i=1;i&lt;=a;i++)\n    {\n        retlist[i]=list[num[i-1]];\n    }\n\n    return retlist;\n}\n</code>\n</pre>\n", "senID": 5}, {"text": ["EDIT:\nforgot to post the type defintion of vertex"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n typedef struct{\n    int index;\n    float x,y;\n} vertex;\n</code>\n</pre>\n", "senID": 7}, {"text": ["EDIT2:\nI'll redistribute the code, so i prefer not to use external modules in python and external programs in C. Alsa i want try to keep the code cross platform.", "The script is an addon for a 3D app, so the less it uses external \"stuff\" the better it is."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]