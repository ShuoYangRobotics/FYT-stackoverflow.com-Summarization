[{"text": ["How do I duplicate sys.stdout to a log file in python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Edit: Since it appears that there's either no solution, or I'm doing something so non-standard that nobody knows - I'll revise my question to also ask: What is the best way to accomplish logging when a python app is making a lot of system calls?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My app has two modes.", "In interactive mode, I want all output to go to the screen as well as to a log file, including output from any system calls.", "In daemon mode, all output goes to the log.", "Daemon mode works great using os.dup2().", "I can't find a way to \"tee\" all output to a log in interactive mode, without modifying each and every system call."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "hr", "senID": 3}, {"text": ["In other words, I want the functionality of the command line 'tee' for any output generated by a python app, including system call output."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "including system call output", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["To clarify: "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["To redirect all output I do something like this, and it works great:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n # open our log file\nso = se = open(\"%s.log\" % self.name, 'w', 0)\n\n# re-open stdout without buffering\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\n# redirect stdout and stderr to the log file opened above\nos.dup2(so.fileno(), sys.stdout.fileno())\nos.dup2(se.fileno(), sys.stderr.fileno())\n</code>\n</pre>\n", "senID": 7}, {"text": ["The nice thing about this is that it requires no special print calls from the rest of the code.", "The code also runs some shell commands, so it's nice not having to deal with each of their output individually as well."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Simply, I want to do the same, except duplicate instead of redirect."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "duplicate", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["At first blush, I thought that simply reversing the dup2's should work.", "Why doesn't it?", "Here's my test: "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n import os, sys\n\n### my broken solution:\nso = se = open(\"a.log\", 'w', 0)\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\nos.dup2(sys.stdout.fileno(), so.fileno())\nos.dup2(sys.stderr.fileno(), se.fileno())\n###\n\nprint \"kljhf sdf\"\n\nos.spawnve(\"P_WAIT\", \"/bin/ls\", [\"/bin/ls\"], {})\nos.execve(\"/bin/ls\", [\"/bin/ls\"], os.environ)\n</code>\n</pre>\n", "senID": 11}, {"text": ["The file \"a.log\" should be identical to what was displayed on the screen."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]