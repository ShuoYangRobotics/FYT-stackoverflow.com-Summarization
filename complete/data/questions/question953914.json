[{"text": ["how to program functions with alternative return value signatures in python?", "(next() for alternative iterators)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["e.g.", "so that these would both work - is it possible?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n (val,VAL2) = func(args) \nval = func(args)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Where val is not a tuple"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "val", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "not a tuple", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["For example I'd like these to work for my custom object something"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "something", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for item in something:\n    do_item(item) #where again item - is not a tuple\n\nfor (item,key) in something:\n    do_more(key,item)\n</code>\n</pre>\n", "senID": 5}, {"text": ["I thought that I need to implement next() function in two different ways... "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["edit: as follows from the answers below, this should not really be done."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]