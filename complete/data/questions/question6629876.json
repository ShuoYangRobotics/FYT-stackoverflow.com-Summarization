[{"text": ["How to make an anonymous function in Python without Christening it?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Is it possible to put a function in a data structure, without first giving it a name with def?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "def", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # This is the behaviour I want. Prints \"hi\".\ndef myprint(msg):\n    print msg\nf_list = [ myprint ]\nf_list[0]('hi')\n# The word \"myprint\" is never used again. Why litter the namespace with it?\n</code>\n</pre>\n", "senID": 2}, {"text": ["The body of a lambda function is severely limited, so I can't use them. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Edit: For reference, this is more like the real-life code where I encountered the problem."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def handle_message( msg ):\n    print msg\ndef handle_warning( msg ):\n    global num_warnings, num_fatals\n    num_warnings += 1\n    if ( is_fatal( msg ) ):\n        num_fatals += 1\nhandlers = (\n    ( re.compile( '^&lt;\\w+&gt; (.*)' ), handle_message ),\n    ( re.compile( '^\\*{3} (.*)' ), handle_warning ),\n)\n# There are really 10 or so handlers, of similar length.\n# The regexps are uncomfortably separated from the handler bodies,\n# and the code is unnecessarily long.\n\nfor line in open( \"log\" ):\n    for ( regex, handler ) in handlers:\n        m = regex.search( line )\n        if ( m ): handler( m.group(1) )\n</code>\n</pre>\n", "senID": 5}]