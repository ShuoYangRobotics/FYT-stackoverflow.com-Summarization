[{"text": ["__getattr__ on a module"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["How can implement the equivalent of a __getattr__ on a class, on a module?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "__getattr__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Example"], "childNum": 0, "tag": "h2", "senID": 2, "childList": []}, {"text": ["When calling a function that does not exist in a module's statically defined attributes, I wish to create an instance of a class in that module, and invoke the method on it with the same name as failed in the attribute lookup on the module."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class A(object):\n    def salutation(self, accusative):\n        print \"hello\", accusative\n\n# note this function is intentionally on the module, and not the class above\ndef __getattr__(mod, name):\n    return getattr(A(), name)\n\nif __name__ == \"__main__\":\n    # i hope here to have my __getattr__ function above invoked, since\n    # salutation does not exist in the current namespace\n    salutation(\"world\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["Which gives:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n matt@stanley:~/Desktop$ python getattrmod.py \nTraceback (most recent call last):\n  File \"getattrmod.py\", line 9, in &lt;module&gt;\n    salutation(\"world\")\nNameError: name 'salutation' is not defined\n</code>\n</pre>\n", "senID": 6}]