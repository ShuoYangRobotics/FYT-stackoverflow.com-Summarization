[{"text": ["Accurate timestamping in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've been building an error logging app recently and was after a way of accurately timestamping the incoming data.", "When I say accurately I mean each timestamp should be accurate relative to each other (no need to sync to an atomic clock or anything like that)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I've been using datetime.now() as a first stab, but this isn't perfect:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i in range(0,1000):\n...     datetime.datetime.now()\n...\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 562000)\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 562000)\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 562000)\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 562000)\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 578000)\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 578000)\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 578000)\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 578000)\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 578000)\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 609000)\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 609000)\ndatetime.datetime(2008, 10, 1, 13, 17, 27, 609000)\netc.\n</code>\n</pre>\n", "senID": 3}, {"text": ["The changes between clocks for the first second of samples looks like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n uSecs    difference\n562000  \n578000  16000\n609000  31000\n625000  16000\n640000  15000\n656000  16000\n687000  31000\n703000  16000\n718000  15000\n750000  32000\n765000  15000\n781000  16000\n796000  15000\n828000  32000\n843000  15000\n859000  16000\n890000  31000\n906000  16000\n921000  15000\n937000  16000\n968000  31000\n984000  16000\n</code>\n</pre>\n", "senID": 5}, {"text": ["So it looks like the timer data is only updated every ~15-32ms on my machine.", "The problem comes when we come to analyse the data because sorting by something other than the timestamp and then sorting by timestamp again can leave the data in the wrong order (chronologically).", "It would be nice to have the time stamps accurate to the point that any call to the time stamp generator gives a unique timestamp."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I had been considering some methods involving using a time.clock() call added to a starting datetime, but would appreciate a solution that would work accurately across threads on the same machine.", "Any suggestions would be very gratefully received."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]