[{"text": ["Matplotlib runs out of memory when plotting in a loop - EDITED"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a fairly simple plotting routine that looks like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import division\nimport datetime\nimport matplotlib\nmatplotlib.use('Agg')\nfrom matplotlib.pyplot import figure, plot, show, legend, close, savefig, rcParams\nimport numpy\nfrom globalconstants import *\n\n    def plotColumns(columnNumbers, t, out, showFig=False, filenamePrefix=None, saveFig=True, saveThumb=True):\n        lineProps = ['b', 'r', 'g', 'c', 'm', 'y', 'k', 'b--', 'r--', 'g--', 'c--', 'm--', 'y--', 'k--', 'g--', 'b.-', 'r.-', 'g.-', 'c.-', 'm.-', 'y.-', 'k.-']\n\n        rcParams['figure.figsize'] = (13,11)\n        for i in columnNumbers:\n            plot(t, out[:,i], lineProps[i])\n\n        legendStrings = list(numpy.zeros(NUMCOMPONENTS)) \n        legendStrings[GLUCOSE] = 'GLUCOSE'\n        legendStrings[CELLULOSE] = 'CELLULOSE'\n        legendStrings[STARCH] = 'STARCH'\n        legendStrings[ACETATE] = 'ACETATE'\n        legendStrings[BUTYRATE] = 'BUTYRATE'\n        legendStrings[SUCCINATE] = 'SUCCINATE'\n        legendStrings[HYDROGEN] = 'HYDROGEN'\n        legendStrings[PROPIONATE] = 'PROPIONATE'\n        legendStrings[METHANE] = \"METHANE\"\n\n        legendStrings[RUMINOCOCCUS] = 'RUMINOCOCCUS'\n        legendStrings[METHANOBACTERIUM] = \"METHANOBACTERIUM\"\n        legendStrings[BACTEROIDES] = 'BACTEROIDES'\n        legendStrings[SELENOMONAS] = 'SELENOMONAS'\n        legendStrings[CLOSTRIDIUM] = 'CLOSTRIDIUM'\n\n        legendStrings = [legendStrings[i] for i in columnNumbers]\n        legend(legendStrings, loc='best')\n\n        dt = datetime.datetime.now()\n        dtAsString = dt.strftime('%d-%m-%Y_%H-%M-%S')\n\n        if filenamePrefix is None:\n            filenamePrefix = ''\n\n        if filenamePrefix != '' and filenamePrefix[-1] != '_':\n            filenamePrefix += '_'\n\n        if saveFig: \n            savefig(filenamePrefix+dtAsString+'.eps')\n\n        if saveThumb:\n            savefig(filenamePrefix+dtAsString+'.png', dpi=300)\n\n\n        if showFig: f.show()\n\n        close('all')\n</code>\n</pre>\n", "senID": 2}, {"text": ["When I plot this in single iterations, it works fine.", "However, the moment I put it in a loop, matplotlib throws a hissy fit..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n Traceback (most recent call last):\n  File \"c4hm_param_variation_h2_conc.py\", line 148, in &lt;module&gt;\n    plotColumns(columnNumbers, timeVector, out, showFig=False, filenamePrefix='c\n4hm_param_variation_h2_conc_'+str(hydrogen_conc), saveFig=False, saveThumb=True)\n\n  File \"D:\\phdproject\\alexander paper\\python\\v3\\plotcolumns.py\", line 48, in plo\ntColumns\n    savefig(filenamePrefix+dtAsString+'.png', dpi=300)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\pyplot.py\", line 356, in savefi\ng\n    return fig.savefig(*args, **kwargs)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\figure.py\", line 1032, in savef\nig\n    self.canvas.print_figure(*args, **kwargs)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 1476, i\nn print_figure\n    **kwargs)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py\", line\n358, in print_png\n    FigureCanvasAgg.draw(self)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py\", line\n314, in draw\n    self.figure.draw(self.renderer)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\artist.py\", line 46, in draw_wr\napper\n    draw(artist, renderer, *kl)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\figure.py\", line 773, in draw\n    for a in self.axes: a.draw(renderer)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\artist.py\", line 46, in draw_wr\napper\n    draw(artist, renderer, *kl)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\axes.py\", line 1735, in draw\n    a.draw(renderer)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\artist.py\", line 46, in draw_wr\napper\n    draw(artist, renderer, *kl)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\legend.py\", line 374, in draw\n    bbox = self._legend_box.get_window_extent(renderer)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 209, in get\n_window_extent\n    px, py = self.get_offset(w, h, xd, yd)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\offsetbox.py\", line 162, in get\n_offset\n    return self._offset(width, height, xdescent, ydescent)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\legend.py\", line 360, in findof\nfset\n    return _findoffset(width, height, xdescent, ydescent, renderer)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\legend.py\", line 325, in _findo\nffset_best\n    ox, oy = self._find_best_position(width, height, renderer)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\legend.py\", line 817, in _find_\nbest_position\n    verts, bboxes, lines = self._auto_legend_data()\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\legend.py\", line 669, in _auto_\nlegend_data\n    tpath = trans.transform_path(path)\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\transforms.py\", line 1911, in t\nransform_path\n    self._a.transform_path(path))\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\transforms.py\", line 1122, in t\nransform_path\n    return Path(self.transform(path.vertices), path.codes,\n  File \"C:\\Python25\\lib\\site-packages\\matplotlib\\transforms.py\", line 1402, in t\nransform\n    return affine_transform(points, mtx)\nMemoryError: Could not allocate memory for path\n</code>\n</pre>\n", "senID": 4}, {"text": ["This happens on iteration 2 (counting from 1), if that makes a difference.", "The code is running on Windows XP 32-bit with python 2.5 and matplotlib 0.99.1, numpy 1.3.0 and scipy 0.7.1."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["EDIT: The code has now been updated to reflect the fact that the crash actually occurs at the call to legend().", "Commenting that call out solves the problem, though obviously, I would still like to be able to put a legend on my graphs..."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "legend()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]