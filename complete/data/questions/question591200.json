[{"text": ["Can I use a decorator to mutate the local scope of a function in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Is there any way of writing a decorator such that the following would work?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n assert 'z' not in globals()\n\n@my_decorator\ndef func(x, y):\n   print z\n</code>\n</pre>\n", "senID": 2}, {"tag": "hr", "senID": 3}, {"text": ["EDIT: moved from anwser"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["In answer to hop's \"why?", "\": syntax sugar / DRY."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["It's not about caching, it's about calculating z (and z1, z2, z3, ...) based upon the values of x &amp; y."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I have lots of functions which do related things, and I don't want to do have to write"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n z1, z2, z3=calculate_from(x, y)\n</code>\n</pre>\n", "senID": 8}, {"text": ["at the beginning of every single function - I'll get it wrong somewhere.", "If this were c I'd do this with cpp (if this were lisp, I'd do this with macros ...), but I wanted to see if decorators could do the same thing."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["If it helps, I'd almost certainly call the decorator \"precalculate_z\", and it certainly wouldn't be part of any public API."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["I could probably get a similar effect from using the class infrastructure as well, but I wanted to see if it was doable with raw functions."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]