[{"text": ["Daemonizing python's BaseHTTPServer"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am working on a daemon where I need to embed a HTTP server.", "I am attempting to do it with  BaseHTTPServer, which when I run it in the foreground, it works fine, but when I try and fork the daemon into the background, it stops working.", "My main application continues to work, but BaseHTTPServer does not."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I believe this has something to do with the fact that BaseHTTPServer sends log data to STDOUT and STDERR.", "I am redirecting those to files.", "Here is the code snippet:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n # Start the HTTP Server\nserver = HTTPServer((config['HTTPServer']['listen'],config['HTTPServer']['port']),HTTPHandler)\n\n# Fork our process to detach if not told to stay in foreground\nif options.foreground is False:\n    try:\n        pid = os.fork()\n        if pid &gt; 0:\n            logging.info('Parent process ending.')\n            sys.exit(0)            \n    except OSError, e:\n        sys.stderr.write(\"Could not fork: %d (%s)\\n\" % (e.errno, e.strerror))\n        sys.exit(1)\n\n    # Second fork to put into daemon mode\n    try: \n        pid = os.fork() \n        if pid &gt; 0:\n            # exit from second parent, print eventual PID before\n            print 'Daemon has started - PID # %d.' % pid\n            logging.info('Child forked as PID # %d' % pid)\n            sys.exit(0) \n    except OSError, e: \n        sys.stderr.write(\"Could not fork: %d (%s)\\n\" % (e.errno, e.strerror))\n        sys.exit(1)\n\n\n    logging.debug('After child fork')\n\n    # Detach from parent environment\n    os.chdir('/') \n    os.setsid()\n    os.umask(0) \n\n    # Close stdin       \n    sys.stdin.close()\n\n    # Redirect stdout, stderr\n    sys.stdout = open('http_access.log', 'w')\n    sys.stderr = open('http_errors.log', 'w')    \n\n# Main Thread Object for Stats\nthreads = []\n\nlogging.debug('Kicking off threads')\n\nwhile ...\n  lots of code here\n...\n\nserver.serve_forever()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Am I doing something wrong here or is BaseHTTPServer somehow prevented from becoming daemonized? "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Edit: Updated code to demonstrate the additional, previously missing code flow and that log.debug shows in my forked, background daemon I am hitting code after fork."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]