[{"text": ["How come my class is behaving like a static class?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["i have a module (a single .py file, actually), with a class called HashedDir."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["when i import the file and instanciate 2 instances of that class, when i check the object's fields they're always the same, even if the two objects should be different."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Eg:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n h1 = HashedDir('/path/to/dir')\n print h1.getList()['files'] # /path/to/dir\n h2 = HashedDir('some/other/path')\n print h1.getList()['files'] # some/other/path\n print h2.getList()['files'] # some/other/path\n</code>\n</pre>\n", "senID": 4}, {"text": ["Any idea?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["This is the class:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n from os  import walk\nfrom os import path\nfrom hashlib import md5\nimport re\n\nclass HashedDir:\n    \"\"\"\n    A list of files with associated md5 hashes generated retrieving thou\n    a recursive walk in the directory tree starting from a provided root\n    directory. Also stores the dirs in each dir\n    \"\"\"\n\n    #  {'files': [\n    #    ('/path/to/file1', '52bc309e11259af15e4623c7a0abc28c'),\n    #    ('/path/to/file2', '52bc309e11259af15e4623c7a0abc28c'),\n    #    ('/path/to/dir/file3', '52bc309e11259af15e4623c7a0abc28c')\n    #   ],\n    #   'dirs': ['/path/to/dir1', '/path/to/dir2']\n    #  }\n    fileList = {'files': [], 'dirs': []}\n    ignoreList = []\n\n    def __init__(self, rootDir, ignoreList=[]):\n        \"\"\"\n        ignoreList is a list of regular expressions. If a file or a dir matches\n        that regular expression, don't count it\n        \"\"\"\n        self.ignoreList = ignoreList\n\n        for dirpath, dirnames, filenames in walk(rootDir):\n            for fileName in filenames:\n                completeName = path.join(dirpath,fileName)\n                hash = md5(open(completeName).read()).hexdigest()\n                relativePath = self._relativePath(completeName, rootDir)\n                if not self._toBeIgnored(relativePath):\n                    self.fileList['files'].append((relativePath, hash))\n            for dirName in dirnames:\n                completeName = path.join(dirpath, dirName)\n                relativePath = self._relativePath(completeName, rootDir)\n                if not self._toBeIgnored(relativePath):\n                    self.fileList['dirs'].append(relativePath)\n\n    def _relativePath(self, path, base):\n        return path.replace(base, '')\n\n    def _toBeIgnored(self, path):\n        for regex in self.ignoreList:\n            if re.compile(regex).search(path) != None:\n                return True\n        return False\n\n    def getList(self):\n        return self.fileList\n</code>\n</pre>\n", "senID": 7}, {"text": ["Thanks in advance"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]