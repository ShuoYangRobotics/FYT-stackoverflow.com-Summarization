[{"text": ["How to create a letter progression for a variable in a loop in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am trying to change a variable (lett) to the next letter in the alphabet on each iteration of a loop.", "I have to also be able to set this variable at the beginning of the script to a certain letter (and the initial letter will vary depending on the use of the script).", "I started with creating the following bit of code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Initial script (when I was still learning):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n while lett_trig == 2:\n    if set_lett == 2:\n        lett = \"a\"\n    if set_lett == 3:\n        lett = \"b\"\n    if set_lett == 4:\n        lett = \"c\"\n    if set_lett == 5:\n        lett = \"d\"\n    if set_lett == 6:\n        lett = \"e\"\n    if set_lett == 7:\n        lett = \"f\"\n    if set_lett == 8:\n        lett = \"g\"\n    if set_lett == 9:\n        lett = \"h\"\n#... and this goes on till it reaches if set_let == 27: lett = \"z\"\n\n    set_lett += 1\n    if set_lett == 28:\n        set_lett = 2\n    print lett\n\n# set_lett starts at two because I left set_lett == 1 to create a space (\" \")\n</code>\n</pre>\n", "senID": 3}, {"text": ["This is of course a simplification of a larger script.", "This is the only simplification I could come up with: "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "This is the only simplification I could come up with:", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n lett_trig = 2\nx = 0\n\na = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n\nwhile lett_trig == 2:\n    lett = a[x]\n    x += 1\n    if x == 26:\n        x = 0\n</code>\n</pre>\n", "senID": 5}, {"text": ["Is there any other way to mathematically change from one letter to another?", "Through some binary conversion operation?", "or is the list-way the most efficient?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Answer: after going through all the answers and testing them for efficiency, I found the dict function to be the fastest (and cleanest).", "An example of the code:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n import string\n\nletter_map = dict(zip(string.ascii_lowercase, string.ascii_lowercase[1:] + string.ascii_lowercase[0]))\nlett1 = \"d\"\n\nwhile ord(lett2) &lt; 122:\n    print lett1\n    lett1 = letter_map[lett1]\n</code>\n</pre>\n", "senID": 8}]