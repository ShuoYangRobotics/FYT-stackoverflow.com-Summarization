[{"text": ["Code Golf: Finite-state machine!"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Finite state machine"], "childNum": 0, "tag": "h2", "senID": 1, "childList": []}, {"text": ["A deterministic finite state machine is a simple computation model, widely used as an introduction to automata theory in basic CS courses.", "It is a simple model, equivalent to regular expression, which determines of a certain input string is Accepted or Rejected.", "Leaving some formalities aside, A run of a finite state machine is composed of:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "Accepted", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "Rejected", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "Leaving some formalities aside", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Finite-state_machine#Mathematical_model"}]}, {"text": ["A run on the machine begins at the starting state.", "Each letter of the input string is read; If there is a transition between the current state and another state which corresponds to the letter, the current state is changed to the new state.", "After the last letter was read, if the current state is an accepting state, the input string is accepted.", "If the last state was not an accepting state, or a letter had no corresponding arch from a state during the run, the input string is rejected."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "run", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Note: This short descruption is far from being a full, formal definition of a FSM; Wikipedia's fine article is a great introduction to the subject."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Wikipedia's fine article", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Finite-state_machine#Mathematical_model"}]}, {"text": ["Example"], "childNum": 0, "tag": "h2", "senID": 5, "childList": []}, {"text": ["For example, the following machine tells if a binary number, read from left to right, has an even number of 0s:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"src": "http://i.stack.imgur.com/fDBWN.png", "tag": "img", "senID": 7}, {"text": ["The rules:"], "childNum": 0, "tag": "h2", "senID": 8, "childList": []}, {"text": ["Implement a FSM in a language of your choice. "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["The FSM should accept the following input:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n &lt;States&gt;       List of state, separated by space mark.\n               The first state in the list is the start state.\n               Accepting states begin with a capital letter.\n&lt;transitions&gt;  One or more lines. \n               Each line is a three-tuple:\n               origin state, letter, destination state)\n&lt;input word&gt;   Zero or more characters, followed by a newline.\n</code>\n</pre>\n", "senID": 11}, {"text": ["For example, the aforementioned machine with 1001010 as an input string, would be written as:"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "1001010", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n S1 s2\nS1 0 s2\nS1 1 S1\ns2 0 S1\ns2 1 s2\n1001010\n</code>\n</pre>\n", "senID": 13}, {"text": ["The FSM's run, written as &lt;State&gt; &lt;letter&gt; -&gt; &lt;state&gt;, followed by the final state.", "The output for the example input would be:"], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "&lt;State&gt; &lt;letter&gt; -&gt; &lt;state&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n S1 1 -&gt; S1\nS1 0 -&gt; s2\ns2 0 -&gt; S1\nS1 1 -&gt; S1\nS1 0 -&gt; s2\ns2 1 -&gt; s2\ns2 0 -&gt; S1\nACCEPT\n</code>\n</pre>\n", "senID": 15}, {"text": ["For the empty input '':"], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "''", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n S1\nACCEPT\n</code>\n</pre>\n", "senID": 17}, {"text": ["Note: Following your comments, the S1 line (showing the first state) might be omitted, and the following output is also acceptable:"], "childNum": 2, "tag": "p", "senID": 18, "childList": [{"text": "Note:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "S1", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n ACCEPT\n</code>\n</pre>\n", "senID": 19}, {"text": ["For 101:"], "childNum": 1, "tag": "p", "senID": 20, "childList": [{"text": "101", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n S1 1 -&gt; S1\nS1 0 -&gt; s2\ns2 1 -&gt; s2\nREJECT\n</code>\n</pre>\n", "senID": 21}, {"text": ["For '10X':"], "childNum": 1, "tag": "p", "senID": 22, "childList": [{"text": "'10X'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n S1 1 -&gt; S1\nS1 0 -&gt; s2\ns2 X\nREJECT\n</code>\n</pre>\n", "senID": 23}, {"text": ["A 250 rep bounty will be given to the shortest solution."], "childNum": 0, "tag": "p", "senID": 24, "childList": []}, {"text": ["Reference implementation"], "childNum": 0, "tag": "h2", "senID": 25, "childList": []}, {"text": ["A reference Python implementation is available here.", "Note that output requirements have been relaxed for empty-string input."], "childNum": 1, "tag": "p", "senID": 26, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://friendpaste.com/58v7LrH0bGqC4b23QjYdDv"}]}, {"text": ["Output format"], "childNum": 0, "tag": "h2", "senID": 27, "childList": []}, {"text": ["Following popular demand, the following output is also acceptable for empty input string:"], "childNum": 0, "tag": "p", "senID": 28, "childList": []}, {"code": "<pre>\n<code>\n ACCEPT\n</code>\n</pre>\n", "senID": 29}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 30, "childList": []}, {"code": "<pre>\n<code>\n REJECT\n</code>\n</pre>\n", "senID": 31}, {"text": ["Without the first state written in the previous line."], "childNum": 0, "tag": "p", "senID": 32, "childList": []}, {"text": ["State names"], "childNum": 0, "tag": "h2", "senID": 33, "childList": []}, {"text": ["Valid state names are an English letter followed by any number of letters, _ and digits, much like variable names, e.g.", "State1, state0, STATE_0."], "childNum": 4, "tag": "p", "senID": 34, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "State1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "state0", "childNum": 0, "tag": "code", "childList": []}, {"text": "STATE_0", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Input format"], "childNum": 0, "tag": "h2", "senID": 35, "childList": []}, {"text": ["Like most code golfs, you can assume your input is correct."], "childNum": 0, "tag": "p", "senID": 36, "childList": []}, {"text": ["Summary of answers:"], "childNum": 0, "tag": "h2", "senID": 37, "childList": []}, {"tag": "ul", "num": 13, "lis": [{"text": "Cobol - ", "tag": "none", "senID": 38}, {"text": "Python - ", "tag": "none", "senID": 39}, {"text": "sed - ", "tag": "none", "senID": 40}, {"text": "ruby - ", "tag": "none", "senID": 41}, {"text": "Haskell - ", "tag": "none", "senID": 42}, {"text": "LISP - ", "tag": "none", "senID": 43}, {"text": "Perl - ", "tag": "none", "senID": 44}, {"text": "Bash - ", "tag": "none", "senID": 45}, {"text": "Rexx - ", "tag": "none", "senID": 46}, {"text": "Lua - ", "tag": "none", "senID": 47}, {"text": "F# - ", "tag": "none", "senID": 48}, {"text": "C# - ", "tag": "none", "senID": 49}, {"text": ["Mixal"], "childNum": 0, "tag": "a", "senID": 50, "childList": []}]}, {"text": ["The sed137 solution is the shortest, ruby 145 is #2.", "Currently, I can't get the sed solution to work:"], "childNum": 3, "tag": "p", "senID": 51, "childList": [{"text": "sed137 solution", "tag": "a", "pos": 0, "childList": [{"text": "sed", "tag": "code"}], "childNum": 1, "href": "http://stackoverflow.com/questions/4661818/code-golf-finite-state-machine/4687779#4687779"}, {"text": "sed", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://stackoverflow.com/questions/4661818/code-golf-finite-state-machine/4723235#4723235", "text": "ruby 145", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n cat test.fsm | sed -r solution.sed\nsed -r solution.sed test.fsm\n</code>\n</pre>\n", "senID": 52}, {"text": ["both gave me:"], "childNum": 0, "tag": "p", "senID": 53, "childList": []}, {"code": "<pre>\n<code>\n sed: -e expression #1, char 12: unterminated `s' command\n</code>\n</pre>\n", "senID": 54}, {"text": ["so unless It there are clarifications the bounty goes to the ruby solution."], "childNum": 0, "tag": "p", "senID": 55, "childList": []}]