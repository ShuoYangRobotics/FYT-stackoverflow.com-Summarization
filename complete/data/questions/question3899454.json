[{"text": ["Restore Python class to original state"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a class where I add some attributes dynamically and at some point I want to restore the class to it's pristine condition without the added attributes."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The sistuation:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n  pass\n\nFoo.x = 1\n# &lt;insert python magic here&gt;\no = Foo() # o should not have any of the previously added attributes\nprint o.x # Should raise exception\n</code>\n</pre>\n", "senID": 3}, {"text": ["My initial thought was to create a copy of the original class:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class _Foo(object):\n  pass\n\nFoo = _Foo\nFoo.x = 1\nFoo = _Foo # Clear added attributes\no = Foo()\nprint o.x # Should raise exception\n</code>\n</pre>\n", "senID": 5}, {"text": ["But since Foo is just a reference to _Foo any attributes get added to the original _Foo as well.", "I also tried"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n Foo = copy.deepcopy(_Foo)\n</code>\n</pre>\n", "senID": 7}, {"text": ["in case that would help but apparently it does not."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["clarification:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "clarification", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The user should not need to care about how the class is implemented.", "It should, therefore, have the same features of a \"normally defined\" class, i.e.", "introspection, built-in help, subclassing, etc.", "This pretty much rules out anything based on __getattr__"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "__getattr__", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}]