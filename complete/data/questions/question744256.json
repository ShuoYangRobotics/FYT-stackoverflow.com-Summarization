[{"text": ["Reading Huge File in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a 384MB text file with 50 million lines.", "Each line contains 2 space-separated integers: a key and a value.", "The file is sorted by key.", "I need an efficient way of looking up the values of a list of about 200 keys in Python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My current approach is included below.", "It takes 30 seconds.", "There must be more efficient Python foo to get this down to a reasonable efficiency of a couple of seconds at most."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n # list contains a sorted list of the keys we need to lookup\n# there is a sentinel at the end of list to simplify the code\n# we use pointer to iterate through the list of keys\nfor line in fin:\n  line = map(int, line.split())\n  while line[0] == list[pointer].key:\n    list[pointer].value = line[1]\n    pointer += 1\n  while line[0] &gt; list[pointer].key:\n    pointer += 1\n  if pointer &gt;= len(list) - 1:\n    break # end of list; -1 is due to sentinel\n</code>\n</pre>\n", "senID": 3}, {"text": ["Coded binary search + seek solution (thanks kigurai!", "):"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n entries = 24935502 # number of entries\nwidth   = 18       # fixed width of an entry in the file padded with spaces\n                   # at the end of each line\nfor i, search in enumerate(list): # list contains the list of search keys\n  left, right = 0, entries-1 \n  key = None\n  while key != search and left &lt;= right:\n    mid = (left + right) / 2\n    fin.seek(mid * width)\n    key, value = map(int, fin.readline().split())\n    if search &gt; key:\n      left = mid + 1\n    else:\n      right = mid - 1\n  if key != search:\n    value = None # for when search key is not found\n  search.result = value # store the result of the search\n</code>\n</pre>\n", "senID": 5}]