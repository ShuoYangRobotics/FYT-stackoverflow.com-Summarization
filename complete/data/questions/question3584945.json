[{"text": ["non-technical benefits of having string-type immutable"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am wondering about the benefits of having the string-type immutable from the programmers point-of-view."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Technical benefits (on the compiler/language side) can be summarized mostly that it is easier to do optimisations if the type is immutable.", "Read here for a related question."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2916358/immutable-strings-vs-stdstring"}]}, {"text": ["Also, in a mutable string type, either you have thread-safety already built-in (then again, optimisations are harder to do) or you have to do it yourself.", "You will have in any case the choice to use a mutable string type with built-in thread safety, so that is not really an advantage of immutable string-types.", "(Again, it will be easier to do the handling and optimisations to ensure thread-safety on the immutable type but that is not the point here."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["But what are the benefits of immutable string-types in the usage?", "What is the point of having some types immutable and others not?", "That seems very inconsistent to me."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["In C++, if I want to have some string to be immutable, I am passing it as const reference to a function (const std::string&amp;).", "If I want to have a changeable copy of the original string, I am passing it as std::string.", "Only if I want to have it mutable, I am passing it as reference (std::string&amp;).", "So I just have the choice about what I want to do.", "I can just do this with every possible type."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "const std::string&amp;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "std::string", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "std::string&amp;", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["In Python or in Java, some types are immutable (mostly all primitive types and strings), others are not."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["In pure functional languages like Haskell, everything is immutable."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Is there a good reason why it make sense to have this inconsistency?", "Or is it just purely for technical lower level reasons?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]