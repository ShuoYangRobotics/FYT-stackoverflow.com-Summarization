[{"text": ["In managed code, how do I achieve good locality of reference?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Since RAM seems to be the new disk, and since that statement also means that access to memory is now considered slow similarly to how disk access has always been, I do want to maximize locality of reference in memory for high performance applications.", "For example, in a sorted index, I want adjacent values to be close (unlike say, in a hashtable), and I want the data the index is pointing to close by, too."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "the new disk", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.infoq.com/news/2008/06/ram-is-disk"}]}, {"text": ["In C, I can whip up a data structure with a specialized memory manager, like the developers of the (immensely complex) Judy array did.", "With direct control over the pointers, they even went so far as to encode additional information in the pointer value itself.", "When working in Python, Java or C#, I am deliberately one (or more) level(s) of abstraction away from this type of solution and I'm entrusting the JIT compilers and optimizing runtimes with doing clever tricks on the low levels for me."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Judy array", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://judy.sourceforge.net/"}]}, {"text": ["Still, I guess, even at this high level of abstraction, there are things that can be semantically considered \"closer\" and therefore are likely to be actually closer at the low levels.", "For example, I was wondering about the following (my guess in parentheses):"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "actually", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "Can I expect an array to be an adjacent block of memory (yes)?", "tag": "none", "senID": 4}, {"text": "Are two integers in the same instance closer than two in different instances of the same class (probably)?", "tag": "none", "senID": 5}, {"text": "Does an object occupy a contigous region in memory (no)?", "tag": "none", "senID": 6}, {"text": "What's the difference between an array of objects with only two ", "tag": "none", "senID": 7}]}, {"text": ["I started wondering about these in a Java context, but my wondering has become more general, so I'd suggest to not treat this as a Java question."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]