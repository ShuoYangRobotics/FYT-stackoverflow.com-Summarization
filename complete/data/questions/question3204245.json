[{"text": ["How do I convert a tuple of tuples to a one-dimensional list using list comprehension?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a tuple of tuples - for example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n tupleOfTuples = ((1, 2), (3, 4), (5,))\n</code>\n</pre>\n", "senID": 2}, {"text": ["I want to convert this into a flat, one-dimensional list of all the elements in order:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [1, 2, 3, 4, 5]\n</code>\n</pre>\n", "senID": 4}, {"text": ["I've been trying to accomplish this with list comprehension.", "But I can't seem to figure it out.", "I was able to accomplish it with a for-each loop:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n myList = []\nfor tuple in tupleOfTuples:\n   myList = myList + list(tuple)\n</code>\n</pre>\n", "senID": 6}, {"text": ["But I feel like there must be a way to do this with a list comprehension."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["A simple [list(tuple) for tuple in tupleOfTuples] just gives you a list of lists, instead of individual elements.", "I thought I could perhaps build on this by using the unpacking operator to then unpack the list, like so:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "[list(tuple) for tuple in tupleOfTuples]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [*list(tuple) for tuple in tupleOfTuples]\n</code>\n</pre>\n", "senID": 9}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n [*(list(tuple)) for tuple in tupleOfTuples]\n</code>\n</pre>\n", "senID": 11}, {"text": ["... but that didn't work.", "Any ideas?", "Or should I just stick to the loop?"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]