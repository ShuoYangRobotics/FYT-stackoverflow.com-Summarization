[{"text": ["Pythonic macro syntax"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've been working on an alternative compiler front-end for Python where all syntax is parsed via macros.", "I'm finally to the point with its development that I can start work on a superset of the Python language where macros are an integral component."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My problem is that I can't come up with a pythonic macro definition syntax.", "I've posted several examples in two different syntaxes in answers below.", "Can anyone come up with a better syntax?", "It doesn't have to build off the syntax I've proposed in any way -- I'm completely open here.", "Any comments, suggestions, etc would be helpful, as would alternative syntaxes showing the examples I've posted."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["A note about the macro structure, as seen in the examples I've posted:  The use of MultiLine/MLMacro and Partial/PartialMacro tell the parser how the macro is applied.", "If it's multiline, the macro will match multiple line lists; generally used for constructs.", "If it's partial, the macro will match code in the middle of a list; generally used for operators."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]