[{"text": ["How to properly use relative or absolute imports in Python modules?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Usage of relative imports in Python has one drawback, you will not be able to run the modules as standalones anymore because you will get an exception: ValueError: Attempted relative import in non-package"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "ValueError: Attempted relative import in non-package", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # /test.py: just a sample file importing foo module\nimport foo\n...\n\n# /foo/foo.py:\nfrom . import bar\n...\nif __name__ == \"__main__\":\n   pass\n\n# /foo/bar.py: a submodule of foo, used by foo.py\nfrom . import foo\n...\nif __name__ == \"__main__\":\n   pass\n</code>\n</pre>\n", "senID": 2}, {"text": ["How should I modify the sample code in order to be able to execute all: test.py, foo.py and bar.py"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "test.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "foo.py", "childNum": 0, "tag": "code", "childList": []}, {"text": "bar.py", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I'm looking for a solution that works with python 2.6+ (including 3.x)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]