[{"text": ["Python Encapsulate a function to Print to a variable"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["If I have a function that contains a lot of print statements:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["ie."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def funA():\n  print \"Hi\"\n  print \"There\"\n  print \"Friend\"\n  print \"!\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["What I want to do is something like this"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def main():\n  ##funA() does not print to screen here\n  a = getPrint(funA()) ##where getPrint is some made up function/object\n  print a ##prints what funA would normally print at this step\n</code>\n</pre>\n", "senID": 5}, {"text": ["So when funcA gets called it doesn't do any printing, instead it output to an object.", "I then print the object to get the result.", "Is there a way of doing this?", "I also do not want to touch the original function."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I hope it makes sense."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]