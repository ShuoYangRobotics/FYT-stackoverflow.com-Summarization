[{"text": ["dropping trailing '.0' from floats"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm looking for a  way to convert numbers to string format, dropping any redundant '.0' "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The input data is a mix of floats and strings.", "Desired output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["0   --> '0'"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["0.0 --> '0'"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["0.1 --> '0.1'"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["1.0 --> '1'"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I've come up with the following generator expression, but I wonder if there's a faster way:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n (str(i).rstrip('.0') if i else '0' for i in lst)\n</code>\n</pre>\n", "senID": 8}, {"text": ["The truth check is there to prevent 0 from becoming an empty string."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["EDIT: The more or less acceptable solution I have for now is this:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n ('%d'%i if i == int(i) else '%s'%i for i in lst)\n</code>\n</pre>\n", "senID": 11}, {"text": ["It just seems strange that there is no elegant way to handle this (fairly straightforward) case in python."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]