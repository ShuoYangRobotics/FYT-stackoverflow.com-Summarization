[{"text": ["Adding a generic image field onto a ModelForm in django"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have two models, Room and Image.", "Image is a generic model that can tack onto any other model.", "I want to give users a form to upload an image when they post information about a room.", "I've written code that works, but I'm afraid I've done it the hard way, and specifically in a way that violates DRY."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Room", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Image", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Image", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Was hoping someone who's a little more familiar with django forms could point out where I've gone wrong. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Update:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I've tried to clarify why I chose this design in comments to the current answers.", "To summarize: "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I didn't simply put an ImageField on the Room model because I wanted more than one image associated with the Room model.", "I chose a generic Image model because I wanted to add images to several different models.", "The alternatives I considered were were multiple foreign keys on a single Image class, which seemed messy, or multiple Image classes, which I thought would clutter my schema.", "I didn't make this clear in my first post, so sorry about that."], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "ImageField", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Room", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Image", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Image", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Seeing as none of the answers so far has addressed how to make this a little more DRY I did come up with my own solution which was to add the upload path as a class attribute on the image model and reference that every time it's needed."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n # Models\nclass Image(models.Model):\n    content_type = models.ForeignKey(ContentType)\n    object_id = models.PositiveIntegerField()\n    content_object = generic.GenericForeignKey('content_type', 'object_id')\n    image = models.ImageField(_('Image'),\n                                height_field='',\n                                width_field='',\n                                upload_to='uploads/images',\n                                max_length=200)\nclass Room(models.Model):\n    name = models.CharField(max_length=50)\n    image_set = generic.GenericRelation('Image') \n\n# The form\nclass AddRoomForm(forms.ModelForm):\n    image_1 = forms.ImageField()\n\n    class Meta:\n        model = Room\n\n# The view\ndef handle_uploaded_file(f):\n\n    # DRY violation, I've already specified the upload path in the image model\n    upload_suffix = join('uploads/images', f.name)\n    upload_path = join(settings.MEDIA_ROOT, upload_suffix)\n    destination = open(upload_path, 'wb+')\n    for chunk in f.chunks():\n        destination.write(chunk)\n    destination.close()\n    return upload_suffix\n\ndef add_room(request, apartment_id, form_class=AddRoomForm, template='apartments/add_room.html'):\n    apartment  = Apartment.objects.get(id=apartment_id)\n\n    if request.method == 'POST':\n        form = form_class(request.POST, request.FILES)\n        if form.is_valid():\n            room = form.save()\n            image_1 = form.cleaned_data['image_1']\n\n            # Instead of writing a special function to handle the image, \n            # shouldn't I just be able to pass it straight into Image.objects.create\n            # ...but it doesn't seem to work for some reason, wrong syntax perhaps?\n\n            upload_path = handle_uploaded_file(image_1)\n            image = Image.objects.create(content_object=room, image=upload_path)\n            return HttpResponseRedirect(room.get_absolute_url())\n    else:\n        form = form_class()\n    context = {'form': form, }\n    return direct_to_template(request, template, extra_context=context)\n</code>\n</pre>\n", "senID": 7}]