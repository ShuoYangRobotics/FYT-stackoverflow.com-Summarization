[{"text": ["How should a ZeroMQ worker safely \"hang up\"?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I started using ZeroMQ this week, and when using the Request-Response pattern I am not sure how to have a worker safely \"hang up\" and close his socket without possibly dropping a message and causing the customer who sent that message to never get a response.", "Imagine a worker written in Python who looks something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import zmq\nc = zmq.Context()\ns = c.socket(zmq.REP)\ns.connect('tcp://127.0.0.1:9999')\nwhile i in range(8):\n    s.recv()\n    s.send('reply')\ns.close()\n</code>\n</pre>\n", "senID": 2}, {"text": ["I have been doing experiments and have found that a customer at 127.0.0.1:9999 of socket type zmq.REQ who makes a fair-queued request just might have the misfortune of having the fair-queuing algorithm choose the above worker right after the worker has done its last send() but before it runs the following close() method.", "In that case, it seems that the request is received and buffered by the \u00d8MQ stack in the worker process, and that the request is then lost when close() throws out everything associated with the socket."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "127.0.0.1:9999", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "zmq.REQ", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "send()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "close()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "close()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["How can a worker detach \"safely\" \u2014 is there any way to signal \"I don't want messages anymore\", then (a) loop over any final messages that have arrived during transmission of the signal, (b) generate their replies, and then (c) execute close() with the guarantee that no messages are being thrown away?"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "close()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit: I suppose the raw state that I would want to enter is a \"half-closed\" state, where no further requests could be received \u2014 and the sender would know that \u2014 but where the return path is still open so that I can check my incoming buffer for one last arrived message and respond to it if there is one sitting in the buffer."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Edit: In response to a good question, corrected the description to make the number of waiting messages plural, as there could be many connections waiting on replies."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]