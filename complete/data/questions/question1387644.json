[{"text": ["Verify CSV against given format"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am expecting users to upload a CSV file of max size 1MB to a web form that should fit a given format similar to:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n \"&lt;String&gt;\",\"&lt;String&gt;\",&lt;Int&gt;,&lt;Float&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["That will be processed later.", "I would like to verify the file fits a specified format so that the program that shall later use the file doesnt receive unexpected input and that there are no security concerns (say some injection attack against the parsing script that does some calculations and db insert)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["(1) What would be the best way to go about doing this that would be fast and thorough?", "From what I've researched I could go the path of regex or something more like this.", "I've looked at the python csv module but that doesnt appear to have any built in verification."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/614469/regex-to-match-anything-except-certain-delimiters"}]}, {"text": ["(2) Assuming I go for a regex, can anyone direct me to towards the best way to do this?", "Do I match for illegal characters and reject on that?", "(eg.", "no '/' '\\' '&lt;' '>' '{' '}' etc.", ") or match on all legal eg.", "[a-zA-Z0-9]{1,10} for the string component?", "I'm not too familiar with regular expressions so pointers or examples would be appreciated. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["EDIT:\nStrings should contain no commas or quotes it would just contain a name (ie.", "first name, last name).", "And yes I forgot to add they would be double quoted."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["EDIT #2:\nThanks for all the answers.", "Cutplace is quite interesting but is a standalone.", "Decided to go with pyparsing in the end because it gives more flexibility should I add more formats."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]