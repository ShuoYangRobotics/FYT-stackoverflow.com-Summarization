[{"text": ["Iterate over pairs in a list (circular fashion) in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The problem is easy, I want to iterate over each element of the list and the next one in pairs (wrapping the last one with the first)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I've thought about two unpythonic ways of doing it:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def pairs(lst):\n    n = len(lst)\n    for i in range(n):\n        yield lst[i],lst[(i+1)%n]\n</code>\n</pre>\n", "senID": 3}, {"text": ["and:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def pairs(lst):\n    return zip(lst,lst[1:]+[lst[0]])\n</code>\n</pre>\n", "senID": 5}, {"text": ["expected output:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i in pairs(range(10)):\n    print i\n\n(0, 1)\n(1, 2)\n(2, 3)\n(3, 4)\n(4, 5)\n(5, 6)\n(6, 7)\n(7, 8)\n(8, 9)\n(9, 0)\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 7}, {"text": ["any suggestions about a more pythonic way of doing this?", "maybe there is a predefined function out there I haven't heard about?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["also a more general n-fold (with triplets, quartets, etc.", "instead of pairs) version could be interesting."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]