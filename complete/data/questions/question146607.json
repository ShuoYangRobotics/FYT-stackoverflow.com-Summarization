[{"text": ["I'm using Python regexes in a criminally inefficient manner"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["My goal here is to create a very simple template language.", "At the moment, I'm working on replacing a variable with a value, like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This input:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Should produce this output:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I've got it working.", "But looking at my code, I'm running multiple identical regexes on the same strings -- that just offends my sense of efficiency.", "There's got to be a better, more Pythonic way.", "(It's the two \"while\" loops that really offend."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["This does pass the unit tests, so if this is silly premature optimization, tell me -- I'm willing to let this go.", "There may be dozens of these variable definitions and uses in a document, but not hundreds.", "But I suspect there's obvious (to other people) ways of improving this, and I'm curious what the StackOverflow crowd will come up with."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def stripMatchedQuotes(item):\n    MatchedSingleQuotes = re.compile(r\"'(.*)'\", re.LOCALE)\n    MatchedDoubleQuotes = re.compile(r'\"(.*)\"', re.LOCALE)\n    item = MatchedSingleQuotes.sub(r'\\1', item, 1)\n    item = MatchedDoubleQuotes.sub(r'\\1', item, 1)\n    return item\n\n\n\n\ndef processVariables(item):\n    VariableDefinition = re.compile(r'&lt;%(.*?)=(.*?)%&gt;', re.LOCALE)\n    VariableUse = re.compile(r'&lt;%(.*?)%&gt;', re.LOCALE)\n    Variables={}\n\n    while VariableDefinition.search(item):\n        VarName, VarDef = VariableDefinition.search(item).groups()\n        VarName = stripMatchedQuotes(VarName).upper().strip()\n        VarDef = stripMatchedQuotes(VarDef.strip())\n        Variables[VarName] = VarDef\n        item = VariableDefinition.sub('', item, 1)\n\n    while VariableUse.search(item):\n        VarName = stripMatchedQuotes(VariableUse.search(item).group(1).upper()).strip()\n        item = VariableUse.sub(Variables[VarName], item, 1)\n\n    return item\n</code>\n</pre>\n", "senID": 6}]