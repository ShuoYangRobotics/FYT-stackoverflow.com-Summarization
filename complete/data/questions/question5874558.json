[{"text": ["Python: How to pass arguments to the __code__ of a function?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The following works:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def spam():\n    print \"spam\"\nexec(spam.__code__)\n</code>\n</pre>\n", "senID": 2}, {"text": ["But what if spam takes arguments?"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "spam", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def spam(eggs):\n    print \"spam and\", eggs\nexec(spam.__code__)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Given, that I don't have access to the function itself but only to a code object, how can I pass arguments to the code object when executing it?", "Is it possible with eval?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Edit: Since most readers tend not to believe in the usefulness of this, see the following usecase:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I want to save small python functions to a file so that they can be called e.g.", "from another computer.", "(Needless to say here that this usecase restricts the possible functions severely.", ") Pickling the function object itself can't work because this only saves the name and the module where the function is defined.", "Instead, I could pickle the __code__ of the function.", "When I unpickle it again, of course the reference to the function vanished, which is why I can't call the function.", "I simply don't have it at runtime."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "__code__", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"text": ["Another usecase:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["I work on several functions in one file that calculate some data and store it on the hard drive.", "The calculations consume a lot of time so I don't want to execute the functions every time, but only when the implementation of the function changed."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["I have a version of this running for a whole module instead of a function.", "It works by looking at the modification time of the file where the module is implemented in.", "But this is not an option if I have many functions that I don't want to separate in single files."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]