[{"text": ["What language could I use for fast execution of this database summarization task?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["So I wrote a Python program to handle a little data processing\ntask."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's a very brief specification in a made-up language of the computation I want:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n parse \"%s %lf %s\" aa bb cc | group_by aa | quickselect --key=bb 0:5 | \\\n    flatten | format \"%s %lf %s\" aa bb cc\n</code>\n</pre>\n", "senID": 3}, {"text": ["That is, for each line, parse out a word, a floating-point number, and another word.", "Think of them as a player ID, a score, and a date.", "I want the top five scores and dates for each player.", "The data size is not trivial, but not huge; about 630 megabytes."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I want to know what real, executable language I should have written it in to\nget it to be similarly short (as the Python below) but much faster."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n# -*- coding: utf-8; -*-\nimport sys\n\ntop_5 = {}\n\nfor line in sys.stdin:\n    aa, bb, cc = line.split()\n\n    # We want the top 5 for each distinct value of aa.  There are\n    # hundreds of thousands of values of aa.\n    bb = float(bb)\n    if aa not in top_5: top_5[aa] = []\n    current = top_5[aa]\n    current.append((bb, cc))\n\n    # Every once in a while, we drop the values that are not in\n    # the top 5, to keep our memory footprint down, because some\n    # values of aa have thousands of (bb, cc) pairs.\n    if len(current) &gt; 10:\n        current.sort()\n        current[:-5] = []\n\nfor aa in top_5:\n    current = top_5[aa]\n    current.sort()\n    for bb, cc in current[-5:]:\n        print aa, bb, cc\n</code>\n</pre>\n", "senID": 6}, {"text": ["Here\u2019s some sample input data:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n 3 1.5 a\n3 1.6 b\n3 0.8 c\n3 0.9 d\n4 1.2 q\n3 1.5 e\n3 1.8 f\n3 1.9 g\n</code>\n</pre>\n", "senID": 8}, {"text": ["Here\u2019s the output I get from it:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n 3 1.5 a\n3 1.5 e\n3 1.6 b\n3 1.8 f\n3 1.9 g\n4 1.2 q\n</code>\n</pre>\n", "senID": 10}, {"text": ["There are seven values for 3, and so we drop the c and d values\nbecause their bb value puts them out of the top 5.", "Because 4 has\nonly one value, its \u201ctop 5\u201d consists of just that one value."], "childNum": 5, "tag": "p", "senID": 11, "childList": [{"text": "3", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "d", "childNum": 0, "tag": "code", "childList": []}, {"text": "bb", "childNum": 0, "tag": "code", "childList": []}, {"text": "4", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["This runs faster than doing the same queries in MySQL (at least, the\nway we\u2019ve found to do the queries) but I\u2019m pretty sure it's spending\nmost of its time in the Python bytecode interpreter.", "I think that in\nanother language, I could probably get it to process hundreds of\nthousands of rows per second instead of per minute.", "So I\u2019d like to\nwrite it in a language that has a faster implementation."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["But I\u2019m not sure what language to choose."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["I haven\u2019t been able to figure out how to express this as a single query in SQL, and\nactually I\u2019m really unimpressed with MySQL\u2019s ability even to merely\nselect * from foo into outfile 'bar'; the input data."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "select * from foo into outfile 'bar';", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["C is an obvious choice, but things like line.split(), sorting a list\nof 2-tuples, and making a hash table require writing some code that\u2019s\nnot in the standard library, so I would end up with 100 lines of code\nor more instead of 14."], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "line.split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["C++ seems like it might be a better choice (it has strings, maps,\npairs, and vectors in the standard library) but it seems like the code\nwould be a lot messier with STL. "], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["OCaml would be fine, but does it have an equivalent of line.split(),\nand will I be sad about the performance of its map?"], "childNum": 1, "tag": "p", "senID": 17, "childList": [{"text": "line.split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Common Lisp might work?"], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"text": ["Is there some equivalent of Matlab for database computation like this\nthat lets me push the loops down into fast code?", "Has anybody tried Pig?"], "childNum": 1, "tag": "p", "senID": 19, "childList": [{"text": "Pig", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://hadoop.apache.org/pig/"}]}, {"text": ["(Edit: responded to davethegr8's comment by providing some sample input and output data, and fixed a bug in the Python program!"], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"text": ["(Additional edit: Wow, this comment thread is really excellent so far.", "Thanks, everybody!"], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 22, "childList": []}, {"text": ["There was an eerily similar question asked on sbcl-devel in 2007 (thanks, Rainer!", "), and here's an awk script from Will Hartung for producing some test data (although it doesn't have the Zipfian distribution of the real data):"], "childNum": 2, "tag": "p", "senID": 23, "childList": [{"text": "eerily similar question asked on sbcl-devel in 2007", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groups.google.com/group/sbcl-devel/browse%5Fthread/thread/f70c47e9f22d158a/9349b7b72943d314"}, {"text": "awk", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n BEGIN {\n for (i = 0; i &lt; 27000000; i++) {\n  v = rand();\n  k = int(rand() * 100);\n  print k \" \" v \" \" i;\n }\n exit;\n}\n</code>\n</pre>\n", "senID": 24}]