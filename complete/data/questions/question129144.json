[{"text": ["Generic Exception Handling in Python the \"Right Way\""], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Sometimes I find myself in the situation where I want to execute several sequential commands like such:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try:\n    foo(a, b)\nexcept Exception, e:\n    baz(e)\ntry:\n    bar(c, d)\nexcept Exception, e:\n    baz(e)\n...\n</code>\n</pre>\n", "senID": 2}, {"text": ["This same pattern occurs when exceptions simply need to be ignored."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["This feels redundant and the excessive syntax causes it to be surprisingly difficult to follow when reading code."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["In C, I would have solved this type of problem easily with a macro, but unfortunately, this cannot be done in straight python."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Question: How can I best reduce the code footprint and increase code readability when coming across this pattern?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]