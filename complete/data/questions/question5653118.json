[{"text": ["Python parsing list of string"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have list of strings, I'm looking for lines like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Key: af12d9 Index: 0 Field 1: 1234 Field 2: 1234 Field 3: -10"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["after finding lines like this, I want to store each one as a dictionary {'key' : af12d9, 'index' : 0, 'field 1' : .... }, then store this dictionary to a list, so I will have a list of dictionaries. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I was able to get it working like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n listconfig = []\nfor line in list_of_strings:\n    matched = findall(\"(Key:[\\s]*[0-9A-Fa-f]+[\\s]*)|(Index:[\\s]*[0-9]+[\\s]*)|(Field 1:[\\s]*[0-9]+[\\s]*)|(Field 2:[\\s]*[0-9]+[\\s]*)|(Field 3:[\\s]*[-+]?[0-9]+[\\s]*)\", line)\n    if matched:\n        listconfig += [dict(map(lambda pair: (pair[0].strip().lower(), pair[1].strip().lower()),\n                                map(lambda line: line[0].split(':'),\n                                    [filter(lambda x: x, group) for group in matched])))]\n</code>\n</pre>\n", "senID": 5}, {"text": ["I'm just wondering if there could a better way (short and efficient) to do this because I think the findall will do 5 searches per string.", "(correct?", "since it returns a list of 5 tuples."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Thank you."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Solution:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Solution:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["OK, with help of brandizzi, I have found THE answer to this question. "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Solution: "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n listconfig = []\nfor line in list_of_strings:\n    matched = re.search(r\"Key:[\\s]*(?P&lt;key&gt;[0-9A-Fa-f]+)[\\s]*\" \\ \n                        r\"(Index:[\\s]*(?P&lt;index&gt;[0-9]+)[\\s]*)?\" \\ \n                        r\"(Field 1:[\\s]*(?P&lt;field_1&gt;[0-9]+)[\\s]*)?\" \\ \n                        r\"(Field 2:[\\s]*(?P&lt;field_2&gt;[0-9 A-Za-z]+)[\\s]*)?\" \\ \n                        r\"(Field 3:[\\s]*(?P&lt;field_3&gt;[-+]?[0-9]+)[\\s]*)?\", line) \n    if matched:\n        print matched.groupdict()\n        listconfig.append(matched.groupdict())\n</code>\n</pre>\n", "senID": 11}]