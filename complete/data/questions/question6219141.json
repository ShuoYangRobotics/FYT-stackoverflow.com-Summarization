[{"text": ["Searching for a string in a large text file - profiling various methods in python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This question has been asked many times.", "After spending some time reading the answers, I did some quick profiling to try out the various methods mentioned previously..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The three methods that I tried below list the time taken to load the file, search time for a negative match &amp; memory usage in the task manager"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "negative match", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n 1) set :\n    (i)  data   = set(f.read().splitlines())\n    (ii) result = search_str in data\n</code>\n</pre>\n", "senID": 3}, {"code": "<pre>\n<code>\n 2) list :\n    (i)  data   = f.read().splitlines()\n    (ii) result = search_str in data\n</code>\n</pre>\n", "senID": 4}, {"code": "<pre>\n<code>\n 3) mmap :\n    (i)  data   = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\n    (ii) result = data.find(search_str)\n</code>\n</pre>\n", "senID": 5}, {"code": "<pre>\n<code>\n 4) Hash lookup (using code from @alienhard below):\n</code>\n</pre>\n", "senID": 6}, {"code": "<pre>\n<code>\n 5) File search (using code from @EOL below):   \n   with open('input.txt') as f:\n       print search_str in f #search_str ends with the ('\\n' or '\\r\\n') as in the file\n</code>\n</pre>\n", "senID": 7}, {"code": "<pre>\n<code>\n 6) sqlite (with primary index on url):\n</code>\n</pre>\n", "senID": 8}, {"text": ["For my use case, it seems like going with the set is the best option as long as I have sufficient memory available.", "I was hoping to get some comments on these questions : "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["[edit 1] P.S.", "I need to search frequently, add/remove values and cannot use a hash table alone because I need to retrieve the modified values later."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Any comments/suggestions are welcome ! "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["[edit 2] Update with results from methods suggested in answers\n[edit 3] Update with sqlite results"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Solution : Based on all the profiling &amp; feeback, I think I'll go with sqlite.", "Second alternative being method 4.", "One downside of sqlite is that the database size is more than double of the original csv file with urls.", "This is due to the primary index on url"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "Solution", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]