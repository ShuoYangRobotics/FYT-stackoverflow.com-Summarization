[{"text": ["How would you design a very \"Pythonic\" UI framework?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have been playing with the Ruby library \"shoes\".", "Basically you can write a GUI application in the following way:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Shoes.app do\n  t = para \"Not clicked!\"\n  button \"The Label\" do\n    alert \"You clicked the button!\" # when clicked, make an alert\n    t.replace \"Clicked!\" # ..and replace the label's text\n  end\nend\n</code>\n</pre>\n", "senID": 2}, {"text": ["This made me think - how would I design a similarly nice-to-use GUI framework in Python?", "One that doesn't have the usual tyings of basically being wrappers to a C* library (In the case of GTK, Tk, wx, QT etc etc)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Shoes takes things from web devlopment (like #f0c2f0 style colour notation, CSS layout techniques, like :margin =&gt; 10), and from ruby (extensively using blocks in sensible ways)"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "#f0c2f0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ":margin =&gt; 10", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Python's lack of \"rubyish blocks\" makes a (metaphorically)-direct port impossible:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def Shoeless(Shoes.app):\n    self.t = para(\"Not clicked!\")\n\n    def on_click_func(self):\n        alert(\"You clicked the button!\")\n        self.t.replace(\"clicked!\")\n\n    b = button(\"The label\", click=self.on_click_func)\n</code>\n</pre>\n", "senID": 6}, {"text": ["No where near as clean, and wouldn't be nearly as flexible, and I'm not even sure if it would be implementable."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "nearly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Using decorators seems like an interesting way to map blocks of code to a specific action:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n class BaseControl:\n    def __init__(self):\n        self.func = None\n\n    def clicked(self, func):\n        self.func = func\n\n    def __call__(self):\n        if self.func is not None:\n            self.func()\n\nclass Button(BaseControl):\n    pass\n\nclass Label(BaseControl):\n    pass\n\n# The actual applications code (that the end-user would write)\nclass MyApp:\n    ok = Button()\n    la = Label()\n\n    @ok.clicked\n    def clickeryHappened():\n        print \"OK Clicked!\"\n\nif __name__ == '__main__':\n    a = MyApp()\n    a.ok() # trigger the clicked action\n</code>\n</pre>\n", "senID": 9}, {"text": ["Basically the decorator function stores the function, then when the action occurred (say, a click) the appropriate function would be executed."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["The scope of various stuff (say, the la label in the above example) could be rather complicated, but it seems doable in a fairly neat manner.."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "la", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]