[{"text": ["Full text searching XML data with Python: best practices, pros & cons"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Task"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Task", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I want to use Python for doing full text searches of XML data."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Example data"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Example data", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &lt;elements&gt;\n  &lt;elem id=\"1\"&gt;some element&lt;/elem&gt;\n  &lt;elem id=\"2\"&gt;some other element&lt;/elem&gt;\n  &lt;elem id=\"3\"&gt;some element\n    &lt;nested id=\"1\"&gt;\n    other nested element\n    &lt;/nested&gt;\n  &lt;/elem&gt;\n&lt;/elements&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["Basic functionality"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Basic functionality", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The most basic functionality I want is that a search for \"other\" in an XPath (\"/elements/elem\") returns at least the value of the ID attribute for the matching element (elem 2) and nested element (elem 3, nested 1) or the matching XPaths."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "at least", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Ideal functionality"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Ideal functionality", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The solution should be flexible and scalable.", "I am looking for possible combinations of these features:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "ul", "num": 7, "lis": [{"text": "search nested elements (infinite depth)", "tag": "none", "senID": 9}, {"text": "search attributes", "tag": "none", "senID": 10}, {"text": "search for sentences and paragraphs", "tag": "none", "senID": 11}, {"text": "search using wildcards", "tag": "none", "senID": 12}, {"text": "search using fuzzy matching", "tag": "none", "senID": 13}, {"text": "return precise matching info", "tag": "none", "senID": 14}, {"text": "good search speed for large XML files", "tag": "none", "senID": 15}]}, {"text": ["Question"], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "Question", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I don't expect a solution with all of the ideal functionality, I'll have to combine different existing functionalities and code the rest myself.", "But first I would like to know more about what there is out there, which libraries and approaches you would usually use for this, what their pros and cons are."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["EDIT: Thanks for the answers so far, I added detail and started a bounty."], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "started a bounty", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]