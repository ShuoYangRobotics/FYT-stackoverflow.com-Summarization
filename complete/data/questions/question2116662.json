[{"text": ["Help me understand Inorder Traversal without using recursion"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am able to understand preorder traversal without using recursion, but I'm having a hard time with inorder traversal.", "I just don't seem to get it, perhaps, because I haven't understood the inner working of recursion."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This is what I've tried so far:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def traverseInorder(node):\n    lifo = Lifo()\n    lifo.push(node)\n    while True:\n        if node is None:\n            break\n        if node.left is not None:\n            lifo.push(node.left)\n            node = node.left\n            continue\n        prev = node\n        while True:\n            if node is None:\n                break\n            print node.value\n            prev = node\n            node = lifo.pop()\n        node = prev\n        if node.right is not None:\n            lifo.push(node.right)\n            node = node.right\n        else:\n            break\n</code>\n</pre>\n", "senID": 3}, {"text": ["The inner while-loop just doesn't feel right.", "Also, some of the elements are getting printed twice; may be I can solve this by checking if that node has been printed before, but that requires another variable, which, again, doesn't feel right.", "Where am I going wrong?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I haven't tried postorder traversal, but I guess it's similar and I will face the same conceptual blockage there, too."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Thanks for your time!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["P.S.", ": Definitions of Lifo and Node:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "Lifo", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Node", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\nclass Lifo:\n    def __init__(self):\n        self.lifo = ()\n    def push(self, data):\n        self.lifo = (data, self.lifo)\n    def pop(self):\n        if len(self.lifo) == 0:\n            return None\n        ret, self.lifo = self.lifo\n        return ret\n</code>\n</pre>\n", "senID": 8}]