[{"text": ["Python dictionary instead of switch/case"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've recently learned that python doesn't have the switch/case statement.", "I've been reading about using dictionaries in its stead, like this for example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n values = { \n     value1: do_some_stuff1, \n     value2: do_some_stuff2, \n     valueN: do_some_stuffN,\n}\nvalues.get(var, do_default_stuff)()\n</code>\n</pre>\n", "senID": 2}, {"text": ["What I can't figure out is how to apply this to do a range test.", "So instead of doing some stuff if value1=4 say, doing some stuff if value1&lt;4.", "So something like this (which I know doesn't work):"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "value1=4", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "value1&lt;4.", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n values = { \n     if value1 &lt;val: do_some_stuff1, \n     if value2 &gt;val: do_some_stuff2, \n}\nvalues.get(var, do_default_stuff)()\n</code>\n</pre>\n", "senID": 4}, {"text": ["I've tried doing this with if/elif/else statements.", "It works fine but it seems to go considerably slower compared to the situation where I don't need the if statements at all (which is maybe something obvious an inevitable).", "So here's my code with the if/elif/else statement:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if sep_ang(val1,val2,X,Y)&gt;=ROI :\n    main.removeChild(source)\nelif sep_ang(val1,val2,X,Y)&lt;=5.0:\n    integral=float(spectrum[0].getElementsByTagName(\"parameter\")[0].getAttribute(\"free\"))\n    index=float(spectrum[0].getElementsByTagName(\"parameter\")[0].getAttribute(\"free\"))              \n    print name,val1,val2,sep_ang(val1,val2,X,Y),integral,index\n    print &gt;&gt; reg,'fk5;point(',val1,val2,')# point=cross text={',name,'}'\nelse:\n    spectrum[0].getElementsByTagName(\"parameter\")[0].setAttribute(\"free\",\"0\") #Integral\n    spectrum[0].getElementsByTagName(\"parameter\")[1].setAttribute(\"free\",\"0\") #Index\n    integral=float(spectrum[0].getElementsByTagName(\"parameter\")[0].getAttribute(\"free\"))\n    index=float(spectrum[0].getElementsByTagName(\"parameter\")[0].getAttribute(\"free\"))\n    print name,val1,val2,sep_ang(val1,val2,X,Y),integral,index\n    print &gt;&gt; reg,'fk5;point(',val1,val2,')# point=cross text={',name,'}'\n</code>\n</pre>\n", "senID": 6}, {"text": ["Which takes close to 5 min for checking about 1500 values of the var sep_ang.", "Where as if I don't want to use setAttribute() to change values in my xml file based on the value of sep_ang, I use this simple if else:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n if sep_ang(val1,val2,X,Y)&gt;=ROI :\n    main.removeChild(source)\nelse:\n    print name,val1,val2,ang_sep(val1,val2,X,Y);print &gt;&gt; reg,'fk5;point(',val1,val2,')# point\n</code>\n</pre>\n", "senID": 8}, {"text": ["Which only takes ~30sec.", "Again I know it's likely that adding that elif statement and changing values of that attribute inevitably increases the execution time of my code by a great deal, I was just curious if there's a way around it."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Edit:\nIs the benefit of using bisect as opposed to an if/elif statement in my situation that it can check values over some range quicker than using a bunch of elif statements? "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["It seems like I'll still need to use elif statements.", "Like this for example:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n range=[10,100]\noptions='abc' \ndef func(val)\n     return options[bisect(range, val)]\nif func(val)=a:\n     do stuff\nelif func(val)=b:\n     do other stuff\nelse:\n     do other other stuff\n</code>\n</pre>\n", "senID": 12}, {"text": ["So then my elif statement are only checking against a single value."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["Thanks much for the help, it's greatly appreciated."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}]