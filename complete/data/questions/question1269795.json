[{"text": ["Unusual Speed Difference between Python and C++"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I recently wrote a short algorithm to calculate happy numbers in python.", "The program allows you to pick an upper bound and it will determine all the happy numbers below it.", "For a speed comparison I decided to make the most direct translation of the algorithm I knew of from python to c++. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "happy numbers", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Happy%5FNumbers"}]}, {"text": ["Surprisingly, the c++ version runs significantly slower than the python version.", "Accurate speed tests between the execution times for discovering the first 10,000 happy numbers indicate the python program runs on average in 0.59 seconds and the c++ version runs on average in 8.5 seconds. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I would attribute this speed difference to the fact that I had to write helper functions for parts of the calculations (for example determining if an element is in a list/array/vector) in the c++ version which were already built in to the python language. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Firstly, is this the true reason for such an absurd speed difference, and secondly, how can I change the c++ version to execute more quickly than the python version (the way it should be in my opinion). "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["The two pieces of code, with speed testing are here: Python Version, C++ Version.", "Thanks for the help."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Python Version", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dawnofdigital.net/script/happy.py.txt"}, {"text": "C++ Version", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://dawnofdigital.net/script/happy.cpp.txt"}]}, {"code": "<pre>\n<code>\n #include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;ctime&gt;\n#include &lt;windows.h&gt;\n\nusing namespace std;\n\nbool inVector(int inQuestion, vector&lt;int&gt; known);\nint sum(vector&lt;int&gt; given);\nint pow(int given, int power);\nvoid calcMain(int upperBound);\n\nint main()\n{\n    while(true)\n    {\n    \tint upperBound;\n    \tcout &lt;&lt; \"Pick an upper bound: \";\n    \tcin &gt;&gt; upperBound;\n    \tlong start, end;\n    \tstart = GetTickCount();\n    \tcalcMain(upperBound);\n    \tend = GetTickCount();\n    \tdouble seconds = (double)(end-start) / 1000.0;\n    \tcout &lt;&lt; seconds &lt;&lt; \" seconds.\" &lt;&lt; endl &lt;&lt; endl;\n    }\n    return 0;\n}\n\nvoid calcMain(int upperBound)\n{\n    vector&lt;int&gt; known;\n    for(int i = 0; i &lt;= upperBound; i++)\n    {\n    \tbool next = false;\n    \tint current = i;\n    \tvector&lt;int&gt; history;\n    \twhile(!next)\n    \t{\n    \t\tchar* buffer = new char[10];\n    \t\titoa(current, buffer, 10);\n    \t\tstring digits = buffer;\n    \t\tdelete buffer;\n    \t\tvector&lt;int&gt; squares;\n    \t\tfor(int j = 0; j &lt; digits.size(); j++)\n    \t\t{\n    \t\t\tchar charDigit = digits[j];\n    \t\t\tint digit = atoi(&amp;charDigit);\n    \t\t\tint square = pow(digit, 2);\n    \t\t\tsquares.push_back(square);\n    \t\t}\n    \t\tint squaresum = sum(squares);\n    \t\tcurrent = squaresum;\n    \t\tif(inVector(current, history))\n    \t\t{\n    \t\t\tnext = true;\n    \t\t\tif(current == 1)\n    \t\t\t{\n    \t\t\t\tknown.push_back(i);\n    \t\t\t\t//cout &lt;&lt; i &lt;&lt; \"\\t\";\n    \t\t\t}\n    \t\t}\n    \t\thistory.push_back(current);\n    \t}\n    }\n    //cout &lt;&lt; \"\\n\\n\";\n}\n\nbool inVector(int inQuestion, vector&lt;int&gt; known)\n{\n    for(vector&lt;int&gt;::iterator it = known.begin(); it != known.end(); it++)\n    \tif(*it == inQuestion)\n    \t\treturn true;\n    return false;\n}\n\nint sum(vector&lt;int&gt; given)\n{\n    int sum = 0;\n    for(vector&lt;int&gt;::iterator it = given.begin(); it != given.end(); it++)\n    \tsum += *it;\n    return sum;\n}\n\nint pow(int given, int power)\n{\n    int original = given;\n    int current = given;\n    for(int i = 0; i &lt; power-1; i++)\n    \tcurrent *= original;\n    return current;\n}\n</code>\n</pre>\n", "senID": 6}, {"tag": "hr", "senID": 7}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nimport timeit\n\nupperBound = 0\n\ndef calcMain():\n    known = []\n    for i in range(0,upperBound+1):\n        next = False\n        current = i\n        history = []\n        while not next:\n            digits = str(current)\n            squares = [pow(int(digit), 2) for digit in digits]\n            squaresum = sum(squares)\n            current = squaresum\n            if current in history:\n                next = True\n                if current == 1:\n                    known.append(i)\n                    ##print i, \"\\t\",\n            history.append(current)\n    ##print \"\\nend\"\n\nwhile True:    \n    upperBound = input(\"Pick an upper bound: \")\n    result = timeit.Timer(calcMain).timeit(1)\n    print result, \"seconds.\\n\"\n</code>\n</pre>\n", "senID": 8}]