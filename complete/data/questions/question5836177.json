[{"text": ["Avoiding the use of type() comparisons where polymorphism won't work"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I came across the following in How to Think Like a Computer Scientist  (here):"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "How to Think Like a Computer Scientist", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://greenteapress.com/thinkpython/"}, {"href": "http://openbookproject.net/thinkcs/python/english2e/ch11.html#recursion", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n def recursive_sum(nested_num_list):\n    sum = 0\n    for element in nested_num_list:\n        if type(element) == type([]):\n            sum = sum + recursive_sum(element)\n        else:\n            sum = sum + element\n    return sum\n</code>\n</pre>\n", "senID": 2}, {"text": ["I was shocked by the use of type(element) == type([]).", "Not only is it bad practice, but this function won't work for any other sequence types.", "Polymorphism is the typical way of avoiding type comparisons, but can't be used here.", "How could one avoid the type comparison in such a case?", "I considered:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def recursive_sum(nested_sum_list):\n    sum = 0\n    for element in nested_num_list:\n        try:\n            sum += element\n        except TypeError:\n            sum += recursive_sum(element)\n    return sum\n</code>\n</pre>\n", "senID": 4}, {"text": ["which makes the function applicable to other sequences, but is still kinda gross.", "Thanks!"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]