[{"text": ["More Pythonic conversion to binary?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Here is a contrived example of how a lot of our classes return binary representations (to be read by C++) of themselves."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def to_binary(self):\n    'Return the binary representation as a string.'\n    data = []\n\n    # Binary version number.\n    data.append(struct.pack('&lt;I', [2]))\n\n    # Image size.\n    data.append(struct.pack('&lt;II', *self.image.size))\n\n    # Attribute count.\n    data.append(struct.pack('&lt;I', len(self.attributes)))\n\n    # Attributes.\n    for attribute in self.attributes:\n\n        # Id.\n        data.append(struct.pack('&lt;I', attribute.id))\n\n        # Type.\n        data.append(struct.pack('&lt;H', attribute.type))\n\n        # Extra Type.        \n        if attribute.type == 0:\n            data.append(struct.pack('&lt;I', attribute.typeEx))\n\n    return ''.join(data)\n</code>\n</pre>\n", "senID": 2}, {"text": ["What I dislike:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Every line starts with ", "tag": "none", "senID": 4}, {"text": "The byte order (", "tag": "none", "senID": 5}, {"text": "You have to remember to return the boilerplate ", "tag": "none", "senID": 6}]}, {"text": ["What I like:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "The format specifiers appear near the attribute name. E.g., it's easy to see that ", "tag": "none", "senID": 8}, {"text": "The lines are (mostly) independent. E.g., To remove the Id field from an 'attribute', you don't have to touch more than one line of code.", "tag": "none", "senID": 9}]}, {"text": ["Is there a more readable/pythonic way to do this?"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]