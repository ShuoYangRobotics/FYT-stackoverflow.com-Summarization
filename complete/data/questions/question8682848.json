[{"text": ["Assign function arguments to `self`"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've noticed that a common pattern I use is to assign SomeClass.__init__() arguments to self attributes of the same name.", "Example:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "SomeClass.__init__()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class SomeClass():\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n</code>\n</pre>\n", "senID": 2}, {"text": ["In fact it must be a common task for others as well as PyDev has a shortcut for this - if you place the cursor on the parameter list and click Ctrl+1 you're given the option to Assign parameters to attributes which will create that boilerplate code for you."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "PyDev", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pydev.org/"}, {"text": "Ctrl+1", "childNum": 0, "tag": "code", "childList": []}, {"text": "Assign parameters to attributes", "childNum": 0, "tag": "code", "childList": []}, {"href": "https://en.wikipedia.org/wiki/Boilerplate_code", "text": "boilerplate code", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Is there a different, short and elegant way to perform this assignment?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]