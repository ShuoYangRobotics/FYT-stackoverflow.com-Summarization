[{"text": ["Creating sublists"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The opposite of list flattening."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Given a list and a length n return a list of sub lists of length n."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def sublist(lst, n):\n    sub=[] ; result=[]\n    for i in lst:\n        sub+=[i]\n        if len(sub)==n: result+=[sub] ; sub=[]\n    if sub: result+=[sub]\n    return result\n</code>\n</pre>\n", "senID": 3}, {"text": ["An example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If the list is:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n [1,2,3,4,5,6,7,8]\n</code>\n</pre>\n", "senID": 6}, {"text": ["And n is:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n 3\n</code>\n</pre>\n", "senID": 8}, {"text": ["Return:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n [[1, 2, 3], [4, 5, 6], [7, 8]]\n</code>\n</pre>\n", "senID": 10}, {"text": ["Is there a more eloquent / concise way?"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["An aside, what is preferred when appending lists to lists (in the context above):"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n list1+=[list2]\n</code>\n</pre>\n", "senID": 13}, {"text": ["Or:"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n list1.append(list2)\n</code>\n</pre>\n", "senID": 15}, {"text": ["Given that (according to Summerfeild's 'Programming in Python 3') they are the same?"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["Thanks."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}]