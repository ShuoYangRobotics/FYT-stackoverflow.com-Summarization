[{"text": ["Python __init__ setattr on arguments?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["It seems that often __init__ methods are similar to this:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def __init__(self, ivar1, ivar2, ivar3):\n    self.ivar1 = ivar1\n    self.ivar2 = ivar2\n    self.ivar3 = ivar3\n</code>\n</pre>\n", "senID": 2}, {"text": ["Is there someway to turn the arguments into a list (without resorting to *args or **kwargs) and then using setattr to set the instance variables, with the name of the parameter and the arugment passed?", "And maybe slice the list, e.g.", "you'd need to at least slice it to [1:] because you don't want self.self."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "*args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "**kwargs", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "setattr", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[1:]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "self.self", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["(actually I guess it would need to be a dictionary to hold the name and value)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["like this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self, ivar1, ivar2, ivar3, optional=False):\n    for k, v in makedict(self.__class__.__init__.__args__): # made up __args__\n        setattr(self, k, v)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Thanks!"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Responding to Unknown's answer, I found this to work:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n Class A(object):\n    def __init__(self, length, width, x):\n        self.__dict__.update(dict([(k, v) for k, v in locals().iteritems() if k != 'self']))\n</code>\n</pre>\n", "senID": 9}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n Class A(object):\n    def __init__(self, length, width, x):\n        self.__dict__.update(locals())\n        del self.__dict__['self']\n</code>\n</pre>\n", "senID": 11}, {"text": ["Not too bad.."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]