[{"text": ["Scope of python lambda functions and their parameters"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I need a callback function that is almost exactly the same for a series of gui events.", "The function will behave slightly differently depending on which event has called it.", "Seems like a simple case to me, but I cannot figure out this weird behavior of lambda functions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So I have the following simplified code below:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def callback(msg):\n    print msg\n\n#creating a list of function handles with an iterator\nfuncList=[]\nfor m in ('do', 're', 'mi'):\n    funcList.append(lambda: callback(m))\nfor f in funcList:\n    f()\n\n#create one at a time\nfuncList=[]\nfuncList.append(lambda: callback('do'))\nfuncList.append(lambda: callback('re'))\nfuncList.append(lambda: callback('mi'))\nfor f in funcList:\n    f()\n</code>\n</pre>\n", "senID": 3}, {"text": ["The output of this code is:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\nmi\n    mi\n    mi\n    do\n    re\n    mi\n</pre>\n", "senID": 5}, {"text": ["I expected:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\ndo\n    re\n    mi\n    do\n    re\n    mi\n</pre>\n", "senID": 7}, {"text": ["Why has using an iterator messed things up?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["I've tried using a deepcopy:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n import copy\nfuncList=[]\nfor m in ('do', 're', 'mi'):\n    funcList.append(lambda: callback(copy.deepcopy(m)))\nfor f in funcList:\n    f()\n</code>\n</pre>\n", "senID": 10}, {"text": ["But this has the same problem.", "Thanks for helping me understand python better!", "I'm sure this will make sense once you help me figure it out!", ":)"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]