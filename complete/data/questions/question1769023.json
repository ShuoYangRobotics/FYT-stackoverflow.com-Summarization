[{"text": ["Is there any regular expression engine which do Just-In-Time compiling?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["My Questions is"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "My Questions is", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Is there any regular expression engine which do Just-In-Time compiling during regex pattern parsing and use when matching/replacing the texts?", "or where can I learn JIT for i386 or x64 architecture?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Why I need that is, "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Why I need that is,", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I recently trying to benchmark python's built-in regex engine with normal C codes with around 10M data."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "trying to benchmark python's built-in regex engine", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.soemin.net/2009/11/memo-regular-expressions-part-2.html"}]}, {"text": ["I found that for normal replace (for example ab to zzz) is relatively fast like just 2 to 3 times different to C"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "ab", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "zzz", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["but for [a-z]c tooks around 5 to 8 times slower than C, "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "[a-z]c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["and with grouping (for example - ([a-z])(c) to AA\\2\\1BB ) its tooks 20 to 40 times slower than C."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "([a-z])(c)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "AA\\2\\1BB", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Its not Just-In-Time compiling yet, but I think If I could do just In time compling, It could faster a lot more."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["ps: I use profiling for each regex patterns during compling patterns, \nfor eg, profile 1 for simple one like ab, profile 2 for range [a-z]c, profile 3 with grouping ([a-z])(c), each profile has seperate codes, so no extra cost needed when matching, and replacing simple patterns."], "childNum": 3, "tag": "p", "senID": 9, "childList": [{"text": "ab", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[a-z]c", "childNum": 0, "tag": "code", "childList": []}, {"text": "([a-z])(c)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Any Ideas would be appreciated, Thanks in advance."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Update 1:"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "Update 1:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I have tried with psyco, and Its doesnot improve the speed that much.", "May be because I am doing text replacing against big data, not looping many times.", "If I am not wrong, Python's re.sub running it in natively already I think, so pysco cannot improve the speed that much."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Update 2:"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "Update 2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I have tried with boost regex wrapped into python, but its even slower than python's regex, so It seems like the bottleneck is in python's string processing and Jan Goyvaerts also pointing me that point in the answer."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Update"], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I like to convert regex pattern ab[a-z]c to machine codes, like following equivlent C codes."], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "ab[a-z]c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["*s points to 10M Long Texts"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n do{\n    if(*s=='a' &amp;&amp; s[1]=='b' &amp;&amp; s[2]&gt;='a' &amp;&amp; s[2]&lt;='z' &amp;&amp; s[3]=='c') return 1;\n}while(*s++);\nreturn 0;\n</code>\n</pre>\n", "senID": 18}, {"text": ["any ideas?"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}]