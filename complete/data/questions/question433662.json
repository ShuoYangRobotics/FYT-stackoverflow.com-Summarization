[{"text": ["Is late binding consistent with the philosophy of \"readibility counts\"?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am sorry all - I am not here to blame Python.", "This is just a reflection on whether what I believe is right.", "Being a Python devotee for two years, I have been writing only small apps and singing Python's praises wherever I go.", "I recently had the chance to read Django's code, and have started wondering if Python really follows its \"readability counts\" philosophy.", "For example, "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class A:\n    a = 10\n    b = \"Madhu\"\n\n    def somemethod(self, arg1):\n        self.c = 20.22\n        d = \"some local variable\"\n        # do something\n        ....\n        ...\n    def somemethod2 (self, arg2):\n        self.c = \"Changed the variable\"\n        # do something 2\n        ...\n</code>\n</pre>\n", "senID": 2}, {"text": ["It's difficult to track the flow of code in situations where the instance variables are created upon use (i.e.", "self.c in the above snippet).", "It's not possible to see which instance variables are defined when reading a substantial amount of code written in this manner.", "It becomes very frustrating even when reading a class with just 6-8 methods and not more than 100-150 lines of code."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "self.c", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I am interested in knowing if my reading of this code is skewed by C++/Java style, since most other languages follow the same approach as them.", "Is there a Pythonic way of reading this code more fluently?", "What made Python developers adopt this strategy keeping \"readability counts\" in mind?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]