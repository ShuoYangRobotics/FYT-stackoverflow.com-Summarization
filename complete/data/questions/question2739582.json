[{"text": ["Condition checking vs.", "Exception handling"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["When is exception handling more preferable than condition checking?", "There are many situations where I can choose using one or the other."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For example, this is a summing function which uses a custom exception:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n # module mylibrary \nclass WrongSummand(Exception):\n    pass\n\ndef sum_(a, b):\n    \"\"\" returns the sum of two summands of the same type \"\"\"\n    if type(a) != type(b):\n        raise WrongSummand(\"given arguments are not of the same type\")\n    return a + b\n\n\n# module application using mylibrary\nfrom mylibrary import sum_, WrongSummand\n\ntry:\n    print sum_(\"A\", 5)\nexcept WrongSummand:\n    print \"wrong arguments\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["And this is the same function, which avoids using exceptions"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n # module mylibrary\ndef sum_(a, b):\n    \"\"\" returns the sum of two summands if they are both of the same type \"\"\"\n    if type(a) == type(b):\n        return a + b\n\n\n# module application using mylibrary\nfrom mylibrary import sum_\n\nc = sum_(\"A\", 5)\nif c is not None:\n    print c\nelse:\n    print \"wrong arguments\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["I think that using conditions is always more readable and manageable.", "Or am I wrong?", "What are the proper cases for defining APIs which raise exceptions and why?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]