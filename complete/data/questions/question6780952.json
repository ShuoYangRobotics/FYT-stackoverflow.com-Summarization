[{"text": ["How to change behavior of dict() for an instance"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["So I'm writing a class that extends a dictionary which right now uses a method \"dictify\" to transform itself into a dict.", "What I would like to do instead though is change it so that calling dict() on the object results in the same behavior, but I don't know which method to override.", "Is this not possible, or I am I missing something totally obvious?", "(And yes, I know the code below doesn't work but I hope it illustrates what I'm trying to do."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\nclass RecursiveDict(defaultdict):\n    '''\n    A recursive default dict.\n\n    &gt;&gt;&gt; a = RecursiveDict()\n    &gt;&gt;&gt; a[1][2][3] = 4\n    &gt;&gt;&gt; a.dictify()\n    {1: {2: {3: 4}}}\n    '''\n    def __init__(self):\n        super(RecursiveDict, self).__init__(RecursiveDict)\n\n    def dictify(self):\n        '''Get a standard dictionary of the items in the tree.'''\n        return dict([(k, (v.dictify() if isinstance(v, dict) else v))\n                     for (k, v) in self.items()])\n\n    def __dict__(self):\n        '''Get a standard dictionary of the items in the tree.'''\n        print [(k, v) for (k, v) in self.items()]\n        return dict([(k, (dict(v) if isinstance(v, dict) else v))\n                     for (k, v) in self.items()])\n</code>\n</pre>\n", "senID": 2}, {"text": ["EDIT: To show the problem more clearly:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; b = RecursiveDict()\n&gt;&gt;&gt; b[1][2][3] = 4\n&gt;&gt;&gt; b\ndefaultdict(&lt;class '__main__.RecursiveDict'&gt;, {1: defaultdict(&lt;class '__main__.RecursiveDict'&gt;, {2: defaultdict(&lt;class '__main__.RecursiveDict'&gt;, {3: 4})})})\n&gt;&gt;&gt; dict(b)\n{1: defaultdict(&lt;class '__main__.RecursiveDict'&gt;, {2: defaultdict(&lt;class '__main__.RecursiveDict'&gt;, {3: 4})})}\n&gt;&gt;&gt; b.dictify()\n{1: {2: {3: 4}}}\n</code>\n</pre>\n", "senID": 4}, {"text": ["I want dict(b) to be same as b.dictify()"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]