[{"text": ["Importing methods for a Python class"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I wonder if it's possible to keep methods for a Python class in a different file from the class definition, something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["main_module.py:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "main_module.py:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Instrument(Object):\n    # Some import statement?\n    def __init__(self):\n        self.flag = True\n    def direct_method(self,arg1):\n        self.external_method(arg1, arg2)\n</code>\n</pre>\n", "senID": 3}, {"text": ["to_import_from.py:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "to_import_from.py:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def external_method(self, arg1, arg2):\n    if self.flag:\n        #doing something\n#...many more methods\n</code>\n</pre>\n", "senID": 5}, {"text": ["In my case, to_import_from.py is machine-generated, and contains many methods.", "I would rather not copy-paste these into main_module.py or import them one by one, but have them all recognized as methods of the Instrument class, just as if they had been defined there:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "to_import_from.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; instr = Instrument()\n&gt;&gt;&gt; instr.direct_method(arg1)\n&gt;&gt;&gt; instr.external_method(arg1, arg2)\n</code>\n</pre>\n", "senID": 7}, {"text": ["Thanks!"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]