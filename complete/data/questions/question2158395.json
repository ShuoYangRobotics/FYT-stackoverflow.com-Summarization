[{"text": ["Flatten (an irregular) list of lists in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Yes, I know this subject has been covered before (here, here, here, here), but AFAIK, all solutions save one choke on a list like this:"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/120886"}, {"href": "http://stackoverflow.com/questions/406121", "text": "here", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://stackoverflow.com/questions/457215", "text": "here", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://stackoverflow.com/questions/952914", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n L = [[[1, 2, 3], [4, 5]], 6]\n</code>\n</pre>\n", "senID": 2}, {"text": ["where the desired output is"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [1, 2, 3, 4, 5, 6]\n</code>\n</pre>\n", "senID": 4}, {"text": ["or perhaps even better, an iterator.", "The only solution I saw that works for an arbitrary nesting is from @Alabaster Codify here:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Alabaster Codify", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/29903/alabaster-codify"}, {"href": "http://stackoverflow.com/questions/406121", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n def flatten(x):\n    result = []\n    for el in x:\n        if hasattr(el, \"__iter__\") and not isinstance(el, basestring):\n            result.extend(flatten(el))\n        else:\n            result.append(el)\n    return result\n\nflatten(L)\n</code>\n</pre>\n", "senID": 6}, {"text": ["So to my question:  is this the best model?", "Did I overlook something?", "Any problems?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]