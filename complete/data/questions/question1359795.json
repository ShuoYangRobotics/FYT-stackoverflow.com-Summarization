[{"text": ["Error while using multiprocessing module in a python daemon"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm getting the following error when using the multiprocessing module within a python daemon process (using python-daemon):"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "multiprocessing", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "python-daemon", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.6/atexit.py\", line 24, in _run_exitfuncs\n    func(*targs, **kargs)\n  File \"/usr/local/lib/python2.6/multiprocessing/util.py\", line 262, in _exit_function\n    for p in active_children():\n  File \"/usr/local/lib/python2.6/multiprocessing/process.py\", line 43, in active_children\n    _cleanup()\n  File \"/usr/local/lib/python2.6/multiprocessing/process.py\", line 53, in _cleanup\n    if p._popen.poll() is not None:\n  File \"/usr/local/lib/python2.6/multiprocessing/forking.py\", line 106, in poll\n    pid, sts = os.waitpid(self.pid, flag)\nOSError: [Errno 10] No child processes\n</pre>\n", "senID": 2}, {"text": ["The daemon process (parent) spawns a number of processes (children) and then periodically polls the processes to see if they have completed.", "If the parent detects that one of the processes has completed, it then attempts to restart that process.", "It is at this point that the above exception is raised.", "It seems that once one of the processes completes, any operation involving the multiprocessing module will generate this exception.", "If I run the identical code in a non-daemon python script, it executes with no errors whatsoever."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Sample script"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n from daemon import runner\n\nclass DaemonApp(object):\n    def __init__(self, pidfile_path, run):\n        self.pidfile_path = pidfile_path\n        self.run = run\n\n        self.stdin_path = '/dev/null'\n        self.stdout_path = '/dev/tty'\n        self.stderr_path = '/dev/tty'\n\ndef run():\n    import multiprocessing as processing\n    import time\n    import os\n    import sys\n    import signal\n\n    def func():\n        print 'pid: ', os.getpid()\n        for i in range(5):\n            print i\n            time.sleep(1)\n\n    process = processing.Process(target=func)\n    process.start()\n\n    while True:\n        print 'checking process'\n        if not process.is_alive():\n            print 'process dead'\n            process = processing.Process(target=func)\n            process.start()\n        time.sleep(1)\n\n# uncomment to run as daemon\napp = DaemonApp('/root/bugtest.pid', run)\ndaemon_runner = runner.DaemonRunner(app)\ndaemon_runner.do_action()\n\n#uncomment to run as regular script\n#run()\n</code>\n</pre>\n", "senID": 6}]