[{"text": ["Python function parameter: tuple/list"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["My function expects a list or a tuple as a parameter.", "It doesn't really care which it is, all it does is pass it to another function that accepts either a list or tuple:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def func(arg): # arg is tuple or list\n  another_func(x)\n  # do other stuff here\n</code>\n</pre>\n", "senID": 2}, {"text": ["Now I need to modify the function slightly, to process an additional element:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def func(arg): #arg is tuple or list\n  another_func(x + ['a'])\n  # etc\n</code>\n</pre>\n", "senID": 4}, {"text": ["Unfortunately this is not going to work: if arg is tuple, I must say x + ('a',)."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "x + ('a',)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Obviously, I can make it work by coercing arg to list.", "But it isn't neat."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Is there a better way of doing that?", "I can't force callers to always pass a tuple, of course, since it simply shifts to work to them."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]