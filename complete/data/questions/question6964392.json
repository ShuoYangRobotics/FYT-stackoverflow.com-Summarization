[{"text": ["Speed comparison with Project Euler: C vs Python vs Erlang vs Haskell"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have taken Problem #12 from Project Euler as a programming exercise and to compare my (surely not optimal) implementations in C, Python, Erlang and Haskell.", "In order to get some higher execution times, I search for the first triangle number with more than 1000 divisors instead of 500 as stated in the original problem."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Problem #12", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://projecteuler.net/index.php?section=problems&id=12"}, {"text": "Project Euler", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://projecteuler.net/"}]}, {"text": ["The result is the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["C:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "C:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n lorenzo@enzo:~/erlang$ gcc -lm -o euler12.bin euler12.c\nlorenzo@enzo:~/erlang$ time ./euler12.bin\n842161320\n\nreal    0m11.074s\nuser    0m11.070s\nsys 0m0.000s\n</code>\n</pre>\n", "senID": 4}, {"text": ["python:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "python:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n lorenzo@enzo:~/erlang$ time ./euler12.py \n842161320\n\nreal    1m16.632s\nuser    1m16.370s\nsys 0m0.250s\n</code>\n</pre>\n", "senID": 6}, {"text": ["python with pypy:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "python with pypy:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n lorenzo@enzo:~/Downloads/pypy-c-jit-43780-b590cf6de419-linux64/bin$ time ./pypy /home/lorenzo/erlang/euler12.py \n842161320\n\nreal    0m13.082s\nuser    0m13.050s\nsys 0m0.020s\n</code>\n</pre>\n", "senID": 8}, {"text": ["erlang:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "erlang:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n lorenzo@enzo:~/erlang$ erlc euler12.erl \nlorenzo@enzo:~/erlang$ time erl -s euler12 solve\nErlang R13B03 (erts-5.7.4) [source] [64-bit] [smp:4:4] [rq:4] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.7.4  (abort with ^G)\n1&gt; 842161320\n\nreal    0m48.259s\nuser    0m48.070s\nsys 0m0.020s\n</code>\n</pre>\n", "senID": 10}, {"text": ["haskell:"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "haskell:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n lorenzo@enzo:~/erlang$ ghc euler12.hs -o euler12.hsx\n[1 of 1] Compiling Main             ( euler12.hs, euler12.o )\nLinking euler12.hsx ...\nlorenzo@enzo:~/erlang$ time ./euler12.hsx \n842161320\n\nreal    2m37.326s\nuser    2m37.240s\nsys 0m0.080s\n</code>\n</pre>\n", "senID": 12}, {"text": ["Summary:"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "Summary:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "C: 100%", "tag": "none", "senID": 14}, {"text": "python: 692% (118% with pypy)", "tag": "none", "senID": 15}, {"text": "erlang: 436% (135% thanks to RichardC)", "tag": "none", "senID": 16}, {"text": "haskell: 1421%", "tag": "none", "senID": 17}]}, {"text": ["I suppose that C has a big advantage as it uses long for the calculations and not arbitrary length integers as the other three.", "Also it doesn't need to load a runtime first (Do the others?", ")."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"text": ["Question 1:\nDo Erlang, Python and Haskell loose speed due to using arbitrary length integers or don't they as long as the values are less than MAXINT?"], "childNum": 2, "tag": "p", "senID": 19, "childList": [{"text": "Question 1:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "MAXINT", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Question 2:\nWhy is Haskell so slow?", "Is there a compiler flag that turns off the brakes or is it my implementation?", "(The latter is quite probable as Haskell is a book with seven seals to me."], "childNum": 1, "tag": "p", "senID": 20, "childList": [{"text": "Question 2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Question 3:\nCan you offer me some hints how to optimize these implementations without changing the way I determine the factors?", "Optimization in any way: nicer, faster, more \"native\" to the language."], "childNum": 1, "tag": "p", "senID": 21, "childList": [{"text": "Question 3:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 22, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Question 4:\nDo my functional implementations permit LCO (last call optimization, a.k.a tail recursion elimination) and hence avoid adding unnecessary frames onto the call stack?"], "childNum": 1, "tag": "p", "senID": 23, "childList": [{"text": "Question 4:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I really tried to implement the same algorithm as similar as possible in the four languages, although I have to admit that my Haskell and Erlang knowledge is very limited."], "childNum": 0, "tag": "p", "senID": 24, "childList": []}, {"text": ["Source codes used:"], "childNum": 0, "tag": "p", "senID": 25, "childList": []}, {"code": "<pre>\n<code>\n #include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint factorCount (long n)\n{\n    double square = sqrt (n);\n    int isquare = (int) square;\n    int count = isquare == square ? -1 : 0;\n    long candidate;\n    for (candidate = 1; candidate &lt;= isquare; candidate ++)\n        if (0 == n % candidate) count += 2;\n    return count;\n}\n\nint main ()\n{\n    long triangle = 1;\n    int index = 1;\n    while (factorCount (triangle) &lt; 1001)\n    {\n        index ++;\n        triangle += index;\n    }\n    printf (\"%ld\\n\", triangle);\n}\n</code>\n</pre>\n", "senID": 26}, {"code": "<pre>\n<code>\n #! /usr/bin/env python3.2\n\nimport math\n\ndef factorCount (n):\n    square = math.sqrt (n)\n    isquare = int (square)\n    count = -1 if isquare == square else 0\n    for candidate in range (1, isquare + 1):\n        if not n % candidate: count += 2\n    return count\n\ntriangle = 1\nindex = 1\nwhile factorCount (triangle) &lt; 1001:\n    index += 1\n    triangle += index\n\nprint (triangle)\n</code>\n</pre>\n", "senID": 27}, {"code": "<pre>\n<code>\n -module (euler12).\n-compile (export_all).\n\nfactorCount (Number) -&gt; factorCount (Number, math:sqrt (Number), 1, 0).\n\nfactorCount (_, Sqrt, Candidate, Count) when Candidate &gt; Sqrt -&gt; Count;\n\nfactorCount (_, Sqrt, Candidate, Count) when Candidate == Sqrt -&gt; Count + 1;\n\nfactorCount (Number, Sqrt, Candidate, Count) -&gt;\n    case Number rem Candidate of\n        0 -&gt; factorCount (Number, Sqrt, Candidate + 1, Count + 2);\n        _ -&gt; factorCount (Number, Sqrt, Candidate + 1, Count)\n    end.\n\nnextTriangle (Index, Triangle) -&gt;\n    Count = factorCount (Triangle),\n    if\n        Count &gt; 1000 -&gt; Triangle;\n        true -&gt; nextTriangle (Index + 1, Triangle + Index + 1)  \n    end.\n\nsolve () -&gt;\n    io:format (\"~p~n\", [nextTriangle (1, 1) ] ),\n    halt (0).\n</code>\n</pre>\n", "senID": 28}, {"code": "<pre>\n<code>\n factorCount number = factorCount' number isquare 1 0 - (fromEnum $ square == fromIntegral isquare)\n    where square = sqrt $ fromIntegral number\n          isquare = floor square\n\nfactorCount' number sqrt candidate count\n    | fromIntegral candidate &gt; sqrt = count\n    | number `mod` candidate == 0 = factorCount' number sqrt (candidate + 1) (count + 2)\n    | otherwise = factorCount' number sqrt (candidate + 1) count\n\nnextTriangle index triangle\n    | factorCount triangle &gt; 1000 = triangle\n    | otherwise = nextTriangle (index + 1) (triangle + index + 1)\n\nmain = print $ nextTriangle 1 1\n</code>\n</pre>\n", "senID": 29}]