[{"text": ["Best data-structure to use for two ended sorted list"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I need a collection data-structure that can do the following:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": "Be sorted", "tag": "none", "senID": 2}, {"text": "Allow me to quickly pop values off the front ", "tag": "none", "senID": 3}, {"text": "Remain sorted after I insert a new value", "tag": "none", "senID": 4}, {"text": "Allow a user-specified comparison function, as I will be storing tuples and want to sort on a particular value ", "tag": "none", "senID": 5}, {"text": "Thread-safety is not required", "tag": "none", "senID": 6}, {"text": "Optionally allow efficient haskey() lookups (I'm happy to maintain a separate hash-table for this though)", "tag": "none", "senID": 7}]}, {"text": ["My thoughts at this stage are that I need a priority queue and a hash table, although I don't know if I can quickly pop values off both ends of a priority queue.", "Another possibility is simply maintaining an OrderedDictionary and doing an insertion sort it every-time I add more data to it."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "both", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["Because I'm interested in performance for a moderate number of items (I would estimate less than 200,000), I am unsure about what asymptotic performance I require for these operations.", "n will not grow infinitely, so a low constant performance k in k * O(n) may be as important O(n).", "That said, I would prefer that both the insert and pop operations take O(log n) time."], "childNum": 4, "tag": "p", "senID": 9, "childList": [{"text": "k", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "k * O(n)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "O(n)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "O(log n)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Furthermore, are there any particular implementations in Python?", "I would really like to avoid writing this code myself."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]