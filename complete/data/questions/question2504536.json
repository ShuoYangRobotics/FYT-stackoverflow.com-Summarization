[{"text": ["Why allow concatenation of string literals?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I was recently bitten by a subtle bug."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n char ** int2str = {\n   \"zero\", // 0\n   \"one\",  // 1\n   \"two\"   // 2\n   \"three\",// 3\n   nullptr };\n\nassert( int2str[1] == std::string(\"one\") ); // passes\nassert( int2str[2] == std::string(\"two\") ); // fails\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you have godlike code review powers you'll notice I forgot the , after \"two\"."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": ",", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"two\"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["After the considerable effort to find that bug I've got to ask why would anyone ever want this behavior?"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "why would anyone ever want this behavior?", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["I can see how this might be useful for macro magic, but then why is this a \"feature\" in a modern language like python?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Have you ever used string literal concatenation in production code?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]