[{"text": ["Checking compatible total orders given by a Python list"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm using the IPython shell here."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "IPython shell", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/moin/"}]}, {"text": ["Suppose I have two lists"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n In [1]: L1 = [1,3,4,5,2]\n\nIn [2]: L2 = [1,3,5,5,1]\n</code>\n</pre>\n", "senID": 3}, {"text": ["I'd like to say that L1 and L2 are compatible in the sense that the ordering generated by the indices of the increasing order of the elements are compatible.  "], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "L1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "L2", "childNum": 0, "tag": "code", "childList": []}, {"text": "indices", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["That is, L1 gives 0&lt;4&lt;1&lt;2&lt;3 while L2 gives {0,4}&lt;1&lt;{2,3}.", "(If stackoverflow accepted jsmath or MathJax, this would be easier, my apologies.", ")  "], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "L1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "L2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Edit: As pointed out below, this is not exactly checking whether two given elements are &lt; or &lt;= in both of these.", "I like @Cosmologicon's example that [1,2] and [1,1] are compatible, as are [1,1] and [2,1], but [2,1] and [1,2] are not.", "I hope this clarifies what I mean."], "childNum": 6, "tag": "p", "senID": 6, "childList": [{"text": "[1,2]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "[1,1]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[1,1]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[2,1]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[2,1]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[1,2]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["So I'd like a way to take two lists and check that the (not necessarily strict) total orders given by those two lists are compatible like this.", "Here is an example where they are not."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n In [3]: L3 = [1,2,3,4,5]\n\nIn [4]: L4 = [1,2,4,2,5]\n</code>\n</pre>\n", "senID": 8}, {"text": ["I hope it is clear the order given by L3 is 0&lt;1&lt;2&lt;3&lt;4; the order given by L4 is 0&lt;{1,3}&lt;2&lt;4, and the incompatibility is that while 1&lt;=3 in both orders, 2&lt;3 in one of the while 3&lt;2 in the other.  "], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "L3", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "L4", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Another, harder, example is whether [1,3,5,5,1] and [1,2,2,3,2] are compatible.", "The non-strict total orders are {0,4}&lt;1&lt;{2,3} and 0&lt;{1,2,4}&lt;3"], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "[1,3,5,5,1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[1,2,2,3,2]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["It would suffice for my purposes to restrict to the case where the biggest number is always len(list1) and the only possible values are integers from 1 to len(list1) and where list1 always is some permutation of that set of integers, but naturally I wouldn't complain if someone found something more general.", "Thanks very much in advance!"], "childNum": 5, "tag": "p", "senID": 11, "childList": [{"text": "len(list1)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "len(list1)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "and", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "list1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Disclaimer from a first-time poster:  This is not a question about sorting :)  I did do quite a bit of searching for this, but really only found more programming-type questions, which are nearly always about sorting or comparing values; this is a little more subtle.", "In fact, it's really a mathematical application, so it may not seem as 'useful' to many folks here, though it will be quite useful to me.", "At any rate, it's beyond my current skill level to hack this out very quickly, though I hope someday it will be 'obvious' to me.", "I don't think there is anything in itertools for this, either, though I'd love to be proven wrong."], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]