[{"text": ["how to detect an escape sequence in a string"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Given a string named line whose raw version has this value:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n \\rRAWSTRING\n</code>\n</pre>\n", "senID": 2}, {"text": ["how can I detect if it has the escape character \\r?", "What I've tried is:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if repr(line).startswith('\\r'):\n    blah...\n</code>\n</pre>\n", "senID": 4}, {"text": ["but it doesn't catch it.", "I also tried find, such as:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if repr(line).find('\\r') != -1:\n    blah\n</code>\n</pre>\n", "senID": 6}, {"text": ["doesn't work either.", "What am I missing?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["thx!"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["thanks for all the replies and the corrections re terminolgy and sorry for the confusion. "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["OK, if i do this "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n print repr(line)\n</code>\n</pre>\n", "senID": 12}, {"text": ["then what it prints is:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n '\\rSET ENABLE ACK\\n'\n</code>\n</pre>\n", "senID": 14}, {"text": ["(including the single quotes).", "i have tried all the suggestions, including:"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n line.startswith(r'\\r')\nline.startswith('\\\\r')\n</code>\n</pre>\n", "senID": 16}, {"text": ["each of which returns False.", "also tried:"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n line.find(r'\\r')\nline.find('\\\\r')\n</code>\n</pre>\n", "senID": 18}, {"text": ["each of which returns -1"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}]