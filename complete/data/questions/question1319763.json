[{"text": ["Key-ordered dict in python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am looking for a solid implementation of an ordered associative array (in terms of keys, not  of insertion order)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["More precisely, I am looking for a space-efficent implementation of a int-to-float (or string-to-float for another use case) mapping structure for which:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Ordered iteration is O(n)", "tag": "none", "senID": 3}, {"text": "Random access is O(1)", "tag": "none", "senID": 4}]}, {"text": ["The best I came up with was gluing a dict and a list of keys, keeping the last one ordered with bisect and insert."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Any better idea ?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]