[{"text": ["Is there a neater alternative to `except: pass`?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I had a function that returned a random member of several groups in order of preference.", "It went something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def get_random_foo_or_bar():\n    \"I'd rather have a foo than a bar.\"\n\n    if there_are_foos():\n        return get_random_foo()\n\n    if there_are_bars():\n        return get_random_bar()\n\n    raise IndexError, \"No foos, no bars\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["However, the first thing get_random_foo does is verify there are foos and raise an IndexError if not, so there_are_foos is redundant.", "Moreover, a database is involved and using separate functions creates a concurrency issue.", "Accordingly, I rewrote it something like this:"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "get_random_foo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "IndexError", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "there_are_foos", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def get_random_foo_or_bar():\n    \"Still prefer foos.\"\n\n    try:\n        return get_random_foo()\n    except IndexError:\n        pass\n\n    try:\n        return get_random_bar()\n    except IndexError:\n        pass\n\n    raise IndexError, \"No foos, no bars\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["But I find this much less readable, and as I've never had reason to use pass before it feels instictively wrong."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "pass", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Is there a neater efficient pattern, or should I learn to accept pass?"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "pass", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Note: I'd like to avoid any nesting since other types may be added later."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Thanks everyone who said that pass is fine - that's reassuring!"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "pass", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Also thanks to those who suggested replacing the exception with a return value of None.", "I can see how this is a useful pattern, but I would argue it's semantically wrong in this situation: the functions have been asked to perform an impossible task so they should raise an exception.", "I prefer to follow the behaviour of the random module (eg.", "random.choice([]))."], "childNum": 3, "tag": "p", "senID": 10, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "random", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "random.choice([])", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}]