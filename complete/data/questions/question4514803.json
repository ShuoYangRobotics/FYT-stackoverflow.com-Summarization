[{"text": ["Diamond problem when using MixIns in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Please consider the following code implementing a simple MixIn:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "MixIn", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Story(object):\n    def __init__(self, name, content):  \n     self.name = name\n     self.content = content    \n\nclass StoryHTMLMixin(object):\n    def render(self):\n     return (\"&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;\"\n         \"&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;\"\n         % (self.name, self.content))\n\ndef MixIn(TargetClass, MixInClass):\n    if MixInClass not in TargetClass.__bases__:\n     TargetClass.__bases__ += (MixInClass,)\n\nif __name__ == \"__main__\":\n    my_story = Story(\"My Life\", \"&lt;p&gt;Is good.&lt;/p&gt;\")\n    # plug-in the MixIn here\n    MixIn(Story, StoryHTMLMixin)\n    # now I can render the story as HTML\n    print my_story.render()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Running main leads to the following error:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "main", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n TypeError: Cannot create a consistent method resolution\norder (MRO) for bases object, StoryHTMLMixin\n</code>\n</pre>\n", "senID": 4}, {"text": ["The problem is that both Story and StoryHTMLMixin are derived from object, and the diamond problem arises."], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "Story", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "StoryHTMLMixin", "childNum": 0, "tag": "code", "childList": []}, {"text": "object", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://en.wikipedia.org/wiki/Diamond_problem", "text": "diamond problem", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["The solution is simply to make StoryHTMLMixin an old-style class, i.e., remove the inheritance from object, thus, changing the definition of the class StoryHTMLMixin to:"], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "StoryHTMLMixin", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "old-style class", "childNum": 0, "tag": "em", "childList": []}, {"text": "object", "childNum": 0, "tag": "code", "childList": []}, {"text": "StoryHTMLMixin", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class StoryHTMLMixin:\n    def render(self):\n     return (\"&lt;html&gt;&lt;title&gt;%s&lt;/title&gt;\"\n         \"&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;\"\n         % (self.name, self.content))\n</code>\n</pre>\n", "senID": 7}, {"text": ["leads to the following result when running main:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "main", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &lt;html&gt;&lt;title&gt;My Life&lt;/title&gt;&lt;body&gt;&lt;p&gt;Is good.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\n</code>\n</pre>\n", "senID": 9}, {"text": ["I don't like having to use old style classes, so my question is:"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "old style classes", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Is this the correct way to handle this problem in Python, or is there a better way?"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "Is this the correct way to handle this problem in Python, or is there a better way?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["I see that the class UserDict in the latest Python source defines a MixIn resorting to the old style classes (as presented in my example)."], "childNum": 2, "tag": "p", "senID": 13, "childList": [{"text": "UserDict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://svn.python.org/view/python/branches/release27-maint/Lib/UserDict.py?view=markup", "text": "latest Python source", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["As recommended by all, I may resort to redefining the functionality that I want to attain (namely, the binding of methods at run time) without using MixIns.", "However, the point still remains - is this the only use case where messing with the MRO is unsolvable without resorting to reimplementation or falling back to old-style classes?"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}]