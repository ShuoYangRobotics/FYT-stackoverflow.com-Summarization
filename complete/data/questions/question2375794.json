[{"text": ["C#: Equivalent of the python try/catch/else block"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["In Python, there is this useful exception handling code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try:\n    # Code that could raise an exception\nexcept Exception:\n    # Exception handling\nelse:\n    # Code to execute if the try block DID NOT fail\n</code>\n</pre>\n", "senID": 2}, {"text": ["I think it's useful to be able to separate the code that could raise and exception from your normal code.", "In Python, this was possible as shown above, however I can't find anything like it in C#."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "could", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Assuming the feature or one like it doesn't exist, is it standard practice to put normal code in the try block or after the catch block?"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "try", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "catch", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The reason I ask is because I have the following code:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if (!IsReadOnly)\n{\n    T newobj;\n    try\n    {\n        newobj = DataPortal.Update&lt;T&gt;(this);\n\n        List&lt;string&gt; keys = new List&lt;string&gt;(BasicProperties.Keys);\n        foreach (string key in keys)\n        {\n            BasicProperties[key] = newobj.BasicProperties[key];\n        }\n    }\n    catch (DataPortalException)\n    {\n        // TODO: Implement DataPortal.Update&lt;T&gt;() recovery mechanism\n    }\n}\n</code>\n</pre>\n", "senID": 6}, {"text": ["Which requires the normal code to be in the try block because otherwise if an exception was raised and subsequently handled, newobj would be unassigned, but it feels quite unnatural to have this much code in the try block which is unrelated to the DataPortalException.", "What to do?"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "newobj", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "DataPortalException", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Thanks"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]