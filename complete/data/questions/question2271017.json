[{"text": ["eagerly evaluating boolean expressions in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Is there a way (using eval or whatever) to evaluate eagerly boolean expressions in python?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Let's see this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 3\n&gt;&gt;&gt; 5 &lt; x &lt; y\nFalse\n</code>\n</pre>\n", "senID": 3}, {"text": ["Yikes!", "That's very nice, because this will be false regardless of y's value.", "The thing is, y can be even undefined, and I'd like to get that exception.", "How can I get python to evaluate all expressions even if it knows the result beforehand?"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "y", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Hope I made myself clear!", "Thanks,\nManuel"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["Edit: Please bear in mind that the expression must not be modified, just the evaluation technique."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]