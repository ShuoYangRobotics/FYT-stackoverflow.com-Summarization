[{"text": ["Scaling temporary records in database to count totals to stop over-subscribing"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm looking at a system where people RSVP to a free web conference, these web conferences can get really busy with a lot of interest and there are limited places, so there has to be some way to ensure it doesn't get over-subscribed...", "So, we need to have a countdown from the time they book their seat to the time that their order is completed and confirmed.", "This way it's the first X amount of people to actually click 'Attending' that get the seats for the conference.", "If the user does not complete their booking their allocated seat is put back in the pool for someone else to grab..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["An overview of what happens (how I see this best working)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["1) User clicks \"RSVP\" on event, this makes an AJAX request to /rsvp/{event_id}/"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["This goes and stores a unique id (refered to as token in the rest of this question) along with a timestamp.", "It stores that token in a session too."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["The user is then notified they have X amount of time (let's say 5 mins) to complete the rest of their details (name/email/d.o.b, etc)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["However: before anything is put in the database, it checks if the amount of pending orders is less than the total seats available, if not (there are no seats left for the conference) then it returns saying \"sorry, no seats available any more, keep checking as bookings aren't completed and more seats become available\" "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["2) If the user fills this out in time, it stores their details in database as \"attending\"...."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["If however they fail to fill the form out in time, there is a cron job running every second and go through and delete any tokens that have a timestamp of over 5 minutes ago so they will loose their chance to attend, this 'seat' on the conference is then put back in to the pool.", "(They'll be notified they were unsuccessful and taken back to the first step)"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["All easy enough to write with simply putting records in a database, doing a COUNT(*) FROM pending_bookings WHERE conference_id = {x} and working out how many seats are either confirmed or orders pending, then subtracting from the total seats available for the conference."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "COUNT(*) FROM pending_bookings WHERE conference_id = {x}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["But I don't feel that using MySQL would be very scalable on this - these have (and I'm sure will have again) in excess of 200k people trying to grab around 200 seats, doing a COUNT(*) for each one of those people will get pretty expensive, and we can't do any decent caching as it needs to be checking in real time how many people are in the process."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["I've looked into using Amazon SimpleDB for this, just for it's deploy-and-go scalability, but I've used it before and seen that COUNT() isn't necessarily accurate (nature of it's scalability I guess) - for obvious reasons that COUNT needs to be 100% accurate, I need to be able to add records along with a timestamp to it and be able to delete records from it older than five minutes."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "Amazon SimpleDB", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://aws.amazon.com/simpledb/"}]}]