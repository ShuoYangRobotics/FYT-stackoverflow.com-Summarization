[{"text": ["Using lookahead with generators"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have implemented a generator-based scanner in Python that tokenizes a string into tuples of the form (token type, token value):"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "(token type, token value)", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for token in scan(\"a(b)\"):\n    print token\n</code>\n</pre>\n", "senID": 2}, {"text": ["would print"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n (\"literal\", \"a\")\n(\"l_paren\", \"(\")\n...\n</code>\n</pre>\n", "senID": 4}, {"text": ["The next task implies parsing the token stream and for that, I need be able to look one item ahead from the current one without moving the pointer ahead as well.", "The fact that iterators and generators do not provide the complete sequence of items at once but each item as needed makes lookaheads a bit trickier compared to lists, since the next item is not known unless __next__() is called."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["What could a straightforward implementation of a generator-based lookahead look like?", "Currently I'm using a workaround which implies making a list out of the generator:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n token_list = [token for token in scan(string)]\n</code>\n</pre>\n", "senID": 7}, {"text": ["The lookahead then is easily implemented by something like that:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n try:\n    next_token = token_list[index + 1]\nexcept: IndexError:\n    next_token = None\n</code>\n</pre>\n", "senID": 9}, {"text": ["Of course this just works fine.", "But thinking that over, my second question arises: Is there really a point of making scan() a generator in the first place?"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Thanks in advance!"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Regards,"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["jena"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}]