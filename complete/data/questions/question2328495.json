[{"text": ["Python code optimization (20x slower than C)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've written this very badly optimized C code that does a simple math calculation:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n#include &lt;stdlib.h&gt;\n#define MIN(a, b) (((a) &lt; (b)) ? (a) : (b))\n#define MAX(a, b) (((a) &gt; (b)) ? (a) : (b))\n\n\nunsigned long long int p(int);\nfloat fullCheck(int);\n\nint main(int argc, char **argv){\n  int i, g, maxNumber;\n  unsigned long long int diff = 1000;\n\n  if(argc &lt; 2){\n    fprintf(stderr, \"Usage: %s maxNumber\\n\", argv[0]);\n    return 0;\n  }\n  maxNumber = atoi(argv[1]);\n\n  for(i = 1; i &lt; maxNumber; i++){\n    for(g = 1; g &lt; maxNumber; g++){\n      if(i == g)\n        continue;\n      if(p(MAX(i,g)) - p(MIN(i,g)) &lt; diff &amp;&amp;  fullCheck(p(MAX(i,g)) - p(MIN(i,g))) &amp;&amp; fullCheck(p(i) + p(g))){\n          diff = p(MAX(i,g)) - p(MIN(i,g));\n          printf(\"We have a couple %llu %llu with diff %llu\\n\", p(i), p(g), diff);\n      }\n    }\n  }\n\n  return 0;\n}\n\nfloat fullCheck(int number){\n  float check = (-1 + sqrt(1 + 24 * number))/-6;\n  float check2 = (-1 - sqrt(1 + 24 * number))/-6;\n  if(check/1.00 == (int)check)\n    return check;\n  if(check2/1.00 == (int)check2)\n    return check2;\n  return 0;\n}\n\nunsigned long long int p(int n){\n  return n * (3 * n - 1 ) / 2;\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["And then I've tried (just for fun) to port it under Python to see how it would react.", "My first version was almost a 1:1 conversion that run terribly slow (120+secs in Python vs &lt;1sec in C).", "I've done a bit of optimization, and this is what I obtained:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env/python\nfrom cmath import sqrt\nimport cProfile\nfrom pstats import Stats\n\ndef quickCheck(n):\n        partial_c = (sqrt(1 + 24 * (n)))/-6 \n        c = 1/6 + partial_c\n        if int(c.real) == c.real:\n                return True\n        c = c - 2*partial_c\n        if int(c.real) == c.real:\n                return True\n        return False\n\ndef main():        \n        maxNumber = 5000\n        diff = 1000\n        for i in range(1, maxNumber):\n                p_i = i * (3 * i - 1 ) / 2\n                for g in range(i, maxNumber):\n                        if i == g:\n                                continue\n                        p_g = g * (3 * g - 1 ) / 2\n                        if p_i &gt; p_g:\n                                ma = p_i\n                                mi = p_g\n                        else:\n                                ma = p_g\n                                mi = p_i\n\n                        if ma - mi &lt; diff and quickCheck(ma - mi):\n                                if quickCheck(ma + mi):\n                                        print ('New couple ', ma, mi)\n                                        diff = ma - mi\n\n\ncProfile.run('main()','script_perf')\nperf = Stats('script_perf').sort_stats('time', 'calls').print_stats(10)\n</code>\n</pre>\n", "senID": 4}, {"text": ["This runs in about 16secs which is better but also almost 20 times slower than C.\nNow, I know C is better than Python for this kind of calculations, but what I would like to know is if there something that I've missed (Python-wise, like an horribly slow function or such) that could have made this function faster.", "Please note that I'm using Python 3.1.1, if this makes a difference"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]