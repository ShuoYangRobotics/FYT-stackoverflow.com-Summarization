[{"text": ["How do I make this list function faster?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def removeDuplicatesFromList(seq): \n    # Not order preserving \n    keys = {}\n    for e in seq:\n        keys[e] = 1\n    return keys.keys()\n\ndef countWordDistances(li):\n    '''\n    If li = ['that','sank','into','the','ocean']    \n    This function would return: { that:1, sank:2, into:3, the:4, ocean:5 }\n    However, if there is a duplicate term, take the average of their positions\n    '''\n    wordmap = {}\n    unique_words = removeDuplicatesFromList(li)\n    for w in unique_words:\n        distances = [i+1 for i,x in enumerate(li) if x == w]\n        wordmap[w] = float(sum(distances)) / float(len(distances)) #take average\n    return wordmap\n</code>\n</pre>\n", "senID": 1}, {"text": ["How do I make this function faster?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]