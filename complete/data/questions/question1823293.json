[{"text": ["Optimized method for calculating cosine distance in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I wrote a method to calculate the cosine distance between two arrays:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def cosine_distance(a, b):\n    if len(a) != len(b):\n    \treturn False\n    numerator = 0\n    denoma = 0\n    denomb = 0\n    for i in range(len(a)):\n    \tnumerator += a[i]*b[i]\n    \tdenoma += abs(a[i])**2\n    \tdenomb += abs(b[i])**2\n    result = 1 - numerator / (sqrt(denoma)*sqrt(denomb))\n    return result\n</code>\n</pre>\n", "senID": 2}, {"text": ["Running it can be very slow on a large array.", "Is there an optimized version of this method that would run faster?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Update: I've tried all the suggestions to date, including scipy.", "Here's the version to beat, incorporating suggestions from Mike and Steve:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def cosine_distance(a, b):\n    if len(a) != len(b):\n    \traise ValueError, \"a and b must be same length\" #Steve\n    numerator = 0\n    denoma = 0\n    denomb = 0\n    for i in range(len(a)):       #Mike's optimizations:\n    \tai = a[i]             #only calculate once\n    \tbi = b[i]\n    \tnumerator += ai*bi    #faster than exponent (barely)\n    \tdenoma += ai*ai       #strip abs() since it's squaring\n    \tdenomb += bi*bi\n    result = 1 - numerator / (sqrt(denoma)*sqrt(denomb))\n    return result\n</code>\n</pre>\n", "senID": 5}]