[{"text": ["Regex for finding valid sphinx fields"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm trying to validate that the fields given to sphinx are valid, but I'm having difficulty."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Imagine that valid fields are cat, mouse, dog, puppy."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Valid searches would then be:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "@cat search terms ", "tag": "none", "senID": 4}, {"text": "@(cat) search terms", "tag": "none", "senID": 5}, {"text": "@(cat, dog) search term", "tag": "none", "senID": 6}, {"text": "@cat searchterm1 @dog searchterm2 ", "tag": "none", "senID": 7}, {"text": "@(cat, dog) searchterm1 @mouse searchterm2", "tag": "none", "senID": 8}]}, {"text": ["So, I want to use a regular expression to find terms such as cat, dog, mouse in the above examples, and check them against a list of valid terms."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Thus, a query such as:\n@(goat)"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Would produce an error because goat is not a valid term."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["I've gotten so that I can find simple queries such as @cat with this regex: (?", ":@)([^( ]*)"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["But I can't figure out how to find the rest."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["I'm using python &amp; django, for what that's worth."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}]