[{"text": ["referencing class methods in class lists in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am writing a class in Python 2.6.2 that contains a lookup table.", "Most cases are simple enough that the table contains data.", "Some of the cases are more complex and I want to be able call a function.", "However, I'm running into some trouble referencing the function."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's some sample code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class a:\n    lut = [1,\n           3,\n           17,\n           [12,34],\n           5]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Where lut is static, and is expected to be constant as well."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "lut", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["and now I wan to do the following:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n class a:\n    def spam0(self):\n        return (some_calculation_based_on_self)\n\n    def spam1(self):\n        return (a_different_calculation_based_on_self)\n\n    lut = [1,\n           3,\n           17,\n           [12,34],\n           5,\n           self.spam0\n           self.spam1]\n</code>\n</pre>\n", "senID": 6}, {"text": ["This doesn't compile because self.spam0 and self.spam1 are undefined.", "I tried using a.spam but that is also undefined.", "How can I set lut[5] to return a reference to self.spam?"], "childNum": 5, "tag": "p", "senID": 7, "childList": [{"text": "self.spam0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self.spam1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "a.spam", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "lut[5]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "self.spam", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit: This is what I plan to do:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["(continuing the definition of class a):\n    import inspect"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "class a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # continue to somewhere in the definition of class a\n\ndef __init__(self, param):\n    self.param = param\n\ndef eggs(self):\n    tmp = lut[param]\n    if (insect.isfunction(tmp)): # if tmp is self.spam()\n        return tmp()             # should call it here\n    return tmp\n</code>\n</pre>\n", "senID": 10}, {"text": ["So I want to either return a simple value or run some extra code, depending on the parameter."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Edit: lut doesn't have to be a class property, but the methods spam0 and spam1 do need to access the class members, so they have to belong to the class."], "childNum": 4, "tag": "p", "senID": 12, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "lut", "childNum": 0, "tag": "code", "childList": []}, {"text": "spam0", "childNum": 0, "tag": "code", "childList": []}, {"text": "spam1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I'm not sure that this is the best way to do this.", "I'm still in the process of working this out."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}]