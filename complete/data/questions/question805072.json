[{"text": ["Server Side Google Markers Clustering - Python/Django"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["After experimenting with client side approach to clustering large numbers of Google markers I decided that it won't be possible for my project (social network with 28,000+ users)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Are there any examples of clustering the coordinates on the server side - preferably in Python/Django?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The way I would like this to work is to gradually index the markers based on their proximity (radius) and zoom level. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In another words when a new user registers he/she is automatically assigned to a certain 'group' of markers that are close to each other thus increasing the 'group's' counter.", "What's being send to the server is just a small number of 'groups'.", "Only when the zoom level/scale of map is 1:1 - actual users are shown on the map. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["That way the client side will have to deal only with 10-50 markers per request/zoom level. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]