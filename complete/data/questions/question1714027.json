[{"text": ["Version number comparison"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Python must have a more elegant solution to this ... maybe one of you can help:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I want to write a cmp-like function returning -1, 0 or 1 for version numbers, allowing for an arbitrary number of subsections. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "cmp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Each subsection is supposed to be interpreted as a number, therefore 1.10 > 1.1. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Desired function outputs are"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["mycmp('1.0', '1') == 0\nmycmp('1.0.0', '1') == 0\nmycmp('1', '1.0.0.1') == -1\nmycmp('12.10', '11.0.0.0.0') == 1\n..."], "childNum": 8, "tag": "p", "senID": 5, "childList": [{"text": "mycmp('1.0', '1') == 0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "mycmp('1.0.0', '1') == 0", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "mycmp('1', '1.0.0.1') == -1", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "mycmp('12.10', '11.0.0.0.0') == 1", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["And here is my implementation, open for improvement:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def mycmp(version1, version2):\n    parts1 = [int(x) for x in version1.split('.')]\n    parts2 = [int(x) for x in version2.split('.')]\n\n    # fill up the shorter version with zeros ...\n    lendiff = len(parts1) - len(parts2)\n    if lendiff &gt; 0:\n        parts2.extend([0] * lendiff)\n    elif lendiff &lt; 0:\n        parts1.extend([0] * (-lendiff))\n\n    for i, p in enumerate(parts1):\n        ret = cmp(p, parts2[i])\n        if ret: return ret\n    return 0\n</code>\n</pre>\n", "senID": 7}, {"text": ["I'm using Python 2.4.5 btw.", "(installed at my working place ...)."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Here's a small 'test suite' you can use"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n assert mycmp('1', '2') == -1\nassert mycmp('2', '1') == 1\nassert mycmp('1', '1') == 0\nassert mycmp('1.0', '1') == 0\nassert mycmp('1', '1.000') == 0\nassert mycmp('12.01', '12.1') == 0\nassert mycmp('13.0.1', '13.00.02') == -1\nassert mycmp('1.1.1.1', '1.1.1.1') == 0\nassert mycmp('1.1.1.2', '1.1.1.1') == 1\nassert mycmp('1.1.3', '1.1.3.000') == 0\nassert mycmp('3.1.1.0', '3.1.2.10') == -1\nassert mycmp('1.1', '1.10') == -1\n</code>\n</pre>\n", "senID": 10}]