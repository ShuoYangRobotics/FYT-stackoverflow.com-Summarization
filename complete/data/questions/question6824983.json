[{"text": ["How do I implement a Java-like enumeration in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["what is the python version of saying this.. this is in java"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n public static enum Operations {Add, Subtract, Multiply, Divide, None};\n</code>\n</pre>\n", "senID": 2}, {"text": ["I am converting an entire program to python, i just cant figure out this part"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["heres my whole class"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import java.util.*;\n\npublic class Expression\n{\n    public static enum Operations {Add, Subtract, Multiply, Divide, None};\n    int a;\n    int b;\n    Expression.Operations op;\n    public Expression()\n    {\n        a = 0;\n        b = 0;\n        op = Expression.Operations.None;\n    }\n    public Expression(int value1, int value2, Expression.Operations operation)\n    {\n        a = value1;\n        b = value2;\n        op = operation;\n    }\n\n    public boolean parseString(String expressionString, Map&lt;Character, Integer&gt; vars)\n    {\n        Scanner scanner = new Scanner(expressionString);\n\n        //Attempt to read the first value.\n        if (scanner.hasNextInt())\n            a = scanner.nextInt();\n        else if (scanner.hasNext())\n        {\n            String var = scanner.next();\n            //Ensure that the variable identifier is a single alphabetical character in length.\n            if (!var.matches(\"[A-Z]{1}\"))\n            {\n                return false;\n            }\n            if (vars.containsKey(var.charAt(0)))\n                a = vars.get(var.charAt(0));\n            else\n            {\n                System.err.println(\"ERROR: Uninitialized variable.\");\n                return false;\n            }\n        }\n        else return false;\n\n        //If more tokens exist, attempt to read the operator.\n        if (scanner.hasNext())\n        {\n            String operator = scanner.next();\n            if (operator.equals(\"+\"))\n                op = Expression.Operations.Add;\n            else if (operator.equals(\"-\"))\n                op = Expression.Operations.Subtract;\n            else if (operator.equals(\"*\"))\n                op = Expression.Operations.Multiply;\n            else if (operator.equals(\"/\"))\n                op = Expression.Operations.Divide;\n            else\n                return false;\n\n            //Attempt to read the second value.\n            if (scanner.hasNextInt())\n                b = scanner.nextInt();\n            else if (scanner.hasNext())\n            {\n                String var = scanner.next();\n                //Ensure that the variable identifier is a single alphabetical character in length.\n                if (!var.matches(\"[A-Z]{1}\"))\n                {\n                    return false;\n                }\n                b = vars.get(var.charAt(0));\n            }\n            else return false;\n        }\n\n        return true;\n    }\n    public int evaluate()\n    {\n        int value = 0;\n        if (op == Expression.Operations.Add)\n            value = a + b;\n        if (op == Expression.Operations.Subtract)\n            value = a - b;\n        if (op == Expression.Operations.Multiply)\n            value = a * b;\n        if (op == Expression.Operations.Divide)\n            value = a / b;\n        if (op == Expression.Operations.None)\n            value = a;\n        return value;\n    }\n}\n</code>\n</pre>\n", "senID": 5}]