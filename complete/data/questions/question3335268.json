[{"text": ["Are object literals Pythonic?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["JavaScript has object literals, e.g."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n var p = {\n  name: \"John Smith\",\n  age:  23\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["and .NET has anonymous types, e.g."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n var p = new { Name = \"John Smith\", Age = 23}; // C#\n</code>\n</pre>\n", "senID": 4}, {"text": ["Something similar can be emulated in Python by (ab)using named arguments:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n class literal(object):\n    def __init__(self, **kwargs):\n        for (k,v) in kwargs.iteritems():\n            self.__setattr__(k, v)\n    def __repr__(self):\n        return 'literal(%s)' % ', '.join('%s = %r' % i for i in sorted(self.__dict__.iteritems()))\n    def __str__(self):\n        return repr(self)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n p = literal(name = \"John Smith\", age = 23)\nprint p       # prints: literal(age = 23, name = 'John Smith')\nprint p.name  # prints: John Smith\n</code>\n</pre>\n", "senID": 8}, {"text": ["But is this kind of code considered to be Pythonic?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]