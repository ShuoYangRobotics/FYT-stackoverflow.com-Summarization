[{"text": ["Python's re module - saving state?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["One of the biggest annoyances I find in Python is the inability of the re module to save its state without explicitly doing it in a match object.", "Often, one needs to parse lines and if they comply a certain regex take out values from them by the same regex.", "I would like to write code like this:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if re.match('foo (\\w+) bar (\\d+)', line):\n  # do stuff with .group(1) and .group(2)\nelif re.match('baz whoo_(\\d+)', line):\n  # do stuff with .group(1)\n# etc.\n</code>\n</pre>\n", "senID": 2}, {"text": ["But unfortunately it's impossible to get to the matched object of the previous call to re.match, so this is written like this:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "re.match", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n m = re.match('foo (\\w+) bar (\\d+)', line)\nif m:\n  # do stuff with m.group(1) and m.group(2)\nelse:\n  m = re.match('baz whoo_(\\d+)', line)\n  if m:\n    # do stuff with m.group(1)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Which is rather less convenient and gets really unwieldy as the list of elifs grows longer."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "elif", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["A hackish solution would be to wrap the re.match and re.search in my own objects that keep state somewhere.", "Has anyone used this?", "Are you aware of semi-standard implementations (in large frameworks or something)?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["What other workarounds can you recommend?", "Or perhaps, am I just misusing the module and could achieve my needs in a cleaner way?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Thanks in advance"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]