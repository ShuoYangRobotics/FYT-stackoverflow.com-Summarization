[{"text": ["pythonic way to associate list elements with their indices"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a list of values and I want to put them in a dictionary that would map each value to it's index."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I can do it this way: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; t = (5,6,7)\n&gt;&gt;&gt; d = dict(zip(t, range(len(t))))\n&gt;&gt;&gt; d\n{5: 0, 6: 1, 7: 2}\n</code>\n</pre>\n", "senID": 3}, {"text": ["this is not bad, but I'm looking for something more elegant."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I've come across the following, but it does the opposite of what I need:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = dict(enumerate(t))\n&gt;&gt;&gt; d\n{0: 5, 1: 6, 2: 7}\n</code>\n</pre>\n", "senID": 6}, {"text": ["Please share your solutions,\nThank you"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["EDIT: Python 2.6.4"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["For lists containing 1000 elements the dict(zip) version is the fastest, the generator and the list comprehension versions are virtually identical and they are ~1.5 times slower and the functional map(reversed) is considerably slower."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["$ python -mtimeit -s\"t = range(int(1e3))\" \"d = dict(zip(t, range(len(t))))\"\n1000 loops, best of 3: 277 usec per loop"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["$ python -mtimeit -s\"t = range(int(1e3))\" \"d = dict([(y,x) for x,y in enumerate(t)])\"\n1000 loops, best of 3: 426 usec per loop"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["$ python -mtimeit -s\"t = range(int(1e3))\" \"d = dict((y,x) for x,y in enumerate(t))\"\n1000 loops, best of 3: 437 usec per loop"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["$ python -mtimeit -s\"t = range(int(1e3))\" \"d = dict(map(reversed, enumerate(t)))\"\n100 loops, best of 3: 3.66 msec per loop"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["I tried running the same tests for longer and for shorter lists (1e2, 1e4, 1e5) and the time per loop scales linearly with the length of the list."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Could somebody time py 2.7+ version?"], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "Could somebody time py 2.7+ version?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]