[{"text": ["Remove duplicate rows from a large file in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've a csv file that I want to remove duplicate rows from, but it's too large to fit into memory.", "I found a way to get it done, but my guess is that it's not the best way. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Each row contains 15 fields and several hundred characters, and all fields are needed to determine uniqueness.", "Instead of comparing the entire row to find a duplicate, I'm comparing hash(row-as-a-string) in an attempt to save memory.", "I set a filter that partitions the data into a roughly equal number of rows (e.g.", "days of the week), and each partition is small enough that a lookup table of hash values for that partition will fit in memory.", "I pass through the file once for each partition, checking for unique rows and writing them out to a second file (pseudo code):"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "hash(row-as-a-string)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import csv\n\nheaders={'DayOfWeek':None, 'a':None, 'b':None}\nouts=csv.DictWriter(open('c:\\dedupedFile.csv','wb')\ndays=['Mon','Tue','Wed','Thu','Fri','Sat','Sun']\n\nouts.writerows(headers)\n\nfor day in days:\n    htable={}\n    ins=csv.DictReader(open('c:\\bigfile.csv','rb'),headers)\n    for line in ins:\n        hvalue=hash(reduce(lambda x,y:x+y,line.itervalues()))\n        if line['DayOfWeek']==day:\n            if hvalue in htable:\n                pass\n            else:\n                htable[hvalue]=None\n                outs.writerow(line)\n</code>\n</pre>\n", "senID": 3}, {"text": ["One way I was thinking to speed this up is by finding a better filter to reduce the number of passes necessary.", "Assuming the length of the rows is uniformly distributed, maybe instead of "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n for day in days:\n</code>\n</pre>\n", "senID": 5}, {"text": ["and "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n if line['DayOfWeek']==day:\n</code>\n</pre>\n", "senID": 7}, {"text": ["we have "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n for i in range(n):\n</code>\n</pre>\n", "senID": 9}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n if len(reduce(lambda x,y:x+y,line.itervalues())%n)==i:\n</code>\n</pre>\n", "senID": 11}, {"text": ["where 'n' as small as memory will allow.", "But this is still using the same method."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Wayne Werner provided a good practical solution below; I was curious if there was better/faster/simpler way to do this from an algorithm perspective."], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "Wayne Werner", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/344286/wayne-werner"}]}, {"text": ["P.S.", "I'm limited to Python 2.5."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}]