[{"text": ["Python Algorithm Challenge?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a python function (call it myFunction) that gets as input a list of numbers, and, following a complex calculation, returns back the result of the calculation (which is a number)."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "python", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "myFunction", "childNum": 0, "tag": "code", "childList": []}, {"text": "a list of numbers", "childNum": 0, "tag": "strong", "childList": []}, {"text": "number", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["The function looks like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def myFunction( listNumbers ):\n    # initialize the result of the calculation\n    calcResult = 0\n\n    # looping through all indices, from 0 to the last one\n    for i in xrange(0, len(listNumbers), 1):\n        # some complex calculation goes here, changing the value of 'calcResult'\n\n    # let us now return the result of the calculation\n    return calcResult\n</code>\n</pre>\n", "senID": 3}, {"text": ["I tested the function, and it works as expected. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Normally, myFunction is provided a listNumbers argument that contains 5,000,000 elements in it.", "As you may expect, the calculation takes time.", "I need this function to run as fast as possible"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "myFunction", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "listNumbers", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "5,000,000", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["Here comes the challenge: assume that the time now is 5am, and that listNumbers contains just 4,999,999 values in it.", "Meaning, its LAST VALUE is not yet available.", "This value will only be available at 6am. "], "childNum": 5, "tag": "p", "senID": 6, "childList": [{"text": "Here comes the challenge", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "listNumbers", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "4,999,999", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "not yet available", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "only be available at 6am", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}]}, {"text": ["Obviously, we can do the following (1st mode): wait until 6am.", "Then, append the last value into listNumbers, and then, run myFunction.", "This solution works, BUT it will take a while before myFunction returns our calculated result (as we need to process the entire list of numbers, from the first element on).", "Remember, our goal is to get the results as soon as possible past 6am."], "childNum": 9, "tag": "p", "senID": 7, "childList": [{"text": "Obviously, we can do the following", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "1st mode", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "6am", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}, {"text": "listNumbers", "childNum": 0, "tag": "code", "childList": []}, {"text": "myFunction", "childNum": 0, "tag": "code", "childList": []}, {"text": "it will take a while", "childNum": 0, "tag": "strong", "childList": []}, {"text": "myFunction", "childNum": 0, "tag": "code", "childList": []}, {"text": "entire list of numbers", "childNum": 0, "tag": "em", "childList": []}, {"text": "our goal is to get the results as soon as possible past 6am", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["I was thinking about a more efficient way to solve this (2nd mode): since (at 5am) we have listNumbers with 4,999,999 values in it, let us immediately start running myFunction.", "Let us process whatever we can (remember, we don't have the last piece of data yet), and then -- exactly at 6am -- 'plug in' the new data piece -- and generate the computed result.", "This should be significantly faster, as most of the processing will be done BEFORE 6am, hence, we will only have to deal with the new data -- which means the computed result should be available immediately after 6am."], "childNum": 7, "tag": "p", "senID": 8, "childList": [{"text": "2nd mode", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "listNumbers", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "4,999,999", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "myFunction", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "whatever we can", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "most of the processing", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "immediately after 6am", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Let's suppose that there's no way for us to inspect the code of myFunction or modify it.", "Is there ANY programming technique / design idea that will allow us to take myFunction AS IS, and do something with it (without changing its code) so that we can have it operate in the 2nd mode, rather than the 1st one?"], "childNum": 7, "tag": "p", "senID": 9, "childList": [{"text": "there's no way", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "myFunction", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "ANY", "childNum": 0, "tag": "strong", "childList": []}, {"text": "myFunction", "childNum": 0, "tag": "code", "childList": []}, {"text": "AS IS", "childNum": 0, "tag": "strong", "childList": []}, {"text": "2nd mode", "childNum": 0, "tag": "strong", "childList": []}, {"text": "1st one", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Please do not suggest using c++ / numpy + cython / parallel computing etc to solve this problem.", "The goal here is to see if there's any programming technique or design pattern that can be easily used to solve such problems. "], "childNum": 5, "tag": "p", "senID": 10, "childList": [{"text": "c++", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "numpy + cython", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "parallel computing", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "programming technique", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "design pattern", "childNum": 0, "tag": "em", "childList": []}]}]