[{"text": ["Python performance characteristics"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm in the process of tuning a pet project of mine to improve its performance.", "I've already busted out the profiler to identify hotspots but I'm thinking understanding Pythons performance characteristics a little better would be quite useful going forward."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["There are a few things I'd like to know:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Some modern compilers have been blessed with remarkably clever optimisers, that can often take simple code and make it run faster than any human attempts at tuning the code.", "Depending on how smart the optimizer is, it may be far better for my code to be 'dumb'."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["While Python is an 'interpreted' language, it does appear to compile down to some form of bytecode (.pyc).", "How smart is it when it does this?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Will it fold constants?", "tag": "none", "senID": 5}, {"text": "Will it inline small functions or unroll short loops?", "tag": "none", "senID": 6}, {"text": "Will it perform complex data/flow analysis I'm not qualified to explain properly.", "tag": "none", "senID": 7}]}, {"tag": "ul", "num": 4, "lis": [{"text": "Function calls", "tag": "none", "senID": 8}, {"text": "Class instantiation", "tag": "none", "senID": 9}, {"text": "Arithmetic", "tag": "none", "senID": 10}, {"text": "'Heavier' math operations such as sqrt()", "tag": "none", "senID": 11}]}, {"text": ["How are numbers stored within Python.", "Are they stored as integers / floats internally or moved around as a string?"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["How much of a performance difference can NumPy make?", "This application makes heavy use of Vectors and related mathematics.", "How much of a difference can be made by using this to accelerate these operations."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["If you can think of anything else worth knowing, feel free to mention it."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Since there are a few people bringing in the 'look at your algorithms first' advice (which is quite sensible advice, but doesn't really help with my purpose in asking this question) I'll add a bit here about whats going on, and why I'm asking about this."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["The pet project in question is a ray-tracer written in Python.", "It's not yet very far along and currently just hit tests against two objects (a triangle and a sphere) within the scene.", "No shading, shadowing or lighting calculations are being performed.", "The algorithm is basically:"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"code": "<pre>\n<code>\n for each x, y position in the image:\n     create a ray\n     hit test vs. sphere\n     hit test vs. triangle\n     colour the pixel based on the closest object, or black if no hit.\n</code>\n</pre>\n", "senID": 17}, {"text": ["Algorithmic refinements in ray-tracing generally work by eliminating objects in the scene early.", "They can provide a considerable boost for complex scenes, but if this ray-tracer can't hit test against a mere two objects without struggling, then it's not going to be able to handle very much at all."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"text": ["While I realise that a Python based ray-tracer won't quite be able to reach the performance of a C based one, given that real-time ray tracers like Arauna can manage 15-20 FPS on my computer rendering reasonably complex scenes at 640x480, I'd expect rendering a very basic 500x500 image in Python to be doable in under a second."], "childNum": 1, "tag": "p", "senID": 19, "childList": [{"text": "Arauna", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://igad.nhtv.nl/~bikker/"}]}, {"text": ["Currently, my code is taking 38 seconds.", "It seems to me like it really shouldn't take that long."], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"text": ["Profiling shows the bulk of the time being spent in the actual hit testing routines for these shapes.", "This isn't particularly surprising in a ray tracer, and what I expected.", "The call-counts for these hit tests are each 250,000 (500x500 exactly), which would indicate they're being called exactly as often as they should be.", "This is a a pretty text-book case of the 3% where optimization is advisable."], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"text": ["I'm planning on doing the full timing / measuring thing as I work on improving the code.", "However, without some basic knowledge of what costs what in Python my attempts to tune my code would be little more than stumbling in the dark.", "I figured it would serve me well to gain a little knowledge to light the way."], "childNum": 0, "tag": "p", "senID": 22, "childList": []}]