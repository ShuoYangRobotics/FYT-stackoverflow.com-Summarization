[{"text": ["Time complexity of accessing a Python dict"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am writing a simple Python program.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My program seems to suffer from linear access to dictionaries, \nits run-time grows exponentially even though the algorithm is quadratic.", "I use a dictionary to memoize values.", "That seems to be a bottleneck.  "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["The values I'm hashing are tuples of points.", "Each point is: (x,y), 0 &lt;= x,y &lt;= 50\nEach key in the dictionary is: A tuple of 2-5 points: ((x1,y1),(x2,y2),(x3,y3),(x4,y4))"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["The keys are read many times more often than they are written."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Am I correct that python dicts suffer from linear access times with such inputs?  "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["As far as I know, sets have guaranteed logarithmic access times.", "How can I simulate dicts using sets(or something similar) in Python?  "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["edit As per request, here's a (simplified) version of the memoization function:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "edit", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def memoize(fun):\n    memoized = {}\n    def memo(*args):\n        key = args\n        if not key in memoized:\n            memoized[key] = fun(*args)\n        return memoized[key]\n    return memo\n</code>\n</pre>\n", "senID": 8}]