[{"text": ["Minimising reading from and writing to disk in Python for a memory-heavy operation"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Background"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Background", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I am working on a fairly computationally intensive project for a computational linguistics project, but the problem I have is quite general and hence I expect that a solution would be interesting to others as well."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Requirements"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Requirements", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The key aspect of this particular program I must write is that it must: "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Steps 1 and 2 are not hard to do efficiently: just use generators and have a data-analysis pipeline.", "The big problem is operation 3 (and by connection 4)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Parenthesis: Technical Details"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Parenthesis: Technical Details", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["In case the actual procedure for building vectors affects the solution:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["For each line in the corpus, one or more vectors must have its basis weights updated. "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["If you think of them in terms of python lists, each line, when processed, updates one or more lists (creating them if needed) by incrementing the values of these lists at one or more indices by a value (which may differ based on the index). "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Vectors do not depend on each other, nor does it matter which order the corpus lines are read in."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Attempted Solutions"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "Attempted Solutions", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["There are three extrema when it comes to how to do this:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["All these options are fairly intractable.", "1 just uses up all the system memory, and it panics and slows to a crawl.", "2 is way too slow as IO operations aren't fast.", "3 is possibly even slower than 2 for the same reasons."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["Goals"], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "Goals", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["A good solution would involve:"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["The problem is that I'm not really sure how to go about this.", "It seems somewhat unpythonic to worry about system attributes such as RAM, but I don't see how this sort of problem can be optimally solved without taking this into account.", "As a result, I don't really know how to get started on this sort of thing."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["Question"], "childNum": 1, "tag": "p", "senID": 17, "childList": [{"text": "Question", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Does anyone know how to go about solving this sort of problem?", "I python simply not the right language for this sort of thing?", "Or is there a simple solution to maximise how much is done from memory (within reason) while minimising how many times data must be read from the disk, or written to it?"], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"text": ["Many thanks for your attention.", "I look forward to seeing what the bright minds of stackoverflow can throw my way."], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"text": ["Additional Details"], "childNum": 1, "tag": "p", "senID": 20, "childList": [{"text": "Additional Details", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The sort of machine this problem is run on usually has 20+ cores and ~70G of RAM.", "The problem can be parallelised (\u00e0 la MapReduce) in that separate vectors for one entity can be built from segments of the corpus and then added to obtain the vector that would have been built from the whole corpus."], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"text": ["Part of the question involves determining a limit on how much can be built in memory before disk-writes need to occur.", "Does python offer any mechanism to determine how much RAM is available?"], "childNum": 0, "tag": "p", "senID": 22, "childList": []}]