[{"text": ["Python: generator expression vs. yield"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["In Python, is there any difference between creating a generator object through a generator expression versus using the yield statement?"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "generator expression", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "yield", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Using yield:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "yield", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def Generator(x, y):\n    for i in xrange(x):\n        for j in xrange(y):\n            yield(i, j)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Using generator expression:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "generator expression", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def Generator(x, y):\n    return ((i, j) for i in xrange(x) for j in xrange(y))\n</code>\n</pre>\n", "senID": 5}, {"text": ["Both functions return generator objects, which produce tuples, e.g.", "(0,0), (0,1) etc."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Any advantages of one or the other?", "Thoughts?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Thanks everybody!", "There is a lot of great information and further references in these answers!"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]