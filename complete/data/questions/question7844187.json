[{"text": ["Instantiating a unique object every time when using object composition?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["As an example, just a couple of dummy objects that will be used together.", "FWIW this is using Python 2.7.2."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Student(object):\n    def __init__(self, tool):\n        self.tool = tool\n\n    def draw(self):\n        if self.tool.broken != True:\n            print \"I used my tool. Sweet.\"\n        else:\n            print \"My tool is broken. Wah.\"\n\nclass Tool(object):\n    def __init__(self, name):\n        self.name = name\n        self.broken = False\n\n    def break(self):\n        print \"The %s busted.\" % self.name\n        self.broken = True\n\nHammer = Tool(hammer)\nBilly = Student(Hammer)\nTommy = Student(Hammer)\n</code>\n</pre>\n", "senID": 2}, {"text": ["That's probably enough code, you see where I'm going with this.", "If I call Hammer.break(), I'm calling it on the same instance of the object; if Billy's hammer is broken, so is Tommy's (it's really the same Hammer after all)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Now obviously if the program were limited to just Billy and Tommy as instances of Students, the fix would be obvious - instantiate more Hammers.", "But clearly I'm asking because it isn't that simple, heh.", "I would like to know if it's possible to create objects which show up as unique instances of themselves for every time they're called into being."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "isn't", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["EDIT: The kind of answers I'm getting lead me to believe that I have a gaping hole in my understanding of instantiation.", "If I have something like this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n    pass\n\nclass Moo(Foo):\n    pass\n\nclass Guy(object):\n    def __init__(self, thing):\n        self.thing = thing\n\nBill = Guy(Moo())\nSteve = Guy(Moo())\n</code>\n</pre>\n", "senID": 6}, {"text": ["Each time I use Moo(), is that a separate instance, or do they both reference the same object?", "If they're separate, then my whole question can be withdrawn, because it'll ahve to make way for my mind getting blown."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "separate", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]