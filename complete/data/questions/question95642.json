[{"text": ["Does an application-wide exception handler make sense?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Long story short, I have a substantial Python application that, among other things, does outcalls to \"losetup\", \"mount\", etc.", "on Linux.", "Essentially consuming system resources that must be released when complete."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If my application crashes, I want to ensure these system resources are properly released."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Does it make sense to do something like the following?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def main():\n    # TODO: main application entry point\n    pass\n\ndef cleanup():\n    # TODO: release system resources here\n    pass\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except:\n        cleanup()\n        raise\n</code>\n</pre>\n", "senID": 4}, {"text": ["Is this something that is typically done?", "Is there a better way?", "Perhaps the destructor in a singleton class?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]