[{"text": ["Is there a way to convert code to a string and vice versa in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The original question was:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Is there a way to declare macros in Python as they are declared in C:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #define OBJWITHSIZE(_x) (sizeof _x)/(sizeof _x[0])\n</code>\n</pre>\n", "senID": 3}, {"text": ["Here's what I'm trying to find out:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Is there a way to avoid code duplication in Python?", "In one part of a program I'm writing, I have a function:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def replaceProgramFilesPath(filenameBr):\n  def getProgramFilesPath():\n    import os\n    return os.environ.get(\"PROGRAMFILES\") + chr(92)\n  return filenameBr.replace(\"&lt;ProgramFilesPath&gt;\",getProgramFilesPath() )\n</code>\n</pre>\n", "senID": 6}, {"text": ["In another part, I've got this code embedded in a string that will later be\noutput to a python file that will itself be run:  "], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n \"\"\"\ndef replaceProgramFilesPath(filenameBr):\n  def getProgramFilesPath():\n    import os\n    return os.environ.get(\"PROGRAMFILES\") + chr(92)\n  return filenameBr.replace(\"&lt;ProgramFilesPath&gt;\",getProgramFilesPath() )\n\"\"\"\n</code>\n</pre>\n", "senID": 8}, {"text": ["How can I build a \"macro\" that will avoid this duplication?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]