[{"text": ["What type of collection of mutable objects will allow me to quickly remove items in python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Suppose I have profiled my program, and the vast majority of runtime is spent in method 'remove' of 'list' objects.", "The program manipulates a collection of collections, and the collections do not need to be ordered.", "What would be the most straightforward way to implement these collections in python (preferably using standard python collections) so that collection.remove(item) is inexpensive both when collection is the outer collection and item is an inner collection and when collection is an inner collection and item is just an immutable object."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "method 'remove' of 'list' objects", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "collection.remove(item)", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "collection", "childNum": 0, "tag": "em", "childList": []}, {"text": "item", "childNum": 0, "tag": "em", "childList": []}, {"text": "collection", "childNum": 0, "tag": "em", "childList": []}, {"text": "item", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["The problem with using sets here is that sets cannot contain mutable collections, so the inner sets would have to be frozensets, but then removing items is no longer so cheap."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The best solution I've come upon so far was suggested by someone as an answer here that apparently was deleted shortly after.", "They suggested using a dict.", "This would work, but you would have to generate arbitrary id's for each item then, so it's a bit awkward.", "Another alternative is to used a linked list, but that would be awkward too, since linked lists aren't part of the standard library."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]