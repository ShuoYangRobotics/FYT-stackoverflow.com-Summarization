[{"text": ["python string manipulation"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a string s with nested brackets: s = \"AX(p&gt;q)&amp;E((-p)Ur)\""], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "s = \"AX(p&gt;q)&amp;E((-p)Ur)\"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I want to remove all characters between all pairs of brackets and store in a new string like this: new_string = AX&amp;E"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "new_string = AX&amp;E", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["i tried doing this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n p = re.compile(\"\\(.*?\\)\", re.DOTALL)\nnew_string = p.sub(\"\", s)\n</code>\n</pre>\n", "senID": 4}, {"text": ["It gives output: AX&amp;EUr)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "AX&amp;EUr)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Is there any way to correct this, rather than iterating each element in the string?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]