[{"text": ["Possible Google Riddle?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["My friend was given this free google website optimizer tshirt and came to me to try and figure out what the front logo meant."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["t-shirt"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "t-shirt", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://2.bp.blogspot.com/_iQVgmEEAit4/SPkKHA3e8fI/AAAAAAAAAB8/ugUerJjuBw8/s1600-h/GWO-tshirt.jpg"}]}, {"text": ["So, I have a couple of guesses as to what it means, but I was just wondering if there is something more."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["My first guess is that each block represents a page layout, and the logo \"You should test that\" just means that you should use google website optimizer to test which is the best layout.", "I hope that this isn't the answer, it just seems to simple and unsatisfying."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Well, I've spent the past hour trying to figure out if there is any deeper meaning, but to no avail.", "So, I'm here hoping that someone might be able to help."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I did though write a program to see if the blocks represent something in binary.", "I'll post the code below.", "My code tests every permutation of reading a block as 4 bits, and then tries to interpret these bits as letters, hex, and ip addresses."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I hope someone knows better."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n #This code interprets the google t-shirt as a binary code, each box 4 bits.\n# I try every permutation of counting the bits and then try to interpret these\n# interpretations as letters, or hex numbers, or ip addresses.\n\n# I need more interpretations, maybe one will find a pattern\n\nimport string\n\n#these represent the boxes binary codes from left to right top to bottom\nboxes = ['1110', '1000', '1111', '0110', '0011', '1011', '0001', '1001']\n\n#changing the ordering\npermutations = [\"1234\", \"1243\", \"1324\", \"1342\", \"1423\", \"1432\", \n                \"2134\", \"2143\", \"2314\", \"2341\", \"2413\", \"2431\",\n                \"3124\", \"3142\", \"3214\", \"3241\", \"3412\", \"3421\", \n                \"4123\", \"4132\", \"4213\", \"4231\",\"4312\", \"4321\"]\n\n#alphabet hashing where 0 = a\nalphabet1 = {'0000':'a', '0001':'b', '0010':'c', '0011':'d',\n             '0100':'e', '0101':'f', '0110':'g', '0111':'h',\n             '1000':'i', '1001':'j', '1010':'k', '1011':'l',\n             '1100':'m', '1101':'n', '1110':'o', '1111':'p'}\n\n#alphabet hasing where 1 = a\nalphabet2 = {'0000':'?', '0001':'a', '0010':'b', '0011':'c',\n             '0100':'d', '0101':'e', '0110':'f', '0111':'g',\n             '1000':'h', '1001':'i', '1010':'j', '1011':'k',\n             '1100':'l', '1101':'m', '1110':'n', '1111':'o'}\n\nhex       = {'0000':'0', '0001':'1', '0010':'2', '0011':'3',\n             '0100':'4', '0101':'5', '0110':'6', '0111':'7',\n             '1000':'8', '1001':'9', '1010':'a', '1011':'b',\n             '1100':'c', '1101':'d', '1110':'e', '1111':'f'} \n\n#code to convert from a string of ones and zeros(binary) to decimal number\ndef bin_to_dec(bin_string):\n    l = len(bin_string)\n    answer = 0\n    for index in range(l):\n        answer += int(bin_string[l - index - 1]) * (2**index)\n    return answer        \n\n#code to try and ping ip addresses\ndef ping(ipaddress):\n    #ping the network addresses \n    import subprocess\n\n    # execute the code and pipe the result to a string, wait 5 seconds\n    test = \"ping -t 5 \" + ipaddress\n    process = subprocess.Popen(test, shell=True, stdout=subprocess.PIPE)\n\n    # give it time to respond\n    process.wait()\n\n    # read the result to a string\n    result_str = process.stdout.read()\n\n    #For now, need to manually check if the ping worked, fix later\n    print result_str   \n\n#now iterate over the permuation and then the boxes to produce the codes\nfor permute in permutations:\n    box_codes = []\n    for box in boxes:\n        temp_code = \"\"\n        for index in permute:\n            temp_code += box[int(index) - 1]\n        box_codes.append(temp_code)\n\n    #now manipulate the codes using leter translation, network, whatever\n\n    #binary\n    print string.join(box_codes, \"\")\n\n    #alphabet1\n    print string.join( map(lambda x: alphabet1[x], box_codes), \"\")\n\n    #alphabet2\n    print string.join( map(lambda x: alphabet2[x], box_codes), \"\")\n\n    #hex\n    print string.join( map(lambda x: hex[x], box_codes), \"\")\n\n    #ipaddress, call ping and see who is reachable\n    ipcodes = zip(box_codes[0:8:2], box_codes[1:8:2])\n    ip = \"\"\n    for code in ipcodes:\n        bin = bin_to_dec(code[0] + code[1])\n        ip += repr(bin) + \".\"\n    print ip[:-1]\n    #ping(ip[:-1])\n    print\n    print\n</code>\n</pre>\n", "senID": 8}, {"text": ["t-shirt."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "t-shirt", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://2.bp.blogspot.com/_iQVgmEEAit4/SPkKHA3e8fI/AAAAAAAAAB8/ugUerJjuBw8/s1600-h/GWO-tshirt.jpg"}]}]