[{"text": ["Python equivalent of maplist?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["What's the best Python equivalent of Common Lisp's maplist function?", "From the maplist documentation:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "maplist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "maplist documentation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ai.mit.edu/projects/iiip/doc/CommonLISP/HyperSpec/Body/fun%5Fmapccm%5Fma%5Fistcm%5Fmapcon.html"}]}, {"text": ["Example (pseudoy-code, not tested):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def p(x): return x\n&gt;&gt;&gt; maplist(p, [1,2,3])\n[[1, 2, 3], [2, 3], [3]]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note: the arguments passed to p in the example above would be the lists [1, 2, 3], [2, 3], [3]; i.e., p is not applied to the elements of those lists.", "E.g."], "childNum": 6, "tag": "p", "senID": 4, "childList": [{"text": "Note", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "p", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[1, 2, 3]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[2, 3]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[3]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "p", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; maplist(lambda l: list(reversed(l)), [1,2,3])\n[[3, 2, 1], [3, 2], [3]]\n</code>\n</pre>\n", "senID": 5}]