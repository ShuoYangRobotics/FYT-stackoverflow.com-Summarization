[{"text": ["Dynamic module import in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm writing a Python application that takes as a command as an argument, for example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $ python myapp.py command1\n</code>\n</pre>\n", "senID": 2}, {"text": ["I want the application to be extensible, that is, to be able to add new modules that implement new commands without having to change the main application source.", "The tree looks something like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n myapp/\n    __init__.py\n    commands/\n        __init__.py\n        command1.py\n        command2.py\n    foo.py\n    bar.py\n</code>\n</pre>\n", "senID": 4}, {"text": ["So I want the application to find the available command modules at runtime and execute the appropriate one."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Currently this is implemented something like:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n command = sys.argv[1]\ntry:\n    command_module = __import__(\"myapp.commands.%s\" % command, fromlist=[\"myapp.commands\"])\nexcept ImportError:\n    # Display error message\n\ncommand_module.run()\n</code>\n</pre>\n", "senID": 7}, {"text": ["This works just fine, I'm just wondering if there is possibly a more idiomatic way to accomplish what we are doing with this code."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Note that I specifically don't want to get in to using eggs or extension points.", "This is not an open-source project and I don't expect there to be \"plugins\".", "The point is to simplify the main application code and remove the need to modify it each time a new command module is added."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]