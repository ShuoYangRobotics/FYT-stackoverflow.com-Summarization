[{"text": ["Make Python bool print 'On' or 'Off' rather than 'True' or 'False'"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["What is the best way to make a variable that works exactly like a bool but prints On or Off rather than True or False?", "Currently the program is printing: Color: True, whereas Color: On would make more sense."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "On", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Off", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}, {"text": "Color: True", "childNum": 0, "tag": "code", "childList": []}, {"text": "Color: On", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For the record, I initially tried to make an OnOff class that inherits from bool:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "OnOff", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "bool", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class OnOff(bool):\n    def __str__(self):\n        if self: return 'On'\n        else: return 'Off'\n</code>\n</pre>\n", "senID": 3}, {"text": ["From the comments, I now understand that bool is a singleton, which is why this failed miserably:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "bool", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n Traceback (most recent call last):\n    class OnOff(bool):\nTypeError: Error when calling the metaclass bases\n    type 'bool' is not an acceptable base type\n</code>\n</pre>\n", "senID": 5}]