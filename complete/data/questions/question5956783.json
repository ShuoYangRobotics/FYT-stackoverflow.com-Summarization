[{"text": ["numpy float: 10x slower than builtin in arithmetic operations?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I rerun the code under the Windows 7 x64 (Intel Core i7 930 @ 3.8GHz)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Again, the code is:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from datetime import datetime\nimport numpy as np\n\nSTART_TIME = datetime.now()\n\n# one of the following lines is uncommented before execution\n#s = np.float64(1)\n#s = np.float32(1)\n#s = 1.0\n\nfor i in range(10000000):\n    s = (s + 8) * s % 2399232\n\nprint(s)\nprint('Runtime:', datetime.now() - START_TIME)\n</code>\n</pre>\n", "senID": 4}, {"text": ["The timings are:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "float64: 16.1s", "tag": "none", "senID": 6}, {"text": "float32: 16.1s", "tag": "none", "senID": 7}, {"text": "float: 3.2s", "tag": "none", "senID": 8}]}, {"text": ["Now both np floats (either 64 or 32) are 5 times slower than the built-in float.", "Still, a significant difference.", "I'm trying to figure out where it comes from."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "np", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Thank you for the answers, they help me understand how to deal with this problem."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["But I still would like to know the precise reason (based on the source code perhaps) why the code below runs 10 times slow with float64 than with float."], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "float64", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["numpy.float64 is 10 times slower than float in arithmetic calculations.", "It's so bad that even converting to float and back before the calculations makes the program run 3 times faster.", "Why?", "Is there anything I can do to fix it?"], "childNum": 2, "tag": "p", "senID": 14, "childList": [{"text": "10 times", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "10 times", "tag": "em"}]}, {"text": "10 times", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["I want to emphasize that my timings are not due to any of the following:"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "the function calls", "tag": "none", "senID": 16}, {"text": "the conversion between numpy and python float", "tag": "none", "senID": 17}, {"text": "the creation of objects", "tag": "none", "senID": 18}]}, {"text": ["I updated my code to make it clearer where the problem lies.", "With the new code, it would seem I see a ten-fold performance hit from using numpy data types:"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"code": "<pre>\n<code>\n from datetime import datetime\nimport numpy as np\n\nSTART_TIME = datetime.now()\n\n# one of the following lines is uncommented before execution\n#s = np.float64(1)\n#s = np.float32(1)\n#s = 1.0\n\nfor i in range(10000000):\n    s = (s + 8) * s % 2399232\n\nprint(s)\nprint('Runtime:', datetime.now() - START_TIME)\n</code>\n</pre>\n", "senID": 20}, {"text": ["The timings are:"], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "float64: 34.56s", "tag": "none", "senID": 22}, {"text": "float32: 35.11s", "tag": "none", "senID": 23}, {"text": "float: 3.53s", "tag": "none", "senID": 24}]}, {"text": ["Just for the hell of it, I also tried:"], "childNum": 0, "tag": "p", "senID": 25, "childList": []}, {"text": ["from datetime import datetime\nimport numpy as np"], "childNum": 0, "tag": "p", "senID": 26, "childList": []}, {"code": "<pre>\n<code>\n START_TIME = datetime.now()\n\ns = np.float64(1)\nfor i in range(10000000):\n    s = float(s)\n    s = (s + 8) * s % 2399232\n    s = np.float64(s)\n\nprint(s)\nprint('Runtime:', datetime.now() - START_TIME)\n</code>\n</pre>\n", "senID": 27}, {"text": ["The execution time is 13.28 s; it's actually 3 times faster to convert the float64 to float and back than to use it as is.", "Still, the conversion takes its toll, so overall it's more than 3 times slower compared to the pure-python float."], "childNum": 3, "tag": "p", "senID": 28, "childList": [{"text": "float64", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["My machine is:"], "childNum": 0, "tag": "p", "senID": 29, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Intel Core 2 Duo T9300 (2.5GHz)", "tag": "none", "senID": 30}, {"text": "WinXP Professional (32-bit)", "tag": "none", "senID": 31}, {"text": "ActiveState Python 3.1.3.5", "tag": "none", "senID": 32}, {"text": "Numpy 1.5.1", "tag": "none", "senID": 33}]}, {"text": ["END OF EDIT"], "childNum": 1, "tag": "p", "senID": 34, "childList": [{"text": "END OF EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["ORIGINAL QUESTION:"], "childNum": 1, "tag": "p", "senID": 35, "childList": [{"text": "ORIGINAL QUESTION:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I am getting really weird timings for the following code:"], "childNum": 0, "tag": "p", "senID": 36, "childList": []}, {"code": "<pre>\n<code>\n import numpy as np\ns = 0\nfor i in range(10000000):\n    s += np.float64(1) # replace with np.float32 and built-in float\n</code>\n</pre>\n", "senID": 37}, {"tag": "ul", "num": 3, "lis": [{"text": "built-in float: 4.9 s", "tag": "none", "senID": 38}, {"text": "float64: 10.5 s", "tag": "none", "senID": 39}, {"text": "float32: 45.0 s", "tag": "none", "senID": 40}]}, {"text": ["Why is float64 twice slower than float?", "And why is float32 5 times slower than float64?"], "childNum": 3, "tag": "p", "senID": 41, "childList": [{"text": "float64", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "float32", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Is there any way to avoid the penalty of using np.float64, and have numpy functions return built-in float instead of float64?"], "childNum": 4, "tag": "p", "senID": 42, "childList": [{"text": "np.float64", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "numpy", "childNum": 0, "tag": "code", "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "childList": []}, {"text": "float64", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I found that using numpy.float64 is much slower than Python's float, and numpy.float32 is even slower (even though I'm on a 32-bit machine)."], "childNum": 2, "tag": "p", "senID": 43, "childList": [{"text": "numpy.float64", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "numpy.float32", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["numpy.float32 on my 32-bit machine.", "Therefore, every time I use various numpy functions such as numpy.random.uniform, I convert the result to float32 (so that further operations would be performed at 32-bit precision)."], "childNum": 3, "tag": "p", "senID": 44, "childList": [{"text": "numpy.float32", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "numpy.random.uniform", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "float32", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Is there any way to set a single variable somewhere in the program or in the command line, and make all numpy functions return float32 instead of float64?"], "childNum": 2, "tag": "p", "senID": 45, "childList": [{"text": "float32", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "float64", "childNum": 0, "tag": "code", "childList": []}]}]