[{"text": ["Why don't Python's list comprehensions make copies of arguments so actual objects can't be mutated?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Maybe I've been drinking too much of the functional programming Kool Aid, but this behavior of list comprehensions seems like a bad design choice:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; [d.pop() for _ in range(len(d))]\n[5, 4, 3, 2, 1]\n&gt;&gt;&gt; d\n[]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Why is d not copied, and then the copied lexically-scoped version not mutated (and then lost)?", "The point of list comprehensions seems like it should be to return the desired list, not return a list and silently mutate some other object behind the scenes.", "The destruction of d is somewhat implicit, which seems unPythonic.", "Is there a good use case for this?  "], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "d", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "return", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "d", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Why is it advantageous to have list comps behave exactly like for loops, rather than behave more like functions (from a functional language, with local scope)?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]