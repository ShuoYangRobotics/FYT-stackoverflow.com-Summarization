[{"text": ["Apply function to one element of a list in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm looking for a concise and functional style way to apply a function to one element of a tuple and return the new tuple, in Python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For example, for the following input:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n inp = (\"hello\", \"my\", \"friend\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["I would like to be able to get the following output:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n out = (\"hello\", \"MY\", \"friend\")\n</code>\n</pre>\n", "senID": 5}, {"text": ["I came up with two solutions which I'm not satisfied with."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["One uses a higher-order function."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def apply_at(arr, func, i):\n    return arr[0:i] + [func(arr[i])] + arr[i+1:]\n\napply_at(inp, lambda x: x.upper(), 1)\n</code>\n</pre>\n", "senID": 8}, {"text": ["One uses list comprehensions (this one assumes the length of the tuple is known)."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n [(a,b.upper(),c) for a,b,c in [inp]][0]\n</code>\n</pre>\n", "senID": 10}, {"text": ["Is there a better way?", "Thanks!"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]