[{"text": ["Python: How to update value of key value pair in nested dictionary?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["i am trying to make an inversed document index, therefore i need to know from all unique words in a collection in which doc they occur and how often."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["i have used this answer in order two create a nested dictionary.", "The provided solution works fine, with one problem though."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/651794/whats-the-best-way-to-initialize-a-dict-of-dicts-in-python/651879#651879"}]}, {"text": ["First i open the file and make a list of unique words.", "These unique words i than want to compare with the original file.", "When there is a match, the frequency counter should be updated and its value be stored in the two dimensional array."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["output should eventually look like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n word1, {doc1 : freq}, {doc2 : freq} &lt;br&gt;\nword2, {doc1 : freq}, {doc2 : freq}, {doc3:freq}\netc....\n</code>\n</pre>\n", "senID": 5}, {"text": ["Problem is that i cannot update the dictionary variable.", "When trying to do so i get the error: "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n File \"scriptV3.py\", line 45, in main\n    freq = dictionary[keyword][filename] + 1\nTypeError: unsupported operand type(s) for +: 'AutoVivification' and 'int'\n</code>\n</pre>\n", "senID": 7}, {"text": ["I think i need to cast in some way the instance of AutoVivification to int...."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["How to go?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["thanks in advance"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["my code:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python \n# encoding: utf-8\n\nimport sys\nimport os\nimport re\nimport glob\nimport string\nimport sets\n\nclass AutoVivification(dict):\n    \"\"\"Implementation of perl's autovivification feature.\"\"\"\n    def __getitem__(self, item):\n        try:\n            return dict.__getitem__(self, item)\n        except KeyError:\n            value = self[item] = type(self)()\n            return value\n\ndef main():\n    pad = 'temp/'\n    dictionary  = AutoVivification()\n    docID = 0\n    for files in glob.glob( os.path.join(pad, '*.html') ):  #for all files in specified folder:\n        docID = docID + 1\n        filename = \"doc_\"+str(docID)\n        text = open(files, 'r').read()                      #returns content of file as string\n        text = extract(text, '&lt;pre&gt;', '&lt;/pre&gt;')             #call extract function to extract text from within &lt;pre&gt; tags\n        text = text.lower()                                 #all words to lowercase\n        exclude = set(string.punctuation)                   #sets list of all punctuation characters\n        text = ''.join(char for char in text if char not in exclude) # use created exclude list to remove characters from files\n        text = text.split()                                 #creates list (array) from string\n        uniques = set(text)                                 #make list unique (is dat handig? we moeten nog tellen)\n\n        for keyword in uniques:                             #For every unique word do   \n            for word in text:                               #for every word in doc:\n                if (word == keyword and dictionary[keyword][filename] is not None): #if there is an occurence of keyword increment counter \n                    freq = dictionary[keyword][filename]    #here we fail, cannot cast object instance to integer.\n                    freq = dictionary[keyword][filename] + 1\n                    print(keyword,dictionary[keyword])\n                else:\n                    dictionary[word][filename] = 1\n\n#extract text between substring 1 and 2 \ndef extract(text, sub1, sub2): \n    return text.split(sub1, 1)[-1].split(sub2, 1)[0]    \n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 12}]