[{"text": ["Python basic data references, list of same reference"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Say I have two lists:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l1=[1,2,3,4]\n&gt;&gt;&gt; l2=[11,12,13,14]\n</code>\n</pre>\n", "senID": 2}, {"text": ["I can put those lists in a tuple, or dictionary, and it appears that they are all references back to the original list:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; t=(l1,l2)\n&gt;&gt;&gt; d={'l1':l1, 'l2':l2}\n&gt;&gt;&gt; id(l1)==id(d['l1'])==id(t[0])\nTrue\n&gt;&gt;&gt; l1 is d['l1'] is t[0]\nTrue\n</code>\n</pre>\n", "senID": 4}, {"text": ["Since they are references, I can change l1 and the referred data in the tuple and dictionary change accordingly:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "l1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l1.append(5)\n&gt;&gt;&gt; l1\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; t\n([1, 2, 3, 4, 5], [11, 12, 13, 14])\n&gt;&gt;&gt; d\n{'l2': [11, 12, 13, 14], 'l1': [1, 2, 3, 4, 5]}\n</code>\n</pre>\n", "senID": 6}, {"text": ["Including if I append the reference in the dictionary d or mutable reference in the tuple t:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "d", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "t", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d['l1'].append(6)\n&gt;&gt;&gt; t[0].append(7)\n&gt;&gt;&gt; d\n{'l2': [11, 12, 13, 14], 'l1': [1, 2, 3, 4, 5, 6, 7]}\n&gt;&gt;&gt; l1\n[1, 2, 3, 4, 5, 6, 7]\n</code>\n</pre>\n", "senID": 8}, {"text": ["If I now set l1 to a new list, the reference count for the original list decreases:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "l1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sys.getrefcount(l1)\n4\n&gt;&gt;&gt; sys.getrefcount(t[0])\n4\n&gt;&gt;&gt; l1=['new','list']\n&gt;&gt;&gt; l1 is d['l1'] is t[0]\nFalse\n&gt;&gt;&gt; sys.getrefcount(l1)\n2\n&gt;&gt;&gt; sys.getrefcount(t[0])\n3\n</code>\n</pre>\n", "senID": 10}, {"text": ["And appending or changing l1 does not change d['l1'] or t[0] since it now a new reference.", "The notion of indirect references is covered fairly well in the Python documents but not completely. "], "childNum": 4, "tag": "p", "senID": 11, "childList": [{"text": "l1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "d['l1']", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "t[0]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "covered fairly well", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#objects"}]}, {"text": ["My questions:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["ie:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n l=[1,2,3]         # create an object of three integers and create a ref to it\nl2=l              # create a reference to the same object\nl=[4,5,6]         # create a new object of 3 ints; the original now referenced \n                  # by l2 is unchanged and unmoved\n</code>\n</pre>\n", "senID": 14}]