[{"text": ["How to implement full text search in Django?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I would like to implement a search function in a django blogging application.", "The status quo is that I have a list of strings supplied by the user and the queryset is narrowed down by each string to include only those objects that match the string. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["See:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if request.method == \"POST\":\n        form = SearchForm(request.POST)\n        if form.is_valid():\n            posts = Post.objects.all()\n            for string in form.cleaned_data['query'].split():\n                posts = posts.filter(\n                        Q(title__icontains=string) | \n                        Q(text__icontains=string) |\n                        Q(tags__name__exact=string)\n                        )\n            return archive_index(request, queryset=posts, date_field='date')\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now, what if I didn't want do concatenate each word that is searched for by a logical AND but with a logical OR?", "How would I do that?", "Is there a way to do that with Django's own Queryset methods or does one have to fall back to raw SQL queries?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["In general, is it a proper solution to do full text search like this or would you recommend using a search engine like Solr, Whoosh or Xapian.", "What are there benefits?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Thanks for taking the time"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]