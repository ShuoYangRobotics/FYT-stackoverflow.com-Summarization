[{"text": ["Repeatedly write to stdin and read from stdout of a process from python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a piece of fortran code that reads some numbers from STDIN and writes results to STDOUT.", "For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n do\n  read (*,*) x\n  y = x*x\n  write (*,*) y\nenddo\n</code>\n</pre>\n", "senID": 2}, {"text": ["So I can start the program from a shell and get the following sequence of inputs/outputs:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "inputs", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "outputs", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["5.0\n25.0\n2.5\n6.25 "], "childNum": 7, "tag": "p", "senID": 4, "childList": [{"text": "5.0", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "25.0", "childNum": 0, "tag": "strong", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "2.5", "childNum": 0, "tag": "em", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "6.25", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Now I need to do this from within python.", "After futilely wrestling with subprocess.Popen and looking through old questions on this site, I decided to use pexpect.spawn:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n import pexpect, os\np = pexpect.spawn('squarer')\np.setecho(False)\np.write(\"2.5\" + os.linesep)\nres = p.readline()\n</code>\n</pre>\n", "senID": 6}, {"text": ["and it works.", "The problem is, the real data I need to pass between python and my fortran program is an array of 100,000 (or more) double precision floats.", "If they're contained in an array called x, then"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "real", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n p.write(' '.join([\"%.10f\"%k for k in x]) + os.linesep)\n</code>\n</pre>\n", "senID": 8}, {"text": ["times out with the following error message from pexpect:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n buffer (last 100 chars):   \nbefore (last 100 chars):   \nafter: &lt;class 'pexpect.TIMEOUT'&gt;  \nmatch: None  \nmatch_index: None  \nexitstatus: None\nflag_eof: False\npid: 8574\nchild_fd: 3\nclosed: False\ntimeout: 30\ndelimiter: &lt;class 'pexpect.EOF'&gt;\nlogfile: None\nlogfile_read: None\nlogfile_send: None\nmaxread: 2000\nignorecase: False\nsearchwindowsize: None\ndelaybeforesend: 0.05\ndelayafterclose: 0.1\ndelayafterterminate: 0.1\n</code>\n</pre>\n", "senID": 10}, {"text": ["unless x has less than 303 elements.", "Is there a way to pass large amounts of data to/from STDIN/STDOUT of another program?"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I have tried splitting the data into smaller chunks, but then I lose a lot in speed."], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "lot", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Thanks in advance."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}]