[{"text": ["SQLite parameter substitution problem"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Using SQLite3 with Python 2.5, I'm trying to iterate through a list and pull the weight of an item from the database based on the item's name."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I tried using the \"?", "\" parameter substitution suggested to prevent SQL injections but it doesn't work.", "For example, when I use:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for item in self.inventory_names:\n    self.cursor.execute(\"SELECT weight FROM Equipment WHERE name = ?\", item)\n    self.cursor.close()\n</code>\n</pre>\n", "senID": 3}, {"text": ["I get the error:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I believe this is somehow caused by the initial creation of the database; the module I made that actually creates the DB does have 8 bindings."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n cursor.execute(\"\"\"CREATE TABLE Equipment \n    (id INTEGER PRIMARY KEY, \n    name TEXT,\n    price INTEGER, \n    weight REAL, \n    info TEXT, \n    ammo_cap INTEGER, \n    availability_west TEXT,\n    availability_east TEXT)\"\"\")\n</code>\n</pre>\n", "senID": 6}, {"text": ["However, when I use the less-secure \"%s\" substitution for each item name, it works just fine.", "Like so:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n for item in self.inventory_names:\n    self.cursor.execute(\"SELECT weight FROM Equipment WHERE name = '%s'\" % item)\n    self.cursor.close()\n</code>\n</pre>\n", "senID": 8}, {"text": ["I can't figure out why it thinks I have 8 bindins when I'm only calling one.", "How can I fix it?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]