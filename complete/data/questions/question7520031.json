[{"text": ["Pointing to another object's attributes and adding your own"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Suppose I have a class:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Car(object):\n    def __init__(self, name, tank_size=10, mpg=30):\n        self.name = name\n        self.tank_size = tank_size\n        self.mpg = mpg\n</code>\n</pre>\n", "senID": 2}, {"text": ["I put together a list of the cars I'm looking at:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n cars = []\ncars.append(Car(\"Toyota\", 11, 29))\ncars.append(Car(\"Ford\", 15, 12))\ncars.append(Car(\"Honda\", 12, 25))\n</code>\n</pre>\n", "senID": 4}, {"text": ["If I assign a name to my current favorite (a \"pointer\" into the list, if you will):"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n my_current_fav = cars[1]\n</code>\n</pre>\n", "senID": 6}, {"text": ["I can easily access the attributes of my current favorite:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n my_current_fav.name       # Returns \"Ford\"\nmy_current_fav.tank_size  # Returns 15\nmy_current_fav.mpg        # Returns 12\n</code>\n</pre>\n", "senID": 8}, {"text": ["Here's where I start getting foggy.", "I would like to provide additional \"computed\" attributes only for my current favorite (let's assume these attributes are too \"expensive\" to store in the original list and are easier to just compute):"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n my_current_fav.range      # Would return tank_size * mpg = 180\n                          # (if pointing to \"Ford\")\n</code>\n</pre>\n", "senID": 10}, {"text": ["In my case, I just capitulated and added 'range' as an attribute of Car().", "But what if storing 'range' in each Car() instance was expensive but calculating it was cheap?"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["I considered making 'my_current_fav' a sub-class of Car(), but I couldn't figure out a way to do that and still maintain my ability to simply \"point\" 'my_current_favorite' to an entry in the 'cars' list."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["I also considered using decorators to compute and return 'range', but couldn't figure out a way to also provide access to the attributes 'name', 'mpg', etc."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["Is there an elegant way to point to any item in the list 'cars', provide access to the attributes of the instance being pointed to as well as provide additional attributes not found in the class Car?"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Additional information:\nAfter reading many of your answers, I see there is background information I should have put into the original question.", "Rather than comment on many answers individually, I'll put the additional info here."], "childNum": 2, "tag": "p", "senID": 15, "childList": [{"text": "Additional information:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["This question is a simplification of a more complicated issue.", "The original problem involves modifications to an existing library.", "While making range a method call rather than an attribute is a good way to go, changing"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"code": "<pre>\n<code>\n some_var = my_current_favorite.range\n</code>\n</pre>\n", "senID": 17}, {"text": ["to"], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"code": "<pre>\n<code>\n some_var = my_current_favorite.range()\n</code>\n</pre>\n", "senID": 19}, {"text": ["in many existing user scripts would be expensive.", "Heck, tracking down those user scripts would be expensive."], "childNum": 1, "tag": "p", "senID": 20, "childList": [{"text": "tracking down", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Likewise, my current approach of computing range for every car isn't \"expensive\" in Python terms, but is expensive in run-time because the real-world analog requires slow calls to the (embedded) OS.", "While Python itself isn't slow, those calls are, so I am seeking to minimize them."], "childNum": 1, "tag": "p", "senID": 21, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]