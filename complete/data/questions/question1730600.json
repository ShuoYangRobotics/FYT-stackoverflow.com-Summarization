[{"text": ["Principal component analysis in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'd like to use principal component analysis (PCA) for dimensionality reduction.", "Does numpy or scipy already have it, or do I have to roll my own using numpy.linalg.eigh?"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "numpy.linalg.eigh", "tag": "a", "pos": 1, "childList": [{"text": "numpy.linalg.eigh", "tag": "code"}], "childNum": 1, "href": "http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.eigh.html"}, {"text": "numpy.linalg.eigh", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I don't just want to use singular value decomposition (SVD) because my input data are quite high-dimensional (~460 dimensions), so I think SVD will be slower than computing the eigenvectors of the covariance matrix."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I was hoping to find a premade, debugged implementation that already makes the right decisions for when to use which method, and which maybe does other optimizations that I don't know about."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]