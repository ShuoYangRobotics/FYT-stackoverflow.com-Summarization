[{"text": ["Increasing speed of python code"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have some python code that has many classes.", "I used cProfile to find that the total time to run the program is 68 seconds.", "I found that the following function in a class called Buyers takes about 60 seconds of those 68 seconds.", "I have to run the program about 100 times, so any increase in speed will help.", "Can you suggest ways to increase the speed by modifying the code?", "If you need more information that will help, please let me know."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "cProfile", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Buyers", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n def qtyDemanded(self, timePd, priceVector):\n    '''Returns quantity demanded in period timePd. In addition,\n    also updates the list of customers and non-customers.\n\n    Inputs: timePd and priceVector\n    Output: count of people for whom priceVector[-1] &lt; utility\n    '''\n\n    ## Initialize count of customers to zero\n    ## Set self.customers and self.nonCustomers to empty lists\n    price = priceVector[-1]\n    count = 0\n    self.customers = []\n    self.nonCustomers = []\n\n\n    for person in self.people:\n        if person.utility &gt;= price:             \n            person.customer = 1\n            self.customers.append(person)\n        else:\n            person.customer = 0\n            self.nonCustomers.append(person)\n\n    return len(self.customers)\n</code>\n</pre>\n", "senID": 2}, {"text": ["self.people is a list of  person objects.", "Each person has customer and utility as its attributes. "], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "self.people", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "person", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "person", "childNum": 0, "tag": "code", "childList": []}, {"text": "customer", "childNum": 0, "tag": "code", "childList": []}, {"text": "utility", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["EDIT - responsed added"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "EDIT - responsed added", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["------------------------------------- "], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "-------------------------------------", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Thanks so much for the suggestions.", "Here is the\nresponse to some questions and suggestions people have kindly\nmade.", "I have not tried them all, but will try others and write back later. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["(1) @amber - the function is accessed 80,000 times. "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["(2) @gnibbler and others - self.people is a list of Person objects in memory.", "Not connected to a database."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["(3) @Hugh Bothwell "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["cumtime taken by the original function - 60.8 s (accessed 80000 times)"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["cumtime taken by the new function with local function aliases as suggested - 56.4 s (accessed  80000 times)"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["(4) @rotoglup and @Martin Thomas "], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["I have not tried your solutions yet.", "I need to check the rest of the code to see the places where I use self.customers before I can make the change of not appending the customers to self.customers list.", "But I will try this and write back."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["(5) @TryPyPy - thanks for your kind offer to check the code. "], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Let me first read a little on the suggestions you have made to see if those will be feasible to use. "], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["EDIT 2\nSome suggested that since I am flagging the customers and noncustomers in the self.people, I should try without creating separate lists of self.customers and self.noncustomers using append.", "Instead, I should loop over the self.people to find the number of customers.", "I tried the following code and timed both functions below f_w_append and f_wo_append.", "I did find that the latter takes less time, but it is still 96% of the time taken by the former.", "That is, it is a very small increase in the speed. "], "childNum": 7, "tag": "p", "senID": 16, "childList": [{"text": "EDIT 2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "self.people", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "self.customers", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "self.noncustomers", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "self.people", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "f_w_append", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "f_wo_append", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["@TryPyPy - The following piece of code is complete enough to check the bottleneck function, in case your offer is still there to check it with other compilers. "], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["Thanks again to everyone who replied."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"code": "<pre>\n<code>\n import numpy\n\nclass person(object):\n    def __init__(self, util):\n        self.utility = util\n        self.customer = 0\n\nclass population(object):\n    def __init__(self, numpeople):\n        self.people = []\n        self.cus = []\n        self.noncus = []\n        numpy.random.seed(1)\n        utils = numpy.random.uniform(0, 300, numpeople)\n        for u in utils:\n            per = person(u)\n            self.people.append(per)\n\npopn = population(300)\n\ndef f_w_append():\n    '''Function with append'''\n    P = 75\n    cus = []\n    noncus = []\n    for per in popn.people:\n        if  per.utility &gt;= P:\n            per.customer = 1\n            cus.append(per)\n        else:\n            per.customer = 0\n            noncus.append(per)\n    return len(cus)\n\ndef f_wo_append():\n    '''Function without append'''\n    P = 75\n    for per in popn.people:\n        if  per.utility &gt;= P:\n            per.customer = 1\n        else:\n            per.customer = 0\n\n    numcustomers = 0\n    for per in popn.people:\n        if per.customer == 1:\n            numcustomers += 1                \n    return numcustomers\n</code>\n</pre>\n", "senID": 19}, {"text": ["EDIT 3: It seems numpy is the problem"], "childNum": 1, "tag": "p", "senID": 20, "childList": [{"text": "EDIT 3: It seems numpy is the problem", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["This is in response to what John Machin said below.", "Below you see two ways of defining Population class.", "I ran the program below twice, once with each way of creating Population class.", "One uses numpy and one does not use numpy.", "The one without numpy takes similar time as John found in his runs.", "One with numpy takes much longer.", "What is not clear to me is that the popn instance is created before time recording begins (at least that is what it appears from the code).", "Then, why is numpy version taking longer.", "And, I thought numpy was supposed to be more efficient.", "Anyhow, the problem seems to be with numpy and not so much with the append, even though it does slow down things a little.", "Can someone please confirm with the code below?", "Thanks."], "childNum": 4, "tag": "p", "senID": 21, "childList": [{"text": "Population", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Population", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "without", "childNum": 0, "tag": "strong", "pos": 4, "childList": []}, {"text": "popn", "childNum": 0, "tag": "code", "pos": 6, "childList": []}]}, {"code": "<pre>\n<code>\n import random # instead of numpy\nimport numpy\nimport time\ntimer_func = time.time # using Mac OS X 10.5.8\n\nclass Person(object):\n    def __init__(self, util):\n        self.utility = util\n        self.customer = 0\n\nclass Population(object):\n    def __init__(self, numpeople):\n        random.seed(1)\n        self.people = [Person(random.uniform(0, 300)) for i in xrange(numpeople)]\n        self.cus = []\n        self.noncus = []   \n\n# Numpy based    \n# class Population(object):\n#     def __init__(self, numpeople):\n#         numpy.random.seed(1)\n#         utils = numpy.random.uniform(0, 300, numpeople)\n#         self.people = [Person(u) for u in utils]\n#         self.cus = []\n#         self.noncus = []    \n\n\ndef f_wo_append(popn):\n    '''Function without append'''\n    P = 75\n    for per in popn.people:\n        if  per.utility &gt;= P:\n            per.customer = 1\n        else:\n            per.customer = 0\n\n    numcustomers = 0\n    for per in popn.people:\n        if per.customer == 1:\n            numcustomers += 1                \n    return numcustomers\n\n\n\nt0 = timer_func()\nfor i in xrange(20000):\n    x = f_wo_append(popn)\nt1 = timer_func()\nprint t1-t0\n</code>\n</pre>\n", "senID": 22}, {"text": ["Edit 4: See the answers by John Machin and TryPyPy"], "childNum": 1, "tag": "p", "senID": 23, "childList": [{"text": "Edit 4: See the answers by John Machin and TryPyPy", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Since there have been so many edits and updates here, those who find themselves here for the first time may be a little confused.", "See the answers by John Machin and TryPyPy.", "Both of these can help in improving the speed of the code substantially.", "I am grateful to them and others who alerted me to slowness of append.", "Since, in this instance I am going to use John Machin's solution and not use numpy for generating utilities, I am accepting his response as an answer.", "However, I really appreciate the directions pointed out by TryPyPy also.  "], "childNum": 1, "tag": "p", "senID": 24, "childList": [{"text": "append", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}]