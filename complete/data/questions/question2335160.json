[{"text": ["What is the scope of a defaulted parameter in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["When you define a function in Python with an array parameter, what is the scope of that parameter?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This example is taken from the Python tutorial:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def f(a, L=[]):\n    L.append(a)\n    return L\n\nprint f(1)\nprint f(2)\nprint f(3)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Prints:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n [1]\n[1, 2]\n[1, 2, 3]\n</code>\n</pre>\n", "senID": 5}, {"text": ["I'm not quite sure if I understand what's happening here.", "Does this mean that the scope of the array is outside of the function?", "Why does the array remember its values from call to call?", "Coming from other languages, I would expect this behavior only if the variable was static.", "Otherwise it seems it should be reset each time.", "And actually, when I tried the following:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def f(a):\n    L = []\n    L.append(a)\n    return L\n</code>\n</pre>\n", "senID": 7}, {"text": ["I got the behavior I expected (the array was reset on each call)."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["So it seems to me that I just need the line def f(a, L=[]): explained - what is the scope of the L variable?"], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "def f(a, L=[]):", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "L", "childNum": 0, "tag": "code", "childList": []}]}]