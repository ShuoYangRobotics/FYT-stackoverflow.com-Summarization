[{"text": ["How to call a parent class's method from child class in python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Stackers, "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I apologize for this question in advance.", "It must be a FAQ, but I don't seem to be able to find the answer."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["When creating a simple object hierarchy in python, I'd like to be able to invoke methods of the parent class from a derived class.", "In Perl and Java, there is a keyword for this (super).", "In Perl, I might do this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n package Foo;\n\nsub frotz() {\n    return \"Bamf\";\n}\n\npackage Bar;\n@ISA = qw(Foo);\n\nsub frotz() {\n   my $str = SUPER::frotz();\n   return uc($str);\n}\n</code>\n</pre>\n", "senID": 4}, {"text": ["In python, it appears that I have to name the parent class explicitly from the child.", "In the example above, I'd have to do something like Foo::frotz().  "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["This doesn't seem right, since this behavior makes it hard to make deep hierarchies.", "If children need to know what class defined an inherited method, then all sorts of information pain is created.  "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Is this an actual limitation in python, a gap in my understanding or both?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Thanks,"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["--Joe"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]