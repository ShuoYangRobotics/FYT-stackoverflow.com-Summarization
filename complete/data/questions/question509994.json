[{"text": ["Best way to write a Python function that integrates a gaussian?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["In attempting to use scipy's quad method to integrate a gaussian (lets say there's a gaussian method named gauss), I was having problems passing needed parameters to gauss and leaving quad to do the integration over the correct variable.", "Does anyone have a good example of how to use quad w/ a multidimensional function?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["But this led me to a more grand question about the best way to integrate a gaussian in general.", "I didn't find a gaussian integrate in scipy (to my surprise).", "My plan was to write a simple gaussian function and pass it to quad (or maybe now a fixed width integrator).", "What would you do?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edit: Fixed-width meaning something like trapz that uses a fixed dx to calculate areas under a curve."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["What I've come to so far is a method make___gauss that returns a lambda function that can then go into quad.", "This way I can make a normal function with the average and variance I need before integrating."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def make_gauss(N, sigma, mu):\n    return (lambda x: N/(sigma * (2*numpy.pi)**.5) *\n            numpy.e ** (-(x-mu)**2/(2 * sigma**2)))\n\nquad(make_gauss(N=10, sigma=2, mu=0), -inf, inf)\n</code>\n</pre>\n", "senID": 5}, {"text": ["When I tried passing a general gaussian function (that needs to be called with x, N, mu, and sigma) and filling in some of the values using quad like"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n quad(gen_gauss, -inf, inf, (10,2,0))\n</code>\n</pre>\n", "senID": 7}, {"text": ["the parameters 10, 2, and 0 did NOT necessarily match N=10, sigma=2, mu=0, which prompted the more extended definition."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["The erf(z) in scipy.special would require me to define exactly what t is initially, but it nice to know it is there."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]