[{"text": ["What is the best Python library module skeleton code?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Many python IDE's will start you with a template like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print 'hello world'\n</code>\n</pre>\n", "senID": 2}, {"text": ["That's not enough...", "So here's my skeleton code to get this question started:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\n\"\"\"\nModule Docstring\n\"\"\"\n\n#\n## Code goes here.\n#\n\ndef test():\n    \"\"\"Testing Docstring\"\"\"\n    pass\n\nif __name__=='__main__':\n    test()\n</code>\n</pre>\n", "senID": 4}, {"text": ["and,"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n# -*- coding: ascii -*-\n\n\"\"\"\nModule Docstring\nDocstrings: http://www.python.org/dev/peps/pep-0257/\n\"\"\"\n\n__author__ = 'Joe Author (joe.author@website.org)'\n__copyright__ = 'Copyright (c) 2009-2010 Joe Author'\n__license__ = 'New-style BSD'\n__vcs_id__ = '$Id$'\n__version__ = '1.2.3' #Versioning: http://www.python.org/dev/peps/pep-0386/\n\n#\n## Code goes here.\n#\n\ndef test():\n    \"\"\" Testing Docstring\"\"\"\n    pass\n\nif __name__=='__main__':\n    test()\n</code>\n</pre>\n", "senID": 6}, {"code": "<pre>\n<code>\n \"\"\"\n===MODULE TYPE===\nSince the vast majority of my modules are \"library\" types, I have constructed\nthis example skeleton as such. For modules that act as the main entry for\nrunning the full application, you would make changes such as running a main()\nfunction instead of the test() function in __main__.\n\n===VERSIONING===\nThe following practice, specified in PEP 8, no longer makes sense:\n\n   __version__ = '$Revision: 1.2.3 $'\n\nFor two reasons:\n    (1) Distributed version control systems make it neccessary to include more\n        than just a revision number. E.g. author name and revision number.\n    (2) It's a revision number not a version number.\n\n\nInstead, the __vcs_id__ variable is being adopted. This expands to, for\nexample:\n    __vcs_id__ = '$Id: example.py,v 1.1.1.1 2001/07/21 22:14:04 goodger Exp $'\n\n\n===VCS DATE===\nLikewise, the date variable has been removed:\n\n    __date__ = '$Date: 2009/01/02 20:19:18 $'\n\n\n===CHARACTER ENCODING===\nIf the coding is explicitly specified, then it should be set to the default\nsetting of ASCII. This can be modified if necessary (rarely in practice).\nDefaulting to UTF-8 can cause anomalies with editors that have poor unicode\nsupport.\n\n\"\"\"\n</code>\n</pre>\n", "senID": 7}, {"text": ["(Code adapted from DasIch's answer."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n# -*- coding: ascii -*-\n\n\"\"\"\npackage.module\n~~~~~~~~~~~~~\n\nA description which can be long and explain the complete\nfunctionality of this module even with indented code examples.\nClass/Function however should not be documented here.\n\n:copyright: year by my name, see AUTHORS for more details\n:license: license_name, see LICENSE for more details\n\"\"\"\n\n#\n## Code goes here.\n#\n\ndef test():\n    \"\"\" \"\"\"\n    pass\n\nif __name__=='__main__':\n    test()\n</code>\n</pre>\n", "senID": 9}, {"text": ["There are a lot of PEPs that put forward coding style recommendations.", "Am I missing any important best practices?", "What is the best Python module skeleton code?"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Show me any kind of \"best\" that you prefer.", "Tell us what metrics you used to qualify \"best\"."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]