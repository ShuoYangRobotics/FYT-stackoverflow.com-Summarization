[{"text": ["How can I simply inherit methods from an existing instance?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["below I have a very simple example of what I'm trying to do.", "I want to be able to use HTMLDecorator with any other class.", "Ignore the fact it's called decorator, it's just a name."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import cgi\n\nclass ClassX(object):\n  pass # ... with own __repr__\n\nclass ClassY(object):\n  pass # ... with own __repr__\n\ninst_x=ClassX()\n\ninst_y=ClassY()\n\ninst_z=[ i*i for i in range(25) ]\n\ninst_b=True\n\nclass HTMLDecorator(object):\n   def html(self): # an \"enhanced\" version of __repr__\n       return cgi.escape(self.__repr__()).join((\"&lt;H1&gt;\",\"&lt;/H1&gt;\"))\n\nprint HTMLDecorator(inst_x).html()\nprint HTMLDecorator(inst_y).html()\nwrapped_z = HTMLDecorator(inst_z)\ninst_z[0] += 70\nwrapped_z[0] += 71\nprint wrapped_z.html()\nprint HTMLDecorator(inst_b).html()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\nTraceback (most recent call last):\n  File \"html.py\", line 21, in \n    print HTMLDecorator(inst_x).html()\nTypeError: default __new__ takes no parameters\n</pre>\n", "senID": 4}, {"text": ["Is what I'm trying to do possible?", "If so, what am I doing wrong?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]