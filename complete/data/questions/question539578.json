[{"text": ["Namespace Specification In Absence of Ambuguity"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Why do some languages, like C++ and Python, require the namespace of an object be specified even when no ambiguity exists?", "I understand that there are backdoors to this, like using namespace x in C++, or from x import * in Python.", "However, I can't understand the rationale behind not wanting the language to just \"do the right thing\" when only one accessible namespace contains a given identifier and no ambiguity exists.", "To me it's just unnecessary verbosity and a violation of DRY, since you're being forced to specify something the compiler already knows."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "using namespace x", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "from x import *", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import foo  # Contains someFunction().\n\nsomeFunction()  # imported from foo.  No ambiguity.  Works.\n</code>\n</pre>\n", "senID": 3}, {"text": ["Vs."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import foo  # Contains someFunction()\nimport bar  # Contains someFunction() also.\n\n# foo.someFunction or bar.someFunction?  Should be an error only because\n# ambiguity exists.\nsomeFunction()\n</code>\n</pre>\n", "senID": 5}]