[{"text": ["Is this normal behaviour for an OO language?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've defined this class:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class RequiredFormSet(BaseFormSet):\n    def __init__(self, *args, **kwargs):\n        super(RequiredFormSet, self).__init__(*args, **kwargs)\n</code>\n</pre>\n", "senID": 2}, {"text": ["And overridden this method:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def total_form_count(self):\n    return self._total_form_count\n</code>\n</pre>\n", "senID": 4}, {"text": ["It so happens that super(...).__init__ uses total_form_count() somewhere in that function.", "It's calling my function rather than the one defined in the base class."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "super(...).__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "total_form_count()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "my", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["I guess I thought because I called super() it would use its own stuff, but apparently in Python that's not true.", "Is this the way it works in other languages, like C#?", "If I call the base constructor, it will still call all the derived functions from there?"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "super()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]