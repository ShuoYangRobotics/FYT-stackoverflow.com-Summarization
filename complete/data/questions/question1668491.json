[{"text": ["Summing Consecutive Ranges Pythonically"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a sumranges() function, which sums all the ranges of consecutive numbers found in a tuple of tuples.", "To illustrate:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def sumranges(nums):\n    return sum([sum([1 for j in range(len(nums[i])) if\n                     nums[i][j] == 0 or\n                     nums[i][j - 1] + 1 != nums[i][j]]) for\n                i in range(len(nums))])\n\n&gt;&gt;&gt; nums = ((1, 2, 3, 4), (1, 5, 6), (19, 20, 24, 29, 400))\n&gt;&gt;&gt; print sumranges(nums)\n7\n</code>\n</pre>\n", "senID": 2}, {"text": ["As you can see, it returns the number of ranges of consecutive digits within the tuple, that is: len((1, 2, 3, 4), (1), (5, 6), (19, 20), (24), (29), (400)) = 7.", "The tuples are always ordered."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["My problem is that my sumranges() is terrible.", "I hate looking at it.", "I'm currently just iterating through the tuple and each subtuple, assigning a 1 if the number is not (1 + previous number), and summing the total.", "I feel like I am missing a much easier way to accomplish my stated objective.", "Does anyone know a more pythonic way to do this?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Edit: I have benchmarked all the answers given thus far.", "Thanks to all of you for your answers."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["The benchmarking code is as follows, using a sample size of 100K:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n from time import time\nfrom random import randrange\nnums = [sorted(list(set(randrange(1, 10) for i in range(10)))) for\n        j in range(100000)]\n\nfor func in sumranges, alex, matt, redglyph, ephemient, ferdinand:\n    start = time()\n    result = func(nums)\n    end = time()\n    print ', '.join([func.__name__, str(result), str(end - start) + ' s'])\n</code>\n</pre>\n", "senID": 7}, {"text": ["Results are as follows.", "Actual answer shown to verify that all functions return the correct answer:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n sumranges, 250281, 0.54171204567 s\nalex, 250281, 0.531121015549 s\nmatt, 250281, 0.843333005905 s\nredglyph, 250281, 0.366822004318 s\nephemient, 250281, 0.805964946747 s\nferdinand, 250281, 0.405596971512 s\n</code>\n</pre>\n", "senID": 9}, {"text": ["RedGlyph does edge out in terms of speed, but the simplest answer is probably Ferdinand's, and probably wins for most pythonic."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]