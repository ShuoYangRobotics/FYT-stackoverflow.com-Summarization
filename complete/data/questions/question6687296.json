[{"text": ["Python- Sieve of Eratosthenes- Compact Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This is my code for finding primes using the Sieve of Eratosthenes."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n list = [i for i in range(2, int(raw_input(\"Compute primes up to what number? \"))+1)]  \n\nfor i in list:\n    for a in list:\n            if a!=i and a%i == 0:\n                list.remove(a)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Trying to find a way to compress those nested for loops into some kind of generator or comprehension, but it doesn't seem that you can apply a function to a list using a comprehension.", "I tried using map and filter, but I can't seem to get it right."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Thinking about something like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print map(list.remove(a), filter(lambda a, i: (a%i ==0 and a!=i), [(a, i) for i in list for a in list])\n</code>\n</pre>\n", "senID": 5}, {"text": ["Obviously doesn't work for a dozen reasons.", "If I just was using the filter portion of that code:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n filter(lambda a, i: (a%i ==0 and a!=i), **[(a, i) for i in list for a in list]**\n</code>\n</pre>\n", "senID": 7}, {"text": ["What's the proper way of putting two variables into the lambda?", "(a,i) makes it a tuple, but I want to submit 'a' and 'i' as independent variables to put into the lambda."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["I ended up resolving the problem with this one-liner:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n print sorted(set([i for i in range(2, int(raw_input(\"Compute primes up to what number? \"))+1)]).difference(a for i in l for a in l if a!=i and a%i == 0))\n</code>\n</pre>\n", "senID": 10}]