[{"text": ["\"unpacking\" a passed dictionary into the function's name space in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["In the work I do, I often have parameters that I need to group into subsets for convenience:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n d1 = {'x':1,'y':2}\nd2 = {'a':3,'b':4}\n</code>\n</pre>\n", "senID": 2}, {"text": ["I do this by passing in multiple dictionaries.", "Most of the time I use the passed dictionary directly, i.e."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def f(d1,d2):\n    for k in d1:\n        blah( d1[k] )\n</code>\n</pre>\n", "senID": 4}, {"text": ["In some functions I need to access the variables directly, and things become cumbersome; I really want those variables in the local name space.", "I want to be able to do something like:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def f(d1,d2)\n    locals().update(d1)\n    blah(x)\n    blah(y)\n</code>\n</pre>\n", "senID": 6}, {"text": ["but the updates to the dictionary that locals() returns aren't guaranteed to actually update the namespace."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Here's the obvious manual way:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n def f(d1,d2):\n    x,y,a,b = d1['x'],d1['y'],d2['a'],d2['b']\n    blah(x)\n    return {'x':x,'y':y}, {'a':a,'b':b}\n</code>\n</pre>\n", "senID": 9}, {"text": ["This results in three repetitions of the parameter list per function.", "This can be automated with a decorator:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n def unpack_and_repack(f):\n    def f_new(d1, d2):\n        x,y,a,b = f(d1['x'],d1['y'],d2['a'],d3['b'])\n        return {'x':x,'y':y}, {'a':a,'b':b}\n    return f_new\n@unpack\ndef f(x,y,a,b):\n    blah(x)\n    blah(y)\n    return x,y,a,b\n</code>\n</pre>\n", "senID": 11}, {"text": ["This results in three repetitions for the decorator, plus two per function, so it's better if you have a lot of functions."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Is there a better way?", "Maybe something using eval?", "Thanks!"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}]