[{"text": ["insertion sort get indices?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I use the following algorithm for insertion sort:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def insertionSort(A):\n    indices = [z for z in xrange(len(A))]\n    for j in range(1, len(A)):\n        key = A[j]\n        i = j-1\n        while (i&gt;=0) and (A[i]&lt;key):\n            A[i+1] = A[i]  \n            indices[j-i-1] = i+1         \n            i = i-1\n\n        A[i+1] = key\n</code>\n</pre>\n", "senID": 2}, {"text": ["However, I need to maintain a list to map the indices of the original values of A  to the sorted values of A, which means if I have a list of [1,3,4,2] after sorting the list = [4,3,2,1] i will have a indices list of [3,1,0,2]."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Any pointers?", "I'm kinda stuck."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["EDITED: apologies, sorting in descending order.."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "EDITED", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]