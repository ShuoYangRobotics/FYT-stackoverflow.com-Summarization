[{"text": ["Is there a map without result in python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Sometimes, I just want to execute a function for a list of entries -- eg."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for x in wowList:\n   installWow(x, 'installed by me')\n</code>\n</pre>\n", "senID": 2}, {"text": ["Sometimes I need this stuff for module initialization, so I don't want to have a footprint like x in global namespace.", "One solution would be to just use map together with lambda:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n map(lambda x: installWow(x, 'installed by me'), wowList)\n</code>\n</pre>\n", "senID": 4}, {"text": ["But this of course creates a nice list [None, None, ...] so my question is, if there is a similar function without a return-list -- since I just don't need it."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["(off course I can also use _x and thus not leaving visible footprint -- but the map-solution looks so neat ...)"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]