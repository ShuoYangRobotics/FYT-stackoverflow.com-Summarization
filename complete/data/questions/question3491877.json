[{"text": ["How can I improve this long-winded Python code?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a data structure like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n items = [\n    ['Schools', '', '', '32'],\n    ['Schools', 'Primary schools', '', '16'],\n    ['Schools', 'Secondary schools', '', '16'],\n    ['Schools', 'Secondary schools', 'Special ed', '8'],\n    ['Schools', 'Secondary schools', 'Non-special ed', '8'],\n]\n</code>\n</pre>\n", "senID": 2}, {"text": ["It's a list of spending items.", "Some are aggregates, e.g.", "items[0] is aggregate spending on all schools, and items[2] is aggregate spending on secondary schools.", "Those that are not aggregates are items[1], items[3] and items[4]. "], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "items[0]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "items[2]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "items[1],", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "items[3]", "childNum": 0, "tag": "code", "childList": []}, {"text": "items[4]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["How can I elegantly reduce the list so it only shows non-aggregate items?", "In pseudocode:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n for each item in items\n   check if item[1] is blank, if it is\n       check if item[0] matches another item\u2019s[0]\n       if it does and if that item\u2019s[1] isn\u2019t blank\n           delete item\n   check if item[2] is blank, if it is\n       check if item[1] matches another item\u2019s[1]\n       if it does and if if that item\u2019s[2] isn\u2019t blank\n           delete item\n</code>\n</pre>\n", "senID": 5}, {"text": ["Here's my (lame!", ") attempt so far:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n for i in range(len(items)):\n    i -= 1\n    if items[i]:\n        if items[i][1] == \"\":\n            for other_item in items:\n                if items[i][0]==other_item[0] and other_item[1]!=\"\":\n                    items_to_remove.append(i)\n                    continue\n        elif items[i][2]==\"\":\n            for other_item in items:\n                if items[i][1] == other_item[1] and other_item[2] != \"\":\n                    items_to_remove.append(i)\n                    continue\nnew_items = [ key for key,_ in groupby(items_to_remove)]\nnew_items.sort(reverse=True)  \nfor number in new_items:\n    temp_item = items[number]\n    items.remove(temp_item)\n</code>\n</pre>\n", "senID": 7}, {"text": ["This is just so ugly.", "What can I do better?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["NB: I could use dictionaries instead of lists, if that would make life easier :)"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]