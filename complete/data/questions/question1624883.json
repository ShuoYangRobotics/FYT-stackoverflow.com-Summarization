[{"text": ["Alternative way to split a list into groups of n"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Let's say I have a list of arbitrary length, L:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n L = list(range(1000))\n</code>\n</pre>\n", "senID": 2}, {"text": ["What is the best way to split that list into groups of n?", "This is the best structure that I have been able to come up with, and for some reason it does not feel like it is the best way of accomplishing the task:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n n = 25\nfor i in range(0, len(L), n):\n    chunk = L[i:i+25]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Is there a built-in to do this I'm missing?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Edit: Early answers are reworking my for loop into a listcomp, which is not the idea; you're basically giving me my exact answer back in a different form.", "I'm seeing if there's an alternate means to accomplish this, like a hypothetical .split on lists or something.", "I also do use this as a generator in some code that I wrote last night:"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": ".split", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def split_list(L, n):\n    assert type(L) is list, \"L is not a list\"\n    for i in range(0, len(L), n):\n        yield L[i:i+n]\n</code>\n</pre>\n", "senID": 7}]