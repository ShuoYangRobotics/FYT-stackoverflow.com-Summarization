[{"text": ["What is the preferred way to type-check variables in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a Python function that takes a numeric argument that must be an integer in order for it behave correctly.", "What is the preferred way of verifying this in Python?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "must", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["My first reaction is to do something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def isInteger(n):\n    return int(n) == n\n</code>\n</pre>\n", "senID": 3}, {"text": ["But I can't help thinking that this is 1) expensive 2) ugly and 3) subject to the tender mercies of machine epsilon. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Does Python provide any native means of type checking variables?", "Or is this considered to be a violation of the language's dynamically typed design?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["EDIT: since a number of people have asked - the application in question works with IPv4 prefixes, sourcing data from flat text files.", "If any input is parsed into a float, that record should be viewed as malformed and ignored."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]