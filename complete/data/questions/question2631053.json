[{"text": ["Python: Memory usage and optimization when modifying lists"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["My concern is the following: I am storing a relativity large dataset in a classical python list and in order to process the data I must iterate over the list several times, perform some operations on the elements, and often pop an item out of the list."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It seems that deleting one item out of a Python list costs O(N) since Python has to copy all the items above the element at hand down one place.", "Furthermore, since the number of items to delete is approximately proportional to the number of elements in the list this results in an O(N^2) algorithm."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I am hoping to find a solution that is cost effective (time and memory-wise).", "I have studied what I could find on the internet and have summarized my different options below.", "Which one is the best candidate ?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n while processingdata:\n    index = 0\n    while index &lt; len(somelist):\n        item = somelist[index]\n        dosomestuff(item)\n        if somecondition(item):\n            del somelist[index]\n        else:\n            index += 1\n</code>\n</pre>\n", "senID": 4}, {"text": ["This is the original solution I came up with.", "Not only is this not very elegant, but I am hoping there is better way to do it that remains time and memory efficient."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n while processingdata:\n    for i in xrange(len(somelist) - 1, -1, -1):\n        dosomestuff(item)\n        if somecondition(somelist, i):\n            somelist.pop(i)\n</code>\n</pre>\n", "senID": 6}, {"text": ["This avoids incrementing an index variable but ultimately has the same cost as the original version.", "It also breaks the logic of dosomestuff(item) that wishes to process them in the same order as they appear in the original list."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n while processingdata:\n    for i, item in enumerate(somelist):\n        dosomestuff(item)\n    newlist = []\n    for item in somelist:\n        if somecondition(item):\n            newlist.append(item)\n    somelist = newlist\n    gc.collect()\n</code>\n</pre>\n", "senID": 8}, {"text": ["This is a very naive strategy for eliminating elements from a list and requires lots of memory since an almost full copy of the list must be made."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n while processingdata:\n    for i, item in enumerate(somelist):\n        dosomestuff(item)\n    somelist[:] = [x for x in somelist if somecondition(x)]\n</code>\n</pre>\n", "senID": 10}, {"text": ["This is very elegant but under-the-cover it walks the whole list one more time and must copy most of the elements in it.", "My intuition is that this operation probably costs more than the original del statement at least memory wise.", "Keep in mind that somelist can be huge and that any solution that will iterate through it only once per run will probably always win."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n while processingdata:\n    for i, item in enumerate(somelist):\n        dosomestuff(item)\n    somelist = filter(lambda x: not subtle_condition(x), somelist)\n</code>\n</pre>\n", "senID": 12}, {"text": ["This also creates a new list occupying lots of RAM."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n from itertools import ifilterfalse\nwhile processingdata:\n     for item in itertools.ifilterfalse(somecondtion, somelist):\n         dosomestuff(item)\n</code>\n</pre>\n", "senID": 14}, {"text": ["This version of the filter call does not create a new list but will not call dosomestuff on every item breaking the logic of the algorithm.", "I am including this example only for the purpose of creating an exhaustive list."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n while processingdata:\n    index = 0\n    for item in somelist:\n        dosomestuff(item)\n        if not somecondition(item):\n            somelist[index] = item\n            index += 1\n    del somelist[index:]\n</code>\n</pre>\n", "senID": 16}, {"text": ["This is a subtle method that seems cost effective.", "I think it will move each item (or the pointer to each item ?", ") exactly once resulting in an O(N) algorithm.", "Finally, I hope Python will be intelligent enough to resize the list at the end without allocating memory for a new copy of the list.", "Not sure though."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n class Doubly_Linked_List:\n    def __init__(self):\n        self.first = None\n        self.last = None\n        self.n = 0\n    def __len__(self):\n        return self.n\n    def __iter__(self):\n        return DLLIter(self)\n    def iterator(self):\n        return self.__iter__()\n    def append(self, x):\n        x = DLLElement(x)\n        x.next = None\n        if self.last is None:\n            x.prev = None\n            self.last = x\n            self.first = x\n            self.n = 1\n        else:\n            x.prev = self.last\n            x.prev.next = x\n            self.last = x\n            self.n += 1\n\nclass DLLElement:\n    def __init__(self, x):\n    self.next = None\n    self.data = x\n    self.prev = None\n\nclass DLLIter:\n    etc...\n</code>\n</pre>\n", "senID": 18}, {"text": ["This type of object resembles a python list in a limited way.", "However, deletion of an element is guaranteed O(1).", "I would not like to go here since this would require massive amounts of code refactoring almost everywhere."], "childNum": 0, "tag": "p", "senID": 19, "childList": []}]