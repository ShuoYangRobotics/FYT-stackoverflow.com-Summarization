[{"text": ["Help me to port this NetHack function to Python please!"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am trying to write a Python function which returns the same moon phase value as in the game NetHack.", "This is found in hacklib.c."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "hacklib.c", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://nethack.wikia.com/wiki/Source:Hacklib.c#phase%5Fof%5Fthe%5Fmoon"}]}, {"text": ["I have tried to simply copy the corresponding function from the NetHack code but I don't believe I am getting the correct results."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The function which I have written is phase_of_the_moon()."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "phase_of_the_moon()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The functions position() and phase(), I found on the net, and I am using them as an indication of the success of my function.", "They are very accurate and give results which approximately match the nethack.alt.org server (see http://alt.org/nethack/moon/pom.txt).", "What I am after however is an exact replication of the original NetHack function, idiosyncrasies intact."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "position()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "phase()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "http://alt.org/nethack/moon/pom.txt", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://alt.org/nethack/moon/pom.txt"}]}, {"text": ["I would expect my function and the 'control' function to give the same moon phase at least, but currently they do not and I'm not sure why!"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Any help would be appreciated,"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Thanks."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Here is the NetHack code:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n /*\n * moon period = 29.53058 days ~= 30, year = 365.2422 days\n * days moon phase advances on first day of year compared to preceding year\n *  = 365.2422 - 12*29.53058 ~= 11\n * years in Metonic cycle (time until same phases fall on the same days of\n *  the month) = 18.6 ~= 19\n * moon phase on first day of year (epact) ~= (11*(year%19) + 29) % 30\n *  (29 as initial condition)\n * current phase in days = first day phase + days elapsed in year\n * 6 moons ~= 177 days\n * 177 ~= 8 reported phases * 22\n * + 11/22 for rounding\n */\nint\nphase_of_the_moon() \t/* 0-7, with 0: new, 4: full */\n{\n    register struct tm *lt = getlt();\n    register int epact, diy, goldn;\n\n    diy = lt-&gt;tm_yday;\n    goldn = (lt-&gt;tm_year % 19) + 1;\n    epact = (11 * goldn + 18) % 30;\n    if ((epact == 25 &amp;&amp; goldn &gt; 11) || epact == 24)\n        epact++;\n\n    return( (((((diy + epact) * 6) + 11) % 177) / 22) &amp; 7 );\n}\n</code>\n</pre>\n", "senID": 9}, {"text": ["Here is the getlt() function (also in hacklib.c):"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "getlt()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n static struct tm *\ngetlt()\n{\n    time_t date;\n\n#if defined(BSD) &amp;&amp; !defined(POSIX_TYPES)\n    (void) time((long *)(&amp;date));\n#else\n    (void) time(&amp;date);\n#endif\n#if (defined(ULTRIX) &amp;&amp; !(defined(ULTRIX_PROTO) || defined(NHSTDC))) || (defined(BSD) &amp;&amp; !defined(POSIX_TYPES))\n    return(localtime((long *)(&amp;date)));\n#else\n    return(localtime(&amp;date));\n#endif\n}\n</code>\n</pre>\n", "senID": 11}, {"text": ["Here is my Python code:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n from datetime import date\n\ndef phase_of_the_moon():\n   lt = date.today()\n\n   diy = (lt - date(lt.year, 1, 1)).days\n   goldn = ((lt.year - 1900) % 19) + 1\n   epact = (11 * goldn + 18) % 30;\n   if ((epact == 25 and goldn &gt; 11) or epact == 24):\n      epact += 1\n   return ( (((((diy + epact) * 6) + 11) % 177) / 22) &amp; 7 )\n\nimport math, decimal, datetime\ndec = decimal.Decimal\n\ndef position(now=None): \n   if now is None: \n      now = datetime.datetime.now()\n\n   diff = now - datetime.datetime(2001, 1, 1)\n   days = dec(diff.days) + (dec(diff.seconds) / dec(86400))\n   lunations = dec(\"0.20439731\") + (days * dec(\"0.03386319269\"))\n\n   return lunations % dec(1)\n\ndef phase(pos): \n   index = (pos * dec(8)) + dec(\"0.5\")\n   index = math.floor(index)\n   return {\n      0: \"New Moon\", \n      1: \"Waxing Crescent\", \n      2: \"First Quarter\", \n      3: \"Waxing Gibbous\", \n      4: \"Full Moon\", \n      5: \"Waning Gibbous\", \n      6: \"Last Quarter\", \n      7: \"Waning Crescent\"\n   }[int(index) &amp; 7]\n\ndef phase2(pos): \n   return {\n      0: \"New Moon\", \n      1: \"Waxing Crescent\", \n      2: \"First Quarter\", \n      3: \"Waxing Gibbous\", \n      4: \"Full Moon\", \n      5: \"Waning Gibbous\", \n      6: \"Last Quarter\", \n      7: \"Waning Crescent\"\n   }[int(pos)]\n\ndef main():\n   ## Correct output\n   pos = position()\n   phasename = phase(pos)\n   roundedpos = round(float(pos), 3)\n   print \"%s (%s)\" % (phasename, roundedpos)\n\n   ## My output\n   print \"%s (%s)\" % (phase2(phase_of_the_moon()), phase_of_the_moon())\n\nif __name__==\"__main__\": \n   main()\n</code>\n</pre>\n", "senID": 13}]