[{"text": ["Help me optimize this python code... Project Euler question 23"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The question:\nClick!"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Click!", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://projecteuler.net/index.php?section=problems&id=23"}]}, {"text": ["My solution:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #returns a list of the divisors of a given number\ndef Divs(Number):\n    Divisors = []\n\n    for i in range(2 , int(Number**0.5) + 1):\n        if Number % i == 0:\n            Divisors.append(i)\n\n    for q in range(len(Divisors)):\n        if Divisors[q] != (Number / Divisors[q]):\n            Divisors.append(Number / Divisors[q])\n\n    Divisors.insert(0,1)\n    return Divisors\n\n#returns a list of abundant numbers up to and including the limit\ndef AbList(limit):\n    Abundant = []\n\n    for i in range(11,limit + 1):\n        if sum(Divs(i)) &gt; i:\n            Abundant.append(i)\n\n    return Abundant\n\n#Finds the sum of all positive integers that cannot be written as the\n#sum of two abundant numbers...\ndef AbSum(limit):\n    Abundant = AbList(limit)\n    NoAbSum = 0\n    for i in range(1 , limit):\n        AbSum = 0\n        x = 0\n        for x in Abundant:\n            if i - x in Abundant[:i]:\n                AbSum = 1\n                break\n        if AbSum == 0:\n            NoAbSum += i\n    return NoAbSum\n</code>\n</pre>\n", "senID": 3}, {"text": ["Alright, so this took my 3.4 GhZ processor about 15 minutes to solve.", "I have spent hours searching for a better way, but I simply can't think of anything.", "For now, I'm not concerned with the first two functions, because together they take less than a second to run.", "The third function is the kicker here.", "It runs through the range of numbers up to the limit (in this case, 20000-something), and each time, it runs through the list of abundant numbers, subtracting each from the current number, then checking that answer against the list of abundant numbers.", "If there is a match, the loop breaks and tries again with the next number, all the way up to the limit."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I know there has got to be a better way of doing this.", "Any suggestions?", "Also, a disclaimer: I'm somewhat new to programming.", "Go easy on me :)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]