[{"text": ["best algorithm for finding distance for all pairs where edges' weight is 1"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["As the title said, I'm trying to implement an algorithm that finds out the distances between all pairs of nodes in given graph.", "But there is more: (Things that might help you)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": ["The graph is unweighted.", "Meaning that all the edges can be considered as having weight of 1."], "childNum": 1, "tag": "strong", "senID": 2, "childList": [{"text": "Meaning that all the edges can be considered as having weight of 1", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["|E| &lt;= 4*|V|"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}, {"text": "The graph is pretty big (at most ~144 depth)", "tag": "none", "senID": 4}, {"text": "The graph is directed", "tag": "none", "senID": 5}, {"text": "There might be cycles ", "tag": "none", "senID": 6}, {"text": "I'm writing my code in python (please if you reference algorithms, code would be nice too :))", "tag": "none", "senID": 7}]}, {"text": ["I know about Johnson's algorithm, Floyd-Warshal, and Dijkstra for all pairs.", "But these algorithms are good when the graph has weights."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "Johnson's algorithm", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Floyd-Warshal", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "Dijkstra", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["I was wondering if there is a better algorithm for my case, because those algorithms are intended for weighted graphs."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Thanks!"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]