[{"text": ["Javascript style dot notation for dictionary keys unpythonic?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've started to use constructs like these:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class DictObj(object):\n    def __init__(self):\n        self.d = {}\n    def __getattr__(self, m):\n        return self.d.get(m, None)\n    def __setattr__(self, m, v):\n        super.__setattr__(self, m, v)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Update: based on this thread, I've revised the DictObj implementation to:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class dotdict(dict):\n    def __getattr__(self, attr):\n        return self.get(attr, None)\n    __setattr__= dict.__setitem__\n    __delattr__= dict.__delitem__\n\nclass AutoEnum(object):\n    def __init__(self):\n        self.counter = 0\n        self.d = {}\n    def __getattr__(self, c):\n        if c not in self.d:\n            self.d[c] = self.counter\n            self.counter += 1        \n        return self.d[c]\n</code>\n</pre>\n", "senID": 4}, {"text": ["where DictObj is a dictionary that can be accessed via dot notation:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n d = DictObj()\nd.something = 'one'\n</code>\n</pre>\n", "senID": 6}, {"text": ["I find it more aesthetically pleasing than d['something'].", "Note that accessing an undefined key returns None instead of raising an exception, which is also nice."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "d['something']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Update: Smashery makes a good point, which mhawke expands on for an easier solution.", "I'm wondering if there are any undesirable side effects of using dict instead of defining a new dictionary; if not, I like mhawke's solution a lot."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "dict", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["AutoEnum is an auto-incrementing Enum, used like this:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n CMD = AutoEnum()\n\ncmds = {\n    \"peek\":  CMD.PEEK,\n    \"look\":  CMD.PEEK,\n    \"help\":  CMD.HELP,\n    \"poke\":  CMD.POKE,\n    \"modify\": CMD.POKE,\n}\n</code>\n</pre>\n", "senID": 10}, {"text": ["Both are working well for me, but I'm feeling unpythonic about them. "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Are these in fact bad constructs?"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]