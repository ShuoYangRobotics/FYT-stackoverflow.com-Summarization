[{"text": ["Memory efficiency: One large dictionary or a dictionary of smaller dictionaries?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm writing an application in Python (2.6) that requires me to use a dictionary as a data store."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I am curious as to whether or not it is more memory efficient to have one large dictionary, or to break that down into many (much) smaller dictionaries, then have an \"index\" dictionary that contains a reference to all the smaller dictionaries."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I know there is a lot of overhead in general with lists and dictionaries.", "I read somewhere that python internally allocates enough space that the dictionary/list # of items to the power of 2."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I'm new enough to python that I'm not sure if there are other unexpected internal complexities/suprises like that, that is not apparent to the average user that I should take into consideration."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["One of the difficulties is knowing how the power of 2 system counts \"items\"?", "Is each key:pair counted as 1 item?", "That's seems important to know because if you have a 100 item monolithic dictionary then space 100^2 items would be allocated.", "If you have 100 single item dictionaries (1 key:pair) then each dictionary would only be allocation 1^2 (aka no extra allocation)?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Any clearly laid out information would be very helpful!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]