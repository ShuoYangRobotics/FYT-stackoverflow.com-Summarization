[{"text": ["Regular expression to parse a commented configuration file"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Edit: I'm really just curious as to how I can get this regex to work.", "Please don't tell me there are easier ways to do it.", "That's obvious!", ":P"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'm writing a regular expression (using Python) to parse lines in a configuration file.", "Lines could look like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n someoption1 = some value # some comment\n# this line is only a comment\nsomeoption2 = some value with an escaped \\# hash\nsomeoption3 = some value with a \\# hash # some comment\n</code>\n</pre>\n", "senID": 3}, {"text": ["The idea is that anything after a hash symbol is considered to be a comment, except if the hash is escaped with a slash."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I'm trying to use a regex to break each line into its individual pieces: leading whitespace, left side of the assignment, right side of the assignment, and comment.", "For the first line in the example, the breakdown would be:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Whitespace: \"\"", "tag": "none", "senID": 6}, {"text": "Assignment left: \"someoption1 =\"", "tag": "none", "senID": 7}, {"text": "Assignment right: \" some value \"", "tag": "none", "senID": 8}, {"text": "Comment \"# some comment\"", "tag": "none", "senID": 9}]}, {"text": ["This is the regex I have so far:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n ^(\\s)?(\\S+\\s?=)?(([^\\#]*(\\\\\\#)*)*)?(\\#.*)?$\n</code>\n</pre>\n", "senID": 11}, {"text": ["I'm terrible with regex, so feel free to tear it apart!"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Using Python's re.findAll(), this is returning:"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "re.findAll()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "0th index: the whitespace, as it should be", "tag": "none", "senID": 14}, {"text": "1st index: the left side of the assignment", "tag": "none", "senID": 15}, {"text": "2nd index: The right side of the assignment, up to the first hash, whether escaped or not (which is incorrect)", "tag": "none", "senID": 16}, {"text": "5th index: The first hash, whether escaped or not, and anything after it (which is incorrect)", "tag": "none", "senID": 17}]}, {"text": ["There's probably something fundamental about regular expressions that I'm missing.", "If somebody can solve this I'll be forever grateful..."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}]