[{"text": ["Is there a way to really pickle compiled regular expressions in python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a python console application that contains 300+ regular expressions.", "The set of regular expressions is fixed for each release.", "When users run the app, the entire set of regular expressions will be applied anywhere from once (a very short job) to thousands of times (a long job)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I would like to speed up the shorter jobs by compiling the regular expressions up front, pickle the compiled regular expressions to a file, and then load that file when the application is run.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The python re module is efficient and the regex compilation overhead is quite acceptable for long jobs.", "For short jobs, however, it is a large proportion of the overall run-time.", "Some users will want to run many small jobs to fit into their existing workflows.", "Compiling the regular expressions takes about 80ms.", "A short job might take 20ms-100ms excluding regular expression compilation.", "So for short jobs, the overhead can be 100% or more.", "This is with Python27 under both Windows and Linux."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The regular expressions must be applied with the DOTALL flag, so need to be compiled prior to use.", "A large compilation cache clearly doesn't help in this instances.", "As some have pointed out, the default method to serialise the compiled regular expression doesn't actually do much."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["The re and sre modules compile the patterns into a little custom language with its own opcodes and some auxiliary data structures (e.g., for charsets used in an expression).", "The pickle function in re.py takes the easy way out.", "It is:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def _pickle(p):\n    return _compile, (p.pattern, p.flags)\n\ncopy_reg.pickle(_pattern_type, _pickle, _compile)\n</code>\n</pre>\n", "senID": 6}, {"text": ["I think that a good solution to the problem would be an update to the definition of _pickle in re.py that actually pickled the compiled pattern object.", "Unfortunately, this goes beyond my python skills.", "I bet, however, that someone here knows how to do it."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I realise that I am not the first person to ask this question - but perhaps you can be the first person to give an accurate and useful response to it!"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Your advice would be greatly appreciated."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]