[{"text": ["Python string 'join' is faster(?", ") than '+', but what's wrong here?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I asked the most efficient method for mass dynamic string concatenation in an earlier post and I was suggested to use the join method, the best, simplest and fastest method to do so (as everyone said that).", "But while I was playing with string concatenations, I found some weird(?", ") results.", "I'm sure something is going on but I can't not get it quite.", "Here is what I did:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "join", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I defined these functions:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import timeit\ndef x():\n    s=[]\n    for i in range(100):\n        # Other codes here...\n        s.append(\"abcdefg\"[i%7])\n    return ''.join(s)\n\ndef y():\n    s=''\n    for i in range(100):\n        # Other codes here...\n        s+=\"abcdefg\"[i%7]\n    return s\n\ndef z():\n    s=''\n    for i in range(100):\n        # Other codes here...\n        s=s+\"abcdefg\"[i%7]\n    return s\n\ndef p():\n    s=[]\n    for i in range(100):\n        # Other codes here...\n        s+=\"abcdefg\"[i%7]\n    return ''.join(s)\n\ndef q():\n    s=[]\n    for i in range(100):\n        # Other codes here...\n        s = s + [\"abcdefg\"[i%7]]\n    return ''.join(s)\n</code>\n</pre>\n", "senID": 3}, {"text": ["I have tried to keep other things (except the concatenation) almost same throughout the functions.", "Then I tested with the following with results in comment (using Python 3.1.1 IDLE on Windows 32 bit machine):"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n timeit.timeit(x) # 31.54912480500002\ntimeit.timeit(y) # 23.533029429999942 \ntimeit.timeit(z) # 22.116181330000018\ntimeit.timeit(p) # 37.718607439999914\ntimeit.timeit(q) # 108.60377576499991\n</code>\n</pre>\n", "senID": 5}, {"text": ["That means it shows that *strng = strng + dyn_strng* is the fastest.", "Though the difference in times are not that significant (except the last one), but I wanna know why this is happening.", "Is that because I am using Python 3.1.1 and that provides '+' as most efficient?", "Should I use '+' as an alternative to join?", "Or, have I done something extremely silly?", "Or what?", "Please explain clearly.", "Thank you."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "join", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}, {"text": ["EDIT: I have included my answer at the last (with no vote on it :)).", "Please comment on it."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]