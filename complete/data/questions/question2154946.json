[{"text": ["Python linked list O(1) insert/remove"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am looking for a linked list and related algorithms implementation for Python.", "Everyone I ask just recommends using built in Python lists, but performance measurements indicate that list insertion and removal is a bottleneck for our application.", "It's trivial to implement a simple linked list, but I wonder if there is a mature library which includes some operations like sort, merge, splice, search, lower/upper bound, etc..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I know this is a dupe, but searching for python list on any search engine gives predictably poor results, with most people just saying that linked lists are unneeded in python (pfft!", ")."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["PS: I need to insert and remove from anywhere in the list, not just the ends."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["OK, you asked for it:\nI need to maintain an ordered list of several hundred thousand entries.", "I will iterate over the list forwards (one by one), using a visitor on each entry, starting from the beginning or a position found by a binary search.", "When an entry matching a predicate is found it is removed from the list, and then, another binary search is performed on a subset of the list beginning from the removed entry's previous position, until a position determined statistically beforehand.", "Ignoring the error condition, the modified entry may be used to create another linked list which is spliced into the new position found through the second binary search.", "Iteration is continued from the position where the entry was removed.", "On occasion, several thousand contiguous ordered entries may be added to/removed from any place in the list.", "Sometimes several thousand non-contiguous entries must be searched for and removed incrementally."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["python's list is unnacceptable as the cost of insertion/removal is prohibitive, and the minor gains in speed for the binary search are totally irrelevant to the total cost.", "Our in house tests confirm this."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "tests confirm this", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["if I have neglected any detail perhaps I can e-mail you a copy of my company's non-disclosure agreement and I can privately correspond with you on the matter.", "sarcasm.end()."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "sarcasm.end()", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}]