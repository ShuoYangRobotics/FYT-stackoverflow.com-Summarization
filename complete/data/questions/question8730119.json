[{"text": ["Retrieveing JSON objects from a text file (using Python)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have thousands of text files containing multiple JSON objects, but unfortunately there is no delimiter between the objects.", "Objects are stored as dictionaries and some of their fields are themselves objects.", "Each object might have a variable number of nested objects.", "Concretely, an object might look like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n {field1: {}, field2: \"some value\", field3: {}, ...}\n</code>\n</pre>\n", "senID": 2}, {"text": ["and hundreds of such objects are concatenated without a delimiter in a text file.", "This means that I can neither use json.load() nor json.loads()."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "json.load()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "json.loads()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Any suggestion on how I can solve this problem.", "Is there a known parser to do this?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["SOLUTION: I ended up adopting the solution suggested by Till Backhaus, because it was the fastest.", "I first implemented the solutions suggesting replacing '}{' with '},{' and that worked fine (I din't use regex though), but because many of the files had thousands of objects, it was really slow.", "The solution using JSONDecoder was really fast.", "Thank you to all for the discussion and solutions.", "I learned a lot in this hour reading and trying your suggestions. "], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "SOLUTION:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "'}{'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "'},{'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]