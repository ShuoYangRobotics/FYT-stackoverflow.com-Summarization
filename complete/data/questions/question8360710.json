[{"text": ["How can I write a generic Python 2.2 function that returns a list of unset parameters?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a function with many input parameters, and I need a function that will return a list of parameter names (not values) for each parameter whose value is '' or None"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Normally I'd throw an exception in such a method.", "If anyone wants to crack the problem by throwing an exception, that is fine.", "I still have the requirement that the function return the list of parameter names."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["To summarize"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Answers to questions raised:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["which ends up like this after the preprocessor runs:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n DATABASE_NAME = \"DB1\"\n</code>\n</pre>\n", "senID": 6}, {"text": ["Here is a concrete example showing why a simple method throwing an exception would not work.", "I have rewritten to use an exception rather than returning a value, by request:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def validate_parameters(params_map):\n    \"\"\"\n    map is like {foo: \"this is foo\"}\n    \"\"\"\n    missing_params_info = []\n    for k,v in params_map.items():\n        if not k:\n            missing_params_info.append(v)\n    if missing_params_info:\n        raise TypeError('These parameters were unset: %s' % missing_params_info)\n\nparams = {}\nparams['foo'] = '1'\nparams['bar'] = '2'\nparams['empty'] = ''\nparams['empty2'] = ''\nparams['None'] = None\nparams_map = {\n    params['foo']: 'this is foo',\n    params['bar']: 'this is bar',\n    params['empty']: 'this is empty',\n    params['empty2']: 'this is empty2',\n    params['None']: 'this is None',\n}\n\nprint validate_parameters(params_map)\n\n\nbash-3.00# python /var/tmp/ck.py\nTraceback (most recent call last):\n  File \"/var/tmp/ck.py\", line 26, in ?\n    print validate_parameters(params_map)\n  File \"/var/tmp/ck.py\", line 10, in validate_parameters\n    raise TypeError('These parameters were unset: %s' % missing_params_info)\nTypeError: These parameters were unset: ['this is empty2', 'this is None']\n</code>\n</pre>\n", "senID": 8}, {"text": ["Two reasons it doesn't work for us: It only prints empty2, even though there is another empty parameter, \"empty\".", "\"empty\" is overwritten by \"empty2\" because they use the same key in the map."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Second reason:  I need to get the list of descriptions into a variable at some point after running this function.", "Maybe this is possible with exceptions, but I don't know how right now."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["I've posted an answer that seems to solve all these problems, but is not ideal.", "I marked the question answered, but will change that if someone posts a better answer."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Thanks!"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]