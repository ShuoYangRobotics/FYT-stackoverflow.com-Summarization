[{"text": ["How would you make a comma-separated string from a list?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["What would be your preferred way to concatenate strings from a sequence such that between each two consecutive pair a comma is added.", "That is, how do you map, for instance, [ 'a', 'b', 'c' ] to 'a,b,c'?", "(The cases [ s ] and [] should be mapped to s and '', respectively."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "[ 'a', 'b', 'c' ]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "'a,b,c'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[ s ]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "[]", "childNum": 0, "tag": "code", "childList": []}, {"text": "s", "childNum": 0, "tag": "code", "childList": []}, {"text": "''", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I usually end up using something like ''.join(map(lambda x: x+',',l))[:-1], but also feeling somewhat unsatisfied."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "''.join(map(lambda x: x+',',l))[:-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit: I'm both ashamed and happy that the solution is so simple.", "Obviously I have hardly a clue as to what I'm doing.", "(I probably needed \"simple\" concatenation in the past and somehow memorised s.join([e1,e2,...]) as a shorthand for s+e1+e2+....)"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "s.join([e1,e2,...])", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "s+e1+e2+...", "childNum": 0, "tag": "code", "childList": []}]}]