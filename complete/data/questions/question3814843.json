[{"text": ["Python - How do I differentiate between two list elements that point to the same object?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have a Ring structure implemented as follows (based on a cookbook recipe I found):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Ring(list):\n\n    def turn(self):\n        last = self.pop(0)\n        self.append(last)\n\n    def setTop(self, objectReference):\n        if objectReference not in self:\n            raise ValueError, \"object is not in ring\"\n\n        while self[0] is not objectReference:\n            self.turn()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Say I do the following:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n x = Ring([1,2,3,4,4])\nx.setTop(4)\n</code>\n</pre>\n", "senID": 4}, {"text": ["My code will always set the first 4 (currently x[3]) to x[0].", "It seems (via object identity and hash id testing between x[3] and x[4]) that Python is reusing the 4 object."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["How do I tell Python that I really want the second 4 (currently x[4]) to be at the top?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Apologies for the basic question ... one of the downfalls of being a self-taught beginner."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Thanks,"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Mike"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["===EDIT==="], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["For what it's worth, I dropped the setTop method from the class.", "I had added it to the standard recipe thinking \"hey, this would be neat and might be useful.", "\" As the answers (esp.", "\"what's the difference\", which is spot on) and my own experience using the structure show, it's a crappy method that doesn't support any of my use cases."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["In other words, adding something because I could instead of fulfilling a need = fail."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]