[{"text": ["How to loop until EOF in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I need to loop until I hit the end of a file-like object, but I'm not finding an \"obvious way to do it\", which makes me suspect I'm overlooking something, well, obvious.", ":-)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I have a stream (in this case, it's a StringIO object, but I'm curious about the general case as well) which stores an unknown number of records in \"&lt;length>&lt;data>\" format, e.g."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n data = StringIO(\"\\x07\\x00\\x00\\x00foobar\\x00\\x04\\x00\\x00\\x00baz\\x00\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now, the only clear way I can imagine to read this is using (what I think of as) an initialized loop, which seems a little un-Pythonic:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n len_name = data.read(4)\n\nwhile len_name != \"\":\n    len_name = struct.unpack(\"&lt;I\", len_name)[0]\n    names.append(data.read(len_name))\n\n    len_name = data.read(4)\n</code>\n</pre>\n", "senID": 5}, {"text": ["In a C-like language, I'd just stick the read(4) in the while's test clause, but of course that won't work for Python.", "Any thoughts on a better way to accomplish this?"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "read(4)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]