[{"text": ["How do i generate a histogram for a given probability distribution (for functional testing a server)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am trying to automate functional testing of a server using a realistic frequency distribution of requests.", "(sort of load testing, sort of simulation)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I've chosen the Weibull distribution as it \"sort of\" matches the distribution I've observed (ramps up quickly, drops off quickly but not instantly)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Weibull", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Weibull_distribution"}]}, {"text": ["I use this distribution to generate the number of requests that should be sent each day between a given start and end date"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I've hacked together an algorithm in Python that sort of works but it feels kludgy:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n how_many_days = (end_date - start_date).days\nfreqs = defaultdict(int)\nfor x in xrange(how_many_responses):\n    freqs[int(how_many_days * weibullvariate(0.5, 2))] += 1\ntimeline = []\nday = start_date\nfor i,freq in sorted(freqs.iteritems()):\n    timeline.append((day, freq))\n    day += timedelta(days=1)\nreturn timeline\n</code>\n</pre>\n", "senID": 5}, {"text": ["Is there a better way to do this? "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]