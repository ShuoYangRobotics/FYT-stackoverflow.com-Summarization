[{"text": ["How can I find intersection of two large file efficiently using python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have two large files.", "Their contents looks like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The file contains an unsorted list of ids.", "Some ids may appear more than one time in a single file. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Now I want to find the intersection part of two files.", "That is the ids appear in both files."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "intersection", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I just read the two files into 2 sets, s1 and s2.", "And get the intersection by s1.intersection(s2) .", "But it consumes a lot of memory and seems slow. "], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "s1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "s2", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "s1.intersection(s2)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["So is there any better or pythonic way to do this?", "If the file contains so many ids that can not be read into a set with limited memory, what can I do?"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["EDIT: I read the file into 2 sets using a generator:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def id_gen(path):\n    for line in open(path):\n        tmp = line.split()\n        yield int(tmp[0])\n\nc1 = id_gen(path)\ns1 = set(c1)\n</code>\n</pre>\n", "senID": 7}, {"text": ["All of the ids are numeric.", "And the max id may be 5000000000.", "If use bitarray, it will consume more memory."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]