[{"text": ["Learning Python; How can I make this more Pythonic?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am a PHP developer exploring the outside world.", "I have decided to start learning Python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The below script is my first attempt at porting a PHP script to Python.", "Its job is to take tweets from a Redis store.", "The tweets are coming from Twitter's Streaming API and stored as JSON objects.", "Then the information needed is extracted and dumped into a CSV file to be imported into MySQL using the LOAD DATA LOCAL INFILE that is hosted on a different server."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "LOAD DATA LOCAL INFILE", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["So, the question is: Now that I have my first Python script running, how can I make it more Pythonic?", "Are there any suggestions that you guys have?", "Make it better?", "Tricks I should know about?", "Constructive Criticism? "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Update: Having taken everyone's suggestions thus far, here is the updated version:\nUpdate2: Ran the code through pylint.", "Now scores a 9.89/10.", "Any other suggestions?"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "Update2:", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n # -*- coding: utf-8 -*-\n\"\"\"Redis IO Loop for Tweelay Bot\"\"\"\nfrom __future__ import with_statement\n\nimport simplejson\nimport re\nimport datetime\nimport time\nimport csv\nimport hashlib\n\n# Bot Modules\nimport tweelay.red as red\nimport tweelay.upload as upload\nimport tweelay.openanything as openanything\n\n__version__ = \"4\"\n\ndef process_tweets():\n  \"\"\"Processes 0-20 tweets from Redis store\"\"\"\n  data = []\n  last_id = 0\n  for i in range(20):\n    last = red.pop_tweet()\n    if not last:\n      break\n\n    t = TweetHandler(last)\n    t.cleanup()\n    t.extract()\n\n    if t.get_tweet_id() == last_id:\n      break\n\n    tweet = t.proc()\n    if tweet:\n      data = data + [tweet]\n      last_id = t.get_tweet_id()\n\n    time.sleep(0.01)\n\n  if not data:\n    return False\n\n  ch = CSVHandler(data)\n  ch.pack_csv()\n  ch.uploadr()\n\n  source = \"http://bot.tweelay.net/tweets.php\"\n  openanything.openAnything(\n    source,\n    etag=None,\n    lastmodified=None,\n    agent=\"Tweelay/%s (Redis)\" % __version__\n    )\n\nclass TweetHandler:\n  \"\"\"Cleans, Builds and returns needed data from Tweet\"\"\"\n  def __init__(self, json):\n    self.json = json\n    self.tweet = None\n    self.tweet_id = 0\n    self.j = None\n\n  def cleanup(self):\n    \"\"\"Takes JSON encoded tweet and cleans it up for processing\"\"\"\n    self.tweet = unicode(self.json, \"utf-8\")\n    self.tweet = re.sub('^s:[0-9]+:[\"]+', '', self.tweet)\n    self.tweet = re.sub('\\n[\"]+;$', '', self.tweet)\n\n  def extract(self):\n    \"\"\"Takes cleaned up JSON encoded tweet and extracts the datas we need\"\"\"\n    self.j = simplejson.loads(self.tweet)\n\n  def proc(self):\n    \"\"\"Builds the datas from the JSON object\"\"\"\n    try:\n      return self.build()\n    except KeyError:\n      if 'delete' in self.j:\n        return None\n      else:\n        print \";\".join([\"%s=%s\" % (k, v) for k, v in self.j.items()])\n        return None\n\n  def build(self):\n    \"\"\"Builds tuple from JSON tweet\"\"\"\n    return (\n    self.j['user']['id'],\n    self.j['user']['screen_name'].encode('utf-8'),\n    self.j['text'].encode('utf-8'),\n    self.j['id'],\n    self.j['in_reply_to_status_id'],\n    self.j['in_reply_to_user_id'],\n    self.j['created_at'],\n    __version__ )\n\n  def get_tweet_id(self):\n    \"\"\"Return Tweet ID\"\"\"\n    if 'id' in self.j:\n      return self.j['id']\n\n    if 'delete' in self.j:\n      return self.j['delete']['status']['id']\n\n\nclass CSVHandler:\n  \"\"\"Takes list of tweets and saves them to a CSV\n     file to be inserted into MySQL data store\"\"\"\n  def __init__(self, data):\n    self.data = data\n    self.file_name = self.gen_file_name()\n\n  def gen_file_name(self):\n    \"\"\"Generate unique file name\"\"\"\n    now = datetime.datetime.now()\n\n    hashr = hashlib.sha1()\n    hashr.update(str(now))\n    hashr.update(str(len(self.data)))\n\n    hash_str = hashr.hexdigest()\n    return hash_str+'.csv'\n\n  def pack_csv(self):\n    \"\"\"Save tweet data to CSV file\"\"\"\n    with open('tmp/'+self.file_name, mode='ab') as ofile:\n      writer = csv.writer(\n        ofile, delimiter=',',\n        quotechar='\"',\n        quoting=csv.QUOTE_MINIMAL)\n      writer.writerows(self.data)\n\n  def uploadr(self):\n    \"\"\"Upload file to remote host\"\"\"\n    url = \"http://example.com/up.php?filename=\"+self.file_name\n    uploadr = upload.upload_file(url, 'tmp/'+self.file_name)\n    if uploadr[0] == 200:\n      print \"Upload: 200 - (\"+str(len(self.data))+\")\", self.file_name\n      print \"-------\"\n      #os.remove('tmp/'+self.file_name)\n    else:\n      print \"Upload Error:\", uploadr[0]\n\nif __name__ == \"__main__\":\n  while True:\n    process_tweets()\n    time.sleep(1)\n</code>\n</pre>\n", "senID": 5}]