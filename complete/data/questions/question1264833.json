[{"text": ["Python Class Factory to Produce simple Struct-like classes"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["While investigating Ruby I came across this to create a simple Struct-like class:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Person = Struct.new(:forname, :surname)\nperson1 = Person.new('John', 'Doe')\nputs person1  #&lt;struct Person forname=\"John\", surname=\"Doe\"&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["Which raised a few Python questions for me.", "I have written a [VERY] basic clone of this mechanism in Python:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def Struct(*args):\n    class NewStruct:\n        def __init__(self):\n            for arg in args:\n                self.__dict__[arg] = None\n\n    return NewStruct\n\n&gt;&gt;&gt; Person = Struct('forename', 'surname')\n&gt;&gt;&gt; person1 = Person()\n&gt;&gt;&gt; person2 = Person()\n&gt;&gt;&gt; person1.forename, person1.surname = 'John','Doe'\n&gt;&gt;&gt; person2.forename, person2.surname = 'Foo','Bar'\n&gt;&gt;&gt; person1.forename\n'John'\n&gt;&gt;&gt; person2.forename\n'Foo'\n</code>\n</pre>\n", "senID": 4}, {"text": ["I Would like, as a matter of interest, to have Question 2 answered even if there is a better Python mechanism to do this."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]