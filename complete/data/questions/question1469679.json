[{"text": ["Understanding Python profile output"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm trying to use the Python profiler to speed up my code.", "I've been able to identify the specific function where nearly all of the time is spent, but I can't figure out where in that function the time is being spent."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Below I have the profile output, which shows that \"appendBallot\" is the primary culprit and consumes nearly 116 seconds.", "Further below, I have the code for \"appendBallot\".  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I cannot figure out from the profile output, which part of \"appendBallot\" I need to optimize as the next highest time entry is less than a second.", "I'm sure many of you could tell me just from my code, but I'd like to understand how to get that information from the profile output.", "Any help would be greatly appreciated."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Profile output:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n       1    0.000    0.000  116.168  116.168 &lt;string&gt;:1(&lt;module&gt;)\n       1    0.001    0.001  116.168  116.168 {execfile}\n       1    0.003    0.003  116.167  116.167 foo.py:1(&lt;module&gt;)\n       1    0.000    0.000  116.139  116.139 ballots.py:330(loadKnown)\n       1    0.000    0.000  116.109  116.109 plugins.py:148(load)\n       1    0.196    0.196  116.108  116.108 BltBallotLoader.py:37(loadFile)\n  100000  114.937    0.001  115.912    0.001 ballots.py:133(appendBallot)\n  100000    0.480    0.000    0.790    0.000 ballots.py:117(newBallot)\n  316668    0.227    0.000    0.310    0.000 ballots.py:107(getNumCandidates)\n417310/417273    0.111    0.000    0.111    0.000 {len}\n  200510    0.071    0.000    0.071    0.000 {method 'append' of 'list' objects}\n   99996    0.045    0.000    0.045    0.000 {method 'add' of 'set' objects}\n  100000    0.042    0.000    0.042    0.000 {method 'has_key' of 'dict' objects}\n       1    0.000    0.000    0.030    0.030 plugins.py:202(getLoaderPluginClasses)\n       1    0.000    0.000    0.030    0.030 plugins.py:179(getPluginClasses)\n       1    0.000    0.000    0.030    0.030 plugins.py:205(getLoaderPluginClass)\n       3    0.016    0.005    0.029    0.010 {__import__}\n       1    0.022    0.022    0.025    0.025 ballots.py:1(&lt;module&gt;)\n       1    0.010    0.010    0.013    0.013 BltBallotLoader.py:1(&lt;module&gt;)\n       7    0.000    0.000    0.003    0.000 re.py:227(_compile)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Code:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def appendBallot(self, ballot, ballotID=None):\n    \"Append a ballot to this Ballots object.\"\n\n    # String representation of ballot for determining whether ballot is unique\n    ballotString = str(list(ballot))\n\n    # Ballot as the appropriate array to conserve memory\n    ballot = self.newBallot(ballot)\n\n    # Assign a ballot ID if one has not been given\n    if ballotID is None:\n      ballotID = len(self.ballotIDs)\n    assert(ballotID not in self.ballotIDs)\n    self.ballotIDs.append(ballotID)\n\n    # Check to see if we have seen this ballot before\n    if self.uniqueBallotsLookup.has_key(ballotString):\n      i = self.uniqueBallotsLookup[ballotString]\n      self.uniqueBallotIDs[i].add(ballotID)\n    else:\n      i = len(self.uniqueBallots)\n      self.uniqueBallotsLookup[ballotString] = i\n      self.uniqueBallots.append(ballot)\n      self.uniqueBallotIDs.append(set([ballotID]))\n    self.ballotOrder.append(i)\n</code>\n</pre>\n", "senID": 7}]