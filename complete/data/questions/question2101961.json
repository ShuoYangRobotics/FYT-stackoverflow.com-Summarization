[{"text": ["Python state-machine design"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Related to this SO question (C state-machine design), could you SO folks share with me (and the community!", ") your Python state-machine design techniques?"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "SO question (C state-machine design)", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "SO question (C state-machine design)", "tag": "a"}]}, {"text": "SO question (C state-machine design)", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1647631/c-state-machine-design"}]}, {"text": ["Update3: At the moment, I am going for an engine based on the following:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Update3", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class TrackInfoHandler(object):\n    def __init__(self):\n        self._state=\"begin\"\n        self._acc=\"\"\n\n    ## ================================== Event callbacks\n\n    def startElement(self, name, attrs):\n        self._dispatch((\"startElement\", name, attrs))\n\n    def characters(self, ch):\n        self._acc+=ch\n\n    def endElement(self, name):\n        self._dispatch((\"endElement\", self._acc))\n        self._acc=\"\"\n\n    ## ===================================\n    def _missingState(self, _event):\n        raise HandlerException(\"missing state(%s)\" % self._state)\n\n    def _dispatch(self, event):\n        methodName=\"st_\"+self._state\n        getattr(self, methodName, self._missingState)(event)\n\n    ## =================================== State related callbacks\n</code>\n</pre>\n", "senID": 3}, {"text": ["But I am sure there are tons of ways of going at it whilst leveraging Python's dynamic nature (e.g.", "dynamic dispatching)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Update2: I am after design techniques for the \"engine\" that receives the \"events\" and \"dispatches\" against those based on the \"state\" of the machine."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Update2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]