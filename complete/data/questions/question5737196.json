[{"text": ["an expression for an infinite generator?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Is there a straight forward generator expression that can yield infinite elements?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This is a purely theoretical question.", "No need for a \"practical\" answer here :)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For example, it is easy to make a finite generator:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n my_gen = (0 for i in xrange(42))\n</code>\n</pre>\n", "senID": 4}, {"text": ["However, to make an infinite one I need to \"pollute\" my namespace with a bogus function:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def _my_gen():\n    while True:\n        yield 0\nmy_gen = _my_gen()\n</code>\n</pre>\n", "senID": 6}, {"text": ["Doing things in a separate file and import-ing latter doesn't count."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I also know that itertools.repeat does exactly this.", "Im curious if there is a one liner solution without that."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "itertools.repeat", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]