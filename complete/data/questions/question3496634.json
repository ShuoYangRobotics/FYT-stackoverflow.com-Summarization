[{"text": ["python:[[1,2],[3,4],[5,6],[7,8]] transform into [[1],[2,3],[4,5],[6,7],[8]] and vice versa"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["my current solution-pointers would be "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "ether via a iterator class which yields the new assembled inner lists", "tag": "none", "senID": 2}, {"text": "or via a iter function which yields the new assembled inner lists", "tag": "none", "senID": 3}]}, {"text": ["is there another, better way to solve this challenge?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["@Glenn: good objection.", "I wasn't thinking of that because I experienced lists not ordered in the manner I thought. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["@THC4k: thank you for your solution.", "I learned chain.from_iterable"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["@Mike DeSimone: Hmm tested your solution but something went wrong maybe I missed something yet,..."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["@Jamie and Odomontois:\nThank you for pointing out to be more detailed "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["my goal"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "my goal", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I am forging a small algorithm which transforms a list of tasks \u2013 pairs/tuples: (start,stop) \u2013\nto a simplified list of task, where the overlapping tasks merged together."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["One exeption: my algorithm fails when one event is completely overlapped by another (s1 s2 e2 e1 )"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Detailed:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "I've a list 'taskList' with pairs (lesson\nlearned - tuples :). ", "tag": "none", "senID": 14}, {"text": "each tuple\nconsists of 2 datetimeobjects: start\nand end of a task. ", "tag": "none", "senID": 15}, {"text": "important: the\nchronology of 'taskList' where the\norder is determined by start because\ntasks may overlapp", "tag": "none", "senID": 16}, {"text": "'taskList' consists several days, therefore datetime objects", "tag": "none", "senID": 17}]}, {"text": ["Example, just string representation of time for readability "], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"code": "<pre>\n<code>\n taskList = [(9:00,10:00),(9:30,11:00),(11:00,12:30),(13:30,14:00),(14:00,18:00)]\n</code>\n</pre>\n", "senID": 19}, {"text": ["final endresult : "], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"code": "<pre>\n<code>\n result = [(9:00,12:30), (13:30,18:00)]\n</code>\n</pre>\n", "senID": 21}, {"text": ["now my thought was, when I rearrange the 'taskList' in the manner I questioned"], "childNum": 0, "tag": "p", "senID": 22, "childList": []}, {"code": "<pre>\n<code>\n taskListT1 = [(9:00,),(10:00,9:30),(11:00,11:00),(12:30,13:30),(14:00,14:00),(18:00,)]\n</code>\n</pre>\n", "senID": 23}, {"text": ["now I can eliminate those tuples (a,b) where a >= b:"], "childNum": 0, "tag": "p", "senID": 24, "childList": []}, {"code": "<pre>\n<code>\n taskListT2 = [(9:00,),(12:30,13:30),(18:00,)]\n</code>\n</pre>\n", "senID": 25}, {"text": ["and transform back:"], "childNum": 0, "tag": "p", "senID": 26, "childList": []}, {"code": "<pre>\n<code>\n result = [(9:00,12:30), (13:30,18:00)]\n</code>\n</pre>\n", "senID": 27}]