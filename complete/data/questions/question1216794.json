[{"text": ["Python subprocess.Popen erroring with OSError: [Errno 12] Cannot allocate memory after period of time"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Note: This question has been re-asked with a summary of all debugging attempts here."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Note", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/1367373/python-subprocess-popen-oserror-errno-12-cannot-allocate-memory", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"tag": "hr", "senID": 2}, {"text": ["I have a Python script that is running as a background process executing every 60 seconds.", "Part of that is a call to subprocess.Popen to get the output of ps. "], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "subprocess.Popen", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html"}, {"href": "http://linuxcommand.org/man%5Fpages/ps1.html", "text": "ps", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n ps = subprocess.Popen(['ps', 'aux'], stdout=subprocess.PIPE).communicate()[0]\n</code>\n</pre>\n", "senID": 4}, {"text": ["After running for a few days, the call is erroring with:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\nFile \"/home/admin/sd-agent/checks.py\", line 436, in getProcesses\nFile \"/usr/lib/python2.4/subprocess.py\", line 533, in __init__\nFile \"/usr/lib/python2.4/subprocess.py\", line 835, in _get_handles\nOSError: [Errno 12] Cannot allocate memory\n</pre>\n", "senID": 6}, {"text": ["However the output of free on the server is:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "free", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.linuxcommand.org/man%5Fpages/free1.html"}]}, {"code": "<pre>\n$ free -m\n                  total       used       free     shared     buffers    cached\nMem:                894        345        549          0          0          0\n-/+ buffers/cache:  345        549\nSwap:                 0          0          0\n</pre>\n", "senID": 8}, {"text": ["I have searched around for the problem and found this article which says:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "this article", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.zenoss.com/community/wiki/common-error-messages-and-solutions/oserror-errno-12-cannot-allocate-memory-in-popen2.py/"}]}, {"text": ["Solution is to add more swap space to your server.", "When the kernel is forking to start the modeler or discovery process, it first ensures there's enough space available on the swap store the new process if needed."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["I note that there is no available swap from the free output above.", "Is this likely to be the problem and/or what other solutions might there be?"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Update 13th Aug 09 The code above is called every 60 seconds as part of a series of monitoring functions.", "The process is daemonized and the check is scheduled using sched.", "The specific code for the above function is:"], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "Update 13th Aug 09", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "sched", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sched.html"}]}, {"code": "<pre>\n<code>\n def getProcesses(self):\n    self.checksLogger.debug('getProcesses: start')\n\n    # Memory logging (case 27152)\n    if self.agentConfig['debugMode'] and sys.platform == 'linux2':\n    \tmem = subprocess.Popen(['free', '-m'], stdout=subprocess.PIPE).communicate()[0]\n    \tself.checksLogger.debug('getProcesses: memory before Popen - ' + str(mem))\n\n    # Get output from ps\n    try:\n    \tself.checksLogger.debug('getProcesses: attempting Popen')\n\n    \tps = subprocess.Popen(['ps', 'aux'], stdout=subprocess.PIPE).communicate()[0]\n\n    except Exception, e:\n    \timport traceback\n    \tself.checksLogger.error('getProcesses: exception = ' + traceback.format_exc())\n    \treturn False\n\n    self.checksLogger.debug('getProcesses: Popen success, parsing')\n\n    # Memory logging (case 27152)\n    if self.agentConfig['debugMode'] and sys.platform == 'linux2':\n    \tmem = subprocess.Popen(['free', '-m'], stdout=subprocess.PIPE).communicate()[0]\n    \tself.checksLogger.debug('getProcesses: memory after Popen - ' + str(mem))\n\n    # Split out each process\n    processLines = ps.split('\\n')\n\n    del processLines[0] # Removes the headers\n    processLines.pop() # Removes a trailing empty line\n\n    processes = []\n\n    self.checksLogger.debug('getProcesses: Popen success, parsing, looping')\n\n    for line in processLines:\n    \tline = line.split(None, 10)\n    \tprocesses.append(line)\n\n    self.checksLogger.debug('getProcesses: completed, returning')\n\n    return processes\n</code>\n</pre>\n", "senID": 13}, {"text": ["This is part of a bigger class called checks which is initialised once when the daemon is started."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["The entire checks class can be found at http://github.com/dmytton/sd-agent/blob/82f5ff9203e54d2adeee8cfed704d09e3f00e8eb/checks.py with the getProcesses function defined from line 442.", "This is called by doChecks() starting at line 520."], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "http://github.com/dmytton/sd-agent/blob/82f5ff9203e54d2adeee8cfed704d09e3f00e8eb/checks.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/dmytton/sd-agent/blob/82f5ff9203e54d2adeee8cfed704d09e3f00e8eb/checks.py"}]}]