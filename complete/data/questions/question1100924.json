[{"text": ["Best way to denormalize data in Django?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm developing a simple web app, and it makes a lot of sense to store some denormalized data. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Imagine a blogging platform that keeps track of Comments, and the BlogEntry model has a \"CommentCount\" field that I'd like to keep up to date."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["One way of doing this would be to use Django signals. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Another way of doing this would be to put hooks directly in my code that creates and destrys Comment objects to synchronously call some methods on BlogEntry to increment/decrement the comment count. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I suppose there are other pythonic ways of accomplishing this with decorators or some other voodoo.  "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["What is the standard Design Pattern for denormalizing in Django?", "In practice, do you also have to write consistency checkers and data fixers in case of errors?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]