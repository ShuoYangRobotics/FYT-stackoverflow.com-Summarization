[{"text": ["from X import a versus import X; X.a"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["This is one of those semi-religious Python questions that I suspect has well reasoned responses lurking in the community.", "I've seen some Python programmers use the following style fairly consistently (we'll call it style 1):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import some_module\n# Use some_module.some_identifier in various places.\n</code>\n</pre>\n", "senID": 2}, {"text": ["For support of this style you can cite the \"explicit is better than implicit\" maxim.", "I've seen other programmers use this style (style 2):"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "\"explicit is better than implicit\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}, {"code": "<pre>\n<code>\n from some_module import some_identifier\n# Use some_identifier in various places.\n</code>\n</pre>\n", "senID": 4}, {"text": ["The primary benefit that I see in style 2 is maintainability -- especially with duck typing ideals I may want to swap some_module for some_other_module.", "I also feel style 2 wins points with the \"readability counts\" maxim.", "Although I tend to disagree, one can always argue that search-and-replace is just as good an option when using the first style."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "\"readability counts\"", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}, {"text": ["Addendum: It was noted that you could use as to solve the switch from some_module to some_other_module in style 1.", "I forgot to mention that it is also common to decide to implement some_identifier in your current module, which makes creation of an equivalent some_module container slightly awkward."], "childNum": 7, "tag": "p", "senID": 6, "childList": [{"text": "Addendum:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "as", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "some_module", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "some_other_module", "childNum": 0, "tag": "code", "childList": []}, {"text": "some_identifier", "childNum": 0, "tag": "code", "childList": []}, {"text": "current", "childNum": 0, "tag": "em", "childList": []}, {"text": "some_module", "childNum": 0, "tag": "code", "childList": []}]}]