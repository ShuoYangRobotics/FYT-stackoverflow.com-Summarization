[{"text": ["How to implement property() with dynamic name (in python)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Hello together and a happy new year 2009!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I am programming a simulations for single neurons.", "Therefore I have to handle a lot of Parameters.", "Now the Idea is that I have two classes, one for a SingleParameter and a Collection of parameters.", "I use property() to access the parameter value easy and to make the code more readable.", "This works perfect for a sinlge parameter but I don't know how to implement it for the collection as I want to name the property in Collection after the SingleParameter.", "Here an example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class SingleParameter(object):\n  def __init__(self, name, default_value=0, unit='not specified'):\n    self.name = name\n    self.default_value = default_value\n    self.unit = unit\n    self.set(default_value)\n  def get(self):\n    return self._v\n  def set(self, value):\n    self._v = value\n  v = property(fget=get, fset=set, doc='value of parameter')\n\npar1 = SingleParameter(name='par1', default_value=10, unit='mV')\npar2 = SingleParameter(name='par2', default_value=20, unit='mA')\n\n# par1 and par2 I can access perfectly via 'p1.v = ...'\n# or get its value with 'p1.v'\n\nclass Collection(object):\n  def __init__(self):\n    self.dict = {}\n  def __getitem__(self, name):\n    return self.dict[name] # get the whole object\n    # to get the value instead:\n    # return self.dict[name].v\n  def add(self, parameter):\n    self.dict[parameter.name] = parameter\n    # now comes the part that I don't know how to implement with property():\n    # It shoule be something like\n    # self.__dict__[parameter.name] = property(...) ?\n\ncol = Collection()\ncol.add(par1)\ncol.add(par2)\ncol['par1'] # gives the whole object\n\n# Now here is what I would like to get:\n# col.par1 -&gt; should result like col['par1'].v\n# col.par1 = 5 -&gt; should result like col['par1'].v = 5\n</code>\n</pre>\n", "senID": 3}, {"text": ["Any ideas?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Cheers, Philipp (der Rautenberg :-)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "hr", "senID": 6}, {"text": ["Other questions that I put to understand property():"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Why do managed attributes just work for class attributes and not for instance attributes in python?"], "childNum": 0, "tag": "a", "senID": 8, "childList": []}, {"text": ["How can I assign a new class attribute via __dict__ in python?"], "childNum": 0, "tag": "a", "senID": 9, "childList": []}]}]