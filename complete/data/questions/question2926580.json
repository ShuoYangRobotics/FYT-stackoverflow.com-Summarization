[{"text": ["Why does Python's 'for ... in' work differently on a list of values vs. a list of dictionaries?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm wondering about some details of how for ... in works in Python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My understanding is for var in iterable on each iteration creates a variable, var, bound to the current value of iterable.", "So, if you do for c in cows; c = cows[whatever], but changing c within the loop does not affect the original value.", "However, it seems to work differently if you're assigning a value to a dictionary key."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "for var in iterable", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for c in cows; c = cows[whatever]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n cows=[0,1,2,3,4,5]\nfor c in cows:\n  c+=2\n\n#cows is now the same - [0,1,2,3,4,5]\n\ncows=[{'cow':0},{'cow':1},{'cow':2},{'cow':3},{'cow':4},{'cow':5}]\nfor c in cows:\n  c['cow']+=2\n\n# cows is now [{'cow': 2}, {'cow': 3}, {'cow': 4}, {'cow': 5}, {'cow': 6}, {'cow': 7}\n#so, it's changed the original, unlike the previous example\n</code>\n</pre>\n", "senID": 3}, {"text": ["I see one can use enumerate to make the first example work, too, but that's a different story, I guess."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n cows=[0,1,2,3,4,5]\nfor i,c in enumerate(cows):\n  cows[i]+=1\n\n# cows is now [1, 2, 3, 4, 5, 6]\n</code>\n</pre>\n", "senID": 5}, {"text": ["Why does it affect the original list values in the second example but not the first?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["[edit]"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Thanks for the answers.", "I was looking at this from a PHP point of view, where you can use the &amp; symbol in foreach to specify whether you are operating on a reference to or a copy of the iterable.", "I see now that the real difference is a basic detail of how python works regarding immutable objects."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]