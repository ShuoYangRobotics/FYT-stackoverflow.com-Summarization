[{"text": ["underlying data structure for float in python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Got a question regarding to the underlying data structure of float (and precision) in Python:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; b = 1.4 + 2.3\n&gt;&gt;&gt; b\n3.6999999999999997\n\n&gt;&gt;&gt; c = 3.7\n&gt;&gt;&gt; c\n3.7000000000000002\n\n&gt;&gt;&gt; print b, c\n3.7  3.7\n\n&gt;&gt;&gt; b == c\nFalse\n</code>\n</pre>\n", "senID": 2}, {"text": ["it seems the values of b and c are machine dependent, they are the numbers that closest to the target values but not exactly the same numbers.", "I was supervised that we get the 'right' numbers with 'Print', and someone told me that it was because print 'lies' while Python chose to tell us the truth i.e.", "showing exactly what they have stored. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["And my questions are: \n1.", "How to lie?", "e.g.", "in a function we take two values and return if they are the same, how I could have a best guess if the number of decimal(precision) is unknown?", "like b and c  mentioned above?", "is there a well defined algorithm to do that?", "I was told that every language (C/C++) will have this kind of issue if we have floating point calculation involved, but how do they 'solve' this?", "2. why we cannot just store the actual number instead of storing the closest number?", "is it a limitation or trading for efficiency? "], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 3, "childList": []}]}, {"text": ["many thanks\nJohn"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]