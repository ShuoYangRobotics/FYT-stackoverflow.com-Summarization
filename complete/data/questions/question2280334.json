[{"text": ["Shortest way of creating an object with arbitrary attributes in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Hey, I just started wondering about this as I came upon a code that expected an object with a certain set of attributes (but with no specification of what type this object should be)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["One solution would be to create a new class that has the attributes the code expects, but as I call other code that also needs objects with (other) attributes, I'd have to create more and more classes."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["A shorter solution is to create a generic class, and then set the attributes on instances of it (for those who thought of using an instance of object instead of creating a new class, that won't work since object instances don't allow new attributes)."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "object", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The last, shortest solution I came up with was to create a class with a constructor that takes keyword arguments, just like the dict constructor, and then sets them as attributes:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class data:\n    def __init__(self, **kw):\n        for name in kw:\n            setattr(self, name, kw[name])\n\noptions = data(do_good_stuff=True, do_bad_stuff=False)\n</code>\n</pre>\n", "senID": 5}, {"text": ["But I can't help feeling like I've missed something obvious...", "Isn't there a built-in way to do this (preferably supported in Python 2.5)?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]