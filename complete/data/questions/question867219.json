[{"text": ["Python Class Members Initialization"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I have just recently battled a bug in Python.", "It was one of those silly newbie bugs, but it got me thinking about the mechanisms of Python (I'm a long time C++ programmer, new to Python).", "I will lay out the buggy code and explain what I did to fix it, and then I have a couple of questions..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The scenario: I have a class called A, that has a dictionary data member, following is its code (this is simplification of course):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class A:\n    dict1={}\n\n    def add_stuff_to_1(self, k, v):\n    \tself.dict1[k]=v\n\n    def print_stuff(self):\n    \tprint(self.dict1)\n</code>\n</pre>\n", "senID": 3}, {"text": ["The class using this code is class B:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class B:\n\n    def do_something_with_a1(self):\n    \ta_instance = A()\n    \ta_instance.print_stuff()  \t\t\n    \ta_instance.add_stuff_to_1('a', 1)\n    \ta_instance.add_stuff_to_1('b', 2)    \n    \ta_instance.print_stuff()\n\n    def do_something_with_a2(self):\n    \ta_instance = A()    \n    \ta_instance.print_stuff()    \t\t\n    \ta_instance.add_stuff_to_1('c', 1)\n    \ta_instance.add_stuff_to_1('d', 2)    \n    \ta_instance.print_stuff()\n\n    def do_something_with_a3(self):\n    \ta_instance = A()    \n    \ta_instance.print_stuff()    \t\t\n    \ta_instance.add_stuff_to_1('e', 1)\n    \ta_instance.add_stuff_to_1('f', 2)    \n    \ta_instance.print_stuff()\n\n    def __init__(self):\n    \tself.do_something_with_a1()\n    \tprint(\"---\")\n    \tself.do_something_with_a2()\n    \tprint(\"---\")\n    \tself.do_something_with_a3()\n</code>\n</pre>\n", "senID": 5}, {"text": ["Notice that every call to do_something_with_aX() initializes a new \"clean\" instance of class A, and prints the dictionary before and after the addition."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "do_something_with_aX()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The bug (in case you haven't figured it out yet):"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; b_instance = B()\n{}\n{'a': 1, 'b': 2}\n---\n{'a': 1, 'b': 2}\n{'a': 1, 'c': 1, 'b': 2, 'd': 2}\n---\n{'a': 1, 'c': 1, 'b': 2, 'd': 2}\n{'a': 1, 'c': 1, 'b': 2, 'e': 1, 'd': 2, 'f': 2}\n</code>\n</pre>\n", "senID": 8}, {"text": ["In the second initialization of class A, the dictionaries are not empty, but start with the contents of the last initialization, and so forth.", "I expected them to start \"fresh\"."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["What solves this \"bug\" is obviously adding:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n self.dict1 = {}\n</code>\n</pre>\n", "senID": 11}, {"text": ["In the __init__ constructor of class A.", "However, that made me wonder:"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "hr", "senID": 13}, {"text": ["EDIT: Following the answers I now understand that by declaring a data member and not referring to it in the __init__ or somewhere else as self.dict1, I'm practically defining what's called in C++/Java a static data member.", "By calling it self.dict1 I'm making it \"instance-bound\"."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]