[{"text": ["Using for...else in Python generators"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm a big fan of Python's for...else syntax - it's surprising how often it's applicable, and how effectively it can simplify code."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "for...else syntax", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/compound_stmts.html#the-for-statement"}]}, {"text": ["However, I've not figured out a nice way to use it in a generator, for example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def iterate(i):\n    for value in i:\n        yield value\n    else:\n        print 'i is empty'\n</code>\n</pre>\n", "senID": 3}, {"text": ["In the above example, I'd like the print statement to be executed only if i is empty.", "However, as else only respects break and return, it is always executed, regardless of the length of i."], "childNum": 6, "tag": "p", "senID": 4, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "else", "childNum": 0, "tag": "code", "childList": []}, {"text": "break", "childNum": 0, "tag": "code", "childList": []}, {"text": "return", "childNum": 0, "tag": "code", "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If it's impossible to use for...else in this way, what's the best approach to this so that the print statement is only executed when nothing is yielded?"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "for...else", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "childList": []}]}]