[{"text": ["What is a hashtable/dictionary implementation for Python that doesn't store the keys?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm storing millions, possibly billions of 4 byte values in a hashtable and I don't want to store any of the keys.", "I expect that only the hashes of the keys and the values will have to be stored.", "This has to be fast and all kept in RAM.", "The entries would still be looked up with the key, unlike set()'s."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["What is an implementation of this for Python?", "Is there a name for this?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Yes, collisions are allowed and can be ignored."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["(I can make an exception for collisions, the key can be stored for those.", "Alternatively, collisions can just overwrite the previously stored value."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]