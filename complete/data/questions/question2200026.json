[{"text": ["Python: defining new functions on the fly using \"with\""], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I want to convert the following code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ...\nurls = [many urls]\nlinks = []\nfuncs = []\nfor url in urls:\n   func = getFunc(url, links)\n   funcs.append(func)\n...\n\ndef getFunc(url, links):\n   def func():\n      page = open(url)\n      link = searchForLink(page)\n      links.append(link)\n   return func\n</code>\n</pre>\n", "senID": 2}, {"text": ["into the much more convenient code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n urls = [many urls]\nlinks = []\nfuncs = []\nfor url in urls:\n   &lt;STATEMENT&gt;(funcs):\n        page = open(url)\n        link = searchForLink(page)\n        links.append(link)\n</code>\n</pre>\n", "senID": 4}, {"text": ["I was hoping to do this with the with statement.", "As I commented bellow, I was hoping to achieve:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def __enter__():\n    def func():\n\n..code in the for loop..\n\ndef __exit__():\n  funcs.append(func)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Of course this doesn't work."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["List comprehensions is not good for cases were the action searchForLink is not just one function but many functions.", "It would turn into an extremely unreadable code.", "For example even this would be problematic with list comprehensions:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "searchForLink", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for url in urls:\n  page = open(url)\n  link1 = searchForLink(page)\n  link2 = searchForLink(page)\n  actionOnLink(link1)\n  actionOnLink(link2)\n  .... many more of these actions...\n  links.append(link1)\n</code>\n</pre>\n", "senID": 9}]