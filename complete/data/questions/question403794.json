[{"text": ["Optimization in Python - do's, don'ts and rules of thumb"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Well I was reading this post and then I came across a code which was:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "post", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://handyfloss.wordpress.com/2008/02/17/summary-of-my-python-optimization-adventures/"}]}, {"code": "<pre>\n<code>\n jokes=range(1000000)\ndomain=[(0,(len(jokes)*2)-i-1) for i in range(0,len(jokes)*2)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["I thought wouldn't it be better to calculate the value of len(jokes) once outside the list comprehension?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Well I tried it and timed three codes"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n jv@Pioneer:~$ python -m timeit -s 'jokes=range(1000000);domain=[(0,(len(jokes)*2)-i-1) for i in range(0,len(jokes)*2)]'\n10000000 loops, best of 3: 0.0352 usec per loop\njv@Pioneer:~$ python -m timeit -s 'jokes=range(1000000);l=len(jokes);domain=[(0,(l*2)-i-1) for i in range(0,l*2)]'\n10000000 loops, best of 3: 0.0343 usec per loop\njv@Pioneer:~$ python -m timeit -s 'jokes=range(1000000);l=len(jokes)*2;domain=[(0,l-i-1) for i in range(0,l)]'\n10000000 loops, best of 3: 0.0333 usec per loop\n</code>\n</pre>\n", "senID": 5}, {"text": ["Observing the marginal difference 2.55% between the first and the second made me think - is the first list comprehension "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n domain=[(0,(len(jokes)*2)-i-1) for i in range(0,len(jokes)*2)]\n</code>\n</pre>\n", "senID": 7}, {"text": ["optimized internally by python?", "or is 2.55% a big enough optimization (given that the len(jokes)=1000000)?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["If this is - What are the other implicit/internal optimizations in Python ?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["What are the developer's rules of thumb for optimization in Python?"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "developer's rules of thumb for optimization in Python", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit1: Since most of the answers are \"don't optimize, do it later if its slow\" and I got some tips and links from Triptych and Ali A for the do's.", "I will change the question a bit and request for don'ts. "], "childNum": 5, "tag": "p", "senID": 11, "childList": [{"text": "Edit1", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Triptych", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Ali A", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "do's", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "don'ts", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Can we have some experiences from people who faced the 'slowness', what was the problem and how it was corrected? "], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "slowness", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Edit2: For those who haven't here is an interesting read"], "childNum": 2, "tag": "p", "senID": 13, "childList": [{"text": "Edit2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://www.python.org/doc/essays/list2str/", "text": "interesting read", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Edit3: Incorrect usage of timeit in question please see dF's answer for correct usage and hence timings for the three codes."], "childNum": 3, "tag": "p", "senID": 14, "childList": [{"text": "Edit3:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "timeit", "childNum": 0, "tag": "code", "childList": []}, {"text": "dF's", "childNum": 0, "tag": "strong", "childList": []}]}]