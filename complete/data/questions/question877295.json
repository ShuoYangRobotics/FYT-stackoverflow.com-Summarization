[{"text": ["python dict.add_by_value(dict_2)?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The problem:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = dict(a=1,b=2    )\n&gt;&gt;&gt; b = dict(    b=3,c=2)\n\n&gt;&gt;&gt; c = ???\n\nc = {'a': 1, 'b': 5, 'c': 2}\n</code>\n</pre>\n", "senID": 2}, {"text": ["So, the idea is two add to dictionaries by int/float values in the shortest form.", "Here's one solution that I've devised, but I don't like it, cause it's long:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n c = dict([(i,a.get(i,0) + b.get(i,0)) for i in set(a.keys()+b.keys())])\n</code>\n</pre>\n", "senID": 4}, {"text": ["I think there must be a shorter/concise solution (maybe something to do with reduce and operator module?", "itertools?)...", "Any ideas?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "hr", "senID": 6}, {"text": ["Update: I'm really hoping to find something more elegant like \"reduce(operator.add, key = itemgetter(0), a+b)\".", "(Obviously that isn't real code, but you should get the idea).", "But it seems that may be a dream."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "hr", "senID": 8}, {"text": ["Update: Still loking for more concise solutions.", "Maybe groupby can help?", "The solution I've come up with using \"reduce\"/\"groupby\" isn't actually concise:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n from itertools import groupby\nfrom operator import itemgetter,add\n\nc = dict( [(i,reduce(add,map(itemgetter(1), v))) \\\n              for i,v in groupby(sorted(a.items()+b.items()), itemgetter(0))] )\n</code>\n</pre>\n", "senID": 10}]