[{"text": ["Fixing the singularity of a function"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Assume you have a function like "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n F = lambda x: sin(x)/x\n</code>\n</pre>\n", "senID": 2}, {"text": ["Evaluating F(0.0) would result in a divide by zero warning, and would not give the expected result of 1.0.", "Is it possible to write another function fix_singularity that would give the desired result when applied to the above function, so that"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "F(0.0)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "1.0", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "fix_singularity", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n fix_singularity(F)(0.0) == 1.0\n</code>\n</pre>\n", "senID": 4}, {"text": ["Or formally fix_singularity should pass the following tests:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "fix_singularity", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import numpy as np\n\ndef test_fix_singularity():\n\n    F = lambda x: np.sin(x)/x\n\n    x = np.array((0.0, pi))\n\n    np.testing.assert_array_almost_equal( F(x), [nan, 0] )\n\n    np.testing.assert_array_almost_equal( fix_singularity(F)(x), [1, 0] )\n</code>\n</pre>\n", "senID": 6}, {"text": ["One possible implementation is "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def fix_singularity(F):\n    \"\"\" Fix the singularity of function F(x) \"\"\"\n\n    def L(x):\n        f = F(x)\n        i = np.isnan(f)\n        f[i] = F(x[i] + 1e-16)\n        return f\n\n    return L\n</code>\n</pre>\n", "senID": 8}, {"text": ["Are there better ways of doing this?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["EDIT:\nAlso how can I suppress the warning:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n Warning: invalid value encountered in divide\n</code>\n</pre>\n", "senID": 11}]