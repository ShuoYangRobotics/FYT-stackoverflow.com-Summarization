[{"text": ["Highlighting unmatched brackets in vim"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm getting burned repeatedly by unmatched parentheses while writing python code in vim.", "I like how they're handled for C code - vim highlights in red all of the curly braces following the unmatched paren.", "I looked at the c.vim syntax file briefly to try to understand it, but the section that handles bracket errors is very complex.", "Can anyone explain how that code works and suggest how I might write something similar for python code?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "c.vim", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Example C code with unmatched parens:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n int main(void\n{  /* brace highlighted in red */\n}  /* brace highlighted in red */\n</code>\n</pre>\n", "senID": 3}, {"text": ["Since python code doesn't have curly braces to highlight, we'll have to choose something else (perhaps other parentheses)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["BTW, I tried out this vim plugin but I wasn't happy with the behavior."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "this vim plugin", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.vim.org/scripts/script.php?script_id=350"}]}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I'm using python to generate C++ code (a language that likes parentheses and semicolons).", "I have a nasty habit of leaving the trailing paren off a file.write() method call.", "It would be nice if I could get vim to make that mistake more visually obvious."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "file.write()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Update:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Ok, here's what I've tried so far."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n :syn region pParen transparent start=\"(\" end=\")\" contains=ALL\n:syn match pError display \")\"\n:hi def link pError Error\n</code>\n</pre>\n", "senID": 10}, {"text": ["Unfortunately, all this does is highlight as an error the right paren of all balanced parentheses, the opposite of what I want to do.", "I really don't understand what I'm doing here (just copied off of the existing C syntax file).", "If anyone could explain what I did (wrong), I would appreciate it."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "balanced", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]