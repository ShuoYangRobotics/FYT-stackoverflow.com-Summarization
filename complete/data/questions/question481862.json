[{"text": ["Extracting info from large structured text files"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I need to read some large files (from 50k to 100k lines), structured in groups separated by empty lines.", "Each group start at the same pattern \"No.999999999  dd/mm/yyyy  ZZZ\".", "Here\u00b4s some sample data."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I wrote some code that\u00b4s parsing it accordingly.", "There\u00b4s anything that I can improve, to improve readability or performance?", "Here\u00b4s what I come so far:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import re, pprint\n\nclass Despacho(object):\n    \"\"\"\n    Class to parse each line, applying the regexp and storing the results\n    for future use\n    \"\"\"\n    regexp = {\n        re.compile(r'No.([\\d]{9})  ([\\d]{2}/[\\d]{2}/[\\d]{4})  (.*)'): lambda self: self._processo,\n        re.compile(r'Tit.(.*)'): lambda self: self._titular,\n        re.compile(r'Procurador: (.*)'): lambda self: self._procurador,\n        re.compile(r'C.N.P.J./C.I.C./N INPI :(.*)'): lambda self: self._documento,\n        re.compile(r'Apres.: (.*) ; Nat.: (.*)'): lambda self: self._apresentacao,\n        re.compile(r'Marca: (.*)'): lambda self: self._marca,\n        re.compile(r'Clas.Prod/Serv: (.*)'): lambda self: self._classe,\n        re.compile(r'\\*(.*)'): lambda self: self._complemento,\n    }\n\n    def __init__(self):\n        \"\"\"\n        'complemento' is the only field that can be multiple in a single registry\n        \"\"\"\n        self.complemento = []\n\n    def _processo(self, matches):\n        self.processo, self.data, self.despacho = matches.groups()\n\n    def _titular(self, matches):\n        self.titular = matches.group(1)\n\n    def _procurador(self, matches):\n        self.procurador = matches.group(1)\n\n    def _documento(self, matches):\n        self.documento = matches.group(1)\n\n    def _apresentacao(self, matches):\n        self.apresentacao, self.natureza = matches.groups()\n\n    def _marca(self, matches):\n        self.marca = matches.group(1)\n\n    def _classe(self, matches):\n        self.classe = matches.group(1)\n\n    def _complemento(self, matches):\n        self.complemento.append(matches.group(1))\n\n    def read(self, line):\n        for pattern in Despacho.regexp:\n            m = pattern.match(line)\n            if m:\n                Despacho.regexp[pattern](self)(m)\n\n\ndef process(rpi):\n    \"\"\"\n    read data and process each group\n    \"\"\"\n    rpi = (line for line in rpi)\n    group = False\n\n    for line in rpi:\n        if line.startswith('No.'):\n            group = True\n            d = Despacho()        \n\n        if not line.strip() and group: # empty line - end of block\n            yield d\n            group = False\n\n        d.read(line)\n\n\narquivo = open('rm1972.txt') # file to process\nfor desp in process(arquivo):\n    pprint.pprint(desp.__dict__)\n    print('--------------')\n</code>\n</pre>\n", "senID": 3}, {"text": ["Thank you."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["By the way, sorry for my poor english.", ":)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]