[{"text": ["How to make an immutable object in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Although I have never needed this, it just struck me that making an immutable object in Python could be slightly tricky.", "You can't just override __setattr__, because then you can't even set attributes in the __init__.", "Subclassing a tuple is a trick that works:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "__setattr__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class Immutable(tuple):\n\n    def __new__(cls, a, b):\n        return tuple.__new__(cls, (a, b))\n\n    @property\n    def a(self):\n        return self[0]\n\n    @property\n    def b(self):\n        return self[1]\n\n    def __str__(self):\n        return \"&lt;Immutable {0}, {1}&gt;\".format(self.a, self.b)\n\n    def __setattr__(self, *ignored):\n        return NotImplemented\n\n    def __delattr__(self, *ignored):\n        return NotImplemented\n</code>\n</pre>\n", "senID": 2}, {"text": ["But then you have access to the a and b variables through self[0] and self[1], which is annoying."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Is this possible in Pure Python?", "If not, how would I do it with a C extension?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["(Answers that work only in Python 3 are acceptable)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Update: "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["So subclassing tuple is the way to do it in Pure Python, which works well except for the additional possibility of accessing the data by [0], [1] etc.", "So to complete this question all that is missing is howto do it \"properly\" in C, which I suspect would be quite simple, by just not implementing any geititem or setattribute, etc.", "But instead of doing it myself, I offer a bounty for that, because I'm lazy.", ":)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]