[{"text": ["java and python equivalent of php's foreach($array as $key => $value)"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["EDIT: Amazingly, newacct's answer has accumulated 12 points in the four hours since I posted my question.", "This, despite its being incorrect.", "As alternatives to php's associative array, newacct offers Java's HashMap and Python's dictionary, neither of which preserves key order."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["cmcg provided a correct answer for the Java version.", "That is, to use a LinkedHashMap to preserve key order.", "Milhous suggested a TreeMap, but Piligrim pointed out that a TreeMap  sorts elements by key, while LinkedHashMap preserves original order, which was the intent."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Alexander Ljungberg first indicated that an ordered dictionary was not currently available for Python.", "Daniel Pryden then provided a simple and straightforward alternative structure, a list of two-tuples."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In the hope that my beginner's Python syntax is correct,"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n # a list of two-tuples\nstateList = [('ALABAMA', 'AL'), ('ALASKA', 'AK'), ('WISCONSIN', 'WI'), ('WYOMING', 'WY')]\n\nfor name, abbreviation in stateList:\n    print name, abbreviation\n</code>\n</pre>\n", "senID": 5}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n ALABAMA AL\nALASKA AK\nWISCONSIN WI\nWYOMING WY\n</code>\n</pre>\n", "senID": 7}, {"text": ["Which is exactly what was required."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Thanks to everyone who contributed.", "It's been educational."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"tag": "hr", "senID": 10}, {"text": ["In php one can handle a list of state names and their abbreviations with an associative array like this:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n &lt;?php\n    $stateArray = array (\n        \"ALABAMA\"=&gt;\"AL\",\n        \"ALASKA\"=&gt;\"AK\",\n        // etc...\n        \"WYOMING\"=&gt;\"WY\");\n\n    foreach ($stateArray as $stateName =&gt; $stateAbbreviation)\n    {\n        print \"The abbreviation for $stateName is $stateAbbreviation.\\n\\n\";\n    }\n?&gt;\n</code>\n</pre>\n", "senID": 12}, {"text": ["Output ( * with key order preserved * ):"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["The abbreviation for ALABAMA is AL."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["The abbreviation for ALASKA is AK."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["The abbreviation for WYOMING is WY."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["EDIT: Note that the order of array elements is preserved in the output of the php version.", "The Java implementation, using a HashMap, does not guarantee the order of elements.", "Nor, in fact, does the dictionary in Python."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["How is this done in java and python?", "I only find approaches that supply the value, given the key, like python's:"], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"code": "<pre>\n<code>\n stateDict = {\n    \"ALASKA\" : \"AK\",\n    \"WYOMING\" : \"WY\"\n    }\n\nfor key in stateDict:\n    value = stateDict[key]\n</code>\n</pre>\n", "senID": 19}, {"text": ["Many thanks."], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"text": ["Lasoldo Solsifa"], "childNum": 0, "tag": "p", "senID": 21, "childList": []}]