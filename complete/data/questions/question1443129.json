[{"text": ["Completely wrap an object in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am wanting to completely wrap an object so that all attribute and method requests get forwarded to the object it's wrapping, but also overriding any methods or variables that I want, as well as providing some of my own methods.", "This wrapper class should appear 100% as the existing class (isinstance must act as if it is actually the class), however subclassing in itself is not going to cut it, as I want to wrap an existing object.", "Is there some solution in Python to do this?", "I was thinking something along the lines of:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "isinstance", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "object", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class ObjectWrapper(BaseClass):\n    def __init__(self, baseObject):\n        self.baseObject = baseObject\n\n    def overriddenMethod(self):\n        ...\n\n    def myOwnMethod1(self):\n        ...\n\n    ...\n\n    def __getattr__(self, attr):\n        if attr in ['overriddenMethod', 'myOwnMethod1', 'myOwnMethod2', ...]\n            # return the requested method\n        else:\n            return getattr(self.baseObject, attr)\n</code>\n</pre>\n", "senID": 2}, {"text": ["But I'm not that familiar with overriding __getattr__, __setattr__ and __hasattr__, so I'm not sure how to get that right."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "__getattr__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__setattr__", "childNum": 0, "tag": "code", "childList": []}, {"text": "__hasattr__", "childNum": 0, "tag": "code", "childList": []}]}]