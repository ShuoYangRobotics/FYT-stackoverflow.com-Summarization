[{"text": ["Flags in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm working with a large matrix (250x250x30 = 1,875,000 cells), and I'd like a way to set an arbitrary number of flags for each cell in this matrix, in some manner that's easy to use and reasonably space efficient."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My original plan was a 250x250x30 list array, where each element was something like: [\"FLAG1\",\"FLAG8\",\"FLAG12\"].", "I then changed it to storing just integers instead: [1,8,12].", "These integers are mapped internally by getter/setter functions to the original flag strings.", "This only uses 250mb with 8 flags per point, which is fine in terms of memory."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "[\"FLAG1\",\"FLAG8\",\"FLAG12\"]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[1,8,12]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["My question is: am I missing another obvious way to structure this sort of data?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Thanks all for your suggestions.", "I ended up rolling a few suggestions into one, sadly I can only pick one answer and have to live with upvoting the others:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["EDIT: erm the initial code I had here (using sets as the base element of a 3d numpy array) used A LOT of memory.", "This new version uses around 500mb when filled with randint(0,2**1000)."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "randint(0,2**1000)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import numpy\n\nFLAG1=2**0\nFLAG2=2**1\nFLAG3=2**2\nFLAG4=2**3\n\n(x,y,z) = (250,250,30)\n\narray = numpy.zeros((x,y,z), dtype=object)\n\n\ndef setFlag(location,flag):\n    array[location] |= flag\ndef unsetFlag(location,flag):\n    array[location] &amp;= ~flag\n</code>\n</pre>\n", "senID": 6}]