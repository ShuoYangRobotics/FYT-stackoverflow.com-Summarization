[{"text": ["Pythonic way to implement three similar integer range operators?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I am working on a circular problem.", "In this problem, we have objects that are put on a ring of size MAX, and are assigned IDs from (0 to MAX-1)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "MAX", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I have three simple functions to test for range inclusions.", "inRange(i,j,k) tests if i is in the circular interval [j,k[ (Mnemonic is i inRange(j,k)).", "And I have the same for ranges ]j,k[ and ]j,k]. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "i inRange(j,k)", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Code in those three methods look duplicated from one method to another:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def inRange(i,j,k):\n    \"\"\"\n    Returns True if i in [j, k[\n    * 0 &lt;= i, j, k &lt; MAX\n    * no order is assumed between j and k: we can have k &lt; j\n    \"\"\"\n    if j &lt;= k:\n        return j &lt;= i &lt; k\n    # j &gt; k :\n    return j &lt;= i or i &lt; k\n\ndef inStrictRange(i,j,k):\n    \"\"\"\n    Returns True if i in ]j, k[\n    * 0 &lt;= i, j, k &lt; MAX\n    * no order is assumed between j and k: we can have k &lt; j\n    \"\"\"\n    if j &lt;= k:\n        return j &lt; i &lt; k\n    # j &gt; k :\n    return j &lt; i or i &lt; k\n\ndef inRange2(i,j,k):\n    \"\"\"\n    Returns True if i in ]j, k]\n    * 0 &lt;= i, j, k &lt; MAX\n    * no order is assumed between j and k: we can have k &lt; j\n    \"\"\"\n    if j &lt;= k:\n        return j &lt; i &lt;= k\n    # j &gt; k :\n    return j &lt; i or i &lt;= k\n</code>\n</pre>\n", "senID": 4}, {"text": ["Do you know any cleaner way to implement those three methods?", "After all, only the operators are changing?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["After thinking of a better solution, I came up with:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n from operator import lt, le\ndef _compare(i,j,k, op1, op2):\n    if j &lt;= k:\n        return op1(j,i) and op2(i,k)\n    return op1(j,i) or op2(i,k)\n\ndef inRange(i,j,k):\n    return _compare(i,j,k, le, lt)\ndef inStrictRange(i,j,k):\n    return _compare(i,j,k, lt, lt)\ndef inRange2(i,j,k):\n    return _compare(i,j,k, lt, le)\n</code>\n</pre>\n", "senID": 7}, {"text": ["Is it any better?", "Can you come up with something more intuitive?", "In short, what would be the Pythonic way to write these three operators?"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "what would be the Pythonic way to write these three operators?", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["Also, I hate the inRange, inStrictRange, inRange2 names, but I can't think of crystal-clear names.", "Any ideas?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Thanks."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]