[{"text": ["Convert sqlalchemy row object to python dict"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["or a simple way to iterate over columnName, value pairs?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My version of sqlalchemy is 0.5.6"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here is the sample code where I tried using dict(row), but it throws exception , TypeError: 'User' object is not iterable"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import sqlalchemy\nfrom sqlalchemy import *\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nprint \"sqlalchemy version:\",sqlalchemy.__version__ \n\nengine = create_engine('sqlite:///:memory:', echo=False)\nmetadata = MetaData()\nusers_table = Table('users', metadata,\n     Column('id', Integer, primary_key=True),\n     Column('name', String),\n)\nmetadata.create_all(engine) \n\nclass User(declarative_base()):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n    def __init__(self, name):\n        self.name = name\n\nSession = sessionmaker(bind=engine)\nsession = Session()\n\nuser1 = User(\"anurag\")\nsession.add(user1)\nsession.commit()\n\n# uncommenting next line throws exception 'TypeError: 'User' object is not iterable'\n#print dict(user1)\n# this one also throws 'TypeError: 'User' object is not iterable'\nfor u in session.query(User).all():\n    print dict(u)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Running this code on my system outputs:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n sqlalchemy version: 0.5.6\nTraceback (most recent call last):\n  File \"untitled-1.py\", line 37, in &lt;module&gt;\n    print dict(u)\nTypeError: 'User' object is not iterable\n</code>\n</pre>\n", "senID": 6}]