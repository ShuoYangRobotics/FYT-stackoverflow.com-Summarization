[{"text": ["Defining Constants in Django"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I want to have some constants in a Django Projects.", "For example, let's say a constant called MIN_TIME_TEST."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "MIN_TIME_TEST", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I would like to be able to access this constant in two places: from within my Python code, and from within any Templates."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["What's the best way to go about doing this?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT:\nTo clarify, I know about Template Context Processors and about just putting things in settings.py or some other file and just importing."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["My question is, how do I combine the two approaches without violating the \"Don't Repeat Yourself\" rule?", "Based on the answers so far, here's my approach:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I'd like to create a file called global_constants.py, which will have a list of constants (things like MIN_TIME_TEST = 5).", "I can import this file into any module to get the constants. "], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "MIN_TIME_TEST = 5", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "import", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["But now, I want to create the context processor which returns all of these constants.", "How can I go about doing this automatically, without having to list them again in a dictionary, like in John Mee's answer?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]