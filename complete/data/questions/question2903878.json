[{"text": ["Python point lookup (coordinate binning?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Greetings,"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I am trying to bin an array of points (x, y) into an array of boxes [(x0, y0), (x1, y0), (x0, y1), (x1, y1)] (tuples are the corner points)"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "(x, y)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[(x0, y0), (x1, y0), (x0, y1), (x1, y1)]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So far I have the following routine:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def isInside(self, point, x0, x1, y0, y1):\n    pr1 = getProduct(point, (x0, y0), (x1, y0))\n    if pr1 &gt;= 0:\n        pr2 = getProduct(point, (x1, y0), (x1, y1))\n        if pr2 &gt;= 0:\n            pr3 = getProduct(point, (x1, y1), (x0, y1))\n            if pr3 &gt;= 0:\n                pr4 = getProduct(point, (x0, y1), (x0, y0))\n                if pr4 &gt;= 0:\n                    return True\n    return False\n\ndef getProduct(origin, pointA, pointB):\n    product = (pointA[0] - origin[0])*(pointB[1] - origin[1]) - (pointB[0] - origin[0])*(pointA[1] - origin[1])\n    return product\n</code>\n</pre>\n", "senID": 4}, {"text": ["Is there any better way then point-by-point lookup?", "Maybe some not-obvious numpy routine?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Thank you!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]