[{"text": ["How do I find the shortest overlapping match using regular expressions?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm still relatively new to regex.", "I'm trying to find the shortest string of text that matches a particular pattern, but am having trouble if the shortest pattern is a substring of a larger match.", "For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import re\nstring = \"A|B|A|B|C|D|E|F|G\"\nmy_pattern = 'a.*?b.*?c'\n\nmy_regex = re.compile(my_pattern, re.DOTALL|re.IGNORECASE)\nmatches = my_regex.findall(string)\n\nfor match in matches:\n    print match\n</code>\n</pre>\n", "senID": 2}, {"text": ["prints: "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n A|B|A|B|C\n</code>\n</pre>\n", "senID": 4}, {"text": ["but I'd want it to return:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n A|B|C\n</code>\n</pre>\n", "senID": 6}, {"text": ["Is there a way to do this without having to loop over each match to see if it contains a substring that matches? "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]