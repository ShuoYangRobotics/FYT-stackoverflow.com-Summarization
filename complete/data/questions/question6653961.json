[{"text": ["Is string interning really useful?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I was having a conversation about strings and various languages a while back, and the topic of string interning came up.", "Apparently Java and the .NET framework do this automatically with all strings, as well as several scripting languages.", "Theoretically, it saves memory because you don't end up with multiple copies of the same string, and it saves time because string equality comparisons are a simple pointer comparison instead of an O(N) run through each character of the string."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "string interning", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/String_interning"}]}, {"text": ["But the more I think about it, the more skeptical I grow of the concept's benefits.", "It seems to me that the advantages are mostly theoretical:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "First off, to use automatic string interning, all strings must be immutable, which makes a lot of string processing tasks harder than they need to be. (And yes, I've heard all the arguments for immutability in general. That's not the point.)", "tag": "none", "senID": 3}, {"text": "Every time a new string is created, it has to be checked against the string interning table, which is at least a O(N) operation. (", "tag": "none", "senID": 4}, {"text": "If the string equality table uses strong references, the strings will never get garbage collected when they're no longer needed, thus wasting memory.  On the other hand, if the table uses weak references, then the string class requires some sort of finalizer to remove the string from the table, thus slowing down the GC process.  (Which could be pretty significant, depending on how the string intern table is implemented. Worst case, deleting an item from a hash table can require an O(N) rebuild of the entire table under certain circumstances.)", "tag": "none", "senID": 5}]}, {"text": ["This is just the result of me thinking about implementation details.", "Is there something I've missed?", "Does string interning actually provide any significant benefits in the general case?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["EDIT 2: All right, apparently I was operating from a mistaken premise.", "The person I was talking to never pointed out that string interning was optional for newly-created strings, and in fact gave the strong impression that the opposite was true.", "Thanks to Jon for setting the matter straight.", "Another accepted answer for him."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "EDIT 2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]