[{"text": ["Nested Python class needs to access variable in parent/owner class"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I've seen a few \"solutions\" to this, but the solution every time seems to be \"Don't use nested classes, define the classes outside and then use them normally\".", "I don't like that answer, because it ignores the primary reason I chose nested classes, which is, to have a pool of constants (associated with the base class) accessible to all sub-class instances which are created."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here is example code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class ParentClass:\n\n    constant_pool = []\n    children = []\n\n    def __init__(self, stream):\n        self.constant_pool = ConstantPool(stream)\n        child_count = stream.read_ui16()\n        for i in range(0, child_count):\n            children.append(ChildClass(stream))\n\n    class ChildClass:\n\n        name = None\n\n        def __init__(self, stream):\n            idx = stream.read_ui16()\n            self.name = constant_pool[idx]\n</code>\n</pre>\n", "senID": 3}, {"text": ["All classes are passed a single param, which is a custom bitstream class.", "My intention is to have a solution that does not require me to read the idx value for ChildClass while still in the ParentClass.", "All child-class stream reading should be done in the child class."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["This example is over simplified.", "The constant pool is not the only variable i need available to all subclasses.", "The idx variable is not the only thing read from the stream reader."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Is this even possible in python?", "Is there no way to access the parent's information?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]