[{"text": ["Parsing \"From\" addresses from email text"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I'm trying to extract email addresses from plain text transcripts of emails.", "I've cobbled together a bit of code to find the addresses themselves, but I don't know how to make it discriminate between them; right now it just spits out all email addresses in the file.", "I'd like to make it so it only spits out addresses that are preceeded by \"From:\" and a few wildcard characters, and ending with \">\"  (because the emails are set up as From [name]&lt;[email]>).  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's the code now:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import re #allows program to use regular expressions\nfoundemail = []\n#this is an empty list\n\nmailsrch = re.compile(r'[\\w\\-][\\w\\-\\.]+@[\\w\\-][\\w\\-\\.]+[a-zA-Z]{1,4}')\n #do not currently know exact meaning of this expression but assuming\n #it means something like \"[stuff]@[stuff][stuff1-4 letters]\"\n\n        # \"line\" is a variable is set to a single line read from the file\n# (\"text.txt\"):\nfor line in open(\"text.txt\"):\n\n    foundemail.extend(mailsrch.findall(line))\n\n    # this extends the previously named list via the \"mailsrch\" variable\n      #which was named before\n\nprint foundemail\n</code>\n</pre>\n", "senID": 3}]