[{"text": ["do-while loop in Python?"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I need to emulate a do-while loop in a python.", "But, unfortunately, following\nstraightforward code does not work:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n l = [ 1, 2, 3 ]\ni = l.__iter__()\ns = None\nwhile True :\n  if s :\n    print s\n  try :\n    s = i.next()\n  except StopIteration :\n    break\nprint \"done\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["Instead of \"1,2,3,done\" I have the following output:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [stdout:]1\n[stdout:]2\n[stdout:]3\nNone['Traceback (most recent call last):\n', '  File \"test_python.py\", line 8, in &lt;module&gt;\n    s = i.next()\n', 'StopIteration\n']\n</code>\n</pre>\n", "senID": 4}, {"text": ["What can I do in order to catch 'stop iteration' excepton and break a while\nloop properly?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Example why such thing may be needed.", "State machine:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n s = \"\"\nwhile True :\n  if state is STATE_CODE :\n    if \"//\" in s :\n      tokens.add( TOKEN_COMMENT, s.split( \"//\" )[1] )\n      state = STATE_COMMENT\n    else :\n      tokens.add( TOKEN_CODE, s )\n  if state is STATE_COMMENT :\n    if \"//\" in s :\n      tokens.append( TOKEN_COMMENT, s.split( \"//\" )[1] )\n    else\n      state = STATE_CODE\n      # re-evaluate same line\n      continue\n  try :\n    s = i.next()\n  except StopIteration :\n    break\n</code>\n</pre>\n", "senID": 7}]