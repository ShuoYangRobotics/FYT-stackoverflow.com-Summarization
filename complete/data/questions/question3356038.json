[{"text": ["Positionally matching substrings in Python"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["How would you parse the ['i386', 'x86_64'] out of a string like '-foo 23 -bar -arch ppc -arch i386 -isysroot /  -fno-strict-aliasing -fPIC'?"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "['i386', 'x86_64']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'-foo 23 -bar -arch ppc -arch i386 -isysroot /  -fno-strict-aliasing -fPIC'", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; my_arch_parse_function('-foo 23 -bar -arch i386 -arch x86_64 -isysroot /  -fno-strict-aliasing -fPIC')\n&gt;&gt;&gt; ['i386', 'x86_64']\n</code>\n</pre>\n", "senID": 2}, {"text": ["Can this be done using regex, or only using modules like PyParsing, or manually splitting and iterating over the splits? "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Assumption: -arch VAL are grouped together."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "-arch VAL", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]