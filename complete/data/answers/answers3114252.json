[[{"text": ["In Python 2.6+, if name sentinel is bound to a value which the iterator can't possibly yield,"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sentinel", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if next(iterator, sentinel) is sentinel:\n    print('iterator was empty')\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you have no idea of what the iterator might possibly yield, make your own sentinel (e.g.", "at the top of your module) with"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n sentinel = object()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Otherwise, you could use, in the sentinel role, any value which you \"know\" (based on application considerations) that the iterator can't possibly yield."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["This isn't really cleaner, but it shows a way to package it in a function losslessly:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def has_elements(iter):\n  from itertools import tee\n  iter, any_check = tee(iter)\n  try:\n    any_check.next()\n    return True, iter\n  except StopIteration:\n    return False, iter\n\nhas_el, iter = has_elements(iter)\nif has_el:\n  # not empty\n</code>\n</pre>\n", "senID": 1}, {"text": ["This isn't really pythonic, and for particular cases, there are probably better (but less general) solutions, like the next default. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "next", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#next"}]}, {"code": "<pre>\n<code>\n first = next(iter, None)\nif first:\n  # Do something\n</code>\n</pre>\n", "senID": 3}, {"text": ["This isn't general because None can be a valid element in many iterables. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["any won't go beyond the first element if it's True.", "In case the iterator yields something false-ish you can write any(True for _ in iterator)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "any", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "any(True for _ in iterator)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["you can use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if zip([None], iterator):\n    # ...\nelse:\n    # ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["but it's a bit nonexplanatory for the code reader"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This is an overkill iterator wrapper that generally allows to check whether there's a next item (via conversion to boolean).", "Of course pretty inefficient."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class LookaheadIterator ():\n\n    def __init__(self, iterator):\n        self.__iterator = iterator\n        try:\n            self.__next      = next (iterator)\n            self.__have_next = True\n        except StopIteration:\n            self.__have_next = False\n\n    def __iter__(self):\n        return self\n\n    def next (self):\n        if self.__have_next:\n            result = self.__next\n            try:\n                self.__next      = next (self.__iterator)\n                self.__have_next = True\n            except StopIteration:\n                self.__have_next = False\n\n            return result\n\n        else:\n            raise StopIteration\n\n    def __nonzero__(self):\n        return self.__have_next\n\nx = LookaheadIterator (iter ([]))\nprint bool (x)\nprint list (x)\n\nx = LookaheadIterator (iter ([1, 2, 3]))\nprint bool (x)\nprint list (x)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n False\n[]\nTrue\n[1, 2, 3]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["__length_hint__ estimates the length of list(it) - it's private method, though:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "__length_hint__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "estimates", "childNum": 0, "tag": "em", "childList": []}, {"text": "list(it)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n x = iter( (1, 2, 3) )\nhelp(x.__length_hint__)\n      1 Help on built-in function __length_hint__:\n      2 \n      3 __length_hint__(...)\n      4     Private method returning an estimate of len(list(it)).\n</code>\n</pre>\n", "senID": 1}]]