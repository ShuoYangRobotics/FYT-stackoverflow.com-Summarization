[[{"text": ["This works on Mac OS X 10.5.5.", "Note the capital -U option.", "Perhaps that's been your problem."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "-U", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import subprocess\nps = subprocess.Popen(\"ps -U 0\", shell=True, stdout=subprocess.PIPE)\nprint ps.stdout.read()\nps.stdout.close()\nps.wait()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here's the Python version"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Python 2.5.2 (r252:60911, Feb 22 2008, 07:57:53) \n[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The cross-platform replacement for commands is subprocess.", "See the subprocess module documentation.", "The 'Replacing older modules' section includes how to get output from a command."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "commands", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "subprocess", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "subprocess module documentation", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-subprocess.html"}, {"text": "how to get output from a command", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/node534.html"}]}, {"text": ["Of course, you still have to pass the right arguments to 'ps' for the platform you're on.", "Python can't help you with that, and though I've seen occasional mention of third-party libraries that try to do this, they usually only work on a few systems (like strictly SysV style, strictly BSD style, or just systems with /proc."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If the OS support the /proc fs you can do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import os\n&gt;&gt;&gt; pids = [int(x) for x in os.listdir('/proc') if x.isdigit()]\n&gt;&gt;&gt; pids\n[1, 2, 3, 6, 7, 9, 11, 12, 13, 15, ... 9406, 9414, 9428, 9444]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["A cross-platform solution (linux, freebsd, osx, windows) is by using psutil:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "psutil", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/psutil/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import psutil\n&gt;&gt;&gt; psutil.get_pid_list()\n[1, 2, 3, 6, 7, 9, 11, 12, 13, 15, ... 9406, 9414, 9428, 9444]    \n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I've tried in on OS X (10.5.5) and seems to work just fine:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["print commands.getoutput(\"ps -u 0\")"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["UID   PID TTY           TIME CMD"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["0     1 ??", "0:01.62 /sbin/launchd"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["0    10 ??", "0:00.57 /usr/libexec/kextd"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["etc."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Python 2.5.1"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["It works if you use os instead of commands"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["import os"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["print os.system(\"ps -u 0\")"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["any of the above python calls - but try 'pgrep \n"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]