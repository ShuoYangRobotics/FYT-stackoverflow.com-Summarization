[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; d = { 'a': 1, 'b': 2, 'c': 3 }\n&gt;&gt;&gt; d.items()\n[('a', 1), ('c', 3), ('b', 2)]\n&gt;&gt;&gt; [(v, k) for k, v in d.iteritems()]\n[(1, 'a'), (3, 'c'), (2, 'b')]\n</code>\n</pre>\n", "senID": 0}, {"text": ["It's not in the order you want, but dicts don't have any specific order anyway.", "Sort it or organize it as necessary."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["See: items(), iteritems()"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "items()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#dict.items"}, {"href": "http://docs.python.org/library/stdtypes.html#dict.iteritems", "text": "iteritems()", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["In Python 3.x, you would not use iteritems (which no longer exists), but instead use items, which now returns a \"view\" into the dictionary items.", "See the What's New document for Python 3.0, and the new documentation on views."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "iteritems", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "items", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "What's New", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/3.0.1/whatsnew/3.0.html#views-and-iterators-instead-of-lists"}, {"href": "http://docs.python.org/py3k/library/stdtypes.html#dictionary-view-objects", "text": "documentation on views", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["since no one else did, I'll add py3k versions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = { 'a': 1, 'b': 2, 'c': 3 }\n&gt;&gt;&gt; list(d.items())\n[('a', 1), ('c', 3), ('b', 2)]\n&gt;&gt;&gt; [(v, k) for k, v in d.items()]\n[(1, 'a'), (3, 'c'), (2, 'b')]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use the use list comprehensions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [(k,v) for k,v in a.iteritems()]\n</code>\n</pre>\n", "senID": 1}, {"text": ["will get you [ ('a', 1), ('b', 2), ('c', 3) ] and "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [(v,k) for k,v in a.iteritems()]\n</code>\n</pre>\n", "senID": 3}, {"text": ["the other example."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Read more about list comprehensions if you like, it's very interesting what you can do with them."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Read more about list comprehensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}], [{"text": ["What you want is dict's items() and iteritems() methods.", "items returns a list of (key,value) tuples.", "Since tuples are immutable, they can't be reversed.", "Thus, you have to iterate the items and create new tuples to get the reversed (value,key) tuples.", "For iteration, iteritems is preferable since it uses a generator to produce the (key,value) tuples rather than having to keep the entire list in memory."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "items()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "iteritems()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "items", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "iteritems", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"code": "<pre>\n<code>\n Python 2.5.1 (r251:54863, Jan 13 2009, 10:26:13) \n[GCC 4.0.1 (Apple Inc. build 5465)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; a = { 'a': 1, 'b': 2, 'c': 3 }\n&gt;&gt;&gt; a.items()\n[('a', 1), ('c', 3), ('b', 2)]\n&gt;&gt;&gt; [(v,k) for (k,v) in a.iteritems()]\n[(1, 'a'), (3, 'c'), (2, 'b')]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n [(k,v) for (k,v) in d.iteritems()]\n</code>\n</pre>\n", "senID": 0}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [(v,k) for (k,v) in d.iteritems()]\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n>>> a={ 'a': 1, 'b': 2, 'c': 3 }\n\n>>> [(x,a[x]) for x in a.keys() ]\n[('a', 1), ('c', 3), ('b', 2)]\n\n>>> [(a[x],x) for x in a.keys() ]\n[(1, 'a'), (3, 'c'), (2, 'b')]\n</pre>\n", "senID": 0}], [{"text": ["Note: 2 years late, so please vote me up if you like this suggestion :) ..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Create a list of namedtuples"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Create a list of namedtuples", "childNum": 0, "tag": "b", "pos": 0, "childList": []}]}, {"text": ["It can often be very handy to use namedtuple.", "For example, you have a dictionary of 'name' as keys and 'score' as values like:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "namedtuple", "childNum": 1, "tag": "b", "pos": 0, "childList": [{"text": "namedtuple", "tag": "a"}]}, {"text": "namedtuple", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#collections.namedtuple"}]}, {"code": "<pre>\n<code>\n d = {'John':5, 'Alex':10, 'Richard': 7}\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can list the items as tuples, sorted if you like, and get the name and score of, let's say the player with the highest score (index=0) very Pythonically like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; player = best[0]\n\n&gt;&gt;&gt; player.name\n        'Alex'\n&gt;&gt;&gt; player.score\n         10\n</code>\n</pre>\n", "senID": 5}, {"text": ["How to do this:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["list in random order or keeping order ofcollections.OrderedDict:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "list in random order or keeping order ofcollections.OrderedDict:", "childNum": 1, "tag": "b", "pos": 0, "childList": [{"text": "collections.OrderedDict", "tag": "a"}]}, {"href": "http://docs.python.org/library/collections.html#collections.OrderedDict", "text": "collections.OrderedDict", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import collections\nPlayer = collections.namedtuple('Player', 'name score')\nplayers = list(Player(*item) for item in d.items())\n</code>\n</pre>\n", "senID": 8}, {"text": ["in order, sorted by value ('score'):"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "in order, sorted by value ('score'):", "childNum": 0, "tag": "b", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import collections\nPlayer = collections.namedtuple('Player', 'score name')\n</code>\n</pre>\n", "senID": 10}, {"text": ["sorted with lowest score first:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n worst = sorted(Player(v,k) for (k,v) in d.items())\n</code>\n</pre>\n", "senID": 12}, {"text": ["sorted with highest score first:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)\n</code>\n</pre>\n", "senID": 14}]]