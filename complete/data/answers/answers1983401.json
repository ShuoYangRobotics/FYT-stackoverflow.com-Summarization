[[{"text": ["You can do almost exactly what you want, as long as you don't mind a tiny syntax difference:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "almost", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import cStringIO\nimport sys\n\ndef getPrint(thefun, *a, **k):\n  savstdout = sys.stdout\n  sys.stdout = cStringIO.StringIO()\n  try:\n    thefun(*a, **k)\n  finally:\n    v = sys.stdout.getvalue()\n    sys.stdout = savstdout\n  return v\n</code>\n</pre>\n", "senID": 1}, {"text": ["The tiny difference is that you must call getPrint(funA), not getPrint(funA()) -- i.e., you must pass the function object itself, without the trailing parentheses that would call it immediately, before getPrint can do its magic."], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "getPrint(funA)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "not", "childNum": 0, "tag": "strong", "childList": []}, {"text": "getPrint(funA())", "childNum": 0, "tag": "code", "childList": []}, {"text": "without", "childNum": 0, "tag": "strong", "childList": []}, {"text": "before", "childNum": 0, "tag": "em", "childList": []}, {"text": "getPrint", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you absolutely insist on those extra parentheses, then getPrint cannot do all the needed preparation, and must be supplemented by other code to prepare things right (I strongly recommend losing the extra parentheses, thus enabling the encapsulation of all the functionality inside getPrint!", ")."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "getPrint", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "all", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "getPrint", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"code": "<pre>\n<code>\n from cStringIO import StringIO\n\ndef getPrint(func, *args, **kwds):\n  old_stdout = sys.stdout\n  sys.stdout = StringIO()\n  try:\n    func(*args, **kwds)\n  except:\n    raise\n  else:\n    return sys.stdout.getvalue()\n  finally:\n    sys.stdout = old_stdout\n\n#...\na = getPrint(funA) # notice no (), it is called by getPrint\nprint a.rstrip(\"\\n\") # avoid extra trailing lines\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Best way is to do a context manager"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from contextlib import contextmanager\nimport StringIO\nimport sys\n\n@contextmanager\ndef capture():\n    old_stdout = sys.stdout\n    sys.stdout = StringIO.StringIO()\n    try:\n        yield sys.stdout\n    finally:\n        sys.stdout = old_stdout\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now you can run any printing code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n with capture() as c:\n    funA()\n    funB()\n    print 'HELLO!'\n</code>\n</pre>\n", "senID": 3}, {"text": ["then later:  "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print c.getvalue()\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Replace sys.stdout with a file-like object."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "sys.stdout", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/stdtypes.html#file-objects", "text": "file-like object", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Use cStringIO ( see doc )."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "doc", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stringio.html"}]}, {"code": "<pre>\n<code>\n from cStringIO import StringIO\n\nold_stdout = sys.stdout\nsys.stdout = mystdout = StringIO()\n\ngetPrint( funA() )\n# use mystdout to get string\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The simplest thing is to change your funA() to not print anything, but simply to return the string values."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "funA()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Like so:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def funA():\n    return \"Hi\\n\" + \"There\\n\" + \"Friend\\n\" + \"!\\n\"\n\n# later:\nprint(funA())\n</code>\n</pre>\n", "senID": 2}, {"text": ["It's always easy to collect strings and print them; it's tricker to to collect strings as they are being printed."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you have a huge body of existing printing functions, then yeah, use one of the tricks provided here to collect the output."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]