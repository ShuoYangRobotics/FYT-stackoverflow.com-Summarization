[[{"code": "<pre>\n<code>\n b = \"the\"\na = b * 5\nprint a\n\na = a[:-2*len(b)]\nprint a\n\n# returns: thethethe\n</code>\n</pre>\n", "senID": 0}, {"text": ["I am not substracting (you cannot really do it with strings), I am removing twice the length of b from the end of a, ignoring its real value."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["To reduce the number of \"the\" by 2 in you word, try with the replace method : "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "replace", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html?highlight=replace#str.replace"}]}, {"code": "<pre>\n<code>\n b = \"the\"\na = b * 5\nprint a\n&gt;&gt;&gt; \"thethethethethe\"\na = a.replace(b, \"\", 2)  # or a.replace(b*2, \"\", 1) if you want to remove \"thethe\" from the string\nprint a\n&gt;&gt;&gt; \"thethethe\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you wanted to remove the \"the\" by starting from the end, use rsplit()"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "rsplit()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html?highlight=replace#str.rsplit"}]}, {"code": "<pre>\n<code>\n b = \"the\"\na = \"theAtheBthethe\"\na = \"\".join(a.rsplit(\"the\", 2))   # or \"\".join(a.rsplit(\"thethe\", 1)) if you want to remove \"theth\" of the string\nprint a\n&gt;&gt;&gt; \"theAtheB\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["As described here, the * operator is supported by string (and unicode, list, tuple, bytearray, buffer, xrange types), b * 5  returns 5 copies of b concatenated."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "described here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html?highlight=replace#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange"}, {"text": "b * 5", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Depends if you want to chop them off the start or the end, you can use array subsets:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a[2*len(\"the\"):]\n'thethethe'\n&gt;&gt;&gt; a[:-(2*len(\"the\"))]\n'thethethe'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There is no support for subtraction operator in case of strings, but you can simply add one:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class MyStr(str):\n    def __init__(self, val):\n        return str.__init__(self, val)\n    def __sub__(self, other):\n        if self.count(other) &gt; 0:\n            return self.replace(other, '', 1)\n        else:\n            return self\n</code>\n</pre>\n", "senID": 1}, {"text": ["and this will work in the following way:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = MyStr('thethethethethe')\n&gt;&gt;&gt; b = a - 'the'\n&gt;&gt;&gt; a\n'thethethethethe'\n&gt;&gt;&gt; b\n'thethethethe'\n&gt;&gt;&gt; b = a - 2 * 'the'\n&gt;&gt;&gt; b\n'thethethe'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Regarding a - 2 * 'the' operation you should be aware that this is not \" remove twice 'the' string from a \", but \" remove result of (2 times 'the') from a \" (first multiply \"the\" by 2 and then subtract from a)."], "childNum": 6, "tag": "p", "senID": 4, "childList": [{"text": "a - 2 * 'the'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "remove twice 'the' string from a", "childNum": 0, "tag": "em", "childList": []}, {"text": "remove result of (2 times 'the') from a", "childNum": 0, "tag": "em", "childList": []}, {"text": "the", "childNum": 0, "tag": "code", "childList": []}, {"text": "2", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Is this what you expected?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n a = a.rpartition(b * 2)[0]\n</code>\n</pre>\n", "senID": 0}, {"text": ["should do this, cutting from the right side.", "If you don't have any examples of 'thethe' in a, it will return the empty string ''.", "It won't work if you have multiple 'the's that are separated by other characters.", "For that, you could use a.rpartition(b)[0] twice.", "If you want to cut from the left instead, use a.partition(b * 2)[2]."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "'thethe'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "''", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "'the'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "a.rpartition(b)[0]", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "a.partition(b * 2)[2]", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"text": ["Why doesn't subtracting work?", "Using addition and multiplication is a convenience feature for working with strings.", "The semantics of subtracting (or dividing) strs is not defined for Python, so you can't use it that way."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Plus operator work because \"+\" concatenate whilst minus don't operate on strings.", "You can try something using regular expression, like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\ns=\"the\"*5\nexpr=\"the\"\n\nprint s\n\n# s -= 2\nprint \"\".join(re.findall(expr,s)[:-2])\n\n# s -=3\nprint \"\".join(re.findall(expr,s)[:-3])\n</code>\n</pre>\n", "senID": 1}]]