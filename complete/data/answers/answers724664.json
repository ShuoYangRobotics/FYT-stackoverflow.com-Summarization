[[{"text": ["You can subclass the distutils.command.build_ext.build_ext command."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "distutils.command.build_ext.build_ext", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Once build_ext.finalize_options() method has been called, the compiler type is stored in self.compiler as a string (the same as the one passed to the build_ext's --compiler option, e.g.", "'mingw32', 'gcc', etc...)."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "build_ext.finalize_options()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self.compiler", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "build_ext", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "--compiler", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["This is an expanded version of Luper Rouch's answer that worked for me to get an openmp extension to compile using both mingw and msvc on windows.", "After subclassing build_ext you need to pass it to setup.py in the cmdclass arg.", "By subclassing build_extensions instead of finalize_options you'll have the actual compiler object to look into, so you can then get more detailed version information.", "You could eventually set compiler flags on a per-compiler, per-extension basis:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from distutils.core import setup, Extension\nfrom distutils.command.build_ext import build_ext\ncopt =  {'msvc': ['/openmp', '/Ox', '/fp:fast','/favor:INTEL64','/Og']  ,\n     'mingw32' : ['-fopenmp','-O3','-ffast-math','-march=native']       }\nlopt =  {'mingw32' : ['-fopenmp'] }\n\nclass build_ext_subclass( build_ext ):\n    def build_extensions(self):\n        c = self.compiler.compiler_type\n        if copt.has_key(c):\n           for e in self.extensions:\n               e.extra_compile_args = copt[ c ]\n        if lopt.has_key(c):\n            for e in self.extensions:\n                e.extra_link_args = lopt[ c ]\n        build_ext.build_extensions(self)\n\nmod = Extension('_wripaca',\n            sources=['../wripaca_wrap.c', \n                     '../../src/wripaca.c'],\n            include_dirs=['../../include']\n            )\n\nsetup (name = 'wripaca',\n   ext_modules = [mod],\n   py_modules = [\"wripaca\"],\n   cmdclass = {'build_ext': build_ext_subclass } )\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n#This should work pretty good\ndef compilerName():\n  import re\n  import distutils.ccompiler\n  comp = distutils.ccompiler.get_default_compiler()\n  getnext = False\n\n  for a in sys.argv[2:]:\n    if getnext:\n      comp = a\n      getnext = False\n      continue\n    #separated by space\n    if a == '--compiler'  or  re.search('^-[a-z]*c$', a):\n      getnext = True\n      continue\n    #without space\n    m = re.search('^--compiler=(.+)', a)\n    if m == None:\n      m = re.search('^-[a-z]*c(.+)', a)\n    if m:\n      comp = m.group(1)\n\n  return comp\n\n\nprint \"Using compiler \" + '\"' + compilerName() + '\"'\n</pre>\n", "senID": 0}], [{"text": ["import distutils.ccompiler"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["compiler_name = distutils.ccompiler.get_default_compiler()"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n import sys\nsys.argv.extend(['--compiler', 'msvc'])\n</code>\n</pre>\n", "senID": 0}], [{"text": ["See the default with: distutils.ccompiler.get_default_compiler"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "distutils.ccompiler.get_default_compiler", "tag": "a", "pos": 0, "childList": [{"text": "distutils.ccompiler.get_default_compiler", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/distutils/apiref.html#distutils.ccompiler.get%5Fdefault%5Fcompiler"}, {"text": "distutils.ccompiler.get_default_compiler", "childNum": 0, "tag": "code", "childList": []}]}]]