[[{"text": ["Alternately:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s_ = filter(lambda c: c.isalpha(), s)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One handy way to manipulate strings is using a generator function and the join method:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n result = \"\".join( letter for letter in s if letter.isalpha() )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You don't need a lambda function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result = ''.join(c for c in input_str if c.isalpha())\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you really want to use a lambda function you could write it as follows:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n result = ''.join(filter(lambda c:str.isalpha(c), input_str))\n</code>\n</pre>\n", "senID": 3}, {"text": ["But this can also be simplified to:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n result = ''.join(filter(str.isalpha, input_str))\n</code>\n</pre>\n", "senID": 5}], [{"text": ["how about"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.sub('[^a-zA-Z]','', s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n \"\".join([x for x in s if x.isalpha()])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You probably want a list comprehension here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s_ = [letter for letter in s if letter.isalpha()]\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, this will give you a list of strings (each one character long).", "To convert this into a single string, you can use join:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n s2 = ''.join(s_)\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want, you can combine the two into a single statement:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n s_ = ''.join(letter for letter in s if letter.isalpha())\n</code>\n</pre>\n", "senID": 5}, {"text": ["If you particularly want or need to use a lambda function, you can use filter instead of the generator:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "filter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n my_func = lambda letter: letter.isalpha()\ns_ = ''.join(filter(my_func, s))\n</code>\n</pre>\n", "senID": 7}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s = '1208uds9f8sdf978qh39h9i#H(&amp;#*H(&amp;H97dgh'\n&gt;&gt;&gt; ''.join(e for e in s if e.isalpha())\n'udsfsdfqhhiHHHdgh'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This is kind of the long way round, but will let you create a filter for any arbitrary set of characters."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n\ndef strfilter(validChars):\n    vc = set(validChars)\n    def filter(s):\n        return ''.join(ch for ch in s if ch in vc)\n    return filter\n\nfilterAlpha = strfilter(string.letters)\nfilterAlpha('1208uds9f8sdf978qh39h9i#H(&amp;#*H(&amp;H97dgh')  # -&gt; 'udsfsdfqhhiHHHdgh'\n</code>\n</pre>\n", "senID": 1}]]