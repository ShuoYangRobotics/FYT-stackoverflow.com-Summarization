[[{"text": ["There is also a more convenient (for some) svnversion command."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "svnversion", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Output might be a single revision number or something like this (from -h):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 4123:4168     mixed revision working copy\n  4168M         modified working copy\n  4123S         switched working copy\n  4123:4168MS   mixed revision, modified, switched working copy\n</code>\n</pre>\n", "senID": 2}, {"text": ["I use this python code snippet to extract revision information:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import re\nimport subprocess\n\np = subprocess.Popen([\"svnversion\"], stdout = subprocess.PIPE, \n    stderr = subprocess.PIPE)\np.wait()\nm = re.match(r'(|\\d+M?S?):?(\\d+)(M?)S?', p.stdout.read())\nrev = int(m.group(2))\nif m.group(3) == 'M':\n    rev += 1\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Now each time you checkout that file, it will have the revision in itself."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You can use os.system() to execute a command line like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.system()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n svn info | grep \"Revision\" | awk '{print $2}'\n</code>\n</pre>\n", "senID": 1}, {"text": ["I do that in my nightly build scripts."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Also on some platforms there is a svnversion command, but I think I had a reason not to use it.", "Ahh, right.", "You can't get the revision number from a remote repository to compare it to the local one using svnversion."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "svnversion", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["svn info, I believe, is what you want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "svn info", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you just wanted the revision, maybe you could do something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n svn info | grep \"Revision:\"\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I think I have to do svn info and then retrieve the number with a string manipulation from \"Revision: xxxxxx\"\nIt would be just nice, if there were a command that returns just the number :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Use something like the following, taking advantage of the XML output of subversion:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # parse rev from popen \"svn info --xml\"\ndom = xml.dom.minidom.parse(os.popen('svn info --xml'))\nentry = dom.getElementsByTagName('entry')[0]\nrevision = entry.getAttribute('revision')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note also that, depending on what you need this for, the &lt;commit revision=...&gt; entry may be more what you're looking for.", "That gives the \"Last Changed Rev\", which won't change until the code in the current tree actually changes, as opposed to \"Revision\" (what the above gives) which will change any time anything in the repository changes (even branches) and you do an \"svn up\", which is not the same thing, nor often as useful."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "&lt;commit revision=...&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]