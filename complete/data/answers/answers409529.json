[[{"text": ["Believe it or not, this actually is an issue that is a bit different in each language.", "In Python, exceptions are regularly thrown for events that aren't exceptional by the language itself.", "Thus I think that the \"you should only throw exceptions under exceptional circumstances\" rule doesn't quite apply.", "I think the results you'll get on this forum will be slanted towards that point of view though, considering the high number of .Net programmers (see this question) for more info on that)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this question", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/351400/why-are-net-programmers-so-afraid-of-exceptions"}]}, {"text": ["At a very minimum, I'd better not catch anyone who sticks to that rule ever using a generator or a for loop in Python (both of which involve throwing exceptions for non-exceptional circumstances)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The clue is in the name - exceptions should be exceptional."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you always expect the item will exist then use get, but if you expect it not to exist a reasonable proportion of the time (i.e.", "it not existing is an expected result rather than an exceptional result) then I'd suggest using filter."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "get", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "filter", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["So, seeing as you indicated that between 1 in 2 and 1 in 4 are expected not to exist, I'd definitely write a wrapper around filter, as that's definitely not an exceptional case."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "filter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["There's a big schism in programming languages around the use of exceptions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["The majority view is that exceptions should be exceptional.", "In most languages with exceptions, transfer of control by exception is considerably more expensive than by procedure return, for example."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "exceptions should be exceptional", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["There is a strong minority view that exceptions are just another control-flow construct, and they should be cheap.", "The Standard ML of New Jersey and Objective Caml compilers subscribe to that view.", "If you have cheap exceptions you can code some fancy backtracking algorithms in ways that are more difficult to code cleanly using other mechanisms."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Standard ML of New Jersey", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.smlnj.org/"}, {"text": "Objective Caml", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://caml.inria.fr/"}]}]}, {"text": ["I've seen this debate repeated many times for new language designs, and almost always, the winner decides that exceptions should be expensive and rare.", "When you care about performanced, you'd be wise to program with this in mind."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I agree with the other answer but I wanted to add that exception passing like this is going to give you a very noticeable performance hit.", "Highly recommended that you check to see if the result exists (if that's what filter does) instead of passing on exceptions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "hr", "senID": 1}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In response to request for numbers on this, I ran this simple test..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import time\n\ndef timethis(func, list, num):\n  st=time.time()\n  for i in xrange(0,1000000):\n    try:\n      func(list,num)\n    except:\n      pass\n  et = time.time()\n  print \"Took %gs\" % (et-st)\n\ndef check(list, num):\n  if num &lt; len(list):\n    return list[num]\n  else:\n    return None\n\na=[1]\ntimethis(check, a, 1)\ntimethis(lambda x,y:x[y], a, 1)\n</code>\n</pre>\n", "senID": 4}, {"text": ["And the output was.."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n Took 0.772558s\nTook 3.4512s\n</code>\n</pre>\n", "senID": 6}, {"text": ["HTH."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["The answer will depend on the intent of the code.", "(I'm not sure what your code sample was meant to do, the pass in the exceptional case is confusing, what will the rest of the code do with object variable to work with?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Whether to use exceptions or to use a method which treat the case as non-exceptional is a matter of taste in many cases.", "Certainly if the real code in the except clause is as complicated as the filter method you'd have to use to avoid the exception, then use the filter method.", "Simpler code is better code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Aversion to excpetions is a matter of opinion - however, if there's reason to believe that a function or method is going to be called many times or called rapidly, exceptions will cause a significant slowdown.", "I learned this from my previous question, where I was previously relying on a thrown exception to return a default value rather than doing parameter checking to return that default."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "previous question", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/395599/java-graphic-library-for-multicoloured-text"}]}, {"text": ["Of course, exceptions can still exist for any reason, and you shouldn't be afraid to use or throw one if necessary - especially ones that could potentially break the normal flow of the calling function."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I disagree with the above comments that an exception is inefficient in this instance, especially since it's being used in an I/O bound operation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's a more realistic example using Django with an in-memory sqlite database.", "Each of a 100 different queries was run, then averaged for each of a 100 runs.", "Although I doubt if it would matter, I also changed the order of execution."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n With ObjectDoesNotExist... 0.102783939838\nWithout exception ........ 0.105322141647\n\nWith ObjectDoesNotExist... 0.102762134075\nWithout exception ........ 0.101523952484\n\nWith ObjectDoesNotExist... 0.100004930496\nWithout exception ........ 0.107946784496\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can instrument this in your own Django environment, but I doubt if your time is well spent avoiding this exception."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]