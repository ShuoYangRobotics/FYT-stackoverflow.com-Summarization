[[{"text": ["This should do it, where directories is your list of directories:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "directories", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import os\nimport itertools\n\ngenerators = [os.walk(d) for d in directories]\nfor root, dirs, files in itertools.chain(*generators):\n    print root, dirs, files\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You are looking for itertools.chain.", "It will combine multiple iterables into a single one, like this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "itertools.chain", "tag": "a", "pos": 0, "childList": [{"text": "itertools.chain", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html"}, {"text": "itertools.chain", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i in itertools.chain([1,2,3], [4,5,6]):\n...  print i\n... \n1\n2\n3\n4\n5\n6\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def files_gen(topdir='.'):\n    for root, dirs, files in os.walk(topdir):\n        # ... do some stuff with files\n        for f in files:\n            yield os.path.join(root, f)\n        # ... do other stuff\n\nfor f in files_gen():\n    print f\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Just yeld each of generated element individually, not as list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["UPDATE: I've just discovered itertools.chain() that should be effective and elegant solution."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Like this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def threeGens( i, j, k ):\n    for x in range(i):\n       yield x\n    for x in range(j):\n       yield x\n    for x in range(k):\n       yield x\n</code>\n</pre>\n", "senID": 1}, {"text": ["Works well. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["hey, thanks, this is was I was looking for too:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I had this code snippet..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n grids = []\nfor item in input_files:\n  grids.extend([... some list comprehension ...])\n</code>\n</pre>\n", "senID": 2}, {"text": ["and wanted to rewrite it using generators...  my first guess (and hope) was this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n grids = generator()\nfor item in input_files:\n  grids.extend((... some list comprehension ...))\n</code>\n</pre>\n", "senID": 4}, {"text": ["but there's no such constructor nor method.", "using itertools I have this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n grids = itertools.chain()\nfor item in input_files:\n  grids = itertools.chain(grids, (... some list comprehension ...))\n</code>\n</pre>\n", "senID": 6}, {"text": ["which seems good enough to me.", "thanks to stackoverflow and their users!"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}]]