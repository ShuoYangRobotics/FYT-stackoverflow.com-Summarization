[[{"text": ["I use 'global' in a context such as this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n _cached_result = None\ndef myComputationallyExpensiveFunction():\n    global _cached_result\n    if _cached_result:\n       return _cached_result\n\n    # ... figure out result\n\n    _cached_result = result\n    return result\n</code>\n</pre>\n", "senID": 1}, {"text": ["I use 'global' because it makes sense and is clear to the reader of the function what is happening.", "I also know there is this pattern, which is equivalent, but places more cognitive load on the reader:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def myComputationallyExpensiveFunction():\n    if myComputationallyExpensiveFunction.cache:\n        return myComputationallyExpensiveFunction.cache\n\n    # ... figure out result\n\n    myComputationallyExpensiveFunction.cache = result\n    return result\nmyComputationallyExpensiveFunction.cache = None\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I've never had a legit use for the statement in any production code in my 3+ years of professional use of Python and over five years as a Python hobbyist.", "Any state I need to change resides in classes or, if there is some \"global\" state, it sits in some shared structure like a global cache."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In my view, as soon as you feel the need to use global variables in a python code, it's a great time to stop for a bit and work on refactoring of your code.", "Putting the global in the code and delaying the refactoring process might sound promising if your dead-line is close, but, believe me, you're not gonna go back to this and fix unless you really have to - like your code stopped working for some odd reason, you have to debug it, you encounter some of those global variables and all they do is mess things up."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "global", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "global", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So, honestly, even it's allowed, I would as much as I can avoid using it.", "Even if it means a simple classes-build around your piece of code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Objects are the prefered way of having non-local state, so global is rarely needed.", "I dont think the upcoming nonlocal modifier is going to be widely used either, I think its mostly there to make lispers stop complaining :-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Rarely.", "I've yet to find a use for it at all."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It can be useful in threads for sharing state (with locking mechanisms around it)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, I rarely if ever use it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I avoid it and we even have a pylint rule that forbids it in our production code.", "I actually believe it shouldn't even exist at all."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pylint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.logilab.org/857"}]}], [{"text": ["I've used it in quick &amp; dirty, single-use scripts to automate some one-time task.", "Anything bigger than that, or that needs to be reused, and I'll find a more elegant way."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I've used it in situations where a function creates or sets variables which will be used globally.", "Here are some examples:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n discretes = 0\ndef use_discretes():\n    #this global statement is a message to the parser to refer \n    #to the globally defined identifier \"discretes\"\n    global discretes\n    if using_real_hardware():\n        discretes = 1\n...\n</code>\n</pre>\n", "senID": 1}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n file1.py:\n    def setup():\n        global DISP1, DISP2, DISP3\n        DISP1 = grab_handle('display_1')\n        DISP2 = grab_handle('display_2')\n        DISP3 = grab_handle('display_3')\n        ...\n\nfile2.py:\n    import file1\n\n    file1.setup()\n    #file1.DISP1 DOES NOT EXIST until after setup() is called.\n    file1.DISP1.resolution = 1024, 768\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Once or twice.", "But it was always good starting point to refactor."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If I can avoid it, no.", "And, to my knowledge, there is always a way to avoid it.", "But I'm not stating that it's totally useless either"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I use it for global options with command-line scripts and 'optparse':"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["my main() parses the arguments and passes those to whatever function does the work of the script... but writes the supplied options to a global 'opts' dictionary."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Shell script options often tweak 'leaf' behavior, and it's inconvenient (and unnecessary) to thread the 'opts' dictionary through every argument list. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]