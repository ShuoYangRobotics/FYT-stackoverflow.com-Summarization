[[{"text": ["You can get vim to do the opposite: do a "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["and it will highlight matching parens.", "You'll know when you're unbalanced when it doesn't highlight something."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'm also assuming you're familiar with the '%' command, which bounces you to the matching element."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Stop gap solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n :imap ( ()&lt;C-[&gt;i\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will make it so every time you type  a left paren it will automatically put in the right and put you in the position of typing in between."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Not sure if it'll be more or less confusing for you, but you could look at the lisp.vim syntax file (especially the part where g:lisp_rainbow is handled) to see how you can highlight matching parens."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "lisp.vim", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "g:lisp_rainbow", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you manage to highlight all the matching parens, you could have the leftover parens (i.e.", "unmatched parens) have default Error highlighting.", "This is what the lisp file seems to be doing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n syn match parenError \")\"\nsyn region matchingParens transparent start=\"(\" end=\")\" contains=matchingParens\nhi parenError guifg=red\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you :syn clear and run those, it seems to work.", "Note that the order the syn commands are executed matters.", "Per :h :syn-priority, the rule matched last is the one that takes effect, which may be why your rules highlighted all the end-parens in the file."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": ":syn clear", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "syn", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ":h :syn-priority", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "last", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["What c.vim is actually doing is highlighting any {} inside of (), whether everything is properly closed or not.", "Try typing ({}) in C mode, it still highlights the {} as an error.  "], "childNum": 5, "tag": "p", "senID": 4, "childList": [{"text": "any", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "{}", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "()", "childNum": 0, "tag": "code", "childList": []}, {"text": "({})", "childNum": 0, "tag": "code", "childList": []}, {"text": "{}", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I don't think this approach can be used to test directly for a ( with an unmatched ), because :syn region doesn't care whether the end-pattern is there or not."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "(", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ")", "childNum": 0, "tag": "code", "childList": []}, {"text": ":syn region", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So you have to find something Python-specific that should never belong inside ().", "Then match against \"(\\_[^)]*the_forbidden_something\".", "I don't know Python enough to know what that might be."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"(\\_[^)]*the_forbidden_something\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["If nothing else, you can do:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n syn match openParen \"(\\_[^)]*\\%$\"\n</code>\n</pre>\n", "senID": 8}, {"text": ["which matches an open paren with no closing parens before the end-of-file.", "This fails if it finds any closing paren at all, which means it won't even catch (()&lt;EOF&gt;."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "(()&lt;EOF&gt;", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["If I understand correctly and you are trying to look at non-matching parenthesis in C code (that was generated in python), I would recommend you install rainbow.vim from Dr Chip's Site.", "This will highlight braces in different colours depending on the levels of indentation and will highlight unmatching braces in red as you have requested.", "A screenshot is at http://img294.imageshack.us/img294/8586/rainbow.jpg."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Dr Chip's Site", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mysite.verizon.net/astronaut/vim/#RAINBOW"}, {"text": "http://img294.imageshack.us/img294/8586/rainbow.jpg", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://img294.imageshack.us/img294/8586/rainbow.jpg"}]}, {"text": ["To install, download rainbow.vim and place in vimfiles/after/syntax/c/ (create this directory if it is not present)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["On Linux, this will be ~/.vim/after/syntax/c/rainbow.vim"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["On Windows, it may be c:\\vim\\vimfiles\\after\\syntax\\c\\rainbow.vim or possibly somewhere else, see \":help runtimepath\"."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Note that there are some plugins that conflict with rainbow.vim, but it's not too hard to make them cooperate."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"senID": 5}, {"text": ["If you are trying to highlight non-matching parenthesis in the python code, you could modify rainbow.vim to use the python syntax clusters instead of the C ones, but this is a little more involved, but you could use something along the lines of (modified version of Dr Chip's rainbow code):"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n syn cluster pyParenGroup contains=pythonString,pythonRawString,pythonEscape,pythonNumber,pythonBuiltin,pythonException\nsyn match pyParenError display ')'\nsyn region  pyParen     transparent matchgroup=hlLevel0 start='(' end=')' contains=@pyParenGroup,pyParen1\nsyn region  pyParen1        transparent matchgroup=hlLevel1 start='(' end=')' contains=@pyParenGroup,pyParen2\nsyn region  pyParen2        transparent matchgroup=hlLevel2 start='(' end=')' contains=@pyParenGroup,pyParen3\nsyn region  pyParen3        transparent matchgroup=hlLevel3 start='(' end=')' contains=@pyParenGroup,pyParen4\nsyn region  pyParen4        transparent matchgroup=hlLevel4 start='(' end=')' contains=@pyParenGroup,pyParen5\nsyn region  pyParen5        transparent matchgroup=hlLevel5 start='(' end=')' contains=@pyParenGroup,pyParen6\nsyn region  pyParen6        transparent matchgroup=hlLevel6 start='(' end=')' contains=@pyParenGroup,pyParen7\nsyn region  pyParen7        transparent matchgroup=hlLevel7 start='(' end=')' contains=@pyParenGroup,pyParen8\nsyn region  pyParen8        transparent matchgroup=hlLevel8 start='(' end=')' contains=@pyParenGroup,pyParen9\nsyn region  pyParen9        transparent matchgroup=hlLevel9 start='(' end=')' contains=@pyParenGroup,pyParen\nhi link pyParenError Error\n\nif &amp;bg == \"dark\"\n    hi default   hlLevel0 ctermfg=red         guifg=red1\n    hi default   hlLevel1 ctermfg=yellow      guifg=orange1      \n    hi default   hlLevel2 ctermfg=green       guifg=yellow1      \n    hi default   hlLevel3 ctermfg=cyan        guifg=greenyellow  \n    hi default   hlLevel4 ctermfg=magenta     guifg=green1       \n    hi default   hlLevel5 ctermfg=red         guifg=springgreen1 \n    hi default   hlLevel6 ctermfg=yellow      guifg=cyan1        \n    hi default   hlLevel7 ctermfg=green       guifg=slateblue1   \n    hi default   hlLevel8 ctermfg=cyan        guifg=magenta1     \n    hi default   hlLevel9 ctermfg=magenta     guifg=purple1\nelse\n    hi default   hlLevel0 ctermfg=red         guifg=red3\n    hi default   hlLevel1 ctermfg=darkyellow  guifg=orangered3\n    hi default   hlLevel2 ctermfg=darkgreen   guifg=orange2\n    hi default   hlLevel3 ctermfg=blue        guifg=yellow3\n    hi default   hlLevel4 ctermfg=darkmagenta guifg=olivedrab4\n    hi default   hlLevel5 ctermfg=red         guifg=green4\n    hi default   hlLevel6 ctermfg=darkyellow  guifg=paleturquoise3\n    hi default   hlLevel7 ctermfg=darkgreen   guifg=deepskyblue4\n    hi default   hlLevel8 ctermfg=blue        guifg=darkslateblue\n    hi default   hlLevel9 ctermfg=darkmagenta guifg=darkviolet\nendif\n</code>\n</pre>\n", "senID": 7}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["As a test, I downloaded gvim70.zip and vim70rt.zip from ftp://ftp.vim.org/pub/vim/pc/ (these are the Windows versions of Vim 7.0).", "I unzipped the two files into a new directory and ran gvim.exe from vim/vim70/gvim.exe.", "I do not have any vim configuration stored in \"C:\\Documents and Settings\", so running this vim is the same as running a 'vanilla' configuration.", "I then downloaded pyprint.py from http://www.amk.ca/python/simple/pyprint.html as a piece of sample code and copied the above code into a file called code.vim.", "In gVim, I entered \":e pyprint.py\".", "It opened in the white-background window, with no syntax highlighting.", "I then entered \":syntax on\", which switched the default syntax highlighting on.", "I added a second ')' character on line 8.", "Finally, I entered \":source code.vim\", which made the second ')' character be highlighted in red."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "do not", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}, {"text": "http://www.amk.ca/python/simple/pyprint.html", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/simple/pyprint.html"}]}, {"text": ["I've also carried out this test on Linux (with Vim 7.2), by entering the following command sequence:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n cd ~\nmv .vimrc old_dot_vimrc\nmv .gvimrc old_dot_gvimrc\nmv .vim old_dot_vim\nvim pyprint.py\n:e pyprint.py\n\" Add extra bracket here!\n:syntax on\n:source code.vim\n</code>\n</pre>\n", "senID": 11}, {"text": ["Again, the second bracket is highlighted and everything else seems normal."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"text": ["As a workaround, I found this indent script on the vim website that supposedly does a better job of indenting Python code.", "When you end a line with unbalanced parens, it indents the next line to line up with the open paren."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this indent script", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.vim.org/scripts/script.php?script_id=974"}]}], [{"text": ["Have you tried using matchit.vim?", "It supports all sorts of matches, and it should work in Python."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "matchit.vim", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.vim.org/scripts/script.php?script%5Fid=39"}, {"text": "should", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}]]