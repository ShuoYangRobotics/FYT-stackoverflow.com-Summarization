[[{"code": "<pre>\n<code>\n $ python\nPython 2.5.3 (r253:67856, Dec 19 2008, 16:52:52) \n[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I'd say Pythonic is another word for idiomatic Python usage"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There's one thing that newer python programmers seem to have difficulty coming to terms with:  duck typing.", "Duck typing isn't quite the same thing as dynamic typing.", "For example, suppose I have an object x that I want to do something with.", "Many developers coming from statically typed languages will be tempted to do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if isinstance(x, someclass):\n    x.somemethod()\nelse:\n    print \"an error has occurred!\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["The problem with this code is that Python has no concept of interfaces.", "So if you want to create an object that can pose as an instance of someclass without directly inheriting it, you're SOL.", "You can also do this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if hasattr(x, somemethod):\n    x.somemethod()\nelse:\n    print \"an error has occurred!\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["But this can be tricky because python's dynamic typing can allow you to call a method even if it's not explicitly set to an attribute (see getattribute for more info)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "getattribute", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["There's an alternative way though:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n try:\n    x.somemethod()\nexcept AttributeError:\n    print \"an error has occurred!\"\n</code>\n</pre>\n", "senID": 6}, {"text": ["Though this use of exceptions will probably horrify the .net programmers out there, this is the most pythonic way to do the code.", "It also just so happens to be the only way that you can be 100% sure that x has or doesn't have a somemethod method."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "only", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["See this: http://faassen.n--tree.net/blog/view/weblog/2005/08/06/0"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://faassen.n--tree.net/blog/view/weblog/2005/08/06/0", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://faassen.n--tree.net/blog/view/weblog/2005/08/06/0"}]}], [{"text": ["See PEP (\"Python Enhancement Proposal\") 8 and Code Like a Pythonista for some recommendations to make your Python code look idiomatic (Pythonic).", "They include formatting recommendations, naming conventions, and code idioms."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PEP (\"Python Enhancement Proposal\") 8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}, {"text": "Code Like a Pythonista", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"}]}], [{"text": ["It is an inverse measurement for the amount of flak you will take when posting python code to a widely read public forum.", "In other words, the less pythonic the more flak."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]