[[{"code": "<pre>\n<code>\n import re\n\"_\".join(l.lower() for l in re.findall('[A-Z][^A-Z]*', 'ThisIsAGoodExample'))\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT:\nActually, this only works, if the first letter is uppercase.", "Otherwise this (taken from here) does the right thing:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1175208/does-the-python-standard-library-have-function-to-convert-camelcase-to-camel-case"}]}, {"code": "<pre>\n<code>\n def convert(name):\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Here's a regex way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nexample = \"ThisIsAGoodExample\"\nprint re.sub( '(?&lt;!^)(?=[A-Z])', '_', example ).lower()\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is saying, \"Find points in the string that aren't preceeded by a start of line, and are followed by an uppercase character, and substitute an underscore.", "Then we lower()case the whole thing."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "aren't", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "are", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"code": "<pre>\n<code>\n example = 'ThisIsAGoodExample'\n# Don't put an underscore before first character.\nnew_example = example[0]\nfor character in example[1:]:\n    # Append an underscore if the character is uppercase.\n    if character.isupper():\n        new_example += '_'\n    new_example += character.lower()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Parse your string, each time you encounter an upper case letter, insert an _ before it and then switch the found character to lower case"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["As no-one else has offered a solution using a generator, here's one:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sample = \"ThisIsAGoodExample\"\n&gt;&gt;&gt; def upperSplit(data):\n...   buff = ''\n...   for item in data:\n...     if item.isupper():\n...       if buff:\n...         yield buff\n...         buff = ''\n...     buff += item\n...   yield buff\n...\n&gt;&gt;&gt; list(upperSplit(sample))\n['This', 'Is', 'A', 'Good', 'Example']\n&gt;&gt;&gt; \"_\".join(upperSplit(sample)).lower()\n'this_is_a_good_example'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This generates a list of items, where each item is \"_\" followed by the lowercased letter if the character was originally an uppercase letter, or the character itself if it wasn't.", "Then it joins them together into a string and removes any leading underscores that might have been added by the process:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print ''.join('_' + char.lower() if char.isupper() else char\n              for char in inputstring).lstrip('_')\n</code>\n</pre>\n", "senID": 1}, {"text": ["BTW, you haven't specified what to do with underscores that are already present in the string.", "I wasn't sure how to handle that case so I punted."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]