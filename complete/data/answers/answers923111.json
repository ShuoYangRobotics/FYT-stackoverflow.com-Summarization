[[{"text": ["Use a list comprehension:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "list comprehension", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html?highlight=list%20comprehension#list-comprehensions"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mat = [[0]*2 for x in xrange(3)]\n&gt;&gt;&gt; mat[0][0] = 1\n&gt;&gt;&gt; mat\n[[1, 0], [0, 0], [0, 0]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or, as a function:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def matrix(rows, cols):\n    return [[0]*cols for x in xrange(rows)]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; cols = 6\n&gt;&gt;&gt; rows = 3\n&gt;&gt;&gt; a = [[0]*cols for _ in [0]*rows]\n&gt;&gt;&gt; a\n[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]\n&gt;&gt;&gt; a[0][3] = 2\n&gt;&gt;&gt; a\n[[0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is also discussed in this answer:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "in this answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/691946/short-and-useful-python-snippets/692458#692458"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lst_2d = [[0] * 3 for i in xrange(3)]\n&gt;&gt;&gt; lst_2d\n[[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n&gt;&gt;&gt; lst_2d[0][0] = 5\n&gt;&gt;&gt; lst_2d\n[[5, 0, 0], [0, 0, 0], [0, 0, 0]]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mat = [[0 for col in range(3)] for row in range(2)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["although depending on what you do with the matrix after you create it, you might take a look at using a NumPy array."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This one is faster than the accepted answer!", "Using xrange(rows) instead of [0]*rows makes no difference."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import repeat\n&gt;&gt;&gt; rows,cols = 3,6\n&gt;&gt;&gt; a=[x[:] for x in repeat([0]*cols,rows)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["A variation that doesn't use itertools and runs around the same speed"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a=[x[:] for x in [[0]*cols]*rows]\n</code>\n</pre>\n", "senID": 3}, {"text": ["From ipython:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n In [1]: from itertools import repeat\n\nIn [2]: rows=cols=10\n\nIn [3]: timeit a = [[0]*cols for _ in [0]*rows]\n10000 loops, best of 3: 17.8 us per loop\n\nIn [4]: timeit a=[x[:] for x in repeat([0]*cols,rows)]\n100000 loops, best of 3: 12.7 us per loop\n\nIn [5]: rows=cols=100\n\nIn [6]: timeit a = [[0]*cols for _ in [0]*rows]\n1000 loops, best of 3: 368 us per loop\n\nIn [7]: timeit a=[x[:] for x in repeat([0]*cols,rows)]\n1000 loops, best of 3: 311 us per loop\n</code>\n</pre>\n", "senID": 5}], [{"text": ["This will work"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n col = 2\nrow = 3\n[[0] * col for row in xrange(row)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What about: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n m, n = 2, 3\n&gt;&gt;&gt; A = [[0]*m for _ in range(n)]\n&gt;&gt;&gt; A\n[[0, 0], [0, 0], [0, 0]]\n&gt;&gt;&gt; A[0][0] = 1\n[[1, 0], [0, 0], [0, 0]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Aka List comprehension; from the docs:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}, {"code": "<pre>\n<code>\n List comprehensions provide a concise way to create lists \nwithout resorting to use of     \nmap(), filter() and/or lambda. \nThe resulting list definition tends often to be clearer    \nthan lists built using those constructs.\n</code>\n</pre>\n", "senID": 3}], [{"text": ["See also this question for generalization to an n-levels nested list / n-dimensional matrix."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2173087/how-to-create-nested-lists-in-python"}]}], [{"text": ["Is there anything itertools can't do?", ":)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import repeat,izip\n&gt;&gt;&gt; rows=3\n&gt;&gt;&gt; cols=6\n&gt;&gt;&gt; A=map(list,izip(*[repeat(0,rows*cols)]*cols))\n&gt;&gt;&gt; A\n[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]\n&gt;&gt;&gt; A[0][3] = 2\n&gt;&gt;&gt; A\n[[0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]\n</code>\n</pre>\n", "senID": 1}]]