[[{"text": ["The low level way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import with_statement\nwith open(filename1) as f1:\n   with open(filename2) as f2:\n      if f1.read() == f2.read():\n         ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["The high level way:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import filecmp\nif filecmp.cmp(filename1, filename2, shallow=False):\n   ...\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you're going for even basic efficiency, you probably want to check the file size first:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if os.path.getsize(filename1) == os.path.getsize(filename2):\n  if open('filename1','r').read() == open('filename2','r').read():\n    # Files are the same.\n</code>\n</pre>\n", "senID": 1}, {"text": ["This saves you reading every line of two files that aren't even the same size, and thus can't be the same."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["(Even further than that, you could call out to a fast MD5sum of each file and compare those, but that's not \"in Python\", so I'll stop here."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["This is a functional-style file comparison function.", "It returns instantly False if the files have different sizes; otherwise, it reads in 4KiB block sizes and returns False instantly upon the first difference:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import with_statement\nimport os\nimport itertools, functools, operator\n\ndef filecmp(filename1, filename2):\n    \"Do the two files have exactly the same contents?\"\n    with open(filename1, \"rb\") as fp1:\n        with open(filename2, \"rb\") as fp2:\n            if os.fstat(fp1.fileno()).st_size != os.fstat(fp2.fileno()).st_size:\n                return False # different sizes \u2234 not equal\n            fp1_reader= functools.partial(fp1.read, 4096)\n            fp2_reader= functools.partial(fp2.read, 4096)\n            cmp_pairs= itertools.izip(iter(fp1_reader, ''), iter(fp2_reader, ''))\n            inequalities= itertools.starmap(operator.ne, cmp_pairs)\n            return not any(inequalities)\n\nif __name__ == \"__main__\":\n    import sys\n    print filecmp(sys.argv[1], sys.argv[2])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Just a different take :)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Since I can't comment on the answers of others I'll write my own."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you use md5 you definitely must not just md5.update(f.read()) since you'll use too much memory."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def get_file_md5(f, chunk_size=8192):\n    h = hashlib.md5()\n    while True:\n        chunk = f.read(chunk_size)\n        if not chunk:\n            break\n        h.update(chunk)\n    return h.hexdigest()\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n f = open(filename1, \"r\").read()\nf2 = open(filename2,\"r\").read()\nprint f == f2\n</code>\n</pre>\n", "senID": 0}], [{"text": ["For larger files you could compute a MD5 or SHA hash of the files."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "MD5", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/md5.html"}, {"href": "http://docs.python.org/library/sha.html", "text": "SHA", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I would use a hash of the file's contents using MD5."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import hashlib\n\ndef checksum(f):\n    md5 = hashlib.md5()\n    md5.update(open(f).read())\n    return md5.hexdigest()\n\ndef is_contents_same(f1, f2):\n    return checksum(f1) == checksum(f2)\n\nif not is_contents_same('foo.txt', 'bar.txt'):\n    print 'The contents are not the same!'\n</code>\n</pre>\n", "senID": 1}]]