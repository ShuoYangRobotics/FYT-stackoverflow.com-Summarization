[[{"text": ["I advise you to use Gmail atom feed"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Gmail atom feed", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.google.com/support/bin/answer.py?hl=en&answer=13465"}]}, {"text": ["It is as simple as this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import urllib\n\nurl = 'https://mail.google.com/mail/feed/atom/'\nopener = urllib.FancyURLopener()\nf = opener.open(url)\nfeed = f.read()\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can then use the feed parse function in this nice article: Check Gmail the pythonic way"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Check Gmail the pythonic way", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://g33k.wordpress.com/2006/07/31/check-gmail-the-python-way/"}]}], [{"text": ["Well, I'm going to go ahead and spell out an imaplib solution as Cletus suggested.", "I don't see why people feel the need to use gmail.py or Atom for this.", "This kind of thing is what IMAP was designed for.", "Gmail.py is particularly egregious as it actually parses Gmail's HTML.", "That may be necessary for some things, but not to get a message count!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import imaplib, re\nconn = imaplib.IMAP4_SSL(\"imap.gmail.com\", 993)\nconn.login(username, password)\nunreadCount = re.search(\"UNSEEN (\\d+)\", conn.status(\"INBOX\", \"(UNSEEN)\")[1][0]).group(1)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Pre-compiling the regex may improve performance slightly."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n import imaplib\nobj = imaplib.IMAP4_SSL('imap.gmail.com','993')\nobj.login('username','password')\nobj.select()\nobj.search(None,'UnSeen')\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Well it isn't a code snippet but I imagine using imaplib and the Gmail IMAP instructions get you most of the way there."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "imaplib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/imaplib.html"}, {"href": "http://mail.google.com/support/bin/answer.py?hl=en&answer=75725", "text": "Gmail IMAP instructions", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Use Gmail.py"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Gmail.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.holovaty.com/writing/278/"}]}, {"code": "<pre>\n<code>\n file = open(\"filename\",\"r\")\nusr = file.readline()\npwd = file.readline()\ngmail = GmailClient()\ngmail.login(usr, pwd)\nunreadMail = gmail.get_inbox_conversations(is_unread=True)\nprint unreadMail\n</code>\n</pre>\n", "senID": 1}, {"text": ["Gets login information from a text file assuming the login name and password are on separate lines."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Once you are logged in (do this manually or with gmail.py) you should use the feed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It is located here:\nhttp://mail.google.com/mail/feed/atom"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://mail.google.com/mail/feed/atom", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.google.com/mail/feed/atom"}]}, {"text": ["It is the way Google does it.", "Here is a link to their js chrome extension:\nhttp://dev.chromium.org/developers/design-documents/extensions/samples/gmail.zip"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://dev.chromium.org/developers/design-documents/extensions/samples/gmail.zip", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://dev.chromium.org/developers/design-documents/extensions/samples/gmail.zip"}]}, {"text": ["You will then be able to parse xml that looks like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;feed version=\"0.3\" xmlns=\"http://purl.org/atom/ns#\"&gt;\n&lt;title&gt;Gmail - Inbox for yourmail@gmail.com&lt;/title&gt;\n&lt;tagline&gt;New messages in your Gmail Inbox&lt;/tagline&gt;\n&lt;fullcount&gt;142&lt;/fullcount&gt;\n</code>\n</pre>\n", "senID": 4}], [{"text": ["For a complete implementation of reading the value from the atom feed:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import urllib2\nimport base64\nfrom xml.dom.minidom import parse\n\ndef gmail_unread_count(user, password):\n    \"\"\"\n        Takes a Gmail user name and password and returns the unread\n        messages count as an integer.\n    \"\"\"\n    # Build the authentication string\n    b64auth = base64.encodestring(\"%s:%s\" % (user, password))\n    auth = \"Basic \" + b64auth\n\n    # Build the request\n    req = urllib2.Request(\"https://mail.google.com/mail/feed/atom/\")\n    req.add_header(\"Authorization\", auth)\n    handle = urllib2.urlopen(req)\n\n    # Build an XML dom tree of the feed\n    dom = parse(handle)\n    handle.close()\n\n    # Get the \"fullcount\" xml object\n    count_obj = dom.getElementsByTagName(\"fullcount\")[0]\n    # get its text and convert it to an integer\n    return int(count_obj.firstChild.wholeText)\n</code>\n</pre>\n", "senID": 1}]]