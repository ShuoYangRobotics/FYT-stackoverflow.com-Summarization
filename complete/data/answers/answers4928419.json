[[{"text": ["This is impossible in Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What you're asking is for this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; o = SomeClass()\n&gt;&gt;&gt; o.foo.bar = 'bar' \n&gt;&gt;&gt; print o.foo.bar\n'bar'\n&gt;&gt;&gt; a = o.baz\nraises AttributeError\n</code>\n</pre>\n", "senID": 2}, {"text": ["This can't be done.", "There's no way to distinguish"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; o.foo.bar = 'bar'\n</code>\n</pre>\n", "senID": 4}, {"text": ["from"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; temp = o.foo\n&gt;&gt;&gt; temp.bar = 'bar'\n</code>\n</pre>\n", "senID": 6}, {"text": ["They're logically equivalent, and under the hood Python is doing the same thing in both cases.", "You can't differentiate them in order to raise an exception in the latter case but not the former."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I'm not sure what you mean.", "The language features already let you do that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class MyClass(object):\n...     pass\n...\n&gt;&gt;&gt; f = MyClass()\n&gt;&gt;&gt; f.foo = 5\n&gt;&gt;&gt; print f.foo\n5\n&gt;&gt;&gt; f.baz\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'MyClass' object has no attribute 'baz'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class AutoVivifier(object):\n    def __getattr__(self, key):\n        value = type(self)()\n        object.__setattr__(self,key,value)\n        return value\n\no=AutoVivifier()\no.foo.bar='baz'\nprint(o.foo.bar)\n# baz\nprint(o.foo.baz)\n# &lt;__main__.AutoVivifier object at 0xb776bb0c&gt;\no.foo.baz='bing'\nprint(o.foo.baz)\n# bing\n</code>\n</pre>\n", "senID": 1}, {"text": ["This doesn't raise any AttributeErrors, but it is easy to tell when an attribute chain has no previously assigned value -- the expression will be an instance of Autovivifier.", "That is, isinstance(o.foo.baz,AutoVivifier) is True."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Autovivifier", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "isinstance(o.foo.baz,AutoVivifier)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I think the implementation is cleaner this way, than if you defined all sorts of special methods like __str__ and __eq__ to raise AttributeErrors."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "__str__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__eq__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I'm still not clear on why you need to raise AttributeErrors in the first place, but perhaps using AutoVivifier you can write functions or methods that achieve your goals, with isinstance(...,AutoVivifier) tests replacing try...except AttributeError blocks."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "isinstance(...,AutoVivifier)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "try...except AttributeError", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n [~/.src/pyusb-1.0.0-a1]\n|4&gt;class SomeClass: pass\n   ...: \n\n[~/.src/pyusb-1.0.0-a1]\n|5&gt;o = SomeClass()\n\n[~/.src/pyusb-1.0.0-a1]\n|6&gt;o.foo='bar'\n\n[~/.src/pyusb-1.0.0-a1]\n|7&gt;print o.foo\nbar\n\n[~/.src/pyusb-1.0.0-a1]\n|8&gt;print o.baz\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n\nAttributeError: SomeClass instance has no attribute 'baz'\n\n[~/.src/pyusb-1.0.0-a1]\n|9&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This is really hacky, but perhaps a start at what you want:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class SomeClass(object):\n    def __init__(self):\n        object.__setattr__(self, \"_SomeClass__children\", {})\n        object.__setattr__(self, \"_SomeClass__empty\", True)\n\n    def __getattr__(self, k):\n        if k not in self.__children:\n            self.__children[k] = SomeClass()\n        return self.__children[k]\n\n    def __setattr__(self, k, v):\n        object.__setattr__(self, \"_SomeClass__empty\", False)\n        object.__setattr__(self, k, v)\n\n    def __str__(self):\n        if not self.__hasvalue():\n            raise AttributeError(\"Never truly existed\")\n        return object.__str__(self)\n\n    def __hasvalue(self):\n        if not self.__empty:\n            return True\n        return any(v.__hasvalue() for v in self.__children.itervalues())\n\no = SomeClass()\no.foo.bar = 'bar'\nprint o.foo.bar\nprint o.foo\nprint o.baz\n</code>\n</pre>\n", "senID": 1}, {"text": ["And output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n bar\n&lt;__main__.SomeClass object at 0x7f2431404c90&gt;\nTraceback (most recent call last):\n  File \"spam.py\", line 29, in &lt;module&gt;\n    print o.baz\n  File \"spam.py\", line 17, in __str__\n    raise AttributeError(\"Never truly existed\")\nAttributeError: Never truly existed\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here's what I've got so far:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def raise_wrapper(wrapped_method=None):\n    def method(tmp_instance, *args, **kawrgs):\n        raise AttributeError(\"'%s' object has no attribute '%s'\" % (\n                type(tmp_instance._parent).__name__, tmp_instance._key))\n    if wrapped_method:\n        raise_wrapper.__doc__ = wrapped_method.__doc__\n    return method\n\n\nclass TemporaryValue(object):\n    def __init__(self, parent, key):\n        self._parent = parent\n        self._key = key\n\n    def __setattr__(self, key, value):\n        if key in ('_parent', '_key'):\n            return object.__setattr__(self, key, value)\n\n        newval = ObjectLike()\n        object.__setattr__(self._parent, self._key, newval)\n        return object.__setattr__(newval, key, value)\n\n    __eq__ = raise_wrapper(object.__eq__)\n    # __del__ = raise_wrapper()\n    # __repr__ = raise_wrapper(object.__repr__)\n    __str__ = raise_wrapper(object.__str__)\n    __lt__ = raise_wrapper(object.__lt__)\n    __le__ = raise_wrapper(object.__le__)\n    __eq__ = raise_wrapper(object.__eq__)\n    __ne__ = raise_wrapper(object.__ne__)\n    __cmp__ = raise_wrapper()\n    __hash__ = raise_wrapper(object.__hash__)\n    __nonzero__ = raise_wrapper()\n    __unicode__ = raise_wrapper()\n    __delattr__ = raise_wrapper(object.__delattr__)\n    __call__ = raise_wrapper(object.__call__)\n\n\nclass ObjectLike(object):\n    def __init__(self):\n        pass\n\n    def __getattr__(self, key):\n        newtmp = TemporaryValue(self, key)\n        object.__setattr__(self, key, newtmp)\n        return newtmp\n\n    def __str__(self):\n        return str(self.__dict__)\n\n\no = ObjectLike()\no.foo.bar = 'baz'\nprint o.foo.bar\nprint o.not_set_yet\nprint o.some_function()\nif o.unset &gt; 3: \n    print \"yes\" \nelse:\n    print \"no\"\n</code>\n</pre>\n", "senID": 1}]]