[[{"text": ["There are two important one line idioms in Python that help make this \"straightforward\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The first idiom, use zip().", "From the Python documents:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "zip()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#zip"}]}, {"text": ["So applying to your example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; num_str = '5,4,2,4,1,0,3,0,5,1,3,3,14,32,3,5'\n&gt;&gt;&gt; zip(*[iter(num_str.split(\",\"))]*2)\n[('5', '4'), ('2', '4'), ('1', '0'), ('3', '0'), ('5', '1'), \n('3', '3'), ('14', '32'), ('3', '5')]\n</code>\n</pre>\n", "senID": 3}, {"text": ["That produces tuples each of length 2. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If you want the length of the sub elements to be different:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; zip(*[iter(num_str.split(\",\"))]*4)\n[('5', '4', '2', '4'), ('1', '0', '3', '0'), ('5', '1', '3', '3'), \n('14', '32', '3', '5')]\n</code>\n</pre>\n", "senID": 6}, {"text": ["The second idiom is list comprehensions.", "If you want sub elements to be lists, wrap in a comprehension:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "list comprehensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [list(t) for t in zip(*[iter(num_str.split(\",\"))]*4)]\n[['5', '4', '2', '4'], ['1', '0', '3', '0'], ['5', '1', '3', '3'], \n['14', '32', '3', '5']]\n&gt;&gt;&gt; [list(t) for t in zip(*[iter(num_str.split(\",\"))]*2)]\n[['5', '4'], ['2', '4'], ['1', '0'], ['3', '0'], ['5', '1'], ['3', '3'], \n['14', '32'], ['3', '5']]\n</code>\n</pre>\n", "senID": 8}, {"text": ["Any sub element groups that are not complete will be truncated by zip().", "So if your string is not a multiple of 2, for example, you will loose the last element. "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["If you want to return sub elements that are not complete (ie, if your num_str is not a multiple of the sub element's length) use a slice idiom:"], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "num_str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/release/2.3.5/whatsnew/section-slices.html", "text": "slice idiom", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l=num_str.split(',')\n&gt;&gt;&gt; [l[i:i+2] for i in range(0,len(l),2)]\n[['5', '4'], ['2', '4'], ['1', '0'], ['3', '0'], ['5', '1'], \n['3', '3'], ['14', '32'], ['3', '5']]\n&gt;&gt;&gt; [l[i:i+7] for i in range(0,len(l),7)]\n[['5', '4', '2', '4', '1', '0', '3'], ['0', '5', '1', '3', '3', '14', '32'], \n['3', '5']]\n</code>\n</pre>\n", "senID": 11}, {"text": ["If you want each element to be an int, you can apply that prior to the other transforms discussed here:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; nums=[int(x) for x in num_str.split(\",\")]\n&gt;&gt;&gt; zip(*[iter(nums)]*2)\n# etc etc etc\n</code>\n</pre>\n", "senID": 13}, {"text": ["As pointed out in the comments, with Python 2.4+, you can also replace the list comprehension with a Generator Expression by replacing the [ ] with ( ) as in:"], "childNum": 3, "tag": "p", "senID": 14, "childList": [{"text": "Generator Expression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0289/"}, {"text": "[ ]", "childNum": 0, "tag": "code", "childList": []}, {"text": "( )", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; nums=(int(x) for x in num_str.split(\",\"))\n &gt;&gt;&gt; zip(nums,nums)\n [(5, 4), (2, 4), (1, 0), (3, 0), (5, 1), (3, 3), (14, 32), (3, 5)]\n # or map(list,zip(nums,nums)) for the list of lists version...\n</code>\n</pre>\n", "senID": 15}, {"text": ["If your string is long, and you know that you only need 2 elements, this is more efficient. "], "childNum": 0, "tag": "p", "senID": 16, "childList": []}], [{"text": ["One option:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; num_str = '5,4,2,4,1,0,3,0,5,1,3,3,4,3,3,5'\n&gt;&gt;&gt; l = num_str.split(',')\n&gt;&gt;&gt; zip(l[::2], l[1::2])\n[('5', '4'), ('2', '4'), ('1', '0'), ('3', '0'), ('5', '1'), ('3', '3'), ('4', '3'), ('3', '5')]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Reference: str.split(), zip(), General information about sequence types and slicing"], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "Reference", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/stdtypes.html#str.split", "text": "str.split()", "childNum": 1, "tag": "a", "childList": [{"text": "str.split()", "tag": "code"}]}, {"text": "str.split()", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/functions.html#zip", "text": "zip()", "childNum": 1, "tag": "a", "childList": [{"text": "zip()", "tag": "code"}]}, {"text": "zip()", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange", "text": "General information about sequence types and slicing", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["If you actually want integers, you could convert the list to integers first using map:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = map(int, num_str.split(','))\n</code>\n</pre>\n", "senID": 4}, {"text": ["Explanation:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Explanation:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["split creates a list of the single elements.", "The trick is the slicing: the syntax is list[start:end:step].", "l[::2] will return every second element starting from the first one (so the first, third,...), whereas the second slice l[1::2] returns every second element from the second one (so the second, forth, ...)."], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "split", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list[start:end:step]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "l[::2]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "l[1::2]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Update: If you really want lists, you could use map again on the result list:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; xy_list = map(list, xy_list)\n</code>\n</pre>\n", "senID": 8}, {"text": ["Note that @Johnsyweb's answer is probably faster as it seems to not do any unnecessary iterations.", "But the actual difference depends of course on the size of the list."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "@Johnsyweb's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/5083194/python-convert-5-4-2-4-1-0-into-5-4-2-4-1-0/5083312#5083312"}]}], [{"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nfrom itertools import izip\n\ndef pairwise(iterable):\n    \"s -&gt; (s0,s1), (s2,s3), (s4, s5), ...\"\n    a = iter(iterable)\n    return izip(a, a)\n\ns = '5,4,2,4,1,0,3,0,5,1,3,3,4,3,3,5'\nfields = s.split(',')\nprint [[int(x), int(y)] for x,y in pairwise(fields)]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Taken from @martineau's answer to my question, which I have found to be very fast."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "@martineau's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/4356329/creating-a-python-dictionary-from-a-line-of-text/4356415#4356415"}, {"href": "http://stackoverflow.com/q/4356329/78845", "text": "my question", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Output: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [[5, 4], [2, 4], [1, 0], [3, 0], [5, 1], [3, 3], [4, 3], [3, 5]]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["First, use split to make a list of numbers (as in all of the other answers)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "split", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n num_list = num_str.split(\",\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then, convert to integers:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n num_list = [int(i) for i in num_list]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then, use the itertools groupby recipe:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "itertools groupby", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from itertools import izip_longest\ndef grouper(n, iterable, fillvalue=None):\n   \"grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx\"\n   args = [iter(iterable)] * n\n   return izip_longest(fillvalue=fillvalue, *args)\n\npair_list = grouper(2, num_list)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Of course, you can compress this into a single line if you're frugal:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n pair_list = grouper(2, [int(i) for i in num_str.split(\",\")]\n</code>\n</pre>\n", "senID": 7}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; num_str = '5,4,2,4,1,0,3,0,5,1,3,3,4,3,3,5'\n&gt;&gt;&gt; inums = iter([int(x) for x in num_str.split(',')])\n&gt;&gt;&gt; [[x, inums.next()] for x in inums]\n[[5, 4], [2, 4], [1, 0], [3, 0], [5, 1], [3, 3], [4, 3], [3, 5]]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can shorten the first part (converting \"1,2,3\" to [1, 2, 3]) by using the split function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n num_list = num_str.split(\",\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["There might be an easier way to get pairs, but I'd do something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n xy_pairs = []\nfor i in range(0, len(num_list), 2):\n    x = num_list[i]\n    y = num_list[i + 1]\n    xy_pairs.append([x, y])\n</code>\n</pre>\n", "senID": 3}, {"text": ["Also, since these are all lists of a defined length (2), you should probably use a tuple:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n xy_pairs.append((x, y))\n</code>\n</pre>\n", "senID": 5}], [{"text": ["EDIT: @drewk cleaned this up to handle even or odd length lists:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f = '5,4,2,4,1,0,3,0,5,1,3,3,14,32,3,5'\n&gt;&gt;&gt; li = [int(n) for n in f.split(',')]\n&gt;&gt;&gt; [li[i:i+2] for i in range(0, len(li), 2)]\n[[5, 4], [2, 4], [1, 0], [3, 0], [5, 1], [3, 3], [14, 32], [3, 5], [7]]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It may be interesting to have a generator.", "Here's a generator expression:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nch = '5,4,2,4,1,0,3,0,5,1,3,3,14,32,3,5'\ngenexp = ( map(int,ma.groups()) for ma in re.finditer('(\\d+)\\s*,\\s*(\\d+)',ch) )\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n #declare the string of numbers\nstr_nums = '5,4,2,4,1,0,3,0,5,1,3,3,14,32,3,5'\n\n#zip two lists: the even elements with the odd elements, casting the strings to integers\nzip([int(str_nums.split(',')[i]) for i in range(0,len(str_nums.split(',')),2)],[int(str_nums.split(',')[i]) for i in range(1,len(str_nums.split(',')),2)])\n\n\"\"\"\nOf course you would want to clean this up with some intermediate variables, but one liners like this is why I love Python :)\n\"\"\"\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Maybe this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = \"0,1,2,3,4,5,6,7,8,9\".split(\",\")\n[[int(a.pop(0)), int(a.pop(0))] for x in range(len(a)/2)]\n</code>\n</pre>\n", "senID": 1}]]