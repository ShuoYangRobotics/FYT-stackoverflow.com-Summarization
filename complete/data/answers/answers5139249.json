[[{"text": ["You have 3 or 4 or 5 problems ... but repr() and unicodedata.name() are your friends; they unambiguously show you exactly what you have got, without the confusion engendered by people with different console encodings communicating the results of print fubar."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "repr()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "unicodedata.name()", "childNum": 0, "tag": "code", "childList": []}, {"text": "print fubar", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Summary: either (a) you start with a unicode object and apply the unquote function to that or (b) you start off with a str object and your console encoding is not UTF-8."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If as you say you start off with a unicode object:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s0 = u'%C3%A7%C3%B6asd+fjkls%25asd'\n&gt;&gt;&gt; print repr(s0)\nu'%C3%A7%C3%B6asd+fjkls%25asd'\n</code>\n</pre>\n", "senID": 3}, {"text": ["this is an accidental nonsense.", "If you apply urllibX.unquote_YYYY() to it, you get another nonsense unicode object (u'\\xc3\\xa7\\xc3\\xb6asd+fjkls%asd') which would cause your shown symptoms when printed.", "You should convert your original unicode object to a str object immediately:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "urllibX.unquote_YYYY()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "u'\\xc3\\xa7\\xc3\\xb6asd+fjkls%asd'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s1 = s0.encode('ascii')\n&gt;&gt;&gt; print repr(s1)\n'%C3%A7%C3%B6asd+fjkls%25asd'\n</code>\n</pre>\n", "senID": 5}, {"text": ["then you should unquote it:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import urllib2\n&gt;&gt;&gt; s2 = urllib2.unquote(s1)\n&gt;&gt;&gt; print repr(s2)\n'\\xc3\\xa7\\xc3\\xb6asd+fjkls%asd'\n</code>\n</pre>\n", "senID": 7}, {"text": ["Looking at the first 4 bytes of that, it's encoded in UTF-8.", "If you do print s2, it will look OK if your console is expecting UTF-8, but if it's expecting ISO-8859-1 (aka latin1) you'll see your symptomatic rubbish (first char will be A-tilde).", "Let's park that thought for a moment and convert it to a Unicode object:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "print s2", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s3 = s2.decode('utf8')\n&gt;&gt;&gt; print repr(s3)\nu'\\xe7\\xf6asd+fjkls%asd'\n</code>\n</pre>\n", "senID": 9}, {"text": ["and inspect it to see what we've actually got:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import unicodedata\n&gt;&gt;&gt; for c in s3[:6]:\n...     print repr(c), unicodedata.name(c)\n...\nu'\\xe7' LATIN SMALL LETTER C WITH CEDILLA\nu'\\xf6' LATIN SMALL LETTER O WITH DIAERESIS\nu'a' LATIN SMALL LETTER A\nu's' LATIN SMALL LETTER S\nu'd' LATIN SMALL LETTER D\nu'+' PLUS SIGN\n</code>\n</pre>\n", "senID": 11}, {"text": ["Looks like what you said you expected.", "Now we come to the question of displaying it on your console.", "Note: don't freak out when you see \"cp850\"; I'm doing this portably and just happen to be doing this in a Command Prompt on Windows."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.stdout.encoding\n'cp850'\n&gt;&gt;&gt; print s3\n\u00e7\u00f6asd+fjkls%asd\n</code>\n</pre>\n", "senID": 13}, {"text": ["Note: the unicode object was explicitly decoded using sys.stdout.encoding.", "Fortunately all the unicode characters are representable in that encoding (and cp1252 and latin1)."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}], [{"text": ["Try urllib2 once more:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "urllib2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print urllib2.unquote('%C3%A7%C3%B6asd+fjkls%25asd')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["'%C3%A7%C3%B6asd+fjkls%25asd' - this is not a unicode string. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is a url-encoded string.", "Use urllib2.unquote() instead."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You are using unquote_plus method which is taking space into account and converting to +.", "Just use unquote method and you should be fine."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "unquote_plus", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "space", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "unquote", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import urllib\n&gt;&gt;&gt; print urllib.unquote('%C3%A7%C3%B6asd+fjkls%25asd')\n\u00e7\u00f6asd+fjkls%asd\n&gt;&gt;&gt; print urllib.unquote_plus('%C3%A7%C3%B6asd+fjkls%25asd')\n\u00e7\u00f6asd fjkls%asd\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You have a double problem: your string is unicode encoded and contains caracter urlencoded.", "Some match.", "You can normalize your string to ascci to be sure it won't be interpreted incorrectly:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = '%C3%A7%C3%B6asd+fjkls%25asd' # ascii string\n&gt;&gt;&gt; print urllib2.unquote(s) # works as expected\n\u00e7\u00f6asd+fjkls%asd\n&gt;&gt;&gt; s = u'%C3%A7%C3%B6asd+fjkls%25asd' # unicode string\n&gt;&gt;&gt; print urllib2.unquote(s) # decode stuff that it shouldn't\n\u00c3\u00a7\u00c3\u00b6asd+fjkls%asd\n&gt;&gt;&gt; print urllib2.unquote(s.encode('ascii')) # encode the unicode string to ascii: works!\n\u00e7\u00f6asd+fjkls%asd\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Using either unquote or unquote_plus will give you a byte string.", "If you want a Unicode string then you have to decode the byte string to unicode:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "unquote", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "unquote_plus", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print(urllib.unquote_plus('%C3%A7%C3%B6asd+fjkls%25asd').decode('utf8'))\n\u00e7\u00f6asd fjkls%asd\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Compared with:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print(urllib.unquote_plus('%C3%A7%C3%B6asd+fjkls%25asd'))\n\u00c3\u00a7\u00c3\u00b6asd fjkls%asd\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note that your input string must be a byte string: if you pass unicode to unquote/unquote_plus then you'll get a bit of a mess.", "If this is the case then encode it first:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "unquote/unquote_plus", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print(urllib.unquote_plus(u'%C3%A7%C3%B6asd+fjkls%25asd'.encode('ascii')).decode('utf8'))\n\u00e7\u00f6asd fjkls%asd\n</code>\n</pre>\n", "senID": 5}]]