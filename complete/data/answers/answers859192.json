[[{"text": ["This is a pretty common need...", "I can't imagine wading through a models.py file that's 10,000 lines long :-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can split up the models.py file (and views.py too) into a pacakge.", "In this case, your project tree will look like:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "models.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n /my_proj\n    /myapp\n        /models\n            __init__.py\n            person.py\n</code>\n</pre>\n", "senID": 2}, {"text": ["The __init__.py file makes the folder into a package.", "The only gotcha is to be sure to define an inner Meta class for your models that indicate the app_label for the model, otherwise Django will have trouble building your schema:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Meta", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class Person(models.Model):\n    name = models.CharField(max_length=128)\n\n    class Meta:\n        app_label = 'myapp'\n</code>\n</pre>\n", "senID": 4}, {"text": ["Once that's done, import the model in your __init__.py file so that Django and sync db will find it:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from person import Person\n</code>\n</pre>\n", "senID": 6}, {"text": ["This way you can still do from myapp.models import Person"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "from myapp.models import Person", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["\"I have at least 20 models\" -- this is probably more than one Django \"app\" and is more like a Django \"project\" with several small \"apps\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I like to partition things around topics or subject areas that have a few (1 to 5) models.", "This becomes a Django \"app\" -- and is the useful unit of reusability."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The overall \"project\" is a collection of apps that presents the integrated thing built up of separate pieces."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This also helps for project management since each \"app\" can become a sprint with a release at th end."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You can separate them into separate apps.", "To use a model in one app from another app you just import it in the same way you would import django.contrib apps."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "can", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Great post - both the instructions on how to split up a model file into smaller parts and the discussion/debate regarding when to use multiple apps."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I found I had to move my fixture data into the models package so it would be reloaded when running syncdb.", "Just move the \"fixtures\" folder into the new \"models\" folder and it should work.", "Just thought I would share that detail in case its helpful to someone else like me who is relatively new to django."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can break up the models over multiple files.", "This goes for views as well. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You can split them into separate files and simply have imports at the top of your main models.py field. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "can", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Whether you'd really want to is another question."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "want", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Having 20 models in one app might be a sign that you should break it up in smaller ones."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The purpose of a Django app is to have a small single-purpose piece of code, that fits nicelly together."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So, if you had a e-commerce site, you might have a shopping_cart app, a billing app, and so on. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Keep in mind that there is really no problem in apps depending on each other (although it's always better if they can be decoupled), but you should not have an app doing two very distinct things."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The article Django tips: laying out an application might help you.", "As always, take everything you read with a grain of salt (including this answer)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Django tips: laying out an application", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.b-list.org/weblog/2006/sep/10/django-tips-laying-out-application/"}]}]]