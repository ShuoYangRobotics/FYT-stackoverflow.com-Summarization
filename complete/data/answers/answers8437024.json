[[{"text": ["some quick and dirty benchmarks from ipython"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [1]: a=range(10000)\n\nIn [2]: import numpy \n\nIn [3]: timeit [-i for i in a]\n1000 loops, best of 3: 576 us per loop\n\nIn [4]: timeit map(lambda i:-i, a)\n1000 loops, best of 3: 1.68 ms per loop\n\nIn [5]: timeit list(-1*numpy.array(a))\n100 loops, best of 3: 2.53 ms per loop\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that if a can be a numpy array you don't need to wast time on the conversion"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n In [6]: a = numpy.array(a)\n\nIn [7]: timeit -- -a\n100000 loops, best of 3: 15.4 us per loop\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Use Python's map functionality"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "map", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#map"}]}, {"code": "<pre>\n<code>\n a[:] = map(lambda x: -x, a)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here's the description of the map function from the above link:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can use the numpy library:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list(-1*numpy.array(a))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Well it depends on what you mean by without any loops.", "In case you just want to avoid explicit loops like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = [ -x for x in a ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["you could use the map function, that would loop for you."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = map( lambda x:-x, a)\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n import operator\na = map(operator.neg, a)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Without knowing the exact reason why loop is not required and knowing that there is no other efficient way to negate a list here is my super fast solution (I have no knowledge of the context so this may not work)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class nlist(object):\n    def __init__(self, l):\n        self._list = l\n\n    def __getitem__(self, key):\n        return -self._list[key]\n\n    def __iter__(self):\n        for i in self._list:\n            yield -i\n\n\nnl = nlist([1,2,3,4])\nfor i in nl:\n    print i\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You cannot do it without loop but you can hide the fact.    "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n map(lambda x: -x, a)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n a = [-a[0], -a[1], -a[2], -a[3]]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Now the problem is that this only works if a has exactly 4 items.", "To generalise to different number of items...well that's what loops are for."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]