[[{"text": ["This is because the way you have written it, bar is a class variable rather than an instance variable."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "bar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["To define an instance variable, bind it in the constructor:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n  def __init__(self):\n    self.bar = []\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note that it now belongs to a single instance of Foo (self) rather than the Foo class, and you will see the results you expect when you assign to it."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "Foo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "childList": []}, {"text": "Foo", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["When you declare an element in the class like that it is shared by all instances of the class.", "To make a proper class member that belongs to each instance, separately, create it in __init__ like the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n    def __init__(self):\n        self.bar = []\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In the beginning, bar is a class variable and it is shared between a and b, both a.bar and b.bar refer to the same object."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "bar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "a.bar", "childNum": 0, "tag": "code", "childList": []}, {"text": "b.bar", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["When you assign a new value to a.bar, this does not overwrite the class variable, it adds a new instance variable to the a object, hiding the class variable when you access a.bar.", "If you delete a.bar (the instance variable), then a.bar resolves again to the class variable."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "a.bar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "a.bar", "childNum": 0, "tag": "code", "childList": []}, {"text": "a.bar", "childNum": 0, "tag": "code", "childList": []}, {"text": "a.bar", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["b.bar on the other hand always refers to the class variable, it's not influenced by the additional bar on the a object or any values assigned to that."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "b.bar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "bar", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["To set the class variable you can access it through the class itself:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n Foo.bar = 1\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; class Foo(object):\n...   bar = []\n...\n</code>\n</pre>\n", "senID": 0}, {"text": ["bar is a shared class variable, not an instance variable.", "I believe that deals with most of your confusion.", "To make it a instance var, define it in class's __init__ per the other answers."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "bar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = Foo()\n&gt;&gt;&gt; b = Foo()\n&gt;&gt;&gt; a.bar.append(1)\n&gt;&gt;&gt; b.bar\n[1]\n</code>\n</pre>\n", "senID": 2}, {"text": ["This is the proof of that."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a.bar = 1\n&gt;&gt;&gt; a.bar\n1\n&gt;&gt;&gt; b.bar\n[1]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now you've redefined a.bar as a instance variable.", "That's what happens when you define variables externally by default."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "a.bar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a.bar = []\n&gt;&gt;&gt; a.bar\n[]\n&gt;&gt;&gt; b.bar\n[1]\n&gt;&gt;&gt; del a.bar\n&gt;&gt;&gt; a.bar\n[1]\n</code>\n</pre>\n", "senID": 6}, {"text": ["Same again.", "b.bar is still the shared class variable."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "b.bar", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["As others have said the code as written creates a class variable rather than an instance variable.", "You need to assign in __init__ to create an instance variable."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Hopefully this annotated copy of your code is helpful in explaining what's going on at each stage:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Foo(object):\n...   bar = []          # defines a class variable on Foo (shared by all instances)\n...\n&gt;&gt;&gt; a = Foo()\n&gt;&gt;&gt; b = Foo()\n&gt;&gt;&gt; a.bar.append(1)     # appends the value 1 to the previously empty list Foo.bar\n&gt;&gt;&gt; b.bar               # returns the value of the class variable Foo.bar\n[1]\n&gt;&gt;&gt; a.bar = 1           # binds 1 to the instance variable a.bar, masking the access\n&gt;&gt;&gt; a.bar               # you previously had to the class variable through a.bar\n1\n&gt;&gt;&gt; b.bar               # b doesn't have an instance variable 'bar' so this still\n[1]                     # returns the class variable\n&gt;&gt;&gt; a.bar = []          # bind a's instance variable to to an empty list\n&gt;&gt;&gt; a.bar\n[]\n&gt;&gt;&gt; b.bar               # b doesn't have an instance variable 'bar' so this still\n[1]                     # returns the class variable\n&gt;&gt;&gt; del a.bar           # unbinds a's instance variable unmasking the class variable\n&gt;&gt;&gt; a.bar               # so a.bar now returns the list with 1 in it.\n[1]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Also, printing out the value of Foo.bar (the class variable accessed via the class rather than via an instance) after each of your statements might help clarify what is going on."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Foo.bar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["On a related note, you should be aware of this pitfall that you might see sometime soon:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class A:\n   def __init__(self, mylist = []):\n      self.mylist = mylist\n\n\na = A()\na2 = A()\n\na.mylist.append(3)\nprint b.mylist #prints [3] ???\n</code>\n</pre>\n", "senID": 1}, {"text": ["This confuses a lot of folks and has to do with how the code is interpreted.", "Python actually interprets the function headings first, so it evaluates __init__(self, mylist = []) and stores a reference to that list as the default parameter.", "That means that all instances of A will (unless provided their own list) reference the original list.", "The correct code for doing such a thing would be"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "__init__(self, mylist = [])", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class A:\n   def __init__(self, mylist=None):\n      if mylist:\n         self.mylist = mylist\n      else:\n         self.mylist = []\n</code>\n</pre>\n", "senID": 3}, {"text": ["or if you want a shorter expression you can use the ternary syntax:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n self.mylist = mylist if mylist else []\n</code>\n</pre>\n", "senID": 5}]]