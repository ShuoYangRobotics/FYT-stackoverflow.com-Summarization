[[{"text": ["I am not sure what you are trying do to.", "The global keyword is intended to import a global name into the current scope, not to make a local name global."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You are having two distinct problems and one of them occurs twice.", "The first is that you are attempting to use global on elements of a list which is useless.", "You can already do:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def func():\n    list_ab[0] = 'modified'\n    list_ab[1] = 'modified'\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will change the values which are referenced by list_ab which is further than your code is getting now.", "It works because you are not changing the binding represented by list_ab and so it doesn't need to be global.", "You can already read a global indexing and into it is just an item lookup and doesn't (in itself) overwrite any bindings.", "However it will not actually change which values are referenced by a and b"], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "list_ab", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list_ab", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["The second is that  when you bind the first and second indices of list_ab to a and b, it creates entirely new bindings so that changing the values of the bindings in the list does nothing to change the values referenced by a and b.", "If you want to do that, you need to do it directly."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "list_ab", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def func():\n    global a, b\n    a = 'modified'\n    b = 'modified'\n</code>\n</pre>\n", "senID": 4}, {"text": ["You are running into the second problem again when you try to modify the elements of list_ab by iterating over them.", "You can see it more clearly with the code"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "list_ab", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def func():\n    list_ab = ['a', 'b']\n    for item in list_ab:\n        item = 'modified'\n    print list_ab        # prints ['a', 'b']\n</code>\n</pre>\n", "senID": 6}, {"text": ["Again, this occurs because you are creating a new binding to the value and then modifying that binding instead of the original one."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "that", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["If you need to modify a list in place while iterating over it you can do"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n def func():\n    list_ab = ['a', 'b']\n    for i in xrange(len(list_ab)): \n        list_ab[i] = 'modified'\n</code>\n</pre>\n", "senID": 9}, {"text": ["So as things currently stand to update a, b and list_ab, and keeping your current patterns (i.e.", "not introducing comprehensions), you need to do:"], "childNum": 3, "tag": "p", "senID": 10, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "list_ab", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def func():\n    global a, b\n    for i in xrange(len(list_ab)):\n        list_ab[i] = 'modified'\n    a = 'modified'\n    b = 'modified'\n    print list_ab\n    print a, b\n</code>\n</pre>\n", "senID": 11}, {"text": ["That looks pretty ugly.", "Why do you need to keep them as free variables and in a list?", "Isn't just a list good enough?", "If you need to access them by name then you can use a dictionary:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n dict_ab = {'a': 'a', 'b': 'b'}\nfor key in dict_ab:\n    dict_ab[key] = modified\n\nprint dict_ab['a']\nprint dict_ab['b']\n</code>\n</pre>\n", "senID": 13}], [{"text": ["As I said in my comment to your question, list_ab does not contain references to mouse and background.", "You can simulate that to some degree in this case by putting their names in the list, like this:"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "list_ab", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "mouse", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "background", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "simulate", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "names", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n mouse = \"a\"\nbackground = \"b\"\n\nlist_ab = ['mouse', 'background']\n\ndef func():\n    for name in list_ab:\n        globals()[name] = \"modified\"\n    print mouse # must be \"modified\" not \"a\"\n    print background # must be \"modified\" not \"b\"\n\nfunc()\n# modified\n# modified\n</code>\n</pre>\n", "senID": 1}, {"text": ["globals() returns a dictionary-like object that represents the non-local name bindings at that point in your script/modules's execution.", "It's important to note that list_ab is not changed by the for loop in func().", "Also you should be aware that this is only an illustration of one simple way to make your sample code work like you wanted, not of an especially good or generic way to accomplish such things."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "globals()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list_ab", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "func()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["I'm not sure what you are trying to do either, but here's an example of using global:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n value = 7\n\ndef display():\n    print value # global values are read-only any time\n\ndef increment():\n    global value # must declare global to write it\n    value += 1\n\ndef local():\n    value = 9 # this is a local value\n    print value\n\nincrement() # changes global value to 8\ndisplay()   # displays it\nlocal()     # changes local value to 9 and displays it\nprint value # displays global value (still 8)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The issue here is that you're trying to update variables in-place, but your functions return new instances.", "Try something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def main ():\n    converted_images = []\n    for image in [mouse, background]:\n        converted_images.append(Image_loader(img))\n    # now re-assign the pygame surfaces to the old names\n    background, mouse = converted_images\n</code>\n</pre>\n", "senID": 1}, {"text": ["And if you want to be especially concise, here's a one-liner that does the same thing:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n background, mouse = [Image_loader(img) for img in [background, mouse]]\n</code>\n</pre>\n", "senID": 3}, {"text": ["But really, if you only have two images, it might make more sense to do this explicitly:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n background = Image_loader(background)\nmouse = Image_loader(mouse)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Your problem is that Python works not the way you think.", "So I will try to explain what's going on in your code, line by line."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n mouse = \"a\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Assigns the string \"a\" to the name mouse."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "mouse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n background = \"b\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["Assigns the string \"b\" to the name background."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "background", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n list_ab = [mouse, background]\n</code>\n</pre>\n", "senID": 5}, {"text": ["Assigns two objects, referenced by names mouse and background, to the list list_ab.", "As we already know, they are constants \"a\" and \"b\".", "So you can just write:"], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "mouse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "background", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "list_ab", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n list_ab = [\"a\", \"b\"]\n</code>\n</pre>\n", "senID": 7}, {"text": ["Now the loop"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n for item in list_ab:\n</code>\n</pre>\n", "senID": 9}, {"text": ["assigns each object in the list to the name item.", "For the first loop iteration, it means item = \"a\"."], "childNum": 3, "tag": "p", "senID": 10, "childList": [{"text": "item", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "item = \"a\"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The line"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n global item # I want to modify the GLOBAL item, which is mouse ad background\n</code>\n</pre>\n", "senID": 12}, {"text": ["doesn't make sense, because it tries to tell Python that the name item is global, while there is no such global variable declared."], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "item", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["And for the most confusing behavior on the line"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n item = \"modified\"\n</code>\n</pre>\n", "senID": 15}, {"text": ["you should just understand that while it assigns the string \"modified\" to the name item, strings \"a\" and \"b\" are still the same, and still assigned to the list list_ab (and names mouse and background, which you didn't touch either). "], "childNum": 4, "tag": "p", "senID": 16, "childList": [{"text": "item", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list_ab", "childNum": 0, "tag": "code", "childList": []}, {"text": "mouse", "childNum": 0, "tag": "code", "childList": []}, {"text": "background", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The name item itself lives only in the scope where it was declared, when the \"for\" loop ends, it's destructed.", "It is also reassigned every iteration with the next item from the list_ab."], "childNum": 2, "tag": "p", "senID": 17, "childList": [{"text": "item", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list_ab", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["To sum it up:"], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "To sum it up:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["If you want to assign \"modified\" string to the items in the list, do it directly:"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"code": "<pre>\n<code>\n list_ab[0] = \"modified\"\nlist_ab[1] = \"modified\"\n</code>\n</pre>\n", "senID": 20}, {"text": ["If you need to change variable declared in the global scope, do this:"], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"code": "<pre>\n<code>\n mouse = \"a\"\n\ndef func():\n    global mouse   # tell Python that you want to work with global variable\n    mouse = \"modified\"\n\nfunc()\nprint mouse # now mouse is \"modified\"\n</code>\n</pre>\n", "senID": 22}, {"text": ["Example based on the first revision of the question:"], "childNum": 1, "tag": "p", "senID": 23, "childList": [{"text": "Example based on the first revision of the question:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Instead of"], "childNum": 0, "tag": "p", "senID": 24, "childList": []}, {"code": "<pre>\n<code>\n background = g_base(\"bg.jpg\") # g_base class instance\nmouse = g_base(\"mouse.png\",alpha=1) # g_base class instance\n\nimgs_to_load = [mouse, background]\n\ndef Image_loader (img):\n    # ..... code to load the image and convert it into pygame surface...\n    return img_load\n\ndef main ():\n    for image in img_to_load:\n        global image\n        image = Image_loader (img)\n        print image # if I print image, it is a pygame surface\n\n    print background # But here, outside the loop, image is still a g_base instance ?!?!\n    print mouse # \" \"   \n\nmain()\n</code>\n</pre>\n", "senID": 25}, {"text": ["You can do:"], "childNum": 0, "tag": "p", "senID": 26, "childList": []}, {"code": "<pre>\n<code>\n imgs_to_load = [g_base(\"bg.jpg\"), g_base(\"mouse.png\",alpha=1)] # list with a g_base class instances\n\ndef Image_loader(img):\n    # ..... code to load the image and convert it into pygame surface...\n    return img_load\n\ndef main ():\n    imgs_in_pygame_format = [] # create an empty list\n    for image in imgs_to_load:\n        loaded_image = Image_loader(image) \n        imgs_in_pygame_format.append(loaded_image) # add to the list \n\n    for image in imgs_in_pygame_format:\n        print image # every image in the list is a pygame surface\n\n    # or\n    print image[0]\n    print image[1]\n\nmain()\n</code>\n</pre>\n", "senID": 27}, {"text": ["Or if you want to reference to images by name, you can put them into dictionary:"], "childNum": 0, "tag": "p", "senID": 28, "childList": []}, {"code": "<pre>\n<code>\n imgs_to_load = {} \nimgs_to_load[\"bg\"] = g_base(\"bg.jpg\")\nimgs_to_load[\"mouse\"] = g_base(\"mouse.png\",alpha=1)\n\nimgs_in_pygame_format = {} # create a global dictionary for loaded images\n\ndef main ():\n    global imgs_in_pygame_format # import that global name into the local scope for write access\n    for name, data in imgs_to_load.items():\n        imgs_in_pygame_format[name] = Image_loader(data) # add to the dictionary\n\n    for image in imgs_in_pygame_format:\n        print image # every image in the dictionary is a pygame surface\n\n    # or    \n    print imgs_in_pygame_format[\"bg\"]\n    print imgs_in_pygame_format[\"mouse\"]\n\nmain()\n</code>\n</pre>\n", "senID": 29}, {"text": ["But most importantly, global variables are bad idea.", "The better solution would be to use a class:"], "childNum": 1, "tag": "p", "senID": 30, "childList": [{"text": "global variables are bad idea", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def Image_loader(img):\n    # ..... code to load the image and convert it into pygame surface...\n    return img_load\n\nclass Image:\n    def __init__(self, image):\n        self.data = Image_loader(image)\n\ndef main ():\n    bg = Image(g_base(\"bg.jpg\"))\n    mouse = Image(g_base(\"mouse.png\",alpha=1))\n\n    print bg.data\n    print mouse.data\n\nmain()\n</code>\n</pre>\n", "senID": 31}, {"text": ["For more examples see Python Tutorial."], "childNum": 1, "tag": "p", "senID": 32, "childList": [{"text": "Python Tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/index.html"}]}, {"text": ["Hope it helps, and welcome to StackOverflow!"], "childNum": 0, "tag": "p", "senID": 33, "childList": []}]]