[[{"text": ["self._v_scaleInfo: is an array of tuples, presumably, like [(x,y),(x,y),...] so \nfor width, height in self._v_scaleInfo: loops through the array filling width and height with the tuple values."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "self._v_scaleInfo:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[(x,y),(x,y),...]", "childNum": 0, "tag": "code", "childList": []}, {"text": "for width, height in self._v_scaleInfo:", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["php would go something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $scaleInfo = array(array(x,y), array(x,y),...);\n\nfor( $i = 0; $i &lt; count($scaleInfo); $i++ ) {\n  $width = $scaleInfo[$i][0];\n  $height = $scaleInfo[$i][1];\n  ...\n}\n</code>\n</pre>\n", "senID": 2}], [{"text": ["In your simple example for x,y in z, z would be a list of coordinate pairs, like [(0,1), (2,5), (4,3)].", "With each turn through the for loop, the x variable gets the first coordinate in the pair and y gets the second."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "for x,y in z", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[(0,1), (2,5), (4,3)]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["It's roughly equivalent to (pseudo code):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n For every item i in z:\n    x = i[0]\n    y = i[1]\n    Loop body happens here\n</code>\n</pre>\n", "senID": 1}, {"text": ["It means that every item in z contains 2 elements (for example, every item is a list with 2 items)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "z", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["In python, you can have multiple return values.", "You can also define a tuple like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n t = (1,2,3)\n</code>\n</pre>\n", "senID": 1}, {"text": ["To get access to the elements in t you can do the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Then a has the value 1, etc."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you had an array of 2 element tuples, you could enumerate through them using the following code"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n z = [(1, 2), (3, 4), (5, 6)]\nfor x, y in z:\n   print x, y\n</code>\n</pre>\n", "senID": 5}, {"text": ["which produces the following"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n 1 2\n3 4\n5 6\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Suppose z is a list of tuples in Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Z = [(1,2), (1,3), (2,3), (2,4)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["it would be something like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $z = array(array(1,2), array(1,3), array(2,3), array(2,4));\n</code>\n</pre>\n", "senID": 3}, {"text": ["using that for x,y in z would result in:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n z = [(1,2), (1,3), (2,3), (2,4)]\nfor x, y in z:\n    print \"%i %i\" % (x,y)\n\n\n1 2\n1 3\n2 3\n2 4\n</code>\n</pre>\n", "senID": 5}, {"text": ["so Translating"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n for x, y in z:\n</code>\n</pre>\n", "senID": 7}, {"text": ["into PHP would be something like:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n for ($i=0; $i &lt; count($z); $i++){\n    $x = $z[$i][0];\n    $y = $z[$i][1];\n</code>\n</pre>\n", "senID": 9}], [{"text": ["Conceptually"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for x,y in z\n</code>\n</pre>\n", "senID": 1}, {"text": ["is actually iterating using an enumerator (language specific implementation of an iterator pattern), for loops are based on index based iteration."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["for x,y in z would semantically be like"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for (x=0 ; x&lt;z.length ; x++ )\n     for (y=1; x&lt;z.length;y++) print z[x],z[y]\n</code>\n</pre>\n", "senID": 4}, {"text": ["note this will work for tuples in python."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["This construct allows you to iterate over multi-dimensional collections so for a 3x2 list you could have have:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n z = [[1,2], [3,4], [5,6]]\nfor x, y in z:\n    print x, y\n</code>\n</pre>\n", "senID": 1}, {"text": ["This prints:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 1 2\n3 4\n5 6\n</code>\n</pre>\n", "senID": 3}, {"text": ["The same construct could be used on a dictionary which is some sense also a 2-dimensional collection:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n z = {1:\"one\", 2:\"two\", 3:\"three\"}\nfor x, y in z.items():\n    for x, y in z.items():\n        print x, y\n</code>\n</pre>\n", "senID": 5}, {"text": ["This prints:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n 1 one\n2 two\n3 three\n</code>\n</pre>\n", "senID": 7}, {"text": ["In Python this construct is general and work at any dimension, changing our original 3x2 list to a 2x3 list we could do this:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n z = [[1,2,3], [4,5,6]]\nfor w, x, y in z:\n    print w, x, y\n</code>\n</pre>\n", "senID": 9}, {"text": ["This prints:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n 1 2 3\n4 5 6\n</code>\n</pre>\n", "senID": 11}, {"text": ["In PHP I think you have to do this with nest for loops, I do not think there is a construct to do the sort of multiple dimension list deconstruction that is possible in Python."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]]