[[{"text": ["Use collections.namedtuple."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "collections.namedtuple", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It works well."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from collections import namedtuple\nData = namedtuple( 'Data', [ 'do_good_stuff', 'do_bad_stuff' ] )\noptions = Data( True, False )\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The original code can be streamlined a little by using __dict__:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__dict__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n In [1]: class data:\n   ...:     def __init__(self, **kwargs):\n   ...:         self.__dict__.update(kwargs)\n   ...: \n\nIn [2]: d = data(foo=1, bar=2)\n\nIn [3]: d.foo\nOut[3]: 1\n\nIn [4]: d.bar\nOut[4]: 2\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This works in 2.5, 2.6, and 3.1:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Struct(object):\n    pass\n\nsomething = Struct()\nsomething.awesome = abs\n\nresult = something.awesome(-42)\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT:\nI thought maybe giving the source would help out as well.", "http://docs.python.org/tutorial/classes.html#odds-and-ends"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/tutorial/classes.html#odds-and-ends", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#odds-and-ends"}]}, {"text": ["EDIT:\nAdded assignment to result, as I was using the interactive interpreters to verify, and you might not be."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["This is the shortest way I know"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; obj = type(\"myobj\",(object,),dict(foo=1,bar=2))\n&gt;&gt;&gt; obj.foo\n1\n&gt;&gt;&gt; obj.bar\n2\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["using dict instead of {} insures your attribute names are valid"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; obj = type(\"myobj\",(object,),{\"foo-attr\":1,\"bar-attr\":2})\n&gt;&gt;&gt; obj.foo-attr\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: type object 'myobj' has no attribute 'foo'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If I understand your question correctly, you need records.", "Python classes may be used this way, which is what you do. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I believe the most pythonic way of dealing with \"records\" is simply... dictionaries!", "A class is a sort of dictionary on steroids."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "dictionaries", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Your class example data is essentially a way of converting a dictionary into a class."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "data", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(On a side note, I would rather use self.__setattr__(name, kw[name])."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "self.__setattr__(name, kw[name])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You might be interested in the \"Struct\", which is part of the IPython package.", "It does what you want to do, with lots of useful methods."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://ipython.scipy.org/doc/manual/html/api/generated/IPython.utils.ipstruct.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://ipython.scipy.org/doc/manual/html/api/generated/IPython.utils.ipstruct.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/doc/manual/html/api/generated/IPython.utils.ipstruct.html"}]}], [{"text": ["This is typically something you would use a dict for, not making a class at all."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]