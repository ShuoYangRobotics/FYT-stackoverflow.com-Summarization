[[{"text": ["A common way to do this is to use message queues.", "You place a message on the queue, and worker threads (or processes, etc.", ") consume the queue and do the work after your view has completed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Google App Engine has the task queue api http://code.google.com/appengine/docs/python/taskqueue/, amazon has the Simple Queue Service http://aws.amazon.com/sqs/.  "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/appengine/docs/python/taskqueue/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/appengine/docs/python/taskqueue/"}, {"href": "http://aws.amazon.com/sqs/", "text": "http://aws.amazon.com/sqs/", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["A quick search didn't turn up any django pluggables that look like accepted standards.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["A quick and dirty way to emulate the functionality is to place the 'message' in a database table, and have a cron job periodically check the table to perform the work."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you have a long-running process, you have two simple choices."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is all outside Django.", "You use subprocess or some other IPC method to communicate with the other process."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "subprocess", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html"}]}], [{"text": ["Django's HttpResponse object accepts an iterator in its constructor:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.djangoproject.com/en/dev/ref/request-response/#passing-iterators"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.djangoproject.com/en/dev/ref/request-response/#passing-iterators", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/request-response/#passing-iterators"}]}, {"text": ["So you could do something like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def myiter():\n    yield \"my content\"\n    enqueue_some_task()\n    return\n\ndef myview(request):\n    return HttpResponse(myiter())\n</code>\n</pre>\n", "senID": 3}, {"text": ["The normal use of an iterator is to send large data without reading it all into memory.", "For example, read chunks from a file and yield appropriately.", "I've never used it in this way, but it seems like it should work."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["My favourite solution: A separate process that handles background tasks, typically things like indexing and sending notification mails etc.", "And then, during the view rendering, you send an event to the event handling system (I don't know if Django has one built in, but you always need one anyway so you should have one) and the even system then puts a message in a message queue (which is trivial to write unless you have multiple machines or multiple background processes) that does the task in question."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You spawn a separate thread and have it do the action."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n t = threading.Thread(target=do_my_action, args=[my_argument])\n# We want the program to wait on this thread before shutting down.\nt.setDaemon(False)\nt.start()\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will cause 'do_my_action(my_argument)' to be executed in a second thread which will keep working even after you send your Django response and terminate the initial thread.", "For example it could send an email without delaying the response."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["In render to response, you pass the html page that you want displayed.", "That other page needs to send a post (via Javascript or something) that triggers the correct function in your views, then that view calls the correct next page to be shown."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Perhaps I do not understand your question.", "But why not something simple like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    return render_to_response()\nfinally:\n    do_what_needs_to_be_done()\n</code>\n</pre>\n", "senID": 1}]]