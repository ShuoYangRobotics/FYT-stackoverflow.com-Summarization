[[{"text": ["The basic answer is to accumulate the sum of both x (call it 'sum_x1') and x2 (call it 'sum_x2') as you go.", "The value of the standard deviation is then:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "x", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "x", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "2", "childNum": 0, "tag": "sup", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n stdev = sqrt((sum_x2 / n) - (mean * mean))\n</code>\n</pre>\n", "senID": 1}, {"text": ["where"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n mean = sum_x / n\n</code>\n</pre>\n", "senID": 3}, {"text": ["This is the sample standard deviation; you get the population standard deviation using 'n' instead of 'n - 1' as the divisor."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You may need to worry about the numerical stability of taking the difference between two large numbers if you are dealing with large samples.", "Go to the external references in other answers (Wikipedia, etc) for more information."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["The answer is to use Welford's algorithm, which is very clearly defined after the \"naive methods\" in:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "Wikipedia: ", "tag": "none", "senID": 1}]}, {"text": ["It's more numerically stable than either the two-pass or online simple sum of squares collectors suggested in other responses.", "The stability only really matters when you have lots of values that are close to each other as they lead to what is known as \"catastrophic cancellation\" in the floating point literature."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "catastrophic cancellation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.cs.princeton.edu/introcs/lectures/9scientific.pdf"}]}, {"text": ["You might also want to brush up on the difference between dividing by the number of samples (N) and N-1 in the variance calculation (squared deviation).", "Dividing by N-1 leads to an unbiased estimate of variance from the sample, whereas dividing by N on average underestimates variance (because it doesn't take into account the variance between the sample mean and the true mean)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I wrote two blog entries on the topic which go into more details, including how to delete previous values online:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Computing Sample Mean and Variance Online in One Pass"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}, {"text": ["Deleting Values in Welford\u2019s Algorithm for Online Mean and Variance"], "childNum": 0, "tag": "a", "senID": 6, "childList": []}]}, {"text": ["You can also take a look at my Java implement; the javadoc, source, and unit tests are all online:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["Javadoc: stats.OnlineNormalEstimator"], "childNum": 1, "tag": "a", "senID": 8, "childList": [{"text": "stats.OnlineNormalEstimator", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Source: stats.OnlineNormalEstimator.java"], "childNum": 1, "tag": "a", "senID": 9, "childList": [{"text": "stats.OnlineNormalEstimator.java", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["JUnit Source: test.unit.stats.OnlineNormalEstimatorTest.java"], "childNum": 1, "tag": "a", "senID": 10, "childList": [{"text": "test.unit.stats.OnlineNormalEstimatorTest.java", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["LingPipe Home Page"], "childNum": 0, "tag": "a", "senID": 11, "childList": []}]}], [{"text": ["Perhaps not what you were asking, but ...", "If you use a numpy array, it will do the work for you, efficiently:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from numpy import array\n\nnums = array(((0.01, 0.01, 0.02, 0.04, 0.03),\n              (0.00, 0.02, 0.02, 0.03, 0.02),\n              (0.01, 0.02, 0.02, 0.03, 0.02),\n              (0.01, 0.00, 0.01, 0.05, 0.03)))\n\nprint nums.std(axis=1)\n# [ 0.0116619   0.00979796  0.00632456  0.01788854]\n\nprint nums.mean(axis=1)\n# [ 0.022  0.018  0.02   0.02 ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["By the way, there's some interesting discussion in this blog post and comments on one-pass methods for computing means and variances:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://lingpipe-blog.com/2009/03/19/computing-sample-mean-variance-online-one-pass/"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}], [{"text": ["Statistics::Descriptive is a very decent Perl module for these types of calculations:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Statistics::Descriptive", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/perldoc/Statistics::Descriptive"}]}, {"code": "<pre>\n<code>\n #!/usr/bin/perl\n\nuse strict; use warnings;\n\nuse Statistics::Descriptive qw( :all );\n\nmy $data = [\n    [ 0.01, 0.01, 0.02, 0.04, 0.03 ],\n    [ 0.00, 0.02, 0.02, 0.03, 0.02 ],\n    [ 0.01, 0.02, 0.02, 0.03, 0.02 ],\n    [ 0.01, 0.00, 0.01, 0.05, 0.03 ],\n];\n\nmy $stat = Statistics::Descriptive::Full-&gt;new;\n# You also have the option of using sparse data structures\n\nfor my $ref ( @$data ) {\n    $stat-&gt;add_data( @$ref );\n    printf \"Running mean: %f\\n\", $stat-&gt;mean;\n    printf \"Running stdev: %f\\n\", $stat-&gt;standard_deviation;\n}\n__END__\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n C:\\Temp&gt; g\nRunning mean: 0.022000\nRunning stdev: 0.013038\nRunning mean: 0.020000\nRunning stdev: 0.011547\nRunning mean: 0.020000\nRunning stdev: 0.010000\nRunning mean: 0.020000\nRunning stdev: 0.012566\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Have a look at PDL (pronounced \"piddle!", "\"). "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PDL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/dist/PDL/"}]}, {"text": ["This is the Perl Data Language which is designed for high precision mathematics and scientific computing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here is an example using your figures...."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n use strict;\nuse warnings;\nuse PDL;\n\nmy $figs = pdl [\n    [0.01, 0.01, 0.02, 0.04, 0.03],\n    [0.00, 0.02, 0.02, 0.03, 0.02],\n    [0.01, 0.02, 0.02, 0.03, 0.02],\n    [0.01, 0.00, 0.01, 0.05, 0.03],\n];\n\nmy ( $mean, $prms, $median, $min, $max, $adev, $rms ) = statsover( $figs );\n\nsay \"Mean scores:     \", $mean;\nsay \"Std dev? (adev): \", $adev;\nsay \"Std dev? (prms): \", $prms;\nsay \"Std dev? (rms):  \", $rms;\n</code>\n</pre>\n", "senID": 3}, {"text": ["\nWhich produces:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n Mean scores:     [0.022 0.018 0.02 0.02]\nStd dev? (adev): [0.0104 0.0072 0.004 0.016]\nStd dev? (prms): [0.013038405 0.010954451 0.0070710678 0.02]\nStd dev? (rms):  [0.011661904 0.009797959 0.0063245553 0.017888544]\n</code>\n</pre>\n", "senID": 5}, {"text": ["\nHave a look at PDL::Primitive for more information on the statsover function.", "This seems to suggest that ADEV is the \"standard deviation\".  "], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "PDL::Primitive", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://search.cpan.org/dist/PDL/Basic/Primitive/primitive.pd"}, {"text": "statsover", "childNum": 0, "tag": "i", "pos": -1, "childList": []}]}, {"text": ["However it maybe PRMS (which Sinan's Statistics::Descriptive example show) or RMS (which ars's NumPy example shows).", "I guess one of these three must be right ;-)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["For more PDL information have a look at:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": ["pdl.perl.org"], "childNum": 0, "tag": "a", "senID": 9, "childList": []}, {"text": ["PDL quick reference guide on PerlMonks"], "childNum": 0, "tag": "a", "senID": 10, "childList": []}, {"text": ["Dr. Dobb's article on PDL"], "childNum": 0, "tag": "a", "senID": 11, "childList": []}, {"text": ["PDL Wiki"], "childNum": 0, "tag": "a", "senID": 12, "childList": []}, {"text": ["Wikipedia entry for PDL"], "childNum": 0, "tag": "a", "senID": 13, "childList": []}, {"text": ["Sourceforge project page for PDL"], "childNum": 0, "tag": "a", "senID": 14, "childList": []}]}, {"text": ["/I3az/"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}], [{"text": ["How big is your array?", "Unless it is zillions of elements long, don't worry about looping through it twice.", "The code is simple and easily tested."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["My preference would be to use the numpy array maths extension to convert your array of arrays into a numpy 2D array and get the standard deviation directly:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "numpy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = [ [ 1, 2, 4, 3, 4, 5 ], [ 3, 4, 5, 6, 7, 8 ] ] * 10\n&gt;&gt;&gt; import numpy\n&gt;&gt;&gt; a = numpy.array(x)\n&gt;&gt;&gt; a.std(axis=0) \narray([ 1. ,  1. ,  0.5,  1.5,  1.5,  1.5])\n&gt;&gt;&gt; a.mean(axis=0)\narray([ 2. ,  3. ,  4.5,  4.5,  5.5,  6.5])\n</code>\n</pre>\n", "senID": 2}, {"text": ["If that's not an option and you need a pure Python solution, keep reading..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If your array is "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n x = [ \n      [ 1, 2, 4, 3, 4, 5 ],\n      [ 3, 4, 5, 6, 7, 8 ],\n      ....\n]\n</code>\n</pre>\n", "senID": 5}, {"text": ["Then the standard deviation is:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n d = len(x[0])\nn = len(x)\nsum_x = [ sum(v[i] for v in x) for i in range(d) ]\nsum_x2 = [ sum(v[i]**2 for v in x) for i in range(d) ]\nstd_dev = [ sqrt((sx2 - sx**2)/N)  for sx, sx2 in zip(sum_x, sum_x2) ]\n</code>\n</pre>\n", "senID": 7}, {"text": ["If you are determined to loop through your array only once, the running sums can be combined."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n sum_x  = [ 0 ] * d\nsum_x2 = [ 0 ] * d\nfor v in x:\n   for i, t in enumerate(v):\n   sum_x[i] += t\n   sum_x2[i] += t**2\n</code>\n</pre>\n", "senID": 9}, {"text": ["This isn't nearly as elegant as the list comprehension solution above."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["You could look at the Wikipedia article on Standard Deviation, in particular the section about Rapid calculation methods."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Standard Deviation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Standard%5Fdeviation"}]}, {"text": ["There's also an article I found that uses Python, you should be able to use the code in it without much change: Subliminal Messages - Running Standard Deviations."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Subliminal Messages - Running Standard Deviations", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://subluminal.wordpress.com/2008/07/31/running-standard-deviations/"}]}], [{"text": ["I think this issue will help you.", "Standard deviation"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Standard deviation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.johndcook.com/standard%5Fdeviation.html"}]}], [{"text": ["Here's one way to do it in Java:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n package statistics;\n\npublic class Statistics\n{\n    private double sum;\n    private double sumOfSquares;\n    private int numPoints;\n\n    public static void main(String[] args)\n    {\n        double [] values = new double[args.length];\n\n        for (int i = 0; i &lt; args.length; ++i)\n        {\n            values[i] = Double.parseDouble(args[i]);\n        }\n\n        Statistics statistics = new Statistics(values);\n        System.out.println(statistics);\n    }\n\n    public Statistics(double [] values)\n    {\n        for (int i = 0; i &lt; values.length; ++i)\n        {\n            sum += values[i];\n            sumOfSquares += values[i]*values[i];\n            ++numPoints;\n        }\n    }\n\n    public synchronized double getAverage()\n    {\n        double average = 0.0;\n\n        if (numPoints &gt; 0)\n        {\n            average = sum/numPoints;            \n        }\n\n        return average;\n    }\n\n    public synchronized double getStandardDeviation()\n    {\n        double standardDeviation = 0.0;\n\n        if (numPoints &gt; 1)\n        {\n            double average = getAverage();\n            standardDeviation = Math.sqrt(sumOfSquares/numPoints - average*average);\n        }\n\n        return standardDeviation;\n    }\n\n    public  synchronized void addValue(double newValue)\n    {\n        sum += newValue;\n        sumOfSquares += newValue*newValue;\n        ++numPoints;\n    }\n\n    public String toString()\n    {\n        return new StringBuilder().append(\"Statistics{\").append(\"sum=\").append(sum).append(\", sumOfSquares=\").append(sumOfSquares).append(\", numPoints=\").append(numPoints).append(\", average=\").append(getAverage()).append(\", std dev=\").append(getStandardDeviation()).append('}').toString();\n    }\n</code>\n</pre>\n", "senID": 1}, {"text": ["I'm not as happy with this version, because it doesn't check for overflow in the event of a value that's equal to sqrt(Double.MAX_VALUE), but it demonstrates how to calculate mean and standard deviation using running totals instead of arrays."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]