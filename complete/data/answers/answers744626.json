[[{"text": ["You can use the python builtin locals() to get local declarations, eg:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def f():\n    print \"Hello, world\"\n\ndef g():\n    print \"Goodbye, world\"\n\nfor fname in [\"f\", \"g\"]:\n    fn = locals()[fname]\n    print \"Calling %s\" % (fname)\n    fn()\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can use the \"imp\" module to load functions from user-specified python files which gives you a bit more flexibility."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Using locals() makes sure you can't call generic python, whereas with eval, you could end up with the user setting your string to something untoward like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n f = 'open(\"/etc/passwd\").readlines'\nprint eval(f+\"()\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["or similar and end up with your programming doing things you don't expect to be possible.", "Using similar tricks with locals() and dicts in general will just give attackers KeyErrors."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["how do you not know the name of the function to call?", "Store the functions instead of the name:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n functions_to_call = [int, str, float]\n\nvalue = 33.5\n\nfor function in functions_to_call:\n    print \"calling\", function\n    print \"result:\", function(value)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Something like that...when i was looking at function pointers in python.."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def myfunc(x):\n    print x\n\ndict = {\n    \"myfunc\": myfunc\n}\n\ndict[\"myfunc\"](\"hello\")\n\nfunc = dict.get(\"myfunc\")\nif callable(func):\n    func(10)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Have a look at the getattr function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/functions.html?highlight=getattr#getattr"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/functions.html?highlight=getattr#getattr", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html?highlight=getattr#getattr"}]}, {"code": "<pre>\n<code>\n import sys\n\nfunctions_to_call = [\"func_1\", \"func_2\", \"func_3\"]\n\nfor f in functions_to_call:\n  getattr(sys.modules[__name__], f)()\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n functions_to_call = [\"func_1\", \"func_2\", \"func_3\"]\n\nfor f in functions_to_call:\n    eval(f+'()')\n</code>\n</pre>\n", "senID": 0}, {"text": ["Edited to add:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edited to add:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Yes, eval() generally is a bad idea, but this is what the OP was looking for."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["See the eval and compile functions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval and compile", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html"}]}], [{"text": ["Don't use eval!", "It's almost never required, functions in python are just attributes like everything else, and are accessible either using getattr on a class, or via locals():"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "getattr", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "locals()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print locals()\n{'__builtins__': &lt;module '__builtin__' (built-in)&gt;,\n '__doc__': None,\n '__name__': '__main__',\n 'func_1': &lt;function func_1 at 0x74bf0&gt;,\n 'func_2': &lt;function func_2 at 0x74c30&gt;,\n 'func_3': &lt;function func_3 at 0x74b70&gt;,\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Since that's a dictionary, you can get the functions via the dict-keys func_1, func_2 and func_3:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "func_1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "func_2", "childNum": 0, "tag": "code", "childList": []}, {"text": "func_3", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f1 = locals()['func_1']\n&gt;&gt;&gt; f1\n&lt;function func_1 at 0x74bf0&gt;\n&gt;&gt;&gt; f1()\none\n</code>\n</pre>\n", "senID": 3}, {"text": ["So, the solution without resorting to eval:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def func_1():\n...     print \"one\"\n... \n&gt;&gt;&gt; def func_2():\n...     print \"two\"\n... \n&gt;&gt;&gt; def func_3():\n...     print \"three\"\n... \n&gt;&gt;&gt; functions_to_call = [\"func_1\", \"func_2\", \"func_3\"]\n&gt;&gt;&gt; for fname in functions_to_call:\n...     cur_func = locals()[fname]\n...     cur_func()\n... \none\ntwo\nthree\n</code>\n</pre>\n", "senID": 5}]]