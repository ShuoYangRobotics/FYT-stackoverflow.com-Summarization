[[{"text": ["Would not this relationship be better expressed as a one-to-many foreign key relationship to a Friends table?", "I understand that myFriends are just strings but I would think that a better design would be to create a Friend model and have MyClass contain a foreign key realtionship to the resulting table."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "Friends", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "myFriends", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Friend", "childNum": 0, "tag": "code", "childList": []}, {"text": "MyClass", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["\"Premature optimization is the root of all evil."], "childNum": 1, "tag": "h2", "senID": 0, "childList": [{"text": "\"Premature optimization is the root of all evil.\"", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["With that firmly in mind, let's do this!", "Once your apps hit a certain point, denormalizing data is very common.", "Done correctly, it can save numerous expensive database lookups at the cost of a little more housekeeping."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To return a list of friend names we'll need to create a custom Django Field class that will return a list when accessed."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["David Cramer posted an guide to creating a SeperatedValueField on his blog.", "Here is the code:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "David Cramer posted an guide to creating a SeperatedValueField on his blog", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.davidcramer.net/code/181/custom-fields-in-django.html"}]}, {"code": "<pre>\n<code>\n from django.db import models\n\nclass SeparatedValuesField(models.TextField):\n    __metaclass__ = models.SubfieldBase\n\n    def __init__(self, *args, **kwargs):\n        self.token = kwargs.pop('token', ',')\n        super(SeparatedValuesField, self).__init__(*args, **kwargs)\n\n    def to_python(self, value):\n        if not value: return\n        if isinstance(value, list):\n            return value\n        return value.split(self.token)\n\n    def get_db_prep_value(self, value):\n        if not value: return\n        assert(isinstance(value, list) or isinstance(value, tuple))\n        return self.token.join([unicode(s) for s in value])\n\n    def value_to_string(self, obj):\n        value = self._get_val_from_obj(obj)\n</code>\n</pre>\n", "senID": 4}, {"text": ["The logic of this code deals with serializing and deserializing values from the database to Python and visa-versa.", "Now can import and use our custom field in the model class:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n from django.db import models\nfrom custom.fields import SeparatedValuesField \n\nclass Person(models.Model):\n    name = models.CharField(max_length=64)\n    friends = SeparatedValuesField()\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Remember that this eventually has to end up in a relational database.", "So using relations really is the common way to solve this problem.", "If you absolutely insist on storing a list in the object itself, you could make it for example comma-separated, and store it in a string, and then provide accessor functions that split the string into a list.", "With that, you will be limited to a maximum number of strings, and you will lose efficient queries."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n class Course(models.Model):\n   name = models.CharField(max_length=256)\n   students = models.ManyToManyField(Student)\n\nclass Student(models.Model):\n   first_name = models.CharField(max_length=256)\n   student_number = models.CharField(max_length=128)\n   # other fields, etc...\n\n   friends = models.ManyToManyField('self')\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can store virtually any object using a Django Pickle Field, ala this snippet:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.djangosnippets.org/snippets/513/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.djangosnippets.org/snippets/513/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangosnippets.org/snippets/513/"}]}], [{"text": ["Using one-to-many relation (FK from Friend to parent class) will make your app more scalable (as you can trivially extend the Friend object with additional attributes beyond the simple name).", "And thus this is the best way "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In general, to store a list in Django, you could just JSON-serialize it.", "The \"list\" would be stored in your Django model like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyModel(models.Model):\n    myList = models.TextField(null=True) # JSON-serialized (text) version of your list\n</code>\n</pre>\n", "senID": 1}, {"text": ["In your view/controller code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Storing the list in the database:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Storing the list in the database:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import simplejson as json\n...\n...\n\nmyModel = MyModel()\nlistIWantToStore = [1,2,3,4,5,'hello']\nmyModel.myList = json.dumps(listIWantToStore)\nmyModel.save()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Retrieving the list from the database:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Retrieving the list from the database:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n jsonDec = json.decoder.JSONDecoder()\nmyPythonList = jsonDec.decode(myModel.myList)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Conceptually, here's what's going on:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Conceptually, here's what's going on:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; myList = [1,2,3,4,5,'hello']\n&gt;&gt;&gt; import simplejson as json\n&gt;&gt;&gt; myJsonList = json.dumps(myList)\n&gt;&gt;&gt; myJsonList\n'[1, 2, 3, 4, 5, \"hello\"]'\n&gt;&gt;&gt; myJsonList.__class__\n&lt;type 'str'&gt;\n&gt;&gt;&gt; jsonDec = json.decoder.JSONDecoder()\n&gt;&gt;&gt; myPythonList = jsonDec.decode(myJsonList)\n&gt;&gt;&gt; myPythonList\n[1, 2, 3, 4, 5, u'hello']\n&gt;&gt;&gt; myPythonList.__class__\n&lt;type 'list'&gt;\n</code>\n</pre>\n", "senID": 8}]]