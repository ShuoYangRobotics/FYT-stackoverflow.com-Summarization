[[{"text": ["Instead of:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n i=0\n  end=20\n  last_id=0\n  data=[]\n  while(i&lt;=end):\n    i = i + 1\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n last_id=0\n  data=[]\n  for i in xrange(1, 22):\n    ...\n</code>\n</pre>\n", "senID": 3}, {"text": ["Same semantics, more compact and Pythonic."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Instead of"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if not last or last == None:\n</code>\n</pre>\n", "senID": 6}, {"text": ["do just"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n if not last:\n</code>\n</pre>\n", "senID": 8}, {"text": ["since None is false-ish anyway (so not last is True when last is None).", "In general, when you want to check if something isNone, codeis None, not== None`."], "childNum": 7, "tag": "p", "senID": 9, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "not last", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "last", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "None).  In general, when you want to check if something is", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": ", code", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ", not", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n if(j['id'] &lt;&gt; last_id):\n</code>\n</pre>\n", "senID": 11}, {"text": ["lose the redundant parentheses and the obsolete &lt;&gt; operator and code instead"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "&lt;&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if j['id'] != last_id:\n</code>\n</pre>\n", "senID": 13}, {"text": ["and also remove the redundant parentheses from other if statements."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Instead of:"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n if len(data) == 0:\n</code>\n</pre>\n", "senID": 16}, {"text": ["code:"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n if not data:\n</code>\n</pre>\n", "senID": 18}, {"text": ["since any empty container is false-ish."], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"text": ["In"], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"code": "<pre>\n<code>\n hash_str = str(hash.hexdigest())\n</code>\n</pre>\n", "senID": 21}, {"text": ["code instead"], "childNum": 0, "tag": "p", "senID": 22, "childList": []}, {"code": "<pre>\n<code>\n hash_str = hash.hexdigest()\n</code>\n</pre>\n", "senID": 23}, {"text": ["since the method already returns a string, making the str call redundant."], "childNum": 1, "tag": "p", "senID": 24, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Instead of:"], "childNum": 0, "tag": "p", "senID": 25, "childList": []}, {"code": "<pre>\n<code>\n for item in data:\n    writer.writerow(item)\n</code>\n</pre>\n", "senID": 26}, {"text": ["use"], "childNum": 0, "tag": "p", "senID": 27, "childList": []}, {"code": "<pre>\n<code>\n writer.writerows(data)\n</code>\n</pre>\n", "senID": 28}, {"text": ["which does the loop on your behalf."], "childNum": 0, "tag": "p", "senID": 29, "childList": []}, {"text": ["Instead of"], "childNum": 0, "tag": "p", "senID": 30, "childList": []}, {"code": "<pre>\n<code>\n ofile = open('tmp/'+file_name, mode='ab')\n  ...\n  ofile.close()\n</code>\n</pre>\n", "senID": 31}, {"text": ["use (in Python 2.6 or better, or in 2.5 by starting the module with"], "childNum": 0, "tag": "p", "senID": 32, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import with_statement\n</code>\n</pre>\n", "senID": 33}, {"text": ["to \"import from the future\" the with statement feature):"], "childNum": 1, "tag": "p", "senID": 34, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n with open('tmp/'+file_name, mode='ab') as ofile:\n    ...\n</code>\n</pre>\n", "senID": 35}, {"text": ["which guarantees to do the close for you (including in cases where an exception might be raised)."], "childNum": 0, "tag": "p", "senID": 36, "childList": []}, {"text": ["Instead of"], "childNum": 0, "tag": "p", "senID": 37, "childList": []}, {"code": "<pre>\n<code>\n print \"Upload Error: \"+uploadr[0]\n</code>\n</pre>\n", "senID": 38}, {"text": ["use"], "childNum": 0, "tag": "p", "senID": 39, "childList": []}, {"code": "<pre>\n<code>\n print \"Upload Error:\", uploadr[0]\n</code>\n</pre>\n", "senID": 40}, {"text": ["and similarly for other print statements -- the comma inserts a space for you."], "childNum": 1, "tag": "p", "senID": 41, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I'm sure there are more such little things, but these are a few that \"jumped to the eye\" as I was scanning your code."], "childNum": 0, "tag": "p", "senID": 42, "childList": []}], [{"text": ["Pythonic python does not use integer flow control very much.", "The idiom is almost always for item in container:.", "Also, I would use a class to hold a 'User object'.", "It will be a lot easier to use than simple container types likes lists and dictionaries (And arrange your code into to a more OO style.", ") You can compile reg-exes before hand for a little more performance. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "for item in container:", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class MyTweet(object):\n  def __init__(self, data):\n    # ...process json here\n    # ...\n    self.user = user\n\nfor data in getTweets():\n  tweet = MyTweet(data)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Run your code through pylint."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pylint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.logilab.org/857"}]}], [{"code": "<pre>\n<code>\n # Bot Modules\nimport red #Simple Redis API functions\nimport upload #pycurl script to upload to remote server\n</code>\n</pre>\n", "senID": 0}, {"text": ["If your app is going to be used and maintained, its better to pack all these modules in the package."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Instead of ...."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n i=0\n  end=20\n  last_id=0\n  data=[]\n  while(i&lt;=end):\n    i = i + 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["you can use..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for i in range(20):\n</code>\n</pre>\n", "senID": 3}, {"text": ["but overall, it's not very clear where this 20 comes from??", "magic #?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["If you have a method that won't fit in the view pane you really want to shorten it.", "Say 15 lines or so.", "I see what looks like at least 3 methods: print_tweet, save_csv, and upload_data.", "It's a bit hard to say exactly what they should be named but there do seem to be three distinct sections of code that you should try to break out. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], []]