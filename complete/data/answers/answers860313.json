[[{"text": ["Well, there is one thing you are missing: the tutorial you mention doesn't \"build\" a complete example, the different snippets of code are not meant to be concatenated into one source file.", "Rather, they describe the different ways the library can be used.", "No need to try and do the same thing over and over again yourself."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Leaving out the actually-using-the-orm part from your example, the code could look like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from sqlalchemy import *\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, scoped_session\n\nengine = create_engine('sqlite:///:memory:', echo=True)\nBase = declarative_base(bind=engine)\nSession = scoped_session(sessionmaker(engine))\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    fullname = Column(String)\n    password = Column(String)\n\nBase.metadata.create_all()\n</code>\n</pre>\n", "senID": 2}, {"text": ["The \"declarative\" extension takes care of defining the table and mapping it to your class, so you don't need to declare the users_table yourself.", "The User class will also allow instantiating with keyword arguments, like User(name=\"foo\"), (but not positional arguments though).", "I've also added use of scoped_session, which means you can directly use Session without actually having to instantiate it  (it will instantiate a new session if there isn't already one present in the current thread, or reuse the existing one otherwise)"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "users_table", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "User(name=\"foo\")", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Session", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["The code examples you give aren't apples-to-apples.", "The SQLAlchemy version could be pared down a bit:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from sqlalchemy import create_engine\nfrom sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nengine = create_engine('sqlite:///:memory:', echo=True)\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'users'\n\n    id = Column('id', Integer, primary_key=True)\n    name = Column('name', String)\n    fullname = Column('fullname', String)\n    password = Column('password', String)\n\n    def __repr__(self):\n       return \"\" % (self.name, self.fullname, self.password)\n\nBase.metadata.create_all(engine)\n\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# actually using the ORM isn't too bad..\ned_user = User(name='ed', fullname='Ed Jones', password='edspassword')\nsession.add(ed_user)\n\nour_user = session.query(User).filter_by(name='ed').first()\n\nsession.add_all([\n    User(name='wendy', fullname='Wendy Williams', password='foobar'),\n    User(name='mary', fullname='Mary Contrary', password='xxg527'),\n    User(name='fred', fullname='Fred Flinstone', password='blah')])\n\ned_user.password = 'f8s7ccs'\n\nsession.flush()\n\nfor instance in session.query(User).order_by(User.id):\n    print instance.name, instance.fullname\n\nfor name, fullname in session.query(User.name, User.fullname):\n    print name, fullname\n</code>\n</pre>\n", "senID": 1}, {"text": ["You might also find Elixir more like SQLObject (but since I haven't used either, that's just a guess)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Elixir", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://elixir.ematia.de/trac/wiki"}]}, {"text": ["Not having used SQLObject at all, I can't comment on what exactly SA does better.", "But I have had great experiences with SA, especially when dealing with complicated, real-world, legacy schemas.", "It does a good job of coming up with good SQL queries by default, and has lots of ways to tune them."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I've found SQLAlchemy author's elevator pitch to hold up pretty well in practice."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "elevator pitch", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://techspot.zzzeek.org/?p=33"}]}], [{"text": ["Well, SQLAlchemy is divided into different parts, the main core part simply handles the DB, transforming your ptyhon built queries into the appropriate SQL language for the underlying DB.", "Then there is the support for sessions, the orm, and the new declarative syntax."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Looks like SQLObject (I can't say for sure, haven't used it in many years, and even then, only once) skips most of it and does the ORM part straight away.", "This often makes things easier for simple data (which you can get away with in most cases), but SQLAlchemy allows for more complex db layouts, and get down and dirty with the db if you really need it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Having used SQLObject (and only read about SQLAlchemy), I can say that one of SQLObject's strengths is the ease and simplicity with which you can get things done.", "Also, excellent support is provided by the email group (https://lists.sourceforge.net/lists/listinfo/sqlobject-discuss) that gets answers back to you pretty quickly."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "https://lists.sourceforge.net/lists/listinfo/sqlobject-discuss", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "https://lists.sourceforge.net/lists/listinfo/sqlobject-discuss"}]}], [{"text": ["Try Quick ORM, it is even simpler:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Quick ORM", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/quick_orm"}]}, {"code": "<pre>\n<code>\n from quick_orm.core import Database\nfrom sqlalchemy import Column, String\n\nclass User(object):\n    __metaclass__ = Database.DefaultMeta\n    name = Column(String(30))\n\nif __name__ == '__main__':\n    database = Database('sqlite://')\n    database.create_tables()\n\n    user = User(name = 'Hello World')\n    database.session.add_then_commit(user)\n\n    user = database.session.query(User).get(1)\n    print 'My name is', user.name\n</code>\n</pre>\n", "senID": 1}, {"text": ["Quick ORM is built upon SQLAlchemy, so we could say that SQLAlchemy could be as simple as SQLObject."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Quick ORM", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/quick_orm"}]}], [{"text": ["you say \"convoluted\".... someone else might say \"flexible\".", "Sometimes you need it sometimes you don't.", "Isn't it awesome that you have a choice?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]