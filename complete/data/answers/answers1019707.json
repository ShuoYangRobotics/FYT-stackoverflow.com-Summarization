[[{"text": ["I'd say this is extremely dangerous on many levels.", "You're essentially opening yourself up to any exploit that can be found on your system (whereas you're normally limited to the ones people can exploit remotely).", "I'd say don't do it if you can avoid it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you do want to do it, you might want to use some kind of virtual machine to run the user's code.", "Using something like KVM it's possible to set up a number of virtual machines using the same base image (you can even store a snapshot in an already-booted state, though I'm not sure how it will handle being cloned).", "You can then create the VMs on demand, run the user's code, return the results, and then kill off the VM.", "If you keep the VMs isolated from each other and the network, the users can wreak any havoc they want and it won't hurt your physical server.", "The only danger you're exposing yourself to under these conditions would be some kind of exploit that allows them to escape from the VM... those are extremely rare, and will be more rare as hardware virtualization improves."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "KVM", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.linux-kvm.org"}]}], [{"text": ["The few details you provide imply that you have administrative control over the server itself, so my suggestion makes this assumption."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'd tackle this as a batch system.", "The web server accepts an upload of the source file, a process polls the submission directory, processes the file, and then submits the result to another directory which the web application polls until it finds the result and displays it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The fun part is how to safely handle the execution."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["My OS of choice is FreeBSD, so I'd set up a pre-configured jail (not to be confused with a vanilla chroot jail) that would compile, run, and save the output.", "Then, for each source file submission, launch a pristine copy of the jail for each execution, with a copy of the source file inside."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Provided that the jail's /dev is pruned down to almost nothing, system resource limits are set safely, and that the traffic can't route out of the jail (bound to unroutable address or simply firewalled), I would personally be comfortable running this on a server under my care."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Since you use Linux, I'd investigate User Mode Linux or Linux-VServer, which are very similar in concept to FreeBSD jails (I've never used them myself, but have read about them).", "There are several other such systems listed here."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Operating_system-level_virtualization"}]}, {"text": ["This method is much more secure than a vanilla chroot jail, and it is much more light-weight than using full virtualization such as qemu/kvm or VMware."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I'm not a programmer, so I don't what kind of AJAX-y thing you could use to poll for the results, but I'm sure it could be done.", "As an admin, I would find this a fun project to partake in.", "Have fun.", ":)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Along with the other sugestions you might find this useful."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.xs4all.nl/~weegen/eelis/geordi/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.xs4all.nl/~weegen/eelis/geordi/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.xs4all.nl/~weegen/eelis/geordi/"}]}, {"text": ["This is from http://codepad.org/'s about page. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://codepad.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codepad.org"}]}], [{"text": ["Although it is still in development, and not yet considered secure, you might check out the technology behind Google Native Client.", "It is designed to allow untrusted native code to be run in a web browser, but could probably be adapted for use on a web server.", "You might use something like this on top of other techniques such as a virtual machine, for additional security."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Google Native Client", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/nativeclient/"}]}], [{"text": ["On Fedora 11, there is the SELinux Sandbox which seems to do exactly what you want (except perhaps limiting spawning new processes; the linked blog post does not mention that)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Fedora 11", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://fedoraproject.org/"}, {"href": "http://danwalsh.livejournal.com/28545.html", "text": "SELinux Sandbox", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Of course, there is always the risk of kernel bugs; even with SELinux, parts of the kernel are still exposed to all processes."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["There's a tool called strace - it monitors system calls made by a given process.", "You just need to watch out for specific calls suggesting 'illegal' function access.", "AFAIK, it's the method used in programming competitions to sandbox contestants' programs."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "strace", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/strace/"}]}], [{"text": ["See this page on Google Chrome's sandboxing methods for Linux.", "As you can see, there are plenty of methods, but none of them are great for a distributable application like Chrome because some distros might not include them.", "This is not really a problem for a web application though, because you can control what is installed on your server."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this page on Google Chrome's sandboxing methods for Linux", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/chromium/wiki/LinuxSandboxing"}]}, {"text": ["Personally, my favorite is Seccomp, because it has a very low overhead compared to other tools like ptrace (switch address spaces on every syscall!", ") or KVM (big memory hungry virtual machine), and it is incredibly simple compared to tools like SELinux (and therefore more likely to be secure)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Seccomp", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Seccomp"}, {"text": "very", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "every", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["I think your solutions must concentrate on analyzing the source code.", "I don't know any tools, and I think this would be pretty hard with C, but, for example, a Pascal program which doesn't include any modules would be pretty harmless in my opinion."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "C", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Pascal", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["About the only chance you have is running a VirtualMachine and those can have vulnerabilities.", "If you want your machine hacked in the short term just use permissions and make a special user with access to maybe one directory.", "If you want to postpone the hacking to some point in the future then run a webserver inside a virtual machine and port forward to that.", "You'll want to keep a backup of that because you'll probably have that hacked in under an hour and want to restart a fresh copy every few hours.", "You'll also want to keep an image of the whole machine to just reimage the whole thing once a week or so in order to overcome the weekly hackings.", "Don't let that machine talk to any other machine on your network.", "Blacklist it everywhere.", "I'm talking about the virtual machine and the physical machine IP addresses.", "Do regular security audits on any other machines on your other machines on the network.", "Please rename the machines IHaveBeenHacked1 and IHaveBeenHacked2 and prevent access to those in your hosts lists and firewalls."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This way you might stave off your level of hackage for a while."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]