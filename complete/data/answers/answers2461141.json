[[{"text": ["How about using the MAC address as unique id?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The discussion here http://stackoverflow.com/questions/1750803/obtain-mac-address-from-devices-using-python shows how to obtain the MAC address"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/1750803/obtain-mac-address-from-devices-using-python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1750803/obtain-mac-address-from-devices-using-python"}]}], [{"text": ["for Windows you need DmiDecode for Windows (link) : "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "DmiDecode for Windows", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://gnuwin32.sourceforge.net/packages/dmidecode.htm", "text": "link", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n subprocess.Popen('dmidecode.exe -s system-uuid'.split())\n</code>\n</pre>\n", "senID": 1}, {"text": ["for Linux (non root):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n subprocess.Popen('hal-get-property --udi /org/freedesktop/Hal/devices/computer --key system.hardware.uuid'.split())\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Or if you don't want to use subprocess, (It's slow) use ctypes.", "This is for Linux non root."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import ctypes\nfrom ctypes.util import find_library\nfrom ctypes import Structure\n\nclass DBusError(Structure):\n    _fields_ = [(\"name\", ctypes.c_char_p),\n                (\"message\", ctypes.c_char_p),\n                (\"dummy1\", ctypes.c_int),\n                (\"dummy2\", ctypes.c_int),\n                (\"dummy3\", ctypes.c_int),\n                (\"dummy4\", ctypes.c_int),\n                (\"dummy5\", ctypes.c_int),\n                (\"padding1\", ctypes.c_void_p),]\n\n\nclass HardwareUuid(object):\n\n    def __init__(self, dbus_error=DBusError):\n        self._hal = ctypes.cdll.LoadLibrary(find_library('hal'))\n        self._ctx = self._hal.libhal_ctx_new()\n        self._dbus_error = dbus_error()\n        self._hal.dbus_error_init(ctypes.byref(self._dbus_error))\n        self._conn = self._hal.dbus_bus_get(ctypes.c_int(1),\n                                            ctypes.byref(self._dbus_error))\n        self._hal.libhal_ctx_set_dbus_connection(self._ctx, self._conn)\n        self._uuid_ = None\n\n    def __call__(self):\n        return self._uuid\n\n    @property\n    def _uuid(self):\n        if not self._uuid_:\n            udi = ctypes.c_char_p(\"/org/freedesktop/Hal/devices/computer\")\n            key = ctypes.c_char_p(\"system.hardware.uuid\")\n            self._hal.libhal_device_get_property_string.restype = \\\n                                                            ctypes.c_char_p\n            self._uuid_ = self._hal.libhal_device_get_property_string(\n                                self._ctx, udi, key, self._dbus_error)\n        return self._uuid_\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can use this like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n get_uuid = HardwareUuid()\nprint get_uuid()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["UUID -Universally Unique Identifier"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "UUID -Universally Unique Identifier", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Universally_Unique_Identifier#cite_note-19"}]}, {"text": ["Python uuid module"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Python uuid module", "tag": "a", "pos": 0, "childList": [{"text": "Python uuid module", "tag": "strong"}], "childNum": 1, "href": "http://docs.python.org/library/uuid.html"}, {"text": "Python uuid module", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["[RFC 4122] A Universally Unique IDentifier (UUID) URN Namespace"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[RFC 4122] A Universally Unique IDentifier (UUID) URN Namespace", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://tools.ietf.org/html/rfc4122.html"}]}], [{"text": ["I don't think there is a reliable, cross platform, way to do this.", "I know of one network device that changes its MAC address as a form of hardware error reporting, and there are a million other ways this could fail."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The only reliable solution is for your application to assign a unique key to each machine.", "Yes it can be spoofed, but you don't have to worry about it completely breaking.", "If you are worried about spoofing you can apply some sort of heuristic (like a change in mac address) to try and determine if the key has been moved."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["UPDATE: You can use bacterial fingerprinting."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://arstechnica.com/science/news/2010/03/experimenting-with-skin-bacteria-as-identification-device.ars", "text": "bacterial fingerprinting", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["There seems to be no direct \"python\" way of doing this.", "On modern PC hardware, there usually is an UUID stored in the BIOS - on Linux there is a command line utility dmidecode that can read this; example from my desktop:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dmidecode", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n System Information\n        Manufacturer: Dell Inc.\n        Product Name: OptiPlex 755                 \n        Version: Not Specified\n        Serial Number: 5Y8YF3J\n        UUID: 44454C4C-5900-1038-8059-B5C04F46334A\n        Wake-up Type: Power Switch\n        SKU Number: Not Specified\n        Family: Not Specified\n</code>\n</pre>\n", "senID": 1}, {"text": ["The problem with MAC addresses is that usually you can easily change them programmatically (at least if you run the OS in a VM)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "easily", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["On Windows, you can use this C API"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "C API", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/aa394587%28VS.85%29.aspx"}]}], [{"text": ["I found something else that I'm using.", "Mac address for linux, MachineGuid for windows and there is also something for mac."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["More details here:\nhttp://www.serialsense.com/blog/2011/02/generating-unique-machine-ids/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.serialsense.com/blog/2011/02/generating-unique-machine-ids/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.serialsense.com/blog/2011/02/generating-unique-machine-ids/"}]}]]