[[{"code": "<pre>\n<code>\n x = decimal.Decimal('8.00000000000000000000001')\nwith decimal.localcontext() as ctx:\n    ctx.prec=100000000000000000\n    ctx.rounding=decimal.ROUND_CEILING\n    y = x.to_integral_exact()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["The most direct way to take the ceiling of a Decimal instance x is to use x.to_integral_exact(rounding=ROUND_CEILING).", "There's no need to mess with the context here.", "Note that this sets the Inexact and Rounded flags where appropriate;  if you don't want the flags touched, use x.to_integral_value(rounding=ROUND_CEILING) instead.", "Example:"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x.to_integral_exact(rounding=ROUND_CEILING)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Inexact", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "Rounded", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "x.to_integral_value(rounding=ROUND_CEILING)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from decimal import Decimal, ROUND_CEILING\n&gt;&gt;&gt; x = Decimal('-123.456')\n&gt;&gt;&gt; x.to_integral_exact(rounding=ROUND_CEILING)\nDecimal('-123')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Unlike most of the Decimal methods, the to_integral_exact and to_integral_value methods aren't affected by the precision of the current context, so you don't have to worry about changing precision:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "to_integral_exact", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "to_integral_value", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from decimal import getcontext\n&gt;&gt;&gt; getcontext().prec = 2\n&gt;&gt;&gt; x.to_integral_exact(rounding=ROUND_CEILING)\nDecimal('-123')\n</code>\n</pre>\n", "senID": 3}, {"text": ["By the way, in Python 3.x, math.ceil works exactly as you want it to, except that it returns an int rather than a Decimal instance."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "math.ceil", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}, {"text": "Decimal", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can do this using the precision and rounding mode option of the Context constructor."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ctx = decimal.Context(prec=1, rounding=decimal.ROUND_CEILING)\nctx.divide(decimal.Decimal(800000000000000000001), decimal.Decimal(100000000000000000000))\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT:  You should consider changing the accepted answer..", "Although the prec can be increased as needed, to_integral_exact is a simpler solution."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "prec", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "to_integral_exact", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; decimal.Context(rounding=decimal.ROUND_CEILING).quantize(\n...   decimal.Decimal(800000000000000000001)/100000000000000000000, 0)\nDecimal('9')\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n def decimal_ceil(x):\n    int_x = int(x)\n    if x - int_x == 0:\n        return int_x\n    return int_x + 1\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I'm sure there are library functions to do this (as Ignacio Vazquez-Abrams points out), but since you haven't accepted any answer, I got the impression that you wanted to see how it's done - your own version of ceil.", "So here is one possible solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def ceil(d):\n    return [eval(\"int(d) + [0,1][int(bool(d-int(d)))]\"), eval(\"int(d)\")][int(d&lt;0)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Hope this helps"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]