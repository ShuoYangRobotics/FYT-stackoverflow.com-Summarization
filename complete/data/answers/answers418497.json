[[{"text": ["It's worth to have a look at http://codespeak.net/lxml/objectify.html "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://codespeak.net/lxml/objectify.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/objectify.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; xml = \"\"\"&lt;main&gt;\n... &lt;object1 attr=\"name\"&gt;content&lt;/object1&gt;\n... &lt;object1 attr=\"foo\"&gt;contenbar&lt;/object1&gt;\n... &lt;test&gt;me&lt;/test&gt;\n... &lt;/main&gt;\"\"\"\n\n&gt;&gt;&gt; from lxml import objectify\n\n&gt;&gt;&gt; main = objectify.fromstring(xml)\n\n&gt;&gt;&gt; main.object1[0]\n'content'\n\n&gt;&gt;&gt; main.object1[1]\n'contenbar'\n\n&gt;&gt;&gt; main.object1[0].get(\"attr\")\n'name'\n\n&gt;&gt;&gt; main.test\n'me'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or the other way around to build xml structures:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; item = objectify.Element(\"item\")\n\n&gt;&gt;&gt; item.title = \"Best of python\"\n\n&gt;&gt;&gt; item.price = 17.98\n\n&gt;&gt;&gt; item.price.set(\"currency\", \"EUR\")\n\n&gt;&gt;&gt; order = objectify.Element(\"order\")\n\n&gt;&gt;&gt; order.append(item)\n\n&gt;&gt;&gt; order.item.quantity = 3\n\n&gt;&gt;&gt; order.price = sum(item.price * item.quantity\n... for item in order.item)\n\n&gt;&gt;&gt; import lxml.etree\n\n&gt;&gt;&gt; print lxml.etree.tostring(order, pretty_print=True)\n&lt;order&gt;\n  &lt;item&gt;\n    &lt;title&gt;Best of python&lt;/title&gt;\n    &lt;price currency=\"EUR\"&gt;17.98&lt;/price&gt;\n    &lt;quantity&gt;3&lt;/quantity&gt;\n  &lt;/item&gt;\n  &lt;price&gt;53.94&lt;/price&gt;\n&lt;/order&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I've been recommending this more than once today, but try Beautiful Soup (easy_install BeautifulSoup)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Beautiful Soup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}, {"code": "<pre>\n<code>\n from BeautifulSoup import BeautifulSoup\n\nxml = \"\"\"\n&lt;main&gt;\n    &lt;object attr=\"name\"&gt;content&lt;/object&gt;\n&lt;/main&gt;\n\"\"\"\n\nsoup = BeautifulSoup(xml)\n# look in the main node for object's with attr=name, optionally look up attrs with regex\nmy_objects = soup.main.findAll(\"object\", attrs={'attr':'name'})\nfor my_object in my_objects:\n    # this will print a list of the contents of the tag\n    print my_object.contents\n    # if only text is inside the tag you can use this\n    # print tag.string\n</code>\n</pre>\n", "senID": 1}], [{"text": ["David Mertz's gnosis.xml.objectify would seem to do this for you.", "Documentation's a bit hard to come by, but there are a few IBM articles on it, including this one."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "gnosis.xml.objectify", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.xml.com/pub/a/2003/07/02/py-xml.html"}, {"text": "this one", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks/xml/library/x-matters39.html"}]}, {"code": "<pre>\n<code>\n from gnosis.xml import objectify\n\nxml = \"&lt;root&gt;&lt;nodes&gt;&lt;node&gt;node 1&lt;/node&gt;&lt;node&gt;node 2&lt;/node&gt;&lt;/nodes&gt;&lt;/root&gt;\"\nroot = objectify.make_instance(xml)\n\nprint root.nodes.node[0].PCDATA # node 1\nprint root.nodes.node[1].PCDATA # node 2\n</code>\n</pre>\n", "senID": 1}, {"text": ["Creating xml from objects in this way is a different matter, though."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["How about this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://evanjones.ca/software/simplexmlparse.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://evanjones.ca/software/simplexmlparse.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://evanjones.ca/software/simplexmlparse.html"}]}], [{"text": ["If googling around for a code-generator doesn't work, you could write your own that uses XML as input and outputs objects in your language of choice."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's not terribly difficult, however the three step process of Parse XML, Generate Code, Compile/Execute Script does making debugging a bit harder."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["There are three common XML parsers for python: xml.dom.minidom, elementree, and BeautifulSoup."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["IMO, BeautifulSoup is by far the best.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://www.crummy.com/software/BeautifulSoup/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.crummy.com/software/BeautifulSoup/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}], [{"code": "<pre>\n<code>\n #@Stephen: \n#\"can't hardcode the element names, so I need to collect them \n#at parse and use them somehow as the object names.\"\n\n#I don't think thats possible. Instead you can do this. \n#this will help you getting any object with a required name.\n\nimport BeautifulSoup\n\n\nclass Coll(object):\n    \"\"\"A class which can hold your Foo clas objects \n    and retrieve them easily when you want\n    abstracting the storage and retrieval logic\n    \"\"\"\n    def __init__(self):\n        self.foos={}        \n\n    def add(self, fooobj):\n        self.foos[fooobj.name]=fooobj\n\n    def get(self, name):\n        return self.foos[name]\n\nclass Foo(object):\n    \"\"\"The required class\n    \"\"\"\n    def __init__(self, name, attr1=None, attr2=None):\n        self.name=name\n        self.attr1=attr1\n        self.attr2=attr2\n\ns=\"\"\"&lt;main&gt;\n         &lt;object name=\"somename\"&gt;\n             &lt;attr name=\"attr1\"&gt;value1&lt;/attr&gt;\n             &lt;attr name=\"attr2\"&gt;value2&lt;/attr&gt;\n         &lt;/object&gt;\n         &lt;object name=\"someothername\"&gt;\n             &lt;attr name=\"attr1\"&gt;value3&lt;/attr&gt;\n             &lt;attr name=\"attr2\"&gt;value4&lt;/attr&gt;\n         &lt;/object&gt;\n     &lt;/main&gt;\n\"\"\"\n</code>\n</pre>\n", "senID": 0}, {"text": [], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n soup=BeautifulSoup.BeautifulSoup(s)\n\n\nbars=Coll()\nfor each in soup.findAll('object'):\n    bar=Foo(each['name'])\n    attrs=each.findAll('attr')\n    for attr in attrs:\n        setattr(bar, attr['name'], attr.renderContents())\n    bars.add(bar)\n\n\n#retrieve objects by name\nprint bars.get('somename').__dict__\n\nprint '\\n\\n', bars.get('someothername').__dict__\n</code>\n</pre>\n", "senID": 2}, {"text": ["output"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n {'attr2': 'value2', 'name': u'somename', 'attr1': 'value1'}\n\n\n{'attr2': 'value4', 'name': u'someothername', 'attr1': 'value3'}\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Just to add my bits though it's not about python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In PHP, to transform any XML string or file into a network of nested objects and access the values in the native OO way, is to use SimpleXML."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "SimpleXML", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.php.net/simplexml"}]}]]