[[{"text": ["Stacked LCs."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [y for x in a for y in [x[0]] * x[1]]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [['a',2], ['b',2], ['c',1]]\n&gt;&gt;&gt; [i for i, n in a for k in range(n)]\n['a', 'a', 'b', 'b', 'c']\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n import operator\na = [['a',2], ['b',2], ['c',1]]\nnums = [[x[0]]*x[1] for x in a]\nnums = reduce(operator.add, nums)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["An itertools approach:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html"}]}, {"code": "<pre>\n<code>\n import itertools\n\ndef flatten(it):\n    return itertools.chain.from_iterable(it)\n\npairs = [['a',2], ['b',2], ['c',1]]\nflatten(itertools.repeat(item, times) for (item, times) in pairs)\n# ['a', 'a', 'b', 'b', 'c']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you prefer extend over list comprehensions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = []\nfor x, y in l:\n    a.extend([x]*y)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [['a',2], ['b',2], ['c',1]]\n&gt;&gt;&gt; sum([[item]*count for item,count in a],[])\n['a', 'a', 'b', 'b', 'c']\n</code>\n</pre>\n", "senID": 0}]]