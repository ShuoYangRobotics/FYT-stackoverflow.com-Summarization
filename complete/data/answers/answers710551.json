[[{"text": ["The difference between import module and from module import foo is subjective.", "Pick the one you like best and be consistent in your use of it.", "Here are some points to help you decide on which you prefer"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "import module", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "from module import foo", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["import module"], "childNum": 0, "tag": "code", "senID": 1, "childList": []}, {"text": ["from module import foo"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}]}, {"text": ["Either method is acceptable, but don't use from module import *.  "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "from module import *", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For any reasonable large set of code, if you import * your will likely be cementing it into the module, unable to be removed.", "This is because it is difficult to determine what items used in the code are coming from 'module', making it east to get to the point where you think you don't use the import any more but its extremely difficult to be sure."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "import *", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "import", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Both ways are supported for a reason: there are times when one is more appropriate than the other."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["import module: nice when you are using many bits from the module.", "drawback is that you'll need to qualify each reference with the module name."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["from module import ...: nice that imported items are usable directly without module name prefix.", "drawback is that you must list each thing you use, and that it's not clear in code where something came from."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Which to use depends on which makes the code clear and readable, and has more than a little to do with personal preference.", "I lean toward import module generally because in the code it's very clear where an object or function came from.", "I use from module import ... when I'm using some object/function a lot in the code."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "import module", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "from module import ...", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "lot", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["I personally always use "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from package.subpackage.subsubpackage import module\n</code>\n</pre>\n", "senID": 1}, {"text": ["and then access everything as"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n module.function\nmodule.modulevar\n</code>\n</pre>\n", "senID": 3}, {"text": ["etc.", "The reason is that at the same time you have short invocation, and you clearly define the module namespace of each routine, something that is very useful if you have to search for usage of a given module in your source."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Needless to say, do not use the import *, because it pollutes your namespace and it does not tell you where a given function comes from (from which module)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Of course, you can run in trouble if you have the same module name for two different modules in two different packages, like"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n from package1.subpackage import module\nfrom package2.subpackage import module\n</code>\n</pre>\n", "senID": 7}, {"text": ["in this case, of course you run into troubles, but then there's a strong hint that your package layout is flawed, and you have to rethink it."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"code": "<pre>\n<code>\n import module\n</code>\n</pre>\n", "senID": 0}, {"text": ["Is best when you will use many functions from the module."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from module import function\n</code>\n</pre>\n", "senID": 2}, {"text": ["Is best when you want to avoid polluting the global namespace with all the functions and types from a module when you only need function."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "function", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["To add to what people have said about from x import *: besides making it more difficult to tell where names came from, this throws off code checkers like Pylint.", "They will report those names as undefined variables."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "from x import *", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["My own answer to this depends mostly on first, how many different modules I'll be using.", "If i'm only going to use one or two, I'll often use from ... import since it makes for fewer keystrokes in the rest of the file, but if I'm going to make use of many different modules, I prefer just import because that means that each module reference is self-documenting.", "I can see where each symbol comes from without having to hunt around."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "from", "childNum": 1, "tag": "strong", "pos": 1, "childList": [{"text": "from", "tag": "code"}]}, {"text": "from", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "import", "childNum": 1, "tag": "strong", "childList": [{"text": "import", "tag": "code"}]}, {"text": "import", "childNum": 0, "tag": "code", "childList": []}, {"text": "import", "childNum": 1, "tag": "strong", "childList": [{"text": "import", "tag": "code"}]}, {"text": "import", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Usuaully I prefer the self documenting style of plain import and only change to from.. import when the number of times I have to type the module name grows above 10 to 20, even if there's only one module being imported."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]