[[{"text": ["Here is what dict.items documentation says:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.6.4/library/stdtypes.html#dict.items"}]}, {"text": ["dict.items() return a copy of the dictionary\u2019s list of (key, value) pairs."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If items(), keys(), values(), iteritems(), iterkeys(), and itervalues() are called with no intervening modifications to the dictionary, the lists will directly correspond."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I think it's reasonable to assume that item ordering won't change if all you do is iteration."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The standard Python dict like most implementations does not preserve ordering as the items are usually accessed using the key."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["However predictable iteration is sometime useful and in Python 3.1 the collections module contains an OrderedDict that is order preserving with minimal performance overhead."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "collections", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/dev/py3k/library/collections.html#collections.OrderedDict", "text": "OrderedDict", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Yes.", "There's no randomisation involved.", "There's an even stronger guarantee -- see here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#dict.items"}]}], [{"text": ["A Python dictionary has no concept of order.", "So you can't depend on a specific order while iterating.   "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is deliberate: since it's a hashmap it's unavoidable if you want 'fast lookups'!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["collections.OrderedDict will be available in Python 2.7 in addition to Python 3.1."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "collections.OrderedDict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For Python versions earlier than 2.7, there's collective.ordereddict on PyPI, and Django has its own SortedDict implementation."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "collective.ordereddict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/collective.ordereddict/"}, {"href": "http://code.djangoproject.com/browser/django/trunk/django/utils/datastructures.py#L53", "text": "SortedDict", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["It might be preserved in some implementations, but don't count on it, as it is not a part of the Dict spec."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["As Christophe said, a dictionary is used to organise key/value pairs because of the fast access time it provides.", "If you application needs a fixed index, you should look at the other data structures that provide a specific/known order."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Having said that, it should be safe to assume that the order doesn't change unless items are added (there wouldn't be any point to do this expensive operation of reshuffling stuff) etc but, again, don't rely on it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]