[[{"text": ["No, there is no such method.", "The end of iteration is indicated by an exception.", "See the documentation."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "documentation", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#iterator-types"}]}], [{"text": ["If you really need a has-next functionality (because you're just faithfully transcribing an algorithm from a reference implementation in Java, say, or because you're writing a prototype that will need to be easily transcribed to Java when it's finished), it's easy to obtain it with a little wrapper class.", "For example:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "need", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "has-next", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "will", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class hn_wrapper(object):\n  def __init__(self, it):\n    self.it = iter(it)\n    self._hasnext = None\n  def __iter__(self): return self\n  def next(self):\n    if self._hasnext:\n      result = self._thenext\n    else:\n      result = next(self.it)\n    self._hasnext = None\n    return result\n  def hasnext(self):\n    if self._hasnext is None:\n      try: self._thenext = next(self.it)\n      except StopIteration: self._hasnext = False\n      else: self._hasnext = True\n    return self._hasnext\n</code>\n</pre>\n", "senID": 1}, {"text": ["now something like"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x = hn_wrapper('ciao')\nwhile x.hasnext(): print next(x)\n</code>\n</pre>\n", "senID": 3}, {"text": ["emits"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n c\ni\na\no\n</code>\n</pre>\n", "senID": 5}, {"text": ["as required."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Note that the use of next(sel.it) as a built-in requires Python 2.6 or better; if you're using an older version of Python, use self.it.next() instead (and similarly for next(x) in the example usage).", "[[You might reasonably think this note is redundant, since Python 2.6 has been around for over a year now -- but more often than not when I use Python 2.6 features in a response, some commenter or other feels duty-bound to point out that they are 2.6 features, thus I'm trying to forestall such comments for once;-)]]"], "childNum": 4, "tag": "p", "senID": 7, "childList": [{"text": "next(sel.it)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self.it.next()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "next(x)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "are", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["No.", "The most similar concept is most likely a StopIteration exception. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "StopIteration exception.", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/exceptions.html#exceptions.StopIteration"}]}], [{"text": ["hasNext somewhat translates to the StopIteration exception, e.g."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "hasNext", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "StopIteration", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; it = iter(\"hello\")\n&gt;&gt;&gt; it.next()\n'h'\n&gt;&gt;&gt; it.next()\n'e'\n&gt;&gt;&gt; it.next()\n'l'\n&gt;&gt;&gt; it.next()\n'l'\n&gt;&gt;&gt; it.next()\n'o'\n&gt;&gt;&gt; it.next()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n</code>\n</pre>\n", "senID": 1}, {"tag": "ul", "num": 2, "lis": [{"text": ["StopIteration"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}, {"text": "Some article about iterators and generator in python: ", "tag": "none", "senID": 3}]}], [{"text": ["I believe python just has next() and according to the doc, it throws an exception is there are no more elements."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/stdtypes.html#iterator-types"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#iterator-types", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#iterator-types"}]}], [{"text": ["In addition to all the mentions of StopIteration, the Python \"for\" loop simply does what you want:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; it = iter(\"hello\")\n&gt;&gt;&gt; for i in it:\n...     print i\n...\nh\ne\nl\nl\no\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can tee the iterator using, itertools.tee, and check for StopIteration on the teed iterator."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "tee", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "itertools.tee", "childNum": 0, "tag": "code", "childList": []}, {"text": "StopIteration", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Try the __length_hint__() method from any iterator object:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n iter(...).__length_hint__() &gt; 0\n</code>\n</pre>\n", "senID": 1}]]