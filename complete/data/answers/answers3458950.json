[[{"text": ["Define s before to assign it a value (also, change the test on s):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "s", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n user = users.get_current_user()\n\nbe = \"SELECT * FROM Benutzer ORDER BY date \"\n\nc = db.GqlQuery(be)\n\ns=0    # &lt;- init s here\n\nfor x in c:\n  if x.benutzer == user:\n    s=1\n    break\n  else:\n    s=2\nif s == 0:    # &lt;- change test on s\n  self.redirect('/')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Why exactly are you loading all users, then looping through them, just to find one?", "Use a where clause:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n be = \"SELECT * FROM Benutzer WHERE benutzer=:1\"\nc = db.GqlQuery(be, user)\nuser_from_db = c.get()\nif user_from_db is not None: # found someone\n    dostuff()\nelse:\n    self.redirect('/')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You want to set s to 0 before the for loop starts.", "If the query returns zero items, your for loop doesn't loop even once, so s is undefined."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}, {"text": "s", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also, you should use if s == 0: instead of if s is 0:.", "In CPython, they are both equivalent, but you shouldn't rely on the fact.", "See: the documentation for PyInt_FromLong and http://stackoverflow.com/questions/306313/python-is-operator-behaves-unexpectedly-with-integers."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "if s == 0:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if s is 0:", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "PyInt_FromLong", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/c-api/int.html#PyInt_FromLong"}, {"href": "http://stackoverflow.com/questions/306313/python-is-operator-behaves-unexpectedly-with-integers", "text": "http://stackoverflow.com/questions/306313/python-is-operator-behaves-unexpectedly-with-integers", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["You're using 's' before you assign something to it.", "Add an 's = 0' in the appropriate location."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Your problem is that if c is an empty list then the code in the for loop is never run and s never gets set, hence the error:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}, {"text": "s", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n UnboundLocalError: local variable 's' referenced before assignment\n</code>\n</pre>\n", "senID": 1}, {"text": ["What the error is telling you that you're referencing - i.e.", "using - s before it has any value - i.e.", "before a value has been assigned to it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["To fix this you just ensure s always is assigned a value:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n s = 0\n\nfor x in c:\n    if x.benutzer == user:\n        s = 1\n        break\n    else:\n        s = 2\n</code>\n</pre>\n", "senID": 4}], [{"text": ["In the case that c is empty the if statement in the loop never gets executed"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["you should set s=0 before the for loop"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "s=0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I don't know why you are doing this, but if I understand your code correctly, you have s=1 when x.benutzer == user, and s=2 otherwise (shouldn't this be s=0 if you are going to check against 0?", ")."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "s=1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x.benutzer == user", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "s=2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "s=0", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n for x in c:\n   if x.benutzer == user:\n      s=1\n      break\n   else:\n      s=2\nif s is 0:\n   self.redirect('/')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Anyway, here's my solution:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if not any(x.benutzer == user for x in c):\n   self.redirect('/')\n</code>\n</pre>\n", "senID": 3}]]