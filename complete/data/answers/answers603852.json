[[{"text": ["This works for me:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Receive"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import socket\nimport struct\n\nMCAST_GRP = '224.1.1.1'\nMCAST_PORT = 5007\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\nsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nsock.bind(('', MCAST_PORT))\nmreq = struct.pack(\"4sl\", socket.inet_aton(MCAST_GRP), socket.INADDR_ANY)\n\nsock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\n\nwhile True:\n  print sock.recv(10240)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Send"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import socket\n\nMCAST_GRP = '224.1.1.1'\nMCAST_PORT = 5007\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\nsock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 2)\nsock.sendto(\"robot\", (MCAST_GRP, MCAST_PORT))\n</code>\n</pre>\n", "senID": 4}, {"text": ["It is based off the examples from http://wiki.python.org/moin/UdpCommunication which didn't work."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://wiki.python.org/moin/UdpCommunication", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/UdpCommunication"}]}, {"text": ["My system is...\nLinux 2.6.31-15-generic #50-Ubuntu SMP Tue Nov 10 14:54:29 UTC 2009 i686 GNU/Linux\nPython 2.6.4"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Multicast sender that broadcasts to a multicast group:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nimport socket\nimport struct\n\ndef main():\n  MCAST_GRP = '224.1.1.1'\n  MCAST_PORT = 5007\n  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n  sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 32)\n  sock.sendto('Hello World!', (MCAST_GRP, MCAST_PORT))\n\nif __name__ == '__main__':\n  main()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Multicast receiver that reads from a multicast group and prints hex data to the console:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nimport socket\nimport binascii\n\ndef main():\n  MCAST_GRP = '224.1.1.1' \n  MCAST_PORT = 5007\n  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n  try:\n    sock.seckopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n  except AttributeError:\n     pass\n   sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 32) \n   sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_LOOP, 1)\n\n   sock.bind(('', MCAST_PORT))\n   host = socket.gethostbyname(socket.gethostname())\n   sock.setsockopt(socket.SOL_IP, socket.IP_MULTICAST_IF, socket.inet_aton(host))\n   sock.setsockopt(socket.SOL_IP, socket.IP_ADD_MEMBERSHIP, \n                   socket.inet_aton(MCAST_GRP) + socket.inet_aton(host))\n\n   while 1:\n     try:\n       data, addr = sock.recvfrom(1024)\n     except socket.error, e:\n       print 'Expection'\n     hexdata = binascii.hexlify(data)\n     print 'Data = %s' % hexdata\n\nif __name__ == '__main__':\n  main()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Multicast traffic is no different than regular UDP except for the IP address.", "Take a look at the standard socket library.", "You may be able to find something that builds on socket and is easier to use."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "socket library", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/socket.html"}]}], [{"text": ["There is always Twisted for anything networky."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Twisted", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com"}]}], [{"text": ["Have a look at py-multicast.", "Network module can check if an interface supports multicast (on Linux at least). "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "py-multicast", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://coobs.eu.org/py-multicast/"}]}, {"code": "<pre>\n<code>\n import multicast\nfrom multicast import network\n\nreceiver = multicast.MulticastUDPReceiver (\"eth0\", \"238.0.0.1\", 1234 )\ndata = receiver.read()\nreceiver.close()\n\nconfig = network.ifconfig()\nprint config['eth0'].addresses\n# ['10.0.0.1']\nprint config['eth0'].multicast\n#True - eth0 supports multicast\nprint config['eth0'].up\n#True - eth0 is up\n</code>\n</pre>\n", "senID": 1}, {"text": ["Perhaps problems with not seeing IGMP, were caused by an interface not supporting multicast?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["better use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sock.bind((MCAST_GRP, MCAST_PORT))\n</code>\n</pre>\n", "senID": 1}, {"text": ["instead of:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n sock.bind(('', MCAST_PORT))\n</code>\n</pre>\n", "senID": 3}, {"text": ["... because if you want to listen to multiple mcast groups on the same port, you'll get all messages on all listeners"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]