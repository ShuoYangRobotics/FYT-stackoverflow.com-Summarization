[[{"text": ["If they're all within a single module, then they only live in that module's namespace and you don't have to worry about name clashes.", "(And you can still import them into other namesapaces)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["MyModWithContstants.py"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x = 0\ny = 0\n\ndef someFunc():\n  dosomethingwithconstants(x,y)\n</code>\n</pre>\n", "senID": 3}, {"text": ["and we can also do"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["anotherMod.py"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n from MyModWithConstants import x\n# and also we can do\nimport MyModWithConstants as MMWC\n\ndef somOtherFunc():\n  dosomethingNew(x, MMWC.y)  \n  ## x and MMWC.y both refer to things in the other file\n</code>\n</pre>\n", "senID": 6}], [{"text": ["In addition to the separate module trick, if I want them in the same module I'll often put them in a class, like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "like this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/winpaths/0.1"}]}, {"code": "<pre>\n<code>\n class PathConstants(object):\n    CSIDL_DESKTOP = 0\n    CSIDL_PROGRAMS = 2\n\ndef get_desktop():\n    return _get_path_buf(PathConstants.CSIDL_DESKTOP)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to make them more constant-y, then you can make setattr throw:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class ConstantExeption(Exception):\n    pass\n\nclass ProgramConstants(object):\n    foo = 10\n    bar = 13\n    def __setattr__(self, key, val):\n        raise ConstantExeption(\"Cannot change value of %s\" % key)\n\n# got to use an instance...\nconstants = ProgramConstants()\nprint constants.foo\nconstants.bar = \"spam\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["The traceback:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n 10\nTraceback (most recent call last):\n  File \"...\", line 14, in &lt;module&gt;\n    constants.bar = \"spam\"\n  File \"...\", line 9, in __setattr__\n    raise ConstantExeption(\"Cannot change value of %s\" % key)\n__main__.ConstantExeption: Cannot change value of bar\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You could simply declare these variables at the module level (i.e.", "the top level of the .py source file) and there will be no need to use self or anything like that.", "In that case I think the convention would be to give them uppercase names."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": ".py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["By the way, I can't help but point out that you could be declaring them like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x, y, t = 0, 1, 2\n</code>\n</pre>\n", "senID": 2}], [{"text": ["If these \"variables\" are truly constants declaring them at module level seems logical.", "If you have to modify them from inside a function you just have to declare them global in that function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Have you considered "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n global x, y, z\nx=0\ny=1\nz=2\n</code>\n</pre>\n", "senID": 1}, {"text": [], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\nimport __builtin__\n__builtin__.__dict__[\"X\"] = 5\n</pre>\n", "senID": 0}, {"text": ["This will store the X constant in all modules executed until the interpreter exits."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Remember though to use it with care, as other python developers are not likely to expect this.", "I use it mainly for storing the translation function '_'."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]