[[{"text": ["In order to get around syntax errors you would have to use conditional imports, if you want to mix syntax between versions 2 and 3."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # just psuedocode\nif version is x:\n   import lib_x # contains version x implementation\nelse:\n   import lib_y # contains version y compatible implementation\n</code>\n</pre>\n", "senID": 1}, {"text": ["It is not advisable to try to maintain compatibility between python3 and older versions.", "That said, here are several ways of detecting the version of python being used:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["While not particularly human friendly, sys.hexversion will work across the widest variety of python versions, since it was added back in version 1.5.2:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "sys.hexversion", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\nif sys.hexversion == 0x20505f0:\n    print \"It's version 2.5.5!\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["You should be able to get version information from sys.version_info (added in python 2.0):"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "sys.version_info", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\nif sys.version_info[0] == 2:\n    print \"You are using version 2!\"\nelse:\n    print \"You are using version 1, because you would get SyntaxErrors if you were using 3!\"\n</code>\n</pre>\n", "senID": 6}, {"text": ["Alternatively you could use the platform module, though that was introduced in python 2.3, and  would not be available in older versions (assuming you even care about them):"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n try:\n    import platform\n    if platform.python_version().startswith('2'):\n        print \"You're using python 2.x!\"\nexcept ImportError, e:\n    print \"You're using something older than 2.3. Yuck.\"\n</code>\n</pre>\n", "senID": 8}], [{"tag": "ul", "num": 4, "lis": [{"text": "If you want to maintain a codebase that works with Python 2 and 3, you wouldn't try to make code that will run in both, which will be awkward and ugly and bugprone, you would write in Python 2 and use ", "tag": "none", "senID": 0}, {"text": "Another option is ", "tag": "none", "senID": 1}, {"text": ["When you support multiple versions of Python, it is generally better to directly check for the capability you want rather than to check a version number.", "Checking version numbers directly is fragile and indirect."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you want a script to remember what version it is from, like you say, don't bother trying to support multiple versions at all.", "Put the proper version number binary in the shebang line and run the script based on that."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]}], [{"text": ["FYI, if you ever want to port 2.x scripts to 3.x, you can use 2to3 source conversion tool."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "2to3 source conversion tool", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/2to3.html"}]}], [{"text": ["If the only issue is that you want to use the right print statement to avoid syntax errors, you can avoid the problem altogether by using the print() function in Python 2.6:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if sys.version_info[0:2] == (2,6):           # Or you could use try/except here\n    from __future__ import print_function\nprint(\"Now you can use print as a function regardless of whether you're on 2.6 or 3.x!\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, if you also want to support earlier versions of Python, this won't work."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["On Linux, Mac etc, you should use the standard first line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python2\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python2.6\n</code>\n</pre>\n", "senID": 3}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python3\n</code>\n</pre>\n", "senID": 5}, {"text": ["On Windows, having such a first line is useful from a documentation point of view, even if Windows doesn't use it to choose the interpreter."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["The sys module also contains the version info (first available in version 2.0):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sys", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\n\nif sys.version_info[0] == 2:\n    print \"You are using Python 2.x\"\n</code>\n</pre>\n", "senID": 1}]]