[[{"text": ["If you have several versions of Python installed, /usr/bin/env will ensure the interpreter used is the first one on your environment's $PATH.", "The alternative would be to hardcode something line #!/usr/bin/python or the like -- that's OK but less flexible."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "/usr/bin/env", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "$PATH", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "#!/usr/bin/python", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["In Unix, an executable file that's meant to be interpreted must indicate what interpreter to use by having a #!", "at the start of the first line, followed by the interpreter (and any flags it may need); otherwise, I believe the default is /bin/sh."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "#!", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "/bin/sh", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["If you're talking about other platforms, of course, this rule does not apply (but that \"shebang line\" does no harm, and will help if you ever copy that script to a platform with a Unix base, such as Linux, Mac, etc)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "with", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["That is called the shebang line.", "As the Wikipedia entry explains:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "shebang line", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.in-ulm.de/~mascheck/various/shebang/"}, {"text": "Wikipedia entry explains", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Shebang_%28Unix%29"}]}, {"text": ["See also the Unix FAQ entry."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Unix FAQ entry", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.faqs.org/faqs/unix-faq/faq/part3/section-16.html"}]}, {"text": ["Even on Windows, where the shebang line does not determine the interpreter to be run, you can pass options to the interpreter by specifying them on the shebang line.", "I find it useful to keep a generic shebang line in one-off scripts (such as the ones I write when answering questions on SO), so I can quickly test them on both Windows and ArchLinux."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "ArchLinux", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.archlinux.org/"}]}, {"text": ["The env utility allows you to invoke a command on the path:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "env utility", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ss64.com/bash/env.html"}]}], [{"text": ["Expanding a bit on the other answers, here's a little example of how your command line scripts can get into trouble by incautious use of /usr/bin/env shebang lines:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "/usr/bin/env", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ /usr/local/bin/python -V\nPython 2.6.4\n$ /usr/bin/python -V\nPython 2.5.1\n$ cat my_script.py \n#!/usr/bin/env python\nimport json\nprint \"hello, json\"\n$ PATH=/usr/local/bin:/usr/bin\n$ ./my_script.py \nhello, json\n$ PATH=/usr/bin:/usr/local/bin\n$ ./my_script.py \nTraceback (most recent call last):\n  File \"./my_script.py\", line 2, in &lt;module&gt;\n    import json\nImportError: No module named json\n</code>\n</pre>\n", "senID": 1}, {"text": ["The json module doesn't exist in Python 2.5."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["One way to guard against that kind of problem is to use the versioned python command names that are typically installed with most Pythons:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n $ cat my_script.py \n#!/usr/bin/env python2.6\nimport json\nprint \"hello, json\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you just need to distinguish between Python 2.x and Python 3.x, recent releases of Python 3 also provide a python3 name:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "python3", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ cat my_script.py \n#!/usr/bin/env python3\nimport json\nprint(\"hello, json\")\n</code>\n</pre>\n", "senID": 6}], [{"text": ["The main reason to do this is to make the script portable across operating system environments.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example under mingw, python scripts use :"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #!/c/python3k/python\n</code>\n</pre>\n", "senID": 2}, {"text": ["and under GNU/Linux distribution it is either:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/local/bin/python\n</code>\n</pre>\n", "senID": 4}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n</code>\n</pre>\n", "senID": 6}, {"text": ["and under the best commercial Unix sw/hw system of all (OS/X), it is:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n #!/Applications/MacPython 2.5/python\n</code>\n</pre>\n", "senID": 8}, {"text": ["or on FreeBSD:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/local/bin/python\n</code>\n</pre>\n", "senID": 10}, {"text": ["However all these differences can make the script portable across all by using:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n</code>\n</pre>\n", "senID": 12}], [{"text": ["Technically, in Python, this is just a comment line."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This line is only used if you run the py script from the shell (from the command line).", "This is know as the \"Shebang!", "\" and is used in various situations, not just with Python scripts\nHere, it instructs the shell to start [a specific version of] Python (to take care of the rest of the file."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "from the shell", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "Shebang", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}]}], [{"text": ["If so, then perhaps you're running the Python program on Windows?", "Windows doesn't use that line\u2014instead, it uses the file-name extension to run the program associated with the file extension."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This is a shell convention that tells the shell which program can execute the script."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n#!/usr/bin/env python\n</pre>\n", "senID": 1}, {"text": ["resolves to a path to the Python binary."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It's recommended way, proposed in documentation:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["from http://docs.python.org/py3k/tutorial/interpreter.html#executable-python-scripts"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/py3k/tutorial/interpreter.html#executable-python-scripts", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/py3k/tutorial/interpreter.html#executable-python-scripts"}]}], [{"text": ["If you have a few scripting file which has #!/usr/bin/env python changed into #!/usr/bin/env python2.6, it is OK. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "#!/usr/bin/env python", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "#!/usr/bin/env python2.6", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["However, if we have a lot files with #!/usr/bin/env python, and we have multiple type of python (say python --> python2.4 and python26 --> python2.6) and moreover we want to keep the file as orginal as possible."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "#!/usr/bin/env python", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "python", "childNum": 0, "tag": "code", "childList": []}, {"text": "python2.4", "childNum": 0, "tag": "code", "childList": []}, {"text": "python26", "childNum": 0, "tag": "code", "childList": []}, {"text": "python2.6", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I tried to make alias python='/usr/bin/python26, but failed."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "alias python='/usr/bin/python26", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]