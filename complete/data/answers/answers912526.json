[[{"text": ["The simplest thing to do would be to create a class.", "Instead of dealing with a list of variables, the class will have attributes.", "Then you just use a single instance of the class."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There are two decent options that come to mind."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The first is to use a dictionary to gather all the variables in one place:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n d = {}\nd['var1'] = [1,2,3]\nd['var2'] = 'asdf'\nfoo(d)\n</code>\n</pre>\n", "senID": 2}, {"text": ["The second is to use a class to bundle all the arguments.", "This could be something as simple as:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n    pass\nf = Foo()\nf.var1 = [1,2,3]\nf.var2 = 'asdf'\nfoo(f)\n</code>\n</pre>\n", "senID": 4}, {"text": ["In this case I would prefer the class over the dictionary, simply because you could eventually provide a definition for the class to make its use clearer or to provide methods that handle some of the packing and unpacking work. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["To me, the ideal solution is to use a class like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Vars(object):\n...     def __init__(self, **argd):\n...             self.__dict__.update(argd)\n...\n&gt;&gt;&gt; x = Vars(x=1, y=2)\n&gt;&gt;&gt; x.x\n1\n&gt;&gt;&gt; x.y\n2\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can also build a dictionary and pass it like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; some_dict = {'x' : 1, 'y' : 2}\n&gt;&gt;&gt; #the two stars below mean to pass the dict as keyword arguments\n&gt;&gt;&gt; x = Vars(**some_dict)  \n&gt;&gt;&gt; x.x\n1\n&gt;&gt;&gt; x.y\n2\n</code>\n</pre>\n", "senID": 3}, {"text": ["You may then get data or alter it as need be when passing it to a function:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def foo(some_vars):\n...     some_vars.z = 3 #note that we're creating the member z\n...\n&gt;&gt;&gt; foo(x)\n&gt;&gt;&gt; x.z\n3\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You can obtain much the same effect as \"pass by reference\" by passing a dict (or for syntactic convenience a Bunch, see http://code.activestate.com/recipes/52308/)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Bunch", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://code.activestate.com/recipes/52308/", "text": "http://code.activestate.com/recipes/52308/", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["if you have a finite set of these cases, you could write specific wrapper functions for each one.", "Each wrapper would do the work of building and unpacking lists taht are passed to the internal function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This way you will only be modifying a small manageable section of the code time and again.", "Of course you should encapsulate all this into a class if your comfortable working with classes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"\"\"Store all variables\n\"\"\"\nvars = {}\n\"\"\"Store the order of display\n\"\"\"\norder = []\n\n\"\"\"Define a function that will store details and order of the variable definitions\n\"\"\"\ndef makeVar(parent, order, name, value, prompt):\n    parent[name] = dict(zip(('value', 'prompt'), (value, prompt)))\n    order.append(name)\n\n\"\"\"Create your variable definitions in order\n\"\"\"\nmakeVar(vars, order, 's', 'this is a string', 'your string here')\nmakeVar(vars, order, 'i', 1, 'your int here')\nmakeVar(vars, order, 'f', 3.14, 'your float here')\n\n\"\"\"Use a list comprehension to prepare your input\n\"\"\"\nmy_list = [[name, vars[name]['prompt'], vars[name]['value']] for name in order]\ninput_panel = Input(my_list)\n\nout_list = input_panel.results();\n\"\"\"Collect your output\n\"\"\"\nfor i in range(0, len(order)):\n    vars[order[i]]['value'] = out_list[i];\n</code>\n</pre>\n", "senID": 1}]]