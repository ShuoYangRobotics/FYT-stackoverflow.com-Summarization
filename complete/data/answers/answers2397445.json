[[{"text": ["The new standard is WSGI (Web Server Gateway Interface) and it is supported with mod_wsgi for Apache."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "WSGI", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "WSGI", "tag": "a"}]}, {"href": "http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface", "text": "WSGI", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://code.google.com/p/modwsgi/", "text": "mod_wsgi", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["Most popular Python web frameworks support WSGI (Django, Pylons, CherryPy, ...).", "These frameworks can help you to quickly develop your applications."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "Django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/"}, {"text": "Pylons", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://pylonshq.com/"}, {"text": "CherryPy", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.cherrypy.org/"}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["You can use CherryPy for very simple applications.", "Here is a quick What is your name example."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "CherryPy", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.cherrypy.org/browser/trunk/cherrypy/tutorial/tut03_get_and_post.py"}, {"text": "What is your name", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["These kinds of questions usually result in every python web framework known to man being mentioned once or twice.", "As Desintegr pointed out, wsgi is the standard interface for python web applications.", "However, if it is a tad too low level for your tastes, I recommend pyramid.", "Here's a simple web app straight from the documentation.", "No quickstart needed."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "pyramid", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pylonsproject.org/"}, {"text": "documentation", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://pylonsproject.org/projects/pyramid/dev/narr/firstapp.html#hello-world-goodbye-world"}]}, {"code": "<pre>\n<code>\n from pyramid.config import Configurator\nfrom pyramid.response import Response\nfrom paste.httpserver import serve\n\ndef hello_world(request):\n    return Response('Hello world!')\n\ndef goodbye_world(request):\n    return Response('Goodbye world!')\n\nif __name__ == '__main__':\n    config = Configurator()\n    config.add_view(hello_world)\n    config.add_view(goodbye_world, name='goodbye')\n    app = config.make_wsgi_app()\n    serve(app, host='0.0.0.0')\n</code>\n</pre>\n", "senID": 1}, {"text": ["The beauty is pyramid can scale up nicely to the most complex applications if needed.", "And is not opinionated, thus it is very flexible."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "pyramid", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pylonsproject.org/"}, {"text": "most complex applications", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://karlproject.org/"}]}, {"text": ["If pyramid is too much abstraction, I would recommend webob which you can look at as a very thin abstraction on top of the wsgi spec."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "pyramid", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pylonsproject.org/"}, {"href": "http://pythonpaste.org/webob/", "text": "webob", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Actually, it sounds like this may be an excellent use-case for bottle: "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "bottle", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/defnull/bottle"}]}, {"text": ["Example code that does something"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from bottle import route, run\n\n@route('/')\ndef index():\n    return 'Hello World!'\n\nrun(host='localhost', port=8080)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Give Django a look."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/"}]}, {"text": ["From the website:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["\"Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["A list of python web frameworks is given here.", "If you are looking for something lightweight, this slideshow compares 10 micro frameworks and should be of intrest."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "is given here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/WebFrameworks"}, {"text": "this slideshow", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.slideshare.net/r1chardj0n3s/web-microframework-battle"}]}], [{"text": ["You can try out Spyce. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Spyce", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://spyce.sourceforge.net/docs/doc-intro_design.html"}]}], [{"text": ["You can avoid both mod_python and mod_wsgi by running Tornado (tornadoweb.org).", "It's the server used by friendfeed.", "So, map a URL to a class, then create a class that defines get()/post() methods (or whatever HTTP methods you want to support), and \"just run it\" like a normal python app.", "Tornado is the web server, and has the bare essentials of a very simple \"framework\".", "Check out the demos.", "I use django on some projects, but I also use Tornado, and I think if your application is really simple and you need to get something done yesterday, the learning curve to get something to happen now is not as onerous in Tornado as it is with Django. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "now", "childNum": 0, "tag": "em", "pos": 5, "childList": []}]}, {"text": ["That said, Django has awesome docs, and if you have the time to learn it, the payoff is there. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Also take a look at pinax.", "It is built on top of DJango and it will give you a good head start with your web site."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pinax", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pinaxproject.com/"}]}]]