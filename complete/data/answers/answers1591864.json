[[{"text": ["I could be misunderstanding, but you appear to be concerned about the presentation and seem to want to get beyond a 2d table with just one axis per variable.", "As you point out, things get difficult with more variables.", "A spreadsheet is inherently 2d and the best you'll get with graphing is 3d.", "I'd bet you have more variables than that."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["My suggestion is organizing your data as columns of variables &amp; results.", "List one experiment per row.", "That is sure simple for python.csv to deal with."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Slice/sort/manipulate the info with the \"Data->Auto Filter\" in Excel or Open Office to see which variables are significant.", "Graph in simple line graphs to see the relations you may miss.", "Then, after you have your relations figured out you might find that a 2d table is good way to present the data.", "Maybe you can take the next step with numpy or matplotlib."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Hope this helps."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If the number of variables or the number of possible values for each variable is even moderately large, the set of tests can quickly become unwieldy.", "In that case you probably want to consider reasonable coverage with a subset of the values.", "An example tool for generating a candidate set of tests is Allpairs (perl, so you should be able to adapt it to your own needs if necessary).", "Not sure if this is the sort of \"framework\" you are looking for or not.", "See also csvtest."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Allpairs", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.satisfice.com/tools.shtml"}, {"text": "csvtest", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://code.google.com/p/csvtest/wiki/FAQ"}]}, {"text": ["...", "I'll repeat here my comment that you should use one column per variable, one row per test (numbers pulled out of thin air below)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a  b  c   time  precision  recall\n1  1  0    2     0.5        0.7\n1  2  0    3  ...etc.\n</code>\n</pre>\n", "senID": 2}, {"text": ["Not only is this simpler to inspect, but you can perform analysis on it (including the cross-sections in your example spreadsheet) in a fairly straightforward manner as well.", "Think of it as a single database table."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I think PyTables will do what you are looking for, and more.", "It lets you make HDF5 tables/files.", "Guessing from the examples in the documentation, it was originally built for recording results from experiments.  "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PyTables", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pytables.org/moin"}, {"text": "the examples in the documentation", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.pytables.org/docs/manual/ch03.html#id323222"}]}, {"text": ["It also allows you to nest columns, which if I understand your google docs example correctly, will allow you keep all of your results in one table as you vary a, b and c."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "nest columns", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pytables.org/docs/manual/ch03.html#id327136"}, {"text": "and", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Edit:\nYou can define tables with dictionaries instead of classes.", "Example.", "Documentation.", "This will allow you to create a table with an appropriate number of columns based on values of 'a'.  "], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Example", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.pytables.org/docs/manual/ch03.html#secondExample"}, {"text": "Documentation", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.pytables.org/docs/manual/ch04.html#createTableDescr"}]}, {"text": ["Basically your definition of columns will look something like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n table_def = {'a1': Int32Col(pos=0), 'a2': Int32Col(pos=1), etc.}\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then, you'll add new records for each value of 'b'."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["If you are only concerned with display, you could write an Excel file with xlwt.", "(cheatsheet)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "xlwt", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/xlwt"}, {"text": "cheatsheet", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://panela.blog-city.com/pyexcelerator%5Fxlwt%5Fcheatsheet%5Fcreate%5Fnative%5Fexcel%5Ffrom%5Fpu.htm"}]}, {"text": ["It can write xls files directly, without using Excel.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You can merge row label cells to group the results for each experiment.", "Or, just write one row per experiment, with each variable having its own column (as others have suggested) and use either a pivot table or sumproduct to shape the data into the desired format.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I believe Matlab to be perfect for generating and manipulating such tables.", "It treats the universe as vectors and matrices, and it's very high-level.", "Downsides:\nIt's very expensive\nIf you plan to automate the running of tests, integrating Matlab to what your test programs are running at might be hard."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}]}], [{"text": ["I'm a little confused about exactly what you want to generate.", "Are you trying to just format tables, or actually generate the combinations of the values?", "In that case you'll want to look at design-of-experiment or test matrix generation tools like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["All Pairs (Python)"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Test Matrix (Matlab)"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["Matrix Computation Toolbox (Matlab)"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": "or the ", "tag": "none", "senID": 4}]}], [{"text": ["Some things that I suggest that you look at are PyEPL, the Python Experiment-Programming Library geared for psychology experiments, and this paper on Agile Control of a Complex Experiment which covers the authors experience in using Python for experiment control."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PyEPL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyepl.sourceforge.net/"}, {"href": "http://gael-varoquaux.info/computers/agile%5Fcomputer%5Fcontrol%5Fof%5Fan%5Fexperiment.pdf", "text": "Agile Control of a Complex Experiment", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["For internal manipulation of tables, you should be using NumPy and if you need to store them, then PyTables HDF5 format is widely used in science."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["DAKOTA(Design Analysis Kit for Optimization and Terascale Applications) may be what you are looking for.", "Not Python, but ROSE(Repetitive Object-Oriented Simulation Environment) is also something to look at.", "Both of these incorporate Design of Experiments."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "DAKOTA", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cs.sandia.gov/DAKOTA/software.html"}, {"text": "ROSE", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20080047741%5F2008047287.pdf"}]}], [{"text": ["A good framework to automate testing is nose: http://somethingaboutorange.com/mrl/projects/nose/0.11.1/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://somethingaboutorange.com/mrl/projects/nose/0.11.1/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose/0.11.1/"}]}, {"text": ["It recognizes any function with the word 'tests_' in its name as a function. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]