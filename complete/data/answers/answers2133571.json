[[{"code": "<pre>\n<code>\n ''.join(lst)\n</code>\n</pre>\n", "senID": 0}, {"text": ["the only pythonic way:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "clear (that what all the big boys do and what they expect to see),", "tag": "none", "senID": 2}, {"text": "simple (no additional imports needed, stable across all versions),", "tag": "none", "senID": 3}, {"text": "fast (written in C) and ", "tag": "none", "senID": 4}, {"text": "concise (on an empty string join elements of iterable!).", "tag": "none", "senID": 5}]}], [{"text": ["Have a look at Guido's essay on python optimization, it covers converting lists of numbers to strings.", "Unless you have a good reason to do otherwise, use the join example."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "essay", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/essays/list2str/"}, {"text": "good", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "join", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Of course it's join.", "How do I know?", "Let's do it in a really stupid way:\nIf the problem was only adding 2 strings, you'd most likely use str1 + str2.", "What does it take to get that to the next level?", "Instinctively, for most (I think), will be to use sum.", "Let's see how that goes:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "str1 + str2", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "sum", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"code": "<pre>\n<code>\n In [1]: example = ['a', 'b', 'c']\nIn [2]: sum(example, '')\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython console&gt; in &lt;module&gt;()\nTypeError: sum() can't sum strings [use ''.join(seq) instead]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Wow!", "Python simply told me what to use!", ":)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I myself use the \"join\" way, but from python 2.6 there is a base type that is little used: bytearray."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "bytearray", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Bytearrays can be incredible useful -- for string containing texts, since the best thing is to have then in unicode, the \"join\" way is the way to go -- but if you are dealing with binary data instead, bytearrays can be both more pythonic and more efficient:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lst = ['o','s','s','a','m','a']\n&gt;&gt;&gt; a = bytearray(lst)\n&gt;&gt;&gt; a\nbytearray(b'ossama')\n&gt;&gt;&gt; print a\nossama\n</code>\n</pre>\n", "senID": 2}, {"text": ["it is a built in data type: no imports needed - just use then -- and you can use a bytearray isntead of a list to start with - so they should be more efficinet than the \"join\", since there is no data copying to get the string representation for a bytearray."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Great answer from SilenGhost BUT, just a few words about the presented reduce \"alternative\""], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "reduce", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Unless you've got a very very VERY good reason to concatenate strings using + or operator.add (the most frequent one, that you've got few, fixed number of strings), you should use always join."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "VERY", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "childList": []}, {"text": "operator.add", "childNum": 0, "tag": "code", "childList": []}, {"text": "join", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Just because each + generates a new string which is the concatenation of two strings, unless join that only generates one final string.", "So, imagine you've got 3 strings:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "+", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n A + B + C\n--&gt;\nD = A + B\nfinal = D + C\n</code>\n</pre>\n", "senID": 3}, {"text": ["Ok, doesn't seems not much, but you've got to reserve memory for D. Also, due python use of strings, generating a new, intermediate, string, it's somehow expensive..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Now, with 5 strings"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n A + B + C + D + E\n--&gt;\nF = A + B\nG = F + C\nH = G + D\nfinal = H + E\n</code>\n</pre>\n", "senID": 6}, {"text": ["Assuming the best scenario (if we do (A+B) + (C+D) + E, we'll end having three intermediate strings at the same time on memory), that's generating 3 intermediate strings... You've got to generate a new python object, reserve memory space, release the memory a few times... Also the overhead of calling a Python function (that is not small)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Now think of it with 200 strings.", "We'll end up with a ridiculous big number of intermediate strings, each of one consuming combining quite a lot time on being a complete list over python, and calling a lot of operator.add functions, each with its overhead...", "Even if you use reduce functions, it won't help.", "It's a problem that has to be managed with a different approach: join, which only generates ONE complete python string, the final one and calls ONE python function."], "childNum": 4, "tag": "p", "senID": 8, "childList": [{"text": "operator.add", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "reduce", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "join", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "ONE", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["(Of course, join, or other similar, specialized function for arrays)"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Here's the least Pythonic way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n out = \"\"\nfor x in range(len(lst)):\n  for y in range(len(lst)):\n    if x + y == len(lst)-1:\n        out = lst[y] + out\n</code>\n</pre>\n", "senID": 1}]]