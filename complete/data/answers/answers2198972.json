[[{"text": ["I use pypcap to read packets and dpkt to parse."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "pypcap", "tag": "a", "pos": 0, "childList": [{"text": "pypcap", "tag": "code"}], "childNum": 1, "href": "http://code.google.com/p/pypcap/"}, {"text": "pypcap", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://code.google.com/p/dpkt/", "text": "dpkt", "childNum": 1, "tag": "a", "childList": [{"text": "dpkt", "tag": "code"}]}, {"text": "dpkt", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For example, to use dpkt to read packets from a saved pcap:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import socket\nimport dpkt\nimport sys\npcapReader = dpkt.pcap.Reader(file(sys.argv[1], \"rb\"))\nfor ts, data in pcapReader:\n    ether = dpkt.ethernet.Ethernet(data)\n    if ether.type != dpkt.ethernet.ETH_TYPE_IP: raise\n    ip = ether.data\n    src = socket.inet_ntoa(ip.src)\n    dst = socket.inet_ntoa(ip.dst)\n    print \"%s -&gt; %s\" % (src, dst)\n</code>\n</pre>\n", "senID": 2}, {"text": ["To grab frames off the wire with pypcap:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import pcap\n    pc = pcap.pcapObject()\n    dev = sys.argv[1]\n    pc.open_live(dev, 1600, 0, 100)\n    pc.setfilter(\"udp port 53\", 0, 0)\n    while 1:\n        pc.dispatch(1, p.pcap_dispatch)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Of course, the two can be used together:  (ripped from pypcap's homepage)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import dpkt, pcap\n&gt;&gt;&gt; pc = pcap.pcap()\n&gt;&gt;&gt; pc.setfilter('icmp')\n&gt;&gt;&gt; for ts, pkt in pc:\n...     print `dpkt.ethernet.Ethernet(pkt)`\n</code>\n</pre>\n", "senID": 6}, {"text": ["Good luck!"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["tshark provides a CLI to much of Wireshark's functionality, if you are looking to harness Wireshark's protocol analyzers and data manipulation capabilities."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "tshark", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.wireshark.org/docs/man-pages/tshark.html"}]}, {"text": ["If you wanted to do some digging into Wireshark's source code, it has several C libraries that may be of use, particularly wiretap and epan.", "Examples of its use can be found in the tshark source.", "You have to erect quite a bit of scaffolding to use the libraries, however."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "source code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://anonsvn.wireshark.org/viewvc/trunk/"}, {"text": "tshark source", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://anonsvn.wireshark.org/viewvc/trunk/tshark.c?view=markup"}]}, {"text": ["If you are looking to develop plugins, this page may hold some answers for you."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this page", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.codeproject.com/KB/IP/custom_dissector.aspx"}]}], [{"text": ["I wasn't able to find any information indicating that to be possible in the developer's guide.", "So that seems indicate \"no\"."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "developer's guide", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.wireshark.org/docs/wsdg_html_chunked/"}]}], [{"text": ["Try the lua scripting that they've got in the newer versions of wireshark.. you can write custom dissectors (for your own protocols and so on)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://wiki.wireshark.org/Lua"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://wiki.wireshark.org/Lua", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.wireshark.org/Lua"}]}], [{"text": ["c++ well could not find one.. but here is the wireshark documentation of Python support..!", "http://wiki.wireshark.org/Python"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://wiki.wireshark.org/Python", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://wiki.wireshark.org/Python"}]}], [{"text": ["Since there's at least one that makes commercial products that integrate somewhat with wireshark , it has to be possible.", "It seems the immediate integration point is with the data it produces according to wikipedia, Wireshark uses libpcap.", "A quick google search reveals that there are several options "], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "one", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cacetech.com/"}, {"text": "Wireshark", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Wireshark"}, {"text": "libpcap", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Pcap"}, {"text": "options", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.google.com/search?hl=en&client=firefox-a&rls=org.mozilla%3Aen-US%3Aofficial&hs=xUL&q=python+libpcap&aq=f&aqi=g1&oq="}]}, {"text": ["Scapy actually looks kind of interesting, though it doesn't really do anything to interact with wireshark, but you can capture packets with it. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Scapy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.secdev.org/projects/scapy/"}]}], [{"text": ["wireshark uses libpcap, this library abstracts away platform differences in packet sniffing and provides a format for data files.", "that's how I'd inject packets into wireshark."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "format for data files", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://wiki.wireshark.org/Development/LibpcapFileFormat"}]}]]