[[{"text": ["Use set():"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n woduplicates = set(lseparatedOrblist)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Returns a set without duplicates.", "If you, for some reason, need a list back:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n woduplicates = list(set(lseperatedOrblist))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can do this like that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = list(set(x))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example: if you do something like that:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x = [1,2,3,4,5,6,7,8,9,10,2,1,6,31,20]\nx = list(set(x))\nx\n</code>\n</pre>\n", "senID": 3}, {"text": ["you will see the following result:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 31]\n</code>\n</pre>\n", "senID": 5}, {"text": ["There is only one thing you should think of: the resulting list will not be ordered as the original one (will lose the order in the process)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["It's because you are missing a capital letter, actually."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Purposely dedented:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for i in lseparatedOrbList:   # capital 'L'\nfor j in lseparatedOrblist:   # lowercase 'l'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Though the more efficient way to do it would be to insert the contents into a set."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If maintaining the list order matters (ie, it must be \"stable\"), check out the answers on this question"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "check out the answers on this question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-in-python-whilst-preserving-order"}]}], [{"text": ["No, it's simply a typo, the \"list\" at the end must be capitalized.", "You can nest loops over the same variable just fine (although there's rarely a good reason to)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, there are other problems with the code.", "For starters, you're iterating through lists, so i and j will be items not indices.", "Furthermore, you can't change a collection while iterating over it (well, you \"can\" in that it runs, but madness lies that way - for instance, you'll propably skip over items).", "And then there's the complexity problem, your code is O(n^2).", "Either convert the list into a set and back into a list (simple, but shuffles the remaining list items) or do something like this:"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "j", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "set", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n seen = set()\nnew_x = []\nfor x in xs:\n    if x in seen:\n        continue\n    seen.add(x)\n    new_xs.append(x)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Both solutions require the items to be hashable.", "If that's not possible, you'll probably have to stick with your current approach sans the mentioned problems."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["This should do it for you:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n new_list = list(set(old_list))\n</code>\n</pre>\n", "senID": 1}, {"text": ["set will automatically remove duplicates.", "list will cast it back to a list."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["This should be a much faster and will preserve the original order:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n seen = {}\nnew_list = [seen.setdefault(x, x) for x in my_list if x not in seen]\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you don't care about order, you can just:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n new_list = list(set(my_list))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Just make a new list to populate, if the item for your list is not yet in the new list input it, else just move on to the next item in your original list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in mylist:\n  if i not in newlist:\n    newlist.append(i)\n</code>\n</pre>\n", "senID": 1}, {"text": ["I think this is the correct syntax, but my python is a bit shaky, I hope you at least get the idea."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]