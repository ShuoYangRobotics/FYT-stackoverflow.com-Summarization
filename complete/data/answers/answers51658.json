[[{"text": ["At last, complete cross-platform solution (use standard lib only):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport platform\nimport ctypes\n\ndef get_free_space(folder):\n    \"\"\" Return folder/drive free space (in bytes)\n    \"\"\"\n    if platform.system() == 'Windows':\n        free_bytes = ctypes.c_ulonglong(0)\n        ctypes.windll.kernel32.GetDiskFreeSpaceExW(ctypes.c_wchar_p(folder), None, None, ctypes.pointer(free_bytes))\n        return free_bytes.value\n    else:\n        return os.statvfs(folder).f_bfree\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The os.statvfs() function is a better way to get that information for Unix-like platforms (including OS X).", "The Python documentation says \"Availability: Unix\" but it's worth checking whether it works on Windows too in your build of Python (ie.", "the docs might not be up to date)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.statvfs()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.org/doc/2.5/lib/os-file-dir.html"}]}, {"text": ["Otherwise, you can use the pywin32 library to directly call the GetDiskFreeSpaceEx function."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "pywin32", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/pywin32/"}, {"href": "http://msdn.microsoft.com/en-us/library/aa364937(VS.85).aspx", "text": "GetDiskFreeSpaceEx", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["If you dont like to add another dependency you can for windows use ctypes to call the win32 function call directly. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import ctypes\n\nfree_bytes = ctypes.c_ulonglong(0)\n\nctypes.windll.kernel32.GetDiskFreeSpaceExW(ctypes.c_wchar_p(u'c:\\\\'), None, None, ctypes.pointer(free_bytes))\n\nif free_bytes.value == 0:\n   print 'dont panic'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A good cross-platform way is using psutil:\nhttp://code.google.com/p/psutil/wiki/Documentation#Disks\n(Note that you'll need psutil 0.3.0 or above)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/psutil/wiki/Documentation#Disks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/psutil/wiki/Documentation#Disks"}]}], [{"text": ["I Don't know of any cross-platform way to achieve this, but maybe a good workaround for you would be to write a wrapper class that checks the operating system and uses the best method for each."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For Windows, there's the GetDiskFreeSpaceEx method in the win32 extensions."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "GetDiskFreeSpaceEx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://aspn.activestate.com/ASPN/docs/ActivePython/2.2/PyWin32/win32api__GetDiskFreeSpaceEx_meth.html"}]}], [{"text": ["I have found a good solution on Ubuntu Forums:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys,os,statvfs\n\nf = os.statvfs(\"/home\")\nprint \"preferred block size\", \"=&gt;\", f[statvfs.F_BSIZE]\nprint \"fundamental block size\", \"=&gt;\", f[statvfs.F_FRSIZE]\nprint \"total blocks\", \"=&gt;\", f[statvfs.F_BLOCKS]\nprint \"total free blocks\", \"=&gt;\", f[statvfs.F_BFREE]\nprint \"available blocks\", \"=&gt;\", f[statvfs.F_BAVAIL]\nprint \"total file nodes\", \"=&gt;\", f[statvfs.F_FILES]\nprint \"total free nodes\", \"=&gt;\", f[statvfs.F_FFREE]\nprint \"available nodes\", \"=&gt;\", f[statvfs.F_FAVAIL]\nprint \"max file name length\", \"=&gt;\", f[statvfs.F_NAMEMAX]\n</code>\n</pre>\n", "senID": 1}, {"text": ["To get Size in Mega Bytes:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import os, sys, statvfs\nf = os.statvfs(pathToDirectory)\ntotalSize = (f[statvfs.F_BSIZE] * f[statvfs.F_BFREE]) / 1024/1024/1024\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can use df as a cross-platform way.", "It is a part of GNU core utilities.", "These are the core utilities which are expected to exist on every operating system.", "However, they are not installed on Windows by default (Here, GetGnuWin32 comes in handy)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "df", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://man.he.net/?section=all&topic=df"}, {"text": "GNU core utilities", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.gnu.org/software/coreutils/"}, {"text": "GetGnuWin32", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://getgnuwin32.sourceforge.net/"}]}, {"text": ["df is a command-line utility, therefore a wrapper required for scripting purposes.", "For example: "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "df", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from subprocess import PIPE, Popen\n\ndef free_volume(filename):\n    \"\"\"Find amount of disk space available to the current user (in bytes) \n       on the file system containing filename.\"\"\"\n    stats = Popen([\"df\", \"-Pk\", filename], stdout=PIPE).communicate()[0]\n    return int(stats.splitlines()[1].split()[3]) * 1024\n</code>\n</pre>\n", "senID": 2}]]