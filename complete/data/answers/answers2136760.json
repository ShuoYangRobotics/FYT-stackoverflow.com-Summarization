[[{"text": ["If you haven't found it yet, here is Dive into Python's chapter on object-oriented programming."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Dive into Python's chapter on object-oriented programming", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/object_oriented_framework/index.html"}]}, {"text": ["Here are some more examples, scroll to BankAccount."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "examples", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/SimplePrograms"}]}, {"text": ["You can call a class directly to create an instance.", "Parameters are passed to the __init__ method."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class Tamago(object):\n    def __init__(self, name):\n        self.name = name\n\nimouto = Tamago('imouto')\noba = Tamago('oba')\noba.name # 'oba'\nimouto.name # 'imouto'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Given your edit i assume you have the class name as a string and want to instantiate the class?", "Just use a dictionary as a dispatcher."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n    pass\n\nclass Bar(object):\n    pass\n\ndispatch_dict = {\"Foo\": Foo, \"Bar\": Bar}\ndispatch_dict[\"Foo\"]() # returns an instance of Foo\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Let's say you have three classes: Enemy1, Enemy2, Enemy3.", "This is how you instantiate them directly:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Enemy1()\nEnemy2()\nEnemy3()\n</code>\n</pre>\n", "senID": 1}, {"text": ["but this will also work:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x = Enemy1\nx()\nx = Enemy2\nx()\nx = Enemy3\nx()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Is this what you meant?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["This is a very strange question to ask, specifically of python, so being more specific will definitely help me answer it.", "As is, I'll try to take a stab at it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'm going to assume what you want to do is create a new instance of a datastructure and give it a variable.", "For this example I'll use the dictionary data structure and the variable mydictionary."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n mydictionary = dict()\n</code>\n</pre>\n", "senID": 2}, {"text": ["This will create a new instance of the dictionary data structure and place it in the variable named mydictionary.", "Alternatively the dictionary constructor can also take arguments:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n mydictionary = dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])\n</code>\n</pre>\n", "senID": 4}, {"text": ["Finally, python will attempt to figure out what data structure I mean from the data I give it.", "IE"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n mydictionary = {'jack': 4098, 'sape': 4139}\n</code>\n</pre>\n", "senID": 6}, {"text": ["These examples were taken from Here"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html"}]}], [{"text": ["If you just want to pass a class to a function, so that this function can create new instances of that class, just treat the class like any other value you would give as a parameter:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def printinstance(someclass):\n  print someclass()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Result:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; printinstance(list)\n[]\n&gt;&gt;&gt; printinstance(dict)\n{}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Rather than use multiple classes or class inheritance, perhaps a single Toy class that knows what \"kind\" it is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Toy:\n    num = 0\n    def __init__(self, name, kind, *args):\n        self.name = name\n        self.kind = kind\n        self.data = args\n        self.num = Toy.num\n        Toy.num += 1\n\n    def __repr__(self):\n        return ' '.join([self.name,self.kind,str(self.num)])\n\n    def playWith(self):\n        print self\n\ndef getNewToy(name, kind):\n    return Toy(name, kind)\n\nt1 = Toy('Suzie', 'doll')\nt2 = getNewToy('Jack', 'robot')\nprint t1\nt2.playWith()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Running it:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ python toy.py \nSuzie doll 0\nJack robot 1\n</code>\n</pre>\n", "senID": 3}, {"text": ["As you can see, getNewToy is really unnecessary.", "Now you can modify playWith to check the value of self.kind and change behavior, you can redefine playWith to designate a playmate:"], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "getNewToy", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "playWith", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "self.kind", "childNum": 0, "tag": "code", "childList": []}, {"text": "playWith", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def playWith(self, who=None):\n    if who:  pass\n    print self\n\nt1.playWith(t2)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I think you can use eval.", "Something like this"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def toclass(strcls):\n    return eval(strcls)()\n</code>\n</pre>\n", "senID": 1}]]