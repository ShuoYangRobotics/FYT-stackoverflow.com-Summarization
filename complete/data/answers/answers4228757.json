[[{"text": ["If you're running Python 2.7, try importing argparse.", "Python 3.2 will also use it, and it is the new preferred way to parse arguments."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "argparse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0389/"}]}, {"text": ["This sample code from the Python documentation page takes in a list of ints and finds either the max or the sum of the numbers passed."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "documentation page", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/library/argparse.html"}]}, {"code": "<pre>\n<code>\n import argparse\n\nparser = argparse.ArgumentParser(description='Process some integers.')\nparser.add_argument('integers', metavar='N', type=int, nargs='+',\n                   help='an integer for the accumulator')\nparser.add_argument('--sum', dest='accumulate', action='store_const',\n                   const=sum, default=max,\n                   help='sum the integers (default: find the max)')\n\nargs = parser.parse_args()\nprint(args.accumulate(args.integers))\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Python way is to try and fail if the input does not support operation like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n   sys.argv = sys.argv[:1]+map(int,sys.argv[1:])\nexcept TypeError:\n   print 'Incorrect integers', sys.argv[1:]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["str.isdigit() can be used to test if a string is comprised solely of numbers."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "str.isdigit()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#str.isdigit"}]}], [{"text": ["More generally, you can use isinstance to see if something is an instance of a class."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "isinstance", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Obviously, in the case of script arguments, everything is a string, but if you are receiving arguments to a function/method and want to check them, you can use:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def foo(bar):\n    if not isinstance(bar, int):\n        bar = int(bar)\n    # continue processing...\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can also pass an iterable of classes to isinstance:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n isinstance(bar, (int, float, decimal.Decimal))\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; int('foo')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: 'foo'\n</code>\n</pre>\n", "senID": 0}, {"text": ["Give it to int.", "If it doesn't raise a ValueError then the string was an integer."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ValueError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You can cast the argument and try... except the ValueError."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you are using sys.argv, also investigate argparse."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can use type to determine the type of any object in Python.", "This works in Python 2.6, I don't personally know if it's present in other versions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n obvious_string = \"This is a string.\"\nif type(obvious_string) != int:\n    print \"Bro, that is so _not_ an integer.\"\nelse:\n    print \"Thanks for the integer, brotato chip.\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I am new to Python so I am posting this not only to help but also be helped: get comments on why my approach is/isn't the the best one, that is. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, with the disclaimer that I am not an experienced python dev, here is what I would do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n inp = sys.argv[x]\ntry:\n    input = int(inp)\nexcept ValueError:\n    print(\"Input is not an integer\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["What the above does is that it puts sys.argv[x] to inp and then tries to put the integer form of inp to input.", "If there is not an integer form of inp then inp is not a number so a ValueError exception is raised."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I take it that's your main problem and you know how to check if you have all three parameters in the correct form.", "If not, just let us know and I am sure you will get more answers.", ":)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Just realizedTony Veijalainenposted asimilar answer"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "Just realizedTony Veijalainenposted asimilar answer", "childNum": 2, "tag": "em", "pos": 0, "childList": [{"text": "Tony Veijalainen", "tag": "a"}, {"text": "similar answer", "tag": "a"}]}, {"href": "http://stackoverflow.com/users/392132/tony-veijalainen", "text": "Tony Veijalainen", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://stackoverflow.com/questions/4228757/python-test-if-an-argument-is-an-integer/4228785#4228785", "text": "similar answer", "childNum": 0, "tag": "a", "childList": []}]}]]