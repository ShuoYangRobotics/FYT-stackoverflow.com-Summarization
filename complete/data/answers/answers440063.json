[[{"text": ["Do you mean?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def gs(a,b):\n    def ry():\n        if a==b:\n            return a\n    return ry()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As you mention \"steps\" in a function, it almost seems like you want a generator:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def gs(a,b):\n  def ry():\n    if a==b:\n      yield a\n  # If a != b, ry does not \"generate\" any output\n  for i in ry():\n    yield i\n  # Continue doing stuff...\n  yield 'some other value'\n  # Do more stuff.\n  yield 'yet another value'\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Generators can now also act as coroutines, since Python 2.5, using the new yield syntax."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "new yield syntax", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/expressions.html#yield-expressions"}]}], [{"text": ["Check for that then:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def gs(a,b):\n    def ry():\n        if a==b:\n            return a\n    ret = ry()\n    if ret: return ret\n    # do other stuff\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This should allow you to keep checking the state and return from the outer function if a and b ever end up the same:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def gs(a,b):\n    class SameEvent(Exception):\n        pass\n    def ry():\n        if a==b:\n            raise SameEvent(a)\n    try:\n        # Do stuff here, and call ry whenever you want to return if they are the same.\n        ry()\n\n        # It will now return 3.\n        a = b = 3\n        ry()\n\n    except SameEvent as e:\n        return e.args[0]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["you return ry() explicitly instead of just calling it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I had a similar problem, but solved it by simply changing the order of the call. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def ry ()\n    if a==b \n        gs()\n</code>\n</pre>\n", "senID": 1}, {"text": ["in some languages like javascript you can even pass a function as a variable in a function:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n function gs(a, b, callback) {\n   if (a==b) callback();\n}\n\ngs(a, b, ry);\n</code>\n</pre>\n", "senID": 3}]]