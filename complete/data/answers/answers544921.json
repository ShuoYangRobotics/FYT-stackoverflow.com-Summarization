[[{"text": ["lines = open(filename).read().splitlines()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Here's a generator that does what you requested.", "In this case, using rstrip is sufficient and slightly faster than strip."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lines = (line.rstrip('\\n') for line in open(filename))\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, you'll most likely want to use this to get rid of trailing whitespaces too."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n lines = (line.rstrip() for line in open(filename))\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n for line in file('/tmp/foo'):\n    print line.strip('\\n')\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I use this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def cleaned( aFile ):\n    for line in aFile:\n        yield line.strip()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then I can do things like this."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n lines = list( cleaned( open(\"file\",\"r\") ) )\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or, I can extend cleaned with extra functions to, for example, drop blank lines or skip comment lines or whatever."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Just use generator expressions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n blahblah = (l.rstrip() for l in open(filename))\nfor x in blahblah:\n    print x\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also I want to advise you against reading whole file in memory -- looping over generators is much more efficient on big datasets."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'd do it like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f = open('test.txt')\nl = [l for l in f.readlines() if l.strip()]\nf.close()\nprint l\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What do you thing about this approach?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n with open(filename) as data:\n    datalines = (line.rstrip('\\r\\n') for line in data)\n    for line in datalines:\n        ...do something awesome...\n</code>\n</pre>\n", "senID": 1}, {"text": ["Generator expression avoids loading whole file into memory and with ensures closing the file"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]