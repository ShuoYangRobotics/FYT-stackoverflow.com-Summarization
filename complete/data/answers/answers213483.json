[[{"text": ["CherryPy.", "Features, as listed from the website:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CherryPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cherrypy.org/"}]}, {"tag": "ul", "num": 10, "lis": [{"text": "A fast, HTTP/1.1-compliant, WSGI thread-pooled webserver. Typically, CherryPy itself takes only 1-2ms per page!", "tag": "none", "senID": 1}, {"text": "Support for any other WSGI-enabled webserver or adapter, including Apache, IIS, lighttpd, mod_python, FastCGI, SCGI, and mod_wsgi", "tag": "none", "senID": 2}, {"text": "Easy to run multiple HTTP servers (e.g. on multiple ports) at once", "tag": "none", "senID": 3}, {"text": "A powerful configuration system for developers and deployers alike", "tag": "none", "senID": 4}, {"text": "A flexible plugin system", "tag": "none", "senID": 5}, {"text": "Built-in tools for caching, encoding, sessions, authorization, static content, and many more", "tag": "none", "senID": 6}, {"text": "A native mod_python adapter", "tag": "none", "senID": 7}, {"text": "A complete test suite", "tag": "none", "senID": 8}, {"text": "Swappable and customizable...everything.", "tag": "none", "senID": 9}, {"text": "Built-in profiling, coverage, and testing support. ", "tag": "none", "senID": 10}]}], [{"text": ["Consider reconsidering your design.", "Maintaining that much state in your webserver is probably a bad idea.", "Multi-process is a much better way to go for stability. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Is there another way to share state between separate processes?", "What about a service?", "Database?", "Index? "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It seems unlikely that maintaining a huge array of data in memory and relying on a single multi-threaded process to serve all your requests is the best design or architecture for your app. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Twisted can serve as such a web server.", "While not multithreaded itself, there is a (not yet released) multithreaded WSGI container present in the current trunk.", "You can check out the SVN repository and then run:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Twisted", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/"}]}, {"code": "<pre>\n<code>\n twistd web --wsgi=your.wsgi.application\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Its hard to give a definitive answer without knowing what kind of site you are working on and what kind of load you are expecting.", "Sub second performance may be a serious requirement or it may not.", "If you really need to save that last millisecond then you absolutely need to keep your arrays in memory.", "However as others have suggested it is more than likely that you don't and could get by with something else.", "Your usage pattern of the data in the array may affect what kinds of choices you make.", "You probably don't need access to the entire set of data from the array all at once so you could break your data up into smaller chunks and put those chunks in the cache instead of the one big lump.", "Depending on how often your array data needs to get updated you might make a choice between memcached, local db (berkley, sqlite, small mysql installation, etc) or a remote db.", "I'd say memcached for fairly frequent updates.", "A local db for something in the frequency of hourly and remote for the frequency of daily.", "One thing to consider also is what happens after a cache miss.", "If 50 clients all of a sudden get a cache miss and all of them at the same time decide to start regenerating those expensive arrays your box(es) will quickly be reduced to 8086's.", "So you have to take in to consideration how you will handle that.", "Many articles out there cover how to recover from cache misses.", "Hope this is helpful."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Not multithreaded, but twisted might serve your needs."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "twisted", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/trac/"}]}], [{"text": ["Perhaps you have a problem with your implementation in Python using BaseHttpServer.", "There's no reason for it to \"get stuck\", and implementing a simple threaded server using BaseHttpServer and threading shouldn't be difficult."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "BaseHttpServer", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "BaseHttpServer", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "threading", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also, see http://blog.doughellmann.com/2007/12/pymotw-basehttpserver.html about implementing a simple multi-threaded server with HTTPServer and ThreadingMixIn"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "http://blog.doughellmann.com/2007/12/pymotw-basehttpserver.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blog.doughellmann.com/2007/12/pymotw-basehttpserver.html"}, {"text": "HTTPServer", "childNum": 0, "tag": "code", "childList": []}, {"text": "ThreadingMixIn", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You could instead use a distributed cache that is accessible from each process, memcached being the example that springs to mind."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "memcached", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.danga.com/memcached/"}]}], [{"text": ["web.py has made me happy in the past.", "Consider checking it out."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But it does sound like an architectural redesign might be the proper, though more expensive, solution."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I actually had the same issue recently.", "Namely: we wrote a simple server using BaseHTTPServer and found that the fact that it's not multi-threaded was a big drawback."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["My solution was to port the server to Pylons (http://pylonshq.com/).", "The port was fairly easy and one benefit was it's very easy to create a GUI using Pylons so I was able to throw a status page on top of what's basically a daemon process. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pylonshq.com/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pylonshq.com/"}]}, {"text": ["I would summarize Pylons this way:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "it's similar to Ruby on Rails in that it aims to be very easy to deploy web apps", "tag": "none", "senID": 3}, {"text": "it's default templating language, Mako, is very nice to work with", "tag": "none", "senID": 4}, {"text": "it uses a system of routing urls that's very convenient", "tag": "none", "senID": 5}, {"text": "for us performance is not an issue, so I can't guarantee that Pylons would perform adequately for your needs", "tag": "none", "senID": 6}, {"text": "you can use it with Apache &amp; Lighthttpd, though I've not tried this", "tag": "none", "senID": 7}]}, {"text": ["We also run an app with Twisted and are happy with it.", "Twisted has good performance, but I find Twisted's single-threaded/defer-to-thread programming model fairly complicated.", "It has lots of advantages, but would not be my choice for a simple app."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Good luck."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["I use CherryPy both personally and professionally, and I'm extremely happy with it.", "I even do the kinds of thing you're describing, such as having global object caches, running other threads in the background, etc.", "And it integrates well with Apache; simply run CherryPy as a standalone server bound to localhost, then use Apache's mod_proxy and mod_rewrite to have Apache transparently forward your requests to CherryPy."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "mod_proxy", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "mod_rewrite", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The CherryPy website is http://cherrypy.org/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://cherrypy.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cherrypy.org/"}]}], [{"text": ["Just to point out something different from the usual suspects..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some years ago while I was using Zope 2.x I read about Medusa as it was the web server used for the platform.", "They advertised it to work well under heavy load and it can provide you with the functionality you asked. "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Zope", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://zope.org/"}, {"text": "Medusa", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.nightmare.com/medusa/medusa.html"}]}]]