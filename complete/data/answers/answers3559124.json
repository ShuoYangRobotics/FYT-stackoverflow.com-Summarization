[[{"text": ["The operators in the list comprehension line associate like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"\".join([(((c in this.d) and this.d[c]) or c) for c in this.s])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Removing the list comprehension:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n result = []\nfor c in this.s:\n   result.append(((c in this.d) and this.d[c]) or c)\nprint \"\".join(result)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Removing the and/or boolean trickery, which is used to emulate a if-else statement:"], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "childList": []}, {"text": "else", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n result = []\nfor c in this.s:\n   if c in this.d:\n      result.append(this.d[c])\n   else:\n      result.append(c)\nprint \"\".join(result)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You are correct about the flow."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The loop is of kind [dosomething(c) for c in this.s] It's a list comprehension and should be read as dosomething for all c in this.s."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "[dosomething(c) for c in this.s]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The Dutch part is about Guido Van Rossum creator of python is Dutch."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Your analysis is close.", "It is a list comprehension.", "(btw, the same output would result if the outer square brackets were eliminated, which would be called a generator comprehension)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There is some documentation here."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}, {"text": ["The basic form of a list comprehension is"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [expression for var in enumerable if condition]\n</code>\n</pre>\n", "senID": 3}, {"text": ["They are evaluated in this order:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["The result is the list of expression values for each element in the enumerable for which the condition was true."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["This example doesn't use a condtion, so what is left, after adding some parentheses is:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n [(c in this.d and this.d[c] or c) for c in (this.s)]\n</code>\n</pre>\n", "senID": 7}, {"text": ["this.s is the enumerable.", "c is the iterating variable.", "c in this.d and this.d[c] or c is the expression."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "this.s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "c in this.d and this.d[c] or c", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["c in this.d and this.d[c] or c uses the short-circuiting nature of python's logical operators to achieve the same thing as this.d[c] if c in this.d else c."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "c in this.d and this.d[c] or c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "this.d[c] if c in this.d else c", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["All in all, I would not call this obfuscated at all.", "Once you understand the power of list comprehensions, it will look quite natural."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["Generally, list comprehensions are of the following form:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [ expression for var in iterator ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["When I write down a list comprehension, I often start by writing"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [ for var in iterator ]\n</code>\n</pre>\n", "senID": 3}, {"text": ["because many years of procedural programming has inculcated the for-loop aspect into my mind as the part that comes first."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["And, as you've rightly noted, the for-loop is the part that seems to \"execute\" first."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["For each pass through the loop, the expression is evaluated.", "(A minor point: expressions are evaluated, statements are executed."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["So in this case, we have"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n [ expression for c in this.s ]\n</code>\n</pre>\n", "senID": 8}, {"text": ["this.s is a string.", "In Python, strings are iterators!", "When you write"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n for c in some_string:\n</code>\n</pre>\n", "senID": 10}, {"text": ["the loop iterates over the characters in the string.", "So c takes on each of the characters in this.s in order."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Now the expression is"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n c in this.d and this.d[c] or c\n</code>\n</pre>\n", "senID": 13}, {"text": ["This is what's known as a ternary operation.", "That link explains the logic, but the basic idea is"], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "ternary operation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Ternary_operation#Python"}]}, {"code": "<pre>\n<code>\n if c in this.d:\n    the expression evaluates to this.d[c]\nelse:\n    the expression evaluates c\n</code>\n</pre>\n", "senID": 15}, {"text": ["The condition c in this.d is thus simply to check that the dict this.d has a key with value c. If it does, return this.d[c], and if it doesn't, return c itself."], "childNum": 5, "tag": "p", "senID": 16, "childList": [{"text": "c in this.d", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "this.d", "childNum": 0, "tag": "code", "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "childList": []}, {"text": "this.d[c]", "childNum": 0, "tag": "code", "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Another way to write it would be"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n [this.d.get(c,c) for c in this.s]\n</code>\n</pre>\n", "senID": 18}, {"text": ["(the second argument to the get method is the default value returned when the first argument is not in the dict)."], "childNum": 1, "tag": "p", "senID": 19, "childList": [{"text": "get method", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#dict.get"}]}, {"text": ["PS.", "The ternary form"], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"code": "<pre>\n<code>\n condition and value1 or value2\n</code>\n</pre>\n", "senID": 21}, {"text": ["is error prone.", "(Consider what happens if condition is True, but value1 is None.", "Since condition is True, you might expect the ternary form to evaluate to value1, that is, None.", "But since None has boolean value False, the ternary form evaluates to value2 instead.", "Thus, if you are not careful and aware of this pitfall, the ternary form can introduce errors.", ") "], "childNum": 9, "tag": "p", "senID": 22, "childList": [{"text": "condition", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "value1", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "condition", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "value1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "value2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["For modern versions of Python a better way to write this would be"], "childNum": 0, "tag": "p", "senID": 23, "childList": []}, {"code": "<pre>\n<code>\n value1 if condition else value2\n</code>\n</pre>\n", "senID": 24}, {"text": ["It is not susceptible to the pitfall mentioned above.", "If condition is True, the expression always evaluates to value1."], "childNum": 2, "tag": "p", "senID": 25, "childList": [{"text": "condition", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "value1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["But in the particular case above, I'd prefer this.d.get(c,c)."], "childNum": 1, "tag": "p", "senID": 26, "childList": [{"text": "this.d.get(c,c)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["\"\".join([c in this.d and this.d[c] or c for c in this.s]) is certainly obfuscated.", "Here's a Zen version:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"\".join([c in this.d and this.d[c] or c for c in this.s])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["this.s.decode('rot13')"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this.s.decode('rot13')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["My version with modern if else and generator:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import this ## prints zenofpython\nprint '-'*70\nwhatiszenofpython = \"\".join(this.d[c] if c in this.d else c for c in this.s)\nzen = ''\nfor c in this.s:\n    zen += this.d[c] if c in this.d else c\nprint zen\n</code>\n</pre>\n", "senID": 1}, {"text": ["Verbal version: \nimport this, the main program of it descrambles and print the message this.s\nTo descramble the message replace those letters which are found in dict this.d with their decoded counter parts (upper/lowercase different).", "The other letters do not need to change but print as they are."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]