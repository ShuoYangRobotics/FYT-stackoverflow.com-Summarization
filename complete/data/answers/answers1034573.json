[[{"code": "<pre>\n<code>\n def xstr(s):\n    return '' if s is None else str(s)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you know that the value will always either be a string or None:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n xstr = lambda s: s or \"\"\n\nprint xstr(\"a\") + xstr(\"b\") # -&gt; 'ab'\nprint xstr(\"a\") + xstr(None) # -&gt; 'a'\nprint xstr(None) + xstr(\"b\") # -&gt; 'b'\nprint xstr(None) + xstr(None) # -&gt; ''\n</code>\n</pre>\n", "senID": 1}], [{"text": ["return s or '' will work just fine for your stated problem!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "return s or ''", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you actually want your function to behave like the str() built-in, but return an empty string when the argument is None, do this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "str()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def xstr(s):\n    if s is None:\n        return ''\n    return str(s)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def xstr(s):\n    return {None:''}.get(s, s)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Variation on the above if you need to be compatible with Python 2.4"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n xstr = lambda s: s is not None and s or ''\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Functional way (one-liner)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n xstr = lambda s: '' if s is None else s\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def xstr(s):\n   return s or \"\"\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n def xstr(s):\n    return s if s else ''\n\ns = \"%s%s\" % (xstr(a), xstr(b))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Use short circuit evaluation:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = a or '' + b or ''\n</code>\n</pre>\n", "senID": 1}, {"text": ["Since + is not a very good operation on strings, better use format strings:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n s = \"%s%s\" % (a or '', b or '')\n</code>\n</pre>\n", "senID": 3}]]