[[{"text": ["You can do something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.sub(r'^(\\d{3})0(\\d)$', r'\\g&lt;1&gt;1\\2', '7001')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or if it's not always three numbers before the 0 you want to replace:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n re.sub(r'^(\\d+)0(\\d)$', r'\\g&lt;1&gt;1\\2', '1234509')\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit If you know that the number will always be of the same format, you can just use:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n re.sub(r'0(?=\\d$)', '1', '7001')\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You don't really need regexes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n replace = lambda x: '{0}1{1}'.format(x[:-2], x[-1]) if x[-2] == '0' else x\n# or: x[:-2] + '1' + x[-1]\nprint replace('12345678901')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use a named group to get around this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n int(re.sub(r'^(?P&lt;prefix&gt;\\d+?)0(\\d)$', r'\\g&lt;prefix&gt;1\\2', '7001'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["But the most natural approach would probably be"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n int(re.sub(r'0(\\d)$', r'1\\1', '7001'))\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; r = re.compile(r'(\\d{3})0(\\d)')\n&gt;&gt;&gt; r.sub('\\g&lt;1&gt;1\\g&lt;2&gt;', '88808')\n88818\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Another one 'not brilliant' solution without regex - but i have to try it for myself atleast:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data = ['7001', '700001', '701', '71', '12345']\nres = (int(x)+10 if len(x) &gt; 2 and x[-2] == '0' else int(x) for x in a )\nprint list(res)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's a numeric solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def addTenNumeric(n):\n  \"\"\"Add 10 to n if, as decimal, the 2nd least significant digit of n is 0\"\"\"\n  if (n % 100) &lt; 10:\n    return n + 10\n  return n\n</code>\n</pre>\n", "senID": 1}, {"text": ["This ought to be a lot quicker than using regular expressions on string representations."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]