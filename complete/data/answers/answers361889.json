[[{"text": ["I think cairo will do a lot of what you want.", "They have python bindings, too."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "cairo", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cairographics.org/"}, {"text": "python bindings", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.cairographics.org/pycairo/"}]}, {"text": ["The one requirement that that won't help you with is modifying previously-drawn polygons, but I don't know of any canvas that will do that for you. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Sounds like a job for OpenGL."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "OpenGL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyopengl.sourceforge.net/"}]}, {"text": ["My advice is that, whichever library you choose, you make a data structure for your polygons that suits your algorithms so that they can be more simple and readable rather then try to get these algorithms to manipulate a canvas directly.", "Then you can write the code that draws them separate (i.e.", "independent) of the main logic."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This discussion on Stackoverflow has some comparisons and code snippets on various GUI toolkits for Python.", "I'm pretty sure that the QGraphicsView on QT will do transparency.", "Nokia (nee Troll) make a demo suite for QT that should give you an idea of its capabilities."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "This discussion on Stackoverflow", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/326300/python-best-library-for-drawing#326568"}, {"text": "QGraphicsView", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://doc.trolltech.com/4.2/qgraphicsview.html"}, {"text": "QT", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.troll.no"}]}], [{"text": ["Pygame [http://pygame.org/] should be able to do this for you."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pygame.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pygame.org/"}]}, {"text": ["See pygame.draw.polygon"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Try pyglet.", "It is a graphics library for Python with OpenGL.", "If you've done OpenGL programming before, it is certainly the easiest way to get what you want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pyglet", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyglet.org/"}]}], [{"text": ["It does not.", "You can check out my HTML canvas tutorial to see how you draw a moving ball; you wipe the screen and draw a new circle at the spot you want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "HTML canvas tutorial", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://billmill.org/static/canvastutorial/"}]}, {"text": ["You can draw simple shapes to a canvas in all of pyglet, pygame, QT, Tkinter, wxPython and cairo. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Generally, you will have objects called \"sprites\" or \"shapes\" that represent objects drawn to the screen, and you'll store them all in a container.", "Then the library or framework will, at every frame, render them all to the canvas.", "Thus it will seem to the user (you) that you can modify the objects on screen; you set a ball's x and y coordinates and in the next frame it's rendered there.", "However, at a low level, everything's being wiped and redrawn again."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For computationally intensive animation, a technique called double-buffering will be employed whereby a bitmap in memory will be modified instead of the one onscreen, and then the drawing process will simply be to copy that bitmap to the screen."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "double-buffering", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Double_buffering"}]}, {"text": ["All of the frameworks mentioned above will give you a nice abstraction for the list of objects to draw, so that you won't need to maintain it manually, and you can program as if the sprites/shapes you've drawn can be directly moved onscreen, even though they really aren't at a low level."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The problem with that(just like GTK's drawing area and Tk's canvas) is that I don't see a way to do transparency/alpha channel.", "Is there a a way in these?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I believe the HTML canvas lets you modify elements, which makes me believe there might be another canvas that can as well.", "However, if there is not that would basically require me to keep a separate list of all the polygons and when I wanted to make a change, alter the item in the list and then create a new canvas, which seems like it would have a significant overhead."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Both Qt and wxWidgets have some canvas drawing abilities (Qt calls it GraphicsView).", "Quick Google searches will get you a lot of examples so you can see if it fits your requirements."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]