[[{"text": ["The space is not in sys.argv, it is caused by the use of commas when printing.", "Try"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sys.argv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print \"Looking for '%s' in '%s'\" % (str, filename)\n</code>\n</pre>\n", "senID": 1}, {"text": ["And try to avoid shadowing the builtin str."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It's because you're passing separate strings to the print statement, rather than concatenating them into one string and printing it in one go:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print \"a\", \"b\"\na b\n&gt;&gt;&gt; print \"a\" + \"b\"\nab\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that concatenating strings is relatively expensive:  It's better to use interpolation, like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print \"A %s with %s\" % (\"string\", \"placeholders\")\nA string with placeholders\n</code>\n</pre>\n", "senID": 3}], [{"text": ["It's the commas in your print statement.", "If you use the following it'll work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["print \"Looking for '%s' in '%s'\" %(str, filename)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The print statement prints a space between each of its arguments.", "See the documentation for the print statement:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print statement", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/simple_stmts.html#the-print-statement"}]}, {"text": ["You could try using string concatenation instead:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print \"Looking for '\" + s + \"' in '\" + filename + \"'\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["or better yet, use str.format."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "str.format", "tag": "a", "pos": 0, "childList": [{"text": "str.format", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#str.format"}, {"text": "str.format", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n print \"Looking for '{0}' in '{1}'\".format(s, filename)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Note: avoid using str as a variable name."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Others have already answered your spaces question."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some other suggestions:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["str() is a built-in function so don't assign anything to it or you may wonder later why it doesn't work when you want to use it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Also:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n insensitive = 1 if (\"-i\" in sys.argv) else 0\n</code>\n</pre>\n", "senID": 4}, {"text": ["is pretty much same as:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n insensitive = \"-i\" in sys.argv\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Another suggestion, instead of parsing the argv by yourself, you should try OptionParser that let you handle linux style option/flags."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "OptionParser", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from optparse import OptionParser\nPARSER = OptionParser(usage=\"\"\"usage: %%prog [-b] file_name\"\"\")\nPARSER.add_option(\"-b\", \"--boundaries\", action=\"store_true\", dest=\"boundaries\", help=\"Boundaries ?\")\noptions, arguments = PARSER.parse_args()\nif options.boundaries:\n    # -b was activated...\nfile_name = arguments[0]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Print separates its arguments with a space.", "Better use str.format."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]