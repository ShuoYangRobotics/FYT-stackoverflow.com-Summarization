[[{"text": ["This isn't about the list.", "Python strings are immutable:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt; a = 'x'\n&gt; a.replace('x', 'bye')\n&gt; a\n'x'\n</code>\n</pre>\n", "senID": 1}, {"text": ["You're replacing 'a' with '*' and then throwing away the result."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Try something like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for i,value in enumerate(mylist):\n    mylist[i] = value.replace('x', 'y')\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If you want to remove all occurrences of 'a' from all nested sublists, you could do:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "'a'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [[i for i in x if i != 'a'] for x in a]\n[['b', 'c'], ['f', 'c'], ['c', 'd']]\n</code>\n</pre>\n", "senID": 1}, {"text": ["if you want to replace them with asterisk:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [[i if i != 'a' else '*' for i in x] for x in a]\n[['*', 'b', 'c'], ['*', 'f', 'c'], ['*', 'c', 'd']]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["search for the function replace:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "replace", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#string-methods"}]}, {"text": ["str.replace(old, new[, count]):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Return a copy of the string with all occurrences of substring old replaced by new.", "If the optional argument count is given, only the first count occurrences are replaced."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Return a copy", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["This would work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a=[['a','b','c'],['a','f','c'],['a','c','d']]\nfor x in a:    \n    for y in x:    \n        if y == 'a':\n            x.remove(y)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or even simpler:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n y = 'a'\na=[['a','b','c'],['a','f','c'],['a','c','d']]\nfor x in a:    \n    x.remove(y)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Which gives you a=[['b','c'],['f','c'],['c','d']]."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "a=[['b','c'],['f','c'],['c','d']]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Note: See the documentation on remove() for lists here."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html"}]}], [{"text": ["You really want to replace the element in the nested list, like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a=[['a','b','c'],['a','f','c'],['a','c','d']]    \nfor row in a:\n   for ix, char in enumerate(row):\n       if char == 'a':\n           row[ix] = '*'\n</code>\n</pre>\n", "senID": 1}, {"text": ["With the result:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = [['*', 'b', 'c'], ['*', 'f', 'c'], ['*', 'c', 'd']]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n a=[['a','b','c'],['a','f','c'],['a','c','d']]\nb=[[subelt.replace('a','*') for subelt in elt] for elt in a]\nprint(b)\n\n# [['*', 'b', 'c'], ['*', 'f', 'c'], ['*', 'c', 'd']]\n</code>\n</pre>\n", "senID": 0}]]