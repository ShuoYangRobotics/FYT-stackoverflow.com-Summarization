[[{"text": ["Clojure is pretty fun, if you're into that sort of thing.", "It's a lisp that runs on the JVM.", "Apparently it's as fast as Java for a lot of things, despite being dynamically typed *.", "Java interop is about as convenient as I could imagine possible, though the native clojure libraries are already decent enough that you don't need to hit up Java for most things."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It also adds some \"scripting language\" sensibilities, like maps (-> Python dicts) and vectors (-> Python lists) to help reduce the likelihood of parenthetical paroxysm."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Oh right, concurrency.", "It uses a software transactional memory system which is pretty interesting in and of itself.", "Extra, extra: Read all about it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Extra, extra: Read all about it", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://clojure.org/concurrent_programming"}]}, {"text": ["*: I think you may need to use \"type hinting\" to get Java-like speed for a lot of tasks.", "This is made quite convenient in Clojure."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Before anything else, what programming problem are you trying to solve?", "Has the GIL actually become a bottleneck yet?", "(If you're not sure, it probably hasn't."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Without knowing this, you risk looking for a nail that fits your hammer, instead of the other way around."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you really, really know that the GIL has become a bottleneck, and that you need to crunch numbers across multiple processors, then you want to consider:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["boo's syntax is Python-inspired.", "The programming language is a bit different, though: It's strongly typed with type-inference, and it's most imporant feature is probably the open compiler pipeline, i.e.", "the ability to create syntactic macros (in the LISP sense of the word \"macro\", not in the C sense of \"preprocessor macro\")."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "boo", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://boo.codehaus.org/"}]}, {"text": ["And, obviously, IronPyton is quite pythonic and about as good at threading as other .NET languages."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "IronPyton", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ironpython.net/"}]}], [{"text": ["to overcome GIL, you can try interpreting python language with jython instead of cpython"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Python falls short when it comes to CPU intensive tasks because Python isn't a very efficient language.", "Many \"dynamic\" languages have that problem, since the compiler is limited in what it can assume about the program at compile-time.", "Method-calls, for example, may have to be looked up every single time in case someone has replaced the method on the object between each invokation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would recommend that you take a look at Erlang, even though it probably isn't \"Pythonic\" in your sense of the word.", ":-)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Erlang", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.erlang.org/"}]}], [{"text": ["Stackless Python as used by the EVE online developers might fit."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Stackless Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.stackless.com/"}, {"href": "http://www.eveonline.com/devblog.asp?a=blog&bid=786", "text": "EVE online", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Take the hint.", "CPU intensive programs can also be made into multiple processes.", "Multiple processes and a pipeline to pass status around can often have outstanding performance."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Rather than fish around randomly for other languages, do this."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You'll -- correctly -- spend all your time designing your algorithm.", "You'll spend little time coding or learning a new language.", "You'll trivially tie up every core on every CPU available to you.", "You'll spend no time on thread synchronization or other foolishness."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This kind of thing works very, very well for \"CPU Intensive\" applications."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You could just use python multiprocessing it mirrors the API of threading but runs separate processes.", "Might not be implemented for non-posix.", "For general CPU intensive problems you could always try Stackless Python (mentioned already) or Pyrex."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "python multiprocessing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html"}, {"text": "Stackless Python", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.stackless.com/"}, {"href": "http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/", "text": "Pyrex", "childNum": 0, "tag": "a", "childList": []}]}]]