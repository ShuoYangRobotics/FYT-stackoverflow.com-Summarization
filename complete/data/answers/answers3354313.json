[[{"text": ["Yes, this is how I would do it"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i in xrange(0, 10):\n...     if i == 4:\n...         continue\n...     print i,\n...\n0 1 2 3 5 6 7 8 9\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT\nBased on the update to your original question...", "I would suggest you take a look at optparse"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"href": "http://docs.python.org/library/optparse.html", "text": "optparse", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["There are two things you could do to solve your problem:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "require comma-separated arguments which are going to be grouped into the following option value, you could use ", "tag": "none", "senID": 1}, {"text": ["or do more fragile own processing:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]}], [{"text": ["Strange way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for x in (x for x in xrange(10) if someCondition):\n    print str(x)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You probably don't actually need the indices, you probably need the actual items.", "A better solution would probably be like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sequence = 'whatever'\nfor item in sequence:\n    if some_condition:\n        continue\n    do_stuff_with(item)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You should use continue to skip a value, in both C and Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "continue", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in range(10):\n  if someCondition:\n     continue\n  print(i)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could first turn the argv list into a generator:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def g(my_list):\n    for item in my_list:\n        yield item\n</code>\n</pre>\n", "senID": 1}, {"text": ["You could then step through the items, invoking the generator as required:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n my_gen = g(sys.argv[1:]):\nwhile True:\n   try:\n      arg = my_gen.next()\n      if arg == \"--flag1\":\n         optX = my_gen.next()\n         opyY = my_gen.next()\n         --do something\n      elif arg == \"--flag2\":\n         optX = my_gen.next()\n         optY = my_gen.next()\n         optZ = my_gen.next()\n         --do something else\n      ...\n    except StopIteration:\n       break\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n for i in xrange(0, 10):\n    if i % 3 == 0\n        continue\n    print i\n</code>\n</pre>\n", "senID": 0}, {"text": ["Will only values which aren't divisible by 3."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you need to iterate over something, and need an index, use enumerate()"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/functions.html#enumerate", "text": "enumerate()", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n for i, arg in enumerate(argv):\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["which does the same as the questioner's"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for i in range(0,len(argv)):\n    arg = argv[i]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Your problem seems to be that you should loop not raw parameters but parsed parameters.", "I would suggest you to consider to change your decision not to use standard module (like the others)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]