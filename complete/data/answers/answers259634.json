[[{"text": ["You'll find that your key problem with this approach isn't a technical one, but a human one - different people write their names in different ways."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In fact, the terminology of \"forename\" and \"surname\" is itself flawed."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["While many blended families use a hyphenated family name, such as Smith-Jones, there are some who just use both names separately, \"Smith Jones\" where both names are the family name."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Many european family names have multiple parts, such as \"de Vere\" and \"van den Neiulaar\".", "Sometimes these extras have important family history - for example, a prefix awarded by a king hundreds of years ago."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Side issue: I've capitalised these correctly for the people I'm referencing - \"de\" and \"van den\" don't get captial letters for some families, but do for others. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Conversely, many Asian cultures put the family name first, because the family is considered more important than the individual."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Last point - some people place great store in being \"Junior\" or \"Senior\" or \"III\" - and your code shouldn't treat those as the family name."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Also noting that there are a fair number of people who use a name that isn't the one bestowed by their parents, I've used the following scheme with some success:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Full Name (as normally written for addressing mail); \nFamily Name; \nKnown As (the name commonly used in conversation)."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["e.g:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Full Name: William Gates III; Family Name: Gates; Known As: Bill"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Full Name: Soong Li; Family Name: Soong; Known As: Lisa"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["The problem with trying to split the names from a single input is that you won't get the full surname for people with spaces in their surname, and I don't believe you'll be able to write code to manage that completely."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would recommend that you ask for the names separately if it is at all possible."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Golden rule of data - don't aggregate too early - it is much easier to glue fields together than separate them.", "Most people also have a middle name which should be an optional field.", "Some people have a plethora of middle names."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You don't need a code solution here - you need a business rule."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["An easy way to do exactly what you asked in python is "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n name = \"Thomas Winter\"\nLastName = name.split()[1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["(note the parantheses on the function call split."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["split() creates a list where each element is from your original string, delimited by whitespace.", "You can now grab the second element using name.split()[1] or the last element using name.split()[-1]"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["However, as others said, unless you're SURE you're just getting a string like \"First_Name  Last_Name\", there are a lot more issues involved. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Splitting names is harder than it looks.", "Some names have two word last names; some people will enter a first, middle, and last name; some names have two work first names.", "The more reliable (or least unreliable) way to handle names is to always capture first and last name in separate fields.", "Of course this raises its own issues, like how to handle people with only one name, making sure it works for users that have a different ordering of name parts."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Names are hard, handle with care."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you're trying to parse apart a human name in PHP, I recomment Keith Beckman's nameparse.php script."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Keith Beckman's nameparse.php script", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jonathonhill.net/2009-10-31/human-name-parsing-in-php/"}]}], [{"text": ["Like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print name.split()[-1]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is a pretty old issue but I found it searching around for a solution to parsing out pieces from a globbed together name."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.google.com/p/python-nameparser/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/python-nameparser/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/python-nameparser/"}]}], [{"text": ["you'd probably want to use rsplit for this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["rsplit([sep [,maxsplit]])"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Return a list of the words in the string, using sep as the delimiter string.", "If maxsplit is given, at most maxsplit splits are done, the rightmost ones.", "If sep is not specified or None, any whitespace string is a separator.", "Except for splitting from the right, rsplit() behaves like split() which is described in detail below.", "New in version 2.4. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here's how to do it in SQL.", "But data normalization with this kind of thing is really a bear.", "I agree with Dave DuPlantis about asking for separate inputs."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Here's how to do it in SQL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/159567/how-can-i-parse-the-first-middle-and-last-name-from-a-full-name-field-in-sql#159760"}]}], [{"text": ["I would specify a standard format (some forms use them), such as \"Please write your name in First name, Surname form\"."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "First name, Surname", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["It makes it easier for you, as names don't usually contain a comma.", "It also verifies that your users actually enter both first name and surname."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Since there are so many different variation's of how people write their names, but here's how a basic way to get the first/lastname via regex."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\np = re.compile(r'^(\\s+)?(Mr(\\.)?|Mrs(\\.)?)?(?P&lt;FIRST_NAME&gt;.+)(\\s+)(?P&lt;LAST_NAME&gt;.+)$', re.IGNORECASE)\nm = p.match('Mr. Dingo Bat')\nif(m != None):\n  first_name = m.group('FIRST_NAME')\n  last_name = m.group('LAST_NAME')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It's definitely a more complicated task than it appears on the surface.", "I wrote up some of the challenges as well as my algorithm for solving it on my blog.", "Be sure to check out my Google Code project for it if you want the latest version in PHP:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.onlineaspect.com/2009/08/17/splitting-names/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.onlineaspect.com/2009/08/17/splitting-names/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.onlineaspect.com/2009/08/17/splitting-names/"}]}]]