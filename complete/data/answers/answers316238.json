[[{"text": ["You said in your question: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But every time the user enters a value, it is entered as a string, not as a float.", "You are converting it to a float somewhere.", "Convert it to a Decimal directly instead and no precision will be lost."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n \"%.15g\" % f\n</code>\n</pre>\n", "senID": 0}, {"text": ["Or in Python 3.0:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n format(f, \".15g\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["Just pass the float to Decimal constructor directly."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Decimal", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["When you say \"preserving value as the user has entered\", why not just store the user-entered value as a string, and pass that to the Decimal constructor?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Python does support Decimal creation from a float.", "You just cast it as a string first.", "But the precision loss doesn't occur with string conversion.", "The float you are converting doesn't have that kind of precision in the first place.", "(Otherwise you wouldn't need Decimal)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think the confusion here is that we can create float literals in decimal format, but as soon as the interpreter consumes that literal the inner representation becomes a floating point number."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "we can create float literals in decimal format", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["The \"official\" string representation of a float is given by the repr() built-in:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; repr(1.5)\n'1.5'\n&gt;&gt;&gt; repr(12345.678901234567890123456789)\n'12345.678901234567'\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can use repr() instead of a formatted string, the result won't contain any unnecessary garbage."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The \"right\" way to do this was documented in 1990 by Steele and White's and\nClinger's PLDI 1990 papers."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Steele and White's and\nClinger's PLDI 1990", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://portal.acm.org/citation.cfm?id=93542&type=proceeding"}]}, {"text": ["You might also look at this SO discussion about Python Decimal, including my suggestion to try using something like frap to rationalize a float."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/286061/python-decimal-place-issues-with-floats"}, {"href": "http://www.ics.uci.edu/~eppstein/numth/frap.c", "text": "frap", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I suggest this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 2.111111\n&gt;&gt;&gt; a\n2.1111110000000002\n&gt;&gt;&gt; str(a)\n'2.111111'\n&gt;&gt;&gt; decimal.Decimal(str(a))\nDecimal('2.111111')\n</code>\n</pre>\n", "senID": 1}]]