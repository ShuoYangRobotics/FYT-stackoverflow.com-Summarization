[[{"text": ["The problem is that (binary) floating point numbers aren't precisely representable as decimals.", "See http://stackoverflow.com/questions/1089018/why-cant-decimal-numbers-be-represented-exactly-in-binary for more information."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/1089018/why-cant-decimal-numbers-be-represented-exactly-in-binary", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1089018/why-cant-decimal-numbers-be-represented-exactly-in-binary"}]}], [{"text": ["If your're just trying to split the number in to two parts:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n n = map(int, str(num).split('.'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: Here are some more with timing."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import timeit\n\nnum = 3239.2929\n\ndef extract_a():\n    return map(int, str(num).split('.'))\n\ndef extract_b():\n    n = str(num).partition('.')\n    integer = int(n[0])\n    fractional = int(n[2]) if n[2] else 0\n    return integer, fractional\n\ndef extract_c():\n    i = int(num)\n    f = int(str(num - i)[2:] or 0)\n    return i, f\n\ndef extract_d():\n    return int(num), num % 1\n\nprint 'extract_a time: %s' % timeit.timeit(extract_a)\nprint 'extract_b time: %s' % timeit.timeit(extract_b)\nprint 'extract_c time: %s' % timeit.timeit(extract_c)\nprint 'extract_d time: %s' % timeit.timeit(extract_d)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n extract_a time: 5.98865621203\nextract_b time: 5.20949334571\nextract_c time: 4.01362424812\nextract_d time: 0.753302766373\n</code>\n</pre>\n", "senID": 5}], [{"text": ["As Ned Batchelder said, not all decimals are exactly representable as floats.", "A float is represented by a certain number of binary digits which are used to approximate the decimal as closely as possible.", "You can never assume a float is exactly equal to a decimal."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [49]: num\nOut[49]: 1.988\n\nIn [50]: decimals=num - int(num)\n\nIn [51]: decimals\nOut[51]: 0.98799999999999999\n\nIn [52]: print decimals   # Notice that print rounds the result, masking the inaccuracy.\n0.988\n</code>\n</pre>\n", "senID": 1}, {"text": ["See http://en.wikipedia.org/wiki/Floating%5Fpoint for more info on the binary representation of floats."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://en.wikipedia.org/wiki/Floating%5Fpoint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Floating%5Fpoint"}]}, {"text": ["There are other ways to achieve you goal.", "Here is one way, using string operations:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def extractDecimals(num):\n    try:\n        numstr=str(num)\n        return int(numstr[numstr.find('.')+1:])\n    except ValueError, e:\n        print 'The number, %s is not a decimal.'%num\n</code>\n</pre>\n", "senID": 4}], [{"text": ["As others have already pointed out, the issue you are seeing is due to the inexact representation of floating point numbers"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Try your program with Python's Decimal"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Decimal", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from decimal import Decimal\nextractDecimals(Decimal(\"0.988\"))\n</code>\n</pre>\n", "senID": 2}], [{"text": ["As has already been said, floating point numbers are not exactly equal to decimals.", "You can see this by using the modulus operator like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 0.988 % 1\n0.98799999999999999\n&gt;&gt;&gt; 9.88 % 1\n0.88000000000000078\n&gt;&gt;&gt; 98.8 % 1\n0.79999999999999716\n</code>\n</pre>\n", "senID": 1}, {"text": ["This gives the remainder of division by 1, or the decimal."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["As others have said in their answers, arithmetic with floats doesn't always result in what you expect due to rounding errors.", "In this case, perhaps converting the float into a string and back is better?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [1]: num = 1.988\n\nIn [2]: num_str = str(num)\n\nIn [3]: decimal = num_str.split('.')[1]\n\nIn [4]: decimal = int(decimal)\n\nIn [5]: decimal\nOut[5]: 988\n</code>\n</pre>\n", "senID": 1}]]