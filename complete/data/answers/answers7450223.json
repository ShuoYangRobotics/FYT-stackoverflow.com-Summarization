[[{"text": ["If you're on Python 2, you need to use raw_input:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "raw_input", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def func_add(num1, num2):\n\n   a = raw_input(\"your city\")\n   print a\n   return num1 + num2\n</code>\n</pre>\n", "senID": 1}, {"text": ["input causes whatever you type to be evaluated as a Python expression, so you end up with"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "input", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = whatever_you_typed\n</code>\n</pre>\n", "senID": 3}, {"text": ["So if there isn't a variable named whatever_you_typed you'll get a NameError."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "whatever_you_typed", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "NameError", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["With raw_input it just saves whatever you type in a string, so you end up with"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "raw_input", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = 'whatever_you_typed'\n</code>\n</pre>\n", "senID": 6}, {"text": ["which points a at that string, which is what you want."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["you want to use raw_input.", "input is like eval"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "raw_input", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "input", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You want to use raw_input() instead.", "input() expects Python, which then gets evaled."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "raw_input()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "input()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "eval", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You want raw_input, not input. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "raw_input", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "input", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n input(...)\n    input([prompt]) -&gt; value\n\n    Equivalent to eval(raw_input(prompt)).\n</code>\n</pre>\n", "senID": 1}, {"text": ["As opposed to..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n raw_input(...)\n    raw_input([prompt]) -&gt; string\n\n    Read a string from standard input.  The trailing newline is stripped.\n    If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.\n    On Unix, GNU readline is used if enabled.  The prompt string, if given,\n    is printed without a trailing newline before reading.\n</code>\n</pre>\n", "senID": 3}], [{"text": ["In Python 2.x, input asks for a Python expression (like num1 + 2) which is then evaluated.", "You want raw_input which allows one to ask for arbitrary strings."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "input", "tag": "a", "pos": 0, "childList": [{"text": "input", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#input"}, {"text": "input", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "num1 + 2", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/functions.html#raw_input", "text": "raw_input", "childNum": 1, "tag": "a", "childList": [{"text": "raw_input", "tag": "code"}]}, {"text": "raw_input", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n input()\n</code>\n</pre>\n", "senID": 0}, {"text": ["executes (actually, evaluates) the expression like it was a code snippet, looking for an object with the name you typed, you should use"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n raw_input()\n</code>\n</pre>\n", "senID": 2}, {"text": ["This is a security hazard, and since Python 3.x, input() behaves like raw_input(), which has been removed."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]