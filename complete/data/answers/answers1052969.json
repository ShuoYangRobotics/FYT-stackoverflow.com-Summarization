[[{"text": ["I'm actually working on a solution to this very problem.", "I always had a group of files I wanted to open/close at the same time, plus do things like open a magit-status window, a dired buffer, etc.", "I've started on my own project mode called metaproject.", "It's in the very early stages, but is functional enough that I'm using it for project groups at work now."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Check it out here: http://nafai77.github.com/metaproject/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://nafai77.github.com/metaproject/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nafai77.github.com/metaproject/"}]}, {"text": ["What's in git is pretty stable, though sparsely documented.", "I'm going to start working on it again here soon.", "I currently have the basics of a small plug-in architecture, so you can register custom actions that can be done on project open."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You could get everything set up the way you want for a project, then use the answer I posted about using desktop.el and named sessions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://stackoverflow.com/questions/847962/what-alternate-session-managers-are-available-for-emacs/849180#849180"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/847962/what-alternate-session-managers-are-available-for-emacs/849180#849180", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/847962/what-alternate-session-managers-are-available-for-emacs/849180#849180"}]}], [{"text": ["I use the following \"solution\" for myself: A project root is defined by a directory that contains a Makefile.", "I've bound F12 to the mode specific elisp function that \"compiles\" the project by makeing the first target of the corresponding Makefile.", "This is found by recursively going upwards from the directory of the current file."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Makefile", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It is a little bit of setup, but you will never have to reconstruct your .metadata directory as was frequently the case with Eclipse before.", "And once set up, you just have to place the proper Makefiles around and you have your projects."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": ".metadata", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n (defun get-makefile-recursively-higher ()\n  (loop for i below 100 for cwd = (expand-file-name default-directory)\n      then next for next = (expand-file-name (concat cwd \"/..\")) for file =\n      (concat cwd \"/\" \"Makefile\") do (cond ((and (file-exists-p file))\n                                            (return file))) until (equal cwd next))\n)\n</code>\n</pre>\n", "senID": 2}, {"text": ["This is then used e.g.", "by the LaTeX and Python mode as follows:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n (defun py-execute-prog (&amp;optional target) \n  \"Invoke python on the file being edited in the current buffer using\n   arguments obtained from the minibuffer.  It will save all of the modified\n   buffers before trying to execute the file.\"\n  (interactive)\n  (let* (makefile file cmd)\n    (setq makefile (get-makefile-recursively-higher))\n    (setq file (buffer-file-name (current-buffer)))\n    (setq cmd (concat \"make -f \" makefile))\n    (setq default-directory (file-name-directory makefile))\n\n    (save-some-buffers (not py-ask-about-save) nil)\n    (setq py-pdbtrack-do-tracking-p t)\n    (if (get-buffer py-output-buffer)\n    \t(kill-buffer py-output-buffer)) ; Get rid of buffer if it exists.\n    (global-unset-key \"\\C-x\\C-l\" )\n    (global-unset-key  \"\\C-x\\C-p\" )\n    (global-unset-key  \"\\C-x\\C-e\" )\n    (global-unset-key  \"\\C-x\\C-n\" )\n    (global-set-key  \"\\C-x\\C-l\" 'py-last-exception)\n    (global-set-key  \"\\C-x\\C-p\" 'py-previous-exception)\n    (global-set-key  \"\\C-x\\C-e\" 'py-current-line-exception)\n    (global-set-key  \"\\C-x\\C-n\" 'py-next-exception) \n    (define-key comint-mode-map [mouse-3] 'py-current-line-exception)\n    (make-comint \"Python Output\" \"make\" nil \"-f\" makefile)\n    (if (not (get-buffer py-output-buffer)) \n        (message \"No output.\")\n      (setq py-exception-buffer (current-buffer))\n      (pop-to-buffer py-output-buffer)  \n      )))\n\n\n(defun make-tex (&amp;optional target)\n  (interactive)\n  (let (makefile cmd)\n    (setq makefile (get-makefile-recursively-higher))\n    (save-buffer)\n    (TeX-save-document (TeX-master-file))\n\n    (setq cmd (concat \"make -j4 -f \" makefile \" LATEXPARAM=\\\"-halt-on-error -file-line-error\\\"\"\n                      \" TEXMASTER=\" (expand-file-name (TeX-master-file)) \".tex\"\n                      \" TEXMASTERDIR=\" (file-name-directory makefile) \"/\"))\n\n    (when (stringp target)\n      (setq cmd (concat cmd \" \" target))\n      )\n    (ad-activate-regexp \"auto-compile-yes-or-no-p-always-yes\")\n    (compile cmd)\n    (ad-deactivate-regexp \"auto-compile-yes-or-no-p-always-yes\")\n    )\n  )\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You can roll your own in bash/cmd.exe.", "The windows emacs distribution comes with a .bat file called runemacs.bat which accepts files to open as arguments.", "Write a small script and it should be able to open everything up from one icon."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There's eproject, but it seems to be very sparsely documented."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eproject", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.github.com/jrockway/eproject"}]}], [{"text": ["See http://www.emacswiki.org/emacs/CategoryProgrammerUtils#ProjectSupport.", "There are several packages which manage \"projects\".", "I favor mk-project, but then again, I wrote it.", ";-)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.emacswiki.org/emacs/CategoryProgrammerUtils#ProjectSupport", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.emacswiki.org/emacs/CategoryProgrammerUtils#ProjectSupport"}]}], [{"text": ["You can use Desktop bookmarks, Dired bookmarks, or Bookmark-List bookmarks to do what you want -- see Bookmark+.", "You can even encapsulate code and multiple bookmarks in a single bookmark to get just the state and setup you want."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Bookmark+", "tag": "a", "pos": 0, "childList": [{"text": "Bookmark+", "tag": "strong"}, {"text": "Bookmark+", "tag": "em"}], "childNum": 2, "href": "http://www.emacswiki.org/emacs/BookmarkPlus"}, {"text": "Bookmark+", "childNum": 1, "tag": "strong", "pos": -1, "childList": [{"text": "Bookmark+", "tag": "em"}]}, {"text": "Bookmark+", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["See also: Icicles support for projects for more options."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "Icicles", "tag": "a", "pos": 0, "childList": [{"text": "Icicles", "tag": "strong"}, {"text": "Icicles", "tag": "em"}], "childNum": 2, "href": "http://www.emacswiki.org/emacs/Icicles"}, {"text": "Icicles", "childNum": 1, "tag": "strong", "childList": [{"text": "Icicles", "tag": "em"}]}, {"text": "Icicles", "childNum": 0, "tag": "em", "childList": []}, {"href": "http://www.emacswiki.org/emacs/Icicles_-_Support_for_Projects", "text": "support for projects", "childNum": 0, "tag": "a", "childList": []}]}]]