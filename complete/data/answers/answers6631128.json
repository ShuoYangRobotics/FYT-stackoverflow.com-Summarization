[[{"text": ["Like,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for line in data:\n    # ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["It large depends on the semantics of the data object's readline semantics.", "If data is a file object, that'll work."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "data", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "data", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "file", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If you aren't doing anything fancier with data, like reading more lines later on, there's always:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for line in data:\n    ... do stuff ...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This isn't much better, but this is the way I usually do it.", "Python doesn't return the value upon variable assignment like other languages (e.g., Java)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n line = data.readline()\nwhile line:\n    ... do stuff ... \n    line = data.readline()\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n for line in data:\n    ... process line somehow....\n</code>\n</pre>\n", "senID": 0}, {"text": ["Will iterate over each line in the file, rather than using a while.", "It is a much more common idiom for the task of reading a file in my experience (in Python)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "file", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["In fact, data does not have to be a file but merely provide an iterator."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "data", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If data has a function that returns an iterator instead of readline (say data.iterate), you could simply do:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "data", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "readline", "childNum": 0, "tag": "code", "childList": []}, {"text": "data.iterate", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for line in data.iterate():\n    #...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If data is a file, as stated in other answers, using for line in file will work fine.", "If data is not a file, and a random data reading object, then you should implement it as an iterator, implementing __iter__ and next methods. "], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "data", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for line in file", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__iter__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "next", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The next method should to the reading, check if there is more data, and if not, raise StopIteration.", "If you do this, you can continue using the for line in data idiom."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "next", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "StopIteration", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "for line in data", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You could do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n line = 1\nwhile line:\n    line = data.readline()\n</code>\n</pre>\n", "senID": 1}]]