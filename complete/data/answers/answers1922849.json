[[{"text": ["Something like this you mean?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = 0\nif x != 3:\n    print \"x does not equal 3\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think perhaps the following will help alleviate some of your confusion..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 0==0\nTrue\n&gt;&gt;&gt; 'True'\n'True'\n&gt;&gt;&gt; (0==0) == 'True'\nFalse\n&gt;&gt;&gt; (0==0) == True\nTrue\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["An if statement as other answers suggest is a possibility (and you could add an else clause to print something specific in each case).", "More direct is an if/else operator:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "else", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if/else", "childNum": 0, "tag": "code", "childList": []}, {"text": "operator", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n print('equality' if b else 'diversity')\n</code>\n</pre>\n", "senID": 1}, {"text": ["You could also use indexing, since False has the int value 0 and True the int value 1:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print(['different', 'the same'][b])\n</code>\n</pre>\n", "senID": 3}, {"text": ["but I find that a bit less readable than the if variants."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Remove the quotes around True:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n bool = all(n &gt; 0 for n in list) \n\nif bool != True:\n    print 'a value is not greater than zero'\n</code>\n</pre>\n", "senID": 1}, {"text": ["or, you can also check for False:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n bool = all(n &gt; 0 for n in list) \n\nif bool == False:\n    print 'a value is not greater than zero'\n</code>\n</pre>\n", "senID": 3}, {"text": ["There are several other \"shortcut\" ways of writing it, but since you're a beginner let's not confuse the subject more than necessary."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 0\n&gt;&gt;&gt; if not x == 3: print 'x does not equal 3'\nx does not equal 3\n</code>\n</pre>\n", "senID": 0}, {"text": ["lte me explain further:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; list = [-1, 1, 2, 3]\n&gt;&gt;&gt; if not all(n &gt; 0 for n in list): print 'a value is not greater than zero'\na value is not greater than zero\n\n# =&gt; or shorter ...\n&gt;&gt;&gt; if min(list) &lt; 0: print 'a value is not greater than zero'\na value is not greater than zero\n</code>\n</pre>\n", "senID": 2}, {"text": ["note that list is a builtin and shouldn't be used as a variable name."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; list\n&lt;type 'list'&gt;\n&gt;&gt;&gt; list = [1, 2, \"value not greater than 0\"]\n&gt;&gt;&gt; list\n[1, 2, \"value not greater than 0\"]\n&gt;&gt;&gt; del list\n&gt;&gt;&gt; list\n&lt;type 'list'&gt;\n...\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n a = lambda b :(\"not true\",\"true\")[b == 3]\nprint a(3)\n</code>\n</pre>\n", "senID": 0}, {"text": ["will do it for you if you want to put it in a lambda"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You will need to do the printing yourself, as everyone suggested here."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's worthy to note that some languages (e.g.", "Scala, Ruby, Groovy) have language features that enable you to write:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x should be(3)\n</code>\n</pre>\n", "senID": 2}, {"text": ["And that will report:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n 0 should be 3 but is not.\n</code>\n</pre>\n", "senID": 4}, {"text": ["In Groovy, with Spock testing framework, you can write:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Spock testing framework", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/spock"}]}, {"code": "<pre>\n<code>\n def \"my test\":\n  when: x = 0\n  expect: x == 3\n</code>\n</pre>\n", "senID": 6}, {"text": ["And that would output:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Condition not satisfied:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n x == 3\n| |  |\n0 |  3\n false\n</code>\n</pre>\n", "senID": 9}, {"text": ["I don't think this possibly cleanly in python though."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; 'True' is not True\nTrue\n</code>\n</pre>\n", "senID": 0}, {"text": ["'True' is a string"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["True is a boolean"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["They have nothing to do with each other, except coincidentally.", "The string value happens to have the same letters as the boolean literal.", "But that's just a coincidence."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]