[[{"text": ["You need to escape the literal '?", "' and the literal '(' and ')' that you are trying to match."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also, instead of '?+', I think you're looking for the non-greedy matching provided by '+?", "'."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["More documentation here."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "More documentation here.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}, {"text": ["For your case, try this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n pattern = r'&lt;a href=\"http://forums.epicgames.com/archive/index.php\\?t-([0-9]+).html\"&gt; (.+?)&lt;/a&gt; &lt;i&gt;\\((.+?) replies\\)'\n</code>\n</pre>\n", "senID": 4}], [{"text": ["That means your regular expression has an error."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (.?+)&lt;/a&gt; &lt;i&gt;((.?+)\n</code>\n</pre>\n", "senID": 1}, {"text": ["What does ?+ mean?", "Both ?", "and + are meta characters that does not make sense right next to each other.", "Maybe you forgot to escape the '?", "' or something."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["To extend on what others wrote:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": [".?", "means \"one or zero of any character\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": [".+ means \"one ore more of any character\""], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["As you can hopefully see, combining the two makes no sense; they are different and contradictory \"repeat\" characters.", "So, your error about \"multiple repeats\" is because you combined those two \"repeat\" characters in your regular expression.", "To fix it, just decide which one you actually meant to use, and delete the other."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["As you're discovering, parsing arbitrary HTML is not easy to do correctly.", "That's what packages like Beautiful Soup do.", "Note, you're calling it in your script but then not using the results.", "Refer to its documentation here for examples of how to make your task a lot easier!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/documentation.html#Parsing%20HTML"}]}], [{"code": "<pre>\n<code>\n import urllib2\nimport re\nfrom BeautifulSoup import BeautifulSoup\n\nurl = \"http://forums.epicgames.com/archive/index.php?f-356-p-164.html\"\npage = urllib2.urlopen(url).read()\nsoup = BeautifulSoup(page)\n\n# Get all the links\nlinks = [str(match) for match in soup('a')]\n\ns = r'&lt;a href=\"http://forums.epicgames.com/archive/index.php\\?t-\\d+.html\"&gt;(.+?)&lt;/a&gt;' \nr = re.compile(s)\nfor link in links:\n    m = r.match(link)\n    if m:\n        print m.groups(1)[0]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Thanks for the help.", "I knew BeautifulSoup was probably the answer, but I haven't had the best luck of with it since I am new to programming, and html for that matter.", "I have had some decent luck with regex, so I started with that route.", "The first ?", "never occurred to me, but makes perfect sense now."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["All I am looking to do is to get a specific set of links (those that meet a specific regex match) and text description of the link.", "I figure these are basic HTML principles that can be harnessed by BS, but I am not sure where to go."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Thanks,"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Brock"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]