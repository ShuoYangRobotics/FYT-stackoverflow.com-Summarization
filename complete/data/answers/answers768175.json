[[{"text": ["Since 2.5:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want to fall back only on None:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "only", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = x if x is not None else y\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want to fall back also on empty string, false, 0 etc.", ": "], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "false", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n a = x if x else y\n</code>\n</pre>\n", "senID": 4}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n a = x or y\n</code>\n</pre>\n", "senID": 6}, {"tag": "hr", "senID": 7}, {"text": ["As for undefined (as never defined, a.k.a.", "not bound):"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n try:\n  a = x \nexcept NameError:\n  a = y\n</code>\n</pre>\n", "senID": 9}, {"text": ["or a bit more hackish (I'd not really recommend that, but it's short):"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n a = vars().get('x',y)\n</code>\n</pre>\n", "senID": 11}], [{"text": ["first you can do your full-on with a ternary:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = y if x is None else x\n</code>\n</pre>\n", "senID": 1}, {"text": ["but it doesn't solve your problem.", "what you want to do is more closely implemented with:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n try:\n    a = x\nexcept:\n    a = y\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I am quite convinced that there is no 'pythonic' way to do this, because this is not a pattern that is pythonic.", "Control should not reach an undefined variable reference in elegant code.", "There are similar ideas that are pythonic.", "Most obvious:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def myRange(start, stop=None):\n    start, stop = (0, start) if stop is None else (start, stop)\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["What's important is that stop is defined in scope, but the caller didn't have to pass it explicitly, only that it has taken it's default value, altering the semantics of the arguments, which in effect causes the first argument to be optional instead of the second, even where the language does not allow that without this clever trick."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "stop", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["That being said, something like this might follow the premise without using a try-catch block."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a = locals().get('x', y)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Just some nitpicking with your Perl example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n my $x = undef;\n</code>\n</pre>\n", "senID": 1}, {"text": ["This redundant code can be shortened to:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n my $x;\n</code>\n</pre>\n", "senID": 3}, {"text": ["And the following code doesn't do what you say it does:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n my $a = $x || $y;\n</code>\n</pre>\n", "senID": 5}, {"text": ["This actually assigns $y to $a when $x is false.", "False values include things like undef, zero, and the empty string.", "To only test for definedness, you could do the following (as of Perl 5.10):"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "false", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "undef", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n my $a = $x // $y;\n</code>\n</pre>\n", "senID": 7}], [{"text": ["There's python's ternary operation:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = x if x is not None else y\n</code>\n</pre>\n", "senID": 1}, {"text": ["Available in 2.5 and up."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I think this would help, since the problem comes down to check whether a variable is defined or not:\nEasy way to check that variable is defined in python?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/750298/easy-way-to-check-that-variable-is-defined-in-python", "text": "Easy way to check that variable is defined in python?", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Most of the solutions relying on if statements don't work for the case where x is 0 or negative."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 0\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; a = x or y\n&gt;&gt;&gt; a\n2\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you knew the name of the variable ahead of time you could look for like so:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if 'x' in dir():\n    a = x \nexcept:\n     a =y\n</code>\n</pre>\n", "senID": 3}, {"text": ["However that solution seems kind of sloppy to me.", "I believe the best method is to use a try except block like so:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n try:\n    a = x\nelse:\n    a = y\n</code>\n</pre>\n", "senID": 5}], [{"text": ["One way to rewrite..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if x is not None\n    a = x\nelse\n    a = y\n</code>\n</pre>\n", "senID": 1}, {"text": ["..is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x = myfunction()\n\nif x is None:\n    x = y\n\nprint x\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or, using exceptions (possibly more Python'y, depending on the what the code is doing - if it returns None because there was an error, using an exception is probably the correct way):"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n try:\n    x = myfunction()\nexcept AnException:\n    x = \"fallback\"\n\nprint x\n</code>\n</pre>\n", "senID": 5}, {"text": ["All that said, there really isn't anything wrong with you original code:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n if x is not None\n    a = x\nelse\n    a = y\n</code>\n</pre>\n", "senID": 7}, {"text": ["It's long, but I find that far easier to read (and much more Pythonic) than either of the following one-liners:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n a = x if x is not None else y\na = x or y\n</code>\n</pre>\n", "senID": 9}], [{"text": ["If it's an argument to a function you can do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def MyFunc( a=2 ):\n    print \"a is %d\"%a\n\n&gt;&gt;&gt; MyFunc()\n...a is 2\n&gt;&gt;&gt; MyFunc(5)\n...a is 5\n</code>\n</pre>\n", "senID": 1}, {"text": ["[Edit] For the downvoters.. the if/else bit is unnecessary for the solution - just added to make the results clear.", "Edited it to remove the if statement if that makes it clearer?"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[Edit]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]