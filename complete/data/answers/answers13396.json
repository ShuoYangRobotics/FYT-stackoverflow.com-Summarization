[[{"text": ["The increment in the original foreach loop will not affect the contents of the array, the only way to do this remains a for loop:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "foreach", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for(int i = 0; i &lt; intArray.Length; ++i)\n{\n    if(intArray[i] &gt; 3) ++intArray[i];\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Linq is not intended to modify existing collections or sequences.", "It creates new sequences based on existing ones.", "It is possible to achieve the above code using Linq, though it is slightly against its purposes:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n var newArray1 = from i in intArray select ((i &gt; 3) ? (i + 1) : (i));\nvar newArray2 = intArray.Select(i =&gt; (i &gt; 3) ? (i + 1) : (i));\n</code>\n</pre>\n", "senID": 3}, {"text": ["Using where (or equivalent), as shown in some of the other answers, will exclude any values less than or equal to 3 from the resulting sequence."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "where", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n var intArray = new int[] { 10, 1, 20, 2 };\nvar newArray = from i in intArray where i &gt; 3 select i + 1;\n// newArray == { 11, 21 }\n</code>\n</pre>\n", "senID": 5}, {"text": ["There is a ForEach method on arrays that will allow you to use a lambda function instead of a foreach block, though for anything more than a method call I would stick with foreach."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "ForEach", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "foreach", "childNum": 0, "tag": "code", "childList": []}, {"text": "foreach", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n intArray.ForEach(i =&gt; DoSomething(i));\n</code>\n</pre>\n", "senID": 7}], [{"text": ["In Python, you have filter and map, which can so what you want:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filter and map", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tut/node7.html#SECTION007130000000000000000"}]}, {"code": "<pre>\n<code>\n map(lambda x: foo(x + 1) filter(lambda x: x &gt; 3, intArray))\n</code>\n</pre>\n", "senID": 1}, {"text": ["There's also list comprehensions which can do both in one easy statement:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "list comprehensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tut/node7.html#SECTION007140000000000000000"}]}, {"code": "<pre>\n<code>\n [f(x + 1) for x in intArray if x &gt; 3]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["In C# you can apply selective processing on anything that lives inside an IEnumerable like this:  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n intArray.Where(i =&gt; i &gt; 3).ConvertAll();\nDoStuff(intArray.Where(i =&gt; i 3));\n</code>\n</pre>\n", "senID": 1}, {"text": ["Etc.."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n map(lambda x: test(x + 1) filter(lambda x: x &gt; 3, arr))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["in Ruby:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n intArray.select { |x| x &gt; 3 }.each do |x|\n  # do other processing\nend\n</code>\n</pre>\n", "senID": 1}, {"text": ["or if \"other processing\" is a short one-liner:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n intArray.select { |x| x &gt; 3 }.each { |x| something_that_uses x }\n</code>\n</pre>\n", "senID": 3}, {"text": ["lastly, if you want to return a new array containing the results of the processing of those elements greater than 3:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n intArray.select { |x| x &gt; 3 }.map { |x| do_something_to x }\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Depends on the language and what you need to do, a \"map\" as it's called in many languages could be what you're looking for.", "I don't know C#, but according to this page, .NET 2.0 calls map \"ConvertAll\"."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://blogs.msdn.com/devdev/archive/2006/06/30/652802.aspx"}]}, {"text": ["The meaning of \"map\" is pretty simple - take a list, and apply a function to each element of it, returning a new list.", "You may also be looking for \"filter\", which would give you a list of items that satisfy a predicate in another list."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]