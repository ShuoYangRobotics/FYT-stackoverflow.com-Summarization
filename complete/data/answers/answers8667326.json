[[{"text": ["The old approaches of \"if key in dict\" or \"dict.get\" or \"dict.setdefault\" should all be set aside in favor of the now standard defaultdict:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "defaultdict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n data = \"aabcggggg\"\n\nfrom collections import defaultdict\ndd = defaultdict(list)\nfor c in data:\n    dd[c].append(c)\nprint dd\n</code>\n</pre>\n", "senID": 1}, {"text": ["defaultdict takes care of the checking for key existence for you, all your code has to do is 1) define a factory function or class for the defaultdict to use to initialize a new key entry (in this case, defaultdict(list)), and 2) define what to do with each key (dd[c].append(c)).", "Clean, simple, no clutter."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "defaultdict(list)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dd[c].append(c)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["In your particular example, you could actually use itertools.groupby, since the groups of letters are all contiguous for each grouping value.", "groupby returns an iterator of tuples, each tuple containing the current key value and an iterator of the matching values.", "The following code works by converting each tuple's list-of-values-iterator to an actual list (in list(v)), and passing the sequence of key-valuelist tuples to the dict constructor."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "itertools.groupby", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "groupby", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "list(v)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n from itertools import groupby\nprint dict((k,list(v)) for k,v in groupby(data))\n</code>\n</pre>\n", "senID": 4}, {"text": ["prints:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n {'a': ['a', 'a'], 'c': ['c'], 'b': ['b'], 'g': ['g', 'g', 'g', 'g', 'g']}\n</code>\n</pre>\n", "senID": 6}], [{"code": "<pre>\n<code>\n my_dict = {}\nmy_dict.setdefault('sample', []).append(value)\n</code>\n</pre>\n", "senID": 0}, {"text": ["second parameter of 'setdefault' method says what should be initial value if given key does not exist"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If I understand your values are lists. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if 'sample' in mydict:\n    pass #whatever  \nelse: \n    mydict['sample'] = []\n</code>\n</pre>\n", "senID": 1}, {"text": ["What you want to do is the following: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n A = ['a','a','b','b','b','c','c','c']\n\nmyDict = {}\nfor i in A:\n    if i not in myDict: \n        myDict[i] = []\n    myDict[i].append(i) \nprint myDict\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Every dict key should contain a list.", "Am I right?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = dict()\ntry:\n    d['sample'].append(new_data)\nexcept KeyError:\n    d['sample'] = [new_data]\n</code>\n</pre>\n", "senID": 1}, {"text": ["I believe this would work.", "By the way, you shouldn't use the name dict for a dictonary.", "dict is already used as a function."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I'm not really sure I understand what you trying to do.", "Nor do I know if my solution is the best of those proposed.", "But is it this you are trying to do?", "It seems a little bit odd?", "Or do you want to count how many times every letter occur?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n # Create a list named l.\nl = ['a', 'a', 'b', 'c', 'g', 'g', 'g', 'g','g']\n\n# Create dictionary named d.\nd = dict()\n\nfor i in l:\n    try:\n        d[i].append(i)\n    except KeyError:\n        d[i] = [i]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If you are using some very old python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if not myDict.has_key(key):\n    myDict[key]=[val]\nelse:\n    myDict[key].append(val)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Recently the has_key has been deprecated in favor of key in dict\nSo nowadays, it would be:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "key in dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if not key in myDict:\n    myDict[key]=[val]\nelse:\n    myDict[key].append(val)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Credit should goes to @Niclas Nilsson even though his posted solution didn't really worked for what I wanted, however, it did help me figure out the solution that I wanted in the simplest form."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Still, I appreciate everyone's help here for extra knowledge and alternative ways of solving it.", "Thanks a lot."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Following achieved what I wanted in the simplest way without additional library imported etc:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n r = {}\n\ntry:\n    if r['new_data']:\n       r['new_data'] = 'appending'\nexcept KeyError:\n    r['new_data'] = 'new value'\n\nprint r['new_data']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The exact solution I wanted the most as shown below.", "Credit goes to @Paul McGuire"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\nclass Test:\n   def __init__(self, a,b):\n       self.a=a\n       self.b=b\n\ndata = []\ndata.append(Test(a=4,b=6))\ndata.append(Test(a=1,b=2))\ndata.append(Test(a=1,b=3))\ndata.append(Test(a=2,b=2))\ndata.append(Test(a=3,b=2))\ndata.append(Test(a=4,b=5))\ndata.append(Test(a=4,b=2))\ndata.append(Test(a=1,b=2))\ndata.append(Test(a=5,b=9))\ndata.append(Test(a=4,b=7))\n\ndd = defaultdict(list)\nfor c in data:\n    dd[c.a].append(c.b)\nprint dd\n</code>\n</pre>\n", "senID": 1}]]