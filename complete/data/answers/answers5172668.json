[[{"text": ["map(f, L) always calls f with a single argument whose values are taken from L. It's always a single argument, never zero.", "The ()s in the list are not argument lists, they are empty tuples.", "Outside of a function call, things in parentheses aren't arguments to a function, they are objects called \"tuples\" (think of them as immutable lists).", "Check the difference between str() and str(()) - str with no arguments gives '' and not '()'."], "childNum": 11, "tag": "p", "senID": 0, "childList": [{"text": "map(f, L)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "f", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "L", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "()", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "aren't", "childNum": 0, "tag": "em", "childList": []}, {"text": "str()", "childNum": 0, "tag": "code", "childList": []}, {"text": "str(())", "childNum": 0, "tag": "code", "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "childList": []}, {"text": "''", "childNum": 0, "tag": "code", "childList": []}, {"text": "not", "childNum": 0, "tag": "em", "childList": []}, {"text": "'()'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you have tuples of arguments and want to call a callable (function or method) with these arguments, you can use itertools.starmap.", "In particular, if you pass empty tuples the functions will be called with no arguments.", "It returns an iterator, so if you need a list you need to explicitly use list() over the result"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "itertools.starmap", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import itertools\n&gt;&gt;&gt; f = lambda: 42\n&gt;&gt;&gt; L = [(), (), ()]\n&gt;&gt;&gt; values = itertools.starmap(f, L)\n&gt;&gt;&gt; print list(values)\n[42, 42, 42]\n</code>\n</pre>\n", "senID": 2}, {"text": ["In the general case, it works with any tuple of arguments:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f = lambda *x: sum(x)\n&gt;&gt;&gt; L = [(1,2), (4, ), (5,6)]\n&gt;&gt;&gt; values = itertools.starmap(f, L)\n&gt;&gt;&gt; print list(values)\n[3, 4, 11]\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you want to simply call a function multiple times and get the result, you might consider using a list comprehension or a generator expression instead."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f = lambda: 42\n&gt;&gt;&gt; [f() for _ in xrange(3)]\n[42, 42, 42]\n&gt;&gt;&gt; values = (f() for _ in xrange(3))\n&gt;&gt;&gt; print list(values)\n[42, 42, 42]\n</code>\n</pre>\n", "senID": 6}, {"text": ["If you have a list of empty tuples like in your example, you might use xrange(len(L)) in the place of xrange(3)."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "xrange(len(L))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "xrange(3)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["That's not a class method, it lacks the classmethod decorator and self should be cls.", "But you don't want a class method here anyway, as class methods are methods which operate on classes (you can pass other objects, of course, but that's not the intended use case - the @classmethod would be grossly misleading)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "classmethod", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "cls", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "@classmethod", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You're looking for the term \"unbound method\", which you get by refering to a member of the class, not to an instance thereof.", "Use C.m.", "Note of course that the method will be called with self as (in your example) a tuple and not an instance of C. Normally, such trickery should be restricted to avoid this (e.g.", "str.lower and a bunch of strings is O.K.", ")."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "class", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "C.m", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "C", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "str.lower", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}], [{"text": ["You need to add a parameter to your m method, where the argument of the map will be passed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class C (object):\n    def m(self, x):\n        return 42\n\n&gt;&gt;&gt; c = C()\n&gt;&gt;&gt; map(c.m, [(), (), ()])\n[42, 42, 42]\n</code>\n</pre>\n", "senID": 1}, {"text": ["See, c.m is a bound method, already like calling m(c), you need a placeholder for the additional parameter passed by map"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["c and the argument passed by map are the 2 arguments to m your stack trace is complaining about:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "m", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n TypeError: m() takes exactly 1 argument (2 given)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You forgot your decorator to make it a class method, but you probably want a static method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["static:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class C(object):\n    @staticmethod\n    def m(arg):\n        return 42\n</code>\n</pre>\n", "senID": 2}, {"text": ["class:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class C(object):\n    @classmethod\n    def m(cls, arg):\n        #cls is a reference to the actual \"C\" type, not an instance of the \"C\" class.\n        return 42\n</code>\n</pre>\n", "senID": 4}], [{"text": ["First, that's not a class method.", "A class method takes the class as it's first argument, and is called on the class, not an instance of it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class C(object):\n    @classmethod\n    def m(cls):\n        return 42\n\nmap(C.m, range(10))\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, that will still break because map passes in each item from the iterable to the function, and your method only accepts one argument, the class."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you change your method to accept the extra argument (def m(cls, arg)), it will work.", "You could also use an instance method instead of a class method:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "def m(cls, arg)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class C(object):\n    def m(self, *args): # or def m(self, n)\n        return 42\nc = C()\nmap(c.m, range(10))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["m is a 1-argument method that takes an object of type C.  The syntax \"c.m\" is actually equivalent to \"m(c)\", which is just 42.", "But 42 is not a function you can map over a list like [(),(),()]."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The following should work:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class C (object):\n    def f(self): return lambda x: x+1\n\ntwo,three,four = map(C().f(), [1,2,3])\n</code>\n</pre>\n", "senID": 2}, {"text": ["Now C().", "*  returns a function, instead of a constant."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "*", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}]]