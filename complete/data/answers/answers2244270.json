[[{"code": "<pre>\n<code>\n def files(a):\n    pass\n\nwhile True:\n    try:\n        i = int(input('Select: '))\n        if i in range(4):\n            files(i)\n            break\n    except:    \n        pass\n\n    print '\\nIncorrect input, try again'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Your approach seems to be a very long-winded way to accomplish something fairly simple:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def Release() :\n    while True :\n        print 'Please select one of the following?\\nCompletion = 0\\nRelease ID = 1\\nVersion ID = 2\\nBuild ID = 3\\n'\n        a = int(input(\"Please select the type of release required: \"))\n        if 0 &lt;= a &lt; 4 :\n            files(a)\n            break\n        else :\n            print('Try Again')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Modern Python exceptions are classes; by using raise 'incorrect', you are using a deprecated language feature called string exceptions.", "The Errors and Exceptions section of the Python tutorial would be a good place to start with basic exception handling in Python."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "raise 'incorrect'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Errors and Exceptions", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/errors.html"}]}, {"text": ["In general, exceptions are not ideal for your situation anyway\u2014a simple while loop should be sufficient.", "Exceptions should be reserved for exceptional situations, and bad user input is not exceptional, it's expected."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The loop-based version of Release would look something like this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Release", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def Release():\n    a = None\n    while a not in (0, 1, 2, 3):\n        print 'Please select one of the following?\\nCompletion = 0\\nRelease ID = 1\\nVersion ID = 2\\nBuild ID = 3\\n'\n        try:\n            a = int(input(\"Please select the type of release required: \"))\n        except ValueError:\n            pass  # Could happen in face of bad user input\n    files(a)\n</code>\n</pre>\n", "senID": 3}, {"text": ["P.S.", "a is a bad variable name; you should probably change it to chosen_option or something like that."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "chosen_option", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Instead of using exceptions you could do something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ...\na = raw_input(\"Please select the type of release required:\")\nwhile a not in ['0','1','2','3']: a = raw_input(\"Try again: \")\nfiles(int(a))\n...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You are both throwing and catching the exception in the same simple block of code - this is not really what exception handling is about.", "You can do it better either by breaking out of a loop or by keeping a condition.", "E.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def isNumberCorrect(x):\n   return x in range(4)\n\ndef Release():\n    num = None # incorrect\n\n    while not isNumberCorrect(num):\n        print 'Please select one of the following?\\nCompletion = 0\\nRelease ID = 1\\nVersion ID = 2\\nBuild ID = 3\\n'\n        num_str = raw_input(\"Please select the type of release required: \")\n\n        try:\n            num = int(num_str)\n        except ValueError:\n            num = None\n\n        if not isNumberCorrect(num):\n            print 'Incorrect!'\n\n     # work with num here; it's guaranteed to be correct.\n\nif __name__ == '__main__':\n  try:\n    Release()\n  except:\n    print 'Error!'\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: Added error checking in the int parsing."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n def Release():\n    while 1:\n        print \"\"\"Please select one of the following?\n                 Completion = 0\n                 Release ID = 1\n                 Version ID = 2\n                 Build ID = 3\n                 Exit = 4 \"\"\"            \n        try:\n             a = int(raw_input(\"Please select the type of release required: \"))\n        except Exception,e:\n             print e\n        else:\n             if a==4: return 0\n             files(a)\n</code>\n</pre>\n", "senID": 0}]]