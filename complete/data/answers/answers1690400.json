[[{"text": ["Instances don't have names.", "By the time the global name ThisObject gets bound to the instance created by evaluating the SomeObject constructor, the constructor has finished running."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "ThisObject", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "bound", "childNum": 0, "tag": "strong", "childList": []}, {"text": "SomeObject", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you want an object to have a name, just pass the name along in the constructor."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self, name):\n    self.name = name\n</code>\n</pre>\n", "senID": 2}], [{"text": ["In Python, there really isn't any such thing as a \"variable\".", "What Python really has are \"names\" which can have objects bound to them.", "It makes no difference to the object what names, if any, it might be bound to.", "It might be bound to dozens of different names, or none."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Consider this example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n foo = 1\nbar = foo\nbaz = foo\n</code>\n</pre>\n", "senID": 2}, {"text": ["Now, suppose you have the integer object with value 1, and you want to work backwards and find its name.", "What would you print?", "Three different names have that object bound to them, and all are equally valid."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n print(bar is foo) # prints True\nprint(baz is foo) # prints True\n</code>\n</pre>\n", "senID": 4}, {"text": ["In Python, a name is a way to access an object, so there is no way to work with names directly. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["http://stackoverflow.com/questions/1665833/how-do-i-get-the-string-representation-of-a-variable-in-python/1665916#1665916"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://stackoverflow.com/questions/1665833/how-do-i-get-the-string-representation-of-a-variable-in-python/1665916#1665916", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1665833/how-do-i-get-the-string-representation-of-a-variable-in-python/1665916#1665916"}]}], [{"text": ["Well, there is almost a way to do it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\nimport traceback\nclass SomeObject():\n    def __init__(self, def_name=None):\n        if def_name == None:\n            (filename,line_number,function_name,text)=traceback.extract_stack()[-2]\n            def_name = text[:text.find('=')].strip()\n        self.defined_name = def_name\n\nThisObject = SomeObject()\nprint ThisObject.defined_name \n# ThisObject\n</code>\n</pre>\n", "senID": 1}, {"text": ["The traceback module allows you to peek at the code used to call SomeObject().", "With a little string wrangling, text[:text.find('=')].strip() you can \nguess what the def_name should be."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "text[:text.find('=')].strip()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["However, this hack is brittle.", "For example, this doesn't work so well:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ThisObject,ThatObject = SomeObject(),SomeObject()\nprint ThisObject.defined_name\n# ThisObject,ThatObject\nprint ThatObject.defined_name \n# ThisObject,ThatObject\n</code>\n</pre>\n", "senID": 4}, {"text": ["So if you were to use this hack, you have to bear in mind that you must call SomeObject()\nusing simple python statement:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n ThisObject = SomeObject()\n</code>\n</pre>\n", "senID": 6}, {"text": ["By the way, as a further example of using traceback, if you define "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def pv(var):\n    # stack is a list of 4-tuples: (filename, line number, function name, text)\n    # see http://docs.python.org/library/traceback.html#module-traceback\n    #\n    (filename,line_number,function_name,text)=traceback.extract_stack()[-2]\n    # ('x_traceback.py', 18, 'f', 'print_var(y)')\n    print('%s: %s'%(text[text.find('(')+1:-1],var))\n</code>\n</pre>\n", "senID": 8}, {"text": ["then you can call"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n x=3.14\npv(x)\n# x: 3.14\n</code>\n</pre>\n", "senID": 10}, {"text": ["to print both the variable name and its value. "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["This cannot work, just imagine this: a = b = TheMagicObjet().", "Names have no effect on Values, they just point to them."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a = b = TheMagicObjet()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I think that names matters if they are the pointers to any object..\nno matters if:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n foo = 1\nbar = foo\n</code>\n</pre>\n", "senID": 1}, {"text": ["I know that foo points to 1 and bar points to the same value 1 into the same memory space.", "but supose that I want to create a class with a function that adds a object to it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Class Bag(object):\n   def __init__(self):\n       some code here...\n   def addItem(self,item):\n       self.__dict__[somewaytogetItemName] = item\n</code>\n</pre>\n", "senID": 3}, {"text": ["So, when I instantiate the class bag like below:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n newObj1 = Bag()\nnewObj2 = Bag()\nnewObj1.addItem(newObj2)I can do this to get an attribute of newObj1:\nnewObj1.newObj2\n</code>\n</pre>\n", "senID": 5}], [{"text": ["One horrible, horrible way to accomplish this is to reverse the responsibilities:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class SomeObject():\n    def __init__(self, def_name):\n        self.defined_name = def_name\n        globals()[def_name] = self\n\nSomeObject(\"ThisObject\")\nprint ThisObject.defined_name\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you wanted to support something other than global scope, you'd have to do something even more awful."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]