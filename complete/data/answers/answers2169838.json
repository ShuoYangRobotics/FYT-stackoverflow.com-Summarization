[[{"text": ["You can do it with a list comprehension:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [ (x,y) for x in L for y in L]\n</code>\n</pre>\n", "senID": 1}, {"text": ["edit"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["You can also use itertools.product as others have suggested, but only if you are using 2.6 onwards.", "The list comprehension will work will all versions of Python from 2.0.", "If you do use itertools.product bear in mind that it returns a generator instead of a list, so you may need to convert it (depending on what you want to do with it)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The itertools module contains a number of helpful functions for this sort of thing.", "It looks like you may be looking for product:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "tag": "a", "pos": 0, "childList": [{"text": "itertools", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html"}, {"text": "itertools", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "product", "tag": "a", "pos": 1, "childList": [{"text": "product", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html#itertools.product"}, {"text": "product", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import itertools\n&gt;&gt;&gt; L = [1,2,3]\n&gt;&gt;&gt; itertools.product(L,L)\n&lt;itertools.product object at 0x83788&gt;\n&gt;&gt;&gt; list(_)\n[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Take a look at the itertools module, which provides a product member."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "product", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n L =[1,2,3]\n\nimport itertools\nres = list(itertools.product(L,L))\nprint(res)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Gives:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [(1,1),(1,2),(1,3),(2,1), ....  and so on]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Two main alternatives:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; L = ['a', 'b', 'c']\n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; list(itertools.product(L, L))\n[('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'a'), ('b', 'b'), ('b', 'c'), ('c', 'a'), ('c', 'b'), ('c', 'c')]\n&gt;&gt;&gt; [(one, two) for one in L for two in L]\n[('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'a'), ('b', 'b'), ('b', 'c'), ('c', 'a'), ('c', 'b'), ('c', 'c')]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["the former one needs Python 2.6 or better -- the latter works in just about any Python version you might be tied to."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The most old fashioned way to do it would be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def perm(L):\n    result = []\n    for i in L:\n        for j in L:\n            result.append((i,j))\n    return result\n</code>\n</pre>\n", "senID": 1}, {"text": ["This has a runtime of O(n^2) and is therefore quite slow, but you could consider it to be \"vintage\" style code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["x = [a,b,c]\ny = []\nfor item in x:\n for item2 in x:\n  y.append((item, item2))"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Maybe not the Pythonic way but working"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Ok I tried :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["L2 = [(x,y) for x in L for x in L] and this got L square."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Is this the best pythonic way to do this?", "I would expect L * L to work in python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]