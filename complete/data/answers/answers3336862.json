[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import permutations\n&gt;&gt;&gt; list(permutations(range(2)))\n[(0, 1), (1, 0)]\n&gt;&gt;&gt; list(permutations([1, 4, 5]))\n[(1, 4, 5), (1, 5, 4), (4, 1, 5), (4, 5, 1), (5, 1, 4), (5, 4, 1)]\n</code>\n</pre>\n", "senID": 0}, {"text": ["In the docs there is Python code available for legacy versions."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#itertools.permutations"}]}, {"text": ["A note re your code, x + 1 doesn't do anything as you're not assigning result of that expression to anyting."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "x + 1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Generating permutations is often done recursively.", "Given a list of 5 items, the permutations can be created by picking each of the 5 elements in turn as the first element of the answer, then for each of them permuting the remaining 4 elements, and appending them together."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The best way to understand what is making your code slow is to actually measure it.", "When you attempt to guess at what will make something fast, it's often wrong.", "You've got the right idea in that you're noticing that your code is slower and it's time for some improvement. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Since this is a fairly small piece of code, the timeit module will probably be useful.", "Break the code up into sections, and time them.", "A good rule of thumb is that it's better to look at an inner loop for improvements, since this will be executed the most times.", "In your example, this would be the loop inside the perm function."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "timeit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/timeit.html"}, {"text": "perm", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["It is also worth noting that while loops are generally slower than for loops in python, and that list comprehensions are faster than both of these."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions", "text": "list comprehensions", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Once you start writing longer scripts, you'll want to be aware of the ability to profile in python, which will help you identify where your code is slow.", "Hopefully this has given you a few places to look. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "profile", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/profile.html"}]}], [{"text": ["OK, for large lists, a recursive solution will take more and more time &amp; space, and eventually reach the recursion limit and die.", "So, on the theoretical side, you could work on ways to save time and space."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Hint: tail-recursive functions (such as the one you've written) can be rewritten as loops"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Hint: tail-recursive functions (such as the one you've written) can be rewritten as loops", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["On a more practical side, you may consider the use cases of your function.", "Maybe there's somebody who doesn't want the whole list of permutations at once, but a single one each time - there's a good opportunity to learn about yield and generators."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "yield", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Also, for something generally not directly applicable to your question: k-combinations and multisets are closely related to permutations.", "Perhaps you can extend your function (or write a new one) which will produce the k-combinations and/or multiset the user asks for."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The first thing I notice is that the code is hard to understand.", "The variable names are completely meaningless, replace them with meaningful names.", "It also seems like you're using i as a loop index, which is almost always bad style in python, because you can do for item in list:."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for item in list:", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["This is not really performance related, but there is a glaring bug in the code.", "Using a list as a default parameter does not do what you think it does - it will create one list object that will be shared by every call to perm(), so the second time you call perm you will have the value in c of whatever it contained when the last call finished.", "This is a common beginner's error."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You also say \"when I use bigger lists it takes some time to generate all the permutations of the list\".", "What did you expect?", "The number of permutations is equal to the factorial of the length of the list, and that grows big fast!", "For example a list of length 20 will have 2432902008176640000 permutations.", "Even the most efficient algorithm in the world is \"going to take some time\" for a list this size, even if it did not run out of memory first.", "If our hypothetical algorithm generated a billion permutations a second it would still take 77 years to run.", "Can you be more specific about the length of lists you are using and how long it is taking?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]