[[{"text": ["PyCrypto seems to be the best one around."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyCrypto", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pycrypto.org"}]}], [{"text": ["Try KeyCzar "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "KeyCzar", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/keyczar/"}]}, {"text": ["Very easy to implement. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I use GPGme The main strength of GPGme is that it read and writes files at the OpenPGP standard (RFC 4880) which can be important if you want to interoperate with other PGP programs. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "GPGme", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.gnupg.org/related_software/gpgme/index.en.html"}, {"href": "http://www.ietf.org/rfc/rfc4880.txt", "text": "RFC 4880", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["It has a Python interface.", "Warning: it is a low-level interface, not very Pythonic."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python interface", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyme.sourceforge.net/"}]}, {"text": ["If you read French, see examples."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "see examples", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.bortzmeyer.org/gpgme.html"}]}, {"text": ["Here is one, to check a signature:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n signed = core.Data(sys.stdin.read())\nplain = core.Data()\ncontext = core.Context()\n\ncontext.op_verify(signed, None, plain)\nresult = context.op_verify_result()\n\nsign = result.signatures\nwhile sign:\n    if sign.status != 0:\n        print \"BAD signature from:\"\n    else:\n        print \"Good signature from:\"\n    print \"  uid:        \", context.get_key(sign.fpr, 0).uids.uid\n    print \"  timestamp:  \", sign.timestamp\n    print \"  fingerprint:\", sign.fpr\n    sign = sign.next\n</code>\n</pre>\n", "senID": 4}], [{"text": ["See Google's Keyczar project, which provides  a nice  set of interfaces to PyCrypto's functionality."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Keyczar", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/keyczar/"}]}], [{"text": ["I use pyOpenSSL, its a python binding for OpenSSL which has been around for a long time and is very well tested.", "I did some benchmarks for my application, which is very crypto intensive and it won hands down against pyCrypto.", "YMMV."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "pyOpenSSL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.egenix.com/products/python/pyOpenSSL/"}, {"text": "OpenSSL", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.openssl.org/"}]}], [{"text": ["I like pyDes (http://twhiteman.netfirms.com/des.html).", "It's not the quickest, but it's pure Python and works very well for small amounts of encrypted data."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://twhiteman.netfirms.com/des.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twhiteman.netfirms.com/des.html"}]}]]