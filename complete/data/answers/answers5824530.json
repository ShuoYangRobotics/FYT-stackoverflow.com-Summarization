[[{"text": ["That's what named tuples are for."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/dev/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/dev/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields"}]}], [{"text": ["How about a list of dicts?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mydictlist = [{\"name\":\"foo\", \"place\":\"Shop\"},\n              {\"name\":\"bar\", \"place\":\"Home\"}]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you can do"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mydictlist[0][\"name\"]\n'foo'\n&gt;&gt;&gt; mydictlist[1][\"place\"]\n'Home'\n</code>\n</pre>\n", "senID": 3}, {"text": ["and so on..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Using your sample file:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n mydictlist = []\nwith open(\"test.txt\") as f:\n    for line in f:\n        entries = line.strip().split(\" \", 5) # split along spaces max. 5 times\n        mydictlist.append({\"name\": entries[0],\n                           \"time1\": entries[1],\n                           \"time2\": entries[2],\n                           \"etc\": entries[5]})\n</code>\n</pre>\n", "senID": 6}, {"text": ["gives you:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n [{'etc': 'Vizfoldrajz EA eloadas 1', 'name': 'Hetfo', 'time2': '10:00', 'time1': '8:00'}, \n {'etc': 'Termeszetfoldrajzi szintezis EA eloadas 1', 'name': 'Hetfo', 'time2': '14:00', 'time1': '12:00'}, \n {'etc': 'Scriptnyelvek eloadas 1', 'name': 'Hetfo', 'time2': '16:00', 'time1': '14:00'}\n ...]\n</code>\n</pre>\n", "senID": 8}], [{"text": ["For almost all cases, a Python list is analogous to a C array.", "Python has an array module, but that is a thin wrapper around actual C arrays, so I wouldn't use that unless you need to expose something to/from C."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "array", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Also, a struct can easily be represented as an object.", "Something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Data(object):\n    def __init__(self, name, place):\n        self.name = name\n        self.place = place\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then you want to loop through the file, line by line, and populate:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n my_list = []\nwith open(\"myfile.txt\") as f:\n    for line in f.readlines():\n        # line is each line in the file\n        # let's pretend our file structure is \"NAME PLACE\"\n        data = line.split() # data[0] = name, data[1] = place\n        my_list.append(Data(data[0], data[1]))\n\n# my_list now contains objects of class Data, which has members name and place\n</code>\n</pre>\n", "senID": 4}, {"text": ["That should be enough of a starting point to get you moving and help you understand how to do basic file/class/list operations."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You want to create a class which contains name and place fields."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "class", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/object_oriented_framework/defining_classes.html"}, {"text": "name", "childNum": 0, "tag": "code", "childList": []}, {"text": "place", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class Baz():\n    \"Stores name and place pairs\"\n    def __init__(self, name, place):\n        self.name = name\n        self.place = place\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you'd use a list of instances of that class."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "list", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/native_data_types/lists.html"}]}, {"code": "<pre>\n<code>\n my_foos = []\nmy_foos.append(Baz(\"foo\", \"Shop\"))\nmy_foos.append(Baz(\"bar\", \"Home\"))\n</code>\n</pre>\n", "senID": 3}, {"text": ["See also: classes (from the Python tutorial)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "classes (from the Python tutorial)", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html"}]}], [{"text": ["You could use a dict or make a small class."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s = [{'name': 'foo', 'place': 'shop'}, {'name': 'bar', 'place': 'home'}]\n&gt;&gt;&gt; s[0]['name']\n'foo'\n</code>\n</pre>\n", "senID": 0}, {"text": ["Also, I would recommend not naming it 'struct' in python since that is a python module."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["IIt depends of what you have as data."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If all that you want is to store names and places as string, I would suggest:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["A list of namedtuples [(name=\"foo\", place=\"Shop\"), (name=\"bar\", place=\"Home\")]"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[(name=\"foo\", place=\"Shop\"), (name=\"bar\", place=\"Home\")]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n class Struct:\n   def __init__(self, name, place):\n      self.name = name\n      self.place = place\n\nstructs = []\nstructs.append(Struct(\"foo\",\"bar\"))\nstructs.append(Struct(\"other_foo\",\"other_bar\"))\n</code>\n</pre>\n", "senID": 0}]]