[[{"text": ["The Cursor.execute() method expects a sequence as second parameter.", "You are supplying a string which happens to be 8 characters long."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Cursor.execute()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Use the following form instead:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n self.cursor.execute(\"SELECT weight FROM Equipment WHERE name = ?\", [item])\n</code>\n</pre>\n", "senID": 2}, {"text": ["Python library reference 13.13.3: sqlite3 Cursor Objects."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Cursor Objects", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/sqlite3-Cursor-Objects.html"}]}], [{"text": ["I have spent half a day trying to figure out why something like this would give me an error:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n cursor.execute(\"SELECT * from ? WHERE name = ?\", (table_name, name))\n</code>\n</pre>\n", "senID": 1}, {"text": ["only to find out that table names cannot be parametrized.", "Hope this will help other people save some time."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "cannot be parametrized", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["have You tried this ?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for item in self.inventory_names:\n    t = (item,)\n    self.cursor.execute(\"SELECT weight FROM Equipment WHERE name = ?\", t)\n    self.cursor.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["cursor.execute() expects a sequence (list,tuple) as second parameter.", "(-> ddaa )"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The argument of cursor.execute that represents the values you need inserted in the database should be a tuple (sequence).", "However consider this example and see what's happening:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "cursor.execute", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ('jason')\n'jason'\n\n&gt;&gt;&gt; ('jason',)\n('jason',)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The first example evaluates to a string instead; so the correct way of representing single valued tuple is as in the second evaluation.", "Anyhow, the code below to fix your error."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n self.cursor.execute(\"SELECT weight FROM Equipment WHERE name = ?\", (item,))\n</code>\n</pre>\n", "senID": 3}, {"text": ["Also giving the cursor.execute value arguments as strings,(which is what you are doing) results in the first evaluation in the example and results into the error you are getting."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "cursor.execute", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Quoting (is that what the parens mean?", ") the ?", "with parens seems to work for me.", "I kept trying with (literally) '?", "' but I kept getting"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When I did:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["instead of:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It worked."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Is this some python 2.6 thing?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Try"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n execute(\"select fact from factoids where key like ?\", \"%%s%\" % val)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You don't wrap anything around the ?", "at all, Python sqlite will correctly convert it into a quoted entity."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "?", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]