[[{"text": ["In addition to using quotes properly, don't retype the alphabet."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; string.ascii_lowercase\n'abcdefghijklmnopqrstuvwxyz'\n&gt;&gt;&gt; L = list(string.ascii_lowercase)\n&gt;&gt;&gt; print L\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', ...\n&gt;&gt;&gt; help(string)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You have to put strings into (double) quotes"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list1 = [\"a\",\"b\",\"c\",...]\n</code>\n</pre>\n", "senID": 1}, {"text": ["should work"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["String literal should be enclosed in quotes :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list1 = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Picking and choosing the best of the previous posts this is how I would do it since a string can be iterated."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; for letter in string.ascii_lowercase:\n...     print(letter)\n...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["python interprets the members in your list as variables,you shoud enclose them in "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Every language needs to differentiate between constants and names/variables.", "The most confusing is when you have to differentiate between string constants and identifiers/names/variables."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A shell (sh, bash, ksh, csh, cmd.com etc) tends to use constants; so you can just type a constant and you prefix a name/variable with a special character ($ for unix shells, % for cmd.com etc) when you want its value."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $ echo hello\nhello\n$ echo $PWD\n/home/tzot\n$ cd /tmp\n$ cd $OLDPWD\n</code>\n</pre>\n", "senID": 2}, {"text": ["Most other generic programming languages tend to use variables much more than constants, so it's the other way around: you just type the name of a variable and you (typically) enclose string constants in quotes ('', \"\", [] etc):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n # assumed: a_name= \"the object it points to\"\n\n&gt;&gt;&gt; print (\"a constant\")\na constant\n&gt;&gt;&gt; print (a_name)\nthe object it points to\n</code>\n</pre>\n", "senID": 4}], [{"text": ["When I need to make a list of characters, if they aren't already available in something defined in the std lib, and if I really need a list and not just a string, I use this form:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n punc = list(r\";:`~!@#$%^&amp;*()_-+=[]{}\\|,./&lt;?&gt;\")\nvowels = list(\"aeiou\")  # or sometimes list(\"aeiouy\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Much simpler than all those extra quotes and commas, and it's clear to the reader that I really meant I wanted a list, and not just a string."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]