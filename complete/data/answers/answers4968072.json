[[{"text": ["Using only string operations seem to be simplest (this is subjective, of course) and fastest (by a huge margin, compared to other solutions posted so far)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "simplest", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "fastest", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [\"a;b\", \"c;d\", \"y;z\"]\n&gt;&gt;&gt; \";\".join(a).split(\";\")\n['a', 'b', 'c', 'd', 'y', 'z']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Sorted in ascending order of elapsed time:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n python -mtimeit -s'a=[\"a;b\",\"x;y\",\"p;q\"]*99' '\";\".join(a).split(\";\")'\n10000 loops, best of 3: 48.2 usec per loop\n\npython -mtimeit -s'a=[\"a;b\",\"x;y\",\"p;q\"]*99' '[single for pair in a for single in pair.split(\";\")]'\n1000 loops, best of 3: 347 usec per loop\n\npython -mtimeit -s'from itertools import chain; a=[\"a;b\",\"x;y\",\"p;q\"]*99' 'list(chain(*(s.split(\";\") for s in a)))'\n1000 loops, best of 3: 350 usec per loop\n\npython -mtimeit -s'a=[\"a;b\",\"x;y\",\"p;q\"]*99' 'sum([x.split(\";\") for x in a],[])'\n1000 loops, best of 3: 1.13 msec per loop\n\npython -mtimeit -s'a=[\"a;b\",\"x;y\",\"p;q\"]*99' 'sum(map(lambda x: x.split(\";\"), a), [])'\n1000 loops, best of 3: 1.22 msec per loop\n\npython -mtimeit -s'a=[\"a;b\",\"x;y\",\"p;q\"]*99' 'reduce(lambda x,y:x+y, [pair.split(\";\") for pair in a])'\n1000 loops, best of 3: 1.24 msec per loop\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can use itertools.chain:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "itertools.chain", "tag": "a", "pos": 0, "childList": [{"text": "itertools.chain", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html#itertools.chain"}, {"text": "itertools.chain", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [\"a;b\", \"c;d\",\"y;z\"]\n&gt;&gt;&gt; list(itertools.chain(*(s.split(';') for s in a)))\n['a', 'b', 'c', 'd', 'y', 'z']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A bit more functional approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n >>> l = [\"a;b\", \"c;d\", \"e;f\", \"y;z\"]\n>>> sum(map(lambda x: x.split(';'), l), [])\n['a', 'b', 'c', 'd', 'e', 'f', 'y', 'z']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["That's work :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = []\nfor item in [\"a;b\", \"c;d\", \"e;f\"]:\n     l += item.split(\";\")\n\nprint l\n</code>\n</pre>\n", "senID": 1}, {"text": ["It gives :"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['a', 'b', 'c', 'd', 'e', 'f']\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n a = [\"a;b\", \"c;d\",\"y;z\"]\nprint [atom for pair in a for atom in pair.split(';')]\n</code>\n</pre>\n", "senID": 0}, {"text": ["gives what you want:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ['a', 'b', 'c', 'd', 'y', 'z']\n</code>\n</pre>\n", "senID": 2}, {"text": ["note: i  can't tell you how to get from '...' to '....' in the middle of your array :)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n l = []\nfor current in [c.split(';') for c in a]:\n   l.extend(current)\n</code>\n</pre>\n", "senID": 0}, {"text": ["You might want to read up on list comprehensions http://docs.python.org/tutorial/datastructures.html#list-comprehensions"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}], [{"code": "<pre>\n<code>\n a = [\"a;b\", \"c;d\",\"e;f\",\"y;z\"]\nb = []\nfor i in a:\n    c = i.split(';')\n    b = b + c\n\nprint b\n</code>\n</pre>\n", "senID": 0}], [{"text": ["A bit longer than Felix Kling's answer, but here goes.", "First split the list into sub-lists"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a_split = [i.split(\";\", 1) for i in a]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will result in a list of the form:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [[a,b], [c,d], ..., [y,z]]\n</code>\n</pre>\n", "senID": 3}, {"text": ["You now need to 'merge' the inner and outer lists in some way.", "The builtin reduce() function is a perfect fit for this:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "reduce()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; reduce(lambda x, y: x + y, a_split)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Voila:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n ['a', 'b', 'c', 'd', ... 'y', 'z']\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Strings can be used for this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [\"a;b\", \"c;d\",\"y;z\"]\n&gt;&gt;&gt; list(''.join(a).replace(';', ''))\n['a', 'b', 'c', 'd', 'y', 'z']\n</code>\n</pre>\n", "senID": 1}, {"text": ["This solution is one of the fastest suggested so far:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n # Shawn Chin's solution (the fastest so far, by far):\npython -mtimeit -s'a=[\"a;b\",\"x;y\",\"p;q\"]*99' '\";\".join(a).split(\";\")'\n10000 loops, best of 3: 27.4 usec per loop\n\n# This solution:\npython -mtimeit -s'a=[\"a;b\",\"x;y\",\"p;q\"]*99' \"list(''.join(a).replace(';', ''))\"\n10000 loops, best of 3: 33.5 usec per loop\n</code>\n</pre>\n", "senID": 3}, {"text": ["The morale is that lists represented by strings can be quite efficient in this case, possibly because of a simpler memory handling (characters are stored in consecutive memory locations)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]