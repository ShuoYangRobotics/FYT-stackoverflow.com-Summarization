[[{"text": ["The name of a star should not be the name of the variable.", "Variable names should reflect the context in which the variable is used, e.g.", "destinationStar or homeStar."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "destinationStar", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "homeStar", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["A star's name should be a property of the Star object, accessed via Star.name:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Star", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Star.name", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class Star(object):\n    \"\"\"Keeps track of a star.\"\"\"\n\n    def __init__(self, starName):\n        self.name = starName\n\n    # other methods...\n\ndef read_stars(filename):\n   # oversimplified:\n   stars = {}\n   starfile = open(filename, \"r\")\n   for line in starfile:\n      words = line.split()\n      if len(words) == 2 and words[0] == 'star':\n          name = words[1]\n          stars[name] = Star(name)\n   return stars\n</code>\n</pre>\n", "senID": 2}, {"text": ["By storing in a dictionary, you can search for a particular Star with stars[name] or iterate over all the stars with for s in stars.values(), for example."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "Star", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "stars[name]", "childNum": 0, "tag": "code", "childList": []}, {"text": "for s in stars.values()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I want to assign the name of the variables, dynamically This is a very good indication that your design is completely wrong."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "I want to assign the name of the variables, dynamically", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It's hard to know exactly what your design is, but I'm going to guess you want to use a dictionary instead."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Your question isn't clear.", "It's clouded by the fact that you're using syntax 'Star(Centauri)', which, in Python, means that you want to create a class called 'Star' that inherits from Centauri.", "I think what you want is probably a factory object that creates different stars, but then you don't say anything about how the stars might differ.", "Presumably, the difference is location, but you don't say how that's being handled either. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Best bet, based on guesses, might be to put your star configurations in a YAML file and use pyYAML to load it, which returns a Python data structure ready to go for you. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "pyYAML", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyyaml.org/wiki/PyYAMLDocumentation"}]}], [{"code": "<pre>\n<code>\n def makeStar(starName):\n    globals()[starName] = Star(globals()[starName])\nmakeStar(\"Sol\")\n</code>\n</pre>\n", "senID": 0}, {"text": ["is the same as"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Sol = Star(Sol)\n</code>\n</pre>\n", "senID": 2}, {"text": ["except \"Sol\" can be replaced with any string (eg the values read in from that file)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Also, you may want to rethink making these global variables - it prevents you from being able to iterate through all the stars, should you need to, and could possibly cause naming conflicts.", "If you want these to be in a dictionary, then just replace \"globals()\" with the name of your dictionary."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n class BadStar(Exception): pass\n\nclass Star(object):\n    def __init__(self, name, mass, mag, color, x, y, z):\n        self.name = name\n        self.mass = float(mass)\n        self.mag = float(mag)\n        self.color = color\n        self.pos = (float(x),float(y),float(z))\n\n    @classmethod\n    def fromstr(cls, s):\n        \"Alternate constructor from string\"\n        stardata = [i.strip() for i in s.split(',')]\n        if len(stardata)==7:\n            return cls(*stardata)\n        else:\n            raise BadStar(\"wrong number of arguments in string constructor\")\n\n    def __str__(self):\n        x,y,z = self.pos\n        return \"{0} is at ({1}, {2}, {3})\".format(self.name, x, y, z)\n\nclass StarIndex(dict):\n    def load(self, fname):\n        \"Load stars from text file\"\n        with open(fname, \"r\") as f:\n            for line in f:\n                line = line.split('#')[0]   # discard comments\n                line = line.strip()         # kill excess whitespace\n                if len(line):               # anything left?\n                    try:\n                        star = Star.fromstr(line)\n                        self[star.name] = star\n                    except BadStar:\n                        pass                # discard lines that don't parse\n        return self\n</code>\n</pre>\n", "senID": 0}, {"text": ["and some sample data:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # Name,           Mass, Absolute Magnitude, Color,     x,      y,      z\n#\n# Mass is kg\n# Color is rgb hex\n# x, y, z are lightyears from earth, with +x to galactic center and +z to galactic north\nSol,              2.0e30, 4.67,             0xff88ee,  0.0,    0.0,    0.0\nAlpha Centauri A, 2.2e30, 4.35,             0xfff5f1, -1.676, -1.360, -3.835\n</code>\n</pre>\n", "senID": 2}, {"text": ["then you can load your file like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n s = StarIndex().load(\"stars.txt\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n print s[\"Sol\"]\n</code>\n</pre>\n", "senID": 6}, {"text": ["results in"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n Sol is at (0.0, 0.0, 0.0)\n</code>\n</pre>\n", "senID": 8}], [{"text": ["You probably should use a dictionary for that.", "It is possible to create dinamic variable names, but it would make no sense, since to access then you would need an indirect reference anyway."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n stars = {}\nwith open(\"stars.txt\") as stars_file:\n    for star_name in stars_file:\n        star_name = star_name.strip()\n        stars[star_name] = Star(star_name)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use the types module to create class objects at the run time:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import types\n\ndef make_class(name):\n    cls = types.ClassType(name, (), {})\n    return cls\n\ncls = make_class(\"Star\")\nobj = cls()\n</code>\n</pre>\n", "senID": 1}, {"text": ["In the above example, cls becomes your class Star"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "class Star", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]