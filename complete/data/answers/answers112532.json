[[{"text": ["Use a trie."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "trie", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Trie"}]}, {"text": ["Add your list of words to a trie.", "Each path from the root to a leaf is a valid word.", "A path from a root to an intermediate node represents a prefix, and the children of the intermediate node are valid completions for the prefix."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["One of the best ways to do this is to use a directed graph to store your dictionary.", "It takes a little bit of setting up, but once done it is fairly easy to then do the type of searches you are talking about."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The nodes in the graph correspond to a letter in your word, so each node will have one incoming link and up to 26 (in English) outgoing links."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You could also use a hybrid approach where you maintain a sorted list containing your dictionary and use the directed graph as an index into your dictionary.", "Then you just look up your prefix in your directed graph and then go to that point in your dictionary and spit out all words matching your search criteria."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you on a debian[-like] machine, "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/bin/bash\necho -n \"Enter a word: \"\nread input\ngrep \"^$input\" /usr/share/dict/words\n</code>\n</pre>\n", "senID": 1}, {"text": ["Takes all of 0.040s on my P200."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n egrep `read input &amp;&amp; echo ^$input` /usr/share/dict/words\n</code>\n</pre>\n", "senID": 0}, {"text": ["oh I didn't see the Python edit, here is the same thing in python"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n my_input = raw_input(\"Enter beginning of word: \")\nmy_words = open(\"/usr/share/dict/words\").readlines()\nmy_found_words = [x for x in my_words if x[0:len(my_input)] == my_input]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["If you really want speed, use a trie/automaton.", "However, something that will be faster than simply scanning the whole list, given that the list of words is sorted:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import takewhile, islice\nimport bisect\n\ndef prefixes(words, pfx):\n    return list(\n             takewhile(lambda x: x.startswith(pfx), \n                       islice(words, \n                              bisect.bisect_right(words, pfx), \n                              len(words)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that an automaton is O(1) with regard to the size of your dictionary, while this algorithm is O(log(m)) and then O(n) with regard to the number of strings that actually start with the prefix, while the full scan is O(m), with n &lt;&lt; m."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n var words = from word in dictionary\n            where word.key.StartsWith(\"bla-bla-bla\");\n            select word;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you really want to be efficient - use suffix trees or suffix arrays - wikipedia article."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "wikipedia article", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Suffix_tree"}]}, {"text": ["Your problem is what suffix trees were designed to handle.", "There is even implementation for Python - here"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://hkn.eecs.berkeley.edu/~dyoo/python/suffix_trees/"}]}], [{"text": ["Try using regex to search through your list of words, e.g.", "/^word/ and report all matches."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n def main(script, name):\n\tfor word in open(\"/usr/share/dict/words\"):\n\t\tif word.startswith(name):\n\t\t\tprint word,\n\nif __name__ == \"__main__\":\n\timport sys\n\tmain(*sys.argv)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you need to be really fast, use a tree:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["build an array and split the words in 26 sets based on the first letter, then split each item in 26 based on the second letter, then again."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So if your user types \"abd\" you would look for Array[0][1][3] and get a list of all the words starting like that.", "At that point your list should be small enough to pass over to the client and use javascript to filter."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If your dictionary is really big, i'd suggest indexing with a python text index (PyLucene - note that i've never used the python extension for lucene)  The search would be efficient and you could even return a search 'score'."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also, if your dictionary is relatively static you won't even have the overhead of re-indexing very often."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Don't use a bazooka to kill a fly.", "Use something simple just like SQLite.", "There are all the tools you need for every modern languages and you can just do :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"SELECT word FROM dict WHERE word LIKE \"user_entry%\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's lightning fast and a baby could do it.", "What's more it's portable, persistent and so easy to maintain."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Python tuto :"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["http://www.initd.org/pub/software/pysqlite/doc/usage-guide.html"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://www.initd.org/pub/software/pysqlite/doc/usage-guide.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.initd.org/pub/software/pysqlite/doc/usage-guide.html"}]}], [{"text": ["A linear scan is slow, but a prefix tree is probably overkill.", "Keeping the words sorted and using a binary search is a fast and simple compromise."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import bisect\nwords = sorted(map(str.strip, open('/usr/share/dict/words')))\ndef lookup(prefix):\n    return words[bisect.bisect_left(words, prefix):bisect.bisect_right(words, prefix+'~')]\n\n&gt;&gt;&gt; lookup('abdicat')\n['abdicate', 'abdication', 'abdicative', 'abdicator']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Most Pythonic solution"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # set your list of words, whatever the source\nwords_list = ('cat', 'dog', 'banana')\n# get the word from the user inpuit\nuser_word = raw_input(\"Enter a word:\\n\")\n# create an generator, so your output is flexible and store almost nothing in memory\nword_generator = (word for word in words_list if word.startswith(user_word))\n\n# now you in, you can make anything you want with it \n# here we just list it :\n\nfor word in word_generator :\n    print word\n</code>\n</pre>\n", "senID": 1}, {"text": ["Remember generators can be only used once, so turn it to a list (using list(word_generator)) or use the itertools.tee function if you expect using it more than once."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Best way to do it :"], "childNum": 0, "tag": "h2", "senID": 3, "childList": []}, {"text": ["Store it into a database and use SQL to look for the word you need.", "If there is a lot of words in your dictionary, it will be much faster and efficient."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Python got thousand of DB API to help you do the job ;-)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]