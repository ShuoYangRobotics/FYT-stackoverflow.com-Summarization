[[{"text": ["I'd caution against reusing \"value\" in that first loop, for clarity and future bugs that might be introduced there. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But, the code you posted actually works, so obviously there's something else going on that we can't diagnose here.", "What you need to do is inspect the contents of filelist before you try to close the file handles in it.", "That will probably point you towards the answer."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "filelist", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I can't see a problem in your code, maybe it's not in the part pasted?", "(in filelist, or the snipped bit)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filelist", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["But anyway, I would rewrite it to avoid using the same variable, value, for two different things:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "value", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n filelist = []\ncodeconv={\"agt\":\"r1p1d\", \"aga\":\"r2p1d\"}\nfor file_id in codeconv.values():\n    f = open(\"c:\\Biochemistry\\Pythonscripts\\Splittest\\split\"+file_id+\".txt\", 'w')\n    filelist.append(f)\n\n\"Here I do something with the files\"\n\nfor f in filelist:\n    if isinstance(f, str):\n        print \"WARNING: Expected file handle, got string:\", f\n    else:\n        f.close()\n</code>\n</pre>\n", "senID": 2}, {"text": ["(I also added a bit of troubleshooting code)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You're not assigning the function, you are assigning the return value.", "Which appearantly is a string in this case instead of a file object, which is a bit surprising.", "Are you doing anything with the filelist in the \"here I do something\" part?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["[edit]\nok, sounds like you want a dict between key/fileobject (with example usage)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n codeconv={\"agt\":\"r1p1d\", \"aga\":\"r2p1d\"}\nfiledict = {key, open(\"c:\\Biochemistry\\Pythonscripts\\Splittest\\split\"+value+\".txt\", 'w')\n            for key, value in codeconv.iteritems()}\n\n#Here I do something with the files\nfiledict[\"agt\"].write(\"foo\")\nfiledict[\"aga\"].write(\"bar\")\n\nfor f in filedict.values():\n    f.close()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Perhaps you want to append tuples to filelist so the name is associated with the file object"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filelist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n codeconv={\"agt\":\"r1p1d\", \"aga\":\"r2p1d\"}\nfor value in codeconv.values():\n    f=open(\"c:\\Biochemistry\\Pythonscripts\\Splittest\\split\"+value+\".txt\", 'w')\n    filelist.append((value, f))\n\n\"Here I do something with the files\"\n\nfor name, f in filelist:\n    f.close()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If i understand you well, you want to create some variable dynamically from the dictionary so that you can assign them to the opened files, is that it ???!!!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I will suggest to do it using another dictionary like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n codeconv={\"agt\":\"r1p1d\", \"aga\":\"r2p1d\"}\nopened_files = {}\n\nfor key, value in codeconv.items():\n    file_name = \"c:\\Biochemistry\\Pythonscripts\\Splittest\\split%s.txt\" % value\n    file=open(file_name, 'w')\n    opened_files.update({key: file})\n</code>\n</pre>\n", "senID": 2}, {"text": ["you can now access your opened files from the dictionary like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n f = opened_files['agt'] \nf.read()\n....\n</code>\n</pre>\n", "senID": 4}, {"text": ["and for you latter code do it like this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n for f in opened_files.values():\n    f.close()\n</code>\n</pre>\n", "senID": 6}], [{"text": ["The files are already open - your filelist object contains open file objects that you can iterate over (for example, with for line_of_text in filelist[0]:) or call other functions of (see dir(file) for other members)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "filelist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for line_of_text in filelist[0]:", "childNum": 0, "tag": "code", "childList": []}, {"text": "dir(file)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can defer opening the file by assigning a lambda and calling it later, for example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for value in codeconv.values():\n    value2 = lambda: open(complete_filename)\n    filelist.append(value2)\n\nmy_file_object = filelist[0]()\n</code>\n</pre>\n", "senID": 2}, {"text": ["You may prefer to store these in a dictionary:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for value in codeconv.itervalues():\n    filedict[value] = lambda: open(complete_filename)\n\nmy_file_object = filedict[\"r1p1d\"]()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Or if you really want to create new variables (I strongly recommend not doing this, but since you asked):"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "not", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n for value in codeconv.itervalues():\n    globals()[value] = open(complete_filename)\n    # or\n    #globals()[value] = lambda: open(complete_filename)\n    # if you prefer\n</code>\n</pre>\n", "senID": 6}, {"text": ["Finally, you close the files as you already are (substituting filedict.itervalues() for filelist if you use a dictionary instead)."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "filedict.itervalues()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "filelist", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["(Obviously you need to replace complete_filename in the above examples with however you calculate the actual filename.", "I shouldn't need to say this, but I've been stung too often by leaving out these sorts of details."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "complete_filename", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]