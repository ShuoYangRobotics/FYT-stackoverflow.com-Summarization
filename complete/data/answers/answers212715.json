[[{"text": ["I don't know anything about Python, but I do know a bit about drivers.", "You're not trying to 'open a file in kernel space' at all - you're just trying to open a handle to a device which happens to be made to look a bit like opening a file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["CreateFile is a user-mode function, and everything you're doing here is user-mode, not kernel mode."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As xenon says, your call may be failing because you haven't loaded the driver yet, or because whatever Python call you're using to do the CreateFile is not passing the write parameters in."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I've never used giveio.sys myself, but personally I would establish that it was loaded correctly by using 'C' or C++ (or some pre-written app) before I tried to get it working via Python."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Solution: in python you have to use win32file.CreateFile() instead of open().", "Thanks everyone for telling me what I was trying to do, it helped me find the answer!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You're question is very confusing to say the least. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1> The code you pasted is using a trick to communicate with the driver using its 'DOSNAME' i.e."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n \\\\.\\DRIVERNAME\n</code>\n</pre>\n", "senID": 2}, {"text": ["2> Have you created &amp; loaded the 'giveio' driver ?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The reason the driver handles this calls is because of this"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["http://msdn.microsoft.com/en-us/library/ms806162.aspx"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://msdn.microsoft.com/en-us/library/ms806162.aspx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/ms806162.aspx"}]}], [{"text": ["I'm not sure if that's possible.", "As an alternative, you could write a C/C++ program that does all that kernel space work for you and interface with it in Python via the subprocess module or Python C/C++ bindings (and another link for that)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "the subprocess module", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-subprocess.html"}, {"href": "http://www.language-binding.net/", "text": "Python C/C++ bindings", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://wiki.cacr.caltech.edu/danse/index.php/Writing_C_extensions_for_Python", "text": "another link", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["There are 2 ways to do this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The first way is using the win32 python bindings"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n h = win32file.CreateFile\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or using ctypes"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["It sounds to me like you're asking why os.open is not magically equal to calling CreateFile with a very specific set of parameters.", "Kostya's answer is practical in that it tells you that you can use the Win32 python bindings to call CreateFile which is a Win32 API, directly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Anything other than doing direct CreateFile/readFile/writeFile IO is going to introduce another layer on top (the python file objects and their behaviours) that restricts you to the parameters that os.open supports.", "os.open creates a python file object, which is not exactly the same thing, and not intended to provide all of Win32 CreateFile's options."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["That means, for example, that no exact analog of GENERIC_READ, or OPEN_EXISTING, or             FILE_ATTRIBUTE_NORMAL are guaranteed to exist."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["My best guess is that os.open is not intended to replace direct calls to CreateFile, for such odd purposes as the one you're using it for."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you can read C, why not open up the sources for python and read the implementation of os.open.", "If you really must go through os.open, you're going to find out what parameters to pass to it, so that in the end, os.open's implementation (in C) calls CreateFile in Win32 API with the correct parameters above.", "All of that seems more like work, than just using Kostya's suggestion."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]