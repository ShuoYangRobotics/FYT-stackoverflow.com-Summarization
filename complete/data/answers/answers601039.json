[[{"text": ["Option 1: "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Option 1:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Write a function similar to this and place it in your startup settings:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n function myex()\n   execute ':w'\n   execute ':!!'\nendfunction\n</code>\n</pre>\n", "senID": 2}, {"text": ["You could even map a key combo to it-- look a the docs."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "hr", "senID": 4}, {"text": ["Option 2 (better):"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Option 2 (better):", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Look at the documentation for remapping keystrokes - you may be able to accomplish it through a simple key remap.", "The following works, but has \"filename.py\" hardcoded.", "Perhaps you can dig in and figure out how to replace that with the current file?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n :map &lt;F2&gt; &lt;Esc&gt;:w&lt;CR&gt;:!filename.py&lt;CR&gt;\n</code>\n</pre>\n", "senID": 7}, {"text": ["After mapping that, you can just press F2 in command mode."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["imap, vmap, etc... are mappings in different modes.", "The above only applies to command mode.", "The following should work in insert mode also:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n :imap &lt;F2&gt; &lt;Esc&gt;:w&lt;CR&gt;:!filename.py&lt;CR&gt;a\n</code>\n</pre>\n", "senID": 10}, {"text": ["Section 40.1 of the VIM manual is very helpful."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["Okay, the simplest form of what you're looking for is the pipe command.", "It allows you to run multiple cmdline commands on the same line.", "In your case, the two commands are write \\w\\ and execute current file \\!", "%:p\\.", "If you have a specific command you run for you current file, the second command becomes, e.g.", "\\!python %:p\\.", "So, the simplest answer to you question becomes:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "w\\", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "! %:p\\", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "!python %:p\\", "childNum": 0, "tag": "code", "pos": 5, "childList": []}]}, {"code": "<pre>\n<code>\n :w | ! %:p\n ^ ^ ^\n | | |--Execute current file\n | |--Chain two commands\n |--Save current file\n</code>\n</pre>\n", "senID": 1}, {"text": ["One last thing to note is that not all commands can be chained.", "According to the Vim docs, certain commands accept a pipe as an argument, and thus break the chain..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Vim docs", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://vimdoc.sourceforge.net/htmldoc/cmdline.html#cmdline-lines"}]}], [{"text": ["Use the autowrite option:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "autowrite", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://vimdoc.sourceforge.net/htmldoc/options.html#%27autowrite%27"}]}, {"code": "<pre>\n<code>\n :set autowrite\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here you go:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": [":nmap &lt;F1&gt; :w&lt;cr&gt;:!%&lt;cr&gt;"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": ":nmap &lt;F1&gt; :w&lt;cr&gt;:!%&lt;cr&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["save &amp; run\n(you have to be in n mode though - just add esc and a for i mode)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Command combination seems to work through | character, so perhaps something like aliasing  :w|!your-command-here to a distinct key combination?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "|", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ":w|!your-command-here", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Another possibility:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n au BufWriteCmd *.py write | !!\n</code>\n</pre>\n", "senID": 1}, {"text": ["Though this will run every time you save, which might not be what you want."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "run", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I got the following from the vim tips wiki:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n command! -complete=file -nargs=+ shell call s:runshellcommand(&lt;q-args&gt;)\nfunction! s:runshellcommand(cmdline)\n  botright vnew\n  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap\n  call setline(1,a:cmdline)\n  call setline(2,substitute(a:cmdline,'.','=','g'))\n  execute 'silent $read !'.escape(a:cmdline,'%#')\n  setlocal nomodifiable\n  1\nendfunction\n</code>\n</pre>\n", "senID": 1}, {"text": ["but changed new to vnew on the third line, then for python i have the following"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n map &lt;F9&gt; :w:Shell python %&lt;cr&gt;&lt;c-w&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["hitting f9 saves, runs, and dumps the output into a new vertically split scratch buffer, for easy yanking/saving etc ... also hits c-w so i only have to press h/c to close it / move back to my code."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], []]