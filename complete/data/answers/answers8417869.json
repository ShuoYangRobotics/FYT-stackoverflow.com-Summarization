[[{"text": ["Something like this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -i~ -pe 'undef $_ if /^#region License$/ .. /^#endregion$/'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Perl lets you use the range operator with regexes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I guess this does what you mean:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n cat &lt;yourfile&gt; | perl -e 'while (&lt;&gt;){ print unless /#region License/ ... /#endregion/ }'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Edit:\nSorry, for windows it will not work like this.", "Here is a full example."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n use strict;\nuse warnings;\n\nwhile (&lt;DATA&gt;){\n    print unless /#region License/ ... /#endregion/;\n}\n\n__DATA__\n\nasdf\nasdf\nasdf\n\nasdf\nasdf\nasdf\n\n#region License\nblah blah blah\nblah blah blah\n#endregion\nasdf\n\nasdf\nasdf\nasdf\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nwith open('input') as fd:\n    text=fd.read()\n\nold=\"\"\"#region License\nblah blah blah\nblah blah blah\n#endregion\n\n\"\"\"\n\nnew=\"\"\"#region License\n#endregion\n\n\"\"\"\n\nprint text.replace(old,new)\n</code>\n</pre>\n", "senID": 0}, {"text": ["add some os.walk to traverse the directory and either write the result to stdout or replace original file with new content.", "See e.g.", "http://stackoverflow.com/a/5421671/297323"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "os.walk", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "http://stackoverflow.com/a/5421671/297323", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/a/5421671/297323"}]}], [{"code": "<pre>\n<code>\n perl -ne 'if (/#region/../#endregion/) {print if /#(?:end)?region/;next};print' file\n</code>\n</pre>\n", "senID": 0}, {"text": ["...which leave the \"#region license\" and \"#endregion\" lines in the output as requested."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["ex (vim -e) maybe is a good choice."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ex", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "vim -e", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n echo -e 'g/^#region License$/+1,/^#endregion$/-1d\\nx' | ex program.cs\n</code>\n</pre>\n", "senID": 1}, {"tag": "ul", "num": 4, "lis": [{"text": ["g/.../+1,/.../-1"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}, {"text": [], "childNum": 0, "tag": "code", "senID": 3, "childList": []}, {"text": ["\\n"], "childNum": 0, "tag": "code", "senID": 4, "childList": []}, {"text": [], "childNum": 0, "tag": "code", "senID": 5, "childList": []}]}, {"text": ["In Windows, please use:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n vim -c \"g/^#region License/+1,/^#endregion/-1d\" +x program.cs\n</code>\n</pre>\n", "senID": 7}], [{"text": ["read lines of the file, go thru each line if line starts with #region start skipping next lines, if lines ends with #endregion start collecting lines again, output final line into file e.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def filter_lines(lines):\n    newlines = []\n    startmarker = '#region'\n    endmarker = '#endregion'\n    skip = False\n    for line in lines:\n\n        if line.startswith(startmarker):\n            newlines.append(line)\n            skip = True\n            continue\n        if line.endswith(endmarker):\n            skip = False\n\n        if not skip: newlines.append(line)\n\n    return newli\n</code>\n</pre>\n", "senID": 1}, {"text": ["nes"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["python, in case the license bodies are all different in all sorts of unpredictable ways:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nwith open('input') as fd:\n    text=fd.read()\n\ntry:\n    start, rest = text.split(\"#region License\\n\", 1)\n    middle, end = rest.split(\"#endregion\\n\", 1)\n    print \"%s\\#region License\\n#endregion\\n%s\" % (start, end)\nexcept ValueError:\n    # didn't contain a properly formatted license:\n    print text\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I would do something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -i.orig -0777 -p -e 's/#region License.*?#endregion/#region License\\n#endregion/s' test.cc\n</code>\n</pre>\n", "senID": 1}, {"tag": "ul", "num": 4, "lis": [{"text": "-0777 means that the whole file will be slurped ", "tag": "none", "senID": 2}, {"text": "-p is making the -e code to be surrounded by a while (&lt;>) {  ... print $_ } block", "tag": "none", "senID": 3}, {"text": "-i.orig does the editing in place, and creates a backup", "tag": "none", "senID": 4}, {"text": "s flag at the end of the substitution makes the .* in the regexp match over eol ", "tag": "none", "senID": 5}]}, {"text": ["Use find to determine which files to process "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]