[[{"text": ["The code fragment you present is fairly atypical (which might also because you probably made it up):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["you wouldn't normally have an instance variable (self.c) that is a floating point number at some point, and a string at a different point.", "It should be either a number or a string all the time."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["you normally don't bring instance variables into life in an arbitrary method.", "Instead, you typically have a constructor (__init__) that initializes all variables."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["you typically don't have instance variables named a, b, c. Instead, they have some speaking names."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]}, {"text": ["With these fixed, your example would be much more readable."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["A sufficiently talented miscreant can write unreadable code in any language.", "Python attempts to impose some rules on structure and naming to nudge coders in the right direction, but there's no way to force such a thing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For what it's worth, I try to limit the scope of local variables to the area where they're used in every language that i use - for me, not having to maintain a huge mental dictionary makes re-familiarizing myself with a bit of code much, much easier."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "every", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["I agree that what you have seen can be confusing and ought to be accompanied by documentation.", "But confusing things can happen in any language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In your own code, you should apply whatever conventions make things easiest for you to maintain the code.", "With respect to this particular issue, there are a number of possible things that can help."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Using something like ", "tag": "none", "senID": 2}, {"text": "Adopt coding conventions that encourage the kind of code you find easiest to maintain. There's nothing better than setting a good example.", "tag": "none", "senID": 3}, {"text": "Keep your classes and functions small and well-defined. If they get too big, break them up. It's easier to figure out what's going on that way.", "tag": "none", "senID": 4}, {"text": "If you ", "tag": "none", "senID": 5}]}], [{"text": ["This problem is easily solved by specifying coding standards such as declaring all instance variables in the init method of your object.", "This isn't really a problem with python as much as the programmer."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["If what the code is doing becomes mysterious for some reason .. there should either be comments or the function names should make it obvious."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is just my opinion though."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I personally think not having to declare variables is one of the dangerous things in Python, especially when doing classes.", "It is all too easy to accidentally create a variable by simple mistyping and then boggle at the code at length, unable to find the mistake."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Adding a property just before you need it will prevent you from using it before it's got a value.", "Personally, I always find classes hard to follow just from reading source - I read the documentation and find out what it's supposed to do, and then it usually makes sense when I read the source again."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "always", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["The fact that such stuff is allowed is only useful in rare times for prototyping; while Javascript tends to allow anything and maybe such an example could be considered normal (I don't really know), in Python this is mostly a negative byproduct of omission of type declaration, which can help speeding up development - if you at some point change your mind on the type of a variable, fixing type declarations can take more time than the fixes to actual code, in some cases, including the renaming of a type, but also cases where you use a different type with some similar methods and no superclass/subclass relationship."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]