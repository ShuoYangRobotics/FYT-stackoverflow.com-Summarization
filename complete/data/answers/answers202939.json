[[{"text": ["I think Django has some of the best documentation of any project I've worked on.", "That's the reason we chose it over Turbogears two years ago, and it's been the best technology choice we've made."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["web.py?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "web.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://webpy.org/"}]}, {"text": ["It's extremely simple, and Python'y.", "A basic hello-world web-application is.."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import web\n\n urls = (\n     '/(.*)', 'hello'\n  )\n\nclass hello:        \n    def GET(self, name):\n        i = web.input(times=1)\n        if not name: name = 'world'\n        for c in range(int(i.times)):\n            print 'Hello,', name+'!'\n\nif __name__ == \"__main__\": web.run(urls, globals())\n</code>\n</pre>\n", "senID": 2}, {"text": ["..that's it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I found Django forced a lot of it's own conventions and code layout, and I could never remember the middleware/shortcuts imports, and all the other \"magic\" that is pretty much required to write anything.", "I found it was closer to Ruby on Rails than a Python web-framework."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "lot", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["With web.py, you can write an entire, functioning web-application without using any of web.py's helper modules - the only thing you have to do is import web and setup the URLs, which is rather unavoidable.", "(the last line in the example runs the development web-server)"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "have", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "import web", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["It has lots of stuff in it, like an database API, form helpers, a templating engine and so on, but it doesn't force them on you - you could do all your HTML output by print \"Using &lt;b&gt;%s&lt;/b&gt;\" % (\"  string formating \".strip()) if you wished!"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "print \"Using &lt;b&gt;%s&lt;/b&gt;\" % (\"  string formating \".strip())", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Oh, while I have emphasised the simplicity, web.py is what http://reddit.com is written in, so it's also proven very capable/reliable.", "Also, this post by the web.py author is a very good explanation of why I much prefer web.py over Django"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "http://reddit.com", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://reddit.com"}, {"text": "this post", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.aaronsw.com/weblog/rewritingreddit"}]}], [{"text": ["Django is amazingly good.", "Guido uses it (working at Google).", "It's the main reason why i find myself working more in Python than in Lua."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["DanJ, here's a pretty good list of all the known Python frameworks: http://wiki.python.org/moin/WebFrameworks"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://wiki.python.org/moin/WebFrameworks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/WebFrameworks"}]}, {"text": ["I would recommend looking at the wikipedia articles for Django, Turbogears, Pylons, etc.", "[I wrote an article on web.py once, but it got deleted :-(]  They explain the philosophical and component differences between the frameworks pretty well."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Django_(web_framework)"}, {"text": "Turbogears", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Turbogears"}, {"text": "Pylons", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Pylons"}]}, {"text": ["Personally, I like TurboGears a lot since it is based on well-known components, CherryPy (for web serving and URL routing), Kid (for templates), and SQLObject (for object-relational mapping).", "I like that they've resisted the urge to \"roll your own\" for all the components, and I feel that the result is very Pythonic and easy to get started with."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["But you should look at some code samples and tutorials, and decide what suits you best."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You should also take a look at web2py which has good docs and is a very nice framework for building wep apps."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "web2py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mdp.cti.depaul.edu/"}]}], [{"text": ["You might want to look at Karrigell.", "It has multiple options for programming syntax, e.g.", "pure Python, pure HTML w/ Python scripts, combination, etc.", "I don't know how well it scales because I haven't used it for several years but it's good for getting your feet wet w/ web frameworks."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Karrigell", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://karrigell.sourceforge.net/"}]}], [{"text": ["Echoing the answer of few, I suggest Django.", "for some simple reasons:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Wekrzeug is worth mentioning as well.", "It's not a full stack web framework.", "It is a low level WSGI framework.", "(30 Minute Wiki Screencast)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Wekrzeug", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://werkzeug.pocoo.org/"}, {"text": "30 Minute Wiki Screencast", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://werkzeug.pocoo.org/wiki30/"}]}], [{"text": ["I assume you are talking about a web framework.", "I have used CherryPy, and found it quite useful.", "Try using each one to code a simple solution, and see how much it lines up with your style of programming."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CherryPy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://cherrypy.org"}]}], [{"text": ["I've written web-apps with raw wsgi.", "Perhaps rolling out my own library at some point.", "I don't just like about large frameworks and such.", "I learned to hate http while writing in raw wsgi.", "You don't really like it after you realise how much stupid parsing and interpretation you need to upload a file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Because of wsgi, python has tons of frameworks of different qualities.", "If you want to try my way, I'd guess you'd like to know werkzeug perhaps.", "It provides some things when you don't yet know how to do them.", "It only has perhaps too much of a 'framework' for me.", "In the end very well written framework ought exceed what I've written in wsgi though."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]