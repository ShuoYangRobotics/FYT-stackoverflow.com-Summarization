[[{"text": ["Shortest one should be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n bc = 'on' if c.page=='blog' else 'off'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Generally this might look a bit confusing, so you should only use it when it is clear what it means.", "Don't use it for big boolean clauses, since it begins to look ugly fast."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EDIT: As per request, the generalized form is:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n result = (on_false, on_true)[condition]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Explanation: condition can be anything that evaluates to a Boolean.", "It is then treated as an integer since it is used to index the tuple: False == 0, True == 1, which then selects the right item from the tuple."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "condition", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "False == 0", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "True == 1", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Well, not being a python guy please take this with a huge grain of salt, but having written (and, with more difficulty, read) a lot of clever code over the years, I find myself with a strong preference now for readable code.", "I got the gist of what your original code was doing even though I'm a nobody as a Python guy.", "To be sure, you could hide it and maybe impress a Python wonk or two, but why?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "read", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Or you could use an inline if statement:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; cpage = 'blog'\n&gt;&gt;&gt; bc = 'on' if cpage == 'blog' else 'off'\n&gt;&gt;&gt; bc\n'on'\n&gt;&gt;&gt; cpage = 'asdf'\n&gt;&gt;&gt; bc = 'on' if cpage == 'blog' else 'off'\n&gt;&gt;&gt; bc\n'off'\n</code>\n</pre>\n", "senID": 1}, {"text": ["There's a bit of a writeup on that feature at this blog, and the relevant PEP is PEP308.", "The inline if statement was introduced in Python 2.5."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "this blog", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.siafoo.net/article/52#id34"}, {"text": "PEP308", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5/whatsnew/pep-308.html"}]}, {"text": ["This one might be a little less pythonic, but you can use and/or in this fashion:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; cpage = 'asdf'\n&gt;&gt;&gt; bc = (cpage == 'blog') and 'on' or 'off'\n&gt;&gt;&gt; bc\n'off'\n&gt;&gt;&gt; cpage = 'blog'\n&gt;&gt;&gt; bc = (cpage == 'blog') and 'on' or 'off'\n&gt;&gt;&gt; bc\n'on'\n</code>\n</pre>\n", "senID": 4}, {"text": ["This one is used more often in lambda statements than on a line by itself, but the form"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n A and B or C\n</code>\n</pre>\n", "senID": 6}, {"text": ["is similar to"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n if A:\n       return B\n   else:\n       return C\n</code>\n</pre>\n", "senID": 8}, {"text": ["I was going to write out a little bit longer explanation, but they covered it better at Dive into Python.", "They also noted a couple caveats that you probably need to know."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "at Dive into Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org/power%5Fof%5Fintrospection/and%5For.html"}]}], [{"text": ["you can use \"a = b if c else d\" but if you are using a python version prior to 2.5"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n bc = c.page == \"blog\" and \"on\" or \"off\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["can do the trick also."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Another possibility is to use a dict if you can compute the values outside of the function that accesses them (i.e.", "the values are static, which also addresses the evaluation issue in scrible's answer's comments)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["want_bc = {True: \"on\", False: \"off\"}"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["bc = want_bc[c.page == \"blog\"]"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I prefer this and/or the tuple indexing solutions under the general rubric of preferring computation to testing."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]