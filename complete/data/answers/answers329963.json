[[{"text": ["There's an add-on Django application to provide TinyMCE support for Django admin forms without having to muck around with admin templates or Django newform internals."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "add-on Django application", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/django-tinymce/"}, {"href": "http://tinymce.moxiecode.com/", "text": "TinyMCE", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Take a look on this snippet - basic idea is to include custom JS in your admin definitions which will replace standard text areas with rich-text editor."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "snippet", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangosnippets.org/snippets/1035/"}]}, {"text": ["For jQuery/FCKEditor such JS could look like that:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $(document).ready(function() {\n    $(\"textarea\").each(function(n, obj) {\n        fck = new FCKeditor(obj.id) ;\n            fck.BasePath = \"/admin-media/fckeditor/\" ;\n            fck.ReplaceTextarea() ;\n    });\n});\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I'd say: define your own ModelAdmin class and overwrite the widget used for particular field, like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class ArticleAdminModelForm(forms.ModelForm):\n    description = forms.CharField(widget=widgets.AdminWYMEditor)\n\n    class Meta:\n        model = models.Article\n</code>\n</pre>\n", "senID": 1}, {"text": ["(AdminWYMEditor is a forms.Textarea subclass that adds WYMEditor with configuration specific to Django admin app)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "forms.Textarea", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["See this blog post by Jannis Leidel to see how this widget can be implemented."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "this blog post by Jannis Leidel", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jannisleidel.com/2008/11/wysiwym-editor-widget-django-admin-interface/"}]}], [{"text": ["I second Niten's suggestion.", "Also, have a look at this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.djangoproject.com/wiki/AddWYSIWYGEditor"}]}], [{"text": ["Currently the most straight forward way to use tinymce in django admin is to use Grappelli."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.google.com/p/django-grappelli/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/django-grappelli/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-grappelli/"}]}, {"text": ["Grappelli is also a requirement for django-filebrowser so if you want the whole shebang you will gotta need it anyways."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "django-filebrowser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-filebrowser/"}]}], [{"text": ["Ok, to update a little this post, I would say that the easiest way to implement TinyMCE is to use the django-tinymce app.", "You must also download the JS files from the TinyMCE page.", "I got some errors with the django intenationalization, but downloading the laguage packs from the TinyMCE must be enough."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "django-tinymce", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-tinymce/"}, {"text": "TinyMCE page", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://tinymce.moxiecode.com/index.php"}]}], [{"code": "<pre>\n<code>\n class KindEditor(forms.Textarea):\nclass Media:\n    css ={\n        'all':(settings.STATIC_ROOT + 'editor/themes/default/default.css',)\n    }\n    js = (settings.STATIC_ROOT + 'editor/kindeditor-min.js',settings.STATIC_ROOT + 'editor/lang/zh_CN.js',)\ndef __init__(self):\n    attrs = {}\n    attrs['rel'] = 'kind'\n    super(KindEditor, self).__init__(attrs)\n\n\nclass NewsAdminForm(forms.ModelForm):\npass\nclass Meta:\n    model = News\n    widgets = {\n        'body':KindEditor()\n    }\n\nclass NewsAdmin(admin.ModelAdmin):\nform = NewsAdminForm\n\n\nadmin.site.register(News, NewsAdmin)\n</code>\n</pre>\n", "senID": 0}]]