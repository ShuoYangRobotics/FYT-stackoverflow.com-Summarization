[[{"text": ["If not having a value has a meaning in your program (e.g.", "an optional value), you should use None.", "That's its purpose anyway. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If the value must be provided by the caller of __init__, I would recommend not to initialize it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If \"\" makes sense as a default value, use it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In Python the type is deduced from the usage.", "Hence, you can change the type by just assigning a value of another type."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = None\n&gt;&gt;&gt; print type(x)\n&lt;type 'NoneType'&gt;\n&gt;&gt;&gt; x = \"text\"\n&gt;&gt;&gt; print type(x)\n&lt;type 'str'&gt;\n&gt;&gt;&gt; x = 42\n&gt;&gt;&gt; print type(x)\n&lt;type 'int'&gt;\n</code>\n</pre>\n", "senID": 4}], [{"text": ["It depends.", "If you want to distinguish between no parameter passed in at all, and an empty string passed in, you could use None."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Either is fine, though None is more common as a convention - None indicates that no value was passed for the optional parameter."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["There will be times when \"\" is the correct default value to use - in my experience, those times occur less often."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "will", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Since both None and \"\" are false, you can do both.", "See 6.1.", "Truth Value Testing."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "6.1. Truth Value Testing", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#truth-value-testing"}]}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["To answer the question in your edit: No, you can assign a different type."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = \"\"\n&gt;&gt;&gt; type(a)\n&lt;type 'str'&gt;\n&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; type(a)\n&lt;type 'int'&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Either might be fine, but I don't think there is a definite answer."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "might", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "If you want to indicate that the value has not been set, comparing with ", "tag": "none", "senID": 1}, {"text": "If you just want a default value, ", "tag": "none", "senID": 2}, {"text": "If you wish to indicate to future maintainers that a string is required here, ", "tag": "none", "senID": 3}]}, {"text": ["If you have a loop, say:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def myfunc (self, mystr = \"\"):\n    for other in self.strs:\n        mystr = self.otherfunc (mystr, other)\n</code>\n</pre>\n", "senID": 5}, {"text": ["then a potential future optimizer would know that str is always a string.", "If you used None, then it might not be a string until the first iteration, which would require loop unrolling to get the same effects.", "While this isn't a hypothetical (it comes up a lot in my PHP compiler) you should certainly never write your code to take this into account.", "I just thought it might be interesting :)"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["For lists or dicts, the answer is more clear,\naccording to http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#default-parameter-values\nuse None as default parameter."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#default-parameter-values", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#default-parameter-values"}]}, {"text": ["But also for strings, a (empty) string object is instanciated at runtime for\nthe keyword parameter."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The cleanest way is probably:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def myfunc(self, my_string=None):\n    self.my_string = my_string or \"\" # or a if-else-branch, ...\n</code>\n</pre>\n", "senID": 3}], [{"text": ["None is used to indicate \"not set\", whereas any other value is used to indicate a \"default\" value."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Hence, if your class copes with empty strings and you like it as a default value, use \"\".", "If your class needs to check if the variable was set at all, use None."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Notice that it doesn't matter if your variable is a string initially.", "You can change it to any other type/value at any other moment."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]