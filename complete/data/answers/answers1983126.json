[[{"text": ["You can use re.findall:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall(r'\\$(.*?)\\$', s)\n['es membres', 'separat existentie es un']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Import the re module, and use findall():"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "re", "childNum": 2, "tag": "strong", "pos": 0, "childList": [{"text": "re", "tag": "a"}, {"text": "re", "tag": "code"}]}, {"href": "http://docs.python.org/library/re.html", "text": "re", "childNum": 1, "tag": "a", "childList": [{"text": "re", "tag": "code"}]}, {"text": "re", "childNum": 0, "tag": "code", "childList": []}, {"text": "findall()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; p = re.compile('\\$(.*?)\\$')\n&gt;&gt;&gt; s = \"apple $banana$ coconut $delicious ethereal$ funkytown\"\n&gt;&gt;&gt; p.findall(s)\n['banana', 'delicious ethereal']\n</code>\n</pre>\n", "senID": 1}, {"text": ["The pattern p represents a dollar sign (\\$), then a non-greedy match group ((...?", ")) which matches characters (.", ") of which there must be zero or more (*), followed by another dollar sign (\\$)."], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "p", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\\$", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "(...?)", "childNum": 0, "tag": "code", "childList": []}, {"text": ".", "childNum": 0, "tag": "code", "childList": []}, {"text": "*", "childNum": 0, "tag": "code", "childList": []}, {"text": "\\$", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The regex below captures everything between the $ characters non-greedily    "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["\\$(.*?", ")\\$"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n import re;\nm = re.findall('\\$([^$]*)\\$','Li Europan lingues $es membres$ del sam familie. Lor $separat existentie es un$ myth');\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Alternative without regexes which works for this simple case:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s=\"Li Europan lingues $es membres$ del sam familie. Lor $separat existentie es un$\"\n&gt;&gt;&gt; s.split(\"$\")[1::2]\n['es membres', 'separat existentie es un']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Just split the string on '$' (this gives you a python list) and then only use every 'second' element of this list."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Valid regex demo in Perl:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n my $a = 'Li Europan lingues $es membres$ del sam familie. Lor $separat existentie es un$ myth.';\nmy @res;\nwhile ($a =~ /\\$([^\\$]+)\\$/gos)\n{\n push(@res, $1);\n}\n\nforeach my $item (@res)\n{\n print \"item: $item\\n\";\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["flags: s - treat all input text as single line, g - global"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]