[[{"code": "<pre>\n<code>\n def foo(n):\n  lol = [ [] ]\n  i = 1\n  for x in range(n):\n    if len(lol[-1]) &gt;= i:\n      i += 1\n      lol.append([])\n    lol[-1].append(x)\n  return lol\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n def foo(n):\n    i = 1\n    while i &lt;= n:\n        last = int(i * 1.5 + 1)\n        yield range(i, last)\n        i = last\n\nlist(foo(3))\n</code>\n</pre>\n", "senID": 0}, {"text": ["What behavior do you expect when you use a number for n that doesn't work, like 9?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Adapted from gs's answer but without the mysterious \"1.5\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def foo(n):\n    i = c = 1\n    while i &lt;= n:\n        yield range(i, i + c)\n        i += c\n        c += 1\n\nlist(foo(10))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is probably not a case where list comprehensions are appropriate, but I don't care!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from math import ceil, sqrt, max\n\ndef tri(n):\n    return n*(n+1) // 2\n\ndef irt(x):\n    return int(ceil((-1 + sqrt(1 + 8*x)) / 2))\n\ndef foo(n):\n    return [list(range(tri(i)+1, min(tri(i+1)+1, n+1))) for i in range(irt(n))]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One more, just for fun:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def lol(n):\n    entries = range(1,n+1)\n    i, out = 1, []\n    while len(entries) &gt; i:\n        out.append( [entries.pop(0) for x in xrange(i)] )\n        i += 1\n    return out + [entries]\n</code>\n</pre>\n", "senID": 1}, {"text": ["(This doesn't rely on the underlying list having the numbers 1..n)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here's my python golf entry:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def foo(n):\n...     def lower(i): return 1 + (i*(i-1)) // 2\n...     def upper(i): return i + lower(i)\n...     import math\n...     x = (math.sqrt(1 + 8*n) - 1) // 2\n...     return [list(range(lower(i), upper(i))) for i in  range(1, x+1)]\n...\n&gt;&gt;&gt;\n&gt;&gt;&gt; for i in [1,3,6,10,15]:\n...     print i, foo(i)\n...\n1 [[1]]\n3 [[1], [2, 3]]\n6 [[1], [2, 3], [4, 5, 6]]\n10 [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]\n15 [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["The calculation of x relies on solution of the quadratic equation with positive roots for"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 0 = y*y + y - 2*n\n</code>\n</pre>\n", "senID": 3}]]