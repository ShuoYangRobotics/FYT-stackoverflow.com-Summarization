[[{"text": ["If you want to place a letter before or after instead of replacing, just fix the indices in your splicing so that they don't jump over a letter - i.e.", "use "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = x[:rnd] + rndCharacter + x[rnd:]\n</code>\n</pre>\n", "senID": 1}, {"text": ["That way the new character will be inserted in the middle, instead of replacing an existing one."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Also, you can use rndCharacter = random.choice(characters) instead of using tmp1 like that."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "rndCharacter = random.choice(characters)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tmp1", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n import random\n\ndef misspeller(word):\n    characters = 'qwertyuioplkjhgfdsazxcvbnm,. '\n    rand_word_position = random.randint(-1,len(word))\n    rand_characters_position = random.randint(0,len(characters)-1)\n\n    if rand_word_position == -1:\n        misspelled_word = characters[rand_characters_position] + word \n    elif rand_word_position == len(word):\n        misspelled_word = word + characters[rand_characters_position] \n    else:\n        misspelled_word = list(word)\n        misspelled_word[rand_word_position] = characters[rand_characters_position]\n        misspelled_word = ''.join(misspelled_word)        \n    return misspelled_word\n\ns = 'Hello how are you today, [name]?'\nmisspelled_s = ''\nmisspelled_list = []\nfor item in s.split(' '):\n    if '[name]' in item:\n        misspelled_list.append(item)\n    else:\n        misspelled_list.append(misspeller(item))\nmisspelled_s = ' '.join(misspelled_list)\nprint misspelled_s\n</code>\n</pre>\n", "senID": 0}, {"text": ["Examples of what I'm getting from misspelled_s are:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "misspelled_s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n 'Hellk howg ars youf poday, [name]?'\n'Heylo how arer y,u todab, [name]?'\n'Hrllo hfw  are zyou totay, [name]?'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Edited to clean up a couple of mistakes and omissions on first copy."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Edited", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Edit 2 If you don't want every word to be affected you can modify the for loop in the following way:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit 2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for item in s.split(' '):\n    n = random.randint(0,1)\n    if '[name]' in item:\n        misspelled_list.append(item)\n    elif n == 1:\n        misspelled_list.append(misspeller(item))\n    else:\n        misspelled_list.append(item)\n</code>\n</pre>\n", "senID": 5}, {"text": ["You can modify the probability that a word is modified by changing how n is generated e.g.", "n = random.randint(0,10)"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "n = random.randint(0,10)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I think @sgallen's answer will work, but I have a few tips (for your previous code, and going forward)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sgallen", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in range(0, len(arr)):\n    x = arr[i]\n\n# is the same as\n\nfor i,x in enumerate(arr):\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n else:\n    if random...:\n\n# to\n\nelif random...:\n</code>\n</pre>\n", "senID": 2}, {"text": ["Using string as the name of a variable, isn't a good practice.", "The reason being, there is a string module.", "It might even come in handy for this because of the string constants.", "Alternatives could be inp, or data, or sentence."], "childNum": 6, "tag": "p", "senID": 3, "childList": [{"text": "string", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "string", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "string constants", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#string-constants"}, {"text": "inp", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "data", "childNum": 0, "tag": "code", "childList": []}, {"text": "sentence", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n # For example\n\n&gt;&gt;&gt; import string\n&gt;&gt;&gt; string.lowercase\n'abcdefghijklmnopqrstuvwxyz'\n</code>\n</pre>\n", "senID": 4}, {"text": ["By the way, if anyone notices errors in the above, leave a comment.", "Thanks."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You can also use split('[name]'), and work on the sub-string, this way you'll be sure (see note below) of don't change '[name]'.  "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "split('[name]')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(see note below)", "childNum": 0, "tag": "em", "childList": []}, {"text": "'[name]'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You may have problem splitting on every [name] occurance catching some substring of some longer name, but if you:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "[name]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "Use real and common names in capital letter (like Jonh).", "tag": "none", "senID": 2}, {"text": "Avoid the use of similar names.", "tag": "none", "senID": 3}]}, {"text": ["Then the following code should work fine:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def typo(string):\n    index = random.randint(1,len(string)-1)   # don't change first or last\n    return string[:index] + random.choice(characters) + string[index:]\n\ndef generate(string, n, safe_name):\n    sub_strings = string.split(safe_name)\n    while n:\n        sub_index = random.randint(0,len(sub_strings) - 1)\n        sub = sub_strings[sub_index]\n        if len(sub) &lt;= 2:   # if too short don't change\n            continue\n\n        sub_strings[sub_index] = typo(sub)\n        n -= 1\n    return safe_name.join(sub_strings)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Example adding 3 new random charachter:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; string = 'Hello how are you today, Alice?'\n&gt;&gt;&gt; generate(string, 3, 'Alice')\n'Hellov howj are yoiu today, Alice?'\n</code>\n</pre>\n", "senID": 7}, {"text": ["With the name occurring more then one time:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; string = 'Hello Alice, how are you today, Alice?'\n&gt;&gt;&gt; generate(string, 3, 'Alice')\n'Hello Alice, hoiw arfe you todayq, Alice?'\n</code>\n</pre>\n", "senID": 9}], [{"text": ["For the example you have given, it looks like we can split it on the comma and put the typo(s) in the first part of the string."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If this is correct, you need to do three things randomly before generating the typo:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Choose which character to do the typo on or near", "tag": "none", "senID": 2}, {"text": "Choose the typo character", "tag": "none", "senID": 3}, {"text": "Choose one of three actions - Replace, Prefix, Append", "tag": "none", "senID": 4}]}, {"text": ["Would this fit the bill?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["(BTW, since you are familiar with random, I didn't give any code."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["You are \"hoping there is a better way of going about it\".", "Well, here's some suggestions, and some code demonstrating those suggestions.", "Some of the suggestions are about making the code more pythonic or easy to read, not just the mechanics of changing strings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Hope this helps."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import random\nimport re\n\nstring = 'Hello how are you today, [name]?'\ncharacters = 'qwertyuioplkjhgfdsazxcvbnm,. '\nwords = []\n\nfor x in string.rsplit(\" \"):\n    if    None == re.search('[^\\]]*\\[[a-z]+\\].*', x) \\\n      and len(x) &gt; 3 and random.random()&lt;=0.5:\n        # rnd: index of char to overwrite or insert before\n        rnd = random.randint(2,len(x)-2)\n        # rnd1: index of 1st char after modification\n        # random.random &lt;= 0.x is probability of overwriting instead of inserting\n        rnd1 = rnd + 1 if random.random() &lt;= 0.5 else 0\n        x = x[:rnd] + random.choice(characters) + x[rnd1:]\n\n    words.append(x)\n\ntypos = \" \".join(words)\nprint typos\n</code>\n</pre>\n", "senID": 2}, {"text": ["Update: fixed indentation mistake in the code."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Update 2: made the code for choosing overwrite versus insert to be more concise."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]