[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; thetuple = (1, 2, 3)\n&gt;&gt;&gt; print \"this is a tuple: %s\" % (thetuple,)\nthis is a tuple: (1, 2, 3)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Making a singleton tuple with the tuple of interest as the only item, i.e.", "the (thetuple,) part, is the key bit here."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "(thetuple,)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["This doesn't use string formatting, but you should be able to do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print 'this is a tuple ', (1, 2, 3)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you really want to use string formatting:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print 'this is a tuple %s' % str((1, 2, 3))\n# or\nprint 'this is a tuple %s' % ((1, 2, 3),)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note, this assumes you are using a Python version earlier than 3.0."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; tup = (1, 2, 3)\n&gt;&gt;&gt; print \"Here it is: %s\" % (tup,)\nHere it is: (1, 2, 3)\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}, {"text": ["Note that (tup,) is a tuple containing a tuple.", "The outer tuple is the argument to the % operator.", "The inner tuple is its content, which is actually printed."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "(tup,)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(tup) is an expression in brackets, which when evaluated results in tup."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "(tup)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tup", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["(tup,) with the trailing comma is a tuple, which contains tup as is only member."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "(tup,)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tup", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Check out the pprint module."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n t = (1, 2, 3)\n\n# the comma (,) concatenates the strings and adds a space\nprint \"this is a tuple\", (t)\n\n# format is the most flexible way to do string formatting\nprint \"this is a tuple {0}\".format(t)\n\n# classic string formatting\n# I use it only when working with older Python versions\nprint \"this is a tuple %s\" % repr(t)\nprint \"this is a tuple %s\" % str(t)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I think the best way to do this is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n t = (1,2,3)\n\nprint \"This is a tuple: %s\" % str(t)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you're familiar with printf style formatting, then Python supports its own version.", "In Python, this is done using the \"%\" operator applied to strings (an overload of the modulo operator), which takes any string and applies printf-style formatting to it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "printf", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Printf#printf%5Fformat%5Fplaceholders"}]}, {"text": ["In our case, we are telling it to print \"This is a tuple: \", and then adding a string \"%s\", and for the actual string, we're passing in a string representation of the tuple (by calling str(t))."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you're not familiar with printf style formatting, I highly suggest learning, since it's very standard.", "Most languages support it in one way or another."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]