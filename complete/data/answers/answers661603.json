[[{"text": ["The simple answer to your question: no, there is no simple way.", "There are a whole lot of work-arounds."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There really shouldn't be a simple way, because of what generators are: a way to output a sequence of values without holding the sequence in memory.", "So there's no backward traversal."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "without holding the sequence in memory", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You could write a has_next function or maybe even slap it on to a generator as a method with a fancy decorator if you wanted to."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here is a recipe for an iterator wrapper, it probably allows to do what you want:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.activestate.com/recipes/502304/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.activestate.com/recipes/502304/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/502304/"}]}, {"text": ["Note: I have not tested if it works or not.", "Nor am I sure that the functionality is useful."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Suggestion:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def peek(iterable):\n    try:\n        first, rest = next(iterable)\n    except StopIteration:\n        return None\n    return first, itertools.chain([first], rest)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n res = peek(mysequence)\nif res is None:\n    # sequence is empty.  Do stuff.\nelse:\n    first, mysequence = res\n    # Do something with first, maybe?\n    # Then iterate over the sequence:\n    for element in mysequence:\n        # etc.\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I hate to offer a second solution, especially one that I would not use myself, but, if you absolutely had to do this and to not consume the generator, as in other answers:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "had", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def do_something_with_item(item):\n    print item\n\nempty_marker = object()\n\ntry:\n     first_item = my_generator.next()     \nexcept StopIteration:\n     print 'The generator was empty'\n     first_item = empty_marker\n\nif first_item is not empty_marker:\n    do_something_with_item(first_item)\n    for item in my_generator:\n        do_something_with_item(item)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now I really don't like this solution, because I believe that this is not how generators are to be used."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Sorry for the obvious approach, but the best way would be to do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for item in my_generator:\n     print item\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now you have detected that the generator is empty while you are using it.", "Of course, item will never be displayed if the generator is empty."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This may not exactly fit in with your code, but this is what the idiom of the generator is for: iterating, so perhaps you might change your approach slightly, or not use generators at all."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The best approach, IMHO, would be to avoid a special test.", "Most times, use of a generator is the test:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n thing_generated = False\n\n# Nothing is lost here. if nothing is generated, \n# the for block is not executed. Often, that's the only check\n# you need to do\nfor thing in my_generator():\n    thing_generated = True\n    print \"I've generated something!\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["If that's not good enough, you can still perform an explicit test.", "At this point, thing will contain the last value generated.", "If nothing was generated, it will be undefined - unless you've already defined the variable.", "You could check the value of thing, but that's a bit unreliable.", "Instead, just set a flag within the block and check it afterward:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "thing", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "thing", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n if not thing_generated:\n    print \"Avast, ye scurvy dog!\"\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; gen = (i for i in [])\n&gt;&gt;&gt; next(gen)\nTraceback (most recent call last):\n  File \"&lt;pyshell#43&gt;\", line 1, in &lt;module&gt;\n    next(gen)\nStopIteration\n</code>\n</pre>\n", "senID": 0}, {"text": ["At the end of generator StopIteration is raised, since in your case end is reached immediately, exception is raised.", "But normally you shouldn't check for existence of next value."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "StopIteration", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "But normally you shouldn't check for existence of next value.", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["another thing you can do is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; gen = (i for i in [])\n&gt;&gt;&gt; if not list(gen):\n    print('empty generator')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you need to know before you use the generator, then no, there is no simple way.", "If you can wait until after you have used the generator, there is a simple way:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "before", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "after", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n was_empty = True\n\nfor some_item in some_generator:\n    was_empty = False\n    do_something_with(some_item)\n\nif was_empty:\n    handle_already_empty_generator_case()\n</code>\n</pre>\n", "senID": 1}]]