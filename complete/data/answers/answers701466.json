[[{"text": ["Perhaps you could try something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def call_attrs(obj, attrs_list, *args):\n    for attr in attrs_list:\n        if hasattr(obj, attr):\n            bound_method = getattr(obj, attr)\n            return bound_method(*args)\n\n    raise AttributeError\n</code>\n</pre>\n", "senID": 1}, {"text": ["You would call it like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n call_attrs(a, ['method1', 'method2', 'method3'])\n</code>\n</pre>\n", "senID": 3}, {"text": ["This will try to call the methods in the order they are in in the list.", "If you wanted to pass any arguments, you could just pass them along after the list like so:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n call_attrs(a, ['method1', 'method2', 'method3'], arg1, arg2)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["How about encapsulating the calls in a function?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def method_1_2_or_3():\n    try:\n        a.method1()\n        return\n    except AttributeError:\n        pass\n    try:\n        a.method2()\n        return\n    except AttributeError:\n        pass\n    try:\n        a.method3()\n    except AttributeError:\n        raise\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A slight change to the second looks pretty nice and simple.", "I really doubt you'll notice any performance difference between the two, and this is a bit nicer than a nested try/excepts"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def something(a):\n    for methodname in ['method1', 'method2', 'method3']:\n        try:\n            m = getattr(a, methodname)\n        except AttributeError:\n            pass\n        else:\n            return m()\n    raise AttributeError\n</code>\n</pre>\n", "senID": 1}, {"text": ["The other very readable way is to do.."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def something(a):\n    try:\n        return a.method1()\n    except:\n        pass\n\n    try:\n        return a.method2()\n    except:\n        pass\n\n    try:\n        return a.method3()\n    except:\n        pass\n\n    raise AttributeError\n</code>\n</pre>\n", "senID": 3}, {"text": ["While long, it's very obvious what the function is doing..", "Performance really shouldn't be an issue (if a few try/except statements slow your script down noticeably, there is probably a bigger issue with the script structure)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["If you are using new-style object:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n methods = ('method1','method2','method3')\nfor method in methods:\n    try:\n        b = a.__getattribute__(method)\n    except AttributeError:\n        continue\n    else:\n        b()\n        break\nelse:\n    # re-raise the AttributeError if nothing has worked\n    raise AttributeError\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, if you aren't using a new-style object, you may try __dict__ instead of __getattribute__."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "__dict__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__getattribute__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["EDIT: This code might prove to be a screaming mess.", "If __getattribute__ or __dict__ is not found, take a wild guess what kind of error is raised."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "__getattribute__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["A compact solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n getattr(a, 'method1',\n    getattr(a, 'method2',\n        getattr(a, 'method3')))()\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n method = (\n        getattr(a, 'method1', None) or\n        getattr(a, 'method2', None) or\n        getattr(a, 'method3')\n        )\nmethod()\n</code>\n</pre>\n", "senID": 0}, {"text": ["This will first look for method1, then method2, then method3.", "The search will stop as soon as one of them is found.", "If none of the methods are found the last getattr will raise an exception."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "method1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "method2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "method3", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "getattr", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}]]