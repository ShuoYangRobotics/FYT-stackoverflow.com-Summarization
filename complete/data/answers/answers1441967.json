[[{"text": ["They shouldn't be, as long as you:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["PIL can do good resizing.", "Make sure your source image is in RGB mode, not palette colors, and try the different algorithm choices."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["While imagemagick seems to be the de facto open-source imaging library, possibly DevIL (cross platform, seems to do simple image operations) or FreeImage."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "DevIL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://openil.sourceforge.net/features.php"}, {"href": "http://freeimage.sourceforge.net/features.html", "text": "FreeImage", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Have you checked pypi?", "A cursory search shows some image related tools there, I also discovered python-gd, no clue how useful it might be though."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pypi", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/"}]}, {"text": ["I've never had any issues with PIL myself, but some kind of variety might be interesting."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["GIMP has a reasonable command-line interface, I think."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Take a look at some of these imaging libraries:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["hxxp://pypi.python.org/pypi/collective.croppingimagefield/0.1beta"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["hxxp://pypi.python.org/pypi/cropresize/0.1.1"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["hxxp://pypi.python.org/pypi/image_resize/1.0"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I'm unsure as to why Image.thumbnail is getting such flak.", "In the present release that I'm running off of it does little more than figure out the desired size and resize the image in place.", "As long as you're using the proper resample filter and convert to RGB first (as bobince says) thumbnail shouldn't be any different than resize. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's the actual source for the thumbnail method:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def thumbnail(self, size, resample=NEAREST):\n  # preserve aspect ratio\n  x, y = self.size\n  if x &gt; size[0]: y = max(y * size[0] / x, 1); x = size[0]\n  if y &gt; size[1]: x = max(x * size[1] / y, 1); y = size[1]\n  size = x, y\n\n  if size == self.size:\n      return\n\n  self.draft(None, size)\n\n  self.load()\n\n  try:\n      im = self.resize(size, resample)\n  except ValueError:\n      if resample != ANTIALIAS:\n          raise\n      im = self.resize(size, NEAREST) # fallback\n\n  self.im = im.im\n  self.mode = im.mode\n  self.size = size\n\n  self.readonly = 0\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Last time I compared, this downscaler's output is almost identical to that of GIMP's \"cubic\" option:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import Image\n\n def stretch(im, size, filter=Image.NEAREST):\n     im.load()\n     im = im._new(im.im.stretch(size, filter))\n     return im\n</code>\n</pre>\n", "senID": 1}, {"text": ["IIRC, the differences are visually indistinguishable -- some pixel values +/-1 due to rounding, and they tend to be round the edges.", "It's not slow either."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["cf: http://www.mail-archive.com/image-sig@python.org/msg00248.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://www.mail-archive.com/image-sig@python.org/msg00248.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.mail-archive.com/image-sig@python.org/msg00248.html"}]}]]