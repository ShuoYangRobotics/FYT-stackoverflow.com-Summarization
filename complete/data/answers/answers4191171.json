[[{"text": ["You can start adding them to the set and as soon as you try to add the element that is already in the set you found a duplicate."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's not apparent what's the point of finding one arbitrary element that is a duplicate or 1 or more other elements of the collection ... do you want to remove it?", "merge its attributes with those of its twins / triplets / ... / N-tuplets?", "In any case, that's an O(N) operation, which if repeated until no more duplicates are detected is an O(N ** 2) operation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However you can get a bulk deal at the algorithm warehouse: sort the collection -- O(N*log(N)) -- and then use itertools.groupby to bunch up the duplicates and cruise through the bunches, ignoring the bunches of size 1 and doing whatever you want with the bunches of size > 1 -- all of that is only about O(N)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "itertools.groupby", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Ok, my first answer has gotten quite a bit of flack, so I thought I'd try a few different ways of doing this and report the differences.", "Here's my code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nimport itertools\n\ndef getFirstDup(c, toTest):\n\n    # Original idea using list slicing =&gt; 5.014 s\n    if toTest == '1':\n        for i in xrange(0, len(c)):\n            if c[i] in c[:i]:\n                return c[i]\n\n    # Using two sets =&gt; 4.305 s\n    elif toTest == '2':\n        s = set()\n        for i in c:\n            s2 = s.copy()\n            s.add(i)\n            if len(s) == len(s2):\n                return i\n\n    # Using dictionary LUT =&gt; 0.763 s\n    elif toTest == '3':\n        d = {}\n        for i in c:\n            if i in d:\n                return i\n            else:\n                d[i] = 1\n\n    # Using set operations =&gt; 0.772 s\n    elif toTest == '4':\n        s = set()\n        for i in c:\n            if i in s:\n                return i\n            else:\n                s.add(i)\n\n    # Sorting then walking =&gt; 5.130 s\n    elif toTest == '5':\n        c = sorted(c)\n        for i in xrange(1, len(c)):\n            if c[i] == c[i - 1]:\n                return c[i]\n\n    # Sorting then groupby-ing =&gt; 5.086 s\n    else:\n        c = sorted(c)\n        for k, g in itertools.groupby(c):\n            if len(list(g)) &gt; 1:\n                return k\n\n    return None\n\n\nc = list(xrange(0, 10000000))\nc[5000] = 0\n\nfor i in xrange(0, 10):\n    print getFirstDup(c, sys.argv[1])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Basically, I try this in six different ways, as listed in the source file.", "I used the Linux time command and collected the realtime runtimes, running the commands like so"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "time", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n time python ./test.py 1\n</code>\n</pre>\n", "senID": 3}, {"text": ["with 1 being which algorithm I wanted to try.", "Each algorithm looks for the first duplicate in 10,000,000 integers, and runs ten times.", "There is one duplication in the list, which is \"mostly sorted\" though I did try reverse sorted lists without noticing a proportional difference between algorithms."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["My original suggestion did poorly at 5.014 s. My understanding of icyrock.com's solution also did poorly at 4.305 s. Next I tried using a dictionary to create a LUT, which gave the best runtime at 0.763 s. I tried using the in operator on sets, and got 0.772 s, nearly as good as the dictionary LUT.", "I tried sorting and walking the list, which gave a pitiful time of 5.130 s. Finally, I tried John Machin's suggestion of the itertools, which gave a poor time of 5.086 s. "], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In summary, a dictionary LUT seems to be the way to go, with set operations (which may use LUTs in its implementation) being a close second."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "dictionary LUT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Update: I tried razpeitia's suggestion, and apart from the fact that you need to know precisely what duplicate key you're looking for, the actual algorithm did the worst so far (66.366 s)."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Update 2: I'm sure someone is going to say that this test is biased because the duplicate location is near one end of the list.", "Try running the code using a different location before downvoting and report your results!"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Try running the code", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n from collections import Counter\n\ncont = [1, 2, 3]\nc = Counter(cont)\nx = someItem\n\nif c[x] == 0:\n    print(\"Not in cont\")\nelif c[x] == 1:\n    print(\"Unique\")\nelse:\n    print(\"Duplicate\")\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You have to scan all the elements for the duplicates as they can be just the last ones you check, so you can't get more efficient than worst case O(N) time, just like linear search.", "But a simple linear search to find a duplicate will use up O(N) memory, because you need to track what you've seen so far."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If the array is sorted you can find duplicates in O(N) time without using any additional memory because duplicate pairs will be next to each other."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If your container is a list, you can just pass the value you're looking for to its count() method and check the result: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [1,1,2,3]\n&gt;&gt;&gt; l.count(1)\n2\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["A dictionary can't have duplicate keys, nor can a set.", "Outside of these, I'd need to know what kind of container it is.", "I guess the real point is to always make sure you haven't missed an obvious solution to the problem before you go coding a custom solution.", "I fall prey to this myself sometimes :) "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["According to http://wiki.python.org/moin/TimeComplexity most of the list operations are terribly inefficient (just confirmed that x in myList does seem to be O(N) in python3)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "http://wiki.python.org/moin/TimeComplexity", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/TimeComplexity"}, {"text": "x in myList", "childNum": 0, "tag": "code", "childList": []}, {"text": "O(N)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The method given by the original poster is efficient because it is O(N) time and space (this is the \"best\" you can, without making additional assumptions about your list, since list operations like  x in myList are O(N))."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "is", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "x in myList", "childNum": 0, "tag": "code", "childList": []}, {"text": "O(N)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["There is a major optimization which is possible, which is to iteratively build up the set.", "This would return quickly on certain kinds of lists, e.g.", "[0,1,1,2,3,4,5,...].", "However you are implicitly assuming a bit about the distribution of your lists (for example, do you optimize for this case, or optimize for duplicates at the end, or both?).", "The good thing about this optimization is that it doesn't affect asymptotic speed.", "Here's how I would code it elegantly:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[0,1,1,2,3,4,5,...]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n def hasDuplicate(iter):\n    visited = set()\n    for item in iter:\n        if item in visited:\n            return True\n        visited.add(item)\n    return False\n</code>\n</pre>\n", "senID": 3}, {"text": ["You could also return the first duplicate, but you can't return None; you'd have to raise an Exception since the iterable might contain None."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["sidenote: There are ways to improve the space-efficiency for a minor hit to time-efficiency (e.g.", "bloom filters)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def getFirstDup(cont):\n    for i in xrange(0, len(cont)):\n        if cont[i] in cont[:i]:\n            return cont[i]\n    return None\n</code>\n</pre>\n", "senID": 1}]]