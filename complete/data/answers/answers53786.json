[[{"text": ["Why don't you try The Grinder 3 to load test your server, it comes with all this and more prebuilt, and it supports python as a scripting language"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "The Grinder 3", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://grinder.sourceforge.net"}]}], [{"text": ["Slightly longer but probably more readable rework of your last four lines:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n samples = [0 for i in xrange(how_many_days + 1)]\nfor s in xrange(how_many_responses):\n    samples[min(int(how_many_days * weibullvariate(0.5, 2)), how_many_days)] += 1\nhistogram = zip(timeline, samples)\nprint '\\n'.join((d.strftime('%Y-%m-%d ') + \"*\" * c) for d,c in histogram)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This always drops the samples within the date range, but you get a corresponding bump at the end of the timeline from all of the samples that are above the [0, 1] range."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This is quick and probably not that accurate, but if you calculate the PDF yourself, then at least you make it easier to lay several smaller/larger ones on a single timeline.", "dev is the std deviation in the Guassian noise, which controls the roughness.", "Note that this is not the 'right' way to generate what you want, but it's easy."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "dev", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "not", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n import math\nfrom datetime import datetime, timedelta, date\nfrom random import gauss\n\nhow_many_responses = 1000\nstart_date = date(2008, 5, 1)\nend_date = date(2008, 6, 1)\nnum_days = (end_date - start_date).days + 1\ntimeline = [start_date + timedelta(i) for i in xrange(num_days)]\n\ndef weibull(x, k, l):\n    return (k / l) * (x / l)**(k-1) * math.e**(-(x/l)**k)\n\ndev = 0.1\nsamples = [i * 1.25/(num_days-1) for i in range(num_days)]\nprobs = [weibull(i, 2, 0.5) for i in samples]\nnoise = [gauss(0, dev) for i in samples]\nsimdata = [max(0., e + n) for (e, n) in zip(probs, noise)]\nevents = [int(p * (how_many_responses / sum(probs))) for p in simdata]\n\nhistogram = zip(timeline, events)\n\nprint '\\n'.join((d.strftime('%Y-%m-%d ') + \"*\" * c) for d,c in histogram)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Instead of giving the number of requests as a fixed value, why not use a scaling factor instead?", "At the moment, you're treating requests as a limited quantity, and randomising the days on which those requests fall.", "It would seem more reasonable to treat your requests-per-day as independent."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from datetime import *\nfrom random import *\n\ntimeline = []\nscaling = 10\nstart_date = date(2008, 5, 1)\nend_date = date(2008, 6, 1)\n\nnum_days = (end_date - start_date).days + 1\ndays = [start_date + timedelta(i) for i in range(num_days)]\nrequests = [int(scaling * weibullvariate(0.5, 2)) for i in range(num_days)]\ntimeline = zip(days, requests)\ntimeline\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I rewrote the code above to be shorter (but maybe it's too obfuscated now?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n timeline = (start_date + timedelta(days=days) for days in count(0))\nhow_many_days = (end_date - start_date).days\npick_a_day = lambda _:int(how_many_days * weibullvariate(0.5, 2))\ndays = sorted(imap(pick_a_day, xrange(how_many_responses)))\nhistogram = zip(timeline, (len(list(responses)) for day, responses in groupby(days)))\nprint '\\n'.join((d.strftime('%Y-%m-%d ') + \"*\" * c) for d,c in histogram)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Another solution is to use Rpy, which puts all of the power of R (including lots of tools for distributions), easily into Python.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Rpy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rpy.sourceforge.net/"}]}]]