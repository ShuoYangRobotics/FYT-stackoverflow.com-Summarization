[[{"text": ["The first is more efficient than the second.", "del foo.bar compiles to two bytecode instructions:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "del foo.bar", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n 2           0 LOAD_FAST                0 (foo)\n              3 DELETE_ATTR              0 (bar)\n</code>\n</pre>\n", "senID": 1}, {"text": ["whereas delattr(foo, \"bar\") takes five:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "delattr(foo, \"bar\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n 2           0 LOAD_GLOBAL              0 (delattr)\n              3 LOAD_FAST                0 (foo)\n              6 LOAD_CONST               1 ('bar')\n              9 CALL_FUNCTION            2\n             12 POP_TOP\n</code>\n</pre>\n", "senID": 3}, {"text": ["This translates into the first running slightly faster (but it's not a huge difference \u2013 .15 \u03bcs on my machine)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "slightly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Like the others have said, you should really only use the second form when the attribute that you're deleting is determined dynamically."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["[Edited to show the bytecode instructions generated inside a function, where the compiler can use LOAD_FAST and LOAD_GLOBAL]"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "LOAD_FAST", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "LOAD_GLOBAL", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Unquestionably the former.", "In my view this is like asking whether foo.bar is better than getattr(foo, \"bar\"), and I don't think anyone is asking that question :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's really a matter of preference, but the first is probably preferable.", "I'd only use the second one if you don't know the name of the attribute that you're deleting ahead of time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's the same thing, they both end up calling the objects __delattr__ method.", "delattr is for when the attribute name is in a variable: delattr(theob, foo).", "Otherwise, using delattr is like crossing the stream for water. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__delattr__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "delattr(theob, foo)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["In short: Use del."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Just like getattr and setattr, delattr should only be used when the attribute name is unknown."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In that sense, it's roughly equivalent to several python features that are used to access built-in functionality at a lower level than you normally have available, such as __import__ instead of import and operator.add instead of +"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "__import__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "import", "childNum": 0, "tag": "code", "childList": []}, {"text": "operator.add", "childNum": 0, "tag": "code", "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If you think delattr is more explicit, then why not used getattr all the time rather than object.attr?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As for under the hood... your guess is as good as mine.", "If not significantly better."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Not sure about the inner workings, but from a code reusability and don't be a jerk coworker perspective, use del.", "It's more clear and understood by people coming from other languages as well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]