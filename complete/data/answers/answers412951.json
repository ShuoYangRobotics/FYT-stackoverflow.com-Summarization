[[{"text": ["Look at built-in functions getattr and setattr.", "You'll probably be a lot happier."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "getattr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "setattr", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Using the same get/set functions for both classes forces you into an ugly hack with the argument list.", "Very sketchy, this is how I would do it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In class SingleParameter, define get and set as usual:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def get(self):\n  return self._s\ndef set(self, value):\n  self._s = value\n</code>\n</pre>\n", "senID": 2}, {"text": ["In class Collection, you cannot know the information until you create the property, so you define the metaset/metaget function and particularize them only later with a lambda function:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def metaget(self, par):\n  return par.s\ndef metaset(self, value, par):\n  par.s = value\ndef add(self, par):\n  self[par.name] = par\n  setattr(Collection, par.name,\n    property(\n      fget=lambda x : Collection.metaget(x, par),\n      fset=lambda x, y : Collection.metaset(x,y, par))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Properties are meant to dynamically evaluate attributes or to make them read-only.", "What you need is customizing attribute access.", "__getattr__ and __setattr__ do that really fine, and there's also __getattribute__ if __getattr__ is not enough."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "__getattr__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "__setattr__", "childNum": 0, "tag": "code", "childList": []}, {"text": "__getattribute__", "childNum": 0, "tag": "code", "childList": []}, {"text": "__getattr__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["See Python docs on customizing attribute access for details."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python docs on customizing attribute access", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#customizing-attribute-access"}]}], [{"text": ["Have you looked at the traits package?", "It seems that you are reinventing the wheel here with your parameter classes.", "Traits also have additional features that might be useful for your type of application (incidently I know a person that happily uses traits in neural simulations)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "traits package", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.enthought.com/projects/traits/"}]}], [{"text": ["Now I implemented a solution with set-/getattr:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Collection(object):\n...\n  def __setattr__(self, name, value):\n    if 'dict' in self.__dict__:\n      if name in self.dict:\n        self[name].v = value\n    else:\n      self.__dict__[name] = value\n  def __getattr__(self, name):\n    return self[name].v\n</code>\n</pre>\n", "senID": 1}, {"text": ["There is one thing I quite don't like that much: The attributes are not in the __dict__.", "And if I have them there as well I would have a copy of the value - which can be dangerous..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Finally I succeded to implement the classes with property().", "Thanks a lot for the advice.", "It took me quite a bit to work it out - but I can promise you that this exercise helps you to understand better pythons OOP."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I implemented it also with __getattr__ and __setattr__ but still don't know the advantages and disadvantages to the property-solution.", "But this seems to be worth another question.", "The property-solutions seems to be quit clean."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So here is the code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class SingleParameter(object):\n  def __init__(self, name, default_value=0, unit='not specified'):\n    self.name = name\n    self.default_value = default_value\n    self.unit = unit\n    self.set(default_value)\n  def get(*args):\n    self = args[0]\n    print \"get(): \"\n    print args\n    return self._v\n  def set(*args):\n    print \"set(): \"\n    print args\n    self = args[0]\n    value = args[-1]\n    self._v = value\n  v = property(fget=get, fset=set, doc='value of parameter')\n\nclass Collection(dict):\n  # inheriting from dict saves the methods: __getitem__ and __init__\n  def add(self, par):\n    self[par.name] = par\n    # Now here comes the tricky part.\n    # (Note: this property call the get() and set() methods with one\n    # more argument than the property of SingleParameter)\n    setattr(Collection, par.name,\n      property(fget=par.get, fset=par.set))\n\n# Applying the classes:\npar1 = SingleParameter(name='par1', default_value=10, unit='mV')\npar2 = SingleParameter(name='par2', default_value=20, unit='mA')\ncol = Collection()\ncol.add(par1)\ncol.add(par2)\n# Setting parameter values:\npar1.v = 13\ncol.par1 = 14\n# Getting parameter values:\npar1.v\ncol.par1\n# checking identity:\npar1.v is col.par1\n# to access the whole object:\ncol['par1']\n</code>\n</pre>\n", "senID": 3}, {"text": ["As I am new I am not sure how to move on:\nhow to treat follow up questions (like this itself):"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "get() is seems to be called twice - why?", "tag": "none", "senID": 5}, {"text": "oop-design: property vs. \"__getattr__ &amp; __setattr__\" - when should I use what?", "tag": "none", "senID": 6}, {"text": "is it rude to check the own answer to the own question as ", "tag": "none", "senID": 7}, {"text": "is it recommended to rename the title in order to put correlated questions or questions elaborated with the same example into the same context?", "tag": "none", "senID": 8}]}, {"text": ["Other questions that I put to understand property():"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Why do managed attributes just work for class attributes and not for instance attributes in python?"], "childNum": 0, "tag": "a", "senID": 10, "childList": []}, {"text": ["How can I assign a new class attribute via __dict__ in python?"], "childNum": 0, "tag": "a", "senID": 11, "childList": []}]}]]