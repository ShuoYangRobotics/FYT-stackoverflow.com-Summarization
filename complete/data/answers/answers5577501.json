[[{"code": "<pre>\n<code>\n >>> string = '1abc'\n>>> string[0].isdigit()\nTrue\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Python's string library has isdigit() method:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "string", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "isdigit()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n string[0].isdigit()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Your code won't work; you need or instead of ||."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "or", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "||", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Try"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n '0' &lt;= strg[:1] &lt;= '9'\n</code>\n</pre>\n", "senID": 2}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n strg[:1] in '0123456789'\n</code>\n</pre>\n", "senID": 4}, {"text": ["or, if you are really crazy about startswith,"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "startswith", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))\n</code>\n</pre>\n", "senID": 6}], [{"code": "<pre>\n<code>\n for s in (\"fukushima\", \"123 is a number\", \"\"):\n\n    print s.ljust(20),  s[0].isdigit() if s else False\n</code>\n</pre>\n", "senID": 0}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n fukushima            False\n123 is a number      True\n                     False\n</code>\n</pre>\n", "senID": 2}], [{"text": ["sometimes, you can use regex"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.search('^\\s*[0-9]',\"0abc\")\n&lt;_sre.SRE_Match object at 0xb7722fa8&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use Regular Expressions, if you are going to somehow extend method's functionality."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Regular Expressions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.ru/search?hl=ru&newwindow=1&q=python%20regular%20expressions&aq=f&aqi=g10&aql=&oq="}]}], [{"text": ["Here are my \"answers\" (trying to be unique here, I don't actually recommend either for this particular case :-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Using ord()and the special a &lt;= b &lt;= c form:"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "ord()and", "childNum": 1, "tag": "del", "pos": 0, "childList": [{"text": "ord()", "tag": "a"}]}, {"href": "http://docs.python.org/library/functions.html#ord", "text": "ord()", "childNum": 0, "tag": "a", "childList": []}, {"text": "a &lt;= b &lt;= c", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n //starts_with_digit = ord('0') &lt;= ord(mystring[0]) &lt;= ord('9')\n//I was thinking too much in C. Strings are perfectly comparable.\nstarts_with_digit = '0' &lt;= mystring[0] &lt;= '9'\n</code>\n</pre>\n", "senID": 2}, {"text": ["(This a &lt;= b &lt;= c, like a &lt; b &lt; c, is a special Python construct and it's kind of neat: compare 1 &lt; 2 &lt; 3 (true) and 1 &lt; 3 &lt; 2 (false) and (1 &lt; 3) &lt; 2 (true).", "This isn't how it works in most other languages."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "a &lt;= b &lt;= c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a &lt; b &lt; c", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "1 &lt; 2 &lt; 3", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "1 &lt; 3 &lt; 2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "(1 &lt; 3) &lt; 2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Using a regular expression:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "regular expression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}, {"code": "<pre>\n<code>\n import re\n//starts_with_digit = re.match(r\"^\\d\", mystring) is not None\n//re.match is already anchored\nstarts_with_digit = re.match(r\"\\d\", mystring) is not None\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You could use regular expressions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "regular expressions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}, {"text": ["You can detect digits using:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if(re.search([0-9], yourstring[:1])):\n#do something\n</code>\n</pre>\n", "senID": 2}, {"text": ["The [0-9] par matches any digit, and yourstring[:1] matches the first character of your string"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if string[0] in range(10):\n</code>\n</pre>\n", "senID": 1}]]