[[{"text": ["Think simpler:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; n = 64\n&gt;&gt;&gt; while n:\n...     print n\n...     n = n &gt;&gt; 1\n...\n64\n32\n16\n8\n4\n2\n1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'd write a simple generator function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def strider(x):\n...     while x:\n...         x &gt;&gt;= 1\n...         yield x\n... \n&gt;&gt;&gt; for x in strider(64):\n...     print x\n... \n32\n16\n8\n4\n2\n1\n0\n</code>\n</pre>\n", "senID": 1}], [{"text": ["First thing that comes to mind is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n while stride&gt;0:\n   # do your stuff\n   stride&gt;&gt;=1\n</code>\n</pre>\n", "senID": 1}, {"text": ["I don't think it is a good idea to try and use for-loops in this case.", "In Python for-loops work much like for-each loops in other languages.", "They act on sequences.", "Although we could easily turn the range of values for stride into a sequence, the while IMHO is a much simpler and more natural way of expressing the idea."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}], [{"text": ["All for(;;) loops can be rewritten as while loops, and vice versa."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "for(;;)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n n = 64\nstride = n &gt;&gt; 1\nwhile stride &gt; 0:\n    # stuff\n    stride &gt;&gt;= 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDITED to reflect the change in the original"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDITED", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["You could write your own generator for use in the for loop"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "generator", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#generators"}]}], [{"text": ["Since you do not have many iterations:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for stride in [32, 16, 8, 4, 2, 1, 0]:\n  # ...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How about using a logarithm?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range(int(math.log(n, 2)), -1, -1):\n    # stride is 2**i\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Well, closest is to use itertools module:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import takewhile, imap, count\n&gt;&gt;&gt; n = 64\n&gt;&gt;&gt; for i in takewhile(bool, imap(lambda x:n &gt;&gt; x, count(1))):\n...     print i\n... \n32\n16\n8\n4\n2\n1\n</code>\n</pre>\n", "senID": 1}]]