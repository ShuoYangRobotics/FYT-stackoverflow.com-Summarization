[[{"text": ["Edit: Adam asked me to extend the solution to support keyword arguments"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Edit: Adam asked me to extend the solution to support keyword arguments", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Here is the final solution:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from functools import wraps\nimport inspect\n\ndef initializer(fun):\n   names, varargs, keywords, defaults = inspect.getargspec(fun)\n   @wraps(fun)\n   def wrapper(self, *args, **kargs):\n       for name, arg in zip(names[1:], args) + kargs.items():\n           setattr(self, name, arg)\n       fun(self, *args, **kargs)\n   return wrapper\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can use a decorator:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from functools import wraps\nimport inspect\n\ndef initializer(fun):\n    names, varargs, keywords, defaults = inspect.getargspec(fun)\n    @wraps(fun)\n    def wrapper(self, *args):\n        for name, arg in zip(names[1:], args):\n            setattr(self, name, arg)\n        fun(self, *args)\n    return wrapper\n\nclass process:\n    @initializer\n    def __init__(self, PID, PPID, cmd, FDs, reachable, user):\n        pass\n</code>\n</pre>\n", "senID": 4}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; c = process(1, 2, 3, 4, 5, 6)\n&gt;&gt;&gt; c.PID\n1\n&gt;&gt;&gt; dir(c)\n['FDs', 'PID', 'PPID', '__doc__', '__init__', '__module__', 'cmd', 'reachable', 'user'\n</code>\n</pre>\n", "senID": 6}], [{"text": ["If you're using Python 2.6 or higher, you can use collections.namedtuple:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "collections.namedtuple", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#collections.namedtuple"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Process = namedtuple('Process', 'PID PPID cmd')\n&gt;&gt;&gt; proc = Process(1, 2, 3)\n&gt;&gt;&gt; proc.PID\n1\n&gt;&gt;&gt; proc.PPID\n2\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is appropriate especially when your class is really just a big bag of values."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Quoting the Zen of Python,"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Zen of Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}], [{"text": ["Another thing you can do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class X(object):\n    def __init__(self, a,b,c,d):\n        vars = locals() # dict of local names\n        self.__dict__.update(vars) # __dict__ holds and object's attributes\n        del self.__dict__[\"self\"] # don't need `self`\n</code>\n</pre>\n", "senID": 1}, {"text": ["But the only solution I would recommend, besides just spelling it out, is \"make a macro in your editor\" ;-p"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You could do it easily with the keyword arguments, e.g.", "like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class D:\n    def __init__(self, **kwargs):\n    \tfor k, v in kwargs.items():\n    \t\tsetattr(self, k, v)\n\n&gt;&gt;&gt; D(test='d').test\n'd'\n</code>\n</pre>\n", "senID": 1}, {"text": ["similar implementation for the positional arguments would be:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt; class C:\n    def __init__(self, *args):\n    \tself.t, self.d = args\n\n\n&gt;&gt;&gt; C('abc', 'def').t\n'abc'\n&gt;&gt;&gt; C('abc', 'def').d\n'def'\n</code>\n</pre>\n", "senID": 3}, {"text": ["which to me doesn't seem to solve your problem."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Nadia's solution is better and more powerful, but I think this is also interesting:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def constructor(*arg_names):\n  def __init__(self, *args):\n    for name, val in zip(arg_names, args):\n      self.__setattr__(name, val)\n  return __init__\n\n\nclass MyClass(object):\n  __init__ = constructor(\"var1\", \"var2\", \"var3\")\n\n\n&gt;&gt;&gt; c = MyClass(\"fish\", \"cheese\", \"beans\")\n&gt;&gt;&gt; c.var2\n\"cheese\"\n</code>\n</pre>\n", "senID": 1}]]