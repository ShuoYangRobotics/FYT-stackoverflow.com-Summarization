[[{"text": ["Python does integer division when both operands are integers, meaning that 1 / 2 is basically \"how many times does 2 go into 1\", which is of course 0 times.", "To do what you want, convert one operand to a float: 1 / float(2) == 0.5, as you're expecting.", "And, of course, math.ceil(1 / float(2)) will yield 1, as you expect."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "1 / 2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "1 / float(2) == 0.5", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "math.ceil(1 / float(2))", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["(I think this division behavior changes in Python 3."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Integer division is the default of the / operator in Python &lt; 3.0.", "This has behaviour that seems a little weird.", "It returns the dividend without a remainder. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "/", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 10 / 3\n3\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you're running Python 2.6+, try:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import division\n\n&gt;&gt;&gt; 10 / 3\n3.3333333333333335\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you're running a lower version of Python than this, you will need to convert at least one of the numerator or denominator to a float:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 10 / float(3)\n3.3333333333333335\n</code>\n</pre>\n", "senID": 5}, {"text": ["Also, math.ceil always returns a float..."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "always", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import math \n&gt;&gt;&gt; help(math.ceil)\n\nceil(...)\n    ceil(x)\n\n    Return the ceiling of x as a float.\n    This is the smallest integral value &gt;= x.\n</code>\n</pre>\n", "senID": 7}], [{"text": ["They're integers, so count/per_pages is zero before the functions ever get to do anything beyond that.", "I'm not a Python programmer really but I know that (count * 1.0) / pages will do what you want.", "There's probably a right way to do that however."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "count/per_pages", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(count * 1.0) / pages", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["edit &mdash; yes see @mipadi's answer and float(x)"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "edit", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "float(x)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["From Python documentation (math module):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python documentation (math module)", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/math.html#number-theoretic-and-representation-functions"}]}], [{"text": ["its because how you have it set up is performing the operation and then converting it to a float try"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n count = friends.count()\nprint count\n\nper_page = float(2)\nprint per_page\n\npages = math.ceil(count/per_pages)\n\nprint pages\npages = count/per_pages\n</code>\n</pre>\n", "senID": 1}, {"text": ["By converting either count or per_page to a float all of its future operations should be able to do divisions and end up with non whole numbers"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; 10 / float(3)\n3.3333333333333335\n&gt;&gt;&gt; #Or \n&gt;&gt;&gt; 10 / 3.0\n3.3333333333333335\n&gt;&gt;&gt; #Python make any decimal number to float\n&gt;&gt;&gt; a = 3\n&gt;&gt;&gt; type(a)\n&lt;type 'int'&gt;\n&gt;&gt;&gt; b = 3.0\n&gt;&gt;&gt; type(b)\n&lt;type 'float'&gt;\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}, {"text": ["The best solution maybe is to use from __future__ import division "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "from __future__ import division", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You can try out different possibilities \nat ideone (Python 3 is also available)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "at ideone", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ideone.com/IVVPB"}]}]]