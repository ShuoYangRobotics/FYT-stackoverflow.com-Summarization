[[{"text": ["I am not sure I understand what you are trying to do and your desired outcome but perhaps this will help.", "Because C extension modules are normally run within the execution context of the Python interpreter, extension modules have to be built to be compatible with the interpreter.", "On OS X, Python and distutils go to some trouble to ensure that C extension modules are built with the same SDK (-sysroot), MACOSX_DEPLOYMENT_TARGET value, and -arch values as the Python interpreter itself was originally built.", "So, if you are using the Apple-supplied Python on 10.6, distutils will supply -arch i386 -arch ppc -arch x86_64, the three archs that it was built with.", "If you use a current python.org OS X installer (on 10.6, 10.5, or 10.4), it will use:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "-sysroot", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "MACOSX_DEPLOYMENT_TARGET", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "-arch", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "-arch i386 -arch ppc -arch x86_64", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n gcc-4.0 -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk\n</code>\n</pre>\n", "senID": 1}, {"text": ["From the snippets you supply, I'm guessing you are using a MacPorts-installed universal Python and, by default, it is built with and uses -arch x86_64 -arch i386 -isysroot / for building extension modules."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "-arch x86_64 -arch i386 -isysroot /", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Generally, to make everything work you need to ensure:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["On OS X 10.6, that last step is not as easy as it should be depending on which Python you are using.", "For instance, the Apple-supplied Python 2.6 has a modification to force 32-bit execution (see Apple's man python for details):"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "man python", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n export VERSIONER_PYTHON_PREFER_32_BIT=yes\n</code>\n</pre>\n", "senID": 5}, {"text": ["If you build your own 32-/64-bit universal Python, there are fixes in 2.6.5 to allow selection at run-time.", "Unfortunately, the way MacPorts builds Python bypasses those fixes so there does not appear to be any simple way to force a MacPorts python2.6 32-/64-bit universal build on 10.6 to run in 32-bit mode.", "For complicated reasons, it will always prefer 64-bit, if available, even if you use /usr/bin/arch -i386."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "/usr/bin/arch -i386", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["So, depending on what you are trying to do, you may be able to work around the issue (if I understand it correctly) by either:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Although long after the dust has settled, having the same question myself I dug around a little bit and found this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/distutils/sysconfig.py"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if 'ARCHFLAGS' in os.environ:\n                archflags = os.environ['ARCHFLAGS']\n            else:\n                archflags = '-arch i386 -arch ppc -arch x86_64'\n            _config_vars['ARCHFLAGS'] = archflags\n            if archflags.strip() != '':\n                _config_vars['CFLAGS'] = _config_vars['CFLAGS'] + ' ' + archflags\n                _config_vars['LDFLAGS'] = _config_vars['LDFLAGS'] + ' ' + archflags\n</code>\n</pre>\n", "senID": 2}, {"text": ["I'm coming at the problem from a different angle - on 10.6 distutils is trying to build C extensions and as complains because there's no PPC portion in the 10.6 SDK."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["However,"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n export ARCHFLAGS=\"-arch i386 -arch x86_64\"\n python setup.py build\n</code>\n</pre>\n", "senID": 5}, {"text": ["Worked like a charm."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["It seems that my framework is compiled for ppc and i386 but not x86_64 :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ file /Library/Frameworks/fwk1.framework/Versions/A/fwk1 \n/Library/Frameworks/fwk1.framework/Versions/A/fwk1: Mach-O universal binary with 2 architectures\n/Library/Frameworks/fwk1.framework/Versions/A/fwk1 (for architecture ppc):  Mach-O dynamically linked shared library ppc\n/Library/Frameworks/fwk1.framework/Versions/A/fwk1 (for architecture i386): Mach-O dynamically linked shared library i386\n</code>\n</pre>\n", "senID": 1}, {"text": ["I removed the -arch x86_64 flag from my linking line.", "My library is linked against my frameworks :"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ otool -L  test.so\ntest.so:\n    /Library/Frameworks/fwk1.framework/Versions/A/fwk1 (compatibility version 1.0.0, current version 1.0.0)\n    /Library/Frameworks/fwk2.framework/Versions/A/fwk2 (compatibility version 1.0.0, current version 1.0.0)\n    /usr/lib/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.9.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.0.1)\n</code>\n</pre>\n", "senID": 3}, {"text": ["If someone know how to force the -arch to be used at compile and link time with Python's distutils... please share your advice."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "force", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["One option that came to mind is to take the python2.6 fat binary, built by macports, and \"thin\" it out to extract out the i386 only binary.", "One example of how to \"thin\" a fat binary is here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.google.com/p/modwsgi/wiki/InstallationOnMacOSX"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/modwsgi/wiki/InstallationOnMacOSX", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/modwsgi/wiki/InstallationOnMacOSX"}]}, {"text": ["While logically this seems like it should work, if I follow steps similar to the above and extract an i386-only version of python from the macports build, when I actually try that, and run that version of python, it is somehow still running in 64-bit mode.", "It's baffling."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "should", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $sudo lipo /opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6 -thin i386 -output /opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6-i386\n\n$file  /opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin/python\n2.6-i386 \n  /opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6-i386: Mach-O executable i386\n\n$/opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6-i386  -c \"import sys; print sys.maxint\"\n  9223372036854775807\n</code>\n</pre>\n", "senID": 3}, {"text": ["That number should be around 2 billion if it was running in 32-bit mode, I believe.", "(also, looking in activity monitor, the file is running in 64-bit mode)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["So it's a solution idea that doesn't seem to work."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I just ran into this myself.", "I had to bypass distutils, because they appear to hard-code the -undefined dynamic_lookup.", "Here is the Makefile I'm using to emulate distutils:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n CC = gcc\nCFLAGS = -pipe -std=c99 -fno-strict-aliasing -fno-common -dynamic -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Werror -pedantic -Wall -Wstrict-prototypes -Wshorten-64-to-32 -g -Os -arch i386 -arch x86_64 -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7\nLD = gcc\nLDFLAGS = -Wl,-F. -bundle -Wl,-F. -arch i386 -arch x86_64 -framework CoreFoundation -framework CoreMIDI -framework Python\n\nproject = &lt;extension_name&gt;\nlibrary = $(project).so\nmodules = &lt;module_names&gt;\nsources = $(foreach module,$(modules),$(module).c)\nobjects = $(sources:.c=.o)\n\nall: $(library)\n\n$(library): $(objects)\n    $(LD) $(LDFLAGS) $(objects) -o $@\n\n%.o: %.c Makefile\n    $(CC) $(CFLAGS) $&lt; -c -o $@\n\ninstall: $(library)\n    cp $(library) /Library/Python/2.7/site-packages\n\nclean:\n        rm -f $(library) $(objects) *~\n</code>\n</pre>\n", "senID": 1}, {"text": ["I'm sure there is a way to get distutils to stop emitting that -undefined argument, but the above worked for me on 10.7"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This has nothing to do with the undefined dynamic_lookup but all with distutils.", "It appends the extra_link_flags to the link flags it chooses for python building.", "Instead it should prepend it because the -framework listings must come before the objects that use them on the cmdline (AFAIK this is due how gcc gathers symbols for linking).", "A quick fix that I personally use is building with"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n LDFLAGS=\"-framework Carbon\" python setup.py build_ext --inplace\n</code>\n</pre>\n", "senID": 1}, {"text": ["or whatever frameworks you need.", "LDFLAGS is prepended to distutils own flags.", "Note that your package will not be pip installable.", "A proper fix can only come from distutils - imho they should support frameworks like they support libraries."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "pip install", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "frameworks", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "libraries", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Alternatively, you can also add"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import os\nos.environ['LDFLAGS'] = '-framework Carbon'\n</code>\n</pre>\n", "senID": 4}, {"text": ["in your setup.py.", "Your package should then be pip installable."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "pip install", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]