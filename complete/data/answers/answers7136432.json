[[{"code": "<pre>\n<code>\n l = [['Something', 'Something else', 'Another thing'],\n     ['Other things', 'More data', 'Element'],\n     ['Stuff', 'data', 'etc']]\nsub1 = [\n    [s.ljust(max(len(i) for i in grp)) for s in grp]\n    for grp in zip(*l)]\nfor p in [\" \".join(row) for row in zip(*sub1)]: print p\n</code>\n</pre>\n", "senID": 0}, {"text": ["Here, first the list gets transformed with zip(*l).", "Then the entries whose lengths are to be matched are in the same grp.", "In each of these grps the strings are ljust()ed to the greatest length in the group."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "zip(*l)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "grp", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "grp", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "ljust()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["After that, the new list with the adjusted lengths is transformed again and the components joined with a \" \" in-between."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\" \"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The resulting 1D list is then printed entry by entry."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You can use the string format method, or even the older string interpolation operator, to place strings into padded, fixed length fields.", "See format strings documentation."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "format", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "format strings", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#formatstrings"}]}, {"text": ["A loop using this need not be ugly."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n from itertools import chain\n\nll = [['Something', 'Something else', 'Another thing'],\n ['Other things', 'More data', 'Element'],\n ['Stuff', 'data', 'etc']]\n\n# get the length of the longest item. \n# For simplicity, I use the same width for all columns\na = max(len(s) for s in chain.from_iterable(ll)) + 1 \n\n# make a format string with the max\nf = ('{:&lt;' + str(a) + '}').format\n\n# print the list\nprint '\\n'.join(''.join(f(s) for s in sl) for sl in ll)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I do not know if such a function exists in the python library (and I doubt you would find one), but a doubly nested loop seems to be the easiest solution.", "Simply concatenate the strings at the end of the inner loop with an empty space (but I guess from the way you asked the question, you want them aligned, so use the tab escape character \"\\t\").", "Print them after you exit the inner loop, and that should do it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EDIT: I see I was right about the tab spacing ... the tab escape character is equivalent to pressing the tab key, if you need more space, use multiple ones in a row \"\\t\\t\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n li = [['Something', 'Something else', 'Another thing'],\n      ['Other things', 'More data', 'Element'],\n      ['Stuff', 'data', 'etc']]\n\nprint li,'\\n'\n\nprint \"tuple( max(map(len,x)) for x in zip(*li)) == \",\\\n      tuple( max(map(len,x)) for x in zip(*li))\n\n\nprint\npatform = '%%-%ss %%-%ss %%-%ss' % tuple( max(map(len,x)) for x in zip(*li))\nprint '\\n'.join(patform % tuple(x) for x in li)\n\n# OR\n\nprint\npatform = '{:&lt;%s} {:&lt;%s} {:&lt;%s}' % tuple( max(map(len,x)) for x in zip(*li))\nprint '\\n'.join(patform.format(*x) for x in li)\n\n# OR\n\nprint\npatform = '{{:&lt;{}}} {{:&lt;{}}} {{:&lt;{}}}'.format( *tuple( max(map(len,x)) for x in zip(*li)) )\nprint '\\n'.join(patform.format(*x) for x in li)\n</code>\n</pre>\n", "senID": 0}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [['Something', 'Something else', 'Another thing'], ['Other things', 'More data', 'Element'], ['Stuff', 'data', 'etc']] \n\ntuple( max(map(len,x)) for x in zip(*li)) ==  (12, 14, 13)\n\nSomething    Something else Another thing\nOther things More data      Element      \nStuff        data           etc          \n\nSomething    Something else Another thing\nOther things More data      Element      \nStuff        data           etc          \n\nSomething    Something else Another thing\nOther things More data      Element      \nStuff        data           etc\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n print '\\n'.join([line+' ' for line in l])\n</code>\n</pre>\n", "senID": 0}]]