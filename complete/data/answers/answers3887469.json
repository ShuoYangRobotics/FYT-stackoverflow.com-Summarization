[[{"text": ["If you'd prefer just an integer number of cents:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n cents_int = int(round(float(dollars.strip('$'))*100))\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want a Decimal, just use..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from decimal import Decimal\ndollars_dec = Decimal(dollars.strip('$'))\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you know that the dollar sign will always be there, you could use dollars[1:] instead of dollars.strip('$'), but using strip() lets you also handle strings that omit the dollar sign (5.99 instead of $5.99)."], "childNum": 5, "tag": "p", "senID": 4, "childList": [{"text": "dollars[1:]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dollars.strip('$')", "childNum": 0, "tag": "code", "childList": []}, {"text": "strip()", "childNum": 0, "tag": "code", "childList": []}, {"text": "5.99", "childNum": 0, "tag": "code", "childList": []}, {"text": "$5.99", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If you want to use Decimal:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from decimal import Decimal\ndollars = Decimal(dollars.strip('$'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["From there adding is pretty simple"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n dollars += 1 # Would add 1 to your decimal\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Through decimal package"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dollars = '$5.99'\n&gt;&gt;&gt; import decimal\n&gt;&gt;&gt; decimal.Decimal(dollars[1:])\nDecimal('5.99')\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you are only going to be adding (and not multiplying or dividing) consider just storing cents instead of dollars and not using the decimal package.", "I suggest using the simplest tool for the job, and decimal doesn't provide any value if you are just adding dollars and cents."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["First, strip off the '$' character.", "If it's always consistently the first character, that's easy:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dollars[1:]\n</code>\n</pre>\n", "senID": 1}, {"text": ["To keep the cents perfect without worrying about the non-perfect representation of cents in floating point, you'll want to use Decimal values:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from decimal import *\nDecimal(dollars[1:])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you want to keep moneys in cents for easy rounding and sometimes '$' is missing:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for dollars in ('$5.99','6.77'):\n    cents = int(float((dollars[1:] if dollars.startswith('$') else dollars))*100)\n    print '%s = %i cents = %i dollars and %i cents' % ((dollars, cents)+divmod(cents, 100))\n</code>\n</pre>\n", "senID": 1}]]