[[{"code": "<pre>\n<code>\n [x for x in myList if x.n == 30]               # list of all matches\nany(x.n == 30 for x in myList)                 # if there is any matches\n[i for i,x in enumerate(myList) if x.n == 30]  # indices of all matches\n\ndef first(iterable, default=None):\n  for item in iterable:\n    return item\n  return default\n\nfirst(x for x in myList if x.n == 30)          # the first match, if any\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Just for completeness, let's not forget the Simplest Thing That Could Possibly Work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in list:\n  if i.n == 5:\n     # do something with it\n     print \"YAY! Found one!\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can get a list of all matching elements with a list comprehension:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "all", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [x for x in myList if x.n == 30]  # list of all elements with .n==30\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you simply want to determine if the list contains any element that matches and do it (relatively) efficiently, you can do"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "any", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def contains(list, filter):\n    for x in list:\n        if filter(x):\n            return True\n    return False\n\nif contains(myList, lambda x: x.n == 3)  # True if any element has .n==3\n    # do stuff\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n filter(lambda x: x.n == 5, myList)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Simple, Elegant, and Powerful:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Simple, Elegant, and Powerful:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["A generator expression in conjuction with a builtin\u2026 (python 2.5+)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n any(x for x in mylist if x.n == 10)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Uses the Python any() builtin, which is defined as follows:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "any()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def any(iterable):\n    for element in iterable:\n        if element:\n            return True\n    return False\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You can use in to look for an item in a collection, and a list comprehension to extract the field you are interested in.", "This (works for lists, sets, tuples, and anything that defines __contains__ or __getitem__). "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__contains__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__getitem__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n if 5 in [data.n for data in myList]:\n    print \"Found it\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["See also:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Contains Method"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["In operation"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}]}], [{"text": ["You should add a __eq__ and a __hash__ method to your Data class, it could check if the __dict__ attributes are equal (same properties) and then if their values are equal, too."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "__eq__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__hash__", "childNum": 0, "tag": "code", "childList": []}, {"text": "Data", "childNum": 0, "tag": "code", "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you did that, you can use"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n test = Data()\ntest.n = 5\n\nfound = test in myList\n</code>\n</pre>\n", "senID": 2}, {"text": ["The in keyword checks if test is in myList."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "test", "childNum": 0, "tag": "code", "childList": []}, {"text": "myList", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you only want to a a n property in Data you could use:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Data", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class Data(object):\n    __slots__ = ['n']\n    def __init__(self, n):\n        self.n = n\n    def __eq__(self, other):\n        if not isinstance(other, Data):\n            return False\n        if self.n != other.n:\n            return False\n        return True\n    def __hash__(self):\n        return self.n\n\n    myList = [ Data(1), Data(2), Data(3) ]\n    Data(2) in myList  #==&gt; True\n    Data(5) in myList  #==&gt; False\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Consider using a dictionary:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n myDict = {}\n\nfor i in range(20):\n    myDict[i] = i * i\n\nprint(5 in myDict)\n</code>\n</pre>\n", "senID": 1}]]