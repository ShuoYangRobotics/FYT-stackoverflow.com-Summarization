[[{"text": ["See: python regex grouping"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python regex grouping", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/regex/regex.html#SECTION000520000000000000000"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; p = re.compile(\"lalala(I want this part)lalala\")\n&gt;&gt;&gt; p.match(\"lalalaI want this partlalala\").group(1)\n'I want this part'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import re\ndata = \"some input data\"\nm = re.search(\"some (input) data\", data)\nif m: # \"if match was successful\" / \"if matched\"\n  print m.group(1)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Check the docs for more."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}], [{"text": [], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nastr='lalalabeeplalala'\nmatch=re.search('lalala(.*)lalala',astr)\nwhatIWant=match.group(1) if match else None\nprint(whatIWant)\n</code>\n</pre>\n", "senID": 1}, {"text": ["A small note: in Perl, when you write "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $string =~ m/lalala(.*)lalala/;\n</code>\n</pre>\n", "senID": 3}, {"text": ["the regexp can match anywhere in the string.", "The equivalent is accomplished with the re.search() function, not the re.match() function,  which requires that the pattern match starting at the beginning of the string."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "re.search()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "re.match()", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n import re\nmatch = re.match('lalala(I want this part)lalala', 'lalalaI want this partlalala')\nprint match.group(1)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you want to get parts by name you can also do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; m = re.match(r\"(?P&lt;first_name&gt;\\w+) (?P&lt;last_name&gt;\\w+)\", \"Malcom Reynolds\")\n&gt;&gt;&gt; m.groupdict()\n{'first_name': 'Malcom', 'last_name': 'Reynolds'}\n</code>\n</pre>\n", "senID": 1}, {"text": ["The example was taken from the re docs"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "re docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#re.MatchObject.groupdict"}]}], [{"text": ["there's no need for regex.", "think simple."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"lalala(I want this part)lalala\".split(\"lalala\")\n['', '(I want this part)', '']\n&gt;&gt;&gt; \"lalala(I want this part)lalala\".split(\"lalala\")[1]\n'(I want this part)'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}]]