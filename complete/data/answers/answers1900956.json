[[{"text": ["Is something like this what you're looking for?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def write_vars_to_file(_f, **vars):\n    for (name, val) in vars.items():\n        _f.write(\"%s = %s\\n\" % (name, repr(val)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; write_vars_to_file(sys.stdout, dict={'one': 1, 'two': 2})\ndict = {'two': 2, 'one': 1}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["the repr function will return a string which is the exact definition of your dict (except for the order of the element, dicts are unordered in python).", "unfortunately, i can't tell a way to automatically get a string which represent the variable name."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "repr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dict = {'one': 1, 'two': 2}\n&gt;&gt;&gt; repr(dict)\n\"{'two': 2, 'one': 1}\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["writing to a file is pretty standard stuff, like any other file write:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n f = open( 'file.py', 'w' )\nf.write( 'dict = ' + repr(dict) + '\\n' )\nf.close()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You could do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import inspect\n\nmydict = {'one': 1, 'two': 2}\n\nsource = inspect.getsourcelines(inspect.getmodule(inspect.stack()[0][0]))[0]\nprint [x for x in source if x.startswith(\"mydict = \")]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also: make sure not to shadow the dict builtin!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["use pickle"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pickle", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import pickle\ndict = {'one': 1, 'two': 2}\nfile = open('dump.txt', 'w')\npickle.dump(dict, file)\nfile.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["and to read it again"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n file = open('dump.txt', 'r')\ndict = pickle.load(file)\n</code>\n</pre>\n", "senID": 3}, {"text": ["EDIT: Guess I misread your question, sorry ... but pickle might help all the same.", ":)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The default string representation for a dictionary seems to be just right:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a={3: 'foo', 17: 'bar' }\n&gt;&gt;&gt; a\n{17: 'bar', 3: 'foo'}\n&gt;&gt;&gt; print a\n{17: 'bar', 3: 'foo'}\n&gt;&gt;&gt; print \"a=\", a\na= {17: 'bar', 3: 'foo'}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Not sure if you can get at the \"variable name\", since variables in Python are just labels for values.", "See this question."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this question", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/592746/how-can-you-print-a-variable-name-in-python"}]}], [{"text": ["Do you just want to know how to write a line to a file?", "First, you need to open the file:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "file", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#file-objects"}]}, {"code": "<pre>\n<code>\n f = open(\"filename.txt\", 'w')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then, you need to write the string to the file:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n f.write(\"dict = {'one': 1, 'two': 2}\" + '\\n')\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can repeat this for each line (the +'\\n' adds a newline if you want it). "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "+'\\n'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Finally, you need to close the file:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n f.close()\n</code>\n</pre>\n", "senID": 6}, {"text": ["You can also be slightly more clever and use with:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "with", "tag": "a", "pos": 0, "childList": [{"text": "with", "tag": "code"}], "childNum": 1, "href": "http://www.python.org/dev/peps/pep-0343/"}, {"text": "with", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n with open(\"filename.txt\", 'w') as f:\n   f.write(\"dict = {'one': 1, 'two': 2}\" + '\\n')\n   ### repeat for all desired lines\n</code>\n</pre>\n", "senID": 8}, {"text": ["This will automatically close the file, even if exceptions are raised."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["But I suspect this is not what you are asking..."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]]