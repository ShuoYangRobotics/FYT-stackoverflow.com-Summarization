[[{"text": ["If this is a regular CSV file you should not try to parse it yourself.", "Use the standard library csv module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv module", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}, {"text": ["Here is a short example from the docs:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import csv\nreader = csv.reader(open(\"some.csv\", \"rb\"))\nfor row in reader:\n    print row\n</code>\n</pre>\n", "senID": 2}], [{"text": ["There are at least two bugs in your program:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n curtime = time.strftime(\"%H\")\n...\nfor hour in range(int(s), int(f)):\n    nrt.append(hour)\n# this is an inefficient synonym for\n# nrt = range(int(s), int(f))\n\nif curtime in nrt:\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["First, curtime is a string, whereas nrt is a list of integers.", "Python is strongly typed, so the two are not interchangeable, and won't compare equal:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n '4' == 4 # False\n'4' in [3, 4, 5] # False\n</code>\n</pre>\n", "senID": 3}, {"text": ["This revised code addresses that issue, and is also more efficient than generating a list and searching for the current hour in it:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n cur_hour = time.localtime().tm_hour\nif int(s) &lt;= cur_hour &lt; int(f):\n    # You can \"chain\" comparison operators in Python\n    # so that a op1 b op2 c is equivalent to a op1 b and b op2c\n    ...\n</code>\n</pre>\n", "senID": 5}, {"text": ["A second issue that the above does not address is that your program will not behave properly if the hours wrap around midnight (e.g.", "s = 22 and f = 8)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Neither of these problems are necessarily related to \"the script only ends up looping through one of the lines\", but you haven't given us enough information to figure out why that might be.", "A more useful way to ask questions is to post a brief but complete code snippet that shows the behavior you are observing, along with sample input and the resulting error messages, if any (along with traceback)."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "brief", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "complete", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["Have you tried something more simple?", "Just to see how your file is actually read by Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n db = open(\"db.csv\")  \nfor line in db:  \n    print line\n</code>\n</pre>\n", "senID": 1}, {"text": ["There can be problem with format of your csv-file.", "That happens, for instance, when you open Unix file in Windows environment.", "In that case the whole file looks like single string as Windows and Unix have different line separators.", "So, I don't know certain cause of your problem, but offer to think in that direction."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Update:\nYour have multiple ways through the body of your loop: "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Shouldn't you place some print statement in the last else branch?"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "else", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also, what is exact output of your snippet?", "Is it \"They always want alerts, sending email\"?"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "\"They always want alerts, sending email\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I would check the logic in your conditionals.", "You looping construct should work. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Be explicit with what's in a row.", "Using 0, 1, 2...n is actually your bug, and it makes code very hard to read in the future for yourself or others.", "So let's use the handy tuple to show what we're expecting from a row.", "This sort of works like code as documentation"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n db = open(\"db.csv\")\nfor line in db.readlines():\n    recipient, start_hour, end_hour = line.split(\",\")\n    nrt = []\n    etc...\n</code>\n</pre>\n", "senID": 1}, {"text": ["This shows the reader of your code what you're expecting a line to contain, and it would have shown your bug to you the first time you ran it :)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You could go thro an existing well written IRC bot in Python Download"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Download", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://susam.in/downloads/pibby/pibby-0.0.3-alpha.tar.gz"}]}]]