[[{"text": ["It's safe to depend on the order of conditionals (Python reference here), specifically because of the problem you point out - it's very useful to be able to short-circuit evaluation that could cause problems in a string of conditionals."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python reference here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#boolean-operations-and-or-not"}]}, {"text": ["This sort of code pops up in most languages:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n IF exists(variable) AND variable.doSomething()\n    THEN ...\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Yes it is safe, it's explicitly and  very clearly defined in the language reference:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's perfectly safe and I do it all the time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I would go with the try/except, but it depends on what you know about the variable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you are expecting that the variable will exist most of the time, then a try/except is less operations.", "If you are expecting the variable to be None most of the time, then an IF statement will be less operations."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I may be being a little pedantic here, but I would say the best answer is"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if my_var is not None and 'something' in my_var:\n    #do something\n</code>\n</pre>\n", "senID": 1}, {"text": ["The difference being the explicit check for None, rather than the implicit conversion of my_var to True or False."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "my_var", "childNum": 0, "tag": "code", "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["While I'm sure in your case the distinction isn't important, in the more general case it would be quite possible for the variable to not be None but still evaluate to False, for example an integer value of 0 or an empty list."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So contrary to most of the other posters' assertions that it's safe, I'd say that it's safe as long as you're explicit.", "If you're not convinced then consider this very contrived class:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class Contrived(object):\n    def __contains__(self, s):\n        return True\n    def __nonzero__(self):\n        return False\n\nmy_var = Contrived()\nif 'something' in my_var:\n    print \"Yes the condition is true\"\nif my_var and 'something' in my_var:\n    print \"But this statement won't get reached.\"\nif my_var is not None and 'something' in my_var:\n    print \"Whereas this one will.\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["Yes I know that's not a realistic example, but variations do happen in real code, especially when None is used to indicate a default function argument."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It's not that simple.", "As a C# dude I am very used to doing something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if(x != null &amp;&amp; ! string.isnullorempty(x.Name))\n{\n   //do something\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["The above works great and is evaluated as expected.", "However in VB.Net the following would produce a result you were NOT expecting:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n If Not x Is Nothing **And** Not String.IsNullOrEmpty(x.Name) Then\n\n   'do something\n\nEnd If\n</code>\n</pre>\n", "senID": 3}, {"text": ["The above will generate an exception.", "The correct syntax should be"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n If Not x Is Nothing **AndAlso** Not String.IsNullOrEmpty(x.Name) Then\n\n   'do something\n\nEnd If\n</code>\n</pre>\n", "senID": 5}, {"text": ["Note the very subtle difference.", "This had me confused for about 10 minutes (way too long) and is why C# (and other) dudes needs to be very careful when coding in other languages."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]