[[{"text": ["Depending on what exactly you may be doing a namedTuple may be the best solution for your problem.", "Not enough information to say for sure."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "namedTuple", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#collections.namedtuple"}]}], [{"text": ["Having maintained a large codebase for many years that favored raw dicts over objects, my opinion is that if this codebase is going to be maintained by either A) another person or B) several people, you should start migrating toward real classes and OOP.", "Primarily, the fact that you can easily see what attributes a class instance is supposed to have by looking at the source or even interactively using dir() and other introspection techniques makes your code a lot easier to learn, modify, and maintain.", "Comprehension and debugging are just that much easier with classes that have intuitive names, well-defined properties, documentation, and readable source code as opposed to a giant mess of functions that take dicts as arguments, and transform them at runtime in myriad ways that can only be understood by reading the entire codebase.", "Tracebacks are also generally easier to read and decipher when classe are involved since you don't get generic low-level error messages."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dir()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["As further evidence, go look at mature and successful python projects.", "You'll see lots of OOP, classes, and documentation.", "Raw dicts, lists, sets, and tuples are great when appropriate (your data is truly simple) and for small projects and scripts, but the maintainability doesn't last past a certain project size.", "The notion of \"X is just a dict\" only survives while your concept of X is extremely simple."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["OOP (or any other design philosophy) is a strategy to simplify your code, not a religion you follow because it has lots of hits on google."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The goal of OOP is to factor out repeated patterns in your code: If you're often writing the same code to handle these dicts, you should factor these patterns out and write functions.", "Sometimes you'll have many of these functions, acting on the same data structure, then you group them together on a class."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So, should you use a class?", "Only if you think it can simplify your code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["My rule of thumb is that if you have functions which act on the dictionary, then it should probably be a class, and those functions should be methods."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As a (mostly ex)-perl programmer the passing the above style is very familiar.", "However the Python OO tools are much lighter weight and worth deploying earlier rather than later."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For example"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n { 'dog': 33, 'cat': 294 }\n</code>\n</pre>\n", "senID": 3}, {"text": ["Becomes something like"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class AnimalCount(object):\n    \"\"\"Some useful documentation you didn't have a place for before\"\"\"\n    def __init__(self, dog=0, cat=0):\n        self.dog = dog\n        self.cat = cat\n    def add_cat(self):\n        self.cat += 1\n    def add_dog(self):\n        self.dog += 1\n    def dog_eats_cat(self):\n        self.cat -= 1\n</code>\n</pre>\n", "senID": 5}], [{"text": ["dicts are fine for many uses.", "when you find you need to add some attributes, simply subclass a dict."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Using a dictionary is object oriented, since the dictionary is a class and your instance is an object.", "The reason to extend it with your own class shouldn't just be because you want to program OO, it should be because the dictionary class needs to have additional methods or attributes added to it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["We can't answer that question without more detail."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You can also nest dictionaries, so the key is a string and the value is another dictionary.", "That would at least allow you to pass the wrapper dictionary around instead of a whole bunch of separate dictionaries."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]