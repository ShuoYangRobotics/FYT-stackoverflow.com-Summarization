[[{"text": ["In case the objects are not the same instance, you need to implement the __eq__ method for python to be able to tell when 2 objects are actually equal.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__eq__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Of course that most library types, such as strings and lists already have __eq__ implemented, which may be the reason comparing titles works for you (are they strings?", ").  "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "__eq__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For further information see the python documentation.", "Here is a random example for __eq__."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "python documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#object.__eq__"}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"href": "http://www.google.com/codesearch/p?hl=en#1IKf2ZWr9OM/tools/third_party/python/Lib/sets.py&q=lang%3apython%20%22def%20__eq__%22&sa=N&cd=2&ct=rc", "text": "random example", "childNum": 0, "tag": "a", "childList": []}, {"text": "__eq__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["set intersection will do for that."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "set intersection", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sets.html#set-objects"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x=[1,2,3,4]\n&gt;&gt;&gt; y=[3,4,5,6]\n&gt;&gt;&gt; for i in set(x) &amp; set(y):\n...     print \"item %d in both lists\" %i\n...\nitem 3 in both lists\nitem 4 in both lists\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Assuming that your object has only a title attribute which is relevant for equality, you have to implement the __eq__ method as follows:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "title", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__eq__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class YourObject:\n    [...]\n    def __eq__(self, other):\n        return self.title == other.title\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course if you have more attributes that are relevant for equality, you must include those as well.", "You might also consider implementing __ne__ and __cmp__ for consistent behaviour."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "__ne__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__cmp__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You need to write an __eq__ function to define how to compare objects for equality.", "If you want sorting, then yo should have a __cmp__ function, and it makes the most sense to implement __eq__ in terms of __cmp__."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "__eq__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__cmp__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__eq__", "childNum": 0, "tag": "code", "childList": []}, {"text": "__cmp__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def __eq__(self, other):\n    return cmp(self, other) == 0\n</code>\n</pre>\n", "senID": 1}, {"text": ["You should probably also implement __hash__, and you definitely should if you plan to put your objects into a set or dictionary.", "The default __hash__ for objects is id(), which effectively makes all objects unique(i.e.", "uniqueness is not based on object contents)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "__hash__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__hash__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I wrote a base class/interface for a class that does this sort of equivalence comparison.", "You may find it useful:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Comparable(object):\n    def attrs(self):\n        raise Exception(\"Must be implemented in concrete sub-class!\")\n    def __values(self):\n        return (getattr(self, attr) for attr in self.attrs())\n    def __hash__(self):\n        return reduce(lambda x, y: 37 * x + hash(y), self.__values(), 0)\n    def __cmp__(self, other):\n        for s, o in zip(self.__values(), other.__values()):\n            c = cmp(s, o)\n            if c:\n                return c\n        return 0\n    def __eq__(self, other):\n        return cmp(self, other) == 0\n    def __lt__(self, other):\n        return cmp(self, other) &lt; 0\n    def __gt__(self, other):\n        return cmp(self, other) &gt; 0\n\nif __name__ == '__main__':\n    class Foo(Comparable):\n        def __init__(self, x, y):\n            self.x = x\n            self.y = y\n        def attrs(self):\n            return ('x', 'y')\n        def __str__(self):\n            return \"Foo[%d,%d]\" % (self.x, self.y)\n\n    def foo_iter(x):\n        for i in range(x):\n            for j in range(x):\n                yield Foo(i, j)\n\n    for a in foo_iter(4):\n        for b in foo_iter(4):\n            if a&lt;b: print \"%(a)s &lt; %(b)s\" % locals()\n            if a==b: print \"%(a)s == %(b)s\" % locals()\n            if a&gt;b: print \"%(a)s &gt; %(b)s\" % locals()\n</code>\n</pre>\n", "senID": 4}, {"text": ["The derived class must implement attrs() that returns a tuple or list of the object's attributes that contribute to its identity (i.e.", "unchanging attributes that make it what it is).", "Most importantly, the code correctly handles equivalence where there are multiple attributes, and this is old school code that is often done incorrectly."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "attrs()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Finding objects who appear in both lists:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l1 = [1,2,3,4,5]\nl2 = [3,4,5]\ncommon = set(l1).intersection(set(l2))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Combine this with the  __eq__ implementation on the object as the others suggested."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "__eq__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Try the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list1 = [item1, item2, item3]\nlist2 = [item3, item4, item5]\nfor item in list1:\n    if item in list2:\n        print \"item %s in both lists\" % item\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n matches = [x for x in listA if x in listB]\n</code>\n</pre>\n", "senID": 0}]]