[[{"text": ["linux specific:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n os.popen(\"ps -p %d -oppid=\" % os.getppid()).read().strip()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I don't think you can do this in a portable Python fashion.", "But there are two possibilities."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example the following script will get you your PID, PPID and PPPID, permissions willing:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #!/bin/bash\npid=$$\nppid=$(grep PPid: /proc/${pid}/status | awk '{print $2'})\npppid=$(grep PPid: /proc/${ppid}/status | awk '{print $2'})\necho ${pid} ${ppid} ${pppid}\nps -f -p \"${pid},${ppid},${pppid}\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["produces:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n 3269 3160 3142\nUID        PID  PPID  C STIME TTY          TIME CMD\npax       3142  2786  0 18:24 pts/1    00:00:00 bash\nroot      3160  3142  0 18:24 pts/1    00:00:00 bash\nroot      3269  3160  0 18:34 pts/1    00:00:00 /bin/bash ./getem.sh\n</code>\n</pre>\n", "senID": 4}, {"text": ["Obviously, you'd have to open those files with Python."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n from __future__ import with_statement\n\ndef pnid(pid=None, N=1):\n    \"Get parent (if N==1), grandparent (if N==2), ... of pid (or self if not given)\"\n    if pid is None:\n        pid= \"self\"\n\n    while N &gt; 0:\n        filename= \"/proc/%s/status\" % pid\n        with open(filename, \"r\") as fp:\n            for line in fp:\n                if line.startswith(\"PPid:\"):\n                    _, _, pid= line.rpartition(\"\\t\")\n                    pid= pid.rstrip() # drop the '\\n' at end\n                    break\n            else:\n                raise RuntimeError, \"can't locate PPid line in %r\" % filename\n        N-= 1\n\n    return int(pid) # let it fail through\n\n\n&gt;&gt;&gt; pnid()\n26558\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getppid()\n26558\n&gt;&gt;&gt; pnid(26558)\n26556\n&gt;&gt;&gt; pnid(N=2)\n26556\n&gt;&gt;&gt; pnid(N=3)\n1\n</code>\n</pre>\n", "senID": 0}], [{"text": ["By using psutil ( http://code.google.com/p/psutil ):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/psutil", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/psutil"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import psutil, os\n&gt;&gt;&gt; psutil.Process(os.getpid()).ppid\n2335\n&gt;&gt;&gt; psutil.Process(os.getpid()).parent\n&lt;psutil.Process (pid=2335, name='bash', cmdline='bash') at 140052120886608&gt;\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I do not think you can do this portably in the general case."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You need to get this information from the process list (e.g.", "through the ps command), which is obtained in a system-specific way."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "ps", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["If you have a POSIX-compliant 'ps' command, which allows you to specify the columns you want, like this:\nps -o pid,ppid"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ps -o pid,ppid", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You could then try:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport re\n\nps = os.popen(\"ps -o pid,ppid\")\nps.readline()    # discard header\nlines = ps.readlines()\nps.close\n\nprocs = [ re.split(\"\\s+\", line.strip()) for line in lines ]\n\nparent = {}\nfor proc in procs:\n    parent[ int(proc[0]) ] = int(proc[1])\n</code>\n</pre>\n", "senID": 2}, {"text": ["Now you can do:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n parent[ parent[pid] ]\n</code>\n</pre>\n", "senID": 4}, {"text": ["You could even write a function to list a process' ancestors:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def listp(pid):\n    print(pid)\n    if parent.has_key(pid):\n        listp( parent[pid] )\n</code>\n</pre>\n", "senID": 6}]]