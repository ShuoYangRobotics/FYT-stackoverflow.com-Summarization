[[{"text": ["shelve"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "shelve", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/shelve.html"}]}, {"text": ["Yes it does bring it all in."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Is that a problem?", "If it's not an actual problem, then stick with it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If it's a problem, what kind of problem do you have?", "Too slow?", "Too fast?", "Too colorful?", "Too much memory used?", "What problem do you have?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Just store it in a string like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &lt;entry1&gt;,&lt;entry2&gt;,&lt;entry3&gt;,...,&lt;entryN&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["If &lt;entry*&gt; contains ',' character, use some other delimiter like '\\t'.", "This is smaller in size than an equivalent pickled string."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "&lt;entry*&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you want to load it, just do:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n L = s.split(delimiter)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You could store the repr() of the dictionary and use that to re-create it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If it's taking a long time to load or using too much memory, you might need a database.", "There are many you might use; I would probably start with SQLite.", "Then your problem is \"reduced\" ;-) to simply formulating the right query to get what you need out of the database.", "This way you will only load what you need."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SQLite", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sqlite3.html"}]}], [{"text": ["I would use Lucene.", "Why reinvent the wheel?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Lucene", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://lucene.apache.org/pylucene/"}]}], [{"text": ["I am using anydmb for that purpose.", "Anydbm provides the same dictionary-like interface, except it allow only strings as keys and values.", "But this is not a constraint since you can use cPickle's loads/dumps to store more complex structures in the index."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]