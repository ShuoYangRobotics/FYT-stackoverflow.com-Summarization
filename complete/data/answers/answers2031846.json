[[{"text": ["[len(x) for x in a[0]] ?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[len(x) for x in a[0]]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = []\n&gt;&gt;&gt; a.append([])\n&gt;&gt;&gt; a[0].append([1,2,3,4,5])\n&gt;&gt;&gt; a[0].append([1,2,3,4])\n&gt;&gt;&gt; a[0].append([1,2,3])\n&gt;&gt;&gt; [len(x) for x in a[0]]\n[5, 4, 3]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["map(len, a[0])"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "map(len, a[0])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n [len(x) for x in a[0]]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This is known as List comprehension (click for more info and a description)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "List comprehension", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/native_data_types/mapping_lists.html"}]}, {"code": "<pre>\n<code>\n [len(l) for l in a[0]]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def lens(listoflists):\n  return [len(x) for x in listoflists]\n</code>\n</pre>\n", "senID": 0}, {"text": ["now, just call lens(a[0]) instead of your desired len(a[0][:]) (you can, if you insist, add that redundant [:], but that's just doing a copy for no purpose whatsoever -- waste not, want not;-)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "lens(a[0])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "len(a[0][:])", "childNum": 0, "tag": "code", "childList": []}, {"text": "[:]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["using the usual \"old school\" way"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n t=[]\nfor item in a[0]:\n    t.append(len(item))\nprint t\n</code>\n</pre>\n", "senID": 1}]]