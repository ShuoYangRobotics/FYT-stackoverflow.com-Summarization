[[{"text": ["I think the solution really depends on exactly what it is you want to do with the graph once you have managed to store it on disk/in database, and this is a little unclear in your question.", "However, a couple of things you might wish to consider are:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "if you just want to persist the graph without using any of the features or properties you might expect from an rdbms solution (such as ACID), then how about just pickling the objects into a flat file?  Very rudimentary, but like I say, depends on exactly what you want to achieve.", "tag": "none", "senID": 1}, {"text": ["ZODB"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": "if you wish to pursue RDF, there is an ", "tag": "none", "senID": 3}]}, {"text": ["There are some other persistence tools detailed on the python site which may be of interest, however I spent quite a while looking into this area last year, and ultimately I found there wasn't a native Python solution that met my requirements.  "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "persistence tools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/PersistenceTools"}]}, {"text": ["The most success I had was using MySQL with a custom ORM and I posted a couple of relevant links in an answer to this question.", "Additionally, if you want to contribute to an RDBMS project, when I spoke to someone from Open Query about a Graph storage engine for MySQL them seemed interested in getting active participation in their project."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "this question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1271124/does-mysql-5-have-procedures-for-managing-hierarchical-data/1271517#1271517"}, {"text": "a Graph storage engine for MySQL", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://openquery.com/products/graph-engine"}]}, {"text": ["Sorry I can't give a more definitive answer, but I don't think there is one...", "If you do start developing your own implementation, I'd be interested to keep up-to-date with how you get on."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["I have used both Jena, which is a Java framework, and Allegrograph (Lisp, Java, Python bindings).", "Jena has sister projects for storing graph data and has been around a long, long time.", "Allegrograph is quite good and has a free edition, I think I would suggest this cause it is easy to install, free, fast and you could be up and going in no time.", "The power you would get from learning a little RDF and SPARQL may very well be worth your while.", "If you know SQL already then you are off to a great start.", "Being able to query your graph using SPARQL would yield some great benefits to you.", "Serializing to RDF triples would be easy, and some of the file formats are super easy ( NT for instance ).", "I'll give an example.", "Lets say you have the following graph node-edge-node ids:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Jena", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jena.sourceforge.net/"}, {"text": "Allegrograph", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.franz.com/agraph/allegrograph/"}]}, {"text": ["these are already subject predicate object form so just slap some URI notation on it, load it in the triple store and query at-will via SPARQL.", "Here it is in NT format:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Now query for all nodes two hops from node 1:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This would of course yield &lt;http://mycompany.com#5>."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Another candidate would be Mulgara, written in pure Java.", "Since you seem more interested in Python though I think you should take a look at Allegrograph first."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Mulgara", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.mulgara.org/"}]}], [{"text": ["Hmm, maybe you should take a look at CubicWeb"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CubicWeb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cubicweb.org"}]}], [{"text": ["Regarding Neo4j, did you notice the existing Python bindings?", "As for the disk storage, take a look at this thread on the mailing list."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Python bindings", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.neo4j.org/content/Python"}, {"text": "this thread", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.mail-archive.com/user@lists.neo4j.org/msg01128.html"}, {"href": "http://neo4j.org/community/list/", "text": "mailing list", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["For graphdbs in Python, the Hypergraph Database Management System project was recently started on SourceForge by Maurice Ling."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Hypergraph Database Management System", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/hygdas/"}, {"href": "http://maurice.vodien.com/", "text": "Maurice Ling", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Greetings from your Serius Cybernetics Intelligent Agent!", "See \"Programming the Semantic Web\" (http://www.amazon.com/Programming-Semantic-Web-Toby-Segaran/dp/0596153813) and (http://semprog.com/content/).", "See http://semprog.com/content/tools/ -RDFLib Python Library for RDF.", "RDFLib may be found at http://www.rdflib.net/\nhttp://code.google.com/p/rdflib/wiki/IntroStore"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://semprog.com/content/tools/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://semprog.com/content/tools/"}, {"text": "http://www.rdflib.net/", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.rdflib.net/"}]}], [{"text": ["Redland (http://librdf.org) is probably the solution you're looking for.", "It has Python bindings too."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]