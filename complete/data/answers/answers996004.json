[[{"text": ["This works just fine starting with python 2.6, (2.5-friendly implementation ofitertools.permutationsis available as well):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "2.5-friendly implementation ofitertools.permutationsis available as well", "tag": "a", "pos": 0, "childList": [{"text": "itertools.permutations", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html#itertools.permutations"}, {"text": "itertools.permutations", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import itertools\n&gt;&gt;&gt; boxes = 3\n&gt;&gt;&gt; balls = 8\n&gt;&gt;&gt; rng = list(range(balls + 1)) * boxes\n&gt;&gt;&gt; set(i for i in itertools.permutations(rng, boxes) if sum(i) == balls)\n{(0, 1, 7), (3, 1, 4), (0, 4, 4), (1, 0, 7), (4, 0, 4), (3, 0, 5), (1, 2, 5), (1, 7, 0), (0, 8, 0), (1, 4, 3), (6, 0, 2), (4, 3, 1), (3, 3, 2), (0, 5, 3), (5, 3, 0), (5, 1, 2), (2, 4, 2), (4, 4, 0), (3, 2, 3), (7, 1, 0), (5, 2, 1), (0, 6, 2), (6, 1, 1), (2, 2, 4), (1, 1, 6), (0, 2, 6), (7, 0, 1), (2, 1, 5), (0, 0, 8), (2, 0, 6), (2, 6, 0), (5, 0, 3), (2, 5, 1), (1, 6, 1), (8, 0, 0), (4, 1, 3), (6, 2, 0), (3, 5, 0), (0, 3, 5), (4, 2, 2), (1, 3, 4), (0, 7, 1), (1, 5, 2), (2, 3, 3), (3, 4, 1)}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Pseudocode:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Enumerate(Balls, Boxes)\n  if Boxes&lt;=0 \n    Error\n  elseif Boxes=1 \n    Box[1] = Balls\n    PrintBoxes\n  else\n    forall b in 0..Balls \n      Box[Boxes] = b\n      Enumerate(Balls-b, Boxes-1)\n    endfor\n  endif\nend\n</code>\n</pre>\n", "senID": 1}, {"text": ["Explanation"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Start at the first box, if there are no boxes, complain and quit.", "If it is the last box to be filled, drop all remaining balls and show the result.", "If there are more boxes, first add 0 balls and repeat the procedure with the other boxes.", "Then add 1, ball 2 balls until there are no balls left."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["To show, that the algorithm works, I give an example with real values, 3 balls and 2 boxes."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["We have an array of boxes called Box, and each box can hold any number of balls (the value).", "PrintBoxes prints the current value of the boxes."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n Box = (0,0)\nEnumerate(3, 2)\n  b=0\n  Box = (0,0)\n  Enumerate(3,1)\n    Box = (3,0) \n    Print!\n  b=1 \n  Box = (0,1)\n  Enumerate(2,1)\n    Box = (2,1)\n    Print!\n  b=2\n  Box = (0,2)\n  Enumerate(1,1)\n    Box = (1,2)\n    Print!\n  b=3   \n  Box = (0,3)\n  Enumerate(0,1)\n    Box = (0,3)\n    Print!\n\n Output:\n\n (3,0)\n (2,1)\n (1,2)\n (0,3)\n\n Which are all the combinations.\n</code>\n</pre>\n", "senID": 6}, {"text": ["Another example with 3 boxes and 3 balls:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n Box = (0,0,0)\nEnumerate(3, 3)\n  b=0\n  Box = (0,0,0)\n  Enumerate(3,2)\n    b=0\n    Box = (0,0,0)\n    Enumerate(3,1)\n      Box = (3,0,0)\n    b=1\n    Box = (0,1,0)\n    Enumerate(2,1)\n      Box = (2,1,0)\n    b=2\n    Box = (0,2,0)\n    Enumerate(1,1)\n      Box = (1,2,0)\n    b=3\n    Box = (0,3,0)\n    Enumerate(0,1)\n      Box = (0,3,0)\n  b=1 \n  Box = (0,0,1)\n  Enumerate(2,2)\n    b=0\n    Box = (0,0,1)\n    Enumerate(2,1)\n      Box = (2,0,1)\n    b=1\n    Box = (0,1,1)\n    Enumerate(1,1)\n      Box = (1,1,1)\n    b=2\n    Box = (0,2,1)\n    Enumerate(0,1)\n      Box = (0,2,1)\n  b=2\n  Box = (0,0,2)\n  Enumerate(1,2)\n    b=0\n    Box = (0,0,2)\n    Enumerate(1,1)\n      Box = (1,0,2)\n    b=1\n    Box = (0,1,2)\n    Enumerate(0,1)\n      Box = (0,1,2)\n  b=3   \n  Box = (0,0,3)\n  Enumerate(0,2)\n    b=0\n    Box = (0,0,3)\n    Enumerate(0,1)\n      Box = (0,0,3)\n\nOutput\n(3,0,0)\n(2,1,0)\n(1,2,0)\n(0,3,0)\n(2,0,1)\n(1,1,1)\n(0,2,1)\n(1,0,2)\n(0,1,2)\n(0,0,3)\n</code>\n</pre>\n", "senID": 8}], [{"text": ["You can define a recursive generator which creates a sub-generator for each 'for loop' which you wish to nest, like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "generator", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#generators"}]}, {"code": "<pre>\n<code>\n def ballsAndBoxes(balls, boxes, boxIndex=0, sumThusFar=0):\n    if boxIndex &lt; (boxes - 1):\n        for counter in xrange(balls + 1 - sumThusFar):\n            for rest in ballsAndBoxes(balls, boxes,\n                                      boxIndex + 1,\n                                      sumThusFar + counter):\n                yield (counter,) + rest\n    else:\n        yield (balls - sumThusFar,)\n</code>\n</pre>\n", "senID": 1}, {"text": ["When you call this at the top level, it will take only a 'balls' and 'boxes' argument, the others are there as defaults so that the recursive call can pass different things.", "It will yield tuples of integers (of length 'boxes') that are your values."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["To get the exact formatting you specified at the top of this post, you could call it something like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n BALLS = 8\nBOXES = 3\nprint '\\t',\nfor box in xrange(1, BOXES + 1):\n    print '\\tbox_%d' % (box,),\nprint\nfor position, value in enumerate(ballsAndBoxes(BALLS, BOXES)):\n    print 'case-%d\\t\\t%s' % (position + 1, \n                             \"\\t\".join((str(v) for v in value)))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["See itertools.combinations_with_replacement in 3.1 for an example written in python.", "Additionally, it's common in combinatorics to transform a combination-with-replacement problem into the usual combination-without-replacement problem, which is already builtin in 2.6 itertools.", "This has the advantage of not generating discarded tuples, like solutions based on product or permutation.", "Here's an example using the standard (n, r) terminology, which would be (A, N) in your example."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools.combinations_with_replacement", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/py3k/library/itertools.html#itertools.combinations%5Fwith%5Freplacement"}]}, {"code": "<pre>\n<code>\n import itertools, operator\ndef combinations_with_replacement_counts(n, r):\n    size = n + r - 1\n    for indices in itertools.combinations(range(size), n-1):\n        starts = [0] + [index+1 for index in indices]\n        stops = indices + (size,)\n        yield tuple(map(operator.sub, stops, starts))\n\n&gt;&gt;&gt; list(combinations_with_replacement_counts(3, 8))\n[(0, 0, 8), (0, 1, 7), (0, 2, 6), (0, 3, 5), (0, 4, 4), (0, 5, 3), (0, 6, 2), (0, 7, 1), (0, 8, 0), (1, 0, 7), (1, 1, 6), (1, 2, 5), (1, 3, 4), (1, 4, 3), (1, 5, 2), (1, 6, 1), (1, 7, 0), (2, 0, 6), (2, 1, 5), (2, 2, 4), (2, 3, 3), (2, 4, 2), (2, 5, 1), (2, 6, 0), (3, 0, 5), (3, 1, 4), (3, 2, 3), (3, 3, 2), (3, 4, 1), (3, 5, 0), (4, 0, 4), (4, 1, 3), (4, 2, 2), (4, 3, 1), (4, 4, 0), (5, 0, 3), (5, 1, 2), (5, 2, 1), (5, 3, 0), (6, 0, 2), (6, 1, 1), (6, 2, 0), (7, 0, 1), (7, 1, 0), (8, 0, 0)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["if you want to use your own function answer by Gamecat may work\nelse\neither use http://probstat.sourceforge.net/ , it is very fast (written in c)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://probstat.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://probstat.sourceforge.net/"}]}, {"text": ["or itertools in python 2.6"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you simply want to know the number of possibilities, instead of listing them, then the following formula will work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Where aCb (a choose b) is the number of ways of choosing combinations of size b from a set of size a.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["denotes the factorial ie 5!=5*4*3*2*1, n!=n*(n-1)*(n-2)*...*3*2*1.", "Sorry if I'm teaching you how to suck eggs."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In python:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from math import factorial as f\nballs=N\nboxes=A\ndef p(balls,boxes):\n    return f(balls+boxes-1)/f(balls)/f(boxes-1)\np(3,2)\n  4\np(3,3)\n  10\n</code>\n</pre>\n", "senID": 4}, {"text": ["which agrees with Gamecat's examples."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["To explain why the formula works, let's look at five balls and 3 boxes.", "Denote balls as asterisks.", "We want to place 3-1=2 dividing lines to split the balls into 3 compartments."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["For example, we could have"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n * | * | *   *   *        (1,1,3)\n*   * | *   *   * |      (2,3,0)\n*   *   *   *   * |  |   (5,0,0)\n</code>\n</pre>\n", "senID": 8}, {"text": ["7 symbols can be ordered in 7!=5040 possible ways.", "Since all the balls are the same, we aren't worried about the order of the balls, so we divide by 5!.", "Similarly, we aren't worried about the order of the dividing lines so we divide by 2!.", "This gives us 7C5=7!/(5!*2!", ")=21 possibilities."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["The Wikipedia article on Combinations has a section \"Number of combinations with repetition\" which is the counting combinations question rephrased in a tastier way (donuts and pieces of fruit instead of balls)."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "Combinations", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Combination"}]}, {"text": ["If you want to list the combinations, beware how quickly the number grows.", "For 20 balls and  9 boxes, there are over 3 million possibilities!"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["edit: my previous answer compared this problem to integer partitions to show how quickly the number of possibilities grows.", "My new answer is more relevant to the original question."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}]]