[[{"text": ["Not easily.", "You'd have to write a custom serializer that hooks into the C sre implementation of the Python regex engine.", "Any performance benefits would be vastly outweighed by the time and effort required."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sre", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["First, have you actually profiled the code?", "I doubt that compiling regexes is a significant part of the application's run-time.", "Remember that they are only compiled the first time the module is imported in the current execution -- thereafter, the module and its attributes are cached in memory."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you have a program that basically spawns once, compiles a bunch of regexes, and then exits, you could try re-engineering it to perform multiple tests in one invocation.", "Then you could re-use the regexes, as above."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Finally, you could compile the regexes into C-based state machines and then link them in with an extension module.", "While this would likely be more difficult to maintain, it would eliminate regex compilation entirely from your application."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Note that each module initializes itself only once during the life of an app, no matter how many times you import it.", "So if you compile your expressions at the module's global scope (ie.", "not in a function) you should be fine."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["First of all, this is a clear limitation in the python re module.", "It causes a limit how much and how big regular expressions are reasonable.", "The limit is bigger with long running processes and smaller with short lived processes like command line applications."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some years ago I did look at it and it is possible to dig out the compilation result, pickle it and then unpickle it and reuse it.", "The problem is that it requires using the sre.py internals and so won't probably work in different python versions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I would like to have this kind of feature in my toolbox.", "I would also like to know, if there are any separate modules that could be used instead."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The shelve module appears to work just fine:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "shelve", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-shelve.html"}]}, {"code": "<pre>\n<code>\n import re\nimport shelve\na_pattern = \"a.*b\"\nb_pattern = \"c.*d\"\na = re.compile(a_pattern)\nb = re.compile(b_pattern)\n\nx = shelve.open('re_cache')\nx[a_pattern] = a\nx[b_pattern] = b\nx.close()\n\n# ...\nx = shelve.open('re_cache')\na = x[a_pattern]\nb = x[b_pattern]\nx.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can then make a nice wrapper class that automatically handles the caching for you so that it becomes transparent to the user... an exercise left to the reader."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Hum,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Doesn't shelve use pickle ?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Anyway, I agree with the previous anwsers.", "Since a module is processed only once, I doubt compiling regexps will be your app bottle neck.", "And Python re module is wicked fast since it's coded in C :-)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["But the good news is that Python got a nice community, so I am sure you can find somebody currently hacking just what you need."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I googled 5 sec and found : http://home.gna.org/oomadness/en/cerealizer/index.html."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://home.gna.org/oomadness/en/cerealizer/index.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://home.gna.org/oomadness/en/cerealizer/index.html"}]}, {"text": ["Don't know if it will do it but if not, good luck in you research :-)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Open /usr/lib/python2.5/re.py and look for \"def _compile\".", "You'll find re.py's internal cache mechanism. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's possible to place each regex (or group of regexs) into a separate file and then dynamically import the file that you need using the imp module.", "I doubt that it scales very well but it could be what you need."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]