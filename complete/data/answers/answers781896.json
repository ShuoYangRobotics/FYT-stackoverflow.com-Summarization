[[{"text": ["Sleep involves no overhead.", "The Linux OS uses a very simple signal to wake a sleeping process."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What you're showing is the \"busy-waiting\" design pattern."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To eliminate overhead, you want to be woken ONLY when there's work to do."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Ways to do this."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Of these, waiting on a read is perhaps easiest.", "Reading from a pipe or a socket is what you want to do.  "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I'm guessing that you have a \"multiple-writers-single-reader\" design pattern.", "In this case, there are two candidate solutions."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["In these two cases, you're not sleeping --  you're waiting for I/O's to complete."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Instead of sleeping for 15 seconds, it might be better to have a callback which restarts your job when new files arrive."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Process available files", "tag": "none", "senID": 1}, {"text": "Check for new files every 60 seconds or whatever interval you choose", "tag": "none", "senID": 2}, {"text": "When a new file arrives, process it and any others which may have arrived since the last interval", "tag": "none", "senID": 3}]}], [{"text": ["Why not just use a cron job to run a script every minute or so?", "At least you are not depending on your own loop to be continuously running in the background."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If it takes (and these figures are examples) 20 seconds for a file to arrive and 5 seconds for you to process it, what is the harm in your process waiting for, on average, another 7.5 seconds before it even detects that the file is there?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A sleeping process should have as close to zero impact on the CPU as it is possible to get."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So no, I would not be concerned about this aspect at all."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The one thing you should be concerned about is how to restart the process automatically if it fails.", "I would run a cron job every 5 minutes (your choice of actual frequency) to kill off the old copy (politely, and only if it's running) and then start a new one.", "That way, there'll only be a 5-minute downtime at most if something goes wrong."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I say politely because the old one may be in the middle of processing files and you should not interrupt that unless it's recoverable."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["As an alternative you can lower the priority of your process.", "(I'm only familiar with the windows method)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["On Windows:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def setpriority(pid=None,priority=1):\n    \"\"\" Set The Priority of a Windows Process.  Priority is a value between 0-5 where\n        2 is normal priority.  Default sets the priority of the current\n        python process but can take any valid process ID. \"\"\"\n\n    import win32api,win32process,win32con\n\n    priorityclasses = [win32process.IDLE_PRIORITY_CLASS,\n                       win32process.BELOW_NORMAL_PRIORITY_CLASS,\n                       win32process.NORMAL_PRIORITY_CLASS,\n                       win32process.ABOVE_NORMAL_PRIORITY_CLASS,\n                       win32process.HIGH_PRIORITY_CLASS,\n                       win32process.REALTIME_PRIORITY_CLASS]\n    if pid == None:\n        pid = win32api.GetCurrentProcessId()\n    handle = win32api.OpenProcess(win32con.PROCESS_ALL_ACCESS, True, pid)\n    win32process.SetPriorityClass(handle, priorityclasses[priority])\n</code>\n</pre>\n", "senID": 2}, {"text": ["from:\nhttp://code.activestate.com/recipes/496767/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://code.activestate.com/recipes/496767/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/496767/"}]}], [{"text": ["This has the potential to hammer your CPU, even when there is nothing to process."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Edit: Actually sleep() takes an argument as a number of seconds, not milliseconds so I don't think the CPU is going to be a problem.", "Still, perhaps you could use a cron job to schedule something like this."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "sleep()", "tag": "a", "pos": -1, "childList": [{"text": "sleep()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/time.html#time.sleep"}, {"text": "sleep()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Besides the cost of hammering your cpu, there is the cost of the morejobs() call.", "You can mitigate by using a higher value for sleep(), or you can use some sort of mailbox that receives requests and then fires the zipfile() operation."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "morejobs()", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "sleep()", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "zipfile()", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["It is normal for some operations to have a background thread scheduled that temporarily checks for something.", "In this case the best is to use sensible values for sleep()."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sleep()", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["\"A thousand reasoned opinions are worth one measurement\". "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Just try it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]