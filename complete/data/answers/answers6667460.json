[[{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os.path\np = os.path.abspath(__file__)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The __file__ variable will contain the location of the individual Python file."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__file__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If the script is somewhere in your path, then yes, you can strip it from sys.argv"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python                                                           \nimport sys\nimport os\nprint sys.argv\nprint os.path.split(sys.argv[0])\n\ndan@somebox:~$ test.py\n['/home/dan/bin/test.py']\n('/home/dan/bin', 'test.py')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As others have noted, you can use __file__ attribute of module objects."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__file__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Although, I'd like to note that in general, not-Python, case, you could've use sys.argv[0] for the same purpose.", "It's a common convention among different shells to pass full absolute pathname of the program through argv[0]."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "sys.argv[0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "argv[0]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Place this in a file and then run it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import inspect, os.path\n\ndef codepath(function):\n  path = inspect.getfile(function)\n  if os.path.isabs(path): return path\n  else: return os.path.abspath(os.path.join(os.getcwd(), path))\n\nprint codepath(codepath)\n</code>\n</pre>\n", "senID": 1}, {"text": ["My tests show that this prints the absolute path of the Python script whether it is run with an absolute path or not.", "I also tested it successfully when importing it from another folder.", "The only requirement is that a function or equivalent callable be present in the file."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n import sys\nprint sys.path[0]\n</code>\n</pre>\n", "senID": 0}, {"text": ["This will give you the full path to your script every time, whereas __file__ will give you the path that was used to execute the script.", "'sys.path' always has the path to the script as the first element, which allows one to always be able to import other .py files in the same directory. "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "__file__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'sys.path'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]