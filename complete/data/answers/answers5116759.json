[[{"code": "<pre>\n<code>\n import re\nraw_text='Spain (BCN)'\nformatted_text = re.search(r\"\"\"\n    (?&lt;=\\() # assert that the preceding character is a (\n    \\w{3}   # match three alphanumeric characters\n    (?=\\))  # assert that the following character is a )\"\"\", \n    raw_text, re.VERBOSE).group(0)\n</code>\n</pre>\n", "senID": 0}, {"text": ["would be another way of doing it (with a regular expression)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you are certain to have this format why not just use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s.strip()[-4: -1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, it does not check the format of your string.", "If you want to do that, use the re module (regular expressions)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Hope this helps,"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Dimi"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Yip there sure is."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n raw_text='Spain (BCN)  '\nprint raw_text.rstrip(\" \")[-4:-1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Use rstrip to remove trailing spaces, eg trim.", "Then simply go back 4 chars, to -1 chars."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["splicing a string is [start:stop] and you are stopping on len(raw_text)-1 - always the second-last character.", "If you know the code continues to the end of the string, and as you've said it is always three characters long, then:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "[start:stop]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "len(raw_text)-1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n formatted_text=raw_text[-4:-1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["will extract the three characters that start 4 from the end of the string"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; raw_text='Spain (BCN)'\n&gt;&gt;&gt; formatted_text=raw_text[raw_text.index('(')+1:len(raw_text)-1]\n&gt;&gt;&gt; formatted_text\n'BCN'\n&gt;&gt;&gt; raw_text[raw_text.index('(')+1:-1]\n'BCN'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}, {"text": ["What an allegedly non-brittle does:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; str = 'abcdefgh'\n&gt;&gt;&gt; str[str.find('(')+1:str.find(')')]\n'abcdefg'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}], [{"text": ["No, this is good enough.", "You could make a function that accepts a string and returns it formatted."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also, don't go with len(raw_text)-1, because that will fail on bad data like \"Italy (BGN) \"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def get_code(str):\n     return str[str.find('(')+1:str.find(')')]\n\nformatted_text = get_code(raw_text)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You can use a regex"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.search('\\((.{3})\\)', 'Spain (BCN)').group(0)\n'BCN'\n</code>\n</pre>\n", "senID": 1}]]