[[{"text": ["I think you're misunderstanding the concept of a \"non-capturing group\".", "The text matched by a non-capturing group still becomes part of the overall regex match."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Both the regex (?", ":aaa)(_bbb) and the regex (aaa)(_bbb) return aaa_bbb as the overall match.", "The difference is that the first regex has one capturing group which returns _bbb as its match, while the second regex has two capturing groups that return aaa and _bbb as their respective matches.", "In your Python code, to get _bbb, you'd need to use group(1) with the first regex, and group(2) with the second regex."], "childNum": 9, "tag": "p", "senID": 1, "childList": [{"text": "(?:aaa)(_bbb)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "(aaa)(_bbb)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "aaa_bbb", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "_bbb", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "aaa", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "_bbb", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "_bbb", "childNum": 0, "tag": "code", "childList": []}, {"text": "group(1)", "childNum": 0, "tag": "code", "childList": []}, {"text": "group(2)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The main benefit of non-capturing groups is that you can add them to a regex without upsetting the numbering of the capturing groups in the regex.", "They also offer (slightly) better performance as the regex engine doesn't have to keep track of the text matched by non-capturing groups."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you really want to exclude aaa from the overall regex match then you need to use lookaround.", "In this case, positive lookbehind does the trick: (?&lt;=aaa)_bbb.", "With this regex, group() returns _bbb in Python.", "No capturing groups needed."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "aaa", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "lookaround", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.regular-expressions.info/lookaround.html"}, {"text": "(?&lt;=aaa)_bbb", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "group()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "_bbb", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["My recommendation is that if you have the ability to use capturing groups to get part of the regex match, use that method instead of lookaround."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["group() and group(0) will return the entire match.", "Subsequent groups are actual capture groups."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "group()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "group(0)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print (re.match(r\"(?:aaa)(_bbb)\", string1).group(0))\naaa_bbb\n&gt;&gt;&gt; print (re.match(r\"(?:aaa)(_bbb)\", string1).group(1))\n_bbb\n&gt;&gt;&gt; print (re.match(r\"(?:aaa)(_bbb)\", string1).group(2))\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in ?\nIndexError: no such group\n</code>\n</pre>\n", "senID": 1}], [{"text": ["TFM:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "TFM", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#match-objects"}]}, {"text": ["class re.MatchObject"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["group([group1, ...])"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Returns one or more subgroups of the match.", "If there is a single argument, the result is a single string; if there are multiple arguments, the result is a tuple with one item per argument.", "Without arguments, group1 defaults to zero (the whole match is returned).", "If a groupN argument is zero, the corresponding return value is the entire matching string."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Without arguments, group1 defaults to zero (the whole match is returned). If a groupN argument is zero, the corresponding return value is the entire matching string.", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}], [{"text": ["Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print(re.match(r\"(?:aaa)(_bbb)\", string1).group(1))\n</code>\n</pre>\n", "senID": 1}, {"text": ["group() is same as group(0) and Group 0 is always present and it's the whole RE match."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "group()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "group(0)", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}, {"text": "whole RE", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["You have to specify group(1) to get just the part captured by the parenthesis (_bbb in this case)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "group(1)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "_bbb", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["group() without parameters will return the whole string the complete regular expression matched, no matter if some parts of it were additionally captured by parenthesis or not."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "group()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Thanks for answers, so I cannot just simply do like\nregex: \"(?:a.*)b.*(?:c.*)d.", "*\" for returning matching content of \"b.*d.", "*\"\n\nInstead, I have to\n\"(?:a.*)(b.*)(?:c.*)(d.", "*)\" and combine group(1) + group(2) to get \"b.*d.", "*\" "], "childNum": 8, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "\"(?:a.*)b.*(?:c.*)d.*\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "\"b.*d.*\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 3, "childList": []}, {"text": "\"(?:a.*)(b.*)(?:c.*)(d.*)\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "\"b.*d.*\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["correct?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["AFAIK, the look around thing (?&lt;=...) has limitation of fixed length.", ":("], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Use the groups method on the match object instead of group.", "It returns a list of all capture buffers.", "The group method with no argument is returning the entire match of the regular expression."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]