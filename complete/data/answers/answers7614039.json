[[{"text": ["Some general help:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Instead of"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n fin = open('example.txt')\n</code>\n</pre>\n", "senID": 2}, {"text": ["You should use"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n with open('example.txt', 'r') as fin:\n</code>\n</pre>\n", "senID": 4}, {"text": ["then indent the rest of the code, but your version will work."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n L = []\nfor word in fin:\n</code>\n</pre>\n", "senID": 6}, {"text": ["It doesn't iterate by word, but by line.", "If there is one word per line, each will still have a newline at the end, so you should do"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "line", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n word = word.rstrip()\n</code>\n</pre>\n", "senID": 8}, {"text": ["to clear any whitespace after the end of the word.", "If you actually want to do this one word at a time, you need two for loops, like:"], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "two", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for line in fin:\n    for word in line.split():\n</code>\n</pre>\n", "senID": 10}, {"text": ["and then put the logic inside the inner loop."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n if len(word) &gt;= 5:\n    L.append(word)\n</code>\n</pre>\n", "senID": 12}, {"text": ["With stripping the whitespace, that will add any word five letters or longer to the list."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n if word != word:\n    L.append(word)\n</code>\n</pre>\n", "senID": 14}, {"text": ["word will always be equal to word, so this does nothing.", "If you want to eliminate duplicates, make L a set() and use L.add(word) instead of L.append(word) for words you want to add to the list (assuming order doesn't matter)."], "childNum": 6, "tag": "p", "senID": 15, "childList": [{"text": "word", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "always", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "L", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "set()", "childNum": 0, "tag": "code", "childList": []}, {"text": "L.add(word)", "childNum": 0, "tag": "code", "childList": []}, {"text": "L.append(word)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n if word[-2:-1] != 'xx':\n    L.append(word)\n</code>\n</pre>\n", "senID": 16}, {"text": ["If you're trying to see if it ends with 'xx', use"], "childNum": 1, "tag": "p", "senID": 17, "childList": [{"text": "'xx'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if not word.endswith('xx'):\n</code>\n</pre>\n", "senID": 18}, {"text": ["instead, or word[-2:] without the -1, otherwise you're just comparing to the next-to-last-letter rather than the whole thing."], "childNum": 2, "tag": "p", "senID": 19, "childList": [{"text": "word[-2:]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "-1", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n if word == word.lower():\n    L.append(word)\n</code>\n</pre>\n", "senID": 20}, {"text": ["This adds the word to the list if the word is all lowercase."], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"text": ["Keep in mind, all of theseiftests will be applied to every word, so you will add the word to the list once for each test it passes.", "If you only want to add it once, you can use elif instead of if for all the tests except the first one."], "childNum": 5, "tag": "p", "senID": 22, "childList": [{"text": "all of theseiftests will be applied to every word", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "if", "tag": "code"}]}, {"text": "if", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "once for each test it passes", "childNum": 0, "tag": "strong", "childList": []}, {"text": "elif", "childNum": 0, "tag": "code", "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Your comments also imply you're somehow \"getting rid\" of words by adding them to the list -- you're not.", "You're keeping the ones you add to the list, and the rest just go away; you're not changing the file in any way."], "childNum": 1, "tag": "p", "senID": 23, "childList": [{"text": "keeping", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n import re\n\ndef by_words(it):\n    pat = re.compile('\\w+')\n    for line in it:\n        for word in pat.findall(line):\n            yield word\n\ndef keepers(it):\n     words = set()\n     for s in it:\n         if len(s)&gt;=5 and s==s.lower() and not s.endswith('xx'):\n             words.add(s)\n     return list(words)\n</code>\n</pre>\n", "senID": 0}, {"text": ["To get 5 words from War and Peace:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from urllib import urlopen\nsource = urlopen('http://www.gutenberg.org/ebooks/2600.txt.utf8')\nprint keepers(by_words(source))[:5]\n</code>\n</pre>\n", "senID": 2}, {"text": ["prints "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ['raining', 'divinely', 'hordes', 'nunnery', 'parallelogram']\n</code>\n</pre>\n", "senID": 4}, {"text": ["This does not take much memory.", "War and Peace only had 14,361 words that fit your criteria.", "The iterators work on very small chunks."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I did your homework for you, i was bored.", "there might be a bug."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n homework_a_plus = []\n#open text document\nwith open('example.txt', 'r') as fin:\n    for word in fin:\n        #get rid of words that show up more than once\n        if word in homework_a_plus:\n            continue\n        #get rid of words that aren't all lowercase\n        for c in word:\n            if c.isupper():\n                continue\n        #get rid of words that end in substring 'xx'\n        if word[-2:] == 'xx':\n            continue\n        #get rid of words that are less than 5 characters\n        if len(word) &lt; 5:\n            continue\n        homework_a_plus.append(word)\nprint homework_a_plus\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: like Wooble said, your logic is way off in the code you provided.", "Compare your code with mine and I think you will understand why yours has a problem."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n words = [inner for outer in [line.split() for line in open('example.txt')] for inner in outer]\n\nfor word in words[:]:\n    if words.count(word) &gt; 1 or word.lower() != word or word[-2:] == 'xx' or len(word) &lt; 5:\n        words.remove(word)\nprint words\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you want to write this more as a filter...", "I would take a slightly different approach."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fin = open('example.txt','r')\nseenList = []\nfor line in fin:\n    for word in line.split():\n        if word in seenList: continue\n        if word[-2:] == 'xx': continue\n        if word.lower() != word: continue\n        if len(word) &lt; 5: continue\n        seenList.append(word)\n        print word\n</code>\n</pre>\n", "senID": 1}, {"text": ["This has the side benefit of showing you each line as it's output.", "If you want to output to a file instead, modify the print word line appropriately, or use shell redirection."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "print word", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["EDIT: If you really don't want to print ANY duplicated words (the above just skips every instance after the first), than something like this works..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n fin = open('example.txt','r')\nseenList = []\nfor line in fin:\n    for word in line.split():\n        if word in seenList: \n            seenList.remove(word)\n            continue\n        if word[-2:] == 'xx': continue\n        if word.lower() != word: continue\n        if len(word) &lt; 5: continue\n        seenList.append(word)\n\nprint seenList\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Do it the easy way with a regex:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\nli = ['bubble', 'iridescent', 'approxx', 'chime',\n      'Azerbaidjan', 'moon', 'astronomer', 'glue', 'bird',\n      'plan_ary', 'suxx', 'moon', 'iridescent', 'magnitude',\n      'Spain', 'through', 'macGregor', 'iridescent', 'ben',\n      'glomoxx', 'iridescent', 'orbital']\n\nreg1 = re.compile('(?!\\S*?[A-Z_]\\S*(?=\\Z))'\n                 '\\w{5,}'\n                 '(?&lt;!xx)\\Z')\n\nprint set(filter(reg1.match,li))\n\n# result:\n\nset(['orbital', 'astronomer', 'magnitude', 'through', 'iridescent', 'chime', 'bubble'])\n</code>\n</pre>\n", "senID": 1}, {"text": ["If the data aren't in a list but in a string:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ss = '''bubble iridescent approxx chime\nAzerbaidjan moon astronomer glue bird\nplan_ary suxx moon iridescent magnitude\nSpain through macGregor iridescent ben\nglomoxx iridescent orbital'''\n\nprint set(filter(reg1.match,ss.split()))\n</code>\n</pre>\n", "senID": 3}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n reg2 = re.compile('(?:(?&lt;=\\s)|(?&lt;=\\A))'\n                 '(?!\\S*?[A-Z_]\\S*(?=\\s|\\Z))'\n                 '\\w{5,}'\n                 '(?&lt;!xx)'\n                 '(?=\\s|\\Z)')\n\nprint set(reg2.findall(ss))\n</code>\n</pre>\n", "senID": 5}]]