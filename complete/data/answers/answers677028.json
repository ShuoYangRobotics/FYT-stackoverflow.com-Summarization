[[{"text": ["A relational database is not your best first choice for this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Why?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You want all of your editors to pass changes to your player.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Your player is -- effectively -- a server for all those editors.", "Your player needs multiple open connections.", "It must listen to all those connections for changes.", "It must display those changes."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If the changes are really large, you can move to a hybrid solution where the editors persist the changes and notify the player.  "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Either way, the editors must notify they player that they have a change.", "It's much, much simpler than the player trying to discover changes in a database."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "hr", "senID": 6}, {"text": ["A better design is a server which accepts messages from the editors, persists them, and notifies the player.", "This server is neither editor nor player, but merely a broker that assures that all the messages are handled.", "It accepts connections from editors and players.", "It manages the database."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["There are two implementations.", "Server IS the player.", "Server is separate from the player.", "The design of server doesn't change -- only the protocol.", "When server is the player, then server calls the player objects directly.", "When server is separate from the player, then the server writes to the player's socket."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["When the player is part of the server, player objects are invoked directly when a message is received from an editor.", "When the player is separate, a small reader collects the messages from a socket and calls the player objects."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["The player connects to the server and then waits for a stream of information.", "This can either be input from the editors or references to data that the server persisted in the database."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["If your message traffic is small enough so that network latency is not a problem, editor sends all the data to the server/player.", "If message traffic is too large, then the editor  writes to a database and sends a message with just a database FK to the server/player.  "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"tag": "hr", "senID": 12}, {"text": ["Please clarify \"If the editor crashes while notifying, the player is permanently messed up\" in your question."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["This sounds like a poor design for the player service.", "It can't be \"permanently messed up\" unless it's not getting state from the various editors.", "If it's getting state from the editors (but attempting to mirror that state, for example) then you should consider a design where the player simply gets state from the editor and cannot get \"permanently messed up\"."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}], [{"text": ["Just open a socket between the two processes and have the editor tell all the players about the update."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I think in that case, I would make a process to manage the database read/writes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Each editor that want to make some modifications to the database makes a call to this proccess, be it through IPC or network, or whatever method."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This process can then notify the player of a change in the database.", "The player, when he wants to retrieve some data should make a request of the data it wants to the process managing the database.", "(Or the db process tells it what it needs, when it notifies of a change, so no request from the player needed)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Doing this will have the advantage of having only one process accessing the SQLite DB, so no locking or concurrency issues on the database."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Edit: I am asuming processes on the same machine."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["In my opinion there are two ways:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Polling (as you mentioned), but keep it to a single value (like a table that just keeps the LastUpdateTime of other tables)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Use whichever interprocess-communication there is available on the target platform.", "This could be events in Windows (e.g.", "in C# (I don't know in Python) the ManualResetEvent, AutoResetEvent, or a Mutex if you want to sacrifice a waiter-thread in each process), or Signals in Linux."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Signals", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.comptechdoc.org/os/linux/programming/linux%5Fpgsignals.html"}]}]}], [{"text": ["If it's on the same machine, the simplest way would be to have named pipe, \"player\" with blocking read() and \"editors\" putting a token in pipe whenever they modify DB."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["How many editor processes (why processes?", "), and how often do you expect updates?", "This doesn't sound like a good design, especially not considering sqlite really isn't too happy about multiple concurrent accesses to the database."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "too", "childNum": 0, "tag": "b", "pos": 2, "childList": []}]}, {"text": ["If multiple processes makes sense and you want persistence, it would probably be smarter to have the editors notify your player via sockets, pipes, shared memory or the like and then have the player (aka server process) do the persisting."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "If", "childNum": 0, "tag": "i", "pos": 0, "childList": []}, {"text": "and", "childNum": 0, "tag": "b", "childList": []}]}]]