[[{"text": ["Is it really slowing down?", "You have to try and see for yourself.", "It won't be much of a slowdown, but if we're talking about nanoseconds it may be considerable.", "Alternatively you can convert one 10 million loop to two smaller loops:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n m = 1000000\nfor i in range(10):\n    for i in range(m):\n        // do sth\n    print(\"Progress report\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How about keeping a counter and resetting it to zero when you reach the wanted number?", "Adding and checking equality is faster than modulo."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n printcounter = 0\n\n# Whatever a while loop is in Python\nwhile (...):   \n    ...\n    if (printcounter == 1000000):\n        print('Progress report...')\n        printcounter = 0\n    ...\n    printcounter += 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["Although it's quite possible that the compiler is doing some sort of optimization like this for you already... but this may give you some peace of mind."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'd do some testing to see how much time your modulus calls are consuming.", "You can use timeit for that.", "If your results indicate a need for time reduction, another approach which eliminates your modulus calculation:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "timeit", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/timeit.html"}]}, {"code": "<pre>\n<code>\n for m in xrange(m_min, m_max):\n    for n in xrange(n_min, n_max):\n        #do_n_stuff\n    print('Progress report...')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Something like that ?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for n in xrange(1000000,11000000,1000000):\n    for i in xrange(n-1000000,n):\n        x = 10/2\n    print 'Progress at '+str(i)\n</code>\n</pre>\n", "senID": 1}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Progress at 999999\nProgress at 1999999\nProgress at 2999999\nProgress at 3999999\nProgress at 4999999\nProgress at 5999999\nProgress at 6999999\nProgress at 7999999\nProgress at 8999999\nProgress at 9999999\n</code>\n</pre>\n", "senID": 3}, {"text": [], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["EDIT"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Better:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n for n in xrange(0,10000000,1000000):\n    for i in xrange(n,n+1000000):\n        x = 10/2\n    print 'Progress at '+str(i)\n</code>\n</pre>\n", "senID": 7}, {"text": ["And inspired from pajton:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n m = 1000000\nfor n in xrange(0,10*m,m):\n    for i in xrange(n,n+m):\n        x = 10/2\n    print 'Progress at '+str(i+1)\n</code>\n</pre>\n", "senID": 9}, {"text": ["I prefer this that I find more immediately readable than the pajton's solution.", "It keeps the display of a value depending of i"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "i", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["It's fast enough that I wouldn't worry about it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you really wanted to speed it up, you could do this to avoid the modulus"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if (n == 1000000):\n    n = 0\n    print('Progress report...')\n</code>\n</pre>\n", "senID": 2}], [{"text": ["It's difficult to know how your system will optimize your code without testing. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You could simplify the relational part by realizing that zero is evaluated as false."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if(not N % 10000000)\n   do stuff\n</code>\n</pre>\n", "senID": 2}], [{"text": ["This makes the inner loop lean, and m does not have to be divisible by interval."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "m", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "interval", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n m = 10000000\ninterval = 1000000\ni = 0\nwhile i &lt; m:\n    checkpoint = min(m, i+interval)\n    for j in xrange(i, checkpoint):\n        #do something\n    i = checkpoint\n    print \"progress\"\n</code>\n</pre>\n", "senID": 1}]]