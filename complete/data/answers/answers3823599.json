[[{"text": ["The question is not very clear, but I guess this is what you are looking for:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n word1=(\\w+)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Your match will be in the 1st group.", "Here's some sample Python code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import re\nyourstring = 'type=weaksubj len=1 word1=wrestle pos1=verb stemmed1=y priorpolarity=negative'\n\nm = re.search(r'word1=(\\w+)', yourstring)\nprint m.group(1)\n</code>\n</pre>\n", "senID": 3}, {"text": ["As seen on codepad.", "A more generalized solution:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "codepad", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codepad.org/ozXUtLbX"}]}, {"code": "<pre>\n<code>\n import re\ndef get_attr(str, attr):\n    m = re.search(attr + r'=(\\w+)', str)\n    return None if not m else m.group(1)\n\nstr = 'type=weaksubj len=1 word1=wrestle pos1=verb stemmed1=y priorpolarity=negative'\n\nprint get_attr(str, 'word1')  # wrestle\nprint get_attr(str, 'type')   # weaksubj\nprint get_attr(str, 'foo')    # None\n</code>\n</pre>\n", "senID": 5}, {"text": ["Also available on codepad"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "codepad", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codepad.org/zWExcuvj"}]}], [{"text": ["Given the following regex..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n /word1=(\\w+)/\n</code>\n</pre>\n", "senID": 1}, {"text": ["...$1 or whatever your first match is in your language will be wrestle."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You regex would be something like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n /.*word1=(\\w+)/\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use: /word1=(\\w+)/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "/word1=(\\w+)/", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Assuming it is always separated by spaces"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n word1=([^ ]+)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you can get the value by the first group match."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Maybe re is unnecessary when str.split looks like it will suffice:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"type=weaksubj len=1 word1=wrestle pos1=verb stemmed1=y priorpolarity=negative\"\n&gt;&gt;&gt; dd = dict(ss.split('=',1) for ss in s.split())\n&gt;&gt;&gt; dd['word1']\n'wrestle'\n</code>\n</pre>\n", "senID": 1}]]