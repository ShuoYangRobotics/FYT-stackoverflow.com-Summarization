[[{"text": ["Well, your solution takes three bytes (= 24 bits) per integer.", "Theoretically, 20 bits are enough (since 2^19 &lt; 1.000.000 &lt; 2^20)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EDIT: Oops, just noticed Neil\u2019s comment stating the same.", "I\u2019m making this answer CW since it really belongs to him."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Assuming you do have to remember their order and that the numbers are in the range of 1 to 1,000,000, it would only take 20 bits or 2\u00bd bytes to write each one since 1,000,000 is 0xF4240 in hexadecimal.", "You'd have to pack them together to not waste any space with this approach, but by doing so it would only take 2.5 * 1,000,000 bytes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Actually, you can do A LOT better than 2.5MB, since not all orderings are possible.", "One might argue that beating 5% would involve compression, since one is not storing the sequence itself.", "Basically, you would want to store the canonical sequence number.", "8 numbers from 0-7 in random order normally takes 24 bits (log(8^8)/log(2)), but with a canonical sequence number it would take 16 bits (log(8!", ")/log(2))."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "log(8^8)/log(2)", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "log(8!)/log(2)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Basically, this involves coming up with an algorithm which can translate any sequence of integers into a giant number.", "Example of a possible numbering for 8 number sequence would be ordering by value:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 01234567 : 0  \n01234576 : 1  \n01234657 : 2  \n01234675 : 3  \n01234756 : 4  \n01234765 : 5  \n...\n</code>\n</pre>\n", "senID": 2}, {"text": ["The cost of this strategy is log(1000000!", ")/log(2) (i.e., log_2(1000000!)).", "The standard solution usually costs about log(1000000^1000000)/log(2) ."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "log(1000000!)/log(2)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "log_2(1000000!)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}, {"text": "log(1000000^1000000)/log(2)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can also squeeze a tiny bit more space by treating 0000 0000 1111 1111 and 1111 1111 differently, but the amount of space saved by doing so is incredibly tiny."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "0000 0000 1111 1111", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "1111 1111", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit: A quick and dirty calculation indicates this optimization brings the size down to about 2.204MiB."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Due to the pigeonhole principle, I do not believe it is possible to do better than this strategy, regardless of whether you use compression or some other technique."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["the question is clearly incomplete.", "here is my very compact attempt:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f = open('numbers.dat', 'w')\nf.write('list(range(1,1000000))')\nf.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["loading the file:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n f = open('numbers.dat', 'r')\nnumbers = eval(f.read().strip())\nf.close()\n</code>\n</pre>\n", "senID": 3}, {"text": ["that should do it."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["in fact, i don't see why 'python' is important here.", "if the interviewer is concerned about the size of the resulting file, the solution may be written in any language.", "the question does not specify if the interviewer wants compact output or compact code..."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "in fact, i don't see why 'python' is important here. if the interviewer is concerned about the size of the resulting file, the solution may be written in any language. the question does not specify if the interviewer wants compact output or compact code...", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["I would only write the start and end of the given range, in this case 1 and 1,000,000, because nowhere has the interviewer mentioned order is important."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What is the most compact way to write 1,000,000 ints (0, 1, 2...) to file using Python without zipping etc"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "What is the most compact way to write 1,000,000 ints (0, 1, 2...) to file using Python without zipping etc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you interpret the 1,000,000 ints as \"I didn't specify that they have to be different\", you can just use a for loop to write 0 one million times."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "1,000,000", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Maybe they meant something like this\npythonic-way-to-convert-a-list-of-integers-into-a-string-of-comma-separated-range but then you said that consecutive sequences are rare, so perhaps not"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pythonic-way-to-convert-a-list-of-integers-into-a-string-of-comma-separated-range", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3430231"}]}]]