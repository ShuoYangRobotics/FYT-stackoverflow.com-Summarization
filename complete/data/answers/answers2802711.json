[[{"text": ["I was thinking something more along the lines of:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n File f = File.open(\"C:/Users/File.txt\");\n\nfor(String s : f){\n   System.out.println(s);\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here is my source code for it:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.Iterator;\n\npublic abstract class File implements Iterable&lt;String&gt;{\n    public final static String READ = \"r\";\n    public final static String WRITE = \"w\";\n\n    public static File open(String filepath) throws IOException{\n        return open(filepath, READ);\n    }   \n\n    public static File open(String filepath, String mode) throws IOException{\n    if(mode == READ){\n        return new ReadableFile(filepath);\n    }else if(mode == WRITE){\n        return new WritableFile(filepath);\n    }\n    throw new IllegalArgumentException(\"Invalid File Write mode '\" + mode + \"'\");\n    }\n\n    //common methods\n    public abstract void close() throws IOException;\n\n    // writer specific\n    public abstract void write(String s) throws IOException;\n\n}\n\nclass WritableFile extends File{\n    String filepath;\n    Writer writer;\n\n    public WritableFile(String filepath){\n        this.filepath = filepath;\n    }\n\n    private Writer writer() throws IOException{\n        if(this.writer == null){\n            writer = new BufferedWriter(new FileWriter(this.filepath));\n        }\n        return writer;\n    }\n\n    public void write(String chars) throws IOException{\n        writer().write(chars);\n    }\n\n    public void close() throws IOException{\n        writer().close();\n    }\n\n    @Override\n    public Iterator&lt;String&gt; iterator() {        \n        return null;\n    }\n}\n\nclass ReadableFile extends File implements Iterator&lt;String&gt;{\n    private BufferedReader reader;\n    private String line;    \n    private String read_ahead;\n\n    public ReadableFile(String filepath) throws IOException{        \n        this.reader = new BufferedReader(new FileReader(filepath)); \n        this.read_ahead = this.reader.readLine();\n    }\n\n    private Reader reader() throws IOException{\n         if(reader == null){\n               reader = new BufferedReader(new FileReader(filepath));   \n         }\n         return reader;\n    }\n\n    @Override\n    public Iterator&lt;String&gt; iterator() {\n        return this;\n    }\n\n    @Override\n    public void close() throws IOException {\n        reader().close();\n    }\n\n    @Override\n    public void write(String s) throws IOException {\n        throw new IOException(\"Cannot write to a read-only file.\");\n    }\n\n    @Override\n    public boolean hasNext() {      \n        return this.read_ahead != null;\n    }\n\n    @Override\n    public String next() {\n        if(read_ahead == null)\n            line = null;\n        else\n            line = new String(this.read_ahead);\n\n        try {\n            read_ahead = this.reader.readLine();\n        } catch (IOException e) {\n            read_ahead = null;\n            reader.close()\n        }\n        return line;\n    }\n\n    @Override\n    public void remove() {\n        // do nothing       \n    }\n}\n</code>\n</pre>\n", "senID": 3}, {"text": ["and here is the unit-test for it:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import java.io.IOException;\nimport org.junit.Test;\n\npublic class FileTest {\n    @Test\n    public void testFile(){\n        File f;\n        try {\n            f = File.open(\"File.java\");\n            for(String s : f){\n                System.out.println(s);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    public void testReadAndWriteFile(){\n        File from;\n        File to;\n        try {\n            from = File.open(\"File.java\");\n            to = File.open(\"Out.txt\", \"w\");\n            for(String s : from){           \n                to.write(s + System.getProperty(\"line.separator\"));\n            }\n            to.close();\n        } catch (IOException e1) {\n            e1.printStackTrace();\n        }   \n    }\n}\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Reading a file line by line in Java:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n BufferedReader in = new BufferedReader(new FileReader(\"myfile.txt\"));\n\nString line;\nwhile ((line = in.readLine()) != null) {\n    // Do something with this line\n    System.out.println(line);\n}\n\nin.close();\n</code>\n</pre>\n", "senID": 1}, {"text": ["Most of the classes for I/O are in the package java.io.", "See the API documentation for that package.", "Have a look at Sun's Java I/O tutorial for more detailed information."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "java.io", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Sun's Java I/O tutorial", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://java.sun.com/docs/books/tutorial/essential/io/"}]}, {"text": ["addition: The example above will use the default character encoding of your system to read the text file.", "If you want to explicitly specify the character encoding, for example UTF-8, change the first line to this:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "addition", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n BufferedReader in = new BufferedReader(\n    new InputStreamReader(new FileInputStream(\"myfile.txt\"), \"UTF-8\"));\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If you already have dependencies to Apache commons lang and commons io this could be an alternative:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Apache commons lang", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://commons.apache.org/lang/api/org/apache/commons/lang/StringUtils.html"}, {"href": "http://commons.apache.org/io/apidocs/org/apache/commons/io/FileUtils.html", "text": "commons io", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n String[] lines = StringUtils.split(FileUtils.readFileToString(new File(\"myfile.txt\")), '\\n');\nfor(String line: lines){\n      //do something with the line from file\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["(I would prefer Jesper's answer)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you want to iterate through a file by strings, a class you might find useful is the Scanner class."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Scanner", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import java.io.*;\nimport java.util.Scanner;\n\n    public class ScanXan {\n        public static void main(String[] args) throws IOException {\n            Scanner s = null;\n            try {\n                s = new Scanner(new BufferedReader(new FileReader(\"myFile.txt\")));\n\n                while (s.hasNextLine()) {\n                    System.out.println(s.nextLine());\n                }\n            } finally {\n                if (s != null) {\n                    s.close();\n                }\n            }\n        }\n    }\n</code>\n</pre>\n", "senID": 1}, {"text": ["The API is pretty useful: http://java.sun.com/javase/7/docs/api/java/util/Scanner.html\nYou can also parse the file using regular expressions."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://java.sun.com/javase/7/docs/api/java/util/Scanner.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://java.sun.com/javase/7/docs/api/java/util/Scanner.html"}]}], [{"text": ["I never get tired of pimping Google's guava-libraries, which takes a lot of the pain out of... well, most things in Java."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "guava-libraries", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/guava-libraries/"}]}, {"text": ["How about:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for (String line : Files.readLines(new File(\"file.txt\"), Charsets.UTF_8)) {\n   // Do something\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["In the case where you have a large file, and want a line-by-line callback (rather than reading the whole thing into memory) you can use a LineProcessor, which adds a bit of boilerplate (due to the lack of closures... sigh) but still shields you from dealing with the reading itself, and all associated Exceptions:"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "LineProcessor", "tag": "a", "pos": 0, "childList": [{"text": "LineProcessor", "tag": "code"}], "childNum": 1, "href": "http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/io/LineProcessor.html"}, {"text": "LineProcessor", "childNum": 0, "tag": "code", "childList": []}, {"text": "Exceptions", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n int matching = Files.readLines(new File(\"file.txt\"), Charsets.UTF_8, new LineProcessor&lt;Integer&gt;(){\n  int count;\n\n  Integer getResult() {return count;}\n\n  boolean processLine(String line) {\n     if (line.equals(\"foo\")\n         count++;\n     return true;\n  }\n});\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you don't actually want a result back out of the processor, and you never abort early (the reason for the boolean return from processLine) you could then do something like:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "processLine", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "then", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n class SimpleLineCallback extends LineProcessor&lt;Void&gt; {\n    Void getResult{ return null; }\n\n    boolean processLine(String line) {\n       doProcess(line);\n       return true;\n    }\n\n    abstract void doProcess(String line);\n}\n</code>\n</pre>\n", "senID": 6}, {"text": ["and then your code might be:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n Files.readLines(new File(\"file.txt\"), Charsets.UTF_8, new SimpleLineProcessor(){\n  void doProcess(String line) {\n     if (line.equals(\"foo\");\n         throw new FooException(\"File shouldn't contain 'foo'!\");\n  }\n});\n</code>\n</pre>\n", "senID": 8}, {"text": ["which is correspondingly cleaner."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"code": "<pre>\n<code>\n public static void main(String[] args) throws FileNotFoundException {\n    Scanner scanner = new Scanner(new File(\"scan.txt\"));\n    try {\n      while (scanner.hasNextLine()) {\n        System.out.println(scanner.nextLine());\n      }\n    } finally {\n      scanner.close();\n    }\n  }\n</code>\n</pre>\n", "senID": 0}, {"text": ["Some caveats:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "That uses the default system encoding, but you should ", "tag": "none", "senID": 2}, {"text": "Scanner swallows I/O exceptions, so you may want to check ", "tag": "none", "senID": 3}]}], [{"text": ["Simple example using Files.readLines() from guava-io with a LineProcessor callback: "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Files.readLines()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "LineProcessor", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import java.io.File;\nimport java.io.IOException;\n\nimport com.google.common.base.Charsets;\nimport com.google.common.io.Files;\nimport com.google.common.io.LineProcessor;\n\npublic class GuavaIoDemo {\n\n    public static void main(String[] args) throws Exception {\n        int result = Files.readLines(new File(\"/home/pascal/.vimrc\"), //\n            Charsets.UTF_8, // \n            new LineProcessor&lt;Integer&gt;() {\n                int counter;\n\n                public Integer getResult() {\n                    return counter;\n                }\n\n                public boolean processLine(String line) throws IOException {\n                    counter++;\n                    System.out.println(line);\n                    return true;\n                }\n            });\n    }\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use jython which lets you run Python syntax in Java."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "jython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.jython.org/"}]}], [{"text": ["Nice example here: Line by line iteration"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Line by line iteration", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.java2s.com/Code/Java/Language-Basics/Javaforinforinlinebylineiterationthroughatextfile.htm"}]}], [{"text": ["Try looking at groovy!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Its a superset of Java that runs in hte JVM.", "Most valid Java code is also valid Groovy so you have access any of the million java APIs directly."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In addition it has many of the higher level contructs familiar to Pythonists, plus\na number of extensions to take the pain out of Maps, Lists, sql, xml and you guessed it -- file IO."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]