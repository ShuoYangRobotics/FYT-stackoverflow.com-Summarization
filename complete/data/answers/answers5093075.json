[[{"code": "<pre>\n<code>\n import inspect\nimport traceback\n\ndef method():\n   frame = inspect.currentframe()\n   stack_trace = traceback.format_stack(frame)\n   print ''.join(stack_trace)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Use stack_trace[:-1] to avoid including method/printinfo in the stack trace."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Use the traceback module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "traceback", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/traceback.html"}]}, {"code": "<pre>\n<code>\n logging.error(traceback.format_exc())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Current function name, module and line number you can do simply by changing your format string to include them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n logging.basicConfig(\n    filename = fileName,\n    format = \"%(levelname) -10s %(asctime)s %(module)s:%(lineno)s %(funcName)s %(message)s\",\n    level = logging.DEBUG\n)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Most people only want the stack when logging an exception, and the logging module does that automatically if you call logging.exception().", "If you really want stack information at other times then you will need to use the traceback module for extract the additional information you need."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "logging.exception()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As of Python 3.2, this can be simplified to passing the stack_info=True flag to the logging calls.", "However, you'll need to use one of the above answers for any earlier version."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "stack_info=True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "logging calls", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/py3k/library/logging#logging.Logger.debug"}]}], [{"text": ["Look at traceback module"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import traceback\n&gt;&gt;&gt; def test():\n&gt;&gt;&gt;     print \"/\".join( str(x[2]) for x in traceback.extract_stack() )\n&gt;&gt;&gt; def main():\n&gt;&gt;&gt;     test()\n&gt;&gt;&gt; main()\n&lt;module&gt;/launch_new_instance/mainloop/mainloop/interact/push/runsource/runcode/&lt;module&gt;/main/test\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is an example that i hope it can help you:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import inspect\nimport logging\n\nlogging.basicConfig(\n    format = \"%(levelname) -10s %(asctime)s %(message)s\",\n    level = logging.DEBUG\n)\n\ndef test():\n\n    caller_list = []\n    frame = inspect.currentframe()\n    this_frame = frame  # Save current frame.\n\n    while frame.f_back:\n        caller_list.append('{0}()'.format(frame.f_code.co_name))\n        frame = frame.f_back\n\n    caller_line = this_frame.f_back.f_lineno\n    callers =  '/'.join(reversed(caller_list))\n\n    logging.info('Line {0} : {1}'.format(caller_line, callers))\n\ndef foo():\n    test()\n\ndef bar():\n    foo()\n\nbar()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Result:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n INFO       2011-02-23 17:03:26,426 Line 28 : bar()/foo()/test()\n</code>\n</pre>\n", "senID": 3}]]