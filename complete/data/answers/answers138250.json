[[{"text": ["It's probably best to use the Python Image Library to do this which I'm afraid is a separate download."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Image Library", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonware.com/products/pil/"}]}, {"text": ["The easiest way to do what you want is via the load() method on the Image object which returns a pixel access object which you can manipulate like an array:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "load() method on the Image object", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonware.com/library/pil/handbook/image.htm"}]}, {"code": "<pre>\n<code>\n pix = im.load()\nprint pix[x,y]\npix[x,y] = value\n</code>\n</pre>\n", "senID": 2}, {"text": ["Alternatively, look at ImageDraw which gives a much richer API for creating images."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "ImageDraw", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonware.com/library/pil/handbook/imagedraw.htm"}]}], [{"text": ["As Dave Webb said."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is my working code snippet printing the pixel colours from an image:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import os, sys\nimport Image\n\nim = Image.open(\"image.jpg\")\nx = 3\ny = 4\n\npix = im.load()\nprint pix[x,y]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I think the Python Image Library would help here "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["PIL"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PIL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonware.com/products/pil/"}]}], [{"text": ["There's a really good article on wiki.wxpython.org entitled Working With Images.", "The article mentions the possiblity of using wxWidgets (wxImage), PIL or PythonMagick.", "Personally, I've used PIL and wxWidgets and both make image manipulation fairly easy."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Working With Images", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.wxpython.org/index.cgi/WorkingWithImages"}]}], [{"text": ["PyPNG - lightweight PNG decoder/encoder"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyPNG - lightweight PNG decoder/encoder", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Although the question hints at JPG, I hope my answer will be useful to some people."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's how to read and write PNG pixels using PyPNG module:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "PyPNG module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://trac.browsershots.org/browser/trunk/pypng/lib/png.py"}]}, {"code": "<pre>\n<code>\n import png, array\n\npoint = (2, 10) # coordinates of pixel to be painted red\n\nreader = png.Reader(filename='image.png')\nw, h, pixels, metadata = reader.read()\npixel_byte_width = 4 if metadata['has_alpha'] else 3\npixel_position = point[0] + point[1] * w\nnew_pixel_value = (255, 0, 0, 0) if metadata['has_alpha'] else (255, 0, 0)\npixels[\n  pixel_position * pixel_byte_width :\n  (pixel_position + 1) * pixel_byte_width] = array.array('B', new_pixel_value)\n\noutput = open('image-with-red-dot.png', 'wb')\nwriter = png.Writer(w, h, **metadata)\nwriter.write_array(output, pixels)\noutput.close()\n</code>\n</pre>\n", "senID": 3}, {"text": ["PyPNG is a single pure Python module roughly 1000 lines of code long."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["PIL is a more comprehensive imaging library, but it's also significantly heavier."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "PIL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonware.com/products/pil/"}]}], [{"text": ["You can use pygame's surfarray module.", "This module has a 3d pixel array returning method called pixels3d(surface).", "I've shown usage below:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pygame", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pygame.org"}]}, {"code": "<pre>\n<code>\n from pygame import surfarray, image, display\nimport pygame\nimport numpy #important to import\n\npygame.init()\nimage = image.load(\"myimagefile.jpg\") #surface to render\nresolution = (image.get_width(),image.get_height())\nscreen = display.set_mode(resolution) #create space for display\nscreen.blit(image, (0,0)) #superpose image on screen\ndisplay.flip()\nsurfarray.use_arraytype(\"numpy\") #important!\nscreenpix = surfarray.pixels3d(image) #pixels in 3d array:\n#[x][y][rgb]\nfor y in range(resolution[1]):\n    for x in range(resolution[0]):\n        for color in range(3):\n            screenpix[x][y][color] += 128\n            #reverting colors\nscreen.blit(surfarray.make_surface(screenpix), (0,0)) #superpose on screen\ndisplay.flip() #update display\nwhile 1:\n    print finished\n</code>\n</pre>\n", "senID": 1}, {"text": ["I hope been helpful.", "Last word: screen is locked for lifetime of screenpix."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Image manipulation is a complex topic, and it's best if you do use a library.", "I can recommend gdmodule which provides easy access to many different image formats from within Python."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "do", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "gdmodule", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://newcenturycomputers.net/projects/gdmodule.html"}]}]]