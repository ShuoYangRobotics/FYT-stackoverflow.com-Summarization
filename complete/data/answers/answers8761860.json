[[{"text": ["This is actually a classic example of map reduce."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "map reduce", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/MapReduce"}]}, {"text": ["The example in the wikipedia page will give you the word count of each unique word, but you can easily add a step in the reduce step that keeps track of the current most common word(with some kind of mutex to deal with concurrency issues)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you have a distributed cluster of machines or a highly parallelized computer this will run much faster than using the hash table."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Usually Heap is the data-structure which suits well when we have to determine something like most/least used. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Heap", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Heap_%28data_structure%29"}]}, {"text": ["Even Python;s Counter.nlargest which is used for these purposes is implemented through the Heap Data-structure. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python;s Counter.nlargest", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/3.1.3/library/collections.html#collections.Counter"}]}, {"text": ["A Binary Heap Data-structure has the following Complexity"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n CreateHeap - O(1)\nFindMin - O(1)\ndeleteMin - O(logn)\nInsert - O(logn)\n</code>\n</pre>\n", "senID": 3}, {"text": ["I ran a comparition on Hash (using default dictionary in Python) and Heap (using Collections.Counter.nlargest in python) and the Hash is fairing slightly better than Heap."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; stmt1=\"\"\"\nimport collections, random\nsomedata=[random.randint(1,1000) for i in xrange(1,10000)]\nsomehash=collections.defaultdict(int)\nfor d in somedata:\n    somehash[d]+=1\nmaxkey=0\nfor k,v in somehash.items():\n    if somehash[maxkey] &gt; v:\n        maxkey=k\n\"\"\"\n&gt;&gt;&gt; stmt2=\"\"\"\nimport collections,random\nsomedata=[random.randint(1,1000) for i in xrange(1,10000)]\ncollections.Counter(somedata).most_common(1)\n\"\"\"\n&gt;&gt;&gt; t1=timeit.Timer(stmt=stmt1)\n&gt;&gt;&gt; t2=timeit.Timer(stmt=stmt2)\n&gt;&gt;&gt; print \"%.2f usec/pass\" % (1000000 * t2.timeit(number=10)/10)\n38168.96 usec/pass\n&gt;&gt;&gt; print \"%.2f usec/pass\" % (1000000 * t1.timeit(number=10)/10)\n33600.80 usec/pass\n</code>\n</pre>\n", "senID": 5}], [{"text": ["There is a generalization of your optimization- if the book size is known and any word you have seen has a count > the remaining number of words + the next-highest count, your current highest-counted word is the answer."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["To determine complexity I think you need to consider two variables, n = total number of words, m = number of unique words.", "I imagine the best case complexity will come out close to O(n log(m)) for speed, and O(m) for storage, assuming each time you iterate over each of n words, and build and search based on a hash table or other such structure which eventually contains m elements."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Your solution is correct, fast, and probably the best/easiest from a practical standpoint. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The other poster's solutions have worse time complexities than your solution.", "For a hash, as you are using, the time complexity is indeed O(n).", "Each insertion is O(1) and there are n words, so the insertion phase costs O(n).", "Iterating through and finding the max is then O(n).", "The space is also O(n) as you mentioned."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Note that you will not be able to terminate your algorithm early using Chris's solution because searching your hash table is costly and there is no way for you to perform this in O(1) time after each insertion."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["A heap will cost more in time because you need to maintain the heap during each insertion.", "A heap insertion is O(log(n)) and thus the total cost for insertion will be O(nlog(n))."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you are dealing with a book, then you know the vocabulary and the approximate word frequencies.", "Even if you are not given this information up front, you can get a good estimate by scanning a random sample."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For the exact answer, I would use a perfect hash function of the k most common words.", "A perfect hash function requires O(k) memory and guarantees fast worst-case O(1) lookup."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For the uncommon words, I would use a priority queue implemented as a heap or a self-balancing tree.", "A regular hash table might also be a good choice."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I think you have the right solution, but you are wrong about the time complexity.", "The complexity of a hash based system is O(log(n)) and therefore your algorithm is of time complexity O(nlog(n))."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Edit: The best worst case complexity for hash table search is O(log(n)).", "The worst case complexity for a regular hash table implementation is O(n).", "In any case, it is definitely not O(1) as assumed by the author of this question)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]