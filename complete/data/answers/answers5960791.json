[[{"text": ["Use subprocess to execute your program from python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import subprocess as sp\nimport shlex\n\ndef run(cmdline):\n  process = sp.Popen(shlex.split(cmdline), stdout=sp.PIPE, stderr=sp.PIPE)\n  output, err = process.communicate()\n  retcode = process.poll()\n  return retcode, output, err\n\nrun('./a.out '+arg1+' '+arg2+' '+...)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Interfacing between C/C++ and Python is heavily documented and there are several different approaches.", "However, if you're just setting values then it may be overkill to use Python, which is more geared toward customising large operations within your process by farming it off to the interpreter."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would personally recommend researching an \"ini\" file method, either traditionally or by using XML, or even a lighter scripting language like Lua."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can use subprocess module to launch an executable with defined command-line arguments:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import subprocess\n\noption1 = True\noption2 = Frue\n# ...\noptionN = True\n\nlstopt = ['path_to_cpp_executable', \n           option1,\n           option2,\n           ...\n           optionN \n         ]\nlstopt = [str(item) for item in lstopt] # because we need to pass strings\n\nproc = subprocess.Popen(lstrun, close_fds = True)\nstdoutdata, stderrdata = proc.communicate()\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you're using Python 2.7 or Python 3.2, then OrderedDict will make the code more readable:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from collections import OrderedDict\nopts = OrderedDict([('option1', True),\n                    ('option2', False), \n                   ]\n\nlstopt = (['path_to_cpp_executable'] + \n          list(str(item) for item in opts.values())\n         )\n\nproc = subprocess.Popen(lstrun, close_fds = True)\nstdoutdata, stderrdata = proc.communicate()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I can only advise to have a look at swig : using director feature, it allows to fully integrate C++ and python, including cross derivation from onle language to the other"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "swig", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.swig.org/"}]}], [{"text": ["With the ctypes module, you can call arbitrary C libraries."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ctypes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/ctypes"}]}], [{"text": ["There are several ways for interfacing C and C++ code with Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["SWIG"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Boost.Python"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["Cython"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}]]