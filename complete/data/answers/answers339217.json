[[{"text": ["I've always been impressed by pyparsing.", "The author, Paul McGuire, is active on the python list/comp.lang.python and has always been very helpful with any queries concerning it."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "pyparsing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyparsing.wikispaces.com/"}, {"text": "python list", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://mail.python.org/mailman/listinfo/python-list"}, {"href": "http://groups.google.com/group/comp.lang.python", "text": "comp.lang.python", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["There are plenty of Python parsing tools: http://nedbatchelder.com/text/python-parsers.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://nedbatchelder.com/text/python-parsers.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nedbatchelder.com/text/python-parsers.html"}]}], [{"text": ["Here's an approach that works really well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n abc= ONETHING( ... )\nxyz= ANOTHERTHING( ... )\npqr= SOMETHING( this=abc, that=123, more=(xyz,123) )\n</code>\n</pre>\n", "senID": 1}, {"text": ["Declarative.", "Easy-to-parse.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["And..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["It's actually Python.", "A few class declarations and the work is done.", "The DSL is actually class declarations."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["What's important is that a DSL merely creates objects.", "When you define a DSL, first you have to start with an object model.", "Later, you put some syntax around that object model.", "You don't start with syntax, you start with the model."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Yes, there are many -- too many -- parsing tools, but none in the standard library."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["From what what I saw PLY and SPARK are popular.", "PLY is like yacc, but you do everything in Python because you write your grammar in docstrings."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PLY", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/ply/"}]}, {"text": ["Personally, I like the concept of parser combinators (taken from functional programming), and I quite like pyparsing: you write your grammar and actions directly in python and it is easy to start with.", "I ended up producing my own tree node types with actions though, instead of using their default ParserElement type."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "pyparsing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyparsing.wikispaces.com/"}, {"text": "ParserElement", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Otherwise, you can also use existing declarative language like YAML."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "YAML", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/ply/"}]}], [{"text": ["I have written something like this in work to read in SNMP notification definitions and automatically generate Java classes and SNMP MIB files from this.", "Using this little DSL, I could write 20 lines of my specification and it would generate roughly 80 lines of Java code and a 100 line MIB file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To implement this, I actually just used straight Python string handling (split(), slicing etc) to parse the file.", "I find Pythons string capabilities to be adequate for most of my (simple) parsing needs."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Besides the libraries mentioned by others, if I were writing something more complex and needed proper parsing capabilities, I would probably use ANTLR, which supports Python (and other languages)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "ANTLR", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.antlr.org/"}]}], [{"text": ["Peter,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["DSLs are a good thing, so you don't need to defend yourself :-)\nHowever, have you considered an internal DSL ?", "These have so many pros versus external (parsed) DSLs that they're at least worth consideration.", "Mixing a DSL with the power of the native language really solves lots of the problems for you, and Python is not really bad at internal DSLs, with the with statement handy."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "good thing", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "with", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["For \"small languages\" as the one you are describing, I use a simple split, shlex (mind that the # defines a comment) or regular expressions. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; line = 'SOMETHING: !abc @123 #xyz/123'\n\n&gt;&gt;&gt; line.split()\n['SOMETHING:', '!abc', '@123', '#xyz/123']\n\n&gt;&gt;&gt; import shlex\n&gt;&gt;&gt; list(shlex.shlex(line))\n['SOMETHING', ':', '!', 'abc', '@', '123']\n</code>\n</pre>\n", "senID": 1}, {"text": ["The following is an example, as I do not know exactly what you are looking for."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; result = re.match(r'([A-Z]*): !([a-z]*) @([0-9]*) #([a-z0-9/]*)', line)\n&gt;&gt;&gt; result.groups()\n('SOMETHING', 'abc', '123', 'xyz/123')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["On the lines of declarative python, I wrote a helper module called 'bpyml' which lets you declare data in python in a more XML structured way without the verbose tags, it can be converted to/from XML too, but is valid python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["https://svn.blender.org/svnroot/bf-blender/trunk/blender/release/scripts/modules/bpyml.py"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "https://svn.blender.org/svnroot/bf-blender/trunk/blender/release/scripts/modules/bpyml.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://svn.blender.org/svnroot/bf-blender/trunk/blender/release/scripts/modules/bpyml.py"}]}, {"text": ["Example Use\nhttp://wiki.blender.org/index.php/User:Ideasman42#Declarative_UI_In_Blender"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://wiki.blender.org/index.php/User:Ideasman42#Declarative_UI_In_Blender", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.blender.org/index.php/User:Ideasman42#Declarative_UI_In_Blender"}]}]]