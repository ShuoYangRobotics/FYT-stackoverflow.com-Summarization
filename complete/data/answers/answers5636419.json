[[{"text": ["Just call the parent's __init__ using super:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "super", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class inheritedclass(initialclass):\n    def __new__(self):\n        self.attr3 = 'three'\n        super(initialclass, self).__init__()\n</code>\n</pre>\n", "senID": 1}, {"text": ["I strongly advise to follow Python's naming conventions and start a class with a Capital letter, e.g.", "InheritedClass and InitialClass.", "This helps quickly distinguish classes from methods and variables."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "InheritedClass", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "InitialClass", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["As far as I know that's not possible, however you can call the init method of the superclass, like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class inheritedclass(initialclass):\n    def __init__(self):\n        initialclass.__init__(self)\n        self.attr3 = 'three'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["First of all you're mixing __init__ and __new__, they are different things.", "__new__ doesn't take instance (self) as argument, it takes class (cls).", "As for the main part of your question, what you have to do is use super to invoke superclass' __init__."], "childNum": 8, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__new__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "different things", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/674304/pythons-use-of-new-and-init"}, {"text": "__new__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "cls", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "super", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Your code should look like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class initialclass(object):\n    def __init__(self):\n        self.attr1 = 'one'\n        self.attr2 = 'two'    \n\nclass inheritedclass(initialclass):\n    def __init__(self):\n        self.attr3 = 'three'\n        super(inheritedclass, self).__init__()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["It's incredibly simple.", "Define a new __init__ method and call the parent's __init__ at the beginning."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n # assuming a class Base, its __init__ takes one parameter x\n\nclass Derived(Base):\n    def __init__(self, x, y):\n        # whatever initialization is needed so we can say Derived is-a Base\n        super(Derived, self).__init__(x)\n        # now, add whatever makes Derived special - do your own initialization\n        self.y = y\n</code>\n</pre>\n", "senID": 1}, {"text": ["In Python 3, you don't have to (and therefore propably shouldn't, for simplicity) explicitly inherit from object or pass the class and self to super."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "childList": []}, {"text": "super", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Just call a designated method from the parent's init, if it exists:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class initialclass():\n    def __init__(self):\n        self.attr1 = 'one'\n        self.attr2 = 'two'  \n        if hasattr(self, 'init_subclass'):\n            self.init_subclass()\n\nclass inheritedclass(initialclass):\n    def init_subclass(self):\n        self.attr3 = 'three'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n class inheritedclass(initialclass):\ndef __init__(self):\n    initialclass.__init__(self)\n    self.attr3 = 'three'\n</code>\n</pre>\n", "senID": 0}, {"text": ["Why is it needed to specify self parameter when calling the initialclass.init method?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]