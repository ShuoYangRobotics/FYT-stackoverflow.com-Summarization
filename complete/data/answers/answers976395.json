[[{"text": ["Take advantage of what you can do in a language like Python.", "You can pass extra arguments to your event callback function, like so."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import functools\n\ndef __init__(self):\n    # ...\n    for i in range(10):\n        name = 'Button %d' % i\n        button = wx.Button(parent, -1, name)\n        func = functools.partial(self.on_button, name=name)\n        button.Bind(wx.EVT_BUTTON, func)\n    # ...\n\ndef on_button(self, event, name):\n    print '%s clicked' % name\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, the arguments can be anything you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You could give the button a name, and then look at the name in the event handler."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When you make the button"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n b = wx.Button(self, 10, \"Default Button\", (20, 20))\nb.myname = \"default button\"\nself.Bind(wx.EVT_BUTTON, self.OnClick, b)\n</code>\n</pre>\n", "senID": 2}, {"text": ["When the button is clicked:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def OnClick(self, event):\n    name = event.GetEventObject().myname\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I recommend that you use different event handlers to handle events from each button.", "If there is a lot of commonality, you can combine that into a function which returns a function with the specific behavior you want, for instance:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "returns", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def goingTo(self, where):\n    def goingToHandler(event):\n        self.SetTitle(\"I'm going to \" + where)\n    return goingToHandler\n\ndef __init__(self):\n    buttonA.Bind(wx.EVT_BUTTON, self.goingTo(\"work\"))\n    # clicking will say \"I'm going to work\"\n    buttonB.Bind(wx.EVT_BUTTON, self.goingTo(\"home\"))\n    # clicking will say \"I'm going to home\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Keep a dict with keys that are the .Id of the buttons and values that are the button names or whatever, so instead of a long if/elif chain you do a single dict lookup in buttonClick."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".Id", "childNum": 0, "tag": "code", "childList": []}, {"text": "if/elif", "childNum": 0, "tag": "code", "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}, {"text": "buttonClick", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Code snippets: in __init__, add creation and update of the dict:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n self.panel1 = wx.Panel(self, -1)\nself.thebuttons = dict()\n\nself.button1 = wx.Button(self.panel1, id=-1,\n    pos=(10, 20), size = (20,20))\nself.thebuttons[self.button1.Id] = 'Button 1'\nself.button1.Bind(wx.EVT_BUTTON, self.buttonClick)\n</code>\n</pre>\n", "senID": 2}, {"text": ["and so on for 50 buttons (or whatever) [they might be better created in a loop, btw;-)].", "So buttonClick becomes:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "buttonClick", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def buttonClick(self,event):\n       button_name = self.thebuttons.get(event.Id, '?No button?')\n       self.setTitle(button_name + ' clicked')\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You could create a dictionary of buttons, and do the look based on the id ... something like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "id", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class MyFrame(wx.Frame):\n   def _add_button (self, *args):\n      btn = wx.Button (*args)\n      btn.Bind (wx.EVT_BUTTON, self.buttonClick)\n      self.buttons[btn.id] = btn\n   def __init__ (self):\n      self.button = dict ()\n      self._add_button (self.panel1, id=-1,\n        pos=(10, 20), size = (20,20))\n\n    self._add_button = (self.panel1, id=-1,\n        pos=(40, 20), size = (20,20))\n\n    self.Show (True)\n\n   def buttonClick(self,event):\n      self.SetTitle (self.buttons[event.Id].label)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I ran into a similar problem: I was generating buttons based on user-supplied data, and I needed the buttons to affect another class, so I needed to pass along information about the buttonclick.", "What I did was explicitly assign button IDs to each button I generated, then stored information about them in a dictionary to lookup later."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would have thought there would be a prettier way to do this, constructing a custom event passing along more information, but all I've seen is the dictionary-lookup method.", "Also, I keep around a list of the buttons so I can erase all of them when needed."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's a slightly scrubbed code sample of something similar:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n self.buttonDefs = {}\nself.buttons = []\nid_increment = 800\nif (row, col) in self.items:\n    for ev in self.items[(row, col)]:\n        id_increment += 1\n        #### Populate a dict with the event information\n        self.buttonDefs[id_increment ] = (row, col, ev['user'])\n        ####\n        tempBtn = wx.Button(self.sidebar, id_increment , \"Choose\",\n                            (0,50+len(self.buttons)*40), (50,20) )\n        self.sidebar.Bind(wx.EVT_BUTTON, self.OnShiftClick, tempBtn)\n        self.buttons.append(tempBtn)\n\ndef OnShiftClick(self, evt):\n    ### Lookup the information from the dict\n    row, col, user = self.buttonDefs[evt.GetId()]\n    self.WriteToCell(row, col, user)\n    self.DrawShiftPicker(row, col)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I needed to do the same thing to keep track of button-presses .", "I used a lambda function to bind to the event .", "That way I could pass in the entire button object to the event handler function to manipulate accordingly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class PlatGridderTop(wx.Frame):\n        numbuttons = 0\n        buttonlist = []\n\n\n        def create_another_button(self, event): # wxGlade: PlateGridderTop.&lt;event_handler&gt;\n                buttoncreator_id = wx.ID_ANY\n                butonname = \"button\" + str(buttoncreator_id)\n                PlateGridderTop.numbuttons = PlateGridderTop.numbuttons + 1\n                thisbutton_number = PlateGridderTop.numbuttons\n\n                self.buttonname  =  wx.Button(self,buttoncreator_id ,\"ChildButton %s\" % thisbutton_number )\n                self.Bind(wx.EVT_BUTTON,lambda event, buttonpressed=self.buttonname: self.print_button_press(event,buttonpressed),self.buttonname)\n                self.buttonlist.append(self.buttonname)\n                self.__do_layout()\n                print \"Clicked plate button %s\" % butonname\n                event.Skip()\n       def print_button_press(self,event,clickerbutton):\n               \"\"\"Just a dummy method that responds to a button press\"\"\"\n               print \"Clicked a created button named %s with wxpython ID %s\" % (clickerbutton.GetLabel(),event.GetId())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Disclaimer : This is my first post to stackoverflow  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]