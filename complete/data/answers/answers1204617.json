[[{"text": ["A Python script to do the same:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os.path, shutil\n\ndef remove_ext(arg, dirname, fnames):\n    argfiles = (os.path.join(dirname, f) for f in fnames if f.endswith(arg))\n    for f in argfiles:\n        shutil.move(f, f[:-len(arg)])\n\nos.path.walk('/some/path', remove_ext, '.tex')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One way, not necessarily the fastest (but at least the quickest developed):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["pax> for i in *.c */*.c */*/*.c ; do\n    ...> j=$(echo \"$i\" | sed 's/\\.c$//')\n    ...> echo mv \"$i\" \"$j\"\n    ...> done"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "pax> for i in *.c */*.c */*/*.c ; do\n    ...> j=$(echo \"$i\" | sed 's/\\.c$//')\n    ...> echo mv \"$i\" \"$j\"\n    ...> done", "childNum": 0, "tag": "pre", "childList": []}]}, {"text": ["It's equivalent since your maxdepth is 2.", "The script is just echoing the mv command at the moment (for test purposes) and working on C files (since I had no tex files to test with)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "mv", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "tex", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Or, you can use find with all its power thus:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["pax> find .", "-maxdepth 2 -name '*.tex' | while read line ; do\n    ...> j=$(echo \"$line\" | sed 's/\\.tex$//')\n    ...> mv \"$line\" \"$j\"\n    ...> done"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "pax> find . -maxdepth 2 -name '*.tex' | while read line ; do\n    ...> j=$(echo \"$line\" | sed 's/\\.tex$//')\n    ...> mv \"$line\" \"$j\"\n    ...> done", "childNum": 0, "tag": "pre", "pos": -1, "childList": []}]}], [{"text": ["Using bash, find and mv from your base directory. "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "bash", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "find", "childNum": 0, "tag": "code", "childList": []}, {"text": "mv", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for i in $(find . -type f -maxdepth 2 -name \"*.tex\"); \n do \n    mv $i $(echo \"$i\" | sed 's|.tex$||'); \n done\n</code>\n</pre>\n", "senID": 1}, {"tag": "hr", "senID": 2}, {"text": ["Variation 2 based on other answers here."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Variation 2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n find . -type f -maxdepth 2 -name \"*.tex\" | while read line; \ndo \n   mv \"$line\" \"${line%%.tex}\";  \ndone\n</code>\n</pre>\n", "senID": 4}, {"tag": "hr", "senID": 5}, {"text": ["PS: I did not get the part about escaping '.", "' by pax..."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": ".", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "pax", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Using \"for i in\" may cause \"too many parameters\" errrors"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A better approach is to pipe find onto the next process."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n find . -type f -name \"*.tex\" | while read file\ndo\n    mv $file ${file%%tex}g\ndone\n</code>\n</pre>\n", "senID": 3}, {"text": ["(Note: Wont handle files with spaces)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["There's an excellent Perl rename script that ships with some distributions, and otherwise you can find it on the web.", "(I'm not sure where it resides officially, but this is it).", "Check if your rename was written by Larry Wall (AUTHOR section of man rename).", "It will let you do something like:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "this is it", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://tips.webdesign10.com/files/rename.pl.txt"}, {"text": "man rename", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n find . [-maxdepth 2] -name \"*.tex\" -exec rename 's/\\.tex//' '{}' \\;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Using -exec is simplest here because there's only one action to perform, and it's not too expensive to invoke rename multiple times.", "If you need to do multiple things, use the \"while read\" form:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n find . [-maxdepth 2] -name \"*.tex\" | while read texfile; do rename 's/\\.tex//' $texfile; done\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you have something you want to invoke only once:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n find . [-maxdepth 2] -name \"*.tex\" | xargs rename 's/\\.tex//'\n</code>\n</pre>\n", "senID": 5}, {"text": ["That last one makes clear how useful rename is - if everything's already in the same place, you've got a quick regexp renamer."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["In Ruby, to rename the file:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def rename_tex(dir)\n  Dir.entries(dir).each do |file|\n    if file =~ /*\\.tex$/\n      File.rename(file, file[0, file.rindex('.')])\n    end\n  end\nend\n</code>\n</pre>\n", "senID": 1}, {"text": ["To just remove the extension (might not be exactly what you want, since your example has a .", "in the directory name):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def remove_tex(dir)\n  Dir.entries(dir).collect do |file|\n    if file =~ /*\\.tex$/\n      full_path = File.expand_path(file)\n      full_path[0, full_path.rindex('.')]\n    end\n  end.compact\nend\n</code>\n</pre>\n", "senID": 3}]]