[[{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n i = 5\nii = 10\nif i == 5 and ii == 10:\n      print \"i is 5 and ii is 10\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: Oh, and you dont need that semicolon on the last line (edit to remove it from my code)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["As pointed out, \"&amp;\" in python performs a bitwise and operation, just as it does in C#.", "and is the appropriate equivalent to the &amp;&amp; operator."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "&amp;&amp;", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Since we're dealing with booleans (i == 5 is True and ii == 10 is also True), you may wonder why this didn't either work anyway (True being treated as an integer quantity should still mean True &amp; True is a True value), or throw an exception (eg.", "by forbidding bitwise operations on boolean types)"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "i == 5", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "ii == 10", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["The reason is operator precedence.", "The \"and\" operator binds more loosely than ==, so the expression:    \"i==5 and ii==10\" is equivalent to: \"(i==5) and (ii==10)\""], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "childList": []}, {"text": "i==5 and ii==10", "childNum": 0, "tag": "code", "childList": []}, {"text": "(i==5) and (ii==10)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["However, bitwise &amp; has a higher precedence than \"==\" (since you wouldn't want expressions like \"a &amp; 0xff == ch\" to mean \"a &amp; (0xff == ch)\"), so the expression would actually be interpreted as:"], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "&amp;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "childList": []}, {"text": "a &amp; 0xff == ch", "childNum": 0, "tag": "code", "childList": []}, {"text": "a &amp; (0xff == ch)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n if i == (5 &amp; ii) == 10:\n</code>\n</pre>\n", "senID": 4}, {"text": ["Which is using python's operator chaining to mean: does the valuee of ii anded with 5 equal both i and 10.", "Obviously this will never be true."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["You would actually get (seemingly) the right answer if you had included brackets to force the precedence, so:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n if (i==5) &amp; (ii=10)\n</code>\n</pre>\n", "senID": 7}, {"text": ["would cause the statement to be printed.", "It's the wrong thing to do, however - \"&amp;\" has many different semantics to \"and\" - (precedence, short-cirtuiting, behaviour with integer arguments etc), so it's fortunate that you caught this here rather than being fooled till it produced less obvious bugs."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "&amp;", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "and", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The correct operator to be used are the keywords 'or' and 'and', which in your example, the correct way to express this would be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if i == 5 and ii == 10:\n    print \"i is 5 and ii is 10\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can refer the details in the \"Boolean Operations\" section in the language reference."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\"Boolean Operations\" section in the language reference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/expressions.html#boolean-operations"}]}], [{"text": ["You can also test them as a couple."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if (i,ii)==(5,10):\n    print \"i is 5 and ii is 10\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["&amp; is used for bit-wise comparison.", "use and instead.", "and btw, you don't need semicolon at the end of print statement."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "&amp;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "and", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["In python, we spell \"&amp;\" as \"and\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]