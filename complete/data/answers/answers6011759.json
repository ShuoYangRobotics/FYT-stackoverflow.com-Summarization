[[{"text": ["You have to assign [float(i) for i in xs] to something:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[float(i) for i in xs]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; new_list = [float(i) for i in xs]\n&gt;&gt;&gt; new_list\n[12.0, 10.0, 32.0, 3.0, 66.0, 17.0, 42.0, 99.0, 20.0]\n&gt;&gt;&gt; new_list[0]\n12.0\n&gt;&gt;&gt; new_list[5]\n17.0\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Unlike for loops that leave the last iteration bound to the variable the var inside a list comp stops existing after evaluation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Using map:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n xs = '12 10 32 3 66 17 42 99 20'.split()\nnew_xs = map(float, xs)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["i only exists inside the list comprehension."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You want to say:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n i = [float(i) for i in lst]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["This is something related to Python versions.", "Look:\nOn Python 2, if you do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; i = 1234\n&gt;&gt;&gt; j = [i for i in xrange(10)]\n&gt;&gt;&gt; print i\n9\n</code>\n</pre>\n", "senID": 1}, {"text": ["But this was fixed in Python 3:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; i = 1234\n&gt;&gt;&gt; j = [i for i in range(10)]\n&gt;&gt;&gt; print(i)\n1234\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you have Python 3.0 or superior, the variable will only be available in the comprehension.", "It will not affect the rest of the environment"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["As an alternative to assigning a name to your list comprehension, in Python interactive mode, the symbol _ is automatically assigned to the last expression evaluated by the interpreter.", "So you could do the following:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; xs = '12 10 32 3 66 17 42 99 20'.split()\n&gt;&gt;&gt; [float(i) for i in xs]\n[12.0, 10.0, 32.0, 3.0, 66.0, 17.0, 42.0, 99.0, 20.0]\n&gt;&gt;&gt; _\n[12.0, 10.0, 32.0, 3.0, 66.0, 17.0, 42.0, 99.0, 20.0]\n&gt;&gt;&gt; _[2]\n32.0\n&gt;&gt;&gt; _\n32.0\n</code>\n</pre>\n", "senID": 1}]]