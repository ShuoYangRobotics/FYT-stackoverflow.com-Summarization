[[{"text": ["list.append(1) is faster, because it doesn't create a temporary list object."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "list.append(1)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["From the Zen of Python:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Zen of Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}, {"text": ["So: list.append(1)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "list.append(1)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["These are two different operations, what you are doing with += is the extend operation.", "Here is what Python documents have to say about this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So in += you provide a list, in append you just add a new element."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Since there's also"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list.extend(l)\n</code>\n</pre>\n", "senID": 1}, {"text": ["which appends all elements of the given list, I would use"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n list.append(1)\n</code>\n</pre>\n", "senID": 3}, {"text": ["for symmetry and readability's sake."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["While most people here are preferring the append option, I personally prefer the other one because it looks nicer even though it may be slower (or maybe its optimized)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When you write lots of Python code, I don't usually see something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n list.append(1)\n</code>\n</pre>\n", "senID": 2}, {"text": ["It's more like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n somecollectionname.append(anotherelementname+5*10)\n</code>\n</pre>\n", "senID": 4}, {"text": ["So to me at least, it is nicer to see:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n somecollectionname += [anotherelementname+5*10]\n</code>\n</pre>\n", "senID": 6}, {"text": ["Because its easy to recognize at a glance that you are adding to a list.", "Having said that, I sometimes find myself using both forms."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["list.append(1)\nmore readable and to consistent with the context"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you've got a single element, a, that you want to add to your list l, then putting a into its own list and extending l with it seems like adding unnecessary complexity.", "I would thus prefer "], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "l", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "l", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n l.append(a)\n</code>\n</pre>\n", "senID": 1}, {"text": ["over"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n l += [a]\n</code>\n</pre>\n", "senID": 3}, {"text": ["If a is already a list, then choosing"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n l += a\n</code>\n</pre>\n", "senID": 5}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n l.extend(a)\n</code>\n</pre>\n", "senID": 7}, {"text": ["is a matter of preference, IMO.", "On the other hand, if you're going to be doing a lot of extends, you can get a performance boost by \"hoisting\" the method lookup:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n extend = l.extend\nfor sublist in bunch_of_lists:\n    extend(sublist)\n</code>\n</pre>\n", "senID": 9}, {"text": ["Finally, I think that the append operation isn't used too often in Pythonic code, because append is used very often in \"accumulator\" idioms, where I'd expect a more experienced Python programmer to use a list comprehension/etc."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["So instead of:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n l = []\nfor a in numbers:\n    l.append(str(a))\n</code>\n</pre>\n", "senID": 12}, {"text": ["You'd probably see:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n l = [str(a) for a in numbers]\n</code>\n</pre>\n", "senID": 14}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n l = map(str, numbers)\n</code>\n</pre>\n", "senID": 16}]]