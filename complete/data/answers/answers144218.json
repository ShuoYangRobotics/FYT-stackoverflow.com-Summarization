[[{"text": ["Changing the decimal working precision to 2 digits is not a good idea, unless you absolutely only are going to perform a single operation."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You should always perform calculations at higher precision than the level of significance, and only round the final result.", "If you perform a long sequence of calculations and round to the number of significant digits at each step, errors will accumulate.", "The decimal module doesn't know whether any particular operation is one in a long sequence, or the final result, so it assumes that it shouldn't round more than necessary.", "Ideally it would use infinite precision, but that is too expensive so the Python developers settled for 28 digits."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Once you've arrived at the final result, what you probably want is quantize:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n>>> (Decimal('1.00') / Decimal('3.00')).quantize(Decimal(\"0.001\"))\nDecimal(\"0.333\")\n</pre>\n", "senID": 3}, {"text": ["You have to keep track of significance manually.", "If you want automatic significance tracking, you should use interval arithmetic.", "There are some libraries available for Python, including pyinterval and mpmath (which supports arbitrary precision).", "It is also straightforward to implement interval arithmetic with the decimal library, since it supports directed rounding."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "pyinterval", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pyinterval.googlecode.com/"}, {"text": "mpmath", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/mpmath/"}]}, {"text": ["You may also want to read the Decimal Arithmetic FAQ: Is the decimal arithmetic \u2018significance\u2019 arithmetic?"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Decimal Arithmetic FAQ: Is the decimal arithmetic \u2018significance\u2019 arithmetic?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://speleotrove.com/decimal/decifaq4.html#signif"}]}], [{"text": ["Decimals won't throw away decimal places like that.", "If you really want to limit precision to 2 d.p.", "then try"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n decimal.getcontext().prec=2\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: You can alternatively call quantize() every time you multiply or divide (addition and subtraction will preserve the 2 dps)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["What's wrong with floating point?  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"%8.2e\"%  ( 1.0/3.0 )\n'3.33e-01'\n</code>\n</pre>\n", "senID": 1}, {"text": ["It was designed for scientific-style calculations with a limited number of significant digits."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Just out of curiosity...is it necessary to use the decimal module?", "Why not floating point with a significant-figures rounding of numbers when you are ready to see them?", "Or are you trying to keep track of the significant figures of the computation (like when you have to do an error analysis of a result, calculating the computed error as a function of the uncertainties that went into the calculation)?", "If you want a rounding function that rounds from the left of the number instead of the right, try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def lround(x,leadingDigits=0): \n    \"\"\"Return x either as 'print' would show it (the default) \n    or rounded to the specified digit as counted from the leftmost \n    non-zero digit of the number, e.g. lround(0.00326,2) --&gt; 0.0033\n    \"\"\" \n    assert leadingDigits&gt;=0 \n    if leadingDigits==0: \n            return float(str(x)) #just give it back like 'print' would give it\n    return float('%.*e' % (int(leadingDigits),x)) #give it back as rounded by the %e format\n</code>\n</pre>\n", "senID": 1}, {"text": ["The numbers will look right when you print them or convert them to strings, but if you are working at the prompt and don't explicitly print them they may look a bit strange:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lround(1./3.,2),str(lround(1./3.,2)),str(lround(1./3.,4))\n(0.33000000000000002, '0.33', '0.3333')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Decimal defaults to 28 places of precision.", "The only way to limit the number of digits it returns is by altering the precision."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"text": ["If I undertand Decimal correctly, the \"precision\" is the number of digits after the decimal point in decimal notation."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "decimal notation", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You seem to want something else: the number of significant digits.", "That is one more than the number of digits after the decimal point in scientific notation."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "scientific notation", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["I would be interested in learning about a Python module that does significant-digits-aware floating point point computations."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Take a look at my answer here:  stackoverflow thread"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "stackoverflow thread", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/158172/formatting-numbers-with-significant-figures-in-c/1987721#1987721"}]}, {"text": ["It isn't python but might point you in the right direction."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]