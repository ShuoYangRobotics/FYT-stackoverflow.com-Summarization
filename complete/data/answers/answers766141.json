[[{"text": ["Sure, the [::] is the extended slice operator.", "It allows you to take substrings.", "Basically, it works by specifying which elements you want as [begin:end:step], and it works for all sequences.", "Two neat things about it:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "[::]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "extended slice", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.3.5/whatsnew/section-slices.html"}]}, {"tag": "ul", "num": 2, "lis": [{"text": "You can omit one or more of the elements and it does \"the right thing\"", "tag": "none", "senID": 1}, {"text": "Negative numbers for begin, end, and step have meaning", "tag": "none", "senID": 2}]}, {"text": ["For begin and end, if you give a negative number, it means to count from the end of the sequence.", "For instance, if I have a list:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n l = [1,2,3]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then l[-1] is 3, l[-2] is 2, and l[-3] is 1.  "], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "l[-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "l[-2]", "childNum": 0, "tag": "code", "childList": []}, {"text": "l[-3]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For the step argument, a negative number means to work backwards through the sequence.", "So for a list::"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "step", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "backwards", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n l = [1,2,3,4,5,6,7,8,9,10]\n</code>\n</pre>\n", "senID": 7}, {"text": ["You could write l[::-1] which basically means to use a step size of -1 while reading through the list.", "Python will \"do the right thing\" when filling in the start and stop so it iterates through the list backwards and gives you [10,9,8,7,6,5,4,3,2,1].  "], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "l[::-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[10,9,8,7,6,5,4,3,2,1]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I've given the examples with lists, but strings are just another sequence and work the same way.", "So a[::-1] means to build a string by joining the characters you get by walking backwards through the string.  "], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "a[::-1]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["The \"-1\" part represents the \"step\" part of the slicing\u2014in this case, it goes through the string 1 character at a time, but backwards (a negative step means start from the end of the string).", "If you specify the step to be 2, for instance, you would get every other character of the string, starting with the first one.", "If you specify a step of -2, then you'd get every other character of the string, starting with the last character and working backwards."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, in a nutshell, if a = '12345':"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "a = '12345'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["a[::2]"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}, {"text": ["a[::-1]"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}, {"text": ["a[::-2]"], "childNum": 0, "tag": "code", "senID": 4, "childList": []}]}], [{"text": ["I think the following makes a bit more sense for print strings in reverse, but maybe that's just me:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for char in reversed( myString ):  \n  print( char, end = \"\" )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It's called Slice Notation in Python and you can read a bit more of how it works here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation"}]}], [{"text": ["http://www.python.org/doc/2.3.5/whatsnew/section-slices.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.python.org/doc/2.3.5/whatsnew/section-slices.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.3.5/whatsnew/section-slices.html"}]}, {"text": ["It's the extended slice notation:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n sequence[start:end:step]\n</code>\n</pre>\n", "senID": 2}, {"text": ["In this case, step -1 means backwards, and omitting the start and end means you want the whole string."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["It's using extended slicing - a string is a sequence in Python, and shares some methods with other sequences (namely lists and tuples).", "There are three parts to slicing - start, stop and step.", "All of them have default values - start defaults to 0, stop defaults to len(sequence), and step defaults to 1.", "By specifying [::-1] you're saying \"all the elements in sequence a, starting from the beginning, to the end going backward one at a time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This feature was introduced in Python 2.3.5, and you can read more in the What's New docs."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "What's New docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.3.5/whatsnew/section-slices.html"}]}], [{"text": ["[::-1] gives a slice of the string a. the full syntax is a[begin:end:step]\nwhich gives a[begin], a[begin+step], ... a[end-1].", "WHen step is negative, you start at end and move to begin."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a[begin:end:step]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Finally, begin defaults to the beginning of the sequence, end to the end, and step to -1."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["a string is essentially a sequence of characters and so the slicing operation works on it.", "What you are doing is in fact:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["-> get an slice of 'a' from start to end in steps of 1 backward."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I would do it like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n variable = \"string\"\nmessage = \"\"\nfor b in variable:\n    message = b+message\nprint (message)\n</code>\n</pre>\n", "senID": 1}, {"text": ["and it prints: gnirts"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]