[[{"text": ["Will throw a NameError exception:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "NameError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; val\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'val' is not defined\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can either catch that or use 'val' in dir(), i.e."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "'val' in dir()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n    val\nexcept NameError:\n    print(\"val not set\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if 'val' in dir():\n    print('val set')\nelse:\n    print('val not set')\n</code>\n</pre>\n", "senID": 5}], [{"text": ["A name does not exist unless a value is assigned to it.", "There is None, which generally represents no usable value, but it is a value in its own right."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In python, variables either refer to an object, or they don't exist.", "If they don't exist, you will get a NameError.", "Of course, one of the objects they might refer to is None."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n   val\nexcept NameError:\n   print \"val is not set\"\n\n\nif val is None:\n   print \"val is None\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Python, for a variable to exist, something must have been assigned to it.", "You can think of your variable name as a dictionary key that must have some value associated with it (even if that value is None)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n try:\n    print val\nexcept NameError:\n    print \"val wasn't set.\"\n</code>\n</pre>\n", "senID": 0}], [{"text": ["To add to phihag's answer: you can use dir() to get a list of all of the variables in the current scope, so if you want to test if var is in the current scope without using exceptions, you can do:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "phihag's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/664219/uninitialized-value-of-python/664222#664222"}, {"href": "http://docs.python.org/library/functions.html#dir", "text": "dir()", "childNum": 1, "tag": "a", "childList": [{"text": "dir()", "tag": "code"}]}, {"text": "dir()", "childNum": 0, "tag": "code", "childList": []}, {"text": "var", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n if 'var' in dir():\n    # var is in scope\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Q: How do I discover if a variable is defined at a point in my code?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Q: How do I discover if a variable is defined at a point in my code?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["A: Read up in the source file until you see a line where that variable is defined."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "A: Read up in the source file until you see a line where that variable is defined.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["This question leads on to some fun diversions concerning the nature of python objects and it's garbage collector:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's probably helpful to understand that all variables in python are really pointers, that is they are names in a namespace (implemented as a hash-table) whch point to an address in memory where the object actually resides. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Asking for the value of an uninitialized variable is the same as asking for the value of the thing a pointer points to when the pointer has not yet been created yet... it's obviously nonsense which is why the most sensible thing Python can do is throw a meaningful NameError."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Another oddity of the python language is that it's possible that an object exists long before you execute an assignment statement.", "Consider:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a = 1\n</code>\n</pre>\n", "senID": 4}, {"text": ["Did you magically create an int(1) object here?", "Nope - it already existed.", "Since int(1) is an immutable singleton there are already a few hundred pointers to it:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sys.getrefcount(a)\n592\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 6}, {"text": ["Fun, eh?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["EDIT: commment by JFS (posted here to show the code)"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 1 + 1\n&gt;&gt;&gt; sys.getrefcount(a) # integers less than 256 (or so) are cached\n145\n&gt;&gt;&gt; b = 1000 + 1000\n&gt;&gt;&gt; sys.getrefcount(b) \n2\n&gt;&gt;&gt; sys.getrefcount(2000)\n3\n&gt;&gt;&gt; sys.getrefcount(1000+1000)\n2\n</code>\n</pre>\n", "senID": 9}], [{"text": ["Usually a value of None is used to mark something as \"declared but not yet initialized; I would consider an uninitialized variable a defekt in the code"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]