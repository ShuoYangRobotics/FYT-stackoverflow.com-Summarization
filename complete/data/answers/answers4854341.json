[[{"text": ["In this case I whould use the re module"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; \n&gt;&gt;&gt; data = \"billg@microsoft.com;steve@apple.com;  dhh@37signals.com\"\n&gt;&gt;&gt; stuff = re.split(r\"\\s*[,;]\\s*\", data.strip())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Regular expressions are powerful, and probably the way to go here; but for something as simple as this, string methods are OK too.", "Here's a terse solution: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [s.strip() for s in s1.replace(',', ';').split(';')]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Test output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s1 = \"billg@microsoft.com,steve@apple.com, dhh@37signals.com\"\n&gt;&gt;&gt; s2 = \"  billg@microsoft.com;steve@apple.com;  dhh@37signals.com  \"\n&gt;&gt;&gt; print [s.strip() for s in s1.replace(',', ';').split(';')]\n['billg@microsoft.com', 'steve@apple.com', 'dhh@37signals.com']\n&gt;&gt;&gt; print [s.strip() for s in s2.replace(',', ';').split(';')]\n['billg@microsoft.com', 'steve@apple.com', 'dhh@37signals.com']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If it's only ';' or only ',' and you know which, use string.split:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 'adjifjdasf;jdiafjodafs;jdiajof'.split(';')\n['adjifjdasf', 'jdiafjodafs', 'jdiajof']\n</code>\n</pre>\n", "senID": 1}, {"text": ["http://docs.python.org/library/stdtypes.html#str.split"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#str.split", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#str.split"}]}, {"text": ["EDIT For whitespace you can also do:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; map(str.strip, 'adjifjdasf;jdiafjodafs ; jdiajof'.split(';'))\n['adjifjdasf', 'jdiafjodafs', 'jdiajof']\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You can use string.maketrans to replace multiple separators with spaces in a single pass"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n\ndata = \"one  two,  three ; four \"\nstuff = [i for i in data.translate(string.maketrans(\";,\", \"  \")).split()]\n\nprint stuff   # -&gt; ['one', 'two', 'three', 'four']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could do it using just Python's string manipulation facilities:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n\ns1 = \"billg@microsoft.com,steve@apple.com, dhh@37signals.com\"\ns2 = \"billg@microsoft.com;steve@apple.com;  dhh@37signals.com\"\n\nprint s1.translate(string.maketrans(';',','), string.whitespace).split(',')\n# ['billg@microsoft.com', 'steve@apple.com', 'dhh@37signals.com']\nprint s2.translate(string.maketrans(';',','), string.whitespace).split(',')\n# ['billg@microsoft.com', 'steve@apple.com', 'dhh@37signals.com']\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n data = '''   billg@microsoft.com,steve@apple.com, dhh@37signals.com  \n  billg@microsoft.com;steve@apple.com;\\t  \\rdhh@37signals.com       '''\n\nprint repr(data),'\\n'\n\nimport re\n\nprint re.findall('[^,\\s;]+', data)\n</code>\n</pre>\n", "senID": 0}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n '   billg@microsoft.com,steve@apple.com, dhh@37signals.com  \\n  billg@microsoft.com;steve@apple.com;\\t  \\rdhh@37signals.com       ' \n\n['billg@microsoft.com', 'steve@apple.com', 'dhh@37signals.com', 'billg@microsoft.com', 'steve@apple.com', 'dhh@37signals.com']\n</code>\n</pre>\n", "senID": 2}, {"text": ["notice the '\\n' , '\\t' and '\\r' in this data"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["def gen_list(file_path):\n    read= open(file_path, \"r\")\n    split1= read.split(\";\")\n    new_list= []\n    for i in split1:\n       split2 = i.split(\",\")\n       split_list = [item.strip() for item in split2 if \"@\" in item]\n       new_list.extend(split_list)\n       return new_list"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "def gen_list(file_path):\n    read= open(file_path, \"r\")\n    split1= read.split(\";\")\n    new_list= []\n    for i in split1:\n       split2 = i.split(\",\")\n       split_list = [item.strip() for item in split2 if \"@\" in item]\n       new_list.extend(split_list)\n       return new_list", "childNum": 1, "tag": "pre", "pos": 0, "childList": [{"text": "def gen_list(file_path):\n    read= open(file_path, \"r\")\n    split1= read.split(\";\")\n    new_list= []\n    for i in split1:\n       split2 = i.split(\",\")\n       split_list = [item.strip() for item in split2 if \"@\" in item]\n       new_list.extend(split_list)\n       return new_list", "tag": "code"}]}, {"text": "def gen_list(file_path):\n    read= open(file_path, \"r\")\n    split1= read.split(\";\")\n    new_list= []\n    for i in split1:\n       split2 = i.split(\",\")\n       split_list = [item.strip() for item in split2 if \"@\" in item]\n       new_list.extend(split_list)\n       return new_list", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["\n#\nThis works for both comma and ;.", "The number of lines can further be reduced"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]