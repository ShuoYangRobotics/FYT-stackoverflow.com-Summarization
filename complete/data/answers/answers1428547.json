[[{"text": ["I'd go for:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s=\"abcdefgh\"\nprint \"\".join(b+a for a,b in zip(s[::2],s[1::2]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["s[start:end:step] takes every step'th letter, zip matches them up pairwise, the loop swaps them, and the join gives you back a string."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["my personal favorite to do stuff pairwise:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def pairwise( iterable ):\n   it = iter(iterable)\n   return zip(it, it) # zipping the same iterator twice produces pairs\n\noutput = ''.join( b+a for a,b in pairwise(input))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n ''.join(s[i+1] + s[i] for i in range(0,len(s),2))\n</code>\n</pre>\n", "senID": 0}, {"text": ["Yes, I know it's less pythonic for using range, but it's short, and I probably don't have to explain it for you to figure out what it does."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I just noticed that none of the existing answers work if the length of the input is odd.", "Most of the answers lose the last character.", "My previous answer throws an exception."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "none", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["If you just want the last character tacked onto the end, you could do something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print \"\".join(map(lambda a,b:(b or '')+a, s[::2], s[1::2]))\n</code>\n</pre>\n", "senID": 2}, {"text": ["or in 2.6 and later:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n print \"\".join(b+a for a,b in izip_longest(s[::2],s[1::2], fillvalue=''))\n</code>\n</pre>\n", "senID": 4}, {"text": ["This is based on Anthony Towns's answer, but uses either map or izip_longest to make sure the last character in an odd-length string doesn't get discarded.", "The (b or '') bit in the map version is to convert the None that map pads with into ''."], "childNum": 7, "tag": "p", "senID": 5, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "izip_longest", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "(b or '')", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "childList": []}, {"text": "''", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Since in Python, every string is also an iterable, itertools comes in handy here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html"}]}, {"text": ["In addition to the functions itertools provides, the documentation also supplies lots of recipes."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from itertools import izip_longest\n\n# From Python 2.6 docs\ndef grouper(n, iterable, fillvalue=None):\n\t\"grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx\"\n\targs = [iter(iterable)] * n\n\treturn izip_longest(fillvalue=fillvalue, *args)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Now you can use grouper to group the string by pairs, then reverse the pairs, then join them back into a string."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n pairs = grouper(2, \"abcdefgh\")\nreversed_pairs = [''.join(reversed(item)) for item in pairs]\nprint ''.join(reversed_pairs)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["This may look a little scary, but I think you'd learn a lot deciphering the following idiom:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = \"abcdefgh\"\nprint ''.join(b+a for a,b in zip(*[iter(s)]*2))\n</code>\n</pre>\n", "senID": 1}]]