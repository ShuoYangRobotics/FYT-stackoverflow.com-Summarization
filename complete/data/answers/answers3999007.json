[[{"text": ["See the Python documentation for File Objects, specifically tell()."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "File Objects", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#file-objects"}, {"href": "http://docs.python.org/library/stdtypes.html#file.tell", "text": "tell", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f=open('test.txt','w')\n&gt;&gt;&gt; f.write(10*'a')\n&gt;&gt;&gt; f.tell()\n10L\n&gt;&gt;&gt; f.write(100*'a')\n&gt;&gt;&gt; f.tell()\n110L\n</code>\n</pre>\n", "senID": 2}], [{"text": ["See the tell() method on the stream object."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["if you are using this file for a logging purpose i suggest using the RotatingFileHandler in logging module like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "RotatingFileHandler", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/logging.html#rotating-file-handler"}]}, {"code": "<pre>\n<code>\n import logging\n\nfile_name = 'test.log'\n\ntest_logger = logging.getLogger('Test')\nhandler = logging.handlers.RotatingFileHandler(file_name, maxBytes=10**9)\ntest_logger.addHandler(handler)\n</code>\n</pre>\n", "senID": 1}, {"text": ["N.B: you can also use this method even if you don't use it for logging if you like doing hacks :)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I recommend counting.", "There's no internal language counter that I'm aware of.", "Somebody else mentioned using tell(), but an internal counter will take roughly the same amount of work and eliminate the constant OS calls."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "tell()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n #pseudocode\nif (written + sizeOfNew &gt; 1G) {\n    rotateFile()\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One fairly straight-forward approach is to subclass the builtin file class and have it keep track of the amount of output which is written to the file.", "Below is a some sample code showing how that might be done and it appears to mostly work. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "file", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I say mostly because the size of the files produced is sometimes slightly over the maximum while testing it, but that's because for the test the file was opened in text mode and on Windows all the '\\n' linefeed characters are being converted into '\\r\\n' (carriage-return, linefeed) pairs, which throws the size accumulator off.", "Also, as currently written, the bufsize argument that the standard file() and open() functions acceppt is not supported, so the system's default size and mode get used."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "'\\n'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'\\r\\n'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "bufsize", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "file()", "childNum": 0, "tag": "code", "childList": []}, {"text": "open()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Depending on exactly what you're doing the size issue may or may not be big problem -- for large maximum sizes it might thrown be off significantly.", "If anyone has a good platform-independent fix for this, by all means let it be known."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import os.path\nverbose = False\n\nclass LtdSizeFile(file):\n    ''' A file subclass which  limits size of file written to approximately \"maxsize\" bytes '''\n    def __init__(self, filename, mode='wt', maxsize=None):\n        self.root, self.ext = os.path.splitext(filename)\n        self.num = 1\n        self.size = 0\n        if maxsize is not None and maxsize &lt; 1:\n            raise ValueError('\"maxsize: argument should be a positive number')\n        self.maxsize = maxsize\n        file.__init__(self, self._getfilename(), mode)\n        if verbose: print 'file \"%s\" opened' % self._getfilename()\n\n    def close(self):\n        file.close(self)\n        self.size = 0\n        if verbose: print 'file \"%s\" closed' % self._getfilename()\n\n    def write(self, text):\n        lentext =len(text)\n        if self.maxsize is None or self.size+lentext &lt;= self.maxsize:\n            file.write(self, text)\n            self.size += lentext\n        else:\n            self.close()\n            self.num += 1\n            file.__init__(self, self._getfilename(), self.mode)\n            if verbose: print 'file \"%s\" opened' % self._getfilename()\n            self.num += 1\n            file.write(self, text)\n            self.size += lentext\n\n    def writelines(self, lines):\n        for line in lines:\n            self.write(line)\n\n    def _getfilename(self):\n        return '{0}{1}{2}'.format(self.root, self.num if self.num &gt; 1 else '', self.ext)\n\nif __name__=='__main__':\n    import random\n    import string\n\n    def randomword():\n        letters = []\n        for i in range(random.randrange(2,7)):\n            letters.append(random.choice(string.lowercase))\n        return ''.join(letters)\n\n    def randomsentence():\n        words = []\n        for i in range(random.randrange(2,10)):\n            words.append(randomword())\n        words[0] = words[0].capitalize()\n        words[-1] = ''.join([words[-1], '.\\n'])\n        return ' '.join(words)\n\n    lsfile = LtdSizeFile('LtdSizeTest.txt', 'wt', 100)\n    for i in range(100):\n        sentence = randomsentence()\n        if verbose: print '  writing: {!r}'.format(sentence)\n        lsfile.write(sentence)\n\n    lsfile.close()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I noticed an ambiguity in your question.", "Do you want the file to be (a) over (b) under (c) exactly 1GiB large, before switching?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's easy to tell if you've gone over.", "tell() is sufficient for that kind of thing; just check if tell() &gt; 1024*1024*1024: and you'll know."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "tell()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if tell() &gt; 1024*1024*1024:", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Checking if you're under 1GiB, but will go over 1GiB on your next write, is a similar technique.", "if len(data_to_write) + tell &gt; 1024*1024*1024: will suffice."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "if len(data_to_write) + tell &gt; 1024*1024*1024:", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["The trickiest thing to do is to get the file to exactly 1GiB.", "You will need to tell() the length of the file, and then partition your data appropriately in order to hit the mark precisely."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "tell()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Regardless of exactly which semantics you want, tell() is always going to be at least as slow as doing the counting yourself, and possibly slower.", "This doesn't mean that it's the wrong thing to do; if you're writing the file from a thread, then you almost certainly will want to tell() rather than hope that you've correctly preempted other threads writing to the same file.", "(And do your locks, etc., but that's another question."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "tell()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tell()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["By the way, I noticed a definite direction in your last couple questions.", "Are you aware of #twisted and #python IRC channels on Freenode (irc.freenode.net)?", "You will get timelier, more useful answers."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["~ C."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]