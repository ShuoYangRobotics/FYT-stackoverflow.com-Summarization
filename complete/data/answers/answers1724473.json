[[{"text": ["chr and ord convert characters from and to integers, respectively.", "So:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "chr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ord", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n chr(ord('a') + 5)\n</code>\n</pre>\n", "senID": 1}, {"text": ["is the letter 'f'."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "'f'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["ASCII math aside, you don't have to type your letters table by hand.", "The string constants in the string module provide what you were looking for."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "string constants", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#string-constants"}, {"text": "string module", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; string.ascii_uppercase[5]\n'F'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["chr(ord('a')+5)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You need to use the ord function, like print(ord('a')-5)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Edit: gah, I was too slow :)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n import string\nprint string.letters[n + is_upper*26]\n</code>\n</pre>\n", "senID": 0}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; n = 5\n&gt;&gt;&gt; is_upper = False\n&gt;&gt;&gt; string.letters[n+is_upper*26]\n'f'\n&gt;&gt;&gt; is_upper = True\n&gt;&gt;&gt; string.letters[n+is_upper*26]\n'F'\n</code>\n</pre>\n", "senID": 2}], [{"text": ["if u want to go really out of the way (probably not very good) you could create a new class CharMath:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class CharMath:\n    def __init__(self,char):\n        if len(char) &gt; 1: raise IndexError(\"Not a single character provided\")\n        else: self.char = char\n    def __add__(self,num):\n        if type(num) == int or type(num) == float: return chr(ord(self.char) + num)\n        raise TypeError(\"Number not provided\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["The above can be used:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; CharMath(\"a\") + 5\n'f'\n</code>\n</pre>\n", "senID": 3}]]