[[{"text": ["I think you're looking for Python, because you can:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Focus on the algorithms themselves and not have to worry about other detail like memory management.  ", "tag": "none", "senID": 1}, {"text": "Do more with less code", "tag": "none", "senID": 2}, {"text": "The syntax is almost like working with pseudo code.", "tag": "none", "senID": 3}, {"text": "There is great built in language support for lists, tuples, list comprehensions, etc...", "tag": "none", "senID": 4}]}, {"text": ["But more specifically..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "If by ", "tag": "none", "senID": 6}, {"text": "If by ", "tag": "none", "senID": 7}]}], [{"text": ["Instead of focusing on the language, you should focus on the libraries available to you."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "libraries", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You shouldn't write your own graph library when there are already plenty (read, \"too many\") available, both in C++ and in Python.", "[Stack Overflow has a list of Python Graph packages with recommendations that you should check out.", "I didn't find an equivalent question for C++.", "You could start one.", "] Also, unless this is an academic excercise or research on truly novel graph algorithms, you should browse through the libraries available to see if any of them already implement those algorithms of interest to you."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "C++", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com/search?q=c%2B%2B+graph+library"}, {"text": "Python", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/PythonGraphApi"}, {"text": "list of Python Graph packages with recommendations", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/606516/python-graph-library"}]}, {"text": ["Using libraries mitigate the gain of the higher level language of Python, since you won't be working with raw C++ per se, but with a C++ library.", "Since the Python language has a very small core, it is fairly easy to learn, however, it still takes time.", "You will need factor in that additional time on top of learning a library, if you choose the Python route, so make sure to weigh that in your decision."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "per se", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Thus, given you already know C++, you may ultimately find it faster to develop in C++, since you only have to commit the time necessary to learn the library, not a library plus a new&mdash;albeit easy to learn&mdash;language."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["A bit subjective, but I'd vote for python because it has good libraries and abstracts a lot of the low level 'detail' that you'd have to consider when using c++..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I did all my algorithms work in college in C++ because I knew it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If I'd had to learn a language at the same time, I would have picked Python most likely."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I am under the impression that it really depends from what you mean by faster."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "faster", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Faster to develop: go python.", "Faster to run: go C++."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["However python can use a lot of external C libraries, so the difference in processing time might not be that relevant, depending on the type of implementation."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["At my university the 500 students in the \"Algorithms and Datastructures\" class get to choose the language they want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python is by far the most popular choice there, and personally I'm happy I also chose that, even though I already knew C++. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Agree with your friend - use Python and put them within a unit test framework."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I worked for a number of years with scientists who did a lot of their algorithmic work in Python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The example below shows typical tests (the import statement is for the stuff being tested),  with a couple of niceties that might save you some time."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The business with the save and restore of sys.path is so you can have all your tests sitting in a directory adjacent to the src directory, without having to install the source into your main Python modules."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["This test script is written so it can be imported into a larger suite of unit tests or simply run with python thisfile.py."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\"\"\"\nVRML Writer tests\n\"\"\"\n\nimport unittest\nimport os\nimport sys\n\nif __name__ == '__main__':\n    global save_syspath\n    save_syspath = sys.path\n    sys.path = [os.path.abspath(\"../src/\")] + sys.path\n\nfrom cgtools.VizValueTools import *\n\nif __name__ == '__main__':\n    sys.path = save_syspath  # RESTORE SYS.PATH\n\n# use some common constants to make tests easier\nMINV = 0.002\nMAXV = 12.789\n\nclass TestColdHotColorGeneration(unittest.TestCase):\n\n    def testGeneratesLimitValues(self):\n        assert generateColdHotColorValue(MINV, MAXV, MINV) == (0.0, 0.0, 1.0)\n        assert generateColdHotColorValue(MINV, MAXV, MAXV) == (1.0, 0.0, 0.0)\n        assert generateColdHotColorValue(0, 0, 0) == (1.0, 0.0, 0.0)  # cope with weird case where range is effectively one value, should be always top\n\n\n    def testGeneratesLimitValuesWithClipping(self):\n        assert generateColdHotColorValue(MINV, MAXV, MINV - 1.2) == (0.0, 0.0, 1.0)\n        assert generateColdHotColorValue(MINV, MAXV, MAXV + 49) == (1.0, 0.0, 0.0)\n\n\n    def testGeneratesMiddleValue(self):\n        \"\"\"\n        Note to be careful picking values so your value IS in the middle,\n        to generate pure green\n        \"\"\"\n        assert generateColdHotColorValue(1.0, 3.0, 2.0) == (0.0, 1.0, 0.0)\n\nif __name__ == '__main__':\n    # When this module is executed from the command-line, run all its tests\n    unittest.main()\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I would go for python.", "And if you really need the performance, then you can always write C/C++ extensions and use them in python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Algorithms are fine in Python (allthough you can only fly one OS scheduled python thread due to the global lock); however, when it comes to data structures + algorithms you need fixed complexity guarantees, and this case you mix Python with C."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I suppose what I have said applies more to long running computations.", "You can emulate data structures on-top of the python hashmap primitive."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I also vote for python.", "When do algorithm, we tend to work on the algorithm itself rather than language, low level details.", "Basically, we works on abstraction level.", "And using python, we're less likely to be side-tracked.", "But if you're very familiar and comfortable with C++ and can use it freely to express your idea, just use it. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["With C++, you'd sometimes be concentrating more on the language issues than the problem itself, so Python.", "I'd even be recommending you do it in a higher-level language like Matlab (although the language itself can be a bit ugly)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If using C++ means that STL is fair game, I'd say that it deserves serious consideration.", "STL is a fantastic library, combining structures, iterators, and algorithms.", "I love the Python recommendations, but if I could use STL I'd reconsider C++."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Remember that Python is compiled to bytecode and then interpreted in a VM.", "So, in performance isn't better (faster) than C++."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]