[[{"text": ["clean non global version."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import xmlrpclib\nimport httplib\n\nclass TimeoutHTTPConnection(httplib.HTTPConnection):\n   def connect(self):\n       httplib.HTTPConnection.connect(self)\n       self.sock.settimeout(self.timeout)\n\nclass TimeoutHTTP(httplib.HTTP):\n   _connection_class = TimeoutHTTPConnection\n   def set_timeout(self, timeout):\n       self._conn.timeout = timeout\n\nclass TimeoutTransport(xmlrpclib.Transport):\n    def __init__(self, timeout=10, *l, **kw):\n        xmlrpclib.Transport.__init__(self,*l,**kw)\n        self.timeout=timeout\n    def make_connection(self, host):\n        conn = TimeoutHTTP(host)\n        conn.set_timeout(self.timeout)\n        return conn\n\nclass TimeoutServerProxy(xmlrpclib.ServerProxy):\n    def __init__(self,uri,timeout=10,*l,**kw):\n        kw['transport']=TimeoutTransport(timeout=timeout, use_datetime=kw.get('use_datetime',0))\n        xmlrpclib.ServerProxy.__init__(self,uri,*l,**kw)\n\nif __name__ == \"__main__\":\n    s=TimeoutServerProxy('http://127.0.0.1:9090',timeout=2)\n    s.dummy()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I have looked at several ways to solve this issue and by far the most elegant is described here:\nhttps://seattle.cs.washington.edu/browser/seattle/trunk/demokit/timeout_xmlrpclib.py?rev=692"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "https://seattle.cs.washington.edu/browser/seattle/trunk/demokit/timeout_xmlrpclib.py?rev=692", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://seattle.cs.washington.edu/browser/seattle/trunk/demokit/timeout_xmlrpclib.py?rev=692"}]}, {"text": ["The technique was originally presented here, but this link is dead:\nhttp://blog.bjola.ca/2007/08/using-timeout-with-xmlrpclib.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://blog.bjola.ca/2007/08/using-timeout-with-xmlrpclib.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://seattle.cs.washington.edu/browser/seattle/trunk/demokit/timeout_xmlrpclib.py?rev=692"}]}, {"text": ["This works with Python 2.5 and 2.6.", "The new link claims to work with Python 3.0 as well."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["An more straightforward solution is at:\nhttp://www.devpicayune.com/entry/200609191448"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.devpicayune.com/entry/200609191448", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.devpicayune.com/entry/200609191448"}]}, {"code": "<pre>\n<code>\n import xmlrpclib \nimport socket\n\nx = xmlrpclib.ServerProxy('http:1.2.3.4')  \nsocket.setdefaulttimeout(10)        #set the timeout to 10 seconds \nx.func_name(args)                   #times out after 10 seconds\nsocket.setdefaulttimeout(None)      #sets the default back\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Based on the one from antonylesuisse, a working version (on python >= 2.6)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # -*- coding: utf8 -*-\nimport xmlrpclib\nimport httplib\nimport socket\n\nclass TimeoutHTTP(httplib.HTTP):\n   def __init__(self, host='', port=None, strict=None,\n                timeout=socket._GLOBAL_DEFAULT_TIMEOUT):\n        if port == 0:\n            port = None\n        self._setup(self._connection_class(host, port, strict, timeout))\n\nclass TimeoutTransport(xmlrpclib.Transport):\n    def __init__(self, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, *args, **kwargs):\n        xmlrpclib.Transport.__init__(self, *args, **kwargs)\n        self.timeout = timeout\n\n    def make_connection(self, host):\n        host, extra_headers, x509 = self.get_host_info(host)\n        conn = TimeoutHTTP(host, timeout=self.timeout)\n        return conn\n\nclass TimeoutServerProxy(xmlrpclib.ServerProxy):\n    def __init__(self, uri, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                 *args, **kwargs):\n        kwargs['transport'] = TimeoutTransport(timeout=timeout,\n                                    use_datetime=kwargs.get('use_datetime', 0))\n        xmlrpclib.ServerProxy.__init__(self, uri, *args, **kwargs)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's a same/similar question:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://stackoverflow.com/questions/366682/how-to-limit-execution-time-of-a-function-call-in-python"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/366682/how-to-limit-execution-time-of-a-function-call-in-python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/366682/how-to-limit-execution-time-of-a-function-call-in-python"}]}, {"text": ["A more general solution is to use threads, where a thread is created with a time out that wraps your function.", "Here's the recipe from:\nhttp://code.activestate.com/recipes/473878/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://code.activestate.com/recipes/473878/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/473878/"}]}, {"code": "<pre>\n<code>\n def timeout(func, args=(), kwargs={}, timeout_duration=1, default=None):\n    '''This function will spwan a thread and run the given function using the args, kwargs and \n    return the given default value if the timeout_duration is exceeded \n    ''' \n    import threading\n    class InterruptableThread(threading.Thread):\n        def __init__(self):\n            threading.Thread.__init__(self)\n            self.result = default\n        def run(self):\n            try:\n                self.result = func(*args, **kwargs)\n            except:\n                self.result = default\n    it = InterruptableThread()\n    it.start()\n    it.join(timeout_duration)\n    if it.isAlive():\n        return it.result\n    else:\n        return it.result\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here is code that works on Python 2.7 (probably for other 2.x versions of Python) without raising AttributeError, instance has no attribute 'getresponse'."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "AttributeError, instance has no attribute 'getresponse'", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class TimeoutHTTPConnection(httplib.HTTPConnection):\n    def connect(self):\n        httplib.HTTPConnection.connect(self)\n        self.sock.settimeout(self.timeout)\n\nclass TimeoutHTTP(httplib.HTTP):\n    _connection_class = TimeoutHTTPConnection\n\n    def set_timeout(self, timeout):\n        self._conn.timeout = timeout\n\nclass TimeoutTransport(xmlrpclib.Transport):\n    def __init__(self, timeout=socket._GLOBAL_DEFAULT_TIMEOUT, *args, **kwargs):\n        xmlrpclib.Transport.__init__(self, *args, **kwargs)\n        self.timeout = timeout\n\n    def make_connection(self, host):\n        if self._connection and host == self._connection[0]:\n            return self._connection[1]\n\n        chost, self._extra_headers, x509 = self.get_host_info(host)\n        self._connection = host, httplib.HTTPConnection(chost)\n        return self._connection[1]\n\n\ntransport = TimeoutTransport(timeout=timeout)\nxmlrpclib.ServerProxy.__init__(self, uri, transport=transport, allow_none=True)\n</code>\n</pre>\n", "senID": 1}]]