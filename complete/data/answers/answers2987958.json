[[{"text": ["Testing strings with is only works when the strings are interned.", "Unless you really know what you're doing and explicitly interned the strings you should never use is on strings. "], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "interned", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/String_interning"}, {"text": "never", "childNum": 0, "tag": "em", "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["is tests for identity, not equality.", "That means Python simply compares the memory address a object resides in.", "is basically answers the question \"Do I have two names for the same object?", "\" - overloading that would make no sense."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "identity", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "equality", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["For example, (\"a\" * 100) is (\"a\" * 100) is False.", "Usually Python writes each string into a different memory location, interning mostly happens for string literals."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "(\"a\" * 100) is (\"a\" * 100)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "False", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}], [{"text": ["The is operator is equivalent to comparing id(x) values.", "id is currently implemented to use pointers as the comparison.", "So you can't overload is itself, and AFAIK you can't overload id either."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "id(x)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "id", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "id", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So, you can't.", "Unusual in python, but there it is."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The Python is keyword tests object identity.", "You should NOT use it to test for string equality.", "It may seem to work frequently because Python implementations, like those of many very high level languages, performs \"interning\" of strings.", "That is to say that string literals and values are internally kept in a hashed list and those which are identical are rendered as references to the same object.", "(This is possible because Python strings are immutable)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["However, as with any implementation detail, you should not rely on this.", "If you want to test of equality use  the == operator.", "If you truly want to test for object identity then use is --- and I'd be hard-pressed to come up with a case where you should care about string object identity.", "Unfortunately you can't count on whether two strings are somehow \"intentionally\" identical object references because of the aforementioned interning."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you are not afraid of messing up with bytecode, you can intercept and patch COMPARE_OP with 8 (\"is\") argument to call your hook function on objects being compared.", "Look at dis module documentation for start-in."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "COMPARE_OP", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "8 (\"is\")", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "dis", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["And don't forget to intercept __builtin__.id() too if someone will do id(a) == id(b) instead of a is b."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "__builtin__.id()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "id(a) == id(b)", "childNum": 0, "tag": "code", "childList": []}, {"text": "a is b", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The is keyword compares objects (or, rather, compares if two references are to the same object)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Which is, I think, why there's no mechanism to provide your own implementation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It happens to work sometimes on strings because Python stores strings 'cleverly', such that when you create two identical strings they are stored in one object."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = \"string\"\n&gt;&gt;&gt; b = \"string\"\n&gt;&gt;&gt; a is b\nTrue\n&gt;&gt;&gt; c = \"str\"+\"ing\"\n&gt;&gt;&gt; a is c\nTrue\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can hopefully see the reference vs data comparison in a simple 'copy' example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = {\"a\":1}\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; c = a.copy()\n&gt;&gt;&gt; a is b\nTrue\n&gt;&gt;&gt; a is c\nFalse\n</code>\n</pre>\n", "senID": 5}], [{"text": ["is fails to compare a string variable to string value and two string variables when the string starts with '-'.", "My Python version is 2.6.6"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = '-hi'\n&gt;&gt;&gt; s is '-hi'\nFalse \n&gt;&gt;&gt; s = '-hi'\n&gt;&gt;&gt; k = '-hi'\n&gt;&gt;&gt; s is k \nFalse\n&gt;&gt;&gt; '-hi' is '-hi'\nTrue\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can't overload the is operator.", "What you want to overload is the == operator.", "This can be done by defining a __eq__ method in the class."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__eq__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}]]