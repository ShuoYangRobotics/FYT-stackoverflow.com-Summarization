[[{"text": ["Consider breaking the try/except structure into a function that returns True if the call worked and False if it failed, then use e.g.", "all() to see that they all succeded:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "try/except", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "all()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def initfunc(structure, attrname, address, desc):\n  try:\n    var = Voltmeter(address.value)\n    setattr(structure, attrname, var)\n    return True\n  except(visa.VisaIOError):\n    structure.logger.warning('%s is not on or not on this channel' % (desc,))\n\nif all([initfunc(*x) for x in [(private, 'anodization_voltage_meter', voltage_meter_address, 'Volt Meter'), ...]]):\n  private.logger.info('Meters initialized')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Personally I'd just have a trip variable init_ok or somesuch."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "init_ok", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Set it as True, and have all the except clauses set it False, then test at the end?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Try something like this.", "keeping the original behaviour of not stopping after the first exception"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n success = True\nfor meter, address, message in (\n        ('anodization_voltage_meter',voltage_meter_address,'Volt Meter is not on or not on this channel'),\n        ('anodization_current_meter',current_meter_address,'Ammeter is not on or not on this channel'),\n        ('sample_thermometer',sample_thermometer_address,'Sample Thermometer is not on or not on this channel'),\n        ('heater_thermometer',heater_thermometer_address,'Heater Thermometer is not on or not on this channel')):\n   try:\n       setattr(private,meter, Voltmeter(address.value):\n   except (visa.VisaIOError,):\n       success = False\n       private.logger.warning(message)\n\nif success: # everything is ok\n    private.logger.info('Meters initialized')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You've got a number of quite similar objects, and in cases like that it's often better to treat them uniformly and use a data-driven approach."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, I'd start with your ..._meter_address objects.", "To me they sound like configuration for the meters, so I'd have a class that looks something like this:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "..._meter_address", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class MeterConfiguration(object):\n    def __init__(self, name, address):\n        self.name = name\n        self.address = address\n\n    def english_name(self):\n        \"\"\"A readable form of the name for this meter.\"\"\"\n        return ' '.join(x.title() for x in self.name.split('_')) + ' Meter'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Perhaps you have some more configuration (currently stored in variables) that could go in here too."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Then, I'd have a summary of all the meters that your program deals with.", "I'm creating these statically, but it may well be right for you to read all or part of this information from a config file.", "I've no idea what your addresses look like, so I made something up :)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n ALL_METERS = [\n    MeterConfiguration('anodization_voltage', 'PORT0001'),\n    MeterConfiguration('anodization_current', 'PORT0002'),\n    MeterConfiguration('sample_thermometer', 'PORT0003'),\n    MeterConfiguration('heater_thermometer', 'PORT0004')\n]\n</code>\n</pre>\n", "senID": 5}, {"text": ["Cool, now all configuration is in one place, and we can use this to make things uniform and simpler."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n private.meters = {}\nany_errors = False\nfor meter in ALL_METERS:\n    try:\n        private.meters[meter.name] = Voltmeter(meter.address)\n    except VisaError:\n        logging.error('%s not found at %s', meter.english_name(), meter.address)\n        any_errors = True\nif not any_errors:\n    logging.info('All meters initialized.')\n</code>\n</pre>\n", "senID": 7}, {"text": ["You can use, for example private.meters['anodization_voltage'] to refer to a particular meter, or iterate over the meters dict if you need to do something to them all."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "private.meters['anodization_voltage']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You can keep a boolean, initialized at the beginning to: everythingOK=True\nThen set it to false in all the except blocks and log the final line only if true."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n allDone = 0\ntry: #1\n    ...\n    allDone += 1\nexcept:\n    ...\ntry: #2\n    ...\n    allDone += 1\nexcept:\n    ...\ntry: #3\n    ...\n    allDone += 1\nexcept:\n    ...\n\nif allDone == 3:\n    # execute this block only when all the try blocks and none of the except blocks were executed\n</code>\n</pre>\n", "senID": 0}]]