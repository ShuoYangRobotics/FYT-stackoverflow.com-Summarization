[[{"text": ["You could use "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [(int(x) if x else 0) for x in data.split(',')]\n</code>\n</pre>\n", "senID": 1}, {"text": ["data.split(',') splits the string into a list.", "It splits on the comma character:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "data.split(',')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ['8', '5', '', '1', '4', '7', '', '', '', ...]\n</code>\n</pre>\n", "senID": 3}, {"text": ["The expression"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n (int(x) if x else 0)\n</code>\n</pre>\n", "senID": 5}, {"text": ["returns int(x) if x is True, 0 if x is False.", "Note that the empty string is False."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "int(x)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Regular expressions are often unnecessary in Python.", "Given string s, try:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ','.join(x or '0' for x in s.split(','))\n</code>\n</pre>\n", "senID": 1}, {"text": ["I am assuming you want to fill the blanks with 0.", "If you want a list of integers instead of a string, try this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [(x and int(x)) or 0 for x in s.split(',')]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n s = \"8,5,,1,4,7,,,,7,,1,9,3,6,,,8,6,3,9,,2,5,4,,,,,3,2,,,7,4,1,1,,4,,6,9,,5,,,,5,,,1,,6,3,,,6,5,,,,7,4,,1,7,6,,,,8,,5,,,7,1,,3,9,\"\ns = re.sub('((?&lt;=,)|^)(?=,|$)', '0', s)\nprint s\n</code>\n</pre>\n", "senID": 0}, {"text": ["Prints:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["8,5,0,1,4,7,0,0,0,7,0,1,9,3,6,0,0,8,6,3,9,0,2,5,4,0,0,0,0,3,2,0,0,7,4,1,1,0,4,0,6,9,0,5,0,0,0,5,0,0,1,0,6,3,0,0,6,5,0,0,0,7,4,0,1,7,6,0,0,0,8,0,5,0,0,7,1,0,3,9,0"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "8,5,0,1,4,7,0,0,0,7,0,1,9,3,6,0,0,8,6,3,9,0,2,5,4,0,0,0,0,3,2,0,0,7,4,1,1,0,4,0,6,9,0,5,0,0,0,5,0,0,1,0,6,3,0,0,6,5,0,0,0,7,4,0,1,7,6,0,0,0,8,0,5,0,0,7,1,0,3,9,0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s=\"8,5,,1,4,7,,,,7,,1,9,3,6,,,8,6,3,9,,2,5,4,,,,,3,2,,,7,4,1,1,,4,,6,9,,5,,,,5,,,1,,6,3,,,6,5,,,,7,4,,1,7,6,,,,8,,5,,,7,1,,3,9,\"\n&gt;&gt;&gt; s=s.split(\",\")\n&gt;&gt;&gt; for n,i in enumerate(s):\n...     if i==\"\" : s[n]=0\n...\n&gt;&gt;&gt; s\n['8', '5', 0, '1', '4', '7', 0, 0, 0, '7', 0, '1', '9', '3', '6', 0, 0, '8', '6', '3', '9', 0, '2', '5', '4', 0, 0, 0, 0, '3', '2', 0, 0, '7', '4', '1', '1', 0, '4', 0, '6', '9', 0, '5', 0, 0, 0, '5', 0, 0, '1', 0, '6', '3', 0, 0, '6', '5', 0, 0, 0, '7', '4', 0, '1', '7', '6', 0, 0, 0, '8', 0, '5', 0, 0, '7', '1', 0, '3', '9', 0]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Simplest I can think of is"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [int(x or 0) for x in s.split(',')]\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [int('0'+x) for x in s.split(',')]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["My solution uses map,lambda, and split.", "The final code looks like this:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "lambda", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "split", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n sudoku_string = \"1,2,3,,4,5,,6\"\noutput_string = map(lambda x: '0' if x=='' else x, sudoku_string.split(\",\"))\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want the output as a list (i.e.", "[1,2,3,0,4,5,0,6]), then use"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[1,2,3,0,4,5,0,6]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n output_list = map(lambda x: 0 if x=='' else int(x), sudoku_string.split(\",\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["The commands map and lambda are very useful.", "map takes in a function and a list (really an iterable, but that's another story), and applies the function to every element of this list.", "So"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "lambda", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def plus_one(x):\n    return x+1\nmap(plus_one, [1,2,3,4])\n</code>\n</pre>\n", "senID": 5}, {"text": ["returns [2,3,4,5].", "lambda is a way to quickly define functions, so we can write plus_one as "], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "[2,3,4,5]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "lambda", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "plus_one", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n lambda x: x+1\n</code>\n</pre>\n", "senID": 7}, {"text": ["Lastly, split takes a string and creates a list  by 'splitting' the string by the argument you pass.", "So \"1 2 3 4\".split(\" \") yields [1,2,3,4]."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "split", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"1 2 3 4\".split(\" \")", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "[1,2,3,4]", "childNum": 0, "tag": "code", "childList": []}]}]]