[[{"text": ["Your method is fine (other than the extra comma not needed for a 1-list); people have done it this way for a long time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I am not sure what you want to imply by using the , after var but generally you won;t need it.", "As you were trying to get other options here is another way to do"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": ",", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "var", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n lst.insert(0,var)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you are not intending to modify the original list you may want to copy it to another list"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n newList=lst[::]\n</code>\n</pre>\n", "senID": 3}, {"text": ["and then do the insert"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n lst.insert(0,var)\n</code>\n</pre>\n", "senID": 5}, {"text": ["It's a matter of style but I prefer"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n newList=[var]+lst\n</code>\n</pre>\n", "senID": 7}, {"text": ["Note**\nGenerally if you are not intending to modify the original list, "], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "*", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n newlst = [var] + lst\n</code>\n</pre>\n", "senID": 9}, {"text": ["looks cleaner"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["but in case you want to modify in place your options are"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n lst = [var] + lst\n</code>\n</pre>\n", "senID": 12}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n lst.insert(0,var)\n</code>\n</pre>\n", "senID": 14}, {"text": ["The later one is preferable because it is more readable and moreover you can use it inside lambda and list-comprehension :-)"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}], [{"text": ["In general you want to avoid adding things to the start of a list in Python: it's O(n) in cost."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you have to (and often the inefficiency doesn't matter), you can do this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [a] + other_list\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you don't mind updating the list you have, you can do this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n other_list.insert(0, a)\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you can use an iterator rather than a list, you can efficiently use:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n itertools.chain([a], other_list)\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Use the append method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list.append(var)\n</code>\n</pre>\n", "senID": 1}, {"text": ["or insert of you want to place the new element in the beginning:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n list.insert(0,var)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["What about this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a_list = []\nv = 1\nlist_to_add = [2, 3, 4]\na_list.append(v)\na_list.extend(list_to_add)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For your reference, go through this LIST"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "LIST", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "LIST", "tag": "a"}]}, {"href": "http://docs.python.org/library/functions.html#list", "text": "LIST", "childNum": 0, "tag": "a", "childList": []}]}]]