[[{"text": ["Why don't you do it all in a single function -"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def processRecords():\n    print (\"grade report\\n\").center(60).upper()\n    print \"name\".upper(),\"course\".rjust(22).upper(),\"grade\".rjust(32).upper()\n    print \"-\" * 60\n\n    rec_count = 0\n    for line in open(\"grades.txt\",\"r\"):\n        name   = line[0:20]\n        course = line[20:50]\n        grade  = line[50:51]\n        print name, course.rjust(3), grade.rjust(3)\n        rec_count += 1\n    return rec_count\n</code>\n</pre>\n", "senID": 1}, {"text": ["All those functions compressed in this one single function.", "You seem to be programming much like C code.", "This is Python! "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Also try to avoid using globals unless you must.", "Just a principle I follow.", "Clearly in this situation you don't need to."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "globals", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You have to declare eof as global in readRecord():"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "eof", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "global", "childNum": 0, "tag": "code", "childList": []}, {"text": "readRecord()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def readRecord():\n    global eof, name, course, grade\n</code>\n</pre>\n", "senID": 1}, {"text": ["Otherwise, the changes you make to eof when studentRecord is empty won't survive outside readRecord()'s scope ."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "eof", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "studentRecord", "childNum": 0, "tag": "code", "childList": []}, {"text": "readRecord()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["In this design, \"eof\" needs to be addded to the globals list in readRecord()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Otherwise assigning it creates a new local variable, which processRecords() never sees."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You're missing a global here, while your while loop checks the global variable eof, your readRecord function does in fact set the local variable eof."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "eof", "childNum": 0, "tag": "code", "childList": []}, {"text": "readRecord", "childNum": 0, "tag": "code", "childList": []}, {"text": "local", "childNum": 0, "tag": "code", "childList": []}, {"text": "eof", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You need to add eof to the global variables in readRecord():"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ...\ndef readRecord():\n    global name, course, grade, eof\n...\n</code>\n</pre>\n", "senID": 1}, {"text": ["But your solution is a bit un-pythonic.", "How about something shorter and more flexible:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import re\nprint (\"grade report\\n\").center(60).upper()\nprint \"name\".upper(),\"course\".rjust(22).upper(),\"grade\".rjust(32).upper()\nprint \"-\" * 60\nfor line in open(\"grades.txt\"):\n    name, course, grade = re.split(\"   *\", line.strip())\n    print \"%-21s%-34s%-21s\" % (name, course, grade)\n\nraw_input(\"\\nRun complete. Press the Enter key to exit.\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["The regular expression is a very simple one that splits on multiple spaces.", "If you delimiter is something else, then replace the regular expression \"   *\" with your delimiter."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "\"   *\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["And here is a version that uses python dicts to track the courses and grades by student (i.e.", "your target output):"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n import re\n\nprint (\"grade report\\n\").center(60).upper()\nprint \"name\".upper(),\"course\".rjust(22).upper(),\"grade\".rjust(32).upper()\nprint \"-\" * 60\ngrades = {}\ntotal_courses = 0\nfor line in open(\"grades.txt\"):\n    name, course, grade = re.split(\"   *\", line.strip())\n    if not grades.get(name): grades[name] = []\n    grades[name].append([course, grade])\n\nfor name, data in grades.items():\n    for course, grade in data:\n        print \"%-21s%-34s%s\" % (name, course, grade)\n        name = \"\"\n    print \"%-21sTotal courses taken = %d\\n\" % (\" \", len(data))\n    total_courses += len(data)\n\nprint \"Total courses taken by all students = %d\" % total_courses\n\nraw_input(\"\\nRun complete. Press the Enter key to exit.\")\n</code>\n</pre>\n", "senID": 6}, {"text": ["BTW, it sounds like you need to learn more about python (and the python way of programming).", "I recommend Dive Into Python.", "IMO it's the fastest (and most entertaining) way to come up to speed in python if you are have some programming experience."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "learn more about python", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Dive Into Python", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://diveintopython.org/toc/index.html"}]}], [{"text": ["You have to add eof in the list of globals in readRecord."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "eof", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "readRecord", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["However, you said any help, so here's another version:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "any help", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import itertools as it, operator as op\nimport collections\n\nRecord= collections.namedtuple(\"Record\", \"name course grade\")\ngrouper= op.itemgetter(0) # or op.attrgetter('name')\n\ndef file_reader(fobj_in):\n    for line in fobj_in:\n        name= line[:20].rstrip()\n        course= line[20:50].rstrip()\n        grade= line[50:].rstrip()\n        yield Record(name, course, grade)\n\ndef process(fn_in, fobj_out):\n    for name, records in it.groupby(file_reader(fobj_in), grouper):\n        out_name= name\n        for index, record in enumerate(records, 1):\n            fobj_out.write(\n                \"%-20.19s%-36.35s%s\\n\" % (out_name, record.course, record.grade)\n            )\n            out_name= ''\n        fobj_out.write(\"%20sTotal courses taken = %d\\n\" % ('', index))\n\nif __name__ == \"__main__\":\n    import sys\n\n    with open('so4009899.txt', 'r') as fobj_in:\n        process(fobj_in, sys.stdout)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["If you have to use many functions for the purposes of 'structure', consider passing parameters to the functions instead of using globals.", "Here is a small change that illustrates my meaning."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "have", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def startUp():\n    print (\"grade report\\n\").center(60).upper()\n    print \"name\".upper(),\"course\".rjust(22).upper(),\"grade\".rjust(32).upper()\n    print \"-\" * 60\n    processRecords()\n\ndef processRecords():\n    numOfRecs = 0\n    for line in open(\"grades.txt\",\"r\"):\n        numOfRecs += 1\n        printLine(line)\n    return numOfRecs\n\ndef printLine(studentRecord):\n    name = studentRecord[0:20]\n    course = studentRecord[20:50]\n    grade = studentRecord[50:51]\n    print name, course.rjust(3), grade.rjust(3)\n\ndef closeUp(recordCount):\n    print \"\\nTotal courses taken by all students = \",recordCount\n\n\nstartUp()\n</code>\n</pre>\n", "senID": 1}]]