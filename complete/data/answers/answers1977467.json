[[{"text": ["scipy.interpolate.bisplrep"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Reference:\nhttp://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.bisplrep.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.bisplrep.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.bisplrep.html"}]}, {"code": "<pre>\n<code>\n import scipy\nimport math\nimport numpy\nfrom scipy import interpolate\n\n\nx= [1,2,3,4,5,6]\ny= [10,20,30]\n\nY = numpy.array([[i]*len(x) for i in y])\nX = numpy.array([x for i in y])\nZ = numpy.array([[2.3,3.4,5.6,7.8,9.6,11.2],\n                 [4.3,5.4,7.6,9.8,11.6,13.2],\n                 [6.3,7.4,8.6,10.8,13.6,15.2]]) \n\ntck = interpolate.bisplrep(X,Y,Z)\nprint interpolate.bisplev(3.5,15,tck) \n\n\n7.84921875\n</code>\n</pre>\n", "senID": 2}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Upper solution does not give you perfect fit.", "check   "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print interpolate.bisplev(x,y,tck)\n\n[[  2.2531746    4.2531746    6.39603175]\n [  3.54126984   5.54126984   7.11269841]\n [  5.5031746    7.5031746    8.78888889]\n [  7.71111111   9.71111111  10.9968254 ]\n [  9.73730159  11.73730159  13.30873016]\n [ 11.15396825  13.15396825  15.2968254 ]]\n</code>\n</pre>\n", "senID": 5}, {"text": ["to overcome this interpolate whit polyinomials of 5rd degree in x and 2nd degree in y direction  "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n tck = interpolate.bisplrep(X,Y,Z,kx=5,ky=2)\nprint interpolate.bisplev(x,y,tck) \n\n[[  2.3   4.3   6.3]\n [  3.4   5.4   7.4]\n [  5.6   7.6   8.6]\n [  7.8   9.8  10.8]\n [  9.6  11.6  13.6]\n [ 11.2  13.2  15.2]]\n</code>\n</pre>\n", "senID": 7}, {"text": ["This yield "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n print interpolate.bisplev(3.5,15,tck)\n\n7.88671875\n</code>\n</pre>\n", "senID": 9}, {"text": ["Plotting:\nreference http://matplotlib.sourceforge.net/examples/mplot3d/surface3d%5Fdemo.html"], "childNum": 3, "tag": "p", "senID": 10, "childList": [{"text": "Plotting:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://matplotlib.sourceforge.net/examples/mplot3d/surface3d%5Fdemo.html", "text": "http://matplotlib.sourceforge.net/examples/mplot3d/surface3d%5Fdemo.html", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n fig = plt.figure()\nax = Axes3D(fig)\nax.plot_surface(X, Y, Z,rstride=1, cstride=1, cmap=cm.jet)\nplt.show()\n</code>\n</pre>\n", "senID": 11}], [{"text": ["Given (not as Python code, since the second assignment would obliterate the first in each case, of course;-):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n y = 10\nx = [1,2,3,4,5,6]\nz = [2.3,3.4,5.6,7.8,9.6,11.2]\n\ny = 20 \nx = [1,2,3,4,5,6]\nz = [4.3,5.4,7.6,9.8,11.6,13.2]\n</code>\n</pre>\n", "senID": 1}, {"text": ["you ask: \"how can i find the value of z when y = 15 x = 3.5\"?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Since you're looking at a point exactly equidistant in both x and y from the given \"grid\", you just take the midpoint between the grid values (if you had values not equidistant, you'd take a proportional midpoint, see later).", "So for y=10, the z values for x 3 and 4 are 5.6 and 7.8, so for x 3.5 you estimate their midpoint, 6.7; and similarly for y=20 you estimate the midpoint between 7.6 and 9.8, i.e., 8.7.", "Finally, since you have y=15, the midpoint between 6.7 and 8.7 is your final interpolated value for z: 7.7."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Say you had y=13 and x=3.8 instead.", "Then for x you'd take the values 80% of the way, i.e."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["for y=10, 0.2*5.6+0.8*7.8 -> 7.36"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["for y=20, 0.2*7.6+0.8*9.8 -> 9.46"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]}, {"text": ["Now you want the z 30% of the way between these, 0.3*7.36 + 0.7*9.46 -> 8.83, that's z."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["This is linear interpolation, and it's really very simple.", "Do you want to compute it by hand, or find routines that do it for you (given e.g.", "numpy arrays as \"the grids\")?", "Even in the latter case, I hope this \"manual\" explanation (showing what you're doing in the most elementary of arithmetical terms) can help you understand what you're doing...;-)."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "linear interpolation", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "numpy", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["There are more advanced forms of interpolation, of course -- do you need those, or does linear interpolation suffice for your use case?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["Any one who can help , I think it is very basic but i am not getting it "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What is the function that generates z.", "What is the relation between x, y and z.", "What language are you using?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I would say just take the average of the values around it.", "So if you need X=3.5 and Y=15 (3.5,15), you average (3,10), (3,20), (4,10) and (4,20).", "Since I have no idea what the data is you are dealing with, I am not sure if the exact proximity would matter - in which case you can just stick w/the average - or if you need to do some sort of inverse distance weighting."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I am using python "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Z is the delays of a gate in circuit \nx is the load on the gate \ny is the rise time at the input "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["so for every rise time i will be having 6 different loads and therefore 6 different delays "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["There is some what linear relation ship but not exactly linear "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]