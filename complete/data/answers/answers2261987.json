[[{"text": ["Fundamentally it doesn't matter, such minutiae doesn't really affect whether something is 'pythonic' or not."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you're interested in trivia however, there are some differences."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So, while True: is a little easier to read, and while 1: is a bit kinder to old versions of Python.", "As you're unlikely to need to run on Python 2.2 these days or need to worry about the bytecode count of your loops, the former is marginally preferable."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "while True:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while 1:", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["The most pythonic way will always be the most readable.", "Use while True:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "while True:", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Neither."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Both of them mean I have to scan the code looking for the break, instead of being able to see the stop condition right where it belongs."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "break", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I try to avoid this kind of thing wherever possible, and if it's not possible, let the code speak for itself like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n while not found_answer:\n    check_number += 1\n    if check_number == 42:\n        found_answer = True\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit: It seems that the word \"avoid\" above wasn't clear enough.", "Using a basically infinite loop and leaving it from somewhere within the loop (using break) should usually be avoided altogether.", "Sometimes that isn't possible.", "In that case, I like to use something like the code above, which, however, still represents the same concept &ndash;  the above code is nothing more than a compromise &ndash; but at least, I can show the purpose of the loop at the beginning &ndash; just like I wouldn't call a  function do_something_with_args(*args)."], "childNum": 7, "tag": "p", "senID": 4, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "break", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "should usually be avoided altogether", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "which, however, still represents the same concept", "childNum": 0, "tag": "em", "pos": 3, "childList": []}, {"text": "the above code is nothing more than a compromise", "childNum": 0, "tag": "strong", "childList": []}, {"text": "at the beginning", "childNum": 0, "tag": "em", "childList": []}, {"text": "do_something_with_args(*args)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["It doesn't really matter.", "Neither is hard to read or understand, though personally I'd always use while True, which is a bit more explicit."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "while True", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["More generally, a whole lot of while\u2013break loops people write in Python could be something else.", "Sometimes I see people write i = 0; while True: i += 1 ..., which can be replaced with for i in itertools.count() and people writing while True: foo = fun() if foo is None: break when this can be written for foo in iter(fun, None), which requires learning but has less boilerplate and opportunity for silly mistakes."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "i = 0; while True: i += 1 ...", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "for i in itertools.count()", "childNum": 0, "tag": "code", "childList": []}, {"text": "while True: foo = fun() if foo is None: break", "childNum": 0, "tag": "code", "childList": []}, {"text": "for foo in iter(fun, None)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I think this is mostly a matter of style.", "Both should be easily understandable as an infinite loop. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, personally I prefer the second option.", "That's because it just takes a mental micro-step less to understand, especially for programmers without C background."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The first one will work also in those early versions where True is not yet defined. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["IMO the second option is more obvious."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "obvious", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["If you could get rid of the while and write more compact code, that might be more pythonic.", "For example:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n # Get the even numbers in the range 1..10\n# Version 1\nl = []\nn = 1\nwhile 1:\n    if n % 2 == 0: l.append(n)\n    n += 1\n    if n &gt; 10: break\nprint l\n\n# Version 2\nprint [i for i in range(1, 11) if i % 2 == 0]\n\n# Version 3\nprint range(2, 11, 2)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["If you have an algorithm that is suppose to terminate in a finite time, I would recommend this, which is always safer than while True:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "while True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n maxiter = 1000\nfor i in xrange(maxiter):\n   # your code\n   # on success:\n     break\nelse:\n   # that algorithm has not finished in maxiter steps! do something accordingly\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I believe the second expression is more explicit, and thus more pythonic. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pythonic", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"}]}], [{"text": ["This is only a matter of style, any programming beginner will understand either option."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But the second option will only work if True wasn't assigned to False, which was possible until Python 3:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; True = False\n&gt;&gt;&gt; True\nFalse\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The better way is \"while True\" with a conditional break out of the loop."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]