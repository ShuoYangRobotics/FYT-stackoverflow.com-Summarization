[[{"text": ["Yes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For one thing, as you note, all the documentation is written for Objective-C, which is a very different language."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["One difference is method name.", "In Objective-C, when you send a message to (Python would say \u201ccall a method of\u201d) an object, the method name (selector) and arguments are mixed:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n NSURL *URL = /*\u2026*/;\nNSError *error = nil;\n\nQTMovie *movie = [QTMovie movieWithURL:URL\n    error:&amp;error];\n</code>\n</pre>\n", "senID": 3}, {"text": ["This isn't possible in Python.", "Python's keyword arguments don't count as part of the method name, so if you did this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n movie = QTMovie.movieWithURL(URL, error = ???)\n</code>\n</pre>\n", "senID": 5}, {"text": ["you would get an exception, because the QTMovie class has no method named movieWithURL; the message in the Objective-C example uses the selector movieWithURL:error:.", "movieWithURL: and movieWithURL would be two other selectors."], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "movieWithURL", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "movieWithURL:error:", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "movieWithURL:", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "movieWithURL", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["There's no way they can change this, because Python's keyword arguments aren't ordered.", "Suppose you have a hypothetical three-argument method:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n foo = Foo.foo(fred, bar=bar, baz=baz)\n</code>\n</pre>\n", "senID": 8}, {"text": ["Now, this calls foo:bar:baz:, right?"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "foo:bar:baz:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Not so fast.", "Foo may also have a method named foo:baz:bar:.", "Because Python's keyword arguments aren't ordered, you may actually be calling that method.", "Likewise, if you tried to call foo:baz:bar:, you may actually end up calling foo:bar:baz:.", "In reality, this case is unlikely, but if it ever happens, you would be unable to reliably call either method."], "childNum": 3, "tag": "p", "senID": 10, "childList": [{"text": "foo:baz:bar:", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "foo:baz:bar:", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "foo:bar:baz:", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["So, in PyObjC, you would need to call the method like this:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n movie = QTMovie.movieWithURL_error_(URL, ???)\n</code>\n</pre>\n", "senID": 12}, {"text": ["You may be wondering about the ???.", "C doesn't allow multiple return values, so, in Objective-C, the error: argument takes a pointer to a pointer variable, and the method will store an object in that variable (this is called return-by-reference).", "Python doesn't have pointers, so the way the bridge handles arguments like this is that you pass None, and the method will (appear to) return a tuple.", "So the correct example is:"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "error:", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n movie, error = QTMovie.movieWithURL_error_(URL, None)\n</code>\n</pre>\n", "senID": 14}, {"text": ["You can see how even a simple example deviates from what documentation might show you in Objective-C."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["There are other issues, such as the GIL.", "Cocoa apps are only going to get more concurrent, and you're going to want in on this, especially with tempting classes like NSOperation lying around.", "And the GIL is a serious liability, especially on multi-core machines.", "I say this as a Python guy myself (when not writing for Cocoa).", "As David Beazley demonstrates in that video, it's a cold, hard fact; there's no denying it."], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "the GIL is a serious liability, especially on multi-core machines", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://blip.tv/file/2232410"}]}, {"text": ["So, if I were going to switch away from Objective-C for my apps, I would take up MacRuby.", "Unlike with PyObjC and RubyCocoa, messages to Cocoa objects don't cross the language bridge; it's a from-the-ground-up Ruby implementation in Cocoa, with language extensions to better support writing Cocoa code in it."], "childNum": 1, "tag": "p", "senID": 17, "childList": [{"text": "MacRuby", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://macruby.org/"}]}, {"text": ["But that's too far ahead of you.", "You're just getting started.", "Start with Objective-C.", "Better to avoid all impedance mismatches between the language you're using and the one the documentation is written for by keeping them the same language."], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "all", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}, {"text": ["Plus, you'll find some bugs (such as messages to deceased objects) harder to diagnose without knowledge of how Objective-C works.", "You will write these bugs as a new Cocoa programmer, regardless of which language you're writing the code in."], "childNum": 1, "tag": "p", "senID": 19, "childList": [{"text": "will", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["So, learn C, then learn Objective-C. A working knowledge of both shouldn't take more than a few weeks, and at the end of it, you'll be better prepared for everything else."], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"text": ["I won't go into how I learned C; suffice to say that I do not recommend the way I did it.", "I've heard that this book is good, but I've never owned nor read it.", "I do have this book, and can confirm that it's good, but it's also not Mac-specific; skip the chapter on how to compile the code, and use Xcode instead."], "childNum": 2, "tag": "p", "senID": 21, "childList": [{"text": "this book", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/1430218096"}, {"text": "this book", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://oreilly.com/catalog/9781565923065/"}]}, {"text": ["As for Objective-C: The Hillegass book is the most popular, but I didn't use it.", "(I have skimmed it, and it looks good.", ") I read Apple's document on the language, then jumped right in to writing small Cocoa apps.", "I read some of the guides, with mixed results.", "There is a Currency Converter tutorial, but it didn't help me at all, and doesn't quite reflect a modern Cocoa app.", "(Modern apps still use outlets and actions, but also Bindings, and a realistic Currency Converter would be almost entirely a couple of Bindings."], "childNum": 4, "tag": "p", "senID": 22, "childList": [{"text": "The Hillegass book", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0321503619"}, {"text": "Apple's document on the language", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/"}, {"text": "the guides", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://developer.apple.com/mac/library/navigation/"}, {"text": "a Currency Converter tutorial", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjCTutorial/"}]}], [{"text": ["This really says it all: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["a comment in an answer to this question.", "This question is also interesting."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "this question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1359227/pyobjc-and-cocoa-on-snow-leopard"}, {"text": "This", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/426607/"}]}], [{"text": ["Second class citizen seems a bit strong.", "The Objective-C API's are available from Python as well, should you need them, and that's mostly if you want to make Cocoa apps.", "But then they are restricted to OS X anyway.", "Personally, I have no interest in building apps that isn't cross-platform, but that's me.", "That also means I haven't actually done this, so I don't know how tricky it is, but there was an article in the Python Magazine not long ago, and it didn't look that horrible."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The major drawback of Python is execution time, and that mainly comes from it being a dynamic language.", "This can be solved with Cython and C-extensions, etc, but then you get a mix of Python + ObjectiveC API's + Cython which can be daunting."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So it depends a lot of what kinds of applications you are going to make.", "Something uniquely OSX-ish that makes no sense anywhere else?", "ObjectiveC is probably the ticket.", "Cross-platform servers, well then Python rocks!", "Something else?", "Then it depends."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["DO NOT ATTEMPT to avoid learning objective-C if you're going to write apps for the Mac.", "The purpose of PyObjC and the other language bindings is to let you re-use existing libraries in your apps, not to let you avoid learning the native tools.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "DO NOT ATTEMPT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["This is something I've been wondering myself, and although I hope someone comes by with more experience, from what I know you will not be seriously constrained by Python itself.", "Along with Java and GCC, Python is an excellent way to write native cross-platform applications.", "Once you get the hang of it you should be able to map example code in Objective C to your Python code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Since you have access to all libraries and events, everything that you can do in Objective C will be there in Python.", "Of course, the more OS X-only calls and functions you use, the less easy it will be to port to another platform, but that's beside the point.", "Usually graphics programming  and working with device drivers is somewhat of a limiting factor - but in both cases I'm finding evidence of good support and community libraries (search for Python and Quartz, Lightblue, libhid, PyUSB, for some examples)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The decisive factor for me would be: what is the level of tooling and IDE support that is needed.", "Apple provides some great software for building new software, but then again with something like Pydev you've got a great place to write Python code too!", "http://pydev.org/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://pydev.org/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pydev.org/"}]}, {"text": ["So give it a try, I'm sure you won't regret it, and there will be a supportive community to draw on for help and insipiration."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You're going to need Objective-C: that's what all the tutorials, documentation, sample code, and everything is written in.", "In addition to a wilder variety of people being able to help you."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So learn ObjC first.", "If, on your second or third project, or a year down the road, you start a project that needs a Python module (like, say, Twisted, or SQLAlchemy.", "But a SERIOUS need like foundation of your app need, where the extra boost your app gets makes everything worth it), then you can write a PyObjC app and get a lot of the speed benefits of that language, with your background in Cocoa."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Just as an extra option, consider that wxPython can produce some pretty good applications on Mac as well as on Linux and Windows.", "For the most part you can get native appearance but maintain portability with little or no attention to platform-specific issues."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "wxPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wxpython.org/"}]}, {"text": ["In other words, PyObjC + Python is not the only way to do Mac development with Python."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["No you dont need to know Objective C you dont need to use PyObjC , and you wont be a second class citizent. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Unless you want to do something extremely specific to the MAC platform , coding in Objective C or using PyObjC is a really bad idea. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The reason is obvious, once you go the objc route you say a big \"goodbye\" to other platforms.", "Its that simple. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Apple does not want you to code for other platforms the same way Microsoft does not want you to code for other platforms.", "And that is why more and more developers are turning to open source languages like, python, java, ruby etc.", "Because you dont care what Apple and Microsot , you only care about an App that is the most useful and most easy to develop.", "And making your App available only for MAC will make it less useful and obviously developing in Objective C is way more difficult. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Python has more than enough libraries to accomodate you , hundrends of them , readily available for the mac platform.", "I for instance develope a new application in pygame, no its not a game, if I have done the same thing in ObjC or PyObj I would have to rewrite the code for windows and linux.", "While with pygame my code works exactly the same in windows and linux even though my main platform is macos. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Thats the appeal of most python libraries , they are cross platform.", "WxPython is another example, someone mentioned that \"it does not exactly look natively\" , do you want this to stop you from making your application available for windows and linux.", "Why limit yourself only on the MAC platform ?", "Do you think the average user will care how natively your app will look.", "Even macos apps do not look native , many of them introduce their own \"eye candy\" gui.", "Not that you cant make WxPython look 100% native, the way you code is always importnat.  "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Objc makes sense when you intend to develop for Iphone OS , as Apple thought it a great idea to exclude python (and not only python), even though they were forced to include javascript (or else websurfing would have being a nightmare on iphoneos) .", "Pyjamas, can make python available for iphone os as well (with no hacks or jailbroken phones), but with the obvious limitations since it translates python code to javascript, but still its a valid solution till Apple decide that excluding python from iphone os is a really bad idea. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["link text"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "link text", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyjs.org/"}]}, {"text": ["There is no harm done in studying Objective C though.", "You can always use the native libraries via pyobjc. "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["But to be absolutely sincere with you, If my app reaches a dead end with the python libraries ( a very unlikely scenario) I would rather wrap an existing cross platform C/C++ Libraries with Cython than go the objective c pyobjc route and detroy the cross platform ability of my app.", "The last thing I would be using is anything platoform specifc."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Now if you dont care about other platforms at all, then I guess Objective C can be a valid choice.", "It certainly looks ugly as hell, but I have heard that it gets much better the more you use it and there are many people that prefer it over C/C++. "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]]