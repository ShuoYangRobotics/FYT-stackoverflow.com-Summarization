[[{"text": ["As answered in the official Python FAQ:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "official Python FAQ", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/faq/programming.html#how-do-i-copy-an-object-in-python"}]}, {"code": "<pre>\n<code>\n b = a[:]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Also, you can do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b = list(a)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will work for any sequence, even those that don't support indexers and slices..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["To copy a list you can use list(a) or a[:].", "In both cases a new object is created.", "These two methods, however, have limitations with collections of mutable objects as inner object keep their references intact:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "list(a)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a[:]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [[1,2],[3],[4]]\n\n&gt;&gt;&gt; b = a[:]\n&gt;&gt;&gt; c = list(a)\n\n&gt;&gt;&gt; c[0].append(9)\n\n&gt;&gt;&gt; a\n[[1, 2, 9], [3], [4]]\n&gt;&gt;&gt; c\n[[1, 2, 9], [3], [4]]\n&gt;&gt;&gt; b\n[[1, 2, 9], [3], [4]]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want a full copy of your objects you need copy.deepcopy"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "copy.deepcopy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/copy.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from copy import deepcopy\n&gt;&gt;&gt; a = [[1,2],[3],[4]]\n\n&gt;&gt;&gt; b = a[:]\n&gt;&gt;&gt; c = deepcopy(a)\n\n&gt;&gt;&gt; c[0].append(9)\n\n&gt;&gt;&gt; a\n[[1, 2], [3], [4]]\n&gt;&gt;&gt; b\n[[1, 2], [3], [4]]\n&gt;&gt;&gt; c\n[[1, 2, 9], [3], [4]]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["To create a copy of a list do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b = a[:]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["b = list(a)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "b = list(a)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["See http://henry.precheur.org/python/copy_list."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://henry.precheur.org/python/copy_list", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://henry.precheur.org/python/copy_list"}]}], [{"text": ["When you do b = a you simply create another pointer to the same memory of a,\nthat's why when you append to b , a changes too."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "b = a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "strong", "childList": []}, {"text": "b", "childNum": 0, "tag": "strong", "childList": []}, {"text": "a", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["You need to create copy of a and that's done like this:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "copy", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n b = a[:]\n</code>\n</pre>\n", "senID": 2}]]