[[{"text": ["The easiest option is to use .get():"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": ".get()", "tag": "a", "pos": 0, "childList": [{"text": ".get()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#dict.get"}, {"text": ".get()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n l = dict.get('link')\nt = dict.get('title')\nd = dict.get('description')\nk = dict.get('keyword')\n</code>\n</pre>\n", "senID": 1}, {"text": ["The t variable will then contain None (you can use dict.get('title', '') if you want an empty string, for example).", "Another option would be to catch the KeyError exception."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "t", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "dict.get('title', '')", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "KeyError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n t = dic.get('title')\n</code>\n</pre>\n", "senID": 0}, {"text": ["won't produce the error.", "it's equivalent to:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try:\n    t = dic['title']\nexcept KeyError:\n    t = None\n</code>\n</pre>\n", "senID": 2}, {"text": ["and please don't shadow built-in, don't use dict for a variable name.", "use something else."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["In this case, your best bet is to use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = dict.get('link', 'default')\nt = dict.get('title', 'default')\n</code>\n</pre>\n", "senID": 1}, {"text": ["etc."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Any values that weren't in the dictionary will be set to 'default' (or whatever you choose).", "Of course, you'll have to deal with this later..."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "'default'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Ever heard of Try Catch and exception handling?", "You can readup on them here"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/errors.html"}]}, {"text": ["However, you should shy away from causing errors on purpose, why do you have code that you know will fail? "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Try/except/finally; see the tutorial"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/errors.html"}]}, {"text": ["However, the main question is; why are you assigning these to variables in the first place instead of accessing the dictionary?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Use exceptions"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    l = dict['link']\n    t = dict['title']  \n    d = dict['description']\n    k = dict['keyword']\nexcept (RuntimeError, TypeError, NameError):\n    print ('something')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you want a way to consume exceptions and continue (though this is probably not a good idea) you could use a wrapper function such as:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def consume_exception(func, args, exception):\n    try:\n        return func(*args)\n    except exception:\n        return None\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or something like that."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Then call"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n l = consume_exception(dict.__getitem__, ['link'], KeyError)\nt = consume_exception(dict.__getitem__, ['title'], KeyError)\n...\n</code>\n</pre>\n", "senID": 4}]]