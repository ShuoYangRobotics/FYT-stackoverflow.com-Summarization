[[{"code": "<pre>\n<code>\n 1) Loop through every line in the log\n\n    a)If line matches appropriate Regex:\n\n      Display/Store Next Line as the item title.\n      Look for the next line containing \"Result \n      XXXX.\" and parse out that result for \n      including in the result set.\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT: added a bit more now that I see the result you're looking for."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I know you didn't ask for real code but this is too great an opportunity for a generator-based text muncher to pass up:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # data is a multiline string containing your log, but this\n# function could be easily rewritten to accept a file handle.\ndef get_stats(data):\n\n   title = \"\"\n   grab_title = False\n\n   for line in data.split('\\n'):\n      if line.startswith(\"=====\"):\n         grab_title = True\n      elif grab_title:\n         grab_title = False\n         title = line\n      elif line.startswith(\"Test finished.\"):\n         start = line.index(\"Result\") + 7\n         end   = line.index(\"Time\")   - 2\n         yield (title, line[start:end])\n\n\nfor d in get_stats(data):\n   print d\n\n\n# Returns:\n# ('This is the item title', 'Foo')\n# ('This is this items title', 'Bar')\n# ('This is the title of this item', 'FooBar')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Hopefully this is straightforward enough.", "Do ask if you have questions on how exactly the above works."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Maybe something like (log.log is your file):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "log.log", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def doOutput(s): # process or store data\n    print s\n\ns=''\nfor line in open('log.log').readlines():\n    if line.startswith('====='):\n        if len(s):\n            doOutput(s)\n            s=''\n    else:\n        s+=line\nif len(s):\n    doOutput(s)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I would recommend starting a loop that looks for the \"===\" in the line.", "Let that key you off to the Title which is the next line.", "Set a flag that looks for the results, and if you don't find the results before you hit the next \"===\", say no results.", "Else, log the results with the title.", "Reset your flag and repeat.", "You could store the results with the Title in a dictionary as well, just store \"No Results\" when you don't find the results between the Title and the next \"===\" line."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This looks pretty simple to do based on the output."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Regular expression with group matching seems to do the job in python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\ndata = \"\"\"===== Item 5483/14800  =====\nThis is the item title\nInfo: some note\n===== Item 5483/14800 (Update 1/3) =====\nThis is the item title\nInfo: some other note\n===== Item 5483/14800 (Update 2/3) =====\nThis is the item title\nInfo: some more notes\n===== Item 5483/14800 (Update 3/3) =====\nThis is the item title\nInfo: some other note\nTest finished. Result Foo. Time 12 secunds.\nStats: CPU 0.5 MEM 5.3\n===== Item 5484/14800  =====\nThis is this items title\nInfo: some note\nTest finished. Result Bar. Time 4 secunds.\nStats: CPU 0.9 MEM 4.7\n===== Item 5485/14800  =====\nThis is the title of this item\nInfo: some note\nTest finished. Result FooBar. Time 7 secunds.\nStats: CPU 2.5 MEM 2.8\"\"\"\n\n\np =  re.compile(\"^=====[^=]*=====\\n(.*)$\\nInfo: .*\\n.*Result ([^\\.]*)\\.\",\n                re.MULTILINE)\nfor m in re.finditer(p, data):\n     print \"title:\", m.group(1), \"result:\", m.group(2)er code here\n</code>\n</pre>\n", "senID": 1}, {"text": ["If You need more info about regular expressions check: python docs."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "python docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}], [{"text": ["This is sort of a continuation of maciejka's solution (see the comments there).", "If the data is in the file daniels.log, then we could go through it item by item with itertools.groupby, and apply a multi-line regexp to each item.", "This should scale fine."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import itertools, re\n\np = re.compile(\"Result ([^.]*)\\.\", re.MULTILINE)\nfor sep, item in itertools.groupby(file('daniels.log'),\n                                   lambda x: x.startswith('===== Item ')):\n    if not sep:\n        title = item.next().strip()\n        m = p.search(''.join(item))\n        if m:\n            print (title, m.group(1))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Parsing is not done using regex.", "If you have a reasonably well structured text (which it looks as you do), you can use faster testing (e.g.", "line.startswith() or such).", "A list of dictionaries seems to be a suitable data type for such key-value pairs.", "Not sure what else to tell you.", "This seems pretty trivial."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "hr", "senID": 1}, {"text": ["OK, so the regexp way proved to be more suitable in this case:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import re\nre.findall(\"=\\n(.*)\\n\", s)\n</code>\n</pre>\n", "senID": 3}, {"text": ["is faster than list comprehensions"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n [item.split('\\n', 1)[0] for item in s.split('=\\n')]\n</code>\n</pre>\n", "senID": 5}, {"text": ["Here's what I got:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; len(s)\n337000000\n&gt;&gt;&gt; test(get1, s) #list comprehensions\n0:00:04.923529\n&gt;&gt;&gt; test(get2, s) #re.findall()\n0:00:02.737103\n</code>\n</pre>\n", "senID": 7}, {"text": ["Lesson learned."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["You could try something like this (in c-like pseudocode, since i don't know python):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string line=getline();\nregex boundary=\"^==== [^=]+ ====$\";\nregex info=\"^Info: (.*)$\";\nregex test_data=\"Test ([^.]*)\\. Result ([^.]*)\\. Time ([^.]*)\\.$\";\nregex stats=\"Stats: (.*)$\";\nwhile(!eof())\n{\n  // sanity check\n  test line against boundary, if they don't match, throw excetion\n\n  string title=getline();\n\n  while(1)\n  {  \n    // end the loop if we finished the data\n    if(eof()) break;\n\n    line=getline();\n    test line against boundary, if they match, break\n    test line against info, if they match, load the first matched group into \"info\"\n    test line against test_data, if they match, load the first matched group into \"test_result\", load the 2nd matched group into \"result\", load the 3rd matched group into \"time\"\n    test line against stats, if they match, load the first matched group into \"statistics\"\n  }\n\n  // at this point you can use the variables set above to do whatever with a line\n  // for example, you want to use title and, if set, test_result/result/time.\n\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's some not so good looking perl code that does the job.", "Perhaps you can find it useful in some way.", "Quick hack, there are other ways of doing it (I feel that this code needs defending)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/perl -w\n#\n# $Id$\n#\n\nuse strict;\nuse warnings;\n\nmy @ITEMS;\nmy $item;\nmy $state = 0;\n\nopen(FD, \"&lt; data.txt\") or die \"Failed to open file.\";\nwhile (my $line = &lt;FD&gt;) {\n    $line =~ s/(\\r|\\n)//g;\n    if ($line =~ /^===== Item (\\d+)\\/\\d+/) {\n        my $item_number = $1;\n        if ($item) {\n            # Just to make sure we don't have two lines that seems to be a headline in a row.\n            # If we have an item but haven't set the title it means that there are two in a row that matches.\n            die \"Something seems to be wrong, better safe than sorry. Line $. : $line\\n\" if (not $item-&gt;{title});\n            # If we have a new item number add previuos item and create a new.\n            if ($item_number != $item-&gt;{item_number}) {\n                push(@ITEMS, $item);\n                $item = {};\n                $item-&gt;{item_number} = $item_number;\n            }\n        } else {\n            # First entry, don't have an item.\n            $item = {}; # Create new item.\n            $item-&gt;{item_number} = $item_number;\n        }\n        $state = 1;\n    } elsif ($state == 1) {\n        die \"Data must start with a headline.\" if (not $item);\n        # If we already have a title make sure it matches.\n        if ($item-&gt;{title}) {\n            if ($item-&gt;{title} ne $line) {\n                die \"Title doesn't match for item \" . $item-&gt;{item_number} . \", line $. : $line\\n\";\n            }\n        } else {\n            $item-&gt;{title} = $line;\n        }\n        $state++;\n    } elsif (($state == 2) &amp;&amp; ($line =~ /^Info:/)) {\n        # Just make sure that for state 2 we have a line that match Info.\n        $state++;\n    } elsif (($state == 3) &amp;&amp; ($line =~ /^Test finished\\. Result ([^.]+)\\. Time \\d+ secunds{0,1}\\.$/)) {\n        $item-&gt;{status} = $1;\n        $state++;\n    } elsif (($state == 4) &amp;&amp; ($line =~ /^Stats:/)) {\n        $state++; # After Stats we must have a new item or we should fail.\n    } else {\n        die \"Invalid data, line $.: $line\\n\";\n    }\n}\n# Need to take care of the last item too.\npush(@ITEMS, $item) if ($item);\nclose FD;\n\n# Loop our items and print the info we stored.\nfor $item (@ITEMS) {\n    print $item-&gt;{item_number} . \" (\" . $item-&gt;{status} . \") \" . $item-&gt;{title} . \"\\n\";\n}\n</code>\n</pre>\n", "senID": 1}]]