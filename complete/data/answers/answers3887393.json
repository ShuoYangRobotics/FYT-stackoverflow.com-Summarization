[[{"text": ["Maybe you could try Markdown instead, and convert it to HTML on the fly?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Markdown", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.freewisdom.org/projects/python-markdown/"}]}], [{"text": ["You don't necessarily need something complex - for instance, here's a ~150 line library to generate HTML in a functional manner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://github.com/Yelp/PushmasterApp/blob/master/pushmaster/taglib.py"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://github.com/Yelp/PushmasterApp/blob/master/pushmaster/taglib.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/Yelp/PushmasterApp/blob/master/pushmaster/taglib.py"}]}, {"text": ["(Full disclosure, I work with the person who originally wrote that version, and I also use it myself."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Why would a templating engine necessarily be overkill?", "You don't need the whole web framework just to use the templating engine (at least, for most templating engines).", "Mako for example can be used stand-alone just fine, and I often use it to generate html files (reports from a db and such)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Mako", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.makotemplates.org/"}]}], [{"text": ["i recommend having a look at shpaml"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "shpaml", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://shpaml.webfactional.com/"}]}], [{"text": ["If you have just some simple static HTML files.", "Then why not use string templates like so."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n\nTEMPLATE_FORMAT = \"\"\"\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;Trial&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"myclass\"&gt;$my_div_data&lt;/div&gt;\n&lt;/body&gt;\n\"\"\"\nmy_div_data = \"some_data_to_display_in_HTML\"\nTEMPLATE    = string.Template(TEMPLATE_FORMAT)\nhtml_data   = TEMPLATE.safe_substitute(my_div_data)\nopen(\"out.html\", \"w\").write(html_data)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Give this a shot if you don't have too big HTML files to generate.", "Saves you on the learning you need to do if you decide to use libraries. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["ElementTree can produce html with some limitations.", "I'd write it like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from xml.etree.ElementTree import ElementTree, Element, SubElement\nimport sys \n\nhtml = Element('html')\n\nhead = SubElement(html, 'head')\nstyle = SubElement(head, 'link')\nstyle.attrib = {'rel': 'stylesheet', 'href': 'style.css', 'type': 'text/css'}\nbody = SubElement(html, 'body')\n\npara = SubElement(body, 'p')\npara.text = 'Lorem ipsum sit amet'\n\ndoc = ElementTree(html)\ndoc.write(sys.stdout)\n</code>\n</pre>\n", "senID": 1}, {"text": ["In case of moderately complex html I'd stick with some templating engine: Jinja2, Mako, Cheetah, just to name a few."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]