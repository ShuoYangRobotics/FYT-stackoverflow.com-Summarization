[[{"text": ["EPD (Enthought Python Distribution) is great, but even for academics, you can only get the 32-bit version free of charge.", "If you intend to do anything ram-intensive, it's not really an option."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "you can only get the 32-bit version free of charge.  If you intend to do anything ram-intensive, it's not really an option.", "childNum": 0, "tag": "strike", "pos": -1, "childList": []}]}, {"text": ["Edit: This has since changed, and the 64-bit version is freely available for academic/educational use."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["On the other hand, the Intel MLK library does make a difference, and it has lots of nifty (e.g.", "the latest version of mayavi) things built that can otherwise be a real pain to build from source.", "Also, as others have said, you can just untar it into your home folder and run it.", "You shouldn't need root access. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EPD is an absolutely great option if you don't ever need to use more than 2GB of ram, but you will have to pay to get 64-bit builds."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Python(x,y) is great if you're on windows, but otherwise, good luck finding the linux pre-built binaries.", "They more-or-less no longer exist...", "The ubuntu repository seems to be permanently down, and I don't know of anywhere to get a pre-compiled tarball for it anymore.", "This may all change in the near future, though... Hopefully it does, because it would be a great option for you!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Honestly, if you just need numpy, scipy, and matplotlib, they're relatively easy to build from source (especially so if you can get away without scipy), and you can always just build your own python interpreter and then use easy_install to avoid having to build them from source.", "This, of course, assumes that a basic build environment (gcc, etc) are already installed on the machine you're using...  That's what I've done when I was in your situation, anyway..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["If you go that route, it's best to download the python source code and build your own python interpreter that you'll use for everything.", "Then install setuptools and easy_install the rest.", "(Alternately, you can download the source code for numpy, etc and build and install them in for the python interpreter you just built."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["This shows a basic idea how to build the basics (python, numpy, scipy, matplotlib, ipython) under a directory called \"pythondist\" in the current working directory."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n #! /bin/sh\n\nbuilddir=$(pwd)/pythondist\nmkdir -p $builddir/source\ncd $builddir/source\n\nwget 'http://python.org/ftp/python/2.6.5/Python-2.6.5.tgz'\nwget 'http://pypi.python.org/packages/source/s/setuptools/setuptools-0.6c11.tar.gz#md5=7df2a529a074f613b509fb44feefe74e'\ntar -xvzf Python-2.6.5.tgz\n\n# Build python\ncd $builddir/source/Python-2.6.5/\n\n# The --prefix argument is the key!\n./configure --prefix=$builddir\n\n# Be sure to speed things up with the -j option if you're \n# on a multicore machine (e.g. make -j 4 build for a quadcore)\nmake build \nmake install\n\n# Now install setuptools\ncd $builddir/source\ntar -xvzf setuptools-0.6c11.tar.gz\ncd setuptools-0.6c11/\n\n# The next key is to call this with the python you just built!\n$builddir/bin/python setup.py build\n$builddir/bin/python setup.py install\n\n# Now just install numpy, scipy, ipython, matplotlib, etc through easy_install\n$builddir/bin/easy_install numpy\n$builddir/bin/easy_install scipy\n$builddir/bin/easy_install matplotlib\n$builddir/bin/easy_install ipython\n</code>\n</pre>\n", "senID": 8}, {"text": ["EDIT: Minor typos in script.", "If numpy or scipy doesn't install properly from the egg, see the install notes. "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["This script is mainly intended to demonstrate building an independent python in your home directory, and assumes the system you're building on has the proper dependencies already installed, but it at least points you in the right direction.  "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["If numpy or scipy don't build properly using easy_install, download the source tarballs and try building building them from there using different arguments.", "(Numpy/Scipy's setup.py autodetecting the wrong fortran compiler is common problem, in my experience) E.g."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n cd $builddir/source\nwget http://sourceforge.net/projects/numpy/files/NumPy/1.4.1/numpy-1.4.1.tar.gz/download\ntar -xvzf numpy-1.4.1.tar.gz\ncd numpy-1.4.1/\n# If you don't specify an action (e.g. \"build\") this will enter an interactive\n# mode to help diagnose problems... See the INSTALL.txt file, too!\n$builddir/bin/python setup.py\n</code>\n</pre>\n", "senID": 12}, {"text": ["For example, on my OpenSUSE 11.2 system, I need to specify \"--fcompiler=gnu95\" when building numpy and scipy, as I have both g77 and gfortran installed.", "Otherwise things won't build correctly."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["However, on an older RHEL 3 system, it builds perfectly as-is from easy_install.", "YMMV, of course.", "Good luck!"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}], [{"text": ["If you are an academic, you can use the Enthought distribution free of charge.", "It comes with its own installer and handles installation for you.", "This will definitely be easier than installing matplotlib etc.", "from scratch on your own.", "There is no requirement for admin access on the installation machine because the distribution provides its own Python binaries.", "I've used it and found it simple and convenient."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "free of charge", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.enthought.com/products/edudownload.php"}]}], [{"text": ["I'd personally go for Sage on the basis of price.", "The main issue you will need to contend with is making sure you use your python install to access your libraries, regardless of the python suite you're using."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["SageMath is completely free (GPL compatible), and the first of the three main goals of the project is to be a self-contained distribution of open source math software, which is easy to install from source (or from a binary), despite its large size.", "You should be able to setup Sage or anything else in Sage (e.g., the web notebook) without needing root access."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SageMath", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sagemath.org"}]}], [{"text": ["python(x,y) is a free Python distribution similar to EPD (Enthought Python Distribution).", "While both include the basic standard libraries there are some differences, so you should find out which one is a better fit for your needs.", "One interesting aspect of EPD is that it recently adapted the Intel MKL library, so there might be performance advantages over both pythonxy and the standard numpy installer."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "python(x,y)", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonxy.com/"}, {"text": "Intel MKL library", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://blog.enthought.com/?p=386"}]}, {"text": ["I don't know how these distributions work on a Unix box without root access, this is something you might just have to try out."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Sage on the other hand isn't focused on being a distribution (see the Wikipedia page), so you can't really compare it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Wikipedia page", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Sage_%28mathematics_software%29"}]}], [{"text": ["I use Sage on a daily basis.", "I'm a big fan, but I wouldn't recommend it if you're not prepared for lots of updating, tweaking, and configuring.", "It's not ready for prime time yet."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you're willing to put in the effort to get it running and keep it running, the web notebook interface is amazing.", "I can't imagine that you would be able to get it running without root access though."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can use virtualenv to create your virtual isolated env wihtout any access and then call easy_install to install (and compiling if necessary) automatically all the libs you need in your current directory without admin rights."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "virtualenv", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/virtualenv"}]}, {"text": ["Installing matplotlib with virtualenv"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Installing matplotlib with virtualenv", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://gin.bcgsc.ca/plone/shared/biohelp/tutorial/managing-your-own-python-packages/install-your-own-python-packages-with-virtualenv/tutorial-all-pages"}]}, {"text": ["The only condition is to be able to run virtual env, given that you can't install anything.", "You will have to donwload it as a archive and call virtualenv.py manually."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]