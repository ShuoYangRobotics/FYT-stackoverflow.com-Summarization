[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; ' '.join( x+'-temp' for x in ['a', 'b', 'c'] )\n'a-temp b-temp c-temp'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["List comprehensions are your friend:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lst =  ['a', 'b', 'c']\nprint ' '.join(['%s-temp' % item for item in lst])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use list comprehensions when you need to access and use each element of a list.", "Example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = ['a', 'b', 'c']\n' '.join([element + '-temp' for element in l])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here you go:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = \" \".join([\"%s-temp\" % s for s in thelist])\n</code>\n</pre>\n", "senID": 1}, {"text": ["That contains a list comprehension that maps the elements of thelist through a string interpolation, generating a new list.", "That is then joined with a space in between to get the final string."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "thelist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n '-temp'.join(list)\n</code>\n</pre>\n", "senID": 0}, {"text": ["I believe will do it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Almost:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n '-temp '.join(['a','b','c'])+'-temp'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can use map function as below:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n l = ['a','b','c']\nmap((lambda s: s + '-temp'), l)\n</code>\n</pre>\n", "senID": 1}]]