[[{"text": ["I got this to work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import locale\n&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'en_US')\n'en_US'\n&gt;&gt;&gt; locale.format(\"%d\", 1255000, grouping=True)\n'1,255,000'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Sure, you don't need internationalization support, but it's clear, concise, and uses a built-in library."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "need", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["P.S.", "That \"%d\" is the usual %-style formatter.", "You can have only one formatter, but it can be whatever you need in terms of field width and precision settings."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["P.P.S.", "If you can't get locale to work, I'd suggest a modified version of Mark's answer:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "locale", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def intWithCommas(x):\n    if type(x) not in [type(0), type(0L)]:\n        raise TypeError(\"Parameter must be an integer.\")\n    if x &lt; 0:\n        return '-' + intWithCommas(-x)\n    result = ''\n    while x &gt;= 1000:\n        x, r = divmod(x, 1000)\n        result = \",%03d%s\" % (r, result)\n    return \"%d%s\" % (x, result)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Recursion is useful for the negative case, but one recursion per comma seems a bit excessive to me."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Here is the locale grouping code after removing irrelevant parts and cleaning it up a little:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(The following only works for integers)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def group(number):\n    s = '%d' % number\n    groups = []\n    while s and s[-1].isdigit():\n        groups.append(s[-3:])\n        s = s[:-3]\n    return s + ','.join(reversed(groups))\n\n&gt;&gt;&gt; group(-23432432434.34)\n'-23,432,432,434'\n</code>\n</pre>\n", "senID": 2}, {"tag": "hr", "senID": 3}, {"text": ["There are already some good answers in here.", "I just want to add this for future reference.", "In python 2.7 there is going to be a format specifier for thousands separator.", "According to python docs it works like this"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "python docs", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/whatsnew/2.7.html#pep-378-format-specifier-for-thousands-separator"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; '{:20,.2}'.format(f)\n'18,446,744,073,709,551,616.00'\n</code>\n</pre>\n", "senID": 5}, {"text": ["In python3.1 you can do the same thing like this:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; format(1234567, ',d')\n'1,234,567'\n</code>\n</pre>\n", "senID": 7}], [{"text": ["I'm sure there must be a standard library function for this, but it was fun to try to write it myself using recursion so here's what I came up with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def intToStringWithCommas(x):\n    if type(x) is not int and type(x) is not long:\n        raise TypeError(\"Not an integer!\")\n    if x &lt; 0:\n        return '-' + intToStringWithCommas(-x)\n    elif x &lt; 1000:\n        return str(x)\n    else:\n        return intToStringWithCommas(x / 1000) + ',' + '%03d' % (x % 1000)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Having said that, if someone else does find a standard way to do it, you should use that instead."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["For inefficiency and unreadability it's hard to beat:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import itertools\n&gt;&gt;&gt; s = '-1234567'\n&gt;&gt;&gt; ','.join([\"%s%s%s\" % (x[0], x[1] or '', x[2] or '') for x in itertools.izip_longest(s[::-1][::3], s[::-1][1::3], s[::-1][2::3])])[::-1].replace('-,','-')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Just subclass long (or float, or whatever).", "This is highly practical, because this way you can still use your numbers in math ops (and therefore existing code), but they will all print nicely in your terminal. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class number(long):\n\n        def __init__(self, value):\n            self = value\n\n        def __repr__(self):\n            s = str(self)\n            l = [x for x in s if x in '1234567890']\n            for x in reversed(range(len(s)-1)[::3]):\n                l.insert(-x, ',')\n            l = ''.join(l[1:])\n            return ('-'+l if self &lt; 0 else l) \n\n&gt;&gt;&gt; number(-100000)\n-100,000\n&gt;&gt;&gt; number(-100)\n-100\n&gt;&gt;&gt; number(-12345)\n-12,345\n&gt;&gt;&gt; number(928374)\n928,374\n&gt;&gt;&gt; 345\n</code>\n</pre>\n", "senID": 1}], [{"text": ["From the comments to activestate recipe 498181 I reworked this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "comments", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/498181-add-thousands-separator-commas-to-formatted-number/#c3"}, {"href": "http://code.activestate.com/recipes/498181-add-thousands-separator-commas-to-formatted-number/", "text": "498181", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import re\ndef thous(x, sep=',', dot='.'):\n    num, _, frac = str(x).partition(dot)\n    num = re.sub(r'(\\d{3})(?=\\d)', r'\\1'+sep, num[::-1])[::-1]\n    if frac:\n        num += dot + frac\n    return num\n</code>\n</pre>\n", "senID": 1}, {"text": ["It uses the regular expressions feature: lookahead i.e.", "(?=\\d) to make sure only groups of three digits that have a digit 'after' them get a comma.", "I say 'after' because the string is reverse at this point."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "lookahead", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/howto/regex.html#lookahead-assertions"}, {"text": "(?=\\d)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["[::-1] just reverses a string."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "[::-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Here's one that works for floats too:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def float2comma(f):\n    s = str(abs(f)) # Convert to a string\n    decimalposition = s.find(\".\") # Look for decimal point\n    if decimalposition == -1:\n        decimalposition = len(s) # If no decimal, then just work from the end\n    out = \"\" \n    for i in range(decimalposition+1, len(s)): # do the decimal\n        if not (i-decimalposition-1) % 3 and i-decimalposition-1: out = out+\",\"\n        out = out+s[i]      \n    if len(out):\n        out = \".\"+out # add the decimal point if necessary\n    for i in range(decimalposition-1,-1,-1): # working backwards from decimal point\n        if not (decimalposition-i-1) % 3 and decimalposition-i-1: out = \",\"+out\n        out = s[i]+out      \n    if f &lt; 0:\n        out = \"-\"+out\n    return out\n</code>\n</pre>\n", "senID": 1}, {"text": ["Usage Example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; float2comma(10000.1111)\n'10,000.111,1'\n&gt;&gt;&gt; float2comma(656565.122)\n'656,565.122'\n&gt;&gt;&gt; float2comma(-656565.122)\n'-656,565.122'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["For floats:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n float(filter(lambda x: x!=',', '1,234.52'))\n# returns 1234.52\n</code>\n</pre>\n", "senID": 1}, {"text": ["For ints:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n int(filter(lambda x: x!=',', '1,234'))\n# returns 1234\n</code>\n</pre>\n", "senID": 3}]]