[[{"text": ["Removing any and all whitespace:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n foo = ''.join(foo.split())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Removing last three characters:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n foo = foo[:-3]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Converting to capital letters:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n foo = foo.upper()\n</code>\n</pre>\n", "senID": 5}, {"text": ["All of that code in one line:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n foo = ''.join(foo.split())[:-3].upper()\n</code>\n</pre>\n", "senID": 7}], [{"text": ["It doesn't work as you expect because strip is character based.", "You need to do this instead:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n foo = foo.replace(' ', '')[:-3].upper()\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; foo = \"Bs12 3ab\"\n&gt;&gt;&gt; foo[:-3]\n'Bs12 '\n&gt;&gt;&gt; foo[:-3].strip()\n'Bs12'\n&gt;&gt;&gt; foo[:-3].strip().replace(\" \",\"\")\n'Bs12'\n&gt;&gt;&gt; foo[:-3].strip().replace(\" \",\"\").upper()\n'BS12'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["What's wrong with this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n foo.replace(\" \", \"\")[:-3].upper()\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; foo = 'BS1 1AB'\n&gt;&gt;&gt; foo.replace(\" \", \"\").rstrip()[:-3].upper()\n'BS1'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You might have misunderstood rstrip slightly, it strips not a string but any character in the string you specify."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; text = \"xxxxcbaabc\"\n&gt;&gt;&gt; text.rstrip(\"abc\")\n'xxxx'\n</code>\n</pre>\n", "senID": 2}, {"text": ["So instead, just use "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n text = text[:-3]\n</code>\n</pre>\n", "senID": 4}, {"text": ["(after replacing whitespace with nothing)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Aren't you performing the operations in the wrong order?", "You requirement seems to be foo[:-3].replace(\" \", \"\").upper()"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "foo[:-3].replace(\" \", \"\").upper()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I try to avoid regular expressions, but this appears to work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["string = re.sub(\"\\s\",\"\",(string.lower()))[:-3]"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "string = re.sub(\"\\s\",\"\",(string.lower()))[:-3]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It some what depends on your definition of whitespace.", "I would generally call whitespace to be spaces, tabs, line breaks and carriage returns.", "If this is your definition you want to use a regex with \\s to replace all whitespace charactors:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\ndef myCleaner(foo):\n    print 'dirty: ', foo\n    foo = re.sub(r'\\s', '', foo)\n    foo = foo[:-3]\n    foo = foo.upper()\n    print 'clean:', foo\n    print\n\nmyCleaner(\"BS1 1AB\")\nmyCleaner(\"bs11ab\")\nmyCleaner(\"BS111ab\")\n</code>\n</pre>\n", "senID": 1}]]