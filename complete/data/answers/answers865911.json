[[{"text": ["http://www.diveintopython.org/getting_to_know_python/everything_is_an_object.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.diveintopython.org/getting_to_know_python/everything_is_an_object.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org/getting_to_know_python/everything_is_an_object.html"}]}, {"text": ["http://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-python/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-python/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-python/"}]}, {"text": ["So there you have it from Ruby's own website: in Python everything is an object."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["While everything is an object in Python, it differs from Ruby in its approach to resolving names and interacting with objects."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, while Ruby provides you with a 'to_s' method on the Object base class, in order to expose that functionality, Python integrates it into the string type itself - you convert a type to a string by constructing a string from it.", "Instead of 5.to_s, you have str(5)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "5.to_s", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "str(5)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Don't be fooled, though.", "There's still a method behind the scenes - which is why this code works:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n (5).__str__()\n</code>\n</pre>\n", "senID": 3}, {"text": ["So in practice, the two are fundamentally similar, but you use them differently.", "Length for sequences like lists and tuples in Python is another example of this principle at work - the actual feature is built upon methods with special names, but exposed through a simpler, easier-to-use interface (the len function)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "len", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["The python equivalent to what you wrote in your question would thus be:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n (5).__add__(6)\n</code>\n</pre>\n", "senID": 6}, {"text": ["The other difference that's important is how global functions are implemented.", "In python, globals are represented by a dictionary (as are locals).", "This means that the following:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n foo(5)\n</code>\n</pre>\n", "senID": 8}, {"text": ["Is equivalent to this in python:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n globals()[\"foo\"].__call__(5)\n</code>\n</pre>\n", "senID": 10}, {"text": ["While ruby effectively does this:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n Object.foo(5)\n</code>\n</pre>\n", "senID": 12}, {"text": ["This has a large impact on the approach used when writing code in both languages.", "Ruby libraries tend to grow through the addition of methods to existing types like Object, while Python libraries tend to grow through the addition of global functions to a given module."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}], [{"text": ["In answer to your second question, yes:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; (1).__add__(2)\n3\n</code>\n</pre>\n", "senID": 1}], [{"text": ["\"everything\" is a tad of an overbid, for both Python and Ruby -- for example, if is not \"an object\", rather it's a keyword used to start a conditional statement or (in Python) inside list comprehensions and generator expressions.", "The enthusiasm of finding out that functions, classes, methods, and all sort of such things that aren't really objects in (say) C++, are objects in Ruby or Python, causes such enthusiasm.", "Other things may be objects in Ruby but not Python or viceversa (code blocks, regular expressions, ...)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Yep, as far as I know everything is an object in Python.", "Certainly the primitive and builtin types (int, long, str, float, etc.", ") can be subclassed - and in fact the types themselves are objects.", "Functions are objects, classes are objects, even code blocks are objects in a sense...", "I can't think of anything in Python that can't be treated as an object."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["To add a comment to other people's excellent answers: everything is an object, but some \u2013 notably strings and numeric types \u2013 are immutable.", "This means that these types behave the way they do in languages like C or Java (where integers, etc.", "are not objects) with respect to assignment, parameter passing, etc, and you never have to worry about traps caused by pass-by-reference.", "It's rather a good solution :-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]