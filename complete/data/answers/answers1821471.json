[[{"text": ["List comprehensions and generators are only designed to be used as expressions, while printing is a statement.", "While you can effect what you're trying to do by doing"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import print_function\nfor x in a:\n    [print(each) for each in x]\n</code>\n</pre>\n", "senID": 1}, {"text": ["doing so is amazingly unpythonic, and results in the generation of a list that you don't actually need.", "The best thing you could do would simply be to write the nested for loops in your original example."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Given your example you could do something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = [(\"one\",\"two\"), (\"bad\",\"good\")]\n\nfor x in sum(map(list, a), []):\n    print x\n</code>\n</pre>\n", "senID": 1}, {"text": ["This can, however, become quite slow once the list gets big."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The better way to do it would be like Tim Pietzcker suggested:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Tim Pietzcker", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/20670/tim-pietzcker"}]}, {"code": "<pre>\n<code>\n from itertools import chain\n\nfor x in chain(*a):\n    print x\n</code>\n</pre>\n", "senID": 4}, {"text": ["Using the star notation, *a, allows you to have n tuples in your list."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "star notation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html#tut-unpacking-arguments"}, {"text": "*a", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n import itertools\nfor item in itertools.chain((\"one\",\"two\"), (\"bad\",\"good\")):\n    print item\n</code>\n</pre>\n", "senID": 0}, {"text": ["will produce the desired output with just one for loop."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The print function really is superior, but here is a much more pythonic suggestion inspired by Benjamin Pollack's answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import print_function\nfor x in a:\n    print(*x, sep=\"\\n\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Simply use * to unpack the list x as arguments to the function, and use newline separators."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "*", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [(\"one\",\"two\"), (\"bad\",\"good\")]\n&gt;&gt;&gt; print \"\\n\".join(j for i in a for j in i)\none\ntwo\nbad\ngood\n\n\n\n&gt;&gt;&gt; for i in a:\n...  print \"\\n\".join(i)\n... \none\ntwo\nbad\ngood\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You'll need to define your own print method (or import __future__.print_function)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__future__.print_function", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def pp(x): print x\n\nfor i in a:\n  _ = [pp(x) for x in i]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note the _ is used to indicate that the returned list is to be ignored."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["This code is straightforward and simpler than other solutions here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in a:\n    print '\\n'.join([x for x in i])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Not the best, but:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in a:\n    some_function([x for x in i])\n\ndef some_function(args):\n    for o in args:\n        print o\n</code>\n</pre>\n", "senID": 1}]]