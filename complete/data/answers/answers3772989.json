[[{"text": ["The pythonic way would be: use simple for-loops or list comprehensions.", "filter and map are remnants of older versions of the language.", "Guido wanted them removed at one point  but it turned out there are some valid use cases and enough people who would like them to stay (also see this thread).", "Don't use eval."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "filter", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "this thread", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.artima.com/weblogs/viewpost.jsp?thread=98196"}, {"text": "eval", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["Don't worry about performance unless it becomes a problem (and in that case the easiest way - trying make to use of the highly optimized functions in the standard library - is the best way most of the time)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I think in general Python is really straightforward in trying to provide one (obvious) way to do things, although valid (bigger or smaller) variations do occur and opinions on some topics do differ, of course."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Picking up the Python idioms can be as easy as browsing this site and paying special attention to highly upvoted answers on Python questions (most of the time there's some kind of consensus on the best way to do things)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Since you're coming from a Java background, I recommend reading Python is not Java.", "Not to mention most of the other articles in the sidebar.", "The article gives some good pointers on how Java programmers can unintentionally mis-use Python (and how not to)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Python is not Java", "tag": "a", "pos": 0, "childList": [{"text": "Python is not Java", "tag": "strong"}], "childNum": 1, "href": "http://dirtsimple.org/2004/12/python-is-not-java.html"}, {"text": "Python is not Java", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}], [{"text": ["For starters, you should read this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"}]}], [{"text": ["Be sure to read Idioms and Anti-idioms which is part of the official Python documentation.", "Also be sure to read PEP8 on Python style."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Idioms and Anti-idioms", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/howto/doanddont.html"}, {"text": "PEP8", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["Type"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import this\n</code>\n</pre>\n", "senID": 1}, {"text": ["into IDLE"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Sorry, if my answer is not as long as your question, but, anyway, here goes:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First of all about listcomps/filter/apply/eval.", "If you are about to use filter or apply you are much better off using a list comprehension (or a generator expression) or a for loop, - filter, map, reduce and apply are, basically, atavisms as far as I know and can be ignored safely.", "Eval does not have anything to do with either of those, it just evaluates a string as python code.", "You probably should not use it, unless you have an extremely good reason to od so (hint: you don't)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Re idioms: well, for the most part, in python for a given problem there is an optimal 'way to do it', that should be used for 99% of similar cases.", "Examples: need to parse/transform/generate xml?", "Use lxml.", "Need to do networking/pretty much any other kind of i/o ?", "Use twisted.", "And so on.", "Of course there are alternatives, but most of the time there is indeed one optimal way of doing things.", "This is even more relevant if you are just working with the standard library, as it provides lots of optimal solutions to common problems (although it does contain some rather useless stuff)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "lxml", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/"}, {"text": "twisted", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/trac/"}]}], [{"text": ["Funny you should say this: \"it's been one revelation after another.", "it's like how a classical physicist would feel if gravity ceased to exist!", "\": http://xkcd.com/353/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://xkcd.com/353/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://xkcd.com/353/"}]}]]