[[{"text": ["What's ugly about it?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Are the contents of the list always constants, as in your example?", "If so: recent versions of Python (since 2.4) will optimise that by evaluating the constant expression and keeping the result but only if it's a tuple.", "So you could change it to being a tuple.", "Or you could stop worrying about small things like that."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's a list of constants and a tuple of constants:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def afunc():\n...    a = ['foo', 'bar', 'zot']\n...    b = ('oof', 'rab', 'toz')\n...    return\n...\n&gt;&gt;&gt; import dis; dis.dis(afunc)\n  2           0 LOAD_CONST               1 ('foo')\n              3 LOAD_CONST               2 ('bar')\n              6 LOAD_CONST               3 ('zot')\n              9 BUILD_LIST               3\n             12 STORE_FAST               0 (a)\n\n  3          15 LOAD_CONST               7 (('oof', 'rab', 'toz'))\n             18 STORE_FAST               1 (b)\n\n  4          21 LOAD_CONST               0 (None)\n             24 RETURN_VALUE\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Never create something more than once if you don't have to.", "This is a simply optimization that can be done on your part and I personally do not find the second example ugly at all."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some may argue not to worry about optimizing little things like this but I feel that something this simple to fix should be done immediately.", "I would hate to see your application create multiple copies of anything that it doesn't need to simply to preserve an arbitrary sense of \"code beauty\".", ":)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Option 3: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def do_something(a_list = (\"any\", \"think\", \"whatever\")):\n    read something from a_list\n</code>\n</pre>\n", "senID": 1}, {"text": ["Option 3 compared to Option 1:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Option 3 compared to Option 1:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Both are equally readable in my opinion (though some seem to think differently in the comments!", ":-) ).", "You could even write Option 3 like this"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def do_something(\n    a_list = (\"any\", \"think\", \"whatever\")):\n    read something from a_list\n</code>\n</pre>\n", "senID": 4}, {"text": ["which really minimizes the difference in terms of readability.", "Unlike Option 1, however, Option 3 defines a_list only once -- at the time when do_something is defined.", "That's exactly what we want."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "a_list", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "do_something", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Option 3 compared to Option 2:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Option 3 compared to Option 2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Avoid global variables if possible.", "Option 3 allows you to do that.", "Also, with Option 2, over time or if other people maintain this code, the definition of a_list could get separated from def do_something.", "This may not be a big deal, but I think it is somewhat undesireable."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "a_list", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "def do_something", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["if your a_list doesn't change, move it out of the function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a_list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I think this is what classes are for."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Processor:\n    def __init__(this):\n        this.data = \"any thing whatever\".split()\n    def fun(this,arg):\n        # do stuff with arg and list\n\ninst = Processor()\ninst.fun(\"skippy)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, if you someday want to separate out the data into a file, you can just modify the constructor to do so."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Well it seems it comes down to initializing the array in the function or not:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import time\ndef fun1():\n        a = ['any', 'think', 'whatever']\n        sum = 0\n        for i in range(100):\n                sum += i\n\ndef fun2():\n        sum = 0\n        for i in range(100):\n                sum += i\n\n\ndef test_fun(fun, times):\n        start = time.time()\n        for i in range(times):\n                fun()\n        end=time.time()\n        print \"Function took %s\" % (end-start)\n\n# Test\nprint 'warming up'\ntest_fun(fun1, 100)\ntest_fun(fun2, 100)\n\nprint 'Testing fun1'\ntest_fun(fun1, 100000)\nprint 'Testing fun2'\ntest_fun(fun2, 100000)\n\nprint 'Again'\nprint 'Testing fun1'\ntest_fun(fun1, 100000)\nprint 'Testing fun2'\ntest_fun(fun2, 100000)\n</code>\n</pre>\n", "senID": 1}, {"text": ["and the results:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;python test.py\nwarming up\nFunction took 0.000604152679443\nFunction took 0.000600814819336\nTesting fun1\nFunction took 0.597407817841\nTesting fun2\nFunction took 0.580779075623\nAgain\nTesting fun1\nFunction took 0.595198154449\nTesting fun2\nFunction took 0.580571889877\n</code>\n</pre>\n", "senID": 3}, {"text": ["Looks like there is no difference."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["If the list is never modified, why do you use lists at all?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Without knowing your actual requirements, I'd recommend to simply use some if-statements to get rid of the list and the \"read something from list\" part completely."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I've worked on automated systems that process 100,000,000+ records a day, where a 1% percent performance improvement is huge. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I learned a big lesson working on that system:  Faster is better, but only when you know when it's fast enough."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["A 1% improvement would have been a huge reduction in total processing time, but it isn't enough to effect when we would need our next hardware upgrade.", "My application was so fast, that the amount of time I spent trying to milk that last 1% probably cost more than a new server would have."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In your case, you would have to call do_something tens of thousands of times before making a significant difference in performance.", "In some cases that would make a difference, in other it won't."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]