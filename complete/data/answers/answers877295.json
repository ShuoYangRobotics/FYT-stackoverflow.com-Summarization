[[{"text": ["solving not in terms of \"length\" but performance, I'd do the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import defaultdict\n&gt;&gt;&gt; def d_sum(a, b):\n        d = defaultdict(int, a)\n        for k, v in b.items():\n            d[k] += v\n        return dict(d)\n&gt;&gt;&gt; a = {'a': 1, 'b': 2}\n&gt;&gt;&gt; b = {'c': 2, 'b': 3}\n&gt;&gt;&gt; d_sum(a, b)\n{'a': 1, 'c': 2, 'b': 5}\n</code>\n</pre>\n", "senID": 1}, {"text": ["it's also py3k-compatible, unlike your original code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you want short code, you're there."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want clean code, inherit from Ber's defaultdict and overload __add__:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "defaultdict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__add__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\nclass summable(defaultdict):\n    def __add__(self, rhs):\n        new = summable()\n        for i in (self.keys() + rhs.keys()):\n            new[i] = self.get(i, 0) + rhs.get(i, 0)\n        return new\n\na = summable(int, a=1, b=2)\nb = summable(int, b=3, c=4)\nc = a + b\nprint c\n</code>\n</pre>\n", "senID": 2}, {"text": ["Gives:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \ndefaultdict(None, {'a': 1, 'c': 4, 'b': 5})\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I think one line of code is already pretty short :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I may become \"half a line\", it you use defaultdict and remove some unnecessary list and set creations:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "defaultdict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#collections.defaultdict"}]}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\na = defaultdict(int, a=1, b=2)\nb = defaultdict(int, b=3, c=4)\n\nc = dict((k, a[k]+b[k]) for k in (a.keys() + b.keys()))\nprint c\n</code>\n</pre>\n", "senID": 2}], [{"text": ["In my first impression, I will write:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; c = a.copy()\n&gt;&gt;&gt; for k in b: c[k] = c.get(k, 0) + b[k]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The first thing I think of is a bit more efficient and (IMO) a bit more elegant, but still too much typing.", "Actually, it's about equivalent to kcwu's."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n c = reduce(lambda(d, k): [d.update({k: d.get(k, 0) + b[k]}), d][1], b, a.copy())\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's really a shame that dict.update doesn't return self.", "I guess it's not the Python way.", "If it did, the [..., d][1] trick would be unnecessary."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "dict.update", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[..., d][1]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"tag": "hr", "senID": 3}, {"code": "<pre>\n<code>\n %a = (a =&gt; 1, b =&gt; 2);\n%b = (b =&gt; 3, c =&gt; 2);\n\n%c = (%a, map {$_ =&gt; $a{$_} + $b{$_}} keys %b);\n</code>\n</pre>\n", "senID": 4}, {"code": "<pre>\n<code>\n import qualified Data.Map as M\n\na = M.fromList [('a', 1), ('b', 2)]\nb = M.fromList [('b', 3), ('c', 2)]\n\nc = M.unionWith (+) a b\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Here's implementation that doesn't use (self.keys() + rhs.keys()):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "(self.keys() + rhs.keys())", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\nclass sumdict(defaultdict):\n    def __add__(self, rhs):\n        d = self.copy() \n        d += rhs\n        return d\n    __radd__ = lambda self, lhs: self + lhs\n    def __iadd__(self, rhs):\n        for k, v in rhs.items():\n            self[k] += v\n        return self\n\na = sumdict(int, a=1, b=2)\nb = dict(b=3, c=4)\nc = b + a\na += b\n\nassert a == c == {'a': 1, 'c': 4, 'b': 5} != b\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def GenerateSum():\n  for k in set(a).union(b):\n    yield k, a.get(k, 0) + b.get(k, 0)\n\ne = dict(GenerateSum())\nprint e\n</code>\n</pre>\n", "senID": 0}, {"text": ["or, with a one liner:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print dict((k, a.get(k,0) + b.get(k,0)) for k in set(a).union(b))\n</code>\n</pre>\n", "senID": 2}]]