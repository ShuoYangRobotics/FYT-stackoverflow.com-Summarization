[[{"text": ["@Ryan: Documentation about preprocessors is a bit small"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["@Staale: Adding user to the Context every time one is calling the template in view, DRY"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Solution is very simple"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["A: In your settings add"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "A", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n TEMPLATE_CONTEXT_PROCESSORS = (\n    'myapp.processor_file_name.user',\n)\n</code>\n</pre>\n", "senID": 4}, {"text": ["B: In myapp/processor_file_name.py insert"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "B", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def user(request):\n    if hasattr(request, 'user'):\n        return {'user':request.user }\n    return {}\n</code>\n</pre>\n", "senID": 6}, {"text": ["From now on you're able to use user object functionalities in your templates."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n {{ user.get_full_name }}\n</code>\n</pre>\n", "senID": 8}], [{"text": ["In a more general sense of not having to explicitly set variables in each view, it sounds like you want to look at writing your own context processor."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "context processor", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/templates/api/#writing-your-own-context-processors"}]}, {"text": ["From the docs:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["There is no need to write a context processor for the user object if you already have the \"django.core.context_processors.auth\" initialized. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "no need", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["http://docs.djangoproject.com/en/dev/topics/auth/#authentication-data-in-templates"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.djangoproject.com/en/dev/topics/auth/#authentication-data-in-templates", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/auth/#authentication-data-in-templates"}]}], [{"text": ["If you can hook your authentication into the Django authentication scheme you'll be able to use request.user."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Django authentication scheme", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/documentation/authentication/#authentication-in-web-requests"}, {"text": "request.user", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I think this should just be a case of calling authenticate() and login() based on the contents of your Cookie."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "authenticate()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "login()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit: @Staale - I always use the locals()trick for my context so all my templates can see request and so request.user.", "If you're not then I guess it wouldn't be so straightforward."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "locals()trick", "tag": "a", "pos": 0, "childList": [{"text": "locals()", "tag": "code"}], "childNum": 1, "href": "http://www.djangobook.com/en/1.0/chapter04/"}, {"text": "locals()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "request", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "request.user", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["@Dave\nTo use {{user.username}} in my templates, I will then have to use \nrequestcontext rather than just a normal map/hash: http://www.djangoproject.com/documentation/templates_python/#subclassing-context-requestcontext"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.djangoproject.com/documentation/templates_python/#subclassing-context-requestcontext", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/documentation/templates_python/#subclassing-context-requestcontext"}]}, {"text": ["So I guess there are no globals that the template engine checks."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["But the RequestContext has some prepopulate classes that I can look into to solve my problems.", "Thanks."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["its possible by default, by doing the following steps, ensure you have added the context 'django.contrib.auth.context_processors.auth' in your settings.", "By default its added in settings.py, so its looks like this "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n TEMPLATE_CONTEXT_PROCESSORS = (\n'django.core.context_processors.request',\n'django.contrib.auth.context_processors.auth',\n'django.core.context_processors.auth',)\n</code>\n</pre>\n", "senID": 1}, {"text": ["And you can access user object like this,"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n {% if user.is_authenticated %}\n&lt;p&gt;Welcome, {{ user.username }}. Thanks for logging in.&lt;/p&gt;\n{% else %}\n    &lt;p&gt;Welcome, new user. Please log in.&lt;/p&gt;\n{% endif %}\n</code>\n</pre>\n", "senID": 3}, {"text": ["For more information, refer here http://docs.djangoproject.com/en/1.2/topics/auth/#authentication-data-in-templates "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://docs.djangoproject.com/en/1.2/topics/auth/#authentication-data-in-templates", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/1.2/topics/auth/#authentication-data-in-templates"}]}]]