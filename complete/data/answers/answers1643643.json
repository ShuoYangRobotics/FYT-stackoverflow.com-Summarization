[[{"code": "<pre>\n<code>\n outputList = [x for x in values if x in sys.argv[1:]]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Substitute the bits that are relevant for your (spreadsheet?", ") situation.", "This is a list comprehension.", "You can also investigate the optparse module which has been in the standard library since 2.3."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "list comprehension", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}, {"text": "optparse", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/optparse.html"}]}], [{"text": ["You can iterate over sys.argv[1:], e.g.", "via something like:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sys.argv[1:]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for grp in sys.argv[1:]:\n  for i in range(len(sh.col_values(8))):\n   if sh.cell(i, 1).value == grp:\n      hlo.append(sh.cell(i, 8).value)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I would recommend taking a look at Python's optparse module.", "It's a nice helper to parse sys.argv."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "optparse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/optparse.html"}, {"text": "sys.argv", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["argparse is another powerful, easy to use module that parses sys.argv for you.", "Very useful for creating command line scripts."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "argparse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/argparse/"}]}], [{"text": ["I believe this would work, and would avoid iterating over sys.argv:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n hlo = []\nfor i in range(len(sh.col_values(8))):\n   if sh.cell(i, 1).value in sys.argv[1:]:\n      hlo.append(sh.cell(i, 8).value)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n # First thing is to get a set of your query strings.\nqueries = set(argv[1:])\n# If using optparse or argparse, queries = set(something_else)\nhlo = []\nfor i in range(len(sh.col_values(8))):\n    if sh.cell(i, 1).value in queries:\n        hlo.append(sh.cell(i, 8).value)\n</code>\n</pre>\n", "senID": 0}, {"text": ["=== end of answer to question ==="], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Aside: the OP is using xlrd ... here are a couple of performance hints."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Doesn't matter too much with this simple example, but if you are going to do a lot of coordinate-based accessing of cell values, you can do better than that by using Sheet.cell_value(rowx, colx) instead of Sheet.cell(rowx, colx).value which builds a Cell object on the fly:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n queries = set(argv[1:])\nhlo = []\nfor i in range(len(sh.nrows)): # all columns have the same size\n    if sh.cell_value(i, 1) in queries:\n        hlo.append(sh.cell_value(i, 8))\n</code>\n</pre>\n", "senID": 4}, {"text": ["or you could use a list comprehension along with the Sheet.col_values(colx) method:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n hlo = [\n    v8\n    for v1, v8 in zip(sh.col_values(1), sh.col_values(8))\n    if v1 in queries\n    ]\n</code>\n</pre>\n", "senID": 6}]]