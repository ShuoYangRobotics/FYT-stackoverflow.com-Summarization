[[{"text": ["If I understand you correctly, you have a unique set of strings, that you want to compare an input strings against.", "In this case you could use set to store both processing results and db values.", "Comparison then could be done as follows:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; db = {'abc', 'def', 'jhi', 'asdf'}\n&gt;&gt;&gt; inpt = {'abc', 'tmp'}\n&gt;&gt;&gt; db &amp; inpt\n{'abc'}\n</code>\n</pre>\n", "senID": 1}, {"text": ["The further conversion to the dictionary is trivial."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Just a heads up... you may be interested in django's support for regex in queries"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django's support for regex in queries", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/models/querysets/#regex"}]}, {"text": ["Example from the linked django docs:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Entry.objects.get(title__regex=r'^(An?|The) +')\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Here is a slight variation on SilentGhost's answer.", "You load in the keywords line by line.", "store them in a set.", "for each keyword that you find in the user input increase the corresponding entry in the results. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n keyword_file = StringIO(\"\"\"inputting some text\n    extract the data\n    a phrase not here\"\"\")\n\nkeywords = set(line.strip() for line in keyword_file)\n\nresults = defaultdict(int)\nfor phrase in keywords:\n    if userinput.find(phrase) != -1:\n        results[phrase] += 1\n\nprint results\n</code>\n</pre>\n", "senID": 1}, {"text": ["Hope this points you in the right direction.", "Not entirely sure this is what you were asking but it's my best guess. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Do you care about speed?", "Why don't you like the method you use now?", "Does your method work? "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Once you've formed your pattern such as (first phrase)|(the second)|(and another) (with the parentheses I indicate) and compiled it into a regular expression object r, a good way to loop on matches and identify which match it was is:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "(first phrase)|(the second)|(and another)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "with", "childNum": 0, "tag": "em", "childList": []}, {"text": "r", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class GroupCounter(object):\n  def __init__(self, phrases):\n    self.phrases = phrases\n    self.counts = [0] * len(phrases)\n  def __call__(self, mo):\n    self.counts[mo.lastindex - 1] += 1\n    return ''\n  def asdict(self):\n    return dict(zip(self.phrases, self.counts))\n\ng = GroupCounter(['first phrase', 'the second', 'and another'])\nr.sub(g, thetext)\nprint g.asdict()\n</code>\n</pre>\n", "senID": 1}, {"text": ["It would also be reasonable to have the GroupCounter instance also build the regex object, since it does need the list of phrases in the same order as it appears in the regex itself."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you have 1000 phrases, and you're searching an input string to find which of those phrases are substrings, you're probably not going to be happy with the performance you get from using a big regular expression.", "A trie is a bit more work to implement, but it's a lot more efficient:  the regular expression a|b|c|d|e does five tests on each character in a given input string, while a trie only does one.", "You could conceivably also use a lexer, like Plex, that produces a DFA."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "trie", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Trie"}, {"text": "a|b|c|d|e", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Plex", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.cosc.canterbury.ac.nz/greg.ewing/python/Plex/version/doc/index.html"}]}, {"text": ["Edit:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I appear to be procrastinating this morning.", "Try this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Trie(object):\n\t\tdef __init__(self):\n\t\t\tself.children = {}\n\t\t\tself.item = None\n\t\tdef add(self, item, remainder=None):\n\t\t\t\"\"\"Add an item to the trie.\"\"\"\n\t\t\tif remainder == None:\n\t\t\t\tremainder = item\n\t\t\tif remainder == \"\":\n\t\t\t\tself.item = item\n\t\t\telse:\n\t\t\t\tch = remainder[0]\n\t\t\t\tif not self.children.has_key(ch):\n\t\t\t\t\tself.children[ch] = Trie()\n\t\t\t\tself.children[ch].add(item, remainder[1:])\n\t\tdef find(self, word):\n\t\t\t\"\"\"Return True if word is an item in the trie.\"\"\"\n\t\t\tif not word:\n\t\t\t\treturn True\n\t\t\tch = word[0]\n\t\t\tif not self.children.has_key(ch):\n\t\t\t\treturn False\n\t\t\treturn self.children[ch].find(word[1:])\n\t\tdef find_words(self, word, results=None):\n\t\t\t\"\"\"Find all items in the trie that word begins with.\"\"\"\n\t\t\tif results == None:\n\t\t\t\tresults = []\n\t\t\tif self.item:\n\t\t\t\tresults.append(self.item)\n\t\t\tif not word:\n\t\t\t\treturn results\n\t\t\tch = word[0]\n\t\t\tif not self.children.has_key(ch):\n\t\t\t\treturn results\n\t\t\treturn self.children[ch].find_words(word[1:], results)\n</code>\n</pre>\n", "senID": 3}, {"text": ["A quick test (words.txt is the BSD words file, a very handy thing to have around - it contains about 240,000 words):"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "words.txt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; t = Trie()\n&gt;&gt;&gt; with open(r'c:\\temp\\words.txt', 'r') as f:\n        for word in f:\n            t.add(word.strip())\n</code>\n</pre>\n", "senID": 5}, {"text": ["That takes about 15 seconds on my machine.", "This, however, is almost instantaneous:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"I played video games in a drunken haze.\"\n&gt;&gt;&gt; r = []\n&gt;&gt;&gt; for i in range(len(s)):\n        r.extend(t.find_words(s[i:]))\n&gt;&gt;&gt; r\n['I', 'p', 'play', 'l', 'la', 'lay', 'a', 'ay', 'aye', 'y', 'ye', 'yed', 'e', 'd', 'v', 'video', 'i', 'id', 'ide', 'd', 'de', 'e', 'o', 'g', 'ga', 'gam', 'game', 'a', 'am', 'ame', 'm', 'me', 'e', 'es', 's', 'i', 'in', 'n', 'a', 'd', 'drunk', 'drunken', 'r', 'run', 'u', 'un', 'unken', 'n', 'k', 'ken', 'e', 'en', 'n', 'h', 'ha', 'haze', 'a', 'z', 'e']\n</code>\n</pre>\n", "senID": 7}, {"text": ["Yes, unken is in words.txt.", "I have no idea why."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "unken", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Oh, and I did try to compare with regular expressions:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n &gt;&gt;&gt; with open(r'c:\\temp\\words.txt', 'r') as f:\n         p = \"|\".join([l.strip() for l in f])\n\n &gt;&gt;&gt; p = re.compile(p)\n\n Traceback (most recent call last):\n  File \"&lt;pyshell#250&gt;\", line 1, in &lt;module&gt;\n    p = re.compile(p)\n  File \"C:\\Python26\\lib\\re.py\", line 188, in compile\n    return _compile(pattern, flags)\n  File \"C:\\Python26\\lib\\re.py\", line 241, in _compile\n    p = sre_compile.compile(pattern, flags)\n  File \"C:\\Python26\\lib\\sre_compile.py\", line 529, in compile\n    groupindex, indexgroup\nOverflowError: regular expression code size limit exceeded\n</code>\n</pre>\n", "senID": 10}], [{"text": ["The algorithm for this job is Aho-Corasick ... see the link at the bottom whch points to a C-extension for Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Aho-Corasick", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Aho-Corasick%5Falgorithm"}]}]]