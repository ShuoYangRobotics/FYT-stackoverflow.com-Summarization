[[{"text": ["This is almost the exact same algorithm described in Anurag Uniyal's answer, except using the file as an iterator instead of readline():"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Anurag Uniyal's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "#1047634"}, {"text": "readline()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from collections import defaultdict\ntry:\n  from io import StringIO # 2.6+, 3.x\nexcept ImportError:\n  from StringIO import StringIO # 2.5\n\ndata = defaultdict(int)\n\n#with open(\"filename\", \"r\") as f: # if a real file\nwith StringIO(\"10\\n5\\n-1\\n-1\\n-1\\n1\\n1\\n0\\n2\") as f:\n  for line in f:\n    data[int(line)] += 1\n\nfor number, count in data.iteritems():\n  print number, \"was found\", count, \"times\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Counter is your best friend:)\nhttp://docs.python.org/dev/library/collections.html#counter-objects"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://docs.python.org/dev/library/collections.html#counter-objects", "text": "http://docs.python.org/dev/library/collections.html#counter-objects", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["for(Python2.5 and 2.6) http://code.activestate.com/recipes/576611/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.activestate.com/recipes/576611/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/576611/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; cnt = Counter()\n&gt;&gt;&gt; for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:\n...     cnt[word] += 1\n&gt;&gt;&gt; cnt\nCounter({'blue': 3, 'red': 2, 'green': 1})\n# or just cnt = Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])\n</code>\n</pre>\n", "senID": 2}, {"text": ["for this :"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n print Counter(int(line.strip()) for line in open(\"foo.txt\", \"rb\"))\n##output\nCounter({-1: 3, 1: 2, 0: 1, 2: 1, 5: 1, 10: 1})\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Read the lines of the file into a list l, e.g."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "l", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n l = [int(line) for line in open('filename','r')]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Starting with a list of values l, you can create a dictionary d that gives you for each value in the list the number of occurrences like this:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "l", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "d", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [10,5,-1,-1,-1,1,1,0,2]\n&gt;&gt;&gt; d = dict((x,l.count(x)) for x in l)\n&gt;&gt;&gt; d[1]\n2\n</code>\n</pre>\n", "senID": 3}, {"text": ["EDIT: as Matthew rightly points out, this is hardly optimal.", "Here is a version using defaultdict:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from collections import defaultdict\nd = defaultdict(int)\nfor line in open('filename','r'):\n    d[int(line)] += 1\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I think what you call map is, in python, a dictionary.", "Here is some useful link on how to use it: http://docs.python.org/tutorial/datastructures.html#dictionaries"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "http://docs.python.org/tutorial/datastructures.html#dictionaries", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#dictionaries"}]}, {"text": ["For a good solution, see the answer from Stephan or Matthew - but take also some time to understand what that code does :-)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["New in Python 3.1:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import Counter\nwith open(\"filename\",\"r\") as lines:\n    print(Counter(lines))\n</code>\n</pre>\n", "senID": 1}], [], [{"text": ["Use dictionary where every line is a key, and count is value.", "Increment count for every line, and if there is no dictionary entry for line initialize it with 1 in except clause  -- this should work with older versions of Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def count_same_lines(fname):\n    line_counts = {}\n    for l in file(fname):\n    \tl = l.rstrip()\n    \tif l:\n    \t\ttry:\n    \t\t\tline_counts[l] += 1\n    \t\texcept KeyError:\n    \t\t\tline_counts[l] = 1\n    print('cnt\\ttxt')\n    for k in line_counts.keys():\n    \tprint('%d\\t%s' % (line_counts[k], k))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n l = [10,5,-1,-1,-1,1,1,0,2]\nd = {}\nfor x in l:\n  d[x] = (d[x] + 1) if (x in d) else 1\n</code>\n</pre>\n", "senID": 0}, {"text": ["There will be a key in d for every distinct value in the original list, and the values of d will be the number of occurrences."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n #!/usr/bin/env python\nimport fileinput\nfrom collections import defaultdict\n\nfrequencies = defaultdict(int)\nfor line in fileinput.input():\n    frequencies[line.strip()] += 1\n\nprint frequencies\n</code>\n</pre>\n", "senID": 0}, {"text": ["Example: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $ perl -E'say 1*(rand() &lt; 0.5) for (1..100)' | python counter.py\ndefaultdict(&lt;type 'int'&gt;, {'1': 52, '0': 48})\n</code>\n</pre>\n", "senID": 2}]]