[[{"text": ["Implemented in twisted:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "twisted", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/"}]}, {"code": "<pre>\n<code>\n from twisted.internet.protocol import Factory, Protocol\nfrom twisted.internet import reactor\n\nclass SendContent(Protocol):\n    def connectionMade(self):\n        self.transport.write(self.factory.text)\n        self.transport.loseConnection()\n\nclass SendContentFactory(Factory):\n    protocol = SendContent\n    def __init__(self, text=None):\n        if text is None:\n            text = \"\"\"Hello, how are you my friend? Feeling fine? Good!\"\"\"\n        self.text = text\n\nreactor.listenTCP(50000, SendContentFactory())\nreactor.run()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Testing:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ telnet localhost 50000\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nHello, how are you my friend? Feeling fine? Good!\nConnection closed by foreign host.\n</code>\n</pre>\n", "senID": 3}, {"text": ["Seriously, when it comes to asynchronous network, twisted is the way to go.", "It handles multiple connections in a single-thread single-process approach."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You need some form of asynchronous socket IO.", "Have a look at this explanation, which discusses the concept in low-level socket terms, and the related examples which are implemented in Python.", "That should point you in the right direction."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this explanation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://squirl.nightmare.com/medusa/async%5Fsockets.html"}]}], [{"text": ["If you're up for a bit of a conceptual challenge, I'd look into using twisted. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Your case should be trivial to implement as a part of twisted.", "http://twistedmatrix.com/projects/core/documentation/howto/servers.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://twistedmatrix.com/projects/core/documentation/howto/servers.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/projects/core/documentation/howto/servers.html"}]}], [{"text": ["For a really easy win implement you solution using SocketServer &amp; the SocketServer.ThreadingMixIn"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["have a look a this echo server example it looks quite similar to what you're doing anyway: http://www.oreillynet.com/onlamp/blog/2007/12/pymotw_socketserver.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.oreillynet.com/onlamp/blog/2007/12/pymotw_socketserver.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.oreillynet.com/onlamp/blog/2007/12/pymotw_socketserver.html"}]}], [{"text": ["Late for the reply, but with the only answers being Twisted or threads (ouch), I wanted to add an answer for MiniBoa. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.google.com/p/miniboa/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/miniboa/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/miniboa/"}]}, {"text": ["Twisted is great, but it's a rather large beast that may not be the best introduction to single-threaded asynchronous Telnet programming.", "MiniBoa is a lightweight, asynchronous single-threaded Python Telnet implementation originally designed for muds, which suits the OP's question perfectly. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you want to do it in pure python (sans-twisted), you need to do some threading.", "If you havnt seen it before, check out:\nhttp://heather.cs.ucdavis.edu/~matloff/Python/PyThreads.pdf"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://heather.cs.ucdavis.edu/~matloff/Python/PyThreads.pdf", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://heather.cs.ucdavis.edu/~matloff/Python/PyThreads.pdf"}]}, {"text": ["around page 5/6 is an example that is very relevant ;)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "very", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Try MiniBoa server?", "It has exactly 0 dependencies, no twisted or other stuff needed.", "MiniBoa is a non-blocking async telnet server, single threaded, exactly what you need."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.google.com/p/miniboa/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/miniboa/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/miniboa/"}]}], [{"text": ["First, buy Comer's books on TCP/IP programming.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "TCP/IP programming", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cs.purdue.edu/homes/dec/netbooks.html"}]}, {"text": ["In those books, Comer will provide several alternative algorithms for servers.", "There are two standard approaches."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Thread-per-request."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Process-per-request."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]}, {"text": ["You must pick one of these two and implement that."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["In thread-per, each telnet session is a separate thread in your overall application."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["In process-per, you fork each telnet session into a separate subprocess."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["You'll find that process-per-request is much, much easier to handle in Python, and it generally makes more efficient use of your system."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Thread-per-request is fine for things that come and go quickly (like HTTP requests).", "Telnet has long-running sessions where the startup cost for a subprocess does not dominate performance."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]]