[[{"text": ["What happens if somebody passes a unicode string to your function?", "Or a class derived from dict?", "Or a class implementing a dict-like interface?", "Following code covers first two cases.", "If you are using Python 2.6 you might want to use collections.Mapping instead of dict as per the ABC PEP."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "collections.Mapping", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://www.python.org/dev/peps/pep-3119/", "text": "ABC PEP", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n def value_list(x):\n    if isinstance(x, dict):\n        return list(set(x.values()))\n    elif isinstance(x, basestring):\n        return [x]\n    else:\n        return None\n</code>\n</pre>\n", "senID": 1}], [{"text": ["\"type(dict())\" says \"make a new dict, and then find out what its type is\".", "It's quicker to say just \"dict\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But if you want to just check type, a more idiomatic way is isinstance(x, dict)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["built-in types in Python have built in names:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"hallo\"\n&gt;&gt;&gt; type(s) is str\nTrue\n&gt;&gt;&gt; s = {}\n&gt;&gt;&gt; type(s) is dict\nTrue\n</code>\n</pre>\n", "senID": 1}, {"text": ["btw note the is operator.", "However, type checking (if you want to call it that) is usually done by wrapping a type-specific test in a try-except clause, as it's not so much the type of the variable that's important, but whether you can do a certain something with it or not."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["*sigh*"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "*sigh*", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["No, typechecking arguments in python is not necessary.", "It is never \nnecessary."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "never", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["If your code accepts either a string or a dict object, your design is broken."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["That comes from the fact that if you don't know already the type of an object\nin your own program, then you're doing something wrong already."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Typechecking hurts code reuse and reduces performance.", "Having a function that\nperforms different things depending on the type of the object passed is \nbug-prone and has a behavior harder to understand and maintain."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You have the following saner options:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["1) Make a function unique_values that converts dicts in unique lists of values:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "unique_values", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def unique_values(some_dict):\n    return list(set(some_dict.values()))\n</code>\n</pre>\n", "senID": 7}, {"text": ["Make your function assume the argument passed is always a list.", "That way, if you need to pass a string to the function, you just do:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n myfunction([some_string])\n</code>\n</pre>\n", "senID": 9}, {"text": ["If you need to pass it a dict, you do:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n myfunction(unique_values(some_dict))\n</code>\n</pre>\n", "senID": 11}, {"text": ["That's your best option, it is clean, easy to understand and maintain.", "Anyone\nreading the code immediatelly understands what is happening, and you don't have\nto typecheck."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["2) Make two functions, one that accepts lists of strings and one that accepts \ndicts.", "You can make one call the other internally, in the most convenient \nway (myfunction_dict can create a list of strings and call myfunction_list)."], "childNum": 2, "tag": "p", "senID": 13, "childList": [{"text": "myfunction_dict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "myfunction_list", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In any case, don't typecheck.", "It is completely unnecessary and has only \ndownsides.", "Refactor your code instead in a way you don't need to typecheck.", "You only get benefits in doing so, both in short and long run."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "don't typecheck", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["isinstance is preferrable over type because it also evaluates as True when you compare an object instance with it's superclass, which basically means you won't ever have to special-case your old code for using it with dict or str subclasses."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class a_dict(dict):\n ...     pass\n ... \n &gt;&gt;&gt; type(a_dict()) == type(dict())\n False\n &gt;&gt;&gt; isinstance(a_dict(), dict)\n True\n &gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["Of course, there might be situations where you wouldn't want this behavior, but those are \u2013hopefully\u2013 a lot less common than situations where you do want it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I think it might be preferred to actually do"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if isinstance(x, str):\n    do_something_with_a_string(x)\nelif isinstance(x, dict):\n    do_somethting_with_a_dict(x)\nelse:\n    raise ValueError\n</code>\n</pre>\n", "senID": 1}, {"text": ["2 Alternate forms, depending on your code one or the other is probably considered better than that even.", "One is to not look before you leap"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n try:\n  one, two = tupleOrValue\nexcept TypeError:\n  one = tupleOrValue\n  two = None\n</code>\n</pre>\n", "senID": 3}, {"text": ["The other approach is from Guido and is a form of function overloading which leaves your code more open ended."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["http://www.artima.com/weblogs/viewpost.jsp?thread=155514"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://www.artima.com/weblogs/viewpost.jsp?thread=155514", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.artima.com/weblogs/viewpost.jsp?thread=155514"}]}], [{"text": ["I think I will go for the duck typing approach - \"if it walks like a duck, it quacks like a duck, its a duck\".", "This way you will need not worry about if the string is a unicode or ascii. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is what I will do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n In [53]: s='somestring'\n\nIn [54]: u=u'someunicodestring'\n\nIn [55]: d={}\n\nIn [56]: for each in s,u,d:\n    if hasattr(each, 'keys'):\n        print list(set(each.values()))\n    elif hasattr(each, 'lower'):\n        print [each]\n    else:\n        print \"error\"\n   ....:         \n   ....:         \n['somestring']\n[u'someunicodestring']\n[]\n</code>\n</pre>\n", "senID": 2}, {"text": ["The experts here are welcome to comment on this type of usage of ducktyping, I have been using it but got introduced to the exact concept behind it lately and am very excited about it.", "So I would like to know if thats an overkill to do."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You may want to check out typecheck.", "http://oakwinter.com/code/typecheck/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://oakwinter.com/code/typecheck/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://oakwinter.com/code/typecheck/"}]}, {"text": ["Type-checking module for Python"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This package provides powerful run-time typechecking facilities for Python functions, methods and generators.", "Without requiring a custom preprocessor or alterations to the language, the typecheck package allows programmers and quality assurance engineers to make precise assertions about the input to, and output from, their code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["That should work - so no, there is nothing wrong with your code.", "However, it could also be done with a dict:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n {type(str()): do_something_with_a_string,\n type(dict()): do_something_with_a_dict}.get(type(x), errorhandler)()\n</code>\n</pre>\n", "senID": 1}, {"text": ["A bit more concise and pythonic wouldn't you say?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "hr", "senID": 3}, {"text": ["Edit.. Heeding Avisser's advice, the code also works like this, and looks nicer:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n {str: do_something_with_a_string,\n dict: do_something_with_a_dict}.get(type(x), errorhandler)()\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I've been using a different approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from inspect import getmro\nif (type([]) in getmro(obj.__class__)):\n    # This is a list, or a subclass of...\nelif (type{}) in getmro(obj.__class__)):\n    # This one is a dict, or ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["I can't remember why I used this instead of isinstance, though..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]