[[{"text": ["I'm assuming you want to do it in Python based on your tags.", "In that case, I'd use httplib.", "Optionally, somehow group the URLs by host so you can make multiple requests in one connection for those URLs that have the same host.", "Use the HEAD request."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n conn = httplib.HTTPConnection(\"example.com\")\nconn.request(\"HEAD\", \"/index.html\")\nresp = conn.getresponse()\nprint resp.status\n</code>\n</pre>\n", "senID": 1}], [{"text": ["To really make this fast you might also use eventlet which uses non-blocking IO to speed things up."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eventlet", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/eventlet"}]}, {"text": ["You can use a head request like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from eventlet import httpc\ntry:\n    res = httpc.head(url)\nexcept httpc.NotFound:\n    # handle 404\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can then put this into some simple script like that example script here.", "With that you should get pretty much concurrency by using a coroutines pool."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "that example script here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.secondlife.com/wiki/Eventlet/Examples"}]}], [{"text": ["Using httplib and urlparse:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "httplib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/httplib.html"}, {"href": "http://docs.python.org/library/urlparse.html", "text": "urlparse", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n def checkURL(url):\n    import httplib\n    import urlparse\n\n    protocol, host, path, query, fragment = urlparse.urlsplit(url)\n\n    if protocol == \"http\":\n        conntype = httplib.HTTPConnection\n    elif protocol == \"https\":\n        conntype = httplib.HTTPSConnection\n    else:\n        raise ValueError(\"unsupported protocol: \" + protocol)\n\n    conn = conntype(host)\n    conn.request(\"HEAD\", path)\n    resp = conn.getresponse()\n    conn.close()\n\n    if resp.status &lt; 400:\n        return true\n\n    return false\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Just send HTTP HEAD requests as shown in the accepted answer to this question."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/107405/how-do-you-send-a-head-http-request-in-python"}]}], [{"text": ["Instead of sending an HTTP GET request for each URL you can try sending an HTTP HEAD request.", "They are described in this document."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this document", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.4"}]}], [{"text": ["This is a trivial case for twisted.", "There are a couple of concurrency tools you can use to slow it down, otherwise, it'll pretty much do it all at once."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "twisted", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/"}]}, {"text": ["Twisted is definitely my favorite thing about python.", ":)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This might help you to start.", "The file sitelist.txt contains a list of URIs.", "You might have to install httplib2, highly recommended.", "I put a sleep between each request so if you have many URIs on the same site, your client will not be blacklisted for abusing resources."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import httplib2\n   import time\n\n   h = httplib2.Http(\".cache\")\n\n   f = open(\"sitelist.txt\", \"r\")\n   urllist = f.readlines()\n   f.close()\n\n   for url in urllist:\n      # wait 10 seconds before the next request - be nice with the site\n      time.sleep(10)\n      resp= {}\n      urlrequest = url.strip()\n      try:\n         resp, content = h.request(urlrequest, \"HEAD\")\n         if resp['status'] == \"200\":\n            print url, \"200 - Good\"\n         else:\n            print url, resp['status'], \" you might want to double check\"\n      except:\n         pass\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A Python program which does a similar work (for a list of URL stored at del.icio.us) is disastrous. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "del.icio.us", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://del.icio.us/"}, {"href": "http://www.bortzmeyer.org/disastrous.html", "text": "disastrous", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["And, yes, it uses HEAD and not GET but do note some (not HTTP standard) servers send different results for HEAD and for GET: the Python environment Zope is a typical culprit.", "(Also, in some case, network problems, for instance tunnels + broken firewalls which block ICMP, prevent big packets to get through so HEAD works and not GET."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]