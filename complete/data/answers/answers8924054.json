[[{"code": "<pre>\n<code>\n finalDict = dict([(k['id'], k['sigla']) for k in myDictList])\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT1\nAs comment mentioned, it will be a better way to do."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "EDIT1", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n finalDict = dict(((k['id'], k['sigla']) for k in myDictList))\n</code>\n</pre>\n", "senID": 2}, {"text": ["EDIT2"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n finalDict = dict((k['id'], k['sigla']) for k in myDictList)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Use dict() constructor with generator expression:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n finalDict = dict((elem['id'], elem['sigla']) for elem in myDictList)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n finaldict = {k['id']: k['sigla'] for k in myDictList}\n</code>\n</pre>\n", "senID": 0}, {"text": ["if you're on a current version of Python.", "Dictionary comprehensions have been introduced in Python 3 and backported to Python 2.7:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Python 2.7.2 (default, Jun 12 2011, 14:24:46) [MSC v.1500 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; myDictList = [{'id': 55, 'sigla': 'SNG'}, {'id': 62, 'sigla': 'TRP'},\n...  {'id': 71, 'sigla': 'PCNIM'},  {'id': 72, 'sigla': 'pc2ni'},\n...  {'id': 73, 'sigla': 'ccas'}, {'id': 74, 'sigla': 'ased1'},\n...  {'id': 75, 'sigla': '131s'}, {'id': 76, 'sigla': 'r888'},\n...  {'id': 56, 'sigla': 'DBL'}]\n&gt;&gt;&gt; {k['id']: k['sigla'] for k in myDictList}\n{71: 'PCNIM', 72: 'pc2ni', 73: 'ccas', 74: 'ased1', 75: '131s', 76: 'r888', 55:'SNG', 56: 'DBL', 62: 'TRP'}\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Consider taking a step back here and looking outside the narrow focus of the question.", "You say \"I do an SQL Query to obtain a list that have some dictionary\".", "What are you using to do the SQL query?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["By default Python database drivers return a tuple for each row rather than dict, so you presumably have some other code which is converting those tuples into a dict before you want to convert them back again.", "Your best bet would be to just do a query that returns tuples and construct your dict directly from that:"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "tuple", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n cursor.execute('SELECT id, sigla FROM sometable')\nmyDict = dict(cursor.fetchall())\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n res_dict = {}\nfor i in myDictList:\n    res_dict[i['id']] = i['sigla']\n</code>\n</pre>\n", "senID": 0}], [{"text": ["As others have already pointed out the best way to build your final dictionary is using a generator expression like:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "generator expression", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n finalDict = dict((d['id'], d['sigla']) for d in myDictList)\n</code>\n</pre>\n", "senID": 1}, {"text": ["And if you still need an iterable over your ids you can have that just calling finalDict.keys()."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "finalDict.keys()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]