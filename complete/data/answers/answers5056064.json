[[{"text": ["Convert to a set then back again:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list(set(d))\n</code>\n</pre>\n", "senID": 1}, {"text": ["If order matters, you can pass the values through a dict that remembers the original indices.", "This approach, while expressible as a single expression, is considerably more complicated:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [x for (i, x) in sorted((i, x) for (x, i) in dict((x, i) for (i, x) in reversed(list(enumerate(d)))).iteritems())]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Of course, you don't have to use comprehensions.", "For this problem, a fairly simple solution is available:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n a = []\nfor x in d:\n    if x not in a:\n        a.append(x)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Note that both the order-preserving solutions assume that you want to keep the first occurrence of each duplicated element."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["To exclude items from the list that appear more than once:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "exclude", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n d = [x for x in d if d.count(x) == 1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["For the example provided above, d will bind to an empty list."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Others have posted good solutions to remove duplicates."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "remove duplicates", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Lets say you got a list named Words and a list UniqueWords, start a loop on Words, on each iteration you check if the list UniqueWords contains the iterated element, if so then continue, if not then add it to the UniqueWords.", "In the end you will have a list without duplicates.", "Another way you could do is a loop in a loop and instead of adding you'd remove it if it was found more than once :)"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "Words", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "UniqueWords", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Words", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "UniqueWords", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "continue", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["I bet there are far more efficient ways though."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you're not worried about the order, d = list(set(d))). "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "d = list(set(d)))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you shouldn't have done that already, make sure to read the python docs on itertools, especially product(), permutations() and combinations()."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the python docs on itertools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html"}]}], [{"text": ["If order matters check out the unique_everseen function in the itertools recpies documentation.", "It give a relatively clean iterator-based solution."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "unique_everseen", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "itertools recpies", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#recipes"}]}, {"text": ["If order doesn't matter, convert to a set."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]