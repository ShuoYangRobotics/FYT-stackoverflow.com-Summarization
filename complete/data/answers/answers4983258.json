[[{"code": "<pre>\n<code>\n def strictly_increasing(L):\n    return all(x&lt;y for x, y in zip(L, L[1:]))\n\ndef strictly_decreasing(L):\n    return all(x&gt;y for x, y in zip(L, L[1:]))\n\ndef non_increasing(L):\n    return all(x&gt;=y for x, y in zip(L, L[1:]))\n\ndef non_decreasing(L):\n    return all(x&lt;=y for x, y in zip(L, L[1:]))\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n import itertools\nimport operator\n\ndef monotone_increasing(lst):\n    pairs = zip(lst, lst[1:])\n    return all(itertools.starmap(operator.le, pairs))\n\ndef monotone_decreasing(lst):\n    pairs = zip(lst, lst[1:])\n    return all(itertools.starmap(operator.ge, pairs))\n\ndef monotone(lst):\n    return monotone_increasing(lst) or monotone_decreasing(lst)\n</code>\n</pre>\n", "senID": 0}, {"text": ["This approach is O(N) in the length of the list. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "O(N)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you have large lists of numbers it might be best to use numpy, and if you are:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import numpy as np\n\ndef monotonic(x):\n    dx = np.diff(x)\n    return np.all(dx &lt;= 0) or np.all(dx &gt;= 0)\n</code>\n</pre>\n", "senID": 1}, {"text": ["should do the trick."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["@6502 has the perfect code for lists, I just want to add a general version that works for all sequences:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def pairwise(seq):\n    items = iter(seq)\n    last = next(items)\n    for item in items:\n        yield last, item\n        last = item\n\ndef strictly_increasing(L):\n    return all(x&lt;y for x, y in pairwise(L))\n\ndef strictly_decreasing(L):\n    return all(x&gt;y for x, y in pairwise(L))\n\ndef non_increasing(L):\n    return all(x&gt;=y for x, y in pairwise(L))\n\ndef non_decreasing(L):\n    return all(x&lt;=y for x, y in pairwise(L))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import operator, itertools\n\ndef is_monotone(lst):\n    op = operator.le            # pick 'op' based upon trend between\n    if not op(lst[0], lst[-1]): # first and last element in the 'lst'\n        op = operator.ge\n    return all(op(x,y) for x, y in itertools.izip(lst, lst[1:]))\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n L = [1,2,3]\nL == sorted(L)\n\nL == sorted(L, reverse=True)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [0,1,2,3,3,4]\n&gt;&gt;&gt; l == sorted(l) or l == sorted(l,reverse=True)\n</code>\n</pre>\n", "senID": 0}]]