[[{"text": ["iterate thru all *.py files and put them as __all__\n, but i am curious why you need that, there MUST be a better way."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__all__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["here is a hacky way"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport glob\n__all__ = [ os.path.basename(f)[:-3] for f in glob.glob(os.path.dirname(__file__)+\"/*.py\")]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Add the __all__ Variable to __init__.py containing:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__all__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__init__.py", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n __all__ = [\"bar\", \"spam\", \"eggs\"]\n</code>\n</pre>\n", "senID": 1}, {"text": ["See also http://docs.python.org/tutorial/modules.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/tutorial/modules.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html"}]}], [{"text": ["Make the Foo directory a package by adding an __init__.py.", "In that __init__.py add:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import bar\nimport eggs\nimport spam\n</code>\n</pre>\n", "senID": 1}, {"text": ["Since you want it dynamic (which may or may not be a good idea), list all py-files with list dir and import them with something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import os\nfor module in os.listdir(os.path.dirname(__file__)):\n    if module == '__init__.py' or module[-3:] != '.py':\n        continue\n    __import__(module[:-3], locals(), globals())\ndel module\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then, from your code do this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import Foo\n</code>\n</pre>\n", "senID": 5}, {"text": ["You can now access the modules with"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n Foo.bar\nFoo.eggs\nFoo.spam\n</code>\n</pre>\n", "senID": 7}, {"text": ["etc.", "from Foo import * is not a good idea for several reasons, including name clashes and making it hard to analyze the code."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["See that your __init__.py defines __all__.", "The modules - packages doc says "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__all__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "modules - packages", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html#packages"}]}], [{"text": ["Look at the pkgutil module from the standard library.", "It will let you do exactly what you want as long as you have an __init__.py file in the directory.", "The __init__.py file can be empty."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["Expanding Mihail answer, I believe the non-hackish way (as in, not handling directly the file paths) is the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You'll get:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &lt;module 'Foo.bar' from '/home/.../Foo/bar.pyc'&gt;\n&lt;module 'Foo.spam' from '/home/.../Foo/spam.pyc'&gt;\n</code>\n</pre>\n", "senID": 2}]]