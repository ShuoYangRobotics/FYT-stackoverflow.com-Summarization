[[{"text": ["Answered my own question.", "Sigh"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Sigh", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs"}]}, {"text": ["I didn't realize it was passed into the widget constructor."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here is another solution for adding class definitions to the widgets after declaring the fields in the class."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self, *args, **kwargs):\n    super(SampleClass, self).__init__(*args, **kwargs)\n    self.fields['name'].widget.attrs['class'] = 'my_class'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Yet another solution that doesn't require changes in python code and so is better for designers and one-off presentational changes: https://bitbucket.org/kmike/django-widget-tweaks .", "Hope somebody will find it useful."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "https://bitbucket.org/kmike/django-widget-tweaks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://bitbucket.org/kmike/django-widget-tweaks"}]}], [{"text": ["Here is Simple way to alter in view.", "add below in view just before passing it into template."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n form = MyForm(instance = instance.obj)\nform.fields['email'].widget.attrs = {'class':'here_class_name'}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is a variation on the above which will give all fields the same class (e.g.", "jquery nice rounded corners)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Simple way to assign css class to every field\n  def __init__(self, *args, **kwargs):\n    super(TranslatedPageForm, self).__init__(*args, **kwargs)\n    for myField in self.fields:\n      self.fields[myField].widget.attrs['class'] = 'ui-state-default ui-corner-all'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Expanding on the method pointed to at docs.djangoproject.com:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyForm(forms.Form): \n    comment = forms.CharField(\n            widget=forms.TextInput(attrs={'size':'40'}))\n</code>\n</pre>\n", "senID": 1}, {"text": ["I thought it was troublesome to have to know the native widget type for every field, and thought it funny to override the default just to put a class name on a form field.", "This seems to work for me:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class MyForm(forms.Form): \n    #This instantiates the field w/ the default widget\n    comment = forms.CharField()\n\n    #We only override the part we care about\n    comment.widget.attrs['size'] = '40'\n</code>\n</pre>\n", "senID": 3}, {"text": ["This seems a little cleaner to me."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I'm not really familiar wit jQuery, but I do know that Firefox (and thus any good browser) will render CSS for any element that has CSS and exists in the HTML.", "In other words, I can make the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["&lt;"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &lt;form&gt;\n&lt;name&gt;Name:&lt;input type=\"text\" /&gt;&lt;/name&gt;\n&lt;age&gt;Age:&lt;input type=\"text\" /&gt;&lt;/age&gt;\n&lt;favcolor&gt;Favorite Color:&lt;input type=\"text\" /&gt;&lt;favcolor&gt;\n&lt;/form&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["And then have my css, instead of written to modify a class/id, can be written to modify anything inside that element.", "Like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n name {\ncolor: black;\n}\n\nname input {\nbackground-color: yellow;\nborder: 3px dotted black;\n}\n</code>\n</pre>\n", "senID": 4}]]