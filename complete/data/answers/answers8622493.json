[[{"text": ["You can use a set to eliminate the duplicates:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; len(x)\n333\n&gt;&gt;&gt; len(y)\n199\n&gt;&gt;&gt; s = set(x + y)\n&gt;&gt;&gt; len(s)\n532\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you can sum the members of the set instead."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "sum", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It is called inclusion exclusion principle so you can do like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ##Multiples of 3\nx = range(3, 1000, 3)\n\n##Multiples of 5\ny = range(5, 1000, 5)\n\n##multiple of 15 are counted twice\nz=range(15,1000,15)\n\n\na = sum(x)\nb = sum(y)\nc = sum(z)\nn = a + b -c\nprint(n)\n</code>\n</pre>\n", "senID": 1}, {"text": ["but beauty is in using generators or list comprehensions"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = sum(i for i in range(1000) if i%3 == 0 or i%5 == 0 )\nprint(a)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Where % is modulo and is remainder in integer devision.", "Nice thing about this is that codes reads so fluently and is direct translation of rules and can be read from left to right."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "modulo", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Modulo_operation"}]}, {"text": ["Both algorithms run times depends on n in this case is 1000.", "If n would be for instance 1000000000 you would have to wait for long time to complete.", "If you apply little mathematics you can find out that "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n sum(a for a in range(a1,a2,n))\n</code>\n</pre>\n", "senID": 6}, {"text": ["is actually arithmetic progression and total of this can be calculated in constant time no matter how big n is.", "http://en.wikipedia.org/wiki/Project_Euler#Example_problem_and_solutions"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "arithmetic progression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Arithmetic_progression"}, {"text": "http://en.wikipedia.org/wiki/Project_Euler#Example_problem_and_solutions", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Project_Euler#Example_problem_and_solutions"}]}], [{"text": ["Simple method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["sum(set(x+y))"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sum(set(x+y))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["sets have a fair bit of functionality you'll find useful for the PE problems. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "sets", "tag": "a", "pos": 0, "childList": [{"text": "set", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#set"}, {"text": "set", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You could also do it with a simple loop over the entire range pretty easily. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You're looking for sets."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sets", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#set"}]}, {"code": "<pre>\n<code>\n ##Multiples of 3\nx = range(3, 1000, 3)\n\n##Multiples of 5\ny = range(5, 1000, 5)\n\nx = list(set(x) - set(y))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Depending on what you're doing, you'll have to change the code.", "The above removes everything in y from x.", "It's like lists but you can do arithmetic on the items.  "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "y", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["To merge sorted sequences you could use heapq.merge:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "heapq.merge", "tag": "a", "pos": 0, "childList": [{"text": "heapq.merge", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/heapq.html#heapq.merge"}, {"text": "heapq.merge", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import heapq\nprint list(heapq.merge(xrange(3, 20, 3), xrange(5, 20, 5)))\n# -&gt; [3, 5, 6, 9, 10, 12, 15, 15, 18]\n</code>\n</pre>\n", "senID": 1}, {"text": ["To remove duplicate items you could use unique_justseenrecipe from itertools documentation:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "unique_justseenrecipe from itertools documentation", "tag": "a", "pos": 0, "childList": [{"text": "unique_justseen", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools#recipes"}, {"text": "unique_justseen", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n print list(unique_justseen([3, 5, 6, 9, 10, 12, 15, 15, 18]))\n# -&gt; [3, 5, 6, 9, 10, 12, 15, 18]\n</code>\n</pre>\n", "senID": 3}, {"text": ["In this case unique_justseen() could be simplified to:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "unique_justseen()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from itertools import groupby, imap\nfrom operator  import itemgetter\n\ndef unique_justseen(iterable):\n    return imap(itemgetter(0), groupby(iterable))\n</code>\n</pre>\n", "senID": 5}, {"text": ["These functions don't require input arguments to be sequences.", "They accept arbitrary iterables (including infinite) e.g., to generate an infinite sequence of multiples of 3 or 5:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n import heapq\nfrom itertools import count, takewhile\n\nm3, m5 = count(3, 3), count(5, 5) \nm3_5 = heapq.merge(m3, m5)\nuniq_m3_5 = unique_justseen(m3_5) # *all* unique multiples of 3 or 5\n</code>\n</pre>\n", "senID": 7}, {"text": ["To find the solution:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n print sum(takewhile(lambda x: x &lt; 1000, uniq_m3_5))\n# -&gt; 233168\n# check that it is correct\nprint sum(set(range(3, 1000, 3) + range(5, 1000, 5)))\n# -&gt; 233168\nprint sum(x for x in xrange(1000) if x % 3 == 0 or x % 5 == 0)\n# -&gt; 233168\nprint sumk(3, 1000) + sumk(5, 1000) - sumk(15, 1000)\n# -&gt; 233168\n</code>\n</pre>\n", "senID": 9}, {"text": ["Where sumk() is:"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "sumk()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def sumk(k, n):\n    m = (n-1)//k\n    return k*m*(m+1)//2\n</code>\n</pre>\n", "senID": 11}, {"text": ["The formula is from the Wikipedia link provided by @ralu."], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "the Wikipedia link", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Project_Euler#Example_problem_and_solutions"}, {"href": "http://stackoverflow.com/a/8622594/4279", "text": "@ralu", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I don't know if this is less effecient, but making two sets and doing boolean operations on both to remove duplicates seems redundant since the definition of a set is "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["so just add both ranges to one set and let \"creating\" the set remove the dupes:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n sum(set(range(3, 1000, 3) + range(5, 1000, 5)))\n</code>\n</pre>\n", "senID": 2}]]