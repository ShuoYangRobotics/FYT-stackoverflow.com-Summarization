[[{"text": ["I fixed a similar issue when using a geodjango model that was not using the default ORM for one of its functions.", "When I added a line to manually close the connection the error went away."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.djangoproject.com/ticket/9437"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.djangoproject.com/ticket/9437", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.djangoproject.com/ticket/9437"}]}, {"text": ["I still see the error randomly (~50% of requests) when doing stuff with user login/sessions however."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["In the switch, did you change PostgreSQL client/server versions?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I have seen similar problems with php+mysql, and the culprit was an incompatibility between the client/server versions (even though they had the same major version!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Smells like a possible threading problem.", "Django is not guaranteed thread-safe although the in-file docs seem to indicate that Django/FCGI can be run that way.", "Try running with prefork and then beat the crap out of the server.", "If the problem goes away ..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["Maybe the PYTHONPATH and PATH environment variable is different for both setups (Apache+mod_python and lighttpd + FastCGI)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In the end I switched back to Apache + mod_python (I was having other random errors with fcgi, besides this one) and everything is good and stable now."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The question still remains open.", "In case anybody has this problem in the future and solves it they can record the solution here for future reference.", ":)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Have you considered downgrading to Python 2.5.x (2.5.4 specifically)?", "I don't think Django would be considered mature on Python 2.6 since there are some backwards incompatible changes.", "However, I doubt this will fix your problem."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also, Django 1.0.2 fixed some nefarious little bugs so make sure you're running that.", "This very well could fix your problem."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I went through the same problem recently (lighttpd, fastcgi &amp; postgre).", "Searched for a solution for days without success, and as a last resort switched to mysql.", "The problem is gone."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Why not storing session in cache?", "Set"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n SESSION_ENGINE = \"django.contrib.sessions.backends.cache\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also you can try use postgres with pgbouncer (postgres - prefork server and don't like many connects/disconnects per time), but firstly check your postgresql.log."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pgbouncer", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Another version - you have many records in session tables and django-admin.py cleanup can help."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "django-admin.py cleanup", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["The problem could be mainly with Imports.", "Atleast thats what happened to me.", "I wrote my own solution after finding nothing from the web.", "Please check my blogpost here: Simple Python Utility to check all Imports in your project"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Simple Python Utility to check all Imports in your project", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://nandakishore.posterous.com/simple-djangopython-utility-to-check-all-the"}]}, {"text": ["Ofcourse this will only help you to get to the solution of the original issue pretty quickly and not the actual solution for your problem by itself."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Change from method=prefork to method=threaded solved the problem for me."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Possible solution: http://groups.google.com/group/django-users/browse_thread/thread/2c7421cdb9b99e48"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://groups.google.com/group/django-users/browse_thread/thread/2c7421cdb9b99e48", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groups.google.com/group/django-users/browse_thread/thread/2c7421cdb9b99e48"}]}, {"code": "<pre>\n<code>\n from django.db import connection \nfrom django.core import signals \ndef close_connection(**kwargs): \n    connection.close() \nsignals.request_started.connect(close_connection)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Not ideal thought, connecting twice to the DB is a workaround at best."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Possible solution: using connection pooling (pgpool, pgbouncer), so you have DB connections pooled and stable, and handed fast to your FCGI daemons."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The problem is that this triggers another bug, psycopg2 raising an InterfaceError because it's trying to disconnect twice (pgbouncer already handled this)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "InterfaceError", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Now the culprit is Django signal *request_finished* triggering connection.close(), and failing loud even if it was already disconnected.", "I don't think this behavior is desired, as if the request already finished, we don't care about the DB connection anymore.", "A patch for correcting this should be simple."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "connection.close()", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["The relevant traceback:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n /usr/local/lib/python2.6/dist-packages/Django-1.1.1-py2.6.egg/django/core/handlers/wsgi.py in __call__(self=&lt;django.core.handlers.wsgi.WSGIHandler object at 0x24fb210&gt;, environ={'AUTH_TYPE': 'Basic', 'DOCUMENT_ROOT': '/storage/test', 'GATEWAY_INTERFACE': 'CGI/1.1', 'HTTPS': 'off', 'HTTP_ACCEPT': 'application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate', 'HTTP_AUTHORIZATION': 'Basic dGVzdGU6c3VjZXNzbw==', 'HTTP_CONNECTION': 'keep-alive', 'HTTP_COOKIE': '__utma=175602209.1371964931.1269354495.126938948...none); sessionid=a1990f0d8d32c78a285489586c510e8c', 'HTTP_HOST': 'www.rede-colibri.com', ...}, start_response=&lt;function start_response at 0x24f87d0&gt;)\n  246                 response = self.apply_response_fixes(request, response)\n  247         finally:\n  248             signals.request_finished.send(sender=self.__class__)\n  249 \n  250         try:\nglobal signals = &lt;module 'django.core.signals' from '/usr/local/l.../Django-1.1.1-py2.6.egg/django/core/signals.pyc'&gt;, signals.request_finished = &lt;django.dispatch.dispatcher.Signal object at 0x1975710&gt;, signals.request_finished.send = &lt;bound method Signal.send of &lt;django.dispatch.dispatcher.Signal object at 0x1975710&gt;&gt;, sender undefined, self = &lt;django.core.handlers.wsgi.WSGIHandler object at 0x24fb210&gt;, self.__class__ = &lt;class 'django.core.handlers.wsgi.WSGIHandler'&gt;\n /usr/local/lib/python2.6/dist-packages/Django-1.1.1-py2.6.egg/django/dispatch/dispatcher.py in send(self=&lt;django.dispatch.dispatcher.Signal object at 0x1975710&gt;, sender=&lt;class 'django.core.handlers.wsgi.WSGIHandler'&gt;, **named={})\n  164 \n  165         for receiver in self._live_receivers(_make_id(sender)):\n  166             response = receiver(signal=self, sender=sender, **named)\n  167             responses.append((receiver, response))\n  168         return responses\nresponse undefined, receiver = &lt;function close_connection at 0x197b050&gt;, signal undefined, self = &lt;django.dispatch.dispatcher.Signal object at 0x1975710&gt;, sender = &lt;class 'django.core.handlers.wsgi.WSGIHandler'&gt;, named = {}\n /usr/local/lib/python2.6/dist-packages/Django-1.1.1-py2.6.egg/django/db/__init__.py in close_connection(**kwargs={'sender': &lt;class 'django.core.handlers.wsgi.WSGIHandler'&gt;, 'signal': &lt;django.dispatch.dispatcher.Signal object at 0x1975710&gt;})\n   63 # when a Django request is finished.\n   64 def close_connection(**kwargs):\n   65     connection.close()\n   66 signals.request_finished.connect(close_connection)\n   67 \nglobal connection = &lt;django.db.backends.postgresql_psycopg2.base.DatabaseWrapper object at 0x17b14c8&gt;, connection.close = &lt;bound method DatabaseWrapper.close of &lt;django.d...ycopg2.base.DatabaseWrapper object at 0x17b14c8&gt;&gt;\n /usr/local/lib/python2.6/dist-packages/Django-1.1.1-py2.6.egg/django/db/backends/__init__.py in close(self=&lt;django.db.backends.postgresql_psycopg2.base.DatabaseWrapper object at 0x17b14c8&gt;)\n   74     def close(self):\n   75         if self.connection is not None:\n   76             self.connection.close()\n   77             self.connection = None\n   78 \nself = &lt;django.db.backends.postgresql_psycopg2.base.DatabaseWrapper object at 0x17b14c8&gt;, self.connection = &lt;connection object at 0x1f80870; dsn: 'dbname=co...st=127.0.0.1 port=6432 user=postgres', closed: 2&gt;, self.connection.close = &lt;built-in method close of psycopg2._psycopg.connection object at 0x1f80870&gt;\n</code>\n</pre>\n", "senID": 7}, {"text": ["Exception handling here could add more leniency:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["/usr/local/lib/python2.6/dist-packages/Django-1.1.1-py2.6.egg/django/db/_init_.py"], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "/usr/local/lib/python2.6/dist-packages/Django-1.1.1-py2.6.egg/django/db/_init_.py", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "init", "tag": "em"}]}, {"text": "init", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n 63 # when a Django request is finished.\n   64 def close_connection(**kwargs):\n   65     connection.close()\n   66 signals.request_finished.connect(close_connection)\n</code>\n</pre>\n", "senID": 10}, {"text": ["Or it could be handled better on psycopg2, so to not throw fatal errors if all we're trying to do is disconnect and it already is:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["/usr/local/lib/python2.6/dist-packages/Django-1.1.1-py2.6.egg/django/db/backends/_init_.py"], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "/usr/local/lib/python2.6/dist-packages/Django-1.1.1-py2.6.egg/django/db/backends/_init_.py", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "init", "tag": "em"}]}, {"text": "init", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n 74     def close(self):\n   75         if self.connection is not None:\n   76             self.connection.close()\n   77             self.connection = None\n</code>\n</pre>\n", "senID": 13}, {"text": ["Other than that, I'm short on ideas."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}]]