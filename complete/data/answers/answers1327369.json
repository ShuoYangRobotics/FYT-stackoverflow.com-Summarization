[[{"text": ["Use ( ) and group(1) (re.search will return None if it doesn't find the result, so don't use group() directly):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "( )", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "don't use group() directly", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n title_search = re.search('&lt;title&gt;(.*)&lt;/title&gt;', html, re.IGNORECASE)\n\nif title_search:\n    title = title_search.group(1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try using capturing groups:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n title = re.search('&lt;title&gt;(.*)&lt;/title&gt;', html, re.IGNORECASE).group(1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Please, do NOT use regex to parse markup languages.", "Use lxml or beautifulsoup."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Please, do NOT use regex to parse markup languages. Use lxml or beautifulsoup.", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}], [{"text": ["Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n title = re.search('&lt;title&gt;(.*)&lt;/title&gt;', html, re.IGNORECASE).group(1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["re.search('&lt;title&gt;(.", "*)&lt;/title&gt;', s, re.IGNORECASE).group(1)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re.search('&lt;title&gt;(.*)&lt;/title&gt;', s, re.IGNORECASE).group(1)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Using regular expressions to parse the HTML is generally not a good idea.", "You can use any HTML parser like Beautiful Soup for that.", "Check out http://www.crummy.com/software/BeautifulSoup/documentation.html"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Using regular expressions to parse the HTML is generally not a good idea.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "http://www.crummy.com/software/BeautifulSoup/documentation.html", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/documentation.html"}]}, {"text": ["Also remember that some people, when confronted with a problem, think \"I know, I'll use regular expressions.", "\" Now they have two problems."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "some people, when confronted with a problem, think \"I know, I'll use regular expressions.\" Now they have two problems.", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}], [{"text": ["Don't use regular expressions for HTML parsing in Python.", "Use an HTML parser!", "(Unless you're going to write a full parser, which would be a of extra work when various HTML, SGML and XML parsers are already in the standard libraries."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If your handling \"real world\" tag soup HTML (which is frequently non-conforming to any SGML/XML validator) then use the BeautifulSoup package (which isn't in the standard libraries (yet) but is wide recommended for this purpose."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "tag soup", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]