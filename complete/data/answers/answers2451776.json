[[{"text": ["Too hard?", "Your TA is... well, the phrase would probably get me banned.", "Anyways, check to see if numb is negative.", "If it is then multiply numa by -1 and do numb = abs(numb).", "Then do the loop."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "numb", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "numa", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "-1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "numb = abs(numb)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["The abs() in the while condition is needed, since, well, it controls the number of iterations (how would you define a negative number of iterations?).", "You can correct it by inverting the sign of the result if numb is negative."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "numb", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So this is the modified version of your code.", "Note I replaced the while loop with a cleaner for loop."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #get user input of numbers as variables\nnuma, numb = input(\"please give 2 numbers to multiply seperated with a comma:\")\n\n#standing variables\ntotal = 0\n\n#output the total\nfor count in range(abs(numb)):\n    total += numa\n\nif numb &lt; 0:\n    total = -total\n\nprint total\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Perhaps you would accomplish this with something to the effect of"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n text = raw_input(\"please give 2 numbers to multiply separated with a comma:\")\nsplit_text = text.split(',')\na = int(split_text[0])\nb = int(split_text[1])\n# The last three lines could be written: a, b = map(int, text.split(','))\n# but you may find the code I used a bit easier to understand for now.\n\nif b &gt; 0:\n    num_times = b\nelse:\n    num_times = -b\n\ntotal = 0\n# While loops with counters basically should not be used, so I replaced the loop \n# with a for loop. Using a while loop at all is rare.\nfor i in xrange(num_times):\n    total += a \n    # We do this a times, giving us total == a * abs(b)\n\nif b &lt; 0:\n    # If b is negative, adjust the total to reflect this.\n    total = -total\n\nprint total\n</code>\n</pre>\n", "senID": 1}, {"text": ["or maybe"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a * b\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Try this on your TA:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Simulate multiplying two N-bit two's-complement numbers\n# into a 2N-bit accumulator\n# Use shift-add so that it's O(base_2_log(N)) not O(N)\n\nfor numa, numb in ((3, 5), (-3, 5), (3, -5), (-3, -5), (-127, -127)):\n    print numa, numb,\n    accum = 0\n    negate = False\n    if numa &lt; 0:\n        negate = True\n        numa = -numa\n    while numa:\n        if numa &amp; 1:\n            accum += numb\n        numa &gt;&gt;= 1\n        numb &lt;&lt;= 1\n    if negate:\n        accum = -accum\n    print accum\n</code>\n</pre>\n", "senID": 1}, {"text": ["output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 3 5 15\n-3 5 -15\n3 -5 -15\n-3 -5 15\n-127 -127 16129\n</code>\n</pre>\n", "senID": 3}], [{"text": ["How about something like that?", "(Uses no abs() nor mulitiplication)\nNotes:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "the abs() function is only used for the optimization trick. This snippet can either be removed or recoded.", "tag": "none", "senID": 1}, {"text": "the logic is less efficient since we're testing the sign of a and b with each iteration (price to pay to avoid both abs() and multiplication operator)", "tag": "none", "senID": 2}]}, {"code": "<pre>\n<code>\n def multiply_by_addition(a, b):\n\"\"\" School exercise: multiplies integers a and b, by successive additions.\n\"\"\"\n   if abs(a) &gt; abs(b):\n      a, b = b, a     # optimize by reducing number of iterations\n   total = 0\n   while a != 0:\n      if a &gt; 0:\n         a -= 1\n         total += b\n      else:\n         a += 1\n         total -= b\n   return total\n\nmultiply_by_addition(2,3)\n6\nmultiply_by_addition(4,3)\n12\nmultiply_by_addition(-4,3)\n-12\nmultiply_by_addition(4,-3)\n-12\nmultiply_by_addition(-4,-3)\n12\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Thanks everyone, you all helped me learn a lot.", "This is what I came up with using some of your suggestions"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #this is apparently a better way of getting multiple inputs at the same time than the \n#way I was doing it\ntext = raw_input(\"please give 2 numbers to multiply separated with a comma:\")\nsplit_text = text.split(',')\nnuma = int(split_text[0])\nnumb = int(split_text[1])\n\n#standing variables\ntotal = 0\n\nif numb &gt; 0:\n    repeat = numb\nelse:\n    repeat = -numb\n\n#for loops work better than while loops and are cheaper\n#output the total\nfor count in range(repeat):\n    total += numa\n\n\n#check to make sure the output is accurate\nif numb &lt; 0:\n    total = -total\n\n\nprint total\n</code>\n</pre>\n", "senID": 1}, {"text": ["Thanks for all the help everyone."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]