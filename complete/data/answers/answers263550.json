[[{"text": ["From what i think i've understood you have two options"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["you could either use an XML style \"markup\" to let them define entities and their groupings, but that may not be best."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Your alternatives are yes, yoou could embedd a language, but do you really need to, wouldnt that be overkill, and how can you control it?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you only need really simple syntax then perhaps write your own language.", "Its actually not that hard to create a simple interpreter, as long as you have a strict, unambiguous language.", "Have a look for some examples of compilers in whatever youre using, c#?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I wrote a very simple interperter in java at uni, it wasnt as hard as you'd think."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["This looks like a perfect scenario for a simple DSL.", "See http://msdn.microsoft.com/en-us/library/bb126235(VS.80).aspx for some information."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://msdn.microsoft.com/en-us/library/bb126235(VS.80).aspx", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/bb126235(VS.80).aspx"}]}, {"text": ["You could also use a scripting language such as lua.Net. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you really just want a dirt simple language, you want a 'recursive descent parser'."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, a language like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n SCENARIO MyScenario\nDELAY 1\nCOUNT 1 ADD 1\nDIRECT_POWER 23, False, 150\nWAIT 3\n...\nEND_SCENARIO\n</code>\n</pre>\n", "senID": 2}, {"text": ["You might have a grammar like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n scenario :: 'SCENARIO' label newline _cmds END_SCENARIO\ncmds::  _delay or _count or _direct_power or...\ndelay:: 'DELAY' number\n</code>\n</pre>\n", "senID": 4}, {"text": ["Which gives code like:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def scenario():\n    match_word('SCENARIO')\n    scenario_name = match_label()\n    emit('var scenario = new Scenario();')\n    cmds()\n    match_word('END_SCENARIO')\n    emit('byte[] ' + scenario_name + ' = scenario.Compile();')\n\ndef delay():\n    match_word('DELAY')\n    length = match_number()\n    emit('scenario.Add(new DelayCommand('+ length +'))')\n\ndef cmds():\n    word = peek_next_word()\n    if word == 'DELAY':\n       delay()\n    elif ...\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Here's a Pythonic solution for building a DSL that you can use to compile and create byte code arrays."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["These are relatively simple classes to define.", "Each class here be reasonably easy to implement as Python modules that directly call your base C# modules."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The syntax is pure Python with no additional parsing or lexical scanning required."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["To add to S.Lott's comment, here's how you eval a Python script from C#"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval a Python script from C#", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.redmountainsw.com/wordpress/archives/embedding-ironpython-c-calling-python-script"}]}], [{"text": ["While it might be great fun to create this mini-language and code it all up, the real questions you need to ask are:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["\"Really neat\" features have a way of getting built when the reality might indicate the true answer to such a request is \"no\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["See if you have a stakeholder willing to sponsor this before proceeding.", "Then check with the end users to see what they really want before committing to the project."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Cheers,"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["-R"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]