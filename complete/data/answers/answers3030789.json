[[{"text": ["Dude, seems you have tried everything but the simplest thing, lines.startswith('\\r'):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lines.startswith('\\r')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; line = '\\rSET ENABLE ACK\\n'\n&gt;&gt;&gt; line.startswith('\\r')\nTrue\n&gt;&gt;&gt; '\\rSET ENABLE ACK\\n'.startswith('\\r')\nTrue\n</code>\n</pre>\n", "senID": 1}, {"text": ["For now, just hold on on using repr(), \\r and r'string' and go with the simplest thing to avoid confusion."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can try either:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if repr(line).startswith(r'\\r'):\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if line.startswith('\\r'):\n</code>\n</pre>\n", "senID": 3}, {"text": ["The latter is better: it seems like you are using repr only to get at the escaped character."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "repr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print repr(line)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Returns:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n '\\rSET ENABLE ACK\\n'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n line.find('\\r')\nline.startswith('\\r')\n'\\r' in line\n</code>\n</pre>\n", "senID": 5}, {"text": ["are what you are looking for.", "Example:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; line = '\\rSET ENABLE ACK\\n'\n&gt;&gt;&gt; print repr(line)\n'\\rSET ENABLE ACK\\n'\n&gt;&gt;&gt; line.find('\\r')\n0\n&gt;&gt;&gt; line.startswith('\\r')\nTrue\n&gt;&gt;&gt; '\\r' in line\nTrue\n</code>\n</pre>\n", "senID": 7}, {"text": ["repr() returns a display string.", "It actually contains the quotes and backslashes you see when you print the line:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "display string", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print line\nSET ENABLE ACK\n\n&gt;&gt;&gt; print repr(line)\n'\\rSET ENABLE ACK\\n'\n&gt;&gt;&gt; print len(line)\n16\n&gt;&gt;&gt; print len(repr(line))\n20\n</code>\n</pre>\n", "senID": 9}], [{"text": ["It's not entirely clear what you're asking.", "You speak of a string, but also a \"raw version\", and your string contains \"RAWSTRING\", which seems to imply you are talking about raw strings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["None of these are quite the same thing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you have an ordinary string with the character represented by '\\r' in it, then you can use any ordinary means to match:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"\\rastring\".find('\\r')\n0\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you defined an actual \"raw string\", that won't work because what you put in was not the '\\r' character, but the two characters '\\' and 'r':"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "actual", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; r\"\\rastring\".find('\\r')\n-1\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["In this case, or in the case of an ordinary string that happens to have the characters '\\' and 'r', and you want to find those two characters, you'll need to search using a raw string:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; r\"\\rastring\".find(r'\\r')\n0\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 7}, {"text": ["Or you can search for the sequence by escaping the backslash itself:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; r\"\\rastring\".find('\\\\r')\n0\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 9}], [{"code": "<pre>\n<code>\n if '\\r' in line:\n</code>\n</pre>\n", "senID": 0}, {"text": ["If that isn't what you mean, tell us PRECISELY what is in line.", "Do this:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "line", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print repr(line)\n</code>\n</pre>\n", "senID": 2}, {"text": ["and copy/past the result into a edit of your question."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Re your subject: backslash is an escape character, \"\\r\" is an escaped character."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Simplest:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = r'\\rRAWSTRING'\n&gt;&gt;&gt; s.startswith(r'\\r')\nTrue\n</code>\n</pre>\n", "senID": 1}, {"text": ["Unless I badly misunderstand what you're saying, you need to look for r'\\r' (or, equivalently but perhaps a tad less readably, '\\\\r'), the escape sequence, not for '\\r', the carriage return character itself."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "r'\\r'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'\\\\r'", "childNum": 0, "tag": "code", "childList": []}, {"text": "sequence", "childNum": 0, "tag": "em", "childList": []}, {"text": "not", "childNum": 0, "tag": "em", "childList": []}, {"text": "'\\r'", "childNum": 0, "tag": "code", "childList": []}]}]]