[[{"text": ["Just create a string out of it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n myinteger = 212345\nnumber_string = str(myinteger)\n</code>\n</pre>\n", "senID": 1}, {"text": ["That's enough.", "Now you can iterate over it:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for ch in number_string:\n    print ch # will print each digit in order\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or you can slice it:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print number_string[:2] # first two digits\nprint number_string[-3:] # last three digits\nprint number_string[3] # forth digit\n</code>\n</pre>\n", "senID": 5}, {"tag": "hr", "senID": 6}, {"text": ["Or better, don't convert the user's input to an integer (the user types a string)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n isbn = raw_input()\nfor pos, ch in enumerate(reversed(isbn)):\n    print \"%d * %d is %d\" % pos + 2, int(ch), int(ch) * (pos + 2)\n</code>\n</pre>\n", "senID": 8}, {"text": ["For more information read a tutorial."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tut"}]}], [{"code": "<pre>\n<code>\n while number:\n    digit = number % 10\n    # do whatever with digit\n    number /= 10\n</code>\n</pre>\n", "senID": 0}, {"text": ["On each iteration of the loop, it removes the last digit from number, assigning it to $digit.", "It's in reverse, starts from the last digit, finishes with the first"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n list_of_ints = [int(i) for i in str(ISBN)]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Will give you a sorted list of ints.", "Of course, given duck typing, you might as well work with str(ISBN)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit: As mentioned in the comments, this list isn't sorted in the sense of being ascending or descending, but it does have a defined order (sets, dictionaries, etc in python in theory don't, although in practice the order tends to be fairly reliable).", "If you want to sort it:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["list_of_ints.sort()"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["is your friend.", "Note that sort() sorts in place (as in, actually changes the order of the existing list) and doesn't return a new list."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["On Older versions of Python..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n map(int,str(123))\n</code>\n</pre>\n", "senID": 1}, {"text": ["On New Version 3k"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n list(map(int,str(123)))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Convert it to string and map over it with the int() function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n map(int, str(1231231231))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How about a one-liner list of digits..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ldigits = lambda n, l=[]: not n and l or l.insert(0,n%10) or ldigits(n/10,l)\n</code>\n</pre>\n", "senID": 1}]]