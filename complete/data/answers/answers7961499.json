[[{"text": ["Try the reversed builtin:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "reversed", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "reversed", "tag": "a"}]}, {"href": "http://docs.python.org/library/functions.html#reversed", "text": "reversed", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n for c in reversed(string):\n     print c\n</code>\n</pre>\n", "senID": 1}, {"text": ["The reversed() call will make an iterator rather than copying the entire string. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "reversed()", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["PEP 322 details the motivation for reversed() and its advantages over other approaches."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "PEP 322", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0322/"}, {"text": "reversed()", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["Yes, the second syntax shortcut creates an intermediate string and has an associated performance penalty. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The first version is better written as:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for index, char in enumerate(reversed(s)):\n   print \"pos %d: %s\" % (index, char)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Which is easy to comprehend.", "Neither reversed nor enumerate` need to make a copy of the string. "], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "reversed", "tag": "a", "pos": 1, "childList": [{"text": "reversed", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#reversed"}, {"text": "reversed", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/functions.html#reversed", "text": "enumerate", "childNum": 1, "tag": "a", "childList": [{"text": "enumerate", "tag": "code"}]}, {"text": "enumerate", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also be careful about using string as a variable name, as it is also the name of a module in the standard library."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "string", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/string.html", "text": "a module in the standard library", "childNum": 0, "tag": "a", "childList": []}]}], [{"code": "<pre>\n<code>\n string = \"trick or treat\"\n for c in string[::-1]:\n     print c\n</code>\n</pre>\n", "senID": 0}, {"text": ["I would use that.", "It is probably quite fast although there may be a slightly better way (but I doubt it)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["EDIT:\nActually, with a second test using a program I hacked together, reversed is probably the way to go."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "reversed", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n ==== Results ====\nSample 1: 0.0225071907043 # Using a for loop\nSample 2: 0.0100858211517 # Using reversed\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Less code is usually faster in Python.", "Luckily, you don't have to guess:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n python -mtimeit -s\"s='x'*100000\" \"for x in s[::-1]: pass\"\n100 loops, best of 3: 1.99 msec per loop\n\npython -mtimeit -s\"s='x'*100000\" \"for x in reversed(s): pass\"\n1000 loops, best of 3: 1.97 msec per loop\n\npython -mtimeit -s\"s='x'*100000\" \"for i in xrange(len(s)-1, 0-1, -1): s[i]\"\n100 loops, best of 3: 4.95 msec per loop\n</code>\n</pre>\n", "senID": 1}, {"text": ["So the shorter code is a bit faster, but it comes with a memory overhead."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["reversed takes an iterable and and returns an iterator that moves backwards.", "string[::-1] is fine, but it creates a new, reversed string instead.", "If you just want to iterate, then this will probably better:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "reversed", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "string[::-1]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n for c in reversed(string):\n    print c\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to use the reversed string afterwards, creating it once will be better."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n string = \"trick or treat\"\nfor c in reversed(string):\n    print c\n</code>\n</pre>\n", "senID": 0}, {"text": ["Will do what I think you want.", "It uses an iterator.", "This should work with anything that has __reveresed__() or __len__() and __getitem__() implemented.", "__getitem__() would have to take int arguments starting at 0."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]