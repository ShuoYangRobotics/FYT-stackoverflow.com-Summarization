[[{"text": ["Are your function a part of an object?", "If so you could use getattr function:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "getattr", "tag": "a", "pos": 1, "childList": [{"text": "getattr", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#getattr"}, {"text": "getattr", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt; class A:\n    def filter_bunnies(self, pets):\n        print('bunnies')\n\n&gt;&gt;&gt; getattr(A(), 'filter_bunnies')(1)\nbunnies\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Yes, you can use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n globals()['filter_bunnies']()\n</code>\n</pre>\n", "senID": 1}, {"text": ["to call 'filter_bunnies'."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can use the built-in function locals() to get a dictionary of variables and functions, here is an example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def a(str):\n    print(\"A\" + str)\n\ndef b(str):\n    print(\"B\" + str)\n\ndef c(str):\n    print(\"C\" + str)\n\nfor f in ['a', 'b', 'c']:\n    locals()[f]('hello')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["My code crystal ball detects that there may be some commonality among your filter functions.", "Are they really different functions, or are they all the same with just a single filter value that is different?", "If you have substantial repetition in a program, stop and think if it is worth some refactoring into a single common function, which will be much more maintainable than a set of very similar functions.", "You could have a single function filterByType that takes 2 arguments, the list of pets and the filtering type, and then just define a dict to map input strings to the type object or class that you mean to filter by."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filterByType", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}], [{"text": ["using eval?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#eval"}]}], [{"text": ["See the eval function."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "eval", "tag": "a", "pos": 0, "childList": [{"text": "eval", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html?highlight=eval#eval"}, {"text": "eval", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The easiest and ugliest way would be to call it by using eval function, which would evaluate your string.", "Much cleaner solution is to use getattr function on a module to which function belongs to obtain function's reference, and then call it by reference."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Another way that just occurred to me to obtain function-s reference would be with use of eval function like this func = eval(\"filter_bunnies\")"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "func = eval(\"filter_bunnies\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Be careful when you're using eval, especially if the value of eval is dependent on some sort of user input as it could make you execute unwanted/malicious code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Usually, when I need to dispatch a function call to one of several functions based on a string, I will make the functions elements of a dict.", "I've done this, for example, in writing a simple interpreter, where each keyword is implemented by a different function.", "You can even use decorators to elegantly take care of the assignments:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n KEYWORD_FUNCTIONS = {}\n\ndef MAKE_KEYWORD( f ):\n    KEYWORD_FUNCTIONS[ f.func_name ] = f\n    return f\n\n@MAKE_KEYWORD\ndef KEYWORD_A( arg ):\n    print \"Keyword A with arg %s\" % arg\n\n@MAKE_KEYWORD\ndef KEYWORD_B( arg ):\n    print \"Keyword B with arg %s\" % arg\n\nif __name__ == \"__main__\":\n    KEYWORD_FUNCTIONS[ \"KEYWORD_A\" ]( \"first_argument\" )\n    KEYWORD_FUNCTIONS[ \"KEYWORD_B\" ]( \"second_argument\" )\n</code>\n</pre>\n", "senID": 1}]]