[[{"text": ["I guess you should try what this very site uses: google-code-prettify (from this question)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "google-code-prettify", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/google-code-prettify/"}, {"href": "http://stackoverflow.com/questions/235982/how-code-color-is-set-in-stackoverflow", "text": "this question", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["[EDIT]J.F.", "Sebastian pointed me to Pygments (see this answer)"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Pygments", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pygments.org/"}, {"href": "http://stackoverflow.com/questions/325165/is-there-a-library-that-will-detect-the-source-code-language-of-a-block-of-code#325521", "text": "this answer", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Pygments can guess too.", "Here is an example from the documentation:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Pygments", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pygments.org"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from pygments.lexers import guess_lexer, guess_lexer_for_filename\n\n&gt;&gt;&gt; guess_lexer('#!/usr/bin/python\\nprint \"Hello World!\"')\n&lt;pygments.lexers.PythonLexer&gt;\n\n&gt;&gt;&gt; guess_lexer_for_filename('test.py', 'print \"Hello World!\"')\n&lt;pygments.lexers.PythonLexer&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Ohcount has been developed for this exactly:\nhttp://labs.ohloh.net/ohcount"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://labs.ohloh.net/ohcount", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://labs.ohloh.net/ohcount"}]}, {"text": ["They are using it at www.ohloh.net to count the contribution of people in languages."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The bad news is that it is coded in ruby, but I am sure that you can integrate it one way or the other in python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Vim uses a bunch of interesting tests and regular expressions to look for certain file formats.", "You can look at the vim instruction file at vim/vim71/filetype.vim, or here online."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "vim/vim71/filetype.vim", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://vim.cybermirror.org/runtime/filetype.vim", "text": "here online", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["This can be a little difficult to do reliably.", "For example, what language is the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print(\"blah\");\n</code>\n</pre>\n", "senID": 1}, {"text": ["The most reliable way (aside from having the user select the correct language, of course) is to check if the first line is starts with #!", "(\"hashbang\") - whatever is after this is the intepreter for the scripting language."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "#!", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["That will work reliably for a lot of scripting languages (including python, shell scripting, perl, ruby etc etc..), but not for compiled languages.."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You could look for unique syntax stylings, or specific keywords and weight each one towards a specific language.", "For example $#somevar is probably Perl.", "somevar.each do |another| ..... end is probably ruby.. but this would end up being a lot of work, and will not always work (especially with short code blocks)"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "$#somevar", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "somevar.each do |another| ..... end", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "lot", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["The other obvious way is to use the file-extension.", "If it's *.pl it's probably Perl code.."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "*.pl", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["What are you trying to achieve?", "If you want to syntax highlight, look at what google-code-prettify does - basically a reasonably intelligent, generic syntax highlighter.."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "google-code-prettify", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/google-code-prettify/"}]}, {"text": ["In the above above ambiguous example, print is probably a statement or function name, \"blah\" is probably a string.", "If you highlight those two differently, you've successfully highlighted a lot of different languages, without having to detect what one it actually is.. but that may not always work, depending on the task.."], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"blah\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "lot", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["What are your alternatives, among what languages?", "There is no way to determine this universally.", "But if you narrow your focus there is probably a tool somewhere"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You can check highlight.js which automatically highlights the code block, they say they are using some kind of heuristic methods to accomplish this http://softwaremaniacs.org/soft/highlight/en/ "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://softwaremaniacs.org/soft/highlight/en/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://softwaremaniacs.org/soft/highlight/en/"}]}], [{"text": ["As other have said Pygments will be your best bet."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]