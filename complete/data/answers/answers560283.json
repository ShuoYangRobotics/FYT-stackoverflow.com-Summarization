[[{"text": ["I think what you want is the zip function.", "If you have "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = [1,2,3]\ny = [4,5,6]\n</code>\n</pre>\n", "senID": 1}, {"text": ["then zip(x,y) == [(1,4),(2,5),(3,6)]"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "zip(x,y) == [(1,4),(2,5),(3,6)]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So your array could be constructed using"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a = numpy.array(zip(x,y), dtype=dtype)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["for your bonus question -- zip actually unzips too:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [1]: a = range(10)\nIn [2]: b = range(10, 20)\nIn [3]: c = zip(a, b)\nIn [4]: c\nOut[4]: \n[(0, 10),\n (1, 11),\n (2, 12),\n (3, 13),\n (4, 14),\n (5, 15),\n (6, 16),\n (7, 17),\n (8, 18),\n (9, 19)]\nIn [5]: d, e = zip(*c)\nIn [6]: d, e\nOut[6]: ((0, 1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18, 19))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Simon suggested argsort as an alternative approach; I'd recommend it as the way to go.", "No messy merging, zipping, or unzipping: just access by index."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "argsort", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html"}]}, {"code": "<pre>\n<code>\n idx = numpy.argsort(x)\nans = [ (x[idx[i]],y[idx[i]]) for i in idx]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think you just need to specify the axis that you are sorting on when you have made your final ndarray.", "Alternatively argsort one of the original arrays and you'll have an index array that you can use to look up in both x and y, which might mean you don't need values at all."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(scipy.org seems to be unreachable right now or I would post you a link to some docs)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Given that your description doesn't quite match your code snippet it's hard to say with certainty, but I think you have over-complicated the creation of your numpy array."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I couldn't get a working solution using Numpy's sort function, but here's something else that works:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sort", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import numpy\nx = [5,4,3]\ny = [33,44,55]\nr = numpy.asarray([(x[i],y[i]) for i in numpy.lexsort([x])])\n</code>\n</pre>\n", "senID": 1}, {"text": ["lexsort returns the permutation of the array indices which puts the rows in sorted order.", "If you wanted your results sorted on multiple keys, e.g.", "by x and then by y, use numpy.lexsort([x,y]) instead."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "lexsort", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "childList": []}, {"text": "numpy.lexsort([x,y])", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["zip() might be inefficient for large arrays.", "numpy.dstack() could be used instead of zip:"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "zip()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "might", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "numpy.dstack()", "tag": "a", "pos": 1, "childList": [{"text": "numpy.dstack()", "tag": "code"}], "childNum": 1, "href": "http://www.scipy.org/Numpy_Example_List#dstack"}, {"text": "numpy.dstack()", "childNum": 0, "tag": "code", "childList": []}, {"text": "zip", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n ndx = numpy.argsort(x)\nvalues = numpy.dstack(x[ndx], y[ndx])\n</code>\n</pre>\n", "senID": 1}]]