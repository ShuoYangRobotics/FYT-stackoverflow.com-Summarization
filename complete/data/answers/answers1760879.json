[[{"text": ["A few hints:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "The first parameter for the range() function is incorrect. It must be 1 not 2.  The start index included, the ending one is excluded.  This is btw a very good practice to avoid bugs.", "tag": "none", "senID": 1}, {"text": "With the modulo operator you found a way of detecting every 5 values;  you could use this to print a line when that happens.  You then would be left with having to find a way to not output a line when you output one value at at time; look in the ", "tag": "none", "senID": 2}, {"text": "An alternative approach is to use the 3rd argument of the range() function, to step though the sequence, in increments of 5).  Such a range would give you 1, 6, 11, 16 etc. in sequence, and you can use this number as the first of each line, and simple addition for the following ones.", "tag": "none", "senID": 3}]}], [{"text": ["You can start almost like you did (except you need to start from 1 - that 2 is really weird!-):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "really", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in range(1,51):\n   if i % 5 == 0:\n      print i\n</code>\n</pre>\n", "senID": 1}, {"text": ["but then you need to segue into an else clause for that if, because you do want to print something even when i is not a multiple of 5 -- just something different from the simple print i you're already doing when i is a multiple of 5...:"], "childNum": 8, "tag": "p", "senID": 2, "childList": [{"text": "else", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "childList": []}, {"text": "do", "childNum": 0, "tag": "strong", "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "childList": []}, {"text": "different", "childNum": 0, "tag": "em", "childList": []}, {"text": "print i", "childNum": 0, "tag": "code", "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "childList": []}, {"text": "is", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n else:\n      print i, ',',\n</code>\n</pre>\n", "senID": 3}, {"text": ["As other answers already said, the trailing comma means \"no newline yet\"!-)  ((It's plainer and more sensible in Python 3.whatever, but you're clearly using Python 2.something, and in those versions this is what you need to do))."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I've never used Python, but this should be close if not right."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range(1,51):\n      print i;\n      print \",\";\n      if (i%5==0)\n         { print \"\\n\";}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Also, remember that using print will cause a new line to start.", "Unless as noted above a comma is used afterwards."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You can collect values using a string for printing out later."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Some Hints"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": ["To print 1 to 50, you need to pass n+1 for eg, 1 to 51 in range function, its (i=1;i&lt;51,i++) in C alike syntax"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "range", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "(i=1;i&lt;51,i++)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["print comma if you want between every digits"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["to print line break for every 5, you can just use current if i%5==0: but print blank line, instead of i"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "if i%5==0:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["To concatenate num + string \",\" you can use `i`  or str(i) , you can do like `i` +\",\""], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "`i`  or str(i) , you can do like `i` +\",\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you dont need comma in the end, you could do like i%5 print \",\" else print \"\\n\" => "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["print i will print i line by line, and print i, will print in the same line "], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "print i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print i,", "childNum": 0, "tag": "code", "childList": []}]}]}, {"text": ["just my 2 cents"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"code": "<pre>\n<code>\n for i in range(1,51):\n    if i%5 == 0:\n        print i\n    else:\n        print i, \",\",\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n (there used to be python code here)\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT: My apologies, didn't realize this was homework.", "I reeeally need to check tags before answering.", "Here's an explanation of what needs to happen."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Obviously you know that you're trying to output consecutive numbers from 1 to 50, so you'll need a counter.", "You've figured out that it'll require a range() call, but it needs to be from 1 to 51, not from 2 to 50."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "range()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["The reason the range() call needs to be from 1 to 51 is this: it will start the variable i at 1, then check to see if it has reached its goal (51) before looping.", "If the goal is reached (meaning if i == 51) it will quit the loop without executing the loop's code.", "So rather than go from 1 to 50, you go from 1 to 51 so that we don't skip the 50th iteration."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "range()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "51", "childNum": 0, "tag": "code", "childList": []}, {"text": "i == 51", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Next, you're going to want to have the numbers appear on-screen.", "But using python's print command prints each number on a new line!", "That's obviously not what you want.", "So you're going to have to create a buffer string to append each number to until you're ready to print the line.", "You can call it 'output' or whatever."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Personally, I like to clear the buffer BEFORE the for loop just to be sure no residual memory traces find their way into the output.", "Call me paranoid.", "So I write output = \"\" on a line before the loop."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "output = \"\"", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Now you've got a buffer string, all you need to do is follow a logical flow:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["These steps should be pretty simple to figure out.", "Step 2 you've already seen before... To check if a number is a multiple of another number, simply use %.", "If A % B == 0 then A is a multiple of B."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "%", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "A % B == 0", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["This should be a pretty straightforward explanation for how to solve this problem.", "Hope it helps."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["And sorry for ruining your learning experience by posting the answer!", "Now you'll understand why the answer works."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"code": "<pre>\n<code>\n for i in range(1,51):\n    if i%5 != 0:\n        print str(i)+',' , # trailing comma means no \\n\n    else:\n        print i\n</code>\n</pre>\n", "senID": 0}]]