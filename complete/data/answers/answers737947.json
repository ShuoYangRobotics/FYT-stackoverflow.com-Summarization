[[{"text": ["Until you ACTUALLY run out of memory, thinking about this is a waste of time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When you finally do run out of memory, you'll need to use a temporary file to store objects that your process needs, but can't fit into memory."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Use pickle or shelve (see Data Persistence) your objects in a file.", "If that file happens to be on a disk named \"scratch\", well that's nice."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Data Persistence", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/persistence.html"}]}, {"text": ["Sometimes you want your temporary files to be on a separate disk from your other working files for performance reasons.", "In some environments (SAN, NAS, storage arrays) your disks are virtual and looking for a \"scratch\" disk doesn't have any performance benefit.", "In other environments (i.e., you own all the hardware) you can put temporary files on some other drive, making that drive a \"scratch\" disk."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Just an FYI, this is more a limitation of a 32-bit OS rather than being a Windows XP problem.", "You'll have the same problem in 32-bit Vista, linux, bsd... you get the idea.", "If you go the 64-bit route, you don't have these problems."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, Windows XP x64 allows up to 8 terabytes of memory per process."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "8 terabytes of memory per process", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Windows%5Fxp%5Ftablet%5Fpc%5Fedition#Advantages"}]}], [{"text": ["Scratch disks will benefit your application in the case that it works with very big files, "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Is that the case? "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If not, then i don't think you may find something that will benefit your application in scratch disks."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Memory mapped files might be what you are looking for.", "Python's implementation lets you use a file like a mutable string in memory."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Memory mapped files", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/mmap.html"}]}], [{"text": ["The Win32 API provides this: link text.", "You may be able to use these functions through PyWin32."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "link text", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/aa366527%28VS.85%29.aspx"}]}], [{"text": ["You could combine S.Lott's answer about using pickle (you should use cPickle though for better performance) with SqlLite."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["sqlite is built into python 2.5 and up, so all you'll need to do is import :), then just store the pickled objects as strings in there and you'll have a nice fast method of accessing the data (compared to building your own method) that will help keep you organized as well."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["note: cPickle is almost identical to pickle in use.", "Only difference is that it is written in C"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Useful Python Docs: "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["sqlite3 module"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["pickle module"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}, {"text": ["edit: It may be a good idea to have a user controlled memory usage limit.", "It would be a shame to be storing a bunch a data on disk and waiting on slow-ass disk I/O when the user has 8GB of RAM ;)"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["You are probably looking for something like ZODB.", "However, though ZODB tries hard to be transparent, no solution is going to be 100% free of artifacts.", "You have to write your code with an awareness that your objects primarily live in a database, but that there are multiple representations of your objects, there are caching/syncing issues, etc.", "Nothing is going to make this very difficult problem completely trivial for you."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]