[[{"text": ["As others have said, this is the Python string formatting/interpolation operator.", "It's basically the equivalent of sprintf in C, for example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["a = \"%d bottles of %s on the wall\" % (10, \"beer\")"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "a = \"%d bottles of %s on the wall\" % (10, \"beer\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["is equivalent to something like"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["a = sprintf(\"%d bottles of %s on the wall\", 10, \"beer\");"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "a = sprintf(\"%d bottles of %s on the wall\", 10, \"beer\");", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["in C.  Each of these has the result of a being set to \"10 bottles of beer on the wall\""], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"10 bottles of beer on the wall\"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Note however that this syntax is deprecated in Python 3.0; its replacement looks something like"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["a = \"{0} bottles of {1} on the wall\".format(10, \"beer\")"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "a = \"{0} bottles of {1} on the wall\".format(10, \"beer\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This works because any string literal is automatically turned into a str object by Python."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["The second % is the string interpolation operator."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Link to documentation."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Link to documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#string-formatting-operations"}]}], [{"text": ["It's a format specifier"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "format specifier", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#string-formatting"}]}, {"text": ["Simple usage:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # Prints: 0 1 2 3 4 5 6 7 8 9\nfor i in range(10):\n    print \"%d\" % i,\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n print \"%d%s\" % (100, \"trillion dollars\") # outputs: 100 trillion dollars\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you were to translate the code to English, it says: take the stringi and format it in to the predicate string."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "stringi", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "string", "tag": "em"}]}, {"text": "string", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Another example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n name = \"world\"\nprint \"hello, %s\" % (name)\n</code>\n</pre>\n", "senID": 2}, {"text": ["More information about format specifiers."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "More information about format specifiers.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#string-formatting"}]}], [{"text": ["See also this related question."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this related question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/517355/string-formatting-in-python"}]}]]