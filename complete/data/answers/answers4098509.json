[[], [{"text": ["Fame is an often-used commercial solution for time-series storage.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Fame", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sungard.com/financialsystems/products/bc_famesoftware.aspx"}]}, {"text": ["If you are serious about this, building your own will be a big job.", "HDF might be useful, they claim that it is suitable for tick data handling, and have C++ access.", "There is Python support here."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "HDF", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.hdfgroup.org/HDF5/"}, {"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://h5py.alfven.org/"}]}, {"text": ["Useful real-life experience from somebody with the same problem here, including HDF5 refs."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.puppetmastertrading.com/blog/2009/01/04/managing-tick-data-with-hdf5/"}]}], [{"text": ["Actually, this is quite similar to what I'm doing, which is monitoring changes players make to the world in a game.", "I'm currently using an sqlite database with python.", "At the start of the program, I load the disk database into memory, for fast writing procedures.", "Each change is put in to two lists.", "These lists are for both the memory database and the disk database.", "Every x or so updates, the memory database is updated, and a counter is pushed up one.", "This is repeated, and when the counter equals 5, it's reset and the list with changes for the disk is flushed to the disk database and the list is cleared.I have found this works well if I also set the writing more to WOL(Write Ahead Logging).", "This method can stand about 100-300 updates a second if I update memory every 100 updates and the disk counter is set to update every 5 memory updates.", "You should probobly choose binary, sense, unless you have faults in your data sources, would be most logical"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Using D-Bus format to send the information may be to your advantage.", "The format is standard, binary, and D-Bus is implemented in multiple languages, and can be used to send both over the network and inter-process on the same machine."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you are just storing, then use system tools.", "Don't write your own.", "If you need to do some real-time processing of the data before it is stored, then that's something completely different."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It just occurred to me after reading this thread on storing integers efficiently given certain conditions that we are wasting a lot of bits when we store tick data as doubles or floats or whatever.", "THE PRICES ARE QUANTIZED!", "And quite severely, at that.", "For example, yesterday's NQ range was from about 2175-2191, or about 26 points, quantized by 0.25.", "So that limits the ticks to ~100 different prices.", "See where I'm going with this?", "You only need one byte for each price.", "Stocks are quantized by 0.01 so you'd need ~ 1 byte for each dollar in the daily range.  "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "storing integers efficiently given certain conditions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/4104898/python-write-1-000-000-ints-to-file"}, {"text": "THE PRICES ARE QUANTIZED!", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["So the method I'm outlining is:\n(1) store high price, low price, and increment as one line header\n(2) store tick data after that as two bytes, with the two left-most bits used to encode the tick type (00 = last, 01 = bid, 11 = ask)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I think this is something a CS would approve of!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]