[[{"text": ["I do this by declaring an actual function for each environment.", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def test():\n    env.user = 'testuser'\n    env.hosts = ['test.server.com']\n\ndef prod():\n    env.user = 'produser'\n    env.hosts = ['prod.server.com']\n\ndef deploy():\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["Using the above functions, I would type the following to deploy to my test environment:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n fab test deploy\n</code>\n</pre>\n", "senID": 3}, {"text": ["...and the following to deploy to production:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n fab prod deploy\n</code>\n</pre>\n", "senID": 5}, {"text": ["The nice thing about doing it this way is that the test and prod functions can be used before any fab function, not just deploy.", "It is incredibly useful."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "test", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "prod", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "any", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["Here's a simpler version of Server Horror's answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from fabric.api import settings\n\ndef mystuff():\n    with settings(host_string='12.34.56.78'):\n        run(\"hostname -f\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Was stuck on this myself, but finally figured it out.", "You simply can't set the env.hosts configuration from within a task.", "Each task is executed N times, once for each Host specified, so the setting is fundamentally outside of task scope."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "can't", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "within", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["Looking at your code above, you could simply do this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n @hosts('dev')\ndef deploy_dev():\n    deploy()\n\n@hosts('staging')\ndef deploy_staging():\n    deploy()\n\ndef deploy():\n    # do stuff...\n</code>\n</pre>\n", "senID": 2}, {"text": ["Which seems like it would do what you're intending."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Or you can write some custom code in the global scope that parses the arguments manually, and sets env.hosts before your task function is defined.", "For a few reasons, that's actually how I've set mine up."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You need to set host_string an example would be:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "host_string", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from fabric.context_managers import settings as _settings\n\ndef _get_hardware_node(virtualized):\n    return \"localhost\"\n\ndef mystuff(virtualized):\n    real_host = _get_hardware_node(virtualized)\n    with _settings(\n        host_string=real_host):\n        run(\"echo I run on the host %s :: `hostname -f`\" % (real_host, ))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use roledefs"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "roledefs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.fabfile.org/en/latest/usage/execution.html#roles"}]}, {"code": "<pre>\n<code>\n from fabric.api import env, run\n\nenv.roledefs = {\n    'test': ['localhost'],\n    'dev': ['user@dev.example.com'],\n    'staging': ['user@staging.example.com'],\n    'production': ['user@production.example.com']\n} \n\ndef deploy():\n    run('echo test')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Choose role with -R:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ fab -R test deploy\n[localhost] Executing task 'deploy'\n...\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can assign to env.hoststring before executing a subtask.", "Assign to this global variable in a loop if you want to iterate over multiple hosts."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "env.hoststring", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Unfortunately for you and me, fabric is not designed for this use case.", "Check out the main function at http://github.com/bitprophet/fabric/blob/master/fabric/main.py to see how it works."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "main", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://github.com/bitprophet/fabric/blob/master/fabric/main.py", "text": "http://github.com/bitprophet/fabric/blob/master/fabric/main.py", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["To explain why it's even an issue.", "The command fab is leveraging fabric the library to run the tasks on the host lists.", "If you try and change the host list inside a task, you're esentially attempting to change a list while iterating over it.", "Or in the case where you have no hosts defined, loop over an empty list where the code where you set the list to loop over is never executed."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "fab", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["The use of env.host_string is a work around for this behavior only in that it's specifying directly to the functions what hosts to connect with.", "This causes some issues in that you'll be remaking the execution loop if you want to have a number of hosts to execute on."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The simplest way the people make the ability to set hosts at run time, is to keep the env populatiing as a distinct task, that sets up all the host strings, users, etc.", "Then they run the deploy task.", "It looks like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n fab production deploy\n</code>\n</pre>\n", "senID": 3}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n fab staging deploy\n</code>\n</pre>\n", "senID": 5}, {"text": ["Where staging and production are like the tasks you have given, but they do not call the next task themselves.", "The reason it has to work like this, is that the task has to finish, and break out of the loop (of hosts, in the env case None, but it's a loop of one at that point), and then have the loop over the hosts (now defined by the preceding task) anew."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["You need to modify env.hosts at the module level, not within a task function.", "I made the same mistake."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from fabric.api import *\n\ndef _get_hosts():\n    hosts = []\n    ... populate 'hosts' list ...\n    return hosts\n\nenv.hosts = _get_hosts()\n\ndef your_task():\n    ... your task ...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It's very simple.", "Just initialize the env.host_string variable and all of the following commands will be executed on this host."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from fabric.api import env, run\n\nenv.host_string = 'user@exmaple.com'\n\ndef foo:\n    run(\"hostname -f\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Using roles is currently considered to be the \"proper\" and \"correct\" way of doing this and is what you \"should\" do it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That said, if you are like most of what you \"would like\" or \"desire\" is the ability to perform a \"twisted syster\" or switching target systems on the fly."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So for entertainment purposes only (!", ") the following example illustrates what many might consider to a risky, and yet somehow thoroughly satisfying, manoeuvre that goes something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n env.remote_hosts       = env.hosts = ['10.0.1.6']\nenv.remote_user        = env.user = 'bob'\nenv.remote_password    = env.password = 'password1'\nenv.remote_host_string = env.host_string\n\nenv.local_hosts        = ['127.0.0.1']\nenv.local_user         = 'mark'\nenv.local_password     = 'password2'\n\ndef perform_sumersault():\n    env_local_host_string = env.host_string = env.local_user + '@' + env.local_hosts[0]\n    env.password = env.local_password\n    run(\"hostname -f\")\n    env.host_string = env.remote_host_string\n    env.remote_password = env.password\n    run(\"hostname -f\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then running:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n fab perform_sumersault\n</code>\n</pre>\n", "senID": 5}]]