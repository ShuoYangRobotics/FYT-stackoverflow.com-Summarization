[[{"text": ["You can use a list comprehension (Python 2.6+):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n y = [\"{0:0&gt;2}\".format(v) for v in x]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or for Python prior to 2.6:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n y = [\"%02d\" % v for v in x]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit: Missed the fact that you wanted zero-padding..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You want to use the built-in map function:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "map", "tag": "a", "pos": 0, "childList": [{"text": "map", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#map"}, {"text": "map", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = [1,2,3,4,5]\n&gt;&gt;&gt; x\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; y = map(str, x)\n&gt;&gt;&gt; y\n['1', '2', '3', '4', '5']\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT You changed the requirements on me!", "To make it display leading zeros, you do this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = [1,2,3,4,5,11]\n&gt;&gt;&gt; y = [\"%02d\" % v for v in x]\n&gt;&gt;&gt; y\n['01', '02', '03', '04', '05', '11']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I would use a list comprehension myself, but here is another solution using map for those interested..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n map(lambda v: \"%02d\" %v, x)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["to get the 0's:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n y = ['%02d' % i for i in x]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n y = ['%02d'%v for v in x]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["An alternative to format strings would be to use the string's zfill() method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n y = [str(i).zfill(2) for i in x]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Another thing: you might be after padding based on the largest item in the list, so instead of just using 2, you could do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n pad_length = len(str(max(x)))\ny = [str(i).zfill(pad_length) for i in x]\n</code>\n</pre>\n", "senID": 3}]]