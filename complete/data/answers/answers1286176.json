[[{"text": ["\"Use the source, Luke.", "\" The beauty of open source software is that you can view (and modify) the code yourself."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Besides reading the source, here's a few articles I've tagged and bookmarked from a little while ago:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["How Django processes a request"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Django Request Response processing"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["Django internals: authentication"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["How the Heck do Django Models Work"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}]}, {"text": ["I've found James Bennet's blog to be a a great source for information about django workings.", "His book, Practical Django Projects, is also a must read -- though it isn't focused on internals, you'll still learn about how django works."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "blog", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.b-list.org"}, {"text": "Practical Django Projects", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://apress.com/book/view/1590599969"}]}], [{"text": ["Easiest way to understand the internals of django, is by reading a book specifically written for that."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Read Pro Django.", "It provides you a good in depth understanding of the meta programming first and demonstrates how it is used in django models, to create them dynamically."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Pro Django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/1430210478"}]}, {"text": ["It deals similarly with many other python concepts and how django uses it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Simply reading the source might be a bit overwhelming, especially since the upper-most part is a bit confusing (how the webserver hands off the request to Django code).", "I find a good way to get started reading the code is to set a debugger breakpoint in your view function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def time(request):\n    import pdb; pdb.set_trace() \n    return HttpResponse(blah blah)\n</code>\n</pre>\n", "senID": 1}, {"text": ["then hit your URL.", "When the debugger breaks at your breakpoint, examine the stack:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n (Pdb) where\n  c:\\abcxyzproject\\django\\core\\management\\commands\\runserver.py(60)inner_run()\n-&gt; run(addr, int(port), handler)\n  c:\\abcxyzproject\\django\\core\\servers\\basehttp.py(698)run()\n-&gt; httpd.serve_forever()\n  c:\\python25\\lib\\socketserver.py(201)serve_forever()\n-&gt; self.handle_request()\n  c:\\python25\\lib\\socketserver.py(222)handle_request()\n-&gt; self.process_request(request, client_address)\n  c:\\python25\\lib\\socketserver.py(241)process_request()\n-&gt; self.finish_request(request, client_address)\n  c:\\python25\\lib\\socketserver.py(254)finish_request()\n-&gt; self.RequestHandlerClass(request, client_address, self)\n  c:\\abcxyzproject\\django\\core\\servers\\basehttp.py(560)__init__()\n-&gt; BaseHTTPRequestHandler.__init__(self, *args, **kwargs)\n  c:\\python25\\lib\\socketserver.py(522)__init__()\n-&gt; self.handle()\n  c:\\abcxyzproject\\django\\core\\servers\\basehttp.py(605)handle()\n-&gt; handler.run(self.server.get_app())\n  c:\\abcxyzproject\\django\\core\\servers\\basehttp.py(279)run()\n-&gt; self.result = application(self.environ, self.start_response)\n  c:\\abcxyzproject\\django\\core\\servers\\basehttp.py(651)__call__()\n-&gt; return self.application(environ, start_response)\n  c:\\abcxyzproject\\django\\core\\handlers\\wsgi.py(241)__call__()\n-&gt; response = self.get_response(request)\n  c:\\abcxyzproject\\django\\core\\handlers\\base.py(92)get_response()\n-&gt; response = callback(request, *callback_args, **callback_kwargs)\n&gt; c:\\abcxyzproject\\abcxyz\\helpers\\views.py(118)time()\n-&gt; return HttpResponse(\n(Pdb)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now you can see a summary of the path from the deepest part of the web server to your view function.", "Use the \"up\" command to move up the stack, and the \"list\" and \"print\" command to examine the code and variables at those stack frames."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I doubt there are technical manuals on the subject.", "It might take a bit of digging, but the API documentation and the source code are your best bets for reliable, up-to-date information."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The documentation often goes into detail when it has to in order to explain why things work the way they do.", "One of Django's design goals is to not rely on \"magic\" as much as possible.", "However, whenever Django does assume something (template locations within apps, for example) its clearly explained why in the documentation and it always occurs predictably."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "does", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["Most of your questions would be answered by implementing a single page."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Django Documentation"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Django Documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/"}]}, {"text": ["Django Book"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Django Book", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangobook.com/"}]}]]