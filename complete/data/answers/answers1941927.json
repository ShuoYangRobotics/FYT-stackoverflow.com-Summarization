[[{"text": ["You don't include an example, but if you don't have a Z-offset or timezone, and assuming you don't want durations but just the basic time, then maybe this will suit you:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import datetime as dt\n&gt;&gt;&gt; dt.datetime.strptime('1985-04-12T23:20:50.52', '%Y-%m-%dT%H:%M:%S.%f')\ndatetime.datetime(1985, 4, 12, 23, 20, 50, 520000)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The strptime() function was added to the datetime module in Python 2.5 so some people don't yet know it's there.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edit: The time.strptime() function has existed for a while though, and works about the same to give you a struct_time value:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ts = time.strptime('1985-04-12T23:20:50.52', '%Y-%m-%dT%H:%M:%S.%f')\n&gt;&gt;&gt; ts\ntime.struct_time(tm_year=1985, tm_mon=4, tm_mday=12, tm_hour=23, tm_min=20, tm_sec=50, tm_wday=4, tm_yday=102, tm_isdst=-1)\n&gt;&gt;&gt; time.mktime(ts)\n482210450.0\n</code>\n</pre>\n", "senID": 4}], [{"text": ["No builtin, afaik."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["feed.date.rfc3339\nThis is a Python library module with functions for converting timestamp strings in RFC 3339 format to Python time float values, and vice versa.", "RFC 3339 is the timestamp format used by the Atom feed syndication format."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "feed.date.rfc3339", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["It is BSD-licensed."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://home.blarg.net/~steveha/pyfeed.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://home.blarg.net/~steveha/pyfeed.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://home.blarg.net/~steveha/pyfeed.html"}]}, {"text": ["(Edited so it's clear I didn't write it.", ":-)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["http://pypi.python.org/pypi/iso8601/ seems to be able to parse iso 8601, which RFC 3339 is a subset of, maybe this could be useful, but again, not built-in."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pypi.python.org/pypi/iso8601/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/iso8601/"}]}], [{"text": ["feedparser.py provides robust/extensible way to parse various date formats that may be encountered in real-world atom/rss feeds:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "feedparser.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/feedparser/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from feedparser import _parse_date as parse_date\n&gt;&gt;&gt; parse_date('1985-04-12T23:20:50.52Z')\ntime.struct_time(tm_year=1985, tm_mon=4, tm_mday=12, tm_hour=23, tm_min=20,\n                 tm_sec=50, tm_wday=4, tm_yday=102, tm_isdst=1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["http://bugs.python.org/issue5207"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://bugs.python.org/issue5207", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bugs.python.org/issue5207"}]}, {"text": ["Looks like there isn't a built-in as of yet."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["rfc3339 library: http://henry.precheur.org/python/rfc3339"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://henry.precheur.org/python/rfc3339", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://henry.precheur.org/python/rfc3339"}]}]]