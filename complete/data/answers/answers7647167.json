[[{"text": ["Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n os.kill(pid, 0)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Should succeed (and do nothing) if the process exists, or throw an exception (that you can catch) if the process doesn't exist."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If that process belongs to the same user the checking process, you can just try to kill it.", "If you use signal 0, kill will not send anything but still allow you to tell if the process is available."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "kill", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["From kill(2):"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "kill(2)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This should propagate appropriately to python's methods."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you don't mind using external module I'd suggest psutil.", "It is cross-platform and easier to use than spawning subshell only for purpose of finding a running process."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "psutil", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/psutil/"}]}], [{"text": ["This is a bit of a kludge, but on *nix you can use os.getpgid(pid) or os.kill(pid, sig) to test the existence of the process ID."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "os.getpgid(pid)", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/os.html#os.getpgid"}, {"href": "http://docs.python.org/library/os.html#os.kill", "text": "os.kill(pid, sig)", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import os\n\ndef is_process_running(process_id):\n    try:\n        os.kill(process_id, 0)\n        return True\n    except OSError:\n        return False\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: Note that os.kill works on Windows (as of Python 2.7), while os.getpgid won't.", "But the Windows version calls TerminateProcess(), which will \"unconditionally cause a process to exit\", so I predict that it won't safely return the information you want without actually killing the process if it does exist."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "os.kill", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.getpgid", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "won't", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "But", "childNum": 0, "tag": "strong", "childList": []}, {"href": "http://msdn.microsoft.com/en-us/library/windows/desktop/ms686714%28v=vs.85%29.aspx", "text": "TerminateProcess()", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["If you're using Windows, please let us know, because none of these solutions are acceptable in that scenario."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The simplest answer in my opinion (albiet maybe not ideal), would be to change your"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ps -ef | grep &lt;pid&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["To:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ps -ef | grep &lt;pid&gt; | grep -v grep\n</code>\n</pre>\n", "senID": 3}, {"text": ["This will ignore the process listing for the grep search containing the PID of the process you are trying to find. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["It seems user9876's answer is far more \"pythonic\" however. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You have to find it twice.."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Like this :"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["ps -ef | grep 71676 | sed 's/71676//' | grep 71676"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "ps -ef | grep 71676 | sed 's/71676//' | grep 71676", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If this returns True then this is actually running !"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]