[[{"text": ["If you only want to check for the presence of an \"abc\" in any string in the list, you could try"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n some_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']\nif any(\"abc\" in s for s in some_list):\n    # whatever\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you really want to get all the items containing \"abc\", use"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n matching = [s for s in some_list if \"abc\" in s]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Use filter to get at the elements that have abc."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "filter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "abc", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lst = ['abc-123', 'def-456', 'ghi-789', 'abc-456']\n&gt;&gt;&gt; print filter(lambda x: 'abc' in x,lst)\n['abc-123', 'abc-456']\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can also use a list comprehension."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [x for x in lst if 'abc' in x]\n</code>\n</pre>\n", "senID": 3}, {"text": ["By the way, don't use the word list as a variable name since it is already used for the list type."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n x = 'aaa'\nl = ['aaa-12', 'bbbaaa', 'cccaa']\nres = [y for y in l if x in y]\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n for item in list:\n    if item.find(\"abc\") != -1:\n        print item\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n any('abc' in item for item in mylist)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This is quite an old question, but I offer this answer because the previous answers do not cope with items in the list that are not strings (or some kind of iterable object).", "Such items would cause the entire list comprehension to fail with an exception."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To gracefully deal with such items in the list by skipping the non-iterable items, use the following:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [el for el in lst if isinstance(el, collections.Iterable) and (st in el)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["then, with such a list:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n lst = [None, 'abc-123', 'def-456', 'ghi-789', 'abc-456', 123]\nst = 'abc'\n</code>\n</pre>\n", "senID": 4}, {"text": ["you will still get the matching items (['abc-123', 'abc-456'])"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "['abc-123', 'abc-456']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The test for iterable may not be the best.", "Got it from here: In python, how do I determine if a variable is Iterable?"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "In python, how do I determine if a variable is Iterable?", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1952464/in-python-how-do-i-determine-if-a-variable-is-iterable"}]}]]