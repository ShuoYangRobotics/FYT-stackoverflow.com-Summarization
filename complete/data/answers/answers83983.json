[[{"text": ["Guido's explanation is here:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-3000/2006-November/004643.html"}]}], [{"text": ["The short answer: 1) backwards compatibility and 2) there's not enough of a difference for it to really matter.", "For a more detailed explanation, read on."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The idiomatic Python approach to such operations is special methods which aren't intended to be called directly.", "For example, to make x + y work for your own class, you write a __add__ method.", "To make sure that int(spam) properly converts your custom class, write a __int__ method.", "To make sure that len(foo) does something sensible, write a __len__ method."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "x + y", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__add__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "int(spam)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "__int__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "len(foo)", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "__len__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["This is how things have always been with Python, and I think it makes a lot of sense for some things.", "In particular, this seems like a sensible way to implement operator overloading.", "As for the rest, different languages disagree; in Ruby you'd convert something to an integer by calling spam.to_i directly instead of saying int(spam)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "spam.to_i", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "int(spam)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You're right that Python is an extremely object-oriented language and that having to call an external function on an object to get its length seems odd.", "On the other hand, len(silly_walks) isn't any more onerous than silly_walks.len(), and Guido has said that he actually prefers it (http://mail.python.org/pipermail/python-3000/2006-November/004643.html)."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "len(silly_walks)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "silly_walks.len()", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://mail.python.org/pipermail/python-3000/2006-November/004643.html", "text": "http://mail.python.org/pipermail/python-3000/2006-November/004643.html", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["It just isn't."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can, however, do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [1,2,3].__len__()\n\n3\n</code>\n</pre>\n", "senID": 2}, {"text": ["Adding a __len__() method to a class is what makes the len() magic work."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "__len__()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "len()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["This way fits in better with the rest of the language.", "The convention in python is that you add __foo__ special methods to objects to make them have certain capabilities (rather than e.g.", "deriving from a specific base class).", "For example, an object is "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__foo__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "callable if it has a ", "tag": "none", "senID": 1}, {"text": "iterable if it has an ", "tag": "none", "senID": 2}, {"text": "supports access with [] if it has ", "tag": "none", "senID": 3}, {"text": "...", "tag": "none", "senID": 4}]}, {"text": ["One of these special methods is __len__ which makes it have a length accessible with len()."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "__len__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "len()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Maybe you're looking for __len__.", "If that method exists, then len(a) calls it:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__len__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Spam:\n...   def __len__(self): return 3\n... \n&gt;&gt;&gt; s = Spam()\n&gt;&gt;&gt; len(s)\n3\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Well, there actually is a length method, it is just hidden:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a_list = [1, 2, 3]\n&gt;&gt;&gt; a_list.__len__()\n3\n</code>\n</pre>\n", "senID": 1}, {"text": ["The len() built-in function appears to be simply a wrapper for a call to the hidden len() method of the object."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "len", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Not sure why they made the decision to implement things this way though."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["there is some good info below on why certain things are functions and other are methods.", "It does indeed cause some inconsistencies in the language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://mail.python.org/pipermail/python-dev/2008-January/076612.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://mail.python.org/pipermail/python-dev/2008-January/076612.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-dev/2008-January/076612.html"}]}]]