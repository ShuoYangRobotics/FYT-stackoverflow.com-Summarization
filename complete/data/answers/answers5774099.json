[[{"text": ["use defaultdict"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\nmydict = defaultdict(int)\n\nfor aa in mysecuence:\n    mydict[aa] +=1\n</code>\n</pre>\n", "senID": 1}, {"text": ["This works for aminoacids (proteins).", "For codons, you should iterate on the sequence in 3 positions steps to get the keys of the defaultdict.", "For example:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mysec = \"GAUCACTUGCCA\"\n&gt;&gt;&gt; a = [mysec[i:i+3] for i in range(0,len(mysec), 3)]\n&gt;&gt;&gt; print a\n\n\n['GAU', 'CAC', 'TUG', 'CCA']\n</code>\n</pre>\n", "senID": 3}, {"text": ["EDIT: If you want to calculate degeneration, you should prepare a dictionary relating each codon (key) with its degenerated codons (value, list of codons).", "To calculate the frecuency,\nfrom the defaultdict you can get the counts for each codon, then for each codon you calculate the sum of the counts of the degenerated codons read from the dictionary of codons indicated above.", "Then you can calculate the frecuency."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["EDIT 2: Here you have a real example:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "EDIT 2: Here you have a real example:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\n#the first 600 nucleotides from GenBank: AAHX01097212.1\nrna = (\"tcccccgcagcttcgggaacgtgcgggctcgggagggaggggcctggcgccgggcgcgcg\"\n       \"cctgcgccccaccccgccccaccctggcgggtctcgcgcgcccggcccgcctcctgtcaa\"\n       \"ccccagcgcggcggtcaggtggtccccagcccttggccccagcctccagcttcctggtcc\"\n       \"ctcgggctctgagtcctgtctccggcagatcgcctttctgattgttctcctgcgcagctg\"\n       \"gaggtgtatagcccctagccgagctatggtgcctcagcagatgtgaggaggtagtgggtc\"\n       \"aggataaacccgcgcactccataataacgtgccagggctcagtgacttgggtctgcatta\")\n\nseq = rna.upper().replace('T', 'U')\n\n#RNA codon table from http://en.wikipedia.org/wiki/Genetic_code\ndegenerated = (('GCU', 'GCC', 'GCA', 'GCG'),\n               ('UUA', 'UUG', 'CUU', 'CUC', 'CUA', 'CUG'),\n               ('CGU', 'CGC', 'CGA', 'CGG', 'AGA', 'AGG'),\n               ('AAA', 'AAG'), ('AAU', 'AAC'), ('GAU', 'GAC'),\n               ('UUU', 'UUC'), ('UGU', 'UGC'), ('CCU', 'CCC', 'CCA', 'CCG'),\n               ('CAA', 'CAG'), ('UCU', 'UCC', 'UCA', 'UCG', 'AGU', 'AGC'),\n               ('GAA', 'GAG'), ('ACU', 'ACC', 'ACA', 'ACG'),\n               ('GGU', 'GGC', 'GGA', 'GGG'), ('CAU', 'CAC'), ('UAU', 'UAC'),\n               ('AUU', 'AUC', 'AUA'), ('GUU', 'GUC', 'GUA', 'GUG'),\n               ('UAA', 'UGA', 'UAG'))\n\n#prepare the dictio of degenerated codons\ndegen_dict = {}\nfor codons in degenerated:\n    for codon in codons:\n        degen_dict[codon] = codons\n\n#query_codons\nmax_seq = len(seq)\nquery_codons = [seq[i:i+3] for i in range(0, max_seq, 3)]\n\n#prepare dictio of counts:\ncounts = defaultdict(int)\nfor codon in query_codons:\n    counts[codon] +=1\n\n#actual calculation of frecuencies\ndata = {}\nfor codon in query_codons:\n    if codon in  degen_dict:\n        totals = sum(counts[deg] for deg in degen_dict[codon])\n        frecuency = float(counts[codon]) / totals\n    else:\n        frecuency = 1.00\n\n    data[codon] = frecuency\n\n#print results\nfor codon, frecuency in data.iteritems():\n    print \"%s  -&gt; %.2f\" %(codon, frecuency)\n\n\n#produces:\nGUC  -&gt; 0.57\nAUA  -&gt; 1.00\nACG  -&gt; 0.50\nAAC  -&gt; 1.00\nCCU  -&gt; 0.25\nUAU  -&gt; 1.00\n..........\nGCU  -&gt; 0.19\nGAU  -&gt; 1.00\nUAG  -&gt; 0.33\nCUC  -&gt; 0.38\nUUA  -&gt; 0.13\nUGA  -&gt; 0.33\n</code>\n</pre>\n", "senID": 6}], [{"text": ["take a look at this, here they define python scripts for Peptide Library for example, maybe you find them useful"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://resit-svn.ucd.ie/repos/clinbio/Fergal/"}]}], [{"text": ["If your sequence is in the correct reading frame:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import collections\n&gt;&gt;&gt; \n&gt;&gt;&gt; code = {     'ttt': 'F', 'tct': 'S', 'tat': 'Y', 'tgt': 'C',\n...              'ttc': 'F', 'tcc': 'S', 'tac': 'Y', 'tgc': 'C',\n...              'tta': 'L', 'tca': 'S', 'taa': '*', 'tga': '*',\n...              'ttg': 'L', 'tcg': 'S', 'tag': '*', 'tgg': 'W',\n...              'ctt': 'L', 'cct': 'P', 'cat': 'H', 'cgt': 'R',\n...              'ctc': 'L', 'ccc': 'P', 'cac': 'H', 'cgc': 'R',\n...              'cta': 'L', 'cca': 'P', 'caa': 'Q', 'cga': 'R',\n...              'ctg': 'L', 'ccg': 'P', 'cag': 'Q', 'cgg': 'R',\n...              'att': 'I', 'act': 'T', 'aat': 'N', 'agt': 'S',\n...              'atc': 'I', 'acc': 'T', 'aac': 'N', 'agc': 'S',\n...              'ata': 'I', 'aca': 'T', 'aaa': 'K', 'aga': 'R',\n...              'atg': 'M', 'acg': 'T', 'aag': 'K', 'agg': 'R',\n...              'gtt': 'V', 'gct': 'A', 'gat': 'D', 'ggt': 'G',\n...              'gtc': 'V', 'gcc': 'A', 'gac': 'D', 'ggc': 'G',\n...              'gta': 'V', 'gca': 'A', 'gaa': 'E', 'gga': 'G',\n...              'gtg': 'V', 'gcg': 'A', 'gag': 'E', 'ggg': 'G'\n...         }\n&gt;&gt;&gt; def count_codons(cds):\n...     counts = collections.defaultdict(int)\n...     for i in range(0,len(cds),3):\n...        codon = cds[i:i+3]\n...        counts[codon] += 1\n...     return counts\n... \n&gt;&gt;&gt; def translate(cds, code):\n...     return \"\".join((code[cds[i:i+3]] for i in range(0, len(cds), 3)))\n... \n&gt;&gt;&gt; seq = 'ATGAAGAAA'\n&gt;&gt;&gt; \n&gt;&gt;&gt; codon_counts = count_codons(seq.lower())\n&gt;&gt;&gt; trans_seq = translate(seq.lower(), code)\n&gt;&gt;&gt; \n&gt;&gt;&gt; [(codon, code[codon], float(codon_counts[codon])/trans_seq.count(code[codon])) for codon in codon_counts.keys()]\n[('atg', 'M', 1.0), ('aag', 'K', 0.5), ('aaa', 'K', 0.5)]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["other info:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "other info:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I think you are asking to find something called codon usage. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["There are tools online which allow you to find codon usage.", "This one also allows for offline use."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["http://www.bioinformatics.org/sms2/codon_usage.html"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://www.bioinformatics.org/sms2/codon_usage.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.bioinformatics.org/sms2/codon_usage.html"}]}, {"text": ["and results (in this 'Fraction' is what you are asking for):"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n Results for 9 residue sequence \"sample sequence one\" starting \"ATGAAGAAA\"\nAmAcid   Codon     Number        /1000     Fraction   .. \n\nAla      GCG         0.00         0.00         0.00 \nAla      GCA         0.00         0.00         0.00 \nAla      GCT         0.00         0.00         0.00 \nAla      GCC         0.00         0.00         0.00 \n\nCys      TGT         0.00         0.00         0.00 \nCys      TGC         0.00         0.00         0.00 \n\nAsp      GAT         0.00         0.00         0.00 \nAsp      GAC         0.00         0.00         0.00 \n\nGlu      GAG         0.00         0.00         0.00 \nGlu      GAA         0.00         0.00         0.00 \n\nPhe      TTT         0.00         0.00         0.00 \nPhe      TTC         0.00         0.00         0.00 \n\nGly      GGG         0.00         0.00         0.00 \nGly      GGA         0.00         0.00         0.00 \nGly      GGT         0.00         0.00         0.00 \nGly      GGC         0.00         0.00         0.00 \n\nHis      CAT         0.00         0.00         0.00 \nHis      CAC         0.00         0.00         0.00 \n\nIle      ATA         0.00         0.00         0.00 \nIle      ATT         0.00         0.00         0.00 \nIle      ATC         0.00         0.00         0.00 \n\nLys      AAG         1.00       333.33         0.50 \nLys      AAA         1.00       333.33         0.50 \n\nLeu      TTG         0.00         0.00         0.00 \nLeu      TTA         0.00         0.00         0.00 \nLeu      CTG         0.00         0.00         0.00 \nLeu      CTA         0.00         0.00         0.00 \nLeu      CTT         0.00         0.00         0.00 \nLeu      CTC         0.00         0.00         0.00 \n\nMet      ATG         1.00       333.33         1.00 \n\nAsn      AAT         0.00         0.00         0.00 \nAsn      AAC         0.00         0.00         0.00 \n\nPro      CCG         0.00         0.00         0.00 \nPro      CCA         0.00         0.00         0.00 \nPro      CCT         0.00         0.00         0.00 \nPro      CCC         0.00         0.00         0.00 \n\nGln      CAG         0.00         0.00         0.00 \nGln      CAA         0.00         0.00         0.00 \n\nArg      AGG         0.00         0.00         0.00 \nArg      AGA         0.00         0.00         0.00 \nArg      CGG         0.00         0.00         0.00 \nArg      CGA         0.00         0.00         0.00 \nArg      CGT         0.00         0.00         0.00 \nArg      CGC         0.00         0.00         0.00 \n\nSer      AGT         0.00         0.00         0.00 \nSer      AGC         0.00         0.00         0.00 \nSer      TCG         0.00         0.00         0.00 \nSer      TCA         0.00         0.00         0.00 \nSer      TCT         0.00         0.00         0.00 \nSer      TCC         0.00         0.00         0.00 \n\nThr      ACG         0.00         0.00         0.00 \nThr      ACA         0.00         0.00         0.00 \nThr      ACT         0.00         0.00         0.00 \nThr      ACC         0.00         0.00         0.00 \n\nVal      GTG         0.00         0.00         0.00 \nVal      GTA         0.00         0.00         0.00 \nVal      GTT         0.00         0.00         0.00 \nVal      GTC         0.00         0.00         0.00 \n\nTrp      TGG         0.00         0.00         0.00 \n\nTyr      TAT         0.00         0.00         0.00 \nTyr      TAC         0.00         0.00         0.00 \n\nEnd      TGA         0.00         0.00         0.00 \nEnd      TAG         0.00         0.00         0.00 \nEnd      TAA         0.00         0.00         0.00\n</code>\n</pre>\n", "senID": 7}, {"text": ["cusp is the codon usage tool from EMBOSS which also may be worth taking a look at."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["You may want to checkout BioPython for working with biological sequences.", "I believe they have a codon usage module."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"tag": "ul", "num": 3, "lis": [{"text": ["a codon table containing ALL the 64 codons, even the non-degenarated ones (they constitute one element groups)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["counting the occurences of each codon's group at the same time that occurences of codons are counted during the iteration"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["codon table comprising the names of coded amino acids -> a good display"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]}, {"text": ["code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\n# the first 600 nucleotides from GenBank: AAHX01097212.1\nadn = (\"tcccccgcagcttcgggaacgtgcgggctcgggagggaggggcctggcgccgggcgcgcg\"\n       \"cctgcgccccaccccgccccaccctggcgggtctcgcgcgcccggcccgcctcctgtcaa\"\n       \"ccccagcgcggcggtcaggtggtccccagcccttggccccagcctccagcttcctggtcc\"\n       \"ctcgggctctgagtcctgtctccggcagatcgcctttctgattgttctcctgcgcagctg\"\n       \"gaggtgtatagcccctagccgagctatggtgcctcagcagatgtgaggaggtagtgggtc\"\n       \"aggataaacccgcgcactccataataacgtgccagggctcagtgacttgggtctgcatta\")\n\narn = adn.upper().replace('T','U')\n\n#RNA codon table from http://en.wikipedia.org/wiki/Genetic_code\ncodon_table = ((('GCU', 'GCC', 'GCA', 'GCG'),  'Alanine'),\n               (('UUA', 'UUG', 'CUU', 'CUC', 'CUA', 'CUG'),  'Leucine'),\n               (('CGU', 'CGC', 'CGA', 'CGG', 'AGA', 'AGG'),  'Arginine'),\n               (('AAA', 'AAG'),  'Lysine'),\n               (('AAU', 'AAC'),  'Asparagine'),\n               (('AUG',),  'Methionine'),\n               (('GAU', 'GAC'),  'Aspartic acid' ),              \n               (('UUU', 'UUC'),  'Phenylalanine'),\n               (('UGU', 'UGC'),  'Cysteine'),\n               (('CCU', 'CCC', 'CCA', 'CCG'),  'Proline') ,\n               (('CAA', 'CAG'),  'Glutamine'),\n               (('UCU', 'UCC', 'UCA', 'UCG', 'AGU', 'AGC'),  'Serine'),\n               (('GAA', 'GAG'),  'Glutamic acid'),\n               (('ACU', 'ACC', 'ACA', 'ACG'),  'Threonine'),\n               (('GGU', 'GGC', 'GGA', 'GGG'),  'Glycine'),\n               (('UGG',),  'Tryptophane'),\n               (('CAU', 'CAC'),  'Histidine'),\n               (('UAU', 'UAC'),  'Tyrosine'),\n               (('AUU', 'AUC', 'AUA'),  'Isoleucine'),\n               (('GUU', 'GUC', 'GUA', 'GUG'),  'Valine'),\n               (('UAA', 'UGA', 'UAG'),  'STOP')            )\n\nsiblings = dict( (cod, codgroup) for codgroup,aa in codon_table for cod in codgroup )\n\ncod_count, grp_count, freq = defaultdict(int), defaultdict(int), {}\n\nfor cod in (arn[i:i+3] for i in xrange(0,len(arn),3)):\n    cod_count[cod] += 1\n    grp_count[siblings[cod]] += 1\n\nfor cod in siblings.iterkeys(): # the keys of siblings are the 64 codons\n    if siblings[cod] in grp_count:\n        freq[cod] = float(cod_count[cod])/grp_count[siblings[cod]]\n    else:\n        freq[cod] = '-* Missing *-'\n\n\ndisplay = '\\n'.join(aa.rjust(13)+\\\n                '\\n'.join('%s  %-16s' % (cod.rjust(18 if i else 5),freq[cod])\n                          for i,cod in enumerate(codgrp))\n                for codgrp,aa in codon_table)\n\n\n# editing addition:\n\ndef outputResults(filename,arn,codon_table,displ):\n\n    li = ['This file is named %s' % filename]\n\n    li.append('The sequence of ARN:\\n%s' %\\\n              '\\n'.join(arn[i:i+42] for i in xrange(0,len(arn),42)))\n    li.append('Size of the sequence : '+str(len(arn)))\n\n    li.append('Codon_table:\\n'+\\\n              '\\n'.join('%s : %s' % (u,v) for u,v in codon_table))\n\n    li.append('Frequency results :\\n'+displ)\n\n    with open(filename,'w') as f:\n        f.writelines('\\n\\n'.join(li))\n\n\noutputResults('ARN_mem.txt',arn,codon_table,display)\nprint display\n</code>\n</pre>\n", "senID": 4}, {"text": [], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["EDIT"], "childNum": 0, "tag": "h2", "senID": 6, "childList": []}, {"text": ["I've added a function outputResults() to show the manner to record data and results in a file"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["The resulting file's content is:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n This file is named ARN_mem.txt\n\nThe sequence of ARN:\nUCCCCCGCAGCUUCGGGAACGUGCGGGCUCGGGAGGGAGGGG\nCCUGGCGCCGGGCGCGCGCCUGCGCCCCACCCCGCCCCACCC\nUGGCGGGUCUCGCGCGCCCGGCCCGCCUCCUGUCAACCCCAG\nCGCGGCGGUCAGGUGGUCCCCAGCCCUUGGCCCCAGCCUCCA\nGCUUCCUGGUCCCUCGGGCUCUGAGUCCUGUCUCCGGCAGAU\nCGCCUUUCUGAUUGUUCUCCUGCGCAGCUGGAGGUGUAUAGC\nCCCUAGCCGAGCUAUGGUGCCUCAGCAGAUGUGAGGAGGUAG\nUGGGUCAGGAUAAACCCGCGCACUCCAUAAUAACGUGCCAGG\nGCUCAGUGACUUGGGUCUGCAUUA\n\nSize of the sequence : 360\n\nCodon_table:\n('GCU', 'GCC', 'GCA', 'GCG') : Alanine\n('UUA', 'UUG', 'CUU', 'CUC', 'CUA', 'CUG') : Leucine\n('CGU', 'CGC', 'CGA', 'CGG', 'AGA', 'AGG') : Arginine\n('AAA', 'AAG') : Lysine\n('AAU', 'AAC') : Asparagine\n('AUG',) : Methionine\n('GAU', 'GAC') : Aspartic acid\n('UUU', 'UUC') : Phenylalanine\n('UGU', 'UGC') : Cysteine\n('CCU', 'CCC', 'CCA', 'CCG') : Proline\n('CAA', 'CAG') : Glutamine\n('UCU', 'UCC', 'UCA', 'UCG', 'AGU', 'AGC') : Serine\n('GAA', 'GAG') : Glutamic acid\n('ACU', 'ACC', 'ACA', 'ACG') : Threonine\n('GGU', 'GGC', 'GGA', 'GGG') : Glycine\n('UGG',) : Tryptophane\n('CAU', 'CAC') : Histidine\n('UAU', 'UAC') : Tyrosine\n('AUU', 'AUC', 'AUA') : Isoleucine\n('GUU', 'GUC', 'GUA', 'GUG') : Valine\n('UAA', 'UGA', 'UAG') : STOP\n\nFrequency results :\n      Alanine  GCU  0.1875          \n               GCC  0.375           \n               GCA  0.25            \n               GCG  0.1875          \n      Leucine  UUA  0.125           \n               UUG  0.0             \n               CUU  0.25            \n               CUC  0.375   \netc.............\n</code>\n</pre>\n", "senID": 9}], [{"text": ["I'm not sure if I've fully understood the question, but I think you need to split the calculations into two stages: first count how many times each codon occurs, and then work out the frequencies.", "I've come up with the following code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\n# Initial sequence.\nsequence = \"AAABOBAACAAAFOOAACBARAAAAAA\"\n\n# Which codons are grouped together.\ngroups = (\n    ('AAA', 'AAC'),\n    ('BOB',),\n    ('FOO', 'BAR', 'BAA'),\n)\n\n# Separate into list of codons.\ncodonList = []\nfor codons in range(0, len(sequence), 3):\n    codonList.append(sequence[codons:codons+3])\n\n# Count how many times each codon is used.\ncounts = defaultdict(int)\nfor codon in codonList:\n    counts[codon] += 1\n\n# Go through and calculate frequencies of each codon.\nfreqs = {}\nfor group in groups:\n    total = float(sum(counts[codon] for codon in group))\n    for codon in group:\n        freqs[codon] = counts[codon] / total\n\n# Done.\nprint freqs\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note the explicit conversion of total to a floating-point number in the last loop.", "If it is left as an integer, the subsequent division will be either 0 or 1 on Python 2.x, so we need to convert it to get a floating-point output.", "The output I get is:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "total", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n blair@blair-eeepc:~$ python codons.py \n{'BAR': 0.5, 'AAC': 0.33333333333333331, 'BAA': 0.0, 'AAA': 0.66666666666666663, 'BOB': 1.0, 'FOO': 0.5}\n</code>\n</pre>\n", "senID": 3}, {"text": ["Is this the sort of output you were looking for?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["PLY is a parser module that has some nice debugging features; it is very good at tasks like this..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PLY", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/ply/"}]}, {"code": "<pre>\n<code>\n from ply import lex\n\ntokens = (\n    'CODON',\n)\nt_CODON = (\n    r\"ATG|\"\n    r\"AAG|\"\n    r\"AAF|\"\n    r\"AAC|\"\n    r\"BOB|\"\n    r\"FOO|\"\n    r\"BAR|\"\n    r\"AAA\"\n)\ndef t_error(t):\n    raise TypeError(\"Unknown codon '%s'\" % (t.value,))\nlex.lex()\nsequence = \"AAABOBAACAAAFOOAACBARAAAAAA\"\nccount = dict()\ntotal = 0.0\nlex.input(sequence)\nfor tok in iter(lex.token, None):\n    if ccount.get(tok.value, False):\n        ccount[tok.value] += 1\n    else:\n        ccount[tok.value] = 1\n    total += 1.0\n\nfor codon,count in ccount.items():\n    print \"Frequency of %s is %f\" % (codon, count/total)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Running that code produces..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [mpenning@Bucksnort ~]$ python codon.py\nFrequency of BAR is 0.111111\nFrequency of BOB is 0.111111\nFrequency of FOO is 0.111111\nFrequency of AAA is 0.444444\nFrequency of AAC is 0.222222\n</code>\n</pre>\n", "senID": 3}, {"text": ["I'm a little lost when you start introducing the chemical terminology, but you can probably take over from here..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]