[[{"text": ["I'm going to assume you're coming from a Java-ish background, so there are a few key differences to point out."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Computer(object):\n    \"\"\"Docstrings are used kind of like Javadoc to document classes and\n    members.  They are the first thing inside a class or method.\n\n    You probably want to extend object, to make it a \"new-style\" class.\n    There are reasons for this that are a bit complex to explain.\"\"\"\n\n    # everything down here is a static variable, unlike in Java or C# where\n    # declarations here are for what members a class has.  All instance\n    # variables in Python are dynamic, unless you specifically tell Python\n    # otherwise.\n    defaultName = \"belinda\"\n    defaultRes = (1024, 768)\n    defaultIP = \"192.168.5.307\"\n\n    def __init__(self, name=defaultName, resolution=defaultRes, ip=defaultIP):\n        \"\"\"Constructors in Python are called __init__.  Methods with names\n        like __something__ often have special significance to the Python\n        interpreter.\n\n        The first argument to any class method is a reference to the current\n        object, called \"self\" by convention.\n\n        You can use default function arguments instead of function\n        overloading.\"\"\"\n        self.name = name\n        self.resolution = resolution\n        self.ip = ip\n        # and so on\n\n    def printStats(self):\n        \"\"\"You could instead use a __str__(self, ...) function to return this\n        string.  Then you could simply do \"print(str(computer))\" if you wanted\n        to.\"\"\"\n        print \"Computer Statistics: --------------------------------\"\n        print \"Name:\" + self.name\n        print \"IP:\" + self.ip\n        print \"ScreenSize:\" , self.resolution //cannot concatenate 'str' and 'tuple' objects\n        print \"-----------------------------------------------------\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Constructors in Python are called __init__.", "You must also use \"self\" as the first argument for all methods in your class, and use that to set instance variables in the class."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Computer:\n\n    def __init__(self, compName = \"Computer1\", compIp = \"0.0.0.0\", compScreenSize = 22):\n        self.name = compName\n        self.ip = compIp\n        self.screenSize = compScreenSize\n\n        self.printStats()\n\n    def printStats(self):\n        print \"Computer Statistics: --------------------------------\"\n        print \"Name:\", self.name\n        print \"IP:\", self.ip\n        print \"ScreenSize:\", self.screenSize\n        print \"-----------------------------------------------------\"\n\n\ncomp1 = Computer()\ncomp2 = Computer(\"The best computer in the world\", \"27.1.0.128\",22)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["dude get yourself a python book.", "Dive into Python is pretty good. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["For a start, look here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#class-objects"}]}], [{"text": ["There are a number of things to point out:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["C++:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "C++:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class comp  {\n  std::string m_name;\n  foo(std::string name);\n};\n\nfoo::foo(std::string name) : m_name(name) {}\n</code>\n</pre>\n", "senID": 2}, {"text": ["Python:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Python:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class comp:\n  def __init__(self, name=None):\n    if name: self.name = name\n    else: self.name = 'defaultName'\n</code>\n</pre>\n", "senID": 4}], [{"text": ["That isn't valid python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The constructor for a Python class is def __init__(self, ...): and you cannot overload it."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "def __init__(self, ...):", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["What you can do is use defaults for the arguments, eg."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Computer:\n    def __init__(self, compName=\"Computer1\", compIp=\"0.0.0.0\", compScreenSize=17):\n        self.name = compName\n        self.ip = compIp\n        self.screenSize = compScreenSize\n\n        self.printStats()\n\n        return\n\n    def printStats(self):\n        print \"Computer Statistics: --------------------------------\"\n        print \"Name      : %s\" % self.name\n        print \"IP        : %s\" % self.ip\n        print \"ScreenSize: %s\" % self.screenSize\n        print \"-----------------------------------------------------\"\n        return\n\ncomp1 = Computer()\ncomp2 = Computer(\"The best computer in the world\", \"27.1.0.128\",22)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Ah, these are common gotchas for new python developers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First, the constructor should be called: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n __init__()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Your second issue is forgetting to include the self parameter to your class methods.  "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Furthermore, when you define the second constructor, you're replacing the definition of the Computer() method.", "Python is extremely dynamic and will cheerfully let you redefine class methods."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["The more pythonic way is probably to use default values for the parameters if you don't want to make them required."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Python does not support function overloading."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I am having an doubt.", "Shall we use the following type of constructor overloading?..", "If not, How to write this in python.. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self,val1):\n              print \"Second Overloaded Constructor\"+val1\n\n     def __init__(self,val1,name1):\n              print \"Thrid Overloaded Constructor\"+val1+name1\n</code>\n</pre>\n", "senID": 1}]]