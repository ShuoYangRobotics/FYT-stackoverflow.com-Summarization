[[{"code": "<pre>\n<code>\n with file('x.py') as f: s = f.read()\n</code>\n</pre>\n", "senID": 0}, {"text": ["***grins***"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This is same as above but does not handle errors:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = open(filename, 'r').read()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This isn't Perl; you don't want to force-fit multiple lines worth of code onto a single line.", "Write a function, then calling the function takes one line of code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def read_file(fn):\n    \"\"\"\n    &gt;&gt;&gt; import os\n    &gt;&gt;&gt; fn = \"/tmp/testfile.%i\" % os.getpid()\n    &gt;&gt;&gt; open(fn, \"w+\").write(\"testing\")\n    &gt;&gt;&gt; read_file(fn)\n    'testing'\n    &gt;&gt;&gt; os.unlink(fn)\n    &gt;&gt;&gt; read_file(\"/nonexistant\")\n    Traceback (most recent call last):\n        ...\n    IOError: [Errno 2] No such file or directory: '/nonexistant'\n    \"\"\"\n    with open(fn) as f:\n        return f.read()\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you're open to using libraries, try installing forked-path (with either easy_install or pip)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "forked-path", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/forked-path"}]}, {"text": ["Then you can do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from path import path\ns = path(filename).bytes()\n</code>\n</pre>\n", "senID": 2}, {"text": ["This library is fairly new, but it's a fork of a library that's been floating around Python for years and has been used quite a bit.", "Since I found this library years ago, I very seldom use os.path or open() any more."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "os.path", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "open()", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n contents = open(filename).read()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Slow, ugly, platform-specific... but one-liner ;-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import subprocess\n\ncontents = subprocess.Popen('cat %s' % filename, shell = True, stdout = subprocess.PIPE).communicate()[0]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n contents = open(filename)\n</code>\n</pre>\n", "senID": 0}, {"text": ["This gives you generator so you must save somewhere the values though, or "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n contents = [line for line in open(filename)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["This does the saving to list explicit close is not then possible (at least with my knowledge of Python)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]