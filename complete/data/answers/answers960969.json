[[{"text": ["Orbited seems as a nice solution.", "Haven't tried it though."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Orbited", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.orbited.org/"}]}, {"text": ["Update: things have changed in the last 2.5 years."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Update: things have changed in the last 2.5 years.", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "Update", "tag": "strong"}]}, {"text": "Update", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["We now have websockets in all major browsers, except IE (naturally) and a couple of very good abstractions over it, that provide many methods of emulating real-time communication."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["socket.io"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["sock.js"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}]}], [{"text": ["I recommend you use StreamHub Comet Server - its used by a lot of people - personally I use it with a couple of Django sites I run.", "You will need to write a tiny bit of Java to handle the streaming - I did this using Jython.", "The front-end code is some real simple Javascript a la:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "StreamHub Comet Server", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.stream-hub.com/"}, {"text": "Jython", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.jython.org/"}]}, {"code": "<pre>\n<code>\n StreamHub hub = new StreamHub();\nhub.connect(\"http://myserver.com/\");\nhub.subscribe(\"newsfeed\", function(sTopic, oData) { alert(\"new news item: \" + oData.Title); });\n</code>\n</pre>\n", "senID": 1}, {"text": ["The documentation is pretty good - I had similar problems as you trying to get started with the sparse docs of Cometd et al.", "For a start I'd read Getting Started With Comet and StreamHub, download and see how some of the examples work and reference the API docs if you need to:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Getting Started With Comet and StreamHub", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://streamhub.blogspot.com/2009/07/getting-started-with-streamhub-and.html"}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["Javascript API JSDoc"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["Streaming from Java Javadoc"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}]}], [{"text": ["Here is a full-featured example of combining Django, Orbited,and Twisted to create a real-time (Comet) app: http://github.com/clemesha/hotdot using Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://github.com/clemesha/hotdot", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/clemesha/hotdot"}]}], [{"text": ["I've done tons of APIs using twisted for stuff like that, most of which are available on my github account."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "github", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/dustin"}]}, {"text": ["Most are client-side, but slosh is a server I wrote to do a realtime cheap pubsub sort of thing.", "It scales somewhat horizontally for reads by allowing for simple stream replication.", "Writes are a little different when you stick to plain HTTP, but I've pushed a decent amount through it for a demo."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "slosh", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/dustin/slosh"}]}, {"text": ["Otherwise, you have full-on BOSH which most XMPP servers support and will allow you to decouple the message distribution from the web frontend."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I haven't done it, but this guy has and writes a good article about it, with Django examples and pointers (which I haven't checked) to other frameworks."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this guy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.rkblog.rk.edu.pl/w/p/django-and-comet/"}]}], [{"text": ["the orbited and redis solutions are nice, but not longer relevant when you have something like the PubSubHubbub that google released.", "This makes it very easy to be the publisher or the subscriber to a given feed.", "http://code.google.com/p/pubsubhubbub/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/pubsubhubbub/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pubsubhubbub/"}]}], [{"text": ["Here's an example that does long-polling with gevent and Django."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Here's an example that does long-polling with gevent and Django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blog.gevent.org/2009/10/10/simpler-long-polling-with-django-and-gevent/"}]}, {"text": ["It uses greenlet - stack switching functionality from Stackless packaged as a CPython extension."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "greenlet", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/greenlet"}]}]]