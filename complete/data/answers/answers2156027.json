[[{"text": ["Why should you refer to \"names\" and \"binding\" in Python instead of \"variables\" and \"assignment\"?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [], [{"text": ["What is duck typing ?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "duck typing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Duck_typing"}]}], [{"text": ["How can you use a mutable object as a default value to a function?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["And the closely related..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["What are possible consequences of doing this?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def append_to( b, c=[] ):\n    c.append( b )\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Some fancier language features:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "What are generators, iterators? (bonus points for ", "tag": "none", "senID": 1}, {"text": "What are \"new-style\" classes\nand how do they differ from old-style\nclasses?", "tag": "none", "senID": 2}, {"text": "What are packages, how do you make one?", "tag": "none", "senID": 3}, {"text": "What are decorators?", "tag": "none", "senID": 4}]}, {"text": ["I'd say anyone with some experience has used one of these:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Where can you find a deque, priority queue, \nbinheap implementation?", "tag": "none", "senID": 6}, {"text": "Have you worked with Twisted, SciPy, \nNumPy, GTK/Qt/Wx?", "tag": "none", "senID": 7}, {"text": "What is PyPi, what is easy_install ?", "tag": "none", "senID": 8}]}], [{"text": ["I have a list of lists:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l=[[0]]*10\nprint(l)\n# [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Why is it that when I change one element, all the elements change:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n l[0][0]=1\nprint(l)\n# [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["What's a Python decorator and how is it used?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Why does this happen?", "Why isn't the answer -1?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 3.1-4.1\n-0.99999999999999956\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What is the difference between str and unicode, and which would you use in what circumstances?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What is list comprehension?", "What is 'lambda' used for?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What is going to print :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def paradox():\n    try:\n        raise Exception(\"Here\")\n    except:\n        return \"There\"\n    finally:\n        return \"Or maybe there\"\n\n    return \"Or it that here?\"\n\nprint paradox()\n</code>\n</pre>\n", "senID": 1}, {"text": ["I love this one, because even the best programmers idle before answering."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This is the most often heard question (at least to me)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Why would I use python if I already know xxxx (insert any language here) ? "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Why would I use python if I already know xxxx (insert any language here) ?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I know, not as impressive as the other answers...."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["What kinds of application would Python not be good for?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "not", "tag": "em"}]}, {"text": "not", "childNum": 0, "tag": "em", "childList": []}]}], [{"tag": "ul", "num": 3, "lis": [{"text": "What do you get when you do ", "tag": "none", "senID": 0}, {"text": "What does ", "tag": "none", "senID": 1}, {"text": "How do you unpack a tuple?", "tag": "none", "senID": 2}]}], [{"text": ["Why is mutability and immutability important?", "When ought you to care?", "(Note: The author of this question is still quite fuzzy on these."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["While much is \"batteries included,\" what are the three most esoteric add-ons to Python you have used?  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["What is your general strategy for researching and performing Windows functions in Python?  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Tell me about your favorite Python idiom.", "How did you discover it?", "How did you refine it?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["What are some of the shortcomings in the development of Python and the surrounding ecosystem?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]