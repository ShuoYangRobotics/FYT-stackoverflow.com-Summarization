[[{"text": ["Try the Pool.map function from multiprocessing:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/multiprocessing.html#using-a-pool-of-workers"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/multiprocessing.html#using-a-pool-of-workers", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html#using-a-pool-of-workers"}]}, {"text": ["It's not multithreaded per-se, but that's actually good since multithreading is severely crippled in Python by the GIL."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I would think there would be no reason to have such a function.", "All Python threads have to execute on the same CPU.", "Assuming your map function has no I/O component, you would not see any speedup in processing (and would probably see a slowdown due to context switching)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Other posters have mentioned multiprocessing - that is probably a better idea."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can use the multiprocessing python package (http://docs.python.org/library/multiprocessing.html).", "The cloud python package, available from PiCloud (http://www.picloud.com), offers a multi-processing map() function as well, which can offload your map to the cloud."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This functionality is not built in.", "However, someone has already implemented it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "someone has already implemented it", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://honeypot.net/multi-processing-map-python"}]}], [{"text": ["Maybe try the Unladen Swallow Python 3 implementation?", "That might be a major project, and not guaranteed to be stable, but if you're inclined it could work.", "Then list or set comprehensions seem like the proper functional structure to use."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Unladen Swallow Python 3", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3146/"}, {"text": "list or set comprehensions", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/py3k/tutorial/datastructures.html#tut-listcomps"}]}], [{"text": ["You can try OpenMp, though I don't know if there is a native python interface.", "You would probably need to write the routine in C/C++ and use swig to call it.", "OpenMp is very use to use for this sort of loop parallelism and is used by issuing compiler directives."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]