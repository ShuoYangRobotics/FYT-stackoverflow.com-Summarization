[[{"text": ["If you use numpy/scipy, you can use the scipy.io.savemat function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import numpy, scipy.io\n\narr = numpy.arange(10)\narr = arr.reshape((3, 3))  # 2d array of 3x3\n\nscipy.io.savemat('c:/tmp/arrdata.mat', mdict={'arr': arr})\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now, you can load this data into MATLAB using File -> Load Data.", "Select the file and the arr variable (a 3x3 matrix) will be available in your environment."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "arr", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Note: I did this on scipy 0.7.0.", "(scipy 0.6 has savemat in the scipy.io.mio module.", ")  See the latest documentation for more detail:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "savemat", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "scipy.io.mio", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.savemat.html"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.savemat.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.savemat.html"}]}, {"text": ["EDIT: updated link thanks to gnovice."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "gnovice", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I think ars has the most straight-forward answer for saving the data to a .mat file from Python (using savemat).", "To add just a little to their answer, you can also load the .mat file into MATLAB programmatically using the LOAD function instead of doing it by hand using the MATLAB command window menu..."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "ars", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1095265/matrix-from-python-to-matlab/1095324#1095324"}, {"text": "savemat", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.savemat.html"}, {"text": "LOAD", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.mathworks.com/access/helpdesk/help/techdoc/ref/load.shtml"}]}, {"text": ["You can use either the command syntax form of LOAD:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "command syntax", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n load c:/tmp/arrdata.mat\n</code>\n</pre>\n", "senID": 2}, {"text": ["or the function syntax form (if you have the file path stored in a string):"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "function syntax", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n filePath = 'c:/tmp/arrdata.mat';\ndata = load(filePath);\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I wrote a small function to do this same thing, without need for numpy.", "It takes a list of lists and returns a string with a MATLAB-formatted matrix."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def arrayOfArrayToMatlabString(array):\n    return '[' + \"\\n \".join(\" \".join(\"%6g\" % val for val in line) for line in array) + ']'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Write \"myMatrix = \" + arrayOfArrayToMatlabString(array) to a .m file,  open it in matlab, and execute it."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "\"myMatrix = \" + arrayOfArrayToMatlabString(array)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".m", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You could write the matrix in Python to a CSV file and read it in MATLAB using csvread."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["All solutions listed so far involve writing the data to disk.", "This is not essential, I have written a tool (not yet published, but the idea is simple) that uses a pipe to communicate the data.", "Matlab lacking pipe support, I write it to a named pipe from Python, and read it from the named pipe in Matlab.", "Like this I don't need unnecessary disk I/O and the solution should be considerably faster for large amounts of data."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, I'm afraid I might have fallen into the trap so nicely formulated by Don.", "Knuth: Premature optimization is the root of all evil."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can also call matlab directly from python:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "call matlab", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mlabwrap.sourceforge.net/"}]}, {"code": "<pre>\n<code>\n from mlabwrap import mlab\nimport numpy \na = numpy.array([1,2,3])\nmlab.plot(a)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I would probably use numpy.savetxt('yourfile.mat',yourarray) in Python\nand then yourarray = load('yourfile.mat') in MATLAB."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]