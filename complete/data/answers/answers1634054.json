[[{"text": ["Python has built-in support for finding minimums:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "support for finding minimums", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#min"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; min([1, 2, 3])\n1\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you need to process the list with a function first, you can do that with map:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "map", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#map"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def double(x):\n...    return x * 2\n... \n&gt;&gt;&gt; min(map(double, [1, 2, 3]))\n2\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or you can get fancy with list comprehensions and generator expressions, for example:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "list comprehensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}, {"href": "http://docs.python.org/tutorial/classes.html#generator-expressions", "text": "generator expressions", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; min(double(x) for x in [1, 2, 3])\n2\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Writing foreach method is not very pythonic.", "You should better make it an iterator so that it works with standard python functions like min."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "foreach", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "min", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Instead of writing something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def foreach(self, f):\n    for d in self._data:\n        f(d)\n</code>\n</pre>\n", "senID": 2}, {"text": ["write this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def __iter__(self):\n    for d in self._data:\n        yield d\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now you can call min as min(myobj)."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "min", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "min(myobj)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can't do this with foreach and a lambda.", "If you want to do this in a functional style without actually using min, you'll find reduce is pretty close to the function you were trying to define."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "foreach", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "min", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "reduce", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n l = [5,2,6,7,9,8]\nreduce(lambda a,b: a if a &lt; b else b, l[1:], l[0])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Okay, one thing you need to understand: lambda creates a function object for you.", "But so does plain, ordinary def.", "Look at this example:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "lambda", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "def", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n lst = range(10)\n\nprint filter(lambda x: x % 2 == 0, lst)\n\ndef is_even(x):\n    return x % 2 == 0\n\nprint filter(is_even, lst)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Both of these work.", "They produce the same identical result.", "lambda makes an un-named function object; def makes a named function object.", "filter() doesn't care whether the function object has a name or not."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "lambda", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "def", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "filter()", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["So, if your only problem with lambda is that you can't use = in a lambda, you can just make a function using def."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "lambda", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "=", "childNum": 0, "tag": "code", "childList": []}, {"text": "lambda", "childNum": 0, "tag": "code", "childList": []}, {"text": "def", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Now, that said, I don't suggest you use your .foreach() method to find a minimum value.", "Instead, make your main object return a list of values, and simply call the Python min() function."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": ".foreach()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "min()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n lst = range(10)\nprint min(lst)\n</code>\n</pre>\n", "senID": 5}, {"text": ["EDIT: I agree that the answer that was accepted is better.", "Rather than returning a list of values, it is better to define __iter__() and make the object iterable."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "__iter__()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["It sounds, from the comment you subsequently posted, that you have re-invented the built-in map function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It sounds like you're looking for something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n min(map(f, seq))\n</code>\n</pre>\n", "senID": 2}, {"text": ["where f is the function that you want to call on every item in the list."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "f", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["As gnibbler shows, if you want to find the value x in the sequence for which f(x) returns the lowest value, you can use:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "f(x)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n min(seq, key=f)\n</code>\n</pre>\n", "senID": 5}, {"text": ["...unless you want to find all of the items in seq for which f returns the lowest value.", "For instance, if seq is a list of dictionaries,"], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "all", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "seq", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "f", "childNum": 0, "tag": "code", "childList": []}, {"text": "seq", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n min(seq, key=len)\n</code>\n</pre>\n", "senID": 7}, {"text": ["will return the first dictionary in the list with the smallest number of items, not all dictionaries that contain that number of items.  "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["To get a list of all items in a sequence for which the function f returns the smallest value, do this:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "f", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n values = map(f, seq)\nresult = [seq[i] for (i, v) in enumerate(values) if v == min(values)]\n</code>\n</pre>\n", "senID": 10}], [{"text": ["Suppose you have"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; seq = range(-4,4)\n&gt;&gt;&gt; def f(x):\n...  return x*x-2\n</code>\n</pre>\n", "senID": 1}, {"text": ["for the minimum value of f"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; min(f(x) for x in seq)\n-2\n</code>\n</pre>\n", "senID": 3}, {"text": ["for the value of x at the minimum"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; min(seq, key=f)\n0\n</code>\n</pre>\n", "senID": 5}, {"text": ["of course you can use lambda too"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; min((lambda x:x*x-2)(x) for x in range(-4,4))\n-2\n</code>\n</pre>\n", "senID": 7}, {"text": ["but that is a little ugly, map looks better here"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; min(map(lambda x:x*x-2, seq))\n-2\n\n&gt;&gt;&gt; min(seq,key=lambda x:x*x-2)\n0\n</code>\n</pre>\n", "senID": 9}]]