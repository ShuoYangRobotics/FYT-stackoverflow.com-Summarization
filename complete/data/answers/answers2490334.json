[[{"text": ["As you explicitly state that you want obscurity not security, we'll avoid reprimanding you for the weakness of what you suggest :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, using PyCrypto:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from Crypto.Cipher import AES\nimport base64\n\ncipher = AES.new(secret_key,AES.MODE_ECB) # never use ECB in strong systems obviously\nencoded = base64.b64encode(cipher.encrypt(msg_text))\n# ...\ndecoded = cipher.decrypt(baes64.b64decode(msg_text))\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Assuming you are only looking for simple obfuscation that will obscure things from the very casual observer, and you aren't looking to use third party libraries.", "I'd recommend something like the Vigenere cipher.", "It is one of the strongest of the simple ancient ciphers."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "only", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "very", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher"}]}, {"text": ["It's quick and easy to implement.", "Something like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def encode(key, string):\n    encoded_chars = []\n    for i in xrange(string):\n        key_c = key[i % len(key)]\n        encoded_c = chr(ord(string[i]) + ord(encoded_c) % 256)\n        encoded_chars.append(encoded_c)\n    encoded_string = \"\".join(encoded_chars)\n    return base64.urlsafe_b64encode(encoded_string)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Decode is pretty much the same, except you subtract the key."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["It is much harder to break if the strings you are encoding are short, and/or if it is hard to guess the length of the passphrase used. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["If you are looking for something cryptographic, PyCrypto is probably your best bet, though previous answers overlook some details: ECB mode in PyCyrpto requires your message to be a multiple of 16 characters in length.", "So, you must pad.", "Also, if you want to use them as URL parameters, use base64.urlsafe_b64_encode(), rather than the standard one.", "This replaces a few of the characters in the base64 alphabet with URL-safe ones (as it's name suggests)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["However, you should be ABSOLUTELY certain that this very thin layer of obfuscation suffices for your needs before using this.", "The Wikipedia article I linked to provides detailed instructions for breaking the cipher, so anyone with a moderate amount of determination could easily break it."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "very", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Simple way is using the library, and PyCrypto is the good one."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyCrypto", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dlitz.net/software/pycrypto/"}]}], [{"text": ["If you are using passwords, it's best to do it right (especially if you are dealing with user passwords)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "If you are using passwords, it's best to do it right (especially if you are dealing with user passwords).", "childNum": 0, "tag": "strike", "pos": 0, "childList": []}]}, {"text": ["What you want to do is \"encrypt\" the password, not encode."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You have two choices on how you can do this, depending on who is doign the encrypting."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If its a trusted thirdparty, use Public/Private key encryption.", "RSA is a good choice.", "You give the public key to your trusted thirdparty, and keep the private key safe."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you're doing the encrypting yourself, and noone will have access to your code, then Symmetric key encryption is good.", "I recommend AES with a sufficiently strong key (256bit)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["There are libraries for python that do either of these encryption schemes."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["You can 1/2 ass security, but don't.", "It's not a good idea.", "Ever."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["You can use AES to encrypt your string with a password.", "Though, you'll want to chose a strong enough password so people can't easily guess what it is (sorry I can't help it.", "I'm a wannabe security weenie)."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["AES is strong with a good key size, but it's also easy to use with PyCrypto."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["External libraries provide secret-key encryption algorithms."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, the Cyphermodule in PyCrypto offers a selection of many encryption algorithms:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Cyphermodule in PyCrypto", "tag": "a", "pos": 0, "childList": [{"text": "Cypher", "tag": "code"}], "childNum": 1, "href": "http://www.dlitz.net/software/pycrypto/apidoc/Crypto.Cipher-module.html"}, {"text": "Cypher", "childNum": 0, "tag": "code", "childList": []}]}, {"tag": "ul", "num": 10, "lis": [{"text": ["Crypto.Cipher.AES"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}, {"text": ["Crypto.Cipher.ARC2"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}, {"text": ["Crypto.Cipher.ARC4"], "childNum": 0, "tag": "code", "senID": 4, "childList": []}, {"text": ["Crypto.Cipher.Blowfish"], "childNum": 0, "tag": "code", "senID": 5, "childList": []}, {"text": ["Crypto.Cipher.CAST"], "childNum": 0, "tag": "code", "senID": 6, "childList": []}, {"text": ["Crypto.Cipher.DES"], "childNum": 0, "tag": "code", "senID": 7, "childList": []}, {"text": ["Crypto.Cipher.DES3"], "childNum": 0, "tag": "code", "senID": 8, "childList": []}, {"text": ["Crypto.Cipher.IDEA"], "childNum": 0, "tag": "code", "senID": 9, "childList": []}, {"text": ["Crypto.Cipher.RC5"], "childNum": 0, "tag": "code", "senID": 10, "childList": []}, {"text": ["Crypto.Cipher.XOR"], "childNum": 0, "tag": "code", "senID": 11, "childList": []}]}, {"text": ["MeTooCrypto is a Python wrapper for OpenSSL, and provides (among other functions) a full-strength general purpose cryptography library.", "Included are symmetric ciphers (like AES)."], "childNum": 3, "tag": "p", "senID": 12, "childList": [{"text": "MeTooCrypto", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://chandlerproject.org/Projects/MeTooCrypto"}, {"text": "Python", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "OpenSSL", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.openssl.org/"}]}], [{"text": ["This works but password length should be exactly 8.", "This is simple and requires pyDes."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "8", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "pyDes", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://twhiteman.netfirms.com/des.html"}]}, {"code": "<pre>\n<code>\n from pyDes import *\n\ndef encode(data,password):\n    k = des(password, CBC, \"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=PAD_PKCS5)\n    d = k.encrypt(data)\n    return d\n\ndef decode(data,password):\n    k = des(password, CBC, \"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=PAD_PKCS5)\n    d = k.decrypt(data)\n    return d\n\nx = encode('John Doe', 'mypass12')\ny = decode(x,'mypass12')\n\nprint x\nprint y\n</code>\n</pre>\n", "senID": 1}, {"text": ["OUTPUT:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n \u00b3.\\\u00de\\\u00e5S\u00be+\u00e6\u00c5`;\u00ca\nJohn Doe\n</code>\n</pre>\n", "senID": 3}]]