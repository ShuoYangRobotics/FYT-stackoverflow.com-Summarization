[[{"text": ["There is a really good Perl library for xls reading: Spreadsheet::ParseExcel."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Spreadsheet::ParseExcel", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/perldoc/Spreadsheet::ParseExcel"}]}], [{"text": ["Maybe xlrd will do the Job (in Python)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "xlrd", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/xlrd"}]}, {"text": ["edit: I should really learn to read questions.", "But writing csv shouldn't be a huge problem so maybe you can actually use it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can use pyexcelerator in python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pyexcelerator", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/pyexcelerator/"}]}, {"text": ["This code (included in the examples folder of pyexcelerator as xls2csv.py) extracts all sheets from the spreadsheets and outputs them to stdout as CSV."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "examples", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "xls2csv.py", "childNum": 0, "tag": "code", "childList": []}, {"text": "stdout", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can easily change the code to do what you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The cool thing about pyexcelerator is that you can also use it to write/create excel xls files, without having excel installed."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "write/create", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n# -*- coding: windows-1251 -*-\n# Copyright (C) 2005 Kiseliov Roman\n\n__rev_id__ = \"\"\"$Id: xls2csv.py,v 1.1 2005/05/19 09:27:42 rvk Exp $\"\"\"\n\n\nfrom pyExcelerator import *\nimport sys\n\nme, args = sys.argv[0], sys.argv[1:]\n\n\nif args:\n    for arg in args:\n        print &gt;&gt;sys.stderr, 'extracting data from', arg\n        for sheet_name, values in parse_xls(arg, 'cp1251'): # parse_xls(arg) -- default encoding\n            matrix = [[]]\n            print 'Sheet = \"%s\"' % sheet_name.encode('cp866', 'backslashreplace')\n            print '----------------'\n            for row_idx, col_idx in sorted(values.keys()):\n                v = values[(row_idx, col_idx)]\n                if isinstance(v, unicode):\n                    v = v.encode('cp866', 'backslashreplace')\n                else:\n                    v = str(v)\n                last_row, last_col = len(matrix), len(matrix[-1])\n                while last_row &lt; row_idx:\n                    matrix.extend([[]])\n                    last_row = len(matrix)\n\n                while last_col &lt; col_idx:\n                    matrix[-1].extend([''])\n                    last_col = len(matrix[-1])\n\n                matrix[-1].extend([v])\n\n            for row in matrix:\n                csv_row = ','.join(row)\n                print csv_row\n\nelse:\n    print 'usage: %s (inputfile)+' % me\n</code>\n</pre>\n", "senID": 4}], [{"text": ["for ruby, the spreadsheet gem is excellent to read write modify, ...excell files"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://spreadsheet.rubyforge.org"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://spreadsheet.rubyforge.org", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://spreadsheet.rubyforge.org"}]}], [{"text": ["In Ruby, here is the code I use: (requires the excellent parseexcel gem)\n    require 'parseexcel'"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def excelGetSheet(worksheet)\n\tsheet=Array.new\n\tworksheet.each { |row|\n\t  if row != nil   # empty row?\n\t    cells=Array.new\n\t    j=0\n\t    row.each { |cell|\n\t      cells &lt;&lt; cell.to_s('latin1')  unless cell == nil\n\t      j=j+1\n\t    }\n\t    sheet &lt;&lt; cells\n\t  end\n\t}\n\treturn sheet\nend\n\nworkbook = Spreadsheet::ParseExcel.parse(\"MyExcelFile.xls\")\nsheet1 = excelGetSheet(workbook.worksheet(0))\n\nputs sheet1.inspect\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I may have found an acceptable answer already:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["xls2csv"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "xls2csv", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/perldoc/xls2csv"}]}, {"text": ["But interested to hear what other options there are, or about tools in other languages."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["For python, there are a number of options, see here, here and here.", "Note that the last option will only work on Windows with Excel installed."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/xlrd"}, {"text": "here", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://pyxlreader.sourceforge.net/"}, {"text": "here", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.velocityreviews.com/forums/t352440-how-to-read-excel-files-in-python.html"}]}], [{"text": ["Options exist for all three languages.", "The question is - which one are you most familiar with.", "This is the language you should use, for sure.", "And if you're not familiar with either, this application is not really a great example of picking between the languages."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Opinionated P.S: if you don't know any of the languages, just learn Python and use xlrd."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "xlrd", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]