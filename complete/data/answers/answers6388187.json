[[{"text": ["I use #3.", "Same for long lists, tuples, etc.", "It doesn't require adding any extra spaces beyond the indentations.", "As always, be consistent."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mydict = {\n    \"key1\": 1,\n    \"key2\": 2,\n    \"key3\": 3,\n}\n\nmylist = [\n    (1, 'hello'),\n    (2, 'world'),\n]\n\nnested = {\n    a: [\n        (1, 'a'),\n        (2, 'b'),\n    ],\n    b: [\n        (3, 'c'),\n        (4, 'd'),\n    ],\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Similarly, here's my preferred way of including large strings without introducing any whitespace (like you'd get if you used triple-quoted multi-line strings):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n data = (\n    \"iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABG\"\n    \"l0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAEN\"\n    \"xBRpFYmctaKCfwrBSCrRLuL3iEW6+EEUG8XvIVjYWNgJdhFjIX\"\n    \"rz6pKtPB5e5rmq7tmxk+hqO34e1or0yXTGrj9sXGs1Ib73efh1\"\n    \"AAAABJRU5ErkJggg==\"\n)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Since your keys are strings and since we are talking about readability, I prefer :  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mydict = dict(\n    key1 = 1,\n    key2 = 2,\n    key3 = 3,\n)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["From my experience with tutorials, and other things number 2 always seems preferred, but it's a personal preference choice more than anything else."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I think 1 and 2 are preferred, but you can check for yourself in the PEP8 guidelines"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP8 guidelines", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["In our projects we are using 1st and 2nd.", "The only difference is that we also use max length limitation to 81-91 char, so in case of big dictionaries, tuples and so on we starting next line right after exceeding max len limit, for ex:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = {key:val, ....... &lt;up until 81 char length&gt;,\n     keyn:valn, ....... &lt;up until 81 char length&gt;,\n     keyx:valx, ....... &lt;up until 81 char length&gt;}\n</code>\n</pre>\n", "senID": 1}, {"text": ["OR"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n d = {key:val, ....... &lt;up until 81 char length&gt;,\n     keyn:valn, ....... &lt;up until 81 char length&gt;,\n     keyx:valx, ....... &lt;up until 81 char length&gt;\n    }\n</code>\n</pre>\n", "senID": 3}, {"text": ["But sometimes - really very rarelly:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n d = {\n     key:val, ....... &lt;up until 81 char length&gt;,\n     keyn:valn, ....... &lt;up until 81 char length&gt;,\n     keyx:valx, ....... &lt;up until 81 char length&gt;\n    }\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Generally, you would not include the comma after the final entry, but Python will correct that for you."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]