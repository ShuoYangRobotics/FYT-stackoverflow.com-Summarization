[[{"text": ["Just call the function. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I am completely against this use of &#95;&#95;code__."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "I am completely against this use of &#95;&#95;code__.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Although I am a curious person, and this is what someone theoretically could do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n code # This is your code object that you want to execute\n\ndef new_func(eggs): pass\nnew_func.__code__ = code\nnew_func('eggs')\n</code>\n</pre>\n", "senID": 2}, {"text": ["Again, I never want to see this used, ever.", "You might want to look into &#95;&#95;import__ if you want to load code during run-time."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "&#95;&#95;import__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Can you change the function to not take any arguments?", "The variables is then looked up from the locals/globals where you can supply into exec:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "exec", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def spam():\n...   print \"spam and\", eggs\n... \n&gt;&gt;&gt; exec(spam.__code__, {'eggs':'pasta'})\nspam and pasta\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Why not just send the whole function as a string?", "Pickle \"def spam(eggs): print 'spam and', eggs\", and exec the string (after verification) on the other side."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "\"def spam(eggs): print 'spam and', eggs\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "exec", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I think there are probably some design considerations in your larger application that could make you not care about this problem, like perhaps having some collection of 'known good and valid' functions distributed as a module that the executing agents know about or something. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That said, one hacky solution would be: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def spam(eggs):\n...     print \"spam and %s\" % eggs\n...     \n... \n&gt;&gt;&gt; spam('bacon')\nspam and bacon\n&gt;&gt;&gt; def util():\n...     pass\n...     \n... \n&gt;&gt;&gt; util.__code__ = spam.__code__\n&gt;&gt;&gt; util('bacon')\nspam and bacon\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I don't think you can pass arguments to either exec or eval, so that they are passed to the code object."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "exec", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "eval", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You could resort to the string version of exec/eval, e.g.", "exec(\"spam(3)\")."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "exec(\"spam(3)\")", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You could create another code object that binds the argument, and then exec this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def spam_with_eggs():\n   return spam(3)\nexec(spam_with_eggs.__code__)\n</code>\n</pre>\n", "senID": 3}, {"text": ["(I thought you could also achieve this with functools.partial, but didn't get it to work)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "functools.partial", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["After reading your additional explanations I thought of ways to re-establish a proper function from the code object.", "This simple approach worked for me (in python2.5):"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def bar():pass\nbar.func_code = spam.func_code\nbar(3)  # yields \"spam and 3\"\n</code>\n</pre>\n", "senID": 7}], [{"text": ["My method, I thing it`s more beautiful"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def f(x):\n    print(x, x+1)\n\ng = type(f)(f.__code__, globals(), \"optional_name\")\n\ng(3)\n</code>\n</pre>\n", "senID": 1}]]