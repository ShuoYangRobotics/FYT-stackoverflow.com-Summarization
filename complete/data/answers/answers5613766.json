[[{"text": ["If you already have player objects or dictionaries, you could sort with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n players.sort(key=lambda player: player.score, reverse=True)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If not, process your array and split at each ':'"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Sample:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    \"entry point\"\n    player_strings = ['Player 1:3', 'Player 2:4', 'Player 3:3', 'Player 4:5']\n    players = []\n    for player_string in player_strings:\n        name, score = player_string.split(':')\n        players.append({'name':name, 'score':score})\n    players.sort(key=lambda player: int(player['score']), reverse=True)\n    for player in players:\n        print ('%s has a score of %s' % (player['name'], player['score']))\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Look at the examples of "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://wiki.python.org/moin/HowTo/Sorting#Operator_Module_Functions"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://wiki.python.org/moin/HowTo/Sorting#Operator_Module_Functions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/HowTo/Sorting#Operator_Module_Functions"}]}], [{"code": "<pre>\n<code>\n sorted(values, key=lambda s: s.split(': ')[1], reverse=True)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Passing a \"key function\" to the list.sort method allows you to customize how it is sorted."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def sort_players(players):\n    r\"\"\"Sort the players by points.\n\n    &gt;&gt;&gt; print sort_players('Player 1: 3\\n'\n    ...                    '\\n'\n    ...                    'Player 2: 4\\n'\n    ...                    '\\n'\n    ...                    'Player 3: 3\\n'\n    ...                    '\\n'\n    ...                    'Player 4: 5\\n')\n    Player 4: 5\n    Player 2: 4\n    Player 1: 3\n    Player 3: 3\n    \"\"\"\n    # split into a list\n    players = players.split(\"\\n\")\n\n    # filter out empty lines\n    players = [player for player in players if player != '']\n\n    def points(player_report):\n        \"\"\"Parse the number of points won by a player from a player report.\n\n        A \"player report\" is a string like 'Player 2: 6'.\n        \"\"\"\n        import re\n        # Match the last string of digits in the passed report\n        points = re.search(r'\\d+$', player_report).group()\n        return int(points)\n\n    # Pass `points` as a \"key function\".\n    # The list will be sorted based on the values it returns.\n    players.sort(key=points, reverse=True)\n\n    # Make the sorted list back into a string.\n    return \"\\n\".join(players)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Supposing that the 'players reports' are in a list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n values = ['Player 1: 3','Player 2: 4','Player 3: 3','Player 4: 5']\n\nvalues.sort(key=lambda s: [(-int(b),a) for a,b in (s.split(':'),)])\n\nprint values\n</code>\n</pre>\n", "senID": 1}, {"text": ["results in "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['Player 4: 5', 'Player 2: 4', 'Player 1: 3', 'Player 3: 3']\n</code>\n</pre>\n", "senID": 3}, {"text": ["============="], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Bob Loin said he wants to obtain"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Daniel's Roseman works well or not depending on the treated list."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["My solution gives the right result.", "See the difference on the second list"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n values = ['Player 1: 3','Player 2: 4','Player 3: 3','Player 4: 5']\n\nprint '   ',values\nprint\nprint 'Dan',sorted(values, key=lambda s: s.split(': ')[1], reverse=True)\nprint 'eyq',sorted(values, key=lambda s: [(-int(b),a) \n                                          for a,b in (s.split(':'),)])\n\nprint '\\n===================================\\n'\n\nvalues = ['Player 3: 3','Player 2: 4','Player 1: 3','Player 4: 5']\n\nprint '   ',values\nprint\nprint 'Dan',sorted(values, key=lambda s: s.split(':')[1], reverse=True)\nprint 'eyq',sorted(values, key=lambda s: [(-int(b),a) \n                                          for a,b in (s.split(': '),)])\n</code>\n</pre>\n", "senID": 8}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n ['Player 1: 3', 'Player 2: 4', 'Player 3: 3', 'Player 4: 5']\n\nDan ['Player 4: 5', 'Player 2: 4', 'Player 1: 3', 'Player 3: 3']\neyq ['Player 4: 5', 'Player 2: 4', 'Player 1: 3', 'Player 3: 3']\n\n===================================\n\n    ['Player 3: 3', 'Player 2: 4', 'Player 1: 3', 'Player 4: 5']\n\nDan ['Player 4: 5', 'Player 2: 4', 'Player 3: 3', 'Player 1: 3']\neyq ['Player 4: 5', 'Player 2: 4', 'Player 1: 3', 'Player 3: 3']\n</code>\n</pre>\n", "senID": 10}], [{"text": ["I'm not too familiar with the syntax or methods available to python, but why not access the last character in a string and order by that value?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]