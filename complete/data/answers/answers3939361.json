[[{"text": ["Strings in python are immutable (can't be changed).", "Because of this, the effect of line.replace(...) is just to create a new string, rather than changing the old one.", "You need to rebind (assign) it to line in order to have that variable take the new value, with those characters removed."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "immutable", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "line.replace(...)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "rebind", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "line", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also, the way you are doing it is going to be kind of slow, relatively.", "It's also likely to be a bit confusing to experienced pythonators, who will see a doubly-nested structure and think for a moment that something more complicated is going on."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You can instead use str.translate:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "str.translate", "tag": "a", "pos": 0, "childList": [{"text": "str.translate", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#str.translate"}, {"text": "str.translate", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n line = line.translate(None, '!@#$')\n</code>\n</pre>\n", "senID": 3}, {"text": ["\u2014 which only works on Python 2.6 and newer * \u2014"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["or regular expression replacement with re.sub"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "re.sub", "tag": "a", "pos": 0, "childList": [{"text": "re.sub", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/re.html#re.sub"}, {"text": "re.sub", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import re\nline = re.sub('[!@#$]', '', line)\n</code>\n</pre>\n", "senID": 6}, {"text": ["The characters enclosed in brackets constitute a character class.", "Any characters in line which are in that class are replaced with the second parameter to sub: an empty string."], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "character class", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "line", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "sub", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["*   for compatibility with earlier Pythons, you can create a \"null\" translation table to pass in place of None:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import string\nline = line.translate(string.maketrans('', ''), '!@#$')\n</code>\n</pre>\n", "senID": 9}, {"text": ["Here string.maketrans is used to create a translation table, which is just a string containing the characters with ordinal values 0 to 255."], "childNum": 3, "tag": "p", "senID": 10, "childList": [{"text": "string.maketrans", "tag": "a", "pos": 0, "childList": [{"text": "string.maketrans", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/string.html#string.maketrans"}, {"text": "string.maketrans", "childNum": 0, "tag": "code", "childList": []}, {"text": "translation table", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["As kevpie mentions in a comment on one of the answers, , and as noted in the documentation forstr.translate, things work differently with Unicode strings."], "childNum": 3, "tag": "p", "senID": 11, "childList": [{"text": "comment", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3939361/remove-specific-characters-from-a-string-in-python#comment-4205256"}, {"href": "http://docs.python.org/library/stdtypes.html#str.translate", "text": "documentation forstr.translate", "childNum": 1, "tag": "a", "childList": [{"text": "str.translate", "tag": "code"}]}, {"text": "str.translate", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["When calling the translate method of a unicode string, you cannot pass the second parameter that we used up above.", "You also can't pass None as the first parameter, or even a translation table from string.maketrans.", "Instead, you pass a dictionary as the only parameter.", "This dictionary maps the ordinal values of characters (i.e.", "the result of calling ord on them) to the ordinal values of the characters which should replace them, or \u2014usefully to us\u2014 None to indicate that they should be deleted."], "childNum": 7, "tag": "p", "senID": 12, "childList": [{"text": "translate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "string.maketrans", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "ordinal values", "childNum": 0, "tag": "em", "pos": 3, "childList": []}, {"text": "ord", "tag": "a", "pos": 4, "childList": [{"text": "ord", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#ord"}, {"text": "ord", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So to do the above dance with a Unicode string you would call something like"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n translation_table = dict.fromkeys(map(ord, '!@#$'), None)\nunicode_line = unicode_line.translate(translation_table)\n</code>\n</pre>\n", "senID": 14}, {"text": ["Here dict.fromkeys and map are used to succinctly generate a dictionary containing"], "childNum": 4, "tag": "p", "senID": 15, "childList": [{"text": "dict.fromkeys", "tag": "a", "pos": 0, "childList": [{"text": "dict.fromkeys", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#dict.fromkeys"}, {"text": "dict.fromkeys", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/functions.html#map", "text": "map", "childNum": 1, "tag": "a", "childList": [{"text": "map", "tag": "code"}]}, {"text": "map", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n {ord('!'): None, ord('@'): None, ...}\n</code>\n</pre>\n", "senID": 16}], [{"code": "<pre>\n<code>\n line = line.translate(None, \" ?.!/;:\")\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Strings are immutable in Python.", "The replace method returns a new string after the replacement.", "Try:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "replace", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n for char in line:\n    if char in \" ?.!/;:\":\n        line = line.replace(char,'')\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; line = \"abc#@!?efg12;:?\"\n&gt;&gt;&gt; ''.join( c for c in line if  c not in '?:!/;' )\n'abc#@efg12'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Am I missing the point here, or is it just the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; str = \"ab1cd1ef\"\n&gt;&gt;&gt; str.replace(\"1\",\"\")\n'abcdef'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Put it in a loop:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt;\n&gt;&gt;&gt; a = \"a!b@c#d$\"\n&gt;&gt;&gt; b = \"!@#$\"\n&gt;&gt;&gt; for i in range(0,len(b)):\n...  a =a.replace(b[i],\"\")\n...\n&gt;&gt;&gt; print a\nabcd\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The asker almost had it.", "Like most things in Python, the answer is simpler than you think."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; line = \"H E?.LL!/;O:: \"  \n&gt;&gt;&gt; for char in ' ?.!/;:':  \n...  line = line.replace(char,'')  \n...\n&gt;&gt;&gt; print line\nHELLO\n</code>\n</pre>\n", "senID": 1}, {"text": ["You don't have to do the nested if/for loop thing, but you DO need to check each character individually."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]