[[{"text": ["Look at this answer."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/452969/does-python-have-an-equivalent-to-java-class-forname"}]}], [{"text": ["Never use eval() if you can help it.", "Python has so many better options (dispatch dictionary, getattr(), etc.", ") that you should never have to use the security hole known as eval()."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "Never", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "eval()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "so", "childNum": 0, "tag": "strong", "childList": []}, {"text": "getattr()", "childNum": 0, "tag": "code", "childList": []}, {"text": "eval()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Not totally sure this is what you want, but it seems like a more Python'y way to instantiate a bunch of classes listed in a string:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class idClasses:\n    class ID12345:pass\n    class ID01234:pass\n# could also be: import idClasses\n\nclass ProcessDirector:\n    def __init__(self):\n        self.allClasses = []\n\n    def construct(self, builderName):\n        targetClass = getattr(idClasses, builderName)\n        instance = targetClass()\n        self.allClasses.append(instance)\n\nIDS = [\"ID12345\", \"ID01234\"]\n\ndirector = ProcessDirector()\nfor id in IDS:\n    director.construct(id)\n\nprint director.allClasses\n# [&lt;__main__.ID12345 instance at 0x7d850&gt;, &lt;__main__.ID01234 instance at 0x7d918&gt;]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you wanted to avoid an eval(), you could just do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n id = \"1234asdf\"\nconstructor = globals()[id]\ninstance = constructor()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Provided that the class is defined in (or imported into) your current scope."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Simplest way is to just create a dict."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class A(object): \n    pass\nclass B(object): \n    pass\n\nnamedclass = {'ID12345': A, 'ID2': A, 'B': B, 'AnotherB': B,  'ID01234': B}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then use it (your code example):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n IDS = [\"ID12345\", \"ID01234\"]\n\nProcessDirector = ProcessDirector()\nfor id in IDS:\n    builder = namedclass[id]() \n    ProcessDirector.construct(builder)\n    builder.run()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["There's some stuff missing from your question, so I'm forced to guess at the omitted stuff.", "Feel free to edit your question to correct the omissions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class ProcessDirector( object ):\n    # does something\n\nclass ID12345( SomeKindOfProcess ):\n    pass\n\nclass ID001234( SomeKindOfProcess ):\n    pass\n\nidList= [ID12345, ID01234]\n\ntheProcessDirector = ProcessDirector()\nfor id in idList:\n  builder = id() #Instantiate an object from the class object\n  theProcessDirector.construct(builder)\n  builder.run()\n</code>\n</pre>\n", "senID": 1}, {"text": ["This works very nicely.", "It doesn't instantiate from a string -- in practice you don't often want this.", "Sometimes, but rarely.", "More commonly, you a list of class objects from which you want instance objects."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you actually are getting your class names from the command line, then you'd make the following small change."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n validClasses = [ ID12345, ID01234 ]\nvalidMap = dict( ( (c.__name__, c) for c in validClasses ) )\nnameStrings = [ \"ID12345\", \"ID01234\" ] # from your command-line \nidList= [ validMap[s] for s in nameStrings ]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Everything else remains the same."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["[Also, if possible, try to start instance variable names with lowercase letters.", "Names which start with Uppercase Letters  are usually class names."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Removed eval.", "In spite of the fact that eval() is absolutely not  a security hole.", "Eval (and exec and execfile) are only a problem if someone specifically grants access to malicious users."], "childNum": 5, "tag": "p", "senID": 8, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "eval()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "not", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "exec", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "execfile", "childNum": 0, "tag": "code", "childList": []}]}]]