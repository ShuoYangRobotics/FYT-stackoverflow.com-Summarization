[[{"text": ["There are two ways that I like to do this, depending on the situation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If your unit test is going to call ParseCsvFile directly I would add a new kwarg to ParseCsvFile:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def ParseCsvFile(source, open=open): \n    # ...\n    rack_type_file = open(rack_file)  # Need to mock this line.\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then your unit test can pass a different open_func in order to accomplish the mocking."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If your unit test calls some other function that in turn calls ParseCsvFile then passing around open_func just for tests is ugly.", "In that case I would use the mock module.", "This lets you alter a function by name and replace it with a Mock object."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "mock module", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.voidspace.org.uk/python/mock/"}]}, {"code": "<pre>\n<code>\n # code.py\ndef open_func(name):\n    return open(name)\n\ndef ParseCsvFile(source):\n    # ...\n    rack_type_file = open_func(rack_file)  # Need to mock this line.\n\n# test.py\nimport unittest\nimport mock\nfrom StringIO import StringIO\n\n@mock.patch('code.open_func')\nclass ParseCsvTest(unittest.TestCase):\n    def test_parse(self, open_mock):\n        open_mock.return_value = StringIO(\"my,example,input\")\n        # ...\n</code>\n</pre>\n", "senID": 5}], [{"text": ["To mock built-in function open with mox use __builtin__ module: "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__builtin__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import __builtin__ # unlike __builtins__ this must be imported\nm = mox.Mox()\nm.StubOutWithMock(__builtin__, 'open')\nopen('ftphelp.yml', 'rb').AndReturn(StringIO(\"fake file content\"))     \nm.ReplayAll()\n# call the code you want to test that calls `open`\nm.VerifyAll()\nm.UnsetStubs()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that __builtins__ is not always a module, it can be of type dict, please use __builtin__ (with no \"s\") module to refer to system built-in methods."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "__builtins__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__builtin__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["More about __builtin__ module: http://docs.python.org/library/builtin.html"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "__builtin__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/__builtin__.html", "text": "http://docs.python.org/library/builtin.html", "childNum": 1, "tag": "a", "childList": [{"text": "builtin", "tag": "strong"}]}, {"text": "builtin", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["I took the liberty of re-writing your sample function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Assume your function is located in a file named code.py"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "code.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # code.py\nimport csv\n\nimport logging\n\n\ndef ParseCsvFile(source):\n    \"\"\"Parse the csv file.\n    Args:\n      source: file to be parsed\n\n    Returns: the list of dictionary entities; each dictionary contains\n               attribute to value mapping or its equivalent.\n    \"\"\"\n    global rack_file\n    rack_file = source\n    attributes_list = []\n\n    try:\n        rack_type_file = open(rack_file)\n    except IOError, (errno, strerror):\n        logging.error(\"I/O error(%s): %s\", errno, strerror)\n    else:\n        reader = csv.DictReader(rack_type_file, delimiter=',')\n        attributes_list = [line for line in reader]   # list of dictionaries\n        rack_type_file.close()\n\n    return attributes_list\n</code>\n</pre>\n", "senID": 2}, {"text": ["A simple test case would be:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n # your test file\nimport __builtin__\nimport unittest\nimport contextlib\nfrom StringIO import StringIO\n\nimport mox\n\nimport code\n\n\n@contextlib.contextmanager\ndef mox_replayer(mox_instance):\n    mox_instance.ReplayAll()\n    yield\n    mox_instance.VerifyAll()\n\n\nclass TestParseCSVFile(unittest.TestCase):\n\n    def setUp(self):\n        self.mox = mox.Mox()\n\n    def tearDown(self):\n        self.mox.UnsetStubs()\n\n    def test_parse_csv_file_returns_list_of_dicts(self):\n        TEST_FILE_NAME = 'foo.csv'\n\n        self.mox.StubOutWithMock(__builtin__, 'open')\n        open(TEST_FILE_NAME).AndReturn(StringIO(\"name,age\\nfoo,13\"))\n\n        with mox_replayer(self.mox):\n            result = code.ParseCsvFile(TEST_FILE_NAME)\n\n        self.assertEqual(result, [{'age': '13', 'name': 'foo'}])  # works!\n\n\nif __name__ == '__main__':\n    unittest.main()\n</code>\n</pre>\n", "senID": 4}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n % /usr/bin/python2.6\nPython 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) \n[GCC 4.2.1 (Apple Inc. build 5646)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import __builtin__\n&gt;&gt;&gt; import mox\n&gt;&gt;&gt; mock = mox.Mox()\n&gt;&gt;&gt; mock.StubOutWithMock(__builtin__, 'open')\n&gt;&gt;&gt; mock.UnsetStubs()\n</code>\n</pre>\n", "senID": 6}, {"text": ["Works fine on 2.6 using mox 0.53"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Maybe something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from StringIO import StringIO\n\ndef open(name):\n    return StringIO(\"one,two,three\\n1,2,3\")\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; class A(object):\n...     def __init__(self):\n...         self.x = open('test.py')\n... \n&gt;&gt;&gt; old_open = open\n&gt;&gt;&gt; def open(s):\n...     return \"test\\n\"\n... \n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.x\n'test\\n'\n&gt;&gt;&gt; open = old_open\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.x\n&lt;open file 'test.py', mode 'r' at 0xb7736230&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Hi I was having a similar problem, and was tearing my hair out flipping between different mocking libraries.", "I finally found a solution that I am happy with, and maybe it might help you?", "In the end I went with the Mocker library http://labix.org/mocker and here is the code for mocking open:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://labix.org/mocker", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://labix.org/mocker"}]}, {"code": "<pre>\n<code>\n from mocker import Mocker\nfrom StringIO import StringIO\nimport __builtin__\nmocker = Mocker()\nsourceFile = 'myTestFile.txt'\n__builtin__.open = mocker.mock()\n__builtin__.open(sourceFile)\nmocker.result(StringIO('this,is,a,test,file'))\n\n&lt;the rest of your test setup goes here&gt;\n\nmocker.replay()\n\nParseCsvFile(sourceFile)\n\nmocker.restore()\nmocker.verify()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Incidentaly the reason I went with Mocker is because I was testing a function which used open to read a file, and then used open again to overwrite the same file with new data.", "What I needed to be able to do was test the case where the initial file didn't exist, so set up a mock, that threw an IOError the first time, and then worked the second time.", "The setup for which looked like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from mocker import Mocker\nimport __builtin__\n\nmocker = Mocker()\n\nmockFileObject = mocker.mock()\n__builtin__.open = mocker.mock()\n\n__builtin__.open('previousState.pkl', 'r') \nmocker.throw(IOError('Boom'))\n\n__builtin__.open('previousState.pkl','w') \nmocker.result(mockFileObject)\n\n&lt;rest of test setup &gt;\n\nmocker.replay()\n\n&lt;test&gt;\n\nmocker.restore() #required to restore the open method\nmocker.verify()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Hope this helps!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]