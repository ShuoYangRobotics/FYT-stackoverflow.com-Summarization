[[{"text": ["Try to use this code in the top of your views.py"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #-*- coding: utf-8 -*-\n...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's my test code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #-*- coding: utf-8 -*-                                      \nclass Wrap:                                          \n    def __init__(self, s): self.s = s\n    def __repr__(self): return repr(self.s)    \n    def __unicode__(self): return unicode(self.s)\n    def __str__(self): return str(self.s)\n\ns = 'hello'  # a plaintext string\nu = '\u00c5\u00c4\u00d6\u00d6'.decode('utf-8') \nl = [s,u]\ntest0 = unicode(repr(l))\ntest1 = 'string %s' % l\ntest2 = u'unicode %s' % l\n</code>\n</pre>\n", "senID": 1}, {"text": ["The above works fine when you run it.", "However, if you change the declaration of repr to:\n        def repr(self): return unicode(self.s)"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "repr", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "repr", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Then it aborts with:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n Traceback (most recent call last):\n  File \"mytest.py\", line 13, in &lt;module&gt; unicode(l)\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 0-3:\n   ordinal not in range(128)\n</code>\n</pre>\n", "senID": 4}, {"text": ["So it looks like someone in the object hierarchy has a repr() implementation which is incorrectly returning a unicode string instead of a normal string.", "As someone else mentioned, when you do a format string like"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n 'format %s' % mylist\n</code>\n</pre>\n", "senID": 6}, {"text": ["and mylist is a sequence, python automatically calls repr() on it rather than unicode() (since there is no \"correct\" way to represent a list as a unicode string)."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["It may be django that's at fault here, or maybe you've implemented __repr__ incorrectly in one of your models."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "__repr__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I don't understand what it is you don't understand, if you see what I mean.", "Your middle paragraph: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["explains exactly what is going on - outputting a list isn't the same as printing all its elements, because under the hood all it does is call repr() on each element in the list.", "Rather than outputting the raw list, you could log a list comprehension which calls unicode on each element, which would fix it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I can't reproduce your problem with a simple test:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nPython 2.6.4 (r264:75706, Dec  7 2009, 18:45:15) \n[GCC 4.4.1] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import logging\n>>> group = u'Lule\u00e5'\n>>> logging.warning('Group: %s', group)\nWARNING:root:Group: Lule\u00e5\n>>> logging.warning(u'Group: %s', group)\nWARNING:root:Group: Lule\u00e5\n>>>\n</pre>\n", "senID": 1}, {"text": ["So, as Daniel says, there is probably something which is not proper Unicode in what you're passing to logging."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Also, I don't know what handlers you're using, but make sure if there are file handlers that you explicitly specify the output encoding to use, and if there are stream handlers you also wrap any output stream which needs it with an encoding wrapper such as is provided by the codecs module (and pass the wrapped stream to logging)."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "codecs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I ended following advice as answered and going over all code and doing list comprehension or similar when trying to log a set/list/dict/django queryset.", "So adapting and adding things like this solved it for me:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n logging.debug(u\"new groups: %s\" % [unicode(g) for g in list_of_groups])\n</code>\n</pre>\n", "senID": 1}, {"text": ["So now all I have to do is remember never ever to forget to do this ;-)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["have you tried manually making any result unicode?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n logging.debug(u'new groups %s' % unicode(list_of_groups(\"UTF-8\"))\n</code>\n</pre>\n", "senID": 1}]]