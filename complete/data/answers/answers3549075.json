[[{"text": ["There are two issues in your regex:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I tried on Notepad++, and I got this :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n .*$\n</code>\n</pre>\n", "senID": 1}, {"text": ["And activate the multiline option : "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["re.MULTILINE"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "re.MULTILINE", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Cheers"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Try the other way around: Split the text at sentence boundaries."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lines = re.split(r'\\s*[!?.]\\s*', text)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If that doesn't work, add a \\ before the .."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "\\", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Something like this works:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ## pattern: Upercase, then anything that is not in (.!?), then one of them\n&gt;&gt;&gt; pat = re.compile(r'([A-Z][^\\.!?]*[\\.!?])', re.M)\n&gt;&gt;&gt; pat.findall('OMG is this a question ! Is this a sentence ? My. name is.')\n['OMG is this a question !', 'Is this a sentence ?', 'My.']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Notice how name is.", "is not in the result because it does not start with a uppercase letter. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "name is.", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Your problem comes from the use of the ^$ anchors, they work on the whole text."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "^$", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Edited: now it will work with multiline sentences too."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Edited:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; t = \"OMG is this a question ! Is this a sentence ? My\\n name is.\"\n&gt;&gt;&gt; re.findall(\"[A-Z].*?[\\.!?]\", t, re.MULTILINE | re.DOTALL )\n['OMG is this a question !', 'Is this a sentence ?', 'My\\n name is.']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Only one thing left to explain - re.DOTALL makes .", "match newline as described here"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "re.DOTALL", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#re.DOTALL"}]}], [{"text": ["You can try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n p = open('a')\nprocess = p.read()\nprint process\nregexMatch = re.findall('[^.!?]+[.!?]',process)\nprint regexMatch\np.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["The regex used here is [^.!?]+[.!?", "] which tries to match one or more non-sentence delimiter followed by a sentence delimiter."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[^.!?]+[.!?]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]]