[[{"text": ["From This other SO question there's a great implementation example that simplifies your existing code.", "How about:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "This other SO question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/5021041/are-there-any-gotchas-with-this-python-pattern"}]}, {"code": "<pre>\n<code>\n class AttributeDict(dict): \n    __getattr__ = dict.__getitem__\n    __setattr__ = dict.__setitem__\n</code>\n</pre>\n", "senID": 1}, {"text": ["Much more concise and doesn't leave any room for extra cruft getting into your __getattr__ and __setattr__ functions in the future. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "__getattr__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__setattr__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["It doesn't work in generality.", "Not all valid dict keys make addressable attributes (\"the key\").", "So, you'll need to be careful."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python objects are all basically dictionaries.", "So I doubt there is much performance or other penalty."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["tuples can be used dict keys.", "How would you access tuple in your construct?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also, namedtuple is a convenient structure which can provide values via the attribute access."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "namedtuple", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#collections.namedtuple"}]}], [{"text": ["You can have all legal string characters as part of the key if you use array notation.", "For example, obj['!#$%^&amp;*()_']"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "obj['!#$%^&amp;*()_']", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["What if you wanted a key which was a method, such as __eq__ or __getattr__?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__eq__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__getattr__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["And you wouldn't be able to have an entry that didn't start with a letter, so using 0343853 as a key is out."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "0343853", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["And what if you didn't want to use a string?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["No need to write your own as\nsetattr() and getattr() already exist."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "setattr()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#setattr"}]}, {"text": ["The advantage of class objects probably comes into play in class definition and inheritance."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]