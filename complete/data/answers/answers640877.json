[[{"text": ["TG2 takes Pylons and changes some defaults - object dispatching instead of Routes, and Genshi instead of Mako.", "They believe there's only one way to do it, so apps can rely on the same API for any TurboGears website."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "there's only one way to do it", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/TOOWTDI"}]}, {"text": ["Similarities"], "childNum": 0, "tag": "h2", "senID": 1, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "TG2 and Django both distinguish between websites and components, so you'll eventually see ", "tag": "none", "senID": 2}]}, {"text": ["Differences"], "childNum": 0, "tag": "h2", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Django uses its own handlers for HTTP, routing, templating, and persistence.", "Django also has stellar documentation and an established community."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["TurboGears defaults to best-of-breed libraries, which apparently are Paste, object dispatching, Genshi, and SqlAlchemy.", "This philosophy produces a better all-round toolset, but at the risk of instability - because it means throwing away backwards compatibility if and when better libraries appear."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "Paste", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pythonpaste.org/"}, {"text": "Genshi", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://genshi.edgewall.org/"}, {"text": "SqlAlchemy", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/"}]}]}], [{"text": ["TG2 has several advantages that I think are important: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 8, "lis": [{"text": "Multi-database support", "tag": "none", "senID": 1}, {"text": "sharding/data partitioning support", "tag": "none", "senID": 2}, {"text": "longstanding support for aggregates, multi-column primary keys", "tag": "none", "senID": 3}, {"text": "a transaction system that handles multi-database transactions for you", "tag": "none", "senID": 4}, {"text": "an admin system that works with all of the above", "tag": "none", "senID": 5}, {"text": "out of the box support for reusable template snipits", "tag": "none", "senID": 6}, {"text": "an easy method for creating reusable template tag-libraries", "tag": "none", "senID": 7}, {"text": "more flexibility in using non-standard components", "tag": "none", "senID": 8}]}, {"text": ["There are more, but I think it's also important to know that Django has some advantages over TG2: "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Larger, community, more active IRC channel", "tag": "none", "senID": 10}, {"text": "more re-usable app-components", "tag": "none", "senID": 11}, {"text": "a bit more developed documentation", "tag": "none", "senID": 12}]}, {"text": ["All of this means that it's a bit easier to get started in Django than TG2, but I personally think the added power and flexibility that you get is worth it.", "But your needs may always be different. "], "childNum": 0, "tag": "p", "senID": 13, "childList": []}], [{"text": ["Pros."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": "SQLAlchemy > django ORM", "tag": "none", "senID": 1}, {"text": "Multiple template languages out of the box (genshi,mako,jinja2)", "tag": "none", "senID": 2}, {"text": "more WSGI friendly", "tag": "none", "senID": 3}, {"text": "Object Dispatch > routes > regexp routing. You can get the first 2 with TG2", "tag": "none", "senID": 4}, {"text": "Almost all components are optional you can keep the core and use any ORM, template, auth library, etc.", "tag": "none", "senID": 5}, {"text": "Sprox > django forms", "tag": "none", "senID": 6}]}, {"text": ["Cons.", "- Admin is more basic (no inline objects yet!", ")\n - less third party apps\n - \"app\" system still in the making.", "- given it's modularity you need to read documentation from different sources (SQLAlchemy, Genshi or Mako, repoze.who, Pylons, etc."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Besides what Nikhil gave in his answer, I think another minor difference is that Turbogears provdes some support for javascript widgets and integration with Mochikit."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Mochikit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mochikit.com/"}]}, {"text": ["Whereas Django steadfastly remains javascript framework neutral."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["(At least this was true with older versions of Turbogears... this might have changed with TG2)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edit: I just went over TG2 documentation and see that it did indeed change.", "Turbogears now uses ToscaWidgets which can use jQuery, ExtJS, Dojo, etc.", "underneath.", "This nicely makes it more framework neutral while still providing nice javascript widgets."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["This strikes me as a pro for Turbogears if you don't have any javascript experience and a pro for Django if you are writing a lot of specialized javascript."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "pro", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "pro", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["One of the most important questions is not just what technical features this platform provides or that platform provides, but the driving philosophy of the open source project and the nature of the community supporting it.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I've got no dog in this fight myself, but I found Mark Ramm's talk at DjangoCon 2008 to be very interesting on this point (Google will yield no end of subsequent discussion, no doubt)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Mark Ramm's talk at DjangoCon 2008", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.youtube.com/watch?v=fipFKyW2FA4&feature=PlayList&p=D415FAF806EC47A1&index=12"}]}], [{"text": ["I was struggling with the same question months ago and decided for Turbogears 2, and my reasoning was simple.", "\"I'm new to python, I want to learn it not just for web-projects but as a substitute to php for scripting small helpers\""], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Turbogears 2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "I'm new to python, I want to learn it not just for web-projects but as a substitute to php for scripting small helpers", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["What I didn't like about Django, to me looks like a \"close platform\".", "ORM, Template system, sessions, etc they all are Django's"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["On the other hand, Turbogears 2 uses already known open platforms and just glued them, just like Appfuse does it for Java"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Appfuse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://appfuse.org"}]}, {"text": ["With TurboGears 2 I learn SQLAlchemy that I can use later for small python scripts, or from the python shell to solve common tasks."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Main drawbacks are the lack of complete documentation and error messages."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Sometimes you have to search very deep to find simple solutions, the learning curve is steep, but it pays long term.", "The error messages where to me very confusing (coming from more than 10 years in Java development).", "I had lost many hours trying to find an \"ascii encode error\" when the real problem was a module not being imported."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["That's my opinion, just remember I'm new to python and I could be wrong about many things stated here."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Because Django uses its own ORM it limits you to learn that ORM for that specific web framework.", "I think using an web framework with a more popular ORM (like SqlAlchemy which TG uses) increases your employability chances.", "Just my 2 cents .."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Last I checked, django has a very poor data implementation.", "And that's a huge weakness in my book.", "Django's orm doesn't allow me to use the power of the underlying database.", "For example I can't use compound primary keys, which are important to good db design.", "It also doesn't support more than a single database, which is not a big deal until you really need it and find that you can't do it without resorting to doing it manually.", "Lastly if you have to make changes to your database structure in a team-friendly way, you have to try to choose between a set of 3rd party migration tools."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Turbogears seems to be more architecturally sound, doing its best to integrate individual tools that are awesome in their own right.", "And because TG is more of an integrator, you're able to switch out pieces to suit your preferences.", "Don't like SQL Alchemy?", "You can use SQLObject.", "Don't like Genshi templates?", "You can use Mako or even django's, although you're not exactly stuck with the default on django either."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Time for tg2's cons:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "TG has a much smaller community, and community usually has its benefit.", "tag": "none", "senID": 3}, {"text": "Django has a much better name.  I really like that name ;-)", "tag": "none", "senID": 4}, {"text": "Django seems simpler for the beginning web developer, with pretty cool admin tools.", "tag": "none", "senID": 5}, {"text": "TG has decent documentation, but you also need to go to Genshi's site to learn Genshi, SQL Alchemy's site to learn that, etc.  Django has great docs.", "tag": "none", "senID": 6}]}, {"text": ["My 2 cents."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]]