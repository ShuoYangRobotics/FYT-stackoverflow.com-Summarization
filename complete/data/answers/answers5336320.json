[[{"text": ["Yes, you should use docstrings to make your classes and functions more friendly to other programmers:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["More: http://www.python.org/dev/peps/pep-0257/#what-is-a-docstring"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.python.org/dev/peps/pep-0257/#what-is-a-docstring", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0257/#what-is-a-docstring"}]}, {"text": ["Some editors allow you to see docstrings while typing, so it really makes work easier."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This is how dynamic languages work.", "It is not always a good thing though, especially if the documentation is poor - anyone tried to use a poorly documented python framework?", "Sometimes you have to revert to reading the source."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here are some strategies to avoid problems with duck typing:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "create a language for your problem domain", "tag": "none", "senID": 2}, {"text": "this will help you to name stuff properly", "tag": "none", "senID": 3}, {"text": "use types to represent concepts in your domain language", "tag": "none", "senID": 4}, {"text": "name function parameters using the domain language vocabulary", "tag": "none", "senID": 5}]}, {"text": ["Also, one of the most important points:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["keep data as local as possible!"], "childNum": 0, "tag": "strong", "senID": 7, "childList": []}]}, {"text": ["There should only be a few well-defined and documented types being passed around.", "Anything else should be obvious by looking at the code: Don't have weird parameter types coming from far away that you can't figure out by looking in the vicinity of the code..."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Related, (and also related to docstrings), there is a technique in python called doctests.", "Use that to document how your methods are expected to be used - and have nice unit test coverage at the same time!"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "doctests", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Um...", "There is no \"concise\" description of this.", "It's complex.", "You've designed it to be complex.", "And it requires complex documentation in the docstring."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Sorry, but complexity is -- well -- complex."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Yes, since it's a dynamically type language ;)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Read this for reference: PEP 257"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PEP 257", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0257/"}]}], [{"text": ["Yes it is.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In Python a function doesn't always have to return a variable of the same type (although your code will be more readable if your functions do always return the same type).", "That means that you can't specify a single return type for the function."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In the same way, the parameters don't always have to be the same type too."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Docstrings (and documentation in general).", "Python 3 introduces (optional) function annotations, as described in PEP 3107 (but don't leave out docstrings) "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 3107", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3107/"}]}]]