[[{"text": ["I'm a happy user of PLY.", "It is a pure-Python implementation of Lex &amp; Yacc, with lots of small niceties that make it quite Pythonic and easy to use.", "Since Lex &amp; Yacc are the most popular lexing &amp; parsing tools and are used for the most projects, PLY has the advantage of standing on giants' shoulders.", "A lot of knowledge exists online on Lex &amp; Yacc, and you can freely apply it to PLY."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PLY", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/ply/"}]}, {"text": ["PLY also has a good documentation page with some simple examples to get you started. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "documentation page", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/ply/ply.html"}]}, {"text": ["For a listing of lots of Python parsing tools, see this."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nedbatchelder.com/text/python-parsers.html"}]}], [{"text": ["For medium-complex grammars, PyParsing is brilliant.", "You can define grammars directly within Python code, no need for code generation:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyParsing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyparsing.wikispaces.com/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from pyparsing import Word, alphas\n&gt;&gt;&gt; greet = Word( alphas ) + \",\" + Word( alphas ) + \"!\" # &lt;-- grammar defined here\n&gt;&gt;&gt; hello = \"Hello, World!\"\n&gt;&gt;&gt;&gt; print hello, \"-&gt;\", greet.parseString( hello )\nHello, World! -&gt; ['Hello', ',', 'World', '!']\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Example taken from the PyParsing home page)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["With parse actions (functions that are invoked when a certain grammar rule is triggered), you can convert parses directly into abstract syntax trees, or any other representation."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["There are many helper functions that encapsulate recurring patterns, like operator hierarchies, quoted strings, nesting or C-style comments."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Here's a few things to get you started (roughly from simplest-to-most-complex, least-to-most-powerful):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://en.wikipedia.org/wiki/Recursive_descent_parser"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://en.wikipedia.org/wiki/Recursive_descent_parser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Recursive_descent_parser"}]}, {"text": ["http://en.wikipedia.org/wiki/Top-down_parsing"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://en.wikipedia.org/wiki/Top-down_parsing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Top-down_parsing"}]}, {"text": ["http://en.wikipedia.org/wiki/LL_parser"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://en.wikipedia.org/wiki/LL_parser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/LL_parser"}]}, {"text": ["http://effbot.org/zone/simple-top-down-parsing.htm"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://effbot.org/zone/simple-top-down-parsing.htm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/simple-top-down-parsing.htm"}]}, {"text": ["http://en.wikipedia.org/wiki/Bottom-up_parsing"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://en.wikipedia.org/wiki/Bottom-up_parsing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Bottom-up_parsing"}]}, {"text": ["http://en.wikipedia.org/wiki/LR_parser"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://en.wikipedia.org/wiki/LR_parser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/LR_parser"}]}, {"text": ["http://en.wikipedia.org/wiki/GLR_parser"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "http://en.wikipedia.org/wiki/GLR_parser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/GLR_parser"}]}, {"text": ["When I learned this stuff, it was in a semester-long 400-level university course.", "We did a number of assignments where we did parsing by hand; if you want to really understand what's going on under the hood, I'd recommend the same approach."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["This isn't the book I used, but it's pretty good: Principles of Compiler Design."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Principles of Compiler Design", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0201000229"}]}, {"text": ["Hopefully that's enough to get you started :)"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["Have a look at the standard module shlex and modify one copy of it to match the syntax you use for your shell, it is a good starting point"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "shlex", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-shlex.html"}]}, {"text": ["If you want all the power of a complete solution for lexing/parsing, ANTLR can generate python too."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "ANTLR", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.antlr.org/wiki/display/ANTLR3/Antlr3PythonTarget"}]}], [{"text": ["I suggest http://www.canonware.com/Parsing/, since it is pure python and you don't need to learn a grammar, but it isn't widely used, and has comparatively little documentation.", "The heavyweight is ANTLR and PyParsing.", "ANTLR can generate java and C++ parsers too, and AST walkers but you will have to learn what amounts to a new language."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.canonware.com/Parsing/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.canonware.com/Parsing/"}]}], [{"text": ["pygments is a source code syntax highlighter written in python.", "It has lexers and formatters, and may be interesting to peek at the source."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pygments", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pygments.org/"}]}]]