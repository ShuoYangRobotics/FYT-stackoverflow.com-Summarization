[[{"text": ["Ok, I think this is probably as good as I will get it.", "Thanks to Abgan for sparking the idea.", "This relies on the fact that None in a slice is treated as if it were a missing parameter.", "Anyone got anything better?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def getReversedList(aList, end, start, step):\n    return aList[end:start if start!=-1 else None:step]\n</code>\n</pre>\n", "senID": 1}, {"text": ["edit: check forstart==-1, not0"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "edit: check forstart==-1, not0", "childNum": 2, "tag": "em", "pos": 0, "childList": [{"text": "start==-1", "tag": "code"}, {"text": "0", "tag": "code"}]}, {"text": "start==-1", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["This is still not ideal, because you're clobbering the usual behavior of -1.", "It seems the problem here is two overlapping definitions of what's supposed to happen.", "Whoever wins takes away otherwise valid invocations looking for the other intention."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n [ A[b] for b in range(end,start,stride) ]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Slower, however you can use negative indices, so this should work:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [ A[b] for b in range(9, -1, -1) ]\n</code>\n</pre>\n", "senID": 2}, {"text": ["I realize this isn't using slices, but thought I'd offer the solution anyway if using slices specifically for getting the result isn't a priority."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["It is error-prone to change the semantics of start and stop.", "Use None or -(len(a) + 1) instead of 0 or -1.", "The semantics is not arbitrary.", "See  Edsger W. Dijkstra's article \"Why numbering should start at zero\"."], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "start", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "stop", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "-(len(a) + 1)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "-1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "\"Why numbering should start at zero\"", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = range(10)\n&gt;&gt;&gt; start, stop, step = 4, None, -1\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; start, stop, step = 4, -(len(a) + 1), -1\n&gt;&gt;&gt; a[start:stop:step]\n[4, 3, 2, 1, 0]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = slice(start, stop, step)\n&gt;&gt;&gt; a[s]\n[4, 3, 2, 1, 0]\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I believe that the following doesn't satisfy you:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def getReversedList(aList, end, start, step):\n    if step &lt; 0 and start == 0:\n         return aList[end::step]\n    return aList[end:start:step]\n</code>\n</pre>\n", "senID": 1}, {"text": ["or does it?", ":-)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["As you say very few people fully understand everything that you can do with extended slicing, so unless you really need the extra performance I'd do it the \"obvious\" way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["rev_subset = reversed(data[start:stop])"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "rev_subset = reversed(data[start:stop])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n a[4::-1]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Python 2.6 (r26:66714, Dec  4 2008, 11:34:15) \n[GCC 4.0.1 (Apple Inc. build 5488)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; a = list(range(10))\n&gt;&gt;&gt; a\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; a[4:0:-1]\n[4, 3, 2, 1]\n&gt;&gt;&gt; a[4::-1]\n[4, 3, 2, 1, 0]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["The reason is that the second term is interpreted as \"while not index ==\".", "Leaving it out is \"while index in range\"."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Is this satisfactory?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = range(10)\n&gt;&gt;&gt; start = 0\n&gt;&gt;&gt; end = 4\n&gt;&gt;&gt; a[4:start-1 if start &gt; 0 else None:-1]\n[4, 3, 2, 1, 0]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I know this is an old question, but in case someone like me is looking for answers:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; A[5-1::-1]\n[4, 3, 2, 1, 0]\n\n&gt;&gt;&gt; A[4:1:-1]\n[4, 3, 2]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use a slice(start, stop, step) object, which is such that"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "slice(start, stop, step)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n s=slice(start, stop, step)\nprint a[s]\n</code>\n</pre>\n", "senID": 1}, {"text": ["is the same as"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print a[start : stop : step]\n</code>\n</pre>\n", "senID": 3}, {"text": ["and, moreover, you can set any of the arguments to None to indicate nothing in between the colons.", "So in the case you give, you can use slice(4, None, -1)."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "slice(4, None, -1)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]