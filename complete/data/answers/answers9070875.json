[[{"text": ["Use sets instead of lists, which gives easy access to set operations, such as subtraction:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n set1 = set(q_str)\nset2 = set(stop_arr)\n\nset3 = set1 - set2  # things which are in set1, but not in set2\n\n# or\n\nset4 = set1.difference(set2) # things which are in set1, but not in set2\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here's an example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; u = set([1,2,3,4])\n&gt;&gt;&gt; v = set([3,4,5,6])\n&gt;&gt;&gt; u - v\nset([1, 2])\n&gt;&gt;&gt; u.difference(v)\nset([1, 2])\n&gt;&gt;&gt; v.difference(u)\nset([5, 6])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["It is not entirely clear whether you wish to preserve the ordering of words in q_str.", "If you do:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "q_str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import re\nq_str = 'I am comparing 2 arrays in python. both are character arrays. the 1st array is a list of words from a query string. the second array is the list of words to be excluded from the query.'\nq_arr = re.split(r'[\\s.,;]+', q_str)\nstop_arr = set(['a', 'the', 'of', 'is', 'in', 'to', 'be', 'am', 'are', ''])\nprint [w for w in q_arr if w not in stop_arr]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This produces:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['I', 'comparing', '2', 'arrays', 'python', 'both', 'character', 'arrays', '1st',\n 'array', 'list', 'words', 'from', 'query', 'string', 'second', 'array', 'list',\n 'words', 'excluded', 'from', 'query']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["'for i in q_str' iterates over the list in your loop returning a string each time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would lose the [i] in your loop "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for word in q_str: \n   if  word in stop_arr: \n      continue \n   else: \n     sans_arr[j] = word\n     j=j+1\n</code>\n</pre>\n", "senID": 2}], [{"text": ["When you are iterating over a list with a for loop, you will get the elements of the list, not indices.", "This means that i will actually be the strings from q_str, so instead of doing if q_str[i] in stop_arr you can check if i in stop_arr.", "This also means that you want to add i to sans_arr instead of q_arr[i]."], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "q_str", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if q_str[i] in stop_arr", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "if i in stop_arr", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "sans_arr", "childNum": 0, "tag": "code", "childList": []}, {"text": "q_arr[i]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also, unless sans_arr has already been created with a certain length, you probably want to do sans_arr.append(i) instead of your current approach of setting the element at a specific index and then incrementing your current index."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "sans_arr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sans_arr.append(i)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["And since i makes more sense for an index than a word, I have renamed i in the loop to word:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "childList": []}, {"text": "word", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for word in q_str:\n    if word in stop_arr:\n        continue\n    else:\n        sans_arr.append(word)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Solution for filtering query string keys-values"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I assume q_str is the dictionary of key-value pairs from query string, stop_arr is a list with keys you do not want, and sans_arr is filtered q_str, without keys existing in stop_arr."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "q_str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "stop_arr", "childNum": 0, "tag": "code", "childList": []}, {"text": "sans_arr", "childNum": 0, "tag": "code", "childList": []}, {"text": "q_str", "childNum": 0, "tag": "code", "childList": []}, {"text": "stop_arr", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Under the above assumptions, the solution would look like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n sans_arr = {x: q_str[x] for x in q_str if x not in stop_arr}\n</code>\n</pre>\n", "senID": 3}, {"text": ["Test"], "childNum": 0, "tag": "h2", "senID": 4, "childList": []}, {"text": ["This is how it works:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; q_str = {\n    'test1': 'val1',\n    'test2': 'val2',\n    'test3': 'val3'\n    }\n&gt;&gt;&gt; stop_arr = ['test3','test4']\n&gt;&gt;&gt; sans_arr = {x: q_str[x] for x in q_str if x not in stop_arr}\n&gt;&gt;&gt; sans_arr\n{'test1': 'val1', 'test2': 'val2'}\n</code>\n</pre>\n", "senID": 6}], [{"text": ["This code generates new array with all elements of q_str that not exists in stop_arr:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "q_str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "stop_arr", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n sans_arr = [ x for x in q_str if x not in stop_arr ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Disclaimer: I don't know if q_str is an array of string because you talk about a query array."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]