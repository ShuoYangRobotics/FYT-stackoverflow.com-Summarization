[[{"text": ["There is a limit because it would take too much memory to store the complete state machine efficiently.", "I'd say that if you have more than 100 groups in your re, something is wrong either in the re itself or in the way you are using them.", "Maybe you need to split the input and work on smaller chunks or something."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["First, as others have said, there are probably good alternatives to using 100 groups.", "The re.findall method might be a useful place to start.", "If you really need more than 100 groups, the only workaround I see is to modify the core Python code.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re.findall", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["In [python-install-dir]/lib/sre_compile.py simply modify the compile() function by removing the following lines:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "[python-install-dir]/lib/sre_compile.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "compile()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n # in lib/sre_compile.py\nif pattern.groups &gt; 100:\n    raise AssertionError(\n        \"sorry, but this version only supports 100 named groups\"\n        )\n</code>\n</pre>\n", "senID": 2}, {"text": ["For a slightly more flexible version, just define a constant at the top of the sre_compile module, and have the above line compare to that constant instead of 100.  "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "sre_compile", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Funnily enough, in the (Python 2.5) source there is a comment indicating that the 100 group limit is scheduled to be removed in future versions."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Can you explain why you need more than 100 groups?", "Perhaps we can help you find an alternate solution."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I'm not sure what you're doing exactly, but try using a single group, with a lot of OR clauses inside... so (this)|(that) becomes (this|that).", "You can do clever things with the results by passing a function that does something with the particular word that is matched:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n newContents, num = cregex.subn(lambda m: replacements[m.string[m.start():m.end()]], contents)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you really need so many groups, you'll probably have to do it in stages... one pass for a dozen big groups, then another pass inside each of those groups for all the details you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I would say you could reduce the number of groups by using non-grouping parentheses, but whatever it is that you're doing seems like you want all these groupings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["in my case, i have a dictionary of n words and want to create a single regex that matches all of them.. ie: if my dictionary is"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["hello\ngoodbye"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["my regex would be: (^|\\s)hello($|\\s)|(^|\\s)goodbye($|\\s) ... it's the only way to do it, and works fine on small dictionaries, but when you have more tan 50 words, well... "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]