[[{"code": "<pre>\n<code>\n In [395]: def tester():\n     ...:     print \"Tester Called!\"\n     ...:     return [1,2,3]\n\nIn [396]: for i in tester():\n     ...:     pass\nTester Called!\n</code>\n</pre>\n", "senID": 0}, {"text": ["Seems the answer is no."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["c.f() will not get executed multiple times."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "c.f()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You didn't ask, but you might be curious about generators."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "generators", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#generators"}]}, {"text": ["Your example as a generator would be as follows:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Class C():\n  def f():\n    yield 1\n    yield 2\n    yield 3\n</code>\n</pre>\n", "senID": 3}, {"text": ["The loop where you iterate over the results would be unchanged."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["from the python docs:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/compound_stmts.html#for"}]}], [{"text": ["No it is executed once."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "executed once", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["And your method is not correctly defined.", "Should have a self argument:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class C:\n  def f(self):\n    return [1,2,3]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["It will be executed only once.", "But there will be syntax errors in your code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["class , not Class\ndef f(self), not def f()"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "class", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "def f(self)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Did you try to test it yourself?", "The answer to your question is NO."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is how you should have tested it.", "Moreover there were lot of flaws in your code.", "Check the self commented modified version below"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class C: #its class not Class and C not C()\n    def f(self): #You were missing the self argument\n        print \"in f\" #Simple Test to validate your query\n        return [1,2,3]\n\n\n&gt;&gt;&gt; c=C()\n&gt;&gt;&gt; for i in c.f():\n    print i\n\n\nin f\n1\n2\n3\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["Though this example is trivial but still I will use this as an example to explain how we can leverage the power of functional programming of Python.", "What I will try to explain is called lazy evaluation or generator functions(http://docs.python.org/glossary.html#term-generator). "], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "functional programming", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/howto/functional.html"}, {"text": "lazy evaluation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Lazy_evaluation"}]}, {"text": ["Consider the modified example"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class C: #its class not Class and C not C()\n    def f(self): #You were missing the self argument\n        print \"in f\" #Simple Test to validate your query\n        for i in [1,2,3]:\n            yield i #Generates the next value when ever it is requsted\n        return #Exits the Generator\n\n\n&gt;&gt;&gt; c=C()\n&gt;&gt;&gt; for i in c.f():\n    print i\n\n\nin f\n1\n2\n3\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["Can you spot the difference?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]