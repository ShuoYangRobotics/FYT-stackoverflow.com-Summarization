[[{"text": ["If it's OK for you, there is a Django application ready, doing exactly what you want:\nhttp://code.google.com/p/sorl-thumbnail/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/sorl-thumbnail/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/sorl-thumbnail/"}]}], [{"text": ["This is what I use in my models to save a new thumbnail if the uploaded image has changed.", "It's based of another DjangoSnippet but it I can't remember who wrote the orginal - if you know please add a comment so that I can credit them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from PIL import Image\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nimport os\nimport settings\n\nclass Photo_Ex(models.Model):\n    user = models.ForeignKey(User, blank=True, null=True)    \n    photo = models.ImageField(upload_to='photos')\n    thumbnail = models.ImageField(upload_to='profile_thumb', blank=True,\n                              null=True, editable=False)\n\n    def save(self, *args, **kwargs):\n        size = (256,256)\n        if not self.id and not self.photo:\n            return\n\n        try:\n            old_obj = Photo_Ex.objects.get(pk=self.pk)\n            old_path = old_obj.photo.path\n        except:\n            pass\n\n        thumb_update = False\n        if self.thumbnail:\n            try:\n                statinfo1 = os.stat(self.photo.path)\n                statinfo2 = os.stat(self.thumbnail.path)\n                if statinfo1 &gt; statinfo2:\n                    thumb_update = True\n            except:\n                thumb_update = True\n\n        pw = self.photo.width\n        ph = self.photo.height\n        nw = size[0]\n        nh = size[1]\n\n        if self.photo and not self.thumbnail or thumb_update:\n            # only do this if the image needs resizing\n            if (pw, ph) != (nw, nh):\n                filename = str(self.photo.path)\n                image = Image.open(filename)\n                pr = float(pw) / float(ph)\n                nr = float(nw) / float(nh)\n\n                if image.mode not in ('L', 'RGB'):\n                    image = image.convert('RGB')\n\n                if pr &gt; nr:\n                    # photo aspect is wider than destination ratio\n                    tw = int(round(nh * pr))\n                    image = image.resize((tw, nh), Image.ANTIALIAS)\n                    l = int(round(( tw - nw ) / 2.0))\n                    image = image.crop((l, 0, l + nw, nh))\n                elif pr &lt; nr:\n                    # photo aspect is taller than destination ratio\n                    th = int(round(nw / pr))\n                    image = image.resize((nw, th), Image.ANTIALIAS)\n                    t = int(round(( th - nh ) / 2.0))\n                    image = image.crop((0, t, nw, t + nh))\n                else:\n                    # photo aspect matches the destination ratio\n                    image = image.resize(size, Image.ANTIALIAS)\n\n            image.save(self.get_thumbnail_path())\n            (a, b) = os.path.split(self.photo.name)\n            self.thumbnail = a + '/thumbs/' + b\n            super(Photo_Ex, self).save()\n            try:\n                os.remove(old_path)\n                os.remove(self.get_old_thumbnail_path(old_path))\n            except:\n                pass\n\n    def get_thumbnail_path(self):\n        (head, tail) = os.path.split(self.photo.path)\n        if not os.path.isdir(head + '/thumbs'):\n            os.mkdir(head + '/thumbs')\n        return head + '/thumbs/' + tail\n\n    def get_old_thumbnail_path(self, old_photo_path):\n        (head, tail) = os.path.split(old_photo_path)\n        return head + '/thumbs/' + tail\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Not sure about the code you sent, because I never use Models as such, but there is another method."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can implement your own FileUploadHandler for handling image file uploads.", "Example is\nhere.", "Just after line 37 (dest.close()) use thumbnail(upload_dir + upload.name) function (the one you sent)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.djangosnippets.org/snippets/1036/"}]}, {"text": ["Hope it helps you."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Tomasz Kopczuk."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["A key question is: when should the thumbnail be generated?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "when", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["If (1) I suggest you create a view that maps to url /flagthumbnail/countryid.", "The view method would then have to:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "/flagthumbnail/countryid", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Whenever you need to display a thumbnail flag, just use &lt;a href=\"/flagthumbnail/countryid\"&gt;."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "&lt;a href=\"/flagthumbnail/countryid\"&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If (2), you could connect to Django's django.db.models.signals.post_save signal and in the signal handler create and save a thumbnail file."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "django.db.models.signals.post_save", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I guess it depends on how and when your using your thumbnails."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want to create some thumbnails every time the Country is saved, you could do it like so:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from django.db import models\n\n# This is to list all the countries\n# For starters though, this will be just United Kingdom (GB)\nclass Country(models.Model):\n    name = models.CharField(max_length=120, help_text=\"Full name of country\")\n    code = models.CharField(max_length=2, help_text=\"This is the ISO 3166 2-letter country code (see: http://www.theodora.com/country_digraphs.html)\")\n    flag = models.ImageField(upload_to=\"images/uploaded/country/\", max_length=150, help_text=\"The flag image of the country.\", blank=True)\n\n    class Meta:\n        verbose_name_plural = \"Countries\"\n\n    def __unicode__(self):\n        return self.name\n\n    def save(self, force_insert=False, force_update=False):\n        resize_image(self.flag)\n        super(Country, self).save(force_insert, force_update)\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you aren't 100% sure what sizes you'll need your images, you could resize them last minute.", "I've seen this effectively done with a templatetag (I believe in a version on Pinax).", "You create a templatetag that takes the image and a size, then create and save the image of the appropriate size if you need to, or display a previously created one if it's there.", "It works pretty well."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Overriding the save method is a good option, but I'd be more tempted to use a signal in this case.", "Django signals allow you to \"listen\" to a given model type's various events; in this case, you'd be interested in the post_save event."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "signal", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/signals/"}, {"text": "post_save", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I usually subscribe to such signals in my models.py file.", "Code for you would look something like this:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "models.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from django.db.models.signals import post_save\nfrom models import Country\n\ndef resize_image(sender, **kwargs):\n    country = kwargs[\"instance\"]\n    resize_image(country.flag) # where resize_image generates a thumbnail given a Country instance\n\npost_save.connect(resize_image, sender=Country)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Ryan is correct signals are a better way to go however the advantage of the overriden save is that we can get the old and new image paths, see if the image has changed (and if it has create a new thumbnail), save the model instance and then delete the old image and thumbnail."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Remember django does not clean up the old images for you so unless you have script to check that the images/thumbnails are still in use and clean out any that are not you will leak disk space.", "(This may or may-not be a problem for you depending on image size and frequency of updates)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Remember django does not clean up the old images for you so unless you have script to check that the images/thumbnails are still in use and clean out any that are not you will leak disk space. (This may or may-not be a problem for you depending on image size and frequency of updates)", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["I'm not sure how you could do this with a post_save signal, and I don't know enough about signals (That's research for tonight!", ") to know if there is a suitable pre_save signal.", "If i find one then I'll re-write the code above to use signals as a generic pre save listner."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I also swear by Justin Driscoll's django-photologue is also great for resizing.", "It:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-photologue", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-photologue/"}]}, {"text": ["Basically it's awesome."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can give a try to:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["image headcut"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "image headcut", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/francescortiz/image"}]}, {"text": ["features:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Allows you to set the center of attention of an image... heads won't get cut anymore.", "tag": "none", "senID": 3}, {"text": "Video thumbnailing", "tag": "none", "senID": 4}, {"text": "Prevents cross-site image linking", "tag": "none", "senID": 5}, {"text": "Simple setup and usage", "tag": "none", "senID": 6}]}]]