[[{"text": ["http://docs.python.org/library/sys.html#sys.version_info"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/sys.html#sys.version_info", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sys.html#sys.version_info"}]}, {"text": ["using the sys module you can determine the version of python that is running and raise an exception or exit or whatever you like."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["UPDATE:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You could use this to call the appropriate interpreter.", "For example, set up a small script that does the checking for you, and use it in the shbang.", "It would check the python version running, and if not what you want, looks for one you want.", "Then it would run the script in that version of python (or fail if nothing good was found)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Using sys.version_info you can do a simple value test against it.", "For example if you only want to support version 2.6 or lower:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sys.version_info", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\nif sys.version_info &gt; (2,6):\n    sys.exit(\"Sorry, only we only support up to Python 2.6!\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is a bit of a messy issue during what will be a very long transition time period.", "Unfortunately, there is no fool-proof, cross-platform way to guarantee which Python version is being invoked, other than to have the Python script itself check once started.", "Many, if not most, distributions that ship Python 3 are ensuring the generic python command is aliased by default to the most recent Python 2 version while python3 is aliased to the most recent Python 3.", "Those distributions that don't should be encouraged to do so.", "But there is no guarantee that a user won't override that.", "I think the best practice available for the foreseeable future is to for packagers, distributors, and users to assume python refers to Python 2 and, where necessary, build a run-time check into the script."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "python", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "python3", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "python", "childNum": 0, "tag": "code", "pos": 5, "childList": []}]}], [{"text": ["Not quite the same situation, but the company I work for has an app that can run Python scripts (among its many features).", "After numerous support issues involving Python installations on various platforms, we decided to just install our own Python interpreter with the app.", "That way we know exactly where it is installed and what version it is.", "This approach may be too heavyweight for your needs (the Python package is only about 10% of our app's bits) but it definitely works."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Depends on how you're distributing it, I guess."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you're using a normal setup.py file to manage your distribution, have it bomb out if the user is trying to install it in Python 3. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "setup.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Once it's installed, the shebang of the console script created by (say) setuptools will likely be linked to the specific interpreter used to install it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you're doing something weird for your installation, you can in whatever installation script you're using look for python interpreters and store a choice.", "You might first check whether whatever is called \"python\" is a 2.x.", "If not, check for \"python2.7\", \"python2.6\", etc to see what's available. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["As I understand different distros will be in different locations in your drive.", "Here are some suggestions that come to mind - "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This should do it..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I believe this will do what you want, namely test for a non-specific version of Python less than 3.x.", "I don't have python3 installed, so haven't tested it with that version to make sure -- instead I used from __future__ import print_function.", "Perhaps you or someone else can verify whether it works properly in that case, too."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "from __future__ import print_function", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n    py3 = True\n    eval('type(print)')\nexcept SyntaxError:\n    py3 = False\n\n if py3:\n     ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["i.e.", "If \"print\" is a built-in function rather than a statement, as it is in python3, the eval() function will not raise an exception, meaning the code is running with a python3.x interpreter."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "eval()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]