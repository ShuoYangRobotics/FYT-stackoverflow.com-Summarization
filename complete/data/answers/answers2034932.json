[[{"text": ["I highly recommend"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It assumes you already understand programming, and walks you through examples that demonstrate the unique abilities of Python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Do the next project you intended to program with your prefered language with Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you are new to python, why not start with some simpler command line projects?", "I know you said you are not new to development, but maybe you should spend some time with the core python stuff before tacking on a GUI framework.", "Just a suggestion.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also, I would point out that Python 3+ code looks a bit different than a lot of the python 2.x code samples you will see around the internet.", "I have found Python 3 to be not the best in terms of backward compatibility.", "You might want to start out with a 2.x version of Python to get the most out of the plethora of Python tutorials on the internet, then move to Python 3 if you need it. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If python is your first dynamic lanugage you might want to play with some of it's dynamic aspects."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, using the getattr and setattr methods on objects, you could write a class that provides a fluent way of accessing elements from an XML document.", "Rather calling methods on an object with parameters like 'xml.getnode(\"a\").getnode(\"b\")' you could dynamically lookup the nodes as attributes and allow 'xml.a.b' instead.", "I thought this was very cool having come from static languages."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "getattr", "tag": "a", "pos": 0, "childList": [{"text": "getattr", "tag": "strong"}], "childNum": 1, "href": "http://docs.python.org/reference/datamodel.html#customizing-attribute-access"}, {"text": "getattr", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "setattr", "tag": "a", "pos": -1, "childList": [{"text": "setattr", "tag": "strong"}], "childNum": 1, "href": "http://docs.python.org/reference/datamodel.html#customizing-attribute-access"}, {"text": "setattr", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["Note that this won't neccessarily give you a great feel for python in general (although you'll pick up the language as you go) but it will give you a taste of what is possible in dynamic languages."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["PythonChallenge"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PythonChallenge", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonchallenge.com/"}]}, {"text": ["Code Golf"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Code Golf", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codegolf.com/"}]}, {"text": ["Google Code Jam"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Google Code Jam", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/codejam/"}]}, {"text": ["These are good ways to practice learning Python."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Might I also suggest that you consider using a different IDE."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "a different IDE", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/81584/what-ide-to-use-for-python"}]}, {"text": ["If you are interested in GUI programming, I would suggest looking into wxPython, PyWin32, easyGUI, TkInter (which is bundled with the Python distribution)"], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "wxPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.wxpython.org/"}, {"href": "http://docs.activestate.com/activepython/2.5/pywin32/PyWin32.HTML", "text": "PyWin32", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://easygui.sourceforge.net/", "text": "easyGUI", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://www.pythonware.com/library/tkinter/introduction/", "text": "TkInter", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Write a simple Text Editor."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Write a simple Text Editor.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["That was one of the projects i started when i first learned python.", "It gets you used to the GUI framework, file IO, many types, OOP, lots...", "It's something that you can grow over time as your confidence builds and it's cross platform so it's handy."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["While it is a matter of personal preference, I certainly wouldn't want to play around with a GUI framework when starting out -- I would want to get a feel for the language first by playing around with smaller snippets, such as those suggested on Code Golf.", "While getting your code to fit into the smallest number of bytes perhaps isn't the best way to learn good design, I think it's a good way to learn parts of the language.", "Certainly, just doing the tasks without necessarily trying to compact them down excessively could be helpful."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Code Golf", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codegolf.com/"}]}], [{"text": ["A project I wish someone would write: a friendly GUI that wraps around the scanner library and the PDF library, and lets the user easily scan and file documents."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It would have a toolbar with big buttons: \"scan letter\", \"scan brochure\", \"scan photo\".", "These would respectively choose high-resolution black-and-white, medium-resolution color, and high-resolution color."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The user would plop down the document and hit one of those buttons.", "Python would wake up the scanner and have it scan, and then would use Python Image Library or something to auto-detect the size of the actual scanned document and auto-crop down to minimal size."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For \"scan photo\" you would get a JPEG.", "For the others, you would get a PDF.", "And it would have an option where you could scan several pages and then select the scanned pages, and say \"group\" and it would make a single PDF out of them."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Other useful toolbar buttons would be: \"Copy Letter\", \"Copy Brochure\", \"Copy Photo\".", "These would scan and then immediately print on an appropriate output device (or just on the default output device for your first version)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If you want to go crazy, you could add an OCR function to try to recover searchable text from the scanned images, and put that in the PDF as tags or something."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Someday I will write this if nobody else does..."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]