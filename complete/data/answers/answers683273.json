[[{"text": ["First, check tgray's and Lundstr\u00f6m's advice."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then, some things you may want to know:"], "childNum": 0, "tag": "h2", "senID": 1, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": ["Python is dynamically typed, so unlike C#, you will not\ncheck type but behavior.", "You may want to google about duck\ntyping.", "It implies you do not have to deal with boxing and\nunboxing."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Python is fully object oriented, but the syntax does not\nenforce this paradigm.", "You can write Python without using\nthe word \"class\"."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The GUI library featured with Python can't compare with\nC#'s.", "Check PyQt, GTK or wxPython libraries."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "PyQt", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/PyQt"}, {"href": "http://en.wikipedia.org/wiki/WxPython", "text": "wxPython", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Python has a lot of concepts you may not be familiar with:\nlist comprehensions, generators (\"yield\" does exist in C#\nbut is not used much), decorators, metaclasses, etc.", "Don't\nbe afraid, you can program in Python without them.", "They\nare just smart tools, not mandatory."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Like in C#, the Python standard library is huge.", "Always\nlook at it when you encounter any problem.", "It is most\nlikely that someone solved it already."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Python use LATE binding and variable labels.", "It's far too\nearly for somebody starting with the language to worry\nabout it, but remember that one day you will encounter a\nbehavior with variables that SEEMS illogical, and you'll\nhave to check that.", "For the moment:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]}, {"text": ["Just remember to never do the following:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n def myfunc(my_list=[]) :\n   # bla\n</code>\n</pre>\n", "senID": 9}, {"text": ["Instead:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n def myfunc(my_list=()) :\n   my_list = list(my_list)\n</code>\n</pre>\n", "senID": 11}, {"text": ["And you'll be good.", "There is a good reason for that, but\nthat's not the point :-)"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"tag": "ul", "num": 10, "lis": [{"text": ["Python is cross platform, enjoy writing on Mac, and\nrun on Linux, if you wish."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["Python is not provided with a complex IDE (you got IDLE :-)).", "If you are a Visual Studio addict, check Glade.", "This is\nnot as advanced as Visual Studio, but it's still a good RAD."], "childNum": 3, "tag": "p", "senID": 14, "childList": [{"text": "IDLE", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/IDLE_%28Python%29"}, {"text": "Glade", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Glade_Interface_Designer"}, {"text": "RAD", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Rapid_application_development"}]}, {"text": ["If you want to develop some web application in Python,\nremember that Python is not .NET.", "You must add a web\nframework to it if you want to compare.", "I like Django."], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "Django", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Django_%28web_framework%29"}]}, {"text": ["Python does not need a huge IDE to work with.", "SciTE,\nNotepad++, IDLE, Kate, gedit...\nLightweight editors are really sufficient."], "childNum": 5, "tag": "p", "senID": 16, "childList": [{"text": "SciTE", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/SciTE"}, {"href": "http://en.wikipedia.org/wiki/Notepad%2B%2B", "text": "Notepad++", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://en.wikipedia.org/wiki/IDLE_%28Python%29", "text": "IDLE", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://en.wikipedia.org/wiki/Kate_%28text_editor%29", "text": "Kate", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://en.wikipedia.org/wiki/Gedit", "text": "gedit", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Python enforces indentation using spaces and line break,\nyou can't change that.", "You should avoid using tabs for\nindenting and choose spaces instead.", "The equivalent of\nempty bracelets {} is the keyword \"pass\"."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["Python does not enforce private vars.", "You can define a\nprivate var using \"__\" (2 underscore) at the beginning of\nthe var name, but it's still bypassable in some tricky\nways.", "Python usually assume programmers are grown adults\nthat know what they do and communicate."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"text": ["Python uses iteration.", "A lot.", "A lot of a lot.", "And so the\nitertools module is you best friend."], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"text": ["Python has no built in delegates.", "The delegate module is\nnot what you think.", "For event-driven programming, use a\nGUI lib (or code the pattern yourself, it's not that\ndifficult)."], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"text": ["Python has an interpreter: you can test almost anything,\nlive.", "It should always be running next to your text\neditor.", "Python basic interpreter is not much, try IPython\nfor something tasty."], "childNum": 1, "tag": "p", "senID": 21, "childList": [{"text": "IPython", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/IPython"}]}, {"text": ["Python is autodocumented: use docstrings in your own code\nand consult other's using \"help()\" in the python interpreter"], "childNum": 0, "tag": "p", "senID": 22, "childList": []}]}, {"text": ["Module basics :"], "childNum": 0, "tag": "h2", "senID": 23, "childList": []}, {"tag": "ul", "num": 10, "lis": [{"text": "sys: manipulate system features", "tag": "none", "senID": 24}, {"text": "os: set credential, manipulate file paths, rename, recursive file walk, etc", "tag": "none", "senID": 25}, {"text": "shutil: batch file processing (such as recursive delete)", "tag": "none", "senID": 26}, {"text": "re: regexp", "tag": "none", "senID": 27}, {"text": "urllib and urllib2: HTTP\u00a8scripting like downloading, post / get resquests, etc", "tag": "none", "senID": 28}, {"text": "datetime: manipulate date, time AND DURATION", "tag": "none", "senID": 29}, {"text": "thread: you guess it", "tag": "none", "senID": 30}, {"text": "zlib: compression", "tag": "none", "senID": 31}, {"text": "pickle: serialization", "tag": "none", "senID": 32}, {"text": "xml: parsing / Writing XML with SAX or DOM", "tag": "none", "senID": 33}]}, {"text": ["There are hundreds of modules.", "Enjoy."], "childNum": 0, "tag": "p", "senID": 34, "childList": []}, {"text": ["Some typical ways to do things in Python:"], "childNum": 0, "tag": "h2", "senID": 35, "childList": []}, {"text": ["Python coders use massively the equivalent of the foreach C#\nloop, and prefer it to any others :"], "childNum": 0, "tag": "p", "senID": 36, "childList": []}, {"text": ["Basic iterations:"], "childNum": 1, "tag": "p", "senID": 37, "childList": [{"text": "Basic iterations:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for item in collection:\n    print str(item)\n</code>\n</pre>\n", "senID": 38}, {"text": ["\"collection\" can be a string, a list, a tuple... Any\niterable: any object defining the .next() method.", "There are\na lot of iterables in Python.", "E.g: a typical Python idiom\nto read files:"], "childNum": 0, "tag": "p", "senID": 39, "childList": []}, {"code": "<pre>\n<code>\n for line in open(\"/path/to/file\") :\n    print line\n</code>\n</pre>\n", "senID": 40}, {"text": ["A shortcut to the for loop is called \"list comprehension\".", "It's a way to create an new iterable in one line:"], "childNum": 0, "tag": "p", "senID": 41, "childList": []}, {"text": ["Creating a filtered list with list comprehension:"], "childNum": 1, "tag": "p", "senID": 42, "childList": [{"text": "Creating a filtered list with list comprehension:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n my_list = [item for item in collection if condition]\n</code>\n</pre>\n", "senID": 43}, {"text": ["Creating a new list with a list comprehension:"], "childNum": 1, "tag": "p", "senID": 44, "childList": [{"text": "Creating a new list with a list comprehension:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n my_list = [int(item) * 3 for item in collection]\n</code>\n</pre>\n", "senID": 45}, {"text": ["Creating a new generator with a list comprehension:"], "childNum": 1, "tag": "p", "senID": 46, "childList": [{"text": "Creating a new generator with a list comprehension:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n my_list = (int(item) * 3 for item in collection)\n</code>\n</pre>\n", "senID": 47}, {"text": ["Same as above, but the values will be generated on the fly\nat the first iteration then lost.", "More info about it here."], "childNum": 1, "tag": "p", "senID": 48, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/231767/can-somebody-explain-me-the-python-yield-statement"}]}, {"text": ["Ordinary for loop"], "childNum": 1, "tag": "p", "senID": 49, "childList": [{"text": "Ordinary for loop", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["If you want to express a usual for loop, you can use the\nxrange() function.", "for (int i = 0; i &lt; 5; i++) becomes:"], "childNum": 0, "tag": "p", "senID": 50, "childList": []}, {"code": "<pre>\n<code>\n for i in xrange(0,5) :\n</code>\n</pre>\n", "senID": 51}, {"text": ["do while equivalent"], "childNum": 1, "tag": "p", "senID": 52, "childList": [{"text": "do while equivalent", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["There is no \"Do While\" in Python.", "I never missed it, but if\nyou have to use this logic, do the following:"], "childNum": 0, "tag": "p", "senID": 53, "childList": []}, {"code": "<pre>\n<code>\n while True : # yes, this is an infinite loop. Crazy, hu ?\n\n  # do your stuff\n\n  if condition :\n      break\n</code>\n</pre>\n", "senID": 54}, {"text": ["Swapping variables:"], "childNum": 1, "tag": "p", "senID": 55, "childList": [{"text": "Swapping variables:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a, b = b, a\n</code>\n</pre>\n", "senID": 56}, {"text": ["Multiple assignations:"], "childNum": 1, "tag": "p", "senID": 57, "childList": [{"text": "Multiple assignations:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["The above is just a result of what we call \"unpacking\" (here\napplied to a tuple).", "A simple way to explain it is that you\ncan assign each value of any sequence directly to an equal\nnumber a variables, in one row:"], "childNum": 0, "tag": "p", "senID": 58, "childList": []}, {"code": "<pre>\n<code>\n animal1, animal2, animal3, animal4 = [\"cow\", \"dog\", \"bird\", \"fish\"]\n</code>\n</pre>\n", "senID": 59}, {"text": ["This has a lot of implications.", "While iterating on a\nmultidimensional array, you normally get each sub sequence\none by one then use it, e.g :"], "childNum": 0, "tag": "p", "senID": 60, "childList": []}, {"code": "<pre>\n<code>\n agenda = [(\"steve\", \"jobs\"), (\"linus\", \"torvald\"), (\"bill\", \"gates\"),(\"jon\", \"skeet\")]\nfor person in agenda:\n    print person[0], person[1]\n</code>\n</pre>\n", "senID": 61}, {"text": ["But with unpacking, you can assign the values directly to\nvariables as well:"], "childNum": 0, "tag": "p", "senID": 62, "childList": []}, {"code": "<pre>\n<code>\n agenda = [(\"steve\", \"jobs\"), (\"linus\", \"torvald\"), (\"bill\", \"gates\"),(\"jon\", \"skeet\")]\nfor name, lastname in agenda:\n    print name, lastname\n</code>\n</pre>\n", "senID": 63}, {"text": ["And that's why if you want to get an index while iterating,\nPython coders use the following idioms (enumerate() is a\nstandard function):"], "childNum": 0, "tag": "p", "senID": 64, "childList": []}, {"code": "<pre>\n<code>\n for index, value in enumerate(sequence) :\n    print index, value\n</code>\n</pre>\n", "senID": 65}, {"text": ["Unpacking in functions calls"], "childNum": 1, "tag": "p", "senID": 66, "childList": [{"text": "Unpacking in functions calls", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["This is advanced use, you can skip if it bothers you."], "childNum": 0, "tag": "p", "senID": 67, "childList": []}, {"text": ["You can unpack values using the sign \"*\" to use a sequence\ndirectly in a function call.", "E.g:"], "childNum": 0, "tag": "p", "senID": 68, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; foo(var1, var1, var3) :\n    print var1, var2\n    print var3\n&gt;&gt;&gt; seq = (3.14, 42, \"yeah\")\n&gt;&gt;&gt; foo(*seq)\n3.14 42\nyeah\n</code>\n</pre>\n", "senID": 69}, {"text": ["There is even more than that.", "You can unpack a dictionary as\nnamed variables, and write function prototypes with *,\n** to accept an arbitrary number of arguments.", "But it not\nused enough to deserve to make this post even longer :-)."], "childNum": 2, "tag": "p", "senID": 70, "childList": [{"text": "*", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "**", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n print \"This is a %s on %s about %s\" % (\"post\", \"stackoverflow\", \"python\")\nprint \"This is a %(subject)s on %(place)s about %(about)s\" % {\"subject\" : \"post\", \"place\" : \"stackoverflow\", \"about\" : \"python\"}\n</code>\n</pre>\n", "senID": 71}, {"text": ["You can get any part of an iterable using a very concise syntax:"], "childNum": 0, "tag": "p", "senID": 72, "childList": []}, {"code": "<pre>\n<code>\n print \"blebla\"[2:4] # print \"eb\"\nlast = string[:-1] # getting last element\neven = (0,1,2,3,4,5,6,7,8,9)[::2] # getting evens only (third argument is a step)\nreversed = string[::-1] # reversing a string\n</code>\n</pre>\n", "senID": 73}, {"text": ["You can check the way you do in C#, but there are \"Pythonic\"\nways (shorter, clearer :-)):"], "childNum": 0, "tag": "p", "senID": 74, "childList": []}, {"code": "<pre>\n<code>\n if 1 in (1, 2, 3, 4) : # check en element is in a sequence\n\nif var : # check is var is true. Var == false if it's False, 0, (), [], {} or None\n\nif not var : # contrary of above\n\nif thing is var: # check if \"thing\" and \"var\" label the same content.\n\nif thing is None : # we use that one because None means nothing in Python (almost null)\n</code>\n</pre>\n", "senID": 75}, {"code": "<pre>\n<code>\n sentence = \"It's a good day to write some code\"\nprint \" \".join([word.upper() for word in sentence.split() if \"o\" in word])\n</code>\n</pre>\n", "senID": 76}, {"text": ["Output: \"GOOD TO SOME CODE\""], "childNum": 0, "tag": "p", "senID": 77, "childList": []}, {"text": ["Python coders usually don't check if something is possible.", "They are a bit like Chuck Norris.", "They do it.", "Then catch the\nexception.", "Typically, you don't check if a file exists, you\ntry to open it, and roll back if it fails:"], "childNum": 0, "tag": "p", "senID": 78, "childList": []}, {"code": "<pre>\n<code>\n try :\n    f = open(file)\nexcept IOerror :\n    print \"no file here !\"\n</code>\n</pre>\n", "senID": 79}, {"text": ["Of course Chuck Norris never uses excepts since he never fails."], "childNum": 0, "tag": "p", "senID": 80, "childList": []}, {"text": ["\"Else\" is a world of many uses in Python.", "You will find\n\"else\" after \"if\", but after \"except\" and \"for\" as well."], "childNum": 0, "tag": "p", "senID": 81, "childList": []}, {"code": "<pre>\n<code>\n for stuff in bunch :\n    # do thing\nelse :\n    # this always happens unless you hit \"break\" in the loop\n</code>\n</pre>\n", "senID": 82}, {"text": ["This works for \"while\" loop too, even if we do not use this\nloop as much."], "childNum": 0, "tag": "p", "senID": 83, "childList": []}, {"code": "<pre>\n<code>\n try :\n      # a crazy stuff\n   except ToCrazyError :\n      # this happens if the crazy stuff raises a ToCrazyError Exception\n   else :\n      # this will happen if there is no error so you can put only one line after the \"try\" clause\n   finally :\n      # the same as in C#\n</code>\n</pre>\n", "senID": 84}, {"text": ["If you are curious, here is a bunch of advanced quick and\ndirty (but nice) Python snippets."], "childNum": 1, "tag": "p", "senID": 85, "childList": [{"text": "Python snippets", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sebsauvage.net/python/snyppets/index.html"}]}], [{"tag": "ul", "num": 5, "lis": [{"text": "Refrain from using classes. Use dictionaries, sets, list and tuples.", "tag": "none", "senID": 0}, {"text": "Setters and getters are forbidden.", "tag": "none", "senID": 1}, {"text": "Don't have exception handlers unless you really need to - let it crash in style.", "tag": "none", "senID": 2}, {"text": "Pylint can be your friend for more pythonish coding style.", "tag": "none", "senID": 3}, {"text": "When you're ready - check out list comprehensions, generators and lambda functions.", "tag": "none", "senID": 4}]}], [{"text": ["If you are not new to programming, I would recommend the book \"Dive into Python\" by Mark Pilgrim.", "It explains Python in a way that makes it easy to understand how Python techniques and idioms can be applied to build practical applications."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"Dive into Python\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org"}]}], [{"text": ["In case you haven't heard about it yet, Dive Into Python is a great place to start for anyone learning Python.", "It also has a bunch of Tips &amp; Tricks."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Dive Into Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org/toc/index.html"}, {"text": "Tips &amp; Tricks", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org/appendix/tips.html"}]}], [{"text": ["Start by readingThe Zen of Python"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Start by readingThe Zen of Python", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "The Zen of Python", "tag": "a"}]}, {"href": "http://www.python.org/dev/peps/pep-0020/", "text": "The Zen of Python", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["You can read it at the link above, or just type import this at the Python prompt.", "=)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "import this", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Take advantage of Python features not offered* by C#"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Take advantage of Python features not offered* by C#", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Such as duck-typing, metaclasses, list comprehension, etc."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Write simple programs just to test these features.", "You'll get used (if not addicted) to them in no time."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Look at thePython Standard Library"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Look at thePython Standard Library", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Python Standard Library", "tag": "a"}]}, {"href": "http://docs.python.org/library/", "text": "Python Standard Library", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["So you don't reinvent the wheel.", "Don't try to read the whole thing, even a quick look at the TOC could save you a lot of time."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "hr", "senID": 7}, {"text": ["* I know C# already has some of these features, but from what I can see they're either pretty new or not commonly used by C# developers.", "Please correct me if I'm wrong."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["If you are someone who is better learning a new language by taking small incremental steps then I would recommend using IronPython.", "Otherwise use regular CPython and don't do any more C# coding until you feel like you have a grasp of Python."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "IronPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython"}, {"text": "CPython", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://python.org"}]}], [{"text": ["I would suggest getting a good editor so that you don't get bitten by whitespace.", "For simplicity, I just use ActivePython's packages Link, which include an editor and all of the win32api libraries.", "They are pretty fun to get into if you have been using C#.", "The win32api in Python can be a little bit simpler.", "You don't need to do the whole DDLImport thing.", "Download ActivePython (which comes with CPython), open it up, and start entering some stuff at the console.", "You will pick it up fairly easy after using C#.", "For some more interesting Python tidbits, try ActiveState code, which has all sorts of recipes, which can allow you to very simply see different things that you can do with Python."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Link", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.activestate.com/activepython/"}, {"text": "ActiveState code", "tag": "a", "pos": 7, "childList": [], "childNum": 0, "href": "http://code.activestate.com/"}]}], [{"text": ["If you have programming experience and don't feel like spending money I'd recommend How to Think Like a Computer Scientist in Python.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "How to Think Like a Computer Scientist in Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://openbookproject.net/thinkCSpy/index.xhtml"}]}], [{"text": ["And then something you can benefit from:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["IPython shell: Auto completion in the shell.", "It does batch operations, adds a ton of features, logging and such.", ">>> Play with the shell - always!"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "IPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/IPython"}]}, {"text": ["easy_install / pip: So nice and an easy way to install a 3rd party Python application."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pip", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/pip"}]}], [{"text": ["I'm pretty much in your shoes too, still using c# for most of my work but using python more and more for other projects."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["@e-satis probably knows python inside-out and all his advice is top-notch.", "From my point of view what made the biggest difference to me was the following:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Get back into functional.", "not necesarily spaghetti code, but learning that not everything has to be in an object, nor should it be."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The interpreter.", "It's like the immediate window except 10^10 better.", "Because of how python works you don't need all the baggage and crap c# makes you put in before you can run things you can just whack in a few lines and see how things work.", "I've normally got an IDLE instance up where I just throw around snippets as I'm working out how the various bits in the language works while I'm editing my files... e.g.", "busy working out how to do a map call on a list but I'm not 100% on the lambda I should use... whack in a few lines into IDLE, see how it works and what it does."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["and finally, loving into the verbosity of python, and I don't mean that in the long winded meaning of verbosity, but as e-satis pointed out, using verbs like \"in\", \"is\", \"for\", etc."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If you did a lot of reflection work in c# you'll feel like crying when you see how simple the same stuff is in python."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Good luck with it."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]