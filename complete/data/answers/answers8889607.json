[[{"text": ["I'd simply write"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if not mystr.endswith('.py'):\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Assuming, of course, that I've understood your intent."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I would suggest you not overlook the criminally underused partition and rpartition methods.", "The advantage is that you always get a 3-tuple back, even if the text you're splitting on is not found."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "partition", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "rpartition", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n partitioned = mystr.rpartition(\".\")\nif partitioned[1] and partitioned[2] == \"py\":\n    # do something\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use the posixpath module to find the extension of a file name:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import posixpath\n&gt;&gt;&gt; posixpath.splitext('hello.py')[1]\n'.py'\n&gt;&gt;&gt; posixpath.splitext('hello')[1]\n''\n&gt;&gt;&gt; posixpath.splitext('hello.py.txt')[1]\n'.txt'\n&gt;&gt;&gt; posixpath.splitext('.ssh')[1]\n''\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Why not utilize str.rfind?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mystr = 'hello.py'\nindex = mystr.rfind('.py')\nif index &gt; 0: #found, do something\nelse: #not found, do something else\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Why can't you just check for it?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if '.py' in mystr:\n  # do foo\nelse:\n  # do bar\n</code>\n</pre>\n", "senID": 1}, {"text": ["But if I am understanding you correctly, this should work better:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if '.py' in os.path.splitext(mystr)[0]:\n  # do foo\nelse:\n  # do bar\n</code>\n</pre>\n", "senID": 3}, {"text": ["os.path.splitext() splits the filename into the filename and the extension."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "os.path.splitext()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n if \".py\" in os.path.splitext(mystr)[-1]:\n    # do\n</code>\n</pre>\n", "senID": 0}, {"text": ["os.path.splitext(mystr)[-1] will grab the \"last\" element in the list.", "In cases where there is only one element it will return that one.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So this will not throw an OutofRange exception.", "Also, os.path.splitext() will always return two objects."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "OutofRange", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "os.path.splitext()", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}]]