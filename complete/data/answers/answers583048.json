[[{"text": ["I recommend trying to stay true to 80-column, but not at any cost.", "Sometimes, like for logging messages, it just makes more sense to keep 'em long than breaking up.", "But for most cases, like complex conditions or list comprehensions, breaking up is a good idea because it will help you divide the complex logic to more understandable parts.", "It's easier to understand:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "any cost", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print sum(n for n in xrange(1000000) \n             if palindromic(n, bits_of_n) and palindromic(n, digits))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Than:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print sum(n for n in xrange(1000000) if palindromic(n, bits_of_n) and palindromic(n, digits))\n</code>\n</pre>\n", "senID": 3}, {"text": ["It may look the same to you if you've just written it, but after a few days those long lines become hard to understand."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["\"A foolish consistency is the hobgoblin of little minds, adored by little statesmen and philosophers and divines."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The important part is \"foolish\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The 80-column limit, like other parts of PEP 8 is a pretty strong suggestion.", "But, there is a limit, beyond which it could be seen as foolish consistency."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I have the indentation guides and edge line turned on in Komodo.", "That way, I know when I've run over.", "The questions are \"why?", "\" and \"is it worth fixing it?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Here are our common situations."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["logging messages.", "We try to make these easy to wrap.", "They look like this "], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "logging messages", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n logger.info( \"unique thing %s %s %s\",\n   arg1, arg2, arg3 )\n</code>\n</pre>\n", "senID": 6}, {"text": ["Django filter expressions.", "These can run on, but that's a good thing.", "We often\nknit several filters together in a row.", "But it doesn't have to be one line of code,\nmultiple lines can make it more clear what's going on.  "], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Django filter expressions", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["This is an example of functional-style programming, where a long expression is sensible.", "We avoid it, however."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Unit Test Expected Result Strings.", "These happen because we cut and paste to create the unit test code and don't spend a lot of time refactoring it.", "When it bugs us we pull the strings out into separate string variables and clean the self.assertXXX() lines up."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "Unit Test Expected Result Strings", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "self.assertXXX()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["We generally don't have long lines of code because we don't use lambdas.", "We don't strive for fluent class design.", "We don't pass lots and lots of arguments (except in a few cases).  "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["We rarely have a lot of functional-style long-winded expressions.", "When we do, we're not embarrassed to break them up and leave an intermediate result lying around.", "If we were functional purists, we might have gas with intermediate result variables, but we're not purists."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["This is a good rule to keep to a large part of the time, but don't pull your hair out over it.", "The most important thing is that stylistically your code looks readable and clean, and keeping your lines to reasonable length is part of that. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Sometimes it's nicer to let things run on for more than 80 columns, but most of the time I can write my code such that it's short and concise and fits in 80 or less.", "As some responders point out the limit of 80 is rather dated, but it's not bad to have such a limit and many people have terminals "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here are some of the things that I keep in mind when trying to restrict the length of my lines:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "is this code that I expect other people to use? If so, what's the standard that those other people and use for this type of code?", "tag": "none", "senID": 3}, {"text": "do those people have laptops, use giant fonts, or have other reasons for their screen real estate being limited?", "tag": "none", "senID": 4}, {"text": "does the code look better to me split up into multiple lines, or as one long line?", "tag": "none", "senID": 5}]}, {"text": ["This is a stylistic question, but style is really important because you want people to read and understand your code."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["It doesn't matter what year is it or what output devices you use (to some extent).", "Your code should be readable if possible by humans.", "It is hard for humans to read long lines."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "humans", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["It depends on the line's content how long it should be.", "If It is a log message then its length matters less.", "If it is a complex code then its big length won't be helping to comprehend it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Temporary variables.", "They solve almost every problem I have with long lines.", "Very occasionally, I'll need to use some extra parens (like in a longer if-statement).", "I won't make any arguments for or against 80 character limitations since that seems irrelevant."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Specifically, for a log message; instead of:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n self._log.info('Insert long message here')\n</code>\n</pre>\n", "senID": 2}, {"text": ["Use:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n msg = 'Insert long message here'\nself._log.info(msg)\n</code>\n</pre>\n", "senID": 4}, {"text": ["The cool thing about this is that it's going to be two lines no matter what, but by using good variable names,  you also make it self-documenting.", "E.g., instead of:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n obj.some_long_method_name(subtotal * (1 + tax_rate))\n</code>\n</pre>\n", "senID": 6}, {"text": ["Use:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n grand_total = subtotal * (1 + tax_rate)\nobj.some_long_method_name(grand_total)\n</code>\n</pre>\n", "senID": 8}, {"text": ["Most every long line I've seen is trying to do more than one thing and it's trivial to pull one of those things out into a temp variable.", "The primary exception is very long strings, but there's usually something you can do there too, since strings in code are often structured.", "Here's an example:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n br = mechanize.Browser()\nua = '; '.join(('Mozilla/5.0 (Macintosh', 'U', 'Intel Mac OS X 10.4',\n                'en-US', 'rv:1.9.0.6) Gecko/2009011912 Firefox/3.0.6'))\nbr.addheaders = [('User-agent', ua)]\n</code>\n</pre>\n", "senID": 10}], [{"text": ["I would suggest being willing to go beyond 80 columns.", "80 columns is a holdover from when it was a hard limit based on various output devices."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Now, I wouldn't go hog wild...set a reasonable limit, but an arbitary limit of 80 columns seems a bit overzealous."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["EDIT: Other answers are also clarifing this: it matters what you're breaking.", "Strings can more often be \"special cases\" where you may want to bend the rules a bit, for the sake of clarity.", "If your code, on the other hand, is getting long, that's a good time to look at where it is logical to break it up."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "code", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}], [{"text": ["I deal with it by not worrying about the length of my lines.", "I know that some of the lines I write are longer than 80 characters but most of them aren't."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I know that my position is not considered \"pythonic\" by many and I understand their points.", "Part of being an engineer is knowing the trade-offs for each decision and then making the decision that you think is the best."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["80 character limits?", "What year is it?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Make your code readable.", "If a long line is readable, it's fine.", "If it's hard to read, split it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For example, I tend to make long lines when there is a method call with lots of arguments, and the arguments are the normal arguments you'd expect.", "So, let's say I'm passing 10 variables around to a bunch of methods.", "If every method takes a transaction id, an order id, a user id, a credit card number, etc, and these are stored in appropriately named variables, then it's ok for the method call to appear on one line with all the variables one after another, because there are no surprises."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If, however, you are dealing with multiple transactions in one method, you need to ensure that the next programmer can see that THIS time you're using transId1, and THAT time transId2.", "In that case make sure it's clear.", "(Note: sometimes using long lines HELPS that too)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Just because a \"style guide\" says you should do something doesn't mean you have to do it.", "Some style guides are just plain wrong."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Some style guides are just plain wrong", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.google.ca/search?q=strunk%2B%26%2Bwhite%2Bsite%3Aitre.cis.upenn.edu"}]}], [{"text": ["The 80 column count is one of the few places I disagree with the Python style guide.", "I'd recommend you take a look at the audience for your code.", "If everyone you're working with uses a modern IDE on a monitor with a reasonable resolution, it's probably not worth your time.", "My monitor is cheap and has a relatively weak resolution, but I can still fit 140 columns plus scroll bars, line markers, break markers, and a separate tree-view frame on the left."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, you will probably end up following some kind of limit, even if it's not a fixed number.", "With the exception of messages and logging, long lines are hard to read.", "Lines that are broken up are also harder to read.", "Judge each situation on its own, and do what you think will make life easiest for the person coming after you."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Sticking to 80 columns is important not only for readability, but because many of us like to have narrow terminal windows so that, at the same time as we are coding, we can also see things like module documentation loaded in our web browser and an error message sitting in an xterm.", "Giving your whole screen to your IDE is a rather primitive, if not monotonous, way to use screen space."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Generally, if a line stretches to more than 80 columns it means that something is going wrong anyway: either you are trying to do too much on one line, or have allowed a section of your code to become too deeply indented.", "I rarely find myself hitting the right edge of the screen unless I am also failing to refactor what should be separate functions; name temporary results; and do other things like that will make testing and debugging much easier in the end.", "Read Linus's Kernel Coding Style guide for good points on this topic, albeit from a C perspective:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://www.kernel.org/doc/Documentation/CodingStyle"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.kernel.org/doc/Documentation/CodingStyle", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.kernel.org/doc/Documentation/CodingStyle"}]}, {"text": ["And always remember that long strings can either be broken into smaller pieces:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n print (\"When Python reads in source code\"\n       \" with string constants written\"\n       \" directly adjacent to one another\"\n       \" without any operators between\"\n       \" them, it considers them one\"\n       \" single string constant.\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["Or, if they are really long, they're generally best defined as a constant then used in your code under that abbreviated name:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n STRING_MESSAGE = \"\"\"When Python reads in source code \\\nwith string constants written directly adjacent to one \\\nanother without any operators between them, it considers \\\nthem one single string constant.\"\"\"\n\n...\nprint STRING_MESSAGE\n...\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Strings are special because they tend to be long, so break them when you need and don't worry about it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When your actual code starts bumping the 80 column mark it's a sign that you might want to break up deeply nested code into smaller logical chunks."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "code", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Pick a style you like, apply a layer of common sense, and use it consistently."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Edit: This is a relevant answer.", "Can whoever rated this down please explain why in the comments?", "That would be good netiquette and manners, it doesn't make any sense."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]