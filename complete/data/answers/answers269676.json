[[{"text": ["You want something along the following lines."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["parent.py"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "parent.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import subprocess\nc1= subprocess.Popen( [\"python\", \"child.py\", \"1\"], stdin=subprocess.PIPE, stdout=subprocess.PIPE )\nc2= subprocess.Popen( [\"python\", \"child.py\", \"2\"], stdin=subprocess.PIPE, stdout=subprocess.PIPE )\nout1, err1= c1.communicate( \"to 1: hit it!\" )\nprint \" 1:\", repr(out1)\nprint \"*1:\", repr(err1)\nout2, err2= c2.communicate( \"to 2: ready, set, go!\" )\nprint \" 2:\", repr(out2)\nprint \"*2:\", repr(err2)\nout1, err1= c1.communicate()\nprint \" 1:\", repr(out1)\nprint \"*1:\", repr(err1)\nout2, err2= c2.communicate()\nprint \" 2:\", repr(out2)\nprint \"*2:\", repr(err2)\nc1.wait()\nc2.wait()\n</code>\n</pre>\n", "senID": 2}, {"text": ["child.py"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "child.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import yourDBconnection as dbapi2\n\ndef child1():\n    print \"Child 1 start\"\n    conn= dbapi2.connect( ... )\n    c1= conn.cursor()\n    conn.begin() # turn off autocommit, start a transaction\n    ra= c1.execute( \"UPDATE A SET AC1='Achgd' WHERE AC1='AC1-1'\" )\n    print ra\n    print \"Child1\", raw_input()\n    rb= c1.execute( \"UPDATE B SET BC1='Bchgd' WHERE BC1='BC1-1'\" )\n    print rb\n    c1.close()\n    print \"Child 1 finished\"\n\ndef child2():\n    print \"Child 2 start\"\n    conn= dbapi2.connect( ... )\n    c1= conn.cursor()\n    conn.begin() # turn off autocommit, start a transaction\n    rb= c1.execute( \"UPDATE B SET BC1='Bchgd' WHERE BC1='BC1-1'\" )\n    print rb\n    print \"Child2\", raw_input()\n    ra= c1.execute( \"UPDATE A SET AC1='Achgd' WHERE AC1='AC1-1'\" )\n    print ta\n    c1.close()\n    print \"Child 2 finish\"\n\ntry:\n    if sys.argv[1] == \"1\":\n        child1()\n    else:\n        child2()\nexcept Exception, e:\n    print repr(e)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Note the symmetry.", "Each child starts out holding one resource.", "Then they attempt to get someone else's held resource.", "You can, for fun, have 3 children and 3 resources for a really vicious circle."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Note that difficulty in contriving a situation in which deadlock occurs.", "If your transactions are short -- and consistent -- deadlock is very difficult to achieve.", "Deadlock requires (a) transaction which hold locks for a long time AND (b) transactions which acquire locks in an inconsistent order.", "I have found it easiest to prevent deadlocks by keeping my transactions short and consistent."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Also note the non-determinism.", "You can't predict which child will die with a deadlock and which will continue after the other died.", "Only one of the two need to die to release needed resources for the other.", "Some RDBMS's claim that there's a rule based on number of resources held blah blah blah, but in general, you'll never know how the victim was chosen."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Because of the two writes being in a specific order, you sort of expect child 1 to die first.", "However, you can't guarantee that.", "It's not deadlock until child 2 tries to get child 1's resources -- the sequence of who acquired first may not determine who dies."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Also note that these are processes, not threads.", "Threads -- because of the Python GIL -- might be inadvertently synchronized and would require lots of calls to time.sleep( 0.001 ) to give the other thread a chance to catch up.", "Processes -- for this -- are slightly simpler because they're fully independent."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "time.sleep( 0.001 )", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I'm not familar with Python, so excuse my incorrect language If I'm saying this wrong... but open two sessions (in separate windows, or from separate Python processes - from separate boxes would work ... )  Then ... "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In Session A:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Begin Transaction \n      Insert TableA()  Values()...\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then In Session B:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n Begin Transaction\n  Insert TableB() Values()... \n  Insert TableA() Values() ...\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then go back to session A"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n Insert TableB() Values () ...\n</code>\n</pre>\n", "senID": 6}, {"text": ["You'll get a deadlock... "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Not sure if either above is correct.", "Check out this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.xaprb.com/blog/2006/08/08/how-to-deliberately-cause-a-deadlock-in-mysql/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.xaprb.com/blog/2006/08/08/how-to-deliberately-cause-a-deadlock-in-mysql/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.xaprb.com/blog/2006/08/08/how-to-deliberately-cause-a-deadlock-in-mysql/"}]}], [{"text": ["you can always run LOCK TABLE tablename from another session (mysql CLI for instance).", "That might do the trick."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It will remain locked until you release it or disconnect the session."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["@s.lott"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Looks promising but here's what I get when I run it:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 1: 'Child 1 start\\r\\n0\\r\\nChild1 to 1: hit it!\\r\\n0\\r\\nChild 1 finished\\r\\n'\n*1: None\n 2: 'Child 1 start\\r\\n0\\r\\nChild1 to 2: ready, set, go!\\r\\n0\\r\\nChild 1 finished\n\\r\\n'\n*2: None\n 1: ''\n*1: None\n 2: ''\n*2: None\n</code>\n</pre>\n", "senID": 2}, {"text": ["(I couldn't comment this on your post since there's no formatting in comments)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Here's some pseudocode for how i do it in PHP:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Script 1:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n START TRANSACTION;\nINSERT INTO table &lt;anything you want&gt;;\nSLEEP(5);\nUPDATE table SET field = 'foo';\nCOMMIT;\n</code>\n</pre>\n", "senID": 2}, {"text": ["Script 2:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n START TRANSACTION;\nUPDATE table SET field = 'foo';\nSLEEP(5);\nINSERT INTO table &lt;anything you want&gt;;\nCOMMIT;\n</code>\n</pre>\n", "senID": 4}, {"text": ["Execute script 1 and then immediately execute script 2 in another terminal.", "You'll get a deadlock if the database table already has some data in it (In other words, it starts deadlocking after the second time you try this)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Note that if mysql won't honor the SLEEP() command, use Python's equivalent in the application itself."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]