[[{"text": ["The usual way to swap to items in Python is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a, b = b, a\n</code>\n</pre>\n", "senID": 1}, {"text": ["So it would seem to me that you just do the same with an extended slice.", "It is slightly complicated because strings aren't mutable so you have to convert to a list and then back to a string, but what I'd do is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'badcfe'\n&gt;&gt;&gt; t = list(s)\n&gt;&gt;&gt; t[::2], t[1::2] = t[1::2], t[::2]\n&gt;&gt;&gt; ''.join(t)\n'abcdef'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["oneliner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'badcfe'\n&gt;&gt;&gt; ''.join([ s[x:x+2][::-1] for x in range(0, len(s), 2) ])\n'abcdef'\n</code>\n</pre>\n", "senID": 1}, {"tag": "ul", "num": 3, "lis": [{"text": "s[x:x+2] returns string slice from x to x+2; it is safe for odd len(s).", "tag": "none", "senID": 2}, {"text": "[::-1] reverses the string in Python", "tag": "none", "senID": 3}, {"text": "range(0, len(s), 2) returns 0, 2, 4, 6 ... while x &lt; len(s)", "tag": "none", "senID": 4}]}], [{"text": ["Here's one way..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = '2134'\n&gt;&gt;&gt; def swap(c, i, j):\n...  c = list(c)\n...  c[i], c[j] = c[j], c[i]\n...  return ''.join(c)\n...\n&gt;&gt;&gt; swap(s, 0, 1)\n'1234'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Loop over length of string by twos and swap:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def oddswap(st):\n    s = list(st)\n    for c in range(0,len(s),2):\n        t=s[c]\n        s[c]=s[c+1]\n        s[c+1]=t\n\n    return \"\".join(s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["giving:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s\n'foobar'\n&gt;&gt;&gt; oddswap(s)\n'ofbora'\n</code>\n</pre>\n", "senID": 3}, {"text": ["and fails on odd-length strings with an IndexError exception."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n ''.join(s[i+1]+s[i] for i in range(0, len(s), 2)) # 10.6 usec per loop\n</code>\n</pre>\n", "senID": 0}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ''.join(x+y for x, y in zip(s[1::2], s[::2])) # 10.3 usec per loop\n</code>\n</pre>\n", "senID": 2}, {"text": ["or if the string can have an odd length:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ''.join(x+y for x, y in itertools.izip_longest(s[1::2], s[::2], fillvalue=''))\n</code>\n</pre>\n", "senID": 4}, {"text": ["Note that this won't work with old versions of Python (if I'm not mistaking older than 2.5)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["The benchmark was run on python-2.7-8.fc14.1.x86_64 and a Core 2 Duo 6400 CPU with s='0123456789'*4."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "s='0123456789'*4", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Do you want the digits sorted?", "Or are you swapping odd/even indexed digits?", "Your example is totally unclear. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Sort:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n s = '2143'\np=list(s)\np.sort()\ns = \"\".join(p)\n</code>\n</pre>\n", "senID": 2}, {"text": ["s is now '1234'.", "The trick is here that list(string) breaks it into characters."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"2143658709\"\n&gt;&gt;&gt; ''.join([s[i+1] + s[i] for i in range(0, len(s), 2)])\n'1234567890'\n\n&gt;&gt;&gt; s = \"badcfe\"\n&gt;&gt;&gt; ''.join([s[i+1] + s[i] for i in range(0, len(s), 2)])\n'abcdef'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n re.sub(r'(.)(.)',r\"\\2\\1\",'abcdef1234')\n</code>\n</pre>\n", "senID": 0}, {"text": ["However re is a bit slow."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def swap(s):\n    i=iter(s)\n    while True:\n        a,b=next(i),next(i)\n        yield b\n        yield a\n\n''.join(swap(\"abcdef1234\"))\n</code>\n</pre>\n", "senID": 2}]]