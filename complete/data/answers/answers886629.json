[[{"text": ["The counter is getting out of step with the sequences you're iterating over.", "But more than that, the counter is totally unnecessary."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You've got several manual iterations of things that could be automated, and they're causing you to trip over.", "Especially, you hardly ever need to manually track a counter while iterating; Python's sequence types know how to iterate themselves."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's my re-write of the intent of the above code (in the interactive interpreter to show it working):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dates = [\"%(day)02d-05-09\" % vars() for day in range(1, 31+1)]\n&gt;&gt;&gt; date_ranges = zip(dates[:-1], dates[1:])\n&gt;&gt;&gt; for (date_begin, date_end) in date_ranges:\n...     print (date_begin, date_end)\n... \n('01-05-09', '02-05-09')\n('02-05-09', '03-05-09')\n('03-05-09', '04-05-09')\n\u2026\n('28-05-09', '29-05-09')\n('29-05-09', '30-05-09')\n('30-05-09', '31-05-09')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Just for kicks, here's the super-compact Pythonic way to write this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import izip, islice\nstr_date_list = ['%02d-05-09' % i for i in xrange(1, 32)]\nfor val_time1, val_time2 in izip(islice(str_date_list, 0, None), islice(str_date_list, 1, None)):\n    daily_user_status_list = [ &lt;whatever goes here&gt; ]\n    # more code...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The error you're seeing is because you're indexing out of range on the str_date_list list, not because you're incrementing the variable."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "str_date_list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Compare the largest value of counter that the loop prints (30) to the length of the list (len(str_date_list)).", "Since indexing starts at 0, the largest index into a list of length n is n - 1."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "counter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "30", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "len(str_date_list)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "n - 1", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You don't need to duplicate the loop iteration variable and the counter:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n my_date_list = ['01', '02', '03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']\nstr_date_list=[]\nfor item in my_date_list:\n    str_date_list.append(item+'-'+'05' + '-' +'09')\n\nfor i in xrange(len(my_date_list)-1):\n    daily_user_status_list=[]\n    print i\n    val_time1 = str_date_list[i]\n    val_time2 = str_date_list[i + 1]\n</code>\n</pre>\n", "senID": 1}], [], [{"text": ["counter += 1"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["but that isn't the problem.", "What's the error?", "Indentation error maybe?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Better written:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n str_date_list=[]\nfor n in xrange(1,32):\n    str_date_list.append(str(n).zfill(2)+'-'+'05' + '-' +'09')\n\nfor i in xrange(len(str_date_list)):\n    daily_user_status_list=[]\n    print i\n    val_time1 = str_date_list[i]\n    val_time2 = str_date_list[i + 1]\n</code>\n</pre>\n", "senID": 1}, {"tag": "ul", "num": 3, "lis": [{"text": "xrange gives us a (quite performing) iterator over natural numbers given bounds.", "tag": "none", "senID": 2}, {"text": "we use zfill to make sure there is a leading zero instead of writing them all explicitly", "tag": "none", "senID": 3}, {"text": "it's important to avoid iterating out of the array bounds!", "tag": "none", "senID": 4}]}]]