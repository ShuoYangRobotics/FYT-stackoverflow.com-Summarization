[[{"text": ["In this code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class A(object):\n    def __init__(self):\n        self.x = 'Hello'\n\n    def method_a(self, foo):\n        print self.x + ' ' + foo\n</code>\n</pre>\n", "senID": 1}, {"text": ["... the self variable represents the instance of the object itself.", "Most object-oriented languages pass this as a hidden parameter to the methods defined on an object; Python does not.", "You have to declare it explicitly.", "When you create an instance of the A class and call its methods, it will be passed automatically, as in ..."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"code": "<pre>\n<code>\n a = A()               # We do not pass any argument to the __init__ method\na.method_a('Sailor!') # We only pass a single argument\n</code>\n</pre>\n", "senID": 3}, {"text": ["The __init__ method is roughly what represents a constructor in Python.", "When you call A() Python creates an object for you, and passes it as the first parameter to the __init__ method.", "Any additional parameters (e.g., A(24, 'Hello')) will also get passed as arguments--in this case causing an exception to be raised, since the constructor isn't expecting them."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "A()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "A(24, 'Hello')", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["They are OOP constructs.", "If you are a beginner in OOP, it's going to be hard to explain them in a few sentences."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's a tutorial that introduces OOP in Python.", "It also provides some answers to your questions:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://www.voidspace.org.uk/python/articles/OOP.shtml"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.voidspace.org.uk/python/articles/OOP.shtml", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.voidspace.org.uk/python/articles/OOP.shtml"}]}], [{"text": ["Yep, you are right, these are oop constructs."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["init is the constructor for a class.", "The self parameter refers to the instance of the object (like this in C++)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class Point:\n    def __init__(self, x, y):\n        self._x = x\n        self._y = y\n</code>\n</pre>\n", "senID": 2}, {"text": ["The init method gets called when memory for the object is allocated:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n x = Point(1,2)\n</code>\n</pre>\n", "senID": 4}, {"text": ["It is important to use the self parameter inside an object's method if you want to persist the value with the object.", "If, for instance, you implement the init method like this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n class Point:\n    def __init__(self, x, y):\n        _x = x\n        _y = y\n</code>\n</pre>\n", "senID": 6}, {"text": ["Your x and y parameters would be stored in variables on the stack and would be discarded when the init method goes out of scope.", "Setting those variables as self._x sets those variables as members of the Point object (accessible for the lifetime of the object)."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["In short:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["HTH,\nAmit"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["__init__ does act like a constructor.", "You'll need to pass \"self\" to any class functions as the first argument if you want them to behave as non-static methods.", "\"self\" are instance variables for your class."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The 'self' is a reference to the class instance"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class foo:\n    def bar(self):\n            print \"hi\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now we can create an instance of foo and call the method on it, the self parameter is added by Python in this case:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n f = foo()\nf.bar()\n</code>\n</pre>\n", "senID": 3}, {"text": ["But it can be passed in as well if the method call isn't in the context of an instance of the class, the code below does the same thing"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n f = foo()\nfoo.bar(f)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Interestingly the variable name 'self' is just a convention.", "The below definition will work exactly the same.. Having said that it is very strong convention which should be followed always, but it does say something about flexible nature of the language"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "very strong convention", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "always", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n class foo:\n    def bar(s):\n            print \"hi\"\n</code>\n</pre>\n", "senID": 7}], [{"text": ["You would be correct, they are object-oriented constructs.", "Basically self is a reference (kind of like a pointer, but self is a special reference which you can't assign to) to an object, and __init__ is a function which is called to initialize the object - that is, set the values of variables etc.", "- just after memory is allocated for it."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["This may help: http://homepage.mac.com/s_lott/books/nonprog/htmlchunks/ch42.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://homepage.mac.com/s_lott/books/nonprog/htmlchunks/ch42.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://homepage.mac.com/s_lott/books/nonprog/htmlchunks/ch42.html"}]}], [{"text": ["note that self could actually be any valid python identifier.", "For example, we could just as easily write, from Chris B's example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class A(object):\n    def __init__(foo):\n        foo.x = 'Hello'\n\n    def method_a(bar, foo):\n        print bar.x + ' ' + foo\n</code>\n</pre>\n", "senID": 1}, {"text": ["and it would work exactly the same.", "It is however recommended to use self because other pythoners will recognize it more easily."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]