[[{"text": ["You might be better off creating your own class:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Shape(object):\n    def __init__(self):\n        self.shape = \"rectangle\"\n        self.color = \"green\"\n        self.fillstyle = \"hatch\"\n        # etc\n\n    def ChangeColor(self, color):\n        self.color = color\n\n    # etc\n</code>\n</pre>\n", "senID": 1}], [{"text": ["dicts are for when the order isn't important but you want store values for different names."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dicts", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["lists are ordered sequences of objects, usually of the same type and the position doesn't mean anything particular."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "lists", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["tuples are ordered sequences of objects, possibly of different types and each different position has a specific meaning."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "tuples", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I would suggest using an object class and storing all of the values/commands within that object so that you can pass it around easily.", "(Similar to what recursive said). "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "recursive", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/44743/recursive"}]}, {"text": ["However; you could also use a dictionary with the key being the object name and the values being a list containing possible commands. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It seems to me that a command could be represented as a list [] or tuple (), and so could a series of commands.", "So one possibility is that you have a list of lists of strings.", "Generally you want to use a dictionary only when you want to look up a value by key.", "For example, if you knew the name of a command (wrt a shape) and wanted to know which parameters were passed to that command, you could have a dictionary mapping from string to list."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "[]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["If you post more about how you plan to use this data, I could give a better answer."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here is a link to the Python documentation on basic data structures, which should be very helpful:  http://docs.python.org/tutorial/datastructures.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/tutorial/datastructures.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html"}]}, {"text": ["Edit: in response to first comment, do you need to store the commands or just read them from input one by one and execute them?"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["What about this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = {'Rectangle':\n        {'ChangeColor':'green','FillStyle':'hatch',\n         'Dimension1': 10, 'Dimension2':15}}\ns['Triangle'] = {'ChangeColor':'red','FillStyle':'hatch',\n         'Dimension1': 10, 'Dimension2':15, 'Dimension3':5}\n\nfor k, v in s.iteritems():\n    print k\n    for k1, v1 in v.iteritems():\n        print \"   \", k1, \"=\", v1\n</code>\n</pre>\n", "senID": 1}, {"text": ["Result:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Triangle\n    Dimension1 = 10\n    Dimension2 = 15\n    Dimension3 = 5\n    ChangeColor = red\n    FillStyle = hatch\nRectangle\n    Dimension1 = 10\n    Dimension2 = 15\n    ChangeColor = green\n    FillStyle = hatch\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I would store the commands as a list of lists, or of tuples, depending on whether or not I thought I'd modify commands.", "Note that argument unpacking in Python makes for a very simple mechanism for executing these commands, e.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Shape(object):\n    def background(self, color):\n        print \"background:\", color\n    def foreground(self, color):\n        print \"foreground:\", color\n    def rect(self, left, top, right, bottom):\n        print \"rect:\", left, top, right, bottom\n    def execute_commands(self, command_list):\n        for command in command_list:\n            if hasattr(self, command[0]):\n                getattr(self, command[0])(*command[1:])\n\n&gt;&gt;&gt; s = Shape()\n&gt;&gt;&gt; c = [('background', 'blue'), ('foreground', 'yellow'), ('rect', 10, 0, 20, 20)]\n&gt;&gt;&gt; s.execute_commands(c)\nbackground: blue\nforeground: yellow\nrect: 10 0 20 20\n</code>\n</pre>\n", "senID": 1}]]