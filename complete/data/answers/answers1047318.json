[[{"text": ["Use the pickle module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pickle", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/pickle.html"}]}, {"code": "<pre>\n<code>\n import pickle\nd = { \"abc\" : [1, 2, 3], \"qwerty\" : [4,5,6] }\nafile = open(r'C:\\d.pkl', 'wb')\npickle.dump(d, afile)\nafile.close()\n\n#reload object from file\nfile2 = open(r'C:\\d.pkl', 'rb')\nnew_d = pickle.load(file2)\nfile2.close()\n\n#print dictionary object loaded from file\nprint new_d\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Take your pick: Python Standard Library - Data Persistance.", "Which one is most appropriate can vary by what your specific needs are."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Standard Library - Data Persistance", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/persistence.html"}]}, {"text": ["pickle is probably the simplest and most capable as far as \"write an arbitrary object to a file and recover it\" goes\u2014it can automatically handle custom classes and circular references."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "pickle", "tag": "a", "pos": 0, "childList": [{"text": "pickle", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/pickle.html"}, {"text": "pickle", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For the best pickling performance (speed and space), use cPickle at HIGHEST_PROTOCOL."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "cPickle", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "HIGHEST_PROTOCOL", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Try the shelve module which will give you persistent dictionary, for example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import shelve\nd = { \"abc\" : [1, 2, 3], \"qwerty\" : [4,5,6] }\n\nshelf = shelve.open('shelf_file')\nfor key,val in d.items():\n    shelf[key] = val\n\nshelf.close()\n\n....\n\n# reopen the shelf\nshelf = shelve.open('shelf_file')\nprint shelf # =&gt; {'qwerty': [4, 5, 6], 'abc': [1, 2, 3]}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You also might want to take a look at Zope's Object Database the more complex you get:-)  Probably overkill for what you have, but it scales well and is not too hard to use."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Zope's Object Database", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.zope.org/ZODB/FrontPage"}]}], [{"text": ["If you want to save it in an easy to read JSON-like format, use repr to serialize the object and eval to deserialize it."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "repr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "eval", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Just to add to the previous suggestions, if you want the file format to be easily readable and modifiable, you can also use YAML.", "It works extremely well for nested dicts and lists, but scales for more complex data structures (i.e.", "ones involving custom objects) as well, and its big plus is that the format is readable."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "YAML", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyyaml.org/"}]}], [{"text": ["JSON has faults, but when it meets your needs, it is also:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "JSON", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://json.org/"}]}, {"tag": "ul", "num": 6, "lis": [{"text": "simple to use", "tag": "none", "senID": 1}, {"text": "included in the standard library as the ", "tag": "none", "senID": 2}, {"text": "interface somewhat similar to ", "tag": "none", "senID": 3}, {"text": "human-editable text for debugging, sharing, and version control", "tag": "none", "senID": 4}, {"text": "valid Python code", "tag": "none", "senID": 5}, {"text": "well-established on the web (if your program touches any of that domain)", "tag": "none", "senID": 6}]}]]