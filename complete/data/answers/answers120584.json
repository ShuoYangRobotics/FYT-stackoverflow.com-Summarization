[[{"text": ["This is a complete example which combines hints by other people here.", "It should render a file called test.svg from the current directory.", "It was tested on Ubuntu 10.10, python-cairo 1.8.8, python-pygame 1.9.1, python-rsvg 2.30.0."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\nimport array\nimport math\n\nimport cairo\nimport pygame\nimport rsvg\n\nWIDTH = 512\nHEIGHT = 512\n\ndata = array.array('c', chr(0) * WIDTH * HEIGHT * 4)\nsurface = cairo.ImageSurface.create_for_data(\n    data, cairo.FORMAT_ARGB32, WIDTH, HEIGHT, WIDTH * 4)\n\npygame.init()\nwindow = pygame.display.set_mode((WIDTH, HEIGHT))\nsvg = rsvg.Handle(file=\"test.svg\")\nctx = cairo.Context(surface)\nsvg.render_cairo(ctx)\n\nscreen = pygame.display.get_surface()\nimage = pygame.image.frombuffer(data.tostring(), (WIDTH, HEIGHT),\"ARGB\")\nscreen.blit(image, (0, 0)) \npygame.display.flip() \n\nclock = pygame.time.Clock()\nwhile True:\n    clock.tick(15)\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            raise SystemExit\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use Cairo (with PyCairo), which has support for rendering SVGs.", "The PyGame webpage has a HOWTO for rendering into a buffer with a Cairo, and using that buffer directly with PyGame."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Cairo", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cairographics.org/"}, {"text": "HOWTO", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.pygame.org/wiki/CairoPygame"}]}], [{"text": ["I realise this doesn't exactly answer your question, but there's a library called Squirtle that will render SVG files using either Pyglet or PyOpenGL."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Squirtle", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.supereffective.org/?p=14"}]}], [{"text": ["pygamesvg seems to do what you want (though I haven't tried it)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pygamesvg", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://paul.giannaros.org/sandbox_pygamesvg"}]}], [{"text": ["Cairo cannot render SVG out of the box.", "It seems we have to use librsvg."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Just found those two pages:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Rendering SVG with libRSVG,Python and c-types"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["How to use librsvg from Python"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}, {"text": ["Something like this should probably work (render test.svg to test.png):"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "test.svg", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "test.png", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n import cairo\nimport rsvg\n\nWIDTH, HEIGHT  = 256, 256\nsurface = cairo.ImageSurface(cairo.FORMAT_ARGB32, WIDTH, HEIGHT)\n\nctx = cairo.Context (surface)\n\nsvg = rsvg.Handle(file=\"test.svg\")\nsvg.render_cairo(ctx)\n\nsurface.write_to_png(\"test.png\")\n</code>\n</pre>\n", "senID": 5}], [{"text": ["The last comment crashed when I ran it because svg.render_cairo() is expecting a cairo context and not a cairo surface.", "I created and tested the following function and it seems to run fine on my system."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import array,cairo, pygame,rsvg\n\ndef loadsvg(filename,surface,position):\n    WIDTH = surface.get_width()\n    HEIGHT = surface.get_height()\n    data = array.array('c', chr(0) * WIDTH * HEIGHT * 4)\n    cairosurface = cairo.ImageSurface.create_for_data(data, cairo.FORMAT_ARGB32, WIDTH, HEIGHT, WIDTH * 4)\n    svg = rsvg.Handle(filename)\n    svg.render_cairo(cairo.Context(cairosurface))\n    image = pygame.image.frombuffer(data.tostring(), (WIDTH, HEIGHT),\"ARGB\")\n    surface.blit(image, position) \n\nWIDTH = 800\nHEIGHT = 600\npygame.init()\nwindow = pygame.display.set_mode((WIDTH, HEIGHT))\nscreen = pygame.display.get_surface()\n\nloadsvg(\"test.svg\",screen,(0,0))\n\npygame.display.flip() \n\nclock = pygame.time.Clock()\nwhile True:\n    clock.tick(15)\n    event = pygame.event.get()\n    for e in event:\n        if e.type == 12:\n            raise SystemExit\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The pygamesvg link appears to be broken.", "I guess Cairo + rsvg is the best bet for now."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]