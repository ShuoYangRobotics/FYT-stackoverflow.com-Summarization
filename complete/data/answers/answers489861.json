[[{"text": ["There is a cross-platform file locking module here: Portalocker"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Portalocker", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/65203/"}]}, {"text": ["Although as Kevin says, writing to a file from multiple processes at once is something you want to avoid if at all possible."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you can shoehorn your problem into a database, you could use SQLite.", "It supports concurrent access and handles its own locking."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Alright, so I ended up going with the code I wrote here, on my website.", "I can use it in the following fashion:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here, on my website", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.evanfosmark.com/2009/01/cross-platform-file-locking-support-in-python/"}]}, {"code": "<pre>\n<code>\n from filelock import FileLock\n\nwith FileLock(\"myfile.txt\"):\n    # work with the file as it is now locked\n    print(\"Lock acquired.\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["If anybody sees any problem with this, please let me know."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Coordinating access to a single file at the OS level is fraught with all kinds of issues that you probably don't want to solve."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Your best bet is have a separate process that coordinates read/write access to that file."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["i prefer lockfile \u2014 Platform-independent file locking doc here"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "doc here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://packages.python.org/lockfile/lockfile.html"}]}], [{"text": ["Locking a file is usually a platform-specific operation, so you may need to allow for the possibility of running on different operating systems.", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\n\ndef my_lock(f):\n    if os.name == \"posix\":\n        # Unix or OS X specific locking here\n    elif os.name == \"nt\":\n        # Windows specific locking here\n    else:\n        print \"Unknown operating system, lock unavailable\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Locking is platform and device specific, but generally, you have a few options:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For all these methods, you'll have to use a spin-lock (retry-after-failure) technique for acquiring and testing the lock.", "This does leave a small window for mis-synchronization, but its generally small enough to not be an major issue."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you're looking for a solution that is cross platform, then you're better off logging to another system via some other mechanism (the next best thing is the NFS technique above).  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Note that sqlite is subject to the same constraints over NFS that normal files are, so you can't write to an sqlite database on a network share and get synchronization for free."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Kernel-level file locking is an extremly complex subject, since different types of locks have very different semantic, and the main lock of unix systems (fcntl) has horrible flaws."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But I've just released a python library which deals with the issue in a very portable way.", "It can achieve shared/exclusive file record locking in a system-wide manner, and provides workaround for fcntl flaws."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Enjoy RSFile - http://bitbucket.org/pchambon/python-rock-solid-tools/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://bitbucket.org/pchambon/python-rock-solid-tools/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bitbucket.org/pchambon/python-rock-solid-tools/"}]}]]