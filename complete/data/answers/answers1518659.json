[[{"text": ["You have an empty def"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def timer():\n</code>\n</pre>\n", "senID": 1}, {"text": ["use"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def timer():\n    pass\n</code>\n</pre>\n", "senID": 3}, {"text": ["instead."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Learn about the passstatement, main is usually not part of the class."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "passstatement", "tag": "a", "pos": 0, "childList": [{"text": "pass", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/reference/simple%5Fstmts.html#the-pass-statement"}, {"text": "pass", "childNum": 0, "tag": "code", "childList": []}, {"text": "main", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["A global (module level) main() function is simpler than an Alarm.main() class method.", "Usually, main() functions come at module level."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "main()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Alarm.main()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "main()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class Alarm:\n\n    def timer():\n        pass\n\ndef main():\n    print (\"Timer has Started\")\n\nmain()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["try deindent main() and add pass to timer and define an init method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Alarm():\n\n    def __init__(self):\n        print (\"Timer has Started\")\n\n&lt;shell&gt;$  Alarm()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Your timer function is not defined.", "(And your space/tab indentation may be mixed)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See the tutorial (classes) for more details on classes."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "classes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#class-objects"}]}, {"code": "<pre>\n<code>\n class Alarm:\n\n    def timer(self):\n        pass\n    def main(self):\n        print (\"Timer has Started\")\n\nif __name__ == '__main__':\n    class_inst = Alarm()\n    class_inst.main()\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you getting into python read PEP8.", "Also, using pylint helps, it will point out indentation and many other errors you'll run across before you 'execute' your code."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "PEP8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"href": "http://www.logilab.org/857", "text": "pylint", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I think you want to use __init__ though, which is the constructor..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Alarm:\n\n    def timer(self): \n        print('timer has started')\n\n    def __init__(self): \n        print('constructor')\n        self.timer()\n\n\nx = Alarm()\n</code>\n</pre>\n", "senID": 1}, {"text": ["My example differs from the others in that I'm actually instantiating a new object."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Notes:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "specify ", "tag": "none", "senID": 4}, {"text": ["__init__"], "childNum": 0, "tag": "code", "senID": 5, "childList": []}, {"text": "invoke the class by doing variableName = className() like you would invoke a function, no ", "tag": "none", "senID": 6}, {"text": "if you have an empty function, use the ", "tag": "none", "senID": 7}]}], [{"text": ["Invoking main() will give an undefined function error, as it is a Alarm method."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "undefined function error", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["IMHO the right form you should use is the following:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Alarm:\n    def timer():\n      pass\n\n    @staticmethod\n    def main():\n      print (\"Timer has Started\")\n\nif __name__ == \"__main__\" :\n    Alarm.main()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["As others have pointed out, you have a syntax error because timer() has no body."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You don't need to use main() in python at all.", "Usually people use it to indicate that the file is the top level program and not a module to be imported, but it is just by convention"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You may also see this idiom"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def main():\n    blah blah\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Here __name__ is a special variable.", "If the file has been imported it will contain the module name, so the comparison fails and main does not run."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "__name__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For the top level program __name__ contains \"__main__\" so the main() function will be run."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "__name__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__main__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["This is useful because sometimes your module might run tests when it is loaded as a program but you don't want those test to run if you are importing it into a larger program"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["In Python, you don't need to define everything as a class.", "There's nothing to encapsulate in this code, so there's no reason to define an Alarm class.", "Just have the functions in a module."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Thanks for all the help everybody.", "I was making a little alarm/timer to remind me to get up and take a walk every now and then.", "I got most of it working, and it works great.", "Checked it against a stop watch and it works great.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import time\n\ndef timer(num):\n    seconds = num*60\n    print (num , \"minutes\", seconds , \"seconds\")\n\n    while (seconds &gt; 0):\n    \tprint (seconds, \"seconds\")\n    \ttime.sleep(1)\n    \tseconds = seconds-1\n\n    print (\"Time to get up and take a WALK!!!!\")\n    main()\n\n\ndef main():\n    number = input(\"Input time : \")\n    int(number)\n    timer(number)\n\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 1}]]