[[{"text": ["Assuming, that the whitespace can be arbitrary, there are two solutions, that come to mind:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.split(r'\\s*,\\s*', string)\n#          ^- zero or more whitespace incl. tabs and newlines\n# the r'' syntax preserves the backslash from being interpreted\n# as escape sequence\n</code>\n</pre>\n", "senID": 1}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n map(str.strip, string.split(','))\n#   ^- apply the 'strip' function (~ 'trim' in other languages) to all matches\n</code>\n</pre>\n", "senID": 3}, {"text": ["I'd go with the later.", "The advantage, if you split often in your code, is to skip the regex machine (although it won't sum up, until you split really often)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["Ha, another solution w/o regexp:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x=\"Hello, World, Nice\"\n[y.strip() for y in x.split(\",\")]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Split on ', ', with a space"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "', '", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n re.split(', ', string)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = \"Hello, World, Nice\"\n&gt;&gt;&gt; a.split(\", \")\n['Hello', 'World', 'Nice']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}, {"text": ["using re:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.split(', ',a)\n['Hello', 'World', 'Nice']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n re.split(', ', string)\n</code>\n</pre>\n", "senID": 0}, {"text": ["does what you want."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you don't have specific advanced requirement, there is really no need for re module."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"Hello, World, Nice\".split(\",\")\n['Hello', ' World', ' Nice']\n&gt;&gt;&gt; map( str.strip, \"Hello, World, Nice\".split(\",\") )\n['Hello', 'World', 'Nice']\n</code>\n</pre>\n", "senID": 1}, {"text": ["if you really insist on re."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.split('\\s*,\\s*', \"Hello, World, Nice\" )\n['Hello', 'World', 'Nice']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["A slightly more robust solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; pattern = re.compile(' *, *')\n&gt;&gt;&gt; l = \"Hello,  World , Nice\"\n&gt;&gt;&gt; pattern.split(l)\n['Hello', 'World', 'Nice']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["try this regex for split"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = \"Hello, World, Nice\"\n&gt;&gt;&gt; a.split(\"[ ,\\\\,]\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["in regex first is space and second is comma"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]