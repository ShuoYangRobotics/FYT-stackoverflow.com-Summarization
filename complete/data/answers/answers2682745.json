[[{"text": ["No there is not.", "You cannot declare a variable or value as constant.", "Just don't change it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you are in a class, the equivalent would be:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n    CONST_NAME = \"Name\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["if not, it is just"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n CONST_NAME = \"Name\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["BUt you might want to have a look at the code snippet Constants in Python by Alex Martelli."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Constants in Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/65207-constants-in-python/?in=user-97991"}]}], [{"text": ["There's no const keyword as in other languages, however it is possible to create a Property that has a \"getter function\" to read the data, but no \"setter function\" to re-write the data.", "This essentially protects the identifier from being changed."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "const", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "has a \"getter function\"", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "no \"setter function\"", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "This essentially protects the identifier from being changed.", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Here is an alternative implementation using class property:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Note that the code is far from easy for a reader wondering about constants.", "See explanation below"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Note that the code is far from easy for a reader wondering about constants. See explanation below", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def constant(f):\n    def fset(self, value):\n        raise SyntaxError\n    def fget(self):\n        return f()\n    return property(fget, fset)\n\nclass _Const(object):\n    @constant\n    def FOO():\n        return 0xBAADFACE\n    @constant\n    def BAR():\n        return 0xDEADBEEF\n\nCONST = _Const()\n\nprint CONST.FOO\n##3131964110\n\nCONST.FOO = 0\n##Traceback (most recent call last):\n##    ...\n##    CONST.FOO = 0\n##SyntaxError: None\n</code>\n</pre>\n", "senID": 3}, {"text": ["Code Explanation:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Code Explanation:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["And in some other more old-fashioned way:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["(The code is quite tricky, more explanations below)"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "(The code is quite tricky, more explanations below)", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class _Const(object):\n    @apply\n    def FOO():\n        def fset(self, value):\n            raise SyntaxError\n        def fget(self):\n            return 0xBAADFACE\n        return property(**locals())\n\nCONST = _Const()\n\nprint CONST.FOO\n##3131964110\n\nCONST.FOO = 0\n##Traceback (most recent call last):\n##    ...\n##    CONST.FOO = 0\n##SyntaxError: None\n</code>\n</pre>\n", "senID": 7}, {"text": ["Note that the @apply decorator seems to deprecated."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Note that the @apply decorator seems to deprecated.", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["In python usually instead of language enforcing something, people use naming conventions e.g __method for private and using _method for protected methods i.e.", "generally not used from outside of class but derived class may override it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So in same manner you can simply declare the constant as all caps e.g."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n MY_CONSTANT = \"one\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want that this constant never changes, you can hook into attribute access and do tricks, but IMO a simpler approach is to declare a function"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def MY_CONSTANT():\n    return \"one\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["Only problem is everywhere you will have to do MY_CONSTANT(), but again MY_CONSTANT = \"one\" is the correct way in python(usually)."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "MY_CONSTANT = \"one\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The Pythonic way of declaring \"constants\" is basically a module level variable:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n RED = 1\nGREEN = 2\nBLUE = 3\n</code>\n</pre>\n", "senID": 1}, {"text": ["And then write your classes or functions.", "Since constants are almost always integers, and they are also immutable in Python, you have a very little chance of altering it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Unless, of course, if you explicitly set RED = 2."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "RED = 2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Python dictionaries are mutable, so they don't seem like a good way to declare constants:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; constants = {\"foo\":1, \"bar\":2}\n&gt;&gt;&gt; print constants\n{'foo': 1, 'bar': 2}\n&gt;&gt;&gt; constants[\"bar\"] = 3\n&gt;&gt;&gt; print constants\n{'foo': 1, 'bar': 3}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A python dictionary is unchangeable once declared and can serve as constants."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n my_consts={\"TIMEOUT\":300, \"RETRIES\":10, \"STATE\":\"happy\"}\n\ni=301\nif i &gt; my_consts[\"TIMEOUT\"]:\n  print \"I've just timed out. Sorry folks.\"\n  print \"I tried, many times, \" + str(my_consts[\"RETRIES\"]) + \" in fact.\"\n  print \"But I am still feeling quite \" + my_consts[\"STATE\"]\n</code>\n</pre>\n", "senID": 1}]]