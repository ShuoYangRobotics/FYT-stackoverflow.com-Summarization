[[{"text": ["fork() has in fact been duplicated in Windows, but it's pretty hairy."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "has", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["See the The Cygwin Architecture, section 5.6.", "\"Process Creation\" for a description of this hack."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "The Cygwin Architecture", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.redhat.com/support/wpapers/cygnus/cygnus_cygwin/architecture.html"}]}], [{"text": ["Have a look at the process management functions in the os module.", "There are function for starting new processes in many different ways, both synchronously and asynchronously."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.org/doc/2.5/lib/os-process.html"}]}, {"text": ["I should note also that Windows doesn't provide functionality that is exactly like fork() on other systems.", "To do multiprocessing on Windows, you will need to use the threading module."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "threading", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://python.org/doc/2.5/lib/module-threading.html"}]}], [{"text": ["Use the python multiprocessing module which will work everywhere."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "multiprocessing module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html"}]}, {"text": ["Here is a IBM developerWords article that shows how to convert from os.fork() to the multiprocessing module."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "IBM developerWords article", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks/aix/library/au-multiprocessing/"}]}], [{"text": ["In addition to the process management code in the os module that Greg pointed out, you should also take a look at the threading module: http://docs.python.org/lib/module-threading.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/lib/module-threading.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-threading.html"}]}, {"code": "<pre>\n<code>\n from threading import Thread\n\ndef separate_computations(x, y):\n    print sum(x for i in range(y))  # really expensive multiplication\n\nThread(target=separate_compuations, args=[57, 83]).start()\nprint \"I'm continuing while that other function runs in another thread!\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You might also like using the processing module (http://pypi.python.org/pypi/processing).", "It has lot's of functionality for writing parallel systems with the same API as the threading module..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pypi.python.org/pypi/processing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/processing"}]}], [{"text": ["The Threading example from Eli will run the thread, but not do any of the work after that line.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'm going to look into the processing module and the subprocess module.", "I think the com method I'm running needs to be in another process, not just in another thread."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Possibly a version of spawn() for python?", "http://en.wikipedia.org/wiki/Spawn_(operating_system)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://en.wikipedia.org/wiki/Spawn_(operating_system)", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Spawn_(operating_system)"}]}]]