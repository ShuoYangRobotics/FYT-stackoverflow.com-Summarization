[[{"text": ["I can think of two (edit: three) ways to do this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["First:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def is_member(array, value):\n    try:\n        array.index(value)\n    except ValueError:\n        return False\n    else:\n        return True\n</code>\n</pre>\n", "senID": 2}, {"text": ["Second:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def is_member(array, value):\n    for item in array:\n        if item == value:\n            return True\n    return False\n</code>\n</pre>\n", "senID": 4}, {"text": ["EDIT: Also, third:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def is_member(array, value):\n    return array.count(value) &gt; 0\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Using a generator expression (note that this in operator has nothing to do with the another one)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def is_member(x, a):\n   return any(x == y for y in a)\n\n&gt;&gt;&gt; is_member(10, xrange(1000000000000000))\nTrue\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could simply just iterate over every element in the list then:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def is_member(col, a):\n    for i in xrange(len(col)):\n        if a == col[i]: return True\n    return False\n\n\n&gt;&gt; a = [1,2,3,4]\n&gt;&gt; is_member(a, 2)\nTrue\n&gt;&gt; is_member(a, 5)\nFalse\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Recursive solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def is_member(value, array):\n    if len(array) == 0:\n        return False\n    return value == array[0] or is_member(value, array[1:])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Without using the \"in\" operator:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import imap\ndef is_member( item, array ):\n    return any( imap(lambda x: x == item, array ) )\n</code>\n</pre>\n", "senID": 1}, {"text": ["which will cycle through the items of the list, one at a time, and short circuit when it hits a value that is True. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Well, there are a lot of ways to do this, of course -- but you're a little hamstrung by the prohibition of \"in\" anywhere in the code.", "Here are a few things to try."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Variations on a theme ..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def is_member(item, seq):\n    return sum(map(lambda x: x == item, seq)) &gt; 0\n\ndef is_member(item, seq):\n    return len(filter(lambda x: x != item, seq)) != len(seq)\n</code>\n</pre>\n", "senID": 2}, {"text": ["You may have heard that asking for forgiveness is better than asking for permission ..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def is_member(item, seq):\n    try:\n        seq.index(item)\n        return True\n    except:\n        return False\n</code>\n</pre>\n", "senID": 4}, {"text": ["Or something a little more functional-flavored ..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n import itertools, operator, functools\ndef is_member(item, seq):\n    not_eq = functools.partial(operator.ne, item)\n    return bool(list(itertools.dropwhile(not_eq, seq)))\n</code>\n</pre>\n", "senID": 6}, {"text": ["But, since your requirements preclude the use of the looping construct which would be most reasonable, I think the experts would recommend writing your own looping framework.", "Something like ..."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def loop(action, until):\n    while True:\n        action()\n        if until():\n            break\n\ndef is_member(item, seq):\n    seq   = seq\n    sigil = [False]\n\n    def check():\n        if seq[0] == item:\n            sigil[0] = True\n    def til():\n        seq.remove(seq[0])\n        return not len(seq)\n\n    loop(check, til)\n\n    return sigil[0]\n</code>\n</pre>\n", "senID": 8}, {"text": ["Let us know how it goes."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]]