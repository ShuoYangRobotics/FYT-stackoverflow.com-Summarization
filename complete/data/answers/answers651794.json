[[{"code": "<pre>\n<code>\n class AutoVivification(dict):\n    \"\"\"Implementation of perl's autovivification feature.\"\"\"\n    def __getitem__(self, item):\n        try:\n            return dict.__getitem__(self, item)\n        except KeyError:\n            value = self[item] = type(self)()\n            return value\n</code>\n</pre>\n", "senID": 0}, {"text": ["Testing:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a = AutoVivification()\n\na[1][2][3] = 4\na[1][3][3] = 5\na[1][2]['test'] = 6\n\nprint a\n</code>\n</pre>\n", "senID": 2}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n {1: {2: {'test': 6, 3: 4}, 3: {3: 5}}}\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If the amount of nesting you need is fixed, collections.defaultdict is wonderful."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "collections.defaultdict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["e.g.", "nesting two deep:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n myhash = collections.defaultdict(dict)\nmyhash[1][2] = 3\nmyhash[1][3] = 13\nmyhash[2][4] = 9\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want to go another level of nesting, you'll need to do something like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n myhash = collections.defaultdict(lambda : collections.defaultdict(dict))\nmyhash[1][2][3] = 4\nmyhash[1][3][3] = 5\nmyhash[1][2]['test'] = 6\n</code>\n</pre>\n", "senID": 4}, {"text": ["edit: MizardX points out that we can get full genericity with a simple function:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def makehash():\n    return collections.defaultdict(makehash)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Now we can do:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n myhash = makehash()\nmyhash[1][2] = 4\nmyhash[1][3] = 8\nmyhash[2][5][8] = 17\n# etc\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Is there a reason it needs to be a dict of dicts?", "If there's no compelling reason for that particular structure, you could simply index the dict with a tuple:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mydict = {('foo', 'bar', 'baz'):1} # Initializes dict with a key/value pair\nmydict[('foo', 'bar', 'baz')]      # Returns 1\n\nmydict[('foo', 'unbar')] = 2       # Sets a value for a new key\n</code>\n</pre>\n", "senID": 1}, {"text": ["The parentheses are required if you initialize the dict with a tuple key, but you can omit them when setting/getting values using []:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n mydict = {}                        # Initialized the dict\nmydict['foo', 'bar', 'baz'] = 1    # Sets a value\nmydict['foo', 'bar', 'baz']        # Returns 1\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I guess the literal translation would be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mydict = {'foo' : { 'bar' : { 'baz':1}}}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Calling:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mydict['foo']['bar']['baz']\n</code>\n</pre>\n", "senID": 3}, {"text": ["gives you 1."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["That looks a little gross to me, though."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["(I'm no perl guy, though, so I'm guessing at what your perl does)"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Nested dictionaries like that are (often) called a poor mans objects.", "Yes, there is an implication and it might correlate with pythons object oriented nature. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Wasn't this question just asked?", "See What is the best way to implement nested dictionaries in Python?, specifically my answer ;-)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "What is the best way to implement nested dictionaries in Python?", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/635483/what-is-the-best-way-to-implement-nested-dictionaries-in-python"}]}]]