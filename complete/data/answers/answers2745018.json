[[{"text": ["Almost there:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n var, _, value = \"VAR=value\".partition('=')\n</code>\n</pre>\n", "senID": 1}, {"text": ["_ is conventionally considered a don't-care variable."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["_ is indeed a very popular choice for \"a name which doesn't matter\" -- it's a legal name, visually unobtrusive, etc.", "However sometimes these very qualities can hinder you.", "For example, the GNU gettext module for I18N and L10N, which is part of Python's standard library, idiomatically uses _ very differently, with idioms such as...:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "gettext", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/gettext.html"}, {"text": "_", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n _ = gettext.gettext\n# ...\nprint _('This is a translatable string.')\n</code>\n</pre>\n", "senID": 1}, {"text": ["to mark and translate all the literal-string messages in the code (also exploiting the relative visual unobtrusiveness of _('...').", "Obviously any code using this module and idiom shouldn't also be using _ to mean something completely different (\"a don't care name\")."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "_('...')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "_", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["So a second useful alternative can be to devote the name unused to indicate such \"don't care\" situations in a visually more explicit way.", "Google's python style guide recommends using either _ or a prefix of unused_ -- the latter can be a bit verbose but tends to be very clear, e.g."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "unused", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "python style guide", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://google-styleguide.googlecode.com/svn/trunk/pyguide.html"}, {"text": "_", "childNum": 0, "tag": "code", "childList": []}, {"text": "prefix", "childNum": 0, "tag": "em", "childList": []}, {"text": "unused_", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n name, unused_surname, salutation = person_data\nprint \"Hello, %s %s!\" % (salutation, name)\n</code>\n</pre>\n", "senID": 4}, {"text": ["makes crystal-clear that person_data is a three-item sequence (probably a tuple) and the item you're skipping (and not using at all) is the surname (because you want to print a friendly message like \"Hello, Mr Alex!", "\" or \"Hello, Miss Piggy!", "\" ;-).", "(pylint and similar tools can warn you if you have unused variables named otherwise than _ or unused_..., and of course also warn you if you ever do use a variable named unused_something!-)."], "childNum": 6, "tag": "p", "senID": 5, "childList": [{"text": "person_data", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "pylint", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "_", "childNum": 0, "tag": "code", "childList": []}, {"text": "unused_...", "childNum": 0, "tag": "code", "childList": []}, {"text": "do", "childNum": 0, "tag": "em", "childList": []}, {"text": "unused_something", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["There isn't anything official in the language for that; you can just use any throw-away variable.", "As far as standards go, I've seen underscores used occasionally in Python and other languages.", "The only issue there is that underscore is used as an alias for gettext when localizing.", "But if you aren't doing localization, or aren't using the global-binding for it, then underscore should work fine."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "gettext", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["Really strange question, because you can do just:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n var, _, value = s.partition(sep)\n</code>\n</pre>\n", "senID": 1}, {"text": ["and don't care about _ variable, but _ is just a name as sep, as var or value.", "By the way use str.split"], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "_", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "sep", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "var", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "value", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "str.split", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; var, value = \"VAR=value\".split('=')\n&gt;&gt;&gt; var, value\n('VAR', 'value')\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Why don't you use 'VAR=value'.split('=') instead?", "That disregards the delimiter."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "'VAR=value'.split('=')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["EDIT (to accommodate Cristi's example in the comment):"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["From Diving into Python:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Diving into Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/native_data_types/joining_lists.html"}]}], [{"tag": "ul", "num": 3, "lis": [{"text": ["Python doesn't have syntax to avoid assignment in unpacking and such."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As others have mentioned, there is a convention of using _ for variables you don't care about.", "This is fairly broadly used and understood, but personally I think it is underused.", "If you say var, _, value = \"VAR=value\".partition('='), you have to know what's going on to know what the _ was and why you didn't care about it when you read the code.", "If you say var, sep, value you document at the same time.", "This isn't very important for str.partition, but I've seen _, _, name, _, city, _ = some_weird_function() before and found it less useful than if everything was unpacked to useful names. "], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "var, _, value = \"VAR=value\".partition('=')", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "_", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "var, sep, value", "childNum": 0, "tag": "code", "childList": []}, {"text": "str.partition", "childNum": 0, "tag": "code", "childList": []}, {"text": "_, _, name, _, city, _ = some_weird_function()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You could technically use str.split here if you wanted to.", "var, value = \"foo=bar=baz\".split(\"=\", 1). "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "str.split", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "var, value = \"foo=bar=baz\".split(\"=\", 1)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]}]]