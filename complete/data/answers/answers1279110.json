[[{"text": ["If your data is always formatted like this then why not split your data into 3 parts by splitting on the space."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then it's pretty trivial to remove the periods from the first element and use join to remerge the parts."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You could simply remove DOTS that don't have two [a-z] letters (or more) ahead of them:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \\.(?![a-zA-Z]{2})\n</code>\n</pre>\n", "senID": 1}, {"text": ["But that will of course also remove the first DOT from the following address:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["name.i@foo.bar"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You could fix that by doing:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n \\.(?![a-zA-Z]{2}|[^\\s@]*+@)\n</code>\n</pre>\n", "senID": 5}, {"text": ["but I'm sure there will be many more such corner cases."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["I suggest you split the string at '@' (or whatever character makes sense), do the substitution on the first part, then put the string back together.", "I think that will show the intent of the code better than a complex regexp.", "Something like this, perhaps:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string='a.b.c. test@test.com http://www.test.com'\nleft, rest = string.split(\"@\",1)\nleft = left.replace(\".\",\"\")\nresult=\"%s@%s\" % (left, rest)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The following worked for me (with thanks to Bart for his answer):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.sub('\\.(?!(\\S[^. ])|\\d)', '', s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will not remove a dot if it is the first character in a word or acronym. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["A non-regex way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; S = 'a.b.c. test@test.com http://www.test.com'\n&gt;&gt;&gt; ' '.join(w if '@' in w or ':' in w else w.replace('.', '') for w in S.split())\n'abc test@test.com http://www.test.com'\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Requires spaces to split on, though - so if you had something like commas with no spaces it could miss some."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Not as elegant as a simple re.sub(), but try this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re.sub()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import re\n\ns='a.b.c. test@test.com http://www.test.com'\nm=re.search('(.*?)(([a-zA-Z]\\.){2,})(.*)', s)\n\nif m:\n    replacement=''.join(m.group(2).split('.'))\n    s=m.group(1)+replacement+m.group(4)\n\nprint s\n</code>\n</pre>\n", "senID": 1}, {"text": ["It assumes that there's no more than one acronym per string, but you could always run it repeatedly."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]