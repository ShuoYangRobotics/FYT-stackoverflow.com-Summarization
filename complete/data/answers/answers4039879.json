[[{"text": ["Get the ending month (relative to the year and month of the start month ex: 2011 January = 13 if your start date starts on 2010 Oct) and then generate the datetimes beginning the start month and that end month like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dt1, dt2 = dateRange\nstart_month=dt1.month\nend_months=(dt2.year-dt1.year)*12 + dt2.month+1\ndates=[datetime.datetime(year=yr, month=mn, day=1) for (yr, mn) in (\n          ((m - 1) / 12 + dt1.year, (m - 1) % 12 + 1) for m in range(start_month, end_months)\n      )]\n</code>\n</pre>\n", "senID": 1}, {"text": ["if both dates are on the same year, it could also be simply written as:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n dates=[datetime.datetime(year=dt1.year, month=mn, day=1) for mn in range(dt1.month, dt2.month + 1)]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Start by defining some test cases, then you will see that the function is very simple and needs no loops"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from datetime import datetime\n\ndef diff_month(d1, d2):\n    return (d1.year - d2.year)*12 + d1.month - d2.month\n\nassert diff_month(datetime(2010,10,1), datetime(2010,9,1)) == 1\nassert diff_month(datetime(2010,10,1), datetime(2009,10,1)) == 12\nassert diff_month(datetime(2010,10,1), datetime(2009,11,1)) == 11\nassert diff_month(datetime(2010,10,1), datetime(2009,8,1)) == 14\n</code>\n</pre>\n", "senID": 1}, {"text": ["You should add some testcases to your question, as there are lots of potential corner cases to cover - there is more than one way to define the number of months between two dates"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Perhaps this works for you: http://bytes.com/topic/python/answers/803702-difference-between-two-dates"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://bytes.com/topic/python/answers/803702-difference-between-two-dates", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bytes.com/topic/python/answers/803702-difference-between-two-dates"}]}], [{"text": ["Try something like this.", "It presently includes the month if both dates happen to be in the same month."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from datetime import datetime,timedelta\n\ndef months_between(start,end):\n    months = []\n    cursor = start\n\n    while cursor &lt;= end:\n        if cursor.month not in months:\n            months.append(cursor.month)\n        cursor += timedelta(weeks=1)\n\n    return months\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output looks like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; start = datetime.now() - timedelta(days=120)\n&gt;&gt;&gt; end = datetime.now()\n&gt;&gt;&gt; months_between(start,end)\n[6, 7, 8, 9, 10]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If adding by a week, then it will approximately do work 4.35 times the work as needed.", "Why not just:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 1. get start date in array of integer, set it to i: [2008, 3, 12], \n       and change it to [2008, 3, 1]\n2. get end date in array: [2010, 10, 26]\n3. add the date to your result by parsing i\n       increment the month in i\n       if month is &gt;= 13, then set it to 1, and increment the year by 1\n   until either the year in i is &gt; year in end_date, \n           or (year in i == year in end_date and month in i &gt; month in end_date)\n</code>\n</pre>\n", "senID": 1}, {"text": ["just pseduo code for now, haven't tested, but i think the idea along the same line will work."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Assuming upperDate is always later than lowerDate and both are datetime.date objects:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if lowerDate.year == upperDate.year:\n    monthsInBetween = range( lowerDate.month + 1, upperDate.month )\nelif upperDate.year &gt; lowerDate.year:\n    monthsInBetween = range( lowerDate.month + 1, 12 )\n    for year in range( lowerDate.year + 1, upperDate.year ):\n        monthsInBetween.extend( range(1,13) )\n    monthsInBetween.extend( range( 1, upperDate.month ) )\n</code>\n</pre>\n", "senID": 1}, {"text": ["I haven't tested this thoroughly, but it looks like it should do the trick."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Define a \"month\" as 1/12 year, then do this: "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "1", "childNum": 0, "tag": "sup", "pos": 0, "childList": []}, {"text": "12", "childNum": 0, "tag": "sub", "childList": []}]}, {"code": "<pre>\n<code>\n def month_diff(d1, d2): \n    \"\"\"Return the number of months between d1 and d2, \n    such that d2 + month_diff(d1, d2) == d1\n    \"\"\"\n    diff = (12 * d1.year + d1.month) - (12 * d2.year + d2.month)\n    return diff\n</code>\n</pre>\n", "senID": 1}, {"text": ["You might try to define a month as \"a period of either 29, 28, 30 or 31 days (depending on the year)\".", "But you you do that, you have an additional problem to solve. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["While it's usually clear that June 15th + 1 month should be July 15th, it's not usually not clear if January 30th + 1 month is in February or March.", "In the latter case, you may be compelled to compute the date as February 30th, then \"correct\" it to March 2nd.", "But when you do that, you'll find that March 2nd - 1 month is clearly February 2nd.", "Ergo, reductio ad absurdum (this operation is not well defined). "], "childNum": 7, "tag": "p", "senID": 3, "childList": [{"text": "th", "childNum": 0, "tag": "sup", "pos": 0, "childList": []}, {"text": "th", "childNum": 0, "tag": "sup", "pos": 1, "childList": []}, {"text": "th", "childNum": 0, "tag": "sup", "pos": 2, "childList": []}, {"text": "th", "childNum": 0, "tag": "sup", "pos": 3, "childList": []}, {"text": "nd", "childNum": 0, "tag": "sup", "childList": []}, {"text": "nd", "childNum": 0, "tag": "sup", "childList": []}, {"text": "nd", "childNum": 0, "tag": "sup", "childList": []}]}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Shouldn't matter what order you input the dates, and it takes into account the difference in month lengths."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Here is a method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def months_between(start_dt, stop_dt):\n    month_list = []\n    total_months = 12*(stop_dt.year-start_dt.year)+(stop_dt.month-start_d.month)+1\n    if total_months &gt; 0:\n        month_list=[ datetime.date(start_dt.year+int((start_dt+i-1)/12), \n                                   ((start_dt-1+i)%12)+1,\n                                   1) for i in xrange(0,total_months) ]\n    return month_list\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is first computing the total number of months between the two dates, inclusive.", "Then it creates a list using the first date as the base and performs modula arithmetic to create the date objects."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You could use python-dateutil.", "See Python: Difference of 2 datetimes in months"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "python-dateutil", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://labix.org/python-dateutil"}, {"text": "Python: Difference of 2 datetimes in months", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/7015587/python-difference-of-2-datetimes-in-months/7015730#7015730"}]}], [{"text": ["There is a simple solution based on 360 day years, where all months have 30 days.", "It fits most use cases where, given two dates, you need to calculate the number of full months plus the remaining days."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from datetime import datetime, timedelta\n\ndef months_between(start_date, end_date):\n    #Add 1 day to end date to solve different last days of month \n    s1, e1 = start_date , end_date  + timedelta(days=1)\n    #Convert to 360 days\n    s360 = (s1.year * 12 + s1.month) * 30 + s1.day\n    e360 = (e1.year * 12 + e1.month) * 30 + e1.day\n    #Count days between the two 360 dates and return tuple (months, days)\n    return divmod(e360 - s360, 30)\n\nprint \"Counting full and half months\"\nprint months_between( datetime(2012, 01, 1), datetime(2012, 03, 31)) #3m\nprint months_between( datetime(2012, 01, 1), datetime(2012, 03, 15)) #2m 15d\nprint months_between( datetime(2012, 01, 16), datetime(2012, 03, 31)) #2m 15d\nprint months_between( datetime(2012, 01, 16), datetime(2012, 03, 15)) #2m\nprint \"Adding +1d and -1d to 31 day month\"\nprint months_between( datetime(2011, 12, 01), datetime(2011, 12, 31)) #1m 0d\nprint months_between( datetime(2011, 12, 02), datetime(2011, 12, 31)) #-1d =&gt; 29d\nprint months_between( datetime(2011, 12, 01), datetime(2011, 12, 30)) #30d =&gt; 1m\nprint \"Adding +1d and -1d to 29 day month\"\nprint months_between( datetime(2012, 02, 01), datetime(2012, 02, 29)) #1m 0d\nprint months_between( datetime(2012, 02, 02), datetime(2012, 02, 29)) #-1d =&gt; 29d\nprint months_between( datetime(2012, 02, 01), datetime(2012, 02, 28)) #28d\nprint \"Every month has 30 days - 26/M to 5/M+1 always counts 10 days\"\nprint months_between( datetime(2011, 02, 26), datetime(2011, 03, 05))\nprint months_between( datetime(2012, 02, 26), datetime(2012, 03, 05))\nprint months_between( datetime(2012, 03, 26), datetime(2012, 04, 05))\n</code>\n</pre>\n", "senID": 1}]]