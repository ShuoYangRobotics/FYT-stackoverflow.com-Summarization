[[{"text": ["I'd avoid using reduce here.", "For something so simple use sum:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sum", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n sum_review = sum(book['rw'] for book in books)\nsum_rating = sum(book['rg'] for book in books)\n</code>\n</pre>\n", "senID": 1}, {"text": ["In my opinion this simpler version doesn't need refactoring to remove redundancy.", "With just two items (rw and rg) I think it's best to just leave it as it is."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "rw", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "rg", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["zip(*iterable) is the Python way to transpose a list.", "I am not sure the readibility loss pays off, but this should work:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "zip(*iterable)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n sum_review, sum_rating = map(sum, zip(*((book[\"rw\"], book[\"rg\"]) for book in books)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["In any case, use built-in sum instead of reduce(operator.add, ....)"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "sum", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "reduce(operator.add, ....)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You should prefer clarity over optimization.", "In 3 years of using Python, I have only had to profile to discover performance bottlenecks twice.", "Your original code is clear and efficient.", "Compressing the first two lines into one hurts readability and barely impacts performance."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If I had to revise your code, it would like this:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "had", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n avg_review = sum(book['rw'] for book in books) / len(books)\navg_rating = sum(book['rg'] for book in books) / len(books)\n</code>\n</pre>\n", "senID": 2}, {"text": ["(That's five lines of code down to two with an improvement of clarity."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n sum_review, sum_rating = reduce(lambda a,b: (a[0] + b[0], a[1]+b[1]), ((book['rw'], book['rg']) for book in books), (0,0) )\nitems = len(books)\navg_review = sum_review/items\navg_rating = sum_rating/items\n</code>\n</pre>\n", "senID": 0}, {"text": ["(tested)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["By making a function, of course:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def average_value(items, key):\n  values = [x[key] for x in items]\n  return sum(items) / len(items)\n\navg_review, avg_rating = average_value(books, 'rw'), average_value(books, 'rg')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I you really want a one-liner for that, then this could do the job (untested):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sum_review, sum_rating = [reduce(add, [book[t] for book in books] for t in ('rw', 'rg')]\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, the readability is questionable..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]