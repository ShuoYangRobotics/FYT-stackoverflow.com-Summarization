[[{"text": ["Updated Generalized to maintain precision and handle unseen values:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Updated", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import decimal\nimport random\n\ndef format_number(num):\n    try:\n        dec = decimal.Decimal(num)\n    except:\n        return 'bad'\n    tup = dec.as_tuple()\n    delta = len(tup.digits) + tup.exponent\n    digits = ''.join(str(d) for d in tup.digits)\n    if delta &lt;= 0:\n        zeros = abs(tup.exponent) - len(tup.digits)\n        val = '0.' + ('0'*zeros) + digits\n    else:\n        val = digits[:delta] + ('0'*tup.exponent) + '.' + digits[delta:]\n    val = val.rstrip('0')\n    if val[-1] == '.':\n        val = val[:-1]\n    if tup.sign:\n        return '-' + val\n    return val\n\n# test data\nNUMS = '''\n    0.0000      0\n    0           0\n    123.45000   123.45\n    0000        0\n    123.4506780 123.450678\n    0.1         0.1\n    0.001       0.001\n    0.005000    0.005\n    .1234       0.1234\n    1.23e1      12.3\n    -123.456    -123.456\n    4.98e10     49800000000\n    4.9815135   4.9815135\n    4e30        4000000000000000000000000000000\n    -0.0000000000004 -0.0000000000004\n    -.4e-12     -0.0000000000004\n    -0.11112    -0.11112\n    1.3.4.5     bad\n    -1.2.3      bad\n'''\n\nfor num, exp in [s.split() for s in NUMS.split('\\n') if s]:\n    res = format_number(num)\n    print res\n    assert exp == res\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 0\n0\n123.45\n0\n123.450678\n0.1\n0.001\n0.005\n0.1234\n12.3\n-123.456\n49800000000\n4.9815135\n4000000000000000000000000000000\n-0.0000000000004\n-0.0000000000004\n-0.11112\nbad\nbad\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can use format strings if you want, but be aware that you might need to set your desired precision, as format strings have their own logic for this by default.", "Janneb suggests a precision of 17 in another answer."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "format strings", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#formatstrings"}, {"text": "another answer", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/5807952/removing-trailing-zeros-in-python/5808016#5808016"}]}, {"code": "<pre>\n<code>\n '{:g}'.format(float(your_string_goes_here))\n</code>\n</pre>\n", "senID": 1}, {"text": ["After thinking about this some more, though, I think the simplest and best solution is just to cast the string twice (as jathanism suggests):"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "jathanism suggests", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/5807952/removing-trailing-zeros-in-python/5807995#5807995"}]}, {"code": "<pre>\n<code>\n str(float(your_string_goes_here))\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit: Added clarification because of comment."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["For the floating point numbers, you can just cast the string to a float:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "float", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; float('123.4506780')\n123.450678\n</code>\n</pre>\n", "senID": 1}, {"text": ["For the zero values, you can just cast those to an integer:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; int('0000')\n0\n</code>\n</pre>\n", "senID": 3}, {"text": ["When printed, numeric values are automatically converted to strings.", "If you need these to actually be strings, you may simply cast them back to strings with str(), e.g."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "str()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; str(float('123.4506780'))\n'123.450678'\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n '%.17g' % float(mystr)\n</code>\n</pre>\n", "senID": 0}, {"text": ["depending on what you actually want to do.."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Script:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def tidy_float(s):\n    \"\"\"Return tidied float representation.\n    Remove superflous leading/trailing zero digits.\n    Remove '.' if value is an integer.\n    Return '****' if float(s) fails.\n    \"\"\"\n    # float?\n    try:\n        f = float(s)\n    except ValueError:\n        return '****'\n    # int?\n    try:\n        i = int(s)\n        return str(i)\n    except ValueError:\n        pass\n    # scientific notation?\n    if 'e' in s or 'E' in s:\n        t = s.lstrip('0')\n        if t.startswith('.'): t = '0' + t\n        return t\n    # float with integral value (includes zero)?\n    i = int(f)\n    if i == f:\n        return str(i)\n    assert '.' in s\n    t = s.strip('0')\n    if t.startswith('.'): t = '0' + t\n    if t.endswith('.'): t += '0'\n    return t\n\nif __name__ == \"__main__\":\n\n    # Each line has test string followed by expected output\n    tests = \"\"\"\n    0.000 0\n    0 0\n    0000 0\n    0.4000 0.4\n    0.0081000 0.0081\n    103.45 103.45\n    103.4506700 103.45067\n    14500.0012 14500.0012\n    478000.89 478000.89\n    993.59.18 ****\n    12.5831.400 ****\n    .458 0.458\n    .48587000 0.48587\n    .0000 0\n    10000 10000\n    10000.000 10000\n    -10000 -10000\n    -10000.000 -10000\n    1.23e2 1.23e2\n    1.23e10 1.23e10\n    .123e10 0.123e10\n     \"\"\".splitlines()\n\n    for test in tests:\n        x = test.split()\n        if not x: continue\n        data, expected = x\n        actual = tidy_float(data)\n        print \"data=%r exp=%r act=%r %s\" % (\n            data, expected, actual, [\"**FAIL**\", \"\"][actual == expected])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output (Python 2.7.1):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n data='0.000' exp='0' act='0'\ndata='0' exp='0' act='0'\ndata='0000' exp='0' act='0'\ndata='0.4000' exp='0.4' act='0.4'\ndata='0.0081000' exp='0.0081' act='0.0081'\ndata='103.45' exp='103.45' act='103.45'\ndata='103.4506700' exp='103.45067' act='103.45067'\ndata='14500.0012' exp='14500.0012' act='14500.0012'\ndata='478000.89' exp='478000.89' act='478000.89'\ndata='993.59.18' exp='****' act='****'\ndata='12.5831.400' exp='****' act='****'\ndata='.458' exp='0.458' act='0.458'\ndata='.48587000' exp='0.48587' act='0.48587'\ndata='.0000' exp='0' act='0'\ndata='10000' exp='10000' act='10000'\ndata='10000.000' exp='10000' act='10000'\ndata='-10000' exp='-10000' act='-10000'\ndata='-10000.000' exp='-10000' act='-10000'\ndata='1.23e2' exp='1.23e2' act='1.23e2'\ndata='1.23e10' exp='1.23e10' act='1.23e10'\ndata='.123e10' exp='0.123e10' act='0.123e10'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["FIRST \"SOLUTION\""], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nregx=re.compile('(?&lt;![\\d.])'\n                '(?!\\d*\\.\\d*\\.)'  # excludes certain string as not being numbers\n                '((\\d|\\.\\d)([\\d.])*?)'  # the only matching  group\n                '([0\\.]*)'\n                '(?![\\d.])')\nregx.sub('\\\\1',ch)\n</code>\n</pre>\n", "senID": 1}, {"text": [], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT 1"], "childNum": 0, "tag": "h2", "senID": 3, "childList": []}, {"text": ["John Machin said that 10000 and 10000.000 produce 1 instead of 10000"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I corrected the replacement function with the help of (?!(?&lt;=0)\\."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "(?!(?&lt;=0)\\.)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n import re\nregx = re.compile('(?&lt;![\\d.])'       '(?![1-9]\\d*(?![\\d.])|\\d*\\.\\d*\\.)'\n                  '0*(?!(?&lt;=0)\\.)'\n                  '([\\d.]+?)'      # the only group , which is kept\n                  '\\.?0*'\n                  '(?![\\d.])')    \nregx.sub('\\\\1',ch)\n</code>\n</pre>\n", "senID": 6}, {"text": [], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["EDIT 2"], "childNum": 0, "tag": "h2", "senID": 8, "childList": []}, {"text": ["To correct the remaining shortcomings [ '.0000' producing '.", "' , pointed out by John Machin, and '000078000' producing '78' ] , I rewrote a regex build on a new idea.", "It's simpler.", "The regex detects all types of numbers."], "childNum": 4, "tag": "p", "senID": 9, "childList": [{"text": "'.0000'", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "'.'", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "'000078000'", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "'78'", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["This solution not only cuts the trailing zeros off, but also the heading zeros.", "Here's the comparison of this solution with John Machin's tidy_float() ,  samplebias's number_format() , arussell84's '{:g}'.format() .", "There are some differences between the results of my function (all correct this time) and the others :"], "childNum": 3, "tag": "p", "senID": 10, "childList": [{"text": "tidy_float()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "number_format()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "'{:g}'.format()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n import re\ndef number_shaver(ch,\n                  regx = re.compile('(?&lt;![\\d.])0*(?:'\n                                    '(\\d+)\\.?|\\.(0)'\n                                    '|(\\.\\d+?)|(\\d+\\.\\d+?)'\n                                    ')0*(?![\\d.])')  ,\n                  repl = lambda mat: mat.group(mat.lastindex)\n                                     if mat.lastindex!=3\n                                     else '0' + mat.group(3) ):\n    return regx.sub(repl,ch)\n\n\ndef tidy_float(s):  # John Machin\n    \"\"\"Return tidied float representation.\n    Remove superflous leading/trailing zero digits.\n    Remove '.' if value is an integer.\n    Return '****' if float(s) fails.\n    \"\"\"\n    # float?\n    try:\n        f = float(s)\n    except ValueError:\n        return s\n    # int?\n    try:\n        i = int(s)\n        return str(i)\n    except ValueError:\n        pass\n    # scientific notation?\n    if 'e' in s or 'E' in s:\n        t = s.lstrip('0')\n        if t.startswith('.'): t = '0' + t\n        return t\n    # float with integral value (includes zero)?\n    i = int(f)\n    if i == f:\n        return str(i)\n    assert '.' in s\n    t = s.strip('0')\n    if t.startswith('.'): t = '0' + t\n    if t.endswith('.'): t += '0'\n    return t\n\n\ndef format_float(s):  # arrussell84\n    return '{:g}'.format(float(s)) if s.count('.')&lt;2 \\\n           else \"Can't treat\"\n\n\nimport decimal\ndef format_number(num):\n    try:\n        dec = decimal.Decimal(num)\n    except:\n        return 'bad'\n    tup = dec.as_tuple()\n    delta = len(tup.digits) + tup.exponent\n    digits = ''.join(str(d) for d in tup.digits)\n    if delta &lt;= 0:\n        zeros = abs(tup.exponent) - len(tup.digits)\n        val = '0.' + ('0'*zeros) + digits\n    else:\n        val = digits[:delta] + ('0'*tup.exponent) + '.' + digits[delta:]\n    val = val.rstrip('0')\n    if val[-1] == '.':\n        val = val[:-1]\n    if tup.sign:\n        return '-' + val\n    return val\n\n\nnumbers = ['23456000', '23456000.', '23456000.000',\n           '00023456000', '000023456000.', '000023456000.000',\n           '10000', '10000.', '10000.000',\n           '00010000', '00010000.', '00010000.000',\n           '24', '24.', '24.000',\n           '00024', '00024.', '00024.000',\n           '8', '8.', '8.000',\n           '0008', '0008.', '0008.000',\n           '0', '00000', '0.', '000.',\n           '\\n',\n           '0.0', '0.000', '000.0', '000.000', '.000000', '.0',\n           '\\n',\n           '.00023456', '.00023456000', '.00503', '.00503000',\n           '.068', '.0680000', '.8', '.8000',\n           '.123456123456', '.123456123456000',\n           '.657', '.657000', '.45', '.4500000', '.7', '.70000',\n           '\\n',\n           '0.0000023230000', '000.0000023230000',\n           '0.0081000', '0000.0081000',\n           '0.059000', '0000.059000',\n           '0.78987400000', '00000.78987400000',\n           '0.4400000', '00000.4400000',\n           '0.5000', '0000.5000',\n           '0.90', '000.90', '0.7', '000.7',\n           '\\n',\n           '2.6', '00002.6', '00002.60000',\n           '4.71', '0004.71', '0004.7100',\n           '23.49', '00023.49', '00023.490000',\n           '103.45', '0000103.45', '0000103.45000',\n           '10003.45067', '000010003.45067', '000010003.4506700',\n           '15000.0012', '000015000.0012', '000015000.0012000',\n           '78000.89', '000078000.89', '000078000.89000',\n           '\\n',\n           '.0457e10', '.0457000e10','00000.0457000e10',\n           '258e8', '2580000e4', '0000000002580000e4',\n           # notice the difference of exponents\n           '0.782e10', '0000.782e10', '0000.7820000e10',\n           '1.23E2', '0001.23E2', '0001.2300000E2',\n           '432e-102', '0000432e-102', '004320000e-106',\n           # notice the difference of exponents\n           '1.46e10', '0001.46e10', '0001.4600000e10',\n           '1.077e-300', '0001.077e-300', '0001.077000e-300',\n           '1.069e10', '0001.069e10', '0001.069000e10',\n           '105040.03e10', '000105040.03e10', '105040.0300e10',\n           '\\n',\n           '..18000', '25..00',  '36...77', '2..8',\n           '3.8..9', '.12500.', '12.51.400' ]\n</code>\n</pre>\n", "senID": 11}, {"text": ["pat = '%18s  %-15s %-15s %-15s %s'\nli = [pat % ('tested number','float_shaver',\n             'tidy_float',\"format_number()\",\"'{:g}'.format()\")]\nli.extend(pat % (n,number_shaver(n),tidy_float(n),format_number(n),format_float(n))\n          if n!='\\n' else '\\n' for n in numbers)"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["print '\\n'.join(li)        "], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["result of the comparison:"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n tested number  float_shaver    tidy_float      format_number() '{:g}'.format()\n          23456000  23456000        23456000        23456000        2.3456e+07\n         23456000.  23456000        23456000        23456000        2.3456e+07\n      23456000.000  23456000        23456000        23456000        2.3456e+07\n       00023456000  23456000        23456000        23456000        2.3456e+07\n     000023456000.  23456000        23456000        23456000        2.3456e+07\n  000023456000.000  23456000        23456000        23456000        2.3456e+07\n             10000  10000           10000           10000           10000\n            10000.  10000           10000           10000           10000\n         10000.000  10000           10000           10000           10000\n          00010000  10000           10000           10000           10000\n         00010000.  10000           10000           10000           10000\n      00010000.000  10000           10000           10000           10000\n                24  24              24              24              24\n               24.  24              24              24              24\n            24.000  24              24              24              24\n             00024  24              24              24              24\n            00024.  24              24              24              24\n         00024.000  24              24              24              24\n                 8  8               8               8               8\n                8.  8               8               8               8\n             8.000  8               8               8               8\n              0008  8               8               8               8\n             0008.  8               8               8               8\n          0008.000  8               8               8               8\n                 0  0               0               0               0\n             00000  0               0               0               0\n                0.  0               0               0               0\n              000.  0               0               0               0\n\n\n               0.0  0               0               0               0\n             0.000  0               0               0               0\n             000.0  0               0               0               0\n           000.000  0               0               0               0\n           .000000  0               0               0               0\n                .0  0               0               0               0\n\n\n         .00023456  0.00023456      0.00023456      0.00023456      0.00023456\n      .00023456000  0.00023456      0.00023456      0.00023456      0.00023456\n            .00503  0.00503         0.00503         0.00503         0.00503\n         .00503000  0.00503         0.00503         0.00503         0.00503\n              .068  0.068           0.068           0.068           0.068\n          .0680000  0.068           0.068           0.068           0.068\n                .8  0.8             0.8             0.8             0.8\n             .8000  0.8             0.8             0.8             0.8\n     .123456123456  0.123456123456  0.123456123456  0.123456123456  0.123456\n  .123456123456000  0.123456123456  0.123456123456  0.123456123456  0.123456\n              .657  0.657           0.657           0.657           0.657\n           .657000  0.657           0.657           0.657           0.657\n               .45  0.45            0.45            0.45            0.45\n          .4500000  0.45            0.45            0.45            0.45\n                .7  0.7             0.7             0.7             0.7\n            .70000  0.7             0.7             0.7             0.7\n\n\n   0.0000023230000  0.000002323     0.000002323     0.000002323     2.323e-06\n 000.0000023230000  0.000002323     0.000002323     0.000002323     2.323e-06\n         0.0081000  0.0081          0.0081          0.0081          0.0081\n      0000.0081000  0.0081          0.0081          0.0081          0.0081\n          0.059000  0.059           0.059           0.059           0.059\n       0000.059000  0.059           0.059           0.059           0.059\n     0.78987400000  0.789874        0.789874        0.789874        0.789874\n 00000.78987400000  0.789874        0.789874        0.789874        0.789874\n         0.4400000  0.44            0.44            0.44            0.44\n     00000.4400000  0.44            0.44            0.44            0.44\n            0.5000  0.5             0.5             0.5             0.5\n         0000.5000  0.5             0.5             0.5             0.5\n              0.90  0.9             0.9             0.9             0.9\n            000.90  0.9             0.9             0.9             0.9\n               0.7  0.7             0.7             0.7             0.7\n             000.7  0.7             0.7             0.7             0.7\n\n\n               2.6  2.6             2.6             2.6             2.6\n           00002.6  2.6             2.6             2.6             2.6\n       00002.60000  2.6             2.6             2.6             2.6\n              4.71  4.71            4.71            4.71            4.71\n           0004.71  4.71            4.71            4.71            4.71\n         0004.7100  4.71            4.71            4.71            4.71\n             23.49  23.49           23.49           23.49           23.49\n          00023.49  23.49           23.49           23.49           23.49\n      00023.490000  23.49           23.49           23.49           23.49\n            103.45  103.45          103.45          103.45          103.45\n        0000103.45  103.45          103.45          103.45          103.45\n     0000103.45000  103.45          103.45          103.45          103.45\n       10003.45067  10003.45067     10003.45067     10003.45067     10003.5\n   000010003.45067  10003.45067     10003.45067     10003.45067     10003.5\n 000010003.4506700  10003.45067     10003.45067     10003.45067     10003.5\n        15000.0012  15000.0012      15000.0012      15000.0012      15000\n    000015000.0012  15000.0012      15000.0012      15000.0012      15000\n 000015000.0012000  15000.0012      15000.0012      15000.0012      15000\n          78000.89  78000.89        78000.89        78000.89        78000.9\n      000078000.89  78000.89        78000.89        78000.89        78000.9\n   000078000.89000  78000.89        78000.89        78000.89        78000.9\n\n\n          .0457e10  0.0457e10       0.0457e10       457000000       4.57e+08\n       .0457000e10  0.0457e10       0.0457000e10    457000000       4.57e+08\n  00000.0457000e10  0.0457e10       0.0457000e10    457000000       4.57e+08\n             258e8  258e8           258e8           25800000000     2.58e+10\n         2580000e4  2580000e4       2580000e4       25800000000     2.58e+10\n0000000002580000e4  2580000e4       2580000e4       25800000000     2.58e+10\n          0.782e10  0.782e10        0.782e10        7820000000      7.82e+09\n       0000.782e10  0.782e10        0.782e10        7820000000      7.82e+09\n   0000.7820000e10  0.782e10        0.7820000e10    7820000000      7.82e+09\n            1.23E2  1.23E2          1.23E2          123             123\n         0001.23E2  1.23E2          1.23E2          123             123\n    0001.2300000E2  1.23E2          1.2300000E2     123             123\n          432e-102  432e-102        432e-102        0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000432 4.32e-100\n      0000432e-102  432e-102        432e-102        0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000432 4.32e-100\n    004320000e-106  4320000e-106    4320000e-106    0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000432 4.32e-100\n           1.46e10  1.46e10         1.46e10         14600000000     1.46e+10\n        0001.46e10  1.46e10         1.46e10         14600000000     1.46e+10\n   0001.4600000e10  1.46e10         1.4600000e10    14600000000     1.46e+10\n        1.077e-300  1.077e-300      1.077e-300      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001077 1.077e-300\n     0001.077e-300  1.077e-300      1.077e-300      0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001077 1.077e-300\n  0001.077000e-300  1.077e-300      1.077000e-300   0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001077 1.077e-300\n          1.069e10  1.069e10        1.069e10        10690000000     1.069e+10\n       0001.069e10  1.069e10        1.069e10        10690000000     1.069e+10\n    0001.069000e10  1.069e10        1.069000e10     10690000000     1.069e+10\n      105040.03e10  105040.03e10    105040.03e10    1050400300000000 1.0504e+15\n   000105040.03e10  105040.03e10    105040.03e10    1050400300000000 1.0504e+15\n    105040.0300e10  105040.03e10    105040.0300e10  1050400300000000 1.0504e+15\n\n\n           ..18000  ..18000         ..18000         bad             Can't treat\n            25..00  25..00          25..00          bad             Can't treat\n           36...77  36...77         36...77         bad             Can't treat\n              2..8  2..8            2..8            bad             Can't treat\n            3.8..9  3.8..9          3.8..9          bad             Can't treat\n           .12500.  .12500.         .12500.         bad             Can't treat\n         12.51.400  12.51.400       12.51.400       bad             Can't treat\n</code>\n</pre>\n", "senID": 15}, {"text": [], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["I  consider that my solution have two advantages:"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["the regex and the function number_shave() are short"], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "number_shave()", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["number_shave() doesn't only treat one number at a time but it also detects and treats all the numbers in a string.", "Here's a treatment that John Machin's and arrussel84's solutions can't do:"], "childNum": 1, "tag": "p", "senID": 19, "childList": [{"text": "number_shave()", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]}, {"text": ["code:"], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"code": "<pre>\n<code>\n numbers = [['', '23456000', '23456000.', '23456000.000 \\n',\n            '00023456000', '000023456000.', '000023456000.000 \\n',\n            '10000', '10000.', '10000.000 \\n',\n            '00010000', '00010000.', '00010000.000 \\n',\n            '24', '24.', '24.000 \\n',\n            '00024', '00024.', '00024.000 \\n',\n            '8', '8.', '8.000 \\n',\n            '0008', '0008.', '0008.000 \\n',\n            '0', '00000', '0.', '000.' ],\n\n\n\n\n            ['0.0', '0.000', '000.0', '000.000', '.000000', '.0'],\n\n            ['.00023456', '.00023456000', '.00503', '.00503000 \\n',\n             '.068', '.0680000', '.8', '.8000 \\n',\n             '.123456123456', '.123456123456000 \\n',\n             '.657', '.657000', '.45', '.4500000', '.7', '.70000'],\n\n            ['0.0000023230000', '000.0000023230000 \\n',\n             '0.0081000', '0000.0081000 \\n',\n             '0.059000', '0000.059000 \\n',\n             '0.78987400000', '00000.78987400000 \\n',\n             '0.4400000', '00000.4400000 \\n',\n             '0.5000', '0000.5000 \\n',\n             '0.90', '000.90', '0.7', '000.7 '],\n\n            ['2.6', '00002.6', '00002.60000 \\n',\n             '4.71', '0004.71', '0004.7100 \\n',\n             '23.49', '00023.49', '00023.490000 \\n',\n             '103.45', '0000103.45', '0000103.45000 \\n',\n             '10003.45067', '000010003.45067', '000010003.4506700 \\n',\n             '15000.0012', '000015000.0012', '000015000.0012000 \\n',\n             '78000.89', '000078000.89', '000078000.89000'],\n\n            ['.0457e10', '.0457000e10 \\n',\n             '0.782e10', '0000.782e10', '0000.7820000e10 \\n',\n             '1.23E2', '0001.23E2', '0001.2300000E2 \\n',\n             '1.46e10', '0001.46e10', '0001.4600000e10 \\n',\n             '1.077e-456', '0001.077e-456', '0001.077000e-456 \\n',\n             '1.069e10', '0001.069e10', '0001.069000e10 \\n',\n             '105040.03e10', '000105040.03e10', '105040.03e10'],\n\n            ['..18000', '25..00',  '36...77', '2..8 \\n',\n             '3.8..9', '.12500.', '12.51.400' ]]\n\n\nimport re\ndef number_shaver(ch,\n                 regx = re.compile('(?&lt;![\\d.])0*(?:'\n                                   '(\\d+)\\.?|\\.(0)'\n                                   '|(\\.\\d+?)|(\\d+\\.\\d+?)'\n                                   ')0*(?![\\d.])')  ,\n                 repl = lambda mat: mat.group(mat.lastindex)\n                                    if mat.lastindex!=3\n                                    else '0' + mat.group(3) ):\n    return regx.sub(repl,ch)\n\n\n\n\nfor li in numbers:\n    one_string = ' --- '.join(li)\n    print one_string + '\\n\\n' + number_shaver(one_string) + \\\n          '\\n\\n' + 3*'---------------------' + '\\n'\n</code>\n</pre>\n", "senID": 21}, {"text": ["results of the treatments of strings containing several numbers:"], "childNum": 0, "tag": "p", "senID": 22, "childList": []}, {"code": "<pre>\n<code>\n --- 23456000 --- 23456000. --- 23456000.000 \n --- 00023456000 --- 000023456000. --- 000023456000.000 \n --- 10000 --- 10000. --- 10000.000 \n --- 00010000 --- 00010000. --- 00010000.000 \n --- 24 --- 24. --- 24.000 \n --- 00024 --- 00024. --- 00024.000 \n --- 8 --- 8. --- 8.000 \n --- 0008 --- 0008. --- 0008.000 \n --- 0 --- 00000 --- 0. --- 000.\n\n --- 23456000 --- 23456000 --- 23456000 \n --- 23456000 --- 23456000 --- 23456000 \n --- 10000 --- 10000 --- 10000 \n --- 10000 --- 10000 --- 10000 \n --- 24 --- 24 --- 24 \n --- 24 --- 24 --- 24 \n --- 8 --- 8 --- 8 \n --- 8 --- 8 --- 8 \n --- 0 --- 0 --- 0 --- 0\n\n---------------------------------------------------------------\n\n0.0 --- 0.000 --- 000.0 --- 000.000 --- .000000 --- .0\n\n0 --- 0 --- 0 --- 0 --- 0 --- 0\n\n---------------------------------------------------------------\n\n.00023456 --- .00023456000 --- .00503 --- .00503000 \n --- .068 --- .0680000 --- .8 --- .8000 \n --- .123456123456 --- .123456123456000 \n --- .657 --- .657000 --- .45 --- .4500000 --- .7 --- .70000\n\n0.00023456 --- 0.00023456 --- 0.00503 --- 0.00503 \n --- 0.068 --- 0.068 --- 0.8 --- 0.8 \n --- 0.123456123456 --- 0.123456123456 \n --- 0.657 --- 0.657 --- 0.45 --- 0.45 --- 0.7 --- 0.7\n\n---------------------------------------------------------------\n\n0.0000023230000 --- 000.0000023230000 \n --- 0.0081000 --- 0000.0081000 \n --- 0.059000 --- 0000.059000 \n --- 0.78987400000 --- 00000.78987400000 \n --- 0.4400000 --- 00000.4400000 \n --- 0.5000 --- 0000.5000 \n --- 0.90 --- 000.90 --- 0.7 --- 000.7 \n\n0.000002323 --- 0.000002323 \n --- 0.0081 --- 0.0081 \n --- 0.059 --- 0.059 \n --- 0.789874 --- 0.789874 \n --- 0.44 --- 0.44 \n --- 0.5 --- 0.5 \n --- 0.9 --- 0.9 --- 0.7 --- 0.7 \n\n---------------------------------------------------------------\n\n2.6 --- 00002.6 --- 00002.60000 \n --- 4.71 --- 0004.71 --- 0004.7100 \n --- 23.49 --- 00023.49 --- 00023.490000 \n --- 103.45 --- 0000103.45 --- 0000103.45000 \n --- 10003.45067 --- 000010003.45067 --- 000010003.4506700 \n --- 15000.0012 --- 000015000.0012 --- 000015000.0012000 \n --- 78000.89 --- 000078000.89 --- 000078000.89000\n\n2.6 --- 2.6 --- 2.6 \n --- 4.71 --- 4.71 --- 4.71 \n --- 23.49 --- 23.49 --- 23.49 \n --- 103.45 --- 103.45 --- 103.45 \n --- 10003.45067 --- 10003.45067 --- 10003.45067 \n --- 15000.0012 --- 15000.0012 --- 15000.0012 \n --- 78000.89 --- 78000.89 --- 78000.89\n\n---------------------------------------------------------------\n\n.0457e10 --- .0457000e10 \n --- 0.782e10 --- 0000.782e10 --- 0000.7820000e10 \n --- 1.23E2 --- 0001.23E2 --- 0001.2300000E2 \n --- 1.46e10 --- 0001.46e10 --- 0001.4600000e10 \n --- 1.077e-456 --- 0001.077e-456 --- 0001.077000e-456 \n --- 1.069e10 --- 0001.069e10 --- 0001.069000e10 \n --- 105040.03e10 --- 000105040.03e10 --- 105040.03e10\n\n0.0457e10 --- 0.0457e10 \n --- 0.782e10 --- 0.782e10 --- 0.782e10 \n --- 1.23E2 --- 1.23E2 --- 1.23E2 \n --- 1.46e10 --- 1.46e10 --- 1.46e10 \n --- 1.077e-456 --- 1.077e-456 --- 1.077e-456 \n --- 1.069e10 --- 1.069e10 --- 1.069e10 \n --- 105040.03e10 --- 105040.03e10 --- 105040.03e10\n\n---------------------------------------------------------------\n\n..18000 --- 25..00 --- 36...77 --- 2..8 \n --- 3.8..9 --- .12500. --- 12.51.400\n\n..18000 --- 25..00 --- 36...77 --- 2..8 \n --- 3.8..9 --- .12500. --- 12.51.400\n\n---------------------------------------------------------------\n</code>\n</pre>\n", "senID": 23}, {"text": [], "childNum": 0, "tag": "p", "senID": 24, "childList": []}, {"text": ["Consequently, the regex can also been used to merely find all the numbers in a string, without removing the zeros if not wished."], "childNum": 0, "tag": "p", "senID": 25, "childList": []}, {"text": [], "childNum": 0, "tag": "p", "senID": 26, "childList": []}, {"text": ["PS: see more in my other answer that explains the regex and its functionning"], "childNum": 1, "tag": "p", "senID": 27, "childList": [{"text": "PS:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["ADDITION TO THE EDIT 2 of my other answer"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["(All was to long to be in only one post)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The pattern of the regex defines 4 sub-patterns, each one matching with a certain type of numbers.", "Each time the regex matches with a part of a string, there is only one of the sub-patterns that matches, hence the possibility to use mat.lastindex in the replacement function.", "The following code shows the matchings of the sub-pattern against various numbers:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "mat.lastindex", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import re\ndef float_show(ch,\n               regx = re.compile(\n                   '(?&lt;![\\d.])'\n                   '0*' # potentiel heading zeros\n                   '(?:'\n                   '(\\d+)\\.?' # INTEGERS :\n                              # ~ pure integers non-0 or 0\n                              #   000450 , 136000 , 87 , 000 , 0\n                              # ~ integer part non-0 + '.'\n                              #   0044. , 4100.\n                              # ~ integer part 0 + '.'\n                              #   000. , 0. \n                              # ~ integer part non-0 + '.' + fractional part 0:\n                              #   000570.00 , 193.0 , 3.000\n\n                   '|\\.(0)' # SPECIAL CASE, 0 WITH FRACTIONAL PART :\n                            # ~ integer part 0 + compulsory fractional part 0:\n                            #   000.0, 0.000 , .0 , .00000\n\n                   '|(\\.\\d+?)' # FLOATING POINT NUMBER\n                               # ~ with integer part 0:\n                               #   000.0890 , 0.52 , 0.1 , .077000 , .1400 , .0006010\n\n                   '|(\\d+\\.\\d+?)' # FLOATING POINT NUMBER\n                                  # ~ with integer part non-0:\n                                  #   0024000.013000 , 145.0235 , 3.00058\n                   ')'\n                   '0*' # potential tailing zeros\n                   '(?![\\d.])'),\n               repl = lambda mat: mat.group(mat.lastindex)\n                                  if mat.lastindex!=3\n                                  else '0' + mat.group(3)  ):\n    mat = regx.search(ch)\n    if mat:\n        return (ch,regx.sub(repl,ch),repr(mat.groups()))\n    else:\n        return (ch,'No match','No groups')\n\n\nnumbers = ['23456000', '23456000.', '23456000.000',\n           '00023456000', '000023456000.', '000023456000.000',\n           '10000', '10000.', '10000.000',\n           '00010000', '00010000.', '00010000.000',\n           '24', '24.', '24.000',\n           '00024', '00024.', '00024.000',\n           '8', '8.', '8.000',\n           '0008', '0008.', '0008.000',\n           '0', '00000', '0.', '000.',\n           '\\n',\n           '0.0', '0.000', '000.0', '000.000', '.000000', '.0',\n           '\\n',\n           '.00023456', '.00023456000', '.00503', '.00503000',\n           '.068', '.0680000', '.8', '.8000',\n           '.123456123456', '.123456123456000',\n           '.657', '.657000', '.45', '.4500000', '.7', '.70000',\n           '\\n',\n           '0.0000023230000', '000.0000023230000',\n           '0.0081000', '0000.0081000',\n           '0.059000', '0000.059000',\n           '0.78987400000', '00000.78987400000',\n           '0.4400000', '00000.4400000',\n           '0.5000', '0000.5000',\n           '0.90', '000.90', '0.7', '000.7',\n           '\\n',\n           '2.6', '00002.6', '00002.60000',\n           '4.71', '0004.71', '0004.7100',\n           '23.49', '00023.49', '00023.490000',\n           '103.45', '0000103.45', '0000103.45000',\n           '10003.45067', '000010003.45067', '000010003.4506700',\n           '15000.0012', '000015000.0012', '000015000.0012000',\n           '78000.89', '000078000.89', '000078000.89000',\n           '\\n',\n           '.0457e10', '.0457000e10',\n           '0.782e10', '0000.782e10', '0000.7820000e10',\n           '1.23E2', '0001.23E2', '0001.2300000E2',\n           '1.46e10', '0001.46e10', '0001.4600000e10',\n           '1.077e-456', '0001.077e-456', '0001.077000e-456',\n           '1.069e10', '0001.069e10', '0001.069000e10',\n           '105040.03e10', '000105040.03e10', '105040.0300e10',\n           '\\n',\n           '..18000', '25..00',  '36...77', '2..8',\n           '3.8..9', '.12500.', '12.51.400' ]\n\npat = '%20s  %-16s %s'\nli = [pat % ('tested number ',' shaved float',' regx.search(number).groups()')]\nli.extend(pat % float_show(ch) if ch!='\\n' else '\\n' for ch in numbers)\nprint '\\n'.join(li)\n</code>\n</pre>\n", "senID": 3}, {"text": ["demonstrates"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n tested number    shaved float     regx.search(number).groups()\n            23456000  23456000         ('23456000', None, None, None)\n           23456000.  23456000         ('23456000', None, None, None)\n        23456000.000  23456000         ('23456000', None, None, None)\n         00023456000  23456000         ('23456000', None, None, None)\n       000023456000.  23456000         ('23456000', None, None, None)\n    000023456000.000  23456000         ('23456000', None, None, None)\n               10000  10000            ('10000', None, None, None)\n              10000.  10000            ('10000', None, None, None)\n           10000.000  10000            ('10000', None, None, None)\n            00010000  10000            ('10000', None, None, None)\n           00010000.  10000            ('10000', None, None, None)\n        00010000.000  10000            ('10000', None, None, None)\n                  24  24               ('24', None, None, None)\n                 24.  24               ('24', None, None, None)\n              24.000  24               ('24', None, None, None)\n               00024  24               ('24', None, None, None)\n              00024.  24               ('24', None, None, None)\n           00024.000  24               ('24', None, None, None)\n                   8  8                ('8', None, None, None)\n                  8.  8                ('8', None, None, None)\n               8.000  8                ('8', None, None, None)\n                0008  8                ('8', None, None, None)\n               0008.  8                ('8', None, None, None)\n            0008.000  8                ('8', None, None, None)\n                   0  0                ('0', None, None, None)\n               00000  0                ('0', None, None, None)\n                  0.  0                ('0', None, None, None)\n                000.  0                ('0', None, None, None)\n\n\n                 0.0  0                (None, '0', None, None)\n               0.000  0                (None, '0', None, None)\n               000.0  0                (None, '0', None, None)\n             000.000  0                (None, '0', None, None)\n             .000000  0                (None, '0', None, None)\n                  .0  0                (None, '0', None, None)\n\n\n           .00023456  0.00023456       (None, None, '.00023456', None)\n        .00023456000  0.00023456       (None, None, '.00023456', None)\n              .00503  0.00503          (None, None, '.00503', None)\n           .00503000  0.00503          (None, None, '.00503', None)\n                .068  0.068            (None, None, '.068', None)\n            .0680000  0.068            (None, None, '.068', None)\n                  .8  0.8              (None, None, '.8', None)\n               .8000  0.8              (None, None, '.8', None)\n       .123456123456  0.123456123456   (None, None, '.123456123456', None)\n    .123456123456000  0.123456123456   (None, None, '.123456123456', None)\n                .657  0.657            (None, None, '.657', None)\n             .657000  0.657            (None, None, '.657', None)\n                 .45  0.45             (None, None, '.45', None)\n            .4500000  0.45             (None, None, '.45', None)\n                  .7  0.7              (None, None, '.7', None)\n              .70000  0.7              (None, None, '.7', None)\n\n\n     0.0000023230000  0.000002323      (None, None, '.000002323', None)\n   000.0000023230000  0.000002323      (None, None, '.000002323', None)\n           0.0081000  0.0081           (None, None, '.0081', None)\n        0000.0081000  0.0081           (None, None, '.0081', None)\n            0.059000  0.059            (None, None, '.059', None)\n         0000.059000  0.059            (None, None, '.059', None)\n       0.78987400000  0.789874         (None, None, '.789874', None)\n   00000.78987400000  0.789874         (None, None, '.789874', None)\n           0.4400000  0.44             (None, None, '.44', None)\n       00000.4400000  0.44             (None, None, '.44', None)\n              0.5000  0.5              (None, None, '.5', None)\n           0000.5000  0.5              (None, None, '.5', None)\n                0.90  0.9              (None, None, '.9', None)\n              000.90  0.9              (None, None, '.9', None)\n                 0.7  0.7              (None, None, '.7', None)\n               000.7  0.7              (None, None, '.7', None)\n\n\n                 2.6  2.6              (None, None, None, '2.6')\n             00002.6  2.6              (None, None, None, '2.6')\n         00002.60000  2.6              (None, None, None, '2.6')\n                4.71  4.71             (None, None, None, '4.71')\n             0004.71  4.71             (None, None, None, '4.71')\n           0004.7100  4.71             (None, None, None, '4.71')\n               23.49  23.49            (None, None, None, '23.49')\n            00023.49  23.49            (None, None, None, '23.49')\n        00023.490000  23.49            (None, None, None, '23.49')\n              103.45  103.45           (None, None, None, '103.45')\n          0000103.45  103.45           (None, None, None, '103.45')\n       0000103.45000  103.45           (None, None, None, '103.45')\n         10003.45067  10003.45067      (None, None, None, '10003.45067')\n     000010003.45067  10003.45067      (None, None, None, '10003.45067')\n   000010003.4506700  10003.45067      (None, None, None, '10003.45067')\n          15000.0012  15000.0012       (None, None, None, '15000.0012')\n      000015000.0012  15000.0012       (None, None, None, '15000.0012')\n   000015000.0012000  15000.0012       (None, None, None, '15000.0012')\n            78000.89  78000.89         (None, None, None, '78000.89')\n        000078000.89  78000.89         (None, None, None, '78000.89')\n     000078000.89000  78000.89         (None, None, None, '78000.89')\n\n\n            .0457e10  0.0457e10        (None, None, '.0457', None)\n         .0457000e10  0.0457e10        (None, None, '.0457', None)\n            0.782e10  0.782e10         (None, None, '.782', None)\n         0000.782e10  0.782e10         (None, None, '.782', None)\n     0000.7820000e10  0.782e10         (None, None, '.782', None)\n              1.23E2  1.23E2           (None, None, None, '1.23')\n           0001.23E2  1.23E2           (None, None, None, '1.23')\n      0001.2300000E2  1.23E2           (None, None, None, '1.23')\n             1.46e10  1.46e10          (None, None, None, '1.46')\n          0001.46e10  1.46e10          (None, None, None, '1.46')\n     0001.4600000e10  1.46e10          (None, None, None, '1.46')\n          1.077e-456  1.077e-456       (None, None, None, '1.077')\n       0001.077e-456  1.077e-456       (None, None, None, '1.077')\n    0001.077000e-456  1.077e-456       (None, None, None, '1.077')\n            1.069e10  1.069e10         (None, None, None, '1.069')\n         0001.069e10  1.069e10         (None, None, None, '1.069')\n      0001.069000e10  1.069e10         (None, None, None, '1.069')\n        105040.03e10  105040.03e10     (None, None, None, '105040.03')\n     000105040.03e10  105040.03e10     (None, None, None, '105040.03')\n      105040.0300e10  105040.03e10     (None, None, None, '105040.03')\n\n\n             ..18000  No match         No groups\n              25..00  No match         No groups\n             36...77  No match         No groups\n                2..8  No match         No groups\n              3.8..9  No match         No groups\n             .12500.  No match         No groups\n           12.51.400  No match         No groups\n</code>\n</pre>\n", "senID": 5}]]