[[{"text": ["At the end of foo(), create a Timer which calls foo() itself after 10 seconds.", "Because, Timer create a new thread to call foo().", "You can do other stuff without being blocked."], "childNum": 8, "tag": "p", "senID": 0, "childList": [{"text": "foo()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Timer", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "foo()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}, {"text": "Timer", "childNum": 0, "tag": "code", "childList": []}, {"text": "thread", "childNum": 0, "tag": "code", "childList": []}, {"text": "foo()", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import time, threading\n&gt;&gt;&gt; def foo():\n...   print(time.ctime())\n...   threading.Timer(10, foo).start()\n...\n&gt;&gt;&gt; foo()\nThu Dec 22 14:46:08 2011\n&gt;&gt;&gt; Thu Dec 22 14:46:18 2011\nThu Dec 22 14:46:28 2011\nThu Dec 22 14:46:38 2011\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's a nice implementation using the Thread class: http://g-off.net/software/a-python-repeatable-threadingtimer-class"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://g-off.net/software/a-python-repeatable-threadingtimer-class", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://g-off.net/software/a-python-repeatable-threadingtimer-class"}]}, {"text": ["the code below is a little more quick and dirty:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from threading import Timer\nfrom time import sleep\n\ndef hello():\n    print \"hello, world\"\n    t = Timer(3,hello)\n    t.start()\n\nt = Timer(3, hello)\nt.start() # after 3 seconds, \"hello, world\" will be printed\n\n# timer will wake up ever 3 seconds, while we do something else\nwhile True:\n    print \"do something else\"\n    sleep(10)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["This will insert a 10 second sleep in between every call to foo(), which is approximately what you asked for when the call completes quickly.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "foo()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import time\nwhile True:\n  foo()\n  time.sleep(10)\n</code>\n</pre>\n", "senID": 1}, {"text": ["edit:  To do other things while your foo() is being called in a background thread"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "edit:", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "edit:", "tag": "strong"}]}, {"text": "edit:", "childNum": 0, "tag": "strong", "childList": []}, {"text": "foo()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import time\nimport sys\nimport threading\n\ndef foo():\n  sys.stdout.write('({}) foo\\n'.format(time.ctime()))\n\ndef foo_target():\n  while True:\n    foo()\n    time.sleep(10)\n\nt = threading.Thread(target=foo_target)\nt.daemon = True\nt.start()\nraw_input('do other things...')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can execute your task in a different thread.", "threading.Timer will let you execute a given callback once after some time has elapsed, if you want to execute your task, for example, as long as the callback returns True (this is actually what glib.timeout_add provides, but you might not have it installed in windows) or until you cancel it, you can use this code:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "threading.Timer", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "glib.timeout_add", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import logging, threading, functools\nimport time\n\nlogging.basicConfig(level=logging.NOTSET,\n                    format='%(threadName)s %(message)s')\n\nclass PeriodicTimer(object):\n    def __init__(self, interval, callback):\n        self.interval = interval\n\n        @functools.wraps(callback)\n        def wrapper(*args, **kwargs):\n            result = callback(*args, **kwargs)\n            if result:\n                self.thread = threading.Timer(self.interval,\n                                              self.callback)\n                self.thread.start()\n\n        self.callback = wrapper\n\n    def start(self):\n        self.thread = threading.Timer(self.interval, self.callback)\n        self.thread.start()\n\n    def cancel(self):\n        self.thread.cancel()\n\n\ndef foo():\n    logging.info('Doing some work...')\n    return True\n\ntimer = PeriodicTimer(1, foo)\ntimer.start()\n\nfor i in range(2):\n    time.sleep(2)\n    logging.info('Doing some other work...')\n\ntimer.cancel()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Thread-1 Doing some work...\nThread-2 Doing some work...\nMainThread Doing some other work...\nThread-3 Doing some work...\nThread-4 Doing some work...\nMainThread Doing some other work...\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note: The callback isn't executed every interval execution.", "Interval is the time the thread waits between the callback finished the last time and the next time is called."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Perhaps the sched module will meet your needs."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sched module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sched.html#module-sched"}]}, {"text": ["Alternatively, consider using a Timer object."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Timer object", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/threading.html#timer-objects"}]}], [{"text": ["If you meant to run foo() inside a python script every 10 seconds, you can do something on these lines."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import time\n\ndef foo():\n    print \"Howdy\"\n\nwhile True:\n    foo()\n    time.sleep(10)\n</code>\n</pre>\n", "senID": 1}]]