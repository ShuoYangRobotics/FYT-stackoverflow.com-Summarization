[[{"text": ["The idiomatic way to do this in Python is to use rstrip('\\n'):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "idiomatic", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "rstrip('\\n')", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n for line in open('myfile.txt'):  # opened in text-mode; all EOLs are converted to '\\n'\n    line = line.rstrip('\\n')\n    process(line)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Each of the other alternatives has a gotcha:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["file('...').read().splitlines()"], "childNum": 0, "tag": "strong", "senID": 3, "childList": []}, {"text": ["line = line[:-1]"], "childNum": 0, "tag": "strong", "senID": 4, "childList": []}]}], [{"text": ["Simple.", "Use splitlines()"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "splitlines()", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n L = open(\"myFile.txt\", \"r\").read().splitlines();\nfor line in L: \n    process(line) # this 'line' will not have '\\n' character at the end\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What's wrong with your code?", "I find it to be quite elegant and simple.", "The only problem is that if the file doesn't end in a newline, the last line returned won't have a '\\n' as the last character, and therefore doing line = line[:-1] would incorrectly strip off the last character of the line."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "'\\n'", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "line = line[:-1]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The most elegant way to solve this problem would be to define a generator which took the lines of the file and removed the last character from each line only if that character is a newline:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def strip_trailing_newlines(file):\n    for line in file:\n        if line[-1] == '\\n':\n            yield line[:-1]\n        else:\n            yield line\n\nf = open(\"myFile.txt\", \"r\")\nfor line in strip_trailing_newlines(f):\n    # do something with line\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Long time ago, there was Dear, clean, old, BASIC code that could run on 16 kb core machines:\nlike that: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if (not open(1,\"file.txt\")) error \"Could not open 'file.txt' for reading\"\nwhile(not eof(1)) \n  line input #1 a$\n  print a$\nwend\nclose\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now, to read a file line by line, with far better hardware and software (Python), we must reinvent the wheel:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def line_input (file):\n    for line in file:\n        if line[-1] == '\\n':\n            yield line[:-1]\n        else:\n            yield line\n\nf = open(\"myFile.txt\", \"r\")\nfor line_input(f):\n    # do something with line\n</code>\n</pre>\n", "senID": 3}, {"text": ["I am induced to think that something has gone the wrong way  somewhere..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You may also consider using line.rstrip() to remove the whitespaces at the end of your line."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What do you thing about this approach?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n with open(filename) as data:\n    datalines = (line.rstrip('\\r\\n') for line in data)\n    for line in datalines:\n        ...do something awesome...\n</code>\n</pre>\n", "senID": 1}, {"text": ["Generator expression avoids loading whole file into memory and with ensures closing the file"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]