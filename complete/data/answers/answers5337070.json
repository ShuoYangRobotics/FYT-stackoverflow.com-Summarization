[[{"text": ["os.stat is a wrapper around the stat(2) system call interface."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "os.stat", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://linux.die.net/man/2/stat", "text": "stat(2)", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import os\n&gt;&gt;&gt; from stat import *\n&gt;&gt;&gt; os.stat(\"test.txt\") # returns 10-tupel, you really want the 0th element ...\nposix.stat_result(st_mode=33188, st_ino=57197013, \\\n    st_dev=234881026L, st_nlink=1, st_uid=501, st_gid=20, st_size=0, \\\n    st_atime=1300354697, st_mtime=1300354697, st_ctime=1300354697)\n\n&gt;&gt;&gt; os.stat(\"test.txt\")[ST_MODE] # this is an int, but we like octal ...\n33188\n\n&gt;&gt;&gt; oct(os.stat(\"test.txt\")[ST_MODE])\n'0100644'\n</code>\n</pre>\n", "senID": 1}, {"text": ["From here you'll recognize the typical octal permissions."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n S_IRWXU 00700   mask for file owner permissions\nS_IRUSR 00400   owner has read permission\nS_IWUSR 00200   owner has write permission\nS_IXUSR 00100   owner has execute permission\nS_IRWXG 00070   mask for group permissions\nS_IRGRP 00040   group has read permission\nS_IWGRP 00020   group has write permission\nS_IXGRP 00010   group has execute permission\nS_IRWXO 00007   mask for permissions for others (not in group)\nS_IROTH 00004   others have read permission\nS_IWOTH 00002   others have write permission\nS_IXOTH 00001   others have execute permission\n</code>\n</pre>\n", "senID": 3}, {"text": ["You are really only interested in the lower bits, so you could chop off the rest:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "bits", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; oct(os.stat(\"test.txt\")[ST_MODE])[-3:]\n'644'\n</code>\n</pre>\n", "senID": 5}, {"text": ["Sidenote: the upper parts determine the filetype, e.g."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n S_IFMT  0170000 bitmask for the file type bitfields\nS_IFSOCK    0140000 socket\nS_IFLNK 0120000 symbolic link\nS_IFREG 0100000 regular file\nS_IFBLK 0060000 block device\nS_IFDIR 0040000 directory\nS_IFCHR 0020000 character device\nS_IFIFO 0010000 FIFO\nS_ISUID 0004000 set UID bit\nS_ISGID 0002000 set-group-ID bit (see below)\nS_ISVTX 0001000 sticky bit (see below)\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Another way to do it if you don't want to work out what stat means is to use the os.access command http://docs.python.org/library/os.html#os.access\nBUT read the docs about possible security issues"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/os.html#os.access", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/os.html#os.access"}, {"text": "BUT read the docs about possible security issues", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["For instance to check permissions on the file test.dat which has read/write permissions"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n os.access(\"test.dat\",os.R_OK)\n&gt;&gt;&gt; True\n\n#Execute permissions\nos.access(\"test.dat\",os.X_OK)\n&gt;&gt;&gt; False\n\n#And Combinations thereof\nos.access(\"test.dat\",os.R_OK or os.X_OK)\n&gt;&gt;&gt; True\n\nos.access(\"test.dat\",os.R_OK and os.X_OK)\n&gt;&gt;&gt; False\n</code>\n</pre>\n", "senID": 2}], [{"text": ["oct(os.stat('file').st_mode)[4:]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There are a lot of file based functions inside the os module im sure.", "If you run os.stat(filename) you can always interprate the results."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.stat(filename)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["http://docs.python.org/library/stat.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/stat.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stat.html"}]}], [{"text": ["os.stat is analogous to the c-lib stat (man 2 stat on linux to see the information)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n stats = os.stat('file.txt')\nprint stats.st_mode\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think this is the clearest way of getting a file's the permission bits:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n stat.S_IMODE(os.lstat(\"file\").st_mode)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The os.lstat function, will in case the file is a symlink, give you the mode of the link itself, whereas os.stat dereferences the link.", "Therefore I find os.lstat the most generally useful."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here's an example case, given regular file \"testfile\" and symlink to the latter, \"testlink\":"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import stat\nimport os\n\nprint oct(stat.S_IMODE(os.lstat(\"testlink\").st_mode))\nprint oct(stat.S_IMODE(os.stat(\"testlink\").st_mode))\n</code>\n</pre>\n", "senID": 4}, {"text": ["This script outputs the following for me:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n 0777\n0666\n</code>\n</pre>\n", "senID": 6}]]