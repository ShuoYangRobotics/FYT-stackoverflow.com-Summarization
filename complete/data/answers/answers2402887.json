[[{"text": ["Ah, you've hit one of the common Python gotchas: default values are computed once, then re-used.", "So, every time __init__ is called, the same list is being used."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "same", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["This is the Pythonic way of doing what you want:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self, l=None):\n    self.l = [] if l is None else l\n</code>\n</pre>\n", "senID": 2}, {"text": ["For a bit more information, check out the Python docs (especially about three paragraphs after that heading)."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "the Python docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/compound_stmts.html#function-definitions"}]}, {"text": ["Edit: There is a much better description in another answer."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/2402887/python-instances-and-attributes-is-this-a-bug-or-i-got-it-totally-wrong/2402940#2402940", "text": "a much better description in another answer", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["The issue is that when you are saying"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self,l = []):\n</code>\n</pre>\n", "senID": 1}, {"text": ["You are telling Python to use the same list, [], for each invocation of the constructor.", "So each time obj = intlist() is called the same list is appended to. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "[]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "obj = intlist()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["What you should do instead is set l to a default value of None, which is a scalar (so your code will work as expected if it is used multiple times).", "Then, if l is None, initialize a new class member as [].", "Otherwise just assign the member variable to l."], "childNum": 6, "tag": "p", "senID": 3, "childList": [{"text": "l", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "l", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}, {"text": "[]", "childNum": 0, "tag": "code", "childList": []}, {"text": "l", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["When you set the default value of l=[] in __init__, you're actually using the same list each time.", "Instead, you could try something like:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "l=[]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class intlist:\n    def __init__(self, l=None):\n        if l is None:\n            self.l = []\n        else:\n            self.l = l\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The behavior occurs because all calls to your __init__ method share the same default list."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Try:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class intlist:\n        def __init__(self, l):\n                self.l = l if (l is not None) else []\n        def add(self,a):\n                self.l.append(a)\n</code>\n</pre>\n", "senID": 2}, {"text": ["EDIT: Use is not, per SilentGhost"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "is not", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["obj = intlist() calls your __init__() function which uses the same array for every instance of the class."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "obj = intlist()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__init__()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["obj = intlist(l=[]) creates a new array for every instance."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "obj = intlist(l=[])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["For more information I suggest reading this: http://effbot.org/zone/default-values.htm"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://effbot.org/zone/default-values.htm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/default-values.htm"}]}], [{"text": ["Be careful with default parameters of types like lists and dicts.", "Each instance of intlist gets that same list object from the default parameter."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]