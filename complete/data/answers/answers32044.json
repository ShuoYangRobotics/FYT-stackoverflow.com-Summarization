[[{"text": ["this might be way more than you need, but there is a django module called 'mptt' - this stores a hierarchical tree structure in an sql database, and includes templates for display in the view code.", "you might be able to find something useful there."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["here's the link : django-mptt"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "django-mptt", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-mptt/"}]}], [{"text": ["I think the canonical answer is: \"Don't\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What you should probably do instead is unravel the thing in your view code, so it's just a matter of iterating over (in|de)dents in the template.", "I think I'd do it by appending indents and dedents to a list while recursing through the tree and then sending that \"travelogue\" list to the template.", "(the template would then insert &lt;li&gt; and &lt;/li&gt; from that list, creating the recursive structure with \"understanding\" it."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "view", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "&lt;li&gt;", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "&lt;/li&gt;", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I'm also pretty sure recursively including template files is really a wrong way to do it..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "wrong", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["I had the same problem and I wrote a template tag.", "I know there are other tags like this out there but I needed to learn to make custom tags anyway :) I think it turned out pretty well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Read the docstring for usage instructions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://jordanovski.com/a-recursive-django-template-tag"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://jordanovski.com/a-recursive-django-template-tag", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jordanovski.com/a-recursive-django-template-tag"}]}], [{"text": ["Django has a built in template helper for this exact scenario:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.djangoproject.com/documentation/templates/#unordered-list"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.djangoproject.com/documentation/templates/#unordered-list", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/documentation/templates/#unordered-list"}]}], [{"text": ["I had a similar issue, however I had first implemented the solution using JavaScript, and just afterwards considered how I would have done the same thing in django templates."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I used the serializer utility to turn a list off models into json, and used the json data as a basis for my hierarchy."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["here is a simple snippet that does the job"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://jeanphi.fr/posts/2010/10/29/reordering-datas-extracted-using-postgres-recursive/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://jeanphi.fr/posts/2010/10/29/reordering-datas-extracted-using-postgres-recursive/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jeanphi.fr/posts/2010/10/29/reordering-datas-extracted-using-postgres-recursive/"}]}]]