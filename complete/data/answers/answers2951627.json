[[{"text": ["On linux there is a start-stop-daemon utility as part of the init.d tools."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "start-stop-daemon", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://linuxreviews.org/man/start-stop-daemon/"}]}, {"text": ["It is very flexible and allows different ways for capturing the pid of your server."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["There is also a file /etc/init.d/skeleton  which can serve as a basis for your own init.d script."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If your target platform is debian based, it makes sense to create a debina package to deploy it as it also helps getting a daemon properly integrated in the rest of the system.", "And it is not too complicated (if you have done it ten times before ;-)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["See PEP 3143 -- Standard daemon process library "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PEP 3143 -- Standard daemon process library", "tag": "a", "pos": 0, "childList": [{"text": "PEP 3143 -- Standard daemon process library", "tag": "strong"}], "childNum": 1, "href": "http://www.python.org/dev/peps/pep-3143/"}, {"text": "PEP 3143 -- Standard daemon process library", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["If you want to do it with code in python, this is a pretty standard C-method that was ported to python that I use.", "It works flawlessly, and you can even choose a file output."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport signal\ndef daemonize(workingdir='.', umask=0,outfile='/dev/null'):\n#Put in background\npid = os.fork()\nif pid == 0:\n    #First child\n    os.setsid()\n    pid = os.fork() #fork again\n    if pid == 0:\n        os.chdir(workingdir)\n        os.umask(umask)\n    else:\n        os._exit(0)\nelse:\n    os._exit(0)\n\n#Close all open resources\ntry:\n    os.close(0)\n    os.close(1)\n    os.close(2)\nexcept:\n    raise Exception(\"Unable to close standard output. Try running with 'nodaemon'\")\n    os._exit(1)\n\n#Redirect output\nos.open(outfile, os.O_RDWR | os.O_CREAT)\nos.dup2(0,1)\nos.dup2(0,2)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then, you can use signals to catch when a kill-signal was sent to the program and exit nicely.", "Example from Python Docs"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Python Docs", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/signal.html"}]}, {"code": "<pre>\n<code>\n import signal, os\n\ndef handler(signum, frame):\n    print 'Signal handler called with signal', signum\n    raise IOError(\"Couldn't open device!\")\n\n# Set the signal handler and a 5-second alarm\nsignal.signal(signal.SIGALRM, handler)\nsignal.alarm(5)\n\n# This open() may hang indefinitely\nfd = os.open('/dev/ttyS0', os.O_RDWR)\n\nsignal.alarm(0)          # Disable the alarm\n</code>\n</pre>\n", "senID": 3}], [{"text": ["There are modules that could be used to daemonize a python script."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["python-daemon implements the well-behaved daemon specification (PEP 3143)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "python-daemon", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/python-daemon"}]}, {"text": ["Also this module recently came up on github which seems more pythonic and easy to use."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/kasun/YapDi"}]}], [{"text": ["Starting it with an init.d style script is a good way.", "You take it down with POSIX Signals ... See StackOverflow, Signal handling in Python."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "init.d", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "StackOverflow, Signal handling in Python", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2163194/signal-handling-in-python"}]}], [{"text": ["Try this question or more exactly accepted solution."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/473620/how-do-you-create-a-daemon-in-python"}]}]]