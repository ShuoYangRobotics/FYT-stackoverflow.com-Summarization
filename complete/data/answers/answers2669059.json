[[{"text": ["Jeff Atwood talks about natural sort and gives an example of one way to do it in Python.", "Here is my variation on it:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Jeff Atwood", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.codinghorror.com/blog/2007/12/sorting-for-humans-natural-sort-order.html"}]}, {"code": "<pre>\n<code>\n import re \n\ndef sorted_nicely( l ): \n    \"\"\" Sort the given iterable in the way that humans expect.\"\"\" \n    convert = lambda text: int(text) if text.isdigit() else text \n    alphanum_key = lambda key: [ convert(c) for c in re.split('([0-9]+)', key) ] \n    return sorted(l, key = alphanum_key)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Use like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n s = set(['booklet', '4 sheets', '48 sheets', '12 sheets'])\nfor x in sorted_nicely(s):\n    print(x)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n 4 sheets\n12 sheets\n48 sheets\nbooklet\n</code>\n</pre>\n", "senID": 5}, {"text": ["One advantage of this method is that it doesn't just work when the strings are separated by spaces.", "It will also work for other separators such as the period in version numbers (for example 1.9.1 comes before 1.10.0)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Short and sweet:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sorted(data, key=lambda item: (int(item.partition(' ')[0])\n                               if item[0].isdigit() else float('inf'), item))\n</code>\n</pre>\n", "senID": 1}, {"text": ["This version:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Works in Python 2 and Python 3, because:\n", "tag": "none", "senID": 3}, {"text": "Will sort on the string part if the quantities are equal", "tag": "none", "senID": 4}]}, {"text": ["If you want printed output exactly as described in your example, then: "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n data = set(['booklet', '4 sheets', '48 sheets', '12 sheets'])\nr = sorted(data, key=lambda item: (int(item.partition(' ')[0])\n                                   if item[0].isdigit() else float('inf'), item))\nprint ',\\n'.join(r)\n</code>\n</pre>\n", "senID": 6}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = set(['booklet', '4 sheets', '48 sheets', '12 sheets'])\n&gt;&gt;&gt; def ke(s):\n    i, sp, _ = s.partition(' ')\n    if i.isnumeric():\n        return int(i)\n    return float('inf')\n\n&gt;&gt;&gt; sorted(a, key=ke)\n['4 sheets', '12 sheets', '48 sheets', 'booklet']\n</code>\n</pre>\n", "senID": 0}], [{"text": ["sets are inherently un-ordered.", "You'll need to create a list with the same content and sort that. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Based on SilentGhost's answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [4]: a = set(['booklet', '4 sheets', '48 sheets', '12 sheets'])\n\nIn [5]: def f(x):\n   ...:     num = x.split(None, 1)[0]\n   ...:     if num.isdigit():\n   ...:         return int(num)\n   ...:     return x\n   ...: \n\nIn [6]: sorted(a, key=f)\nOut[6]: ['4 sheets', '12 sheets', '48 sheets', 'booklet']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A simple way is to split up the strings to numeric parts and non-numeric parts and use the python tuple sort order to sort the strings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\ntokenize = re.compile(r'(\\d+)|(\\D+)').findall\ndef natural_sortkey(string):          \n    return tuple(int(num) if num else alpha for num, alpha in tokenize(string))\n\nsorted(my_set, key=natural_sortkey)\n</code>\n</pre>\n", "senID": 1}]]