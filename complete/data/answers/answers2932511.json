[[{"text": ["The other answers show what's wrong with your code.", "But there's also a built-in way to do this, if you weren't just doing this for an exercise:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 'banana'.count('a')\n3\n</code>\n</pre>\n", "senID": 1}, {"text": ["Danben gave this corrected version:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def count_letters(word, char):\n  count = 0\n  for c in word:\n    if char == c:\n      count += 1\n  return count\n</code>\n</pre>\n", "senID": 3}, {"text": ["Here are some other ways to do it, hopefully they will teach you more about Python!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Similar, but shorter for loop.", "Exploits the fact that booleans can turn into 1 if true and 0 if false:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def count_letters(word, char):\n  count = 0\n  for c in word:\n    count += (char == c)\n  return count\n</code>\n</pre>\n", "senID": 6}, {"text": ["Short for loops can generally be turned into list/generator comprehensions.", "This creates a list of integers corresponding to each letter, with 0 if the letter doesn't match char and 1 if it does, and then sums them:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "char", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def count_letters(word, char):\n  return sum(char == c for c in word)\n</code>\n</pre>\n", "senID": 8}, {"text": ["The next one filters out all the characters that don't match char, and counts how many are left:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "char", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def count_letters(word, char):\n  return len([c for c in word if c == char])\n</code>\n</pre>\n", "senID": 10}], [{"text": ["One problem is that you are using count to refer both to the position in the word that you are checking, and the number of char you have seen, and you are using char to refer both to the input character you are checking, and the current character in the string.", "Use separate variables instead.  "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "count", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "char", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "char", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Also, move the return statement outside the loop; otherwise you will always return after checking the first character. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "return", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Finally, you only need one loop to iterate over the string.", "Get rid of the outer while loop and you will not need to track the position in the string."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Taking these suggestions, your code would look like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def count_letters(word, char):\n  count = 0\n  for c in word:\n    if char == c:\n      count += 1\n  return count\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Your return is in your for loop!", "Be careful with indentation, you want the line return count to be outside the loop.", "Because the for loop goes through all characters in word, the outer while loop is completely unneeded."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "return", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "return count", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "word", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["A cleaned-up version:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def count_letters(word, to_find):\n    count = 0\n    for char in word:\n        if char == to_find:\n            count += 1\n    return count\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I see a few things wrong."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You don't even need the while.", "If you rename the char param to search,"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "search", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n for char in word:\n    if char == search:\n        count += 1\nreturn count\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You have a number of problems:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "There's a problem with your indentation as others already pointed out.", "tag": "none", "senID": 1}, {"text": "There's no need to have nested loops. Just one loop is enough.", "tag": "none", "senID": 2}, {"text": "You're using char to mean two different things, but the char variable in the for loop will overwrite the data from the parameter.", "tag": "none", "senID": 3}]}, {"text": ["This code fixes all these errors:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def count_letters(word, char):\n    count = 0\n    for c in word:\n        if char == c:\n            count += 1\n    return count\n</code>\n</pre>\n", "senID": 5}, {"text": ["A much more concise way to write this is to use a generator expression:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def count_letters(word, char):\n    return sum(char == c for c in word)\n</code>\n</pre>\n", "senID": 7}, {"text": ["Or just use the built-in method count that does this for you."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "count", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#str.count"}]}], [{"text": ["Alternatively You can use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mystring = 'banana'\nnumber = mystring.count('a')\n</code>\n</pre>\n", "senID": 1}]]