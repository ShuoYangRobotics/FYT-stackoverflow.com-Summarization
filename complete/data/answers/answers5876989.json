[[{"text": ["Matches are \"ordered\" by \"left-most, then longest\"; however \"longest\" is the term used before non-greedy was allowed, and instead means something like \"preferred number of repetitions for each atom\".", "Being left-most is more important than the number of repetitions.", "Thus, \"a+?$\" will not match the last A in \"baaaaa\" because matching at the first A starts earlier in the string."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "\"left-most, then longest\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com/search?q=leftmost+longest+match+regex"}, {"text": "more important", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["(Answer changed after OP clarification in comments.", "See history for previous text."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The non-greedy modifier only affects where the match stops, never where it starts.", "If you want to start the match as late as possible, you will have to add .+?", "to the beginning of your pattern."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "stops", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "starts", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": ".+?", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Without the $, your pattern is allowed to be less greedy and stop sooner, because it doesn't have to match to the end of the string."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "$", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "allowed", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["More details...", "In this case:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n re.search(r\"a+?$\", \"baaaaaaaa\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["the regex engine will ignore everything up until the first 'a', because that's how re.search works.", "It will match the first a, and would \"want\" to return a match, except it doesn't match the pattern yet because it must reach a match for the $.", "So it just keeps eating the a's one at a time and checking for $.", "If it were greedy, it wouldn't check for the $ after each a, but only after it couldn't match any more a's."], "childNum": 8, "tag": "p", "senID": 5, "childList": [{"text": "re.search", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["But in this case:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n re.search(r\"a+?\", \"baaaaaaaa\")\n</code>\n</pre>\n", "senID": 7}, {"text": ["the regex engine will check if it has a complete match after eating the first match (because it's non-greedy) and succeed because there is no $ in this case."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "succeed", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The presence of the $ in the regular expression does not affect the greediness of the expression.", "It merely adds another condition which must be met for the overall match to succeed.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "$", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Both a+ and a+?", "are required to consume the first a they find.", "If that a is followed by more a's, a+ goes ahead and consumes them too, while a+?", "is content with just the one.", "If there were anything more to the regex, a+ would be willing to settle for fewer a's, and a+?", "would consume more, if that's what it took to achieve a match."], "childNum": 10, "tag": "p", "senID": 1, "childList": [{"text": "a+", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a+?", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 5, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "a+", "childNum": 0, "tag": "code", "childList": []}, {"text": "a+?", "childNum": 0, "tag": "code", "childList": []}, {"text": "a+", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "a+?", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["With a+$ and a+?$, you've added another condition: match at least one a followed by the end of the string.", "a+ still consumes all of the a's initially, then it hands off to the anchor ($).", "That succeeds on the first try, so a+ is not required to give back any of its a's."], "childNum": 9, "tag": "p", "senID": 2, "childList": [{"text": "a+$", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a+?$", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "followed by", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "a+", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "childList": []}, {"text": "a+", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["On the other hand, a+?", "initially consumes just the one a before handing off to $.", "That fails, so control is returned to a+?, which consumes another a and hands off again.", "And so it goes, until a+?", "consumes the last a and $ finally succeeds.", "So yes, a+?$ does match the same number of a's as a+$, but it does so reluctantly, not greedily."], "childNum": 11, "tag": "p", "senID": 3, "childList": [{"text": "a+?", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "a+?", "childNum": 0, "tag": "code", "pos": 5, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "a+?", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "childList": []}, {"text": "a+?$", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "a+$", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["As for the leftmost-longest rule that was mentioned elsewhere, that never did apply to Perl-derived regex flavors like Python's.", "Even without reluctant quantifiers, they could always return a less-then-maximal match thanks to ordered alternation.", "I think Jan's got the right idea: Perl-derived (or regex-directed) flavors should be called eager, not greedy.  "], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "ordered alternation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.regular-expressions.info/alternation.html"}, {"text": "eager", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.regular-expressions.info/engine.html"}]}, {"text": ["I believe the leftmost-longest rule only applies to POSIX NFA regexes, which use NFA engines under under the hood, but are required to return the same results a DFA (text-directed) regex would."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["There are two issues going on, here.", "You used group() without specifying a group, and I can tell you are getting confused between the behavior of regular expressions with an explicitly parenthesized group and without a parenthesized group.", "This behavior without parentheses that you are observing is just a shortcut that Python provides, and you need to read the documentation on group() to understand it fully."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "group()", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#re.MatchObject.group"}, {"text": "with", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "without", "childNum": 0, "tag": "em", "childList": []}, {"text": "without", "childNum": 0, "tag": "em", "childList": []}, {"href": "http://docs.python.org/library/re.html#re.MatchObject.group", "text": "group()", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; string = \"baaa\"\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Here you're searching for one or more `a`s until the end of the line.\n&gt;&gt;&gt; pattern = re.search(r\"a+$\", string)\n&gt;&gt;&gt; pattern.group()\n'aaa'\n&gt;&gt;&gt; \n&gt;&gt;&gt; # This means the same thing as above, since the presence of the `$`\n&gt;&gt;&gt; # cancels out any meaning that the `?` might have.\n&gt;&gt;&gt; pattern = re.search(r\"a+?$\", string)\n&gt;&gt;&gt; pattern.group()\n'aaa'\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Here you remove the `$`, so it matches the least amount of `a` it can.\n&gt;&gt;&gt; pattern = re.search(r\"a+?\", string)\n&gt;&gt;&gt; pattern.group()\n'a'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Bottom line is that the string a+?", "matches one a, period.", "However, a+?$ matches a's until the end of the line.", "Note that without explicit grouping, you'll have a hard time getting the ?", "to mean anything at all, ever.", "In general, it's better to be explicit about what you're grouping with parentheses, anyway.", "Let me give you an example with explicit groups."], "childNum": 7, "tag": "p", "senID": 2, "childList": [{"text": "a+?", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "a+?$", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "until the end of the line", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "?", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "with", "childNum": 0, "tag": "em", "pos": 5, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; # This is close to the example pattern with `a+?$` and therefore `a+$`.\n&gt;&gt;&gt; # It matches `a`s until the end of the line. Again the `?` can't do anything.\n&gt;&gt;&gt; pattern = re.search(r\"(a+?)$\", string)\n&gt;&gt;&gt; pattern.group(1)\n'aaa'\n&gt;&gt;&gt;\n&gt;&gt;&gt; # In order to get the `?` to work, you need something else in your pattern\n&gt;&gt;&gt; # and outside your group that can be matched that will allow the selection\n&gt;&gt;&gt; # of `a`s to be lazy. # In this case, the `.*` is greedy and will gobble up\n&gt;&gt;&gt; # everything that the lazy `a+?` doesn't want to.\n&gt;&gt;&gt; pattern = re.search(r\"(a+?).*$\", string)\n&gt;&gt;&gt; pattern.group(1)\n'a'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit: Removed text related to old versions of the question."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit: Removed text related to old versions of the question.", "childNum": 0, "tag": "sub", "pos": 0, "childList": []}]}], [{"text": ["Answer to original question:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Answer to original question:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["A non-greedy subpattern will take the shortest match consistent with the whole pattern succeeding.", "In your example, the last subpattern is $, so the previous ones need to stretch out to the end of the string."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "consistent with the whole pattern succeeding", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Answer to revised question:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Answer to revised question:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["A non-greedy subpattern will take the shortest match consistent with the whole pattern succeeding. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "consistent with the whole pattern succeeding", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Another way of looking at it: A non-greedy subpattern will initially match the shortest possible match.", "However if this causes the whole pattern to fail, it will be retried with an extra character.", "This process continues until the subpattern fails (causing the whole pattern to fail) or the whole pattern matches."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Unless your question isn't including some important information, you don't need, and shouldn't use, regex for this task. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import os\n&gt;&gt;&gt; p = \"/we/shant/see/this/butshouldseethis\"\n&gt;&gt;&gt; os.path.basename(p)\nbutshouldseethis\n</code>\n</pre>\n", "senID": 1}]]