[[{"text": ["For IPv4 addresses, you may want to store them as an int unsigned and use the INET_ATON() and INET_NTOA() functions to return the IP address from its numeric value, and vice versa. "], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "IPv4 addresses", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/IPv4"}, {"text": "int unsigned", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://dev.mysql.com/doc/refman/5.1/en/miscellaneous-functions.html#function_inet-aton", "text": "INET_ATON()", "childNum": 1, "tag": "a", "childList": [{"text": "INET_ATON()", "tag": "code"}]}, {"text": "INET_ATON()", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://dev.mysql.com/doc/refman/5.1/en/miscellaneous-functions.html#function_inet-ntoa", "text": "INET_NTOA()", "childNum": 1, "tag": "a", "childList": [{"text": "INET_NTOA()", "tag": "code"}]}, {"text": "INET_NTOA()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n SELECT INET_ATON('127.0.0.1');\n\n+------------------------+\n| INET_ATON('127.0.0.1') |\n+------------------------+\n|             2130706433 | \n+------------------------+\n1 row in set (0.00 sec)\n\n\nSELECT INET_NTOA('2130706433');\n\n+-------------------------+\n| INET_NTOA('2130706433') |\n+-------------------------+\n| 127.0.0.1               | \n+-------------------------+\n1 row in set (0.02 sec)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["If you only want to store IPv4 addresses, then you can store them in a 32-bit integer field."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want to support IPv6 as well, then a string is probably the most easy-to-read/use way (though you could technically store them in a 16-byte VARBINARY() field, it would be annoying trying to generate SQL statements to select by IP address \"by hand\")"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "VARBINARY()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The most important thing is to make sure that column is indexed.", "This could make a huge difference to queries based on IP address."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Why do you need it to be faster?", "... \"Premature optimization\""], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"Premature optimization\"", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://c2.com/cgi/wiki?PrematureOptimization"}]}], [{"text": ["maybe store the integer value directly in an integer field?", "An IP address is basically 4 \"shorts\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Check it out: http://en.kioskea.net/faq/945-converting-a-32-bit-integer-into-ip"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://en.kioskea.net/faq/945-converting-a-32-bit-integer-into-ip", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.kioskea.net/faq/945-converting-a-32-bit-integer-into-ip"}]}], [{"text": ["Whatever is easiest for you to work with.", "The size or speed issue is not an issue until you know it is an issue by profiling.", "In some cases, a string might be easier to work with if you need to do partial matching.", "But as a space or performance issue, don't worry about it unless you have real cause to worry about it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]