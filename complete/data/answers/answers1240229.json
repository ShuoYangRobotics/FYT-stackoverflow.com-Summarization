[[{"text": ["No, unless you want to confuse every other programmer that looks at your code after you write it.", "self is not a keyword because it is an identifier.", "It could have been a keyword and the fact that it isn't one was a design decision."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "could", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}], [{"text": ["As a side observation, note that Pilgrim is committing a common misuse of terms here: a class method is quite a different thing from an instance method, which is what he's talking about here.", "As wikipedia puts it, \"a method is a subroutine that is exclusively associated either with a class (in which case it is called a class method or a static method) or with an object (in which case it is an instance method).\".", "Python's built-ins include a staticmethod type, to make static methods, and a classmethod type, to make class methods, each generally used as a decorator; if you don't use either, a def in a class body makes an instance method.", "E.g."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "class method", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "instance method", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "wikipedia", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Method%5F%28computer%5Fscience%29"}, {"text": "staticmethod", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "classmethod", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "def", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class X(object):\n...   def noclass(self): print self\n...   @classmethod\n...   def withclass(cls): print cls\n... \n&gt;&gt;&gt; x = X()\n&gt;&gt;&gt; x.noclass()\n&lt;__main__.X object at 0x698d0&gt;\n&gt;&gt;&gt; x.withclass()\n&lt;class '__main__.X'&gt;\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["As you see, the instance method noclass gets the instance as its argument, but the class method withclass gets the class instead."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "noclass", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "withclass", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So it would be extremely confusing and misleading to use self as the name of the first parameter of a class method: the convention in this case is instead to use cls, as in my example above.", "While this IS just a convention, there is no real good reason for violating it -- any more than there would be, say, for naming a variable number_of_cats if the purpose of the variable is counting dogs!-)"], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "extremely", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "cls", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "number_of_cats", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["The only case of this I've seen is when you define a function outside of a class definition, and then assign it to the class, e.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n    def bar(self):\n        # Do something with 'self'\n\ndef baz(inst):\n    return inst.bar()\n\nFoo.baz = baz\n</code>\n</pre>\n", "senID": 1}, {"text": ["In this case, self is a little strange to use, because the function could be applied to many classes.", "Most often I've seen inst or cls used instead."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "inst", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "cls", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I think that the main reason self is used by convention rather than being a Python keyword is because it's simpler to have all methods/functions take arguments the same way rather than having to put together different argument forms for functions, class methods, instance methods, etc."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Note that if you have an actual class method (i.e.", "one defined using the classmethod decorator), the convention is to use \"cls\" instead of \"self\"."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "actual", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "classmethod", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I once had some code like (and I apologize for lack of creativity in the example):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Animal:\n    def __init__(self, volume=1):\n        self.volume = volume\n        self.description = \"Animal\"\n\n    def Sound(self):\n        pass\n\n    def GetADog(self, newvolume):\n        class Dog(Animal):\n            def Sound(this):\n                return self.description + \": \" + (\"woof\" * this.volume)\n        return Dog(newvolume)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then we have output like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = Animal(3)\n&gt;&gt;&gt; d = a.GetADog(2)\n&gt;&gt;&gt; d.Sound()\n'Animal: woofwoof'\n</code>\n</pre>\n", "senID": 3}, {"text": ["I wasn't sure if self within the Dog class would shadow self within the Animal class, so I opted to make Dog's reference the word \"this\" instead.", "In my opinion and for that particular application, that was more clear to me."], "childNum": 5, "tag": "p", "senID": 4, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Dog", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Animal", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Dog", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Because it is a convention, not language syntax.", "There is a Python style guide that people who program in Python follow.", "This way libraries have a familiar look and feel.", "Python places a lot of emphasis on readability, and consistency is an important part of this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python style guide", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}]]