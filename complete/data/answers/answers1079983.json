[[{"text": ["Smalltalk-80, released by Xerox in 1980, used self.", "Objective-C (early 1980s) layers Smalltalk features over C, so it uses self too.", "Modula-3 (1988) and Python (late 1980s) follow this tradition."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["C++, also dating from the early 1980s, chose this instead of self.", "Since Java was designed to be familiar to C/C++ developers, it uses this too."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "this", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "this", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Smalltalk uses the metaphor of objects sending messages to each other, so \"self\" just indicates that the object is sending a message to itself."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Check the history of Python for user defined classes:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "history of Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python-history.blogspot.com/2009/02/adding-support-for-user-defined-classes.html"}]}, {"code": "<pre>\n<code>\n def spam(self,y):\n    print self.x, y\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's a choice as good as any other.", "You might ask why C++, Java, and C# chose \"this\" just as easily."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Smalltalk, which predates Java of course."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["With respect to python, there is nothing special about self.", "You can use this instead if you wanted:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "this", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Here's an example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class A(object):\n...    def __init__(this):\n...       this.x = 3\n... \n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.x\n3\n</code>\n</pre>\n", "senID": 2}, {"text": ["Although you could name it whatever you want, self is the convention for the first argument of a class function.", "Check out paragraph 5 of section 9.4 in the python documentation, which says:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "paragraph 5 of section 9.4", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#random-remarks"}]}, {"text": ["As for the convention, it started out in Smalltalk, but is also used in Object Pascal, Python, Ruby, and Objective-C.", "This answer has a great explanation."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "This answer", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/a/1080192/624900"}]}], [{"text": ["Python follows Smalltalk's footsteps in the aspect - self is used in Smalltalk as well.", "I guess the real question should be 'why did Bjarne decide to use this in C++'..."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "real", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "this", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The primary inspiration was Modula-3, which Guido was introduced to at DEC: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["-- Guido, Linux Journal Interviews Guido van Rossum"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Linux Journal Interviews Guido van Rossum", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.linuxjournal.com/article/2959"}]}], [{"text": ["I think that since it's explicity declared it makes more sense seeing an actual argument called \"self\" rather than \"this\".", "From the grammatical point of view at last, \"self\" is not as context dependant as \"this\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I don't know if I made myself clear enough, but anyway this is just a subjective appreciation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["self is not a keyword (*)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["self represents by convention the address of the current object"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You can get more info on self here."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/2709821/python-self-explained", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Why not this ?", "well it is a convention for a name.", "You can use this for your code if you like it better."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "this", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "this", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["(*) This answer has been ported and merged here from a question asking why 'self' instead of 'this' keyword.", "As the clarification in this first line could be useful for others I keep it here."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "why 'self' instead of 'this' keyword", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]