[[{"text": ["For 2.3 or after:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Enumerate(object):\n  def __init__(self, names):\n    for number, name in enumerate(names.split()):\n      setattr(self, name, number)\n</code>\n</pre>\n", "senID": 1}, {"text": ["To use:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n codes = Enumerate('FOO BAR BAZ')\n</code>\n</pre>\n", "senID": 3}, {"text": ["codes.BAZ will be 2 and so on. "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "codes.BAZ", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you only have 2.2, precede this with:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import generators\n\n def enumerate(iterable):\n   number = 0\n   for name in iterable:\n     yield number, name\n     number += 1\n</code>\n</pre>\n", "senID": 6}, {"text": ["(This was taken fromhere)"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "This was taken fromhere", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "here", "tag": "a"}]}, {"href": "http://www.velocityreviews.com/forums/t322211-enum-in-python.html", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I find the enumeration class recipe (Active State, Python Cookbook) to be very effective. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Cookbook", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/67107/"}]}, {"text": ["Plus it has a lookup function which is nice."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Pev"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["An alternative construction for constant_dic:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n constants = [\"A_CONSTANT\", \"B_CONSTANT\", \"C_CONSTANT\"]\nconstant_dic = dict([(c,i) for i, c in enumerate(constants)])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The following acts like a classisc \"written in stone\" C enum -- once defined, you can't change it, you can only read its values.", "Neither can you instantiate it.", "All you have to do is \"import enum.py\" and derive from class Enum."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # this is enum.py\nclass EnumException( Exception ):\n   pass\n\nclass Enum( object ):\n   class __metaclass__( type ):\n      def __setattr__( cls, name, value ):\n         raise EnumException(\"Can't set Enum class attribute!\")\n      def __delattr__( cls, name ):\n         raise EnumException(\"Can't delete Enum class attribute!\")\n\n   def __init__( self ):\n      raise EnumException(\"Enum cannot be instantiated!\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is the test code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n # this is testenum.py\nfrom enum import *\n\nclass ExampleEnum( Enum ):\n   A=1\n   B=22\n   C=333\n\nif __name__ == '__main__' :\n\n   print \"ExampleEnum.A |%s|\" % ExampleEnum.A\n   print \"ExampleEnum.B |%s|\" % ExampleEnum.B\n   print \"ExampleEnum.C |%s|\" % ExampleEnum.C\n   z = ExampleEnum.A\n   if z == ExampleEnum.A:\n      print \"z is A\"\n\n   try:\n       ExampleEnum.A = 4   \n       print \"ExampleEnum.A |%s| FAIL!\" % ExampleEnum.A\n   except EnumException:\n       print \"Can't change Enum.A (pass...)\"\n\n   try:\n       del ExampleEnum.A\n   except EnumException:\n       print \"Can't delete Enum.A (pass...)\"\n\n   try:\n       bad = ExampleEnum()\n   except EnumException:\n       print \"Can't instantiate Enum (pass...)\"\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This is the best one I have seen: \"First Class Enums in Python\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.activestate.com/recipes/413486/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.activestate.com/recipes/413486/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/413486/"}]}, {"text": ["It gives you a class, and the class contains all the enums.", "The enums can be compared to each other, but don't have any particular value; you can't use them as an integer value.", "(I resisted this at first because I am used to C enums, which are integer values.", "But if you can't use it as an integer, you can't use it as an integer by mistake so overall I think it is a win.", ")  Each enum is a unique object.", "You can print enums, you can iterate over them, you can test that an enum value is \"in\" the enum.", "It's pretty complete and slick."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "by mistake", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}], [{"text": ["In Python, strings are immutable and so they are better for constants than numbers.", "The best approach, in my opinion, is to make an object that keeps constants as strings:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Enumeration(object):\n    def __init__(self, possibilities):\n        self.possibilities = set(possibilities.split())\n\n    def all(self):\n        return sorted(self.possibilities)\n\n    def __getattr__(self, name):\n        if name in self.possibilities:\n            return name\n        raise AttributeError(\"Invalid constant: %s\" % name)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You could then use it like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; enum = Enumeration(\"FOO BAR\")\n&gt;&gt;&gt; print enum.all()\n['BAR', 'FOO']\n&gt;&gt;&gt; print enum.FOO\nFOO\n&gt;&gt;&gt; print enum.FOOBAR\nTraceback (most recent call last):\n  File \"enum.py\", line 17, in &lt;module&gt;\n    print enum.FOOBAR\n  File \"enum.py\", line 11, in __getattr__\n    raise AttributeError(\"Invalid constant: %s\" % name)\nAttributeError: Invalid constant: FOOBAR\n</code>\n</pre>\n", "senID": 3}]]