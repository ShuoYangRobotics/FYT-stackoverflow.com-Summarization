[[{"code": "<pre>\n<code>\n sorted((minval, value, maxval))[1]\n</code>\n</pre>\n", "senID": 0}, {"text": ["for example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; minval=3\n&gt;&gt;&gt; maxval=7\n&gt;&gt;&gt; for value in range(10):\n...   print sorted((minval, value, maxval))[1]\n... \n3\n3\n3\n3\n4\n5\n6\n7\n7\n7\n</code>\n</pre>\n", "senID": 2}], [{"text": ["This is pretty clear, actually.", "Many folks learn it quickly.", "You can use a comment to help them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n new_index = max(0, min(new_index, len(mylist)-1))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["See numpy.clip:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "numpy.clip", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.scipy.org/doc/numpy/reference/generated/numpy.clip.html"}]}, {"code": "<pre>\n<code>\n index = numpy.clip(index, 0, len(my_list) - 1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Whatever happened to my beloved readable Python language?", ":-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Seriously, just make it a function:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def addInRange (val, add, minval, maxval):\n    newval = val + add\n    if newval &lt; minval: return minval\n    if newval &gt; maxval: return maxval\n    return newval\n</code>\n</pre>\n", "senID": 2}, {"text": ["then just call it with something like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n val = addInRange (val, 7, 0, 42)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Or a simpler, more flexible, solution where you do the calculation yourself:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def restrict (val, minval, maxval):\n    if val &lt; minval: return minval\n    if val &gt; maxval: return maxval\n    return val\n\nx = restrict (x+10, 0, 42)\n</code>\n</pre>\n", "senID": 6}, {"text": ["If you wanted to, you could even make the min/max a list so it looks more \"mathematically pure\":"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n x = restrict (val+7, [0, 42])\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Why not write your own clamp() function taking three arguments: value, min, and max?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "clamp()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If your code seems too unwieldy, a function might help:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def clamp(minvalue, value, maxvalue):\n    return max(minvalue, min(value, maxvalue))\n\nnew_index = clamp(0, new_index, len(mylist)-1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Chaining max() and min() together is the normal idiom I've seen.", "If you find it hard to read, write a helper function to encapsulate the operation:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "max()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "min()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def clamp(minimum, x, maximum):\n    return max(minimum, min(x, maximum))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Avoid writing functions for such small tasks, unless you apply them often, as it will clutter up your code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["for individual values:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n min(clamp_max, max(clamp_min, value))\n</code>\n</pre>\n", "senID": 2}, {"text": ["for lists of values:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n map(lambda x: min(clamp_max, max(clamp_min, x)), values)\n</code>\n</pre>\n", "senID": 4}]]