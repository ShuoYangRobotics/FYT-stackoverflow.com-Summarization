[[{"code": "<pre>\n<code>\n L = [([1, 2, 3], 4), ([5, 6, 7], 8)]\nelement = [5, 6, 7]\n\nfor a, b in L:\n  if a == element:\n    print b\n    break\nelse:\n  print \"not found\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["But it sounds like you want to use a dictionary:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n L = [([1, 2, 3], 4), ([5, 6, 7], 8)]\nelement = [5, 6, 7]\n\nD = dict((tuple(a), b) for a, b in L)\n# keys must be hashable: list is not, but tuple is\n# or you could just build the dict directly:\n#D = {(1,2,3): 4, (5,6,7): 8}\n\nv = D.get(tuple(element))\nif v is not None:\n  print v\nelse:\n  print \"not found\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note that while there are more compact forms using next below, I imagined the reality of your code (rather than the contrived example) to be doing something at least slightly more complicated, so that using an block for the if and else becomes more readable with multiple statements."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "next", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "if", "childNum": 0, "tag": "em", "childList": []}, {"text": "else", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["(Note: this answer refers to the question text, not the example given in the code, which doesn't quite match."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Printing the element itself doesn't make any sense, because you already have it in the test:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if element in lst:\n    print element\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want the index, there's an index method:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if element in lst:\n    print lst.index(element)\n</code>\n</pre>\n", "senID": 4}, {"text": ["And, on the off chance that you're asking this because you want to loop through a list and do things with both the value and the index, be sure to use the enumerate idiom:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n for i, val in enumerate(lst):\n  print \"list index\": i\n  print \"corresponding value\": val\n</code>\n</pre>\n", "senID": 6}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; aList = [ ([1,2,3],4) , ([5,6,7],8) ]\n&gt;&gt;&gt; element = [5,6,7]\n</code>\n</pre>\n", "senID": 0}, {"text": ["if you only wish to check if the first element is present"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; any(element==x[0] for x in aList)\nTrue\n</code>\n</pre>\n", "senID": 2}, {"text": ["to find the corresponding value"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; next(x[1] for x in aList if element==x[0])\n8\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; aList = [ ([1,2,3],4) , ([5,6,7],8) ]\n&gt;&gt;&gt; for i in aList:\n...     if [5,6,7] in i:\n...          print i[-1]\n...\n8\n</code>\n</pre>\n", "senID": 0}], [{"text": ["[5, 6, 7] is not an item of the aList you show, so the if will fail, and your question as posed just doesn't pertain.", "More generally, the loop implied in such an if tosses away the index anyway.", "A way to make your code snippet work would be, instead of the if, to have something like (Python 2.6 or better -- honk if you need to work on different versions):"], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "[5, 6, 7]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "not", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "aList", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n where = next((x for x in aList if x[0] == element), None)\nif where:\n  print(x[1])\n</code>\n</pre>\n", "senID": 1}, {"text": ["More generally, the expressions in the next and in the print must depend on the exact \"fine grained\" structure of aList -- in your example, x[0] and x[1] work just fine, but in a slightly different example you may need different expressions.", "There is no \"generic\" way that totally ignores how your data is actually structured and \"magically works anyway\"!-)"], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "next", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "aList", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "x[0]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "x[1]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["One possible solution."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n aList = [ ([1,2,3],4) , ([5,6,7],8) ]\nelement = [5,6,7]\n\n&gt;&gt;&gt; print(*[y for x,y in aList if element == x])\n8\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The code in your question is sort of weird.", "But, assuming you're learning the basics:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["it's actually simple: list.index(element).", "Assuming of course, the element only appears once.", "If it appears more than once, you can use the extra parameters:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "list.index(element)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["list.index(element, start_index): here it will start searching from start_index.", "There's also:\nlist.index(element, start_index, end_index): I think it's self explanitory."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "list.index(element, start_index)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "start_index", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "list.index(element, start_index, end_index)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you're looping on a list and you want to loop on both the index and the element, the pythonic way is to enumerate the list:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "enumerate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for index, element in enumerate(some_list):\n    # here, element is some_list[index]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Here, enumerate is a function that takes a list and returns a list of tuples.", "Say your list is ['a', 'b', 'c'], then enumerate would return: [ (1, 'a'), (2, 'b'), (3, 'c') ]"], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "enumerate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "['a', 'b', 'c']", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "enumerate", "childNum": 0, "tag": "code", "childList": []}, {"text": "[ (1, 'a'), (2, 'b'), (3, 'c') ]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["When you iterate over that, each item is a tuple, and you can unpack that tuple."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["tuple unpacking is basically like this:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; t = (1, 'a')\n&gt;&gt;&gt; x, y = t\n&gt;&gt;&gt; t\n(1, 'a')\n&gt;&gt;&gt; x\n1\n&gt;&gt;&gt; y\n'a'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 8}]]