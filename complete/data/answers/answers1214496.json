[[{"text": ["Here's an example of how you can extract environment variables from a batch or cmd file without creating a wrapper script.", "Enjoy."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import print_function\nimport sys\nimport subprocess\nimport itertools\n\ndef validate_pair(ob):\n    try:\n        if not (len(ob) == 2):\n            print(\"Unexpected result:\", ob, file=sys.stderr)\n            raise ValueError\n    except:\n        return False\n    return True\n\ndef consume(iter):\n    try:\n        while True: next(iter)\n    except StopIteration:\n        pass\n\ndef get_environment_from_batch_command(env_cmd, initial=None):\n    \"\"\"\n    Take a command (either a single command or list of arguments)\n    and return the environment created after running that command.\n    Note that if the command must be a batch file or .cmd file, or the\n    changes to the environment will not be captured.\n\n    If initial is supplied, it is used as the initial environment passed\n    to the child process.\n    \"\"\"\n    if not isinstance(env_cmd, (list, tuple)):\n        env_cmd = [env_cmd]\n    # construct the command that will alter the environment\n    env_cmd = subprocess.list2cmdline(env_cmd)\n    # create a tag so we can tell in the output when the proc is done\n    tag = 'Done running command'\n    # construct a cmd.exe command to do accomplish this\n    cmd = 'cmd.exe /s /c \"{env_cmd} &amp;&amp; echo \"{tag}\" &amp;&amp; set\"'.format(**vars())\n    # launch the process\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, env=initial)\n    # parse the output sent to stdout\n    lines = proc.stdout\n    # consume whatever output occurs until the tag is reached\n    consume(itertools.takewhile(lambda l: tag not in l, lines))\n    # define a way to handle each KEY=VALUE line\n    handle_line = lambda l: l.rstrip().split('=',1)\n    # parse key/values into pairs\n    pairs = map(handle_line, lines)\n    # make sure the pairs are valid\n    valid_pairs = filter(validate_pair, pairs)\n    # construct a dictionary of the pairs\n    result = dict(valid_pairs)\n    # let the process finish\n    proc.communicate()\n    return result\n</code>\n</pre>\n", "senID": 1}, {"text": ["So to answer your question, you would create a .py file that does the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n env = get_environment_from_batch_command('proc1')\nsubprocess.Popen('proc2', env=env)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Since you're apparently in Windows, you need a Windows answer."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Create a wrapper batch file, eg.", "\"run_program.bat\", and run both programs:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n @echo off\ncall proc1.bat\nproc2\n</code>\n</pre>\n", "senID": 2}, {"text": ["The script will run and set its environment variables.", "Both scripts run in the same interpreter (cmd.exe instance), so the variables prog1.bat sets will be set when prog2 is executed."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "will", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Not terribly pretty, but it'll work."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["(Unix people, you can do the same thing in a bash script: \"source file.sh\"."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["As you say, processes don't share the environment - so what you literally ask is not possible, not only in Python, but with any programming language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What you can do is to put the environment variables in a file, or in a pipe, and either"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "can", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "have the parent process read them, and pass them to proc2 before proc2 is created, or", "tag": "none", "senID": 2}, {"text": "have proc2 read them, and set them locally", "tag": "none", "senID": 3}]}, {"text": ["The latter would require cooperation from proc2; the former requires that the variables become known before proc2 is started."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Environment is inherited from the parent process.", "Set the environment you need in the main script, not a subprocess (child)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Two things spring to mind: (1) make the processes share the same environment, by combining them somehow into the same process, or (2) have the first process produce output that contains the relevant environment variables, that way Python can read it and construct the environment for the second process.", "I think (though I'm not 100% sure) that there isn't any way to get the environment from a subprocess as you're hoping to do."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The Python standard module multiprocessing have a Queues system that allow you to pass pickle-able object to be passed through processes.", "Also processes can exchange messages (a pickled object) using os.pipe.", "Remember that resources (e.g : database connection) and handle (e.g : file handles) can't be pickled."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "The Python standard module multiprocessing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html"}]}, {"text": ["You may find this link interesting :\nCommunication between processes with multiprocessing"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Communication between processes with multiprocessing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.doughellmann.com/PyMOTW/multiprocessing/communication.html"}]}, {"text": ["Also the PyMOTw about multiprocessing worth mentioning :\nmultiprocessing Basics"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "multiprocessing Basics", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.doughellmann.com/PyMOTW/multiprocessing/basics.html"}]}, {"text": ["sorry for my spelling"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]