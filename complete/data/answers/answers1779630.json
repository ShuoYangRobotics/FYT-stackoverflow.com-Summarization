[[{"text": ["VirtualEnv. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "VirtualEnv", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/virtualenv"}]}, {"text": ["See previous answer here."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1515850/how-to-run-both-python-2-6-and-3-0-on-the-same-windows-xp-box/1517045#1517045"}]}, {"text": ["The other tool you should look at is pip which is great for installing particular versions of a library into a virtual environment.", "If you need to run v 1.0 of a library in python v 2.x for one application and 1.1 of the same library in python v 2.x, for example, you will need virtualenv plus a means of installing a particular version in that environment.", "Virtualenv + pip is your best choice."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Use batch files to run scripts, write in notepad for example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nc:\\python26\\python.exe C:\\Script_B\\B.py\n</pre>\n", "senID": 1}, {"text": ["and save it as runB.bat (or anything .bat).", "It will run with interpreter in c:\\python26\\python.exe file specified after a whitespace."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["One solution would be to craft a batch file that invokes the correct interpreter for a given application.", "THis way, you can install additional interpreters in separate folders."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Probably not perfect but it works."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Have you considered compiling them to EXEs?", "Once you do that, all you have to do is call the EXE, for which the machine does not require python to be installed.", "All the required modules etc are packaged with the distribution when you compile."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "compiling them to EXEs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.py2exe.org/"}]}], [{"text": ["write a python script that mimics the way unix shells handle scirpts -- look at the first line and see if it matches #!(name-of-shell).", "Then have your python script exec that interpreter and feed it the rest of its arguments."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then, associate .py with your script. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It looks like the best solution is a batch file that sets the file association before running the appropriate version of Python, as mentioned in the comments to one of the answers here: http://stackoverflow.com/questions/1515850/how-to-run-both-python-2-6-and-3-0-on-the-same-windows-xp-box"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/1515850/how-to-run-both-python-2-6-and-3-0-on-the-same-windows-xp-box", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1515850/how-to-run-both-python-2-6-and-3-0-on-the-same-windows-xp-box"}]}]]