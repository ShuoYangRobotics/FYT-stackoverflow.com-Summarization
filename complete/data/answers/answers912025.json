[[{"text": ["using dir() and imp module"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "dir()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#dir"}, {"href": "http://docs.python.org/library/imp.html", "text": "imp module", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["When I was a kind and just beginning programming in Python I've written this for my modular IRC bot:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Load plugins\n\n    _plugins = []\n\n    def ifName(name):\n        try:\n            return re.match('([^_.].+)\\.[^.]+', a).group(1)\n        except:\n            return None\n\n    def isValidPlugin(obj):\n        from common.base import PluginBase\n        try:\n            if obj.__base__ == PluginBase:\n                return True\n            else:\n                return False\n        except:\n            return False\n\n    plugin_names = set(ifilter(lambda a: a!=None, [ifName(a) for a in os.listdir(os.path.join(os.getcwd(), 'plugins'))]))\n    for plugin_name in plugin_names:\n        try:\n            plugin = __import__('plugins.'+plugin_name, fromlist=['plugins'])\n            valid_plugins = filter(lambda a: isValidPlugin(a), [plugin.__getattribute__(a) for a in dir(plugin)])\n            _plugins.extend(valid_plugins)\n        except Exception, e:\n            logger.exception('Error loading plugin %s', plugin_name)\n\n    # Run plugins\n\n    _plugins = [klass() for klass in _plugins]\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's not secure or \"right\" way, but maybe it we'll be useful nevertheless.", "It's very old code so please don't beat me."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "very", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}], [{"text": ["I think the best way to do this sort of plugin thing is using entry_points and the API for querying them."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "entry_points", "tag": "a", "pos": 0, "childList": [{"text": "entry_points", "tag": "code"}], "childNum": 1, "href": "http://packages.python.org/distribute/setuptools.html#dynamic-discovery-of-services-and-plugins"}, {"text": "entry_points", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://packages.python.org/distribute/pkg_resources.html#convenience-api", "text": "API for querying them", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Use pkgutil.walk_packages."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pkgutil.walk_packages", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/pkgutil.html#pkgutil.walk_packages"}]}], [{"text": ["The solution above traversing the filesystem for finding submodules is ok as long as you implement every plugin as a filesystem based module."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A more flexible way would be an explicit plugin list in your main module, and have every plugin (whether a module created by file, dynamically, or even instance of a class) adding itself to that list explicitly.", "Maybe via a registerPlugin function."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Remember: \"explicit is better than implicit\" is part of oython zen."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can try globbing the directory:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "glob", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import os\nimport glob\n\nmodules = glob.glob(os.path.join('/some/path/to/modules', '*.py'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you can try importing them:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n checked_modules\nfor module in modules:\n    try:\n        __import__(module, globals(), locals()) # returns module object\n    except ImportError:\n        pass\n    else:\n        checked_modules.append(module)\n</code>\n</pre>\n", "senID": 3}]]