[[{"text": ["Did you try either of these?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for _, myvar in mylist:\n    #Do stuff\n</code>\n</pre>\n", "senID": 1}, {"text": ["works fine in Python and is relatively idiomatic."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I suppose you could do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for myvar in (t[1] for t in mylist):\n    pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["But frankly I think you should just ignore the pylint warning in this case--it's beautiful enough and won't cause any confusion (which is why you want to beauty in the first place)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I write for _, myvar2 in mylist when I want to emphasize that only myvar2 is used.  "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "for _, myvar2 in mylist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "myvar2", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["And I write for myvar1, myvar2 in mylist when I want to remind the reader (usually me) what the record structure is."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "for myvar1, myvar2 in mylist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The _ name is just a naming convention for a throw-away value.", "The CPython interpreter makes the variable assignment for it just like it would with any other variable name (fortunately, *STORE_FAST* is a very cheap operation).", "In contrast, the PyPy interpreter will identify the unused variable assignment as dead code, so you get the optimization for free regardless of how you write it."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "PyPy interpreter", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pypy.org/"}]}, {"text": ["If you're curious about how CPython interprets your code, the dis module can provide useful insights:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "dis module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/dis.html#module-dis"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from dis import dis\n&gt;&gt;&gt; def f(lot):\n        for _, var2 in lot:\n            print var2\n\n\n&gt;&gt;&gt; dis(f)\n  2           0 SETUP_LOOP              25 (to 28)\n              3 LOAD_FAST                0 (lot)\n              6 GET_ITER            \n        &gt;&gt;    7 FOR_ITER                17 (to 27)\n             10 UNPACK_SEQUENCE          2\n             13 STORE_FAST               1 (_)\n             16 STORE_FAST               2 (var2)\n\n  3          19 LOAD_FAST                2 (var2)\n             22 PRINT_ITEM          \n             23 PRINT_NEWLINE       \n             24 JUMP_ABSOLUTE            7\n        &gt;&gt;   27 POP_BLOCK           \n        &gt;&gt;   28 LOAD_CONST               0 (None)\n             31 RETURN_VALUE\n</code>\n</pre>\n", "senID": 4}, {"text": ["As the other posters have mentioned, the warnings from pylint can sometimes be inane.", "If you prefer a short variable name in your code, then just ignore the pylint complaint.", "As Francis Avila pointed out, pylint should't complain about _ in this context."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "pylint", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "_", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["In addition to @RaymondHettinger's answer: Pylint also does not complain about unused variables if their names start with a single underscore.", "This means that you can use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for _myvar1, myvar2 in mylist:\n</code>\n</pre>\n", "senID": 1}, {"text": ["getting the best of both worlds: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "no Pylint warning, ", "tag": "none", "senID": 3}, {"text": "and information about the record structure", "tag": "none", "senID": 4}]}, {"text": ["This works for function / method prototypes too and avoids warnings about unused parameters, which you can often get when deriving from a base class in an OO framework. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I would say Python is all about writing readable code - any \"beauty\" is merely a side-effect."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "readable", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["The first item of the tuple could be eliminated like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for myvar2 in zip(*mylist)[1]:\n    # Do stuff with myvar2\n</code>\n</pre>\n", "senID": 2}, {"text": ["But I'm not sure I'd really recommend it.", "Personally I would just use:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for myvar1, myvar2 in mylist:\n    # Do stuff with myvar2\n</code>\n</pre>\n", "senID": 4}, {"text": ["... and ignore pylint."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n tu = [(12,'sea'),(478,'badada'),(789,'zut')]\n\nfor x,x in tu:\n    print x\n</code>\n</pre>\n", "senID": 0}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n sea\nbadada\nzut\n</code>\n</pre>\n", "senID": 2}, {"text": [], "childNum": 0, "tag": "h2", "senID": 3, "childList": []}]]