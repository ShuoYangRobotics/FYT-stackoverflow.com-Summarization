[[{"text": ["Don't try.", "Just don't.", "Make a copy or generate a new list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Just make yourself a new list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def purge(self):\n    self.list = [object for object in self.list if not object.my_cond()]\n    return self.list\n</code>\n</pre>\n", "senID": 1}, {"text": ["Reserve any optimization until you've profiled and found that this method really is the bottleneck of your application.", "(I bet it won't be."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["In python variables are actually labels to data.", "Duplicating a list is, for the most part, making a new set of pointers to the data from the first list.", "Don't feel too bad about it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["List comprehensions are your friend."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["e.g."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = range(20)\n&gt;&gt;&gt; a\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n&gt;&gt;&gt; [ x for x in a if x % 2 == 0 ]\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Filter (or list comprehension) IS the way to go.", "If you want to do it inplace, something like this would work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n purge = []\nfor i,object in enumerate(self.list):\n    if object.mycond()\n        purge.append(i)\nfor i in reversed(purge):\n    del self.list[i]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or alternatively, the purge list can be made with a comprehension, a shortcut version looks like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for i in reversed([ i for (i,o) in enumerate(self.list) if o.mycond() ]):\n    del self.list[i]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Your second solution in which you duplicate the list is the right way to go.", "Afterward you can just replace the old list with the duplicate if need be."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's perfectly safe to shorten the list in place if you do it in reverse!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a=range(20)\n&gt;&gt;&gt; for i in reversed(range(len(a))):\n...     if a[i]%2: del a[i]\n... \n&gt;&gt;&gt; a\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Another way is to reassign the whole slice"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a=range(20)\n&gt;&gt;&gt; a[:]=(x for x in a if not x%2)\n&gt;&gt;&gt; a\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n</code>\n</pre>\n", "senID": 3}, {"text": ["If the items in the list are unique, this works too"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a=range(20)\n&gt;&gt;&gt; for item in reversed(a):\n...  if item%2: a.remove(item)\n... \n&gt;&gt;&gt; a\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n</code>\n</pre>\n", "senID": 5}, {"text": ["Here is some more explanation in response to yuri's comment"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Suppose we have"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a=[0,1,2,3,4,5]\n</code>\n</pre>\n", "senID": 8}, {"text": ["Now trying naively to delete the 3rd and 4th items"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; del a[3]\n&gt;&gt;&gt; del a[4]\n&gt;&gt;&gt; a\n[0, 1, 2, 4] # didn't work because the position of all the item with index &gt;=3 was changed\n</code>\n</pre>\n", "senID": 10}, {"text": ["However if we do the del's in the opposite order"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "del", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a=[0,1,2,3,4,5]\n&gt;&gt;&gt; del a[4]\n&gt;&gt;&gt; del a[3]\n&gt;&gt;&gt; a\n[0, 1, 2, 5] # this is the desired result\n</code>\n</pre>\n", "senID": 12}, {"text": ["Now extend that idea over a for loop with a removal condition, and you see that removal from the live list is possible"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}], [{"code": "<pre>\n<code>\n indeces = []\nminus = 0\n\nfor i in range(self.list):\n    if cond(self.list[i]):\n        indeces.append(i)\n\nfor i in indeces:\n    self.list = self.list[:(i-minus)].extend(self.list[i-minus+1:])\n</code>\n</pre>\n", "senID": 0}]]