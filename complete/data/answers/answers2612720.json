[[{"text": ["You can't.", "Strings contain characters.", "Characters are not numeric types, and you cannot calculate their xor."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can convert the characters to integers and xor those instead:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n l = [ord(a) ^ ord(b) for a,b in zip(s1,s2)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want to do this then a string is probably the wrong datatype to use in the first place."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you want to operate on bytes or words then you'll be better to use Python's array type instead of a string.", "If you are working with fixed length blocks then you may be able to use H or L format to operate on words rather than bytes, but I just used 'B' for this example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import array\n&gt;&gt;&gt; a1 = array.array('B', 'Hello, World!')\n&gt;&gt;&gt; a1\narray('B', [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33])\n&gt;&gt;&gt; a2 = array.array('B', ('secret'*3))\n&gt;&gt;&gt; for i in range(len(a1)):\n    a1[i] ^= a2[i]\n\n\n&gt;&gt;&gt; a1.tostring()\n';\\x00\\x0f\\x1e\\nXS2\\x0c\\x00\\t\\x10R'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Do you mean something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s1 = '00000001'\ns2 = '11111110'\nint(s1,2) ^ int(s2,2)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is your string XOR'er, presumably for some mild form of encryption:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; src = \"Hello, World!\"\n&gt;&gt;&gt; code = \"secret\"\n&gt;&gt;&gt; xorWord = lambda ss,cc: ''.join(chr(ord(s)^ord(c)) for s,c in zip(ss,cc*100))\n&gt;&gt;&gt; encrypt = xorWord(src, code)\n&gt;&gt;&gt; encrypt\n';\\x00\\x0f\\x1e\\nXS2\\x0c\\x00\\t\\x10R'\n&gt;&gt;&gt; decrypt = xorWord(encrypt,code)\n&gt;&gt;&gt; print decrypt\nHello, World!\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that this is an extremely weak form of encryption.", "Watch what happens when given a blank string to encode:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "extremely", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; codebreak = xorWord(\"      \", code)\n&gt;&gt;&gt; print codebreak\nSECRET\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Below illustrates XORing string s with m, and then again to reverse the process:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s='hello, world'\n&gt;&gt;&gt; m='markmarkmark'\n&gt;&gt;&gt; s=''.join(chr(ord(a)^ord(b)) for a,b in zip(s,m))\n&gt;&gt;&gt; s\n'\\x05\\x04\\x1e\\x07\\x02MR\\x1c\\x02\\x13\\x1e\\x0f'\n&gt;&gt;&gt; s=''.join(chr(ord(a)^ord(b)) for a,b in zip(s,m))\n&gt;&gt;&gt; s\n'hello, world'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def xor_strings(s1, s2):\n    max_len = max(len(s1), len(s2))\n    s1 += chr(0) * (max_len - len(s1))\n    s2 += chr(0) * (max_len - len(s2))\n    return ''.join([chr(ord(c1) ^ ord(c2)) for c1, c2 in zip(s1, s2)])\n</code>\n</pre>\n", "senID": 0}]]