[[{"text": ["Everything \"except\" is why we have if-statements; and why os.walk's list of directories is a mutable list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for path, dirs, files in os.walk( 'root' ):\n    if 'coke' in dirs:\n        dirs.remove('coke')\n        dirs.remove('pepsi')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This command will leave only the desired files in their original directories:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n find test \\( ! -path \"test/mtndew/livewire/*\" ! -path \"test/icecream/cupcake/*\" \\) -delete\n</code>\n</pre>\n", "senID": 1}, {"text": ["No need for cpio.", "It works on Ubuntu, Debian 5, and Mac OS X."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["On Linux, it will report that it cannot delete non-empty directories, which is exactly the desired result.", "On Mac OS X, it will quietly do the right thing."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You could do something based on Python's os.walk function:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python's os.walk function", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/os.html"}]}, {"code": "<pre>\n<code>\n import os\nfor root, dirs, files in os.walk(top, topdown=False):\n    for name in files:\n        os.remove(os.path.join(root, name))\n    for name in dirs:\n        os.rmdir(os.path.join(root, name))\n</code>\n</pre>\n", "senID": 1}, {"text": ["...just add something to ignore the paths you're interested in."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["find's -prune comes to mind, but it's a pain to get it to work for specific paths (icecream/cupcake/) rather than specific directories (cupcake/)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "find", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "-prune", "childNum": 0, "tag": "code", "childList": []}, {"text": "icecream/cupcake/", "childNum": 0, "tag": "code", "childList": []}, {"text": "cupcake/", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Personally, I'd just use cpio and hard-link (to avoid having to copy them) the files in the directories you want to keep to a new tree and then remove the old one:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "cpio", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n find test -path 'test/icecream/cupcake/*' -o -path 'test/mtndew/livewire/*' | cpio -padluv test-keep\nrm -rf test\n</code>\n</pre>\n", "senID": 2}, {"text": ["That'll also keep your existing directory structure for the directories you intend to keep."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Move the stuff you want to keep elsewhere, then delete what's left."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["use find."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "find", "tag": "a", "pos": 0, "childList": [{"text": "find", "tag": "code"}], "childNum": 1, "href": "http://unixhelp.ed.ac.uk/CGI/man-cgi?find"}, {"text": "find", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Your command will look something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n find $directory \\( -prune 'some pattern' \\) -delete\n</code>\n</pre>\n", "senID": 2}], [{"text": ["A oneliner to solve the problem:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["find .", "|grep -v \"test/icecream/cupcake/\"| grep -v \"test/mtndew/livewire/\"|xargs rm -r"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "find . |grep -v \"test/icecream/cupcake/\"| grep -v \"test/mtndew/livewire/\"|xargs rm -r", "childNum": 0, "tag": "del", "pos": -1, "childList": []}]}, {"text": ["Removed since it does not work"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["this might get you into trouble if have file names with space in them, and it might keep more files then you want if there are other trees that match the patterns."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["A somewhat better solution:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n find . |sed \"s/.*/rm '&amp;'/\"|grep -v \"rm './test/icecream/cupcake/\"| grep -v \"rm './test/mtndew/livewire/\"|sh\n</code>\n</pre>\n", "senID": 5}, {"text": ["Not actually tested, if it breaks you get to keep both parts. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Edit: As Dennis points its not only two parts that it breaks into :-) corrected the typos in the second example and removed the first"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["It works for me with find using two steps: first delete the files allowed, then their empty directories! "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n find -x -E ~/Desktop/test -not \\( -type d -regex '.*/(cupcake|livewire)/*.*' -prune \\) -print0 | xargs -0 ls -1 -dG \n\n# delete the files first\n\n# Mac OS X 10.4 \nfind -x -E ~/Desktop/test -not \\( -type d -regex '.*/(cupcake|livewire)/*.*' -prune \\) -type f -exec /bin/rm -fv '{}' \\; \n\n# Mac OS X 10.5 \nfind -x -E ~/Desktop/test -not \\( -type d -regex '.*/(cupcake|livewire)/*.*' -prune \\) -type f -exec /bin/rm -fv '{}' + \n\n# delete empty directories \nfind -x ~/Desktop/test -type d -empty -delete\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Like others I have used os.walk and os.path.join to build the list of files to delete, with fnmatch.fnmatch to select files that must be included or excluded:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #-------------------------------#\n# make list of files to display #\n#-------------------------------#\ndisplayList = []\nfor imageDir in args :\n    for root,dirs,files in  os.walk(imageDir) :\n        for filename in files :\n            pathname = os.path.join( root, filename ) \n            if fnmatch.fnmatch( pathname, options.includePattern ) :\n                displayList.append( pathname )\n\n\n#----# now filter out excluded patterns #----#\ntry :\n    if len(options.excludePattern) &gt; 0 :\n        for pattern in options.excludePattern :\n            displayList = [pathname for pathname in displayList if not fnmatch.fnmatch( pathname, pattern ) ]\nexcept ( AttributeError, TypeError ) :\n    pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["If fnmatch isn't enough, you can use the re module to test patterns."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here I have built the file list before I do anything with it, but you could process the files as they are generated.  "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The try/except block...is there in case my options class instance doesn't have an exclude pattern, or if it causes an exception in fnmatch because it is the wrong type."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["A limitation of this method is that it first includes files matching a pattern, then excludes.", "If you need more flexibility than this (include matching pattern a, but not pattern b unless pattern c...) well, then the fragment above isn't up to  it.", "In fact, working through this exercise, you start to see why the find command syntax is the way it is.", "Seems clunky, but in fact it is exactly the way to do this."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "includes", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "then excludes", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["But if you generate a list, you can filter it according to whatever inclusion/exclusion rules you need.  "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["One nice thing about generating a list is you can check it before you go ahead with the deletion.", "This is sort of a '--dryrun' option.", "You can do this interactively in the python interpreter, print the list to see how it looks, apply the next filter, see if it has removed too much or too little and so on."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"code": "<pre>\n<code>\n find /path/to/test/ -depth -mindepth 1 \\\n! -path \"/path/to/test/icecream/cupcake/*\" \\\n! -path \"/path/to/test/icecream/cupcake\" \\\n! -path \"/path/to/test/icecream\" \\\n! -path \"/path/to/test/mtndew/livewire/*\" \\\n! -path \"/path/to/test/mtndew/livewire\" \\\n! -path \"/path/to/test/mtndew\"\n -delete -print\n</code>\n</pre>\n", "senID": 0}, {"text": ["It's a bit tedious to write all the paths to preserve but thi is the only way to use find alone."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]