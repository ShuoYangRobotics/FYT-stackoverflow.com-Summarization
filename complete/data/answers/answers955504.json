[[{"text": ["whereis locates man pages, which locates binaries.", "So try which dot."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "whereis", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "which", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "which dot", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You need to add the path to the 'dot' executable in Python's environment.", "You can do this by modifying the PATH variable in os.environ"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Troubleshooting tips: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A. add "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["print os.getcwd()"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "print os.getcwd()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["on the line before os.system(\"dot etc."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Just to make sure that the current directory is the one with the 6.dot file."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "6.dot", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["B.", "Make sure that the dot program is in your path."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "dot", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["which dot"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "which dot", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["C. Use the full path to the dot program in your os.system command, see what happens then."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "dot", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Two suggestions"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Change this"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n os.environ['PATH'] += \";\"+\"/usr/local/bin/dot\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["to this"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n os.environ['PATH'] += \":\"+\"/usr/local/bin\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then your good."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["EDIT: Note that I forgot to remove the /dot from the PATH variable myself (oops) - PATH is a colon delimited list of directories."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["If you also generate your Dot files in Python, pydot does what you want in a more Pythonic way:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pydot", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pydot/"}]}, {"code": "<pre>\n<code>\n import pydot\ndot = pydot.Dot()\nn1, n2 = pydot.Node(\"a\"), pydot.Node(\"b\")\ndot.add_node(n1)\ndot.add_node(n2)\ndot.add_edge(pydot.Edge(n1,n2))\ndot.write_png(\"graph.png\", prog='neato')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Often the solution is in front of us,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print os.system(\"/usr/local/bin/dot -o9.png -Tpng 6.dot\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also you can try for all the dots in a specified folder"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import glob\nfor filedot in glob.glob('*.dot')\n    print os.system(\"/usr/local/bin/dot -o9.png -Tpng %(filedot)s\"%locals())\n    #print os.system(\"/usr/local/bin/dot -o9.png -Tpng %s\"%filedot)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I cannot recall btw if it is "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n /usr/local/bin/dot -o9.png -Tpng fdot.dot\n</code>\n</pre>\n", "senID": 6}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n /usr/local/bin/dot -o 9.png -Tpng fdot.dot\n</code>\n</pre>\n", "senID": 8}], [{"text": ["You should change the PATH line so it includes the directory which contains dot.", "That directory is /usr/local/bin, without /dot."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "dot", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "/usr/local/bin", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "/dot", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Try this: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # -*- coding: utf-8 -*-\nimport os\nimport sys\n\nprint os.environ['PATH']\n\nos.environ['PATH'] += \":\"+\"/usr/local/bin\"\nprint os.environ['PATH']\n\nprint os.getcwd()\n\nfrom subprocess import check_call\nprint check_call([\"dot\", \"-o9.png\", \"-Tpng\", \"./6.dot\"])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Taken from the question to try and maintain some sort of sanity here."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Instead of:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print os.system(\"dot -o9.png -Tpng ./6.dot\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["try this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from subprocess import check_call\nprint check_call(\"dot -o9.png -Tpng ./6.dot\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["If exit status of dot program is 0, the status is printed.", "If dot returns non-zero status, it raises CalledProcessError (and shows returned status).", "If dot doesn't exist in current path, OSError is raised on Linux or WindowsErroor on Windows (I don't know which exception is raised under Mac OS, but I assume OSError)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["EDIT: Code above will give you the hint if you have no dot executable or 6.dot file in current path settings."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["check_call does not use the same syntax as os.system, so you should try changing the corresponding line this way:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "check_call", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.system", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n print check_call([\"dot\", \"-o9.png\", \"-Tpng\", \"./6.dot\"])\n</code>\n</pre>\n", "senID": 1}, {"text": ["The executable name is the first item in the array, and each parameter must be in another item of the array.", "Otherwise you will always get a \"No such file\" error because there is no executable named \"dot -o9.png ...\" in your PATH."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "always", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["One problem is in this line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n os.environ['PATH'] += \":\"+\"/usr/local/bin/dot\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["You don't put the name of the executable in the path, but the directory containing the executable.", "So that should be:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n os.environ['PATH'] += \":\"+\"/usr/local/bin\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["And as pointed out in another comment, the arguments to check_call are not the same as os.system."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "check_call", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.system", "childNum": 0, "tag": "code", "childList": []}]}]]