[[{"text": ["Why read the entire file to change four bytes at the beginning?", "Shouldn't this work?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n with open(\"filename.txt\", \"r+b\") as f:\n     f.write(chr(10) + chr(20) + chr(30) + chr(40))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Even if you need to read these bytes from the file to calculate the new values, you could still do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n with open(\"filename.txt\", \"r+b\") as f:\n    fourbytes = [ord(b) for b in f.read(4)]\n    fourbytes[0] = fourbytes[1]  # whatever, manipulate your bytes here\n    f.seek(0)\n    f.write(\"\".join(chr(b) for b in fourbytes))\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n C:\\junk&gt;copy con qwerty.txt\nqwertyuiop\n^Z\n        1 file(s) copied.\n\nC:\\junk&gt;\\python27\\python\nPython 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; f = open('qwerty.txt', 'r+b')\n&gt;&gt;&gt; f.write('asdf')\n&gt;&gt;&gt; f.close()\n&gt;&gt;&gt; open('qwerty.txt', 'rb').read()\n'asdftyuiop\\r\\n'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Simply, but memory inefficiently,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The Python 3 way:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def binaryedit(fn):\n f=open(fn,mode='rb')\n fc=f.read()\n f.close()\n return b'rawr'+fc[4:]\n</code>\n</pre>\n", "senID": 2}, {"text": ["The Python 2 way:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def binaryedit(fn):\n f=open(fn,mode='rb')\n fc=f.read()\n f.close()\n return 'rawr'+fc[4:]\n</code>\n</pre>\n", "senID": 4}, {"text": ["If the files are huge, you can memory map them and edit/write just the bytes that need to change.", "There's barely any difference until they get over a meg or so, though."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["This looks a lot like HW so I will not give exact code.", "but here is enough information"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n with open(filename, 'r+b') as f:\n  bytes = f.read(4)\n  newbytes = 'demo'\n  f.seek(0)\n  f.write(newbytes)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["this should help.", "http://www.johnny-lin.com/cdat_tips/tips_fileio/bin_array.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.johnny-lin.com/cdat_tips/tips_fileio/bin_array.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.johnny-lin.com/cdat_tips/tips_fileio/bin_array.html"}]}, {"code": "<pre>\n<code>\n import Numeric as N import array\n\nnum_lon = 144 num_lat = 73 tmpfile = \"tmp.bin\"\n\nfileobj = open(tmpfile, mode='rb') binvalues = array.array('f') binvalues.read(fileobj, num_lon * num_lat)\n\ndata = N.array(binvalues, typecode=N.Float)\n\ndata = N.reshape(data, (num_lat, num_lon))\n\nfileobj.close()\n</code>\n</pre>\n", "senID": 1}]]