[[{"text": ["Assuming you're not really tied to lists, defaultdict and set are quite handy."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "defaultdict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#collections.defaultdict"}, {"href": "http://docs.python.org/library/stdtypes.html#set", "text": "set", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import collections\nd = collections.defaultdict(set)\nfor a, b in mappings:\n    d[b].add(a)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you really want lists instead of sets, you could follow this with a"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for k, v in d.iteritems():\n    d[k] = list(v)\n</code>\n</pre>\n", "senID": 3}, {"text": ["And if you really want a dict instead of a defaultdict, you can say"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n d = dict(d)\n</code>\n</pre>\n", "senID": 5}, {"text": ["I don't really see any reason you'd want to, though."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Use collections.defaultdict"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n your_dict = defaultdict(list)\nfor (a,b) in your_list:\n    your_dict[b].append(a)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["you can sort your tuples O(n log n) then create your dictionary O(n)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["or simplier O(n) but could impose heavy load on memory in case of many tuples:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n your_dict = {}\nfor (a,b) in your_list:\n    if b in your_dict:\n        your_dict[b].append(a)\n    else:\n        your_dict[b]=[a]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Hmm it's pretty much the same as you've described.", "What's awkward about that?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You could also consider using an sql database to do the dirty work."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["See the docs for the setdefault() method:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "the docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#mapping-types-dict"}, {"text": "setdefault()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can use this as a single call that will get b if it exists, or set b to an empty list if it doesn't already exist - and either way, return b:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; key = 'b'\n&gt;&gt;&gt; val = 'a'\n&gt;&gt;&gt; print d\n{}\n&gt;&gt;&gt; d.setdefault(key, []).append(val)\n&gt;&gt;&gt; print d\n{'b': ['a']}\n&gt;&gt;&gt; d.setdefault(key, []).append('zee')\n&gt;&gt;&gt; print d\n{'b': ['a', 'zee']}\n</code>\n</pre>\n", "senID": 2}, {"text": ["Combine this with a simple \"not in\" check and you've done what you're after in three lines:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; b = d.setdefault('b', [])\n&gt;&gt;&gt; if val not in b:\n...   b.append(val)\n... \n&gt;&gt;&gt; print d\n{'b': ['a', 'zee', 'c']}\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I am not sure how you will get out of the key test, but once they key/value pair has been initialized it is easy :)  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = {}\nif 'b' not in d:\n  d['b'] = set()\nd['b'].add('a')\n</code>\n</pre>\n", "senID": 1}, {"text": ["The set will ensure that only 1 of 'a' is in the collection.", "You need to do the initial 'b' check though to make sure the key/value exist."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Instead of using an if, AFAIK it is more pythonic to use a try block instead."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "pythonic", "childNum": 0, "tag": "em", "childList": []}, {"text": "try", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n your_list=[('a',1),('a',3),('b',1),('f',1),('a',2),('z',1)]\n\nyour_dict={}\nfor (a,b) in your_list:\n    try:\n        your_dict[b].append(a)\n    except KeyError:\n        your_dict[b]=[a]\n\nprint your_dict\n</code>\n</pre>\n", "senID": 1}]]