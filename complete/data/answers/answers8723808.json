[[{"text": ["This is what I use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def _doStringSEOptiomization(objectName,pageName,lang,objectId):\n\"\"\"\nPrende in input il nome di un'offerta e svolge dei passi:\n1- Trasforma tutte le variazioni delle vocali\n   in vocali normali\n2- Attraverso una serie di REGEX, elimina i caratteri non desiderati e torna \n   una stringa da inserire in un link adatto ai motori di ricerca e alle indicizzazioni\n\"\"\"\n\ntry:\n    import re #importo il modulo per le REGEX\n    Speaker.log_debug(GREEN(\"core.ws_site.do_sites_offers_data_redux._doStringSEOptiomization() input: objectName=%s, pageName=%s, lang=%s, objectId=%s\" % (objectName,pageName,lang,objectId)))\n\n    #mappa dei caratteri html-entity e unicode\n    vocalMap = { 'a' : ['&amp;agrave;','&amp;aacute;','&amp;acirc;','&amp;atilde;','&amp;auml;','&amp;aring;','&amp;aelig;','&amp;#224;','&amp;#225;','&amp;#226;','&amp;#227;','&amp;#228;','&amp;#229;','&amp;#257;','&amp;#230;'],\n                 'e' : ['&amp;egrave;','&amp;eacute;','&amp;ecirc;','&amp;euml;','&amp;#232;','&amp;#233;','&amp;#234;','&amp;#235;','&amp;#275;'],\n                 'i' : ['&amp;igrave;','&amp;iacute;','&amp;icirc;','&amp;iuml;','&amp;#236;','&amp;#237;','&amp;#238;','&amp;#239;','&amp;#299;'],\n                 'o' : ['&amp;ograve;','&amp;oacute;','&amp;ocirc;','&amp;oelig;','&amp;otilde;','&amp;ouml;','&amp;#242;','&amp;#243;','&amp;#244;','&amp;#339;','&amp;#245;','&amp;#246;','&amp;#333;'],\n                 'u' : ['&amp;ugrave;','&amp;uacute;','&amp;ucirc;','&amp;uuml;','&amp;#249;','&amp;#250;','&amp;#251;','&amp;#252;','&amp;#363;']\n                }\n\n    objectName = objectName.lower() #trasformo la stringa di partenza in caratteri minuscoli\n\n    for vocale, lista in vocalMap.iteritems(): #per ogni elemento della mappa avr\u00e0 una chiave ed una lista\n        for elemento in lista: #itero su tutti gli elementi della lista\n            objectName = objectName.replace(elemento,vocale) #sostituisco nel nome dell'offerta, la vocale all' HTML-entity\n\n    objectName = objectName.replace(\"/\",\"-\")\n\n    objectName = re.sub(\"[^a-z0-9_\\s-]\",\"\",objectName)     #######################################\n    objectName = re.sub(\"[\\s-]+\",\" \",objectName)           #strippo tutti i caratteri non voluti:# \n    objectName = re.sub(\"[\\s_]\",\"-\",objectName)            #######################################\n\n    objectName = pageName+\"--\"+objectName\n    objectName += \"-\"+lang+\"-\"+str(objectId) #aggiungo la lingua e l'id dell'offerta\n\nexcept Exception,s:\n    Speaker.log_error(\"_doStringSEOptiomization(): Error=%s\"%RED(s))\n\nreturn objectName\n</code>\n</pre>\n", "senID": 1}, {"text": ["You have to adapt it for your situation."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This might (or might not) be enough:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nimport unidecode\n\ndef normalized_id(title):\n    title = unidecode.unidecode(title).lower()\n    return re.sub('\\W+', '-', title.replace(\"'\", '')).strip('-')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you have Django around, you can use its defaultfilter slugify (or adapt it for your needs)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n [~]$ python\nPython 2.7.1 (r271:86882M, Nov 30 2010, 10:35:34) \n[GCC 4.2.1 (Apple Inc. build 5664)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import unicodedata\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; def seo_string(x):\n...     r = unicodedata.normalize('NFKD',x).encode('ascii','ignore')\n...     r = unicode(re.sub('[^\\w\\s-]','',x).strip().lower())\n...     return re.sub('[-\\s]+','-',r)\n... \n&gt;&gt;&gt; seo_string(u'Le b\u00e9b\u00e9 (de 4 ans) a \u00e9galement un \u00e9trange \"rire\"')\nu'le-bb-de-4-ans-a-galement-un-trange-rire'\n</code>\n</pre>\n", "senID": 0}, {"text": ["With thanks to the great slugify of django's built-in filters, however it won't do replacement of \u00e9 with e like the solution posted by @doncallisto"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "slugify", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://code.djangoproject.com/browser/django/trunk/django/template/defaultfilters.py#L230"}]}], [{"text": ["Here are the several ways to do so: Generating Slugs By Armin Ronacher."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Generating Slugs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://flask.pocoo.org/snippets/5/"}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = u'Le b\u00e9b\u00e9 (de 4 ans) a \u00e9galement un \u00e9trange \"rire\"'\n&gt;&gt;&gt; r = unicodedata.normalize('NFKD',a).encode('cp1256','ignore')\n&gt;&gt;&gt; r = unicode(re.sub('[^\\w\\s-]','',r).strip().lower())\n&gt;&gt;&gt; r = re.sub('[-\\s]+','-',r)\n&gt;&gt;&gt; print r\nle-bebe-de-4-ans-a-egalement-un-etrange-rire\n</code>\n</pre>\n", "senID": 0}, {"text": ["I use cp1256 (latin 1) to handle accented characters..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Perfect !", "Thanks a lot !"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]