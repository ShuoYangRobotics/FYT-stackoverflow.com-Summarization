[[{"text": ["min and max are your friends."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "min", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#min"}, {"href": "http://docs.python.org/library/functions.html#max", "text": "max", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n def myFunc(x, y):\n    min_val, max_val = min(x, y), max(x, y)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit.", "Benchmarked min-max version againt a simple if.", "Due to the function call overhead, min-max takes 2.5x longer that the simple if; see http://gist.github.com/571049"], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "min-max", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "min-max", "childNum": 0, "tag": "code", "childList": []}, {"text": "2.5x", "childNum": 0, "tag": "code", "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://gist.github.com/571049", "text": "http://gist.github.com/571049", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I like the sorted one.", "Clever but not too clever.", "Here are some other options."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sorted", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def myFunc(min, max):\n    if min &gt; max: min, max = max, min\n\ndef myFunc(x, y):\n    min, max = min(x, y), max(x, y)\n\ndef myFunc(x, y):\n    min, max = [f(x, y) for f in (min, max)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["The last one's a bit silly I admit."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Unless you need to microoptimise, I'd just to this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def myFunc(x, y):\n    for i in range(*sorted((x, y))):\n        ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is faster though"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def myFunc(x, y):\n    for i in range(x,y) if x&lt;y else range(y,x):\n        ...\n</code>\n</pre>\n", "senID": 3}, {"text": ["minmax.py"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "minmax.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def f1(x, y):\n    for i in range(min(x, y), max(x, y)):\n        pass\n\ndef f2(x, y):\n    for i in range(*sorted((x, y))):\n        pass\n\ndef f3(x, y):\n    for i in range(x, y) if x&lt;y else range(y, x):\n        pass\n\ndef f4(x, y):\n    if x&gt;y:\n        x,y = y,x\n    for i in range(x, y):\n        pass\n\ndef f5(x, y):\n    mn,mx = ((x, y), (y, x))[x&gt;y]\n    for i in range(x,y):\n        pass\n</code>\n</pre>\n", "senID": 5}, {"text": ["benchmarks (f3 is fastest regardless of the order)"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "benchmarks", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ python -m timeit -s\"import minmax as mm\" \"mm.f1(1,2)\"\n1000000 loops, best of 3: 1.93 usec per loop\n$ python -m timeit -s\"import minmax as mm\" \"mm.f2(1,2)\"\n100000 loops, best of 3: 2.4 usec per loop\n$ python -m timeit -s\"import minmax as mm\" \"mm.f3(1,2)\"\n1000000 loops, best of 3: 1.16 usec per loop\n$ python -m timeit -s\"import minmax as mm\" \"mm.f4(1,2)\"\n100000 loops, best of 3: 1.2 usec per loop\n$ python -m timeit -s\"import minmax as mm\" \"mm.f5(1,2)\"\n1000000 loops, best of 3: 1.58 usec per loop\n$ python -m timeit -s\"import minmax as mm\" \"mm.f1(2,1)\"\n100000 loops, best of 3: 1.88 usec per loop\n$ python -m timeit -s\"import minmax as mm\" \"mm.f2(2,1)\"\n100000 loops, best of 3: 2.39 usec per loop\n$ python -m timeit -s\"import minmax as mm\" \"mm.f3(2,1)\"\n1000000 loops, best of 3: 1.18 usec per loop\n$ python -m timeit -s\"import minmax as mm\" \"mm.f4(2,1)\"\n1000000 loops, best of 3: 1.25 usec per loop\n$ python -m timeit -s\"import minmax as mm\" \"mm.f5(2,1)\"\n1000000 loops, best of 3: 1.44 usec per loop\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Some suggestions"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def myfunc(minVal, maxVal):\n    if minVal &gt; maxVal: minVal, maxVal = maxVal, minVal\n\ndef myfunc2(a, b):\n    minVal, maxVal = ((a, b), (b, a))[a &gt; b] # :-P\n</code>\n</pre>\n", "senID": 1}, {"text": ["Using sorted, the min/max builtins or the second solution above seems overkill in this case."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["And remember that range(min, max) will iterate from min to max - 1!"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "range(min, max)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "min", "childNum": 0, "tag": "code", "childList": []}, {"text": "max - 1", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Since the OP's question was posed using x and y as parameters (not lo and hi), I would go with (for both speed and clarity):"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "childList": []}, {"text": "lo", "childNum": 0, "tag": "code", "childList": []}, {"text": "hi", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def myfunc(x, y):\n    lo, hi = (x, y) if x &lt; y else (y, x)\n\n&gt;&gt;&gt; timeit.repeat(\"myfunc(10, 5)\", \"from __main__ import myfunc\")\n[1.2527812156004074, 1.185214249195269, 1.1886092749118689]\n&gt;&gt;&gt; timeit.repeat(\"foo(10, 5)\", \"from __main__ import foo\")\n[1.0397177348022524, 0.9580022495574667, 0.9673979369035806]\n&gt;&gt;&gt; timeit.repeat(\"f3(10, 5)\", \"from __main__ import f3\")\n[2.47303065772212, 2.4192818561823515, 2.4132735135754046]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The single best answer works like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def foo(lo, hi):\n    if hi &lt; lo: lo,hi = hi,lo\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's clear, makes a point, and doesn't obscure meaning in a bunch of extra glue.", "It's short.", "It's almost certainly as fast as any other option in practice, and it relies on the least amount of cleverness."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]