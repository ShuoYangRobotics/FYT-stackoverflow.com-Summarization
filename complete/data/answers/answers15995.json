[[{"text": ["The other uses I've found for it besides + and * were with and and or, but now we have any and all to replace those cases. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "any", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "all", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["foldl and foldr do come up in Scheme a lot... "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "foldl", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "foldr", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Here's some cute usages:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Flatten a list"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Flatten a list", "childNum": 0, "tag": "b", "pos": 0, "childList": []}]}, {"text": ["Goal: turn [[1, 2, 3], [4, 5], [6, 7, 8]] into [1, 2, 3, 4, 5, 6, 7, 8]."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "[[1, 2, 3], [4, 5], [6, 7, 8]]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[1, 2, 3, 4, 5, 6, 7, 8]", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n reduce(list.__add__, [[1, 2, 3], [4, 5], [6, 7, 8]], [])\n</code>\n</pre>\n", "senID": 5}, {"text": ["List of digits to a number"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "List of digits to a number", "childNum": 0, "tag": "b", "pos": 0, "childList": []}]}, {"text": ["Goal: turn [1, 2, 3, 4, 5, 6, 7, 8] into 12345678."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "[1, 2, 3, 4, 5, 6, 7, 8]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "12345678", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Ugly, slow way:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n int(\"\".join(map(str, [1,2,3,4,5,6,7,8])))\n</code>\n</pre>\n", "senID": 9}, {"text": ["Pretty reduce way:"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "reduce", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n reduce(lambda a,d: 10*a+d, [1,2,3,4,5,6,7,8], 0)\n</code>\n</pre>\n", "senID": 11}], [{"text": ["reduce() can be used to find Least common multiple for 3 or more numbers:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "reduce()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/147515/least-common-multiple-for-3-or-more-numbers#147539", "text": "Least common multiple for 3 or more numbers", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n def lcmm(*args):\n    return reduce(lcm, args)\n\n&gt;&gt;&gt; lcmm(100, 23, 98)\n112700\n&gt;&gt;&gt; lcmm(*range(1, 20))\n232792560\n</code>\n</pre>\n", "senID": 1}], [{"text": ["@Blair Conrad: You could also implement your glob/reduce using sum, like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n files = sum([glob.glob(f) for f in args], [])\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is less verbose than either of your two examples, is perfectly Pythonic, and is still only one line of code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So to answer the original question, I personally try to avoid using reduce because it's never really necessary and I find it to be less clear than other approaches.", "However, some people get used to reduce and come to prefer it to list comprehensions (especially Haskell programmers).", "But if you're not already thinking about a problem in terms of reduce, you probably don't need to worry about using it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["reduce() could be used to resolve dotted names (where eval() is too unsafe to use):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "reduce()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "eval()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import __main__\n&gt;&gt;&gt; reduce(getattr, \"os.path.abspath\".split('.'), __main__)\n&lt;function abspath at 0x009AB530&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Find intersection of N given list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n input_list = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]]\n\nresult = reduce(set.intersection,map(set,input_list))\n</code>\n</pre>\n", "senID": 1}, {"text": ["returns:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n result = set([3, 4, 5])\n</code>\n</pre>\n", "senID": 3}, {"text": ["via: Python - Intersection of two lists"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Python - Intersection of two lists", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/642763/python-intersection-of-two-lists"}]}], [{"text": ["Not sure if this is what you are after but you can search source code on Google."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "search source code on Google", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com/codesearch"}]}, {"text": ["Follow the link for a search on 'function:reduce() lang:python' on Google Code search"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "'function:reduce() lang:python'", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com/codesearch?q=function%3Areduce%28%29+lang%3Apython&hl=en&btnG=Search+Code"}]}, {"text": ["At first glance the following projects use reduce()"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "reduce()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "MoinMoin", "tag": "none", "senID": 3}, {"text": "Zope", "tag": "none", "senID": 4}, {"text": "Numeric", "tag": "none", "senID": 5}, {"text": "ScientificPython", "tag": "none", "senID": 6}]}, {"text": ["etc.", "etc.", "but then these are hardly surprising since they are huge projects."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["The functionality of reduce can be done using function recursion which I guess Guido thought was more explicit."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["After grepping my code, it seems the only thing I've used reduce for is calculating the factorial:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n reduce(operator.mul, xrange(1, x+1) or (1,))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The usage of reduce that I found in my code involved the situation where I had some class structure for logic expression and I needed to convert a list of these expression objects to a conjunction of the expressions.", "I already had a function make_and to create a conjunction given two expressions, so I wrote reduce(make_and,l).", "(I knew the list wasn't empty; otherwise it would have been something like reduce(make_and,l,make_true)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "reduce", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "make_and", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "reduce(make_and,l)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "reduce(make_and,l,make_true)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["This is exactly the reason that (some) functional programmers like reduce (or fold functions, as such functions are typically called).", "There are often already many binary functions like +, *, min, max, concatenation and, in my case, make_and and make_or.", "Having a reduce makes it trivial to lift these operations to lists (or trees or whatever you got, for fold functions in general)."], "childNum": 9, "tag": "p", "senID": 1, "childList": [{"text": "reduce", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "fold", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "childList": []}, {"text": "*", "childNum": 0, "tag": "code", "childList": []}, {"text": "min", "childNum": 0, "tag": "code", "childList": []}, {"text": "max", "childNum": 0, "tag": "code", "childList": []}, {"text": "make_and", "childNum": 0, "tag": "code", "childList": []}, {"text": "make_or", "childNum": 0, "tag": "code", "childList": []}, {"text": "reduce", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Of course, if certain instantiations (such as sum) are often used, then you don't want to keep writing reduce.", "However, instead of defining the sum with some for-loop, you can just as easily define it with reduce."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "sum", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "reduce", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "sum", "childNum": 0, "tag": "code", "childList": []}, {"text": "can", "childNum": 0, "tag": "em", "childList": []}, {"text": "reduce", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Readability, as mentioned by others, is indeed an issue.", "You could argue, however, that only reason why people find reduce less \"clear\" is because it is not a function that many people know and/or use."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "reduce", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I have an old Python implementation of pipegrep that uses reduce and the glob module to build a list of files to process:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pipegrep", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://examples.oreilly.com/upt2/split/pipegrep"}]}, {"code": "<pre>\n<code>\n files = []\nfiles.extend(reduce(lambda x, y: x + y, map(glob.glob, args)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["I found it handy at the time, but it's really not necessary, as something similar is just as good, and probably more readable"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n files = []\nfor f in args:\n    files.extend(glob.glob(f))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I'm writing a compose function for a language, so I construct the composed function using reduce along with my apply operator."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In a nutshell, compose takes a list of functions to compose into a single function.", "If I have a complex operation that is applied in stages, I want to put it all together like so:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n complexop = compose(stage4, stage3, stage2, stage1)\n</code>\n</pre>\n", "senID": 2}, {"text": ["This way, I can then apply it to an expression like so:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n complexop(expression)\n</code>\n</pre>\n", "senID": 4}, {"text": ["And I want it to be equivalent to:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n stage4(stage3(stage2(stage1(expression))))\n</code>\n</pre>\n", "senID": 6}, {"text": ["Now, to build my internal objects, I want it to say:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n Lambda([Symbol('x')], Apply(stage4, Apply(stage3, Apply(stage2, Apply(stage1, Symbol('x'))))))\n</code>\n</pre>\n", "senID": 8}, {"text": ["(The Lambda class builds a user-defined function, and Apply builds a function application."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Now, reduce, unfortunately, folds the wrong way, so I wound up using, roughly:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n reduce(lambda x,y: Apply(y, x), reversed(args + [Symbol('x')]))\n</code>\n</pre>\n", "senID": 11}, {"text": ["To figure out what reduce produces, try these in the REPL:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n reduce(lambda x, y: (x, y), range(1, 11))\nreduce(lambda x, y: (y, x), reversed(range(1, 11)))\n</code>\n</pre>\n", "senID": 13}]]