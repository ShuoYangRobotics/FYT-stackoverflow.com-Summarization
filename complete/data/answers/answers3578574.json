[[{"code": "<pre>\n<code>\n import fractions\ndata = [float(fractions.Fraction(x)) for x in data]\n</code>\n</pre>\n", "senID": 0}, {"text": ["or to match your example exactly (data ends up with strings):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import fractions\ndata = [str(float(fractions.Fraction(x))) for x in data]\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n import fractions\ndata = [str(round(float(fractions.Fraction(x)), 2)) for x in data]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Using the fraction module is nice and tidy, but is quite heavyweight (slower) compared to simple string split or partition"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This list comprehension creates the floats as the answer with the most votes does"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [(n/d) for n,d in (map(float, i.split(\"/\")) for i in data)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want the two decimal place strings"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [\"%.2f\"%(n/d) for n,d in (map(float, i.split(\"/\")) for i in data)]\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n def split_divide(elem):\n    (a,b) = [float(i) for i in elem.split('/')]\n    return a/b\n\nmap(split_divide, ['1/2','2/3'])\n</code>\n</pre>\n", "senID": 0}, {"text": ["[0.5, 0.66666666666666663]"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["data = [ x.split('/') for x in data ]\ndata = [ float(x[0]) / float(x[1]) for x in data ]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Nested list comprehensions will get you your answer without importing extra modules (fractions is only in Python 2.6+)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ['%.2f' % (float(numerator)/float(denomator)) for numerator, denomator in [element.split('/') for element in data]]\n['0.11', '0.11', '0.11', '0.11', '0.11', '0.14', '0.14', '0.14', '0.14', '0.14', '0.14', '0.14', '0.15']\n</code>\n</pre>\n", "senID": 1}]]