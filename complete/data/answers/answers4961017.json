[[{"text": ["You can easily implement something like this yourself."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def compose(current_value, *args):\n    for func in args:\n        current_value = func(current_value)\n    return current_value\n\ndef double(n):\n    return 2*n\n\nprint compose(5, double, double) # prints 20\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Or possibly use the reduce function in the following way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n reduce(lambda x,f : f(x), [f1,f2,f3], arg)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Building on Howard's solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def T(*args):\n  return reduce(lambda l, r: r(l), args)\n\ndef dbl(n):\n    return 2*n\n\nT(5,dbl,dbl)\n#=&gt; 20\n\nT(5,dbl,dbl,lambda x: 3*x)\n#=&gt; 60\n</code>\n</pre>\n", "senID": 1}], [{"text": ["While I sympathize with the desire to create cool new language constructs (\u00e0 la Lisp macros), it is not really the Python philosophy to do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import this\n[...]\nThere should be one-- and preferably only one --obvious way to do it.\n</code>\n</pre>\n", "senID": 1}, {"text": ["But as the respondents have said, you can do your function chaining in a variety of ways.", "Here is one that's perhaps more explicitly Lisp-like, if that suits your fancy:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = lambda x: x*2\nb = lambda x: x+1\n\ndef chain(first, *args):\n    if len(args) == 0:\n        return first\n    else:\n        return first(chain(*args))\n\nprint chain(b, a, 1)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["No, there is not (at least sanely).", "Nor would you want to.", "Why not just write f3(f2(f1(arg)))?", "Or better yet, model your problem in a way that doesn't require recursion."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "f3(f2(f1(arg)))", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["You might be able to overload | by wrapping expressions in a class and defining __or__ in that class, but please, for the love of Guido, don't do that."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "|", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__or__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You could also do what btilly wrote, but I wouldn't recommend that either.", "Work within what the language provides you."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "btilly", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Or try http://dev-tricks.net/pipe-infix-syntax-for-python\nA module that provide a syntax like :"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://dev-tricks.net/pipe-infix-syntax-for-python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dev-tricks.net/pipe-infix-syntax-for-python"}]}, {"code": "<pre>\n<code>\n fib() | take_while(lambda x: x &lt; 1000000)\n        | where(lambda x: x % 2)\n        | select(lambda x: x * x)\n        | sum()\n</code>\n</pre>\n", "senID": 1}]]