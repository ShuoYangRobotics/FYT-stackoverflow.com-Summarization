[[{"code": "<pre>\n<code>\n import ast\n\nline1 =\"['a.b.c','b.c.a','c.d.e']\"\nline2 =\"['def','efg']\"\nline3 =\"['f']\"\nline4 =\"['g']\"\n\nSumLine = []\n\nfor x in (line1, line2, line3, line4):\n  SumLine.extend(ast.literal_eval(x))\n\nprint SumLine\n</code>\n</pre>\n", "senID": 0}, {"text": ["Don't use the built-in eval unless you have preternatural trust in the strings you're evaluating; ast.literal_eval, while limited to simple constants, is totally safe and therefore, most often, way preferable."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ast.literal_eval", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Try eval:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html?highlight=eval#eval"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; line1 =\"['a.b.c','b.c.a','c.d.e']\"\n&gt;&gt;&gt; line2 =\"['def','efg']\"\n&gt;&gt;&gt; line3 =\"['f']\"\n&gt;&gt;&gt; line4 =\"['g']\"\n&gt;&gt;&gt; eval(line1) + eval(line2) + eval(line3) + eval(line4)\n['a.b.c', 'b.c.a', 'c.d.e', 'def', 'efg', 'f', 'g']\n</code>\n</pre>\n", "senID": 1}, {"text": ["But be careful, because eval can be dangerous.", "Don't use it on input that you receive from the user and haven't validated."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The quick and dirty way is to use eval:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n SumLine = eval(line1) + eval(line2) + eval(line3) + eval(line4)\n</code>\n</pre>\n", "senID": 1}, {"text": ["But dont do this if you are getting these strings from someone else (ie user input)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The simple way is to concetenate the strings to an expression that can be evaulated to give the required result:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n line1 =\"['a.b.c','b.c.a','c.d.e']\"\nline2 =\"['def','efg']\"\nline3 =\"['f']\"\nline4 =\"['g']\"\nlines = [line1, line2, line3, line4]\n\nprint eval('+'.join(lines))\n</code>\n</pre>\n", "senID": 1}, {"text": ["However this is unsafe if you can't trust your input, so if you're using Python 2.6 or higher you should use the safe eval function ast.literal_eval in the ast module, although this doesn't work with the '+' trick so you will have to iterate over each element instead."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "ast.literal_eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Where did you get these strings?", "Anything short of a real parser will be fragile.", "Below is what I would recommed, if I had not seen Alex Martelli's brilliant answer before!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You may parse them as JSON arrays, but JSON wants to read double-quoted strings, not single quotes.", "This introduces fragility to the method, but still much preferable to eval() which is unsafe."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "eval()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import json\nline1 =\"['a.b.c','b.c.a','c.d.e']\"\njson.loads(line1.replace(\"'\", '\"'))\n</code>\n</pre>\n", "senID": 2}, {"text": ["The result is a parsed list like [u'a.b.c', u'b.c.a', u'c.d.e'], you may than go on to join the parsed lists."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "[u'a.b.c', u'b.c.a', u'c.d.e']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["you need to eval them first and then you could sum the results.", "But I wonder how do you get this strings in the first place?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]