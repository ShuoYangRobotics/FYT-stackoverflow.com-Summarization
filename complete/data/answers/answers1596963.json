[[{"text": ["Paramiko's SFTPClient class allows you to get a file-like object to read data from a remote file in a Pythonic way."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SFTPClient", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Assuming you have an open SSHClient:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "SSHClient", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n sftp_client = ssh_client.open_sftp()\nremote_file = sftp_client.open('remote_filename')\ntry:\n    for line in remote_file:\n        # process line\nfinally:\n    remote_file.close()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["What do you mean by \"line by line\" - there are lots of data buffers between network hosts, and none of them are line-oriented. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So you can read a bunch of data, then split it into lines at the near end."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ssh otherhost cat somefile | python process_standard_input.py | do_process_locally\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or you can have a process read a bunch of data at the far end, break it up, and format it line by line and send it to you."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n scp process_standard_input.py otherhost\nssh otherhost python process_standard_input.py somefile |  do_process_locally\n</code>\n</pre>\n", "senID": 4}, {"text": ["The only difference I would care about is what way reduces the volume of data over a limited network pipe.", "In your situation it may, or may not matter."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["There is nothing wrong in general with using cat over an SSH pipe to move gigabytes of data."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "cat", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n #!/usr/bin/env python\nimport paramiko\nimport select\nclient = paramiko.SSHClient()\nclient.load_system_host_keys()\nclient.connect('yourhost.com')\ntransport = client.get_transport()\nchannel = transport.open_session()\nchannel.exec_command(\"cat /path/to/your/file\")\nwhile True:\n  rl, wl, xl = select.select([channel],[],[],0.0)\n  if len(rl) &gt; 0:\n      # Must be stdout\n      print channel.recv(1024)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Use SFTP  http://stackoverflow.com/questions/432385/sftp-in-python-platform-independent"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/432385/sftp-in-python-platform-independent", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/432385/sftp-in-python-platform-independent"}]}], [{"text": ["You can write your own linebuffer/generator something like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def linebuffer(source):\n    data=\"\"\n    i=0\n    while source:\n        try:\n            i=data.index('\\n',i)+1\n            yield data[:i]\n        except ValueError:\n            newdata = source.recv(1024)\n            if not newdata: break\n            data=data[i:]+newdata\n            i=0\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's an extension to @Matt Good's answer:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "@Matt Good's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1596963/read-a-file-from-server-with-ssh-using-python/1597750#1597750"}]}, {"code": "<pre>\n<code>\n from contextlib     import closing\nfrom fabric.network import connect\n\nwith closing(connect(user, host, port)) as ssh:\n    with closing(ssh.open_sftp()) as sftp:\n         with closing(sftp.open('remote_filename')) as f:\n              for line in f:\n                  process(line)\n</code>\n</pre>\n", "senID": 1}]]