[[{"text": ["The question you've asked (how to iterate through the alphabet) is not the same question as the problem you're trying to solve (how to count the frequency of letters in a string)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can use string.lowercase, as other posters have suggested:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import string\nallTheLetters = string.lowercase\n</code>\n</pre>\n", "senID": 2}, {"text": ["To do things the way you're \"used to\", treating letters as numbers, you can use the \"ord\" and \"chr\" functions.", "There's absolutely no reason to ever do exactly this, but maybe it comes closer to what you're actually trying to figure out:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def getAllTheLetters(begin='a', end='z'):\n    beginNum = ord(begin)\n    endNum = ord(end)\n    for number in xrange(beginNum, endNum+1):\n        yield chr(number)\n</code>\n</pre>\n", "senID": 4}, {"text": ["You can tell it does the right thing because this code prints True:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import string\nprint ''.join(getAllTheLetters()) == string.lowercase\n</code>\n</pre>\n", "senID": 6}, {"text": ["But, to solve the problem you're actually trying to solve, you want to use a dictionary and collect the letters as you go:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict    \ndef letterOccurrances(string):\n    frequencies = defaultdict(lambda: 0)\n    for character in string:\n        frequencies[character.lower()] += 1\n    return frequencies\n</code>\n</pre>\n", "senID": 8}, {"text": ["Use like so:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n occs = letterOccurrances(\"Hello, world!\")\nprint occs['l']\nprint occs['h']\n</code>\n</pre>\n", "senID": 10}, {"text": ["This will print '3' and '1' respectively."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Note that this works for unicode as well:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n # -*- coding: utf-8 -*-\noccs = letterOccurrances(u\"h\u00e9\u013a\u013a\u00f3, \u1e83\u00f3\u0155\u013ad!\")\nprint occs[u'l']\nprint occs[u'\u013a']\n</code>\n</pre>\n", "senID": 13}, {"text": ["If you were to try the other approach on unicode (incrementing through every character) you'd be waiting a long time; there are millions of unicode characters."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["To implement your original function (print the counts of each letter in alphabetical order) in terms of this:"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n def alphCount(text):\n    for character, count in sorted(letterOccurrances(text).iteritems()):\n        print \"%s: %s\" % (character, count)\n\nalphCount(\"hello, world!\")\n</code>\n</pre>\n", "senID": 16}], [{"text": ["That's actually provided by the string module, it's not like you have to manually type it yourself ;)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n\nallTheLetters = string.ascii_lowercase\n\ndef alphCount(text):\n  lowerText = text.lower()\n  for letter in allTheLetters:  \n    print letter + \":\", lowertext.count(letter)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you just want to do a frequency count of a string, try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = 'hi there'\nf = {}\n\nfor c in s:\n        f[c] = f.get(c, 0) + 1\n\nprint f\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Something like this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for letter in range(ord('a'), ord('z') + 1):\n  print chr(letter) + \":\", lowertext.count(chr(letter))\n</code>\n</pre>\n", "senID": 1}, {"text": ["(I don't speak Python; please forgive my syntax errors)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Do you mean using:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\nstring.ascii_lowercase\n</code>\n</pre>\n", "senID": 1}, {"text": ["then,"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n counters = dict()\nfor letter in string.ascii_lowercase:\n    counters[letter] = lowertext.count(letter)\n</code>\n</pre>\n", "senID": 3}, {"text": ["All lowercase letters are accounted for, missing counters will have zero value."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["using generators:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n counters = \n    dict( (letter,lowertext.count(letter)) for letter in string.ascii_lowercase )\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Main question is \"iterate through the alphabet\":"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\nfor c in string.lowercase:\n    print c\n</code>\n</pre>\n", "senID": 1}, {"text": ["How get letter frequencies with some efficiency and without counting non-letter characters:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import string\n\nsample = \"Hello there, this is a test!\"\nletter_freq = dict((c,0) for c in string.lowercase)\n\nfor c in [c for c in sample.lower() if c.isalpha()]:\n    letter_freq[c] += 1\n\nprint letter_freq\n</code>\n</pre>\n", "senID": 3}], [{"text": ["For counting objects, the obvious solution is the Counter"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "obvious", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://docs.python.org/dev/library/collections.html#collections.Counter", "text": "Counter", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n from collections import Counter\nimport string\n\nc = Counter()\nfor letter in text.lower():\n    c[letter] += 1\n\nfor letter in string.lowercase:\n    print(\"%s: %d\" % (letter, c[letter]))\n</code>\n</pre>\n", "senID": 1}]]