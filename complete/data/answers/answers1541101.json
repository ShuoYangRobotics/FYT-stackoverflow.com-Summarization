[[{"text": ["According to this paper, determining if you can empty the board (which is related to the problem you want to solve) is NP-Complete.", "That doesn't mean that you won't be able to find a good algorithm, it just means that you likely won't find an efficient one."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this paper", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://erikdemaine.org/clickomania/"}]}], [{"text": ["I'm thinking you could try a branch and bound search with the following idea:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Once you have these two functions you can apply standard Bound and Branch search.", "Note that the speed of your search is going to greatly depend on how tight your Upper Bound is and how tight your Lower Bound is."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["To get a faster solution than exhaustive search, I think what you want is probably dynamic programming.", "In dynamic programming, you find some sort of \"step\" that takes you possibly closer to your solution, and keep track of the results of each step in a big matrix.", "Then, once you have filled in the matrix, you can find the best result, and then work backward to get a path through the matrix that leads to the best result.", "The matrix is effectively a form of memoization."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Dynamic programming is discussed in The Algorithm Design Manual but there is also plenty of discussion of it on the web.", "Here's a good intro:  http://20bits.com/articles/introduction-to-dynamic-programming/"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "The Algorithm Design Manual", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.algorist.com/"}, {"text": "http://20bits.com/articles/introduction-to-dynamic-programming/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://20bits.com/articles/introduction-to-dynamic-programming/"}]}, {"text": ["I'm not sure exactly what the \"step\" is for this problem.", "Perhaps you could make a scoring metric for a board that simply sums the points for each of the bubble groups, and then record this score as you try popping balloons?", "Good steps would tend to cause bubble groups to coalesce, improving the score, and bad steps would break up bubble groups, making the score worse."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can translate this problem into problem of searching shortest path on graph.", "http://en.wikipedia.org/wiki/Shortest%5Fpath%5Fproblem"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://en.wikipedia.org/wiki/Shortest%5Fpath%5Fproblem", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Shortest%5Fpath%5Fproblem"}]}, {"text": ["I would try whit A* and heuristics would include number of islands."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["In my chess program I use some ideas which could probably adapted to this problem."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["Move Ordering.", "First find all\npossible moves, store them in a list,\nand sort them according to some\nheuristic.", "The \"better\" ones first,\nthe \"bad\" ones last.", "For example,\nthis could be a function of the size\nof the group (prefer medium sized\ngroups), or the number of adjacent\ncolors, groups, etc."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Iterative Deepening.", "Instead of\nrunning a pure depth-first search,\ncut of the search after a certain\ndeep and use some heuristic to assess\nthe result.", "Now research the tree\nwith \"better\" moves first."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Pruning.", "Don't search moves which\nseems \"obviously\" bad, according to\nsome, again, heuristic.", "This involves\nthe risk that you won't find the\noptimal solution anymore, but\ndepending on your heuristics you will\nvery likely find it much earlier."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Hash Tables.", "No need to store every\nboard you come accross, just remember\na certain number and overwrite older\nones."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]}], [{"text": ["This isn't my area of expertise, but I would like to recommend a book to you.", "Get a copy of The Algorithm Design Manual by Steven Skiena.", "This has a whole list of different algorithms, and once you read through it you can use it as a reference.", "If nothing else it will help you consider your options."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "The Algorithm Design Manual", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.algorist.com/"}]}], [{"text": ["I'm almost finished writing my version of the \"solver\" in Java.", "It does both exhaustive search, which takes fricking ages for larger board sizes, and a directed search based on a \"pool\" of possible paths, which is pruned after every generation, and a fitness function used to prune the pool.", "I'm just trying to tune the fitness function now..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Update - this is now available at http://bubblesolver.sourceforge.net/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://bubblesolver.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bubblesolver.sourceforge.net/"}]}]]