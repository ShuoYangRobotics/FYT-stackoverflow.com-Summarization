[[{"text": ["Edit: subprocess.call isn't returning a string, but an int -- that 0 you're seeing (after xsel's actual output).", "Use, instead:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "subprocess.call", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n print subprocess.Popen('xsel', stdout=subprocess.PIPE).communicate()[0]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As Mark pointed out, subprocess.call() does not do what you want"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "subprocess.call()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Something like this should work"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\nimport os, sys, subprocess, time\nwhile True:\n    p=subprocess.Popen([\"xsel\"],stdout=subprocess.PIPE)\n    print p.stdout.read()\n    time.sleep(1)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["\"copied0\".rstrip(\"0\") should work"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"copied0\".rstrip(\"0\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Actually, you better do like this, It wont show return code to the screen"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import os, sys, subprocess, time\nwhile True:    \n    _ = subprocess.call(\"dir\", shell=True);\n    time.sleep(1);\n</code>\n</pre>\n", "senID": 2}], [{"text": ["It looks to me like it is running \"xsel\" which is printing its results to stdout, then printing the return code (0) to stdout.", "You are aren't getting the clip results from python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You probably want subprocess.popen and to capture stdout."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The 0 and new line feed at each line are the only things printed by the python print command, where zero is the shell return code from subprocess.call.", "The shell itself first prints it results first to stdout, which is why you see the word."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "subprocess.call", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Edit: See the comments in S Mark's post for the epiphany."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If the zero is always at the end of the string, and so you simply always want the last character removed, just do st=st[:-1]."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "st=st[:-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Or, if you are not sure that there will be a zero at the end, you can do if st[-1]==0: st=st[:-1]."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if st[-1]==0: st=st[:-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]