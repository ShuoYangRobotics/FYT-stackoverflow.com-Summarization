[[{"text": ["That's exactly what I would do if you were locked into your current structure of making several queries.", "Then a simply dictionary.values() will return your list back."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dictionary.values()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["If you have a little more flexibility, why not use Q objects?", "Instead of actually making the queries, store each query in a Q object and use a bitwise or (\"|\") to execute a single query.", "This will achieve your goal and save database hits."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Q", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Q", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Django Q objects"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Django Q objects", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects"}]}], [{"text": ["In general it's better to combine all your queries into a single query if possible.", "Ie."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n q = Model.objects.filter(Q(field1=f1)|Q(field2=f2))\n</code>\n</pre>\n", "senID": 1}, {"text": ["instead of"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n q1 = Models.object.filter(field1=f1)\nq2 = Models.object.filter(field2=f2)\n</code>\n</pre>\n", "senID": 3}, {"text": ["If the first query is returning duplicated Models then use distinct()"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n q = Model.objects.filter(Q(field1=f1)|Q(field2=f2)).distinct()\n</code>\n</pre>\n", "senID": 5}, {"text": ["If your query really is impossible to execute with a single command, then you'll have to resort to using a dict or other technique recommended in the other answers.", "It might be helpful if you posted the exact query on SO and we could see if it would be possible to combine into a single query.", "In my experience, most queries can be done with a single queryset."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["You can use a set if you add the __hash__ function to your model definition so that it returns the id (assuming this doesn't interfere with other hash behaviour you may have in your app):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__hash__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class MyModel(models.Model):\n\n    def __hash__(self):\n        return self.pk\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If the order doesn't matter, use a dict."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Remove \"duplicates\" depends on how you define \"duplicated\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want EVERY column (except the PK) to match, that's a pain in the neck -- it's a lot of comparing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If, on the other hand, you have some \"natural key\" column (or short set of columns) than you can easily query and remove these."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n master = MyModel.objects.get( id=theMasterKey )\ndups = MyModel.objects.filter( fld1=master.fld1, fld2=master.fld2 )\ndups.all().delete()\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you can identify some shorter set of key fields for duplicate identification, this works pretty well."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "hr", "senID": 5}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["If the model objects haven't been saved to the database yet, you can make a dictionary on a tuple of these keys."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n unique = {}\n...\nkey = (anObject.fld1,anObject.fld2)\nif key not in unique:\n    unique[key]= anObject\n</code>\n</pre>\n", "senID": 8}], [{"text": ["I use this one:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict(zip(map(lambda x: x.pk,items),items)).values()\n</code>\n</pre>\n", "senID": 1}]]