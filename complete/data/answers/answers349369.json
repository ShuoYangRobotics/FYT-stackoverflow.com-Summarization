[[{"text": ["There's no such thing as a \"list of strings\" in a URL (or in practically anything in HTTP - if you specify multiple values for the same header, they come out as a single delimited value in most web app frameworks IME).", "It's just a single string.", "I suggest you delimit the strings in some way (e.g.", "comma-separated) and then parse them out again at the other end."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["TRY JSON(JavaScript Object Notation) it's available in the python package.", "Find out here: http://docs.python.org/library/json.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/json.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/json.html"}]}, {"text": ["You can Encode your list to an array represented in JSON and append to the post argument.", "Later decode it back to list..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If the big string you're receiving is merely delimited then you could try splitting it.", "See Splitting strings."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Splitting strings", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.java2s.com/Code/Python/String/Splittingstrings.htm"}]}, {"text": ["To clarify, you get the delimited list of the strings, split that list into a python list, and voila!, you have a python list..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It depends on your server to format the incoming arguments.", "for example, when zope gets a request like this:\nhttp://www.zope.org?ids:list=1&amp;ids:list=2"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.zope.org?ids:list=1&amp;ids:list=2", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.zope.org?ids:list=1&ids:list=2"}]}, {"text": ["you can get the the ids as a list.", "But this feature depends on the server.", "If your server does not support some kind of parsing and validating your input, you have to implement it by yourself.", "Or you use zope."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Are you talking about this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n post_data= \",\".join( list_of_strings )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Data passed to a POST statement is (as far as I understood) encoded as key-value pairs, using the application/x-www-form-urlencoded encoding."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, I'll assume that you represent your list of string as the following dictionnary :"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; my_string_list= { 's1': 'I',                                                \n...     's2': 'love',                                                           \n...     's3': 'python'                                                          \n... }\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then, passing it as argument to POST is as difficult as reading the documentation of urllib."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import urllib\n&gt;&gt;&gt; print urllib.urlopen( 'http://www.google.fr/search', \n       urllib.urlencode( my_string_list ) \n    ).read()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Note that google does not use POST for its search queries, but you will see the error reported by google."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["If you run WireShark while typing the code above, you will see the data of the POST being passed as : "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n s3=python&amp;s2=love&amp;s1=I\n</code>\n</pre>\n", "senID": 7}], [{"text": ["If you can't or don't want to simply separate them with a comma and you want to send them in a more list-ish way.", "I have a list of numbers that I want to pass and I use a PHP webservice on the other end, I don't want to rebuild my webservice since I'v used a common multiselect element that Zend Framework provided."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This example works fine for me and my little integers and it would with your strings, I actualy don't perform the urllib.quote(s), I just do a str(s)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Import urllib"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import urllib\n</code>\n</pre>\n", "senID": 3}, {"text": ["Your list of stings:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n string_list = ['A', 'list', 'of', 'strings', 'and', '\u00f6th\u00e9r', '.&amp;st,u?ff,']\n</code>\n</pre>\n", "senID": 5}, {"text": ["Join together the list of strings with 'post_data[]=', also urlencode the string"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n post_data = '&amp;'.join('post_data[]='+urllib.quote(s) for s in string_list)\n</code>\n</pre>\n", "senID": 7}, {"text": ["Posts to http://example.com/"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "http://example.com/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://example.com/"}]}, {"code": "<pre>\n<code>\n urllib.urlopen('http://example.com/',post_data)\n</code>\n</pre>\n", "senID": 9}], [{"text": ["A data structure like django.utils.datastructures.MultiValueDict is a clean way to represent such data.", "AFAIK it preserves order."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "django.utils.datastructures.MultiValueDict", "tag": "a", "pos": 0, "childList": [{"text": "django.utils.datastructures.MultiValueDict", "tag": "code"}], "childNum": 1, "href": "http://code.djangoproject.com/browser/django/trunk/django/utils/datastructures.py"}, {"text": "django.utils.datastructures.MultiValueDict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = MultiValueDict({'name': ['Adrian', 'Simon'], 'position': ['Developer']})\n&gt;&gt;&gt; d['name']\n'Simon'\n&gt;&gt;&gt; d.getlist('name')\n['Adrian', 'Simon']\n&gt;&gt;&gt; d.get('lastname', 'nonexistent')\n'nonexistent'\n&gt;&gt;&gt; d.setlist('lastname', ['Holovaty', 'Willison'])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Django is using django.http.QueryDict (subclass of MultiValueDict) to turn a query string into python primitives and back."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "django.http.QueryDict", "tag": "a", "pos": 0, "childList": [{"text": "django.http.QueryDict", "tag": "code"}], "childNum": 1, "href": "http://code.djangoproject.com/browser/django/trunk/django/http/__init__.py"}, {"text": "django.http.QueryDict", "childNum": 0, "tag": "code", "childList": []}, {"text": "MultiValueDict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from django.http import QueryDict\n\nqs = 'post_data=a&amp;post_data=b&amp;post_data=c'\n\nquery_dict = QueryDict(qs)\n\nassert query_dict['post_data'] == 'c'\nassert query_dict.getlist('post_data') == ['a', 'b', 'c']\nassert query_dict.urlencode() == qs\n</code>\n</pre>\n", "senID": 3}, {"text": ["You should be able to copy these classes and use them in your project.", "(I haven't checked all dependencies though)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]