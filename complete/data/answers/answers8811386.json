[[{"text": ["With Perl, use a hash:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n use warnings;\nuse strict;\n\nmy %decs;\nwhile (&lt;DATA&gt;) {\n    my ($n) = /([0-9]+)/;\n    my $x = int($n / 10);\n    $decs{$x}++;\n}\nprint \"$_ $decs{$_}\\n\" for sort { $a &lt;=&gt; $b } keys %decs;\n\n__DATA__\n1   3\n2   3\n3   3\n4   3\n8   3\n9   3\n12  3\n14  3\n18  3\n19  3\n20  3\n25  3\n26  3\n27  3\n28  3\n30  3\n31  3\n32  3\n36  3\n38  3\n101 3\n109 3\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 0 6\n1 4\n2 5\n3 5\n10 2\n</code>\n</pre>\n", "senID": 3}], [{"text": ["An awk one-liner for you - "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "awk", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n awk '{x=$1/10; a[int(x)]++} END{for(i in a) print i,a[i] | \"sort -n\"}' INPUT_FILE\n</code>\n</pre>\n", "senID": 1}, {"text": ["Test:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [jaypal:~/Temp] cat file\n1   3\n2   3\n3   3\n4   3\n8   3\n9   3\n12  3\n14  3\n18  3\n19  3\n20  3\n25  3\n26  3\n27  3\n28  3\n30  3\n31  3\n32  3\n36  3\n38  3\n101 3\n109 3\n\n[jaypal:~/Temp] awk '{x=$1/10; a[int(x)]++} END{for(i in a) print i,a[i] | \"sort -n\"}' file\n0 6\n1 4\n2 5\n3 5\n10 2\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I don't quite grok what you're attempting to do here, but I think you're looking for something as simple as"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\ndecades = defaultdict(int)\nfor line in open('infile.txt', 'r'):\n    decades[int(line.split()[0]) / 10] += 1\nfor decade, count in decades:\n    print \"%s people in their %s0s\" % (count, decade * 10)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["if i understand correclty:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -ne '{use integer; $i{$_/=10}++} END{ map { print $_*10,\" : $i{$_}\\n\" } sort keys %i }'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think this python module will do what you need:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nimport math\nfrom collections import OrderedDict \n\ndef count_decades( infile ):\n    decade_counts = OrderedDict()\n    for line in infile:\n        number = int( line.split( ' ' )[ 0 ] )\n        decade_index = int( math.floor( number / 10 ) )\n        decade_counts[ decade_index ] = decade_counts.get( decade_index, 0 ) + 1\n    return decade_counts\n\nif __name__ == '__main__':    \n    with open( sys.argv[ 1 ], 'r' ) as infile:\n        decade_counts = count_decades( infile )        \n        for key, count in decade_counts.items():\n            print( \"{} - {} occurs {} times\".format( \n                key * 10 , key * 10 + 9, count ) )\n</code>\n</pre>\n", "senID": 1}, {"text": ["When invoked like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n python occur.py decades.txt\n</code>\n</pre>\n", "senID": 3}, {"text": ["The result is:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n 0 - 9 occurs 6 times\n10 - 19 occurs 4 times\n20 - 29 occurs 5 times\n30 - 39 occurs 5 times\n100 - 109 occurs 2 times\n</code>\n</pre>\n", "senID": 5}, {"text": ["You may need different output, but it should be easy to customize..."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["UPDATE:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["For OPs desired output change:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n print( \"{} - {} occurs {} times\".format( \n                key * 10 , key * 10 + 9, count ) )\n</code>\n</pre>\n", "senID": 9}, {"text": ["to"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n print( \"{} {}\".format( \n                key , count ) )\n</code>\n</pre>\n", "senID": 11}], [{"text": ["In Python 2.7:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import Counter\nc = Counter(int(line.split()[0]) // 10 for line in open(\"infile\"))\nfor k, v in sorted(c.iteritems()):\n    print k, v\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Other perl solution:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "perl", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n perl -ane '\n  $h{ int( $F[0] / 10 ) }++;\n  END {\n    for $num ( sort { $a &lt;=&gt; $b } keys %h ) {\n      printf qq[%d\\t%d\\n], $num, $h{ $num }\n    }\n  }\n' file\n</code>\n</pre>\n", "senID": 1}, {"text": ["Result:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 0       6\n1       4\n2       5\n3       5\n10      2\n</code>\n</pre>\n", "senID": 3}], [{"text": ["One line Python itertools solution (should work for Python >= 2.4):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import groupby\n&gt;&gt;&gt; sorted((key, len(list(group))) for key, group in groupby(\n...        int(line.split()[0]) // 10 for line in open('infile')))\n[(0, 6), (1, 4), (2, 5), (3, 5), (10, 2)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's a short one in Perl :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -nE 'END{say\"$_\\t$h{$_}\"for sort{$a&lt;=&gt;$b}keys%h}++$h{$_/5&gt;&gt;1}' input.txt\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n0       6\n1       4\n2       5\n3       5\n10      2\n</pre>\n", "senID": 2}], [{"text": ["This might work for you:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sed 's/\\S\\s*\\S*$//;s/^$/0/' file | uniq -c | sed 's/\\s*\\(\\S*\\)\\s\\(\\S*\\)/\\2\\t\\1/'\n0       6\n1       4\n2       5\n3       5\n10      2\n</code>\n</pre>\n", "senID": 1}, {"text": ["It looks as if your data is sorted, if not insert a sort -n like so:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "sort -n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n sed 's/\\S\\s*\\S*$//;s/^$/0/' file | sort -n | uniq -c | sed 's/\\s*\\(\\S*\\)\\s\\(\\S*\\)/\\2\\t\\1/'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Another approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -ne '$h{$.=$_/10}++}{print\"$_ $h{$_}\\n\"for sort{$a-$b}keys%h' infile.txt\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 0       6\n1       4\n2       5\n3       5\n10      2\n</code>\n</pre>\n", "senID": 3}, {"text": ["Can be shortened further with -E and say if available."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "-E", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "say", "childNum": 0, "tag": "code", "childList": []}]}]]