[[{"text": ["It's invalid because article doesn't exist by the time the first loop is parsed."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "article", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n arr = [tag for article in articles for tag in article.tags]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Perhaps"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n arr = [tag for tag in (a.tags for a in articles)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You are actually looping in the order that you don't want to order:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["what you want is:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n result = [ tag for article in articles for tag in article.tags ]\n</code>\n</pre>\n", "senID": 2}, {"text": ["To translate what you were doing in your example would be:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for tag in article.tags:\n    for article in articles:\n       #code\n</code>\n</pre>\n", "senID": 4}, {"text": ["which doesn't make much sense."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import itertools\nit = itertools.chain.from_iterable(article.tags for article in articles)\nl  = list(it) # if you really need a list and not an iterator\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you want unique tags, you might be better served by"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "unique", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import operator\ntags = reduce(operator.__or__, (set(article.tags) for article in articles), set())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["For Python 3, you would need to"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The initializer set() is returned if the sequence is empty, rather than throwing an error."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "set()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]}], [{"text": ["This is already answered multiple times, but it can be helpful to break lines and indent:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n arr = [tag \n       for article in articles\n           for tag in article.tags]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This has the advantage of "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]