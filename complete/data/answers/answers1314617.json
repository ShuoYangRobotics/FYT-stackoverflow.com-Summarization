[[{"text": ["In this line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if value is not None and not value.has_key():\n</code>\n</pre>\n", "senID": 1}, {"text": ["value is a unicode string.", "It looks like the code is expecting it to be a db.Model,"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "value", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "db.Model", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["(From what I can see, has_key is a method of db.Model, as well as a method of Python dictionaries, but this must be the db.Model one because it's being called with no arguments."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "has_key", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "db.Model", "childNum": 0, "tag": "code", "childList": []}, {"text": "db.Model", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Are you passing a string to a GAE API that expects a db.Model?"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "db.Model", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Your problem is that postedcountry is a string and not a country object.", "Values retrieved from self.request.get are the string values of variables passed by the browser. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You need to look up a country object using some GQL.", "Exactly how you do that will depend on what exactly the country field of your HTML form is returning , Object Key?, country name?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def post(self):\n  postedcountry = self.request.get('country')\n\n  # &lt;-------- Need to look up a country here !!!!!\n\n  cmsRequest = models.CMSRequest(country=postedcountry)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Note: normally \"mapping\" types in Python (dictionaries and dictionary like classes ... such as various types of dbm (indexed file) and some DBMS/ORM interfaces ... will implement a has_key() method."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "has_key()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Somehow you have gotten a Unicode (string) object into this statement when you were expecting to have some sort of dictionary or other mapping object reference."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In general AttributeError means that you have tangled up your object bindings (variable assignments).", "You've given a name to some object other than the type that you intended.", "(Or sometimes it means you have a typo like \".haskey()\" instead of has_key() ... etc)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "AttributeError", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "has_key()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["BTW: the use of has_key() is somewhat dated.", "Normally it's better to test your containers with the Python in operator (which implicitly calls __contains__() --- and which works on lists, strings, and other sequences as well as mapping types)."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "has_key()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "in", "childNum": 1, "tag": "strong", "pos": 1, "childList": [{"text": "in", "tag": "code"}]}, {"text": "in", "childNum": 0, "tag": "code", "childList": []}, {"text": "__contains__()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also value.has_key() would raise an error even if value were a dictionary since the .has_key() method requires an argument."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "value.has_key()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "value", "childNum": 0, "tag": "code", "childList": []}, {"text": ".has_key()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In your code I would either explicitly test for if postedcountry is not None: ... or I'd supply your .get() with an (optional) default for \"postedcountry.", "\"  "], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "if postedcountry is not None:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".get()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["How do you want to handle the situation where request had no postedcountry?", "Do you want to assume it's being posted from some particular default?", "Force a redirection to some page that requires the user to supply a value for that form element?", "Alert the Spanish Inquisition?"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "request", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "postedcountry", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}], [{"text": ["If you read the traceback, it'll tell you exactly what is going on:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if value is not None and not value.has_key():\nAttributeError: 'unicode' object has no attribute 'has_key'\n</code>\n</pre>\n", "senID": 1}, {"text": ["What this says is the the value variable which you're using doesn't have the has_key attribute.", "And, what it's telling you is that your value variable isn't a dictionary, as it looks like you're expecting...instead, it's a unicode object, which is basically a string."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "value", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "has_key", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "value", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You're attempting to set a string to a ReferenceProperty.", "The 'country' field of CMSCountry is a db.ReferenceProperty, which takes a db.Key or a CMSCountry object, but you're attempting to set it to a string."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You should be doing something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def post(self):\n  postedcountry = self.request.get('country')\n  country = models.CMSCountry.all().filter('name =', postedcountry)\n  if not country:\n    # Couldn't find the country\n  else:\n    cmsRequest = models.CMSRequest(country=country)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Please do file a bug about the rather unhelpful error message, though."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "file a bug", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/googleappengine/issues/list"}]}], [{"text": ["The dictionary object's has_key() method is deprecated in 3.0 - use the \"in\" expression instead.", "If you are using the old library in 3.x, you must make code changes to accommodate it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]