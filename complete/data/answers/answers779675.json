[[{"text": ["If you doing this on a Windows OS, you can prefix the target of your shortcut with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n C:\\WINDOWS\\system32\\cmd.exe /K &lt;command&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will prevent the window from closing when the command exits."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n try:\n    #do some stuff\n    1/0 #stuff that generated the exception\nexcept Exception as ex:\n    print ex\n    raw_input()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You could have a second script, which imports/runs your main code.", "This script would catch all exceptions, and print a traceback (then wait for user input before ending)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Assuming your code is structured using the if __name__ == \"__main__\": main() idiom.."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if __name__ == \"__main__\": main()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def myfunction():\n    pass\n\nclass Myclass():\n    pass\n\ndef main():\n    c = Myclass()\n    myfunction(c)\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 2}, {"text": ["..and the file is named \"myscriptname.py\" (obviously that can be changed), the following will work"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from myscriptname import main as myscript_main\n\ntry:\n    myscript_main()\nexcept Exception, errormsg:\n    print \"Script errored!\"\n    print \"Error message: %s\" % errormsg\n    print \"Traceback:\"\n    import traceback\n    traceback.print_exc()\n    print \"Press return to exit..\"\n    raw_input()\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you don't have a main() function, you would use put the import statement in the try: block:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "main()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "try:", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n try:\n    import myscriptname\nexcept [...]\n</code>\n</pre>\n", "senID": 6}, {"text": ["A better solution, one that requires no extra wrapper-scripts, is to run the script either from IDLE, or the command line.."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["On Windows, go to Start > Run, enter cmd and enter.", "Then enter something like.."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "cmd", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n cd \"\\Path\\To Your\\ Script\\\"\n\\Python\\bin\\python.exe myscriptname.py\n</code>\n</pre>\n", "senID": 9}, {"text": ["(If you installed Python into C:\\Python\\)"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "C:\\Python\\", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["On Linux/Mac OS X it's a bit easier, you just run cd /home/your/script/ then python myscriptname.py"], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "cd /home/your/script/", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "python myscriptname.py", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The easiest way would be to use IDLE, launch IDLE, open the script and click the run button (F5 or Ctrl+F5 I think).", "When the script exits, the window will not close automatically, so you can see any errors"], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "F5", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Ctrl+F5", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Also, as Chris Thornhill suggested, on Windows, you can create a shortcut to your script, and in it's Properties prefix the target with.."], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "Chris Thornhill", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/779675/stop-python-from-closing-on-error/779693#779693"}]}, {"code": "<pre>\n<code>\n C:\\WINDOWS\\system32\\cmd.exe /K [existing command]\n</code>\n</pre>\n", "senID": 14}, {"text": ["From http://www.computerhope.com/cmd.htm:"], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "http://www.computerhope.com/cmd.htm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.computerhope.com/cmd.htm"}]}], [{"text": ["On UNIX systems (Windows has already been covered above...) you can change the interpreter argument to include the -i flag:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["#!/usr/bin/python -i"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["From the man page:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can register a top-level exception handler that keeps the application alive when an unhandled exception occurs:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def show_exception_and_exit(exc_type, exc_value, tb):\n    import traceback\n    traceback.print_exception(exc_type, exc_value, tb)\n    raw_input(\"Press key to exit.\")\n    sys.exit(-1)\n\n import sys\n sys.excepthook = show_exception_and_exit\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is especially useful if you have exceptions occuring inside event handlers that are called from C code, which often do not propagate the errors."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Your question is not very clear, but I assume that the python interpreter exits (and therefore the calling console window closes) when an exception happens."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You need to modify your python application to catch the exception and print it without exiting the interpreter.", "One way to do that is to print \"press ENTER to exit\" and then read some input from the console window, effectively waiting for the user to press Enter."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]