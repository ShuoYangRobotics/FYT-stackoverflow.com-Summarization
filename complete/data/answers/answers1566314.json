[[{"text": ["as is a bad variable name, it is reserved keyword in Python.", "don't name your variables like this.", "once you fix it, everything else will be alright.", "of course you should be doing: "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "as", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n alt_str.output()\n</code>\n</pre>\n", "senID": 1}, {"text": ["edit: I was able to replicate your error messages when trying to apply output to the class: AltString.output, then: AltString.output().", "You should be applying the method to the instance of the class instead."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "output", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "AltString.output", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "AltString.output()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n alt_str = AltString('spam')\nalt_str.output()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["'as' and 'str' are keywords, don't shadow them by defining variables with the same name."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Your example is confirmed to work as you expect in python 2.4"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from x import *\n&gt;&gt;&gt; as = AltString(\"String1\")\n&gt;&gt;&gt; as.append(\"bubu\")\n&gt;&gt;&gt; \n&gt;&gt;&gt; as.output()\n'String1bubu'\n</code>\n</pre>\n", "senID": 1}, {"text": ["In python 2.5 it should also work, but will raise a warning about the use of as, which will become a reserved keyword in python 2.6. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I don't really understand why you obtain such error messages.", "If you are using python 2.6 it should probably produce a syntax error."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["SilentGhost is correct.", "Also, self._contents and self._size are superfluous in this example."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I ran the following code :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class AltString:\n\n    def __init__(self, str = \"\", size = 0):\n        self._contents = str\n        self._size = size\n        self._list = [str]\n\n    def append(self, str):\n        self._list.append(str)\n\n    def output(self):\n        return \"\".join(self._list)\n\n\na = AltString(\"String1\")\n\na.append(\"String2\")\n\na.append(\"String3\")\n\n\nprint a.output()\n</code>\n</pre>\n", "senID": 1}, {"text": ["And it worked perfectly.", "The only flow I can see is that you use \"as\", which is a reserved keyword."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Just tried your code in Python 2.6.2 and the line"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n as = AltString(\"String1\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["doesn't work because \"as\" is a reserved keyword (see here) but if I use another name it works perfectly."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/compound%5Fstmts.html#the-with-statement"}]}]]