[[{"text": ["What's wrong with the javadoc?", "The index lists all classes, methods, and static variables.", "You can probably grep for parenthesis."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "javadoc", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://java.sun.com/javase/6/docs/api/allclasses-frame.html"}, {"text": "index", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://java.sun.com/javase/6/docs/api/allclasses-frame.html"}]}], [{"text": ["To get all classes and methods you can look at the index on\nhttp://java.sun.com/javase/6/docs/api/index-files/index-1.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://java.sun.com/javase/6/docs/api/index-files/index-1.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://java.sun.com/javase/6/docs/api/index-files/index-1.html"}]}, {"text": ["This will be 10's of thousands classes and method which can be overwhelming."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I suggest instead you use auto-complete in your IDE.", "This will show you all the matching classes/methods appropriate based on context.", "e.g.", "say you have a variable"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["long time = System."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["This will show you all the methods in System which return a long value, such as"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["long time = System.nanoTime();"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Even if you know a lot of the method/classes, this can save you a lot of typing."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["If you just want to create a list of all classes in Java and their methods (so that you can populate a database or an XML file), you may want to write an Eclipse-plugin that looks at the entire JavaCore model, and scans all of its classes (e.g., by searching all subtypes of Object).", "Then enumerate all the methods.", "You can do that technically to any library by including it in your context."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["IBM had a tool for creating XML from JavaDocs, if I am not mistaken:\nhttp://www.ibm.com/developerworks/xml/library/x-tipjdoc/index.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.ibm.com/developerworks/xml/library/x-tipjdoc/index.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks/xml/library/x-tipjdoc/index.html"}]}], [{"text": ["If thats what you're after, you could do without a (limited) list of Java Classes by using some simple reflection:\nhttp://java.sun.com/developer/technicalArticles/ALT/Reflection/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://java.sun.com/developer/technicalArticles/ALT/Reflection/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://java.sun.com/developer/technicalArticles/ALT/Reflection/"}]}, {"code": "<pre>\n<code>\n try {\n  Class.forName(\"word.word\");\n  System.out.println(\"This is a valid class!\");\n} catch (ClassNotFoundException e) {\n  System.out.println(\"This is not a valid class.\");\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Something like this should be enough for your purposes, with he added benefit of not being limited to a subset of classes, and extensible by any libraries on the classpath."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["There's also an option to either parse classlist file from jre/lib folder or open the jsse.jar file, list all classes there and make a list of them in dot-separated form by yourself."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "classlist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "jsse.jar", "childNum": 0, "tag": "code", "childList": []}]}]]