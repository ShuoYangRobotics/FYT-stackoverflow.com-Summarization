[[{"text": ["lst[i] is a list of numbers, not a number itself.", "You can't multiply a list of numbers by a number, but you can multiply the elements in the list by the number."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lst[i]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You're indexing into both lst and rate with the loop variable i -- but one list has four elements and the other list has three elements.", "You're either going to miss an element from one list -- or try to access a non-existent element in the other list."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "lst", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "rate", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n def multiply(lst, rate):\n    lst2 = []\n    for litem in lst:\n        lst2.append([item + (r * item) for r, item in zip(rate, litem)])\n    return lst2\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can use numpy for this kind of stuff:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "numpy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; lst = np.array([[25, 10, 300], [7, 30, 80], [7, 530, 24],[65, 30, 2]])\n&gt;&gt;&gt; rate = [0.5, 0.02, 0.15]\n&gt;&gt;&gt; lst + lst*rate\narray([[  37.5,   10.2,  345. ],\n       [  10.5,   30.6,   92. ],\n       [  10.5,  540.6,   27.6],\n       [  97.5,   30.6,    2.3]])\n</code>\n</pre>\n", "senID": 1}, {"text": ["If numpy is overkill for you, this could help you out:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lst = [[25, 10, 300], [7, 30, 80], [7, 530, 24],[65, 30, 2]]\n&gt;&gt;&gt; rate = [0.5, 0.02, 0.15]\n&gt;&gt;&gt; [[x+x*y for x,y in zip(row, rate)] for row in lst]\n[[37.5, 10.2, 345.0], [10.5, 30.6, 92.0], [10.5, 540.6, 27.6], [97.5, 30.6, 2.3]]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Explanation: zip(row, rate) turns [rate, rate, rate], [item, item item] into [(item, rate), (item, rate), (item, rate)]; the comprehension creates rows of [item+item*rate, item+item*rate, item+item*rate]."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "zip(row, rate)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[rate, rate, rate], [item, item item]", "childNum": 0, "tag": "code", "childList": []}, {"text": "[(item, rate), (item, rate), (item, rate)]", "childNum": 0, "tag": "code", "childList": []}, {"text": "[item+item*rate, item+item*rate, item+item*rate]", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n def multiply(lst,rate):\n   r = [] # Stores the list the method will return\n   for inner_list in lst:\n     temp = [] # stores the calculated values\n     for amount in inner_list:\n        temp.append(amount*(rate[inner_list.index(amount)]+1))\n     r.append(temp)\n   return r\n</code>\n</pre>\n", "senID": 0}, {"text": ["The function works like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["See http://docs.python.org/tutorial/datastructures.html for information on the index() method."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/tutorial/datastructures.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html"}]}], [{"text": ["You could also do:\nmap(lambda x: map(lambda y, z: y+y*z, x, rate), lst)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "map(lambda x: map(lambda y, z: y+y*z, x, rate), lst)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["map applies the function to each element of the list.", "When called with more than one element, it applies the function corresponding elements from each list (i.e.", "func(list1[0], list2[0]) and func(list1[1], list2[1]) and so on).", "The inner map works on each element of lst, and computes the interest rate for each number in the sublist.", "The outer map supplies the inner map with the sublists of lst."], "childNum": 8, "tag": "p", "senID": 1, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "func(list1[0], list2[0])", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "func(list1[1], list2[1])", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "lst", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "childList": []}, {"text": "lst", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["In Python the expression"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list * number\n</code>\n</pre>\n", "senID": 1}, {"text": ["means concatenating number copies of the list... for example"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "number", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [1, 2, 3] * 3 --&gt; [1, 2, 3, 1, 2, 3, 1, 2, 3]\n</code>\n</pre>\n", "senID": 3}, {"text": ["The error message is because you tried to multiply a list and a list.", "That operation (meaning an element-by-element operation) is supported with that syntax for numpy array objects, but for regular Python lists you need instead to compute the result explicitly.", "One approach is using for example list comprehension:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "numpy", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n x = [1, 2, 3]\ny = [4, 5, 6]\n[a*b for a, b in zip(x, y)] --&gt; [4, 10, 18]\n</code>\n</pre>\n", "senID": 5}, {"text": ["To solve your problem using list comprehensions then the code is:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n [[x+x*y for x, y in zip(L, rate)] for L in lst]\n\n--&gt; [[37.5, 10.199999999999999, 345.0],\n     [10.5, 30.600000000000001, 92.0],\n     [10.5, 540.60000000000002, 27.600000000000001],\n     [97.5, 30.600000000000001, 2.2999999999999998]]\n</code>\n</pre>\n", "senID": 7}, {"text": ["Note that those long trails of decimals are present because of the inherent inaccuracy of floating point arithmetic and is present for this datatype also in other languages (simply some of them hide the fact by rounding when doing output)."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]]