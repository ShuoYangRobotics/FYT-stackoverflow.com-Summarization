[[{"text": ["To add to the @Jay's answer, some concepts..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the @Jay's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/544919/python-can-i-print-original-var-name/544944#544944"}]}, {"text": ["Python \"variables\" are simply references to values.", "Each value occupies a given memory location (see id()) "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; id(1)\n10052552\n\n&gt;&gt;&gt; sys.getrefcount(1)\n569\n</code>\n</pre>\n", "senID": 2}, {"text": ["From the above, you may notice that the value \"1\" is present at the memory location 10052552.", "It is referred to 569 times in this instance of the interpreter.  "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; MYVAR = 1\n&gt;&gt;&gt; sys.getrefcount(1)\n570\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now, see that because yet another name is bound to this value, the reference count went up by one."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Based on these facts, it is not realistic/possbile to tell what single variable name is pointing to a value."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I think the best way to address your issue is to add a mapping and function to your enum reference back to a string name."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n myEnum.get_name(myEnum.SomeNameA)\n</code>\n</pre>\n", "senID": 8}, {"text": ["Please comment if you would like sample code."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["There is no such thing as a unique or original variable name\nhttp://www.amk.ca/quotations/python-quotes/page-8"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.amk.ca/quotations/python-quotes/page-8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.amk.ca/quotations/python-quotes/page-8"}]}], [{"text": ["Short answer: no. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Long answer: this is possible with some ugly hacks using traceback, inspect and the like, but it's generally probably not recommended for production code.", "For example see: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["http://groups.google.com/group/comp.lang.python/msg/237dc92f3629dd9a?pli=1"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["http://aspn.activestate.com/ASPN/Mail/Message/python-Tutor/330294"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}, {"text": ["Perhaps you can use a workaround to translate the value back to a name/representational string.", "If you post some more sample code and details about what you're wanting this for maybe we can provide more in-depth assistance."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Just use the text you want to print as the value of the enum, as in"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyEnum (object):\n    valueA = \"valueA\"\n    valueB = \"valueB\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["comparing strings for identity is almost as efficient in Python as is comparing interger values (this is due to the fact the strings are immutable as have a hash value)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Of course there are esier way to create the enum in the first place:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Enum (object):\n    def __init__(self, *values):\n        for v in values:\n            self.__dict__[v] = v\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then, create you enumeration like this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n MyEnum = Enum(\"valueA\", \"valueB\")\n</code>\n</pre>\n", "senID": 6}, {"text": ["ans access the same way as above:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n MyEnum.valueA\n</code>\n</pre>\n", "senID": 8}], [{"text": ["You could store the canonical name as an attribute of the instance, and then assign it to a variable with the same name.", "This might work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyEnum(object):\n    def __new__(cls, name):\n        try:\n            return getattr(MyEnum, name)\n        except AttributeError:\n            e = super(MyEnum, cls).__new__(cls)\n            e.name = name\n            setattr(MyEnum, name, e)\n            return e\n</code>\n</pre>\n", "senID": 1}, {"text": ["Regardless, it's not a particularly \"Pythonic\" thing to do."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["On second thought:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Since Python does not provide native Enum types, you should not ask for one, but instead use other, more powerful construct to build your program.", "Otherwise, the next step will invariably be \"Why does Python not have a switch ...: statement, and how do I best emulate it?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "switch ...:", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Since Enums are often used to define some kind of state, a much better approach is this:\nCreate a base class that define all the abstract properties, attributes and methods belonging to a state.", "Then, for each state, derive a sub class that implements the specific behavior of this state.", "You can then pass around these classes (or maybe instances thereof) to handle the state and its hehaviour."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you use classes instead of instances (the Python way of a \"singleton\"), you can simply check for any given state (not that it should be necessary) by if current_state is StateA: (note the is instead of ==) with no performance penalty over comparing interger values."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "if current_state is StateA:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["And of course, you can define a name attribute and a __str__() method to access and print the state's name."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "name", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__str__()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["There are two answers to this question: Yes and No."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Yes", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "No", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\nCan you do it?  -- Yes (in most cases)\nIs it worth it? -- No  (in most cases)\n</pre>\n", "senID": 1}, {"text": ["It depends on an implementation of enums.", "For example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Enum:\n    A = 1\n    B = 2\n</code>\n</pre>\n", "senID": 3}, {"text": ["It doesn't matter whether there are 100 names refers to an integer whose name you'd like to find if you know enums class object and all they're names (or at least a unique prefix) in that class."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "if you know enums class object and all they're names (or at least a unique prefix) in that class", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["For the example above as @batbrat suggested you can inspect 'Enum.__dict__' using namestr():"], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "as @batbrat suggested", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/544919/python-can-i-print-original-var-name/544954#544954"}, {"text": "Enum.__dict__", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://stackoverflow.com/questions/592746/how-can-you-print-a-variable-name-in-python/592891#592891", "text": "namestr()", "childNum": 1, "tag": "a", "childList": [{"text": "namestr()", "tag": "code"}]}, {"text": "namestr()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; getEnum = lambda: Enum.A\n &gt;&gt;&gt; namestr(getEnum(), Enum.__dict__)\n &gt;&gt;&gt; ['A']\n</code>\n</pre>\n", "senID": 6}, {"text": ["In this case you even don't have to know all enum names.", "If enums implemented differently then you might need to use a different hack.", "There will be some solution in most cases e.g., see @Jay's answer.", "But it doesn't matter because.."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "@Jay's answer", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/544919/python-can-i-print-original-var-name/544944#544944"}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["Some enum implementations may require ugly, complex and in the end unreliable hacks to implement namestr()."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "namestr()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Enum class can return answer by itself (see @David's, @Ber's, @gahooa's answers)."], "childNum": 3, "tag": "p", "senID": 9, "childList": [{"text": "@David's", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/544919/python-can-i-print-original-var-name/544957#544957"}, {"href": "http://stackoverflow.com/questions/544919/python-can-i-print-original-var-name/545089#545089", "text": "@Ber's", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://stackoverflow.com/questions/544919/python-can-i-print-original-var-name/544966#544966", "text": "@gahooa's", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["As @Ber pointed out there is no builtin Enum and switch statement in Python (see PEP-0275, PEP-3103).", "It is worth investigating solutions without enums."], "childNum": 3, "tag": "p", "senID": 10, "childList": [{"text": "@Ber pointed out", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/544919/python-can-i-print-original-var-name/545742#545742"}, {"text": "PEP-0275", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0275/"}, {"text": "PEP-3103", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3103/"}]}]}], [{"text": ["As far as I know, that will require some introspection.", "You can try using the inspect module."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There are a few simple things you may want to try before that:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["All that said, there aren't standard enumerations in Python.", "It would help to know how you are creating them."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["On second thoughts, you can maintain your variables as a dictionary in the enum, keyed by variable name and provide a method of the enumeration to find the right variable and print its name.", "This solution (keeping a dict) is bad because variable values aren't necessarily unique."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Edit: \nThe problem is not trivial, so you may want to use a tried and tested solution.", "IMHO, you would be better off avoiding the situation if you can."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}], [{"text": ["Erlang has a concept called \"atoms\" -- they are similar to string constants or enumerations.", "Consider using a string constant as the value of your enum -- the same as the name of the enum."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]