[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; l = range(165)\n&gt;&gt;&gt; l[0::10]\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT: just for fun, a little timing comparison (ignoring the boundary condition):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $ python -m timeit -s \"l = range(1000)\" \"l1 = [x for x in l if x % 10 == 0]\"\n1000 loops, best of 3: 525 usec per loop\n$ python -m timeit -s \"l = range(1000)\" \"l1 = l[0::10]\"\n100000 loops, best of 3: 4.02 usec per loop\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You can use the slice operator like this:   "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = [1,2,3,4,5]\nl2 = l[::2] # get subsequent 2nd item\n</code>\n</pre>\n", "senID": 1}], [], [{"text": ["From manual: s[i:j:k]  slice of s from i to j with step k"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "s[i:j:k]  slice of s from i to j with step k", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n li = range(100); sub = li[0::10]\n&gt;&gt;&gt; sub\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n newlist = oldlist[::10]\n</code>\n</pre>\n", "senID": 0}, {"text": ["This picks out every 10th element of the list."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Why not just use a step parameter of range function as well to get:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "step", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "range", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n l = range(0, 1000, 10)\n</code>\n</pre>\n", "senID": 1}, {"text": ["For comparison, on my machine:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n H:\\&gt;python -m timeit -s \"l = range(1000)\" \"l1 = [x for x in l if x % 10 == 0]\"\n10000 loops, best of 3: 90.8 usec per loop\nH:\\&gt;python -m timeit -s \"l = range(1000)\" \"l1 = l[0::10]\"\n1000000 loops, best of 3: 0.861 usec per loop\nH:\\&gt;python -m timeit -s \"l = range(0, 1000, 10)\"\n100000000 loops, best of 3: 0.0172 usec per loop\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here is a better implementation of an \"every 10th item\" list comprehension, that does not use the list contents as part of the membership test:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = range(165)\n&gt;&gt;&gt; [ item for i,item in enumerate(l) if i%10==0 ]\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\n&gt;&gt;&gt; l = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n&gt;&gt;&gt; [ item for i,item in enumerate(l) if i%10==0 ]\n['A', 'K', 'U']\n</code>\n</pre>\n", "senID": 1}, {"text": ["But this is still far slower than just using list slicing."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n existing_list = range(0, 1001)\nfiltered_list = [i for i in existing_list if i % 10 == 0]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["List comprehensions are exactly made for that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n smaller_list = [x for x in range(100001) if x % 10 == 0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can get more info about them in the python official documentation:\nhttp://docs.python.org/tutorial/datastructures.html#list-comprehensions"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}]]