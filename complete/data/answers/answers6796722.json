[[{"text": ["So I decided to ditch Python and try Perl, and it Just Worked.", "Here's a minimal code sample:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n use strict;\nuse Net::OAuth;\nuse LWP::UserAgent;\n\nmy $CC_KEY = \"blahblahblah\";\nmy $CC_SECRET = \"blah\";\n\nmy $url = 'http://yboss.yahooapis.com/ysearch/web';\nprint make_request($url, {q =&gt; \"cat dog\", format =&gt; \"xml\", count =&gt; 5});\n\nsub make_request {\n    my ($url, $args) = @_;\n\n    my $request = Net::OAuth-&gt;request(\"request token\")\n      -&gt;new(\n            consumer_key =&gt; $CC_KEY,\n            consumer_secret =&gt; $CC_SECRET,\n            request_url =&gt; $url,\n            request_method =&gt; 'GET',\n            signature_method =&gt; 'HMAC-SHA1',\n            timestamp =&gt; time,\n            nonce =&gt; int(rand 10**6),\n            callback =&gt; 'oob',\n            extra_params =&gt; $args,\n            protocol_version =&gt; Net::OAuth::PROTOCOL_VERSION_1_0A,\n            );\n    $request-&gt;sign;\n\n    my $res = LWP::UserAgent-&gt;new(env_proxy=&gt;1)-&gt;get($request-&gt;to_url); \n    return $res-&gt;content if $res-&gt;is_success;\n    die $res-&gt;status_line;\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's another solution, this time back in python-land.", "This was put together by Tom De Smedt, author of the Pattern web-mining kit."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Pattern", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.clips.ua.ac.be/pages/pattern"}]}, {"text": ["I'll communicate with the author of python-oauth2 to see if it can be fixed."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "python-oauth2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n OAUTH_CONSUMER_KEY = \"blahblahblah\"\nOAUTH_CONSUMER_SECRET = \"blah\"\n\nimport urllib\nimport hmac\nimport time\nimport random\nimport base64\n\ntry:\n     from hashlib import sha1\n     from hashlib import md5\nexcept:\n     import sha as sha1\n     import md5; md5=md5.new\n\ndef hmac_sha1(key, text):\n     return hmac.new(key, text, sha1).digest()\n\ndef oauth_nonce(length=40):\n     h = \"\".join([str(random.randint(0, 9)) for i in range(length)])\n     h = md5(str(time.time()) + h).hexdigest()\n     return h\n\ndef oauth_timestamp():\n     return str(int(time.time()))\n\ndef oauth_encode(s):\n     return urllib.quote(s, \"~\")\n\ndef oauth_signature(url, data={}, method=\"get\", secret=\"\", token=\"\"):\n     # Signature base string: http://tools.ietf.org/html/rfc5849#section-3.4.1\n     base  = oauth_encode(method.upper()) + \"&amp;\"\n     base += oauth_encode(url.rstrip(\"?\")) + \"&amp;\"\n     base += oauth_encode(\"&amp;\".join([\"%s=%s\" % (k, v) for k, v in sorted(data.items())]))\n     # HMAC-SHA1 signature algorithm: http://tools.ietf.org/html/rfc5849#section-3.4.2\n     signature = hmac_sha1(oauth_encode(secret) + \"&amp;\" + token, base)\n     signature = base64.b64encode(signature)\n     return signature\n\nq = \"cat\"\nurl = \"http://yboss.yahooapis.com/ysearch/\" + \"web\" # web | images | news\ndata = {\n     \"q\": q,\n     \"start\": 0,\n     \"count\": 50, # 35 for images\n     \"format\": \"xml\",\n     \"oauth_version\": \"1.0\",\n     \"oauth_nonce\" : oauth_nonce(),\n     \"oauth_timestamp\" : oauth_timestamp(),\n     \"oauth_consumer_key\" : OAUTH_CONSUMER_KEY,\n     \"oauth_signature_method\" : \"HMAC-SHA1\",\n}\ndata[\"oauth_signature\"] = oauth_signature(url, data, secret=OAUTH_CONSUMER_SECRET)\n\n\ncomplete_url = url + \"?\" + urllib.urlencode(data)\nresponse = urllib.urlopen(complete_url)\nprint response.read()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Here is a Python code snippet that works for me against Yahoo!", "BOSS:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import httplib2\nimport oauth2\nimport time\n\nOAUTH_CONSUMER_KEY = \"Blah\"\nOAUTH_CONSUMER_SECRET = \"Blah\"\n\nif __name__ == \"__main__\":\n    url = \"http://yboss.yahooapis.com/ysearch/web?q=cats%20dogs\"\n    consumer = oauth2.Consumer(key=OAUTH_CONSUMER_KEY,secret=OAUTH_CONSUMER_SECRET)\n    params = {\n        'oauth_version': '1.0',\n        'oauth_nonce': oauth2.generate_nonce(),\n        'oauth_timestamp': int(time.time()),\n    }\n\n    oauth_request = oauth2.Request(method='GET', url=url, parameters=params)\n    oauth_request.sign_request(oauth2.SignatureMethod_HMAC_SHA1(), consumer, None)\n    oauth_header=oauth_request.to_header(realm='yahooapis.com')\n\n    # Get search results\n    http = httplib2.Http()\n    resp, content = http.request(url, 'GET', headers=oauth_header)\n    print resp\n    print content\n</code>\n</pre>\n", "senID": 1}, {"text": ["Im using an Authenticate Header to submit the OAuth signature."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I stepped into the urllib2.open code using the debugger, and found that the response has this header:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "urllib2.open", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n WWW-Authenticate: OAuth oauth_problem=\"version_rejected\", realm=\"yahooapis.com\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["So I guess I'm having some kind of version mismatch of OAuth."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here is sample code to access Yahoo!", "BOSS API v2 using with python-oauth as oauth liberary."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python-oauth", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "https://github.com/leah/python-oauth"}]}, {"code": "<pre>\n<code>\n OAUTH_CONSUMER_KEY    = \"&lt;oauth consumer key&gt;\"\nOAUTH_CONSUMER_SECRET = \"&lt;oauth consumer secret&gt;\"\nURL                   = \"http://yboss.yahooapis.com/ysearch/web\"\n\nimport urllib\nimport oauth.oauth as oauth\n\ndata = {\n    \"q\": \"yahoo boss search\",\n    \"start\":0,\n    \"count\":2,\n    \"format\":\"json\"\n}\nconsumer = oauth.OAuthConsumer(OAUTH_CONSUMER_KEY, OAUTH_CONSUMER_SECRET)\nsignature_method_plaintext = oauth.OAuthSignatureMethod_PLAINTEXT()\nsignature_method_hmac_sha1 = oauth.OAuthSignatureMethod_HMAC_SHA1()\noauth_request = oauth.OAuthRequest.from_consumer_and_token(consumer, token=None, http_method='GET', http_url=URL, parameters=data)\noauth_request.sign_request(signature_method_hmac_sha1, consumer, \"\")\ncomplete_url = oauth_request.to_url()\nresponse = urllib.urlopen(complete_url)\nprint \"REQUEST URL =&gt; %s\" % complete_url\nprint \"\"\nprint \"RESPONSE =&gt;\"\nprint response.read()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I made some small changes to make your example work.", "See code for comments."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import urllib2\nimport oauth2 as oauth\nimport time\n\nOAUTH_CONSUMER_KEY = \"blahblahblah\"\nOAUTH_CONSUMER_SECRET = \"blah\"\n\ndef oauth_request(url, params, method=\"GET\"):\n    # Removed trailing commas here - they make a difference.\n    params['oauth_version'] = \"1.0\" #,\n    params['oauth_nonce'] = oauth.generate_nonce() #,\n    params['oauth_timestamp'] = int(time.time())\n\n    consumer = oauth.Consumer(key=OAUTH_CONSUMER_KEY,\n                              secret=OAUTH_CONSUMER_SECRET)\n    params['oauth_consumer_key'] = consumer.key\n    req = oauth.Request(method=method, url=url, parameters=params)\n    req.sign_request(oauth.SignatureMethod_HMAC_SHA1(), consumer, None)\n\n    return req\n\n\nif __name__ == \"__main__\":\n    url = \"http://yboss.yahooapis.com/ysearch/web\"\n\n    req = oauth_request(url, params={\"q\": \"cats dogs\"})\n    # This one is a bit nasty. Apparently the BOSS API does not like\n    # \"+\" in its URLs so you have to replace \"%20\" manually.\n    # Not sure if the API should be expected to accept either.\n    # Not sure why to_url does not just return %20 instead...\n    # Also, oauth2.Request seems to store parameters as unicode and forget\n    # to encode to utf8 prior to percentage encoding them in its to_url\n    # method. However, it's handled correctly for generating signatures.\n    # to_url fails when query parameters contain non-ASCII characters. To\n    # work around, manually utf8 encode the request parameters.\n    req['q'] = req['q'].encode('utf8')\n    req_url = req.to_url().replace('+', '%20')\n    print req_url\n    result = urllib2.urlopen(req_url)\n</code>\n</pre>\n", "senID": 1}]]