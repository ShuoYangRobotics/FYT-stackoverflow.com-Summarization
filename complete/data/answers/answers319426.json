[[{"code": "<pre>\n<code>\n string1 = 'Hello'\nstring2 = 'hello'\n\nif string1.lower() == string2.lower():\n    print \"The strings are the same (case insensitive)\"\nelse:\n    print \"The strings are not the same (case insensitive)\"\n</code>\n</pre>\n", "senID": 0}], [{"text": ["How about converting to lowercase first?", "you can use string.lower()."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "string.lower()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n def insenStringCompare(s1, s2):\n    \"\"\" Method that takes two strings and returns True or False, based\n        on if they are equal, regardless of case.\"\"\"\n    try:\n        return s1.lower() == s2.lower()\n    except AttributeError:\n        print \"Please only pass strings into this method.\"\n        print \"You passed a %s and %s\" % (s1.__class__, s2.__class__)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["The usual approach is to uppercase the strings or lower case them for the lookups and comparisons.", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"hello\".upper() == \"HELLO\".upper()\nTrue\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import re\nre.match('what to find', 'text to search through', re.IGNORECASE) is None\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n lower(string1) == lower(string2)\nlower(string1) &lt;  lower(string2)\nlower(string1) &gt;  lower(string2)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You could subclass the builtin \"str\" if you need to compare a lot and dont want to clutter your code all over with .lower()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class ci_str(str):\n    def __eq__(self, other):\n        return self.lower() == other.lower()\n\na = ci_str(\"Hello World\")\nb = ci_str(\"hello world\")\nc = ci_str(\"foo bar\")\nprint a == b\nprint b == c\n\n&gt;&gt;&gt; \nTrue\nFalse\n</code>\n</pre>\n", "senID": 1}]]