[[{"text": ["Here's a simple, cheap solution to get you started"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from subprocess import *\np = Popen('ssh servername who', shell=True, stdout=PIPE)\np.wait()\nprint p.stdout.readlines()\n</code>\n</pre>\n", "senID": 1}, {"text": ["returns (eg)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['usr      pts/0        2009-08-19 16:03 (kakapo)\\n',\n 'usr      pts/1        2009-08-17 15:51 (kakapo)\\n',\n 'usr      pts/5        2009-08-17 17:00 (kakapo)\\n']\n</code>\n</pre>\n", "senID": 3}, {"text": ["and for cpuinfo:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n p = Popen('ssh servername cat /proc/cpuinfo', shell=True, stdout=PIPE)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I've been using Pexpect, which let's you ssh into machines, send commands, read the output, and react to it, with success.", "I even started an open-source project around it, Proxpect - which haven't been updated in ages, but I digress..."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Pexpect", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/pexpect/"}, {"text": "Proxpect", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://bitbucket.org/inerte/proxpect/"}]}], [{"text": ["The pexpect module can help you interface with ssh.", "More or less, here is what your example would look like."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pexpect", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pexpect.sourceforge.net/pexpect.html"}]}, {"code": "<pre>\n<code>\n child = pexpect.spawn('ssh servername')\nchild.expect('Password:')\nchild.sendline('ABCDEF')\n(output,status) = child.sendline('who')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If your needs overgrow simple \"ssh remote-host.example.org who\" then there is an awesome python library, called RPyC.", "It has so called \"classic\" mode which allows to almost transparently execute Python code over the network with several lines of code.", "Very useful tool for trusted environments."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ssh remote-host.example.org who", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "RPyC", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/RPyC"}]}, {"text": ["Here's an example from Wikipedia:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import rpyc\n# assuming a classic server is running on 'hostname'\nconn = rpyc.classic.connect(\"hostname\")\n\n# runs os.listdir() and os.stat() remotely, printing results locally\ndef remote_ls(path):\n    ros = conn.modules.os\n    for filename in ros.listdir(path):\n        stats = ros.stat(ros.path.join(path, filename))\n        print \"%d\\t%d\\t%s\" % (stats.st_size, stats.st_uid, filename)\n\nremote_ls(\"/usr/bin\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you're interested, there's a good tutorial on their wiki."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "a good tutorial on their wiki", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rpyc.wikidot.com/tutorial:part1"}]}, {"text": ["But, of course, if you're perfectly fine with ssh calls using Popen or just don't want to run separate \"RPyC\" daemon, then this is definitely an overkill."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Popen", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["This covers the bases.", "Notice the use of sudo for things that needed more privileges.", "We configured sudo to allow those commands for that user without needing a password typed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also, keep in mind that you should run ssh-agent to make this \"make sense\".", "But all in all, it works really well.", "Running deploy-control httpd configtest will check the apache configuration on all the remote servers."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "deploy-control httpd configtest", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/local/bin/python\n\nimport subprocess\nimport sys\n\n# The user@host: for the SourceURLs (NO TRAILING SLASH)\nRemoteUsers = [\n        \"deploy@host1.example.com\",\n        \"deploy@host2.appcove.net\",\n        ]\n\n###################################################################################################\n# Global Variables\nArg                             = None\n\n\n# Implicitly verified below in if/else\nCommand = tuple(sys.argv[1:])\n\nResultList = []\n###################################################################################################\nfor UH in RemoteUsers:\n        print \"-\"*80\n        print \"Running %s command on: %s\" % (Command, UH)\n\n        #----------------------------------------------------------------------------------------------\n        if Command == ('httpd', 'configtest'):\n                CommandResult = subprocess.call(('ssh', UH, 'sudo /sbin/service httpd configtest'))\n\n        #----------------------------------------------------------------------------------------------\n        elif Command == ('httpd', 'graceful'):\n                CommandResult = subprocess.call(('ssh', UH, 'sudo /sbin/service httpd graceful'))\n\n        #----------------------------------------------------------------------------------------------\n        elif Command == ('httpd', 'status'):\n                CommandResult = subprocess.call(('ssh', UH, 'sudo /sbin/service httpd status'))\n\n        #----------------------------------------------------------------------------------------------\n        elif Command == ('disk', 'usage'):\n                CommandResult = subprocess.call(('ssh', UH, 'df -h'))\n\n        #----------------------------------------------------------------------------------------------\n        elif Command == ('uptime',):\n                CommandResult = subprocess.call(('ssh', UH, 'uptime'))\n\n        #----------------------------------------------------------------------------------------------\n        else:\n                print\n                print \"#\"*80\n                print\n                print \"Error: invalid command\"\n                print\n                HelpAndExit()\n\n        #----------------------------------------------------------------------------------------------\n        ResultList.append(CommandResult)\n        print\n\n\n###################################################################################################\nif any(ResultList):\n        print \"#\"*80\n        print \"#\"*80\n        print \"#\"*80\n        print\n        print \"ERRORS FOUND.  SEE ABOVE\"\n        print\n        sys.exit(0)\n\nelse:\n        print \"-\"*80\n        print\n        print \"Looks OK!\"\n        print\n        sys.exit(1)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Fabric is a simple way to automate some simple tasks like this, the version I'm currently using allows you to wrap up commands like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n run('whoami', fail='ignore')\n</code>\n</pre>\n", "senID": 1}, {"text": ["you can specify config options (config.fab_user, config.fab_password) for each machine you need (if you want to automate username password handling)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["More info on Fabric here:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["http://www.nongnu.org/fab/"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://www.nongnu.org/fab/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.nongnu.org/fab/"}]}, {"text": ["There is a new version which is more Pythonic - I'm not sure whether that is going to be better for you int his case... works fine for me at present..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]