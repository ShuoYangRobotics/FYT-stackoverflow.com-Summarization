[[{"text": ["I have worked on a program that allows users to enter their own regex and you are right - they can (and do) enter regex that can take a long time to finish - sometimes longer than than the lifetime of the universe.", "What is worse, while processing a regex Python holds the GIL, so it will not only hang the thread that is running the regex, but the entire program."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Limiting the length of the regex will not work, since the problem is backtracking.", "For example,    matching the regex r\"(\\S+)+x\" on a string of length N that does not contain an \"x\" will backtrack 2**N times.", "On my system this takes about a second to match against \"a\"*21 and the time doubles for each additional character, so a string of 100 characters would take approximately 19167393131891000 years to complete (this is an estimate, I have not timed it)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "r\"(\\S+)+x\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "\"a\"*21", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["For more information read the O'Reilly book \"Mastering Regular Expressions\" - this has a couple of chapters on performance."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["edit\nTo get round this we wrote a regex analysing function that tried to catch and reject some of the more obvious degenerate cases, but it is impossible to get all of them.  "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Another thing we looked at was patching the re module to raise an exception if it backtracks too many times.", "This is possible, but requires changing the Python C source and recompiling, so is not portable.", "We also submitted a patch to release the GIL when matching against python strings, but I don't think it was accepted into the core (python only holds the GIL because regex can be run against mutable buffers)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["It's much simpler for casual users to give them a subset language.", "The shell's globbing rules in fnmatch, for example.", "The SQL LIKE condition rules are another example."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "fnmatch", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/fnmatch.html"}]}, {"text": ["Translate the user's language into a proper regex for execution at runtime."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Compiling the regular expression should be reasonably safe.", "Although what it compiles into is not strictly an NFA (backreferences mean it's not quite as clean) it should still be sort of straightforward to compile into."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Now as to performance characteristics, this is another problem entirely.", "Even a small regular expression can have exponential time characteristics because of backtracking.", "It might be better to define a certain subset of features and only support very limited expressions that you translate yourself. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you really want to support general regular expressions you either have to trust your users (sometimes an option) or limit the amount of space and time used.", "I believe that space used is determined only by the length of the regular expression. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "believe", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["edit: As Dave notes, apparently the global interpreter lock is held during regex matching, which would make setting that timeout harder.", "If that is the case, your only option to set a timeout is to run the match in a separate process.", "While not exactly ideal it is doable.", "I completely forgot about multiprocessing.", "Point of interest is this section on sharing objects.", "If you really need the hard constraints, separate processes are the way to go here."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "multiprocessing", "tag": "a", "pos": 3, "childList": [{"text": "multiprocessing", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/dev/library/multiprocessing.htm"}, {"text": "multiprocessing", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "this section", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/library/multiprocessing.html#exchanging-objects-between-processes"}]}], [{"text": ["It's not necessary to use compile() except when you need to reuse a lot of different regular expressions.", "The module already caches the last expressions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The point 2 (at execution) could be a very difficult one if you allow the user to input any regular expression.", "You can make a complex regexp with few characters, like the famous (x+x+)+y one.", "I think it's a problem yet to be resolved in a general way.", "A workaround could be launching a different thread and monitor it, if it exceeds the allowed time, kill the thread and return with an error."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "(x+x+)+y", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I really don't think it is possible to execute code simply by passing it into an re.compile.", "The way I understand it, re.compile (or any regex system in any language) converts the regex string into a finite automaton (DFA or NFA), and despite the ominous name 'compile' it has nothing to do with the execution of any code. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "finite automaton", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Regular_expression"}]}], [{"text": ["You technically don't need to use re.compile() to perform a regular expression operation on a string.", "In fact, the compile method can often be slower if you're only executing the operation once since there's overhead associated with the initial compiling."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re.compile()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you're worried about the word \"compile\" then avoid it all together and simply pass the raw expression to match, search, etc.", "You may wind up improving the performance of your code slightly anyways."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "match", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "search", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]]