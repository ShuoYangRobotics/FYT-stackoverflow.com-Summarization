[[{"text": ["Step 1.", "Invert the dictionary."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dst= collections.defaultdict( list )\nsrc= collections.defaultdict( list )\nfor k in original:\n    for addr in original[k]['ip.dst']:\n        dst[addr].append( k )\n    for addr in original[k]['ip.src']:\n        src[addr].append( k )\n</code>\n</pre>\n", "senID": 1}, {"text": ["Step 2.", "Don't search, just get the value."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You do two nearly instant checks into dst[addr] and src[addr] and you know all the keys in the original dictionary where it occurred."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "dst[addr]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "src[addr]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Inverting the dictionary takes time."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Building better dictionaries in the first place (i.e., indexed by ip.dst and ip.src) saves the cost of inverting the dictionary you already have."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Just for fun, here's how you can do it in a one-liner comprehension!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n set([v['ip.dst'][0] for v in my_dict.values() if v['ip.src'] == [search_ip]] + [v['ip.src'][0] for v in my_dict.values() if v['ip.dst'] == [search_ip]])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt;search_ip = '1.2.3.4'\n&gt;&gt;&gt;my_dict = {10116079620: {'ip.dst': ['10.1.1.5'], 'ip.src': ['1.2.3.4'], 'category': ['Misc']}, 10116882439: {'ip.dst': ['1.2.3.4'], 'ip.src': ['10.1.1.5'], 'category': ['Misc']}, 10116080136: {'ip.dst': ['10.10.10.99'], 'ip.src': ['1.2.3.4'], 'category': ['Misc']},  10116884490: {'ip.dst': ['10.10.10.99'], 'ip.src': ['2.3.4.5'], 'alias': ['www.example.com'], 'category': ['Misc']},  10117039635: {'ip.dst': ['2.3.4.5'], 'ip.src': ['10.11.11.50'], 'alias': ['google.com'], 'category': ['Misc']},  10118099993: {'ip.dst': ['1.2.3.4'], 'ip.src': ['10.11.11.49'], 'alias': ['www.google.com'], 'category': ['Misc']}, 10118083243: {'ip.dst': ['10.11.11.49'], 'ip.src': ['4.3.2.1'], 'alias': ['www.google.com'], 'category': ['Misc']}}\n&gt;&gt;&gt;set([v['ip.dst'][0] for v in my_dict.values() if v['ip.src'] == [search_ip]] + [v['ip.src'][0] for v in my_dict.values() if v['ip.dst'] == [search_ip]])\nset(['10.1.1.5', '10.10.10.99', '10.11.11.49'])\n\n&gt;&gt;&gt;search_ip = '10.10.10.99'\n&gt;&gt;&gt;set([v['ip.dst'][0] for v in my_dict.values() if v['ip.src'] == [search_ip]] + [v['ip.src'][0] for v in my_dict.values() if v['ip.dst'] == [search_ip]])\nset(['1.2.3.4', '2.3.4.5'])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I built on S.Lott's answer with some differences.", "I used sets to remove duplicates, and I kept the search indices together to better match the answers you suggested you wanted."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import collections\n\n# data = your example data dictionary\n\nindex = collections.defaultdict(set)\nfor key in data:\n    datum = data[key]\n    for ip in datum['ip.dst']:\n        index[ip].update(datum['ip.src'])\n    for ip in datum['ip.src']:\n        index[ip].update(datum['ip.dst'])\n\nprint index['1.2.3.4']\nprint index['10.10.10.99']\n</code>\n</pre>\n", "senID": 1}, {"text": ["returns:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n set(['10.10.10.99', '10.1.1.5', '10.11.11.49'])\nset(['1.2.3.4', '2.3.4.5'])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here's a list comprehension where data is your dictionary and ip is what you are searching for:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "data", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ip", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["set(ips[ips[0]==ip] for ips in ((v['ip.dst'][0],v['ip.src'][0]) for v in data.itervalues()) if ip in ips)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "set(ips[ips[0]==ip] for ips in ((v['ip.dst'][0],v['ip.src'][0]) for v in data.itervalues()) if ip in ips)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n from functools import partial\n\ndef search_row(results, ip, row):\n    if row['ip.dst'][0] == ip:\n        results.add(row['ip.src'][0])\n    if row['ip.src'][0] == ip:\n        results.add(row['ip.dst'][0])\n\ndef search(ip, data):\n    results = set()\n    aggregator = partial(search_row, results, ip)\n    map(aggregator, data.values())    \n    return results\n\nprint search('1.2.3.4', data)\n\nprint search('10.10.10.99', data)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Without any libraries (But S.Lott solution is shorter,better and I loved it lol):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x={\n    10116079620: {'ip.dst': ['10.1.1.5'], 'ip.src': ['1.2.3.4'], 'category': ['Misc']}, \n    10116882439: {'ip.dst': ['1.2.3.4'], 'ip.src': ['10.1.1.5'], 'category': ['Misc']}, \n    10116080136: {'ip.dst': ['10.10.10.99'], 'ip.src': ['1.2.3.4'], 'category': ['Misc']}, \n    10116884490: {'ip.dst': ['10.10.10.99'], 'ip.src': ['2.3.4.5'], 'alias': ['www.example.com'], 'category': ['Misc']}, \n    10117039635: {'ip.dst': ['2.3.4.5'], 'ip.src': ['10.11.11.50'], 'alias': ['google.com'], 'category': ['Misc']}, \n    10118099993: {'ip.dst': ['1.2.3.4'], 'ip.src': ['10.11.11.49'], 'alias': ['www.google.com'], 'category': ['Misc']},\n    10118083243: {'ip.dst': ['10.11.11.49'], 'ip.src': ['4.3.2.1'], 'alias': ['www.google.com'], 'category': ['Misc']}\n}\n\ny=[(i['ip.dst'],i['ip.src']) for i in x.values()]\n\na,b=zip(*y)\n\n#Looking for\nlf=['1.2.3.4']\nips=[]\n\n\ni=0\nfor ipsrc in a:\n    if ipsrc == lf:\n        ips.append(b[i])\n    i+=1\n\ni=0\nfor ipdst in b:\n    if ipdst == lf:\n        ips.append(a[i])\n    i+=1\n\nips=set(ips)\nprint(ips)\n</code>\n</pre>\n", "senID": 1}]]