[[{"text": ["I agree with S.Lott's idea of using a config file, but I'd recommend using the built-in ConfigParser (configparser in 3.0) module to parse it, rather than a home-brewed solution."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ConfigParser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/configparser.html"}]}, {"text": ["Here's a brief script that illustrates ConfigParser and optparse in action."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "optparse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/optparse.html"}]}, {"code": "<pre>\n<code>\n import ConfigParser\nfrom optparse import OptionParser\n\nCONFIG_FILENAME = 'defaults.cfg'\n\ndef main():\n    config = ConfigParser.ConfigParser()\n    config.read(CONFIG_FILENAME)\n\n    parser = OptionParser()\n    parser.add_option(\"-l\",\n                      \"--language\",\n                      dest=\"language\",\n                      help=\"The UI language\",\n                      default=config.get(\"Localization\", \"language\"))\n    parser.add_option(\"-f\",\n                      \"--flag\",\n                      dest=\"flag\",\n                      help=\"The country flag\",\n                      default=config.get(\"Localization\", \"flag\"))\n\n    print parser.parse_args()\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Output:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Output:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n (&lt;Values at 0x2182c88: {'flag': 'japan.png', 'language': 'Japanese'}&gt;, [])\n</code>\n</pre>\n", "senID": 4}, {"text": ["Run with \"parser.py --language=French\":"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "parser.py --language=French", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n (&lt;Values at 0x2215c60: {'flag': 'japan.png', 'language': 'French'}&gt;, [])\n</code>\n</pre>\n", "senID": 6}, {"text": ["Help is built in.", "Run with \"parser.py --help\":"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "parser.py --help", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n Usage: parser.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -l LANGUAGE, --language=LANGUAGE\n                        The UI language\n  -f FLAG, --flag=FLAG  The country flag\n</code>\n</pre>\n", "senID": 8}, {"text": ["The config file:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "The config file:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [Localization]\nlanguage=Japanese\nflag=japan.png\n</code>\n</pre>\n", "senID": 10}], [{"text": ["You can use argparse module for that:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "argparse", "tag": "a", "pos": 0, "childList": [{"text": "argparse", "tag": "code"}], "childNum": 1, "href": "http://argparse.googlecode.com/svn/trunk/doc/ArgumentParser.html#fromfile-prefix-chars"}, {"text": "argparse", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; open('args.txt', 'w').write('-f\\nbar')\n&gt;&gt;&gt; parser = argparse.ArgumentParser(fromfile_prefix_chars='@')\n&gt;&gt;&gt; parser.add_argument('-f')\n&gt;&gt;&gt; parser.parse_args(['-f', 'foo', '@args.txt'])\nNamespace(f='bar')\n</code>\n</pre>\n", "senID": 1}, {"text": ["It might be included in stdlib, see pep 389."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pep 389", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0389/"}]}], [{"text": ["I had a similar problem, but also wanted to specific the config file as an argument.", "Inspired by S. Lott's answer, I came up with the following code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Example terminal session:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n$ python defaultconf.py # use hard-coded defaults\nFalse\n$ python defaultconf.py --verbose # verbose on command line\nTrue\n$ python defaultconf.py --loadconfig blah # load config with 'verbose':True\nTrue\n$ python defaultconf.py --loadconfig blah --quiet # Override configured value\nFalse\n</pre>\n", "senID": 2}, {"text": ["Code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python2.6\nimport optparse\n\ndef getParser(defaults):\n    \"\"\"Create and return an OptionParser instance, with supplied defaults\n    \"\"\"\n    o = optparse.OptionParser()\n    o.set_defaults(**defaults)\n    o.add_option(\"--verbose\", dest = \"verbose\", action=\"store_true\")\n    o.add_option(\"--quiet\", dest = \"verbose\", action=\"store_false\")\n\n    o.add_option(\"--loadconfig\", dest = \"loadconfig\")\n\n    return o\n\n\ndef main():\n    # Hard coded defaults (including non-command-line-argument options)\n    my_defaults = {'verbose': False, 'config_only_variable': 42}\n\n    # Initially parse arguments\n    opts, args = getParser(my_defaults).parse_args()\n\n    if opts.loadconfig is not None:\n        #\u00a0Load config from disk, update the defaults dictionary, and reparse\n        # Could use ConfigParser, simplejson, yaml etc.\n\n        config_file_values = {'verbose': True} # the dict loaded from disk\n\n        my_defaults.update(config_file_values)\n        opts, args = getParser(my_defaults).parse_args()\n\n    print opts.verbose\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 4}, {"text": ["A practical implementation can be found on Github: The defaults dictionary, the argument parser and the main function"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "The defaults dictionary", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/dbr/tvnamer/blob/26b0efedc89dfdd5b9bf2d68d8de54a2dd8b9590/tvnamer/config_defaults.py"}, {"href": "http://github.com/dbr/tvnamer/blob/26b0efedc89dfdd5b9bf2d68d8de54a2dd8b9590/tvnamer/cliarg_parser.py", "text": "the argument parser", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://github.com/dbr/tvnamer/blob/26b0efedc89dfdd5b9bf2d68d8de54a2dd8b9590/tvnamer/main.py#L198", "text": "the main function", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["That's what the set_defaults function is for.", "http://docs.python.org/library/optparse.html#optparse.OptionParser.set%5Fdefaults"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "set_defaults", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "http://docs.python.org/library/optparse.html#optparse.OptionParser.set%5Fdefaults", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/optparse.html#optparse.OptionParser.set%5Fdefaults"}]}, {"text": ["Create a file that's the dictionary of default values."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n { 'arg1': 'this',\n'arg2': 'that'\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then read this file, eval it to convert the text to a dictionary, and provide this dictionary as the arguments to set_defaults."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "set_defaults", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you're really worried about eval, then use JSON (or YAML) notation for this file.", "Or you could even make an .INI file out of it and use configparser to get your defaults."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".INI", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "configparser", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Or you can use a simple list of assignment statements and exec."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "exec", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Config File."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n arg1 = 'this'\narg2 = 'that'\n</code>\n</pre>\n", "senID": 7}, {"text": ["Reading the config file."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n defaults= {}\nwith open('defaults.py','r') as config\n    exec config in {}, defaults\n</code>\n</pre>\n", "senID": 9}], [{"text": ["Read the arguments in the same commandline format from a file e.g.", "@commands, then use your original parser to parse them. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n options, args = parser.parse_args()\n\nif args[0][0] == '@': # script.py @optfile \n    with open(args[0][1:]) as f:\n        fa = [l.strip() for l in f]\n    fa = fa + args[1:] # put back any other positional arguments\n    # Use your original parser to parse the new options\n    options, args = parser.parse_args(args=fa, values=options)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I've built a lot of scripts with flags and options lately, and I've come up with the solution described here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.maurobianchi.it/node/66"}]}, {"text": ["Basically I instance an optionparser with a special flag that tells to try and load options from a file, so you can use normally your script specifying options from command line or provide them (or a set of them) from a file."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Update: i have shared code on GitHub"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "GitHub", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/bianchimro/OptionParserWithFileOption"}]}]]