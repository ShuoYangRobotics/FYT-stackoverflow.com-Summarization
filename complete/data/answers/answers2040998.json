[[{"text": ["Beware, you're doing it wrong multiple times."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Even though you could use the global statement to change a global (it is discouraged since it's better to use func parameters and return values), that would NOT change other already assigned values.", "E.g.", "even tough you reassign ID, you would NOT reassign project.", "Also: your functions return nothing, there's no point in assigning a name to their return value, and it's a BAD habit using an all-uppercase name (ID) for a variable, since it's a convention to use them for constants."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This should clarify you the way global works:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n myid = ''\nproject = (\"Yep\"+myid) #ID added with no value which I later want to change\n\ndef mutate_id():\n    global myid\n    myid = \"YES\"\n\ndef mutate_project():\n    global project\n    project = (\"YEP\" + myid)\n\nif __name__ == '__main__': \n    print \"myid\", myid\n    print \"project \", project\n    print\n\n    mutate_id()\n\n    print \"myid\", myid\n    print \"project \", project\n    print\n\n    mutate_project()\n\n    print \"myid\", myid\n    print \"project \", project\n    print\n</code>\n</pre>\n", "senID": 3}, {"text": ["But the best way is to do WITHOUT globals:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def get_new_id(old):\n    return \"YES\"\n\ndef get_new_project(old):\n    return (\"YEP\" + myid)\n\nif __name__ == '__main__': \n    myid = ''\n    project = (\"Yep\"+myid) \n\n    print \"myid\", myid\n    print \"project \", project\n    print\n\n    myid = get_new_id(myid)\n\n    print \"myid\", myid\n    print \"project \", project\n    print\n\n    project = get_new_project(project)\n\n    print \"myid\", myid\n    print \"project \", project\n    print\n</code>\n</pre>\n", "senID": 5}, {"text": ["This will make all code interaction clear, and prevent issues related to global state change."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["To update global variables you could use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n global ID\nID=\"Yes\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["before assigning variable to ID = \"YES\""], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["But changing ID will be no effect on project variable, project = (\"Yep\"+ID), because project is already a string"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "project = (\"Yep\"+ID)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["you need to make a function like"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def getprojectname(ID):\n    return project+ID\n</code>\n</pre>\n", "senID": 5}, {"text": ["The whole program may be like this"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["UPDATE:\n... removed"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "UPDATE", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Use the global statement."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "global", "tag": "a", "pos": 0, "childList": [{"text": "global", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/reference/simple_stmts.html#global"}, {"text": "global", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Example: http://www.rexx.com/~dkuhlman/python_101/python_101.html#SECTION004340000000000000000"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.rexx.com/~dkuhlman/python_101/python_101.html#SECTION004340000000000000000", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.rexx.com/~dkuhlman/python_101/python_101.html#SECTION004340000000000000000"}]}, {"text": ["P.S."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["But don't use global too often, see http://www.youtube.com/watch?v=E_kZDvwofHY#t=10m45"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://www.youtube.com/watch?v=E_kZDvwofHY#t=10m45", "text": "http://www.youtube.com/watch?v=E_kZDvwofHY#t=10m45", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["In your code you have two problems.", "The first about changing ID variable, which could be solved by using global. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The second that your code calculate project string and after that project don't know about ID."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To avoid code duplication you can define function to calc project."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So we have:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ID = 'No'\ndef GetProject():\n    return \"Yep\"+ID\n\ndef pro():\n   global ID\n   ID = \"YES\"\n   print ID\n\nprint GetProject()\n\npro()\n\nprint GetProject()\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Why not use a dictionary?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; attr = {'start':'XXX', 'myid':'No'}\n&gt;&gt;&gt; \n&gt;&gt;&gt; def update_and_show(D, value = None):\n...     if value:  D['myid'] = value\n...     print D['start'] + ' ' + D['myid']\n... \n&gt;&gt;&gt; update_and_show(attr)\nXXX No\n&gt;&gt;&gt; update_and_show(attr, 'Yes')\nXXX Yes\n&gt;&gt;&gt; update_and_show(attr, 'No')\nXXX No\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can mutate without reassigning:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n variables = {}\ndef pro():\n    if variables['ID'] == '':\n        variables['ID'] = 'default'\n</code>\n</pre>\n", "senID": 1}]]