[[{"text": ["Check out os.stat() for file size and file.readlines([sizehint]).", "Those two functions should be all you need for the reading part, and hopefully you know how to do the writing :)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "os.stat()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "file.readlines([sizehint])", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["linux has a split command"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["split -l 100000 file.txt"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["would split into files of equal 100,000 line size"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can use wc and split (see the respective manpages) to get the desired effect.", "In bash:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "wc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "split", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "bash", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n split -dl$((`wc -l 'filename'|sed 's/ .*$//'` / 3 + 1)) filename filename-chunk.\n</code>\n</pre>\n", "senID": 1}, {"text": ["produces 3 parts of the same linecount (with a rounding error in the last, of course), named filename-chunk.00 to filename-chunk.02."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "filename-chunk.00", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "filename-chunk.02", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I've written the program and it seems to work fine.", "So thanks to Kamil Kisiel for getting me started.", "(Note that FileSizeParts() is a function not shown here)\nLater I may get round to doing a version that does a binary read to see if its any quicker."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def Split(inputFile,numParts,outputName):\n    fileSize=os.stat(inputFile).st_size\n    parts=FileSizeParts(fileSize,numParts)\n    openInputFile = open(inputFile, 'r')\n    outPart=1\n    for part in parts:\n        if openInputFile.tell()&lt;fileSize:\n            fullOutputName=outputName+os.extsep+str(outPart)\n            outPart+=1\n            openOutputFile=open(fullOutputName,'w')\n            openOutputFile.writelines(openInputFile.readlines(part))\n            openOutputFile.close()\n    openInputFile.close()\n    return outPart-1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This generator method is a (slow) way to get a slice of lines without blowing up your memory."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def slicefile(filename, start, end):\n    for i, line in enumerate(open(filename)):\n        if i &gt;= end:\n            return\n        if start &lt;= i:\n            yield line\n\nout = open(\"/blah.txt\", \"w\")\nfor line in slicefile(\"/python26/readme.txt\", 10, 15):\n    out.write(line)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["don't forget seek() and mmap() for random access to files."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "seek()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#file.seek"}, {"href": "http://docs.python.org/library/mmap.html", "text": "mmap()", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n def getSomeChunk(filename, start, len):\n    fobj = open(filename, 'r+b')\n    m = mmap.mmap(fobj.fileno(), 0)\n    return m[start:start+len]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Or, a python version of wc and split:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lines = 0\nfor l in open(filename): lines += 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then some code to read the first lines/3 into one file, the next lines/3 into another , etc."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]