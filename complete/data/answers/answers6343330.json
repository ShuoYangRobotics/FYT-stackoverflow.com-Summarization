[[{"text": ["Python doesn't have a preprocessor, nor does it have constants in the sense that they can't be changed - you can always change (nearly, you can emulate constant object properties, but doing this for the sake of constant-ness is rarely done and not considered useful) everything.", "When defining a constant, we define a name that's upper-case-with-underscores and call it a day - \"We're all consenting adults here\", no sane man would change a constant.", "Unless of course he has very good reasons and knows exactly what he's doing, in which case you can't (and propably shouldn't) stop him either way."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But of course you can define a module-level name with a value and use it in another module.", "This isn't specific to constants or anything, read up on the module system."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # a.py\nMY_CONSTANT = ...\n\n# b.py\nimport a\nprint a.MY_CONSTANT\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Python isn't preprocessed.", "You can just do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n MY_CONSTANT = 50\n</code>\n</pre>\n", "senID": 1}, {"text": ["Importing them will work:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import myconstants\nprint myconstants.MY_CONSTANT * 2\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Sure, you can put your constants into a separate module.", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["const.py:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n A = 12\nB = 'abc'\nC = 1.2\n</code>\n</pre>\n", "senID": 2}, {"text": ["main.py:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import const\n\nprint const.A, const.B, const.C\n</code>\n</pre>\n", "senID": 4}, {"text": ["Note that as declared above, A, B and C are variables, i.e.", "can be changed at run time. "], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "A", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "B", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "C", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["And ofcourse you can do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # a.py\nMY_CONSTANT = ...\n\n# b.py\nfrom a import *\nprint MY_CONSTANT\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As an alternative to using the import approach described in several answers, have a look a the configparser module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "configparser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/configparser.html#module-ConfigParser"}]}, {"text": ["The ConfigParser class implements a basic configuration file parser language which provides a structure similar to what you would find on Microsoft Windows INI files.", "You can use this to write Python programs which can be customized by end users easily."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Try to look Python Constants and Can I prevent modifying an object in Python?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Python Constants", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3824455/python-constants"}, {"href": "http://stackoverflow.com/questions/3711657/can-i-prevent-modifying-an-object-in-python", "text": "Can I prevent modifying an object in Python?", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Another one useful link: http://code.activestate.com/recipes/65207-constants-in-python/ tells us about the following option:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.activestate.com/recipes/65207-constants-in-python/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/65207-constants-in-python/"}]}, {"code": "<pre>\n<code>\n from copy import deepcopy\n\nclass const(object):\n\n    def __setattr__(self, name, value):\n        if self.__dict__.has_key(name):\n            print 'NO WAY this is a const' # put here anything you want(throw exc and etc)\n            return deepcopy(self.__dict__[name])\n        self.__dict__[name] = value\n\n    def __getattr__(self, name, value):\n        if self.__dict__.has_key(name):\n            return deepcopy(self.__dict__[name])\n\n    def __delattr__(self, item):\n        if self.__dict__.has_key(item):\n            print 'NOOOOO' # throw exception if needed\n\nCONST = const()\nCONST.Constant1 = 111\nCONST.Constant1 = 12\nprint a.Constant1 # 111\nCONST.Constant2 = 'tst'\nCONST.Constant2 = 'tst1'\nprint a.Constant2 # 'tst'\n</code>\n</pre>\n", "senID": 2}, {"text": ["So you could create a class like this and then import it from you contants.py module.", "This will allow you to be sure that value would not be changed, deleted."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you really want constants, not just variables looking like constants, the standard way to do it is to use immutable dictionaries.", "Unfortunately it's not built-in yet, so you have to use third party recipes (like this one or that one)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "this one", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/414283/"}, {"href": "http://code.activestate.com/recipes/498072-implementing-an-immutable-dictionary/", "text": "that one", "childNum": 0, "tag": "a", "childList": []}]}]]