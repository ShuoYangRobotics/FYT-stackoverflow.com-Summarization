[[{"text": ["The dirs and files lists are all always relative to root - i.e., they are the basename() of the files/folders, i.e.", "they don't have a / in them (or \\ on windows).", "You need to join the dirs/files to root to get their whole path if you want your code to work to infinite levels of recursion:"], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "dirs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "files", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "root", "childNum": 0, "tag": "code", "childList": []}, {"text": "basename()", "childNum": 0, "tag": "code", "childList": []}, {"text": "/", "childNum": 0, "tag": "code", "childList": []}, {"text": "\\", "childNum": 0, "tag": "code", "childList": []}, {"text": "root", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\nimport os  \npath = \"/tmp/foo\"  \nfor root, dirs, files in os.walk(path):  \n  for momo in dirs:  \n    os.chown(os.path.join(root, momo), 502, 20)\n  for momo in files:\n    os.chown(os.path.join(root, momo), 502, 20)\n</pre>\n", "senID": 1}, {"text": ["I'm suprised the shutil module doesn't have a function for this."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "shutil", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["try os.path.join(root,momo) that will give you full path"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.path.join(root,momo)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["glob.iglob is a much simpler way to get a set of paths recursively to then iterate over."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "glob.iglob", "tag": "a", "pos": 0, "childList": [{"text": "glob.iglob", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/glob.html"}, {"text": "glob.iglob", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n import os  \npath = \"/tmp/foo\"  \nfor root, dirs, files in os.walk(path):  \n  for momo in dirs:  \n    os.chown(momo, 502, 20)\n  for file in files:\n     fname = os.path.join(root, file)\n     os.chown(fname, aaa, bb)\n</code>\n</pre>\n", "senID": 0}, {"text": ["substitute aaa and bb as you please"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "aaa", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "bb", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Here is a function i wrote that uses glob to recursively list files and change their permissions. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport glob\ndef recursive_file_permissions(path,mode,uid=-1,gid=-1):\n        '''\n        Recursively updates file permissions on a given path.\n        UID and GID default to -1, and mode is required\n        '''\n    for item in glob.glob(path+'/*'):\n        if os.path.isdir(item):\n            recursive_file_permissions(os.path.join(path,item),mode,uid,gid)\n        else:\n            try:\n                os.chown(os.path.join(path,item),uid,gid)\n                os.chmod(os.path.join(path,item),mode)\n            except:\n                print('File permissions on {0} not updated due to error.'.format(os.path.join(path,item)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["it's not perfect, but got me where I needed to be"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Don't forget the for f in files loop, either.", "Similarly, remember to os.path.join(root, f) to get the full path."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "for f in files", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.path.join(root, f)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]