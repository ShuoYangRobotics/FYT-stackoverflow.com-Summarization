[[{"text": ["I don't agree with this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n - Imports should usually be on separate lines, e.g.:\n\n    Yes: import os\n         import sys\n\n    No:  import sys, os\n</code>\n</pre>\n", "senID": 1}, {"text": ["I always write simple imports together.", "I don't see any advantage to writing them all on separate lines: all it does is add bloat to the top of each source file, and turn something concise and easy to type into something that's borderline boilerplate, eg.", "something that's so verbose it starts to be tempting to copy and paste from other files."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "boilerplate", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["This is instantly readable and understandable:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import sys, os, time, gc, inspect, math, doctest\n</code>\n</pre>\n", "senID": 4}, {"text": ["It's short, easy to skim, and easy to add to.", "I do use multiple import statements if there are too many on one line, of course, or if I need a from import."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "from", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I also do generally keep standard library imports separate from imports of my own modules and other libraries, which agrees with the concept of grouping PEP8 recommends."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "do", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["The \"79 characters per line\" part is nonsense.", "Their very own example shows how unreadable code becomes when doing this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Rectangle(Blob):\n\n    def __init__(self, width, height,\n                 color='black', emphasis=None, highlight=0):\n        if width == 0 and height == 0 and \\\n           color == 'red' and emphasis == 'strong' or \\\n           highlight &gt; 100:\n            raise ValueError(\"sorry, you lose\")\n        if width == 0 and height == 0 and (color == 'red' or\n                                           emphasis is None):\n            raise ValueError(\"I don't think so -- values are %s, %s\" %\n                             (width, height))\n        Blob.__init__(self, width, height,\n                      color, emphasis, highlight)\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's like try-ing to reada news arti-cle written like this."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["80-column terminals havn't been a serious development environment for over a decade.", "When I do need to edit from a crippled 80x25 environment in a pinch, editor wrapping is a minor inconvenience; I'm not going to maim my code during normal development just to avoid that."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["120 column wrapping is perfectly sensible for modern development, and I have no problem with 140.", "This guideline is obsolete and following it results in ugly, hard-to-read code."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Standards are critical and PEP 8 is a very good style guide that I insist on.", "The only guideline I disagree with is the spacing around mathematical operators.", "For example PEP8 insists on the following spacings"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Without PEP8                           With PEP8                \n---------------------------------------------------------------- \ny = sqrt(x**2 + y**2)                  y = sqrt(x ** 2 + y ** 2) \na*x**3 + b*x**2 + c*x + d              a * x ** 3 + b * x ** 2 + c * x + d \n10**(a*x + b)                          10 ** (a * x + b)  \nF = V/(sqrt(g*h) + epsilon)            F = V / (sqrt(g * h) + epsilon) \na*cos(nx/pi) + b*sin(nx/pi)            a * cos(nx / pi) + b * sin(nx / pi)\n</code>\n</pre>\n", "senID": 1}, {"text": ["I am trying to conform, but this is the one area where I am struggling.", "Do anyone else also feel that PEP8 spacing makes mathematics harder to read?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I always use 4 spaces, I try to use maximum of 79 chars per line, not possible sometime.", "I also used imports like \"import sys, os\" in the past.", "In general I try to stick to pop 8."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Edit: also use:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def foobar():\n    \"\"\"\n    foobar\n    \"\"\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["for documentation"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Multi-line conditionals etc.", ": PEP-8 explicitly says to break after a binary operator instead of before it.", "I'm afraid that I cannot see the appeal of that.", "It makes a lot more sense to me to break before the conditional, so that in wrapped/continued lines, each sub-line begins with the conditional:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "after", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n if (condition1 \\\n        or condition2 \\\n        or condition3):\n    do_something()\n</code>\n</pre>\n", "senID": 1}, {"text": ["As can be seen, I also like to add an extra indent for the sublines, so that they are visually offset from the block below.", "PEP-8 does not say anything explicit about this (does it?", "), but the examples have the sub-lines lining up with the opening parentheses.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["When I'm writing tiny scripts I often just just use two spaces."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I always the same pattern for docstrings:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def function():\n    \"\"\"\n    Even if it's a single line.\n    \"\"\"\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I use pylint,  http://pypi.python.org/pypi/pylint, it is an excellent tool to try to keep your code clean and readable for you and other developers accessing your code."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pypi.python.org/pypi/pylint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/pylint"}]}, {"text": ["I does not cover all topics you said, though, but it is very useful."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You can have reports like this one:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n carlos@debian:~/src/fcl/cltools$ pylint numbertoletters.py\nNo config file found, using default configuration\n************* Module numbertoletters\nC:  1: Missing docstring\nC: 56:es_numero: Missing docstring\nC: 56:es_numero: Invalid name \"s\" (should match [a-z_][a-z0-9_]{2,30}$)\nC: 56:es_numero: Invalid name \"s\" (should match [a-z_][a-z0-9_]{2,30}$)\nC: 69:convertnumbertoletters: Empty docstring\nC: 90:convertnumbertoletters: Operator not preceded by a space\n    numero='%(numero)09d' % {'numero' : int(parte_entera)}\n          ^\nC: 92:convertnumbertoletters: Comma not followed by a space\n    for i in [0,3,6]:\n               ^^\n\nW: 69:convertnumbertoletters: Unused argument 'languaje'\nC:108:unidades: Empty docstring\nC:108:unidades: Invalid name \"x\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:108:unidades: Invalid name \"x\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:112:unidades: Invalid name \"u\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:118:teens: Empty docstring\nC:118:teens: Invalid name \"x\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:118:teens: Invalid name \"x\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:122:teens: Invalid name \"t\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:127:tens: Empty docstring\nC:127:tens: Invalid name \"x\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:127:tens: Invalid name \"x\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:131:tens: Invalid name \"t\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:137:tercia: Empty docstring\nC:141:tercia: Operator not preceded by a space\n    numero='%(numero)03d' % {'numero' : int(num)}\n          ^\nC:143:tercia: Invalid name \"a\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:144:tercia: Invalid name \"b\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:145:tercia: Invalid name \"c\" (should match [a-z_][a-z0-9_]{2,30}$)\nC:163:tercia: Operator not followed by a space\n                resultado ='veinti '+unidades(c)\n                          ^\nC:165:tercia: Operator not followed by a space\n        elif b &gt;=3 and b &lt;= 9:\n               ^^\nC:178:tercia: Operator not followed by a space\n                resultado ='ciento '+unidades(c)\n                          ^\nC:192:tercia: Operator not followed by a space\n                resultado ='ciento veinti '+unidades(c)\n                          ^\nC:204:tercia: Operator not preceded by a space\n            prefix='quinientos '\n                  ^\nC:206:tercia: Operator not preceded by a space\n            prefix='setecientos '\n                  ^\nC:208:tercia: Operator not preceded by a space\n            prefix='novecientos '\n                  ^\nC:210:tercia: Operator not preceded by a space\n            prefix=unidades(a)+'cientos '\n                  ^\nR:137:tercia: Too many return statements (23/6)\nR:137:tercia: Too many branches (41/12)\nR:137:tercia: Too many statements (73/50)\n\n\nReport\n======\n141 statements analysed.\n\nRaw metrics\n-----------\n\n+----------+-------+------+---------+-----------+\n|type      |number |%     |previous |difference |\n+==========+=======+======+=========+===========+\n|code      |144    |68.25 |NC       |NC         |\n+----------+-------+------+---------+-----------+\n|docstring |5      |2.37  |NC       |NC         |\n+----------+-------+------+---------+-----------+\n|comment   |57     |27.01 |NC       |NC         |\n+----------+-------+------+---------+-----------+\n|empty     |5      |2.37  |NC       |NC         |\n+----------+-------+------+---------+-----------+\n\n\n\nStatistics by type\n------------------\n\n+---------+-------+-----------+-----------+------------+---------+\n|type     |number |old number |difference |%documented |%badname |\n+=========+=======+===========+===========+============+=========+\n|module   |1      |NC         |NC         |0.00        |0.00     |\n+---------+-------+-----------+-----------+------------+---------+\n|class    |0      |NC         |NC         |0           |0        |\n+---------+-------+-----------+-----------+------------+---------+\n|method   |0      |NC         |NC         |0           |0        |\n+---------+-------+-----------+-----------+------------+---------+\n|function |6      |NC         |NC         |0.00        |0.00     |\n+---------+-------+-----------+-----------+------------+---------+\n\n\n\nDuplication\n-----------\n\n+-------------------------+------+---------+-----------+\n|                         |now   |previous |difference |\n+=========================+======+=========+===========+\n|nb duplicated lines      |0     |NC       |NC         |\n+-------------------------+------+---------+-----------+\n|percent duplicated lines |0.000 |NC       |NC         |\n+-------------------------+------+---------+-----------+\n\n\n\nMessages by category\n--------------------\n\n+-----------+-------+---------+-----------+\n|type       |number |previous |difference |\n+===========+=======+=========+===========+\n|convention |32     |NC       |NC         |\n+-----------+-------+---------+-----------+\n|refactor   |3      |NC       |NC         |\n+-----------+-------+---------+-----------+\n|warning    |1      |NC       |NC         |\n+-----------+-------+---------+-----------+\n|error      |0      |NC       |NC         |\n+-----------+-------+---------+-----------+\n\n\n\nMessages\n--------\n\n+-----------+------------+\n|message id |occurrences |\n+===========+============+\n|C0103      |14          |\n+-----------+------------+\n|C0322      |6           |\n+-----------+------------+\n|C0112      |5           |\n+-----------+------------+\n|C0323      |4           |\n+-----------+------------+\n|C0111      |2           |\n+-----------+------------+\n|W0613      |1           |\n+-----------+------------+\n|R0915      |1           |\n+-----------+------------+\n|R0912      |1           |\n+-----------+------------+\n|R0911      |1           |\n+-----------+------------+\n|C0324      |1           |\n+-----------+------------+\n\n\n\nGlobal evaluation\n-----------------\nYour code has been rated at 7.45/10\n\nI hope it helps.\n</code>\n</pre>\n", "senID": 3}, {"text": ["I highly recommend the use of pylint to rate your code, and keep a standard way of programming, specially in a community of developers.", "=)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I hope it helps."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Take a look at this link: http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"}]}], [{"text": ["PEP 8 says:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Yes:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x = 1\ny = 2\nlong_variable = 3\n</code>\n</pre>\n", "senID": 2}, {"text": ["No:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n x             = 1\ny             = 2\nlong_variable = 3\n</code>\n</pre>\n", "senID": 4}, {"text": ["i usually follow it, but i sometimes use another variant, for the sake of better readability:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n x =             1\ny =             2\nlong_variable = 3\n</code>\n</pre>\n", "senID": 6}]]