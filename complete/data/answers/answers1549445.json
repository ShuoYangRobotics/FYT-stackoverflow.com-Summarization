[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; L1 =  [ [5, 44, 73] , [7, 21, 99], [1, 32, 100] ]\n&gt;&gt;&gt; L2 = []\n&gt;&gt;&gt; map(L2.extend, zip(*L1))\n&gt;&gt;&gt; L2\n[5, 7, 1, 44, 21, 32, 73, 99, 100]\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n import itertools\nlist(itertools.chain(*zip(*L1)))\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you need lists of varying length:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import itertools\n[x for x in itertools.chain(*itertools.izip_longest(*L1)) if x is not None]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["\"One-liner\" != \"Pythonic\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It is bad form to use a list comprehension just to implement a for loop in one line.", "Save the list expressions or generator expressions for times when you want the results of the expression.", "The clearest and most Pythonic to my eye is (for sublists of equal length):"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "bad", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n L1 =  [ [5, 44, 73] , [7, 21, 99], [1, 32, 100] ]\nL2 = []\nfor nextitems in zip(*L1):\n    L2.extend(nextitems)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Sure you could write this as:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "could", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [ L2.extend(nextitems) for nextitems in zip(*L1) ]\n</code>\n</pre>\n", "senID": 4}, {"text": ["but this generates a list of [None,None,...] as long as the number of items in each sublist, since extend() returns None.", "And what are we doing with this list?", "Nothing, and so it gets discarded immediately.", "But the reader has to look at this for a bit before realizing that this list is \"built\" for the purpose of running extend() on each created sublist."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "[None,None,...]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "extend()", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "extend()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The Pythonicness is given by the use of zip and *L1 to pass the sublists of L as args to zip.", "List comprehensions are generally regarded as Pythonic too, but when they are used for the purpose of creating a list of things, not as a clever shortcut for a for loop."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["As long as all sublists are the same length:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def flattener(nestedlist):\n  if not nestedlist: return []\n  return [ x for i in range(len(nestedlist[0]))\n             for x in [sublist[i] for sublist in nestedlist]\n         ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["For example,"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print flattener([ [5, 44, 73] , [7, 21, 99], [1, 32, 100] ])\n</code>\n</pre>\n", "senID": 3}, {"text": ["emits exactly the flat list you desire."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If not all sublist need be the same length, what do you want to happen when some are longer, some shorter...?", "A precise spec is needed if you need to take such inequality into account."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; L1 =  [ [5, 44, 73] , [7, 21, 99], [1, 32, 100] ]\n&gt;&gt;&gt; L2 = list(sum(zip(*L1), ()))\n&gt;&gt;&gt; L2\n[5, 7, 1, 44, 21, 32, 73, 99, 100]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here is an O^2 solution, it assumes all the inner arrays are of the same length"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n parent = [ [5, 44, 73] , [7, 21, 99], [1, 32, 100] ]\nfinal = []\nfor i in range(len(parent[0])):\n    for x in range(len(parent)):\n    \tfinal.append(parent[x][i])\nprint final # [5, 7, 1, 44, 21, 32, 73, 99, 100]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A simple list comprehension to the second depth:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; L = [ [5, 44, 73] , [7, 21, 99], [1, 32, 100] ]\n&gt;&gt;&gt; [x for li in zip(*L) for x in li]\n[5, 7, 1, 44, 21, 32, 73, 99, 100]\n</code>\n</pre>\n", "senID": 1}, {"text": ["pretty nice.", "If the sublists are of uneven length, it is not as elegant to express:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; L = [ [5, 44, 73] , [7], [1, 32, 100, 101] ]\n&gt;&gt;&gt; [li[idx] for idx in xrange(max(map(len, L))) for li in L if idx &lt; len(li)]\n[5, 7, 1, 44, 32, 73, 100, 101]\n</code>\n</pre>\n", "senID": 3}, {"text": ["These solutions are of complexity O(n), where n is the total number of elements."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["As long as all the sublists are of the same length:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lst = [[5, 44, 73] , [7, 21, 99], [1, 32, 100]]\nlist(reduce(lambda l, r: l + r, zip(*lst)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: This will work with sublists of different lengths:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n lst = [[5, 44, 73, 23] , [7, 21, 99], [1, 32, 100]]\nlist(filter(lambda p: p is not None, reduce(lambda x, y: x + y, map(None, *lst))))\n</code>\n</pre>\n", "senID": 3}]]