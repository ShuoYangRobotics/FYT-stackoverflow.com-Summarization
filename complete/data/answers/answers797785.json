[[{"text": ["a) You can start applications using os.system:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.system", "childNum": 0, "tag": "b", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n os.system(\"command\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["or you can use the subprocess module.", "More information here."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "subprocess", "childNum": 0, "tag": "b", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html"}]}, {"text": ["b) use sockets"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Well, you can probably just use the subprocess module.", "For the exchanging data, you may just be able to use the Popen.stdin and Popen.stdout streams.", "Of course, there's no limit to ways you /could/ do it.", "CORBA, DBUS, shared memory, DCOP, the list goes on.", "But try the simple way first, which in this case is regular python pipes/streams."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "subprocess", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html#module-subprocess"}, {"text": "CORBA", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://omniorb.sourceforge.net/"}, {"text": "DBUS", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://dbus.freedesktop.org/doc/dbus-python/doc/tutorial.html"}, {"text": "shared memory", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://semanchuk.com/philip/sysv%5Fipc/"}, {"text": "DCOP", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.kdedevelopers.org/node/124"}]}], [{"text": ["Before answering, I think we need some more information:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There are a few options depending on how you're actually using them.", "Sockets is an option or passing information via a file or a database."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["[Edit] Based on your reply I think there's a few ways you can do it:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[Edit]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Some more questions:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Depending on how reliant the two parts can be, it might be best to write a new app to check the database of your app for changes (using hooks or polling or whatever) and post relevent information into the http server's own database.", "This has the advantage of leaving the two parts less closely coupled which is often a good thing."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I've got a webserver (Apache 2) which talks to a Django app using the fastcgi module.", "Have a look at the section in djangobook on fastcgi.", "Apache uses sockets (or regular tcp) to talk to the background app (Django)."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "the section in djangobook on fastcgi", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.djangobook.com/en/2.0/chapter12/"}]}, {"text": ["[Edit 2] Oops - just spotted that your webserver is a python process itself.", "If it's all python then you could launch each in it's own thread and pass them both Queue objects which allow the two processes to send each other information in either a blocking or non-blocking manner."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "[Edit 2]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "launch each in it's own thread", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.tutorialspoint.com/python/python_multithreading.htm"}, {"href": "http://docs.python.org/library/queue.html", "text": "Queue", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Depending on what you want to do you can use os.mkfifo to create a named pipe to share data between your two programs."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://mail.python.org/pipermail/python-list/2006-August/568346.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://mail.python.org/pipermail/python-list/2006-August/568346.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2006-August/568346.html"}]}], [{"text": ["maybe twisted is what your looking for"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "twisted", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/trac/"}]}], [{"text": ["When I write web applications in Python, I always keep my web server in the same process as my background tasks.", "I don't know what web server you're using, but I personally use CherryPy.", "Your application can have a bunch of its threads be the web server, with however many other threads you like as background tasks.", "This way you don't need any kind of complex IPC with sockets, named pipes, etc.", "Instead you simply access shared, global, synchronized data structures to pass along information, and your different modules can directly call each others functions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CherryPy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://cherrypy.org/"}]}, {"text": ["EDIT: To clarify, you can use the threading module to run your CherryPy server in different threads than your other blocking servers.", "For example:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "threading module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/threading.html"}]}, {"code": "<pre>\n<code>\n def listener():\n    sock = get_socket_from_somewhere()\n    while True:\n        client, addr = sock.accept()\n        # send data back to client, etc\n\nfrom threading import Thread\nt1 = Thread(target=listener)\nt1.setDaemon(True)\nt1.start()\n\ncherrypy.quickstart() # you'd need actual arguments here\n</code>\n</pre>\n", "senID": 2}, {"text": ["This example shows how to have a blocking server in one thread in the same process as a web server (in this case CherryPy, though it could be anything)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]