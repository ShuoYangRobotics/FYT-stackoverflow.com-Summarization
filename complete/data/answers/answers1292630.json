[[{"text": ["For Python 2.5 and up"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print max(open(your_filename, 'r'), key=len)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n large_line = ''\nlarge_line_len = 0\nfilename = r\"C:\\tmp\\TestFile.txt\"\n\nwith open(filename, 'r') as f:\n    for line in f:\n        if len(line) &gt; large_line_len:\n            large_line_len = len(line)\n            large_line = line\n\nprint large_line\n</code>\n</pre>\n", "senID": 0}, {"text": ["output:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n This Should Be Largest Line\n</code>\n</pre>\n", "senID": 2}, {"text": ["And as a function:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def get_longest_line(filename):\n    large_line = ''\n    large_line_len = 0\n\n    with open(filename, 'r') as f:\n        for line in f:\n            if len(line) &gt; large_line_len:\n                large_line_len = len(line)\n                large_line = line\n\n    return large_line\n\nprint get_longest_line(r\"C:\\tmp\\TestFile.txt\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["Here is another way, you would need to wrap this in a try/catch for various problems (empty file, etc)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def get_longest_line(filename):\n    mydict = {}\n\n    for line in open(filename, 'r'):\n        mydict[len(line)] = line\n\n    return mydict[sorted(mydict)[-1]]\n</code>\n</pre>\n", "senID": 6}, {"text": ["You also need to decide that happens when you have two 'winning' lines with equal length?", "Pick first or last?", "The former function will return the first, the latter will return the last.", "File contains"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n Small Line\nSmall Line\nAnother Small Line\nThis Should Be Largest Line\nSmall Line\n</code>\n</pre>\n", "senID": 8}, {"text": ["Update"], "childNum": 0, "tag": "h2", "senID": 9, "childList": []}, {"text": ["The comment in your original post:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n print \" This program reads from a file and then prints out the\"\nprint \" line with the longest length the line ,or with the highest sum\"\nprint \" of ASCII values , or the line with the greatest number of words\"\n</code>\n</pre>\n", "senID": 11}, {"text": ["Makes me think you are going to scan the file for length of lines, then for ascii sum, then\nfor number of words.", "It would probably be better to read the file once and then extract what data you need from the findings."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n def get_file_data(filename):\n    def ascii_sum(line):\n        return sum([ord(x) for x in line])\n    def word_count(line):\n        return len(line.split(None))\n\n    filedata = [(line, len(line), ascii_sum(line), word_count(line)) \n                for line in open(filename, 'r')]\n\n    return filedata\n</code>\n</pre>\n", "senID": 13}, {"text": ["This function will return a list of each line of the file in the format: line, line_length, line_ascii_sum, line_word_count"], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "line, line_length, line_ascii_sum, line_word_count", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This can be used as so:"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n afile = r\"C:\\Tmp\\TestFile.txt\"\n\nfor line, line_len, ascii_sum, word_count in get_file_data(afile):\n    print 'Line: %s, Len: %d, Sum: %d, WordCount: %d' % (\n        line.strip(), line_len, ascii_sum, word_count)\n</code>\n</pre>\n", "senID": 16}, {"text": ["to output:"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n Line: Small Line, Len: 11, Sum: 939, WordCount: 2\nLine: Small Line, Len: 11, Sum: 939, WordCount: 2\nLine: Another Small Line, Len: 19, Sum: 1692, WordCount: 3\nLine: This Should Be Largest Line, Len: 28, Sum: 2450, WordCount: 5\nLine: Small Line, Len: 11, Sum: 939, WordCount: 2\n</code>\n</pre>\n", "senID": 18}, {"text": ["You can mix this with Steef's solution like so:"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; afile = r\"C:\\Tmp\\TestFile.txt\"\n&gt;&gt;&gt; file_data = get_file_data(afile)\n&gt;&gt;&gt; max(file_data, key=lambda line: line[1]) # Longest Line\n('This Should Be Largest Line\\n', 28, 2450, 5)\n&gt;&gt;&gt; max(file_data, key=lambda line: line[2]) # Largest ASCII sum\n('This Should Be Largest Line\\n', 28, 2450, 5)\n&gt;&gt;&gt; max(file_data, key=lambda line: line[3]) # Most Words\n('This Should Be Largest Line\\n', 28, 2450, 5)\n</code>\n</pre>\n", "senID": 20}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def main():\n    print \" This program reads from a file and then prints out the\"\n    print \" line with the longest length the line ,or with the highest sum\"\n    print \" of ASCII values , or the line with the greatest number of words\"\n    length()\n\ndef length():\n    maxlength = 0\n    maxlinetext = \"\"\n    infile = open(\"30075165.txt\",\"r\")\n    for line in infile:\n        linelength = len(line)\n        if linelength &gt; maxlength:\n            #If linelength is greater than maxlength value the new value is linelength\n            maxlength = linelength\n            maxlinetext = line\n    print maxlinetext\n    infile.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: Added main() function."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n linelength = lengthofline # bug?\n</code>\n</pre>\n", "senID": 0}, {"text": ["It should be:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n linelength = len(line) # fix\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Python might not be the right tool for this job."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ awk 'length() &gt; n { n = length(); x = $0 } END { print x }' 30075165.txt\n</code>\n</pre>\n", "senID": 1}], [{"text": ["My solution (also works in Python 2.5):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os.path\n\ndef getLongestLineFromFile(fileName):\n    longestLine = \"\"\n\n    if not os.path.exists(fileName):\n        raise \"File not found\"\n\n    file = open(fileName, \"r\")\n    for line in file:\n        if len(line) &gt; len(longestLine):\n            longestLine = line\n\n    return longestLine\n\n\nif __name__ == \"__main__\":\n    print getLongestLineFromFile(\"input.data\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example \"input.data\" contents:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]