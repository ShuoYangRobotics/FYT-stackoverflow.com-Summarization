[[{"text": ["Python is a language that relies heavily on indentation to decide program structure unlike C and some other languages that use braces for this purpose."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When you have a statement like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if true:\npass\n</code>\n</pre>\n", "senID": 2}, {"text": ["it will complain because there's no indented statement for the if.", "You would need to fix it to be:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if true:\n    pass\n</code>\n</pre>\n", "senID": 4}, {"text": ["That sounds like the sort of error you have, though it may have been more obvious had you posted the actual code.", "When stating a problem, it's a good idea to give the code and explain what the expected behaviour was and how that related to the actual behaviour.", "You'll make the lives of those trying to help you out that much easier :-)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "actual", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Also keep in mind that you may get this problem even if your code looks right.", "Mixing spaces and tabs in your source code can often lead to this."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Editing answer to match the code example."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Editing answer to match the code example.", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for ch in f: ( translatedToken = english_hindi_dict[ch] ) if (ch in english_hindi_dict) else (translatedToken = ch)\n</code>\n</pre>\n", "senID": 1}, {"text": ["is just not valid Python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["First, readability count.", "Your code is hard to read and so, is hard to debug.", "What's \"ch\" and \"f\" ?", "What's more, you can do one liner in Python but it's not recommended, so put the for in a separate line.", "Then indent."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"code": "<pre>\n<code>\n for chunk in file: \n    ( translatedToken = english_hindi_dict[chunk] ) if (chunk in english_hindi_dict) else (translatedToken = chunk)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now we can see what's wrong.", "You make variable assignments in a conditional statement.", "This is not allowed in Python.", "I'm guessing you have a C/C++ background and are used to do that.", "In Python you can't, to prevent you from writing obfuscated code.", "So you end up with:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n for chunk in file: \n    translatedToken = english_hindi_dict[chunk] if chunk in english_hindi_dict else chunk\n</code>\n</pre>\n", "senID": 6}, {"text": ["This piece of code should work, provided you use Python 2.5+.", "But the ternary operator is not available in older Python version yet.", "Let's make it a bit friendlier:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n for chunk in file: \n    translatedToken = chunk\n    if chunk in english_hindi_dict:\n        translatedToken = english_hindi_dict[chunk]\n</code>\n</pre>\n", "senID": 8}, {"text": ["You may argue that it's longer to write, and you'd be right.", "But you spend more time  reading code than writing it, so it make sense to make it easy to read.", "Or course, once you have the Python grip, you will try to make it work in a more pythonic way.", "Ever heard of EAFTP?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n for chunk in file: \n    try:\n        translatedToken = english_hindi_dict[chunk]\n    except KeyError:\n        translatedToken = chunk\n</code>\n</pre>\n", "senID": 10}, {"text": ["But Python is full of surprises, and you'll learn that most of these classic use cases have been already taken care of.", "The standard library often provides an elegant and short yet readable solution:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n for chunk in file: \n    translatedToken = english_hindi_dict.get(chunk, chunk)\n</code>\n</pre>\n", "senID": 12}, {"text": ["As a conclusion: don't try to write Python as you wrote C, or Java as you would write Perl.", "Other tool, other style."], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "As a conclusion:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["To fix this problem, fire your editor \"search and replace\" feature and make a huge \"replace all\" to change all the tabs by 4 spaces, or the contrary.", "Then indent all your blocks, and finally align all the instructions in the same block."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "To fix this problem, fire your editor \"search and replace\" feature and make a huge \"replace all\" to change all the tabs by 4 spaces, or the contrary.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Funny that didn't appear before on SO.", "After all, it's true it's not that obvious."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["In Python, you separate blocks using spaces or tabs, not \"{\". "], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["So any time you go down a block (a function, a loop, a class, etc), you have to indent your code.", "This is not just good practice, this is mandatory.", "Your program will crash if you don't."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["Now, most of the time, you get this error because you did indent, but used tabs and spaces.", "In a Python program, you should use either tabs or spaces, but never both in the same files. "], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"text": ["E.G:"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"code": "<pre>\n<code>\n if (age &gt; 18)\n{\n    printf(\"You can vote\")\n}\n</code>\n</pre>\n", "senID": 20}, {"text": ["Becomes:"], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"code": "<pre>\n<code>\n if age &gt; 18:\n    print(\"You can vote\")\n</code>\n</pre>\n", "senID": 22}, {"text": ["In most languages, you could do:"], "childNum": 0, "tag": "p", "senID": 23, "childList": []}, {"code": "<pre>\n<code>\n if (age &gt; 18)\n{\nprintf(\"You can vote\")\n}\n</code>\n</pre>\n", "senID": 24}, {"text": ["In Python you can't:"], "childNum": 0, "tag": "p", "senID": 25, "childList": []}, {"code": "<pre>\n<code>\n if age &gt; 18:\nprint(\"You can vote\")\n</code>\n</pre>\n", "senID": 26}, {"text": ["raises an exception.", "What's more, you must align all the instruction of the same block, so:"], "childNum": 0, "tag": "p", "senID": 27, "childList": []}, {"code": "<pre>\n<code>\n if age &gt; 18:\n    print(\"You can vote\")\n    print(\"How cool is that ?\")\n</code>\n</pre>\n", "senID": 28}, {"text": ["Is fine, but:"], "childNum": 0, "tag": "p", "senID": 29, "childList": []}, {"code": "<pre>\n<code>\n if age &gt; 18:\n    print(\"You can vote\")\n   print(\"How cool is that ?\")\n</code>\n</pre>\n", "senID": 30}, {"text": ["raises an exception."], "childNum": 0, "tag": "p", "senID": 31, "childList": []}, {"text": ["Eventually, you can't mix tab and spaces in the same block.", "So:"], "childNum": 0, "tag": "p", "senID": 32, "childList": []}, {"code": "<pre>\n<code>\n if age &gt; 18:\n    print(\"You can vote\")\n    print(\"How cool is that ?\")\n</code>\n</pre>\n", "senID": 33}, {"text": ["looks good, but will raises an exception.", "To avoid this problem, just stick to tabs or spaces.", "The PEP8, the text one most use as a reference for coding style recommend using 4 spaces."], "childNum": 1, "tag": "p", "senID": 34, "childList": [{"text": "PEP8", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"text": ["Most editors have a global \"search and replace\" feature that let you fix any problem you can have with that.", "Some like Geany or Ulipad even have a \"replace all tabs with spaces\" feature."], "childNum": 1, "tag": "p", "senID": 35, "childList": [{"text": "Ulipad", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1792360/what-are-the-limits-of-python/1793767#1793767"}]}], [{"text": ["You are probably mixing tabs with spaces.", "It looks indented but it really isn't."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "looks", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Your code gives me a different error:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for ch in f:                                                  \\\n  ( translatedToken = english_hindi_dict[ch] )                \\\n    if (ch in english_hindi_dict) else (translatedToken = ch)\n                                                        \u2191\n\nSyntaxError: invalid syntax\n</code>\n</pre>\n", "senID": 2}, {"text": ["Maybe you meant:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for ch in f:\n  if ch in english_hindi_dict:\n    translatedToken = english_hindi_dict[ch]\n  else:\n    translatedToken = ch\n</code>\n</pre>\n", "senID": 4}, {"text": ["Maybe you meant instead:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n for ch in f:\n  translatedToken = english_hindi_dict[ch] if ch in english_hindi_dict else ch\n</code>\n</pre>\n", "senID": 6}, {"text": ["Both should run just fine, and I expect the second to be faster than the former"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["They both can be optimized into translated = str([english_hindi_dict.get(ch, ch) for ch in f]) but that's not the point of the question."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "translated = str([english_hindi_dict.get(ch, ch) for ch in f])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["IndentationErrors can be caused by a lot if different things.", "Off the top of my head:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "IndentationError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["Forgetting to indent at all."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Commenting out an indented block."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Mixed tabs and spaces in indents."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]}], [{"text": ["Python uses indentation (spaces/tabs in front of your code lines) to indicate where a block of code starts and ends, relative to what python statement precedes it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, taking PHP for example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if ($blah == 'foo')\n{\n  // this is line 1 of my code block\n  // this is line 2\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["Would, under python, be:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if blah == 'foo':\n    # this is line 1 of my code block\n    # this is line 2\n    pass\n</code>\n</pre>\n", "senID": 4}, {"text": ["Could you please provide some code, together with the exact error?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Python determines blocks by indentation, not by characters { and } like C/C++/Java/PHP/... does or by if/endif or begin/end pairs found in some other languages.", "So you have to be careful about indentation - also mixing tabs and spaces is not good."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "{", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "}", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "endif", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "begin", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "end", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]]