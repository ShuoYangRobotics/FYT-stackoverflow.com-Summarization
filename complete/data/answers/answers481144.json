[[{"text": ["In general, x and y must satisfy (x-center_x)^2 + (y - center_y)^2 &lt; radius^2."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "childList": []}, {"text": "(x-center_x)^2 + (y - center_y)^2 &lt; radius^2", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Please note that points that satisfy the above equation with &lt; replaced by == are considered the points on the circle, and the points that satisfy the above equation with &lt; replaced by &gt; are consider the exterior of the circle."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "&lt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "childList": []}, {"text": "&lt;", "childNum": 0, "tag": "code", "childList": []}, {"text": "&gt;", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can use Pythagoras to measure the distance between your point and the centre and see if it's lower than the radius:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def in_circle(center_x, center_y, radius, x, y):\n    dist = math.sqrt((center_x - x) ** 2 + (center_y - y) ** 2)\n    return dist &lt;= radius\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT (hat tip to Paul)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["In practice, squaring is often much cheaper than taking the square root and since we're only interested in an ordering, we can of course forego taking the square root:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def in_circle(center_x, center_y, radius, x, y):\n    square_dist = (center_x - x) ** 2 + (center_y - y) ** 2\n    return square_dist &lt;= radius ** 2\n</code>\n</pre>\n", "senID": 4}, {"text": ["Also, Jason noted that &lt;= should be replaced by &lt; and depending on usage this may actually make sense even though I believe that it's not true in the strict mathematical sense.", "I stand corrected."], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "&lt;=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "&lt;", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "even though I believe that it's not true in the strict mathematical sense", "childNum": 0, "tag": "del", "pos": -1, "childList": []}, {"text": "I stand corrected.", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["You should check whether the distance from the center of the circle to the point is smaller than the radius, i.e."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if (x-center_x)**2 + (y-center_y)**2 &lt;= radius**2:\n    # inside circle\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Calculate the Distance"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n D = Math.Sqrt(Math.Pow(center_x - x, 2) + Math.Pow(center_y - y, 2))\nreturn D &lt;= radius\n</code>\n</pre>\n", "senID": 1}, {"text": ["that's in C#...convert for use in python..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n D = Math.Pow(center_x - x, 2) + Math.Pow(center_y - y, 2);\nreturn D &lt;= radius*radius\n</code>\n</pre>\n", "senID": 0}, {"text": ["This is more efficient, as it avoids the costly square root operation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Mathematically, Pythagoras is probably a simple method as many have already mentioned."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (x-center_x)^2 + (y - center_y)^2 &lt; radius^2\n</code>\n</pre>\n", "senID": 1}, {"text": ["Computationally, there are quicker ways:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n dx = abs(x-center_x)\ndy = abs(y-center_y)\nR = radius\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now imagine a square diamond drawn inside this circle such that it's vertices touch this circle:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if dx + dy &lt;= R then return true.\n</code>\n</pre>\n", "senID": 5}, {"text": ["Now we have covered most of our space and only a small area of this circle remains in between our square and diamond to be tested.", "Here we revert to Pythagoras as above."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n if dx^2 + dy^2 &lt;= R^2 then return true\nelse return false.\n</code>\n</pre>\n", "senID": 7}, {"text": ["Alternate methods imagine a square inside this circle instead of a diamond but this requires slightly more tests and calculations with no computational advantage (inner square and diamonds have identical areas):"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n k = R/sqrt(2)\nif dx &lt;= k and dy &lt;= k then return true.\n</code>\n</pre>\n", "senID": 9}], [{"text": ["As said above -- use Euclidean distance."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from math import hypot\n\ndef in_radius(c_x, c_y, r, x, y):\n    return math.hypot(c_x-x, c_y-y) &lt;= r\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Show two squares creating 8 points within a circle"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]