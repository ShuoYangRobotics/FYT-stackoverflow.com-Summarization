[[{"text": ["maybe this can help Scapy?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Scapy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.secdev.org/projects/scapy/"}]}], [{"text": ["Something along the lines of"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nfrom pcapy import open_offline\nfrom impacket.ImpactDecoder import EthDecoder\nfrom impacket.ImpactPacket import IP, TCP, UDP, ICMP\n\ndecoder = EthDecoder()\n\ndef callback(jdr, data):\n    packet = decoder.decode(data)\n    child = packet.child()\n    if isinstance(child, IP):\n        child = packet.child()\n        if isinstance(child, TCP):\n            if child.get_th_dport() == 80:\n                print 'HTTP'\n\npcap = open_offline('net.cap')\npcap.loop(0, callback)\n</pre>\n", "senID": 1}, {"text": ["using"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://oss.coresecurity.com/projects/impacket.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://oss.coresecurity.com/projects/impacket.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://oss.coresecurity.com/projects/impacket.html"}]}], [{"text": ["A quick example using Scapy, since I just wrote one:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n pkts = rdpcap('packets.pcap')\nports = [80, 25]\nfiltered = (pkt for pkt in pkts if\n    TCP in pkt and\n    (pkt[TCP].sport in ports or pkt[TCP].dport in ports))\nwrpcap('filtered.pcap', filtered)\n</code>\n</pre>\n", "senID": 1}, {"text": ["That will filter out packets that are neither HTTP nor SMTP.", "If you want all the packets but HTTP and SMTP, the third line should be:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "but", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n filtered = (pkt for pkt in pkts if\n    not (TCP in pkt and\n    (pkt[TCP].sport in ports or pkt[TCP].dport in ports)))\nwrpcap('filtered.pcap', filtered)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I know this is a super-old question, but I just ran across it thought I'd provide my answer.", "This is a problem I've encountered several times over the years, and I keep finding myself falling back to dpkt.", "Originally from the very capable dugsong, dpkt is primarily a packet creation/parsing library.", "I get the sense the pcap parsing was an afterthought, but it turns out to be a very useful one, because parsing pcaps, IP, TCP and and TCP headers is straightforward.", "It's parsing all the higher-level protocols that becomes the time sink!", "(I wrote my own python pcap parsing library before finding dpkt)"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "my", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "my", "tag": "em"}]}, {"text": "my", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "dpkt", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://code.google.com/p/dpkt/"}, {"text": "dugsong", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://monkey.org/~dugsong/"}]}, {"text": ["The documentation on using the pcap parsing functionality is a little thin.", "Here's an example from my files:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import socket\nimport dpkt\nimport sys\npcapReader = dpkt.pcap.Reader(file(sys.argv[1], \"rb\"))\nfor ts, data in pcapReader:\n    ether = dpkt.ethernet.Ethernet(data)\n    if ether.type != dpkt.ethernet.ETH_TYPE_IP: raise\n    ip = ether.data\n    src = socket.inet_ntoa(ip.src)\n    dst = socket.inet_ntoa(ip.dst)\n    print \"%s -&gt; %s\" % (src, dst)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Hope this helps the next guy to run across this post!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Try pylibpcap."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pylibpcap", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pylibpcap.sourceforge.net/"}]}], [{"text": ["to filter in/out a specific protocol you have to do a per packet analysis otherwise you could miss some http traffic on a non-conventional port that is flowing in your network.", "of course if you want a loose system, you could check just for source and destination port number but that wont give you exact results.", "you have to look for specific feature of a protocol like GET, POST, HEAD etc keywords for HTTP and others for other protocol and check each TCP packets."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]