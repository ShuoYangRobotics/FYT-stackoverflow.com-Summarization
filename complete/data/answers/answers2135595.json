[[{"text": ["Given a socket created with socket.socket(), you can use bind() before listening:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "socket.socket()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/socket.html#socket.socket.bind", "text": "bind()", "childNum": 1, "tag": "a", "childList": [{"text": "bind()", "tag": "code"}]}, {"text": "bind()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n socket.bind(('127.0.0.1', 80))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Using the address 127.0.0.1 indicates that the socket should bind to the local interface only."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "127.0.0.1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["http://www.amk.ca/python/howto/sockets/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.amk.ca/python/howto/sockets/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/sockets/"}]}, {"text": ["Shows some socket example.", "This tidbit is interesting to you I think"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I guess there is your answer (see below for correction)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "see below for correction", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["As to the validity of using this method for thread communications.", "I'm not sure how well this handles multiple threads and reading/writing"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["There seems to be a python recipe linked below that does some inter-thread communication"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["http://code.activestate.com/recipes/491281/"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://code.activestate.com/recipes/491281/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/491281/"}]}, {"text": ["Have fun!"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["EDIT"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["The article is incorrect and as pointed out \"s.bind(('', 80)) will bind to INADDR_ANY\""], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "s.bind(('', 80)) will bind to INADDR_ANY", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["If you are running on a UNIX-based system, you might want to consider using UNIX Domain Sockets instead of Internet sockets.", "I think something like the following should work:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "UNIX Domain Sockets", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Unix_socket"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; # in one window/shell\n&gt;&gt;&gt; import socket\n&gt;&gt;&gt; sd = socket.socket(socket.AF_UNIX)\n&gt;&gt;&gt; sd.bind('/path/to/my/socket')\n&gt;&gt;&gt; sd.listen(5)\n&gt;&gt;&gt; (client,addr) = sd.accept()\n&gt;&gt;&gt; client.recv(1024)\n'hello'\n&gt;&gt;&gt;\n\n&gt;&gt;&gt; # in a different shell\n&gt;&gt;&gt; import socket\n&gt;&gt;&gt; sd = socket.socket(socket.AF_UNIX)\n&gt;&gt;&gt; sd.connect('/path/to/my/socket')\n&gt;&gt;&gt; sd.send('hello')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you do sock.bind((port,'127.0.0.1')) it will only listen on localhost, and not on other interfaces, so that's all you need."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You might want to use the queue module from the standard library instead.", "It's designed specifically to facilitate communication between threads.", "A quote from the docs:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "queue module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/queue.html"}]}], [{"text": ["notionOn TCP/IP networks 127.0.0.0/8 is a non-routeable network, so you should not be able to send an IP datagram destined to 127.0.0.1 across a routed infrastructure.", "The router will just discard the datagram.", "However, it is possible to construct and send datagrams with a destination address of 127.0.0.1, so a host on the same network (IP sense of network) as your host could possibly get the datagram to your host's TCP/IP stack.", "This is where your local firewal comes into play.", "Your local (host) firewall should have a rule that discards IP datagrams destined for 127.0.0.0/8 coming into any interface other than lo0 (or the equivalent loopback interface).", "If your host either 1) has such firewall rules in place or 2) exists on its own network (or shared with only completely trusted hosts) and behind a well configured router, you can safely just bind to 127.0.0.1 and be fairly certain any datagrams you receive on the socket came from the local machine.", "The prior answers address how to open and bind to 127.0.0.1."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]