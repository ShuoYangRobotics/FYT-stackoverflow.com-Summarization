[[{"code": "<pre>\n<code>\n raise ValueError('invalid gender %r' % gender)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This depends on how sure you are of the gender being either 'm' or 'f'."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "'m'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'f'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you're absolutely certain, use if...else instead of if...elif...else.", "Just makes it easier for everyone."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "if...else", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if...elif...else", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["If there's any chance of malformed data, however, you should probably raise an exception to make testing and bug-fixing easier.", "You could use a gender-neutral greeting in this case, but for anything bigger, special values just make bugs harder to find."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "could", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["You could raise an exception:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n raise ValueError(\"Unexpected gender; expected 'm' or 'f', got %s\" % gender)\n</code>\n</pre>\n", "senID": 1}, {"text": ["or use an assert False if you expect the database to return only 'm' or 'f':"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n assert False, \"Unexpected gender; expected 'm' or 'f', got %s\" % gender\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I actually think that there's a place for this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class SeriousDesignError( Exception ):\n    pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["So you can do this"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if number % 2 == 0:\n    result = \"Even\"\nelif number % 2 == 1:\n    result = \"Odd\"\nelse:\n    raise SeriousDesignError()\n</code>\n</pre>\n", "senID": 3}, {"text": ["I think this is the most meaningful error message.", "This kind of thing can only arise through design errors (or bad maintenance, which is the same thing."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I sometimes do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if gender == 'm':\n    greeting = 'Mr.'\nelse:\n    assert gender == 'f'\n    greeting = 'Ms.'\n</code>\n</pre>\n", "senID": 1}, {"text": ["I think this does a good job of telling a reader of the code that there are only (in this case) two possibilities, and what they are.", "Although you could make a case for raising a more descriptive error than AssertionError."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It depends exactly what you want the error to signal, but I would use a dictionary in this case:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n greetings={'m':'Mr.', 'f':'Ms.'}\ngender = readFromDB(...) # either 'm' or 'f'\ngreeting=greetings[gender]\n</code>\n</pre>\n", "senID": 1}, {"text": ["If gender is neither m nor f, this will raise a KeyError containing the unexpected value:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n greetings={'m':'Mr.', 'f':'Ms.'}\n\n&gt;&gt;&gt; greetings['W']\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#4&gt;\", line 1, in &lt;module&gt;\n    greetings['W']\nKeyError: 'W'\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want more detail in the message, you can catch &amp; reraise it:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n try:\n  greeting = greetings[gender]\nexcept KeyError,e:\n  raise ValueError('Unrecognized gender %s'%gender)\n</code>\n</pre>\n", "senID": 5}]]