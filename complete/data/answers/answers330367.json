[[{"text": ["Be cautious of premature optimization."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Addition: The \"Python backend runs an algorithm whose state...\" is the session in the web framework.", "That's it.", "Let the Django framework maintain session state in cache.", "Period.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["\"The algorithm's per-user state undergoes many small changes as a user works with the application.", "\"   Most web frameworks offer a cached session object.", "Often it is very high performance.", "See Django's session documentation for this. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "session documentation", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/http/sessions/#topics-http-sessions"}]}, {"text": ["Advice.", "[Revised]"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["It appears you have something that works.", "Leverage to learn your framework, learn the tools, and learn what knobs you can turn without breaking a sweat.", "Specifically, using session state."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Second, fiddle with caching, session management, and things that are easy to adjust, and see if you have enough speed.", "Find out whether MySQL socket or named pipe is faster by trying them out.", "These are the no-programming optimizations."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Third, measure performance to find your actual bottleneck.", "Be prepared to provide (and defend) the measurements as fine-grained enough to be useful and stable enough to providing meaningful comparison of alternatives.  "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["For example, show the performance difference between persistent sessions and cached sessions."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I think that the multiprocessing framework has what might be applicable here - namely  the shared ctypes module. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "multiprocessing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html"}]}, {"text": ["Multiprocessing is fairly new to Python, so it might have some oddities.", "I am not quite sure whether the solution works with processes not spawned via multiprocessing."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "multiprocessing", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I think you can give ZODB a shot."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["\"A major feature of ZODB is transparency.", "You do not need to write any code to explicitly read or write your objects to or from a database.", "You just put your persistent objects into a container that works just like a Python dictionary.", "Everything inside this dictionary is saved in the database.", "This dictionary is said to be the \"root\" of the database.", "It's like a magic bag; any Python object that you put inside it becomes persistent."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Initailly it was a integral part of Zope, but lately a standalone package is also available."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It has the following limitation:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["\"Actually there are a few restrictions on what you can store in the ZODB.", "You can store any objects that can be \"pickled\" into a standard, cross-platform serial format.", "Objects like lists, dictionaries, and numbers can be pickled.", "Objects like files, sockets, and Python code objects, cannot be stored in the database because they cannot be pickled."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I have read it but haven't given it a shot myself though."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Other possible thing could be a in-memory sqlite db, that may speed up the process a bit - being an in-memory db, but still you would have to do the serialization stuff and all.", "Note: In memory db is expensive on resources."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Here is a link: http://www.zope.org/Documentation/Articles/ZODB1"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "http://www.zope.org/Documentation/Articles/ZODB1", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.zope.org/Documentation/Articles/ZODB1"}]}], [{"text": ["First of all your approach is not a common web development practice.", "Even multi threading is being used, web applications are designed to be able to run multi-processing environments, for both scalability and easier deployment ."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you need to just initialize a large object, and do not need to change later, you can do it easily by using a global variable that is initialized while your WSGI application is being created, or the module contains the object is being loaded etc, multi processing will do fine for you."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you need to change the object and access it from every thread, you need to be sure your object is thread safe, use locks to ensure that.", "And use a single server context, a process.", "Any multi threading python server will serve you well, also FCGI is a good choice for this kind of design."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["But, if multiple threads are accessing and changing your object the locks may have a really bad effect on your performance gain, which is likely to make all the benefits go away."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Another option is to review the requirement for state, it sounds like if the serialisation is the bottle neck then the object is very large.", "Do you really need an object that large?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I know in the Stackoverflow podcast 27 the reddit guys discuss what they use for state, so that maybe useful to listen to.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["http://www.mems-exchange.org/software/durus/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.mems-exchange.org/software/durus/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.mems-exchange.org/software/durus/"}]}, {"text": ["I've used it before in some research code, where I wanted to persist the results of certain computations.", "I eventually switched to pytables as it met my needs better."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "pytables", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.pytables.org"}]}]]