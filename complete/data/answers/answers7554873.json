[[{"text": ["Packages"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["If you're not committed to neural networks, I've had good luck with SVM, and k-means clustering might also be helpful.", "Both of these are provided by Milk.", "It also does Stepwise Discriminant Analysis for feature selection, which will definitely be useful to you if you're trying to find similar documents by topic."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Milk", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://luispedro.org/software/milk"}, {"text": "feature selection", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Feature_selection"}]}, {"text": ["God help you if you choose this route, but the ROOT framework has a powerful machine learning package called TMVA that provides a large number of classification methods, including SVM, NN, and Boosted Decision Trees (also possibly a good option).", "I haven't used it, but pyROOT provides python bindings to ROOT functionality.", "To be fair, when I first used ROOT I had no C++ knowledge and was in over my head conceptually too, so this might actually be amazing for you.", "ROOT has a HUGE number of data processing tools."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "TMVA", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://tmva.sourceforge.net/#exec_summary"}]}, {"text": ["(NB: I've also written a fairly accurate document language identifier using chi-squared feature selection and cosine matching.", "Obviously your problem is harder, but consider that you might not need very hefty tools for it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Storage vs Processing"], "childNum": 0, "tag": "h2", "senID": 4, "childList": []}, {"text": ["You mention in your question that:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Just as another NB, one thing you should know about machine learning is that processes like training and evaluating tend to take a while.", "You should probably consider ranking all documents for each tag only once (assuming you know all the tags) and storing the results.", "For machine learning generally, it's much better to use more storage than more processing.  "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "while", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Now to your specific case.", "You don't say how many tags you have, so let's assume you have 1000, for roundness.", "If you store the results of your ranking for each doc on each tag, that gives you 100 million floats to store.", "That's a lot of data, and calculating them all will take a while, but retrieving them is very fast.", "If instead you recalculate the ranking for each document on demand, you have to do 1000 passes of it, one for each tag.", "Depending on the kind of operations you're doing and the size of your docs, that could take a few seconds to a few minutes.", "If the process is simple enough that you can wait for your code to do several of these evaluations on demand without getting bored, then go for it, but you should time this process before making any design decisions / writing code you won't want to use."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "before", "childNum": 0, "tag": "em", "pos": 6, "childList": []}]}, {"text": ["Good luck!"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["If I understand correctly, your task is something related to Collaborative filtering.", "There are many possible approaches to this problem; I suggest you follow the wikipedia page to have an overview of the main approaches you can choose."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Collaborative filtering", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Collaborative_filtering"}]}, {"text": ["For your project work I can suggest looking at Python based intro to Neural Networks with a simple BackProp NN implementation and a classification example.", "This is not \"the\" solution, but perhaps you can build your system out of that example without the need for a bigger framework."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python based intro to Neural Networks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://gnosis.cx/publish/programming/neural_networks.htm"}]}], [{"text": ["The problem you are trying to solve is called \"collaborative filtering\". "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One state-of-the-art neural network method is Deep Belief Networks and Restricted Boltzman Machines.", "For a fast python implementation for a GPU (CUDA) see here.", "Another option is PyBrain."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "Deep Belief Networks", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "Restricted Boltzman Machines", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://peekaboo-vision.blogspot.com/2010/11/restricted-boltzmann-machine-on-cuda.html"}, {"text": "PyBrain", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pybrain.org/pages/features"}]}, {"text": ["Academic papers on your specific problem:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["This is probably the state-of-the-art of neural networks and collaborative filtering (of movies): "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["A Hopfield network implemented in Python:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["A thesis on collaborative filtering with Restricted Boltzman Machines (they say Python is not practical for the job):"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]}, {"text": ["Neural networks are not currently the state-of-the-art in collaborative filtering.", "And they are not the simplest, wide-spread solutions.", "Regarding your comment about the reason for using NNs being having too little data, neural networks don't have an inherent advantage/disadvantage in that case.", "Therefore, you might want to consider simpler Machine Learning approaches. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The best methods today mix k-Nearest Neighbors and Matrix Factorization. "], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "k-Nearest Neighbors", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "Matrix Factorization", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["If you are locked on Python, take a look at pysuggest (a Python wrapper for the SUGGEST recommendation engine) and PyRSVD (primarily aimed at applications in collaborative filtering, in particular the Netflix competition). "], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "pysuggest", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pysuggest/"}, {"href": "http://code.google.com/p/pyrsvd/", "text": "PyRSVD", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["If you are open to try other open source technologies look at: Open Source collaborative filtering frameworks and http://www.infoanarchy.org/en/Collaborative_Filtering."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "Open Source collaborative filtering frameworks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/659599/open-source-collaborative-filtering-frameworks"}, {"href": "http://www.infoanarchy.org/en/Collaborative_Filtering", "text": "http://www.infoanarchy.org/en/Collaborative_Filtering", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["You might want to check out PyBrain."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyBrain", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pybrain.org/"}]}], [{"text": ["The FANN library also looks promising."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "FANN", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://leenissen.dk/fann/wp/"}]}], [{"text": ["I am not really sure if a neural networks are the best way to solve this.", "I think Euclidean Distance Score or Pearson Correlation Score combined with item or user based filtering would be a good start."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["An excellent book on the topic is: Programming Collective Intelligence from Toby Segaran"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Programming Collective Intelligence from Toby Segaran", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://shop.oreilly.com/product/9780596529321.do"}]}]]