[[{"text": ["I think both FL Studio and Reason can be configured as the default MIDI playback device.", "To send MIDI messages to either from VB.NET, you'll need to PInvoke the midiOutOpen, midiOutShortMsg and midiOutClose API calls.", "Here's a link to code samples:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.answers.com/topic/midioutopen"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.answers.com/topic/midioutopen", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.answers.com/topic/midioutopen"}]}, {"text": ["They're for VB6, but they should be easy to translate to VB.NET."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I know FL Studio can be \"driven\" from a plugin authored for FL (or a VSTx plugin), but I think these are always written in C or C++."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Edit:  I just learned that Windows Vista dropped the MIDI Mapper (which would have made setting up FL or Reason as the default MIDI device simple).", "Amazing.", "Here is a link I found with an alternative solution:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["http://akkordwechsel.de/15-windows-vista-und-der-midi-mapper/"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://akkordwechsel.de/15-windows-vista-und-der-midi-mapper/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://akkordwechsel.de/15-windows-vista-und-der-midi-mapper/"}]}, {"text": ["I just tried it out (it's just a *.CPL file that you double-click to run) and it appears to work (although the GM Synth is the only option available on my laptop, so I'm not sure if it will pick up FL or Reason as choices)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Note: This answer doesn't exactly answer the question you asked but it might achieve the result you want :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can author a VST plugin in Java using jVSTWrapper (http://jvstwrapper.sourceforge.net/).", "If you really wanted to use Python you could use Jython to interface to java and do it that way.", "Alternatively you could just write the plugin in Java or another scripting language for the JVM like Groovy."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://jvstwrapper.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jvstwrapper.sourceforge.net/"}]}], [{"text": ["Both applications support MIDI.", "It's just that they don't see each other. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In order to send messages via MIDI between applications, you need to install a virtual midi port."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "virtual midi port", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["There are several freely available, but this one works: http://www.midiox.com/zip/MidiYokeSetup.msi"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.midiox.com/zip/MidiYokeSetup.msi", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.midiox.com/zip/MidiYokeSetup.msi"}]}, {"text": ["You'll get a virtual MIDI output port that you can write to as if it's a normal MIDI device.", "In Fruity Loops or Rebirth you choose that port as the input.", "That's all you need to do to connect the programs."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["It'll work like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Your Application --> Virtual MIDI Port --> FruityLoops"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "Your Application", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Virtual MIDI Port", "childNum": 0, "tag": "code", "childList": []}, {"text": "FruityLoops", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["What you need is a VST MIDI scripter / scripting plugin to create a logic of MIDI events that can be sent to any MIDI channel.", "You would need to set a MIDI channel in FL for the VST instrument/effect you need to tweak its values.", "Google for it there are some plugins around and please share them back here if you find anything useful :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["When it comes to Reason, you can do with it to much because of it's closed architecture - you can use VST plugins (or any other type like DirectX ones) - your only option is to use MIDI."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Regarding Fruity Loops, you could write a VST plugin that can take an input from a scripting language (VB, Python or whatever) but in order to write such thing you would have to use Delphi or C++."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Alternatively, you can check out MAX made by Cycling74 - it's something like a IDE for music ;-) - and I'm pretty sure you can use Python with it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "MAX made by Cycling74", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cycling74.com/"}]}], [{"text": ["You could write a Rewire host.", "Though, you will have to get a license (the license is free, but your application must be proprietary, so no open source)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Rewire", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/ReWire"}]}, {"text": ["Alternatively, you could interface through MIDI messages."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Finally, you could implement a dummy audio device which would route the audio to/from wherever you want or process it in some way.", "I imagine all of these would be reasonably difficult.", "MIDI is probably the easiest of the three (I have no idea how easy or hard the Rewire protocol is to use)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["There's an opensource music workstation, called Frinika, and you can script that in Javascript.", "(Insert / delete notes , change midi effects like pitch wheel etc.", ") It can import / export regular midi files, so it will work with Fruity loops or whatever else you have."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n // Insert New\n\nsong.newLane(\"MyMidiLane\", type(\"Midi\"));\nlane = song.getLane(\"MyMidiLane\");\n\npart = lane.newPart( time(\"10.0:000\"), time(\"4.0:000\") );\n\npart.insertNote(note(\"c#3\"), time(\"11.2:000\"), time(\"2:0\"), 120 );\npart.insertNote(note(\"f3\"), time(\"11.3:000\"), time(\"1:0\"), 100 );\npart.insertNote(note(\"g#3\"), time(\"11.3:000\"), time(\"1:0\"), 100 );\npart.insertNote(note(\"b3\"), time(\"11.3:000\"), time(\"0:64\"), 100 );\npart.removeNote(note(\"f3\"), time(\"11.3:000\"));\n\npart = song.newLane(\"MyTextLane\",\ntype(\"Text\")).newPart(time(\"24.0:000\"), time(\"10.0:000\"));\npart.text = \"This is the test text to be inserted.\";\npart.lane.parts[0].remove(); // remove initially inserted text-part\n</code>\n</pre>\n", "senID": 1}, {"text": ["Another example for reading/changing notes:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n lane = song.getLane(\"MyMidiLane\");\n// a lane has a fixed instrument assigned\n\n\nlane.parts[0].notes[0].duration=64\nlane.parts[0].notes[1].duration=32\nlane.parts[0].notes[1].startTick=120\n// Parts are blocks of notes that you can drag around together in the Frinika GUI.\n// They're like patterns in trackers.\nfor (i in lane.parts[0].notes){\n  println(\"i: \"+i+\", n: \"+noteName(lane.parts[0].notes[i].note));\n  println(\"i: \"+i+\", dur: \"+lane.parts[0].notes[i].duration);\n  println(\"i: \"+i+\", startT: \"+lane.parts[0].notes[i].startTick);\n}\n</code>\n</pre>\n", "senID": 3}, {"text": ["http://frinika.appspot.com/\nIt has a Java Webstart launcher as well, so you don't even have to\ninstall."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://frinika.appspot.com/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://frinika.appspot.com/"}]}, {"text": ["It used to bundle the Javadoc documentation as well, but for some\nreason their latest downloads don't include that.", "It's a pity, because\nthat's where the Javascript bindings are documented.", "So, now you have\nto browse the source or build the Javadoc yourself.", "(It has some built-in examples that are accessible from the scripting window, you should check them out first.", "My first example is from there.", ") "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Here is the sourcefile where you'll find the Javascript docs:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["frinika Javascript doc/source"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "frinika Javascript doc/source", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com/url?sa=D&q=http://frinika.svn.sourceforge.net/viewvc/frinika/frinika/trunk/src/com/frinika/project/scripting/javascript/JavascriptScope.java%3Frevision%3D154%26view%3Dmarkup&usg=AFQjCNFQOlOjiUG76zrs_LxT8-P0mP_xZA"}]}, {"text": ["But there are other options as well.", "You can check out mingus too, which is a Python library for music theory and midi file handling.", "It requires Fluidsynth, and the demo apps require GamePython too, so it's a bit more complicated to setup than Frinika."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "mingus", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/mingus/"}]}, {"text": ["P.S.", ":\nFrinika has a particular bug: when dragging around neighbouring notes, some might not sound the right length.", "You can help that by transposing forth and back the consecutive notes (fairly fast in piano roll view), or dragging the part that contains the notes forth and back.", "Restarting Frinika will also help, but that's the slower way.", "So this bug won't affect saved files, neither midi export."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]]