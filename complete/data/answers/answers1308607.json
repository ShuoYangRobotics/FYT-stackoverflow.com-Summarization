[[{"text": ["Install your of function as sys.excepthook -- see the docs.", "Your function, if the second argument is AssertionError, can introspect to your heart's contents; in particular, through the third argument, the traceback, it can get the frame and exact spot in which the assert failed, getting the failing exception through the source or bytecode, the value of all relevant variables, etc.", "Module inspect helps."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "sys.excepthook", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "the docs", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sys.html#sys.excepthook"}, {"text": "AssertionError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "inspect", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/inspect.htmlt#module-inspect"}]}, {"text": ["Doing it in full generality is quite a piece of work, but depending on what constraints you're willing to accept in how you write your asserts it can be lightened substantially (e.g.", "restricting them to only local or global variables makes introspection easier than if nonlocal variables of a closure could be involved, and so forth)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "assert", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You can attach a message to an assert:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "assert", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n assert 6-(3*2), \"always fails\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["The message can also be built dynamically:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n assert x != 0, \"x is not equal to zero (%d)\" % x\n</code>\n</pre>\n", "senID": 3}, {"text": ["See Theassertstatement in the Python documentation for more information."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "Theassertstatement", "tag": "a", "pos": 0, "childList": [{"text": "assert", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/reference/simple%5Fstmts.html#the-assert-statement"}, {"text": "assert", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The nose testing suite applies introspection to asserts. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "The nose testing suite applies introspection to asserts", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose/0.11.1/plugins/failuredetail.html"}]}, {"text": ["However, AFAICT, you have to call their asserts to get the introspection:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "their", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import nose\ndef test1():\n    nose.tools.assert_equal(6, 5+2)\n</code>\n</pre>\n", "senID": 2}, {"text": ["results in"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\nC:\\temp\\py>C:\\Python26\\Scripts\\nosetests.exe -d test.py\nF\n======================================================================\nFAIL: test.test1\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\Python26\\lib\\site-packages\\nose-0.11.1-py2.6.egg\\nose\\case.py\", line\n183, in runTest\n    self.test(*self.arg)\n  File \"C:\\temp\\py\\test.py\", line 3, in test1\n    nose.tools.assert_equal(6, 5+2)\nAssertionError: 6 != 7\n>>  raise self.failureException, \\\n          (None or '%r != %r' % (6, 7))\n</pre>\n", "senID": 4}, {"text": ["Notice the AssertionError there.", "When my line was just assert 6 == 5+2, I would get:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "assert 6 == 5+2", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\nC:\\temp\\py>C:\\Python26\\Scripts\\nosetests.exe -d test.py\nF\n======================================================================\nFAIL: test.test1\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\Python26\\lib\\site-packages\\nose-0.11.1-py2.6.egg\\nose\\case.py\", line\n183, in runTest\n    self.test(*self.arg)\n  File \"C:\\temp\\py\\test.py\", line 2, in test1\n    assert 6 == 5 + 2\nAssertionError:\n>>  assert 6 == 5 + 2\n</pre>\n", "senID": 6}, {"text": ["Also, I'm not sure offhand if their asserts are skipped with -O, but that would be a very quick check."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "-O", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As @Mark Rushakoff said nose can evaluate failed asserts.", "It works on the standard assert too."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "@Mark Rushakoff said", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1308607/python-assert-improved-introspection-of-failure/1308835#1308835"}, {"text": "nose", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "assert", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n # test_error_reporting.py\ndef test():\n    a,b,c = 6, 2, 3\n    assert a - b*c\n</code>\n</pre>\n", "senID": 1}, {"text": ["nosetests' help:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "nosetests", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ nosetests --help|grep -B2 assert\n  -d, --detailed-errors, --failure-detail\n                        Add detail to error output by attempting to evaluate\n                        failed asserts [NOSE_DETAILED_ERRORS]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n $ nosetests -d\nF\n======================================================================\nFAIL: test_error_reporting.test\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"..snip../site-packages/nose/case.py\", line 183, in runTest\n    self.test(*self.arg)\n  File \"..snip../test_error_reporting.py\", line 3, in test\n    assert a - b*c\nAssertionError:\n    6,2,3 = 6, 2, 3\n&gt;&gt;  assert 6 - 2*3\n\n\n----------------------------------------------------------------------\nRan 1 test in 0.089s\n\nFAILED (failures=1)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Add a message to your assertion, which will be displayed if the assertion fails:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ python -c \"assert 6-(3*2), '6-(3*2)'\"\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nAssertionError: 6-(3*2)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The only way I can think of to provide this automatically would be to contain the assertion in a procedure call, and then inspect the stack to get the source code for that line.", "The additional call would, unfortunately, introduce overhead into the test and would not be disabled with -O."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "-O", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["It sounds like what you really want to do is to set up a debugger breakpoint just before the assert and inspect from your favorite debugger as much as you like."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "assert", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]