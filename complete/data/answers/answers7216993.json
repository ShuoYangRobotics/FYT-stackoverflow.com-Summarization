[[{"text": ["perhaps you wonder how to work with your own modules in general.", "make one file named 'weather.py' and have it contain the appropriate if-statements like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"\"\" weather.py - conditions to check \"\"\"\n\ndef check_all(*args, **kwargs):\n    \"\"\" check all conditions \"\"\"\n    if check_temperature(kwargs['temperature']):\n        ... your code ...\n\ndef check_temperature(temp):\n    -- perhaps some code including temp or whatever ...\n    return temp &gt; 40\n</code>\n</pre>\n", "senID": 1}, {"text": ["same for sport.py, horoscope.py etc"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["then your main script would look like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import time, weather, sport, horoscope\nkwargs = {'temperature':30}\ncondition = 'weather'\nwhile True:\n    if condition == 'weather':\n        weather.check_all(**kwargs)\n    elif condition == 'sport':\n        sport.check_all()\n    elif condition == 'horoscope':\n        horoscope.check_all()\n    time.sleep(1)\n</code>\n</pre>\n", "senID": 4}, {"text": ["edit: edited according to the edit in your question.", "Note that I suggest importing all modules only one time, at the beginning of the script, and using its functions.", "This is better than executing code by importing.", "But if you insist, you could use reload(weather), which actually performs a reload including code execution.", "But I cannot stress too much that using functions of external modules is a better way to go!"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "reload(weather)", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}], [{"text": ["Put them in functions in separate files and then Import them:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"\"\"thing1.py\n   A function to demonstrate\n\"\"\"\n\ndef do_things(some_var):\n    print(\"Doing things with %s\" % (some_var))\n</code>\n</pre>\n", "senID": 1}, {"text": ["``"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n \"\"\"thing2.py\n   Demonstrates the same thing with a condition\n\"\"\"\n\ndef do_things(some_var):\n    if len(some_var) &lt; 10:\n        print(\"%s is &lt; 10 characters long\" % (some_var))\n    else:\n        print(\"too long\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["``"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n \"\"\"main_program.py\"\"\"\nimport thing1, thing2\n\nmyvar = \"cats\"\nthing1.do_things(myvar)\nthing2.do_things(myvar)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Perhaps all you need is to call functions in your loop; and have those functions in other modules, which you import as needed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n while true:\n   if condition:\n      from module_a import f\n      f()\n   if condition2\n      from module_b import g\n      g()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Though the above is legal Python, and so answers your question, you should in practice write all the imports at the top of your file."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I believe you are looking for some kind of PHP-like include() or C prepocessor #include.", "You would have a file such as the included.py below:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "include()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "#include", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "included.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n a = 2\nprint \"ok\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["and another file which has the following code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for i in values:\n    import included\n</code>\n</pre>\n", "senID": 3}, {"text": ["and you want the result to be equivalent to"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n for i in values:\n    a = 2\n    print \"ok\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["Is it what you are looking for?", "If so... no, it is not possible.", "Once Python imports a module, the code of the module is executed and following imports of the same mode only retrieve the already imported instance of the module.", "The code of a module is not executed everytime it is imported."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I can invent some crazy ways of doing it (let us say, file.read() + eval(), or calling reload() in an imported module.", ") but it would be a bad idea anyway.", "I bet we can think of a better solution to your real problem :)"], "childNum": 4, "tag": "p", "senID": 7, "childList": [{"text": "file.read()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "eval()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "reload()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "real", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}], [{"text": ["You could import the needed modules if they're needed, for example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if condition:\n    import weather\n    ... do something\n</code>\n</pre>\n", "senID": 1}, {"text": ["However I'm not sure if that's what you really want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Then you must optimize the repeatedly executed tests.", "Suppose there are 50 IFs blocks in your code and that in a turn of the for-loop, the N th condition is True: that means that the N-1 other conditions must be tested before the N th is tested and triggers the execution of the corresponding code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It would be preferable to do so:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # to_include.py\n\ndef func_weather(*args,**kwargs):\n    # code\n    return \"I'm the weather\"\n\ndef func_horoscope(*args,**kwargs):\n    # code\n    return \"Give me your birth'date\"\n\ndef func_gastronomy(*args,**kwargs):\n    # code\n    return 'Miam crunch'\n\ndef func_sports(*args,**kwargs):\n    # code\n    return 'golf, swimming and canoeing in the resort station'\n\n\n\ndidi = {'weather':func_weather, 'horoscope':func_horoscope,\n        'gastronomy':func_gastronomy, 'sports':func_sports}\n</code>\n</pre>\n", "senID": 2}, {"text": ["and the main module:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n # use_to_include.py\n\nimport to_include\n\nx = 'sports'\n\ny = to_include.didi[x]()\n# instead of\n# if  x =='weather'   : y = func_weather()\n# elif x=='horoscope' : y = func_horoscope()\n# elif x=='gastronomy': y = func_gastronomy()\n# elif x=='sports'    : y = func_sports()\n\nprint y\n</code>\n</pre>\n", "senID": 4}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n golf, swimming and canoeing in the resort station\n</code>\n</pre>\n", "senID": 6}]]