[[{"text": ["There are 36!/(36-10)!", "= 922,393,263,052,800 permutations (~1 quadrillion) of 10 alphanumeric characters.", "Of course this will take all your memory."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Assuming each string takes 32 bytes to store (8 bytes for the pointer, 8 bytes for the length, 16 bytes for the content*, on a 64-bit machine), this requires 26.2 PiB of memory."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PiB", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Pebibyte"}]}, {"text": ["There is no way to store all permutations in a normal machine.", "Please state what you actually want to do."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["(*: Actually it takes much more than that, since there are also type information, and in Python 3.x a character costs 2 bytes for UTF-16, and the list itself also takes memory."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "(*: Actually it takes much more than that, since there are also type information, and in Python 3.x a character costs 2 bytes for UTF-16, and the list itself also takes memory.)", "childNum": 0, "tag": "sub", "pos": -1, "childList": []}]}, {"text": ["Even with just the alphabets the number of permutations is still 19,275,223,968,000 (~20 trillion), and still takes 561 TiB of memory for 32 bytes per string."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You need about 90077467 GB of memory to store the result data."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["2 GB of memory costs $13 (http://www.newegg.com/Product/Product.aspx?Item=N82E16820146214), so you can fix this easily for the low, low price of $585,503,535.50."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You're doing things pretty much right, using itertools to provide a generator rather than actually producing a list -- right up until you try to create a list.", "That list simply is going to use up all your memory because it is in fact huge.", "You should probably write it to a file rather than trying to make a list in memory, but you will need a lot of disk space."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "lot", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}], [{"text": ["If you're going to use itertools, then use it all the way! "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is a perfect situation for a lazy generator--no need to actually store either the permutations or the data."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import itertools\n\nsmall_alpha = itertools.imap(chr, range(97, 123))\nnumbers = itertools.imap(chr, range(48, 58))\nlookup = itertools.chain(small_alpha, numbers)\nd = (''.join(i) for i in itertools.permutations(lookup, 10))\n\nif __name__ == '__main__':\n    perms = list(itertools.islice(d,10))\n    print(perms)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["you should utilize the cloud to solve this problem.", "using gnu parallel would provide you with additional resources to help you build your dictionary.", "http://unethicalblogger.com/posts/2010/11/gnuparallel_changed_my_life"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://unethicalblogger.com/posts/2010/11/gnuparallel_changed_my_life", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://unethicalblogger.com/posts/2010/11/gnuparallel_changed_my_life"}]}], [{"text": ["Firstly having variable called dictionary that is really a list is very confusing"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Assuming you have enough memory, it would be much faster to use"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n dictionary = list(permutations(lookup, 10))\n</code>\n</pre>\n", "senID": 2}, {"text": ["However since you don't have enough memory, this will just use up your memory even faster"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]