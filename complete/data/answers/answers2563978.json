[[{"text": ["Ettercap is seemingly an open source project, since it is hosted on SourceForge.", "Perhaps you should look at how it does it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Take a look on Scapy, or another packet crafting tool.", "There are not much of this type out there."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Scapy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.secdev.org/projects/scapy/"}]}], [{"text": ["At the time I was writing a network traffic analysis tool using libpcap for the capture and libnids for the stream assembly. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I haven't tried reinjecting traffic, but you can use TAP to forward traffic to a user program that will use libnids to assemble the packets, put out streams to a filter code, then take the stream and disassemble them (I'm pretty sure libnids has this capability as well) and reinject them into where you need it to go."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you want python, pynids seems to do what you need, but I have no experience with it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pynids", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pilcrow.madison.wi.us/pynids/"}]}], [{"text": ["It looks like you would be able to write an ettercap plugin that loads filters written in python.", "Or write your custom filter in C instead."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Why not just access DATA.data directly with whatever filters you want?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I don't think you have to use search() you'll just have to build your own analyzer / state machine."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["e.g."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["for (int i = 0; i &lt; DATA.len; i++) {\n    if ( DATA.data[i] == 'c' ) {\n        DATA.data[i] = q\n    }\n}"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Final Thoughts;\n(1) I don't know that DATA.len exists but seems likely there's something.", "(2) I know I replicated your search / replace but wanted to show how you may be able to do the equiv.", "'manually'.", "You can get fancy w/ stuff later.", "(3) If you were to adjust the length of the packet (or even the contents for that matter) you probably need to consider shifting window sizes / CRC checks, etc.", "e.g.", "DATA.data[i] = \"cc\" would overwrite two characters (possibly not what you want) or would change the side of the packet.", "I'd assume there are some library calls to set things right again."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["PyPCAP is worth checking out since this all hinges around libpcap underneath to begin with.", "Cut out the middle man!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyPCAP", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pypcap/"}]}], [{"text": ["Since Ettercap is opensource you can change its source code to do what you want.", "Running your own C code to rewrite a TCP stream should be relatively easy.", "The hard work has already been done."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Take a look at the etterfilter man page to get started.", "Search in the source code for the filter engine (apparently it's a JIT interpreter)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "etterfilter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.irongeek.com/i.php?page=backtrack-3-man/etterfilter"}]}, {"text": ["I would also try to mail this question to the etterfilter authors, maybe they like stackoverflow :-)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Note: to use Python instead of C, see http://docs.python.org/release/2.5.2/ext/embedding.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://docs.python.org/release/2.5.2/ext/embedding.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/2.5.2/ext/embedding.html"}]}]]