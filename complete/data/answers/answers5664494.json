[[{"text": ["Before you assign the count in the else branch, you should check whether l is a letter.", "Only assign the count if it is a letter."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "else", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "l", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["From python doc (note the leading and trailing aspect):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You should take a look at str.replace() and DefaultDict :)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You want str.translate instead of str.strip."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str.translate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str.strip", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can also check if l is an alphabetic character (if l.isalpha())"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "if l.isalpha()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import string\n    def LetterCount(str):\n            str= str.lower().strip()\n            str = str.strip(string.punctuation)\n            list1=list(str)\n            lcDict= {}\n            for l in list1:\n                    if l.isalpha():\n                            if l in lcDict:\n                                    lcDict[l] +=1\n                            else:\n                                    lcDict[l]= 1\n            print lcDict\n\n    LetterCount(\"Abracadabra, Monsignor\")\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Another option is to remove all non-alphabetic characters from the string using filter():"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filter()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n filter(str.isalpha, \"Abracadabra, Monsignor\")\n'AbracadabraMonsignor'\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Be careful using this in your code -- you shadowed the built-in str by a variable of the same name.", "Never call a variable str."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Extending python - Letter Count Dict:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python - Letter Count Dict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/q/5606421"}]}, {"code": "<pre>\n<code>\n from collections import Counter\n\ndef LetterCount(text):\n    return Counter(c for c in text.lower() if c.isalpha())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I don't want to do your homework for you because I don't thik it will help you but I'll try to uide you in the right direction, try this out:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n alphabet = map(chr, range(97, 123))\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n alphabet2 = list(string.lowercase)\n</code>\n</pre>\n", "senID": 3}, {"text": ["alphabet and alphabet2 will contain all the lowercase letters in the alphabet in a list."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "alphabet", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "alphabet2", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Thankseumirofor the remainder!"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Thankseumirofor the remainder!", "childNum": 1, "tag": "sub", "pos": 0, "childList": [{"text": "eumiro", "tag": "a"}]}, {"href": "http://stackoverflow.com/users/449449/eumiro", "text": "eumiro", "childNum": 0, "tag": "a", "childList": []}]}]]