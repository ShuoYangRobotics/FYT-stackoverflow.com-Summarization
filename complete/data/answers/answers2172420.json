[[{"text": ["It's not necessary to use trim or xargs:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for f in *.txt; do\n    band=${f% - *}\n    mkdir -p \"$band\"\n    mv \"$f\" \"$band\"\ndone\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You asked for a specific script, but if this is for organizing your music, you might want to check out EasyTAG.", "It has extremely specific and powerful rules that you can customize to organize your music however you want:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "EasyTAG", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "EasyTAG", "tag": "a"}]}, {"text": "EasyTAG", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://easytag.sourceforge.net/"}]}, {"src": "http://easytag.sourceforge.net/images/screenshot-gtk2/screenshot_sw_scan_tag.png", "tag": "img", "senID": 1}, {"text": ["This rule says, \"assume my file names are in the structure \"[artist] - [album title]/[track number] - [title]\".", "Then you can tag them as such, or move the files around to any new pattern, or do pretty much anything else."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["gregseth's answer will work, just replace trim with xargs.", "You could also eliminate the if test by just using mkdir -p, for example:"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "gregseth", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "trim", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "xargs", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "mkdir -p", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for f in *.txt; do\n    band=$(echo \"$f\" | cut -d'-' -f1 | xargs)\n    mkdir -p \"$band\"\n    mv \"$f\" \"$band\"\ndone\n</code>\n</pre>\n", "senID": 1}, {"text": ["Strictly speaking the trim or xargs shouldn't even be necessary, but xargs will at least remove any extra formatting, so it doesn't hurt."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "trim", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "xargs", "childNum": 0, "tag": "code", "childList": []}, {"text": "xargs", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["with Perl"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n use File::Copy move;\nwhile (my $file= &lt;*.txt&gt; ){\n    my ($band,$others) = split /\\s+-\\s+/ ,$file ;\n    mkdir $band;\n    move($file, $band);\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How about this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for f in *.txt\ndo\n  band=$(echo \"$f\" | cut -d'-' -f1 | trim)\n  if [ -d \"$band\" ]\n  then\n    mkdir \"$band\"\n  fi\n  mv \"$f\" \"$band\"\ndone\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This Python program assumes that the source files are in data and that the new directory structure should be in target (and that it already exists)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "data", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "target", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The key point is that os.path.walk will traverse the data directory structure and call myVisitor for each file."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "os.path.walk", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "data", "childNum": 0, "tag": "code", "childList": []}, {"text": "myVisitor", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import os\nimport os.path\n\nsourceDir = \"data\"\ntargetDir = \"target\"\n\ndef myVisitor(arg, dirname, names):\n    for file in names:\n        bandDir = file.split(\"-\")[0]\n        newDir = os.path.join(targetDir, bandDir)\n        if (not os.path.exists(newDir)):\n            os.mkdir(newDir)\n\n        newName = os.path.join(newDir, file)\n        oldName = os.path.join(dirname, file)\n\n        os.rename(oldName, newName)\n\nos.path.walk(sourceDir, myVisitor, None)\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n ls |perl -lne'$f=$_; s/(.*?) - [^-]*\\.txt/$1/; mkdir unless -d; rename $f, $_/$f'\n</code>\n</pre>\n", "senID": 0}]]