[[{"text": ["Your idea about the daemon has much merit, despite the complexity it introduces.", "As long as the actions don't require some user interface interaction as root, a daemon allows you to control what operations are allowed and disallowed."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "as root", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["However, you can use SUDO to create a controlled compromise between ROOT and normal users... simply grant SUDO access to the users in question for the specific tools they need.", "That reduces the attack surface by allowing only \"permitted\" root launches."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["What you want is a \"Group\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You create a group, specify that the account wanting to do the action belongs to the group, then you specify that the resource you want access to is a member of that group."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Sometimes group management can be kind of irritating, but it should allow you to do anything you want, and it's the user that is authorized, not your program."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["(If you want your program authorized, you can create a specific user to run it as and give that user the proper group membership, then su to that group within your program to execute the operation without giving the running user the ability."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You could create and distribute a selinux policy for your application.", "Selinux allows the kind of fine-grained access that you need.", "If you can't or won't use selinux, then the daemon is the way to go."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I would not run the application full time as root, but you might want to explore making your application setuid root, or setuid to some id that can become root using something like sudo for particular applications.", "You might be able to set up an account that cannot login, use setuid to change your program's id (temporarily when needed) and have sudo set up to not prompt for password, but always allow access to that account for specific tasks."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This way your program has no special privileges when running normally, only elevates it's privileges when needed, and is restricted by sudo to only running certain programs."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It's been awhile since I've done much Unix development, so I'm not really sure whether it's possible to set up sudo to not prompt for a password (or even if there is an API for it), but  as a fallback you could enable setuid to root only when needed."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["[EDIT]  Looks like sudo has a NOPASSWD mode so I think it should work since you're running the programs as external commands."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "sudo", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sudo.ws/sudo/sudo.html"}]}], [{"text": ["The traditional way would be to create and use a setuid helper to do whatever you need.", "Note that, however, properly writing a setuid helper is tricky (there are several attack vectors you have to protect against)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The modern way would be to use a daemon (running as root, started on boot) which listens to requests from the rest of the application.", "This way, your attack surface is mostly limited to whichever IPC you chose (I'd suggest d-bus, which seems to be the modern way)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Finally, if you are managing network interfaces, what you doing is very similar to what network-manager does on a modern distribution.", "It would be a good idea to either try to somehow integrate what you are doing with network-manager (so it will not conflict with your manipulations), or at least looks at how it works."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["There's no single user that is halfway between a \"normal\" user and root.", "You have root, and then you have users; users can have differing levels of capabilities.", "If you want something that's more powerful than a \"normal\" user but not as powerful as root, you just create a new user with the capabilities you want, but don't give it the privileges you don't want it to have."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I'm not familiar enough with Python to tell you what the necessary commands would be in that language, but you should be able to accomplish this by forking and using a pipe to communicate between the parent and child processes.", "Something along the lines of:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "Run the program as root via sudo or suid", "tag": "none", "senID": 1}, {"text": "On startup, the program immediately forks and establishes a pipe for communication between the parent and child processes", "tag": "none", "senID": 2}, {"text": "The child process retains root power, but just sits there waiting for input from the pipe", "tag": "none", "senID": 3}, {"text": "The parent process drops root (changes its uid back to that of the user running it), then displays the GUI, interacts with the user, and handles all operations which are available to a non-privileged user", "tag": "none", "senID": 4}, {"text": "When an operation is to be performed which requires root privileges, the (non-root) parent process sends a command down the pipe to the (root) child process which executes it and optionally reports back to the parent", "tag": "none", "senID": 5}]}, {"text": ["This is likely to be a bit easier to write than an independent daemon, as well as more convenient to run (since you don't need to worry about whether the daemon is running or not), while also allowing the GUI and other things which don't need root powers to be run as non-root."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]