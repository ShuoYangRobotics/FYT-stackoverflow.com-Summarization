[[{"text": ["Since you want to iterate in an unusual way, a generator is a good way to abstract that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def chunks(s, n):\n    \"\"\"Produce `n`-character chunks from `s`.\"\"\"\n    for start in range(0, len(s), n):\n        yield s[start:start+n]\n\nnums = \"1.012345e0070.123414e-004-0.1234567891.21423\"\nfor chunk in chunks(nums, 12):\n    print chunk\n</code>\n</pre>\n", "senID": 1}, {"text": ["produces:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 1.012345e007\n0.123414e-00\n4-0.12345678\n91.21423\n</code>\n</pre>\n", "senID": 3}, {"text": ["(which doesn't look right, but those are the 12-char chunks)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You're looking for string slicing."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "string slicing.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/introduction.html#strings"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = \"1.012345e0070.123414e-004-0.1234567891.21423\"\n&gt;&gt;&gt; x[2:10]\n'012345e0'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n line = \"1.012345e0070.123414e-004-0.1234567891.21423\"\nfirstNumber = line[:12]\nrestOfLine = line[12:]\n\nprint firstNumber\nprint restOfLine\n</code>\n</pre>\n", "senID": 0}, {"text": ["Output:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Output", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n 1.012345e007\n0.123414e-004-0.1234567891.21423\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n x = \"1.012345e0070.123414e-004-0.1234567891.21423\"\nwhile len(x)&gt;0:\n  v = x[:12]\n  print v\n  x = x[12:]\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n from itertools import izip_longest\n\ndef grouper(n, iterable, padvalue=None):\n    return izip_longest(*[iter(iterable)]*n, fillvalue=padvalue)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["you can do it like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n step = 12\nfor i in range(0, len(string), 12):\n    slice = string[i:step]\n    step += 12\n</code>\n</pre>\n", "senID": 1}, {"text": ["in this way on each iteration you will get one slice of 14 characters."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]