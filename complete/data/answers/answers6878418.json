[[{"text": ["I'm confused by this question.", "The requests library will put the cookies in the jar for you."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import requests\nimport cookielib\n\n\nURL = '...whatever...'\njar = cookielib.CookieJar()\nr = requests.get(URL, cookies=jar)\nr = requests.get(URL, cookies=jar)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The first request to the URL will fill the jar.", "The second request will send the cookies back to the server.", "The same goes for the standard library's urllib module (http://docs.python.org/library/cookielib.html)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["To help you out, I wrote an entire module.", "I tried it with my personal webpage and google's cookies, so I'd assume it works."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I got help from How to add cookie to existing cookielib CookieJar instance in Python?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "How to add cookie to existing cookielib CookieJar instance in Python?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2169281/how-to-add-cookie-to-existing-cookielib-cookiejar-instance-in-python"}]}, {"text": ["I have a lot of unpythonic code in here including a semi-kludge, so your mileage may vary.", "Tweak it as you wish, especially with the assumed items (such as port 80)  the \"request\" as an argument below is of type requests.request and I realized that the \"method\" argument must be all capitals.", "Hope I could help!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Note:  I haven't had time to add comments for clarification so you'll have to use the source."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import Cookie,cookielib,requests,datetime,time  #had this out but realized later I needed it when I continued testing\n\ndef time_to_tuple(time_string):\n    wday = {'Mon':0,'Tue':1,'Wed':2,'Thu':3,'Fri':4,'Sat':5,'Sun':6}\n    mon = {'Jan':1,'Feb':2,'Mar':3,'Apr':4,'May':5,'Jun':6,'Jul':7,'Aug':8,'Sep':9,'Oct':10,'Nov':11,'Dec':12}\n    info = time_string.split(' ')\n    info = [i.strip() for i in info if type(i)==str]\n    month = None\n    for i in info:\n        if '-' in i:\n            tmp = i.split('-')\n            for m in tmp:\n                try:\n                    tmp2 = int(m)\n                    if tmp2&lt;31:\n                        mday = tmp2\n                    elif tmp2 &gt; 2000:\n                        year = tmp2\n                except:\n                    for key in mon:\n                        if m.lower() in key.lower():\n                            month = mon[key]\n        elif ':' in i:\n            tmp = i.split(':')\n            if len(tmp)==2:\n                hour = int(tmp[0])\n                minute = int(tmp[1])\n            if len(tmp)==3:\n                hour = int(tmp[0])\n                minute = int(tmp[1])\n                second = int(tmp[2])\n        else:\n            for item in wday:\n                if ((i.lower() in item.lower()) or (item.lower() in i.lower())):\n                    day = wday[item]\n            if month is None:\n                for item in mon:\n                    if ((i.lower() in item.lower()) or (item.lower() in i.lower())):\n                        month = mon[item]\n    return year,month,mday,hour,minute,second\n\ndef timefrom(year,month,mday,hour,minute,second):\n    time_now = time.gmtime()\n    datetime_now = datetime.datetime(time_now.tm_year,time_now.tm_mon,\n                                     time_now.tm_mday,time_now.tm_hour,\n                                     time_now.tm_min,time_now.tm_sec)\n    then = datetime.datetime(year,month,mday,hour,minute,second)\n    return (datetime_now-then).total_seconds()\n\ndef timeto(year,month,mday,hour,minute,second):\n    return -1*timefrom(year,month,mday,hour,minute,second)\n\n\n\n##['comment', 'domain', 'secure', 'expires', 'max-age', 'version', 'path', 'httponly']\ndef parse_request(request):\n    headers = request.headers\n    cookieinfo = headers['set-cookie'].split(';')\n    name = 'Undefined'\n    port=80\n    port_specified=True\n    c = Cookie.SmartCookie(headers['set-cookie'])\n    cj = cookielib.CookieJar()\n    for m in c.values():\n        value = m.coded_value\n        domain = m['domain']\n        expires = m['expires']\n        if type(expires) == str:\n            tmp = time_to_tuple(expires)\n            expires = timeto(tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5])\n        max_age=m['max-age']\n        version = m['version']\n        if version == '':\n            version = 0\n        path = m['path']\n        httponly = m['httponly']\n        if httponly == '':\n            if 'httponly' in headers['set-cookie'].lower():\n                httponly = True\n        else:\n            httponly = False\n        secure = m['secure']\n        comment=m['comment']\n        port = 80\n        port_specified=False\n        domain_specified=True\n        domain_initial_dot = domain.startswith('.')\n        path_specified=True\n        discard = True\n        comment_url=None\n        rest={'HttpOnly':httponly}\n        rfc2109=False\n        ck = cookielib.Cookie(version,name,value,port,port_specified,domain,\n                              domain_specified,domain_initial_dot,path,path_specified,\n                              secure,expires,discard,comment,comment_url,rest,rfc2109)\n        cj.set_cookie(ck)\n    return cj\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Try this site: Voidspace article"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Voidspace article", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.voidspace.org.uk/python/articles/cookielib.shtml"}]}, {"text": ["Over the years I have found voidspace to be extremely useful for doing this kind of stuff.", "Hope I helped, although I'm quite a dunce.", "The code is available at Voidspace Recipes\nas source code .py although the download file is a \".py-\" file."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Voidspace Recipes", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.voidspace.org.uk/python/recipebook.shtml#cookielib"}]}], [{"text": ["I'm trying to do the same thing.", "This is what I have so far, and for some reason it isn't sending the cookies along in the header.", "It might get you far enough along to solve your problem though."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import requests\nimport cookielib\nimport logging\n\nlog = logging.getLogger(__name__)\n\ndef auth(auth_url, cookies):\n    cj = cookielib.CookieJar()\n    for x in cookies:\n         if len(cookies[x]) &gt; 0:\n             ck = cookielib.Cookie(version=1, name=x, value=cookies[x], \n                    port=None, port_specified=False, domain='.example.com', \n                    domain_specified=True, \n                    domain_initial_dot=True, path='/', \n                    path_specified=True, secure=False, \n                    expires=None, discard=True, \n                    comment=None, comment_url=None, \n                    rest=None, rfc2109=True)\n             log.info(ck)\n             cj.set_cookie(ck)\n\n    log.info(\"cookies = %s \" % cj)\n    response = requests.get(auth_url, cookies=cj)\n    log.info(\"response %s \\n\" % response)\n    log.info(\"response.headers %s \\n\" % response.headers)\n    log.info(\"response.content %s \\n\" % response.content)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Well cookielib.LWPCookieJar has load and save methods on it.", "Look at the format and see if it matches the native cookie format, you may well be able to load your cookie straight into a cookie jar using StringIO.", "Alternatively, if requests is using urllib2 under the hood couldn't you add a cookie handler to the default opener?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Assuming that you have requested for url and you got headers as response.", "Type type of url is string.", "Type type of headers is list."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "url", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "headers", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "url", "childNum": 0, "tag": "code", "childList": []}, {"text": "headers", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import urllib2\nimport cookielib\n\nclass dummyResponse:\n    def __init__(self,headers):\n        self.headers=headers\n    def info(self):\n        return dummyInfo(self.headers)\n\nclass dummyInfo:\n    def __init__(self,headers):\n        self.headers=headers\n    def getheaders(self,key):\n        #Headers are in the form: 'Set-Cookie: key=val\\r\\n'. We want 'key=val'\n        newMatches=[]\n        for header in self.headers:\n            if header.lower().startswith(key.lower()):\n                clearHeader=header[len(key)+1:].strip()\n                newMatches.append(clearHeader)\n        return newMatches\n\nreq=urllib2.Request(url)\nresp=dummyResponse(headers)\n\njar=cookielib.CookieJar()\njar.extract_cookies(resp, req)\n</code>\n</pre>\n", "senID": 1}]]