[[{"text": ["collection.Counter available in Python 2.7 can be used to implement multisets that do exactly what you want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "collection.Counter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = [3,4,5,5,5,6]\nb = [1,3,4,4,5,5,6,7]\n\na_multiset = collections.Counter(a)\nb_multiset = collections.Counter(b)\n\noverlap = list((a_multiset &amp; b_multiset).elements())\na_remainder = list((a_multiset - b_multiset).elements())\nb_remainder = list((b_multiset - a_multiset).elements())\n\nprint intersection, a_remainder, b_remainder\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In the language of sets, overlap is 'intersection' and remainder is 'set difference'.", "If you had distinct items, you wouldn't have to do these operations yourself, check out http://docs.python.org/library/sets.html if you're interested."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/sets.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sets.html"}]}, {"text": ["Since we're not working with distinct elements, your approach is reasonable.", "If you wanted this to run faster, you could create a dictionary for each list and map the number to how many elements are in each array (e.g., in a, 3->1, 4->1, 5->2, etc.).", "You would then iterate through map a, determine if that letter existed, decrement its count and add it to the new list"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Untested code, but this is the idea"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def add_or_update(map,value):\n    if value in map:\n        map[value]+=1\n    else\n        map[value]=1\n\nb_dict = dict()\nfor b_elem in b:\n    add_or_update(b_dict,b_elem)\n\nintersect = []; diff = [];\n\nfor a_elem in a:\n    if a_elem in b_dict and b_dict[a_elem]&gt;0:\n        intersect.add(a_elem);\n\nfor k,v in diff:\n    for i in range(v):\n        diff.add(k);\n</code>\n</pre>\n", "senID": 3}], [{"text": ["OK, verbose, but kind of cool (similar in spirit to the collections.Counter idea, but more home-made):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "collections.Counter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import itertools as it\nflatten = it.chain.from_iterable \nsorted(\n   v for u,v in \n    set(flatten(enumerate(g) \n        for k, g in it.groupby(a))).intersection(\n    set(flatten(enumerate(g)\n        for k, g in it.groupby(b))))\n   )\n</code>\n</pre>\n", "senID": 1}, {"text": ["The basic idea is to make each of the lists into a new list which attaches a counter to each object, numbered to account for duplicates -- so that then you can then use set operations on these tuples after all."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["To be slightly less verbose:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n aa = set(flatten(enumerate(g) for k, g in it.groupby(a)))\n bb = set(flatten(enumerate(g) for k, g in it.groupby(b)))\n # aa = set([(0, 3), (0, 4), (0, 5), (0, 6), (1, 5), (2, 5)])\n # bb = set([(0, 1), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 4), (1, 5)])\n\n cc = aa.intersection(bb)\n # cc = set([(0, 3), (0, 4), (0, 5), (0, 6), (1, 5)])\n c = sorted(v for u,v in cc)\n # c = [3, 4, 5, 5, 6]\n</code>\n</pre>\n", "senID": 4}, {"tag": "ul", "num": 6, "lis": [{"text": ["groupby"], "childNum": 0, "tag": "code", "senID": 5, "childList": []}, {"text": ["enumerate"], "childNum": 0, "tag": "code", "senID": 6, "childList": []}, {"text": ["flatten"], "childNum": 0, "tag": "code", "senID": 7, "childList": []}, {"text": ["set"], "childNum": 0, "tag": "code", "senID": 8, "childList": []}, {"text": ["intersection"], "childNum": 0, "tag": "code", "senID": 9, "childList": []}, {"text": ["sorted(v for u,v in cc)"], "childNum": 0, "tag": "code", "senID": 10, "childList": []}]}, {"text": ["Finally, I'm not sure what you mean by the remainders; it seems like it ought to be my aa-cc and bb-cc but I don't know where you get a_remainder = [4]:"], "childNum": 3, "tag": "p", "senID": 11, "childList": [{"text": "aa-cc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "bb-cc", "childNum": 0, "tag": "code", "childList": []}, {"text": "a_remainder = [4]", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n sorted(v for u,v in aa-cc)\n# [5]\n\nsorted(v for u,v in bb-cc)\n# [1, 4, 7]\n</code>\n</pre>\n", "senID": 12}], [{"text": ["A response from kerio in #python on freenode:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [ i for i in itertools.chain.from_iterable([k] * v for k, v in \\\n  (Counter(a) &amp; Counter(b)).iteritems())\n]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try difflib.SequenceMatcher(), \"a flexible class for comparing pairs of sequences of any type\"..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "difflib.SequenceMatcher()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/difflib.html#difflib.SequenceMatcher"}]}, {"text": ["A quick try:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a = [3,4,5,5,5,6]\nb = [1,3,4,4,5,5,6,7]\n\nsm = difflib.SequenceMatcher(None, a, b)\nc = []\na_remainder = []\nb_remainder = []\n\nfor tag, i1, i2, j1, j2 in sm.get_opcodes():\n    if tag == 'replace':\n        a_remainder.extend(a[i1:i2])\n        b_remainder.extend(b[j1:j2])\n    elif tag == 'delete':\n        a_remainder.extend(a[i1:i2])\n    elif tag == 'insert':\n        b_remainder.extend(b[j1:j2])\n    elif tag == 'equal':\n        c.extend(a[i1:i2])\n</code>\n</pre>\n", "senID": 2}, {"text": ["And now..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print c\n[3, 4, 5, 5, 6]\n&gt;&gt;&gt; print a_remainder\n[5]\n&gt;&gt;&gt; print b_remainder\n[1, 4, 7]\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n Aset = Set(a);\nBset = Set(b);\na_remainder = a.difference(b);\nb_remainder = b.difference(a);\nc = a.intersection(b);\n</code>\n</pre>\n", "senID": 0}, {"text": ["But if you need c to have duplicates, and order is important for you,\nyou may look for w:Longest common subsequence problem"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://en.wikipedia.org/wiki/Longest_common_subsequence_problem", "text": "w:Longest common subsequence problem", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Use python set"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n intersection = set(a) &amp; set(b)\na_remainder = set(a) - set(b)\nb_remainder = set(b) - set(a)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I don't think you should actually use this solution, but I took this opportunity to practice with lambda functions and here is what I came up with :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = [3,4,5,5,5,6]\nb = [1,3,4,4,5,5,6,7]\ndedup = lambda x: [set(x)] if len(set(x)) == len(x) else [set(x)] + dedup([x[i] for i in range(1, len(x)) if x[i] == x[i-1]])\ndefault_set = lambda x: (set() if x[0] is None else x[0], set() if x[1] is None else x[1])\ndeduped = map(default_set, map(None, dedup(a), dedup(b)))\nget_result = lambda f: reduce(lambda x, y: list(x) + list(y), map(lambda x: f(x[0], x[1]), deduped))\nc = get_result(lambda x, y: x.intersection(y))          # [3, 4, 5, 6, 5]\na_remainder = get_result(lambda x, y: x.difference(y))  # [5]\nb_remainder = get_result(lambda x, y: y.difference(x))  # [1, 7, 4]\n</code>\n</pre>\n", "senID": 1}, {"text": ["I'm pretty sure izip_longest would have simplified this a bit (wouldn't have needed the default_set lambda), but I was testing this with Python 2.5."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "izip_longest", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#itertools.izip_longest"}, {"text": "default_set", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Here are some of the intermediate values used in the calculation in case anyone wants to understand this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n dedup(a) = [set([3, 4, 5, 6]), set([5]), set([5])]\ndedup(b) = [set([1, 3, 4, 5, 6, 7]), set([4, 5])]\ndeduped = [(set([3, 4, 5, 6]), set([1, 3, 4, 5, 6, 7])), (set([5]), set([4, 5])), (set([5]), set([]))]\n</code>\n</pre>\n", "senID": 4}]]