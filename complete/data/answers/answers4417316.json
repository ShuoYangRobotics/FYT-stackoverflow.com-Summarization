[[{"text": ["Pyinstallet might help..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["however py2exe is not complicated..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["take a look at this py2exe sample setup (from here, but it's italian, so i translated it http://bancaldo.wordpress.com/2010/05/13/python-py2exe-setup-py-sample/)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://bancaldo.wordpress.com/2010/05/13/python-py2exe-setup-py-sample/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bancaldo.wordpress.com/2010/05/13/python-py2exe-setup-py-sample/"}]}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\nfrom distutils.core import setup\nimport py2exe, sys, wx, os\n\n# Se eseguito senza argomenti, crea l'exe in quiet mode.\n# If executed without args, it makes the exe in quiet mode\nif len(sys.argv) == 1:\n    sys.argv.append(\"py2exe\")\n    sys.argv.append(\"-q\")\n\nclass FileBrowser(wx.FileDialog):\n    def __init__(self):\n        wildcard = \"Python files (*.py)|*.py|\" \\\n            \"Tutti i files (*.*)|*.*\"\n        dialog = wx.FileDialog(None, \"Choose the file\", os.getcwd(),\n            \"\", wildcard, wx.OPEN)\n        if dialog.ShowModal() == wx.ID_OK:\n            print(dialog.GetPath())\n        self.file = dialog.GetPath()\n        self.fin = open(self.file, 'r')\n        dialog.Destroy()\n\nclass Target:\n    def __init__(self, **kw):\n        self.__dict__.update(kw)\n        # info di versione\n        self.version = \"1.0.0\"\n        self.company_name = \"Bancaldo TM\"\n        self.copyright = \"no copyright\"\n        self.name = \"py2exe sample files\"\n\nmanifest_template = '''\n&lt;?xml version='1.0' encoding='UTF-8' standalone='yes'?&gt;\n&lt;assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'&gt;\n  &lt;trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\"&gt;\n    &lt;security&gt;\n      &lt;requestedPrivileges&gt;\n        &lt;requestedExecutionLevel level='asInvoker' uiAccess='false' /&gt;\n      &lt;/requestedPrivileges&gt;\n    &lt;/security&gt;\n  &lt;/trustInfo&gt;\n  &lt;dependency&gt;\n    &lt;dependentAssembly&gt;\n      &lt;assemblyIdentity\n     type='win32'\n     name='Microsoft.VC90.CRT'\n     version='9.0.21022.8'\n     processorArchitecture='*'\n     publicKeyToken='1fc8b3b9a1e18e3b' /&gt;\n    &lt;/dependentAssembly&gt;\n  &lt;/dependency&gt;\n  &lt;dependency&gt;\n    &lt;dependentAssembly&gt;\n      &lt;assemblyIdentity\n         type=\"win32\"\n         name=\"Microsoft.Windows.Common-Controls\"\n         version=\"6.0.0.0\"\n         processorArchitecture=\"*\"\n         publicKeyToken=\"6595b64144ccf1df\"\n         language=\"*\" /&gt;\n    &lt;/dependentAssembly&gt;\n  &lt;/dependency&gt;\n&lt;/assembly&gt;\n'''\n# File Browser\napp = wx.PySimpleApp()\nfb = FileBrowser()\n# Assegno il nome all'eseguibile di uscita\n# Give the name at the exe file being created\ntextentry = wx.TextEntryDialog(None, \"name file EXE?\",'','')\nif textentry.ShowModal() == wx.ID_OK:\n    destname = textentry.GetValue()\n\nRT_MANIFEST = 24\n\ntest_wx = Target(\n    description = \"A GUI app\",\n    script = fb.file,     # programma sorgente dal quale creiamo l'exe\n                          # source from wich we create the exe\n    other_resources = [(RT_MANIFEST, 1, manifest_template % dict(prog=\"tried\"))],\n    icon_resources = [(1, \"py.ico\")],\n#    dest_base = \"prova_banco\") # Nome file di destinazione\n                                #Name Destination file\n    dest_base = destname) # Nome file di destinazione\n\nsetup(\n    data_files=[\"py.ico\"],\n    options = {\"py2exe\": {\"compressed\": 1,\n                          \"optimize\": 2,\n                          \"ascii\": 1,\n                          \"bundle_files\": 1}},\n    zipfile = None,\n    windows = [test_wx],\n    )\n</code>\n</pre>\n", "senID": 3}, {"text": ["it inclused also a small graphic interface wich help you on choose the file ;)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["this is a simpler sample, maybe it's more useful :)"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n from distutils.core import setup\nimport py2exe\nsetup(\n\u00a0 \u00a0 name = 'AppPyName',\n\u00a0 \u00a0 description = 'Python-based App',\n\u00a0 \u00a0 version = '1.0',\n\u00a0 \u00a0 windows = [{'script': 'Main.pyw'}],\n\u00a0 \u00a0 options = {'py2exe': {'bundle_files': 1,'packages':'encodings','includes': 'cairo, pango, pangocairo, atk, gobject',}},\n\u00a0 \u00a0 data_files=[ 'gui.glade',]\n\u00a0 \u00a0 zipfile = None, \n)\n</code>\n</pre>\n", "senID": 7}, {"text": ["STEP BY STEP TUTORIAL:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["1-create a .py file, naming it, for example, 'hello.py', that has not a GUI\n2- make a setup.py file"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n from distutils.core import setup\nimport py2exe\n\nsetup(console=['hello.py'])\n</code>\n</pre>\n", "senID": 10}, {"text": ["notice the use of 'console' instead of 'windows', 'cause you have not a gui"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["then, move your hello.py file and your setup.py file in Python directory; then open the cmd,  and once you've arrived at the correct directory (usually C:\\python2x), type:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n python setup.py py2exe\n</code>\n</pre>\n", "senID": 13}, {"text": ["you're exe file will be in the dist directory.", "if some .dll are missing, simply download it and place in python directory."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["once your program will be more complicated, it may require other instructions; look at the other 2 setup.py samples i've posted.", "hope this help"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}], [{"text": ["One option might be to use IronPython.", "IronPython is another dialect of python that targets .NET, and works quite easily with MS Visual Studio.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["py2exe - Python to Windows EXE\npy2exe converts your Python programs to standalone Windows executables that can run without your users needing to install Python.", "Note that this is not a native code compiler - your code is still interpreted.", "py2exe merely provides all the necessary pieces so that when your end users double-click on your executable, the Python interpreter will start up to interpret your code.", "py2exe is released under the Mozilla Public License"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Have a look at gui2exe, it's a pretty good frontend to py2exe, pyinstaller, etc."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "gui2exe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/gui2exe/"}]}], [{"text": ["It's not something I would recommend to a beginner, but if you are comfortable with C/C++ compilers, you could try Shed Skin.", "If your Python source code meets certain requirements, Shed Skin can translate it into C++ and compile the C++ into a binary executable."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Shed Skin", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/shedskin/"}]}], [{"text": ["You could also simply provide your friend a ZIP file containing python.exe, the python libs, and your python application (in pyc) along with a batch to start python.exe with your script.", "Python is fairly easy to run without it being 'installed'."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]