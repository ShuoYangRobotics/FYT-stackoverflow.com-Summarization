[[{"text": ["Something like this might make your code more readable:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict([(x,y) for y,x in enumerate('cbad')])\n</code>\n</pre>\n", "senID": 1}, {"text": ["But you should give more details what you really want to do.", "Your code will probably fail if the characters in s do not fit the keys of d. So d is just a container for the keys and the values are not important.", "Why not start with a list in that case?"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "d", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "d", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["What about"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = {'a':0, 'b':0, 'c':0, 'd':0}\ns = 'cbad'\nfor k in d.iterkeys():\n    d[k] = s.index(k)\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's no functional programming anymore but should be more performant and more pythonic, perhaps :-)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT: A function variant using python dict-comprehensions (needs Python 2.7+ or 3+):"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n d.update({k : s.index(k) for k in d.iterkeys()})\n</code>\n</pre>\n", "senID": 4}, {"text": ["or even"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n {k : s.index(k) for k in d.iterkeys()}\n</code>\n</pre>\n", "senID": 6}, {"text": ["if a new dict is okay!"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["another one liner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict([(k,s.index(k)) for (k,v) in d.items()])\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n for k in d.iterkeys():\n    d[k] = s.index[k]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Or, if you don't already know the letters in the string:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n d = {}\nfor i in range(len(s)):\n    d[s[i]]=i\n</code>\n</pre>\n", "senID": 2}], [{"text": ["use update() method of dict:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d.update((k,s.index(k)) for k in d.iterkeys())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You choose the right way but think that no need to create dict and then modify it if you have ability to do this in the same time:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n keys = ['a','b','c','d']\nstrK = 'bcad'\nres = dict(zip(keys, (strK.index(i) for i in keys)))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Dict comprehension for python 2.7 and above"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n {key : indice for key, indice in zip(d.keys(), map(s.index, d.keys()))}\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {'a':0, 'b':0, 'c':0, 'd':0}\n&gt;&gt;&gt; s = 'cbad'\n&gt;&gt;&gt; for x in d:  \n        d[x]=s.find(x)\n&gt;&gt;&gt; d\n    {'a': 2, 'c': 0, 'b': 1, 'd': 3}\n</code>\n</pre>\n", "senID": 0}]]