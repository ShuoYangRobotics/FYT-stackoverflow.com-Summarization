[[{"text": ["If it's 'much later' in the code, then you should probably break the code up into multiple functions.", "It sounds like the function is too long."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Another tip is to use meaningful names.", "temp_variable, tmp, temp, etc.", "are not good names.", "Use a name that describes the value that it points to.", "This will eliminate a large class of potential occurrences of this problem."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "temp_variable", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "tmp", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "temp", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Also, list comprehensions don't leak their variables so if you can use them, than that's just one more reason that they're generally better.", "They are not applicable to all situations though."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you want the variables to go away after the loop ends, refactor the loop into a function.", "That way, after the function is called, the variables will go out of scope and will be garbage collected."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As for coding practices that would prevent such bugs, I'd recommend that you a.", ") put these types of functions that require temporary variables in functions, and b.", ") unit test (since the second for loop would not execute by itself, a unit test for just that for loop would catch your error)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Try adding del temp_variable when you no longer want it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "del temp_variable", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Others have suggested putting code in functions if you don't want it to leak local variables.", "I would like to suggest that you put these functions inside a function.", "This way they have access to the variables defined in the outer function, so you don't have to pass them in.", "Just define inner functions as you need them and invoke them right away, unless of course they can be reused."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def myfunc(a):\n\n    i = 10\n\n    def infunc():\n        for i in range(a):\n            print i,\n    infunc()\n\n    print i\n\nmyfunc(5)\n&gt;&gt;&gt; 0 1 2 3 4 10\n</code>\n</pre>\n", "senID": 1}, {"text": ["This isn't particularly pretty, but it does work, and you shouldn't need it very often."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Try running pylint.", "It won't catch errors like this directly, but it will tell you when you aren't using a variable's value."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pylint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/pylint"}]}], [{"text": ["Design first.", "Code second."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]