[[{"text": ["Your result is a dictionary, right?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n { userNumber: setOfDays }\n</code>\n</pre>\n", "senID": 1}, {"text": ["How about this to get started."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\nvisits = defaultdict(set)\nfor user, date in someList:\n    visits[user].add(date)\n</code>\n</pre>\n", "senID": 3}, {"text": ["This gives you a dictionary with a set of dates on which they visited.  "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n counts = defaultdict(int)\nfor user in visits:\n    v= len(visits[user])\n    count[v] += 1\n</code>\n</pre>\n", "senID": 5}, {"text": ["This gives you a dictionary of # visits, # of users with that many visits."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Is that the kind of thing you're looking for?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Rewriting S.Lott's answer in SQL as an exercise, just to check that I got the requirements right..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n SELECT * FROM someList;\n\n userid |    date    \n--------+------------\n      1 | 2008-12-01\n      1 | 2008-12-02\n      1 | 2008-12-03\n      1 | 2008-12-04\n      1 | 2008-12-05\n      2 | 2008-12-03\n      2 | 2008-12-04\n      2 | 2008-12-05\n      3 | 2008-12-04\n      4 | 2008-12-04\n      5 | 2008-12-05\n      5 | 2008-12-05\n\nSELECT countdates, COUNT(userid) AS nusers\nFROM ( SELECT userid, COUNT (DISTINCT date) AS countdates\n             FROM someList\n             GROUP BY userid ) AS visits\nGROUP BY countdates\nHAVING countdates &lt;= 25\nORDER BY countdates;\n\n countdates | nusers \n------------+--------\n          1 |      3\n          3 |      1\n          5 |      1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is probably not the most pythonic or efficient or smartest or whatever way of doing this.", "But maybe you can confirm if I've understood the requirements correctly:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; log=[[1, '2008-12-01'], [1, '2008-12-01'],[2, '2008-12-01'],[2, '2008-12-03'], [1, '2008-12-04'], [3, '2008-12-04'], [4, '2008-12-04']]\n&gt;&gt;&gt; all_dates = sorted(set([d for d in [x[1] for x in log]]))\n&gt;&gt;&gt; for i in range(0, len(all_dates)):\n...     log_slice = [d for d in log if d[1] &lt;= all_dates[i]]\n...     num_users = len(set([u for u in [x[0] for x in log_slice]]))\n...     print \"%d users visited in %d days\" % (num_users, i + 1)\n... \n2 users visited in 1 days\n2 users visited in 2 days\n4 users visited in 3 days\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["First, I should mention that you NEED to store the date as a string.", "Currently, it would do arithmetic on your current entry.", "So, if you format data like this, it will work better:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "data", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n data = \n[ \n  [1,\"2008-12-01\"],\n  [1,\"2008-12-01\"],\n  [2,\"2008-12-01\"]\n]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Next, we can do something like this to get the number for each day:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n result = {}\nfor (id, date) in data:\n    if date not in result:\n        result[date] = 1\n    else:\n        result[date] += 1\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now you can get the number of users for a specific date by doing something like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print result[some_date]\n</code>\n</pre>\n", "senID": 5}], [{"text": ["It is unclear what exactly your requirement are.", "Here's my take:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\nfrom collections import defaultdict\n\ndata = [ \n  [1,'2008-12-01'],\n  [3,'2008-12-25'],\n  [1,'2008-12-01'],\n  [2,'2008-12-01'],\n]\n\nd = defaultdict(set)\nfor id, day in data:\n    d[day].add(id)\n\nfor day in sorted(d):\n    print('%d user(s) visited on %s' % (len(d[day]), day))\n</code>\n</pre>\n", "senID": 1}, {"text": ["It prints:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 2 user(s) visited on 2008-12-01\n1 user(s) visited on 2008-12-25\n</code>\n</pre>\n", "senID": 3}], [{"text": ["How about this: this gives you set of days as well as count:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [39]: from itertools import groupby ##itertools is a part of the standard library.\n\nIn [40]: l=[[1, '2008-12-01'],\n   ....:  [1, '2008-12-01'],\n   ....:  [2, '2008-12-01'],\n   ....:  [1, '2008-12-01'],\n   ....:  [3, '3008-12-04']]\n\nIn [41]: l.sort()\n\nIn [42]: l\nOut[42]: \n[[1, '2008-12-01'],\n [1, '2008-12-01'],\n [1, '2008-12-01'],\n [2, '2008-12-01'],\n [3, '3008-12-04']]\n\nIn [43]: for key, group in groupby(l, lambda x: x[0]):\n   ....:     group=list(group)\n   ....:     print key,' :: ', len(group), ' :: ', group\n   ....:     \n   ....:     \n1  ::  3  ::  [[1, '2008-12-01'], [1, '2008-12-01'], [1, '2008-12-01']]\n2  ::  1  ::  [[2, '2008-12-01']]\n3  ::  1  ::  [[3, '3008-12-04']]\n</code>\n</pre>\n", "senID": 1}, {"text": ["user::number of visits :: visit dates"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here the user -1 visits on 2008-12-01 3 times, if you are looking to count only distinct dates then"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for key, group in groupby(l, lambda x: x[0]):\n    group=list(group)\n    print key,' :: ', len(set([(lambda y: y[1])(each) for each  in group])), ' :: ', group\n   ....:     \n   ....:     \n1  ::  1  ::  [[1, '2008-12-01'], [1, '2008-12-01'], [1, '2008-12-01']]\n2  ::  1  ::  [[2, '2008-12-01']]\n3  ::  1  ::  [[3, '3008-12-04']]\n</code>\n</pre>\n", "senID": 4}]]