[[{"code": "<pre>\n<code>\n reader = csv.reader(open(\"e=0.6.csv\"))\ntable = tuple(float(col) for row in reader for col in row)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Why do you make a new list called values?", "Why not append to table instead?", "i.e."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n reader = csv.reader(open(\"e=0.6.csv\"))\ntable = []\nfor row in reader: \n    for col in row: \n        table.append(float(col))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["(1.0, 0.98, ...) is a tuple.", "Here's one way to make a tuple from that:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "(1.0, 0.98, ...)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tuple", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [[1.0], [0.98]]\n&gt;&gt;&gt; tuple(i[0] for i in l)\n(1.0, 0.97999999999999998)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In your specific case, I'd skip this step and just do something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n reader = csv.reader(open(\"e=0.6.csv\"))\n\ntable = [float(col) for col in row for row in reader]\n</code>\n</pre>\n", "senID": 1}, {"text": ["However if you wanted to go with your original answer you can do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Use the map method:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "map method", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#map"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [[1.0], [0.98], [3.0]]\n&gt;&gt;&gt; map(lambda x: x[0], l)\n[1.0, 0.97999999999999998, 3.0]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Or list comprehension:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [e for subl in l for e in subl]\n[1.0, 0.97999999999999998, 3.0]\n</code>\n</pre>\n", "senID": 6}, {"text": ["In either case, you can convert the list returned into a tuple by just doing tuple(result)"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "tuple(result)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n reader = csv.reader(open(\"e=0.6.csv\"))\ntable = []\nfor row in reader:\n    for col in row: \n        table.aapend(float(col))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Use a list comprehension:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [[0.1], [0.2], [0.3]]\n&gt;&gt;&gt; [x[0] for x in l]\n[0.1, 0.2, 0.3]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or the map function:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; map(lambda x:x[0], l)\n[0.1, 0.2, 0.3]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or the reduce function:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; reduce(lambda x,y: x+y, l, [])\n[0.1, 0.2, 0.3]\n</code>\n</pre>\n", "senID": 5}, {"text": ["Or a generator:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; (x[0] for x in l)\n&lt;generator object &lt;genexpr&gt; at 0x1004e00f0&gt;\n</code>\n</pre>\n", "senID": 7}, {"text": ["Or just store your numbers directly in a list."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["I don't understand why you're using csv.reader in this case.", "You said yourself that it wasn't really a csv!", "Just do either:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv.reader", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n map(float, open(\"e=0.6.csv\").readlines())\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [float(x) for x in open(\"e=0.6.csv\").readlines()]\n</code>\n</pre>\n", "senID": 3}]]