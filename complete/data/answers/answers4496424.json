[[{"text": ["You get the indexes to iterate over from the list, and then you proceed to remove elements from the list.", "Eventually you're going to hit an index that no longer exists.", "Use a list comprehension to filter instead."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result = [entry for entry in result if entry[0] &gt;= 0 and\n  entry[0] &lt; board.dimensions and entry[1] &gt;= 0 and\n  entry[1] &lt; board.dimensions]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["During the for loop, you are popping elements which decreases the size of result.", "Yet, i will still go from 0 to 4."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "result", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["If you pop off an element, then it's no longer in the list - but your index doesn't move, so it's now pointing to the next element.", "Say you pop off two elements... your list size after that would be 2, but the for loop is still going to try to go to 4."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n def neighborGen(row,col,board):\n    \"\"\"\n    returns lists of coords of neighbors, in order of up, down, left, right\n    \"\"\"\n\n    return [\n        x for x in (\n            [row-1 , col], [row+1 , col], [row , col-1], [row , col+1]\n        ) \n        if x[0] &gt;= 0 and x[0] &lt; board.dimensions and\n        x[1] &gt;= 0 and x[1] &lt; board.dimensions\n    ]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Use a list comprehension to remove the invalid points.", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result = [coords for coords in result\n          if all(0 &lt;= c &lt; board.dimension for c in coords)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As others said, the indexes of the remaining elements change when you remove elements from the middle of the list.", "To avoid problems, you could process the elements from last index to first:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range(len(result)-1, -1, -1): \n   ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now, when the current element is removed, only indexes for already processed elements change.", "Since those elements are already processed and don't need to be accessed again, it doesn't matter if their indexes are no longer valid."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The canonical way to avoid this kind of off-the-board testing is to have a buffer zone of one or two rows/columns at the edges of the board.", "The board positions would have, as well as the usual values of \"empty\" or which side owned the square with what type of piece, a special \"invalid\" code.", "This would usually be coupled with a board representation as a ONE-dimensional array."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, chess would use an array of size 120 (10 columns x 12 rows).", "You need a margin of 2 to cater for knights ... 2 rows at each end but you need only one vertical margin as it can be shared."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["E.g."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n KNIGHT_DELTAS = (-21, -19, -12, -8, 8, 12, 19, 21)\n# I have a knight at \"currpos\"; what are its options?\nfor delta in KNIGHT_DELTAS:\n    newpos = currpos + delta\n    target = board[newpos]\n    if target &amp; EMPTY:\n        can_move_to(newpos)\n    elif target &amp; OTHER_TEAM:\n        can_capture(at=newpos, captured_piece=target &amp; PIECE_VALUE)\n    else:\n        # Either off the board or occupied by MY_TEAM.\n        # Notice that we didn't even need to test explicitly for \"off the board\".\n        pass\n</code>\n</pre>\n", "senID": 3}]]