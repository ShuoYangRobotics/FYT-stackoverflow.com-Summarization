[[{"text": ["You can use xrange instead of range, which uses a generator instead of building a whole list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Use xrange"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "xrange", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in xrange(n):\n</code>\n</pre>\n", "senID": 1}, {"text": ["which returns an iterator rather than a list.", "Or upgrade to Python 3, where range gets the semantics of xrange."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "range", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "xrange", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Use xrange instead of range to prevent the list from being constructed upfront.", "That will reduce your memory cost. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "xrange", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "range", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Either that or use a while loop with a counter and break when it reaches n. "], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "break", "childNum": 0, "tag": "code", "childList": []}, {"text": "n", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Usually, I've found that using a C style loop while coding in Python is a hidden stylistic problem.", "What exactly are you trying to do?"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "C", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["xrange will consume less memory than range.", "The difference is that range stores all the range values in a list, while xrange just yields value one by one."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "xrange", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "range", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "range", "childNum": 0, "tag": "code", "childList": []}, {"text": "xrange", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["http://docs.python.org/library/functions.html#xrange"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/functions.html#xrange", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#xrange"}]}], [{"text": ["If n is not known at the start of the loop, you can iterate over count from itertools."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/itertools.html", "text": "count", "childNum": 1, "tag": "a", "childList": [{"text": "count", "tag": "code"}]}, {"text": "count", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from itertools import count\n\nfor i in count():\n    if some_condition(i):\n        break\n    do_stuff()\n</code>\n</pre>\n", "senID": 1}, {"text": ["The count iterator takes optional start and step arguments.", "I think the above is more pythonic than the usual way of doing it, which is"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "count", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "start", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "step", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n i = 0\nwhile not some_condition(i):\n    do_stuff()\n    i += 1\n</code>\n</pre>\n", "senID": 3}, {"text": ["The i = 0 setup bothers me with this approach, and as the contents of the while block grows more complex with added break and continue statements, making sure the i variable gets incremented becomes a tedious and error-prone task.", "This rearrangement solves the last problem:"], "childNum": 5, "tag": "p", "senID": 4, "childList": [{"text": "i = 0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "break", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "continue", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n i = -1\nwhile True:\n    i += 1\n    if some_condition(i):\n        break\n    do_stuff()\n</code>\n</pre>\n", "senID": 5}, {"text": ["But it's still messy and inelegant compared to using count."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "count", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["In older Pythons, use xrange() instead of range(), it doesn't create an actual (in-memory) list."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "xrange()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "range()", "childNum": 0, "tag": "code", "childList": []}]}]]