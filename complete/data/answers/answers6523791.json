[[{"text": ["Because this is just how Python works -- class, def, etc are not declarations.", "Instead, they are real live statements which are executed.", "If they were not executed your module would be ... empty :-)"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "class", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "def", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "not declarations", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "real live statements", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Anyway, the idiomatic approach is:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # stuff to run always here such as class/def\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n   # stuff only to run when not called via 'import' here\n   main()\n</code>\n</pre>\n", "senID": 2}, {"text": ["See What isif __name__ == \"__main__\"for?"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "What isif __name__ == \"__main__\"for?", "tag": "a", "pos": 0, "childList": [{"text": "if __name__ == \"__main__\"", "tag": "code"}], "childNum": 1, "href": "http://effbot.org/pyfaq/tutor-what-is-if-name-main-for.htm"}, {"text": "if __name__ == \"__main__\"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["It does require source control over the module being imported, however."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Happy coding"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Unfortunately, you don't.", "That is part of how the import syntax works and it is important that it does so -- remember def is actually something executed, if Python did not execute the import, you'd be, well, stuck without functions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "def", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Since you probably have access to the file, though, you might be able to look and see what causes the error.", "It might be possible to modify your environment to prevent the error from happening."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Use the if __name__ == '__main__' idiom -- __name__ is a special variable whose value is '__main__' if the module is being run as a script, and the module name if it's imported.", "So you'd do something like"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "if __name__ == '__main__'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__name__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "'__main__'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n # imports\n# class/function definitions\nif __name__ == '__main__':\n    # code here will only run when you invoke 'python main.py'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Due to the way Python works, it is necessary for it to run your modules when it imports them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To prevent code in the module from being executed when imported, but only when run directly, you can guard it with this if:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if __name__ == \"__main__\":\n    # this won't be run when imported\n</code>\n</pre>\n", "senID": 2}, {"text": ["You may want to put this code in a main() method, so that you can either execute the file directly, or import the module and call the main().", "For example, assume this is in the file foo.py."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "main()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "main()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "foo.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def main():\n    print \"Hello World\"\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 4}, {"text": ["This program can be run either by going python foo.py, or from another Python script:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "python foo.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import foo\n\n...\n\nfoo.main()\n</code>\n</pre>\n", "senID": 6}], [{"text": ["You may write your \"main.py\" like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\n__all__=[\"somevar\", \"do_something\"]\n\nsomevar=\"\"\n\ndef do_something():\n    pass #blahblah\n\nif __name__==\"__main__\":\n    do_something()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try just importing the functions needed from main.py?", "So,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from main import SomeFunction\n</code>\n</pre>\n", "senID": 1}, {"text": ["It could be that you've named a function in batch.py the same as one in main.py, and when you import main.py the program runs the main.py function instead of the batch.py function; doing the above should fix that.", "I hope."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]