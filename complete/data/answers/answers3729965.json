[[{"text": [".profile would be a reasonable place if it's a per-user install; /etc/profile.d for system-wide installs.", "(You'll need root to do that, of course.", ")  "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": ".profile", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "/etc/profile.d", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Your installer won't be able to change the path of the current shell (unless it's being run via source, which would be...odd."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "source", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["For scripts that go in the $HOME directory you'd typically use $HOME/bin folder instead which is (usually) on the path."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["/etc/profile.d would add it to every user's path"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["~/.bashrc would just be your own"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["you can always do \"$ source ~/.bashrc\" to re-read the config files."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Edit: I misread the original question, so this snippet is only useful for modifying PATH, but not for persisting it..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PATH", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This can all be done using the os module:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "os", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import os\nUSER_HOME = os.path.expanduser('~')\nos.environ['PATH'] += \":\" + os.path.join(USER_HOME, '.custom_scripts')\n</code>\n</pre>\n", "senID": 2}, {"text": ["This appends :~/.custom_scripts to the end of the $PATH, since PATH must always be colon-delimited."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": ":~/.custom_scripts", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "$PATH", "childNum": 0, "tag": "code", "childList": []}, {"text": "PATH", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["~/.bashrc is read every time gnome-terminal is opened, (assuming the user has SHELL set to /bin/bash)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Be sure to check os.environ['PATH'] to see if the directory has already been added, so that the script doesn't add it more than once."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You shouldn't.", "It's the user choice whether he wants that in the PATH, in what cases and how to achieve that.", "What you can do is inform the user about the directory where your scripts reside and suggest putting it to the PATH."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PATH", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "PATH", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Or maybe you're asking from the user's perspective?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Why don't you establish the appropriate PATH upon the first call to your module (i.e.", "in your module's __init__.py):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PATH", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n # this is your module's __init__.py\nimport sys\neggs = ['/path/to/egg/1.egg', '/path/to/egg/2.egg']\nfor egg in eggs:\n    sys.path.append(egg)\n</code>\n</pre>\n", "senID": 1}]]