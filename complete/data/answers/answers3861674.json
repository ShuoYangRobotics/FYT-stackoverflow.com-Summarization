[[{"text": ["this might work"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def splitter(n, s):\n    pieces = s.split()\n    return (\" \".join(pieces[i:i+n]) for i in xrange(0, len(pieces), n)\n\nfor piece in splitter(1000, really_long_string):\n    print piece\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will yield ten 1000 word strings from a 10000 word string like you ask.", "Note that you can also use iterools grouper recipe but that would involve making 1000 copies of the iterator for your string: expensive I think."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Also note that this will replace all whitespace with spaces.", "If this isn't acceptable, you'll need something else."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "all", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Under normal circumstances :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = \"dedff fefef fefwff efef\"\n&gt;&gt;&gt; a.split()\n['dedff', 'fefef', 'fefwff', 'efef']\n&gt;&gt;&gt; k = a.split()\n&gt;&gt;&gt; [\" \".join(k[0:2]), \" \".join(k[2:4])]\n['dedff fefef', 'fefwff efef']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = 'a b c d e f g h i j k l'\nn = 3\n\ndef group_words(s, n):\n    words = s.split()\n    for i in xrange(0, len(words), n):\n        yield ' '.join(words[i:i+n])\n\nlist(group_words(s,n))\n['a b c', 'd e f', 'g h i', 'j k l']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Pehaps something like this, "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"aa bb cc dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv\"\n&gt;&gt;&gt; chunks = s.split()\n&gt;&gt;&gt; per_line = 5\n&gt;&gt;&gt; for i in range(0, len(chunks), per_line):\n...     print \" \".join(chunks[i:i + per_line])\n... \naa bb cc dd ee\nff gg hh ii jj\nkk ll mm nn oo\npp qq rr ss tt\nuu vv\n</code>\n</pre>\n", "senID": 1}], [{"text": ["this might help:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s=\"blah blah ..................\"\nl =[]\nfor i in xrange(0,len(s),1000):\n    l.append(s[i:i+1000])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you're comfortable using regular expressions, you could also try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\ndef split_by_number_of_words(input, number_of_words):\n    regexp = re.compile(r'((?:\\w+\\W+){0,%d}\\w+)' % (number_of_words - 1))\n    return regexp.findall(input)\n\ns = ' '.join(str(n) for n in range(1, 101)) # \"1 2 3 ... 100\"\nfor words in split_by_number_of_words(s, 10):\n    print words\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n start = 0\nvalues = []\nfor x in range((len(whole_str)/1000)+1):\n    values.append(whole_str[start:start+1000])\n    start +=1000\n</code>\n</pre>\n", "senID": 0}]]