[[{"text": ["From a quick look I think that its fairly comprehensive.", "Perhaps you should allow multiple teachers on a course, and allow reuse of addresses/locations between parents and students."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As a general rule I would say that you should start implementing and then you will find where you need improvement."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Some possible issues:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For the location object, what if in the future you need to hold a home address, work address, etc.", "for a person?", "Same for email addresses and phone numbers - I would have phone numbers be their own object."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Include an Address_3 on your address object."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Looks like an interesting project.", "Do note that Django has higher-level types than SQL, so you can make use of things like the email address type."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you're planning on targeting GAE, you should find a similarly rich set of model types."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "GAE", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/appengine/"}, {"href": "http://code.google.com/appengine/docs/datastore/typesandpropertyclasses.html", "text": "set of model types", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["hey...i agree...it looks pretty good.", "someone advised me to use auto-increment on all tables just to be sure there really is a unique id on every record.", "it's your choice if you'd like to go that route."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You should link paiement (transaction) to the person concerned."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I would advise you to not worry about the underling relational database.", "Yes, you'll need to understand what a foreign key is and the difference between many-to-many and one-to-many, etc., but you should think about your models in terms of Django classes.", "That's how you'll have to write them anyway, so that's where I would start.", "The Django documenation on models is great, and will help you a lot."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Django documenation on models", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/db/models/"}]}, {"text": ["I think everyone here would be glad to help you with the Python classes; you should rewrite your example using Django.", "For example, your Person table would look like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from django.db import models\n\nSEX_CHOICES = (\n    ('M', 'Male'),\n    ('F', 'Female')\n)\n\nETHNICITY_CHOICES = (\n    # follow the same format as SEX_CHOICES:\n    # (database_value, human_friendly_name)\n)\n\nclass Person(models.Model):\n    first_name   = models.CharField(max_length=200)\n    middle_name  = models.CharField(max_length=200)\n    familiy_name = models.CharField(max_length=200) \n\n    sex = models.CharField(max_length=1, choices=SEX_CHOICES)\n    ethnicity  = models.CharField(max_length=1, choices=ETHNICITY_CHOICES)\n    birth_date = models.DateField()\n\n    email = models.EmailField()\n    home_phone = models.CharField(max_length=10) # USA phone numbers\n    work_phone = models.CharField(max_length=10)\n    cell_phone = models.CharField(max_length=10)\n    address = models.ForeignKey(Location)\n\nclass Location(models.Model):\n    # left as an exercise for the reader\n\n# more classes...\n</code>\n</pre>\n", "senID": 2}], [{"text": ["A student doesn't have a class.", "He/She attends a class that has them (in the roster).", "Here's another way to look at the class situation.", "(notice the model's name.", "that's just because I tend not to name anything 'Class' because it's easy to get into name clashes that way."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class SchoolClass(models.Model):\n    teacher = models.ManyToManyField(Teacher, related_name='teachers')\n    student = models.ManyToManyField(Student, related_name='students')\n    prerequisites = models.ForeignKey('self')\n    startdate = models.DateField()\n    enddate = models.DateField()\n    ... and so on ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is more natural because you can have a class with students and take attendance according to the students list, or aggregate grades, student ages, etc.", "in a natural way."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]