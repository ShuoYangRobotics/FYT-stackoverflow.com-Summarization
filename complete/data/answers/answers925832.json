[[{"text": ["This is from an old project, and I didn't write it, but it does something similar to what you want using ipython."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n '''Start an IPython shell (for debugging) with current environment.                    \nRuns Call db() to start a shell, e.g.                                                  \n\n\ndef foo(bar):                                                                          \n    for x in bar:                                                                      \n        if baz(x):                                                                     \n            import ipydb; ipydb.db() # &lt;-- start IPython here, with current value of x (ipydb is the name of this module).\n.                                                                                      \n'''\nimport inspect,IPython\n\ndef db():\n    '''Start IPython shell with callers environment.'''\n    # find callers                                                                     \n    __up_frame = inspect.currentframe().f_back\n    eval('IPython.Shell.IPShellEmbed([])()', # Empty list arg is                       \n         # ipythons argv later args to dict take precedence, so                        \n         # f_globals() shadows globals().  Need globals() for IPython                  \n         # module.                                                                     \n         dict(globals().items() + __up_frame.f_globals.items()),\n         __up_frame.f_locals)\n</code>\n</pre>\n", "senID": 1}, {"text": ["edit by Jim Robert (question owner): If you place the above code into a file called my_debug.py for the sake of this example.", "Then place that file in your python path, and you can insert the following lines anywhere in your code to jump into a debugger (as long as you execute from a shell):"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "edit by Jim Robert (question owner)", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "my_debug.py", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n import my_debug\nmy_debug.db()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["So roughly a year on from the OP's question, PyDev has this capability built in.", "I am not sure when this feature was introduced, but all I know is I've spent the last ~2hrs Googling... configuring iPython and whatever (which was looking like it would have done the job), but only to realise Eclipse/PyDev has what I want ootb."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As soon as you hit a breakpoint in debug mode, the console is right there ready and waiting!", "I only didn't notice this as there is no prompt or blinking cursor; I had wrongly assumed it was a standard, output-only, console... but it's not.", "It even has code-completion."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Great stuff, see http://pydev.org/manual_adv_debug_console.html for more details."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://pydev.org/manual_adv_debug_console.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pydev.org/manual_adv_debug_console.html"}]}], [{"text": ["I've long been using this code in my sitecustomize.py to start a debugger on an exception.", "This can also be triggered by Ctrl+C.", "It works beautifully in the shell, don't know about eclipse. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sitecustomize.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\n\ndef info(exception_type, value, tb):\n   if hasattr(sys, 'ps1') or not sys.stderr.isatty() or not sys.stdin.isatty() or not sys.stdout.isatty() or type==SyntaxError:\n      # we are in interactive mode or we don't have a tty-like\n      # device, so we call the default hook\n      sys.__excepthook__(exception_type, value, tb)\n   else:\n      import traceback\n      import pdb\n\n\n      if exception_type != KeyboardInterrupt:\n          try:\n              import growlnotify\n              growlnotify.growlNotify(\"Script crashed\", sticky = False)\n          except ImportError:\n              pass\n\n      # we are NOT in interactive mode, print the exception...\n      traceback.print_exception(exception_type, value, tb)\n      print\n      # ...then start the debugger in post-mortem mode.\n      pdb.pm()\n\nsys.excepthook = info\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here's the source and more discussion on StackOverflow."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "source", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/65287/"}, {"href": "http://stackoverflow.com/questions/242485/starting-python-debugger-automatically-on-error", "text": "more discussion on StackOverflow", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["You can jump into an interactive session using code.InteractiveConsole as described here; however I don't know how to trigger this from Eclipse."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "code.InteractiveConsole", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://code.activestate.com/recipes/355319/", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["A solution might be to intercept Ctrl+C to jump into this interactive console (using the signal module: signal.signal(signal.SIGINT, my_handler)), but it would probably change the execution context and you probably don't want this."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "signal", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/signal.html"}, {"text": "signal.signal(signal.SIGINT, my_handler)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Not truely an answer to your question, but just a pointer to iPython.", "Just in case you aren't aware of it.", "I use it side-by-side with eclipse/pydev for just such things."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Of relevence is this info on embedding iPython into your own app.", "This provides the ability to do what you are looking for if you are willing to do it outside of eclipse/pydev."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "iPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/doc/manual/html/interactive/reference.html#embedding"}]}], [{"text": ["If you are already running in debug mode you can set an additional breakpoint if the program execution is currently paused (e.g.", "because you are already at a breakpoint).", "I just tried it out now with the latest Pydev - it works just fine. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you are running normally (i.e.", "not in debug mode) all breakpoints will be ignored.", "No changes to breakpoints will alter the way a non-debug run works."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]