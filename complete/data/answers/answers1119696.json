[[{"text": ["Why not use Jython?", "The only downside I can immediately think of is if your library uses CPython native extensions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Jython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.jython.org/"}]}, {"text": ["EDIT: If you can use Jython now but think you may have problems with a later version of the library, I suggest you try to isolate the library from your app (e.g.", "some sort of adapter interface).", "Go with the simplest thing that works for the moment, then consider JNI/CPython/etc if and when you ever need to.", "There's little to be gained by going the (painful) JNI route unless you really have to."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "now", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Have you considered running Jython on the Java VM?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Jython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.jython.org/"}]}], [{"text": ["If you can get your Python code to work in Jython, then you should be able to use that to call it from Java:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://jython.sourceforge.net/cgi-bin/faqw.py?req=show&amp;file=faq06.001.htp"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}]}], [{"text": ["You could use a messaging service like ActiveMQ.", "It has both Python and Java support.", "This way, you can leave the complicated JNI or C bindings as they are and deal solely with what I consider a simple interface.", "Moreover, when the library gets updated, you don't need to change much, if anything."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ActiveMQ", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://activemq.apache.org/"}, {"text": "Python", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://activemq.apache.org/python.html"}]}], [{"text": ["I've investigated a similar setup with JNI.", "Maybe this will help if haven't seen it yet:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://wiki.cacr.caltech.edu/danse/index.php/Communication_between_Java_and_Python"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://wiki.cacr.caltech.edu/danse/index.php/Communication_between_Java_and_Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.cacr.caltech.edu/danse/index.php/Communication_between_Java_and_Python"}]}, {"text": ["http://jpe.sourceforge.net/ "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://jpe.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jpe.sourceforge.net/"}]}], [{"text": ["Frankly most ways to somehow run Python directly from within JVM don't work.", "They are either not-quite-compatible (new release of your third party library can use python 2.6 features and will not work with Jython 2.5) or hacky (it will break with cryptic JVM stacktrace not really leading to solution)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "most ways to somehow run Python directly from within JVM don't work", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["My preferred way to integrate the two would use RPC.", "XML RPC is not a bad choice here, if you have moderate amounts of data.", "It is pretty well supported &mdash; Python has it in its standard library.", "Java libraries are also easy to find.", "Now depending on your setup either Java or Python part would be a server accepting connection from other language."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "My preferred way to integrate the two would use RPC", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "XML RPC", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/XML-RPC"}]}, {"text": ["A less popular but worth considering alternative way to do RPCs is Google protobuffers, which have 2/3 of support for nice rpc.", "You just need to provide your transport layer.", "Not that much work and the convenience of writing is reasonable."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "nice rpc", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/apis/protocolbuffers/docs/reference/java-generated.html#service"}]}, {"text": ["Another option is to write a C wrapper around that pieces of Python functionality that you need to expose to Java and use it via JVM native plugins.", "You can ease the pain by going with SWIG  SWIG."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "SWIG", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.swig.org/"}]}, {"text": ["Essentially in your case it works like that: "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["This solution is fairly complex, a bit of an overkill in most cases.", "Still it is worth doing if you (for some reason) cannot afford RPCs.", "RPC still would be my preferred choice, though."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I like very much JNA:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "JNA", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://jna.dev.java.net/"}]}, {"text": ["My 0.02$ :)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]