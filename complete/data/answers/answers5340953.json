[[{"code": "<pre>\n<code>\n mylist = [line.split()[7] for line in myfile]\n</code>\n</pre>\n", "senID": 0}, {"text": ["should work if it's always the 8th column."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If the position of tr is variable, you could do"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "tr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n mylist = []\nfor line in myfile:\n    items = line.split()\n    mylist.append(items[items.index(\"tr\")+1])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can split the lines as before tr and after tr and obtain the first word in the second part."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "before", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "tr", "childNum": 0, "tag": "code", "childList": []}, {"text": "after", "childNum": 0, "tag": "em", "childList": []}, {"text": "tr", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n [ line.split(' tr ')[1].split()[0] for line in file ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["If there is more than one tr, the expression collects the word after the first one.", "Alternatively, this one collects the words after the last tr in a line:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "tr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tr", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n [ line.split(' tr ')[-1].split()[0] for line in file ]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Your question is not quite clear.", "Does this what you are after?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [line.split()[7] for line in open(\"abc.txt\")]\n</code>\n</pre>\n", "senID": 1}, {"text": ["It returns the eighth \"word\" from every line."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If I understand correctly, something like this should do the job (not tested):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n resultArray = []\nfor aString in yourFile:\n    anArray = aString.split()\n    for i in range(0, len(anArray) - 1):  //-1 in case tr is at the end of array\n        if anArray[i] == 'tr':\n            resultArray.append(anArray[i + 1])\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n from operator import itemgetter\n\n# tr value is in the 8th column\ntr = itemgetter(7)\n\nprint map(tr, (line.split() for line in myfile.readlines()))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["One may try the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def filter_words(filename, magic_word):\n    with open(filename) as f:\n        all_words = f.read().strip().split()\n        filtered_words = []\n        i = 0\n        while True:\n            try:\n                i = all_words.index(magic_word, i) + 1\n                filtered_words.append(all_words[i])\n            except IndexError, ValueError:\n                break\n        return filtered_words\n</code>\n</pre>\n", "senID": 1}, {"text": ["This algorithm does not fail in case 'tr' happens to be the last word in the provided text file."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; filter_words('abc.txt', 'tr')\n['vh', 'yh', 'ph', 'oh', 'kh']\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Wouldn't be simpler to use a regex ?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If 'we' , 'rt' , 're' , 'tr' are really constant at their places :"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import re\n\nch = '''\nwe 2 rt 3 re 3 tr vh kn mo\nwe 3 rt 5 re 5 tr yh kn me\nwe 4 rt 6 re 33 tr ph kn m3\nwe 5 rt 9 re 34 tr oh kn me\nwe 6 rt 8 re 32 tr kh kn md'''\n\nprint re.findall('(?&lt;= tr )([^ ]+)',ch)\n</code>\n</pre>\n", "senID": 2}, {"text": ["If not, and then the position being the criterium to determine what to catch:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import re\n\nch = '''\nwe 2 rt 3 re 3 tr vh kn mo\nwe 3 rt 5 re 5 tr yh kn me\nwe 4 rt 6 re 33 tr ph kn m3\nwe 5 rt 9 re 34 tr oh kn me\nwe 6 rt 8 re 32 tr kh kn md'''\n\nprint [ mat.group(1)\n        for mat in re.finditer('^(?:\\w+ \\d+ ){3}\\w+ ([^ ]+) .+',ch,re.M)]\n</code>\n</pre>\n", "senID": 4}]]