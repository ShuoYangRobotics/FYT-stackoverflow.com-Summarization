[[{"text": ["No, the replacement is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n   v\nexcept NameError:\n   v = 'bla bla'\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, wanting to use this construct is a sign of overly complicated code flow.", "Usually, you'd do the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n try:\n   v = complicated()\nexcept ComplicatedError: # complicated failed\n   v = 'fallback value'\n</code>\n</pre>\n", "senID": 3}, {"text": ["and never be unsure whether v is set or not.", "If it's one of many options that can either be set or not, use a dictionary and its get method which allows a default value."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "v", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "get", "tag": "a", "pos": 1, "childList": [{"text": "get", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#dict.get"}, {"text": "get", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I'm surprised no one offered this answer.", "It's not as \"built-in\" as Ruby's ||= but it's basically equivalent and still a one-liner."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n foo = foo if 'foo' in locals() else 'default'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, locals() is just a dictionary, so you can do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n foo = locals().get('foo', 'default')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["No, not knowing which variables are defined is a bug, not a feature in Python. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Use dicts instead:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n d = {}\nd.setdefault('key', 1)\nd['key'] == 1\n\nd['key'] = 2\nd.setdefault('key', 1)\nd['key'] == 2\n</code>\n</pre>\n", "senID": 2}], [{"text": ["No, there is no nonsense like that.", "Something we have not missed in Python for 20 years."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I am not sure I understand the question properly here ...", "Trying to \"read\" the value of an \"undefined\" variable name will trigger a NameError.", "(see here, that Python has \"names\", not variables...)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "NameError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "here, that Python has \"names\"", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#python-has-names"}]}, {"text": ["== EDIT =="], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As pointed out in the comments by delnan, the code below is not robust and will break in numerous situations ..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "As pointed out in the comments by delnan, the code below is not robust and will break in numerous situations ...", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Nevertheless, if your variable \"exists\", but has some sort of dummy value, like None, the following would work :"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; my_possibly_None_value = None\n&gt;&gt;&gt; myval = my_possibly_None_value or 5\n&gt;&gt;&gt; myval\n5\n&gt;&gt;&gt; my_possibly_None_value = 12\n&gt;&gt;&gt; myval = my_possibly_None_value or 5\n&gt;&gt;&gt; myval\n12\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["(see this paragraph about Truth Values)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "this paragraph about Truth Values", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#testing-for-truth-values"}]}], [{"text": ["I usually do this the following way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def set_if_not_exists(obj,attr,value):\n if not hasattr(obj,attr): setattr(obj,attr,value)\n</code>\n</pre>\n", "senID": 1}]]