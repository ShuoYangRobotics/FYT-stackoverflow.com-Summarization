[[{"text": ["Raising exceptions within __init__() is absolutely fine.", "There's no other good way to indicate an error condition within a constructor, and there are many hundreds of examples in the standard library where building an object can raise an exception."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The error class to raise, of course, is up to you.", "ValueError is best if the constructor was passed an invalid parameter."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "ValueError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I don't see any reason that it should be bad form."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["On the contrary, one of the things exceptions are known for doing well, as opposed to returning error codes, is that error codes usually can't be returned by constructors.", "So at least in languages like C++, raising exceptions is the only way to signal errors."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "can't", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["I should think it is the perfect case for the built-in ValueError exception."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ValueError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The standard library says:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f = file(\"notexisting.txt\")\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIOError: [Errno 2] No such file or directory: 'notexisting.txt'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also I don't really see any reason why it should be considered bad form."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I concur with all of the above."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There's really no other way to signal that something went wrong in the initialisation of an object other than raising an exception. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In most programs classes where the state of a class is wholly dependant on the inputs to that class we might expect some kind of ValueError or TypeError to be raised. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Classes with side-effects (e.g.", "one which does networking or graphics) might raise an error in init if (for example) the network device is unavailable or the canvas object cannot be written to.", "This sounds sensible to me because often you want to know about failure conditions as soon as possible. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Exceptions are our friend :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's true that the only proper way to indicate an error in a constructor is raising an exception.", "That is why in C++ and in other object-oriented languages that have been designed with exception safety in mind, the destructor is not called if an exception is thrown in the constructor of an object (meaning that the initialization of the object is incomplete).", "This is often not the case in scripting languages, such as Python.", "For example, the following code throws an AttributeError if socket.connect() fails:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class NetworkInterface:\n    def __init__(self, address)\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.connect(address)\n        self.stream = self.socket.makefile()\n\n    def __del__(self)\n        self.stream.close()\n        self.socket.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["The reason is that the destructor of the incomplete object is called after the connection attempt has failed, before the stream attribute has been initialized.", "You shouldn't avoid throwing exceptions from constructors, I'm just saying that it's difficult to write fully exception safe code in Python.", "Some Python developers avoid using destructors altogether, but that's a matter of another debate."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]