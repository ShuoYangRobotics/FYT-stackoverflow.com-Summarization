[[{"text": ["The easiest way to create a list where all values are the same is multiplying a one-element list by n."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [0] * 4\n[0, 0, 0, 0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["So for your loop:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for i in range(10):\n    print [0] * i\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n zlists = [[0] * i for i in range(10)]\n</code>\n</pre>\n", "senID": 0}, {"text": ["zlists[0] is a list of 0 zeroes, zlists[1] is a list of 1 zero, zlists[2] is a list of 2 zeroes, etc."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "zlists[0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "zlists[1]", "childNum": 0, "tag": "code", "childList": []}, {"text": "zlists[2]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["zeros=[0]*4"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "zeros=[0]*4", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["you can replace 4 in the above example with whatever number you want."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "4", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you want a function which will return an arbitrary number of zeros in a list, try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def make_zeros(number):\n    return [0] * number\n\nlist = make_zeros(10)\n\n# list now contains: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n $ python3\n&gt;&gt;&gt; from itertools import repeat\n&gt;&gt;&gt; list(repeat(0, 7))\n[0, 0, 0, 0, 0, 0, 0]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here is the xrange way:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "xrange", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n list(0 for i in xrange(0,5))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n #add code here to figure out the number of 0's you need, naming the variable n.\nlistofzeros = [0] * n\n</code>\n</pre>\n", "senID": 0}, {"text": ["if you prefer to put it in the function, just drop in that code and add return listofzeros"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "return listofzeros", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Which would look like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def zerolistmaker(n):\n    listofzeros = [0] * n\n    return listofzeros\n</code>\n</pre>\n", "senID": 3}, {"text": ["sample output:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; zerolistmaker(4)\n[0, 0, 0, 0]\n&gt;&gt;&gt; zerolistmaker(5)\n[0, 0, 0, 0, 0]\n&gt;&gt;&gt; zerolistmaker(15)\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 5}]]