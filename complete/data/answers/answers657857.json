[[{"text": ["Would it not be more suitable to return a None instead of False?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I believe the orthodox Python design would be to return None.", "The manual says:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "manual", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#the-standard-type-hierarchy"}]}], [{"text": ["It would be better to return a string AND a boolean (as in the title) instead of returning a string OR a boolean.", "You shouldn't have to figure out what the return value means.", "It should be totally explicit and orthogonal issues should be separated into different variables."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (okay,value) = get_some_input(blah);\nif (okay): print value\n</code>\n</pre>\n", "senID": 1}, {"text": ["I tend not to return tuples a lot, because it feels funny.", "But it's perfectly valid to do so."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Returning \"None\" is a valid solution, already mentioned here."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The convenient thing is to return an empty string in this case."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Besides an empty string in Python will evaluate to False anyway.", "So you could call it like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if Myfunc(s, timeout):\n    print \"success\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["Addition: As pointed out by S.Lott the true Pythonic way is to return None.", "Though I choose to return strings in string related funcs.", "A matter of preference indeed."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Also I assume the caller of Myfunc only cares about getting a string to manipulate on - empty or not.", "If the caller needs to check about timeout issues, etc.. it's better to use exceptions or returning None."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You could return the string if it arrived in time, or raise a suitable exception indicating time out."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Maybe if you return a tuple like (False, None) and (True, test) it would be better, as you can evaluate them separatedly and not add unnecesary complexity."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EDIT: Perhaps the string that appeared on the serial port is \"\" (maybe expected), so returning True can say that it arrived that way."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["To add to Ber's point, you might want to take something else into account.", "If you use an empty string or None, you leave the door open for bugs of the \"dumb\" variety.", "On the other hand, if you raise an exception, you're forcing the execution of whatever operation is running to be aborted."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, consider the following code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n result = MyFunc(s, timeout)\nif result[0] == 'a':\n    do_something()\n</code>\n</pre>\n", "senID": 2}, {"text": ["This will raise an exception if the operation timed out and got either an empty string or None.", "So you'd have to change that to:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n result = MyFunc(s, timeout)\nif result and result[0] == 'a':\n    do_something()\n</code>\n</pre>\n", "senID": 4}, {"text": ["These kinds of changes tend to add up and make your code more difficult to understand."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Of course, I'm sure that your answer to this will be something along the lines of \"I won't do that\" or \"that won't happen\" to which my answer is \"Even if you don't run into it with this function, you will eventually if you make a habit of doing this.", "\"  These kinds of bugs are almost always the result of corner cases that you don't usually think about."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["This is a classic use case for Python generators.", "The yield keyword provides a simple way to iterate over discrete sets without returning the whole thing at once:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "yield", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def MyFunc(s, timeout) :\n    test = get_some_input(timeout)\n    while test.endswith(s)\n        yield test\n        test = get_some_input(timeout)\n\nfor input in MyFunc(s, timeout):\n    print input\n</code>\n</pre>\n", "senID": 1}, {"text": ["The key here is there is no return value to specify the end of input; instead, you simply reach the end of the iterator.", "More information on generators here."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0255/"}]}]]