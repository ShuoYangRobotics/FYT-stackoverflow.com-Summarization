[[{"text": ["In such situations, you normally need to check for ANY iterable, not just lists -- if you're accepting lists OR numbers, rejecting (e.g) a tuple would be weird.", "The one kind of iterable you might want to treat as a \"scalar\" is a string -- in Python 2.", "*, this means str or unicode.", "So, either:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "unicode", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n def isNonStringIterable(x):\n  if isinstance(x, basestring):\n    return False\n  try: iter(x)\n  except: return False\n  else: return True\n</code>\n</pre>\n", "senID": 1}, {"text": ["or, usually much handier:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def makeNonStringIterable(x):\n  if isinstance(x, basestring):\n    return (x,)\n  try: return iter(x)\n  except: return (x,)\n</code>\n</pre>\n", "senID": 3}, {"text": ["where you just go for i in makeNonStringIterable(x): ..."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "for i in makeNonStringIterable(x): ...", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n if isinstance(your_object, list):\n  print(\"your object is a list!\")\n</code>\n</pre>\n", "senID": 0}, {"text": ["This is more Pythonic than checking with type."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Seems faster too:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit('isinstance(x, list)', 'x = [1, 2, 3, 4]')\n0.40161490440368652\n&gt;&gt;&gt; timeit('type(x) is list', 'x = [1, 2, 3, 4]')\n0.46065497398376465\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You don't."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This works only for Python >= 2.6.", "If you're targeting anything below useAlex' solution."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "This works only for Python >= 2.6. If you're targeting anything below useAlex' solution.", "childNum": 1, "tag": "em", "pos": -1, "childList": [{"text": "Alex' solution", "tag": "a"}]}, {"text": "Alex' solution", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1464028/what-is-the-pythonic-way-of-checking-if-an-object-is-a-list/"}]}, {"text": ["Python supports something called Duck Typing.", "You can look for certain functionality using the ABC classes."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Duck Typing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/glossary.html#term-duck-typing"}, {"text": "ABC classes", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3119/"}]}, {"code": "<pre>\n<code>\n import collections\ndef mymethod(myvar):\n    # collections.Sqeuence to check for list capabilities\n    # collections.Iterable to check for iterator capabilities\n    if not isinstance(myvar, collections.Iterable):\n        raise TypeError()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I don't want to be a pest, BUT: Are you sure the query set/object is a good interface?", "Make two functions, like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def fobject(i):\n   # do something\n\ndef fqueryset(q):\n   for obj in q:\n       fobject( obj )\n</code>\n</pre>\n", "senID": 1}, {"text": ["Might not be the pythonic way to discern an int from a list, but seems a far better design to me."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pythonic", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Reason being: Your function should be working on ducks.", "As long as it quacks, whack it.", "Actually picking the duck up, turning it upside down to check the markings on the belly before choosing the right club to whack it is unpythonic.", "Sorry.", "Just don't go there."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Reason being", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "unpythonic", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}], [{"text": ["You can use isinstance to check a variables type:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "isinstance", "tag": "a", "pos": 0, "childList": [{"text": "isinstance", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html?highlight=isinstance#isinstance"}, {"text": "isinstance", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n if isinstance(param, list):\n   # it is a list\n   print len(list)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think the way OP is doing, checking if it supports what he wants, is ok."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Simpler way in this scenario would be to not check for list which can be of many types depending on definition, you may check if input is number, do something on it else try to use it as list if that throws exception bail out."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["e.g you may not want iterate over list but just wanted to append something to it if it is list else add to it"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def add2(o):\n    try:\n        o.append(2)\n    except AttributeError:\n        o += 2\n\nl=[]\nn=1\ns=\"\"\nadd2(l)\nadd2(n)\nadd2(s) # will throw exception, let the user take care of that ;)\n</code>\n</pre>\n", "senID": 3}, {"text": ["So bottom line is answer may vary depending on what you want to do with object"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Just use the type method?", "Or am I misinterpreting the question"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if type(objectname) is list:\n  do something\nelse:\n  do something else :P\n</code>\n</pre>\n", "senID": 1}]]