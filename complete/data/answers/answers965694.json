[[{"text": ["Depends on the predominant intended audience."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If it is programmers who change the file anyway, just use python files like settings.py"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If it is end users then, think about ini files."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["As many have said, there is no \"offical\" way.", "There are, however, many choices.", "There was a talk at PyCon this year about many of the available options."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a talk at PyCon", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://blip.tv/pycon-us-videos-2009-2010-2011/a-configuration-comparison-in-python-2006550"}]}], [{"text": ["I am not sure that there is an 'official' way (it is not mentioned in the Zen of Python :) )- I tend to use the Config Parser module myself and I think that you will find that pretty common.", "I prefer that over the python file approach because you can write back to it and dynamically reload if you want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Just one more option, PyQt.", "Qt has a platform independent way of storing settings with the QSettings class.", "Underneath the hood, on windows it uses the registry and in linux it stores the settings in a hidden conf file.", "QSettings works very well and is pretty seemless."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It depends largely on how complicated your configuration is.", "If you're doing a simple key-value mapping and you want the capability to edit the settings with a text editor, I think ConfigParser is the way to go. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If your settings are complicated and include lists and nested data structures, I'd use XML or JSON and create a configuration editor. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For really complicated  things where the end user isn't expected to change the settings much, or is more trusted, just create a set of Python classes and evaluate a Python script to get the configuration."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Don't know if this can be considered \"official\", but it is in standard library: 14.2.", "ConfigParser \u2014 Configuration file parser."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "14.2. ConfigParser \u2014 Configuration file parser", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/configparser.html"}]}, {"text": ["This is, obviously, not an universal solution, though.", "Just use whatever feels most appropriate to the task, without any necessary complexity (and \u2014 especially \u2014 Turing-completeness!", "Think about automatic or GUI configurators)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["I use a shelf ( http://docs.python.org/library/shelve.html ):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/shelve.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/shelve.html"}]}, {"code": "<pre>\n<code>\n shelf = shelve.open(filename)\nshelf[\"users\"] = [\"David\", \"Abraham\"]\nshelf.sync() # Save\n</code>\n</pre>\n", "senID": 1}], [{"text": ["why would Guido blessed something that is out of his scope?", "No there is nothing particular blessed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It is more of convenience.", "There is no official way per say.", "But using XML files would make sense as they can be manipulated by various other applications/libraries."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]