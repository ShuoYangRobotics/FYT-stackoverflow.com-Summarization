[[{"text": ["At a minimum, quines---programs which produce their own source as their output---are a necessary step in constructing G\u00f6del's proof on incompleteness."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "G\u00f6del's proof on incompleteness", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/G%C3%B6del%27s%5Fincompleteness%5Ftheorems"}]}, {"text": ["Whether this constitutes a practical use is something I offer no comment on."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Quines are useless in a practical sense, but they're a great exercise to help you learn more about a language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's a very concise one in python:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a='a=%r;print a%%a';print a%a\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I've yet to see a practical use for one but I'm sure there's one out there somewhere."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "hr", "senID": 1}, {"text": ["Python Example (found here)"], "childNum": 1, "tag": "h2", "senID": 2, "childList": [{"text": "found here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://miscoranda.com/37"}]}, {"code": "<pre>\n<code>\n print (lambda s:s+`s`+')')(\"print (lambda s:s+`s`+')')(\")\n</code>\n</pre>\n", "senID": 3}, {"tag": "hr", "senID": 4}, {"text": ["C Example (found here)"], "childNum": 1, "tag": "h2", "senID": 5, "childList": [{"text": "found here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Quine%5F%28computing"}]}, {"code": "<pre>\n<code>\n #include &lt;stdio.h&gt;\n\nint main(int argc, char** argv)\n{\n/* This macro B will expand to its argument, followed by a printf\n command that prints the macro invocation as a literal string */\n#define B(x) x; printf(\"  B(\" #x \")\\n\");\n\n/* This macro A will expand to a printf command that prints the\n macro invocation, followed by the macro argument itself. */\n#define A(x) printf(\"  A(\" #x \")\\n\"); x;\n\n/* Now we call B on the text of the program\n up to this point. It will execute the command, and then cause\n itself to be printed. */\n  B(printf(\"#include &lt;stdio.h&gt;\\n\\nint main(int argc, char** argv)\\n{\\n/*\n    This macro B will expand to its argument, followed by a printf\\n\n    command that prints the macro invocation as a literal string\n    */\\n#define B(x) x; printf(\\\"  B(\\\" #x \\\")\\\\n\\\");\\n\\n/* This macro\n    A will expand to a printf command that prints the\\n\n    macro invocation, followed by the macro argument itself. */\\n#define A(x)\n    printf(\\\"  A(\\\" #x \\\")\\\\n\\\"); x;\\n\\n/* Now we call B on the text\n    of the program\\n up to this point. It will execute the command,\n    and then cause\\n itself to be printed. */\\n\"))\n  A(printf(\"/* Lastly, we call A on a command to print the remainder\n    of the program;\\n it will cause itself to be printed, and then\n    execute the command. */\\n}\\n\"))\n/* Lastly, we call A on a command to print the remainder of the program;\n it will cause itself to be printed, and then execute the command. */\n}\n</code>\n</pre>\n", "senID": 6}], [{"text": ["This is my favorite C example"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n char*p=\"char*p=%c%s%c;main(){printf(p,34,p,34);}\";main(){printf(p,34,p,34);}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Two things I learned from it:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["As others explained, quines are programs that reproduce exact copies of themselves."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["With regards to applications, if you think that the DNA encodes logic to interpret itself and reproduce itself - the answer is pretty straightforward, without the concept of quines we wouldn't be here and we would never be able to create artificial (self-reproducing) life. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I can't present any data to say that writing a quine or two has expanded my mind or made me a better programmer.", "But it is fun to do, at least the first couple of times.", "Anyway, you asked about how to write one.", "I can point you to some well written references:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Craig Kaplan has a neat paper which describes how to actually produce quines:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["The Search For Self-Documenting Code"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}]}, {"text": ["You might also find David Madore's \"Quines (self-replicating programs)\" interesting reading."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "\"Quines (self-replicating programs)\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.madore.org/~david/computers/quine.html"}]}, {"text": ["Finally, if you want to see implementations, check out the Quine Page where you can find quines in various languages and other related matter."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Quine Page", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.nyx.net/~gthompso/quine.htm"}]}], [{"text": ["See Reflections on Trusting Trust for an example of a trojan using a quine."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Reflections on Trusting Trust", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cm.bell-labs.com/who/ken/trust.html"}]}], [{"text": ["Here's one in Python (it's ugly; I just wrote it to try it out).", "Didn't even know this was called a quine back then."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def e(s): print s[:42]+s[42:].replace('#','\"'); print 'e(\"\"\"'+s+'\"\"\")'\ne(\"\"\"def e(s): print s[:42]+s[42:].replace('#','\"'); print 'e(###'+s+'###)'\"\"\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Oh, and to answer your other question: Quines are totally useless."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["What are quines used for?", "Programming exercises and viruses."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A virus needs to replicate somehow -- and one way is to make it a quine.", "Let's say that a hypothetical antivirus program would flag any process that read its own binary into memory (to pass it to the intended victim); the way to get around that would to have it output itself."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Bear in mind that a quine in machine code would require no compilation."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Szymon Rusinkiewicz's quine (which was originally written in C) should work."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This is an interesting quine in c++: http://npcomplete.weebly.com/1/post/2010/02/self-reproducing-c-program-quine.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://npcomplete.weebly.com/1/post/2010/02/self-reproducing-c-program-quine.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://npcomplete.weebly.com/1/post/2010/02/self-reproducing-c-program-quine.html"}]}, {"text": ["Quines are for fun.", "They have no practical use as far as I know."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]