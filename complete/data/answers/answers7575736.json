[[{"text": ["One way is this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [48]: ''.join('%5.1f ' % n for n in s)\nOut[48]: ' 12.0  45.0  87.0  34.0  65.0 '\n</code>\n</pre>\n", "senID": 1}, {"text": ["Another way is"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n In [49]: ('%5.1f ' * len(s)) % tuple(s)\nOut[49]: ' 12.0  45.0  87.0  34.0  65.0 '\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This is the fastest way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fid.write(''.join(map(lambda x: '%5.1f'%x , s.tolist())))\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's also worth noting that your method for reading the values in can be made much faster by doing this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; a = '12 45 87 34 65'\n&gt;&gt;&gt; np.fromstring(a, sep=' ')\narray([ 12.,  45.,  87.,  34.,  65.])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["How about casting the doubles to strings first using a list comprehension, then creating the output row."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n double_strs = [\"%5.1f\" % number for number in s]\nfid.write( \" \".join(double_strs) )\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Quick and easy, my friend:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fid.write('%5.1f ' * len(s) % tuple(s))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Shortest I could come up with was:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"%5.1f\"*len(s)%s\n</code>\n</pre>\n", "senID": 1}], [{"text": ["you could do fid.write(' '.join([\"%5.1f\" % c for c in s]))"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "fid.write(' '.join([\"%5.1f\" % c for c in s]))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n fid.write(''.join(map('{:5.1f} '.format, s)))\n</code>\n</pre>\n", "senID": 0}]]