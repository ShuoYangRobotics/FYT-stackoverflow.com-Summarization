[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; [1, 2, 3, 4, 1, 4, 1].count(1)\n3\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you are using Python 2.7 or 3 and you want number of occurrences for each element:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; z = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']\n&gt;&gt;&gt; Counter(z)\nCounter({'blue': 3, 'red': 2, 'yellow': 1})\n</code>\n</pre>\n", "senID": 1}], [{"text": ["list.count(x) returns the number of times x appears in a list"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["see:\nhttp://docs.python.org/tutorial/datastructures.html#more-on-lists"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/tutorial/datastructures.html#more-on-lists", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#more-on-lists"}]}], [{"text": ["I use if x in [] to test for the existence of values, count is meant for another purpose, and for huge lists it's also faster than count.", "It returns True or False:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Edit: Sorry, I misunderstood your question, my bad."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lst = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; 3 in lst\nTrue\n&gt;&gt;&gt; 9 in lst\nFalse\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre class=\"lang-py prettyprint-override\">\n<code>\n # Python &gt;= 2.6 (defaultdict) &amp;&amp; &lt; 2.7 (Counter, OrderedDict)\nfrom collections import defaultdict\ndef count_unsorted_list_items(items):\n    \"\"\"\n    :param items: iterable of hashable items to count\n    :type items: iterable\n\n    :returns: dict of counts like Py2.7 Counter\n    :rtype: dict\n    \"\"\"\n    counts = defaultdict(int)\n    for item in items:\n        counts[item] += 1\n    return dict(counts)\n\n\n# Python &gt;= 2.2 (generators)\ndef count_sorted_list_items(items):\n    \"\"\"\n    :param items: sorted iterable of items to count\n    :type items: sorted iterable\n\n    :returns: generator of (item,count) tuples\n    :rtype: generator\n    \"\"\"\n    if not items:\n        return\n    elif len(items) == 1:\n        yield (items[0], 1)\n        return\n    prev_item = items[0]\n    count = 1\n    for item in items[1:]:\n        if prev_item == item:\n            count += 1\n        else:\n            yield (prev_item, count)\n            count = 1\n            prev_item = item\n    yield (item, count)\n    return\n\n\nimport unittest\nclass TestListCounters(unittest.TestCase):\n    def test_count_unsorted_list_items(self):\n        D = (\n            ([], []),\n            ([2], [(2,1)]),\n            ([2,2], [(2,2)]),\n            ([2,2,2,2,3,3,5,5], [(2,4), (3,2), (5,2)]),\n            )\n        for inp, exp_outp in D:\n            counts = count_unsorted_list_items(inp) \n            print inp, exp_outp, counts\n            self.assertEqual(counts, dict( exp_outp ))\n\n        inp, exp_outp = UNSORTED_WIN = ([2,2,4,2], [(2,3), (4,1)])\n        self.assertEqual(dict( exp_outp ), count_unsorted_list_items(inp) )\n\n\n    def test_count_sorted_list_items(self):\n        D = (\n            ([], []),\n            ([2], [(2,1)]),\n            ([2,2], [(2,2)]),\n            ([2,2,2,2,3,3,5,5], [(2,4), (3,2), (5,2)]),\n            )\n        for inp, exp_outp in D:\n            counts = list( count_sorted_list_items(inp) )\n            print inp, exp_outp, counts\n            self.assertEqual(counts, exp_outp)\n\n        inp, exp_outp = UNSORTED_FAIL = ([2,2,4,2], [(2,3), (4,1)])\n        self.assertEqual(exp_outp, list( count_sorted_list_items(inp) ))\n        # ... [(2,2), (4,1), (2,1)]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Another way to get the number of ocurrences of each item:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict((i,a.count(i)) for i in a)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["To count the number of diverse elements having a common type:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n li = ['A0','c5','A8','A2','A5','c2','A3','A9']\n\nprint sum(1 for el in li if el[0]=='A' and el[1] in '01234')\n</code>\n</pre>\n", "senID": 1}, {"text": ["gives"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["3  , not 6"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "3", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I had this problem today and rolled my own solution before I thought to check SO.", "This:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict((i,a.count(i)) for i in a)\n</code>\n</pre>\n", "senID": 1}, {"text": ["is really, really slow for large lists.", "My solution"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def occurDict(items):\n    d = {}\n    for i in items:\n        if i in d:\n            d[i] = d[i]+1\n        else:\n            d[i] = 1\nreturn d\n</code>\n</pre>\n", "senID": 3}, {"text": ["is actually a bit faster than the Counter solution, at least for Python 2.7."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]