[[{"text": ["This information is available in the sys module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n</code>\n</pre>\n", "senID": 1}, {"text": ["Human readable:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print sys.version\n2.5.2 (r252:60911, Jul 31 2008, 17:28:52) \n[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["For further processing:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sys.version_info\n(2, 5, 2, 'final', 0)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Your best bet is probably something like so: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version_info\n(2, 6, 4, 'final', 0)\n&gt;&gt;&gt; if not sys.version_info[:2] == (2, 6):\n...    print \"Error, I need python 2.6\"\n... else:\n...    from my_module import twoPointSixCode\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Additionally, you can always wrap your imports in a simple try, which should catch syntax errors.", "And, to @Heikki's point, this code will be compatible with much older versions of python: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; try:\n...     from my_module import twoPointSixCode\n... except Exception: \n...     print \"can't import, probably because your python is too old!\"\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Put something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env/python\nimport sys\nif sys.version_info&lt;(2,6,0):\n  sys.stderr.write(\"You need python 2.6 or later to run this script\\n\")\n  exit(1)\n</code>\n</pre>\n", "senID": 1}, {"text": ["at the top of your script."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I like sys.hexversion for stuff like this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sys.hexversion", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["http://docs.python.org/library/sys.html#sys.hexversion"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/sys.html#sys.hexversion", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sys.html#sys.hexversion"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.hexversion\n33883376\n&gt;&gt;&gt; '%x' % sys.hexversion\n'20504f0'\n&gt;&gt;&gt; sys.hexversion &lt; 0x02060000\nTrue\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n import sys\nsys.version.split(' ')[0]\n</code>\n</pre>\n", "senID": 0}, {"text": ["sys.version gives you what you want, just pick the first number :)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Like Seth said, the main script could check sys.version_info (but note that that didn't appear until 2.0, so if you want to support older versions you would need to check another version property of the sys module)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sys.version_info", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["But you still need to take care of not using any Python language features in the file that are not available in older Python versions.", "For example, this is allowed in Python 2.5 and later:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try:\n    pass\nexcept:\n    pass\nfinally:\n    pass\n</code>\n</pre>\n", "senID": 2}, {"text": ["but won't work in older Python versions, because you could only have except OR finally match the try.", "So for compatibility with older Python versions you need to write:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n try:\n    try:\n        pass\n    except:\n        pass\nfinally:\n    pass\n</code>\n</pre>\n", "senID": 4}], [{"text": ["To see a MSDOS script to check the version before running the Python interpreter (to avoid Python version syntax exceptions) See solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python: Best way to check for Python version in program that uses new language features?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python: Best way to check for Python version in program that uses new language features?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/446052/python-best-way-to-check-for-python-version-in-program-that-uses-new-language-fe/7642536#7642536"}]}, {"text": ["and "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["MS script; Python version check prelaunch of Python module\nhttp://pastebin.com/aAuJ91FQ\n(script likely easy to convert to other OS scripts."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://pastebin.com/aAuJ91FQ", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pastebin.com/aAuJ91FQ"}]}]]