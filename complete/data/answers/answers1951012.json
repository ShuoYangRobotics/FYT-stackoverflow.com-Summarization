[[{"text": ["As long as you're inside a function (not at module top level), assigning intermediate results to local barenames has an essentially-negligible cost (at module top level, assigning to the \"local\" barenames implies churning on a dict -- the module's __dict__ -- and is measurably costlier than it would be within a function; the remedy is never to have \"substantial\" code at module top level... always stash substantial code within a function!-)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Python's general philosophy includes \"flat is better than nested\" -- and that includes highly \"nested\" expressions.", "Looking at your original example...:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n junk_block = \"\".join(open(\"foo.txt\",\"rb\").read().split())\n</code>\n</pre>\n", "senID": 2}, {"text": ["presents another important issues: when is that file getting closed?", "In CPython today, you need not worry -- reference counting in practice does ensure timely closure.", "But most other Python implementations (Jython on the JVM, IronPython on .NET, PyPy on all sorts of backends, pynie on Parrot, Unladen Swallow on LLVM if and when it matures per its published roadmap, ...) do not guarantee the use of reference counting -- many garbage collection strategies may be involved, with all sort of other advantages."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Without any guarantee of reference counting (and even in CPython it's always been deemed an implementation artifact, not part of the language semantics!", "), you might be exhausting resources, by executing such \"open but no close\" code in a tight loop -- garbage collection is triggered by scarcity of memory, and does not consider other limited resources such as file descriptors.", "Since 2.6 (and 2.5, with an \"import from the future\"), Python has a great solution via the RAII (\"resource acquisition is initialization\") approach supported by the with statement:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "with", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n with open(\"foo.txt\",\"rb\") as f:\n  junk_block = \"\".join(f.read().split())\n</code>\n</pre>\n", "senID": 5}, {"text": ["is the least-\"unnested\" way that will ensure timely closure of the file across all compliant versions of Python.", "The stronger semantics make it preferable."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Beyond ensuring the correct, and prudent;-), semantics, there's not that much to choose between nested and flattened versions of an expression such as this.", "Given the task \"remove all runs of whitespace from the file's contents\", I would be tempted to benchmark alternative approaches based on re and on the .translate method of strings (the latter, esp.", "in Python 2.", "*, is often the fastest way to delete all characters from a certain set!", "), before settling on the \"split and rejoin\" approach if it proves to be faster -- but that's really a rather different issue;-)."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".translate", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["First of all, there's not really a reason you shouldn't use the first example - it'd quite readable in that it's concise about what it does.", "No reason to break it up since it's just a linear combination of calls."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "shouldn't", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Second, import within a function block is useful if there's a particular library function that you only need within that function - since the scope of an imported symbol is only the block within which it is imported, if you only ever use something once, you can just import it where you need it and not have to worry about name conflicts in other functions.", "This is especially handy with from X import Y statements, since Y won't be qualified by its containing module name and thus might conflict with a similarly named function in a different module being used elsewhere."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "from X import Y", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["from PEP 8 (which is worth reading anyway)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["That line has the same result as this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["junk_block = open(\"foo.txt\",\"rb\").read().replace(' ', '')"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In your example you are splitting the words of the text into a list of words, and then you are joining them back together with no spaces.", "The above example instead uses the str.replace() method."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The differences:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Yours builds a file object into memory, builds a string into memory by reading it, builds a list into memory by splitting the string, builds a new string by joining the list."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Mine builds a file object into memory, builds a string into memory by reading it, builds a new string into memory by replacing spaces."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["You can see a bit less RAM is used in the new variation but more processor is used.", "RAM is more valuable in some cases and so memory waste is frowned upon when it can be avoided."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Most of the memory will be garbage collected immediately but multiple users at the same time will hog RAM."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["If you want to know if your second code fragment is slower, the quick way to find out would be to just use timeit.", "I wouldn't expect there to be that much difference though, since they seem pretty equivalent. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "timeit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/timeit.html"}]}, {"text": ["You should also ask if a performance difference actually matters in the code in question.", "Often readability is of more value than performance."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I can't think of any good reasons for importing a module in a function, but sometimes you just don't know you'll need to do something until you see the problem.", "I'll have to leave it to others to point out a constructive example of that, if it exists."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I think the two codes are readable.", "I (and that's just a question of personal style) will probably use the first, adding a coment line, something like: \"Open the file and convert the data inside into a list\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also, there are times when I use the second, maybe not so separated, but something like"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n f_data = open(\"foo.txt\", \"rb\").read()\nf_data_list = f_data.split()\njunk_block = \"\".join(f_data_list)\n</code>\n</pre>\n", "senID": 2}, {"text": ["But then I'm giving more entity to each operation, which could be important in the flow of the code.", "I think it's important you are confortable and don't think that the code is difficult to understand in the future."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Definitly, the code will not be (at least, much) slower, as the only \"overload\" you're making is to asing the results to values."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]