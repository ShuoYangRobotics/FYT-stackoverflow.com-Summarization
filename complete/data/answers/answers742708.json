[[{"text": ["Depends what you mean by \"function\".", "Something like this could work, though:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import inspect\n\ndef methods(c):\n    return (m for m in (getattr(c, d) for d in dir(c))\n            if inspect.ismethoddescriptor(m) or inspect.ismethod(m))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class C:\n    def f(self): pass\n\n&gt;&gt;&gt; list(methods(C))\n[&lt;unbound method C.f&gt;]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["yes, you can.", "Quick and dirty: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class foo:\n    def one(self):\n        print \"here is one\"\n    def two(self):\n        print \"here is two\"\n    def three(self):\n        print \"here is three\"\n\n\nobj = foo()\nfor entry in dir(obj):\n    print entry, callable(getattr(obj,entry))\n    if callable(getattr(obj,entry)):\n        getattr(obj,entry)()\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want a more refined concept, check the unittest.py module.", "There should be code that executes all methods starting with the string \"test\""], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here is one that uses yield to loop through the functions in the class.   "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def get_functions(mod):\n    for entry in dir(mod):\n        obj=getattr(mod,entry);\n        if hasattr(obj, '__call__') and hasattr(obj,'__func__') :\n            yield obj\n\nclass foo:\n    def one(self):\n        print (\"here is two\")\n        return 1\n    def two(self):\n        print (\"here is two\")\n        return 2\n    def three(self):\n        print (\"here is three\")\n        return 3\n\n\nprint(sum([fun() for fun in get_functions(foo())]))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Since you wrote the class, you already know all the functions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "know", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class ThisIsPeculiar( object ):\n    def aFunction( self, arg1 ):\n        pass\n    def anotherFunction( self, thisArg, thatArg ):\n        pass\n    functionsToCall = [ aFunction, anotherFunction ]\n\n&gt;&gt;&gt; p= ThisIsPeculiar()\n&gt;&gt;&gt; p.functionsToCall\n[&lt;function aFunction at 0x6b830&gt;, &lt;function anotherFunction at 0x6b870&gt;]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try using the inspect module:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "inspect module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/inspect.html"}]}, {"code": "<pre>\n<code>\n import inspect\n\nclass Spam:\n    def eggs(self):\n        print \"eggs\"\n    def ducks(self):\n        print \"ducks\"\n    value = \"value\"\n\nspam = Spam()\nfor name, method in inspect.getmembers(spam, callable):\n    method()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ducks\neggs\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The dirbuiltin will list all attributes of an object, for example:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "dirbuiltin", "tag": "a", "pos": 0, "childList": [{"text": "dir", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#dir"}, {"text": "dir", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class MyClass:\n...     def one(self):\n...         print \"one\"\n...     def two(self):\n...         print \"two\"\n...     def three(self):\n...         print \"three\"\n... \n&gt;&gt;&gt; dir(MyClass)\n['__doc__', '__module__', 'one', 'three', 'two']\n</code>\n</pre>\n", "senID": 1}, {"text": ["It also works on an initialised class.."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; c = MyClass()\n&gt;&gt;&gt; dir(c)\n['__doc__', '__module__', 'one', 'three', 'two']\n</code>\n</pre>\n", "senID": 3}, {"text": ["Methods are just attributes which happen to be callable (via c.attribute() ) - we can use the getattr function to reference that method via a variable.."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "c.attribute()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "getattr", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; myfunc = getattr(c, 'one')\n&gt;&gt;&gt; myfunc\n&lt;bound method MyClass.one of &lt;__main__.MyClass instance at 0x7b0d0&gt;&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["Then we can simply call that variable.."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; myfunc()\none # the output from the c.one() method\n</code>\n</pre>\n", "senID": 7}, {"text": ["Since some attributes are not functions (in the above example, __doc__ and __module__).", "We can us the callable builtin to check if it's a callable method (a function):"], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "__doc__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__module__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "callable builtin", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#callable"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; callable(c.three)\nTrue\n&gt;&gt;&gt; callable(c.__doc__)\nFalse\n</code>\n</pre>\n", "senID": 9}, {"text": ["So to combine all that into a loop:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for cur_method_name in dir(c):\n...     the_attr = getattr(c, cur_method_name)\n...     if callable(the_attr):\n...             the_attr()\n... \none\nthree\ntwo\n</code>\n</pre>\n", "senID": 11}, {"text": ["Remember this will call methods like __init__ again, which probably isn't desired.", "You might want to skip any cur_method_name which start with an underscore"], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "cur_method_name", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]