[[{"text": ["Because they're control flow constructs.", "Specifically:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "if the left argument to ", "tag": "none", "senID": 1}, {"text": "if the left argument to ", "tag": "none", "senID": 2}]}, {"text": ["Thus, it is not simply a matter of being reserved words.", "They don't behave like operators, since operators always evaluate all of their arguments."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You can contrast this with bitwise binary operators which, as the name implies, are operators:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "are", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 1 | (1/0)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: integer division or modulo by zero\n&gt;&gt;&gt; 1 or (1/0)\n1\n</code>\n</pre>\n", "senID": 5}, {"text": ["As you see, the bitwise OR (|) evaluates both its arguments.", "The or keyword, however, doesn't evaluate its right argument at all when the left argument evaluates to True; that's why no ZeroDivisionError is raised in the second statement."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "|", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "ZeroDivisionError", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Source: PEP 335"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 335", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0335/"}]}, {"text": ["PEP 335 talks about adding the ability to have overloadable operators, and discusses this issue a bit. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["They're classifying them as keywords earlier in the document."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It is explained here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.net/power_of_introspection/and_or.html"}]}], [{"text": ["They're keywords, because they're reserved identifiers, not special tokens of symbols."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "keywords", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/lexical_analysis.html#keywords"}]}], [{"text": ["They can't be redefined to support type-specific operations, so they don't fall under the scope of the other operators."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]