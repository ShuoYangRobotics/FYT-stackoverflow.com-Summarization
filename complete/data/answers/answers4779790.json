[[{"text": ["What about using python's builtin str.endswith() method?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "str.endswith()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def end_other(a, b):\n    a_lower = a.lower()\n    b_lower = b.lower()\n    return a_lower.endswith(b_lower) or b_lower.endswith(a_lower)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think this is what you were actually trying to do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def end_other ( a, b ):\n    a = a.lower()\n    b = b.lower()\n    if a == b:\n        return True\n    elif len( a ) &gt; len( b ):\n        return b == a[-len( b ):]\n    else:\n        return a == b[-len( a ):]\n</code>\n</pre>\n", "senID": 1}, {"text": ["You had a couple of mistakes in your solution:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": ["s1[-len(s2)]"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}, {"text": ["s2[-len(s2)]"], "childNum": 0, "tag": "code", "senID": 4, "childList": []}, {"text": "When one of your outer ifs matches a situation, there is no way any other of the outer situations can follow. For example if ", "tag": "none", "senID": 5}, {"text": "When you do that, you can also leave off the last ", "tag": "none", "senID": 6}, {"text": "You also need to change the way you return from within the function. As of now you have a conditional exit within each of your outer if cases. Now if the first if case applies (i.e. ", "tag": "none", "senID": 7}, {"text": ["s1[-len(s1)]==s2[-len(s2)]"], "childNum": 0, "tag": "code", "senID": 8, "childList": []}]}, {"text": ["Anyway, if you didn't need to implement it on your own, you should really use str.endswith instead."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "str.endswith", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Comparison using an empty string will implode.", "And use .endswith() instead."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".endswith()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n def ends_with(str1, str2):\n    str1 = str1.lower()\n    str2 = str2.lower()\n    return str1.endswith(str2) or str2.endswith(str1)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["The problem with your code is comparing just one character from each string.", "You might have wanted to use slicing notation, but you left the colon out of the brackets.", "Your code will give true for \"---ba\" and \"bc\", for example.", "Then, you don't return False when len(s1) != len(s2); however, Python functions always return something, and this defaults to None, so that error might go undetected (as None evaluates as falsy) for some time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def either_endswith_lower(a, b):\n  n = min(len(a), len(b))\n  return a[-n:].lower() == b[-n:].lower()\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is a tutorial you're following, but I'd prefer to drop the lowercasing in the function and have users call func(a.lower(), b.lower()) if that's what they desire."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Indeed, ThiefMaster's answer is the most elegant one."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ThiefMaster", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/298479/thiefmaster"}]}, {"text": ["Now just to fix your code, taking into account poke's remarks:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "poke", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/216074/poke"}]}, {"code": "<pre>\n<code>\n def end_other(a,b):\n    s1=a.lower()    \n    s2=b.lower()   \n    if len(s1)&gt;len(s2):  \n        if s1[-len(s2):]==s2:  \n            return True  \n    elif len(s1)&lt;len(s2):  \n        if s1==s2[-len(s1):]:  \n            return True  \n    else:  \n        return s1 == s2;\n    return False\n</code>\n</pre>\n", "senID": 2}, {"text": ["I just used simple rules to simplify it:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "use ", "tag": "none", "senID": 4}, {"text": ["s[-len(s):]"], "childNum": 0, "tag": "code", "senID": 5, "childList": []}]}]]