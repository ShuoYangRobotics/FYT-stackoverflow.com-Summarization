[[{"text": ["You should look into numpy, it's made for just this sort of thing."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "numpy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}]}], [{"code": "<pre>\nrow_count_of_non_neg = sum(1 for n in row if n >= 0)\n# or:\nrow_count_of_non_neg = sum(n >= 0 for n in row)\n# \"abusing\" True == 1 and False == 0\n</pre>\n", "senID": 0}], [{"text": ["Here's an example of how to easily create an array (matrix) in numpy:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import numpy\n&gt;&gt;&gt; a = numpy.array([[1,2,3],[4,5,6],[7,8,9]])\n</code>\n</pre>\n", "senID": 1}, {"text": ["here is how it is displayed"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n</code>\n</pre>\n", "senID": 3}, {"text": ["and how to get a row or column:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a[0,:]\narray([1, 2, 3])\n&gt;&gt;&gt; a[:,0]\narray([1, 4, 7])\n</code>\n</pre>\n", "senID": 5}, {"text": ["Hope the syntax is clear from the example!", "Numpy is rather powerfull."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["I agree with everyone.", "Use Numpy/Scipy.", "But here are specific answers to your questions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Careful: Example 2 illustrates a common pitfall with Numpy/Scipy.", "As shown in Example 3, the axis property is usually set to 0 to operate along the first dimension of an array, 1 to operate along the second dimension, and so on.", "But some commands like delete actually reverse the order of dimensions as shown in Example 2.", "You know, row major vs. column major."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "axis", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "delete", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["(1) \nI don't think you can use a tuple as an index of python list.", "You may use list of list ( e.g.", "a[i][j]) but it seems that it's not your point.", "You may use a dictionary whose key is tuple. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = { (1,1):1, (2,1):2  ... }\n</code>\n</pre>\n", "senID": 1}, {"text": ["(2) \nIf you don't mind about the performance, "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n map( lambda x: d.remove(x) if x[1] = col_number, d.keys() )\n</code>\n</pre>\n", "senID": 3}, {"text": ["(3)\nYou can also use the filter to do that. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n sum(\nmap( lambda x:x[1], filter(lambda x,y: x[1] == row_num and y &gt; 0, d.items()))\n)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["No, it isn't the case that a list can be indexed by anything but an integer.", "A dictionary, however, is another case.", "A dictionary is a hash table consisting a key-value pairs.", "Keys must be unique and immutable.", "The value can be objects of any type, including integers, tuples, lists, or other dictionaries.", "For your example, tuples can serve as keys, since they are immutable.", "Lists, on the other hand, aren't and, thus, can't be dictionary keys."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some of the capabilities you've asked about could be implemented as a combination of a dictionary and list comprehensions.", "Others would require subclassing the dictionary and adding methods to implement your desired functionality."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]