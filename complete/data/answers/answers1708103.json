[[{"text": ["Peter Norvig's spelling corrector in 21 lines of Python 2.5."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "spelling corrector", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://norvig.com/spell-correct.html"}]}], [{"text": ["Rewrite any small C# app in IronPython, and show them how many lines of code it took you.", "If that's not impressing, I don't know what is."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'm referring to one of your internal apps."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I'd do a quick demo of something trivial (in Python, at least) but cool in IDLE.", "For instance:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; text = # some nice long text, e.g. the Gettysburg Address\n&gt;&gt;&gt; letters = [c.lower() for c in text if c.isalpha()]\n&gt;&gt;&gt; letters\n    ['f', 'o', 'u', 'r', 's', 'c', 'o', 'r', 'e', 'a', 'n', 'd', 's', 'e', 'v', 'e',\n    ...\n&gt;&gt;&gt; freq = {}\n&gt;&gt;&gt; for c in letters:\n        freq[c] = freq.get(c, 0) + 1\n\n&gt;&gt;&gt; freq\n    {'a': 102, 'c': 31, 'b': 14, 'e': 165, 'd': 58, 'g': 28, 'f': 27, 'i': 68, 'h': 80, \n    ...\n&gt;&gt;&gt; for c in sorted(freq.keys(), key=lambda x: freq[x], reverse=True):\n        print c, freq[c]\n\ne 165\nt 126\na 102\n...\n</code>\n</pre>\n", "senID": 1}, {"text": ["This shows off what the basic list and dictionary classes look like, how list comprehensions work, named arguments, lambda expressions, the usefulness of an interactive interpreter, and it accomplishes a fairly complicated task in seven lines of code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edit:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Oh, and I'd then show off how the code works if you set letters using a generator expression:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "letters", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n letters = (c.lower() for c in text if c.isalpha())\n</code>\n</pre>\n", "senID": 5}, {"text": ["...which is to say, exactly the same."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["At the very basic level you could show a string reversal program in C# and Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In C#:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n public static string ReverseString(string s)\n{\n    char[] arr = s.ToCharArray();\n    Array.Reverse(arr);\n    return new string(arr);\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["In Python:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n s[::-1]\n</code>\n</pre>\n", "senID": 4}, {"text": ["I feel that you should demo multiple examples rather than just one.", "Build up from something simple, like the one above, and go to more complex ones."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n import clr\nclr.AddReference('System.Speech')\nclr.AddReference('System.Xml')\n\nfrom System.Speech.Synthesis import SpeechSynthesizer\nfrom System.Net import WebClient\nfrom System.Xml import XmlDocument, XmlTextReader\n\n\ncontent = WebClient().DownloadString(\"http://twitter.com/statuses/public_timeline.xml\")\nxmlDoc = XmlDocument()\nspk = SpeechSynthesizer()\n\nxmlDoc.LoadXml(content)\nstatusesNode = xmlDoc.SelectSingleNode(\"statuses\")\nfor status in statusesNode:\n    s = \"&lt;?xml version=\\\"1.0\\\"?&gt;&lt;speak version=\\\"1.0\\\" xml:lang=\\\"en-US\\\"&gt;&lt;break/&gt;\"\n    s = s + status.SelectSingleNode(\"text\").InnerText + \"&lt;/speak&gt;\"\n    spk.SpeakSsml(s)\n</code>\n</pre>\n", "senID": 0}, {"text": ["A talking Twitter client.", "For more examples\nhttp://www.ironpython.info/index.php/Main_Page"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.ironpython.info/index.php/Main_Page", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ironpython.info/index.php/Main%5FPage"}]}], [{"text": ["Something simple but cool with generators, maybe?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def isprime(n):\n    return all(n%x!=0 for x in range(2, int(n**0.5)+1))\n\ndef containsPrime(start, limit):\n    return any(isPrime(x) for x in xrange(start, limit))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How about a demonstration of duck typing?", "Redirecting StdOut to a gui, for example."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Or some of the exceptionally useful pure python libraries out there (SqlAlchemy springs to mind in my line of work, your mileage may vary)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Some of the short cut bits of syntax would be good as well, for example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Get a quick overview of a large dataset:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n print data[::1000]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Find all the strings that begin with 'a':"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n [s for s in list_of_strings if s.startswith('a')]\n</code>\n</pre>\n", "senID": 6}, {"text": ["Then show them the generator version:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n the_as = (s for s in really_big_list_of_strings if s.startswith('a'))\nthe_as.next()\n</code>\n</pre>\n", "senID": 8}], [{"text": ["I have to agree Geo.", "Show a C# or VB app next to the same app written in IronPython.", "When I've done my IronPython talks, I've had a lot of success morphing C# code into Python.", "It makes for a very dramatic presentation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'm also a big fan of showing off how duck typing makes your code more testable."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Generators, defining an iterator, simple "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://ttsiodras.googlepages.com/yield.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://ttsiodras.googlepages.com/yield.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ttsiodras.googlepages.com/yield.html"}]}], [{"text": ["You could use CherryPy's helloworld example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CherryPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cherrypy.org/"}]}, {"code": "<pre>\n<code>\n import cherrypy\n\nclass HelloWorld(object):\n    def index(self):\n        return \"Hello World!\"\n    index.exposed = True\n\ncherrypy.quickstart(HelloWorld())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How about a prime number generator."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def sieve(x):\n...    if x: return [ x[0] ] + sieve([ y for y in x if y % x[0] &gt; 0 ])\n...    return []\n... \n&gt;&gt;&gt; sieve(range(2,100))\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Show them an example from the IronPython cookbook like this one on DataGridView Custom Formatting.", "It's not terribly flashy, but it is something that everyone will be familiar with because just about everyone has built an app with a gridview (or wants to do so)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "DataGridView Custom Formatting", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ironpython.info/index.php/DataGridView%5FCustom%5FFormatting"}]}, {"text": ["The most important part of your demo will be the code walkthrough where you point out how things are less verbose than C# and more similar to VB."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Make sure to change the example from the cookbook to show some of the batteries included from Python.", "Perhaps use the os module to get a directory listing and populate the grid with filename, size, date created, etc."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "batteries included", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "os", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["The possibility of doing this thanks to IronPython ability to add new members to a type at runtime impressed me"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://ironpython-resource.com/post/2008/08/23/IronPython-Dynamically-creating-objects-and-binding-them-to-a-form.aspx"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://ironpython-resource.com/post/2008/08/23/IronPython-Dynamically-creating-objects-and-binding-them-to-a-form.aspx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ironpython-resource.com/post/2008/08/23/IronPython-Dynamically-creating-objects-and-binding-them-to-a-form.aspx"}]}]]