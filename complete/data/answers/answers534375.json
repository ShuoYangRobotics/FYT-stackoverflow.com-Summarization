[[{"text": ["Python passes by reference."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "passes by reference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.testingreflections.com/node/view/5126"}]}], [{"text": ["Thing is, the whole reference/value concept won't fit into python.", "Python has no \"value\" of a variable.", "Python has only objects and names that refer to objects."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So when you call a function and put a \"name\" inside the parenthesis, like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def func(x): # defines a function that takes an argument\n    ... # do something here\n\nfunc(myname) # calling the function\n</code>\n</pre>\n", "senID": 2}, {"text": ["The actual object that myname is pointing is passed, not the name myname itself.", "Inside the function another name (x) is given to refer to the same object passed. "], "childNum": 6, "tag": "p", "senID": 3, "childList": [{"text": "myname", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "name", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "myname", "childNum": 0, "tag": "code", "childList": []}, {"text": "itself", "childNum": 0, "tag": "strong", "childList": []}, {"text": "another name", "childNum": 0, "tag": "strong", "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can modify the object inside the function if it is mutable, but you can't change what the outside name is pointing to.", "Just the same that happens when you do "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "can't change what the outside name is pointing to", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n anothername = myname\n</code>\n</pre>\n", "senID": 5}, {"text": ["Therefore I can answer your question with:  "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["it is \"pass by value\" but all values are just references to objects."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "it is \"pass by value\" but all values are just references to objects.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["A refernce is passed but if the parameter is an immutable object, modifying it within the method will create a new instance."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's a thread on the subject."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Here's a thread on the subject.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2007-August/453520.html"}]}], [{"text": ["The object is passed.", "Not a copy, but a reference to the underlying object."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I would also recommend looking at the copy module:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "copy", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Python documentation for copy"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python documentation for copy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/copy.html"}]}, {"text": ["It will help you to understand the underlying issues and how to use it to perform your own deep copy."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["By reference:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = [0,1,2,3]\n&gt;&gt;&gt; def foo(x_list):\n    x_list[0] = 1\n\n\n&gt;&gt;&gt; foo(x)\n&gt;&gt;&gt; x\n[1, 1, 2, 3]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["@Harper this will not work when x is a number,string or a tuple."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "@Harper", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/21196/harper-shelby"}]}, {"text": ["To put it in simple words, we can say that in python functions, the parameters passed are references to the objects and these references are passed by value."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]