[[{"code": "<pre>\n<code>\n import os\nimport subprocess\n\nfnull = open(os.devnull, 'w')\nresult = subprocess.call('A', shell = True, stdout = fnull, stderr = fnull)\nfnull.close()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If your search engine lead you to this old question (like me), be aware that using PIPE may lead to deadlocks.", "Indeed, because pipes are buffered, you can write a certain number of bytes in a pipe, even if no one read it.", "However the size of buffer is finite.", "And consequently if your program A has an output larger than the buffer, A will be blocked on writing, while the calling program B awaits the termination of A.", "But not, in this particular case... see comments below."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "deadlocks", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "But not, in this particular case... see comments below.", "childNum": 0, "tag": "strong", "pos": 4, "childList": []}]}, {"text": ["Still, I recommend using Devin Jeanpierre and DNS' solution."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["As the os.system() docs mention, use the subprocess module, and, if you like, set stdout=open(os.devnull, 'w') (and perhaps the same for stderr) when you open the subprocess."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "subprocess", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html"}]}], [{"text": ["If you have Python 2.4, you can use the subprocess module:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the subprocess module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import subprocess\n&gt;&gt;&gt; s = subprocess.Popen(['cowsay', 'hello'], \\\n      stderr=subprocess.STDOUT, stdout=subprocess.PIPE).communicate()[0]\n&gt;&gt;&gt; print s\n _______ \n&lt; hello &gt;\n ------- \n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I know it's late to the game, but why not simply redirect output to /dev/null from within os.system?", "E.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n tgt_file = \"./bogus.txt\"\nos.sytem(\"d2u '%s' &amp;&gt; /dev/null\" % tgt_file)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This seems to work for those occasions when you don't want to deal with subprocess.STDOUT."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n call(command, stderr=subprocess.PIPE, stdout=subprocess.PIPE)\n</code>\n</pre>\n", "senID": 1}, {"text": ["where command is the string of the command + arguments"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you need to just capture STDOUT, doesn't assigning it to a variable do this?", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n megabyte=''\n# Create a 1 MiB string of NULL characters.\nfor i in range(1048576):\n    megabyte += '\\0'\nfh=open('zero.bin','w')\n# Write an 8 GiB file.\nfor i in range(8192):\n    print(i)\n    # Suppress output of 'write()' by assigning to a variable.\n    discard=fh.write(megabyte)\nfh.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["I was creating a large zero-filled file to zero free space on my hard drive and discovered that each call to handle.write(string) spit out the number of bytes written.", "Assigning it to a vairable suppressed that output."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["In Python 3.3 and higher, subprocess supports an option for redirecting to/dev/null.", "To use it, when calling .Popen and friends, specify stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, as keyword arguments."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "subprocess", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "an option for redirecting to/dev/null", "tag": "a", "pos": -1, "childList": [{"text": "/dev/null", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/3.3/library/subprocess.html#subprocess.DEVNULL"}, {"text": "/dev/null", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": ".Popen", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So DNS's answer, rewritten for Python 3, becomes"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import subprocess\nresult = subprocess.call('A', shell=True,\n                         stdout=subprocess.DEVNULL,\n                         stderr=subprocess.DEVNULL)\n</code>\n</pre>\n", "senID": 2}, {"text": ["From the documentation:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]