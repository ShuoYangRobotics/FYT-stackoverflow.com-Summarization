[[{"text": ["You could disable that error in the preferences..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Window &gt; Preferences &gt; Pydev &gt; Editor &gt; Code Analysis &gt; Others\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or refactor the code..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Group(object):\n    def key(self, k):\n        outer_self = self\n        class Subkey(object):\n            def __enter__(self):\n                outer_self._settings.beginGroup(k)\n                return outer_self\n\n            def __exit__(self, type, value, tb):\n                outer_self._settings.endGroup()\n\n         return Subkey()\n</code>\n</pre>\n", "senID": 3}, {"text": ["What else do you expect?", "The error checks are there to help you.", "If you don't think they're legitimate errors, disable them or refactor the code."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["In this case I'd say refactor the code.", "It's more readable, as evidenced by King Radical's answer.", "He didn't understand that s was another self."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["Using Ctrl+1 in a line with an error from PyDev will always bring you a fix which will allow you to ignore the PyDev error in the line.", "In this specific case, it'll allow you to ignore the error by adding #@NoSelf to the end of the line.", "Ctrl+1 is also useful when some unused import is needed and under other situations."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Ctrl+1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "#@NoSelf", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Ctrl+1", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["PyDev is telling you that Python class methods must have the self as the first variable they receive, if they're going to access the class member variables.", "See: http://www.python.org/doc/faq/general/#why-must-self-be-used-explicitly-in-method-definitions-and-calls"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.python.org/doc/faq/general/#why-must-self-be-used-explicitly-in-method-definitions-and-calls", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/faq/general/#why-must-self-be-used-explicitly-in-method-definitions-and-calls"}]}, {"text": ["Edit:  It didn't initially occur to me that you might be using 's' instead of 'self', but in view of the other answers, that may be.", "However, if you're going to do that, you also need to use 's' as your variable in the method, rather than 'self'."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It shouldn't be an error in the first place, as using \"self\" is only a widely-accepted convention.", "It should be a warning at most, in the sense of \"are you sure you're using the class instance as the first argument?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n def __enter__(self):\n</code>\n</pre>\n", "senID": 0}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def __exit__(self, type, value, tb):\n</code>\n</pre>\n", "senID": 2}, {"text": ["Class member methods always need to have their first parameter be self"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["IMO this is a silly warning.", "the name \"self\" is only convention.", "I got the habit of using the name \"_\" to allow the member names to be more obvious,"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "name", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class myClass( object ):\n    def __init__( _, color, shape, weight ):\n        _.color=color\n        _.shape=shape\n        _.weight=weight\n...\n</code>\n</pre>\n", "senID": 1}, {"text": ["and I get this warning all over my library of thousands of lines of code.", "So I'll be switching this warning off.", "Would be nice to be able to specify \"for this project I use '_' by convention\"..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]