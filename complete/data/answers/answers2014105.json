[[{"text": ["Couldn't you do a try except?", "The Pythonic way says It is Easier to Ask for Forgiveness than Permission."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "It is Easier to Ask for Forgiveness than Permission", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Python_syntax_and_semantics#Exceptions"}]}, {"text": ["So:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try:\n    if foo.bar.baz == 42:\n        shiny_happy(...)\nexcept AttributeError:\n    pass #or whatever\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or do it without possibly silencing more exceptions than desired:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n try:\n    baz = foo.bar.baz\nexcept AttributeError:\n    pass # handle error as desired\nelse:\n    if baz == 42:\n        shiny_happy(...)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["PEP 336 - Make None Callable might answer your question.", "The reason for why it was rejected was simply \"It is considered a feature that None raises an error when called."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 336 - Make None Callable", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0336/"}]}], [{"text": ["I'm sorry, but that code is pythonic.", "I think most would agree that \"explicit is better than implicit\" in Python.", "Python is a language that is easy to read compared to most, and people should not defeat that by writing cryptic code.", "Make the meaning very clear."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n foo = Foo()\n...\nif foo.bar is not None and foo.bar.baz == 42:\n    shiny_happy(...)\n</code>\n</pre>\n", "senID": 1}, {"text": ["In this code sample, it is clear that foo.bar is sometimes None on this code path, and that we only run shiny_happy() if it is not None, and .baz == 42.", "Very clear to anyone what is going on here and why.", "The same can not be said for the null pattern, or the try ... except code in one of the answers posted here.", "It's one thing if your language, like Objective-C or javascript enforces a null pattern, but in a language where it is not used at all, it will just create confusion and code that is difficult to read.", "When programming in python, do as the pythonistas do."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The handiness comes at the expense of dumb mistakes not being detected at the earliest possible time, as close to the buggy line of code as possible."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think the handiness of this particular feature would be occasional at best, whereas dumb mistakes happen all the time."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "all the time", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Certainly a SQL-like NULL would be bad for testing, which really banks on propositions being either true or false.", "Consider this code, from unittest.py:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class TestCase:\n    ...\n    def failUnless(self, expr, msg=None):\n        \"\"\"Fail the test unless the expression is true.\"\"\"\n        if not expr: raise self.failureException, msg\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now suppose I have a test that does this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n conn = connect(addr)\nself.failUnless(conn.isOpen())\n</code>\n</pre>\n", "senID": 5}, {"text": ["Suppose connect erroneously returns null.", "If I'm using the \"null pattern\", or the language has it built-in, and conn is null, then conn.isOpen() is null, and not conn.isOpen() is null too, so the assertion passes, even though the connection clearly is not open."], "childNum": 5, "tag": "p", "senID": 6, "childList": [{"text": "connect", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "conn", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "conn.isOpen()", "childNum": 0, "tag": "code", "childList": []}, {"text": "not conn.isOpen()", "childNum": 0, "tag": "code", "childList": []}, {"text": "passes", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["I tend to think NULL is one of SQL's worst features.", "And the fact that null silently passes for an object of any type in other languages is not much better.", "(Tony Hoare called null references \u201cmy billion-dollar mistake\u201d.", ") We need less of that sort of thing, not more."], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "NULL", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "null", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "\u201cmy billion-dollar mistake\u201d", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://lambda-the-ultimate.org/node/3186"}]}], [{"text": ["I don't think it's a good idea.", "Here's why.", "suppose you have"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n foo.getValue()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Suppose getValue() returns a number, or None if not found.", "Now suppose foo was none by accident or a bug.", "As a result, it would return None, and continue, even if there's a bug."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "getValue()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "foo", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In other words, you are no longer able to distinguish if there's no value (returns None) or if there's an error (foo was None to begin with).", "You are altering the return contract of a routine with a fact that is not under control of the routine itself, eventually overwriting its semantics."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "foo", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Here's why I don't think that's a good idea:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n foo = Foo() // now foo is None\n\n// if foo is None, I want to raise an exception because that is an error condition.\n// The normal case is that I expect a foo back whose bar property may or may not be filled in.\n// If it's not filled in, I want to set it myself.\n\nif not foo.bar // Evaluates to true because None.bar is None under your paradigm, I think\n  foo.bar = 42 // Now what?\n</code>\n</pre>\n", "senID": 1}, {"text": ["How would you handle this case?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["While I wholeheartedly agree with other answers here that say that it's a good thing that None raises an exception when asked for a member, this is a little pattern I sometimes use:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n getattr(foo.bar, 'baz', default_value)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Personally I believe throwing an exception is what should happen.", "Lets say for some reason you are writing software for missiles in Python.", "Imagine the atomic bomb and lets say there was a method called explode(timeToExplode) and timeToExplode got passed in as None.", "I think you would be unhappy at the end of the day when you lost the war, because you didn't find this in testing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["As others have said, PEP 336 describes why this is the behavior."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Adding something like Groovy's \"safe navigation operator\" (?.", ") could perhaps make things more elegant in some cases:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "safe navigation operator", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groovy.codehaus.org/Operators#Operators-SafeNavigationOperator%28%3F.%29"}, {"text": "?.", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n foo = Foo()\n\nif foo.bar?.baz == 42:\n    ...\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n foo = Foo()\n...\nif foo.bar is not None and foo.bar.baz == 42:\n   shiny_happy(...)\n</code>\n</pre>\n", "senID": 0}, {"text": ["The above can be cleaned up using the fact that None resolves to False:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if foo.bar and foo.bar.baz == 42:\n    shiny_happy(...)\nelse:\n    not_happy(...)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I am not a python programmer (just starting to learn the language) but this seems like the never-ending discussion on when to return error or throw exception, and the fact is that (of course this is only an opinion) it depends."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Exceptions should be used for exceptional conditions, and as such move the checks for rare situations outside of the main block of code.", "They should not be used when a not-found value is a common condition (think of requesting the left child of a tree, in many cases --all leaves-- it will be null).", "There is yet again a third situation with functions that return sets of values, where you might just want to return a valid empty set to ease the code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I believe that following the above advice, code is much more legible.", "When the situation is rare you do not need to worry about null (an exception will be called) so less used code is moved out of the main block."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["When null is a valid return value, processing it is within the main flow of control, but that is good, as it is a common situation and as such part of the main algorithm (do not follow a null edge in a graph)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In the third case, when requesting values from a function that can possibly return no values, returning an empty set simplifies the code: you can assume that the returned container exists and process all found elements without adding the extra checks in the code."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Then again, that is just an opinion, but being mine I tend to follow it :)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]