[[{"text": ["Python threads are good for concurrent I/O programming.", "Threads are swapped out of the CPU as soon as they block waiting for input from file, network, etc.", "This allows other Python threads to use the CPU while others wait.", "This would allow you to write a multi-threaded web server or web crawler, for example."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "concurrent I/O programming", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["However, Python threads are serialized by the GIL when they enter interpreter core.", "This means that if two threads are crunching numbers, only one can run at any given moment.", "It also means that you can't take advantage of multi-core or multi-processor architectures."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "GIL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Global_Interpreter_Lock"}]}, {"text": ["There are solutions like running multiple Python interpreters concurrently, using a C based threading library.", "This is not for the faint of heart and the benefits might not be worth the trouble.", "Let's hope for an all Python solution in a future release."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The standard implementation of Python (generally known as CPython as it is written in C) uses OS threads, but since there is the Global Interpreter Lock, only one thread at a time is allowed to run Python code.", "But within those limitations, the threading libraries are robust and widely used."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Global Interpreter Lock", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Global_Interpreter_Lock"}]}, {"text": ["If you want to be able to use multiple CPU cores, there are a few options.", "One is to use multiple python interpreters concurrently, as mentioned by others.", "Another option is to use a different implementation of Python that does not use a GIL.", "The two main options are Jython and IronPython."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Jython", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Jython"}, {"href": "http://en.wikipedia.org/wiki/IronPython", "text": "IronPython", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Jython is written in Java, and is now fairly mature, though some incompatibilities remain.", "For example, the web framework Django does not run perfectly yet, but is getting closer all the time.", "Jython is great for thread safety, comes out better in benchmarks and has a cheeky message for those wanting the GIL."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "Django does not run perfectly yet", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://zyasoft.com/pythoneering/2008/01/django-on-jython-minding-gap.html"}, {"text": "great for thread safety", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2001-December/116555.html"}, {"href": "http://blogs.warwick.ac.uk/dwatkins/entry/benchmarking_parallel_python_1_2/", "text": "better in benchmarks", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://cgwalters.livejournal.com/17956.html", "text": "cheeky message for those wanting the GIL", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["IronPython uses the .NET framework and is written in C#.", "Compatibility is reaching the stage where Django can run on IronPython (at least as a demo) and there are guides to using threads in IronPython."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Django can run on IronPython", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.infoq.com/news/2008/03/django-and-ironpython"}, {"href": "http://www.voidspace.org.uk/ironpython/threading.shtml", "text": "guides to using threads in IronPython", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["The GIL (Global Interpreter Lock) might be a problem, but the API is quite OK.", "Try out the excellent processing module, which implements the Threading API for separate processes.", "I am using that right now (albeit on OS X, have yet to do some testing on Windows) and am really impressed.", "The Queue class is really saving my bacon in terms of managing complexity!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "processing", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["EDIT: it seemes the processing module is being included in the standard library as of version 2.6 (import multiprocessing).", "Joy!"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "import multiprocessing", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["As far as I know there are no real bugs, but the performance when threading in cPython is really bad (compared to most other threading implementations, but usually good enough if all most of the threads do is block) due to the GIL (Global Interpreter Lock), so really it is implementation specific rather than language specific.", "Jython, for example, does not suffer from this due to using the Java thread model."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "GIL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/api/threads.html"}]}, {"text": ["See this post on why it is not really feasible to remove the GIL from the cPython implementation, and this for some practical elaboration and workarounds."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.artima.com/weblogs/viewpost.jsp?thread=214235"}, {"href": "http://www.pyzine.com/Issue001/Section_Articles/article_ThreadingGlobalInterpreter.html", "text": "this", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Do a quick google for \"Python GIL\" for more information."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\"Python GIL\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com/search?q=python+gil"}]}], [{"text": ["If you want to code in python and get great threading support, you might want to check out IronPython or Jython.", "Since the python code in IronPython and Jython run on the .NET CLR and Java VM respectively, they enjoy the great threading support built into those libraries.", "In addition to that, IronPython doesn't have the GIL, an issue that prevents CPython threads from taking full advantage of multi-core architectures."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I've used it in several applications and have never had nor heard of threading being anything other than 100% reliable, as long as you know its limits.", "You can't spawn 1000 threads at the same time and expect your program to run properly on Windows, however you can easily write a worker pool and just feed it 1000 operations, and keep everything nice and under control."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]