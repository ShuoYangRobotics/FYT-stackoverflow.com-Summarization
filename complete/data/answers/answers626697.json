[[{"text": ["Maybe the unicodedata module is useful for this task.", "Especially the category() function.", "For existing unicode categories look at unicode.org.", "You can then filter on punctuation characters etc."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "unicodedata module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/unicodedata.html"}, {"text": "category()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "unicode.org", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://unicode.org/Public/UNIDATA/UCD.html#General%5FCategory%5FValues"}]}], [{"text": ["Just convert bytestring (your utf-8) to unicode objects and check if all characters are alphabetic:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s.isalpha()\n</code>\n</pre>\n", "senID": 1}, {"text": ["This method is locale-dependent for bytestrings."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Depending on how you define \"name\", you could go with checking it against this regex:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ^\\w+$\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, this will allow numbers and underscores.", "To rule them out, you can do a second test against:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [\\d_]\n</code>\n</pre>\n", "senID": 3}, {"text": ["and make your check fail on match.", "These two could be combined as follows:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n ^(?:(?![\\d_])\\w)+$\n</code>\n</pre>\n", "senID": 5}, {"text": ["But for regex performance reasons, I would rather do two separate checks."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["From the docs:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "the docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}], [{"text": ["This might be a step towards a solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import unicodedata\nEXCEPTIONS= frozenset(u\"'.\")\nCATEGORIES= frozenset( ('Lu', 'Ll', 'Lt', 'Pd', 'Zs') )\n# O'Rourke, Franklin D. Roosevelt\n\ndef test_unicode_name(unicode_name):\n    return all(\n      uchar in EXCEPTIONS\n        or unicodedata.category(uchar) in CATEGORIES\n      for uchar in unicode_name)\n\n&gt;&gt;&gt; test_unicode_name(u\"Michael O'Rourke\")\nTrue\n&gt;&gt;&gt; test_unicode_name(u\"\u03a7\u03c1\u03ae\u03c3\u03c4\u03bf\u03c2 \u0393\u03b5\u03c9\u03c1\u03b3\u03af\u03bf\u03c5\")\nTrue\n&gt;&gt;&gt; test_unicode_name(u\"Jean-Luc G\u00e9raud\")\nTrue\n</code>\n</pre>\n", "senID": 1}, {"text": ["Add exceptions, and further checks that I possibly missed."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def is_asciibetical(str):\n    try:\n        str.encode('ascii')\n        return True\n    except UnicodeEncodeError:\n        return False\n</code>\n</pre>\n", "senID": 1}, {"text": ["might do what you're looking for."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The letters property of the string module should give you what you want.", "This property is locale-specific, so as long as you know the language of the text being passed to you, you can use setlocale() and validate against those characters."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "letters", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "string", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "setlocale()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["http://docs.python.org/library/string.html#module-string"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/string.html#module-string", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#module-string"}]}, {"text": ["As you point out, though, in a truly \"unicode\" world, there's no way at all to know what characters are \"alphabetical\" unless you know the language.", "If you don't know the language, you could either default to ASCII, or run through the locales for common languages."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]