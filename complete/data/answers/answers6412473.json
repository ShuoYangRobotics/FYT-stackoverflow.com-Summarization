[[{"text": ["If you want to go on like ..., Y, Z, AA, AB ,... you can use itertools.product:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\nimport itertools\n\ndef product_gen(n):\n    for r in itertools.count(1):\n        for i in itertools.product(n, repeat=r):\n            yield \"\".join(i)\n\nmylist=list(range(35))\n\nfor value, label in zip(mylist, product_gen(string.ascii_uppercase)):\n    print(value, label)\n#   value.label = label\n</code>\n</pre>\n", "senID": 1}, {"text": ["Part of output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 23 X\n24 Y\n25 Z\n26 AA\n27 AB\n28 AC\n29 AD\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n import string\n\nmyList = [1, 5, 7, 3]\nlabels = [string.uppercase[x+1] for x in myList]\n# ['C', 'G', 'I', 'E']\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n for i in range(len(myList)):\n    x.label = chr(i+65)\n</code>\n</pre>\n", "senID": 0}, {"text": ["More on the function here."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#chr"}]}], [{"code": "<pre>\n<code>\n import string\nfor i, x in enumerate(myList):\n    x.label = string.uppercase[i]\n</code>\n</pre>\n", "senID": 0}, {"text": ["This will of course fail if len(myList) &gt; 26"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "len(myList) &gt; 26", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n charValue = 65\nfor x in myList:\n  x.label = chr(charValue)\n  charValue++\n</code>\n</pre>\n", "senID": 0}, {"text": ["Be careful if your list is longer than 26 characters"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["First, if myList is a list of integers, then,"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "myList", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for x in myList:\n    x.label = LETTER OF THE ALPHABET\n</code>\n</pre>\n", "senID": 1}, {"text": ["won't work, since int has no attribute label.", "You could loop over myList and store the labels in a list (here: pairs):"], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "label", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "myList", "childNum": 0, "tag": "code", "childList": []}, {"text": "pairs", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import string\n\npairs = []\nfor i, x in enumerate(myList):\n    label = string.letters(i) # will work for i &lt; 52 !!\n    pairs.append( (label, x) )\n\n# pairs is now a list of (label, value) pairs\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you need more than 52 labels, you can use some random string generating function, like this one: "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import random\n\ndef rstring(length=4):\n    return ''.join([ random.choice(string.uppercase) for x in range(length) ])\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Since I like list comprehensions, I'd do it like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [(i, chr(x+65)) for x, i in enumerate([1, 5, 7, 3])]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which results in:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [(1, 'A'), (5, 'B'), (7, 'C'), (3, 'D')]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n import string\n\nfor val in zip(myList, string.uppercase):\n    val[0].label = val[1]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can also use something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from string import uppercase\n\nres = ((x , uppercase[i%26]*(i//26+1)) for i,x in enumerate(inputList))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or you can use something like this - note that this is just an idea how to deal with long lists not the solution:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from string import uppercase\nres = ((x , uppercase[i%26] + uppercase[i/26]) for i,x in enumerate(inputList))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Are you looking for a dictionary, where each of your values are keyed to a letter of the alphabet?", "In that case, you can do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from string import lowercase as letters\n\nvalues = [1, 23, 3544, 23]\nmydict = {}\nfor (let, val) in zip(letters, values):\n    mydict[let] = val\n\n&lt;&lt;&lt; mydict == {'a': 1, 'c': 23, 'b': 3544, 'd': 23}\n\n&lt;&lt;&lt; mydict['a'] == 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["You'll have to add additional logic if you need to handle lists longer than the alphabet."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]