[[{"text": ["You can use an iterator."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; it = iter(['a','list','with','a','lot','of','strings','in','it'])\n&gt;&gt;&gt; [i if i != 'a' else i+' '+next(it) for i in it]\n['a list', 'with', 'a lot', 'of', 'strings', 'in', 'it']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This works in-place:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sentence = ['a','list','with','a','lot','of','strings','in','it']\n\nidx=0\nseen=False\nfor word in sentence:\n    if word=='a':\n        seen=True\n        continue\n    sentence[idx]='a '+word if seen else word\n    seen=False\n    idx+=1    \nsentence=sentence[:idx]\nprint(sentence)\n</code>\n</pre>\n", "senID": 1}, {"text": ["yields"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['a list', 'with', 'a lot', 'of', 'strings', 'in', 'it']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can use while cycle and increase index w manually."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "w", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["A naive approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nwords = ['a','list','with','a','lot','of','strings','in','it']\n\ncondensed, skip = [], False\n\nfor i, word in enumerate(words):\n    if skip:\n        skip = False\n        continue\n    if word == 'a':\n        condensed.append(word + \" \" + words[i + 1])\n        skip = True\n    else:\n        condensed.append(word)\n\nprint condensed\n# =&gt; ['a list', 'with', 'a lot', 'of', 'strings', 'in', 'it']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Somthing like this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\ndef joiner(s, token):\n    i = 0\n    while i &lt; len(s):\n        if s[i] == token:\n            yield s[i] + ' ' + s[i+1]\n            i=i+2\n        else:\n            yield s[i]\n            i=i+1\n\nsentence = ['a','list','with','a','lot','of','strings','in','it']\n\nfor i in joiner(sentence, 'a'):\n    print i\n</code>\n</pre>\n", "senID": 1}, {"text": ["outputs:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a list\nwith\na lot\nof\nstrings\nin\nit\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n def grouped(sentence):\n    have_a = False\n    for word in sentence:\n        if have_a:\n            yield 'a ' + word\n            have_a = False\n        elif word == 'a': have_a = True\n        else: yield word\n\nsentence = list(grouped(sentence))\n</code>\n</pre>\n", "senID": 0}]]