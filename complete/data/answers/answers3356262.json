[[{"text": ["It would be a bad practice to always assume that the arguments that your function needs are available on the command-line - what if this code was invoked in some other manner?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A function should declare input parameters for the data it needs to access."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["At the very least, passing the necessary argument into f() rather than accessing sys.argv helps make f() much more re-usable."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "f()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sys.argv", "childNum": 0, "tag": "code", "childList": []}, {"text": "f()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["It is bad form to access sys.argv from anywhere other than your main routine since it couples that code to the command line, making it difficult to use from other Python scripts."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sys.argv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You should pass the file name into f().", "This way, if you want to use that function later (as a module function, perhaps), you aren't bound to use sys.argv."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "f()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sys.argv", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You could always make a wrapper to f() (if you are lazy or want to keep your 'main' code clean), that does something like:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "f()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def wrapperf():\n    return f(sys.argv[1])\n</code>\n</pre>\n", "senID": 2}, {"text": ["You could define wrapperf inside of main() if you want to keep it away from other scripts importing your module."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "wrapperf", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "main()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Yes, it would be bad practice to access sys.argv from f."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would  suggest passing the neccessary arguments into f. But since f won't neccessarily be called from main...maybe use a global variable?", "I normally try to avoid them, but in your case... >.>"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I guess it would help to know a little more info about the way the program is setup.", ":P"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I would recommend setting the file name once, from sys.argv[1] if it exists, or demand user input if it doesn't.", "Then store it as part of an object, or a global variable.", "That will prevent having to pass what is essentially a static string all over the place, once it is set."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You definitely don't want to parse sys.argv in some low-level function.", "To avoid lots of parameter-passing, you could provide a helper-function called by main() that simply stores the filename into a static variable for later use by f()."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "main()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "f()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I would generally advise against it, but BaseHttpServer in python actually uses sys.argv[1] to determine which port to listen on.", "Convenience maybe."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]