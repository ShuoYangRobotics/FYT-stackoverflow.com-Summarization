[[{"text": ["My suggestion would be the inline function from the instant module, though that only works if you can do everything you need to in a single c function.", "You just pass it a c function and it compiles a c extension at runtime."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "inline", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "instant", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n from instant import inline\n    sieve_code = \"\"\"\n    PyObject* prime_list(int max) {\n        PyObject *list = PyList_New(0);\n        int *numbers, *end, *n; \n        numbers = (int *) calloc(sizeof(int), max);\n        end = numbers + max;\n\n        numbers[2] = 2;\n        for (int i = 3; i &lt; max; i += 2) { numbers[i] = i; }\n        for (int i = 3; i &lt; sqrt(max); i++) {\n            if (numbers[i] != 0) {\n                for (int j = i + i; j &lt; max; j += i) { numbers[j] = 0; }\n            }\n        }\n        for (n = numbers; n &lt; end; n++) { \n            if (*n != 0) { PyList_Append(list, PyInt_FromLong(*n)); }\n        }\n        free(numbers);\n        return list;\n    }\n    \"\"\"\n    sieve = inline(sieve_code)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The easiest way to deal with this is probably to just use popen(3).", "The popen function is available in both Python and C and will connect a program of either language with the other using a pipe."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "popen(3)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "popen", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import subprocess\n&gt;&gt;&gt; print args\n['/bin/vikings', '-input', 'eggs.txt', '-output', 'spam spam.txt', '-cmd', \"echo '$MONEY'\"]\n&gt;&gt;&gt; p = subprocess.Popen(args)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Once you have the pipe, you should probably send yaml or json through it, though I've never tried to read either in C.  If it's really a simple stream, just parse it yourself.", "If you like XML, I suppose that's available as well."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["There a number of ways to do this. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["All of the above let you do your work in the same process."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If that's not a constraint, like Digital Ross suggested, you can simply spawn a subprocess and hand over arguments (either as command line ones or via it's standard input) and have an external process do the work for you. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Digital Ross", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/4743748/how-do-i-connect-a-python-and-a-c-program/4743783#4743783"}]}], [{"text": ["Indeed this question does not have much to do with C++.", "Having said that, you can try SWIG - it's multi-platform and allows functional calls from Python to C/C++."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SWIG", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.swig.org/"}]}], [{"text": ["How many bits per second are you getting across this RS-232 cable?", "Have you test results that show that Python won't do the crunchy bits fast enough?", "If the C program is yet to be written, consider the possibility of writing the computation-intensive side of things in Python, with easy fallback to Cython in the event that Python isn't fast enough."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Cython", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://cython.org/"}]}], [{"text": ["I would use a standard form of IPC like a socket."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A good start would be Beej's Guide."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Beej's Guide.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://beej.us/guide/bgnet/"}]}, {"text": ["Also, don't tag the question with c++ if you are specifically using c. c and c++ are different languages."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'd use ctypes: http://python.net/crew/theller/ctypes/tutorial.html\nIt allows you to call c (and c++) code from python."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://python.net/crew/theller/ctypes/tutorial.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.net/crew/theller/ctypes/tutorial.html"}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}]]