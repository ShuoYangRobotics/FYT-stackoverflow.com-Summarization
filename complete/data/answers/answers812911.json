[[{"text": ["not sure about the mac version, but wxPython has a built in way to redirect errors to a window (which will unfortunately close when your application crashes, but it's useful for catching errors that silently fail) or to a log file (only updated after your application closes):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n app = wx.App(redirect=True) \napp = wx.App(redirect=True,filename=\"mylogfile.txt\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["these will work regardless of how you start your application.", "See here for more"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://xoomer.virgilio.it/infinity77/wxPython/Widgets/wx.App.html#methods"}]}], [{"text": ["Here's a way to have the error be reported in the GUI instead of the console, via a MessageDialog.", "You can use the show_error() method anywhere an exception is caught, here I just have it being caught at the top-most level.", "You can change it so that the app continues running after the error occurs, if the error can be handled."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import wx\nimport sys\nimport traceback\n\ndef show_error():\n    message = ''.join(traceback.format_exception(*sys.exc_info()))\n    dialog = wx.MessageDialog(None, message, 'Error!', wx.OK|wx.ICON_ERROR)\n    dialog.ShowModal()\n\nclass Frame(wx.Frame):\n    def __init__(self):\n        super(Frame, self).__init__(None, -1, 'My Frame')\n    def cause_error(self):\n        raise Exception, 'This is a test.'\n\ndef main():\n    app = wx.PySimpleApp()\n    try:\n        frame = Frame()\n        frame.Show()\n        frame.cause_error()\n        app.MainLoop()\n    except:\n        show_error()\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Launch from a Python IDE with a debugger."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Running in WingIDE immediatelly pinpoints the two problems:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "WingIDE", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.wingware.com/products"}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["ID_ABOUT"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}, {"text": ["OnAboutBox"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}]}], [{"text": ["Start the application from the command line (I believe its called 'Terminal' in OS X) as noted below instead of double clicking on the python file.", "This way when the application crashes you'll see the stack trace.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Alternatively, you can redirect output to a log file:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n f=open('app.log','w')\nimport sys\nsys.stdout=f\nsys.stderr=f\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Add print statements to your program, so you can tell how it's starting up and where it ends up dying (by running from the terminal as you already said you do)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You could also run your project from a Python IDE, such as Eric IDE.", "You get the added bonus of being able to trace, watch variables and tons of other cool stuff!", ":-)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Eric IDE", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://eric-ide.python-projects.org/"}]}]]