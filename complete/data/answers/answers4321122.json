[[{"text": ["Both of those situations can lead to valid, complete constructs, so continuing on them would complicate the parser."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print 3.\n  1415926\n\nprint 'Hello, world'\n  .lower()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Python allow line continuations within parentheticals (), so you might try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (data.where(lambda d: e.name == 'Obama').\n    count())\n</code>\n</pre>\n", "senID": 1}, {"text": ["I know that's not answering your question (\"why?", "\"), but maybe it's helpful."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Not sure about after periods, but in your example the newline before a period leads to the first line being a valid statement on its own.", "Then Python would have to look ahead to the second line to know whether the first line was a statement or not."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One of the goals when defining the language syntax was to be able to parse it without having ambiguities that require looking ahead like that."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It'd get annoying in the interactive interpreter if you had to press enter twice after every single line just so Python knew you'd finished your statement and weren't going to put a .foo() after it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": ".foo()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Use a '\\' at the end.", "(looks ugly though)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data.where(lambda d: e.name == 'Obama').\\\n    count()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In the cases where a period could be leading in to a method call, it will always(?", ") be a syntax error for it to just occur at the end of a line by itself.", "So it would be unambiguous to read it as starting a continuation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, Python generally speaking doesn't continue a line just because there's an incomplete binary operator there.", "For instance, the following is not valid:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 2 + \n    4\n</code>\n</pre>\n", "senID": 2}, {"text": ["In the second example, the first line is valid by itself and it would be really inconsistent for Python to look for a following line \"just in case\" there is one."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I would just break after the opening paren of the method call."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["{Because python uses line breaks to end statements, not depending on braces or semi-colins;}"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]