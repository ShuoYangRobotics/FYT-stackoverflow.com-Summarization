[[{"text": ["Often a bad practice."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Separate tests for each separate layer of the architecture are good."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Consolidated tests tend to obscure architectural issues."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["However, only test the public functions.", "Not every function."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["And don't invest a lot of time optimizing your testing.", "Redundancy in the tests doesn't hurt as much as it does in the working application.", "If things change and one test works, but another test breaks, perhaps then you can refactor your tests.", "Not before."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You're testing at too low a level of detail.", "Test the outermost, public, visible interface.", "The part that's supposed to be unchanging."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["And"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Yes, significant architectural change means significant testing change."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["And"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["The test code is how you prove things work.", "It is almost as important as the application itself.", "Yes, it's more code.", "Yes, you must manage it."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "prove", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["There are unit tests.", "With mocks."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["There are integration tests, which test the whole thing."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Don't confuse them.  "], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["You can use unit test tools to do integration tests, but they're different things."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["And you need to do both."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Yes.", "That's exactly how it works.", "In the long run, some people find this more effective than straining their brains trying to do all the design up front.", "Some people don't like this and want to do all the design up front; you're free to do a lot of design up front if you want to."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["I've found that refactoring is a good thing and design up front is too hard.", "Maybe it's because I've been coding for almost 40 years and my brain is wearing out."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["All the true geniuses find that testing slows them down."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["The rest of us can't be sure our code works until we have a complete set of tests that prove that it works."], "childNum": 2, "tag": "p", "senID": 18, "childList": [{"text": "sure", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "prove", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["If you don't need proof that your code works, you don't need testing."], "childNum": 1, "tag": "p", "senID": 19, "childList": [{"text": "proof", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["As a preliminary comment, TDD takes practice.", "When I look back at the tests I wrote when I began TDD, I see lots of issues, just like when I look at code I wrote a few year ago.", "Keep doing it, and just like you begin to recognize good code from bad, the same things will happen with your tests - with patience.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["\"The list\" can be rather informal (that's the case in Beck's book) but when you move into making the items into tests, try to write the statements in a \"[When something happens to this] then [this condition should be true on that]\" format.", "This will force you to think more about what it is you are verifying, how you would verify it and translates directly into tests - or if it doesn't it should give you a clue about which piece of functionality is missing.", "Think use case / scenario.", "For instance \"server should start up\" is unclear, because nobody is initiating an action."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["First, yes, tests are more code, and requires maintenance - and writing maintainable tests takes practice.", "I agree with S. Lott, if you need to change your tests a lot, you are probably testing \"too deep\".", "Ideally you want to test at the level of the public interface, which is not likely to change, and not at the level of the implementation detail, which could evolve.", "But part of the exercise is about coming up with a design, so you should expect to get some of it wrong and have to move/refactor your tests as well."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Not totally sure about that one.", "From the sound of it, using a mock was the right idea: take one side, mock the other one, and check that each side works, assuming the other one is implemented properly.", "Testing the whole system together is integration testing, which you also want to do, but is typically not part of the TDD process."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You should spend a lot of time refactoring while doing TDD.", "On the other hand, when you fake it, it's temporary, and your immediate next step should be to un-fake it.", "Typically you shouldn't have multiple tests passing because you faked it - you should be focusing on one piece at a time, and work on refactoring it ASAP."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Again, it takes practice, and you should get faster over time.", "Also, sometimes TDD is more fruitful than others, I find that in some situations, when I know exactly the code I want to write, it's just faster to write a good part of the code, and then write tests.", "Besides Beck, one book I enjoyed is The Art of Unit Testing, by Roy Osherove.", "It's not a TDD book, and it is .Net-oriented, but you might want to give it a look anyways: a good part is about how to write maintainable tests, tests quality and related questions.", "I found that the book resonated with my experience after having written tests and sometimes struggled to do it right...", "So my advice is, don't throw the towel too fast, and give it some time.", "You might also want to give it a shot on something easier - testing server communication related things doesn't sound like the easiest project to start with!"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}], [{"text": ["I start by picking anything I might check.", "In your example, you chose \"server starts\". "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nServer starts\n</pre>\n", "senID": 1}, {"text": ["Now I look for any simpler test I might want to write.", "Something with less variation, and fewer moving parts.", "I might consider \"configured server correctly\", for example."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\nConfigured server correctly\nServer starts\n</pre>\n", "senID": 3}, {"text": ["Really, though, \"server starts\" depends on \"configured server correctly\", so I make that link clear."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\nConfigured server correctly\nServer starts if configured correctly\n</pre>\n", "senID": 5}, {"text": ["Now I look for variations.", "I ask, \"What could go wrong?", "\" I could configure the server incorrectly.", "How many different ways that matter?", "Each of those makes a test.", "How might the server not start even though I configured it correctly?", "Each case of that makes a test."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["When I change behavior, I find it reasonable to change the tests, and even to change them first!", "If I have to change tests that don't directly check the behavior I'm in the process of changing, though, that's a sign that my tests depend on too many different behaviors.", "Those are integration tests, which I think are a scam.", "(Google \"Integration tests are a scam\")"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["If I build a client, a server, and a channel, then I try to check each in isolation.", "I start with the client, and when I test-drive it, I decide how the server and channel need to behave.", "Then I implement the channel and server each to match the behavior I need.", "When checking the client, I stub the channel; when checking the server, I mock the channel; when checking the channel, I stub and mock both client and server.", "I hope this makes sense to you, since I have to make some serious assumptions about the nature of this client, server, and channel."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["If you let your \"fake it\" code get very messy before cleaning it up, then you might have spent too long faking it.", "That said, I find that even though I end up cleaning up more code with TDD, the overall rhythm feels much better.", "This comes from practice."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["I have to say that unless your client and server are very, very simple, you need more than 3 or 4 tests each to check them thoroughly.", "I will guess that your tests check (or at least execute) a number of different behaviors at once, and that might account for the effort it took you to write them."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Also, don't measure the learning curve.", "My first real TDD experience consisted of re-writing 3 months' worth of work in 9, 14-hour days.", "I had 125 tests that took 12 minutes to run.", "I had no idea what I was doing, and it felt slow, but it felt steady, and the results were fantastic.", "I essentially re-wrote in 3 weeks what originally took 3 months to get wrong.", "If I wrote it now, I could probably do it in 3-5 days.", "The difference?", "My test suite would have 500 tests that take 1-2 seconds to run.", "That came with practice."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["As a novice programmer, the thing I found tricky about test-driven development was the idea that testing should come first."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To the novice, that\u2019s not actually true.", "Design comes first.", "(Interfaces, objects and classes, methods, whatever\u2019s appropriate to your language.", ") Then you write your tests to that.", "Then you write the code that actually does stuff."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It\u2019s been a while since I looked at the book, but Beck seems to write as if the design of the code just sort of happens unconsciously in your head.", "For experienced programmers, that may be true, but for noobs like me, nuh-uh."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I found the first few chapters of Code Complete really useful for thinking about design.", "They emphasise the fact that your design may well change, even once you\u2019re down at the nitty gritty level of implementation.", "When that happens, you may well have to re-write your tests, because they were based on the same assumptions as your design."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Code Complete", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cc2e.com/"}]}, {"text": ["Coding is hard.", "Let\u2019s go shopping."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["For point one, see a question I asked a while back relating to your first point."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1174906/tdd-one-test-at-a-time-or-make-a-batch"}]}, {"text": ["Rather than handle the other points in turn, I'll offer some global advice.", "Practice.", "It took me a good while and a few 'dodgy' projects (personal though) to actual get TDD.", "Just Google for much more compelling reasons on why TDD is so good."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Despite the tests driving the design of my code, I still get a whiteboard and scribble out some design.", "From this, at least you have some idea of what you are meant to be doing.", "Then I produce the list of tests per fixture that I think I need.", "Once you start working, more features and tests get added to the list."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["One thing that stood out from your question is the act of rewriting your tests again.", "This sounds like you are carrying out behavioural tests, rather than state.", "In other words, the tests sound too closely tied to your code.", "Thus, a simple change that doesn't effect the output will break some tests.", "Unit testing (at least good unit testing) too, is a skill to master. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I recommend the Google Testing Blog quite heavily because some of the articles on there made my testing for TDD projects much better. "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Google Testing Blog", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://googletesting.blogspot.com/"}]}], [{"text": ["The the named pipes were put behind the right interface, changing how that interface is implemented (from named pipes to sockets to another sockets library) should only impact tests for the component that implements that interface.", "So cutting things up more/differently would have helped...  That interface the sockets are behind will likely evolve to."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I started doing TDD maybe 6 months ago?", "I am still learning myself.", "I can say over time my tests and code have gotten much better, so keep it up.", "I really recommend the book XUnit Design Patterns as well."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Items in TDD TODO lists are finer grained than that, they aim at testing one behavior of one method only, for instance:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "test successful client connection", "tag": "none", "senID": 1}, {"text": "test client connection error type 1", "tag": "none", "senID": 2}, {"text": "test client connection error type 2", "tag": "none", "senID": 3}, {"text": "test successful client communication", "tag": "none", "senID": 4}, {"text": "test client communication fails when not connected", "tag": "none", "senID": 5}]}, {"text": ["You could build a list of tests (positive and negative) for every example you gave.", "Moreover, when unit testing you do not establish any connection between the server and the client.", "You just invoke methods in isolation, ...", "This answers question 3. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["If the unit test tests behavior and not implementation, then they do not have to be  rewritten.", "If unit test code really creates a named pipe to communicate with production code and, then obviously the tests have to be modified when switching from pipe to socket.", "Unit tests shall stay away from external resources such as filesystems, networks, databases because they are slow, can be unavailable ... see these Unit Testing rules. "], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Unit Testing rules", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.artima.com/weblogs/viewpost.jsp?thread=126923"}]}, {"text": ["This implies the lowest level function are not unit tested, they will be tested with integration tests, where the whole system is tested end-to-end. "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]]