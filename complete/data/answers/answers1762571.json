[[{"code": "<pre>\n<code>\n for fruit in thelist[1:]:\n    ...\n</code>\n</pre>\n", "senID": 0}, {"text": ["this of course suppose you know at which index to start.", "but you can find the index easily:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for fruit in thelist[thelist.index('orange'):]:\n    ...\n</code>\n</pre>\n", "senID": 2}], [{"text": ["using python's elegant slices"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "slices", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation#answer-509295"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for fruit in thelist[1:]:\n&gt;&gt;&gt;    print fruit\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As mentioned by Paul McGuire, slicing a list creates a copy in memory of the result.", "If you have a list with 500,000 elements then doing l[2:] is going to create a new 499,998 element list."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "l[2:]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["To avoid this, use itertools.islice:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "itertools.islice", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; thelist = ['a', 'b', 'c']\n\n&gt;&gt;&gt; import itertools\n\n&gt;&gt;&gt; for i in itertools.islice(thelist, 1, None):\n...     print i\n...\nb\nc\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n for fruit in thelist [1:]:\n</code>\n</pre>\n", "senID": 0}, {"text": ["will start at the second element in the list."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n for fruit in thelist[1:]:\n    print fruit\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Slices make copies of lists, so if there are many items, or if you don't want to separately search the list for the starting index, an iterator will let you search, and then continue from there:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "many", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; thelist = ['apple','orange','banana','grapes']\n&gt;&gt;&gt; fruit_iter = iter(thelist)\n&gt;&gt;&gt; target_value = 'orange'\n&gt;&gt;&gt; while fruit_iter.next() != target_value: pass\n...\n&gt;&gt;&gt; # at this point, fruit_iter points to the entry after target_value\n&gt;&gt;&gt; print ','.join(fruit_iter)\nbanana,grapes\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}]]