[[{"text": ["You can use a tuple for a lot of things where you would use a struct in C (something like x,y coordinates or RGB colors for example)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For everything else you can use dictionary, or a utility class like this one:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this one", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/52308/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Bunch:\n...     def __init__(self, **kwds):\n...         self.__dict__.update(kwds)\n...\n&gt;&gt;&gt; mystruct = Bunch(field1=value1, field2=value2)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I think the \"definitive\" discussion is here, in the published version of the Python Cookbook."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://books.google.com/books?id=Q0s6Vgb98CQC&lpg=PT212&dq=Python%20Cookbook%20%22Collecting%20a%20Bunch%20of%20Named%20Items%22&hl=en&pg=PT213#v=onepage&q&f=false"}]}], [{"text": ["For a \"whole\" solution, see Raymond Hettinger's named tuple recipe.", "It's nice for your basic example, but also covers a bunch of edge cases you might run into later as well.", "Your fragment above would be written as:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "named tuple", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/500261/"}]}, {"code": "<pre>\n<code>\n from collections import namedtuple\nMyStruct = namedtuple(\"MyStruct\", \"field1 field2 field3\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Named tuple is part of collections module in standard library since Python 2.6."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "collections module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html"}]}], [{"text": ["How about a dictionary?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n myStruct = {'field1': 'some val', 'field2': 'some val'}\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then you can use this to manipulate values:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n print myStruct['field1']\nmyStruct['field2'] = 'some other values'\n</code>\n</pre>\n", "senID": 4}, {"text": ["And the values don't have to be strings.", "They can be pretty much any other object."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You can access the fields of a class using a dictionary because the fields of a class, its methods and all its properties are stored internally using dicts (at least in Cython)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["...Which leads us to your second comment.", "Believing that Python dicts are \"heavy\" is an extremely non-pythonistic concept.", "And reading such comments kills my Python Zen.", "That's not good."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You see, when you declare a class you are actually creating a pretty complex wrapper around a dictionary - so, if anything, you are adding more overhead than by using a simple dictionary.", "An overhead which, by the way, is meaningless in any case.", "If you are working on performance critical applications, use C or something."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can also pass the init parameters to the instance variables by position"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Abstract struct class       \nclass Struct:\n    def __init__ (self, *argv, **argd):\n        if len(argd):\n            # Update by dictionary\n            self.__dict__.update (argd)\n        else:\n            # Update by position\n            attrs = filter (lambda x: x[0:2] != \"__\", dir(self))\n            for n in range(len(argv)):\n                setattr(self, attrs[n], argv[n])\n\n# Specific class\nclass Point3dStruct (Struct):\n    x = 0\n    y = 0\n    z = 0\n\npt1 = Point3dStruct()\npt1.x = 10\n\nprint pt1.x\nprint \"-\"*10\n\npt2 = Point3dStruct(5, 6)\n\nprint pt2.x, pt2.y\nprint \"-\"*10\n\npt3 = Point3dStruct (x=1, y=2, z=3)\nprint pt3.x, pt3.y, pt3.z\nprint \"-\"*10\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Perhaps you are looking for Structs without constructors:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Sample:\n  name = ''\n  average = 0.0\n  values = None # list cannot be initialized here!\n\n\ns1 = Sample()\ns1.name = \"sample 1\"\ns1.values = []\ns1.values.append(1)\ns1.values.append(2)\ns1.values.append(3)\n\ns2 = Sample()\ns2.name = \"sample 2\"\ns2.values = []\ns2.values.append(4)\n\nfor v in s1.values:   # prints 1,2,3 --&gt; OK.\n  print v\nprint \"***\"\nfor v in s2.values:   # prints 4 --&gt; OK.\n  print v\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Yep, there was just a question about that."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a question about that", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/35808/how-do-i-get-a-double-underscore-to-show-up-in-markdown"}]}, {"text": ["As far as your question goes, why exactly do you want to use a Struct in Python?", "What are you trying to do?", "Is there a more 'Pythonic' way of doing it?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edited to add:\nIt looks like Mark posted a more 'Pythonic' approach while I was writing this"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'm having the same problem recently.", "I've found this thing, hope it helps =)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/ctypes.html?highlight=ctypes#structures-and-unions"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/ctypes.html?highlight=ctypes#structures-and-unions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/ctypes.html?highlight=ctypes#structures-and-unions"}]}], [{"text": ["I thought that python directories didn't have a specified or fixed order.", "So the line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["attrs = filter (lambda x: x[0:2] != \"__\", dir(self))"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["only works by luck and might break at any time.", "The class variables\nmight be returned in a different order then the order they were\ndeclared in and/or different orders at different times."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]