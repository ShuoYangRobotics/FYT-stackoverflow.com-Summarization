[[{"text": ["One good way is:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "good", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from itertools import izip\nit = iter([1, 2, 3, 4])\nfor x, y in izip(it, it):\n    print x, y\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 1 2\n3 4\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Building on Nick D's answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import izip\n&gt;&gt;&gt; t = [1,2,3,4,5,6,7,8,9,10,11,12]\n&gt;&gt;&gt; for a, b in izip(*[iter(t)]*2):\n...     print a, b\n...\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n&gt;&gt;&gt; for a, b, c in izip(*[iter(t)]*3):\n...     print a, b, c\n...\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n&gt;&gt;&gt; for a, b, c, d in izip(*[iter(t)]*4):\n...     print a, b, c, d\n...\n1 2 3 4\n5 6 7 8\n9 10 11 12\n&gt;&gt;&gt; for a, b, c, d, e, f in izip(*[iter(t)]*6):\n...     print a, b, c, d, e, f\n...\n1 2 3 4 5 6\n7 8 9 10 11 12\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Not quite as readable, but it shows a compact way to get any size tuple you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Kind of easy with python's slicing operator:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l2 = zip(l1[0::2], l1[1::2])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Take a look at grouper function from itertools docs."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html"}]}, {"code": "<pre>\n<code>\n from itertools import izip_longest\ndef grouper(n, iterable, fillvalue=None):\n    \"grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx\"\n    args = [iter(iterable)] * n\n    return izip_longest(fillvalue=fillvalue, *args)\n</code>\n</pre>\n", "senID": 1}, {"text": ["In your case use it like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n l1 = [1,2,3,4,5,6,7,8]\nfor (x, y) in grouper(2, l1):\n    draw_thing(x, y)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l2 = []\nfor y in range(0, len(l1), 2):\n    l2.append((l1[y], l1[y+1]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["I'm not doing any checks to make sure l1 has an even number of entries and such-like."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Not the most elegant solution"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l2 = [(l1[i], l1[i+1]) for i in xrange(0,len(l1),2)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["No need to construct a new list.", "You can just iterate over the list by steps of 2 instead of 1.", "I use len(L) - 1 as the upper-bound so you ensure that you don't try to access past the end of the list."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "len(L) - 1", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n for i in range(0, len(L) - 1, 2):\n    draw_thing(L[i], L[i + 1])\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n list = [1,2,3,4,5,6]\n it = iter(list)\n newlist = [(x, y) for x, y in zip(it, it)]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["What's wrong with just accessing the correct index and incrementing?", "for (int i=0;i&lt;myList.Length;i++)\n{\n  draw_thing(myList[i],myList[++i]);\n}"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for (int i=0;i&lt;myList.Length;i++)\n{\n  draw_thing(myList[i],myList[++i]);\n}", "childNum": 0, "tag": "pre", "pos": 1, "childList": []}]}, {"text": ["Oops - sorry, in C# mode.", "I'm sure you get the idea."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]