[[{"text": ["Use Python Standard Library's linecache module:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "linecache", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/linecache.html?highlight=linecache#module-linecache"}]}, {"code": "<pre>\n<code>\n line = linecache.getline(thefilename, 33)\n</code>\n</pre>\n", "senID": 1}, {"text": ["should do exactly what you want.", "You don't even need to open the file -- linecache does it all for you!"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "linecache", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You could just read all the lines and index the line your after."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n line = open('filename').readlines()[33]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A solution that will not read more of the file than necessary is\n    from itertools import islice"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n line_number = 34\n\nwith open(filename) as f:\n    # Adjust index since Python/islice indexes from 0 and the first \n    # line of a file is line 1\n    line = next(islice(f, line_number - 1, line_number))\n</code>\n</pre>\n", "senID": 1}, {"text": ["A very straightforward solution is"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n line_number = 34\n\nwith open(filename) as f:\n    f.readlines()[line_number - 1]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["There's two ways:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Solution 1"], "childNum": 0, "tag": "h2", "senID": 1, "childList": []}, {"text": ["Benefit: You only keep, in memory, the specific line you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for i in xrange(34):\n    line = f.readline();\n# when you get here, line will be the 34th line, or None, if there wasn't\n# enough lines in the file\n</code>\n</pre>\n", "senID": 4}, {"text": ["Solution 2"], "childNum": 0, "tag": "h2", "senID": 5, "childList": []}, {"text": ["Benefit: Much less code\nDownside: Reads the entire file into memory\nProblem: Will crash if less than 34 elements are present in the list, needs error handling"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"code": "<pre>\n<code>\n line = f.readlines()[33]\n</code>\n</pre>\n", "senID": 7}], [{"code": "<pre>\n<code>\n for linenum,line in enumerate(open(\"file\")):\n    if linenum+1==34: print line.rstrip()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This code will open the file, read the line and print it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Open and read file into buffer\nf = open(file,\"r\")\nlines = f.readlines()\n\n# If we need to read line 33, and assign it to some variable\nx = lines[33]\nprint(x)\n</code>\n</pre>\n", "senID": 1}]]