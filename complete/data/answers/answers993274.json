[[{"text": ["Because Python 2.x uses integer division for integers, so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 1/2 == 0\n</code>\n</pre>\n", "senID": 1}, {"text": ["evaluates to True."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You want to do:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n 1.0/2\n</code>\n</pre>\n", "senID": 4}, {"text": ["or do a"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import division\n</code>\n</pre>\n", "senID": 6}], [{"text": ["First,  1/2 is integer division.", "Until Python 3.0."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "1/2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 1/2\n0\n&gt;&gt;&gt; 1.0/2.0\n0.5\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Second, use math.atan2 for this kind of thing."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "math.atan2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; math.atan2(1,2)\n0.46364760900080609\n&gt;&gt;&gt; math.atan(.5)\n0.46364760900080609\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n atan(float(1)/2)\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you do: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n atan(float(1/2))\n</code>\n</pre>\n", "senID": 2}, {"text": ["in Python 2.x, but without:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import division\n</code>\n</pre>\n", "senID": 4}, {"text": ["the 1/2 is evaluated first as 0, then 0 is converted to a float, then atan(0.0) is called.", "This changes in Python 3, which uses float division by default even for integers.", "The short portable solution is what I first gave."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n float(1)/float(2)\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you divide int / int you get an int, so float(0) still gives you 0.0"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["From the standard:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The / (division) and // (floor division) operators yield the quotient of their arguments.", "The numeric arguments are first converted to a common type.", "Plain or long integer division yields an integer of the same type; the result is that of mathematical division with the \u2018floor\u2019 function applied to the result."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["As these answers are implying, 1/2 doesn't return what you are expecting.", "It returns zero, because 1 and 2 are integers (integer division causes numbers to round down).", "Python 3 changes this behavior, by the way."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Your coercing doesn't stand a chance because the answer is already zero before you hand it to float."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Try 1./2"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["In Python, dividing integers yields an integer -- 0 in this case."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There are two possible solutions.", "One is to force them into floats: 1/2.", "(note the trailing dot) or float(1)/2."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Another is to use \"from future import division\" at the top of your code, and use the behavior you need."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "future", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["python -c 'from future import division;import math;print math.atan(1/2)' yields the correct 0.463647609001"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "future", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["If 1/2 == 0 then float(1/2) will be 0.0.", "If you coerce it to float after it's been truncated it'll still be truncated."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There are a few options:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Add the following import: ", "tag": "none", "senID": 2}, {"text": "Coerce either of the operands to a float. eg: ", "tag": "none", "senID": 3}, {"text": "If you're actually using constants then just add a decimal point instead of using float(), eg: ", "tag": "none", "senID": 4}]}]]