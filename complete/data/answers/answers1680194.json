[[{"text": ["Assuming you've got perl support built in to vim, you can do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n command! ReverseWord call ReverseWord()\nfunction! ReverseWord()\nperl &lt;&lt; EOF\n    $curword = VIM::Eval('expand(\"&lt;cword&gt;\")');\n    $reversed = reverse($curword);\n    VIM::Msg(\"$curword =&gt; $reversed\");\n    VIM::DoCommand(\"norm lbcw$reversed\");\nEOF\nendfun\n</code>\n</pre>\n", "senID": 1}, {"text": ["And potentially bind that to a keystroke like so:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n nmap ,r :ReverseWord&lt;CR&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I don't have Python supported on my VIM, but it looks like it would be pretty simple to do it with Python.", "This article seems like a good explanation of how to use Python in VIM and I'm guessing you'd do something like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "This article", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.builderau.com.au/program/python/soa/Extending-Vim-with-Python/0,2000064084,339283181,00.htm"}]}, {"code": "<pre>\n<code>\n :python 'word'[::-1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["The article indicates that the result will appear in the status bar, which would be non-optimal if you were trying to replace the string in a document, but if you just want to check that your girlfriend is properly reversing strings in her head, this should be fine."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["if your version of VIM supports it you can do vw\\is or viw\\is (put your cursor at the first letter of the word before typing the command)... but I have had a lot of compatibility issues with that.", "Not sure what has to be compiled in or turned on but this only works sometimes."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "if", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "vw\\is", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "viw\\is", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["\\is is:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\\is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n :&lt;C-U&gt;let old_reg_a=@a&lt;CR&gt;\n\\ :let old_reg=@\"&lt;CR&gt;\n\\ gv\"ay :let @a=substitute(@a, '.\\(.*\\)\\@=', '\\=@a[strlen(submatch(1))]', 'g')&lt;CR&gt; \n\\ gvc&lt;C-R&gt;a&lt;Esc&gt; :let @a=old_reg_a&lt;CR&gt; \n\\ :let @\"=old_reg&lt;CR&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["Didn't remember where it came from but a google search come this article on vim.wikia.com.", "Which shows the same thing so I guess that's it."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "vim.wikia.com", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://vim.wikia.com/wiki/Reverse%5Fletters"}]}], [{"text": ["If you have some time on your hands, you can bubble your way there by iteratively transposing characters (xp)..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "xp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["This Tip might help: http://vim.wikia.com/wiki/Reverse%5Fletters"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://vim.wikia.com/wiki/Reverse%5Fletters", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://vim.wikia.com/wiki/Reverse%5Fletters"}]}], [{"text": ["Here is another (pythonic) solution based on how this works:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n :echo join(reverse(split('hello', '.\\zs')), '')\nolleh\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to replace all words in the buffer,"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n :%s/\\(\\&lt;.\\{-}\\&gt;\\)/\\=join(reverse(split(submatch(1), '.\\zs')), '')/g\n</code>\n</pre>\n", "senID": 3}, {"text": ["This works by first creating a list of characters in the word, which is reversed and joined back to form the word.", "The substitute command finds each word and then passes the word to the expressions and uses the result as replacement."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Well you could use python itself to reverse the line through the filter command.", "Say the text you had written was: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Python\n</code>\n</pre>\n", "senID": 1}, {"text": ["You could reverse it by issuing."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n :1 ! python -c \"print raw_input()[::-1]\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["And your text will be replaced to become:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n nohtyP\n</code>\n</pre>\n", "senID": 5}, {"text": ["The \"1\" in the command tells vi to send line 1 to the python statement which we are executing: \"print raw_input()[::-1]\".", "So if you wanted some other line reversed, you would send that line number as argument.", "The python statement then reverses the line of input.  "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["This VIM Cookbook includes some techniques for manipulating words, including reversing them.", "The example can probably be relatively easily extended to reverse characters within a word. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "VIM Cookbook", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.oualline.com/vim-cook.html"}]}]]