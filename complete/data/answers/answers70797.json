[[{"text": ["To read user input you can try the cmd module for easily creating a mini-command line interpreter (with help texts and autocompletion) and raw_input for less fancy stuff (just reading a line of text from the user)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "the cmd module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-cmd.html"}, {"href": "http://docs.python.org/lib/built-in-funcs.html", "text": "raw_input", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Command line inputs are in sys.argv.", "Try this in your script:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import sys\nprint sys.argv\n</code>\n</pre>\n", "senID": 2}, {"text": ["There are two modules for parsing command line options: optparse and getopt.", "If you just want to input files to your script, behold the power of fileinput."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "optparse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-optparse.html"}, {"text": "getopt", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-getopt.html"}, {"text": "fileinput", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-fileinput.html"}]}, {"text": ["The Python library reference is your friend."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Python library reference is your friend", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/lib.html"}]}], [{"code": "<pre>\n<code>\n var = raw_input(\"Enter something: \")\nprint \"you entered \", var\n</code>\n</pre>\n", "senID": 0}], [{"text": ["The best way to process command line arguments is the optparsemodule."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "optparsemodule.", "tag": "a", "pos": 0, "childList": [{"text": "optparse", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/lib/module-optparse.html"}, {"text": "optparse", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Use raw_input() to get user input.", "If you import the readline module your users will have line editing and history."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "raw_input()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "readline module", "tag": "a", "pos": 1, "childList": [{"text": "readline module", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/lib/module-readline.html"}, {"text": "readline module", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Careful not to use the input function , unless you know what you're doing .", "Unlink raw_input , input will accept any python expression , so it's kinda like eval"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "input", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "raw_input", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "input", "childNum": 0, "tag": "code", "childList": []}, {"text": "eval", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["As of Python 3.2 2.7, there is now argparse for processing command line arguments."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "3.2", "childNum": 0, "tag": "del", "pos": 0, "childList": []}, {"href": "http://docs.python.org/dev/library/argparse.html", "text": "argparse", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Use 'raw_input' for input from a console/terminal."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["if you just want a command line argument like a file name or something e.g. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $ python my_prog.py file_name.txt\n</code>\n</pre>\n", "senID": 2}, {"text": ["then you can use sys.argv..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import sys\nprint sys.argv\n</code>\n</pre>\n", "senID": 4}, {"text": ["sys.argv is a list where 0 is the program name, so in the above example sys.argv[1] would be \"file_name.txt\""], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["If you want to have full on command line options use the optparse module."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Pev"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["raw_input is no longer available in Python 3.x.", "But raw_input was renamed input, so the same functionality exists."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "raw_input", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "raw_input", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "input", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n input_var = raw_input(\"Enter something: \")\nprint (\"you entered \" + input_var)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Documentation of the change"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Documentation of the change", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/py3k/whatsnew/3.0.html#builtins"}]}], [{"text": ["For user input in python 3.x."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n input_variable = input (\"Enter your name: \")\nprint (\"your name is\" + input_variable)\n</code>\n</pre>\n", "senID": 1}]]