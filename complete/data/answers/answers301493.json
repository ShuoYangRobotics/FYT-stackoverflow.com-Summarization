[[{"text": ["A dynamic language rules for this.", "Why?", "The mappings are easy to code and change.", "You don't have to recompile and rebuild."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Indeed, with a little cleverness, you can have your \"XML XPATH to a Tag -> DB table-field\" mappings as disjoint blocks of Python code that your main application imports."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The block of Python code is your configuration file.", "It's not an .ini file or a .properties file that describes a configuration.", "It is the configuration."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "is", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": ".ini", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ".properties", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "is", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}]}, {"text": ["We use Python, xml.etree and the SQLAlchemy (to separate the SQL out of your programs) for this because we're up and running with very little effort and a great deal of flexibility."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "hr", "senID": 4}, {"text": ["source.py"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "source.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n \"\"\"A particular XML parser.  Formats change, so sometimes this changes, too.\"\"\"\n\nimport xml.etree.ElementTree as xml\n\nclass SSXML_Source( object ):\n    ns0= \"urn:schemas-microsoft-com:office:spreadsheet\"\n    ns1= \"urn:schemas-microsoft-com:office:excel\"\n    def __init__( self, aFileName, *sheets ):\n        \"\"\"Initialize a XML source.\n        XXX - Create better sheet filtering here, in the constructor.\n        @param aFileName: the file name.\n        \"\"\"\n        super( SSXML_Source, self ).__init__( aFileName )\n        self.log= logging.getLogger( \"source.PCIX_XLS\" )\n        self.dom= etree.parse( aFileName ).getroot()\n    def sheets( self ):\n        for wb in self.dom.getiterator(\"{%s}Workbook\" % ( self.ns0, ) ):\n            for ws in wb.getiterator( \"{%s}Worksheet\" % ( self.ns0, ) ):\n                yield ws\n    def rows( self ):\n        for s in self.sheets():\n            print s.attrib[\"{%s}Name\" % ( self.ns0, ) ]\n            for t in s.getiterator( \"{%s}Table\" % ( self.ns0, ) ):\n                for r in t.getiterator( \"{%s}Row\" % ( self.ns0, ) ):\n                    # The XML may not be really useful.\n                    # In some cases, you may have to convert to something useful\n                    yield r\n</code>\n</pre>\n", "senID": 6}, {"text": ["model.py"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "model.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n \"\"\"This is your target object.  \nIt's part of the problem domain; it rarely changes.\n\"\"\"\nclass MyTargetObject( object ):\n    def __init__( self ):\n        self.someAttr= \"\"\n        self.anotherAttr= \"\"\n        self.this= 0\n        self.that= 3.14159\n    def aMethod( self ):\n        \"\"\"etc.\"\"\"\n        pass\n</code>\n</pre>\n", "senID": 8}, {"text": ["builder_today.py One of many mapping configurations"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "builder_today.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n \"\"\"One of many builders.  This changes all the time to fit\nspecific needs and situations.  The goal is to keep this\nshort and to-the-point so that it has the mapping and nothing\nbut the mapping.\n\"\"\"\n\nimport model\n\nclass MyTargetBuilder( object ):\n    def makeFromXML( self, element ):\n        result= model.MyTargetObject()\n        result.someAttr= element.findtext( \"Some\" )\n        result.anotherAttr= element.findtext( \"Another\" )\n        result.this= int( element.findtext( \"This\" ) )\n        result.that= float( element.findtext( \"that\" ) )\n        return result\n</code>\n</pre>\n", "senID": 10}, {"text": ["loader.py"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "loader.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n \"\"\"An application that maps from XML to the domain object\nusing a configurable \"builder\".\n\"\"\"\nimport model\nimport source\nimport builder_1\nimport builder_2\nimport builder_today\n\n# Configure this:  pick a builder is appropriate for the data:\nb= builder_today.MyTargetBuilder()\n\ns= source.SSXML_Source( sys.argv[1] )\nfor r in s.rows():\n    data= b.makeFromXML( r )\n    # ... persist data with a DB save or file write\n</code>\n</pre>\n", "senID": 12}, {"tag": "hr", "senID": 13}, {"text": ["To make changes, you can correct a builder or create a new builder.", "You adjust the loader source to identify which builder will be used.", "You can, without too much trouble, make the selection of builder a command-line parameter.", "Dynamic imports in dynamic languages seem like overkill to me, but they are handy."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}], [{"text": ["XSLT"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["I suggest using XSLT templates to transform the XML into INSERT statements (or whatever you need), as required.", "You should be able to invoke XSLT from any of the languages you mention.  "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "XSLT templates", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Xslt"}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["This will result in a lot less code than doing it the long way round.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["In .NET, C# 3.0 and VB9 provide excellent support for working with XML using LINQ to XML:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["LINQ to XML Overview"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "LINQ to XML Overview", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/bb387061.aspx"}]}], [{"text": ["I'll toss in a suggestion for Hpricot, a popular Ruby XML parser (although there are many similar options)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Hpricot", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.whytheluckystiff.net/hpricot/"}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Given the following XML:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &lt;Export&gt;\n  &lt;Product&gt;\n    &lt;SKU&gt;403276&lt;/SKU&gt;\n    &lt;ItemName&gt;Trivet&lt;/ItemName&gt;\n    &lt;CollectionNo&gt;0&lt;/CollectionNo&gt;\n    &lt;Pages&gt;0&lt;/Pages&gt;\n  &lt;/Product&gt;\n&lt;/Export&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["You parse simply by:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n FIELDS = %w[SKU ItemName CollectionNo Pages]\n\ndoc = Hpricot.parse(File.read(\"my.xml\")) \n(doc/:product).each do |xml_product|\n  product = Product.new\n  for field in FIELDS\n    product[field] = (xml_product/field.intern).first.innerHTML\n  end\n  product.save\nend\n</code>\n</pre>\n", "senID": 5}, {"text": ["It sounds like your application would be very fit for a Rails application,  You could quickly prototype what you need, you've got direct interaction with your database of choice and you can output the data however you need to."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Rails", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.rubyonrails.org"}]}, {"text": ["Here's another great resource page for parsing XML with Hpricot that might help as well as the documentation."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "parsing XML with Hpricot", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.whytheluckystiff.net/hpricot/wiki/HpricotXML"}, {"href": "http://code.whytheluckystiff.net/doc/hpricot/", "text": "documentation", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["either C# or VB.Net using LiNQ to XML.", "LiNQ to XML is very very powerful and easy to implement"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["For quick turnaround I've found Groovy very useful."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Groovy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groovy.codehaus.org/Processing+XML"}]}], [{"text": ["An interesting solution could be Ruby.", "Simply use XML->Object mappers and then use an object-relational-mapper (ORM) to put it inside a database.", "I had to do a short talk on XML Mapping with ruby, you could look at the slides and see what you like best: http://www.marc-seeger.de/2008/11/25/ruby-xml-mapping/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.marc-seeger.de/2008/11/25/ruby-xml-mapping/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.marc-seeger.de/2008/11/25/ruby-xml-mapping/"}]}, {"text": ["As for the ORM: Active Record or Datamapper should be the way to go"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["ECMAScript handles XML pretty nicely using E4X (\"ECMAScript for XML\").", "This can be seen in Adobe's latest version of ActionScript, version 3.", "I believe JavaScript 2 (to be released with Firefox 4, I think) will support E4X as well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Not sure about the support of the standalone JavaScript interpreters (i.e.", "Rhino, et al) of this, which is what matters most to you I suppose...", "But if it looks good to you, you can always look up their support for it (and report back to us :-))."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["See http://en.wikipedia.org/wiki/E4X#Example for a simple example."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://en.wikipedia.org/wiki/E4X#Example", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/E4X#Example"}]}]]