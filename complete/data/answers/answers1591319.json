[[{"text": ["You should only catch exceptions that you will handle."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Catching all exceptions by their concrete types is nonsense.", "You should catch specific exceptions you can and will handle.", "For other exceptions, you may write a generic catch that catches \"base Exception\", logs it (use str() function) and terminates your program (or does something else that's appropriate in a crashy situation)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "can", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "will", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "str()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["If you really gonna handle all exceptions and are sure none of them are fatal (for example, if you're running the code in some kind of a sandboxed environment), then your approach of catching generic BaseException fits your aims."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "all", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You might be also interested in language exception reference, not a reference for the library you're using."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "language exception reference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/exceptions.html#exceptions.BaseException"}]}, {"text": ["If the library reference is really poor and it doesn't re-throw its own exceptions when catching system ones, the only useful approach is to run tests (maybe add it to test suite, because if something is undocumented, it may change!).", "Delete a file crucial for your code and check what exception is being thrown.", "Supply too much data and check what error it yields."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "the only useful approach is to run tests", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["You will have to run tests anyway, since, even if the method of getting the exceptions by source code existed, it wouldn't give you any idea how you should handle any of those.", "Maybe you should be showing error message \"File needful.txt is not found!", "\" when you catch IndexError?", "Only test can tell."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "if the method of getting the exceptions by source code existed, it wouldn't give you any idea how you should handle any of those", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "IndexError", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["I guess a solution could be only imprecise because of lack of static typing rules."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'm not aware of some tool that checks exceptions, but you could come up with your own tool matching your needs (a good chance to play a little with static analysis)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As a first attempt, you could write a function that builds an AST, finds all Raise nodes, and then tries to figure out common patterns of raising exceptions (e. g. calling a constructor directly)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Raise", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Let x be the following program:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n x = '''\\\nif f(x):\n    raise IOError(errno.ENOENT, 'not found')\nelse:\n    e = g(x)\n    raise e\n'''\n</code>\n</pre>\n", "senID": 4}, {"text": ["Build the AST using the compiler package:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "compiler", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n tree = compiler.parse(x)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Then define a Raise visitor class:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Raise", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class RaiseVisitor(object):\n    def __init__(self):\n        self.nodes = []\n    def visitRaise(self, n):\n        self.nodes.append(n)\n</code>\n</pre>\n", "senID": 8}, {"text": ["And walk the AST collecting Raise nodes:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Raise", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n v = RaiseVisitor()\ncompiler.walk(tree, v)\n\n&gt;&gt;&gt; print v.nodes\n[\n    Raise(\n        CallFunc(\n            Name('IOError'),\n            [Getattr(Name('errno'), 'ENOENT'), Const('not found')],\n            None, None),\n        None, None),\n    Raise(Name('e'), None, None),\n]\n</code>\n</pre>\n", "senID": 10}, {"text": ["You may continue by resolving symbols using compiler symbol tables, analyzing data dependencies, etc.", "Or you may just deduce, that CallFunc(Name('IOError'), ...) \"should definitely mean raising IOError\", which is quite OK for quick practical results :)"], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "CallFunc(Name('IOError'), ...)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "IOError", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The correct tool to solve this problem is unittests.", "If you are having exceptions raised by real code that the unittests do not raise, then you need more unittests."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Consider this"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def f(duck):\n    try:\n        duck.quack()\n    except ??? could be anything\n</code>\n</pre>\n", "senID": 2}, {"text": ["duck can be any object"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Obviously you can have an AttributeError if duck has no quack, a TypeError if duck has a quack but it is not callable.", "You have no idea what duck.quack() might raise though, maybe even a DuckError or something"], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "AttributeError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "TypeError", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "duck.quack()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "DuckError", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Now supposing you have code like this"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n arr[i]=get_something_from_database()\n</code>\n</pre>\n", "senID": 6}, {"text": ["If it raises an IndexError you don't know whether it has come from arr[i] or from deep inside the database function.", "usually it doesn't matter so much where the exception occurred, rather that something went wrong and what you wanted to happen didn't happen."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "IndexError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["A handy technique is to catch and maybe reraise the exception like this"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n except Exception, e\n    #inspect e, decide what to do\n    raise\n</code>\n</pre>\n", "senID": 9}], [{"text": ["I ran into this when using socket, I wanted to find out all the error conditions I would run in to (so rather than trying to create errors and figure out what socket does I just wanted a concise list).", "Ultimately I ended up grep'ing \"/usr/lib64/python2.4/test/test_socket.py\" for \"raise\":"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ grep raise test_socket.py\nAny exceptions raised by the clients during their tests\n        raise TypeError, \"test_func must be a callable function\"\n    raise NotImplementedError, \"clientSetUp must be implemented.\"\n    def raise_error(*args, **kwargs):\n        raise socket.error\n    def raise_herror(*args, **kwargs):\n        raise socket.herror\n    def raise_gaierror(*args, **kwargs):\n        raise socket.gaierror\n    self.failUnlessRaises(socket.error, raise_error,\n    self.failUnlessRaises(socket.error, raise_herror,\n    self.failUnlessRaises(socket.error, raise_gaierror,\n        raise socket.error\n    # Check that setting it to an invalid value raises ValueError\n    # Check that setting it to an invalid type raises TypeError\n    def raise_timeout(*args, **kwargs):\n    self.failUnlessRaises(socket.timeout, raise_timeout,\n    def raise_timeout(*args, **kwargs):\n    self.failUnlessRaises(socket.timeout, raise_timeout,\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which is a pretty concise list of errors.", "Now of course this only works on a case by case basis and depends on the tests being accurate (which they usually are).", "Otherwise you need to pretty much catch all exceptions, log them and dissect them and figure out how to handle them (which with unit testing wouldn't be to difficult)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["normally, you'd need to catch exception only around a few lines of code.", "You wouldn't want to put your whole main function into the try except clause.", "for every few line you always should now (or be able easily to check) what kind of exception might be raised."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "main", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "try except", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["docs have an exhaustive list of built-in exceptions.", "don't try to except those exception that you're not expecting, they might be handled/expected in the calling code."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "list of built-in exceptions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/3.1/library/exceptions.html"}]}, {"text": ["edit: what might be thrown depends on obviously on what you're doing!", "accessing random element of a sequence: IndexError, random element of a dict: KeyError, etc."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "IndexError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "KeyError", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Just try to run those few lines in IDLE and cause an exception.", "But unittest would be a better solution, naturally."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Noone explained so far, why you can't have a full, 100% correct list of exceptions, so I thought it's worth commenting on.", "One of the reasons is a first-class function.", "Let's say that you have a function like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def apl(f,arg):\n   return f(arg)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now apl can raise any exception that f raises.", "While there are not many functions like that in the core library, anything that uses list comprehension with custom filters, map, reduce, etc.", "are affected."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "apl", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "f", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["The documentation and the source analysers are the only \"serious\" sources of information here.", "Just keep in mind what they cannot do."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]