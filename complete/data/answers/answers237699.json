[[{"text": ["Using retrlines() probably isn't the best idea there, since it just prints to the console and so you'd have to do tricky things to even get at that output.", "A likely better bet would be to use the nlst() method, which returns exactly what you want: a list of the file names."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Is there any reason why ftplib.FTP.nlst() won't work for you?", "I just checked and it returns only names of the files in a given directory."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ftplib.FTP.nlst()", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["This best answer"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["You may want to use ftp.nlst() instead of ftp.retrlines().", "It will give you exactly what you want."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you cant, read the following :"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Generators for sysadmin processes"], "childNum": 0, "tag": "h2", "senID": 3, "childList": []}, {"text": ["In his now famous review, Generator Tricks For Systems Programmers An Introduction, David M. Beazley gives a lot of receipes to answer to this kind of data problem with wuick and reusable code."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Generator Tricks For Systems Programmers An Introduction", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/generators/Generators.pdf"}]}, {"text": ["E.G :"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n # empty list that will receive all the log entry\nlog = [] \n# we pass a callback function bypass the print_line that would be called by retrlines\n# we do that only because we cannot use something better than retrlines\nftp.retrlines('LIST', callback=log.append)\n# we use rsplit because it more efficient in our case if we have a big file\nfiles = (line.rsplit(None, 1)[1] for line in log)\n# get you file list\nfiles_list = list(files)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Why don't we generate immediately the list ?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Well, it's because doing it this way offer you much flexibility : you can apply any intermediate generator to filter files before turning it into files_list : it's just like pipe, add a line, you add a process without overheat (since it's generators).", "And if you get rid off retrlines, it still work be it's even better because you don't store the liste even one time."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["EDIT : well, I read the comment to the other answer and it says that this won't work if there is any space in the name."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Cool, this will illustrate why this method is handy.", "If you want to change something in the process, you just change a line.", "Swap :"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n files = (line.rsplit(None, 1)[1] for line in log)\n</code>\n</pre>\n", "senID": 11}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n # join split the line, get all the item from the field 8 then join them\nfiles = (' '.join(line.split()[8:]) for line in log)\n</code>\n</pre>\n", "senID": 13}, {"text": ["Ok, this may no be obvious here, but for huge batch process scripts, it's nice :-)"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}], [{"text": ["I believe it should work for you."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n file_name_list = [' '.join(each_file.split()).split()[-1] for each_file_detail in file_list_from_log]\n</code>\n</pre>\n", "senID": 1}, {"text": ["NOTES - "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["To replace multiple spaces by 1 space."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["And a slightly less-optimal method, by the way, if you're stuck using retrlines() for some reason, is to pass a function as the second argument to retrlines(); it'll be called for each item in the list.", "So something like this (assuming you have an FTP object named 'ftp') would work as well:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n filenames = []\nftp.retrlines('LIST', lambda line: filenames.append(line.split()[-1]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["The list 'filenames' will then be a list of the file names."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Since every filename in the output starts at the same column, all you have to do is get the position of the dot on the first line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then slice the filename out of the other lines using the position of that dot as the starting index."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Since the dot is the last character on the line, you can use the length of the line minus 1 as the index.", "So the final code is something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n lines = ftp.retrlines('LIST')\nlines = lines.split(\"\\n\") # This should split the string into an array of lines\n\nfilename_index = len(lines[0]) - 1\nfiles = []\n\nfor line in lines:\n    files.append(line[filename_index:])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If the FTP server supports the MLSD command, then please see section \u201csingle directory case\u201d from that answer."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "MLSD", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/2867217/how-to-delete-files-with-a-python-script-from-a-ftp-server-which-are-older-than-7/3114477#3114477", "text": "that", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Use an instance (say ftpd) of the FTPDirectory class, call its .getdata method with connected ftplib.FTP instance in the correct folder, then you can:"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "ftpd", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "FTPDirectory", "childNum": 0, "tag": "code", "childList": []}, {"text": ".getdata", "childNum": 0, "tag": "code", "childList": []}, {"text": "ftplib.FTP", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n directory_filenames= [ftpfile.name for ftpfile in ftpd.files]\n</code>\n</pre>\n", "senID": 2}]]