[[{"text": ["For now I am using"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def row2dict(row):\n    d = {}\n    for columnName in row.__table__.columns.keys():\n        d[columnName] = getattr(row, columnName)\n\n    return d\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n from sqlalchemy.orm import class_mapper\n\ndef asdict(obj):\n    return dict((col.name, getattr(obj, col.name))\n                for col in class_mapper(obj.__class__).mapped_table.c)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n for row in resultproxy:\n    row_as_dict = dict(row)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I have a variation on Marco Mariani's answer, expressed as a decorator.", "The main difference is that it'll handle lists of entities, as well as safely ignoring some other types of return values (which is very useful when writing tests using mocks):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lists", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n @decorator\ndef to_dict(f, *args, **kwargs):\n  result = f(*args, **kwargs)\n  if is_iterable(result) and not is_dict(result):\n    return map(asdict, result)\n\n  return asdict(result)\n\ndef asdict(obj):\n  return dict((col.name, getattr(obj, col.name))\n              for col in class_mapper(obj.__class__).mapped_table.c)\n\ndef is_dict(obj):\n  return isinstance(obj, dict)\n\ndef is_iterable(obj):\n  return True if getattr(obj, '__iter__', False) else False\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The expression you are iterating through evaluates to list of model objects, not rows.", "So the following is correct usage of them:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "objects", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for u in session.query(User).all():\n    print u.id, u.name\n</code>\n</pre>\n", "senID": 1}, {"text": ["Do you realy need to convert them to dicts?", "Sure, there is a lot of ways, but then you don't need ORM part of SQLAlchemy:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n result = session.execute(User.__table__.select())\nfor row in result:\n    print dict(row)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Update: Take a look at sqlalchemy.orm.attributes module.", "It has a set of functions to work with object state, that might be useful for you, especially instance_dict()."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "sqlalchemy.orm.attributes", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "instance_dict()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n class User(object):\n    def to_dict(self):\n        return dict([(k, getattr(self, k)) for k in self.__dict__.keys() if not k.startswith(\"_\")])\n</code>\n</pre>\n", "senID": 0}, {"text": ["That should work."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]