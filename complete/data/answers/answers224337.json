[[{"text": ["Here is a simple example.", "This way you can make your \"wizard\" work like a finite state machine where states are different pages that are initialized on demand.", "Also, the data is shared between pages."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import wx\nimport wx.lib.newevent\n\n\n(PageChangeEvent, EVT_PAGE_CHANGE) = wx.lib.newevent.NewEvent()\n\n\nclass Data:\n    foo = None\n    bar = None\n\n\nclass Page1(wx.Panel):\n    def __init__(self, parent, data):\n        wx.Panel.__init__(self, parent)\n        self.parent = parent\n        self.data = data\n\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        self.SetSizer(sizer)\n        label = wx.StaticText(self, label=\"Page 1 - foo\")\n        self.foo = wx.TextCtrl(self)\n        goto_page2 = wx.Button(self, label=\"Go to page 2\")\n\n        for c in (label, self.foo, goto_page2):\n            sizer.Add(c, 0, wx.TOP, 5)\n\n        goto_page2.Bind(wx.EVT_BUTTON, self.OnPage2)\n\n    def OnPage2(self, event):\n        self.data.foo = self.foo.Value\n        wx.PostEvent(self.parent, PageChangeEvent(page=Page2))\n\n\nclass Page2(wx.Panel):\n    def __init__(self, parent, data):\n        wx.Panel.__init__(self, parent)\n        self.parent = parent\n        self.data = data\n\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        self.SetSizer(sizer)\n        label = wx.StaticText(self, label=\"Page 2 - bar\")\n        self.bar = wx.TextCtrl(self)\n        goto_finish = wx.Button(self, label=\"Finish\")\n\n        for c in (label, self.bar, goto_finish):\n            sizer.Add(c, 0, wx.TOP, 5)\n\n        goto_finish.Bind(wx.EVT_BUTTON, self.OnFinish)\n\n    def OnFinish(self, event):\n        self.data.bar = self.bar.Value\n        wx.PostEvent(self.parent, PageChangeEvent(page=finish))\n\n\ndef finish(parent, data):\n    wx.MessageBox(\"foo = %s\\nbar = %s\" % (data.foo, data.bar))\n    wx.GetApp().ExitMainLoop()\n\n\nclass Test(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None)\n        self.data = Data()\n        self.current_page = None\n\n        self.Bind(EVT_PAGE_CHANGE, self.OnPageChange)\n        wx.PostEvent(self, PageChangeEvent(page=Page1))\n\n    def OnPageChange(self, event):\n        page = event.page(self, self.data)\n        if page == None:\n            return\n        if self.current_page:\n            self.current_page.Destroy()\n        self.current_page = page\n        page.Layout()\n        page.Fit()\n        page.Refresh()\n\n\napp = wx.PySimpleApp()\napp.TopWindow = Test()\napp.TopWindow.Show()\napp.MainLoop()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The wxPython demo has an example of a \"dynamic\" wizard.", "Pages override GetNext() and GetPrev() to show pages dynamically.", "This shows the basic technique; you can extend it to add and remove pages, change pages on the fly, and rearrange pages dynamically."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The wizard class is just a convenience, though.", "You can modify it, or create your own implementation.", "A style that seems popular nowadays is to use an HTML-based presentation; you can emulate this with the wxHtml control, or the IEHtmlWindow control if your app is Windows only."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["How do you switch from page to page?", "Can that mechanism be extended to update the information on the new page?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Sorry, that this is not really an answer, but just the things that strike me as obvious when looking at your description."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You could try using a workflow engine like WFTK.", "In this particular case author has done some work on wx-based apps using WFTK and can probably direct you to examples."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "WFTK", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.vivtek.com/wftk/"}]}], [{"text": ["I'd get rid of wizard in whole.", "They are the most unpleasant things I've ever used."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The problem that requires a wizard-application where you click 'next' is perhaps a problem where you could apply a better user interface in a bit different manner.", "Instead of bringing up a dialog with annoying 'next' -button.", "Do this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Bring up a page.", "When the user inserts the information to the page, extend or shorten it according to the input.", "If your application needs to do some processing to continue, and it's impossible to revert after that, write a new page or disable the earlier section of the current page.", "When you don't need any input from the user anymore or the app is finished, you can show a button or enable an existing such."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I don't mean you should implement it all in browser.", "Make simply a scrolling container that can contain buttons and labels in a flat list."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Benefit: The user can just click a tab, and you are encouraged to put all the processing into the end of filling the page."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["It should be noted that a Wizard should be the interface for mutli-step, infrequently-performed tasks.", "The wizard is used to guide the user through something they don't really understand, because they almost never do it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["And if some users might do the task frequently, you want to give those power users a lightweight interface to do the same thing - even if it less self explanatory."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["See: Windows Vista User Experience Guidelines - Top Violations"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Windows Vista User Experience Guidelines - Top Violations", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Windows Vista User Experience Guidelines - Top Violations", "tag": "a"}]}, {"href": "http://msdn.microsoft.com/en-us/library/aa511331.aspx#wizards", "text": "Windows Vista User Experience Guidelines - Top Violations", "childNum": 0, "tag": "a", "childList": []}]}]]