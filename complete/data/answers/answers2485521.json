[[{"text": ["input() in 3.x only returns strings.", "It is the programmer's job to pass it to a numeric constructor in order to turn it into a number."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "input()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Are you initializing pot?", "Have you tried storing intermediate results to track down here the problem is coming from?", "And finally, do you know about pdb?", "That may be a big help."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pdb", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/pdb.html"}]}, {"code": "<pre>\n<code>\n class Gambler:\n    pot = 0.0\n    def __init__(self, money=0.0)\n        self.pot = 0.0\n        self.bet = 0.0\n        self.money = money\n\n    def update_pot(self):\n        import pdb; pdb.set_trace()\n        to_pot = self.bet + self.money * 0.1\n        to_pot = round(to_pot)\n        Gambler.pot = Gambler.pot + to_pot\n</code>\n</pre>\n", "senID": 1}, {"text": ["You will get a prompt when the set_trace() line is executed.", "Try looking at the current values when you get there."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n (Pdb) h    # help\n(Pdb) n    # go to next statement\n(Pdb) l    # list source code\n...\n(Pdb) to_pot\n...\n(Pdb) self.bet\n...\n(Pdb) self.money\n...\n(Pdb) Gambler.pot\n...\n(Pdb) c    # continue\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If any of Gambler.pot, self.bet or self.money have somehow become strings (because they were set to a string at some point), + will be taken to mean string concatenation which causes the error message you see. "], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "Gambler.pot", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self.bet", "childNum": 0, "tag": "code", "childList": []}, {"text": "self.money", "childNum": 0, "tag": "code", "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Python3.2 (py3k:77602) gives these error messages:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "(py3k:77602)", "childNum": 0, "tag": "sup", "pos": 0, "childList": []}]}, {"code": "<pre>\n>>> \"1.2\" * 0.1                                                #1\nTraceback (most recent call last):\n  File \"\", line 1, in \nTypeError: can't multiply sequence by non-int of type 'float'\n>>> \"3.4\" + 1.2 * 0.1                                          #2\nTraceback (most recent call last):\n  File \"\", line 1, in \nTypeError: Can't convert 'float' object to str implicitly\n>>> n = \"42\"\n>>> n += round(3.4 + 1.2 * 0.1)                                #3\nTraceback (most recent call last):\n  File \"\", line 1, in \nTypeError: Can't convert 'int' object to str implicitly\n</pre>\n", "senID": 1}, {"text": ["I suspect your error message is because one of your actual values is a string instead of the expected float in a scenario similar to #2, which is an exact match for your exception."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you could write a test case, that would be a big help."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "test", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sscce.org"}, {"href": "http://www.yoda.arachsys.com/csharp/complete.html", "text": "case", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Remember that Py3.x's input is identical to Py2.x's raw_input, and Py2.x's input is gone (it's equivalent to using evai, which you don't want to do).", "Because of this, input in 3.x will always return a string.", "Use int to convert:"], "childNum": 7, "tag": "p", "senID": 4, "childList": [{"text": "input", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "raw_input", "childNum": 1, "tag": "em", "pos": -1, "childList": [{"text": "raw", "tag": "b"}]}, {"text": "raw", "childNum": 0, "tag": "b", "pos": -1, "childList": []}, {"text": "input", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "evai", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "input", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "int", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n n = int(input(\"Enter a number: \"))\n</code>\n</pre>\n", "senID": 5}, {"text": ["If you want to handle input errors, then catch ValueError, which is what int raises on errors:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "int", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n  n = int(input(\"Enter a number: \"))\nexcept ValueError:\n  print(\"invalid input\")\nelse:\n  print(\"squared:\", n*n)\n</code>\n</pre>\n", "senID": 7}], [{"text": ["In Python 3.x, input() replaces Python 2.x's raw_input().", "Therefore, the function input() returns the exact string that the user input (as raw_input() did in previous versions)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "input()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "raw_input()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "input()", "childNum": 0, "tag": "code", "childList": []}, {"text": "raw_input()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["To get Python 2.x behavior, you can just do"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n number = eval(input(\"Please enter a number: \"))\n</code>\n</pre>\n", "senID": 2}, {"text": ["However, I wouldn't recommend using \"eval\" since the user can put any line of Python they want in there, which is probably not what you want.", "If you know you want a float, just tell Python that's what you want:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "float", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n number = float(input(\"Please enter a number: \"))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["As was said in a comment, what you've shown is initializing local variables to 0.", "Instead try something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Gambler:\n    def __init__(self):\n        self.bet = 0.0\n        self.money = 0.0\n\n    def calc_pot(self):\n        self.pot = round(self.bet  + self.money * 0.1)\n\ng = Gambler()\ng.bet = 2.0\ng.money = 5.0\ng.calc_pot()\n\nprint \"Pot = %f\" % (g.pot)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, make sure there's nothing that might be turning those members into strings."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]