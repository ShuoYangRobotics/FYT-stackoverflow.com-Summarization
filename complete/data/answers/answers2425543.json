[[{"text": ["Either catch IndexError when indexing or check the len() of the list beforehand."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "IndexError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "len()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["First read the file, and then ask user in a loop, until the answer is acceptable:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n while True:\n    get_item = int(raw_input( \"\\n Enter number of item to delete: \\n\"))\n    if get_item &gt;=0 and get_item &lt; len(lines):\n        break\n</code>\n</pre>\n", "senID": 1}, {"text": ["That will, of course, break when the file is empty and doesn't give any hint about the acceptable values to the user.", "But let's keep some exercise for you."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Judicious changes to your current code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def deleteitem():\n  showlist()\n\n  with open(\"todo.txt\") as f:\n    lines = f.readlines()\n  if len(lines) == 0:  # completely empty file\n    return  # handle appropriately\n  prompt = \"Enter number to delete (1-%d), or 0 to abort: \" % len(lines)\n  while True:\n    input = raw_input(prompt)\n    try:\n      input = int(input, 10)\n    except ValueError:\n      print \"Invalid input.\"\n    else:\n      if 0 &lt;= input &lt;= len(lines):\n        break\n      print \"Input out of range.\"\n  if input == 0:\n    return\n  input -= 1  # adjust from [1,len] to [0,len)\n\n  #del lines[input]  # if you want to remove that line completely\n  lines[input] = \"\\n\"  # or just make that line blank (what you had)\n\n  with open(\"todo.txt\", \"w\") as f:\n    f.writelines(lines)\n\n  showlist()\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def deleteitem():\n             showlist()\n             get_item = int(raw_input( \"\\n Enter number of item to delete: \\n\"))\n             f = open('todo.txt')\n             lines = f.readlines()\n             f.close()\n             try:\n                 lines[get_item] = \"\"\n             except Exception,err: \n                 print err\n             f = open('todo.txt','w')\n             f.writelines(lines)\n             f.close()\n             showlist()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Try something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def deleteitem():\n\nshowlist()\nf = open('todo.txt')\nlines = f.readlines()\nf.close()\nif len(lines) == 0:\n    print \"File is empty!\"\n    return False\nprint \"File has %d items\\n\" % len(lines)\nitem = 0\nwhile item &lt; len(lines):\n    item = raw_input( \"\\n Enter number of item to delete(0-%d): \\n\" % len(lines))\n    item = int(item) # because of the width of the code\nf = open('todo.txt','w')\nf.write(lines[0:item-1])\nf.write(lines[item::])\nf.close()\nshowlist()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For what it's worth....", "I'll put the code to my todo.py program here...", "It's just something I run from a Terminal in OS X to keep control of stuff I need to do at work...I am sure it's horribly un-pythonic,inefficient and everything else...but maybe it'll be of use to some one who stumbles across this thread : "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import with_statement\nimport sys\nimport os\nimport fileinput\n\nos.system('clear')\n\nprint (\"##############          TO DO LIST       ############\")\nprint (\"##############                           ############\")\n\ndef showlist():\n    os.system('clear')\n    print (\"############  Current To Do List  ######\")\n    print (\"########################################\")\n\n    get_list = open('todo.txt')\n    entire_list = get_list.readlines()\n    for i in range (len(entire_list)):\n        print i, entire_list[i]\n    get_list.close()\n    print (\"########################################\")\n    print (\"########################################\")\n\ndef appendlist():\n    print (\"#######################################\")\n    print (\"#######################################\")\n\n\n    addtolist = str( raw_input(\"Enter new item:  \\n\"))\n    thelist = open('todo.txt', 'a')\n    thelist.write(str(addtolist))\n    thelist.write(str('\\n'))\n    thelist.close()  \n    showlist()\n\n\ndef deleteitem():\n    showlist()\n\n        with open(\"todo.txt\") as f:\n            lines = f.readlines()\n            if len(lines) == 0:  \n                return  \n        prompt = \"Enter number to delete or '0' to abort: \" \n        while True:\n                input = raw_input(prompt)\n                try:\n                    input = int(input, 10)\n                except ValueError:\n                    print \"Invalid input.\"\n                else:\n                    if 0 &lt;= input &lt;= len(lines):\n                        break\n                    print \"Input out of range.\"\n        if input == 0:\n                  return\n\n        lines[input] = \"\" \n\n            with open(\"todo.txt\", \"w\") as f:\n                f.writelines(lines)\n\n        showlist()\n\nwhile True:\n\n    askme = raw_input(\"\\nDo you want to:\\n(S)ee list\\n(A)ppend list\\n(D)elte from list\\n(Q)Quit?\\n\")\n    print str('\\n')\n\n    if askme == \"S\":\n        showlist()\n    elif askme == \"A\":\n        appendlist()\n    elif askme == \"D\":\n        deleteitem()\n\n    elif askme == \"Q\":\n        sys.exit()\n    else: \n        print (\"Try again?\")\n\nprint (\"#######################################\")\nprint (\"#######################################\")\n</code>\n</pre>\n", "senID": 1}]]