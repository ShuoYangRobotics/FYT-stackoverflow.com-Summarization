[[{"text": ["You can use  import numpy\nand then make  result  an array results=numpy.array(result)\nand finally 'f_list=numpy.cumsum(results)'"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "import numpy", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "results=numpy.array(result)", "childNum": 0, "tag": "code", "childList": []}, {"text": "f_list=numpy.cumsum(results)", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n letters = 'abcdefghijklmnopqrstuvwxyz '\ncounts = dict.fromkeys(letters, 0)\nfor char in rawpunct.lower():\n    try:\n        counts[char] += 1\n    except KeyError:\n        pass\n        # this character in rawpunct should not be counted!\nf_list = [0]\nfor s in letters:\n    f_list.append(f_list[-1] + counts[s])\nstr_list = ['{0:.3f}'.format(f) for f in f_list[1:]]\n</code>\n</pre>\n", "senID": 0}, {"text": ["My f_list is a list of floats (it is easier to calculate sums with floats than with their string representations!).", "At the end I create the str_list, which is a list of string representations of these floats.", "Since you don't want to start your list with a zero, this will be removed at the end (only f_list[1:] is taken)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "f_list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str_list", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "f_list[1:]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["This solution is faster if your input text is long, because it reads it just once."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Just for the fun of the one-liner : "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n original = ['0.061', '0.012', '0.017', '0.030', '0.093', '0.016', '0.016', \n'0.049', '0.050', '0.001', '0.006', '0.034', '0.018', '0.052', '0.055',\n '0.013', '0.001', '0.041', '0.050', '0.069', '0.021', '0.007', '0.017',\n '0.001', '0.013', '0.000', '0.159']\n\nresult = [sum(float(item) for item in original[0:rank+1]) for rank in xrange(len(original))]\n\n&gt;&gt;&gt; [0.061, 0.073, 0.09, 0.12, 0.213, 0.22899999999999998, 0.245, 0.294, 0.344, 0.345, 0.351, 0.385, 0.403, 0.455, 0.51, 0.523, 0.524, 0.5650000000000001, 0.6150000000000001, 0.6840000000000002, 0.7050000000000002, 0.7120000000000002, 0.7290000000000002, 0.7300000000000002, 0.7430000000000002, 0.7430000000000002, 0.9020000000000002]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n if len(f_list) == 0:\n    f_list.append(result)\nelse:\n    f_list.append(f_list[-1] + result)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n f_list = [0]\nfor s in 'abcdefghijklmnopqrstuvwxyz ':\n    count = 0\n    for char in rawpunct.lower():\n        if s == char:\n            count +=1\n    result = s, '%.3f' % (count*100/len(rawpunct.lower()))\n    f_list.append(result + f_list[-1])\n f_list = list(f_list[1:])\n</code>\n</pre>\n", "senID": 0}], [{"text": ["My cumsum version, using reduce:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "cumsum", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "reduce", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n In [1]: x = [1,2,3]\nIn [2]: reduce(lambda acc, x: acc + [acc[-1] + x], x[1:], x[:1])\nOut[2]: [1, 3, 6]\n</code>\n</pre>\n", "senID": 1}, {"text": ["It works for empty lists, too:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n In [3]: x = []\nIn [4]: reduce(lambda acc, x: acc + [acc[-1] + x], x[1:], x[:1])\nOut[4]: []\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I guess rawpunct is the string cotaining your Text.", "I replaced it with text in my proposal:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from string import lowercase\n\ntext='Some arbitrary  Text with NonNSense! @#!.+-'.lower()\nchmap = lowercase+' '\ncooked_text = ''.join([i for i in text if i in chmap])\nchdict = dict.fromkeys(chmap, 0)       #set totals-dict up \nfrequencies = dict.fromkeys(chmap, 0)  #set fractions dict up\n\nfor ch in cooked_text: #toals per char\n    chdict[ch] += 1\n\nfor char in chdict.keys(): #relative to text-length\n    frequencies[char] = float(chdict[char]) / len(cooked_text)\n\nfrequency_list = [frequencies[char] for char in chmap]\nfrequency_strlist = ['%.3f' % f for f in frequency_list]\nprint frequency_strlist\n</code>\n</pre>\n", "senID": 1}]]