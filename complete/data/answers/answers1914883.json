[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; int(''.join(reduce(lambda a, b: a + b, x)))\n4850775602376340\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I'd use itertools.chain.from_iterable for this (new in python 2.6)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "itertools.chain.from_iterable", "tag": "a", "pos": 0, "childList": [{"text": "itertools.chain.from_iterable", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html#itertools.itertools.chain.from%5Fiterable"}, {"text": "itertools.chain.from_iterable", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Example code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import itertools\nx = [['48', '5', '0'], ['77', '56', '0'], ['23', '76', '34', '0']]\nprint int(''.join(itertools.chain.from_iterable(x)))\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; int(''.join(j for i in x for j in i))\n4850775602376340\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Its a list of lists, so "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n num = int(''.join(''.join(l) for l in lists))\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def flatten( nested ):\n    for inner in nested:\n        for x in inner:\n            yield x\n\nnum = ''.join(flatten(lists))\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; x = [['48', '5', '0'], ['77', '56', '0'], ['23', '76', '34', '0']]\n&gt;&gt;&gt; int(''.join([''.join(i) for i in x ] ))\n4850775602376340\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Enough good answers already ... just wanted to add the treatment of unlimited nesting:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def flatten(obj):\n    if not isinstance(obj, list):\n        return obj\n    else:\n        return ''.join([flatten(x) for x in obj])\n\n&gt;&gt;&gt; x = [['48', '5', '0'], ['77', '56', '0'], ['23', '76', '34', '0']]\n&gt;&gt;&gt; flatten(x)\n'4850775602376340'\n\n&gt;&gt;&gt; x = [['48', '5', '0'], ['77', '56', '0'], [['23','123'], '76', '34', '0']]\n&gt;&gt;&gt; flatten(x)\n'4850775602312376340'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["simply put:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["putting it all together"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x2 = int(''.join([e.replace('-','') for e in (itertools.chain(*x))]))\n</code>\n</pre>\n", "senID": 2}]]