[[{"text": ["As long as all the arrays are the same length, you can use array_map with null as the first argument."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "array_map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "null", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n array_map(null, $a, $b, $c, ...);\n</code>\n</pre>\n", "senID": 1}, {"text": ["If some of the arrays are shorter, they will be padded with nulls to the length of the longest, unlike python where the returned result is the length of the shortest array."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["array_combine comes close."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "array_combine", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Otherwise nothing like coding it yourself:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n function array_zip($a1, $a2) {\n  for($i = 0, $i &lt; max(length($a1), length($a2)); $i++) {\n    $out[$i] = [$a1[$i], $a2[$i]];\n  }\n  return $out;\n}\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Try this function to create an array of arrays similar to Python\u2019s zip:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "zip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n function zip() {\n    $args = func_get_args();\n    $zipped = array();\n    $n = count($args);\n    for ($i=0; $i&lt;$n; ++$i) {\n        reset($args[$i]);\n    }\n    while ($n) {\n        $tmp = array();\n        for ($i=0; $i&lt;$n; ++$i) {\n            if (key($args[$i]) === null) {\n                break 2;\n            }\n            $tmp[] = current($args[$i]);\n            next($args[$i]);\n        }\n        $zipped[] = $tmp;\n    }\n    return $zipped;\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can pass this function as many array as you want with as many items as you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I wrote a zip() functions for my PHP implementation of enum.", "The code has been modified to allow for a Python-style zip() as well as Ruby-style.", "The difference is explained in the comments:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "zip()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "PHP implementation of enum", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://left4churr.com/php/PHPRuby"}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "zip()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n /*\n * This is a Python/Ruby style zip()\n *\n * zip(array $a1, array $a2, ... array $an, [bool $python=true])\n *\n * The last argument is an optional bool that determines the how the function\n * handles when the array arguments are different in length\n *\n * By default, it does it the Python way, that is, the returned array will\n * be truncated to the length of the shortest argument\n *\n * If set to FALSE, it does it the Ruby way, and NULL values are used to\n * fill the undefined entries\n *\n */\nfunction zip() {\n    $args = func_get_args();\n\n    $ruby = array_pop($args);\n    if (is_array($ruby))\n        $args[] = $ruby;\n\n    $counts = array_map('count', $args);\n    $count = ($ruby) ? min($counts) : max($counts);\n    $zipped = array();\n\n    for ($i = 0; $i &lt; $count; $i++) {\n        for ($j = 0; $j &lt; count($args); $j++) {\n            $val = (isset($args[$j][$i])) ? $args[$j][$i] : null;\n            $zipped[$i][$j] = $val;\n        }\n    }\n    return $zipped;\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $pythonzip = zip(array(1,2,3), array(4,5),  array(6,7,8));\n$rubyzip   = zip(array(1,2,3), array(4,5),  array(6,7,8), false);\n\necho '&lt;pre&gt;';\nprint_r($pythonzip);\nprint_r($rubyzip);\necho '&lt;pre&gt;';\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n public static function array_zip() {\n    $result = array();\n    $args = array_map('array_values',func_get_args());\n    $min = min(array_map('count',$args));\n    for($i=0; $i&lt;$min; ++$i) {\n        $result[$i] = array();\n        foreach($args as $j=&gt;$arr) {\n            $result[$i][$j] = $arr[$i];\n        }\n    }\n    return $result;\n}\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This works exactly as Python'szip()function, and is compatible also with PHP &lt; 5.3:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "works exactly as Python'szip()function", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "zip()", "tag": "code"}]}, {"text": "zip()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n function zip() {\n    $params = func_get_args();\n    $result = call_user_func_array('array_map',array_merge(array(null),$params));\n    $length = min(array_map('count', $params));\n    return array_slice($result, 0, $length);\n};\n</code>\n</pre>\n", "senID": 1}, {"text": ["It merges the arrays in the manner Python's zip() does and does not return elements found after reaching the end of the shortest array."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "zip()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The following:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n zip(array(1,2,3,4,5),array('a','b'));\n</code>\n</pre>\n", "senID": 4}, {"text": ["gives the following result:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n array(array(1,'a'), array(2,'b'))\n</code>\n</pre>\n", "senID": 6}, {"text": ["and the following:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n zip(array(1,2,3,4,5),array('a','b'),array('x','y','z'));\n</code>\n</pre>\n", "senID": 8}, {"text": ["gives the following result:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n array(array(1,'a','x'), array(2,'b','y'))\n</code>\n</pre>\n", "senID": 10}, {"text": ["Check this demonstration and this for a proof of the above."], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "this demonstration", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ideone.com/4dAYB"}, {"href": "http://ideone.com/PBOQe", "text": "this", "childNum": 0, "tag": "a", "childList": []}]}]]