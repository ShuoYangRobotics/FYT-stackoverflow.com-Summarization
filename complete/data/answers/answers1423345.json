[[{"text": ["You might want to check out Twisted."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Twisted", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/trac/"}]}], [{"text": ["You can make it a daemon.", "There is a PEP for a more complete solution, but I have found that this works well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os, sys\n\ndef become_daemon(our_home_dir='.', out_log='/dev/null', err_log='/dev/null', pidfile='/var/tmp/daemon.pid'):\n    \"\"\" Make the current process a daemon.  \"\"\"\n\n    try:\n        # First fork\n        try:\n            if os.fork() &gt; 0:\n                sys.exit(0)\n        except OSError, e:\n            sys.stderr.write('fork #1 failed\" (%d) %s\\n' % (e.errno, e.strerror))\n            sys.exit(1)\n\n        os.setsid()\n        os.chdir(our_home_dir)\n        os.umask(0)\n\n        # Second fork\n        try:\n            pid = os.fork()\n            if pid &gt; 0:\n                # You must write the pid file here.  After the exit()\n                # the pid variable is gone.\n                fpid = open(pidfile, 'wb')\n                fpid.write(str(pid))\n                fpid.close()\n                sys.exit(0)\n        except OSError, e:\n            sys.stderr.write('fork #2 failed\" (%d) %s\\n' % (e.errno, e.strerror))\n            sys.exit(1)\n\n        si = open('/dev/null', 'r')\n        so = open(out_log, 'a+', 0)\n        se = open(err_log, 'a+', 0)\n        os.dup2(si.fileno(), sys.stdin.fileno())\n        os.dup2(so.fileno(), sys.stdout.fileno())\n        os.dup2(se.fileno(), sys.stderr.fileno())\n    except Exception, e:\n        sys.stderr.write(str(e))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["on XP and later you can use the sc.exe program to use any .exe as service:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sc.exe", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;sc create\nCreates a service entry in the registry and Service Database.\nSYNTAX:\nsc create [service name] [binPath= ] &lt;option1&gt; &lt;option2&gt;...\nCREATE OPTIONS:\nNOTE: The option name includes the equal sign.\n type= &lt;own|share|interact|kernel|filesys|rec&gt;\n       (default = own)\n start= &lt;boot|system|auto|demand|disabled&gt;\n       (default = demand)\n error= &lt;normal|severe|critical|ignore&gt;\n       (default = normal)\n binPath= &lt;BinaryPathName&gt;\n group= &lt;LoadOrderGroup&gt;\n tag= &lt;yes|no&gt;\n depend= &lt;Dependencies(separated by / (forward slash))&gt;\n obj= &lt;AccountName|ObjectName&gt;\n       (default = LocalSystem)\n DisplayName= &lt;display name&gt;\n password= &lt;password&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can start your pythonscript by starting the python interpreter with your script as argument:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n python.exe myscript.py\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Assuming this is for Windows, see this recipe based on srvany"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this recipe based on srvany", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://agiletesting.blogspot.com/2005/09/running-python-script-as-windows.html"}]}], [{"text": ["There is the very helpful Pypi package which is the basis for my daemons written in Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Pypi package", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/python-daemon/"}]}], [{"text": ["If you are talking about linux, it is as easy as doing something like ./myscript.py &amp;"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]