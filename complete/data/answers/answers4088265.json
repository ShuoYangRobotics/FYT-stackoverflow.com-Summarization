[[{"text": ["WARNING: This example requires Python 2.7 or higher."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "WARNING:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Python's built-in Counter object is exactly what you're looking for.", "Counting words is even the first example in the documentation:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Counter", "tag": "a", "pos": 0, "childList": [{"text": "Counter", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/collections.html#collections.Counter"}, {"text": "Counter", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; # Tally occurrences of words in a list\n&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; cnt = Counter()\n&gt;&gt;&gt; for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:\n...     cnt[word] += 1\n&gt;&gt;&gt; cnt\nCounter({'blue': 3, 'red': 2, 'green': 1})\n</code>\n</pre>\n", "senID": 2}, {"text": ["As specified in the comments, Counter takes an iterable, so the above example is merely for illustration and is equivalent to:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Counter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mywords = ['red', 'blue', 'red', 'green', 'blue', 'blue']\n&gt;&gt;&gt; cnt = Counter(mywords)\n&gt;&gt;&gt; cnt\nCounter({'blue': 3, 'red': 2, 'green': 1})\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You can use the same dictionary:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = { \"foo\": 4, \"bar\": 2, \"quux\": 3 }\n&gt;&gt;&gt; sorted(d.items(), key=lambda item: item[1])\n</code>\n</pre>\n", "senID": 1}, {"text": ["The second line prints:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [('bar', 2), ('quux', 3), ('foo', 4)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you only want a sorted word list, do:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [pair[0] for pair in sorted(d.items(), key=lambda item: item[1])]\n</code>\n</pre>\n", "senID": 5}, {"text": ["That line prints:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n ['bar', 'quux', 'foo']\n</code>\n</pre>\n", "senID": 7}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {'a': 3, 'b': 1, 'c': 2, 'd': 5, 'e': 0}\n&gt;&gt;&gt; l = d.items()\n&gt;&gt;&gt; l.sort(key = lambda item: item[1])\n&gt;&gt;&gt; l\n[('e', 0), ('b', 1), ('c', 2), ('a', 3), ('d', 5)]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You could use Counter and defaultdict in the Python 2.7 collections module in a two-step process.", "First use Counter to create a dictionary where each word is a key with the associated frequency count.", "This is fairly trivial."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "Counter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "and", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "defaultdict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "collections", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Counter", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Secondly defaultdict could be used to create an inverted or reversed dictionary where the keys are the frequency of occurrence and the associated values are lists of the word or words that were encountered that many times.", "Here's what I mean:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "defaultdict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from collections import Counter, defaultdict\n\nwordlist = ['red', 'yellow', 'blue', 'red', 'green', 'blue', 'blue', 'yellow']\n\n# count the frequency of occurrence of each word in list with that count\nwordfreq = Counter(wordlist)\n\n# invert the wordfreq dictionary so keys are\n# frequency of occurrence and values are the words\nfreqword = defaultdict(list)\nfor word, freq in wordfreq.items():\n    freqword[freq].append(word)\n\n# print in order of occurrence\noccurrences = freqword.keys()\noccurrences.sort()\nfor freq in occurrences:\n    freqword[freq].sort() # sort words in list\n    print 'count {}: {}'.format(freq, freqword[freq])\n\n# outputs\n# count 1: ['green']\n# count 2: ['red', 'yellow']\n# count 3: ['blue']\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Didn't know there was a Counter object for such a task.", "Here's how I did it back then, similar to your approach.", "You can do the sorting on a representation of the same dictionary."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Counter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #Takes a list and returns a descending sorted dict of words and their counts\ndef countWords(a_list):\n    words = {}\n    for i in range(len(a_list)):\n        item = a_list[i]\n        count = a_list.count(item)\n        words[item] = count\n    return sorted(words.items(), key = lambda item: item[1], reverse=True)\n</code>\n</pre>\n", "senID": 1}, {"text": ["An example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt;countWords(\"the quick red fox jumped over the lazy brown dog\".split())\n[('the', 2), ('brown', 1), ('lazy', 1), ('jumped', 1), ('over', 1), ('fox', 1), ('dog', 1), ('quick', 1), ('red', 1)]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I have just wrote a similar program, with the help of Stack Overflow guys:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from string import punctuation\nfrom operator import itemgetter\n\nN = 100\nwords = {}\n\nwords_gen = (word.strip(punctuation).lower() for line in open(\"poi_run.txt\")\n                                             for word in line.split())\n\nfor word in words_gen:\n    words[word] = words.get(word, 0) + 1\n\ntop_words = sorted(words.items(), key=itemgetter(1), reverse=True)[:N]\n\nfor word, frequency in top_words:\n    print (\"%s %d\" % (word, frequency))\n</code>\n</pre>\n", "senID": 1}]]