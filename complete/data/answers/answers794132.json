[[{"text": ["Compromise solution: Instead of a class, make Coord3D a namedtuple and return that :-)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "namedtuple", "tag": "a", "pos": 0, "childList": [{"text": "namedtuple", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields"}, {"text": "namedtuple", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Coord3D = namedtuple('Coord3D', 'x y z')\n\ndef getCoordinate(index):\n    # do stuff, creating variables x, y, z\n    return Coord3D(x, y, z)\n</code>\n</pre>\n", "senID": 2}, {"text": ["The return value can be used exactly as a tuple, and has the same speed and memory properties, so you don't lose any genericity.", "But you can also access its values by name: if c is the result of getCoordinate(index), then you can work with c.x, c.y, etc, for increased readibility."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "getCoordinate(index)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "c.x", "childNum": 0, "tag": "code", "childList": []}, {"text": "c.y", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["(obviously this is a bit less useful if your Coord3D class needs other functionality too)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["[if you're not on python2.6, you can get namedtuples from the cookbook recipe]"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "cookbook recipe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/500261/"}]}], [{"text": ["The more fundamental question is \"why do you have Coord3D class?", "\"  Why not just use a tuple?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The general advice most of us give to Python n00bz is \"don't invent new classes until you have to."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Does your Coord3D have unique methods?", "Perhaps you need a new class.", "Or -- perhaps -- you only need some functions that operate on tuples."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Does your Coord3D have changeable state?", "Hardly likely.", "An immutable tuple starts to look like a better representation than a new class."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If it's only going to be used in your application, and if you're going to create a Coord3D instance with the values anyway, I'd just return a Coord3D instance to save you the effort.", "If, however, you have any interest in making this portable/general, return a tuple.", "It'll be easy to create a Coord3D anyway, using"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Coord3D", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Coord3D", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "Coord3D", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n c3d = Coord3D(*getCoordinate(index))\n</code>\n</pre>\n", "senID": 1}, {"text": ["(assuming your constructor is Coord3D.__init__(self, x, y, z))"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Coord3D.__init__(self, x, y, z)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If other people (aside form yourself) will be using this class, it seems to me that returning an object would encourage some kind of uniformity in data types.", "If the Coord3D class has a method or property to access these coordinates as a tuple, then that still gives them that option, should they need it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # get the object\ncoord_obj = my_obj.getCoordinate(my_index)\n# get the tuple (for example, via a property named \"coords\")\ncoord_tup = my_obj.getCoordinate(my_index).coords\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Returning an object would be the best practice and would give you a better overall software design.", "I would recommend doing that"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But still, keep in mind that creating/returning an object will take more processing time.", "It could change something if you do this operation a LOT and in that case you might need to think about it..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Take a look at Will McGugan's Gameobjects library.", "He has a Vector3 class that can be initialized with another Vector3 object, a tuple, individual float values, etc.", "I think this will answer your question ... plus you may end up just using his library as it's already optimized and has plenty of useful methods already."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Gameobjects library", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/gameobjects/"}, {"text": "Vector3 class", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/gameobjects/source/browse/trunk/vector3.py"}]}], [{"text": ["I've asked myself the same question, albeit while doing 2D geometry stuff."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The answer I found for myself was that if I was planning to write a larger library, with more functions and whatnot, go ahead and return the Point, or in your case the Coord3D object.", "If it's just a hacky implementation, the tuple will get you going faster.", "In the end, it's just what you're going to do with it, and is it worth the effort."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]