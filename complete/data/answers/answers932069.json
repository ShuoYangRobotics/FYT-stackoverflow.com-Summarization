[[{"text": ["Mine is, basically, a directory called \"plugins\" which the main app can poll and then use imp.load_module to pick up files, look for a well-known entry point possibly with module-level config params, and go from there.", "I use file-monitoring stuff for a certain amount of dynamism in which plugins are active, but that's a nice-to-have."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Of course, any requirement that comes along saying \"I don't need [big, complicated thing] X; I just want something lightweight\" runs the risk of re-implementing X one discovered requirement at a time.", "But that's not to say you can't have some fun doing it anyway :)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Have a look at at this overview over existing plugin frameworks / libraries, it is a good starting point.", "I quite like yapsy, but it depends on your use-case."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "at this overview over existing plugin frameworks / libraries", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wehart.blogspot.com/2009/01/python-plugin-frameworks.html"}, {"text": "yapsy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://yapsy.sourceforge.net/"}]}], [{"text": ["module_example.py:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "module_example.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def plugin_main(*args **kwargs):\n    print args, kwargs\n</code>\n</pre>\n", "senID": 1}, {"text": ["loader.py:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "loader.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def load_plugin(name):\n    mod = __import__(\"module_%s\" % name)\n    return mod\n\ndef call_plugin(name, *args):\n    plugin = load_plugin(name)\n    plugin.plugin_main(*args)\n\ncall_plugin(\"example\", 1234)\n</code>\n</pre>\n", "senID": 3}, {"text": ["It's certainly \"minimal\", it has absolutely no error checking, probably countless security problems, it's not very flexible - but it should how simple a plugin system in Python can be.."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You probably want to look into the imp module too, although you can do a lot with just __import__, os.listdir and some string manipulation."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "imp", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/imp.html"}, {"text": "__import__", "childNum": 0, "tag": "code", "childList": []}, {"text": "os.listdir", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["While that question is really interesting, I think it's fairly hard to answer, without more details.", "What sort of application is this?", "Does it have a GUI?", "Is it a command-line tool?", "A set of scripts?", "A program with an unique entry point, etc..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Given the little information I have, I will answer in a very generic manner."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["What means do you have to add plugins? "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "You will probably have to add a configuration file, which will list the paths/directories to load. ", "tag": "none", "senID": 3}, {"text": "Another way would be to say \"any files in that plugin/ directory will be loaded\", but it has the inconvenient to require your users to move around files.", "tag": "none", "senID": 4}, {"text": "A last, intermediate option would be to require all plugins to be in the same plugin/ folder, and then to active/deactivate them using relative paths in a config file.", "tag": "none", "senID": 5}]}, {"text": ["On a pure code/design practice, you'll have to determine clearly what behavior/specific actions you want your users to extend.", "Identify the common entry point/a set of functionalities that will always be overridden, and determine groups within these actions.", "Once this is done, it should be easy to extend your application,"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Example using hooks, inspired from MediaWiki (PHP, but does language really matters?", "):"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "hooks", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import hooks\n\n# In your core code, on key points, you allow user to run actions:\ndef compute(...):\n    try:\n        hooks.runHook(hooks.registered.beforeCompute)\n    except hooks.hookException:\n        print('Error while executing plugin')\n\n    # [compute main code] ...\n\n    try:\n        hooks.runHook(hooks.registered.afterCompute)\n    except hooks.hookException:\n        print('Error while executing plugin')\n\n# The idea is to insert possibilities for users to extend the behavior \n# where it matters.\n# If you need to, pass context parameters to runHook. Remember that\n# runHook can be defined as a runHook(*args, **kwargs) function, not\n# requiring you to define a common interface for *all* hooks. Quite flexible :)\n\n# --------------------\n\n# And in the plugin code:\n# [...] plugin magic\ndef doStuff():\n    # ....\n# and register the functionalities in hooks\n\n# doStuff will be called at the end of each core.compute() call\nhooks.registered.afterCompute.append(doStuff)\n</code>\n</pre>\n", "senID": 8}, {"text": ["Another example, inspired from mercurial.", "Here, extensions only add commands to the hg commandline executable, extending the behavior."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "hg", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def doStuff(ui, repo, *args, **kwargs):\n    # when called, a extension function always receives:\n    # * an ui object (user interface, prints, warnings, etc)\n    # * a repository object (main object from which most operations are doable)\n    # * command-line arguments that were not used by the core program\n\n    doMoreMagicStuff()\n    obj = maybeCreateSomeObjects()\n\n# each extension defines a commands dictionary in the main extension file\ncommands = { 'newcommand': doStuff }\n</code>\n</pre>\n", "senID": 10}, {"text": ["For both approaches, you might need common initialize and finalize for your extension.", "You can either use a common interface that all your extension will have to implement (fits better with second approach; mercurial uses a reposetup(ui, repo) that is called for all extension), or use a hook-kind of approach, with a hooks.setup hook."], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "initialize", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "finalize", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["But again, if you want more useful answers, you'll have to narrow down your question ;)"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"text": ["Marty Allchin's simple plugin framework is the base I use for my own needs.", "I really recommand to take a look at it, I think it is really a good start if you want something simple and easily hackable.", "You can find it also as a Django Snippets."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Marty Allchin's simple plugin framework", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://martyalchin.com/2008/jan/10/simple-plugin-framework/"}, {"text": "as a Django Snippets", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.djangosnippets.org/snippets/542/"}]}], [{"text": ["I am a retired biologist who dealt with digital micrograqphs and found himself having to write an image processing and analysis package (not technically a library) to run on an SGi machine.", "I wrote the code in C and used Tcl for the scripting language.", "The GUI, such as it was, was done using Tk.", "The commands that appeared in Tcl were of the form \"extensionName commandName arg0 arg1 ... param0 param1 ...\", that is, simple space-separated words and numbers.", "When Tcl saw the \"extensionName\" substring, control was passed to the C package.", "That in turn ran the command through a lexer/parser (done in lex/yacc) and then called C routines as necessary.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The commands to operate the package could be run one by one via a window in the GUI, but batch jobs were done by editing text files which were valid Tcl scripts;  you'd pick the template that did the kind of file-level operation you wanted to do and then edit a copy to contain the actual directory and file names plus the package commands.", "It worked like a charm.", "Until ..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["1)  The world turned to PCs and 2) the scripts got longer than about 500 lines, when Tcl's iffy organizational capabilities started to become a real inconvenience.", "Time passed ..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I retired, Python got invented, and it looked like the perfect successor to Tcl.", "Now, I have never done the port, because I have never faced up to the challenges of compiling (pretty big) C programs on a PC, extending Python with a C package, and doing GUIs in Python/Gt?/Tk?/??.", "However, the old idea of having editable template scripts seems still workable.", "Also, it should not be too great a burden to enter package commands in a native Python form, e.g."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["packageName.command( arg0, arg1, ..., param0, param1, ...)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["A few extra dots, parens, and commas, but those aren't showstoppers."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I remember seeing that someone has done versions of lex and yacc in Python (try: http://www.dabeaz.com/ply/), so if those are still needed, they're around."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://www.dabeaz.com/ply/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/ply/"}]}, {"text": ["The point of this rambling is that it has seemed to me that Python itself IS the desired \"lightweight\" front end usable by scientists.", "I'm curious to know why you think that it is not, and I mean that seriously."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "hr", "senID": 8}, {"text": ["added later:  The application gedit anticipates plugins being added and their site has about the clearest explanation of a simple plugin procedure I've found in a few minutes of looking around.", "Try:  "], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "gedit", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["http://live.gnome.org/Gedit/PythonPluginHowTo"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "http://live.gnome.org/Gedit/PythonPluginHowTo", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://live.gnome.org/Gedit/PythonPluginHowTo"}]}, {"text": ["I'd still like to understand your question better.", "I am unclear whether you 1) want scientists to be able to use your (Python) application quite simply in various ways or 2) want to allow the scientists to add new capabilities to your application.", "Choice #1 is the situation we faced with the images and that led us to use generic scripts which we modified to suit the need of the moment.", "Is it Choice #2 which leads you to the idea of plugins, or is it some aspect of your application that makes issuing commands to it impracticable?"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["I enjoyed the nice discussion on different plugin architectures given by Dr Andre Roberge at Pycon 2009.", "He gives a good overview of different ways of implementing plugins, starting from something really simple."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Its available as a podcast.", "You can google it with \"pycon plugins monkeypatching podcast\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I recommend giving it a quick listen before you make a decision."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]