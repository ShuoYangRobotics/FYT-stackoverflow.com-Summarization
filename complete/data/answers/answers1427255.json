[[{"text": ["Take a look at Beaker:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Home Page"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Caching Documentation"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}]}], [{"text": ["I think the python memcached API is the prevalent tool, but I haven't used it myself and am not sure whether it supports the features you need."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the python memcached API", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.tummy.com/Community/software/python-memcached/"}]}], [{"code": "<pre>\n<code>\n import time\n\nclass CachedItem(object):\n    def __init__(self, key, value, duration=60):\n        self.key = key\n        self.value = value\n        self.duration = duration\n        self.timeStamp = time.time()\n\n    def __repr__(self):\n        return '&lt;CachedItem {%s:%s} expires at: %s&gt;' % (self.key, self.value, time.time() + self.duration)\n\nclass CachedDict(dict):\n\n    def get(self, key, fn, duration):\n        if key not in self \\\n            or self[key].timeStamp + self[key].duration &lt; time.time():\n                print 'adding new value'\n                o = fn(key)\n                self[key] = CachedItem(key, o, duration)\n        else:\n            print 'loading from cache'\n\n        return self[key].value\n\n\n\nif __name__ == '__main__':\n\n    fn = lambda key: 'value of %s  is None' % key\n\n    ci = CachedItem('a', 12)\n    print ci \n    cd = CachedDict()\n    print cd.get('a', fn, 5)\n    time.sleep(2)\n    print cd.get('a', fn, 6)\n    print cd.get('b', fn, 6)\n    time.sleep(2)\n    print cd.get('a', fn, 7)\n    print cd.get('b', fn, 7)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You might also take a look at the Memoize decorator.", "You could probably get it to do what you want without too much modification."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Memoize decorator", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/PythonDecoratorLibrary#Memoize"}]}], [{"text": ["Try redis, it is one of the cleanest and easiest solutions for applications to share data in a atomic way or if you have got some web server platform.", "Its very easy to setup, you will need a python redis client http://pypi.python.org/pypi/redis"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pypi.python.org/pypi/redis", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/redis"}]}], [{"text": ["Look at gocept.cache"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Look at bda.cache http://pypi.python.org/pypi/bda.cache - uses ZCA and is tested with zope and bfg."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pypi.python.org/pypi/bda.cache", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/bda.cache"}]}]]