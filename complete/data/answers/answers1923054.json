[[{"text": ["This sounds a lot like homework, so I'll give you a couple of pieces and let you fill in the rest."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To access a single character of string s, its s[x] where x is an integer index.", "Indices start at 0."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To get the integer value of a character it is ord(c) where c is the character.", "To cast an integer back to a character it is chr(x).", "Be careful of letters close to the end of the alphabet!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edit: if you have trouble coming up with what to do for Y and Z, leave a comment and I'll give a hint."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["This is done through the chr and ord functions.", "Eg; chr(ord(ch)+2) does what you want.", "These are fully described here."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "chr(ord(ch)+2)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html"}]}], [{"text": ["http://docs.python.org/library/functions.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/functions.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html"}]}, {"text": ["ord(c)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Given a string of length one, return an integer representing the Unicode code point of the character when the argument is a unicode object, or the value of the byte when the argument is an 8-bit string.", "For example, ord('a') returns the integer 97, ord(u'\\u2020') returns 8224.", "This is the inverse of chr() for 8-bit strings and of unichr() for unicode objects.", "If a unicode argument is given and Python was built with UCS2 Unicode, then the character\u2019s code point must be in the range [0..65535] inclusive; otherwise the string length is two, and a TypeError will be raised."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Try ord(), should do the trick :)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ord()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Normally, Just ord and add 2 and chr back, (Y, Z will give you unexpected result (\"[\",\"\\\")"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; chr(ord(\"A\")+2)\n'C'\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to change Y, Z to A, B, you could do like this."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; chr((ord(\"A\")-0x41+2)%26+0x41)\n'C'\n&gt;&gt;&gt; chr((ord(\"Y\")-0x41+2)%26+0x41)\n'A'\n&gt;&gt;&gt; chr((ord(\"Z\")-0x41+2)%26+0x41)\n'B'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Here is A to Z"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [chr((i-0x41+2)%26+0x41) for i in range(0x41,0x41+26)]\n['C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'A', 'B']\n</code>\n</pre>\n", "senID": 5}], [{"text": ["\"ord\" is only part of the solution.", "The puzzle you mentioned there rotates, so that \"X\"+3 rotates to \"A\".", "The most famous of these is rot-13, which rotates 13 characters.", "Applying rot-13 twice (rotating 26 characters) brings the text back to itself."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The easiest way to handle this is with a translation table."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import string\n\ndef rotate(letters, n):\n    return letters[n:] + letters[:n]\n\nfrom_letters = string.ascii_lowercase + string.ascii_uppercase\nto_letters = rotate(string.ascii_lowercase, 2) + rotate(string.ascii_uppercase, 2)\n\ntranslation_table = string.maketrans(from_letters, to_letters)\n\nmessage = \"g fmnc wms bgblr\"\nprint message.translate(translation_table)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Not a single ord() or chr() in here.", "That's because I'm answering a different question than what was asked.", ";)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["For a whole string this would be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"Anne\"\n&gt;&gt;&gt; ''.join([chr(ord(i)+2) for i in s]) \n'Cppg'\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's diffucult for 'Y', 'Z' ..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"Zappa\"\n&gt;&gt;&gt; ''.join([chr(ord(i)+2) for i in s]) \n'\\\\crrc'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Functions: chr, ord"], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "chr", "tag": "a", "pos": 0, "childList": [{"text": "chr", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#chr"}, {"text": "chr", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/functions.html#ord", "text": "ord", "childNum": 1, "tag": "a", "childList": [{"text": "ord", "tag": "code"}]}, {"text": "ord", "childNum": 0, "tag": "code", "childList": []}]}]]