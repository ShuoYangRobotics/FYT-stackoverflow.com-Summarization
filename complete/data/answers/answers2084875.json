[[{"text": ["What module contains the symbol you are trying to complete?", "Is it in the python stdlib?", "Or is it a third-party module?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Make sure that the module/package is in the PYTHONPATH."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In Vim, do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n :python import sys\n:python print sys.path\n</code>\n</pre>\n", "senID": 3}, {"text": ["To add the module's directory:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n :python sys.path.append(\"/path/to/directory/\")\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Since you were prudent and made certain your code is reachable by the PYTHONPATH, per codeape's suggestion, is there a possibility that you are running into the importbug for Vim Python omni-complete?", "This bug still exists as of Vim 7.2.245."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "importbug for Vim Python omni-complete", "tag": "a", "pos": 0, "childList": [{"text": "import", "tag": "code"}], "childNum": 1, "href": "http://groups.google.com/group/vim_dev/browse_thread/thread/58191d176ebd9722/d9cd31cee304b7df?pli=1"}, {"text": "import", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Essentially, if any import statement fails in the file you are working in, regardless of whether it's wrapped in a Try-Except clause, it will completely break omni-completion.", "It should be fairly easy to check for this, since most imports occur at the very beginning of the file."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "any", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Try-Except", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["If you do decide that this bug is the cause of your troubles, your options include:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "making sure that the modules you import are on the system path, not just the project files", "tag": "none", "senID": 3}, {"text": "commenting out any ", "tag": "none", "senID": 4}, {"text": "fixing the bug", "tag": "none", "senID": 5}, {"text": "using a different editor; Netbeans IDE has Python support, and the ", "tag": "none", "senID": 6}]}], [{"text": ["Sounds like the questioner has long since gone to the dark side*, but for what it's worth I've just had this symptom, and in my case the cause was that a module I was using relied on Python 2.7 but my version of Vim was compiled with Python 2.5."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To diagnose I tried :python import mymodule, which failed with an error about importing a dependent module.", "Then :python import dependentmodule which failed with the next step in the chain.", "And so on &amp; so on, until it failed trying to import a system module that was new since Python 2.7.", "Problem found."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": ":python import mymodule", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ":python import dependentmodule", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["To solve, I just did sudo port install vim +python27.", "But that's for OSX.", "YMMV."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "sudo port install vim +python27", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(* I'm kidding.", "Emacs users are our friends.", "It's the people programming in Notepad we all have to save...)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Have you tried using &lt;C_x&gt;&lt;C-]&gt; ?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "&lt;C_x&gt;&lt;C-]&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["c-x c-n works to get the list of members of an object."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "c-x c-n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I used supertab (http://www.vim.org/scripts/script.php?script_id=1643)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Since C-x C-o is a bit frustrating to use"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["in .vimrc:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n let g:SuperTabDefaultCompletionType = \"&lt;c-x&gt;&lt;c-o&gt;\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["then just use Tabb for omnicompletion"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]