[[{"text": ["Haven't tested this very extensively, but works in Python 2.5.2."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {\"x\":2, \"h\":15, \"a\":2222}\n&gt;&gt;&gt; it = iter(sorted(d.iteritems()))\n&gt;&gt;&gt; it.next()\n('a', 2222)\n&gt;&gt;&gt; it.next()\n('h', 15)\n&gt;&gt;&gt; it.next()\n('x', 2)\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use the sorted() function:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "sorted()", "tag": "a", "pos": 0, "childList": [{"text": "sorted()", "tag": "code"}], "childNum": 1, "href": "http://pydoc.org/2.5.1/__builtin__.html#-sorted"}, {"text": "sorted()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n return sorted(dict.iteritems())\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want an actual iterator over the sorted results, since sorted() returns a list, use:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "sorted()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n return iter(sorted(dict.iteritems()))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Greg's answer is right.", "Note that in Python 3.0 you'll have to do "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sorted(dict.items())\n</code>\n</pre>\n", "senID": 1}, {"text": ["as iteritems will be gone."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "iteritems", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["A dict's keys are stored in a hashtable so that is their 'natural order', i.e.", "psuedo-random.", "Any other ordering is a concept of the consumer of the dict."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["sorted() always returns a list, not a dict.", "If you pass it a dict.items() (which produces a list of tuples), it will return a list of tuples [(k1,v1), (k2,v2), ...] which can be used in a loop in a way very much like a dict, but it is not in anyway a dict!"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "it is not in anyway a dict", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n foo = {\n    'a':    1,\n    'b':    2,\n    'c':    3,\n    }\n\nprint foo\n&gt;&gt;&gt; {'a': 1, 'c': 3, 'b': 2}\n\nprint foo.items()\n&gt;&gt;&gt; [('a', 1), ('c', 3), ('b', 2)]\n\nprint sorted(foo.items())\n&gt;&gt;&gt; [('a', 1), ('b', 2), ('c', 3)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["The following feels like a dict in a loop, but it's not, it's a list of tuples being unpacked into k,v:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for k,v in sorted(foo.items()):\n    print k, v\n</code>\n</pre>\n", "senID": 4}, {"text": ["Roughly equivalent to:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n for k in sorted(foo.keys()):\n    print k, foo[k]\n</code>\n</pre>\n", "senID": 6}], [{"text": ["sorted returns a list, hence your error when you try to iterate over it,\nbut because you can't order a dict you will have to deal with a list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I have no idea what the larger context of your code is, but you could try adding an\niterator to the resulting list.", "like this maybe?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n return iter(sorted(dict.iteritems()))\n</code>\n</pre>\n", "senID": 2}, {"text": ["of course you will be getting back tuples now because sorted turned your dict into a list of tuples"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["ex:\n say your dict was:\n {'a':1,'c':3,'b':2}\nsorted turns it into a list:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "{'a':1,'c':3,'b':2}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [('a',1),('b',2),('c',3)]\n</code>\n</pre>\n", "senID": 5}, {"text": ["so when you actually iterate over the list you get back (in this example) a tuple\ncomposed of a string and an integer, but at least you will be able to iterate over it."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["If you want to sort by the order that items were inserted instead of of the order of the keys, you should have a look to Python's collections.OrderedDict.", "(Python 3 only)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "collections.OrderedDict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/py3k/library/collections.html?highlight=collections.ordereddict#collections.OrderedDict"}]}]]