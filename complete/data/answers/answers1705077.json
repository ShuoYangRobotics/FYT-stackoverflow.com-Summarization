[[{"text": ["To start/stop python sub processes you can use the subprocess module.", "To check whether they are running you might use psutil: "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "psutil", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/psutil/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import psutil\n&gt;&gt;&gt; pid = 1034  # some pid\n&gt;&gt;&gt; p = psutil.Process(pid)\n&gt;&gt;&gt; p.is_running()\nTrue\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Checking the list of running processes is accomplished (even by core utilities like \"ps\") by looking at the contents of the /proc directory."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As such, the library you're interested for querying running processes is the same as used for working with any other files and directories (i.e.", "sys or os, depending on the flavor you're after.", "Pay special attention to os.path though, it does most of what you're after).", "To terminate or otherwise interact with processes, you send them signals, which is accomplished with os.kill.", "Finally, you start new processes using  os.popen and friends."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "sys", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "os", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "os.path", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "os.kill", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "os.popen", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}], [{"text": ["Since you said this is a Linux server, calling the external ps binary is usually slower, uses more resources and is more error prone than using the information from /proc directly."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ps", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "/proc", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Since nobody else mentioned, one simple way is:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n glob.glob('/proc/[0-9]*/')\n</code>\n</pre>\n", "senID": 2}, {"text": ["Good luck."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["This is what i use.", "It uses procfs (so you are limited to Unix like systems, will not work on macs i think) and the previously mentioned glob.", "It also gets the cmdline, which allows you to identify the process.", "For killing the process you can use os.kill(signal.SIGTERM, pid).", "For using subprocess, please check this post http://stackoverflow.com/questions/337863/python-popen-and-select-waiting-for-a-process-to-terminate-or-a-timeout/1035488#1035488"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "os.kill(signal.SIGTERM, pid)", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "http://stackoverflow.com/questions/337863/python-popen-and-select-waiting-for-a-process-to-terminate-or-a-timeout/1035488#1035488", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/337863/python-popen-and-select-waiting-for-a-process-to-terminate-or-a-timeout/1035488#1035488"}]}, {"code": "<pre>\n<code>\n def list_processes():\n    \"\"\"\n    This function will return an iterator with the process pid/cmdline tuple\n\n    :return: pid, cmdline tuple via iterator\n    :rtype: iterator\n\n    &gt;&gt;&gt; for procs in list_processes():\n    &gt;&gt;&gt;     print procs\n    ('5593', '/usr/lib/mozilla/kmozillahelper')\n    ('6353', 'pickup -l -t fifo -u')\n    ('6640', 'kdeinit4: konsole [kdeinit]')\n    ('6643', '/bin/bash')\n    ('7451', '/usr/bin/python /usr/bin/ipython')\n    \"\"\"\n    for pid_path in glob.glob('/proc/[0-9]*/'):\n\n        # cmdline represents the command whith which the process was started\n        f = open(\"%s/cmdline\" % pid_path)\n        pid = pid_path.split(\"/\")[2] # get the PID\n        # we replace the \\x00 to spaces to make a prettier output from kernel\n        cmdline = f.read().replace(\"\\x00\", \" \").rstrip()\n        f.close()\n\n        yield (pid, cmdline)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The os module is probably your friend.", "There's os.kill, for instance to kill a process."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.kill", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["In terms of getting a list of processes, you'll probably want to shell out to the ps command.", "This question has more information on that."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "ps", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "This question", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/160245"}]}], [{"text": ["Python subprocess http://docs.python.org/library/subprocess.html might help you.", "If you create a process with subprocess, you can use Popen.terminate() function to stop it. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/subprocess.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html"}]}], [{"text": ["I'd use PSutil.", "To provide a practical example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import psutil\n\nfor proc in psutil.get_process_list():\n    if proc.username == 'yourusername':\n        if myappname in proc.cmdline:\n            print 'App is running'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Alternatively, Red Hat use and maintain a Python module called python-linux-procfs , which natively parses /proc, to manage processes.", "it's not very well publicized, but provides some additional Linux-specific features (eg, scheduling class) which are sometimes useful."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "python-linux-procfs", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["http://pkgs.fedoraproject.org/gitweb/?p=python-linux-procfs.git "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://pkgs.fedoraproject.org/gitweb/?p=python-linux-procfs.git", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pkgs.fedoraproject.org/gitweb/?p=python-linux-procfs.git"}]}]]