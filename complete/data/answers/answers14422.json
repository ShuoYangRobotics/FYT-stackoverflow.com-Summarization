[[{"text": ["I agree that that tutorial is flawed, throwing random, unexplained code right in front of your eyes.", "It introduces concepts such as the autorelease pool and user defaults without explaining why you would want them (\"Autorelease pool for memory management\" is hardly an explanation)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That said\u2026"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'm afraid that for the time being, you will need a basic grasp of ObjC in order to benefit from any language that uses Cocoa.", "PyObjC, RubyCocoa, Nu and others are niches at best, and all of them were developed by people intimately familiar with the ins and outs of ObjC and Cocoa."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "will", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "and", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["For now, you will benefit the most if you realistically see those bridges as useful where scripting languages truly shine, rather than trying to build a whole application with them.", "While this has been done (with LimeChat, I'm using a RubyCocoa-written app right now), it is rare and likely will be for a while."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "has", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["To be blunt:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want to be an effective Cocoa programmer, you must learn Objective-C.  End of story."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Neither Python or Ruby are a substitute for Objective-C via their respective bridges.", "You still have to understand the Objective-C APIs, the behaviors inherent to NSObject derived classes, and many other details of Cocoa."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["PyObjC and RubyCocoa are a great way to access Python or Ruby functionality from a Cocoa application, including building a Cocoa application mostly -- if not entirely -- in Python or Ruby.", "But success therein is founded upon a thorough understanding of Cocoa and the Objective-C APIs it is composed of."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The main reason for the lack of documentation for PyObjC is that there is one developer (me), and as most developers I don't particularly like writing documentation.", "Because PyObjC is a side project for me I tend to focus on working on features and bugfixes, because that's more interesting for me."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The best way to improve the documentation is to volunteer to help on the pyobjc-dev mailing list. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As an aside: the pythonmac-sig mailinglist (see google) is an excelent resource for getting help on Python on MacOSX (not just PyObjC)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Tom's and Martin's response are definitely true (in just about any open source project, you'll find that most contributors are particularly interested in, well, developing; not so much in semi-related matters such as documentation), but I don't think your particular question at the end would fit well inside PyObjC documentation."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "developing", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n NSThread.detachNewThreadSelector_toTarget_withObject_(\"queryController\", self, None)\n</code>\n</pre>\n", "senID": 1}, {"text": ["NSThread is part of the Cocoa API, and as such documented over at Apple, including the particular method + detachNewThreadSelector:toTarget:withObject: (I'd link there, but apparently stackoverflow has bugs with parsing it).", "The CocoaDev wiki also has an article."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "NSThread", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "documented over at Apple", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSThread_Class/Reference/Reference.html"}, {"text": "+ detachNewThreadSelector:toTarget:withObject:", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "also has an article", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://cocoadev.com/index.pl?NSThread"}]}, {"text": ["I don't think it would be a good idea for PyObjC to attempt to document Cocoa, other than a few basic examples of how to use it from within Python.", "Explaining selectors is also likely outside the scope of PyObjC, as those, too, are a feature of Objective-C, not PyObjC specifically."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I stumbled across a good tutorial on PyObjC/Cocoa:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://lethain.com/entry/2008/aug/22/an-epic-introduction-to-pyobjc-and-cocoa/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://lethain.com/entry/2008/aug/22/an-epic-introduction-to-pyobjc-and-cocoa/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://lethain.com/entry/2008/aug/22/an-epic-introduction-to-pyobjc-and-cocoa/"}]}], [{"text": ["Although I basically agree with Soeren's response, I'd take it even further:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It will be a long time, if ever, before you can use Cocoa without some understanding of Objective C.  Cocoa isn't an abstraction built independently from Objective C, it is explicitly tied to it.", "You can see this in the example line of code you quoted above:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n NSThread.detachNewThreadSelector_toTarget_withObject_(\"queryController\", self, None)\n</code>\n</pre>\n", "senID": 2}, {"text": ["This is the Python way of writing the Objective C line:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [NSThread detachNewThreadSelector:@selector(queryController:) toTarget:self withObject:nil];\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now, it's important to notice here that this line can be seen in two ways:  (1) as a line of Objective C, or (2) as an invocation of the Cocoa frameworks.", "We see it as (1) by the syntax.", "We see it as (2) by recognizing that NSThread is a Cocoa framework which provides a set of handy features.", "In this case, this particular Cocoa framework is making it easy for us to have an object start doing something on a new thread."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["But the kicker is this:  The Cocoa framework here (NSThread) is providing us this handy service in a way that is explicitly tied to the language the framework has been written in.", "Namely, NSThread gave us a feature that explicitly refers to \"selectors\".", "Selectors are, in point of fact, the name for something fundamental about how Objective C works."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["So there's the rub.", "Cocoa is fundamentally an Objective-C creation, and its creators have built it with Objective C in mind.", "I'm not claiming that it's impossible to translate the interface to the Cocoa features into a form more natural for other languages.", "It's just that as soon as you change the Cocoa framework to stop referring to \"selectors\", it's not really the Cocoa framework any more.", "It's a translated version.", "And once you start going down that road, I'm guessing things get really messy.", "You're trying to keep up with Apple as they update Cocoa, maybe you hit some parts of Cocoa that just don't translate well into the new language, whatever.", "So instead, things like PyObjC opt to expose Cocoa directly, in a way that has a very clear and simple correlation.", "As they say in the documentation:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Sure, it's a bit ugly, and it does mean you need to know something about Objective-C, but that's because the alternative, if one truly exists, is not necessarily better."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["I didn't know anything at all about Objective C or Cocoa (but plenty about Python), but I am now writing a rather complex application in PyObjc.", "How did I learn?", "I picked up Cocoa Programming for OSX and went through the whole book (a pretty quick process) using PyObjC.", "Just ignore anything about memory management and you'll pretty much be fine.", "The only caveat is that very occasionally you have to use a decorator like endSheetMethod (actually I think that's the only one I've hit):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Cocoa Programming for OSX", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0321503619"}]}, {"code": "<pre>\n<code>\n @PyObjcTools.AppHelper.endSheetMethod\ndef alertEnded_code_context_(self, alert, choice, context):\n    pass\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This answer isn't going to be very helpful but, as a developer I hate doing documentation.", "This being a opensource project, it's hard to find people to do documentation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Tom says it all really.", "Lots of open source projects have dedicated developers and few who are interested in documenting.", "It isn't helped by the fact that goalposts can shift on a daily basis which means documentation not only has to be created, but maintained."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]