[[{"text": ["There are two options I'm aware of."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One, change the PYTHONPATH environment variable to include the directory above your module."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PYTHONPATH", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Alternatively, edit ~/.pylintrc to include the directory above your module, like this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "~/.pylintrc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [General]\ninit-hook='import sys; sys.path.append(\"/path/to/root\")'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Both of these options ought to work."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Hope that helps."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Do you have an empty __init__.py file in both directories to let python know that the dirs are modules?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The basic outline when you are not running from within the folder (ie maybe from pylint's, though I haven't used that) is:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n topdir\\\n  __init__.py\n  functions_etc.py\n  subdir\\\n    __init__.py\n    other_functions.py\n</code>\n</pre>\n", "senID": 2}, {"text": ["This is how the python interpreter is aware of the module without reference to the current directory, so if pylint is running from its own absolute path it will be able to access functions_etc.py as topdir.functions_etc or topdir.subdir.other_functions, provided topdir is on the PYTHONPATH."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "functions_etc.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "topdir.functions_etc", "childNum": 0, "tag": "code", "childList": []}, {"text": "topdir.subdir.other_functions", "childNum": 0, "tag": "code", "childList": []}, {"text": "topdir", "childNum": 0, "tag": "code", "childList": []}, {"text": "PYTHONPATH", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["UPDATE: If the problem is not the __init__.py file, maybe just try copying or moving your module to c:\\Python26\\Lib\\site-packages -- that is a common place to put additional packages, and will definitely be on your pythonpath.", "If you know how to do Windows symbolic links or the equivalent (I don't!", "), you could do that instead.", "There are many more options here:http://docs.python.org/install/index.html, including the option of appending sys.path with the user-level directory of your development code, but in practice I usually just symbolically link my local development dir to site-packages - copying it over has the same effect."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "c:\\Python26\\Lib\\site-packages", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "here:", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.python.org/install/index.html"}, {"href": "http://docs.python.org/install/index.html", "text": "http://docs.python.org/install/index.html", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Maybe by manually appending the dir inside the PYTHONPATH?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sys.path.append(dirname)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Try", "childNum": 0, "tag": "strike", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if __name__ == '__main__':\n    from [whatever the name of your package is] import one\nelse:\n    import one\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that in Python 3, the syntax for the part in the else clause would be"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "else", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from .. import one\n</code>\n</pre>\n", "senID": 3}, {"senID": 4}, {"text": ["On second thought, this probably won't fix your specific problem.", "I misunderstood the question and thought that two.py was being run as the main module, but that is not the case.", "And considering the differences in the way Python 2.6 (without importing absolute_import from __future__) and Python 3.x handle imports, you wouldn't need to do this for Python 2.6 anyway, I don't think."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "absolute_import", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "__future__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Still, if you do eventually switch to Python 3 and plan on using a module as both a package module and as a standalone script inside the package, it may be a good idea to keep\nsomething like"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n if __name__ == '__main__':\n    from [whatever the name of your package is] import one   # assuming the package is in the current working directory or a subdirectory of PYTHONPATH\nelse:\n    from .. import one\n</code>\n</pre>\n", "senID": 7}, {"text": ["in mind."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["EDIT: And now for a possible solution to your actual problem.", "Either run PyLint from the directory containing your one module (via the command line, perhaps), or put the following code somewhere when running PyLint:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "one", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import os\n\nolddir = os.getcwd()\nos.chdir([path_of_directory_containing_module_one])\nimport one\nos.chdir(olddir)\n</code>\n</pre>\n", "senID": 10}, {"text": ["Basically, as an alternative to fiddling with PYTHONPATH, just make sure the current working directory is the directory containing one.py when you do the import."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "one.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(Looking at Brian's answer, you could probably assign the previous code to init_hook, but if you're going to do that then you could simply do the appending to sys.path that he does, which is slightly more elegant than my solution."], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "init_hook", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sys.path", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I don't know how it works with WingIDE, but for using PyLint with Geany, I set my external command to:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n PYTHONPATH=${PYTHONPATH}:$(dirname %d) pylint --output-format=parseable --reports=n \"%f\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["where %f is the filename, and %d is the path.", "Might be useful for someone :)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["One workaround that I only just discovered is to actually just run PyLint for the entire package, rather than a single file.", "Somehow, it manages to find imported module then."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]