[[{"text": ["Insert all the data into another empty table (called userchanges, say) then UPDATE in a single batch:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n UPDATE jiveuser\nSET username = userchanges.username\nFROM userchanges\nWHERE userchanges.userid = jiveuser.userid\n    AND userchanges.username &lt;&gt; jiveuser.username\n</code>\n</pre>\n", "senID": 1}, {"text": ["See this documentation on the COPY command for bulk loading your data."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "the COPY command", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.postgresql.org/docs/8.1/interactive/sql-copy.html"}]}, {"text": ["There are also tips for improving performance when populating a database."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "tips for improving performance when populating a database", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.postgresql.org/docs/8.1/interactive/populate.html"}]}], [{"text": ["First of all, do not use the % operator to construct your SQL.", "Instead, pass your tuple of arguments as the second parameter to cursor.execute, which also negates the need to quote your argument and allows you to use %s for everything:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 0, "tag": "b", "pos": 0, "childList": []}, {"text": "cursor.execute", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n cursor.execute(\"UPDATE jiveuser SET username = %s WHERE userid = %s\", (newName, userId))\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is important to prevent SQL Injection attacks."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "SQL Injection attacks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/SQL_injection"}]}, {"text": ["To answer your question, you can speed up these updates by creating an index on the userid column, which will allow the database to update in O(1) constant time rather than having to scan the entire database table, which is O(n).", "Since you're using PostgreSQL, here's the syntax to create your index:"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "userid", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "O(1)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "O(n)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n CREATE INDEX username_lookup ON jiveuser (userid);\n</code>\n</pre>\n", "senID": 4}, {"text": ["EDIT: Since your comment reveals that you already have an index on the userid column, there's not much you could possibly do to speed up that query.", "So your main choices are either living with the slowness, since this sounds like a one-time fix-something-broken thing, or following VeeArr's advice and testing whether cursor.executemany will give you a sufficient boost."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "userid", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "VeeArr", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://www.java2s.com/Tutorial/Python/0300__Database/executemanyforbatchupdate.htm", "text": "cursor.executemany", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["The reason it's taking so long is probably that you've got autocommit enabled and each update gets done in its own transaction."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is slow because even if you have a battery-backed raid controller (which you should definitely have on all database servers, of course), it still needs to do a write into that device for every transaction commit to ensure durability."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The solution is to do more than one row per transaction.", "But don't make transactions TOO big or you run into problems too.", "Try committing every 10,000 rows of changes as a rough guess."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You might want to look into executemany(): Information here"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "executemany()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://www.java2s.com/Tutorial/Python/0300__Database/executemanyforbatchupdate.htm", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Perhaps you can create an index on userid to speed things up."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I'd do an explain on this.", "If it's doing an indexed lookup to find the record -- which it should if you have an index on userid -- then I don't see what you could do to improve performance.", "If it's not using the index, then the trick is figuring out why not and fixing it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Oh, you could try using a prepared statement.", "With 9500 inserts, that should help."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Move this to a stored procedure and execute it from the database self. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["First ensure you have an index on 'userid', this will ensure the dbms doesn't have to do a table scan each time"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n CREATE INDEX jiveuser_userid ON jiveuser (userid);\n</code>\n</pre>\n", "senID": 1}, {"text": ["Next try preparing the statement, and then calling execute on it.", "This will stop the optimizer from having to examine the query each time"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n PREPARE update_username(string,integer) AS UPDATE jiveuser SET username = $1 WHERE userid = $2;\nEXECUTE update_username(\"New Name\", 123);\n</code>\n</pre>\n", "senID": 3}, {"text": ["Finally, a bit more performance could be squeezed out by turning off autocommit"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n \\set autocommit off\n</code>\n</pre>\n", "senID": 5}]]