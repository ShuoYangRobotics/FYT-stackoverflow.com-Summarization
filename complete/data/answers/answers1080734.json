[[{"text": ["Check out What's New in Python.", "It has all the versions in the 2.x series.", "Per Alex's comments, you'll want to look at all Python 2.x for x > 2."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "What's New in Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/whatsnew/"}]}, {"text": ["Highlights for day-to-day coding:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Enumeration: Instead of doing:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Enumeration", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in xrange(len(sequence)):\n    val = sequence[i]\n    pass\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can now more succinctly write:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n for i, val in enumerate(iterable):\n    pass\n</code>\n</pre>\n", "senID": 5}, {"text": ["This is important because it works for non-getitemable iterables (you would otherwise have to use an incrementing index counter alongside value iteration)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Logging: a sane alternative to print-based debugging, standardized in a Log4j-style library module."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Logging", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Booleans: True and False, added for clarity: return True clearer intention than return 1."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "Booleans", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "return True", "childNum": 0, "tag": "code", "childList": []}, {"text": "return 1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Generators: An expressive form of lazy evaluation"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Generators", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n evens = (i for i in xrange(limit) if i % 2 == 0)\n</code>\n</pre>\n", "senID": 10}, {"text": ["Extended slices: Builtins support strides in slices."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "Extended slices", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n assert [1, 2, 3, 4][::2] == [1, 3]\n</code>\n</pre>\n", "senID": 12}, {"text": ["Sets: For O(1) lookup semantics, you no longer have to do:"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "Sets", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n pseudo_set = {'foo': None, 'bar': None}\nassert 'foo' in pseudo_set\n</code>\n</pre>\n", "senID": 14}, {"text": ["You can now do:"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n set_ = set(['foo', 'bar'])\nassert 'foo' in set_\n</code>\n</pre>\n", "senID": 16}, {"text": ["Reverse iteration: reversed(sequence) is more readable than sequence[::-1]."], "childNum": 3, "tag": "p", "senID": 17, "childList": [{"text": "Reverse iteration", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "reversed(sequence)", "childNum": 0, "tag": "code", "childList": []}, {"text": "sequence[::-1]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Subprocess: Unifies all the ways you might want to invoke a subprocess -- capturing outputs, feeding input, blocking or non-blocking."], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "Subprocess", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Conditional expressions: There's an issue with the idiom:"], "childNum": 1, "tag": "p", "senID": 19, "childList": [{"text": "Conditional expressions", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a and b or c\n</code>\n</pre>\n", "senID": 20}, {"text": ["Namely, when b is falsy.", "b if a else c resolves that issue."], "childNum": 1, "tag": "p", "senID": 21, "childList": [{"text": "b if a else c", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Context management: Resource acquisition/release simplified via the with statement."], "childNum": 2, "tag": "p", "senID": 22, "childList": [{"text": "Context management", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "with", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n with open(filename) as file:\n    print file.read()\n# File is closed outside the `with` block.\n</code>\n</pre>\n", "senID": 23}, {"text": ["Better string formatting: Too much to describe -- see Python documentation under str.format()."], "childNum": 2, "tag": "p", "senID": 24, "childList": [{"text": "Better string formatting", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "str.format()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Mark(author of the book) had some comments on this.", "I've shamelessly copied the related paragraph here:\n\"\"\"If you choose Python 2, I can only recommend \"Dive Into Python\" chapters 2-7, 13-15, and 17.", "The rest of the book is horribly out of date.", "\"\"\""], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "some comments", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.reddit.com/r/Python/comments/8miar/im%5Fnew%5Fto%5Fpython%5Fshould%5Fi%5Fread%5Fdive%5Finto%5Fpython%5F3/c09s45y"}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}], [{"text": ["Here's a couple of examples of the sort of answer I was thinking of:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Instead of the and-or trick, 2.5 offers a new way to write conditional expressions."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "and-or trick", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.net/power_of_introspection/and_or.html#d0e9975"}, {"href": "http://docs.python.org/whatsnew/2.5.html?highlight=with_statement#pep-308-conditional-expressions", "text": "conditional expressions", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n #and-or trick:\nx = condition and 'true_value' or 'false_value'\n\n#new in 2.5:\nx = 'true_value' if condition else 'false_value'\n</code>\n</pre>\n", "senID": 2}, {"text": ["has_key() is deprecated in favor of key in d."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "is deprecated", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html?highlight=has_key#dict.has_key"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt;d={'key':'value','key2':'value2'}\n&gt;&gt;&gt;'key1' in d\n True\n</code>\n</pre>\n", "senID": 4}], [{"text": ["A few \"minor\" features were added in 2.4 and are pervasive in new 2.x python code: decorator (2.4) and try/except/finally clauses.", "Before you could not do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    do_something()\nexcept FunkyException:\n    handle_exception():\nfinally:\n    clean_up()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Both are essentially syntactic sugar, though, since you could do the same, just with a bit more code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n import antigravity\n</code>\n</pre>\n", "senID": 0}, {"text": ["See the documentation"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "See the documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://imgs.xkcd.com/comics/python.png"}]}], [{"text": ["I suggest that you read the \u201cwhat's in Python 2.x?\u201d documents.", "Some things that may have missed:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "New-style classes (allows standard types subtyping, properties, ...).", "tag": "none", "senID": 1}, {"text": "The ", "tag": "none", "senID": 2}]}]]