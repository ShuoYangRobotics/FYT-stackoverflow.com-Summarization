[[{"text": ["What about filecmp module?", "It can do file comparison in many different ways with different tradeoffs."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filecmp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["And even better, it is part of the standard library:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://docs.python.org/library/filecmp.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/library/filecmp.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/filecmp.html"}]}], [{"text": ["Ok, this might need two separate answers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you have many files to compare, go for the checksum and cache the checksum for each file.", "To be sure, compare matching files byte for byte afterwards."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you have only two files, go directly for byte comparison because you have to read the file anyway to compute the checksum."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In both cases, use the file size as an early way of checking for inequality."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["use hashlib to get the md5 of each file, and compare the results. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #! /bin/env python\nimport hashlib\ndef filemd5(filename, block_size=2**20):\n    f = open(filename)\n    md5 = hashlib.md5()\n    while True:\n        data = f.read(block_size)\n        if not data:\n            break\n        md5.update(data)\n    f.close()\n    return md5.digest()\n\nif __name__ == \"__main__\":\n    a = filemd5('/home/neo/todo')\n    b = filemd5('/home/neo/todo2')\n    print(a == b)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Update: As of Python 2.1 there is a filecmp module that does just what you want, and has methods to compare directories too.", "I never knew about this module, I'm still learning Python myself :-)"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "filecmp module", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/filecmp.html"}, {"text": "I never knew about this module, I'm still learning Python myself :-)", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import filecmp\n&gt;&gt;&gt; filecmp.cmp('undoc.rst', 'undoc.rst')\nTrue\n&gt;&gt;&gt; filecmp.cmp('undoc.rst', 'index.rst')\nFalse\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Before attempting any of the other solutions, you might want to do os.path.getsize(...) on both files.", "If that differs, there is no need to compare bytes or calculate checksum."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.path.getsize(...)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Of course, this only helps if the filesize isn't fixed."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def foo(f1, f2):\n    if not os.path.getsize(f1) == os.path.getsize(f2):\n        return False # Or similar\n\n    ... # Checksumming / byte-comparing / whatever\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I would do checksum with MD5 (for example) instead of byte comaprasion plus the date check and depend on you needs name check."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What about shelling out to cmp?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "cmp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import commands\nstatus, output = commands.getstatusoutput(\"/usr/bin/cmp file1 file2\")\nif (status == 0):\n  print \"files are same\"\nelif (status == 1):\n  print \"files differ\"\nelse:\n  print \"uh oh!\"\n</code>\n</pre>\n", "senID": 1}]]