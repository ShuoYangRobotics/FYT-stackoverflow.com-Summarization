[[{"text": ["I'm not sure what \"it fails\" means, so I'll just mention that __import__('structures.index') should, in fact, work, but it doesn't assign the module name in the current scope.", "To do that (and then use a class in the dynamically imported module), you'll have to use:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__import__('structures.index')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n structures = __import__('structures.index')\nstructures.index.SomeClass(...)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The complete details on __import__ are available here."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "__import__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/functions.html#%5F%5Fimport%5F%5F", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Edit: (based on question edit)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Edit: (based on question edit)", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["To import neoform.structures.index, and return the index module, you would do the following:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "neoform.structures.index", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "index", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n structures = __import__('neoform.structures.index', \n                        fromlist=['does not in fact matter what goes here!'])\n</code>\n</pre>\n", "senID": 5}, {"text": ["So if you have a list of package names packages, you can import their index modules and instantiate some MyClass class for each using the following code:"], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "packages", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "index", "childNum": 0, "tag": "code", "childList": []}, {"text": "MyClass", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n modules = [ __import__('neoform.%s.index' % pkg, fromlist=['a']) \n            for pkg in packages ]\nobjects = [ m.MyClass() for m in modules ]\n</code>\n</pre>\n", "senID": 7}], [{"text": ["To import sub-modules, you need to specify them in the fromlist arg of __import__() Fo example, the equivalent of:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "fromlist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__import__()", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"code": "<pre>\n<code>\n import structures.index\n</code>\n</pre>\n", "senID": 1}, {"text": ["is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n structures = __import__('structures', fromlist=['index'])\n</code>\n</pre>\n", "senID": 3}, {"text": ["To do this in a map is a little more tricky..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import mod1.index\nimport mod2.index\nimport mod3.index\n</code>\n</pre>\n", "senID": 5}, {"text": ["For those imports, you would want to define a new function to get the index sub-module from each module:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "index", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def getIndexMods(mod_names):\n  mod_list = map(lambda x: __import__(x, fromlist='index'))\n  index_mods = [mod.index for mod in mod_list]\n  return index_mods\n</code>\n</pre>\n", "senID": 7}, {"text": ["Now, you can do this to get references to all index modules:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n index_mods = getIndexMods(['mod1', 'mod2', 'mod3'])\n</code>\n</pre>\n", "senID": 9}, {"text": ["Also, if you want to grab sub-modules that are not named 'index' then you could do this:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n mod1, mod2, mod3 = map(lambda x,y: __import__(x, fromlist=y), \n  ['mod1', 'mod2', 'mod3'], ['index1', 'index2', 'index3'])\n</code>\n</pre>\n", "senID": 11}], [{"text": ["Use full scope (\"neoform.structures.index\") with this helper method."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def import_module(name):\n    mod = __import__(name)\n    components = name.split('.')\n    for comp in components[1:]:\n        mod = getattr(mod, comp)\n    return mod\n\nmodule = import_module(\"neoform.structures.index\")\n# do stuff with module\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Java programmer here, but I think you need the imp module"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "imp module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/imp.html"}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import imp\n&gt;&gt;&gt; fm = imp.find_module('index', ['./structures']) # for submodule\n&gt;&gt;&gt; mymod = imp.load_module('structures.index', *fm)\n&gt;&gt;&gt; mymod\n&lt;module 'structures.index' from './structures/index.pyc'&gt;\n&gt;&gt;&gt; x = mymod.insideIndex()\nInitialising index class...\n</code>\n</pre>\n", "senID": 0}, {"text": ["Voila!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Why on earth would you replace"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import structures.index\n</code>\n</pre>\n", "senID": 1}, {"text": ["with"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n map(__import__, [\"structures.index\"])\n</code>\n</pre>\n", "senID": 3}, {"text": ["The first one (a) works, (b) is dynamic and (c) is directly supported.", "What possible use case is there for replacing easy-to-change, plain-text source with something more complex?"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["In short: don't do this.", "It doesn't have any value."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "hr", "senID": 6}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The \"I'm getting the import from a database\" is a noble effort, but still not sensible.", "What code block depends on those imports?", "That whole code block -- imports and all -- is what you want to execute.", "That whole code block -- imports, statements and everything -- should be a plain old python module file."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Import that block of code from the file system.", "Use the database to identify which file, the author of the file -- anything you want to use the database for.", "But simply import and execute the module the simplest possible way."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]]