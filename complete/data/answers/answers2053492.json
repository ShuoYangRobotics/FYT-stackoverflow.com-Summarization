[[{"text": ["Using any() to find out if there is an element satisfying the conditions:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "any()", "tag": "a", "pos": 0, "childList": [{"text": "any()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#any"}, {"text": "any()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; any(item['color'] == 'red' and item['time'] != 2  for item in thelist)\nFalse\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def colorRedAndTimeNotEqualTo2(thelist):\n    for i in thelist:\n        if i[\"color\"] == \"red\" and i[\"time\"] != 2:\n            return True\n    return False\n\nprint colorRedAndTimeNotEqualTo2([{'color':'green', 'time':4}, {'color':'red','time':2},{'color':'blue','time':5}])\n</code>\n</pre>\n", "senID": 0}, {"text": ["for i in thelist iterates through thelist, assigning the current element to i and doing the rest of the code in the block (for each value of i)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Thanks for the catch, Benson."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can do most of the list manipulation in a list comprehension.", "Here's one that makes a list of times for all elements where the color is red.", "Then you can ask if 2 exists in those times.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n thelist = [{'color':'green', 'time':4}, {'color':'red','time':2},{'color':'blue','time':5}]\nreds = ( x['time'] == 2 for x in thelist if x['color'] == red )\nif False in reds:\n  do_stuff()\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can condense that even further by eliminating the variable \"reds\" like this: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n thelist = [{'color':'green', 'time':4}, {'color':'red','time':2},{'color':'blue','time':5}]\nif False in ( x['time'] == 2 for x in thelist if x['color'] == red ):\n  do_stuff()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Well, there's nothing as elegant as \"find\" but you can use a list comprehension:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n matches = [x for x in thelist if x[\"color\"] == \"red\" and x[\"time\"] != 2]\nif len(matches):\n    m = matches[0]\n    # do something with m\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, I find the [0] and len() tedious.", "I often use a for loop with an array slice, such as:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n matches = [x for x in thelist if x[\"color\"] == \"red\" and x[\"time\"] != 2]\nfor m in matches[:1]:\n    # do something with m\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n list = [{'color':'green', 'time':4}, {'color':'red','time':2},{'color':'blue','time':5}]\nfor i in list:\n  if i['color'] == 'red' &amp;&amp; i['time'] != 2:\n    print i\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n for val in thelist:\n    if val['color'] == 'red' and val['time'] != 2:\n        #do something here\n</code>\n</pre>\n", "senID": 0}, {"text": ["But it doesn't look like that's the right data structure to use."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]