[[{"text": ["If you compile your C code with debugging (-g), pahole can give you the exact structure layouts being used."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "-g", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://git.kernel.org/?p=linux/kernel/git/acme/pahole.git", "text": "pahole", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n$ pahole /bin/dd\n&hellip;\nstruct option {\n        const char  *              name;                 /*     0     8 */\n        int                        has_arg;              /*     8     4 */\n\n        /* XXX 4 bytes hole, try to pack */\n\n        int *                      flag;                 /*    16     8 */\n        int                        val;                  /*    24     4 */\n\n        /* size: 32, cachelines: 1, members: 4 */\n        /* sum members: 24, holes: 1, sum holes: 4 */\n        /* padding: 4 */\n        /* last cacheline: 32 bytes */\n};\n&hellip;\n</pre>\n", "senID": 1}, {"text": ["This should be quite a lot nicer to parse than straight C."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Have a look at Swig or SIP that would generate interface code for you or use ctypes."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Swig", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.swig.org/Doc1.3/Python.html"}, {"href": "http://www.riverbankcomputing.com/software/sip/intro", "text": "SIP", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://python.net/crew/theller/ctypes/", "text": "ctypes", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Regular expressions would work great about 90% of the time and then cause endless headaches for the remaining 10%."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Regular expressions would work great about 90% of the time and then cause endless headaches for the remaining 10%.", "childNum": 0, "tag": "i", "pos": 0, "childList": []}]}, {"text": ["The headaches happen in the cases where the C code contains syntax that you didn't think of when writing your regular expressions.", "Then you go back and realise that C can't really be parsed by regular expressions, and life becomes not fun."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Try turning it around: define your own simple format, which allows less tricks than C does, and generate both the C header file and the Python interface code from your file:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n define socketopts\n    int16 port\n    int32 ipv4address\n    int32 flags\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then you can easily write some Python to convert this to:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n typedef struct {\n    short port;\n    int ipv4address;\n    int flags;\n} socketopts;\n</code>\n</pre>\n", "senID": 5}, {"text": ["and also to emit a Python class which uses struct to pack/unpack three values (possibly two of them big-endian and the other native-endian, up to you)."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "struct", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Have you looked at Swig?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Swig", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.swig.org/index.php"}]}], [{"text": ["I have quite successfully used GCCXML on fairly large projects.", "You get an XML representation of the C code (including structures) which you can post-process with some simple Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "GCCXML", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.gccxml.org/HTML/Index.html"}]}], [{"text": ["One my friend for this tasks done C-parser which he use with cog."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]