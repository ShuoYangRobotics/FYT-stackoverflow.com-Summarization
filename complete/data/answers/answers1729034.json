[[{"text": ["Well,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if \"exam\" in \"example\": print \"yes!\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Is this an improvement?", "No.", "You could even add more statements to the body of the if-clause by separating them with a semicolon.", "I recommend against that though."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "No", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "against", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}]}], [{"text": ["More generally, all of the following are valid syntactically:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if condition:\n    do_something()\n\n\nif condition: do_something()\n\nif condition:\n    do_something()\n    do_something_else()\n\nif condition: do_something(); do_something_else()\n</code>\n</pre>\n", "senID": 1}, {"text": ["...etc."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Python lets you put the indented clause on the same line if it's only one line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if \"exam\" in example: print \"yes!\"\n\ndef squared(x): return x * x\n\nclass MyException(Exception): pass\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n for a in someList:\n    list.append(splitColon.split(a))\n</code>\n</pre>\n", "senID": 0}, {"text": ["You can rewrite the above as:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n newlist = [splitColon.split(a) for a in someList]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I've found that in the majority of cases doing block clauses on one line is a bad idea."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It will, again as a generality, reduce the quality of the form of the code.", "High quality code form is a key language feature for python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In some cases python will offer ways todo things on one line that are definitely more pythonic.", "Things such as what Nick D mentioned with the list comprehension: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n newlist = [splitColon.split(a) for a in someList]\n</code>\n</pre>\n", "senID": 3}, {"text": ["although unless you need a reusable list specifically you may want to consider using a generator instead"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n listgen = (splitColon.split(a) for a in someList)\n</code>\n</pre>\n", "senID": 5}, {"text": ["note the biggest difference between the two is that you can't reiterate over a generator, but it is more efficient to use. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["There is also a built in ternary operator in modern versions of python that allow you to do things like"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n string_to_print = \"yes!\" if \"exam\" in \"example\" else \"\"\nprint string_to_print\n</code>\n</pre>\n", "senID": 8}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n iterator = max_value if iterator &gt; max_value else iterator\n</code>\n</pre>\n", "senID": 10}, {"text": ["Some people may find these more readable and usable than the similar if (condition): block."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "if (condition):", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["When it comes down to it, it's about code style and what's the standard with the team you're working on.", "That's the most important, but in general, i'd advise against one line blocks as the form of the code in python is so very important."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"text": ["You could do all of that in one line by omitting the example variable:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "example", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if \"exam\" in \"example\": print \"yes!\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A little bit of logic shows how it can be reduced to one line"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["step 1"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n example = \"example\"\nif \"exam\" in example:\n    print \"yes!\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["step 2: we can directly use 'example' instead of assigning it to a var.", "first, reducing a line"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if \"exam\" in 'example':\n    print \"yes!\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["step 3: now we know \"exam\" in 'example' will alwyas be true, hence redundant, so we can reduce one more line"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n print \"yes!\"\n</code>\n</pre>\n", "senID": 6}, {"text": [":)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["an example of a language feature that ins't just removing line breaks, although still not convinced this is clearer than the more verbose version"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Dive into python has a bit where he talks about what he calls the and-or trick, which seems like an effective way to cram complex logic into a single line."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "and-or trick", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/power%5Fof%5Fintrospection/and%5For.html#d0e9975"}]}, {"text": ["Basically, it simulates the ternary operater in c, by giving you a way to test for truth and return a value based on that.", "For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; (1 and [\"firstvalue\"] or [\"secondvalue\"])[0]\n\"firstvalue\"\n&gt;&gt;&gt; (0 and [\"firstvalue\"] or [\"secondvalue\"])[0]\n\"secondvalue\"\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Older versions of Python would only allow a single simple statement after for ...: if ...: or similar block introductory statements."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "for ...:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if ...:", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I see that one can have multiple simple statement on the same line as any of these.", "However, there are various combinations that don't work.", "For example we can:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for i in range(3): print \"Here's i:\"; print i\n</code>\n</pre>\n", "senID": 2}, {"text": ["... but we can't:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for i in range(3): if i % 2: print \"That's odd!\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["We can:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n x=10\nwhile x &gt; 0: print x; x-=1\n</code>\n</pre>\n", "senID": 6}, {"text": ["... but we can't:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n x=10; while x &gt; 0: print x; x-=1\n</code>\n</pre>\n", "senID": 8}, {"text": ["... and so on."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["In any event all of these are considered to be extremely NON-pythonic.", "If you write code like this then experience Pythonistas will probably take a dim view of your skills."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["It's marginally acceptable to combine multiple statements on a line in some cases.", "For example:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n x=0; y=1\n</code>\n</pre>\n", "senID": 12}, {"text": ["... or even:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n if some_condition(): break\n</code>\n</pre>\n", "senID": 14}, {"text": ["... for simple break continue and even return statements or assigments."], "childNum": 3, "tag": "p", "senID": 15, "childList": [{"text": "break", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "continue", "childNum": 0, "tag": "code", "childList": []}, {"text": "return", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In particular if one needs to use a series of elif one might use something like:"], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "elif", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if     keystroke == 'q':   break\nelif   keystroke == 'c':   action='continue'\nelif   keystroke == 'd':   action='delete'\n# ...\nelse:                      action='ask again'\n</code>\n</pre>\n", "senID": 17}, {"text": ["... then you might not irk your colleagues too much.", "(However, chains of elif like that scream to be refactored into a dispatch table ... a dictionary that might look more like:"], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "elif", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n dispatch = {\n    'q': foo.break,\n    'c': foo.continue,\n    'd': foo.delete\n    }\n\n\n# ...\nwhile True:\n    key = SomeGetKey()\n    dispatch.get(key, foo.try_again)()\n</code>\n</pre>\n", "senID": 19}]]