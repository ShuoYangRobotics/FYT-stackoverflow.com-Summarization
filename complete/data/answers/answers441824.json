[[{"text": ["Probably one reason for the different terminology is that one normally thinks of feeding the python interpreter raw human-readable source code and not worrying about bytecode and all that.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In Java, you have to explicitly compile to bytecode and then run just the bytecode, not source code on the VM.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Even though Python uses a virtual machine under the covers, from a user's perspective, one can ignore this detail most of the time.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["A virtual machine is a virtual computing environment with a specific set of atomic well defined instructions that are supported independent of any specific language and it is generally thought of as a sandbox unto itself.", "The VM is analogous to an instruction set of a specific CPU and tends to work at a more fundamental level with very basic building blocks of such instructions (or byte codes) that are independent of the next.", "An instruction executes deterministically based only on the current state of the virtual machine and does not depend on information elsewhere in the instruction stream at that point in time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["An interpreter on the other hand is more sophisticated in that it is tailored to parse a stream of some syntax that is of a specific language and of a specific grammer that must be decoded in the context of the surrounding tokens.", "You can't look at each byte or even each line in isolation and know exactly what to do next.", "The tokens in the language can't be taken in isolation like they can relative to the instructions (byte codes) of a VM."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["A Java compiler converts Java language into a byte-code stream no different than a C compiler converts C Language programs into assembly code.", "An interpreter on the other hand doesn't really convert the program into any well defined intermediate form, it just takes the program actions as a matter of the process of interpreting the source."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Another test of the difference between a VM and an interpreter is whether you think of it as being language independent.", "What we know as the Java VM is not really Java specific.", "You could make a compiler from other languages that result in byte codes that can be run on the JVM.", "On the other hand, I don't think we would really think of \"compiling\" some other language other than Python into Python for interpretation by the Python interpreter."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Because of the sophistication of the interpretation process, this can be a relatively slow process....specifically parsing and identifying the language tokens, etc.", "and understanding the context of the source to be able to undertake the execution process within the interpreter.", "To help accelerate such interpreted languages, this is where we can define intermediate forms of pre-parsed, pre-tokenized source code that is more readily directly interpreted.", "This sort of binary form is still interpreted at execution time, it is just starting from a much less human readable form to improve performance.", "However, the logic executing that form is not a virtual machine, because those codes still can't be taken in isolation - the context of the surrounding tokens still matter, they are just now in a different more computer efficient form."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["In this post, \"virtual machine\" refers to process virtual machines, not to\nsystem virtual machines like Qemu or Virtualbox.", "A process virtual machine is\nsimply a program which provides a general programming environment -- a program\nwhich can be programmed.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Java has an interpreter as well as a virtual machine, and Python has a virtual\nmachine as well as an interpreter.", "The reason \"virtual machine\" is a more\ncommon term in Java and \"interpreter\" is a more common term in Python has a lot\nto do with the major difference between the two languages:  static typing\n(Java) vs dynamic typing (Python).", "In this context, \"type\" refers to\nprimitive data types -- types which suggest the in-memory storage size of\nthe data.", "The Java virtual machine has it easy.", "It requires the programmer to\nspecify the primitive data type of each variable.", "This provides sufficient\ninformation for Java bytecode not only to be interpreted and executed by the\nJava virtual machine, but even to be compiled into machine instructions.", "The Python virtual machine is more complex in the sense that it takes on the\nadditional task of pausing before the execution of each operation to determine\nthe primitive data types for each variable or data structure involved in the\noperation.", "Python frees the programmer from thinking in terms of primitive data\ntypes, and allows operations to be expressed at a higher level.", "The price of\nthis freedom is performance.", "\"Interpreter\" is the preferred term for Python\nbecause it has to pause to inspect data types, and also because the\ncomparatively concise syntax of dynamically-typed languages is a good fit for\ninteractive interfaces.", "There's no technical barrier to building an interactive\nJava interface, but trying to write any statically-typed code interactively\nwould be tedious, so it just isn't done that way."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "primitive data types", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Data%5Ftype"}, {"text": "compiled into machine instructions", "tag": "a", "pos": 5, "childList": [], "childNum": 0, "href": "http://gcc.gnu.org/java/"}]}, {"text": ["In the Java world, the virtual machine steals the show because it runs programs\nwritten in a language which can actually be compiled into machine instructions,\nand the result is speed and resource efficiency.", "Java bytecode can be executed\nby the Java virtual machine with performance approaching that of compiled\nprograms, relatively speaking.", "This is due to the presence of primitive data\ntype information in the bytecode.", "The Java virtual machine puts Java in a\ncategory of its own:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["portable interpreted statically-typed language"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "portable interpreted statically-typed language", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The next closest thing is LLVM, but LLVM operates at a different level:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["portable interpreted assembly language"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "portable interpreted assembly language", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The term \"bytecode\" is used in both Java and Python, but not all bytecode is\ncreated equal.", "bytecode is just the generic term for intermediate languages\nused by compilers/interpreters.", "Even C compilers like gcc use an intermediate\nlanguage (or several) to get the job done.", "Java bytecode contains\ninformation about primitive data types, whereas Python bytecode does not.", "In\nthis respect, the Python (and Bash,Perl,Ruby, etc.", ") virtual machine truly is\nfundamentally slower than the Java virtual machine, or rather, it simply has\nmore work to do.", "It is useful to consider what information is contained in\ndifferent bytecode formats:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "intermediate\nlanguage (or several)", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://gcc.gnu.org/onlinedocs/gccint/RTL.html"}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["llvm:"], "childNum": 0, "tag": "strong", "senID": 7, "childList": []}, {"text": ["Java:"], "childNum": 0, "tag": "strong", "senID": 8, "childList": []}, {"text": ["Python:"], "childNum": 0, "tag": "strong", "senID": 9, "childList": []}]}, {"text": ["To draw a real-world analogy: LLVM works with atoms, the Java virtual machine\nworks with molecules, and The Python virtual machine works with materials.", "Since everything must eventually decompose into subatomic particles (real\nmachine operations), the Python virtual machine has the most complex task."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Intepreters/compilers of statically-typed languages just don't have the same\nbaggage that interpreters/compilers of dynamically-typed languages have.", "Programmers of statically-typed languages have to take up the slack, for which\nthe payoff is performance.", "However, just as all nondeterministic functions are\nsecretly deterministic, so are all dynamically-typed languages secretly\nstatically-typed.", "Performance differences between the two language families\nshould therefore level out around the time Python changes its name to HAL 9000."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["The virtual machines of dynamic languages like Python implement some idealized\nlogical machine, and don't necessarily correspond very closely to any real\nphysical hardware.", "The Java virtual machine, in contrast, is more similar in\nfunctionality to a classical C compiler, except that instead of emitting\nmachine instructions, it executes built-in routines.", "In Python, an integer is\na Python object with a bunch of attributes and methods attached to it.", "In\nJava, an int is a designated number of bits, usually 32.", "It's not really a\nfair comparison.", "Python integers should really be compared to the Java\nInteger class.", "Java's \"int\" primitive data type can't be compared to anything in\nthe Python language, because the Python language simply lacks this layer of\nprimitives, and so does Python bytecode."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Because Java variables are explicitly typed, one can reasonably expect\nsomething like Jython performance to be in the same ballpark as\ncPython.", "On the other hand, a Java virtual machine implemented in Python\nis almost guaranteed to be slower than mud.", "And don't expect Ruby, Perl, etc.,\nto fare any better.", "They weren't designed to do that.", "They were designed for\n\"scripting\", which is what programming in a dynamic language is called."], "childNum": 2, "tag": "p", "senID": 13, "childList": [{"text": "Jython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.jython.org/"}, {"text": "cPython", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.python.org/"}]}, {"text": ["Every operation that takes place in a virtual machine eventually has to hit real hardware.", "Virtual machines contain pre-compiled routines which are general enough to to execute any combination of logical operations.", "A virtual machine may not be emitting new machine instructions, but it certainly is executing its own routines over and over in arbirtrarily complex sequences.", "The Java virtual machine, the Python virtual machine, and all the other general-purpose virtual machines out there are equal in the sense that they can be coaxed into performing any logic you can dream up, but they are different in terms of what tasks they take on, and what tasks they leave to the programmer."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Psyco for Python is not a full Python virtual machine, but a just-in-time\ncompiler that hijacks the regular Python virtual machine at points it thinks it\ncan compile a few lines of code -- mainly loops where it thinks the primitive\ntype of some variable will remain constant even if the value is changing with\neach iteration.", "In that case, it can forego some of the incessent type\ndetermination of the regular virtual machine.", "You have to be a little careful,\nthough, lest you pull the type out from under Psyco's feet.", "Pysco, however,\nusually knows to just fall back to the regular virtual machine if it isn't\ncompletely confident the type won't change."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["The moral of the story is that primitive data type information is really\nhelpful to a compiler/virtual machine."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["Finally, to put it all in perspective consider this: a Python program executed\nby a Python interpreter/virtual machine implemented in Java running on a Java\ninterpreter/virtual machine implemented in LLVM running in a qemu virtual\nmachine running on an iPhone."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["permalink"], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "permalink", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.darkarchive.org/w/Pub/ProcessVirtualMachine"}]}], [{"text": ["The term interpreter is a legacy term dating back to earlier shell scripting languages.", "As \"scripting languages\" have evolved into full featured languages and their corresponding platforms have become more sophisticated and sandboxed, the distinction between a virtual machine and an interpreter (in the Python sense), is very small or non-existent."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The Python interpreter still functions in the same way as a shell script, in the sense that it can be executed without a separate compile step.", "Beyond that, the differences between Python's interpreter (or Perl or Ruby's) and Java's virtual machine are mostly implementation details.", "(One could argue that Java is more fully sandboxed than Python, but both ultimately provide access to the underlying architecture via a native C interface."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Interpreter, translates source code into some efficient intermediate representation (code) and immediately executes this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Interpreter", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Virtual Machine, explicitly executes stored pre-compiled code built by a compiler which is part of the interpreter system."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Virtual Machine", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["A very important characteristic of a virtual machine is that the software running inside, is limited to the resources provided by the virtual machine.", "Precisely, it cannot break out of its virtual world.", "Think of secure execution of remote code, Java Applets. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In case of python, if we are keeping pyc files, as mentioned in the comment of this post, then the mechanism would become more like a VM, and this bytecode executes faster.", "If we look at this as a whole, PVM is a last step of Python Interpreter."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "pyc", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["The bottomline is, when refer Python Interpreter, it means we are referring it as a whole, and when we say PVM, that means we are just talking about a part of Python Interpreter, a runtime-environment.", "Similar to that of Java, we refer different parts differentyl, JRE, JVM, JDK, etc."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["For more, Wikipedia Entry: Interpreter, and Virtual Machine.", "Yet another one here.", "Here you can find the Comparison of application virtual machines.", "It helps in understanding the difference between, Compilers, Interpreters, and VMs."], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "Interpreter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Interpreter_(computing)"}, {"text": "Virtual Machine", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Virtual_machine"}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.kinabaloo.com/jvm.html"}, {"text": "Comparison of application virtual machines", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Comparison_of_application_virtual_machines"}]}], [{"text": ["Don't forget that Python has JIT compilers available for x86, further confusing the issue.", "(See psyco)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A more strict interpretation of an 'interpreted language' only becomes useful when discussing performance issues of the VM, for example, compared with Python, Ruby was (is?", ") considered to be slower because it is an interpreted language, unlike Python - in other words, context is everything."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["There's no real difference between them, people just follow the conventions the creators have chosen."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In my humble opinion, terms like \"Virtual Machine\" and \"Write once, run anywhere\" are marketing buzz words, that just describe an interpreter environment."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, one has to note that java doesn't come with a command line interpreter like python. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]