[[{"text": ["This approach has the advantage that you do not need to do anything to the subclass to make it non-abstract."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class ABC(object):\n    abstract = True\n    def __new__(cls, *args, **kwargs):\n        if \"abstract\" in cls.__dict__ and cls.__dict__[\"abstract\"] == True:\n            raise RuntimeError(cls.__name__ + \" is abstract!\")\n        return object.__new__(cls)\n\nclass Subclass(ABC):\n    pass\n\nprint Subclass()\nprint ABC()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &lt;__main__.Subclass object at 0xb7878a6c&gt;\nTraceback (most recent call last):\n  File \"abc.py\", line 14, in &lt;module&gt;\n    print ABC()\n  File \"abc.py\", line 6, in __new__\n    raise RuntimeError(cls.__name__ + \" is abstract!\")\nRuntimeError: ABC is abstract!\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want to create an abstract subclass, simply do like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class AbstractSubclass(ABC):\n    abstract = True\n</code>\n</pre>\n", "senID": 5}], [{"text": ["In statically-typed languages, you use an abstract base class (ABC) because you need some object with a defined size, interface etc.", "to pass around.", "Otherwise, the code trying to call methods on that object can't be compiled."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python isn't a statically-typed language, and the calling code doesn't need to know the type of the object it's calling at all.", "So, you can \"define\" your ABC just by documenting the interface requirements, and implementing that interface directly in two unrelated classes."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Eg,"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Server:\n    def do_thing(self):\n        pass #do that server thing here\n\nclass Client:\n    def do_thing(self):\n        pass #do that client thing here\n\ndef do_thing(thingy):\n    thingy.do_thing() # is it a Client? a Server? something else?\n\ns=Server()\nc=Client()\n\ndo_thing(s)\ndo_thing(c)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Here, you could pass in any object with a do_thing method whose arguments match the call."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "any", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["You can call a method \"foo\" at the beginning of A constructor.", "In A, this method raises an exception.", "In C and in S, you redefine \"foo\" so there is no more exceptions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["My first question is: why can't you simply avoid to instantiate an object from class A?", "What I mean is that this is a bit like questions on implementing singletons... As this answerer correctly quoted:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "A", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "questions on implementing singletons", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/q/31875/146792"}, {"href": "http://stackoverflow.com/questions/31875/is-there-a-simple-elegant-way-to-define-singletons-in-python/31907#31907", "text": "this answerer", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["The same - IMO - applies to abstract classes (which in fact have been introduced in Python for other reasons than the one you would intend to use them for."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "other reasons", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3119/"}]}, {"text": ["That said, you could raise an exception in the __init__ method of class A.", "Something like:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class A():\n...     def __init__(self):\n...             raise BaseException()\n... \n&gt;&gt;&gt; a = A()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 3, in __init__\nBaseException\n&gt;&gt;&gt; class B(A):\n...     def __init__(self):\n...             pass\n... \n&gt;&gt;&gt; b = B()\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["Of course this is just an rough idea: if you have - for example - some useful stuff in the A.__init__ you should check the __class__ attribute, etc..."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "A.__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__class__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["There's anabstract base class modulefor what you want."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "There's anabstract base class modulefor what you want.", "childNum": 1, "tag": "s", "pos": 0, "childList": [{"text": "abstract base class module", "tag": "a"}]}, {"href": "http://docs.python.org/library/abc.html", "text": "abstract base class module", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Not applicable for 2.5."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Not applicable for 2.5.", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["The real question is: why do you need an abstract class?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["if you make 2 classes, and make the second herit from the first, it is an efficient way to clean your code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]