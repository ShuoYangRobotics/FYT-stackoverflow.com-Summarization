[[{"text": ["feed.entry is property of feed and it's value is (if it's not, this code will fail) object implementing iteration protocol (array, for example) and has iter method, which returns iterator object"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "iter", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Iterator has next() method, returning next element or raising exception, so python for loop is actually:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n iterator = feed.entry.__iter__()\nwhile True:\n    try:\n        party = iterator.next()\n    except StopIteration:\n        # StopIteration exception is raised after last element\n        break\n\n    # loop code\n    print party.location.address.text\n</code>\n</pre>\n", "senID": 2}], [{"text": ["feed.entry is something that allows iteration, and contains objects of some type.", "This is roughly similar to c++:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for (feed::iterator party = feed.entry.begin(); party != feed.entry.end(); ++party) {\n   cout &lt;&lt; (*party).location.address.text;\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["party simply iterates over the list feed.entry"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "party", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "feed.entry", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Take a look at Dive into Python explainations."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Dive into Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython-cached.muellerware.org/file%5Fhandling/for%5Floops.html"}]}], [{"text": ["In Python, for bucles aren't like the C/C++ ones, they're most like PHP's foreach.", "What you do isn't iterate like in a while with \"(initialization; condition; increment)\", it simply iterates over each element in a list (strings are ITERABLE like lists)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "for", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "foreach", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "while", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for number in range(5):\n    print number\n</code>\n</pre>\n", "senID": 2}, {"text": ["will output"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n 0\n1\n2\n3\n4\n</code>\n</pre>\n", "senID": 4}], [{"text": ["To add my 0.05$ to the previous answers you might also want to take a look at the enumerate builtin function"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "enumerate builtin function", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#enumerate"}]}, {"code": "<pre>\n<code>\n for i, season in enumerate(['Spring', 'Summer', 'Fall', 'Winter']):\n    print i, season\n\n0 Spring\n1 Summer\n2 Fall\n3 Winter\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Python's for loop works with iterators, which must implement the iterator protocol.", "For more details see:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "iterators", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "iterator", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"tag": "ul", "num": 1, "lis": [{"text": ["Build a Basic Python Iterator"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}]}]]