[[{"text": ["(note: you would need global c in each function to make your code work."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "global c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["No.", "Only a single bytecode instruction is \u2018atomic\u2019 in CPython, and a += may not result in a single opcode, even when the values involved are simple integers:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "+=", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; c= 0\n&gt;&gt;&gt; def inc():\n...     global c\n...     c+= 1\n\n&gt;&gt;&gt; import dis\n&gt;&gt;&gt; dis.dis(inc)\n\n  3           0 LOAD_GLOBAL              0 (c)\n              3 LOAD_CONST               1 (1)\n              6 INPLACE_ADD         \n              7 STORE_GLOBAL             0 (c)\n             10 LOAD_CONST               0 (None)\n             13 RETURN_VALUE\n</code>\n</pre>\n", "senID": 2}, {"text": ["So one thread could get to index 6 with c and 1 loaded, give up the GIL and let another thread in, which executes an inc and sleeps, returning the GIL to the first thread, which now has the wrong value."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "inc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In any case, what's atomic is an implementation detail which you shouldn't rely on.", "Bytecodes may change in future versions of CPython, and the results will be totally different in other implementations of Python that do not rely on a GIL.", "If you need thread safety, you need a locking mechanism."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Single opcodes are thread-safe because of the GIL but nothing else:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import time\nclass something(object):\n    def __init__(self,c):\n        self.c=c\n    def inc(self):\n        new = self.c+1 \n        # if the thread is interrupted by another inc() call its result is wrong\n        time.sleep(0.001) # sleep makes the os continue another thread\n        self.c = new\n\n\nx = something(0)\nimport threading\n\nfor _ in range(10000):\n    threading.Thread(target=x.inc).start()\n\nprint x.c # ~900 here, instead of 10000\n</code>\n</pre>\n", "senID": 1}, {"text": ["Every resource shared by multiple threads must have a lock."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Every", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "must", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["Short answer: no."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Long answer: generally not."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["While CPython's GIL makes single opcodes thread-safe, this is no general behaviour.", "You may not assume that even simple operations like an addition is a atomic instruction.", "The addition may only be half done when another thread runs."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "thread-safe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Thread%5Fsafety"}]}, {"text": ["And as soon as your functions access a variable in more than one opcode, your thread safety is gone.", "You can generate thread safety, if you wrap your function bodies in locks.", "But be aware that locks may be computationally costly and may generate deadlocks."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "locks", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/threading.html#lock-objects"}]}], [{"text": ["If you actually want to make your code not thread-safe, and have good chance of \"bad\" stuff actually happening without you trying like ten thousand times (or one time when you real don't want \"bad\" stuff to happen), you can 'jitter' your code with explicit sleeps:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "don't", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n def \u00edncrement():\n    global c\n    x = c\n    from time import sleep\n    sleep(0.1)\n    c = x + 1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["No, this code is absolutely, demonstrably not threadsafe."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import threading\n\ni = 0\n\ndef test():\n    global i\n    for x in range(100000):\n        i += 1\n\nthreads = [threading.Thread(target=test) for t in range(10)]\nfor t in threads:\n    t.start()\n\nfor t in threads:\n    t.join()\n\nassert i == 1000000, i\n</code>\n</pre>\n", "senID": 1}, {"text": ["fails consistently."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["i += 1 resolves to four opcodes: load i, load 1, add the two, and store it back to i.", "The Python interpreter switches active threads (by releasing the GIL from one thread so another thread can have it) every 100 opcodes.", "(Both of these are implementation details.", ")  The race condition occurs when the 100-opcode preemption happens between loading and storing, allowing another thread to start incrementing the counter.", "When it gets back to the suspended thread, it continues with the old value of \"i\" and undoes the increments run by other threads in the meantime."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Making it threadsafe is straightforward; add a lock:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\nimport threading\ni = 0\ni_lock = threading.Lock()\n\ndef test():\n    global i\n    i_lock.acquire()\n    try:\n        for x in range(100000):\n            i += 1\n    finally:\n        i_lock.release()\n\nthreads = [threading.Thread(target=test) for t in range(10)]\nfor t in threads:\n    t.start()\n\nfor t in threads:\n    t.join()\n\nassert i == 1000000, i\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Are you sure that the functions increment and decrement execute without any error?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think it should raise an UnboundLocalError because you have to explicitly tell Python that you want to use the global variable named 'c'."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So change increment ( also decrement ) to the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def increment():\n    global c\n    c += 1\n</code>\n</pre>\n", "senID": 3}, {"text": ["I think as is your code is thread unsafe.", "This article about thread synchronisation mechanisms in Python may be helpful."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "This article", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/thread-synchronization.htm"}]}], [{"text": ["You can increase the likelyhood of seeing race conditions by using a sleep in the critical parts"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from time import sleep\nc = 0\n\ndef increment():\n  global c\n  c_ = c\n  sleep(0.1)\n  c = c+1\n\ndef decrement():\n  global c\n  c_ = c\n  sleep(0.1)\n  c  = c_-1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["To be sure I recommend to use a lock:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import threading\n\nclass ThreadSafeCounter():\n    def __init__(self):\n        self.lock = threading.Lock()\n        self.counter=0\n\n    def increment(self):\n        with self.lock:\n            self.counter+=1\n\n\n    def decrement(self):\n        with self.lock:\n            self.counter-=1\n</code>\n</pre>\n", "senID": 1}, {"text": ["The synchronized decorator can also help to keep the code easy to read."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]