[[{"text": ["Unfortunately it's not possible to split on a zero-width match in Python.", "But you can use re.findall instead:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "split on a zero-width match", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bugs.python.org/issue3262"}, {"text": "re.findall", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall('[A-Z][^A-Z]*', 'TheLongAndWindingRoad')\n['The', 'Long', 'And', 'Winding', 'Road']\n&gt;&gt;&gt; re.findall('[A-Z][^A-Z]*', 'ABC')\n['A', 'B', 'C']\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall('[A-Z][a-z]*', 'TheLongAndWindingRoad')\n['The', 'Long', 'And', 'Winding', 'Road']\n\n&gt;&gt;&gt; re.findall('[A-Z][a-z]*', 'SplitAString')\n['Split', 'A', 'String']\n\n&gt;&gt;&gt; re.findall('[A-Z][a-z]*', 'ABC')\n['A', 'B', 'C']\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you want \"It'sATest\" to split to [\"It's\", 'A', 'Test'] change the rexeg to \"[A-Z][a-z']*\""], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "\"It'sATest\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[\"It's\", 'A', 'Test']", "childNum": 0, "tag": "code", "childList": []}, {"text": "\"[A-Z][a-z']*\"", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Here is an alternative regex solution.", "The problem can be reprased as \"how do I insert a space before each uppercase letter, before doing the split\":"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"TheLongAndWindingRoad ABC A123B45\"\n&gt;&gt;&gt; re.sub( r\"([A-Z])\", r\" \\1\", s).split()\n['The', 'Long', 'And', 'Winding', 'Road', 'A', 'B', 'C', 'A123', 'B45']\n</code>\n</pre>\n", "senID": 1}, {"text": ["This has the advantage of preserving all non-whitespace characters, which most other solutions do not."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n import re\nfilter(None, re.split(\"([A-Z][^A-Z]*)\", \"TheLongAndWindingRoad\"))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Alternative solution (if you dislike explicit regexes):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = 'TheLongAndWindingRoad'\n\npos = [i for i,e in enumerate(s) if e.isupper()]\n\nparts = []\nfor j in xrange(len(pos)):\n    try:\n        parts.append(s[pos[j]:pos[j+1]])\n    except IndexError:\n        parts.append(s[pos[j]:])\n\nprint parts\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A variation on @ChristopheD 's solution"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = 'TheLongAndWindingRoad'\n\npos = [i for i,e in enumerate(s+'A') if e.isupper()]\nparts = [s[pos[j]:pos[j+1]] for j in xrange(len(pos)-1)]\n\nprint parts\n</code>\n</pre>\n", "senID": 1}]]