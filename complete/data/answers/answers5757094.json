[[{"text": ["try this :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Decimal('10.0').quantize(Decimal('1.00'))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There's a good example of how to format Decimal objects as a \"money formatted string\" in the Python documentation for the decimal module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python documentation for the decimal module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/decimal.html#recipes"}]}, {"text": ["I'm a little surprised at how awkward it is -- usually formatting in Python is fairly straightforward."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I would follow the moneyfmt recipe in the Python Decimal documentation Recipes section."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "moneyfmt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/decimal.html#recipes", "text": "Python Decimal documentation Recipes section", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["This recipe creates a function that takes a decimal value and returns a string formatted as a currency."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = Decimal('10.0')\n&gt;&gt;&gt; moneyfmt(d, curr='$')\n'$10.00'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Below is the actual code, copied sans examples from the Decimal Recipe documentation:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def moneyfmt(value, places=2, curr='', sep=',', dp='.',\n             pos='', neg='-', trailneg=''):\n    \"\"\"Convert Decimal to a money formatted string.\n\n    places:  required number of places after the decimal point\n    curr:    optional currency symbol before the sign (may be blank)\n    sep:     optional grouping separator (comma, period, space, or blank)\n    dp:      decimal point indicator (comma or period)\n             only specify as blank when places is zero\n    pos:     optional sign for positive numbers: '+', space or blank\n    neg:     optional sign for negative numbers: '-', '(', space or blank\n    trailneg:optional trailing minus indicator:  '-', ')', space or blank\n\n    \"\"\"\n    q = Decimal(10) ** -places      # 2 places --&gt; '0.01'\n    sign, digits, exp = value.quantize(q).as_tuple()\n    result = []\n    digits = map(str, digits)\n    build, next = result.append, digits.pop\n    if sign:\n        build(trailneg)\n    for i in range(places):\n        build(next() if digits else '0')\n    build(dp)\n    if not digits:\n        build('0')\n    i = 0\n    while digits:\n        build(next())\n        i += 1\n        if i == 3 and digits:\n            i = 0\n            build(sep)\n    build(curr)\n    build(neg if sign else pos)\n    return ''.join(reversed(result))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["For currency calculations, I prefer this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; penny=Decimal('0.01')\n&gt;&gt;&gt; Decimal('10').quantize(penny)\nDecimal('10.00')\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's wordy but explicit."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For currency formatting, I use format()."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "format()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Set the precision for your context before you create your instance:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; getcontext().prec = 2\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It should be quite simple like this (if you don't use decimal.Decimal class as suggested by S. Lott) :"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "S. Lott", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/10661/s-lott"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; decimal_fmt = \"{:.2f}\"   \n    &gt;&gt;&gt; x = 10\n    &gt;&gt;&gt; print(decimal_fmt.format(x))\n    10.00\n    &gt;&gt;&gt; x = 11.1\n    &gt;&gt;&gt; print(decimal_fmt.format(x))\n    11.10\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Instead of using Decimal('10.0') you could use float('10.0') which will produce the effect you require."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Decimal('10.0')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "float('10.0')", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit: Realised that you were looking to represent it with 2 decimal places.", "In this case, there's a good example in the Python docs for converting a Decimal() object to money: http://docs.python.org/library/decimal.html#recipes"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Decimal()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://docs.python.org/library/decimal.html#recipes", "text": "http://docs.python.org/library/decimal.html#recipes", "childNum": 0, "tag": "a", "childList": []}]}]]