[[{"text": ["i suggest taking a look at http://docs.python.org/library/calendar.html\nwith it you can easily figure out what day of the week a certain date is, and then you can calculate back - taking into account weekends"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/calendar.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/calendar.html"}]}], [{"text": ["Here's one way of doing it.", "Note (1) you don't say what you expect if the start date is NOT a workday.", "(2) Your example is wrong."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n C:\\junk\\so&gt;type workdays.py\nimport datetime\n\ndef add_workdays(adate, nworkdays):\n    if nworkdays &lt; 0:\n        incr = -1\n        nworkdays = - nworkdays\n    else:\n        incr = 1\n    delta_weeks, delta_days = divmod(nworkdays, 5)\n    one_day = datetime.timedelta(days=incr)\n    if delta_weeks:\n        wdate = adate + one_day * 7 * delta_weeks\n    else:\n        wdate = adate\n    while delta_days:\n        wdate += one_day\n        if wdate.weekday() &lt; 5: # Mon-Fri\n            delta_days -= 1\n    return wdate\n\nif __name__ == \"__main__\":\n    start = datetime.date(2009, 8, 21)\n    for i in range(10, -19, -1):\n        end = add_workdays(start, i)\n        print \"%3d %s\" % (i, end.strftime(\"%a %Y-%m-%d\"))\n\nC:\\junk\\so&gt;\\python26\\python workdays.py\n 10 Fri 2009-09-04\n  9 Thu 2009-09-03\n  8 Wed 2009-09-02\n  7 Tue 2009-09-01\n  6 Mon 2009-08-31\n  5 Fri 2009-08-28\n  4 Thu 2009-08-27\n  3 Wed 2009-08-26\n  2 Tue 2009-08-25\n  1 Mon 2009-08-24\n  0 Fri 2009-08-21\n -1 Thu 2009-08-20\n -2 Wed 2009-08-19\n -3 Tue 2009-08-18\n -4 Mon 2009-08-17\n -5 Fri 2009-08-14\n -6 Thu 2009-08-13\n -7 Wed 2009-08-12\n -8 Tue 2009-08-11\n -9 Mon 2009-08-10\n-10 Fri 2009-08-07\n-11 Thu 2009-08-06\n-12 Wed 2009-08-05\n-13 Tue 2009-08-04\n-14 Mon 2009-08-03\n-15 Fri 2009-07-31\n-16 Thu 2009-07-30\n-17 Wed 2009-07-29\n-18 Tue 2009-07-28\n\nC:\\junk\\so&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I recommend using scikits timeseries, with the 'business' frequency.", "You can download this great python package here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://pytseries.sourceforge.net/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pytseries.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pytseries.sourceforge.net/"}]}, {"text": ["Then you can write something like"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import datetime\nimport scikits.timeseries as TS\nworkDay1 = TS.Date(freq='B', datetime=datetime.datetime(2009,8,21))\nworkDay2 = workDay1 - 7\nasDatetime = workDay2.datetime\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I would probably just loop over the days checking if the day is mon-fri.\nNot as efficent but easier to get right."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"text": ["I'm assuming you're using datetime, but this should work (date is a datetime, days is an integer):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def goback(date, days):\n    delta = datetime.timedelta( days=days + 2*(days//5) )\n    if date.weekday() == 5:\n        delta += datetime.timedelta(days=1)\n    elif date.weekday() == 6:\n        delta += datetime.timedelta(days=2)\n    else:\n        leftover = date.weekday() - days % 5\n        if leftover &lt; 0: \n            delta += datetime.timedelta(days=2)\n    return date - delta\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that the example in your description is wrong I think .", ".", "18 work days before the 21st is the 28th."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you need to count holidays as non-workdays at some point, you'll need to work out Easter/Good Friday, which is best left to a library call:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["&gt;&gt;&gt; from dateutil import easter&gt;&gt;&gt; easter.easter(2009)datetime.date(2009, 4, 12)"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "&gt;&gt;&gt; from dateutil import easter&gt;&gt;&gt; easter.easter(2009)datetime.date(2009, 4, 12)", "childNum": 2, "tag": "code", "pos": 0, "childList": [{"text": "", "tag": "br"}, {"text": "", "tag": "br"}]}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["The other major holidays are relatively simple: they either they occur the same date every year, or they fall on a sequential day of the week in a month.", "You may want to check out period.py (http://www.medsch.wisc.edu/~annis/creations/period.py.html) which offers an is_holiday() method, though it requires configuration.  "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.medsch.wisc.edu/~annis/creations/period.py.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.medsch.wisc.edu/~annis/creations/period.py.html"}]}, {"text": ["NYSE stock market holidays provide a reasonable default holiday schedule for the United States."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["My wife Anna has a recipe for this in the 2nd ed.", "of the Python Cookbook -- you can read it online with this Google Book Search url, it starts at p. 122.", "Recipe 3.5 is about weekdays vs weekends; the very next recipe, 3.6, adds consideration of holidays, but unfortunately can only partly be read online on Google Book Search (I have seen many pirate copies of our book being advertised for free downloads, but don't have their URLs handy)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "url", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://books.google.com/books?id=Q0s6Vgb98CQC&pg=PA123&lpg=PA123&dq=python+cookbook+workdays&source=bl&ots=hc2Wb2UnvE&sig=9LTmmj6W5-5GoIeVe5z3u5YE3Po&hl=en&ei=uPeNSpDGMo3atgOGluH0CQ&sa=X&oi=book%5Fresult&ct=result&resnum=1#v=onepage&q=&f=false"}]}, {"text": ["These recipes are particularly near and dear to our hearts because they're basically how we reconnected (on the Web) after years in which we had lost track of each other -- Anna was looking for help perfecting them as she needed their functionality at her workplace, I offered some... 20 months later we were married;-)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]