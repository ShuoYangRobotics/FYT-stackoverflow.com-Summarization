[[{"text": ["The second argument is used to specify which random number generator to use.", "This could be useful if you need/have something \"better\" than random.random.", "Security-sensitive applications might need to use a cryptographically secure random number generator."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "random.random", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["The difference between random.random and random.random() is that the first one is a reference to the function that produces simple random numbers, and the second one actually calls that function."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "random.random", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "random.random()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you had another random number generator, you wanted to use, you could say"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n random.shuffle(x, my_random_number_function)\n</code>\n</pre>\n", "senID": 3}, {"text": ["As to what random.random (the default generator) is doing, it uses an algorithm called the Mersenne twister to create a seemingly random floating point number between 0 and 1 (not including 1), all the numbers in that interval being of equal likelihood."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "random.random", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/random.html"}, {"href": "http://en.wikipedia.org/wiki/Mersenne%5Ftwister", "text": "Mersenne twister", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["That the interval is from 0 to 1 is just a convention."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Existing answers do a good job of addressing the question's specific, but I think it's worth mentioning a side issue: why you're particularly likely to want to pass an alternative \"random generator\" to shuffle as opposed to other functions in the random module.", "Quoting the docs:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "shuffle", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "random", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "the docs", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/3.1/library/random.html?highlight=urandom#random.shuffle"}]}, {"text": ["The phrase \"random number generators\" here refers to what may be more pedantically called pseudo-random number generators -- generators that give a good imitation of randomness, but are entirely algorithmic, and therefore are known not to be \"really random\".", "Any such algorithmic approach will have a \"period\" -- it will start repeating itself eventually."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "pseudo", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "not", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["Python's random module uses a particularly good and well-studied pseudo-random generator, the Mersenne Twister, with a period of 2**19937-1 -- a number that has more than 6 thousand digits when written out in decimal digits, as len(str(2**19937-1)) will confirm;-).", "On my laptop I can generate about 5 million such numbers per second:"], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "random", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Mersenne Twister", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Mersenne%5Ftwister"}, {"text": "2**19937-1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "len(str(2**19937-1))", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n $ python -mtimeit -s'import random' 'random.random()'\n1000000 loops, best of 3: 0.214 usec per loop\n</code>\n</pre>\n", "senID": 3}, {"text": ["Assuming a much faster machine, able to generate a billion such numbers per second, the cycle would take about 10**5985 years to repeat -- and the best current estimate for the age of the Universe is a bit less than 1.5*10**12 years.", "It would thus take an almost-unimaginable number of Universe-lifetimes to reach the point of repetition;-).", "Making the computation parallel wouldn't help much; there are estimated to be about 10**80 atoms in the Universe, so even if you were able to run such a billion-per-second generator on each atom in the Universe, it would still take well over 10**5800 Universe-lifetimes to start repeating."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "billion", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["So, you might be justified in suspecting that this worry about repetition is a tiny little bit of a theoretical, rather than practical, issue;-)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Nevertheless, factorials (which count the permutations of a sequence of length N) also grow pretty fast.", "Using natural logarithms (since 2**19937 is too large to fit in a double;-) and Stirling's approximation:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "2**19937", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from math import log\n&gt;&gt;&gt; def stirling(n): return n*log(n)-n\n... \n&gt;&gt;&gt; 19937*log(2)\n13819.275338823629\n&gt;&gt;&gt; stirling(2081)\n13819.096562725152\n&gt;&gt;&gt; stirling(2082)\n13826.737406782171\n</code>\n</pre>\n", "senID": 7}, {"text": ["so we see that the Mersenne Twister might be able to produce all permutations of a sequence of length 2081, but definitely not of one of length 2082 or higher.", "Were it not for the \"lifetime of the Universe\" issue, the docs' worry about \"even rather small len(x)\" would be justified -- we know that many possible permutations can never be reached by shuffling with such a pseudo-RNG, as soon as we have a reasonably long sequence, so one might worry about what kind of bias we're actually introducing with even a few shuffles!-)"], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "might", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "know", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["os.urandom mediates access to whatever sources of physical randomness the OS provides -- CryptGenRandom on Windows, /dev/urandom on Linux, etc.", "os.urandom gives sequences of bytes, but with the help of struct it's easy to make them into random numbers:"], "childNum": 7, "tag": "p", "senID": 9, "childList": [{"text": "os.urandom", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/3.1/library/os.html#os.urandom"}, {"text": "physical", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "CryptGenRandom", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/aa379942%28VS.85%29.aspx"}, {"text": "/dev/urandom", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://linux.about.com/library/cmd/blcmdl4%5Furandom.htm"}, {"text": "os.urandom", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://docs.python.org/3.1/library/struct.html?highlight=struct#module-struct", "text": "struct", "childNum": 0, "tag": "a", "childList": []}, {"text": "numbers", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; n = struct.calcsize('I')\n&gt;&gt;&gt; def s2i(s): return struct.unpack('I', s)[0]\n... \n&gt;&gt;&gt; maxi = s2i(b'\\xff'*n) + 1\n&gt;&gt;&gt; maxi = float(s2i(b'\\xff'*n) + 1)\n&gt;&gt;&gt; def rnd(): return s2i(os.urandom(n))/maxi\n</code>\n</pre>\n", "senID": 10}, {"text": ["Now we can call random.shuffle(somelist, rnd) and worry less about bias;-)."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "random.shuffle(somelist, rnd)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Unfortunately, measurement shows that this approach to RNG is about 50 times slower than calls to random.random() -- this could be an important practical consideration if we're going to need many random numbers (and if we don't, the worry about possible bias may be misplaced;-).", "The os.urandom approach is also hard to use in predictable, repeatable ways (e.g.", "for testing purposes), while with random.random() you need only provide a fixed initial random.seed at the start of the test to guarantee reproducible behavior."], "childNum": 4, "tag": "p", "senID": 12, "childList": [{"text": "random.random()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.urandom", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "random.random()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "random.seed", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In practice, therefore, os.urandom is only used when you need \"cryptographic quality\" random numbers - ones that a determined attacker can't predict - and are therefore willing to pay the practical price for using it instead of random.random."], "childNum": 2, "tag": "p", "senID": 13, "childList": [{"text": "os.urandom", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "random.random", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The second argument is the function which is called to produce random numbers that are in turn used to shuffle the sequence (first argument).", "The default function used if you don't provide your own is random.random."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You might want to provide this parameter if you want to customize how shuffle is performed."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["And your customized function will have to return numbers in range [0.0, 1.0) - 0.0 included, 1.0 excluded."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The docs go on saying:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It means that you can either specify your own random number generator function, or tell the module to use the default random function.", "The second option is almost always the best choice, because Python uses a pretty good PRNG."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "random", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The function it expects is supposed to return a floating point pseudo-random number in the range [0.0, 1.0), which means 0.0 included and 1.0 isn't included (i.e.", "0.9999 is a valid number to be returned, but 1.0 is not).", "Each number in this range should be in theory returned with equal probability (i.e.", "this is a linear distribution)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The shuffle function depends on an RNG (Random Number Generator), which defaults to random.random.", "The second argument is there so you can provide your own RNG instead of the default."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["UPDATE:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The second argument is a random number generator that generates a new, random number in the range [0.0, 1.0) each time you call it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here's an example for you:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import random\n\ndef a():\n  return 0.0\n\ndef b():\n  return 0.999999999999\n\narr = [1,2,3]\n\nrandom.shuffle(arr)\nprint arr # prints [1, 3, 2]\n\narr.sort()\nprint arr # prints [1, 2, 3]\n\nrandom.shuffle(arr)\nprint arr # prints [3, 2, 1]\n\narr.sort()\nrandom.shuffle(arr, a)\nprint arr # prints [2, 3, 1]\n\narr.sort()\nrandom.shuffle(arr, a)\nprint arr # prints [2, 3, 1]\n\narr.sort()\nrandom.shuffle(arr, b)\nprint arr # prints [1, 2, 3]\n\narr.sort()\nrandom.shuffle(arr, b)\nprint arr # prints [1, 2, 3]\n</code>\n</pre>\n", "senID": 4}, {"text": ["So if the function always returns the same value, you always get the same permutation.", "If the function returns random values each time it's called, you get a random permutation."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["From the example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "example", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/random.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; random.random()        # Random float x, 0.0 &lt;= x &lt; 1.0\n0.37444887175646646\n</code>\n</pre>\n", "senID": 1}, {"text": ["It generates a random floating point number between 0 and 1."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]