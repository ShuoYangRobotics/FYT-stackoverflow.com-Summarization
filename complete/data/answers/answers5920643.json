[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; list('-'.join(ls))\n['a', '-', 'b', '-', 'c', '-', 'd', '-', 'e']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n list = ['a', 'b', 'c', 'd', 'e']\nresult = []\nfor e in list:\n    result.append(e)\n    result.append('-')\nresult.pop()\n</code>\n</pre>\n", "senID": 0}, {"text": ["seems to work"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This should work with any list elements:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sep = '-'\n&gt;&gt;&gt; ls = [1, 2, 13, 14]\n&gt;&gt;&gt; sum([[i, '-'] for i in ls], [])[:-1]\n[1, '-', 2, '-', 13, '-', 14]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think this is a little more elegant/pythonic as well as being general.", "You may find it less readable if you are not used to a functional style though:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n li = ['a','b','c','d','e']\n\nfrom operator import add\nreduce(add, [(elt, \"-\") for elt in li])[:-1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you like, you could use lambda a, b: a+b instead of operator.add."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Adapting this answer to a similar question:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this answer to a similar question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3678869/pythonic-way-to-combine-two-lists-in-an-alternating-fashion/3682033#3682033"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; input = ['a', 'b', 'c', 'd', 'e']\n&gt;&gt;&gt; sep = ['-'] * len(input)\n&gt;&gt;&gt; list(sum(zip(input, sep), ())[:-1])\n['a', '-', 'b', '-', 'c', '-', 'd', '-', 'e']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Another answer to the same question does this using itertools and a slightly modified separator list:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Another answer to the same question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3678869/pythonic-way-to-combine-two-lists-in-an-alternating-fashion/3678930#3678930"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import itertools\n&gt;&gt;&gt; sep = ['-'] * (len(input) - 1)\n&gt;&gt;&gt; list(it.next() for it in itertools.cycle((iter(input), iter(sep))))\n['a', '-', 'b', '-', 'c', '-', 'd', '-', 'e']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The following will add a \"separator\" element between each of those in a list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n seq = ['a','b','c','d','e']\n\ndef tween(seq, sep):\n    return reduce(lambda r,v: r+[sep,v], seq[1:], seq[:1])\n\nprint tween(seq, '-')\n</code>\n</pre>\n", "senID": 1}, {"text": ["output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['a', '-', 'b', '-', 'c', '-', 'd', '-', 'e']\n</code>\n</pre>\n", "senID": 3}, {"text": ["FWIW, here's a similar thread titled Custom string joining in the Usenet comp.lang.python group that might interest you."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "Custom string joining", "tag": "a", "pos": 0, "childList": [{"text": "Custom string joining", "tag": "em"}], "childNum": 1, "href": "http://groups.google.com/group/comp.lang.python/browse_thread/thread/e3083b83301e0630?hl=en#"}, {"text": "Custom string joining", "childNum": 0, "tag": "em", "childList": []}, {"text": "comp.lang.python", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n li = ['a','b','c','d','e']\nfor i in xrange(len(li)-1,0,-1):\n    li[i:i] = '-'\n</code>\n</pre>\n", "senID": 0}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from operator import concat\nseq = ['a','b','c','d','e']\nprint reduce(concat,[['-',x] for x in seq[1:]],seq[0:1])\n</code>\n</pre>\n", "senID": 2}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n li = ['a','b','c','d','e']\nnewli = li[0:1]\n[ newli.extend(('-',x)) for x in li[1:]]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If you want to alter the list without generating a copy, this works, handles all input, and is pretty terse:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def intersperse(lst, item):\n    for i in range(1, len(l)):\n        l.insert(i * 2 - 1, item)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Tested:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; intersperse(l, '-')\n&gt;&gt;&gt; l\n[1, '-', 2, '-', 3, '-', 4, '-', 5]\n</code>\n</pre>\n", "senID": 3}]]