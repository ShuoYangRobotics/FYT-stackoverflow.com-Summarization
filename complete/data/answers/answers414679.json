[[{"text": ["http://code.google.com/p/django-html/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/django-html/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-html/"}]}], [{"text": ["A custom template tag seems to be the solution.", "A custom filter would also do, although it can be less elegant.", "But you would need to fall back to custom form rendering in both cases."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "custom template tag", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#howto-custom-template-tags"}]}, {"text": ["If this is a task of high importance; I'd create a Mixin that allows me to annotate the form fields with label classes and supplies form rendering methods using those classes.", "So that the following code works:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n {{ form.as_table_with_label_classes }}\n</code>\n</pre>\n", "senID": 2}, {"text": ["But I'd like to ask; Do you really need a class on the label tag?", "I mean HTML design-wise.", "It is absolutely necessary to add a class in there?", "Couldn't it be solved with some CSS like:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "add", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n encapsulating_selector label {\n    some-attr: some-value;\n}\n</code>\n</pre>\n", "senID": 4}, {"text": ["I sometimes use jQuery for such cases where; it will improve the page if it works, but it won't be a disaster if it doesn't.", "And keep the HTML source as lean as possible."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "jQuery", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jquery.com"}, {"text": "it will improve the page if it works, but it won't be a disaster if it doesn't", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["http://www.djangosnippets.org/snippets/693/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.djangosnippets.org/snippets/693/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangosnippets.org/snippets/693/"}]}], [{"text": ["I am aggre with answer number one, with css this could be done, but.", "Why is the reson for this in django source."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["class BoundField(StrAndUnicode): in django.forms.forms.py that has the definition of\ndef label_tag(self, contents=None, attrs=None):\nhad been prepare to display this attrs in\ncontents = u'%s' % (widget.id_for_label(id_), attrs, unicode(contents))"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["but def _html_output call this function without attrs in \nlabel = bf.label_tag(label) or ''"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So I seed that django are partially prepare to this but actually it does not used that."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["How about adding the CSS class to the form field in the forms.py, like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyForm(forms.Form):\n    title = forms.CharField(widget=forms.TextInput(attrs={'class': 'foo'}))\n</code>\n</pre>\n", "senID": 1}, {"text": ["then I just do the following in the template:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &lt;label for=\"id_{{form.title.name}}\" class=\"bar\"&gt;\n    {{ form.title }}\n&lt;/label&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["Of course this can easily be modified to work within a for loop tag in the template."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n @register.simple_tag\ndef advanced_label_tag(field):\n    \"\"\" Return form field label html marked to fill by `*` \"\"\"\n    classes = []\n    attrs = {}\n    contents = force_unicode(escape(field.label))\n\n    if field.field.required:\n        classes.append(u'required')\n        contents = force_unicode('%s &lt;span&gt;*&lt;/span&gt;'%escape(field.label))\n\n    if classes:\n        attrs['class'] = u' '.join(classes)\n\n    return field.label_tag(contents=contents, attrs=attrs)\n</code>\n</pre>\n", "senID": 0}]]