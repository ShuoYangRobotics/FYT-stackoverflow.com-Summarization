[[{"text": ["The usual way to do this is something like the following."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["test1.py"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def some_func():\n    print 'in test 1, unproductive'\n\nif __name__ == '__main__':\n    # test1.py executed as script\n    # do something\n    some_func()\n</code>\n</pre>\n", "senID": 2}, {"text": ["service.py"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import test1\n\ndef service_func():\n    print 'service func'\n\nif __name__ == '__main__':\n    # service.py executed as script\n    # do something\n    service_func()\n    test1.some_func()\n</code>\n</pre>\n", "senID": 4}], [{"text": ["This is possible using"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n execfile(\"test2.py\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["See the documentaion for the handling of namespaces, if important in your case."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "documentaion", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#execfile"}]}, {"text": ["However, you should consider using a different approach; your idea (from what I can see) doesn't look very clean."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you want test1.py to remain executable with the same functionality as when it's called inside service.py, then do something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["test1.py"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def main():\n    print \"I am a test\"\n    print \"see! I do nothing productive.\"\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 2}, {"text": ["service.py"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import test1\n# lots of stuff here\ntest1.main() # do whatever is in test1.py\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Use import test1 for the 1st use - it will execute the script.", "For later invocations, treat the script as an imported module, and call the reload(test1) method."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "import test1", "tag": "a", "pos": 0, "childList": [{"text": "import test1", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/reference/simple%5Fstmts.html#the-import-statement"}, {"text": "import test1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "reload(test1)", "tag": "a", "pos": 1, "childList": [{"text": "reload(test1)", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#reload"}, {"text": "reload(test1)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["A simple check of sys.modules can be used to invoke the appropriate action.", "To keep referring to the script name as a string ('test1'), use the 'import()' builtin."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "sys.modules", "tag": "a", "pos": 0, "childList": [{"text": "sys.modules", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/sys.html#sys.modules"}, {"text": "sys.modules", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "'test1'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://docs.python.org/library/functions.html#%5F%5Fimport%5F%5F", "text": "'import()'", "childNum": 1, "tag": "a", "childList": [{"text": "import", "tag": "strong"}]}, {"text": "import", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n import sys\nif sys.modules.has_key['test1']:\n    reload(sys.modules['test1'])\nelse:\n    __import__('test1')\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Why not just import test1?", "every python script is a module.", "Better way would be to have function e.g.", "main/run in test1.py , import test1 and run test1.main() or you can execute test1.py as a subprocess."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You should not be doing this.", "Instead, do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["test1.py:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def print_test():\n      print \"I am a test\"\n      print \"see! I do nothing productive.\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["service.py"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #near the top\nfrom test1 import print_test\n#lots of stuff here\nprint_test()\n</code>\n</pre>\n", "senID": 4}]]