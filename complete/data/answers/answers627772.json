[[{"text": ["I think the built-in widget CheckboxSelectMultiple does what you want.", "If it doesn't, you're going to have to create your own widget.", "The documentation for widgets is a good place to start.", "The easiest way to start is by copying an existing widget from the Django source and modifying it."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "CheckboxSelectMultiple", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "documentation for widgets", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/forms/widgets/#ref-forms-widgets"}]}], [{"text": ["Well to be precise its the widget that Django Admin choses to show in case of ManyToManyField.", "Here in this case its SelectMultiple widget which you feel, is less user friendly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Well easy part is, you can always chose the widget while using your own ModelForm.", "But in case you want that in Django Admin you need a roundtrip.", "Check this out."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from django.forms import widgets\nfrom django.contrib import admin\n\nclass MyModelAdmin(admin.ModelAdmin):\n    def formfield_for_manytomany(self, db_field, request=None, **kwargs):\n    \"\"\"\n    Get a form Field for a ManyToManyField.\n    \"\"\"\n    # If it uses an intermediary model, don't show field in admin.\n    if db_field.rel.through is not None:\n        return None\n\n    if db_field.name in self.raw_id_fields:\n        kwargs['widget'] = admin.widgets.ManyToManyRawIdWidget(db_field.rel)\n        kwargs['help_text'] = ''\n    elif db_field.name in (list(self.filter_vertical) + list(self.filter_horizontal)):\n        kwargs['widget'] = admin.widgets.FilteredSelectMultiple(db_field.verbose_name, (db_field.name in self.filter_vertical))\n    else:\n        kwargs['widget'] = widgets.CheckboxSelectMultiple()\n        kwargs['help_text'] = ''\n\n    return db_field.formfield(**kwargs)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Now, define your routine admin in admin.py as "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class SomeModelAdmin(MyModelAdmin):\n    search_fields = ['foo', 'bar']\n    list_display   = ('foo',)\n    ordering       = ('-bar',)\n\nadmin.site.register(SomeModel, SomeModelAdmin)\n</code>\n</pre>\n", "senID": 4}, {"text": ["You will get checkboxes in DJango Admin now.", "Of course you will need some CSS changes."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["It actually uses model form by default in the admin.", "So, you need to overwrite it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django import forms\nfrom django.forms import widgets\n\nclass DomainForm(forms.ModelForm):\n\n    field2 = YourField(widget=widgets.CheckboxSelectMultiple)\n\n    class Meta:\n        model = Domain()\n        fields = ('field1', 'field2')\n</code>\n</pre>\n", "senID": 1}, {"text": ["So, In this case i have overwritten the default FIELD2 field type."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'm not completely sure I understand what you are attempting to do, but perhaps something like filter_horizontal would do what you want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filter_horizontal", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/contrib/admin/#filter-horizontal"}]}], [{"text": ["Hi Neo:\nCould you point me to the right documentation regarding this.", "I am a newbie at django... so definitely need documentation help for this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Thanks"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can change django admin interface field widget"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.forms import widgets\n\nclass UserAdmin(admin.ModelAdmin):\n    model = User\n\n    def formfield_for_manytomany(self, db_field, request=None, **kwargs):\n        if db_field.name == 'domain' or db_field.name == 'groups':\n        kwargs['widget'] = widgets.CheckboxSelectMultiple()\n\n        # or just make all the manytomany fields as checkbox\n\n        kwargs['widget'] = widgets.CheckboxSelectMultiple()\n\n        return db_field.formfield(**kwargs)\n\n    # for other field\n    def formfield_for_dbfield(self, db_field, **kwargs):\n        .....\n        return super(UserAdmin, self).formfield_for_dbfield(db_field, **kwargs)\n\nadmin.site.register(User, UserAdmin)\n</code>\n</pre>\n", "senID": 1}]]