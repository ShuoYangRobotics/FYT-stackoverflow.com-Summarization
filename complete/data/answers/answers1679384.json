[[{"code": "<pre>\n<code>\n dict.items()\n</code>\n</pre>\n", "senID": 0}, {"text": ["Does the trick."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Your problem is that you have key and value in quotes making them strings, i.e.", "you're setting aKey to contain the string \"key\" and not the value of the variable key.", "Also, you're not clearing out the temp list, so you're adding to it each time, instead of just having two items in it."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "key", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "value", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "aKey", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "\"key\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "key", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "temp", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["To fix your code, try something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for key, value in dict.iteritems():\n    temp = [key,value]\n    dictlist.append(temp)\n</code>\n</pre>\n", "senID": 2}, {"text": ["You don't need to copy the loop variables key and value into another variable before using them so I dropped them out.", "Similarly, you don't need to use append to build up a list, you can just specify it between square brackets as shown above.", "And we could have done dictlist.append([key,value]) if we wanted to be as brief as possible."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "key", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "value", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "dictlist.append([key,value])", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Or just use dict.items() as has been suggested."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "dict.items()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Probably you just want this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dictList = dict.items()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Your approach has two problems.", "For one you use key and value in quotes, which are strings with the letters \"key\" and \"value\", not related to the variables of that names.", "Also you keep adding elements to the \"temporary\" list and never get rid of old elements that are already in it from previous iterations.", "Make sure you have a new and empty temp list in each iteration and use the key and value variables:"], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "key", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "value", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "temp", "childNum": 0, "tag": "code", "childList": []}, {"text": "key", "childNum": 0, "tag": "code", "childList": []}, {"text": "value", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for key, value in dict.iteritems():\n    temp = []\n    aKey = key\n    aValue = value\n    temp.append(aKey)\n    temp.append(aValue)\n    dictList.append(temp)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Also note that this could be written shorter without the temporary variables:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n for key, value in dict.iteritems():\n    dictList.append([key, value])\n</code>\n</pre>\n", "senID": 5}], [{"text": ["you should use dict.items()."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["here is a one liner solution for your problem"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [(k,v) for k,v in dict.items()]\n</code>\n</pre>\n", "senID": 2}, {"text": ["for the result:\n  [('Food', 'Fish&amp;Chips'), ('2012', 'Olympics'), ('Capital', 'London')]\nor you can do"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n l=[]\n[l.extend([k,v]) for k,v in dict.items()]\n</code>\n</pre>\n", "senID": 4}, {"text": ["for:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["['Food', 'Fish&amp;Chips', '2012', 'Olympics', 'Capital', 'London']"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = {'foo': 'bar', 'baz': 'quux', 'hello': 'world'}\n &gt;&gt;&gt; list(reduce(lambda x, y: x + y, a.items()))\n ['foo', 'bar', 'baz', 'quux', 'hello', 'world']\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you're making a dictionary only to make a list of tuples, as creating dicts like you are may be a pain, you might look into using zip()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Its especialy useful if you've got one heading, and multiple rows.", "For instance if I assume that you want Olympics stats for countries:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n headers = ['Capital', 'Food', 'Year']\ncountries = [\n    ['London', 'Fish &amp; Chips', '2012'],\n    ['Beijing', 'Noodles', '2008'],\n]\n\nfor olympics in countries:\n    print zip(headers, olympics)\n</code>\n</pre>\n", "senID": 2}, {"text": ["gives"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [('Capital', 'London'), ('Food', 'Fish &amp; Chips'), ('Year', '2012')]\n[('Capital', 'Beijing'), ('Food', 'Noodles'), ('Year', '2008')]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Don't know if thats the end goal, and my be off topic, but it could be something to keep in mind."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]