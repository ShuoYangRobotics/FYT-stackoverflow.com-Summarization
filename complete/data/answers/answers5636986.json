[[{"text": ["In your Scripts/ directory, add a blank file called __init__.py"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Scripts/", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__init__.py", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Then in your map.py file, do this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from Scripts import script1\n\nmap = {\"One\" : script1.function_one, \"Two\" : script1.function_two]\n\ndef return_mapping(str):\n    return map[str]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["In map.py, the following is simpler:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import Scripts.script1 as script1\nmap = {\"One\" : script1.function_one, \"Two\" : script1.function_two]\ndef return_mapping(str):\n    return map[str]\n</code>\n</pre>\n", "senID": 1}, {"text": ["In main.py:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n selection = raw_input(\"What function would you like to run?\")\nfunction_ptr = map.return_mapping(selection)\n# to call the function: function_ptr(my_args)\n</code>\n</pre>\n", "senID": 3}, {"text": ["edit:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["As mike said, you have to put an empty file called __init__.py in your Scripts directory"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Scripts", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You need to use import.", "This might be what you're looking for:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from Scripts.script1 import function_one, function_two\nprint choices:\nprint \"function_one\"\nprint \"function_two\"\nselection = raw_input(\"What function would you like to run?\")\nif selection == \"function_one\":\n    function_one()\nelif selection == \"function_two\":\n    function_two()\nelse:\n    print \"not a choice\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: Given your additional requirements, consider this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["main.py"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from Scripts.script1 import functions\nprint choices:\nfor func in script1.functions:\n    print func\nselection = raw_input(\"What function would you like to run?\")\nscript1.functions[selection]()\n</code>\n</pre>\n", "senID": 4}, {"text": ["and in script1.py"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\ndef _no_function(*args, *kwargs):\n    print \"No such function\"\n\nfunctions = defaultdict(_no_function)\ndef function_one():\n    pass\n\nfunctions['function_one'] = function_one\n</code>\n</pre>\n", "senID": 6}, {"text": ["This solution permits you to call arbitrary functions without using eval as long as they are added to the dictionary in their respective source files.", "Furthermore, by using a defaultdict you can provide a function when the one requested is not present.", "Ultimately, import is still what you need."], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "defaultdict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "import", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["As said before, you should use import.", "More informations can be found here: Python Documentation"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Python Documentation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html"}]}], [{"text": ["The suggestions by Mike Lewis or Simon are probably what you want, but if you really need to call a function whose name as is determined at runtime, you can do this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "really", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n result = eval(function_ptr + '()')\n</code>\n</pre>\n", "senID": 1}, {"text": ["where function_ptr is a string containing the function name."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "function_ptr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you want to be able to use a path to any file, no matter where it is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import imp\nimport sys\n\nmod = imp.load_source('any_name', 'path_to_your_file')\n# this will get and execute your function\nget_attr(mod, 'your_function_name')()\n# if you want to execute load_source more than once you have to do the following, otherwise the code is not updated:\ndel sys.modules['any_name']\n</code>\n</pre>\n", "senID": 1}]]