[[{"text": ["PyPy is really two projects:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "An interpreter compiler toolchain allowing you to write interpreters in RPython (a static subset of Python) and have cross-platform interpreters compiled standalone, for the JVM, for .NET (etc)", "tag": "none", "senID": 1}, {"text": "An implementation of Python in RPython", "tag": "none", "senID": 2}]}, {"text": ["These two projects allow for many things."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "many", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "Maintaining Python in Python is much easier than maintaining it in C", "tag": "none", "senID": 4}, {"text": "From a single codebase you can generate Python interpreters that run on the JVM, .NET and standalone - rather than having multiple slightly incompatible implementations", "tag": "none", "senID": 5}, {"text": "Part of the compiler toolchain includes an experimental JIT generator (now in its fifth incarnation and starting to work really well) - the ", "tag": "none", "senID": 6}, {"text": "It is much easier to experiment with fundamental language features - like removing the GIL, better garbage collection, integrating stackless and so on", "tag": "none", "senID": 7}]}, {"text": ["So there are really a lot of reasons for PyPy to be exciting, and it is finally starting to live up to all its promises."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["This is a link to presentation one of the PyPy authors gave at PyCon 2009.", "It is very informative."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "link", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blip.tv/file/1957282"}]}], [{"text": ["The most important feature is of course the JIT compiler.", "In CPython files are compiled to bytecode (.pyc) or optimized bytecode (.pyo) and then interpreted.", "With PyPy they will be compiled to native code.", "PyPy also includes Stackless Python patches, including it's impressive features (tasklet serialization, light threads etc."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": ".pyc", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ".pyo", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Stackless Python", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.stackless.com/"}, {"href": "http://codespeak.net/pypy/dist/pypy/doc/stackless.html", "text": "features", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I recently read this blog post post about this by Alex Gaynor and although it does not explicitly answer the OP's question, it does make a pretty convincing argument that Pypy is an exciting area of Python that may shorten those 5-10 years mentioned by OP."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "blog post", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://alexgaynor.net/2010/may/15/pypy-future-python/"}, {"href": "http://stackoverflow.com/users/37181/alex-gaynor", "text": "Alex Gaynor", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["In case that Python gets a real JIT I think it's going to be as fast as any other implementation."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "JIT", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Just-in-time%5Fcompilation"}]}, {"text": ["The advantage is that it's much easier to implement new features.", "One can see this today by observing the library.", "Often modules are written in Python first and then translated into C."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Yes"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]