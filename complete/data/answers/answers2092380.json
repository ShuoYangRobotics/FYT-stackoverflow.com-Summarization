[[{"code": "<pre>\n<code>\n dict((category, list(l)) for category, l \n     in itertools.groupby(l, operator.itemgetter(3))\n</code>\n</pre>\n", "senID": 0}, {"text": ["The main thing here is the usage of itertools.groupby.", "It simply returns iterables instead of lists, which is why there's a call for list(l), which means that if you're ok with that, you can simply write dict(itertools.groupby(l, operator.itemgetter(3)))"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "itertools.groupby", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list(l)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "dict(itertools.groupby(l, operator.itemgetter(3)))", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n newdict = collections.defaultdict(list)\nfor entry in biglist:\n  newdict[entry[3]].append(entry)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["A variation on ghostdog74's answer, which fully uses the semantics of setdefaults:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result={}\nfor li in list_of_lists:\n    result.setdefault(li[-1], []).append(li)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n list_of_lists=[\n[\"url\",\"name\",\"date\",\"category\"],\n[\"hello\",\"world\",\"2010\",\"one category\"],\n[\"foo\",\"bar\",\"2010\",\"another category\"],\n[\"asdfasdf\",\"adfasdf\",\"2010\",\"one category\"],\n[\"qwer\",\"req\",\"2010\",\"another category\"]\n]\nd={}\nfor li in list_of_lists:\n    d.setdefault(li[-1], [])\n    d[ li[-1] ].append(li)\nfor i,j in d.iteritems():\n    print i,j\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n d = {}\nfor e in l:\n    if e[3] in d:\n        d[e[3]].append(e)\n    else:\n        d[e[3]] = [e]\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [\n... [\"url\",\"name\",\"date\",\"category\"],\n... [\"hello\",\"world\",\"2010\",\"one category\"],\n... [\"foo\",\"bar\",\"2010\",\"another category\"],\n... [\"asdfasdf\",\"adfasdf\",\"2010\",\"one category\"],\n... [\"qwer\",\"req\",\"2010\",\"another category\"],\n... ]\n#Intermediate list to generate a more dictionary oriented data\n&gt;&gt;&gt; dl = [ (li[3],li[:3]) for li in l ]\n&gt;&gt;&gt; dl\n[('category', ['url', 'name', 'date']), \n ('one category', ['hello', 'world', '2010']), \n ('another category', ['foo', 'bar', '2010']), \n ('one category', ['asdfasdf', 'adfasdf', '2010']), \n ('another category', ['qwer', 'req', '2010'])]\n#Final dictionary\n&gt;&gt;&gt; d = {}\n&gt;&gt;&gt; for cat, data in dl:\n...   if cat in d:\n...     d[cat] = d[cat] + [ data ]\n...   else:\n...     d[cat] = [ data ]\n...\n&gt;&gt;&gt; d\n{'category': [['url', 'name', 'date']], \n 'one category': [['hello', 'world', '2010'], ['asdfasdf', 'adfasdf', '2010']], \n 'another category': [['foo', 'bar', '2010'], ['qwer', 'req', '2010']]}\n</code>\n</pre>\n", "senID": 0}, {"text": ["The final data it's a little different as I haven't included on the data the category (seems quite pointless to me), but you can add it easily, if needed..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]