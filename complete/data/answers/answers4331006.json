[[{"text": ["Just pass through your persistent object through the recursive method."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def recursivemethod(obj_to_act_on, persistent_obj=None):\n\nif persistent_obj == None:\n    persistent_obj = set()\n\n# Act on your object\n\nreturn recursivemethod(newobj, persistent_obj)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Objects are passed by reference.", "If you're only modifying an object, you can do that from within a recursive function and the change will be globally visible."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you need to assign a variable inside a recursive function and see it after the function returns, then you can't just assign a local variable with =.", "What you can do is update a field of another object."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Accumulator: pass\n\ndef foo():\n    # Create accumulator\n    acc = Accumulator()\n    acc.value = 0\n\n    # Define and call a recursive function that modifies accumulator\n    def bar(n):\n        if (n &gt; 0): bar(n-1)\n        acc.value = acc.value + 1\n    bar(5)\n\n    # Get accumulator\n    return acc.value\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Pass the set into the recursive method as an argument, then modify it there before passing it to the next step.", "Complex objects are passed by reference."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If the object you pass is mutable then changes to it in deeper recursions will be seen in earlier recursions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [], [{"text": ["If it's a container (not an immutable data type), you can pass the object through:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random\n\ndef foo(bar=None, i=10):\n    if bar is None:\n        bar = set()\n    if i == 0:\n        return bar\n    bar |= set(random.randint(1, 1000) for i in xrange(10))\n    return foo(bar, i - 1)\n\nrandom_numbers_set = foo()\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Don't ask me what that's meant to do...", "I was just typing random things :P)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]