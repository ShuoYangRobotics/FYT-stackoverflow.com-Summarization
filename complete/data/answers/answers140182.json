[[{"code": "<pre>\n<code>\n sub (replacement, string[, count = 0])\n</code>\n</pre>\n", "senID": 0}, {"text": ["sub returns the string obtained by replacing the leftmost non-overlapping occurrences of the RE in string by the replacement replacement.", "If the pattern isn't found, string is returned unchanged."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sub", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/regex/regex.html#SECTION000620000000000000000"}]}, {"code": "<pre>\n<code>\n p = re.compile( '(blue|white|red)')\n    &gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes')\n    'colour socks and colour shoes'\n    &gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes', count=1)\n    'colour socks and red shoes'\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You want to use re.sub:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re.sub", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/node46.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.sub(r'aaa...bbb', 'aaaooobbb', \"hola aaaiiibbb como estas?\")\n'hola aaaooobbb como estas?'\n</code>\n</pre>\n", "senID": 1}, {"text": ["To re-use variable parts from the pattern, use \\g&lt;n&gt; in the replacement string to access the n-th () group:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "\\g&lt;n&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.sub( \"(svcOrdNbr +)..\", \"\\g&lt;1&gt;XX\", \"svcOrdNbr               IASZ0080\")\n'svcOrdNbr               XXSZ0080'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Of course.", "See the 'sub' and 'subn' methods of compiled regular expressions, or the 're.sub' and 're.subn' functions.", "You can either make it replace the matches with a string argument you give, or you can pass a callable (such as a function) which will be called to supply the replacement.", "See http://docs.python.org/lib/module-re.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/lib/module-re.html", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-re.html"}]}], [{"text": ["If you want to continue using the syntax you mentioned (replace the match value instead of replacing the part that didn't match), and considering you will only have one group, you could use the code below."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def getExpandedText(pattern, text, replaceValue):\n    m = re.search(pattern, text)\n    expandedText = text[:m.start(1)] + replaceValue + text[m.end(1):]\n    return expandedText\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def getExpandedText(pattern,text,*group):\n    r\"\"\" Searches for pattern in the text and replaces\n    all captures with the values in group.\n\n    Tag renaming:\n    &gt;&gt;&gt; html = '&lt;div&gt; abc &lt;span id=\"x\"&gt; def &lt;/span&gt; ghi &lt;/div&gt;'\n    &gt;&gt;&gt; getExpandedText(r'&lt;/?(span\\b)[^&gt;]*&gt;', html, 'div')\n    '&lt;div&gt; abc &lt;div id=\"x\"&gt; def &lt;/div&gt; ghi &lt;/div&gt;'\n\n    Nested groups, capture-references:\n    &gt;&gt;&gt; getExpandedText(r'A(.*?Z(.*?))B', \"abAcdZefBgh\", r'&lt;\\2&gt;')\n    'abA&lt;ef&gt;Bgh'\n    \"\"\"\n    pattern = re.compile(pattern)\n    ret = []\n    last = 0\n    for m in pattern.finditer(text):\n        for i in xrange(0,len(m.groups())):\n            start,end = m.span(i+1)\n\n            # nested or skipped group\n            if start &lt; last or group[i] is None:\n                continue\n\n            # text between the previous and current match\n            if last &lt; start:\n                ret.append(text[last:start])\n\n            last = end\n            ret.append(m.expand(group[i]))\n\n    ret.append(text[last:])\n    return ''.join(ret)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Edit: Allow capture-references in the replacement strings."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["re.sub() does replacing based on regular expressions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]