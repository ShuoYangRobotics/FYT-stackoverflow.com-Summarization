[[{"text": ["You can use dictionary comprehension."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def turnIntoFractions(d):\n   total = float(sum(d.values()))\n   return {key:(value/total) for key,value in d.items()}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Your first problem is that you are doing the sum of the keys, not the values:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n total = sum(d.values())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now, you can just modify the dictionary inline, instead of putting it into a new list:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for key in d.keys():\n    d[key] /= total    # or d[key] = d[key] / total\n</code>\n</pre>\n", "senID": 3}, {"text": ["My previous code goes through each key, retrieves the value, then divides by total, and then finally stores it back into d[key]."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "d[key]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you want a new dictionary returned, instead of just modifying the existing one, you can just start out with e = d.copy(), then use e instead."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "e = d.copy()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "e", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You seem to want to edit the dict in place, but your code returns a new object, which is actually better practice."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def turnIntoFractions(mydict):\n    values=d.values()\n    total=float(sum(values))\n    result = {}\n    for key, val in mydict.items():\n        result[key] = val/total\n    return result\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use dictionary comprehension"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sum = float(sum(census.itervalues()))\n\nnewDict = {k : (v / sum) for k,v  in census.iteritems()}\n</code>\n</pre>\n", "senID": 1}, {"text": ["for python 2.6:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n newDict  = dict((k,v /sum) for (k,v) in census.iteritems())\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n def turnIntoFractions(mydict):\n  total = sum(mydict.values())\n  for key in mydict:\n    mydict[key] = float(mydict[key]) / total\n</code>\n</pre>\n", "senID": 0}], [{"text": ["your code has the right idea, but also a few small mistakes.", "here's a working code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def turnIntoFractions(d):\n    L=d.values()\n    total=sum(L)\n    f=[]\n    for count in L:\n        f.append(float(count/float(total)))\n    return f\n\ncensus={'a':4, 'b':1, 'c':3}\n\nprint(turnIntoFractions(census))\n</code>\n</pre>\n", "senID": 1}, {"text": ["note that python is case sensitive so f is not the same as F, and also keys that are strings need to be quoted"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]