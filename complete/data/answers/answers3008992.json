[[{"code": "<pre>\n<code>\n from string import maketrans\n\n\"Abc\".translate(maketrans(\"abcABC\", \"defDEF\"))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here's a method using regular expressions.", "The key point is that when it finds a match it first modifies the replacement string to match the casing of the matched string.", "This works because re.sub can take a function as a replacement instead of just a string."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re.sub", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n import re\n\ndef case_sensitive_replace(s, before, after):\n    regex = re.compile(re.escape(before), re.I)\n    return regex.sub(lambda x: ''.join(d.upper() if c.isupper() else d.lower()\n                                       for c,d in zip(x.group(), after)), s)\n\ntest = '''\nabc -&gt; def\nAbc -&gt; Def\naBc -&gt; dEf\nabC -&gt; deF\n'''\n\nresult = case_sensitive_replace(a, 'abc', 'def')\nprint(result)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Result:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\ndef -> def\nDef -> Def\ndEf -> dEf\ndeF -> deF\n</pre>\n", "senID": 3}], [{"text": ["Pythons str.replace is always case sensitive:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "str.replace", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print('test abc test'.replace('abc ', ' def'))\nprint('test Abc test'.replace('Abc ', ' Def'))\nprint('test aBc test'.replace('aBc ', ' dEf'))\nprint('test abC test'.replace('abC ', ' deF'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["will print"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["test  def test\ntest  Def test\ntest  dEf test\ntest  deF test  "], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}], [{"text": ["The re module is probably what you're looking for.", "Specifically, the re.sub function can be used for simple string search/replacement. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "re.sub", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Not the most efficient way, and it's very crude, but probably something like this could work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def case_insensitive_replace(string, old, new):\n    upper_indices = [idx for idx, char in enumerate(string) if char.isupper()]\n    replaced = list(string.lower().replace(old.lower(), new.lower()))\n    for idx in upper_indices:\n        replaced[idx] = replaced[idx].upper()\n    return \"\".join(replaced)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I understand that You want to change the second string case according to the first string.", "Am i right?", "So, my solution is the following.", "String s2 change its case according to the corresponding string s1.", "The result is storing in s3.", "One assumption here is the two strings has the same length."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s1 = \"AaBb\"\ns2 = \"cdef\"\ns3 = \"\"\nindex = 0\nlength = len(s1)\n\nwhile(True):\n    if s1[index].isupper():\n        temp = s2[index].upper()\n    else:\n        temp = s2[index].lower()\n    s3 = s3 + temp\n    index +=1\n    if index == length:\n        break\nprint s3\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Long time lurker, thought I'd post a suggestion here as some of these seem fairly convoluted."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print map(lambda a, b: b.lower() if a.islower() else b.upper(), \"aBc\", \"def\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["It does assume both strings are the same length, however you could easily replace the lambda with a proper function and check for None on the first input."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This will work, although you probably want to add some checks that the string lengths are the same:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string1 = \"AbcDEFghiJKLmnO\"\nstring2 = \"some other text\"\n\nstring2 = \"\".join((string2[i].upper() if string1[i].isupper() else string2[i].lower() \n                   for i in range(len(string1))))\n</code>\n</pre>\n", "senID": 1}]]