[[{"text": ["Couple of things you could use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "dir () will give you the list of in scope variables:", "tag": "none", "senID": 1}, {"text": "globals () will give  you a dictionary of global variables", "tag": "none", "senID": 2}, {"text": "locals () will give you a dictionary of local variables", "tag": "none", "senID": 3}]}], [{"text": ["print locals()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["edit continued from comment."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To make it look a little prettier when printing:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import sys, pprint\nsys.displayhook = pprint.pprint\nlocals()\n</code>\n</pre>\n", "senID": 3}, {"text": ["That should give you a more vertical printout."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["To get the names:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for name in vars().keys():\n  print(name)\n</code>\n</pre>\n", "senID": 1}, {"text": ["To get the values:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for value in vars().values():\n  print(value)\n</code>\n</pre>\n", "senID": 3}, {"text": ["vars() also takes an optional argument to find out which vars are defined within an object itself. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["keep in mind dir() will return all current imports, AND variables."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "AND", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["if you just want your variables, I would suggest a naming scheme that is easy to extract from dir, such as varScore, varNames, etc."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["that way, you can simply do this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for vars in dir():\n if vars.startswith(\"var\"):\n   print vars\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["if you want to list all variables, but exclude imported modules and variables such as:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n __builtins__\n</code>\n</pre>\n", "senID": 6}, {"text": ["you can use something like so:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport re\n\nx = 11\nimports = \"os\",\"re\"\n\nfor vars in dir():\n    if vars.startswith(\"__\") == 0 and vars not in imports:\n    \tprint vars\n</code>\n</pre>\n", "senID": 8}, {"text": ["as you can see, it will show the variable \"imports\" though, because it is a variable (well, a tuple).", "A quick workaround is to add the word \"imports\" into the imports tuple itself!"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["If this is an option for you, you might want to look at IPython:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "IPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/moin/"}]}, {"text": ["To get a list of all currently defined variables, type who:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "who", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n In [1]: foo = 'bar'\n\nIn [2]: who\nfoo\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can type whos for more detail:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "whos", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n In [3]: whos\nVariable   Type    Data/Info\n----------------------------\nfoo        str     bar\n</code>\n</pre>\n", "senID": 4}, {"text": ["There are a wealth of other functions available - basically it is the Python interpreter on steroids.", "One convenient one is store command, which lets you save variables between sessions (kind of like a super easy pickle)"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "store", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "pickle", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you have a few minutes, check out Jeff Rush's excellent IPython demonstration screencasts:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Jeff Rush's excellent IPython demonstration screencasts:", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://showmedo.com/videos/series?name=CnluURUTV"}]}, {"text": ["I am in no way associated with the team behind IPython, just a satisfied user."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Already been asked, I posted this a while back, it's at:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Enumerate or list all variables in a program of [your favorite language here]"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Enumerate or list all variables in a program of [your favorite language here]", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/430811/enumerate-or-list-all-variables-in-a-program-of-your-favorite-language-here"}]}], [{"text": ["globals(), locals(), vars(), and dir() may all help you in what you want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]