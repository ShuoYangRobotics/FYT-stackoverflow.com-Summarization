[[{"text": ["(update)\nEither use FS monitors tools "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "For ", "tag": "none", "senID": 1}, {"text": "For ", "tag": "none", "senID": 2}, {"text": "For ", "tag": "none", "senID": 3}]}, {"text": ["Or a single sleep usage (which I would you consider as much more elegant)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import time\ndef follow(thefile):\n    thefile.seek(0,2)      # Go to the end of the file\n    while True:\n         line = thefile.readline()\n         if not line:\n             time.sleep(0.1)    # Sleep briefly\n             continue\n         yield line\n\nlogfile = open(\"access-log\")\nloglines = follow(logfile)\nfor line in loglines:\n    print line\n</code>\n</pre>\n", "senID": 5}], [{"text": ["When reading from a file, your only choice is sleep (see the source code).", "If you read from a pipe, you can simply read since the read will block until there is data ready."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "see the source code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.koders.com/c/fid8DEE98A42C35A1346FA89C328CC3BF94E25CF377.aspx#L870"}]}, {"text": ["The reason for this is that the OS doesn't support the notion \"wait for someone to write to a file\".", "Only recently, some filesystems added an API where you can listen for changes made to a file but tail is too old to use this API and it's also not available everywhere."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Why don't you just use subprocess.call on tail itself?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "subprocess.call", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tail", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n subproces.call(['tail', '-f', filename])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: Fixed to eliminate extra shell process."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Edit2: Fixed to eliminate deprecated os.popen and thus the need to interpolate parameters, escape espaces and other stuff, and then run a shell process."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Edit2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "os.popen", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["IMO you should use sleep, it works on all platform and code will be simple"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Otherwise you can use platform specific APIs which can tell you when file change\ne.g.", "on window use FindFirstChangeNotification on folder and watch for FILE_NOTIFY_CHANGE_LAST_WRITE events"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "FindFirstChangeNotification", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/aa364417%28VS.85%29.aspx"}]}, {"text": ["On linux i think you can use i-notify"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "i-notify", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks/linux/library/l-inotify.html"}]}, {"text": ["On Mac OSX use FSEvents"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "FSEvents", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/FSEvents"}]}], [{"text": ["If you can use GLib on all platforms, you should use glib.io_add_watch; then you can use a normal GLib mainloop and process events as they happen, without any polling behavior."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "glib.io_add_watch", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["http://library.gnome.org/devel/pygobject/stable/glib-functions.html#function-glib--io-add-watch"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://library.gnome.org/devel/pygobject/stable/glib-functions.html#function-glib--io-add-watch", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://library.gnome.org/devel/pygobject/stable/glib-functions.html#function-glib--io-add-watch"}]}], [{"text": ["You can see here how to do a \"tail -f\" like using inotify."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/576377/"}]}], [{"text": ["This solution does not use sleep, but returns None if no new lines are available.", "The caller needs to check for None coming back, and ignore it plus do something else until it wants to check again (like using sleep() ;) ."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def follow(some_file):\n    this_file = open(some_file)\n    this_file.seek(0,2)      # Go to the end of the file\n    while True:\n         line = this_file.readline()\n         if line:\n             yield line\n         yield None\n\nlogfile = \"access-log\"\nloglines = follow(logfile)\nfor line in loglines:\n    if line is not None:\n        print line\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Most implementations I've seen use readlines() / sleep().", "A solution based on inotify or similar might be faster but consider this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "might", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "once libinotify tells you a file has changed you would end up using readlines() anyway", "tag": "none", "senID": 1}, {"text": ["calling readlines() against a file which hasn't changed, which is what you would end up doing without libinotify, is already a pretty fast operation:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]}, {"text": ["Having said this, considering that any solution similar to libinotify has portability issues, I might reconsider using readlines() / sleep().", "See: http://code.activestate.com/recipes/577968-log-watcher-tail-f-log/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://code.activestate.com/recipes/577968-log-watcher-tail-f-log/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/577968-log-watcher-tail-f-log/"}]}]]