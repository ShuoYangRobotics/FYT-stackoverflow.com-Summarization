[[{"text": ["Put them in a dict using the first element as the key.", "If you check before adding then you'll get the first item with that key, otherwise you'll get the last."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you DO NOT care about the order of the elements in the after the first, this is fast and easy:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; t1= ('0000233/02', 50.0, None, None, None, None, 'Yes')\n&gt;&gt;&gt; t2= ('0000233/02', 200.0, None, None, None, None, 'Yes')\n&gt;&gt;&gt; t1=(t1[0],)+tuple(set(t1[1:]))\n&gt;&gt;&gt; t2=(t2[0],)+tuple(set(t2[1:]))\n&gt;&gt;&gt; t1\n('0000233/02', 50.0, None, 'Yes')\n&gt;&gt;&gt; t2\n('0000233/02', 200.0, 'Yes', None)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you DO care about the order:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; t2= ('0000233/02', 200.0, None, None, None, None, 'Yes')\n&gt;&gt;&gt; nd=[]\n&gt;&gt;&gt; garbage=[nd.append(i) for i in t2 if not nd.count(i)]\n&gt;&gt;&gt; t2=tuple(nd)\n&gt;&gt;&gt; t2\n('0000233/02', 200.0, None, 'Yes')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The ad-hoc solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def unique_elem0( iterable ):\n    seen = set()\n    seen_add = seen.add\n    for element in iterable:\n        key = element[0]\n        if key not in seen:\n            seen_add(key)\n            yield element\n\nprint list(unique_elem0(lst))\n</code>\n</pre>\n", "senID": 1}, {"text": ["The \"copy code from the itertools receipes\" solution:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "itertools receipes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#recipes"}]}, {"code": "<pre>\n<code>\n def unique_everseen(iterable, key=None):\n    \"List unique elements, preserving order. Remember all elements ever seen.\"\n    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D\n    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in ifilterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\nfrom operator import itemgetter        \nprint list(unique_everseen(lst, key=itemgetter(0)))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Look first: http://docs.python.org/faq/programming.html#how-do-you-remove-duplicates-from-a-list"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/faq/programming.html#how-do-you-remove-duplicates-from-a-list", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/faq/programming.html#how-do-you-remove-duplicates-from-a-list"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l=[('0000233/02', 50.0, None, None, None, None, 'Yes'), ('0000233/02', 200.0, None, None, None, None, 'Yes') ]\n&gt;&gt;&gt; dic={}\n&gt;&gt;&gt; for i in l: dic[i[0]]=i\n...   \n&gt;&gt;&gt; dic\n{'0000233/02': ('0000233/02', 200.0, None, None, None, None, 'Yes')}\n&gt;&gt;&gt; list(dic.values())\n[('0000233/02', 200.0, None, None, None, None, 'Yes')]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Quick way: create a dictionary, using the element you want to use to compare as key."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # This will leave the last tuple found with that 1st value in the dict:\nd = {}\nfor t in tuples:\n    d[t[0]] = t # or .set()\n\n# This will leave the first tuple found, instead of the last:\nd = {}\nfor t in tuples:\n    d.setdefault(t[0], t) # setdefault sets the value if it's missing.\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One slightly different way if your input comes sorted (or at least, with the duplicates all clumped together) is to use itertools.groupby:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import itertools, operator\n\ndef filter_duplicates(items):\n    for key, group in itertools.groupby(items, operator.itemgetter(0)):\n        yield next(group)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This picks the first item of every clump of duplicates (grouping by first item).", "This is more efficient than the set/dict based approaches, since there's no extra structure needed, and preserves the order of the sequence.", "It does however depend on the duplicates coming in batches - if they can appear anywhere in the stream, use one of the other methods."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]