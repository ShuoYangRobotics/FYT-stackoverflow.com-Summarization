[[{"code": "<pre>\n<code>\n in_data = False\nfor line in open( 'data.txt' ):\n    if line.startswith( 'Date:' ):\n        in_data = True\n    elif line.startswith( 'End Set' ):\n        in_data = False\n    elif in_data:\n        print line.rstrip()\n</code>\n</pre>\n", "senID": 0}, {"text": ["Just put something like that inside a loop over your files (i.e.", "os.walk) and you should be good to go"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I'd probably do something much simpler, like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import glob, os\n\nstart_search = \"Set :\" \nend_search = \"End Set\" \npath = '.'\n\nfor filename in glob.glob(os.path.join(path, '*.txt')): \n inputfile = open(filename, 'rb', 0)\n print(\"Current file being read: \" + filename)\n is_in_set = False\n while True:\n  line = inputfile.readline()\n  if not line: break\n  if line.startswith(start_search):\n   is_in_set = True\n   inputfile.readline() # Discard the next line.\n  elif line.startswith(end_search):\n   is_in_set = False\n   print('---')\n  elif is_in_set:\n   print(line.rstrip()) # The rstrip removes the extra blank lines.\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you also want the line numbers, wrap the file object so that every time you call readline() it counts the line numbers."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Follow the presentation slides from David M. Beazley at (if you are certain you want to skip the intro, start at page 18):\nhttp://www.dabeaz.com/generators/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.dabeaz.com/generators/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/generators/"}]}, {"text": ["That is undisputably (in my opinion :) the very best way to solve what you are trying to achieve."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Basically, the thing you want is generators, and os.walk.", "A snip from Beazleys code:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "generators", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import os\nimport fnmatch\nimport re\nimport gzip, bz2\n\ndef gen_find(filepat,top):\n    for path, dirlist, filelist in os.walk(top):\n        for name in fnmatch.filter(filelist,filepat):\n            yield os.path.join(path,name)\n\ndef gen_open(filenames):\n    for name in filenames:\n        if name.endswith(\".gz\"):\n            yield gzip.open(name)\n        elif name.endswith(\".bz2\"):\n            yield bz2.BZ2File(name)\n        else:\n            yield open(name)\n\ndef gen_cat(sources):\n    for s in sources:\n        for item in s:\n            yield item\n\ndef gen_grep(pat, lines):\n    patc = re.compile(pat)\n        for line in lines:\n            if patc.search(line): yield line\n\nlognames = gen_find(\"access-log*\", \"/usr/www\")\nlogfiles = gen_open(lognames)\nloglines = gen_cat(logfiles)\npatlines = gen_grep(pat, loglines)\n# in your example you could set pat as \"^[\\d ]+$\"\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You have many issues here."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for line in inputfile: \n    line = inputfile_fileHandle.readline()\n</code>\n</pre>\n", "senID": 1}, {"text": ["inputfile is the name of your file, so this loop is going to be executed once for each character in the name of the file, definitely not what you want.", "You do this twice (nested), so for sure too many lines are being read."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "inputfile", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The goto module was a joke.", "Get rid of it."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "goto", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["When you open the file, don't add 'b' to the mode.", "These are text files, open them as text, not binary."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The first thing I'd do is build a generator that uses a simple state machine to extract the data from a sequence:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def extract_data(seq):\n    state = \"Waiting\"\n    for item in seq:\n        if state == \"Waiting\":\n            if item.startswith(\"Set\"):\n                state = \"SkippingDateLine\"\n                continue\n            if state == \"SkippingDateLine\":\n                state = \"EmittingData\"\n                continue\n            if state == \"EmittingData\":\n                if item.startswith(\"End Set\"):\n                    state = \"Waiting\"\n                    continue\n                yield item.rstrip()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now I can test that generator to see if it really does what I think it's doing:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; data = \"\"\"Set : 1 \nDate: 10212009 \n12 34 56 \n25 67 90\nEnd Set \n+++++++++\nSet: 2 \nDate: 10222009 \n34 56 89 \n25 67 89 \nEnd Set\"\"\".split(\"\\n\")\n\n&gt;&gt;&gt; print list(extract_data(data))\n['12 34 56', '25 67 90', '34 56 89', '25 67 89']\n</code>\n</pre>\n", "senID": 3}, {"text": ["From here it's simple to make a generator that yields the data from a file given its name:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def extract_data_from_file(filename):\n    with open(filename, 'rb') as f:\n        for item in extract_data(f):\n            yield item\n</code>\n</pre>\n", "senID": 5}, {"text": ["...and to test it:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; list(extract_data_from_file(r'c:\\temp\\test\\test1.txt'))\n['12 34 56', '25 67 90', '34 56 89', '25 67 89']\n</code>\n</pre>\n", "senID": 7}, {"text": ["Now build a generator that goes through all the text files in a directory:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n def extract_data_from_directory(path):\n    for filename in os.listdir(path):\n        if filename.endswith('.txt'):\n            fullname = os.path.join(path, filename)\n                for item in extract_data_from_file(fullname):\n                yield item\n</code>\n</pre>\n", "senID": 9}, {"text": ["...and then, after making a copy of test1.txt, test it:"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "test1.txt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; list(extract_data_from_directory(r'c:\\temp\\test'))\n['12 34 56', '25 67 90', '34 56 89', '25 67 89', '12 34 56', '25 67 90', '34 56 89', '25 67 89']\n</code>\n</pre>\n", "senID": 11}], [{"text": ["I'd probably do something even easier:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n grep -E '[0-9][0-9] [0-9][0-9] [0-9][0-9]' *.txt\n</code>\n</pre>\n", "senID": 1}, {"text": ["grep is available on Win32"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "grep is available on Win32", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://gnuwin32.sourceforge.net/packages/grep.htm"}]}], [{"text": ["Several errors:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for line in inputfile:\n</code>\n</pre>\n", "senID": 1}, {"text": ["inputfile is your filename.", "So the for loop will iterate over each character of the filename. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "inputfile", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You need to do"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for line in inputfile_fileHandle:\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then, line already contains your current line.", "Also, you probably don't need to open the file using 'rb' since it's a text file."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "line", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'rb'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Then you nest an identical for loop inside the first loop (which is currently also completely wrong, iterating over the filename once again)."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Not to mention the goto/label nonsense :)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["kurosch has written a good version."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"code": "<pre>\n<code>\n f=0\nfor line in open(\"file\"):    \n    if \"End Set\" in line: f=0\n    if \"Date\" in line: f=1\n    elif f: print line.strip()\n</code>\n</pre>\n", "senID": 0}, {"text": ["output"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $ ./python.py\n12 34 56\n25 67 90\n34 56 89\n25 67 89\n</code>\n</pre>\n", "senID": 2}]]