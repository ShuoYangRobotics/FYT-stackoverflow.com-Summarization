[[{"text": ["Python"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import csv\nimport datetime\n\nstart= datetime.datetime(2009,9,4)\nend= datetime.datetime(2009,9,9)\n\nsource= csv.DictReader( open(\"someFile\",\"rb\") )\nfor row in source:\n    dt = datetime.datetime.strptime(row['date'],\"%Y-%m-%d\")\n    if start &lt;= dt &lt;= end:\n        print row # depends on what \"pulled out\" means\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Well, you could probably somehow make it work with grep, but sed is more suited for the task:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "somehow", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n sort &lt; file.csv | sed -ne /^2009-09-04/,/^2009-09-09/p\n</code>\n</pre>\n", "senID": 1}], [{"text": ["(This solution is in PHP -- but you can probably do that directly from the command-line, I suppose, with somekind of grep or anything)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "(This solution is in PHP -- but you can probably do that directly from the command-line, I suppose, with somekind of grep or anything)", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Considering your dates are in the YYYY-MM-DD format, and that they are at the beginning of each line, you just have to compare the lines alphabetically to compare the dates."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "YYYY-MM-DD", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["One solution would be to :"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "load the string", "tag": "none", "senID": 3}, {"text": "explode it by lines", "tag": "none", "senID": 4}, {"text": "remove the first line", "tag": "none", "senID": 5}, {"text": "iterate over the lines, keeping only those that interest you", "tag": "none", "senID": 6}]}, {"text": ["For the first parts :"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n $str = &lt;&lt;&lt;STR\ndate,test,time,avail\n2009-09-01,JS,0.119,99.90\n2009-09-02,JS,0.154,99.89\n2009-09-03,SWF,0.177,99.90\n2009-09-04,SWF,0.177,99.90\n2009-09-05,SWF,0.177,99.90\n2009-09-06,SWF,0.177,99.90\n2009-09-07,SWF,0.177,99.90\n2009-09-08,SWF,0.177,99.90\n2009-09-09,SWF,0.177,99.90\n2009-09-10,SWF,0.177,99.90\nSTR;\n$lines = explode(PHP_EOL, $str);\nunset($lines[0]); // first line is useless\n</code>\n</pre>\n", "senID": 8}, {"text": ["And, to iterate over the lines, filtering in/out those you want / don't want, you could use a foreach loop... Or use the array_filter function, which exists just for this ;-)"], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "array_filter", "tag": "a", "pos": 0, "childList": [{"text": "array_filter", "tag": "code"}], "childNum": 1, "href": "http://php.net/array%5Ffilter"}, {"text": "array_filter", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For instance, you could use something like this :"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n $new_lines = array_filter($lines, 'my_filter');\nvar_dump($new_lines);\n</code>\n</pre>\n", "senID": 11}, {"text": ["And your callback function would be :"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n function my_filter($line) {\n    $min = '2009-09-04';\n    $max = '2009-09-09';\n    if ($line &gt;= $min &amp;&amp; $line &lt;= $max) {\n        return true;\n    } else {\n        return false;\n    }\n}\n</code>\n</pre>\n", "senID": 13}, {"text": ["And, the result :"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n array\n  4 =&gt; string '2009-09-04,SWF,0.177,99.90' (length=26)\n  5 =&gt; string '2009-09-05,SWF,0.177,99.90' (length=26)\n  6 =&gt; string '2009-09-06,SWF,0.177,99.90' (length=26)\n  7 =&gt; string '2009-09-07,SWF,0.177,99.90' (length=26)\n  8 =&gt; string '2009-09-08,SWF,0.177,99.90' (length=26)\n</code>\n</pre>\n", "senID": 15}, {"text": ["Hope this helps ;-)"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["\nIf your dates where not in the YYYY-MM-DD format, or not at the beginning of each line, you'd have to explode the lines, and use strtotime (or do some custom parsing, depending on the format), and, then, compare timestamps."], "childNum": 7, "tag": "p", "senID": 17, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "YYYY-MM-DD", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://php.net/explode", "text": "explode", "childNum": 1, "tag": "a", "childList": [{"text": "explode", "tag": "code"}]}, {"text": "explode", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://php.net/strtotime", "text": "strtotime", "childNum": 1, "tag": "a", "childList": [{"text": "strtotime", "tag": "code"}]}, {"text": "strtotime", "childNum": 0, "tag": "code", "childList": []}, {"text": "(or do some custom parsing, depending on the format)", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["But, in your case... No need for all that ;-)"], "childNum": 0, "tag": "p", "senID": 18, "childList": []}], [{"text": ["awk solution is similar to sed:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n awk '/^2009-09-04/,/^2009-09-09/ {next} {print}' filename\n</code>\n</pre>\n", "senID": 1}, {"text": ["Without hardcoding the dates:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n awk -v start='^2009-09-04' -v stop='^2009-09-09' '\n    $0 ~ start, $0 ~ stop {next}\n    {print}\n' date.data\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can use perl's flip flop to extract a line range."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "perl's flip flop", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.perl.com/pub/a/2004/06/18/variables.html"}]}], [{"text": ["Using R"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "R", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.r-project.org"}]}, {"code": "<pre>\n<code>\n &gt; d &lt;- read.csv(\"http://dpaste.com/88980/plain/\", sep=\",\", header=T)\n&gt; r1 &lt;- rownames(d[d$date == \"2009-09-04\",])\n&gt; r2 &lt;- rownames(d[d$date == \"2009-09-09\",])\n&gt; d[rownames(d) %in% r1:r2,]\n        date test  time avail\n4 2009-09-04  SWF 0.177  99.9\n5 2009-09-05  SWF 0.177  99.9\n6 2009-09-06  SWF 0.177  99.9\n7 2009-09-07  SWF 0.177  99.9\n8 2009-09-08  SWF 0.177  99.9\n9 2009-09-09  SWF 0.177  99.9\n&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Perl:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]