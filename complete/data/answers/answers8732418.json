[[{"text": ["As python tells you when you start the CLI:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["just ask for help:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "help", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/py3k/library/functions.html#help"}]}, {"code": "<pre>\n<code>\n help(help)\nhelp(list)\nhelp(locals)\nimport math\nhelp(math)\nhelp(math.atan2)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Consider installing IPython.", "Not only does it give you quick and easy access to help doc strings:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "IPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.org"}, {"text": "help doc strings", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://ipython.org/ipython-doc/stable/interactive/tutorial.html#exploring-your-objects"}]}, {"code": "<pre>\n<code>\n In [3]: os.path.expanduser?\nType:       function\nBase Class: &lt;type 'function'&gt;\nString Form:    &lt;function expanduser at 0xb77ffe64&gt;\nNamespace:  Interactive\nFile:       /usr/lib/python2.7/posixpath.py\nDefinition: os.path.expanduser(path)\nDocstring:\n    Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.\n</code>\n</pre>\n", "senID": 1}, {"text": ["it also helps you find out what attributes / methods an object has through tab completion:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "tab completion", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.org/ipython-doc/stable/interactive/tutorial.html#tab-completion"}]}, {"code": "<pre>\n<code>\n os.path.__name__                    os.path.ismount\nos.path.__new__                     os.path.join\nos.path.__package__                 os.path.lexists\nos.path.__reduce__                  os.path.normcase\nos.path.__reduce_ex__               os.path.normpath\nos.path.__repr__                    os.path.os\nos.path.__setattr__                 os.path.pardir\nos.path.__sizeof__                  os.path.pathsep\nos.path.__str__                     os.path.realpath\nos.path.__subclasshook__            os.path.relpath\nos.path._resolve_link               os.path.samefile\nos.path._varprog                    os.path.sameopenfile\nos.path.abspath                     os.path.samestat\nos.path.altsep                      os.path.sep\nos.path.basename                    os.path.split\nos.path.commonprefix                os.path.splitdrive\nos.path.curdir                      os.path.splitext\nos.path.defpath                     os.path.stat\nos.path.devnull                     os.path.supports_unicode_filenames\nos.path.dirname                     os.path.sys\nos.path.exists                      os.path.walk\nos.path.expanduser                  os.path.warnings\n\nIn [4]: os.path.[TAB]\n</code>\n</pre>\n", "senID": 3}, {"text": ["On Debian/Ubuntu, ipython can be installed with"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n sudo apt-get install ipython\n</code>\n</pre>\n", "senID": 5}], [{"text": ["If you mean using the shell command line, here is a possible solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n python -c \"help(help)\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For most modules:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Python 2.6.7 (r267:88850, Sep 23 2011, 00:28:08) \n....\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; help(os)\n\n&gt;&gt;&gt; print os.__doc__\nOS routines for Mac, NT, or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.\n  - os.path is one of the modules posixpath, or ntpath\n  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'\n  - os.curdir is a string representing the current directory ('.' or ':')\n  - os.pardir is a string representing the parent directory ('..' or '::')\n  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')\n  .....\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you mean the Python command prompt then:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n help(whatever)\n</code>\n</pre>\n", "senID": 1}, {"text": ["or if whatever is a reserved word:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "whatever", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n help(\"whatever\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you mean the shell or windows command prompt then use pydoc:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n C:\\Python32&gt;lib\\pydoc.py json.dumps\nHelp on function dumps in json:\n\njson.dumps = dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, s\neparators=None, default=None, **kw)\n    Serialize ``obj`` to a JSON formatted ``str``.\n\n    If ``skipkeys`` is false then ``dict`` keys that are not basic types\n    (``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped\n    instead of raising a ``TypeError``.\n\n    If ``ensure_ascii`` is false, then the return value can contain non-ASCII\n    characters if they appear in strings contained in ``obj``. Otherwise, all\n    such characters are escaped in JSON strings.\n\n    If ``check_circular`` is false, then the circular reference check\n    for container types will be skipped and a circular reference will\n    result in an ``OverflowError`` (or worse).\n\n    If ``allow_nan`` is false, then it will be a ``ValueError`` to\n    serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) in\n    strict compliance of the JSON specification, instead of using the\n    JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n\n    If ``indent`` is a non-negative integer, then JSON array elements and\n    object members will be pretty-printed with that indent level. An indent\n    level of 0 will only insert newlines. ``None`` is the most compact\n    representation.\n\n    If ``separators`` is an ``(item_separator, dict_separator)`` tuple\n    then it will be used instead of the default ``(', ', ': ')`` separators.\n    ``(',', ':')`` is the most compact JSON representation.\n\n    ``default(obj)`` is a function that should return a serializable version\n    of obj or raise TypeError. The default simply raises TypeError.\n\n    To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n    ``.default()`` method to serialize additional types), specify it with\n    the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You can use pydoc"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "pydoc", "tag": "a", "pos": 0, "childList": [{"text": "pydoc", "tag": "code"}], "childNum": 1, "href": "http://manpages.ubuntu.com/manpages/oneiric/man1/pydoc.1.html"}, {"text": "pydoc", "childNum": 0, "tag": "code", "childList": []}]}]]