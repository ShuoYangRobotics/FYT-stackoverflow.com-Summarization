[[{"text": ["This is as pythonic as you can get:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for lat, long in zip(Latitudes, Longitudes):\n    print lat, long\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Good to see lots of love for zip in the answers here. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "zip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["However it should be noted that if you are using a python version before 3.0, the itertools module in the standard library contains an izip function which returns an iterable, which is more appropriate in this case (especially if your list of latt/longs is quite long)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "itertools", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "izip", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In python 3 and later zip behaves like izip."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "zip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "izip", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Another way to do this would be to by using map.\n"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a  \n[1, 2, 3]  \n&gt;&gt;&gt; b  \n[4, 5, 6]  \n&gt;&gt;&gt; for i,j in map(None,a,b):  \n    ...   print i,j  \n    ...  \n1 4  \n2 5  \n3 6\n</code>\n</pre>\n", "senID": 1}, {"senID": 2}, {"text": ["One difference in using map compared to zip is, with zip the length of new list is\nsame as the length of shortest list.", "For example:\n"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a  \n[1, 2, 3, 9]  \n&gt;&gt;&gt; b  \n[4, 5, 6]  \n&gt;&gt;&gt; for i,j in zip(a,b):  \n    ...   print i,j  \n    ...   \n1 4  \n2 5  \n3 6\n</code>\n</pre>\n", "senID": 4}, {"text": ["\nUsing map on same data:\n"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n&gt;&gt;&gt; for i,j in map(None,a,b):  \n    ...   print i,j  \n    ...   \n\n    1 4  \n    2 5  \n    3 6  \n    9 None\n</pre>\n", "senID": 6}, {"senID": 7}], [{"text": ["Iterating through elements of two lists simultaneously is known as zipping, and python provides a built in function for it, which is documented here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = [1, 2, 3]\n&gt;&gt;&gt; y = [4, 5, 6]\n&gt;&gt;&gt; zipped = zip(x, y)\n&gt;&gt;&gt; zipped\n[(1, 4), (2, 5), (3, 6)]\n&gt;&gt;&gt; x2, y2 = zip(*zipped)\n&gt;&gt;&gt; x == list(x2) and y == list(y2)\nTrue\n</code>\n</pre>\n", "senID": 1}, {"text": ["[Example is taken from pydocs]"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In your case, it will be simply:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for (lat, lon) in (latitudes, longitudes):\n    ... process lat and lon\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n for Lat,Long in zip(Latitudes, Longitudes):\n</code>\n</pre>\n", "senID": 0}], [{"text": ["in case your Latitude and Longitude lists are large and lazily loaded:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import izip\nfor lat, lon in izip(latitudes, longitudes):\n    process(lat, lon)\n</code>\n</pre>\n", "senID": 1}, {"text": ["or if you want to avoid the for-loop"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from itertools import izip, imap\nout = imap(process, izip(latitudes, longitudes))\n</code>\n</pre>\n", "senID": 3}]]