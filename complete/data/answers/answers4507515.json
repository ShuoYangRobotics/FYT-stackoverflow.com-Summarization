[[{"text": ["The example works.", "It seems like you aren't running it correctly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Firstly, IDLE is a somewhat special environment that I never saw the point of, just run it with the normal Python interpreter."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Secondly, specify the whole path to your python interpreter.", "Instead of "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n python ex13c.py B C D\n</code>\n</pre>\n", "senID": 3}, {"text": ["You on Windows need to do something like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n \"C:\\Program Filed\\Python-2.7.1\\Python.exe\" ex13c.py B C D\n</code>\n</pre>\n", "senID": 5}, {"text": ["Reading exercise 13 I also see that Zed calls modules \"features\" up until chapter 13.", "There is no point in doing that, that's just confusing.", "He also in some chapter tells people to memorize the output of logical tables, which is nonsense.", "You don't need to memorize them, you need to understand them."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "memorize", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["Each time this book pops up in questions here I get less impressed with it.", "I'm sure there must be a better tutorial.", "Perhaps Dive into Python?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Try tunning it like \"python test.py foo bar baz\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If it works like that but fails if you call it without specifying the interpreter look here: http://bugs.python.org/issue7936"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://bugs.python.org/issue7936", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bugs.python.org/issue7936"}]}], [{"text": ["Boil your code down to these 4 lines:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from sys import argv\nprint len(argv), repr(argv)\na, b, c, d = argv\nprint a, b, c, d\n</code>\n</pre>\n", "senID": 1}, {"text": ["and run it in a Command Prompt window by typing "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n python yourcode.py B C D\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then copy/paste the exact result into an edit of your question.", "Ensure that you show the ^ produced with any syntax error.", "Also show the exact code that you ran: type yourcode.py"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "copy/paste the exact result", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "^", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "type yourcode.py", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Edit Use this instead:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from sys import argv, version\nprint(version)\nprint(len(argv), repr(argv))\na, b, c, d = argv\nprint(a, b, c, d)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Edit 2"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Edit 2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["FIRST TRIAL: You did: python ex13c.py B C D and got nowhere.", "Now try: c:\\PYTHON\\python ex13c.py B C D\n(I'm assuming from previous evidence that that's where some version of Python is located)"], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "python ex13c.py B C D", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "c:\\PYTHON\\python ex13c.py B C D", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["SECOND TRIAL: You did: ex13c.py with NO ARGUMENTS (why?", ") and the result was: (1) It appears that .py is associated with a 3.1.3 Python executable somewhere, because it was the last version installed (2) Because you supplied no arguments, len(argv) is 1, and argv contains only the path to your script."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "ex13c.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "3.1.3", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["SUGGESTIONS:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["You want to have 2.7 and 3.1 on the same machine.", "This is quite possible (I have 3.1 and 2.1 to 2.7 inclusive because I support software that runs on those versions, and 1.5.2 for nostalgia) with only a mild amount of care.", "The main things that you need to do are (1) Install Python X.Y in a directory c:\\pythonXY (2) run scripts from the commandline like this: \\python27\\python myscript.py arg1 arg2 etc (3) Don't (as you have done at the moment) put your own scripts and data in a software directory like c:\\Python31."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "\\python27\\python myscript.py arg1 arg2 etc", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["So:\nA.", "Set up new script and data directories for \"book1\" and \"book2\".", "Copy all existing code and data to those new directories.", "Take a backup.", "B. Un-install all versions of Python\nC. Install 2.7 and 3.1 to their respective directories.", "D. Check that you can run your scripts from their new locations."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"text": ["Argv is command line arguments, and it misses values (only has one, the script name).", "If you want to have None for missing values you can try:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Argv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n from sys import argv\n\nargv.extend([None, None, None])\nscript, first, second, third = argv\n\nprint \"The script is called:\", script\nprint \"Your first variable is:\", first\nprint \"Your second variable is:\", second\nprint \"Your third variable is:\", third\n</code>\n</pre>\n", "senID": 1}, {"text": ["You could also test for number of missing arguments using len(argv) and you can also provide them as suggested in Learn Python The Hard Way:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "len(argv)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n python ex13.py first 2nd 3rd\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Read farther.", "Page 36 of Learn Python The Hard Way, Release 1.0 says"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What You Should See"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Run the program like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["python ex13.py first 2nd 3rd"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["ARGV takes from the command line.", "Run it as above and put in three variables.", "The script will get the name of the script and then add your three arguments. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["[rick@redhat ~]$ python ex1.py 1st 2nd 3rd"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["The script is called: ex1.py"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Your first variable is: 1st"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Your second variable is: 2nd"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Your third variable is: 3rd"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["[rick@redhat ~]$ "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["I was having this exact same problem, trying all sorts of silly stuff in the registry and what have you as well.", "Turned out I was just noobing up the actual command to run the script, as stated above.", "It's calling for values you have to put in when you go to run it.", "When you get to ex14.py it would give the same error, unless you use:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ex14.py", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"code": "<pre>\n<code>\n python ex14.py (your name)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Dude.", "This happened to me.", "Very simple fix"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You are running your code out of the python software."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["All you gotta do is go to all programs > accessories > command prompt"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["when the command prompt window opens, then you just type \"python ex13.py first second third\""], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["if, when you just type \"python\" by itself and hit return you get an \"undefined message\" you'll need to follow these http://docs.python.org/using/windows.html\nto reset python as an executable \"path\""], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://docs.python.org/using/windows.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/using/windows.html"}]}, {"text": ["i had no idea what \"path\" meant, basically it's just directing the computer where to go when you type \"python\""], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["good luck"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["I found making a simple tweak to the directions above fixed the whole issue: \n1.", "Open Command Prompt\n2.", "Type in: set path=%path%;C:\\python26   (&lt;--I am using 2.6.5, edit accordingly)\n3.", "Type in: python C:/Users/research/Desktop/example.py first second third"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For me, the process only worked when the FULL FILE NAME, not just example.py or ex13.py, whatever- was typed in.", "Good luck!    "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]