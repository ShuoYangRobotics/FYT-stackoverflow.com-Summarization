[[{"text": ["Nothing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Well, okay: money.", "(And time, people, resources, but if you have money, you can buy those."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["V8 has a team of brilliant, highly-specialized, highly-experienced (and thus highly-paid) engineers working on it, that have decades of experience (I'm talking individually&nbsp;&ndash; collectively it's more like centuries) in creating high-performance execution engines for dynamic OO languages.", "They are basically the same people who also created the Sun HotSpot JVM (among many others)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Lars Bak, the lead developer, has been literally working on V8 for 25 years, which is basically his entire (professional) life (and V8's, too).", "Some of the people writing Ruby VMs aren't even 25 years old."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Given that at least IronRuby, JRuby, MagLev, MacRuby and Rubinius have either monomorphic (IronRuby) or polymorphic inline caching, the answer is obviously no."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Modern Ruby implementations already do a great deal of optimizations.", "For example, for certain operations, Rubinius's Hash class is faster than YARV's.", "Now, this doesn't sound terribly exciting until you realize that Rubinius's Hash class is implemented in 100% pure Ruby, while YARV's is implemented in 100% hand-optimized C."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Hash", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Hash", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["So, at least in some cases, Rubinius can generate better code than GCC!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Yes.", "Not just Google.", "V8 is 25 years old now.", "The people who are working on V8 also created the Self VM (to this day one of the fastest dynamic OO language execution engines ever created), the Animorphic Smalltalk VM (to this day one of the fastest Smalltalk execution engines ever created), the HotSpot JVM (the fastest JVM ever created, probably the fastest VM period) and OOVM (one of the most efficient Smalltalk VMs ever created)."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["In fact, Lars Bak, the lead developer of V8, worked on every single one of those, plus a few others."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "every single one", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["A good part of it has to do with community.", "Python and Ruby for the most part have no corporate backing.", "No one gets paid to work on Python and Ruby full-time (and they especially don't get paid to work on CPython or MRI the whole time).", "V8, on the other hand, is backed by the most powerful IT company in the world."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Furthermore, V8 can be faster because the only thing that matters to the V8 people is the interpreter -- they have no standard library to work on, no concerns about language design.", "They just write the interpreter.", "That's it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It has nothing to do with intellectual property law.", "Nor is Python co-developed by Google guys (its creator works there along with a few other committers, but they don't get paid to work on Python)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Another obstacle to Python speed is Python 3.", "Its adoption seems to be the main concern of the language developers -- to the point that they have frozen development of new language features until other implementations catch up."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["On to the technical details, I don't know much about Ruby, but Python has a number of places where optimizations could be used (and Unladen Swallow, a Google project, started to implement these before biting the dust).", "Here are some of the optimizations that they planned.", "I could see Python gaining V8 speed in the future if a JIT a la PyPy gets implemented for CPython, but that does not seem likely for the coming years (the focus right now is Python 3 adoption, not a JIT)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Here are some of the optimizations that they planned", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/unladen-swallow/wiki/ProjectPlan"}]}, {"text": ["Many also feel that Ruby and Python could benefit immensely from removing their respective global interpreter locks."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "global interpreter locks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Global_Interpreter_Lock"}]}, {"text": ["You also have to understand that Python and Ruby are both much heavier languages than JS -- they provide far more in the way of standard library, language features, and structure.", "The class system of object-orientation alone adds a great deal of weight (in a good way, I think).", "I almost think of Javascript as a language designed to be embedded, like Lua (and in many ways, they are similar).", "Ruby and Python have a much richer set of features, and that expressiveness is usually going to come at the cost of speed."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["There's a lot more impetus to highly optimize JavaScript interpretors which is why we see so many resources being put into them between Mozilla, Google, and Microsoft.", "JavaScript has to be downloaded, parsed, compiled, and run in real time while a (usually impatient) human being is waiting for it, it has to run WHILE a person is interacting with it, and it's doing this in an uncontrolled client-end environment that could be a computer, a phone, or a toaster.", "It HAS to be efficient in order to run under these conditions effectively."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python and Ruby are run in an environment controlled by the developer/deployer.", "A beefy server or desktop system generally where the limiting factor will be things like memory or disk I/O and not execution time.", "Or where non-engine optimizations like caching can be utilized.", "For these languages it probably does make more sense to focus on language and library feature set over speed optimization."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The side benefit of this is that we have two great high performance open source JavaScript engines that can and are being re-purposed for all manner of applications such as Node.js."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Performance doesn't seem to be a major focus of the core Python developers, who seem to feel that \"fast enough\" is good enough, and that features that help programmers be more productive are more important than features that help computers run code faster. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Indeed, however, there was a (now abandoned) Google project, unladen-swallow, to produce a faster Python interpreter compatible with the standard interpreter.", "PyPy is another project that intends to produce a faster Python.", "There is also Psyco, the forerunner of PyPy, which can provide performance boosts to many Python scripts without changing out the whole interpreter, and Cython, which lets you write high-performance C libraries for Python using something very much like Python syntax."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "unladen-swallow", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/unladen-swallow/"}, {"text": "PyPy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://codespeak.net/pypy/dist/pypy/doc/"}, {"text": "Psyco", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://psyco.sourceforge.net/"}, {"href": "http://cython.org/", "text": "Cython", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I just ran across this question and there is also a big technical reason for the performance difference that wasn't mentioned.", "Python has a very large ecosystem of powerful software extensions, but most of these extensions are written in C or other low-level languages for performance and are heavily tied to the CPython API. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There are lots of well-known techniques (JIT, modern garbage collector, etc) that could be used to speed up the CPython implementation but all would require substantial changes to the API, breaking most of the extensions in the process.", "CPython would be faster, but a lot of what makes Python so attractive (the extensive software stack) would be lost.", "Case in point, there are several faster Python implementations out there but they have little traction compared to CPython."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Because of different design priorities and use case goals I believe."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In general main purpose of scripting (a.k.a.", "dynamic) languages is to be a \"glue\" between calls of native functions.", "And these native functions shall a) cover most critical/frequently used areas and b) be as effective as possible."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here is an example: \njQuery sort causing iOS Safari to freeze \nThe freeze there is caused by excessive use of get-by-selector calls.", "If get-by-selector would  be implemented in native code and effectively it will be no such problem at all."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "jQuery sort causing iOS Safari to freeze", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/5929267/jquery-sort-causing-ios-safari-to-freeze/"}]}, {"text": ["Consider ray-tracer demo that is frequently used demo for V8 demonstration.", "In Python world it can be implemented in native code as Python provides all facilities for native extensions.", "But in V8 realm (client side sandbox) you have no other options rather than making VM to be [sub]effective as possible.", "And so the only option see ray-tracer implementation there is by using script code. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["So different priorities and motivations."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["In Sciter I've made a test by implementing pretty much full jQurey core natively.", "On practical tasks like ScIDE (IDE made of HTML/CSS/Script) I believe such solution works significantly better then any VM optimizations."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Sciter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.terrainformatica.com/sciter/main.whtm"}, {"text": "ScIDE", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.terrainformatica.com/wp-content/uploads/2008/08/scide.png"}]}]]