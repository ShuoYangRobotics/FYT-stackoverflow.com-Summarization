[[{"text": ["If you want to deal cleanly with administrative rights inside a program, you might want to use PolicyKit rather than sudo, depending on the OS you plan to run your program on."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PolicyKit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/PolicyKit"}]}, {"text": ["For PolicyKit for Python, see python-slip."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "python-slip", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://fedorahosted.org/python-slip/"}]}, {"text": ["Otherwise, there are two ways to call sudo to become root:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n sudo -s\n</code>\n</pre>\n", "senID": 3}, {"text": ["will make you root and keep your current environment (equivalent to sudo su)"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "sudo su", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n sudo -i\n</code>\n</pre>\n", "senID": 5}, {"text": ["will make you root and give you root's environment, too (equivalent to sudo su -)"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "sudo su -", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Another way of dealing with the problem is to consider that you have the rights you need, and let the user of the program choose how to give the rights to your program (using sudo/setuid/unix groups/whatever else)."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["See also this question on ServerFault on the same subject."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "this question on ServerFault", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://serverfault.com/questions/97218/scripts-that-need-some-root-access"}]}], [{"text": ["Aptitude has a \"become root\" option.", "You may wish to see what the author did there."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Your magic function/command could be"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "magic function/command", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n sudo su\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n echo 'echo tee; echo hee'|sudo -s\n</code>\n</pre>\n", "senID": 0}, {"text": ["The output is:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n tee\nhee\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I don't like the idea of being able to run arbitrary commands as root from a lower privileged process.", "However, since you want it, one of the ideas that comes to mind is to keep a setuid restricted shell which can only execute the commands you're interested in allowing.", "You can then use the subprocess.Popen functions to run your command using this restricted shell that will run it with elevated privileges."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "setuid", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Setuid"}, {"text": "restricted shell", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.faqs.org/docs/bashman/bashref%5F75.html"}, {"text": "subprocess.Popen", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I wonder if this would work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Add another group to your system, install the script as a root program and have the sudoers file contain a line that allows the script to be executed by this group.", "Finally add the group to the list of accounts that need to run the script."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Then the script can only be run by root or any account that has the special group in the group set after supplying the account password at the start."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["See Sudo Manual for other options."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Sudo Manual", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.gratisoft.us/sudo/man/sudo.html"}]}], [{"text": ["Unfortunately, I'm not aware of a way to do what you want to do cleanly.", "I think your best bet is to make the program setuid (or run it under sudo) and then either do your dirty work and drop permissions, or fork() and drop permissions from one process and keep the other one around to do your root work."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What you're looking for are the setuid(2) / setreuid(2) / setregid(2) / setgroups(2) calls, but they are all hard wired to not allow you to gain privileges mid-invocation.", "You can only use them to \"give away\" privileges, as far as I know."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You want to authenticate with PAM.", "There's an example here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "example here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ejabberd.im/ejabberd%5Fpam%5Fauthentication"}]}]]