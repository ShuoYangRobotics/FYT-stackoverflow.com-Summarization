[[{"code": "<pre>\n<code>\n def reverse(data_list):\n    return data_list[::-1]\n</code>\n</pre>\n", "senID": 0}, {"code": "<pre>\n>> reverse([1,2,3,4,5])\n[5, 4, 3, 2, 1]\n</pre>\n", "senID": 1}], [{"text": ["an easy way in python (without using the reverse function) is using the [] access operator with negative values such as (print and create a new list in reverse order):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = [1, 2 ,3, 4, 5]\nnewx = []\nfor i in range(1, len(x)+1):\n  newx.append(x[-i])\n  print x[-i]\n</code>\n</pre>\n", "senID": 1}, {"text": ["the function would be:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def reverse(list)\n  newlist = []\n  for i in range(1, len(list)+1):\n    newlist.append(list[-1])\n  return newlist\n</code>\n</pre>\n", "senID": 3}], [{"text": ["By the time you are half-way through the list, you have swapped all the items; as you continue through the second half, you are swapping them all back to their original locations again."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Instead try"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def reverse(lst):\n    i = 0            # first item\n    j = len(lst)-1   # last item\n    while i&lt;j:\n        lst[i],lst[j] = lst[j],lst[i]\n        i += 1\n        j -= 1\n    return lst\n</code>\n</pre>\n", "senID": 2}, {"text": ["This can be used in two ways:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a = [1,2,3,4,5]\nreverse(a)        # in-place\nprint a           # -&gt; [5,4,3,2,1]\n\nb = reverse(a[:]) # return the result of reversing a copy of a\nprint a           # -&gt; [5,4,3,2,1]\nprint b           # -&gt; [1,2,3,4,5]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I do not get the same list when I try to run your code.", "But I also do not get a reversed list because the list is moving forward through the list state which is changing from end back.", "I think the way you are looking to do it is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def reverse(data_set):\n  length = len(data_set)\n\n  for i in range(0, length / 2):\n    length = length - 1\n    hold = data_set[i]\n    data_set[i] = data_set[length]\n    data_set[length] = hold\n  return data_set\n</code>\n</pre>\n", "senID": 1}, {"text": ["here we actually reverse in half the iterations and we memoize the value of the index we are changing so we can set the \"reversal\" in the same step."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You are changing the list that you iterate on it (data_list) because of that it's not working , try like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def reverse(data_list):\n    length = len(data_list)\n    s = length\n\n    new_list = [None]*length\n\n    for item in data_list:\n        s = s - 1\n        new_list[s] = item\n    return new_list\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Something like this should work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mylist = [1,2,3,4,5]\ndef reverse(orig_list):\n    data_list = orig_list[:]\n    length = len(data_list)\n    for i in xrange(0, length/2):\n        tmp = data_list[length-i-1]\n        data_list[length-i-1] = data_list[i]\n        data_list[i] = tmp\n    return data_list\n\nreverse(mylist)\nmylist\n</code>\n</pre>\n", "senID": 1}]]