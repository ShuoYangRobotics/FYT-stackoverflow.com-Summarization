[[{"text": ["In the Python spirit of \"ask for forgiveness, not permission\", here's one way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    b = a[4]\nexcept IndexError:\n    b = 'sss'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In the non-Python spirit of \"ask for permission, not forgiveness\", here's another way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b = a[4] if len(a) &gt; 4 else 'sss'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n try:\n    b = a[4]\nexcept IndexError:\n    b = 'sss'\n</code>\n</pre>\n", "senID": 0}, {"text": ["A cleaner way (only works if you're using a dict):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n b = a.get(4,\"sss\") # exact same thing as above\n</code>\n</pre>\n", "senID": 2}, {"text": ["Here's another way you might like (again, only for dicts):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n b = a.setdefault(4,\"sss\") # if a[4] exists, returns that, otherwise sets a[4] to \"sss\" and returns \"sss\"\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You could also define a little helper function for these cases:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def default(x, e, y):\n    try:\n        return x()\n    except e:\n        return y\n</code>\n</pre>\n", "senID": 1}, {"text": ["It returns the return value of the function x, unless it raised an exception of type e; in that case, it returns the value y. Usage:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "e", "childNum": 0, "tag": "code", "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n b = default(lambda: a[4], IndexError, 'sss')\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit: Made it catch only one specified type of exception."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Suggestions for improvement are still welcome!"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I\u2019m all for asking permission (i.e.", "I don\u2019t like the try\u2026except method).", "However, the code gets a lot cleaner when it\u2019s encapsulated in a method:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "try", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "except", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def get_at(array, index, default):\n    if index &lt; 0: index += len(array)\n    if index &lt; 0: raise IndexError('list index out of range')\n    return array[index] if index &lt; len(a) else default\n\nb = get_at(a, 4, 'sss')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Using try/catch?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    b=a[4]\nexcept IndexError:\n    b='sss'\n</code>\n</pre>\n", "senID": 1}]]