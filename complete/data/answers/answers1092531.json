[[{"text": ["We use an EventHook as suggested from Michael Foord in his Event Pattern:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Event Pattern", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.voidspace.org.uk/python/weblog/arch%5Fd7%5F2007%5F02%5F03.shtml#e616"}]}, {"text": ["Just add EventHooks to your classes with:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class MyBroadcaster()\n\tdef __init__():\n\t\tself.onChange = EventHook()\n\ntheBroadcaster = MyListener()\n\n# add a listener to the event\ntheBroadcaster.onChange += myFunction\n\n# remove listener from the event\ntheBroadcaster.onChange -= myFunction\n\n# fire event\ntheBroadcaster.onChange.fire()\n</code>\n</pre>\n", "senID": 2}, {"text": ["We add the functionality to remove all listener from an object to Michaels class and ended up with this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class EventHook(object):\n\n    def __init__(self):\n        self.__handlers = []\n\n    def __iadd__(self, handler):\n        self.__handlers.append(handler)\n        return self\n\n    def __isub__(self, handler):\n        self.__handlers.remove(handler)\n        return self\n\n    def fire(self, *args, **keywargs):\n        for handler in self.__handlers:\n            handler(*args, **keywargs)\n\n    def clearObjectHandlers(self, inObject):\n        for theHandler in self.__handlers:\n            if theHandler.im_self == inObject:\n                self -= theHandler\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I use zope.event.", "It's the most bare bones you can imagine.", ":-)\nIn fact, here is the complete source code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n subscribers = []\n\ndef notify(event):\n    for subscriber in subscribers:\n        subscriber(event)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that you can't send messages between processes, for example.", "It's not a messaging system, just an event system, nothing more, nothing less."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["PubSub is a pretty nice framework."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PubSub", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pubsub.sourceforge.net/"}]}], [{"text": ["I found this small script on Valued Lessons.", "It seems to have just the right simplicity/power ratio I'm after.", "Peter Thatcher is the author of following code (no licensing is mentioned)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Valued Lessons", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.valuedlessons.com/2008/04/events-in-python.html"}]}, {"code": "<pre>\n<code>\n class Event:\n    def __init__(self):\n        self.handlers = set()\n\n    def handle(self, handler):\n        self.handlers.add(handler)\n        return self\n\n    def unhandle(self, handler):\n        try:\n            self.handlers.remove(handler)\n        except:\n            raise ValueError(\"Handler is not handling this event, so cannot unhandle it.\")\n        return self\n\n    def fire(self, *args, **kargs):\n        for handler in self.handlers:\n            handler(*args, **kargs)\n\n    def getHandlerCount(self):\n        return len(self.handlers)\n\n    __iadd__ = handle\n    __isub__ = unhandle\n    __call__ = fire\n    __len__  = getHandlerCount\n\nclass MockFileWatcher:\n    def __init__(self):\n        self.fileChanged = Event()\n\n    def watchFiles(self):\n        source_path = \"foo\"\n        self.fileChanged(source_path)\n\ndef log_file_change(source_path):\n    print \"%r changed.\" % (source_path,)\n\ndef log_file_change2(source_path):\n    print \"%r changed!\" % (source_path,)\n\nwatcher              = MockFileWatcher()\nwatcher.fileChanged += log_file_change2\nwatcher.fileChanged += log_file_change\nwatcher.fileChanged -= log_file_change2\nwatcher.watchFiles()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I've been doing it this way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Event(list):\n    \"\"\"Event subscription.\n\n    A list of callable objects. Calling an instance of this will cause a\n    call to each item in the list in ascending order by index.\n\n    Example Usage:\n    &gt;&gt;&gt; def f(x):\n    ...     print 'f(%s)' % x\n    &gt;&gt;&gt; def g(x):\n    ...     print 'g(%s)' % x\n    &gt;&gt;&gt; e = Event()\n    &gt;&gt;&gt; e()\n    &gt;&gt;&gt; e.append(f)\n    &gt;&gt;&gt; e(123)\n    f(123)\n    &gt;&gt;&gt; e.remove(f)\n    &gt;&gt;&gt; e()\n    &gt;&gt;&gt; e += (f, g)\n    &gt;&gt;&gt; e(10)\n    f(10)\n    g(10)\n    &gt;&gt;&gt; del e[0]\n    &gt;&gt;&gt; e(2)\n    g(2)\n\n    \"\"\"\n    def __call__(self, *args, **kwargs):\n        for f in self:\n            f(*args, **kwargs)\n\n    def __repr__(self):\n        return \"Event(%s)\" % list.__repr__(self)\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, like with everything else I've seen, there is no auto generated pydoc for this, and no signatures, which really sucks."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If I do code in pyQt I use QT sockets/signals paradigm, same is for django"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If I'm doing async I/O I use native select module"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If I'm usign a SAX python parser I'm using event API provided by SAX.", "So it looks like I'm victim of underlying API :-)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Maybe you should ask yourself what do you expect from event framework/module.", "My personal preference is to use Socket/Signal paradigm from QT.", "more info about that can be found here"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://techbase.kde.org/Development/Tutorials/Python%5Fintroduction%5Fto%5Fsignals%5Fand%5Fslots"}]}], [{"text": ["Here's another module for consideration.", "It seems a viable choice for more demanding applications."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://home.gna.org/py-notify/"}]}]]