[[{"text": ["This is exactly what the rpartition function is used for:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "rpartition", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I wrote this function showing how to use rpartition in your use case:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "rpartition", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def replace_last(source_string, replace_what, replace_with):\n    head, sep, tail = source_string.rpartition(replace_what)\n    return head + replace_with + tail\n\ns = \"123123\"\nr = replace_last(s, '2', 'x')\nprint r\n</code>\n</pre>\n", "senID": 2}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n 1231x3\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Here is a solution based on a simplistic interpretation of your question.", "A better answer will require more information."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"aaa bbb aaa bbb\"\n&gt;&gt;&gt; separator = \" \"\n&gt;&gt;&gt; parts = s.split(separator)\n&gt;&gt;&gt; separator.join(parts[:-1] + [\"xxx\"])\n'aaa bbb aaa xxx'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Update"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["(After seeing edited question) another very specific answer."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"123123\"\n&gt;&gt;&gt; separator = \"2\"\n&gt;&gt;&gt; parts = s.split(separator)\n&gt;&gt;&gt; separator.join(parts[:-1]) + \"x\" + parts[-1]\n'1231x3'\n</code>\n</pre>\n", "senID": 4}, {"text": ["Update 2"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Update 2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["There is far better way to do this.", "Courtesy @mizipzor."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "way to do this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3675318/how-to-replace-the-some-characters-from-the-end-of-a-string/3675423#3675423"}, {"text": "@mizipzor", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/56763/mizipzor"}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"aaa bbb aaa bbb\"\n&gt;&gt;&gt; s[::-1].replace('bbb','xxx',1)[::-1]\n'aaa bbb aaa xxx'\n</code>\n</pre>\n", "senID": 0}, {"text": ["For your second example"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"123123\"\n&gt;&gt;&gt; s[::-1].replace('2','x',1)[::-1]\n'1231x3'\n</code>\n</pre>\n", "senID": 2}], [{"text": ["When the wanted match is at the end of string, re.sub comes to the rescue."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "re.sub", "tag": "a", "pos": 0, "childList": [{"text": "re.sub", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/re.html#re.sub"}, {"text": "re.sub", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; s = \"aaa bbb aaa bbb\"\n&gt;&gt;&gt; s\n'aaa bbb aaa bbb'\n&gt;&gt;&gt; re.sub('bbb$', 'xxx', s)\n'aaa bbb aaa xxx'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Using regular expressions, this is straight-forward"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This is one of the few string functions that doesn't have a left and right version, but we can mimic the behaviour using some of the string functions that do."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = '123123'\n&gt;&gt;&gt; t = s.rsplit('2', 1)\n&gt;&gt;&gt; u = 'x'.join(t)\n&gt;&gt;&gt; u\n'1231x3'\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 'x'.join('123123'.rsplit('2', 1))\n'1231x3'\n</code>\n</pre>\n", "senID": 3}]]