[[{"text": ["Python has a strong set of introspection features. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Take a look at the following built-in functions:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "built-in functions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html"}]}, {"tag": "ul", "num": 8, "lis": [{"text": "type()", "tag": "none", "senID": 2}, {"text": "dir()", "tag": "none", "senID": 3}, {"text": "id()", "tag": "none", "senID": 4}, {"text": "getattr()", "tag": "none", "senID": 5}, {"text": "hasattr()", "tag": "none", "senID": 6}, {"text": "globals()", "tag": "none", "senID": 7}, {"text": "locals()", "tag": "none", "senID": 8}, {"text": "callable()", "tag": "none", "senID": 9}]}, {"text": ["type() and dir() are particularly useful for inspecting the type of an object and its set of attributes, respectively."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Here is an online resource worth perusing:\nDive Into Python Chapter 4: The Power of Introspection"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "Dive Into Python Chapter 4: The Power of Introspection", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org/power%5Fof%5Fintrospection/index.html"}]}], [{"text": ["First, read the source."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Second, use the dir() function."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "dir()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If this is for exploration to see what's going on, I'd recommend looking at IPython.", "This adds various shortcuts to obtain an objects documentation, properties and even source code.", "For instance appending a \"?", "\" to a function will give the help for the object (effectively a shortcut for \"help(obj)\", wheras using two ?", "'s (\"func??", "\") will display the sourcecode if it is available."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "IPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/moin/"}, {"text": "func??", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"text": ["There are also a lot of additional conveniences, like tab completion, pretty printing of results, result history etc.", "that make it very handy for this sort of exploratory programming."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For more programmatic use of introspection, the basic builtins like dir(), vars(), getattr etc will be useful, but it is well worth your time to check out the inspect module.", "To fetch the source of a function, use \"inspect.getsource\"  eg, applying it to itself:"], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "dir()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "vars()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "getattr", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "inspect", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/inspect.html"}, {"text": "inspect.getsource", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print inspect.getsource(inspect.getsource)\ndef getsource(object):\n    \"\"\"Return the text of the source code for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a single string.  An\n    IOError is raised if the source code cannot be retrieved.\"\"\"\n    lines, lnum = getsourcelines(object)\n    return string.join(lines, '')\n</code>\n</pre>\n", "senID": 3}, {"text": ["inspect.getargspec is also frequently useful if you're dealing with wrapping or manipulating functions, as it will give the names and default values of function parameters."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "inspect.getargspec", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You can list the attributes of a object with dir() in the shell:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dir(object())\n['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, there is also the inspect module: http://docs.python.org/library/inspect.html#module-inspect"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/library/inspect.html#module-inspect", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/inspect.html#module-inspect"}]}], [{"text": ["pprint and dir together work great"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["object.__dict__"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "object.__dict__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Others have already mentioned the dir() built-in which sounds like what you're looking for, but here's another good tip.", "Many libraries -- including most of the standard library -- are distributed in source form.", "Meaning you can pretty easily read the source code directly.", "The trick is in finding it; for example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; string.__file__\n'/usr/lib/python2.5/string.pyc'\n</code>\n</pre>\n", "senID": 1}, {"text": ["The *.pyc file is compiled, so remove the trailing 'c' and open up the uncompiled *.py file in your favorite editor or file viewer:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n /usr/lib/python2.5/string.py\n</code>\n</pre>\n", "senID": 3}, {"text": ["I've found this incredibly useful for discovering things like which exceptions are raised from a given API.", "This kind of detail is rarely well-documented in the Python world."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I'm surprised no one's mentioned help yet!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [1]: def foo():\n   ...:     \"foo!\"\n   ...:\n\nIn [2]: help(foo)\nHelp on function foo in module __main__:\n\nfoo()\n    foo!\n</code>\n</pre>\n", "senID": 1}, {"text": ["Help lets you read the docstring and get an idea of what attributes a class might have, which is pretty helpful."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n\"\"\"Visit http://diveintopython.org/\"\"\"\n\n__author__ = \"Mark Pilgrim (mark@diveintopython.org)\"\n\n\ndef info(object, spacing=10, collapse=1):\n    \"\"\"Print methods and doc strings.\n</pre>\n", "senID": 0}, {"code": "<pre>\n<code>\n Takes module, class, list, dictionary, or string.\"\"\"\nmethodList = [e for e in dir(object) if callable(getattr(object, e))]\nprocessFunc = collapse and (lambda s: \" \".join(s.split())) or (lambda s: s)\nprint \"\\n\".join([\"%s %s\" %\n\t\t\t\t (method.ljust(spacing),\n\t\t\t\t  processFunc(str(getattr(object, method).__doc__)))\n\t\t\t\t for method in methodList])\n</code>\n</pre>\n", "senID": 1}, {"text": ["if name == \"main\":\n    print help.doc\n"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "name", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "main", "childNum": 0, "tag": "strong", "childList": []}, {"text": "doc", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["In addition if you want to look inside list and dictionaries, you can use pprint()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you want to look at parameters and methods, as others have pointed out you may well use pprint or dir()"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "pprint", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dir()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you want to see the actual value of the contents, you can do"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["object.__dict__"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "object.__dict__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]