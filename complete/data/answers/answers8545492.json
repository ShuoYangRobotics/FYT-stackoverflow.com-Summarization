[[{"text": ["Pair up the strings character-by-character and iterate over this collection together with a counting index.", "Test whether the characters in each pair differ; if they do, output the index of where."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Using Python builtin functions you can do this neatly in one line:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 'HELPMEPLZ'\n&gt;&gt;&gt; y = 'HELPNEPLX'\n&gt;&gt;&gt; {i for i, (left, right) in enumerate(zip(x,y)) if left != right}\n{8, 4}\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import izip\n&gt;&gt;&gt; s1 = 'HELPMEPLZ'\n&gt;&gt;&gt; s2 = 'HELPNEPLX'\n&gt;&gt;&gt; [i for i,(a1,a2)  in enumerate(izip(s1,s2)) if a1!=a2]\n[4, 8]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s1 = 'HELPMEPLZ'\ns2 = 'HELPNEPLX'\n[i for i in xrange(len(s1)) if s1[i] != s2[i]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["It will return:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt; [4, 8]\n</code>\n</pre>\n", "senID": 3}, {"text": ["The above solution will return a list with the indexes in sorted order, won't create any unnecessary intermediate data structures and it will work on Python 2.3 - 2.7.", "For Python 3.x replace xrange for range."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "xrange", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "range", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If you store the two strings in a and b, you can loop through all the items and check for inequality."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["python interactive interpreter:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "python interactive interpreter:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i in range(len(a)):\n...   if a[i] != b[i]: print i, a[i], b[i]\n... \n4 M N\n8 Z X\n</code>\n</pre>\n", "senID": 2}, {"text": ["Another way to do this is with list comprehensions.", "It's all in one line, and the output is a list."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [i for i in range(len(a)) if a[i] != b[i]]\n[4, 8]\n</code>\n</pre>\n", "senID": 4}, {"text": ["That makes it really easy to wrap into a function, which makes calling it on a variety of inputs easy."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def dif(a, b):\n...     return [i for i in range(len(a)) if a[i] != b[i]]\n...\n&gt;&gt;&gt; dif('HELPMEPLZ', 'HELPNEPLX')\n[4, 8]\n&gt;&gt;&gt; dif('stackoverflow', 'stacklavaflow')\n[5, 6, 7, 8]\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Easiest way is to split data into two char arrays and then loop through comparing the letters and return the index when the two chars do not equal each other."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This method will work fine as long as both strings are equal in length."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Python really comes with batteries included.", "Have a look at difflib"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "difflib", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/difflib.html#module-difflib"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import difflib\n&gt;&gt;&gt; a='HELPMEPLZ'\n&gt;&gt;&gt; b='HELPNEPLX'\n&gt;&gt;&gt; s = difflib.SequenceMatcher(None, a, b)\n&gt;&gt;&gt; for block in s.get_matching_blocks():\n...     print block\nMatch(a=0, b=0, size=4)\nMatch(a=5, b=5, size=3)\nMatch(a=9, b=9, size=0)\n</code>\n</pre>\n", "senID": 1}, {"text": ["difflib is very powerful and a some study of the documentation is really recommended."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "difflib", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]