[[{"text": ["Not sure if it's the best way, but here's one way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lines = open('file.txt')\nfor line in lines:\n   as_list = line.split()\n   result = [as_list[0], as_list[1], as_list[2:]]\n   print result\n</code>\n</pre>\n", "senID": 1}, {"text": ["Result will contain"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['index', 'command', ['param1', 'param2', 'param3']]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n def add_command(index, command, *params):\n    index = int(index)\n    #do what you need to with index, command and params here\n\nwith open('commands.txt') as f:\n    for line in f:\n        add_command(*line.split())\n</code>\n</pre>\n", "senID": 0}], [{"text": ["i typically write: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lines = open('a.txt').readlines()\nfor line in lines:\n    para = lines.split()\n    index = int(para[0])\n    command = para[1]\n    para1 = float(para[2])\n    ...\n</code>\n</pre>\n", "senID": 1}], [], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; for line in open(\"file\"):\n...     line=line.rstrip().split(\" \",2)\n...     line[0]=int(line[0])\n...     line[2]=line[2].split()\n...     print line\n...\n[1, 'command', ['param1', 'param2', 'param3']]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you use Python 3+, then following should be enough as indicated in PEP 3132: Extended Iterable Unpacking:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Python 3+", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://www.python.org/dev/peps/pep-3132/", "text": "PEP 3132: Extended Iterable Unpacking", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n (index,command,*parameters) = line.split()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Otherwise, I like solution from James best:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def add_command(index, command, *params):\n    ...\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The Answer provided by cb160 is correct and smart way, But, I did it in this way.", "In cb160's code, Only thing is index should be in Integer format, as you have mentioned."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "cb160", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "cb160", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["In my below code, I added exceptions for empty lines in input file if there are any."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #Example Input File: (file content)\n\"\"\"\n1 command1 parm1a parm1b parm1c\n2 command2 parm2a parm2b parm2c\n\n3 command3 parm3a parm3b parm3c\n\n\"\"\"\n\nli = []\n\nfor line in open('list_of_commands.txt'):\n  try:\n    lis = line.split()\n    li.append([int(lis[0]),lis[1], lis[2:]])\n  except IndexError:\n    pass    # do nothing if empty lines are found\n\nprint li\n</code>\n</pre>\n", "senID": 2}, {"text": ["Output"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [1, 'command1', ['parm1a', 'parm1b', 'parm1c']]\n[2, 'command2', ['parm2a', 'parm2b', 'parm2c']]\n[3, 'command3', ['parm3a', 'parm3b', 'parm3c']]\n</code>\n</pre>\n", "senID": 4}, {"text": ["let me know if I missed anything."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Thanks"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]