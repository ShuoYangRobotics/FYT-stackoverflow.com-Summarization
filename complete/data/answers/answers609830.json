[[{"text": ["I guess that what you're trying to achieve is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from string import capwords\ncapwords(name)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which yields:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 'Markus Johansson'\n</code>\n</pre>\n", "senID": 3}, {"text": ["EDIT: OK, I see you want to tear down a open door.", "Here's low level implementation."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n ''.join([char.upper() if prev==' ' else char for char,prev in zip(name,' '+name)])\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; \"markus johansson\".title()\n'Markus Johansson'\n</code>\n</pre>\n", "senID": 0}, {"text": ["Built in string methods are the way to go."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["EDIT:\nI see you want to re-invent the wheel.", "Any particular reason ?", "You can choose from any number of convoluted methods like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ' '.join(j[0].upper()+j[1:] for j in \"markus johansson\".split())\n</code>\n</pre>\n", "senID": 3}, {"text": ["Standard Libraries are still the way to go."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Strings are immutable.", "They can't be changed.", "You must create a new string with the changed content.", "If you want to make every 'j' uppercase:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def make_uppercase_j(char):\n    if char == 'j':\n        return 'J'\n    else:\n        return char\nname = \"markus johansson\"\n''.join(make_uppercase_j(c) for c in name)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n # Capitalize the words in a string, e.g. \" aBc  dEf \" -&gt; \"Abc Def\".\ndef capwords(s, sep=None):\n    \"\"\"capwords(s, [sep]) -&gt; string\n\n    Split the argument into words using split, capitalize each\n    word using capitalize, and join the capitalized words using\n    join. Note that this replaces runs of whitespace characters by\n    a single space.\n\n    \"\"\"\n    return (sep or ' ').join(x.capitalize() for x in s.split(sep))\n</code>\n</pre>\n", "senID": 0}, {"code": "<pre>\n<code>\n PyDoc_STRVAR(title__doc__,\n\"S.title() -&gt; string\\n\\\n\\n\\\nReturn a titlecased version of S, i.e. words start with uppercase\\n\\\ncharacters, all remaining cased characters have lowercase.\");\nstatic PyObject*\nstring_title(PyStringObject *self)\n{\n    char *s = PyString_AS_STRING(self), *s_new;\n    Py_ssize_t i, n = PyString_GET_SIZE(self);\n    int previous_is_cased = 0;\n    PyObject *newobj = PyString_FromStringAndSize(NULL, n);\n    if (newobj == NULL)\n    \treturn NULL;\n    s_new = PyString_AsString(newobj);\n    for (i = 0; i &lt; n; i++) {\n    \tint c = Py_CHARMASK(*s++);\n    \tif (islower(c)) {\n    \t\tif (!previous_is_cased)\n    \t\t    c = toupper(c);\n    \t\tprevious_is_cased = 1;\n    \t} else if (isupper(c)) {\n    \t\tif (previous_is_cased)\n    \t\t    c = tolower(c);\n    \t\tprevious_is_cased = 1;\n    \t} else\n    \t\tprevious_is_cased = 0;\n    \t*s_new++ = c;\n    }\n    return newobj;\n}\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n class String(str):\n    def title(self):\n        s = []\n        previous_is_cased = False\n        for c in self:\n            if c.islower():\n               if not previous_is_cased:\n                  c = c.upper()\n               previous_is_cased = True\n            elif c.isupper():\n               if previous_is_cased:\n                  c = c.lower()\n               previous_is_cased = True\n            else:\n               previous_is_cased = False\n            s.append(c)\n        return ''.join(s)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = ' aBc  dEf '\n&gt;&gt;&gt; import string\n&gt;&gt;&gt; string.capwords(s)\n'Abc Def'\n&gt;&gt;&gt; s.title()\n' Abc  Def '\n&gt;&gt;&gt; s\n' aBc  dEf '\n&gt;&gt;&gt; String(s).title()\n' Abc  Def '\n&gt;&gt;&gt; String(s).title() == s.title()\nTrue\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If I understand your original algorithm correctly, this is what you want to do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n namn = list(\"markus johansson\")\n\nif namn[0] == 'm':\n    namn[0] = \"M\"\n\ncount = 0\n\nfor i in range(1, len(namn)):\n    if namn[i] == \" \":\n        count = i + 1\n    if count and namn[count] == 'j':    \n        namn[count] = 'J'\n\nprint ''.join(namn)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, there's a million better ways (\"wannabe\" ways) to do what you're trying to do, like as shown in vartec's answer.", ":)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["As it stands, your code only works for names that start with a J and an M for the first and last names, respectively."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Plenty of good suggestions, so I'll be in good company adding my own 2 cents :-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'm assuming you want something a little more generic that can handle more than just names starting with 'm' and 'j'.", "You'll probably also want to consider hyphenated names (like Markus Johnson-Smith) which have caps after the hyphen too."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from string import lowercase, uppercase\nname = 'markus johnson-smith'\n\nstate = 0\ntitle_name = []\n\nfor c in name:\n    if c in lowercase and not state:\n        c = uppercase[lowercase.index(c)]\n        state = 1\n    elif c in [' ', '-']:\n        state = 0\n    else:\n        state = 1 # might already be uppercase\n\n    title_name.append(c)\n\nprint ''.join(title_name)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Last caveat is the potential for non-ascii characters.", "Using the uppercase and lowercase properties of the string module is good in this case becase their contents change depending on the user's locale (ie: system-dependent, or when locale.setlocale() is called).", "I know you want to avoid using upper() for this exercise, and that's quite neat... as an FYI, upper() uses the locale controlled by setlocale() too, so the practice of use uppercase and lowercase is a good use of the API without getting too high-level.", "That said, if you need to handle, say, French names on a system running an English locale, you'll need a more robust implementation."], "childNum": 9, "tag": "p", "senID": 3, "childList": [{"text": "uppercase", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "lowercase", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "string", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "upper()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "upper()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "locale", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "setlocale()", "childNum": 0, "tag": "code", "childList": []}, {"text": "uppercase", "childNum": 0, "tag": "code", "childList": []}, {"text": "lowercase", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If you're looking into more generic solution for names, you should also look at following examples:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "John Adams-Smith", "tag": "none", "senID": 1}, {"text": "Joanne d'Arc", "tag": "none", "senID": 2}, {"text": "Jean-Luc de'Breu", "tag": "none", "senID": 3}, {"text": "Donatien Alphonse Fran\u00e7ois de Sade", "tag": "none", "senID": 4}]}, {"text": ["Also some parts of the names shouldn't start with capital letters, like:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Herbert von Locke", "tag": "none", "senID": 6}, {"text": "Sander van Dorn", "tag": "none", "senID": 7}, {"text": "Edwin van der Sad", "tag": "none", "senID": 8}]}, {"text": ["so, if you're looking into creating a more generic solution, keep all those little things in mind."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["(This would be a perfect place to run a test-driven development, with all those conditions your method/function must follow)."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "(This would be a perfect place to run a test-driven development, with all those conditions your method/function must follow)", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["\"real programming\"?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would use .title(), and I'm a real programmer."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Or I would use regular expressions"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n re.sub(r\"(^|\\s)[a-z]\", lambda m: m.group(0).upper(), \"this   is a set of  words\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["This says \"If the start of the text or a whitespace character is followed by a lower-case letter\" (in English - other languages are likely not supported), then for each match convert the match text to upper-case.", "Since the match text is the space and the lower-case letter, this works just fine."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If you want it as low-level code then the following works.", "Here I only allow space as the separator (but you may want to support newline and other characters).", "On the other hand, \"string.lowercase\" is internationalized, so if you're in another locale then it will, for the most part, still work.", "If you don't want that then use string.ascii_lowercase."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n import string\n\ndef title(s):\n    # Capitalize the first character\n    if s[:1] in string.lowercase:\n        s = s[0].upper() + s[1:]\n\n    # Find spaces\n    offset = 0\n    while 1:\n        offset = s.find(\" \", offset)\n        # Reached the end of the string or the\n        # last character is a space\n        if offset == -1 or offset == len(s)-1:\n            break\n\n        if s[offset+1:offset+2] in string.lowercase:\n            # Is it followed by a lower-case letter?\n            s = s[:offset+1] + s[offset+1].upper() + s[offset+2:]\n            # Skip the space and the letter\n            offset += 2\n        else:\n            # Nope, so start searching for the next space\n            offset += 1\n\n    return s\n</code>\n</pre>\n", "senID": 6}, {"text": ["To elaborate on my comment to this answer, this question can only be an exercise for curiosity's sake.", "Real names have special capitalization rules: the \"van der\" in \"Johannes Diderik van der Waals\" is never capitalized, \"Farrah Fawcett-Majors\" has the \"M\", and \"Cathal \u00d3 hEochaidh\" uses the non-ASCII \u00d3 and h, which modify \"Eochaidh\" to mean \"grandson of Eochaidh\"."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]]