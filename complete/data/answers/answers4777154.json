[[{"text": ["What about assertions ?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n assert  f(x, y) != z, 'Expected: f(%r, %r) == %r'%(x,y,z)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["to add %r to print repr's - thanks for the comment."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Here's an implementation:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import inspect, keyword, pprint, sys, tokenize\n\ndef value_in_frame(name, frame):\n    try:\n        return frame.f_locals[name]\n    except KeyError:\n        try:\n            return frame.f_globals[name]\n        except KeyError:\n            raise ValueError(\"Couldn't find value for %s\" % name)\n\ndef validate(expr, exc_class=AssertionError):\n    \"\"\"Evaluate `expr` in the caller's frame, raise `exc_class` if false.\"\"\"\n    frame = inspect.stack()[1][0]\n    val = eval(expr, frame.f_globals, frame.f_locals)\n    if not val:\n        rl = iter([expr]).next\n        for typ, tok, _, _, _ in tokenize.generate_tokens(rl):\n            if typ == tokenize.NAME and not keyword.iskeyword(tok):\n                try:\n                    val = value_in_frame(tok, frame)\n                except ValueError:\n                    val = '???'\n                else:\n                    val = repr(val)\n                print \"  %s: %s\" % (tok, val)\n        raise exc_class(\"Failed to validate: %s\" % expr)\n\nif __name__ == '__main__':\n    a = b = 3\n    validate(\"a + b == 5\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This would be possible to do.", "You can use the Python compiler (details differ between versions, so this is just an overview) to compile the given expression into an AST.", "Then you can compile the AST into a code object and evaluate it (or just call eval in the first place, whatever).", "Then, if the value is falsy, inspect the AST to see how the expression is constructed.", "Print out the value of each item in the expression that's accessed by name according to the AST."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["There might be a way to hack up something to do what you ask, but the alternatives are, at least, much easier:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The nose test runner has a plug-in called \"failure detail\" which provides precisely this service: http://somethingaboutorange.com/mrl/projects/nose/0.11.1/plugins/failuredetail.html  .", "This solution is better than what you've asked for, because the expression is not a string, it's an actual assertion that is introspected later to find the source code to analyze."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "nose", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "http://somethingaboutorange.com/mrl/projects/nose/0.11.1/plugins/failuredetail.html", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose/0.11.1/plugins/failuredetail.html"}]}, {"text": ["An example is in the older docs:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "older docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose/0.9.3/#assert-introspection"}]}, {"code": "<pre>\n<code>\n def test_integers():\n    a = 2\n    assert a == 4, \"assert 2 is 4\"\n</code>\n</pre>\n", "senID": 2}, {"code": "<pre>\n<code>\n File \"/path/to/file.py\", line XX, in test_integers:\n      assert a == 4, \"assert 2 is 4\" \nAssertionError: assert 2 is 4\n  &gt;&gt;  assert 2 == 4, \"assert 2 is 4\"\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You could do it the other way round:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n expr = 'f(%r, %r) != %r' % (x,y,z)\n\nif eval(expr):\n    raise MyException(expr)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or in other words:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def validate(expr,myexception):\n    if eval(expr):\n        raise myexception(expr)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Pretty dirty though :)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]