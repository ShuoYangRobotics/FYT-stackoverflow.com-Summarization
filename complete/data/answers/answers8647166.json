[[{"code": "<pre>\n<code>\n parts = old.split(\"hello\")\nparts[1:1] = \"hello\"\nnew = \"\".join(parts)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Seems like there should be a better way..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Must be faster than Ned's one, but the price is readability:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; idx = s.find('hello') + len('hello')\n&gt;&gt;&gt; s[:idx] + s[idx:].replace('hello', '')\n'hello this is  stackoverflow '\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'hello this is hello stackoverflow hello'\n&gt;&gt;&gt; head, sep, tail = s.partition('hello')\n&gt;&gt;&gt; head + sep + tail.replace('hello', '')\n'hello this is  stackoverflow '\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Very bad way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = \"hello this is hello stackoverflow hello\"\ns = s.replace(\"hello\", \"world\").replace(\"world\", \"hello\", 1)\n</code>\n</pre>\n", "senID": 1}, {"text": ["It will replace all the hello by world, then replace only the first world by hello"], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "hello", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "world", "childNum": 0, "tag": "code", "childList": []}, {"text": "world", "childNum": 0, "tag": "code", "childList": []}, {"text": "hello", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n s = \"hello this is hello stackoverflow hello\"\nt = \"hello\"\n\ni = s.index(t) + len(t) + 1\ns = s[:i] + s[i:].replace(t, \"\")\n\nprint s # hello this is  stackoverflow\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Firstly, everyone will see this as a matching pattern conundrum, so the question is why does hello repeat?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "hello", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If the first hello is assumed then a simple filtering of the string can fix the problem"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "hello", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n s = 'hello this is hello stackoverflow hello'\nl = s.split(' ')\n\"hello %s\" % \" \".join(filter (lambda a: a != 'hello', l))\n'hello this is stackoverflow'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import re\ns = 'hello this is hello stackoverflow hello'\nre.sub('\\shello\\s?', ' ', s).strip()\n'hello this is stackoverflow'\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n a = \"hello this is hello stackoverflow hello\"\na[::-1].replace('hello'[::-1],'',1)[::-1]\n'hello this is hello stackoverflow '\n</code>\n</pre>\n", "senID": 0}, {"text": ["Basically, reverse the string and replace the first occurrence and reverse it again."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]