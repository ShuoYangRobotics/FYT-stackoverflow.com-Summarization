[[{"text": ["You can do this with sets:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = set([1,2,3] + [4,5])\n&gt;&gt;&gt; s - set([4, 5])\n{1, 2, 3}\n</code>\n</pre>\n", "senID": 1}, {"text": ["The main difference of course being a set cannot contain duplicate elements."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I would do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; b = [2, 3]\n&gt;&gt;&gt; filter(lambda x: x not in b, a)\n[1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["or using list comprehensions"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [x for x in a if x not in b]\n</code>\n</pre>\n", "senID": 3}, {"text": ["And it can be done the same way for dictionaries."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Set has defined operator - and methods difference and symmetric_difference.", "If you are planning to make extensive use of that operations use set instead of list or dict."], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "Set", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#set"}, {"text": "-", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "difference", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "symmetric_difference", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["The answer depends on the desired semantics of a - b."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a - b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you just want the first elements, then slicing is the natural way to do it:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n In [11]: a = [1, 2, 3]\n\nIn [12]: b = [4 , 5]\n\nIn [13]: ab = a + b\n\nIn [14]: ab[:len(a)]\nOut[14]: [1, 2, 3]\n</code>\n</pre>\n", "senID": 2}, {"text": ["If, on the other hand, you want to remove elements of the first list not found in the second list:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n In [15]: [v for v in ab if v not in b]\nOut[15]: [1, 2, 3]\n</code>\n</pre>\n", "senID": 4}, {"text": ["The second type of operation is more naturally expressed using sets:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n In [18]: set(ab) - set(b)\nOut[18]: set([1, 2, 3])\n</code>\n</pre>\n", "senID": 6}, {"text": ["Note that generally this does not preserve the ordering of the elements (since sets are unordered).", "If ordering is important, and b is likely to be long, converting b into a set may improve performance:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "b", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n In [19]: bset = set(b)\n\nIn [20]: [v for v in ab if v not in bset]\nOut[20]: [1, 2, 3]\n</code>\n</pre>\n", "senID": 8}, {"text": ["For dictionaries, there already exists an in-place \"addition\" operation.", "It's called dict.update()."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "dict.update()", "tag": "a", "pos": 1, "childList": [{"text": "dict.update()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#dict.update"}, {"text": "dict.update()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["y = set(b)\naminusb = filter(lambda p: p not in y,a)"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "y = set(b)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "aminusb = filter(lambda p: p not in y,a)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I would try [x for x in a if a not in b]."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[x for x in a if a not in b]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def list_sub(lst1, lst2):\n    s = set(lst2)\n    return [x for x in lst1 if x not in s]\n\nlist_sub([1, 2, 3, 1, 2, 1, 5], [1, 2])\n&gt; [3, 5]\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's an O(n+m) solution due to the fact that it's using a precomputed set, so membership lookup will be fast.", "Also, it will preserve the order of the original elements and remove duplicates."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "O(n+m)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "set", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Order is not preserved, but it has the result you want:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def list_diff(a, b):\n...     return list(set(a) - set(b))\n... \n&gt;&gt;&gt; print list_diff([1, 2, 3, 1, 2, 1], [1, 2])\n[3]\n</code>\n</pre>\n", "senID": 1}]]