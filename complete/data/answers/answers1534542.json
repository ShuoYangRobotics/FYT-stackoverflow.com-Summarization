[[{"text": ["You can sort the keys the way that you want, by splitting them on '.", "' and then converting each of the components into an integer, like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sorted(mydict.keys(), key=lambda a:map(int,a.split('.')))\n</code>\n</pre>\n", "senID": 1}, {"text": ["which returns this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['0',\n '1',\n '2.0',\n '2.1',\n '3',\n '4.0.0',\n '4.0.1',\n '5',\n '10',\n '11.0',\n '11.1',\n '12.0',\n '12.1.0',\n '12.1.1']\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can iterate over that list of keys, and pull the values out of your dictionary as needed."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You could also sort the result of mydict.items(), very similarly:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n sorted(mydict.items(), key=lambda a:map(int,a[0].split('.')))\n</code>\n</pre>\n", "senID": 6}, {"text": ["This gives you a sorted list of (key, value) pairs, like this:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n [('0', 10),\n ('1', 23),\n ('2.0', 321),\n ('2.1', 3231),\n ('3', 3),\n # ...\n ('12.1.1', 2)]\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Python's sorting functions can take a custom compare function, so you just need to define a function that compares keys the way you like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def version_cmp(a, b):\n  '''These keys just look like version numbers to me....'''\n  ai = map(int, a.split('.'))\n  bi = map(int, b.split('.'))\n  return cmp(ai, bi)\n\nfor k in sorted(mydict.keys(), version_cmp):\n  print k, mydict[k]\n</code>\n</pre>\n", "senID": 1}, {"text": ["In this case you should better to use the key parameter to sorted(), though.", "See Ian Clelland's answer for an example for that."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "key", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sorted()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Ian Clelland", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1534542/can-i-sort-text-by-its-numeric-value-in-python#1534568"}]}], [{"text": ["As an addendum to Ian Clelland's answer, the map() call can be replaced with a list comprehension... if you prefer that style.", "It may also be more efficient (though negligibly in this case I suspect)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Ian Clelland's", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1534542/can-i-sort-text-by-its-numeric-value-in-python#1534568"}, {"text": "map()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "may", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["sorted(mydict.keys(), key=lambda a: [int(i) for i in a.split('.", "')])"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sorted(mydict.keys(), key=lambda a: [int(i) for i in a.split('.')])", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["For fun &amp; usefulness (for googling ppl, mostly):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f = lambda i: [int(j) if re.match(r\"[0-9]+\", j) else j for j in re.findall(r\"([0-9]+|[^0-9]+)\", i)]\ncmpg = lambda x, y: cmp(f(x), f(y))\n</code>\n</pre>\n", "senID": 1}, {"text": ["use as sorted(list, cmp=cmpg).", "Additionally, regexes might be pre-compiled (rarely necessary though, actually, with re module's caching).", "And, it may be (easily) modified, for example, to include negative values (add -?", "to num regex, probably) and/or to use float values."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "sorted(list, cmp=cmpg)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "-?", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["It might be not very efficient, but even with that it's quite useful."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["And, uhm, it can be used as key= for sorted() too."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I would do a search on \"sorting a python dictionary\" and take a look at the answers.", "I would give PEP-265 a read as well.", "The sorted() function is what you are looking for."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "\"sorting a python dictionary\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/search?q=sorting+a+python+dictionary"}, {"text": "PEP-265", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0265/"}, {"text": "sorted()", "tag": "a", "pos": 2, "childList": [{"text": "sorted()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html?highlight=sorted#sorted"}, {"text": "sorted()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["There is a nice sorting HOWTO on the python web site: http://wiki.python.org/moin/HowTo/Sorting .", "It makes a good introduction to sorting, and discusses different techniques to adapt the sorting result to your needs."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://wiki.python.org/moin/HowTo/Sorting", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/HowTo/Sorting"}]}]]