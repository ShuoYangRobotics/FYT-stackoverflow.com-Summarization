[[{"code": "<pre>\n<code>\n d = dict((k, v) for k, v in d.iteritems() if v &gt; 0)\n</code>\n</pre>\n", "senID": 0}, {"text": ["In Python 3, there's nicer syntax for this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n d = {k: v for k, v in d.items() if v &gt; 0}\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note that this is not strictly a filter because it does create a new dictionary."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Assuming your original dictionary is d1 you could use something like:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "d1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n d2 = dict((k, v) for k, v in d1.items() if v &gt; 0)\n</code>\n</pre>\n", "senID": 1}, {"text": ["By the way, note that dict is already reserved in python."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The dict constructor can take a sequence of (key,value) pairs, and the iteritems method of a dict produces a sequence of (key,value) pairs.", "It's two great tastes that taste great together."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(key,value)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "iteritems", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "(key,value)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n newDict = dict([item for item in oldDict.iteritems() if item[1] &gt; 0])\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n foo = {}\nfoo[\"joe\"] = 20\nfoo[\"bill\"] = 20.232\nfoo[\"tom\"] = 0.0\n\nbar = dict((k,v) for k,v in foo.items() if v&gt;0)\n</code>\n</pre>\n", "senID": 0}, {"text": ["dict is a keyword in Python so I replaced it with foo."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["first of all you should not use the keyword dict as a variable name as it pollutes the namespace, and prevents you from referencing the dict class in the current or embedded scope."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n d = {}\nd[\"joe\"] = 20\nd[\"bill\"] = 20.232\nd[\"tom\"] = 0.0\n\n# create an intermediate generator that is fed into dict constructor \n# via a list comprehension\n# this is more efficient that the pure \"[...]\" variant\nd2 = dict(((k, v) for (k, v) in d.iteritems() if v &gt; 0)) \n\nprint d2\n# {'bill': 20.232, 'joe': 20}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Alternatively, you could just create the generator and iterator over it directly.", "This more like a \"filter\", because the generator only references the values in the original dict instead of making a subset copy; and hence is more efficient than creating a new dictionary :"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n filtered = ((k, v) for (k, v) in d.iteritems() if v &gt; 0)\n\nprint filtered \n# &lt;generator object &lt;genexpr&gt; at 0x034A18F0&gt;\n\nfor k, v in filtered:\n    print k, v\n\n# bill 20.232\n# joe 20\n</code>\n</pre>\n", "senID": 3}], [{"text": ["try"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n y = filter(lambda x:dict[x] &gt; 0.0,dict.keys())\n</code>\n</pre>\n", "senID": 1}, {"text": ["the lambda is feed the keys from the dict, and compares the values in the dict for each key, against the criteria, returning back the acceptable keys."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]