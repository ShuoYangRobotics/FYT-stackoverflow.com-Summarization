[[{"text": ["Of the libraries you mention I'd single out the python net-snmp library and pysnmp.", "One of my criteria for choosing well supported libraries is are they in debian/ubuntu and these both pass that test."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Net-snmp does come with python bindings.", "Net-snmp is in some ways the de-facto snmp library (for linux at least) so it is probably a good choice in that respect.", "However net-snmp is an extrememly large and gangly C library (which I've spent rather a lot of time hacking on and reading the source code) which is a downside."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Net-snmp", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://net-snmp.sourceforge.net/"}, {"text": "python bindings", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "https://net-snmp.svn.sourceforge.net/svnroot/net-snmp/trunk/net-snmp/python/README"}]}, {"text": ["The other alternative is a pure python snmp library - pysnmp which seems like a sensible choice, though I haven't actually tried that one.", "The twisted wrapper for it could come in handy."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pure python snmp library - pysnmp", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pysnmp.sourceforge.net/"}]}, {"text": ["If I was starting a new SNMP development I'd try pysnmp to see how well it works, but the old faithful (py)net-snmp is always there if you need it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you just want a bit of light usage of snmp then you can use the net-snmp command line tools very easily, eg"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n snmpget -c password host -v1 enterprises.318.1.1.12.2.3.1.1.2.1\n</code>\n</pre>\n", "senID": 5}, {"text": ["To read the power usage of an APC powerbar, which would work fine for prototyping I would have thought."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["[edit: one year later]"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "[edit: one year later]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I've now had a chance to try the pysnmp library."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["I wasn't happy with the stable branch 2.x, but the development 4.x works and has a lots of good features, including"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "MIB loading", "tag": "none", "senID": 10}, {"text": "Reasonably simple ", "tag": "none", "senID": 11}, {"text": "Full support of set/get/walk with bulk versions of those", "tag": "none", "senID": 12}, {"text": "Sync and Async interface", "tag": "none", "senID": 13}, {"text": "Support for server (agent) and client (manager)", "tag": "none", "senID": 14}]}, {"text": ["I found it moderately complicated to work with, but I managed to work it out with help from the docs and the source code."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["Top tip: set os.environ['PYSNMP_MIB_DIR'] to point to directories with your own converted mibs in, and use build-pysnmp-mib to make them, or if that doesn't work"], "childNum": 2, "tag": "p", "senID": 16, "childList": [{"text": "set os.environ['PYSNMP_MIB_DIR']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "build-pysnmp-mib", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n smidump -k -f python My-MIB.txt | libsmi2pysnmp &gt; My-MIB.py\n</code>\n</pre>\n", "senID": 17}], [{"text": ["Net-Snmp has python bindings.", "Very simple (command-line like functions) access to SNMP functionality.", "If you use the Net-Snmp trap daemon, you can direct trap info to python (or any other language) scripts."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Net-Snmp", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.net-snmp.org/"}]}], [{"text": ["The most active project of \"Security not my Problem\" seems to be pycopia SNMP.", "I have no experience with any of them, but if you have troubles finding the correct one have a look at the mailinglist archives of the libraries to find the most active one.", "Those usually have the better API/implementation or at least more users."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pycopia SNMP", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/pycopia-SNMP"}]}], [{"text": ["This isn't so much an answer as much as me sharing my experience testing these libraries."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I ran some snmpwalk benchmarks on PySNMP 4.x and net-snmp using python's multiprocessing.Pool.", "Benchmarks were pretty dirty (basically scaled up the thread pool until I didn't get any performance gains), so reader be-ware.", "Here's some observations:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "multiprocessing.Pool", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html"}]}, {"text": ["netsnmp's python bindings:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "Could pull down 11958 oids/sec on the quad core test box.", "tag": "none", "senID": 3}, {"text": "Didn't consume a lot of CPU. Seemed to be waiting on network I/O most of the time (keep reading).", "tag": "none", "senID": 4}, {"text": "Didn't support snmpbulkwalk, unfortunately. So this generates more network traffic and a single thread of execution tends to be slow.", "tag": "none", "senID": 5}, {"text": "It has some annoying MIB look up behavior. I had to specify 'ifName' instead of 'IF-MIB::ifName', which could lead to some ambiguity. I also couldn't seem to find a way to control MIB lookups very well.", "tag": "none", "senID": 6}, {"text": "Threading ", "tag": "none", "senID": 7}]}, {"text": ["PySNMP4:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": "Came in at 5560 oids/sec on the same box.", "tag": "none", "senID": 9}, {"text": "Very CPU intensive. I attribute this to the packet parsing being done in python.", "tag": "none", "senID": 10}, {"text": "MIB lookups I thought were really nice.", "tag": "none", "senID": 11}, {"text": "snmpwalks would leak some unrelated OIDs. For example, I'd walk IF-MIB::ifXTable and at the end I'd get IF-MIB::ifStackTable. ", "tag": "none", "senID": 12}, {"text": "I'd almost certainly tailor a wrapper for my application instead of using this library directly. Specifically I'd wrap all the error handling to use Exceptions.", "tag": "none", "senID": 13}, {"text": "I'm not a big fan of writing/reading asynchronous code, so I'd just ignore all the async bits and run big SNMP operations in a separate process.", "tag": "none", "senID": 14}]}, {"text": ["Overall, I'm really kind of disappointed.", "There's really not a \"best overall\" library.", "Apart from the API and performance, PySNMP4 is great.", "Apart from having some strange MIB/oid lookup handling behavior and not supporting many bulk operations, NetSNMP's python bindings were great."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}], [{"text": ["I say the one I wrote last weekend:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.google.com/p/multicore-snmp/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/multicore-snmp/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/multicore-snmp/"}]}, {"text": ["Full process based API to Net-SNMP which supports V1-V3."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I searched for SNMP implementations today, and my favourite is http://pysnmp.sourceforge.net"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pysnmp.sourceforge.net", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pysnmp.sourceforge.net"}]}, {"text": ["They offer one-liners (which are in fact a little bit longer than a normal line, but I am not picky):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from pysnmp.entity.rfc3413.oneliner import cmdgen\n\nerrorIndication, errorStatus, \\\n                 errorIndex, varBinds = cmdgen.CommandGenerator().getCmd(\n    # SNMP v1\n#    cmdgen.CommunityData('test-agent', 'public', 0),\n    # SNMP v2\n    cmdgen.CommunityData('test-agent', 'public'),\n    # SNMP v3\n#    cmdgen.UsmUserData('test-user', 'authkey1', 'privkey1'),\n    cmdgen.UdpTransportTarget(('localhost', 161)),\n    # Plain OID\n    (1,3,6,1,2,1,1,1,0),\n    # ((mib-name, mib-symbol), instance-id)\n    (('SNMPv2-MIB', 'sysObjectID'), 0)\n    )\n</code>\n</pre>\n", "senID": 2}, {"text": ["I wrote a short SNMP interface fetching script here which handles overflowing Counter32 values on cheap HP 1810G switches:\nhttp://blog.lagentz.com/python/handling-snmp-counter32-overflows-on-hp1810-g-correctly/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://blog.lagentz.com/python/handling-snmp-counter32-overflows-on-hp1810-g-correctly/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blog.lagentz.com/python/handling-snmp-counter32-overflows-on-hp1810-g-correctly/"}]}]]