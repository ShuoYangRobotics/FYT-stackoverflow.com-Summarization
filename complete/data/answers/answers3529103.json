[[{"text": ["Provided the join here is just to have a nice string to print or store as result (with a coma as separator, in the OP example it would have been whatever was in string)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n line = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n\nprint ','.join (line[0:2])\n</code>\n</pre>\n", "senID": 1}, {"text": ["A,B"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print ','.join (line[i] for i in [0,1,2,4,5,6])\n</code>\n</pre>\n", "senID": 3}, {"text": ["A,B,C,E,F,G"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["What you are doing in both cases is extracting a sublist from the initial list.", "The first one use a slice, the second one use a list comprehension.", "As others said you could also have accessed to elements one by one, the above syntaxes are merely shorthands for: "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n print ','.join ([line[0], line[1]])\n</code>\n</pre>\n", "senID": 6}, {"text": ["A,B"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n print ','.join ([line[0], line[1], line[2], line[4], line[5], line[6]])\n</code>\n</pre>\n", "senID": 8}, {"text": ["A,B,C,E,F,G"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["I believe some short tutorial on list slices could be helpfull:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["l[x:y]"], "childNum": 0, "tag": "code", "senID": 11, "childList": []}]}, {"text": ["Some examples:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n l = range(1, 100) # create a list of 99 integers from 1 to 99\nl[:]    # resulting slice is a copy of the list\nl[0:]   # another way to get a copy of the list\nl[0:99] # as we know the number of items, we could also do that\nl[0:0]  # a new empty list (remember y is excluded]\nl[0:1]  # a new list that contains only the first item of the old list\nl[0:2]  # a new list that contains only the first two items of the old list\nl[0:-1] # a new list that contains all the items of the old list, except the last\nl[0:len(l)-1] # same as above but less clear \nl[0:-2] # a new list that contains all the items of the old list, except the last two\nl[0:len(l)-2] # same as above but less clear\nl[1:-1] # a new list with first and last item of the original list removed\nl[-2:] # a list that contains the last two items of the original list\nl[0::2] # odd numbers\nl[1::2] # even numbers\nl[2::3] # multiples of 3\n</code>\n</pre>\n", "senID": 13}, {"text": ["If rules to get items are more complex, you'll use a list comprehension instead of a slice, but it's another subjet.", "That's what I use in my second join example."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "list comprehension", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0202/"}]}], [{"text": ["You don't want to use join for that.", "If you just want to print some bits of a list, then specify the ones you want directly:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print '%s %s %s %s' % (line[0], line[1], line[4], line[6])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Assuming that the line variable should contain a line of cells, separated by commas..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "line", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You can use map for that:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n line = \"1,2,3,4,5,6\"\ncells = line.split(\",\")\nindices=[0,1,4,6]\nselected_elements = map( lambda i: cells[i], indices )\nprint \",\".join(selected_elements)\n</code>\n</pre>\n", "senID": 2}, {"text": ["The map function will do the on-the-fly function for each of the indices in the list argument.", "(Reorder to your liking)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You could use the following using list comprehension :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n indices = [0,1,4,6]\nIpadd = string.join([line[i] for i in xrange(len(line)) if i in indices])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note : You could also use :"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Ipadd = string.join([line[i] for i in indices])\n</code>\n</pre>\n", "senID": 3}, {"text": ["but you will need a sorted list of indices without repetition of course."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n l = []\nl.extend(line[0:2])\nl.append(line[5]) # fourth field\nl.append(line[7]) # sixth field\nstring.join(l)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Alternatively"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n \"{l[0]} {l[1]} {l[4]} {l[5]}\".format(l=line)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Please see PEP 3101 and stop using the % operator for string formatting."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "see PEP 3101", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3101/"}, {"text": "%", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; token = ':'\n&gt;&gt;&gt; s = '1:2:3:4:5:6:7:8:9:10'\n&gt;&gt;&gt; sp = s.split(token)\n&gt;&gt;&gt; token.join(filter(bool, map(lambda i: i in [0,2,4,6] and sp[i] or False, range(len(sp)))))\n'1:3:5:7'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Answer to the second question:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If your string is contained in myLine, just do:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "myLine", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n myLline = myLine[:-1]\n</code>\n</pre>\n", "senID": 2}, {"text": ["to remove the last character."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Or you could also use rstrip():"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "rstrip()", "tag": "a", "pos": 0, "childList": [{"text": "rstrip()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#str.rstrip"}, {"text": "rstrip()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n myLine = myLine.rstrip(\"'\")\n</code>\n</pre>\n", "senID": 5}]]