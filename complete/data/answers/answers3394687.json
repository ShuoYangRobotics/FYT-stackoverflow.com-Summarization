[[{"code": "<pre>\n<code>\n li = iter(object_list)\n\nobj = next(li)\n\ndo_first_thing_with(obj)\n\nwhile True:\n    try:\n        do_something_with(obj)\n        obj = next(li)\n    except StopIteration:\n        do_final_thing_with(obj)\n        break\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can use enumerate():"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "enumerate()", "tag": "a", "pos": 0, "childList": [{"text": "enumerate()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#enumerate"}, {"text": "enumerate()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for i, obj in enumerate(object_list):\n    do_something\n    if i == 0:\n        do_something_else\n    if i == len(object_list) - 1:\n        do_another_thing\n</code>\n</pre>\n", "senID": 1}, {"text": ["But instead of checking in every iteration which object you are dealing with, maybe something like this is better:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def do_with_list(object_list):\n    for obj in object_list:\n        do_something(obj)\n    do_something_else(object_list[0])\n    do_another_thing(object_list[-1])\n</code>\n</pre>\n", "senID": 3}, {"text": ["Imagine you have a list of 100 objects, then you make 198 unnecessary comparisons, because the current element cannot be the first or last element in the list."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["But it depends on whether the statements have to be executed in a certain order and what they are doing."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Btw.", "don't shadow object, it is already an identifier in Python ;)"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n for index, obj in enumerate(object_list):\n    do_something\n    if index == 0:\n        do_something_else\n    if index == len(object_list)-1:\n        do_another_thing\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You just have to use a counter, no need for range :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Let's say your counter is cpt."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "cpt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if cpt == 0:\n  print \"first\"\n\nif cpt == len(object_list) - 1:\n  print \"last\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["edit : the enumerate solution may be more elegant."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["So i'd choose 1 or 3.", "PS: list.size() is len(list) of course."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n first = True\nfor o in object_list:\n    do_something(o)\n    if first:\n        first = False\n        do_something_with_first(o)\nif 'o' in locals():\n    do_something_with_last(o)\n</code>\n</pre>\n", "senID": 0}]]