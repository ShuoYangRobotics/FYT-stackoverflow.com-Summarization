[[{"text": ["Some answer explain why this happens and some explain what you should've done.", "I'll shamelessly put the pieces together."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Because the Python language is designed to handle this use case differently.", "The documentation makes it clear:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "The documentation makes it clear:", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html"}]}, {"text": ["Emphasismine.", "See the linked page for more -- the documentation is copyrighted and all rights are reserved."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Emphasismine. See the linked page for more -- the documentation is copyrighted and all rights are reserved.", "childNum": 1, "tag": "sub", "pos": -1, "childList": [{"text": "Emphasis", "tag": "em"}]}, {"text": "Emphasis", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You could easily understand why you got what you got, but it's basically undefined behavior that can easily change with no warning from build to build.", "Just don't do it."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "undefined behavior", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Undefined_behavior"}]}, {"text": ["It's like wondering whyi += i++ + ++idoes whatever the hell it is it that line does on your architecture on your specific build of your compiler for your language -- including but not limited to trashing your computer and making demons fly out of your nose :)"], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "wondering whyi += i++ + ++idoes whatever the hell it is it that line does on your architecture on your specific build of your compiler for your language", "tag": "a", "pos": 0, "childList": [{"text": "i += i++ + ++i", "tag": "code"}], "childNum": 1, "href": "http://stackoverflow.com/questions/949433/could-anyone-explain-these-undefined-behaviors-i-i-i-i-i-etc"}, {"text": "i += i++ + ++i", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://stackoverflow.com/questions/1998903/php-i-i-crashed-the-server", "text": "trashing your computer", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://www.catb.org/jargon/html/N/nasal-demons.html", "text": "making demons fly out of your nose", "childNum": 0, "tag": "a", "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["del letters[:]"], "childNum": 0, "tag": "code", "senID": 5, "childList": []}, {"text": ["letters[:] = []"], "childNum": 0, "tag": "code", "senID": 6, "childList": []}, {"text": ["letters = []"], "childNum": 0, "tag": "code", "senID": 7, "childList": []}]}, {"text": ["Maybe you just want to remove some items based on a condition?", "In that case, you should iterate over a copy of the list.", "The easiest way to make a copy is to make a slice containing the whole list with the [:] syntax, like so:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "[:]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n #remove unsafe commands\ncommands = [\"ls\", \"cd\", \"rm -rf /\"]\nfor cmd in commands[:]:\n  if \"rm \" in cmd:\n    commands.remove(cmd)\n</code>\n</pre>\n", "senID": 9}], [{"text": ["You cannot modify the list you are iterating, otherwise you get this weird type of result.", "To do this, you must iterate over a copy of the list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in letters[:]:\n  letters.remove(i)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You cannot iterate over a list and mutate it at the same time, instead iterate over a slice:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n letters=['a','b','c','d','e','f','g','h','i','j','k','l']\nfor i in letters[:]: # note the [:] creates a slice\n     letters.remove(i)\nprint letters\n</code>\n</pre>\n", "senID": 1}, {"text": ["That said, for a simple operation such as this, you should simply use:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n letters = []\n</code>\n</pre>\n", "senID": 3}], [{"text": ["It removes the first occurrence, and then checks for the next number in the sequence.", "Since the sequence has changed it takes the next odd number and so on..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "take \"a\"", "tag": "none", "senID": 1}, {"text": "remove \"a\" -> the first item is now \"b\"", "tag": "none", "senID": 2}, {"text": "take the next item, \"c\"\n-...", "tag": "none", "senID": 3}]}], [{"text": ["what you want to do is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n letters[:] = []\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n del letters[:]\n</code>\n</pre>\n", "senID": 3}, {"text": ["This will preserve original object letters was pointing to.", "Other options like, letters = [], would create a new object and point letters to it: old object would typically be garbage-collected after a while."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "letters", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "letters = []", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "letters", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The reason not all values were removed is that you're changing list while iterating over it."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["ETA: if you want to filter values from a list you could use list comprehensions like this:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "ETA", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; letters=['a','b','c','d','e','f','g','h','i','j','k','l']\n&gt;&gt;&gt; [l for l in letters if ord(l) % 2]\n['a', 'c', 'e', 'g', 'i', 'k']\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Probably python uses pointers and the removal starts at the front.", "The variable \u201eletters\u201c in the second line partially has a different value than tha variable \u201eletters\u201c in the third line.", "When i is 1 then a is being removed, when i is 2 then b had been moved to position 1 and c is being removed.", "You can try to use \u201ewhile\u201c."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]