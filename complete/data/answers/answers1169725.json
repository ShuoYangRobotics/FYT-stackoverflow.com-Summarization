[[{"text": ["Well, one way would be"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n coord = tuple(sum(x) for x in zip(coord, change))\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you are doing a lot of math, you may want to investigate using NumPy, which has much more powerful array support and better performance."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "NumPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}]}], [{"text": ["List comprehension is probably more readable, but here's another way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = (1,2)\n&gt;&gt;&gt; b = (3,4)\n&gt;&gt;&gt; tuple(map(sum,zip(a,b)))\n(4,6)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is a work in progress as I am learning Python myself.", "Can we use classes here, could simplify some operations later.", "I propose to use a coord class to store the coordinates.", "It would override add and sub so you could do addition and subtraction by simply using operators + and -.", "You could get the tuple representation with a function built into it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Class"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Class", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class coord(object):    \n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n\n    def __add__(self,c):\n        return coord(self.x + c.x, self.y + c.y)\n\n    def __sub__(self,c):\n        return coord(self.x - c.x, self.y - c.y)\n\n    def __eq__(self,c): #compares two coords\n        return self.x == c.x and self.y == c.y\n\n    def t(self): #return a tuple representation.\n        return (self.x,self.y)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Usage"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Usage", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n c1 = coord(4,3) #init coords\nc2 = coord(3,4)\n\nc3 = c1 + c2    #summing two coordinates. calls the overload __add__\nprint c3.t()    #prints (7, 7)\nc3 = c3 - c1\nprint c3.t()    #prints (3, 4)\nprint c3 == c2  #prints True\n</code>\n</pre>\n", "senID": 4}, {"text": ["you could improve coord to extend other operators as well (less than, greater than ..)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["In this version after doing your calculations you can call the pygame methods expecting tuples by just saying coord.t().", "There might be a better way than have a function to return the tuple form though. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["To get your \"+\" and \"+=\" behaviour you can define your own class and implement the __add__() method.", "The following is an incomplete sample:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__add__()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # T.py\nclass T(object):\n    def __init__(self, *args):\n        self._t = args\n    def __add__(self, other):\n        return T(*([sum(x) for x in zip(self._t, other._t)]))\n    def __str__(self):\n        return str(self._t)\n    def __repr__(self):\n        return repr(self._t)\n\n&gt;&gt;&gt; from T import T\n&gt;&gt;&gt; a = T(50, 50)\n&gt;&gt;&gt; b = T(3, -5)\n&gt;&gt;&gt; a\n(50, 50)\n&gt;&gt;&gt; b\n(3, -5)\n&gt;&gt;&gt; a+b\n(53, 45)\n&gt;&gt;&gt; a+=b\n&gt;&gt;&gt; a\n(53, 45)\n&gt;&gt;&gt; a = T(50, 50, 50)\n&gt;&gt;&gt; b = T(10, -10, 10)\n&gt;&gt;&gt; a+b\n(60, 40, 60)\n&gt;&gt;&gt; a+b+b\n(70, 30, 70)\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: I've found a better way..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT: I've found a better way...", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Define class T as a subclass of tuple and override the __new__ and __add__ methods.", "This provides the same interface as class tuple (but with different behaviour for __add__), so instances of class T can be passed to anything that expects a tuple."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "__new__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__add__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "tuple", "childNum": 0, "tag": "code", "childList": []}, {"text": "__add__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class T(tuple):\n    def __new__(cls, *args):\n        return tuple.__new__(cls, args)\n    def __add__(self, other):\n        return T(*([sum(x) for x in zip(self, other)]))\n    def __sub__(self, other):\n        return self.__add__(-i for i in other)\n\n&gt;&gt;&gt; a = T(50, 50)\n&gt;&gt;&gt; b = T(3, -5)\n&gt;&gt;&gt; a\n(50, 50)\n&gt;&gt;&gt; b\n(3, -5)\n&gt;&gt;&gt; a+b\n(53, 45)\n&gt;&gt;&gt; a+=b\n&gt;&gt;&gt; a\n(53, 45)\n&gt;&gt;&gt; a = T(50, 50, 50)\n&gt;&gt;&gt; b = T(10, -10, 10)\n&gt;&gt;&gt; a+b\n(60, 40, 60)\n&gt;&gt;&gt; a+b+b\n(70, 30, 70)\n&gt;&gt;&gt; \n&gt;&gt;&gt; c = a + b\n&gt;&gt;&gt; c[0]\n60\n&gt;&gt;&gt; c[-1]\n60\n&gt;&gt;&gt; for x in c:\n...     print x\n... \n60\n40\n60\n</code>\n</pre>\n", "senID": 4}], [{"text": ["My two cents, hope this helps"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; coord = (50, 50)\n&gt;&gt;&gt; change = (3, -5)\n&gt;&gt;&gt; tuple(sum(item) for item in zip(coord, change))\n(53, 45)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I wanted to point out that you can define your own class, but others obviously gave that answer too.", "Anyway, if you're interested, I put very long answer about matrices that defines Vector class (and much more) here."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Vector", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://stackoverflow.com/questions/1016284/matrix-transforms-concepts-and-theory-are-there-any-free-resources-for-learning/1022743#1022743", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}]]