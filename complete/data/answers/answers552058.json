[[{"text": ["I'm not sure what the point of that is.", "Interfaces (of this form, anyway) are largely to work around the lack of multiple inheritance.", "But Python has MI, so why not just make an abstract class?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Something(object):\n    def some_method(self):\n        raise NotImplementedError()\n    def some_other_method(self, some_argument):\n        raise NotImplementedError()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There are some cases where interfaces can be very handy.", "Twisted makes fairly extensive use of Zope interfaces, and in a project I was working on Zope interfaces worked really well.", "Enthought's traits packaged recently added interfaces, but I don't have any experience with them."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "Twisted", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/trac/"}, {"text": "fairly extensive use", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/projects/core/documentation/howto/components.html"}, {"text": "Zope interfaces", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://wiki.zope.org/Interfaces/FrontPage"}, {"text": "interfaces", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://code.enthought.com/projects/traits/docs/html/traits_user_manual/advanced.html#id15"}]}, {"text": ["Beware overuse though -- duck typing and protocols are a fundamental aspect of Python, only use interfaces if they're absolutely necessary."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The pythonic way is to \"Ask for forgiveness rather than receive permission\".", "Interfaces are all about receiving permission to perform some operation on an object.", "Python prefers this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "all", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def quacker(duck):\n    try:\n        duck.quack():\n    except AttributeError:\n        raise ThisAintADuckException\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Python 2.6 and later, you can use abstract base classes instead.", "These are useful, because you can then test to see if something implements a given ABC by using \"isinstance\".", "As usual in Python, the concept is not as strictly enforced as it would be in a strict language, but it's handy.", "Moreover there are nice idiomatic ways of declaring abstract methods with decorators - see the link above for examples."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "abstract base classes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/abc.html"}]}], [{"text": ["Seems kind of unnecessary to me - when I'm writing classes like that I usually just make the base class (your ISomething) with no methods, and mention in the actual documentation which methods subclasses are supposed to override."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ISomething", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I don't think interfaces would add anything to the code environment."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Method definition enforcing happens without them. If an object expected to be have like ", "tag": "none", "senID": 1}, {"text": "Simply making sure an interface method gets defined doesn't guarantee its correctness; behavioral unit tests need to be in place anyway. ", "tag": "none", "senID": 2}, {"text": "It's just as effective to write a \"read this or die\" page describing what methods your object needs to have to be compatible with what you're plugging it in as having elaborate docstrings in an interface class, since you're probably going to have tests for it anyway. One of those tests can be standard for all compatible objects that will check the invocation and return type of each base method.", "tag": "none", "senID": 3}]}], [{"text": ["You can create an interface in a dynamically typed language, but there's no enforcement of the interface at compile time.", "A statically typed language's compiler will warn you if you forget to implement (or mistype!", ") a method of an interface.", "Since you receive no such help in a dynamically typed language, your interface declaration serves only as documentation.", "(Which  isn't necessarily bad, it's just that your interface declaration provides no runtime advantage versus writing comments."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I'm about to do something similar with my Python project, the only things I would add are:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Extra long, in-depth doc strings for each interface and all the abstract methods.", "tag": "none", "senID": 1}, {"text": "I would add in all the required arguments so there's a definitive list.", "tag": "none", "senID": 2}, {"text": "Raise an exception instead of 'pass'.", "tag": "none", "senID": 3}, {"text": "Prefix all methods so they are obviously part of the interface - interface Foo: def foo_method1()", "tag": "none", "senID": 4}]}], [{"text": ["My personal opinion is positive regarding these interfaces in Python, though I haven't actually use Python interfaces."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "interfaces", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["I have used them quite a bit in PHP with a project because the interfaces really did make that completeness testing you mentioned quite simple."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I personally use interfaces a lot in conjunction with the Zope Component Architecture (ZCA).", "The advantage is not so much to have interfaces but to be able to use them with adapters and utilities (singletons)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["E.g.", "you could create an adapter which can take a class which implements ISomething but adapts it to the some interface ISomethingElse.", "Basically it's a wrapper."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The original class would be:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class MyClass(object):\n  implements(ISomething)\n\n  def do_something(self):\n      return \"foo\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then imagine interface ISomethingElse has a method do_something_else().", "An adapter could look like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class SomethingElseAdapter(object):\n    implements(ISomethingElse)\n    adapts(ISomething)\n\n    def __init__(self, context):\n        self.context = context\n\n    def do_something_else():\n        return self.context.do_something()+\"bar\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["You then would register that adapter with the component registry and you could then use it like this:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; obj = MyClass()\n&gt;&gt;&gt; print obj.do_something()\n\"foo\"\n&gt;&gt;&gt; adapter = ISomethingElse(obj)\n&gt;&gt;&gt; print adapter.do_something_else()\n\"foobar\"\n</code>\n</pre>\n", "senID": 7}, {"text": ["What that gives you is the ability to extend the original class with functionality which the class does not provide directly.", "You can do that without changing that class (it might be in a different product/library) and you could simply exchange that adapter by a different implementation without changing the code which uses it.", "It's all done by registration of components in initialization time."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["This of course is mainly useful for frameworks/libraries."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["I think it takes some time to get used to it but I really don't want to live without it anymore.", "But as said before it's also true that you need to think exactly where it makes sense and where it doesn't.", "Of course interfaces on it's own can also already be useful as documentation of the API.", "It's also useful for unit tests where you can test if your class actually implements that interface.", "And last but not least I like starting by writing the interface and some doctests to get the idea of what I am actually about to code."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["For more information you can check out my little introduction to it and there is a quite extensive description of it's API. "], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "little introduction to it", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mrtopf.de/blog/an-introduction-to-the-zope-component-architecture/"}, {"href": "http://www.muthukadan.net/docs/zca.html", "text": "quite extensive description of it's API", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Glyph Lefkowitz (of Twisted fame) just recently wrote an article on this topic.", "Personally I do not feel the need for interfaces, but YMMV."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "wrote an article on this topic", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html"}]}], [{"text": ["Have you looked at PyProtocols?", "it has a nice interface implementation that you should look at."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyProtocols?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://peak.telecommunity.com/PyProtocols.html"}]}]]