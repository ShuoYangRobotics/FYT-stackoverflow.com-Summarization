[[{"code": "<pre>\n<code>\n myvariable = 4\nmystring = str(myvariable)  # '4'\n</code>\n</pre>\n", "senID": 0}, {"text": ["also, alternatively try repr:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n mystring = repr(myvariable) # '4'\n</code>\n</pre>\n", "senID": 2}, {"text": ["This is called \"conversion\" in python, and is quite common."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Use the str built-in:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str", "tag": "a", "pos": 0, "childList": [{"text": "str", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#str"}, {"text": "str", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n x = str(something)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Examples:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; str(1)\n'1'\n&gt;&gt;&gt; str(1.0)\n'1.0'\n&gt;&gt;&gt; str([])\n'[]'\n&gt;&gt;&gt; str({})\n'{}'\n\n...\n</code>\n</pre>\n", "senID": 3}, {"text": ["From the documentation:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["With str(x).", "However, every data type can define its own string conversion, so this might not be what you want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "str(x)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["str(object) will do the trick."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "str(object)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you want to alter the way object is stringified, add define __str__(self) method for objects` class.", "Such method has to return str or unicode object."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "__str__(self)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Just use str - for example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; str([])\n'[]'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["str is meant to produce a string representation of the object's data.", "If you're writing your own class and you want str to work for you, add:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def __str__(self):\n    return ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["print str(myObj) will call myObj.__str__()."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "print str(myObj)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "myObj.__str__()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["repr is a similar method, which generally produces information on the class info.", "For most core library object, repr produces the class name (and sometime some class information) between angle brackets.", "repr will be used, for example, by just typing your object into your interactions pane, without using print or anything else."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "repr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "repr", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "repr", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can define the behavior of repr for your own objects just like you can define the behavior of str:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "repr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def __repr__(self):\n    return ...\n</code>\n</pre>\n", "senID": 5}, {"text": ["&gt;&gt;&gt; myObj in your interactions pane, or repr(myObj), will result in myObj.__repr__()"], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "&gt;&gt;&gt; myObj", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "repr(myObj)", "childNum": 0, "tag": "code", "childList": []}, {"text": "myObj.__repr__()", "childNum": 0, "tag": "code", "childList": []}]}]]