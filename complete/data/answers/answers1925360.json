[[{"text": ["In your search for RETE based rules engine in Python either Pyke or PyCLIPS could be the one you would want to use. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Pyke", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyke.sourceforge.net/"}, {"href": "http://pyclips.sourceforge.net/web/", "text": "PyCLIPS", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["PS: I had left a comment to S.Lott's answer about Pyke.", "I have posted a separate answer as per his suggestion and also to let other readers readily know that the rules engine mentioned in this answer could be a probable choice if they are searching for one."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You could look at CLIPS as already suggested or, if you want to pay money or need it Rete2.", "I've used CLIPS in the past on Unix and sucessfully embedded it into other applications.  "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "CLIPS", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://clipsrules.sourceforge.net/"}, {"text": "Rete2", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.pst.com/rete2.htm"}]}, {"text": ["Hope this helps."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["ruleby is a rule engine in written in ruby.", "It was subject of a presentation at rubyhoedown 2008: ruleby-the-rule-engine-for-ruby"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ruleby", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/mattup/ruleby"}, {"text": "ruleby-the-rule-engine-for-ruby", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://rubyhoedown2008.confreaks.com/10-joe-kutner-ruleby-the-rule-engine-for-ruby.html"}]}], [{"text": ["Pychinko has been around for a while.", "I've never used it in production, but investigated it for possible production application a while back.", "It looks like it has pretty good features and a decent community of users."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.mindswap.org/~katz/pychinko/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.mindswap.org/~katz/pychinko/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.mindswap.org/~katz/pychinko/"}]}], [{"text": ["Here is a list of 13 open source rules engines in java, Drools is possibly the best of these.", "http://java-sources.org/open-source/rule-engines"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://java-sources.org/open-source/rule-engines", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://java-sources.org/open-source/rule-engines"}]}], [{"text": ["Rulecore is indeed written partly in Python.", "But it does not really matter.", "You as an user would not see any of these implementation details anyway."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The rules are purely declarative and defined using XML.", "The XML is sent into ruleCore CEP Server as events using a web services or JMS or other protocols."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I know ruleCore has some parts written in Python.", "But the API uses XML and ActiveMQ or WebServices so it is on a higher abstraction level."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In effect, Python is a rules engine."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["\"The engine will be used as way to automate a house, like turning the light off when somebody leaves a room etc."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You need sensors and controllers.", "You write your \"rules\" as ordinary Python objects."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Your main \"program\" collects events from your sensors and sends events to your controllers.  "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you can read from your sensors via ordinary USB, that's even better.", "The marine industry uses a couple of closely related standards like NMEA 0183 and NMEA 2000 for specifying the traffic on the bus from sensor to controller."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You don't need Yet Another Rules Language.", "You have Python."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]