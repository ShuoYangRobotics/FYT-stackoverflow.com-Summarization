[[{"text": ["Python 3.x has the nonlocalkeyword.", "I think this does what you want, but I'm not sure if you are running python 2 or 3."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "nonlocalkeyword", "tag": "a", "pos": 0, "childList": [{"text": "nonlocal", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/py3k/reference/simple_stmts.html#the-nonlocal-statement"}, {"text": "nonlocal", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["For python 2, I usually just use a mutable object (like a list, or dict), and mutate the value instead of reassign."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def foo():\n    a = []\n    def bar():\n        a.append(1)\n    bar()\n    bar()\n    print a\n\nfoo()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Outputs:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n [1, 1]\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I don't think you should want to do this.", "Functions that can alter things in their enclosing context are dangerous, as that context may be written without the knowledge of the function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "should", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You could make it explicit, either by making B a public method and C a private method in a class (the best way probably); or by using a mutable type such as a list and passing it explicitly to C:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def A():\n    x = [0]\n    def B(var): \n        var[0] = 1\n    B(x)\n    print x\n\nA()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["No you cannot, at least in this way.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Because the \"set operation\" will create a new name in the current scope, which cover the outer one."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I'm a little new to Python, but I've read a bit about this.", "I believe the best you're going to get is similar to the Java work-around, which is to wrap your outer variable in a list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def A():\n   b = [1]\n   def B():\n      b[0] = 2\n   B()\n   print(b[0])\n\n//output is '2'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: I guess this was probably true before Python 3.", "Looks like 'nonlocal' is your answer."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can, but you'll have to use the global statment (not a really good solution as always when using global variables, but it works):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "global statment", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/simple_stmts.html#the-global-statement"}]}, {"code": "<pre>\n<code>\n def A() :\n  def B() :\n    global b\n    b = 1\n    def C() :\n      # I can access 'b' from here.\n      global b\n      print( b )\n      b = 2\n      # But can i modify 'b' here? 'global' and assignment will not work.\n    C()\n    print( b )\n  B()\nA()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I don't know if there is an attribute of a function that gives the __dict__ of the outer space of the function when this outer space isn't the global space == the module, which is the case  when the function is a nested function, in Python 3."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__dict__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["But in Python 2, as far as I know, there isn't such an attribute."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So the only possibilities to do what you want is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["1) using a mutable object, as said by others "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["2) "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def A() :\n    def B() :\n        b = 1\n        print 'b before C() ==',b\n        def C() :\n            # I can access 'b' from here.\n            b = 10\n            print'b ==',b\n            return b\n        b = C()\n        print'b after C() ==', b\n    B()\n\nA()\n</code>\n</pre>\n", "senID": 5}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n b before C() == 1\nb == 10\nb after C() == 10\n</code>\n</pre>\n", "senID": 7}, {"text": [], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Nota"], "childNum": 0, "tag": "h2", "senID": 9, "childList": []}, {"text": ["The solution of C\u00e9dric Julien has a drawback:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n def A() :\n    def B() :\n        global b # N1\n        b = 1\n        print '   b in function B before executing C() :',b\n        def C() :\n            # I can access 'b' from here.\n            global b # N2\n            print '     b in function C before assigning b = 2 :',b\n            b = 2\n            print '     b in function C after  assigning b = 2 :',b\n            # But can i modify 'b' here? 'global' and assignment will not work.\n        C()\n        print '   b in function B , after execution of C()',b\n    B()\n\n\nb = 450\nprint 'global b , before execution of A() :', b\nA()\nprint 'global b , after execution of A() :', b\n</code>\n</pre>\n", "senID": 11}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n global b , before execution of A() : 450\n   b in function B before executing C() : 1\n     b in function C before assigning b = 2 : 1\n     b in function C after  assigning b = 2 : 2\n   b in function B , after execution of C() 2\nglobal b , after execution of A() : 2\n</code>\n</pre>\n", "senID": 13}, {"text": ["The global b after execution of A() has been modified and it may be not whished so"], "childNum": 2, "tag": "p", "senID": 14, "childList": [{"text": "b", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "A()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["That's the case only if there is an object with identifier b in the global namespace"], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "b", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]]