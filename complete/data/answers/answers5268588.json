[[{"text": ["Follow the Agile approach.", "Finish one small case, from the start to the end.", "From the models to the tests to user experience.", "Then build on it.", "Iterate."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "from the start to the end", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Thats the right way to software development."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To do it efficiently, you need: (don't bother right away, you will need it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "will need", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Automated schema migration, automated build system, auto updating and deployment.", "- None of these, django has got anything to do with.", "Use pip, fabric, hudson, twill and south appropriately."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "pip", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.pip-installer.org/"}, {"href": "http://docs.fabfile.org/", "text": "fabric", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://hudson-ci.org/", "text": "hudson", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://twill.idyll.org/", "text": "twill", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://south.aeracode.org/", "text": "south", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Take care not to over burden yourself with all these right away, particularly since you say, you are beginning."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["There are two required steps."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Write the settings.", "Write the urls.py"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The rest of the steps are optional."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Bad policy.", "You don't need a checklist of Django features.", "You need a collection of use cases or user stories which you must implement.  "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["For some reason, you've omitted the two most important and valuable features of Django.", "Configure the default admin interface and write unit tests.", "The default admin interface is very high value.", "Unit testing is absolutely central.  "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You do it like this."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["..."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["n.  Package for release.", "Tweak up the settings.", "Configure database and mod-wsgi"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I personally can't make a template without writing the views (unless it's a photoshop draft) but in general that's the way I go after I have a plan."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "after I have a plan", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["What's extremely important for me is that I don't dive head-first into the code, and that I spend time mocking up the model structure based on the \"screens\" or \"pages\" that the user will see. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "for me", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Once I have a user experience defined, I make sure the backend is robust enough to handle that experience.", "If I don't visualize the user experience, details get left out that are certainly accomplishable in the shell but not ideal for the website, default django admin, etc. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["There are always tradeoffs between agile development and a huge spec: I think there's an important balance.", "Agile is good: there's no point planning every detail before writing your first line of code, as your needs will change by the time you get to the end.", "You don't know how your users will really use the site. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["On the other hand, without a plan, you can end up with a messy foundation that affects all future code."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["An educated guess is a good start.", "Don't think or assume too much, but definitely have a clear idea how your users will interact with your site for stage 1."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Always try to remember about a DRY rule.", "For example, why to write RequestContext every new view is defined, where you can simply write a function once, which will add it for you.", "Good description is here in another topic.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "another topic", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/5154358/django-what-is-the-difference-between-render-render-to-response-and-direct"}]}, {"text": ["Try to keep a code written one way.", "Each time you upgrade a schema of your view, edit it in all already written views.", "That will help keep your code clear and save a lot time for you in future."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Generally good rule, and how do I write my applications is the rule of small steps.", "Start with writing a settings and urls, then add one model and one view.", "When it works, modify - add another models or another views.", "You won't even notice, when your project becomes bigger and bigger."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["And the last useful rule for clarity of all the source.", "Keep files in folders.", "If you have two subsites based one one (for example \"accounts\" and \"blogs\") create two directories names the same.", "Remeber to put init.py file in each directory.", "It's really easy to forget.", "With this practice it's easy to write models and views dedicated to each category.", "By the way it's a good practice to keep urls like in a tree structure.", "Main urls.py should contain only links like this one:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}]}, {"code": "<pre>\n<code>\n (r'^accounts/', include('your_main_name.accounts.urls')),\n</code>\n</pre>\n", "senID": 4}, {"text": ["and of course all media, static, css and so on.", "In accounts directory urls keep:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n urlpatterns = patterns('your_main_name.accounts.views',\n    url(r'^$', 'index', name='index'),\n)\n</code>\n</pre>\n", "senID": 6}, {"text": ["with all views subdirectories."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Last one - keep code clear with actuall django version.", "Remeber, that the 3.0 release is comming soon."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Hope this will help."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["I find that my process varies depending on a lot of variables, mainly whether I know something will work or if I'm experimenting and also whether I'm developing on my production server or in a development environment."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, I often do my development directly on the deployment server (most of my work is for intranet projects so there isn't any security risk, etc).", "But when I do this I really need to make sure the settings and urls are setup first and that gunicorn and nginx are configured."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If I know something should work, or am setting up a generic base set of code, sometimes I'll do all that coding for views and models before I even get enough setup to even run the development server.", "But when experimenting with new code I find it's good to be able to test every step of the way, so in that case you need your servers running."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In general I do settings, models, syncdb, views, urls, templates, collectstatic, graphics/aesthetics"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In general I leave my base.html very plain until the everything else is working, then I add css/js etc."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I guess my point here is that there isn't really a wrong answer for how you do it, and there isn't even only one best practice (as far as I'm concerned).", "When you do more work, you'll find what you are comfortable with and it'll even vary from project to project."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Good luck, hopefully you learn to love django!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["here is something I do in general,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": "configure basic settings", "tag": "none", "senID": 1}, {"text": "configure root url.py", "tag": "none", "senID": 2}, {"text": "configure settings, url.py for static (media) files", "tag": "none", "senID": 3}, {"text": "create model", "tag": "none", "senID": 4}, {"text": "sync db", "tag": "none", "senID": 5}, {"text": "write views (use simple template, if needed)", "tag": "none", "senID": 6}]}, {"text": ["once you are done with back end implementation"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "think about UI", "tag": "none", "senID": 8}, {"text": "prepare styles, scripts", "tag": "none", "senID": 9}, {"text": "start working on template implementation", "tag": "none", "senID": 10}]}]]