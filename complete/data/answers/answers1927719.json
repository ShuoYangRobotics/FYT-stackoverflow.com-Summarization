[[{"text": ["The most \"correct\" way of doing this would be something like the following.", "This would handle it no matter what the extension is, regardless of platform, and generally without reinventing the wheel."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os.path\nroot, ext = os.path.splitext('a.pdf')\n\n# Optional error checking, if necessary:\nif ext.lower() != '.pdf':\n    raise ValueError('File lacks proper extension')\n\nfilename = \"%s.jpg\" % (root,)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["i don't know if it's elegant:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["string.replace:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "string.replace", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["regular expression:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["os.path"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "os.path", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["string index:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]}], [{"text": ["Use the $ from regex to make sure you replace the file extension."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "$", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; s = 'my_pdf_file.pdf'\n&gt;&gt;&gt; re.sub('\\.pdf$', '.jpg', s)\n'my_pdf_file.jpg'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Not the most elegant perhaps, but safer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n root, ext = os.path.splitext(s)\nif ext != '.pdf':\n    # Error handling\nelse:\n    s = root + '.jpg'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'a.pdf'\n&gt;&gt;&gt; s[-3:]==\"pdf\" and s[:-3]+\"jpg\"\n'a.jpg'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I's suggest 1ch1g0's solution, but instead of s[-3:]=='pdf': s.endswith('.pdf') and no '+' for strings which is slow:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "s[-3:]=='pdf'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "s.endswith('.pdf')", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'a.pdf'\n&gt;&gt;&gt; s.endswith('.pdf') and ''.join([s[:-3], 'jpg'])\n'a.jpg'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Strings are immutable in Python, so basically you cannot alter it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want a new string, there are plenty of options, depending on what you exactly want."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def silly_thing(s):\n    return s[:-4]+\".jpg\" if s[-4:] == \".pdf\" else s\n</code>\n</pre>\n", "senID": 2}], [{"text": ["This one requires NumPy, but of course that means it will run much faster than the alternatives:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "NumPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}, {"href": "http://en.wikipedia.org/wiki/Grain%5Fof%5Fsalt", "text": "will run much faster", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'a.pdf'\n&gt;&gt;&gt; from numpy import array\n&gt;&gt;&gt; ''.join([chr(c) for c in (array([ord(c) for c in s]) + [0, 0, -6, 12, 1])])\n'a.jpg'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, whether you consider this \"elegant\" or not depends on your definition of \"elegant\" but, as with all other useful information, the question didn't include that..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edit: yes, this is a joke, but trying to make a point..."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["With some inspiration from @Peter Hansen's answer I managed to create a function that accomplishes pretty much what you need.", "While his approach is nice, it is a bit lacking in that it can only convert file names that are exactly 5 characters long."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["My solution fixes that:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from numpy import array\n\ndef convert_pdf_filename_to_jpg_filename_in_a_really_really_elegant_way(s):\n    \"\"\"\n    Examples:\n    &gt;&gt;&gt; convert_pdf_filename_to_jpg_filename_in_a_really_really_elegant_way(\"a.pdf\")\n    'a.jpg'\n    &gt;&gt;&gt; convert_pdf_filename_to_jpg_filename_in_a_really_really_elegant_way(\"myfile.pdf\")\n    'myfile.jpg'\n    \"\"\"\n    return ''.join([chr(c) for c in (array([ord(c) for c in s]) + list([0] * (len(s) - 3) + [-6, 12, 1]))])\n</code>\n</pre>\n", "senID": 2}, {"text": ["I am quite satisfied with this code.", "I would not mind if it was added to the Python standard library (perhaps in a really_really_elegant_code module?).", "But than that would require that numpy was added to the standard library as well.", "Does anyone have an idea if that is likely to happen?"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "really_really_elegant_code", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n s = 'a.pdf'\nprint s.replace('pdf', 'jpg')\n</code>\n</pre>\n", "senID": 0}, {"text": ["That what you're looking for?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Easy:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string s=\"a.pdf\";\ns=\"a.jpg\";\n</code>\n</pre>\n", "senID": 1}, {"text": ["I am afraid your question leaves much to be desired..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]