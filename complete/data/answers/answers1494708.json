[[{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import math\ndef format_percentage(x, precision=3):\n    return (\"%%.%df%%%%\" % (precision - min(0,math.log10(100-x)))) % x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Mark Ransom's answer is a beautiful thing.", "With a little bit of work, it can solve the problem for any inputs.", "I went ahead and did the little bit of work."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You just need to add some code to nines():"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def nines(x):\n    x = abs(x)  # avoid exception caused if x is negative\n    x -= int(x)  # keep fractional part of x only\n    cx = ceilpowerof10(x) - x\n    if 0 == cx:\n        return 0  # if x is a power of 10, it doesn't have a string of 9's!\n    return -int(math.log10(cx))\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then threeplaces() works for anything.", "Here are a few test cases:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; threeplaces(0.9999357)\n'0.9999357'\n&gt;&gt;&gt; threeplaces(1000.9999357)\n'1000.9999357'\n&gt;&gt;&gt; threeplaces(-1000.9999357)\n'-1000.9999357'\n&gt;&gt;&gt; threeplaces(0.9900357)\n'0.99004'\n&gt;&gt;&gt; threeplaces(1000.9900357)\n'1000.99004'\n&gt;&gt;&gt; threeplaces(-1000.9900357)\n'-1000.99004'\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n def ceilpowerof10(x):\n    return math.pow(10, math.ceil(math.log10(x)))\n\ndef nines(x):\n    return -int(math.log10(ceilpowerof10(x) - x))\n\ndef threeplaces(x):\n    return ('%.' + str(nines(x) + 3) + 'f') % x\n</code>\n</pre>\n", "senID": 0}, {"text": ["Note that nines() throws an error on numbers that are a power of 10 to begin with, it would take a little more work to make it safe for all input.", "There are probably some issues with negative numbers as well."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def print_percent(p):    \n    for i in range(30):\n        if p &lt;= 100. - 10.**(-i):\n            print (\"%.\" + str(max(3,3+i-1)) + \"f\") % p\n            return\n</code>\n</pre>\n", "senID": 1}, {"text": ["or this if you just want to retrieve the string"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def print_percent(p):    \n    for i in range(20):\n        if p &lt;= 100. - 10.**(-i):\n            return (\"%.\" + str(max(3,3+i-1)) + \"f\") % p\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I am quite confident that this is not possible with standard formating.", "I suggest to use something like the following (C# like pseudo code).", "Especially I suggest to rely on string operations and not to use math code because of many possible precision and rounding problems."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string numberString = number.ToStringWithFullPrecision();\n\nint index = numberString.IndexOf('.');\n\nwhile ((index &lt; numberString.Length - 1) &amp;&amp; (numberString[index + 1] == '9'))\n{\n    index++;\n}\n\nWriteLine(number.PadRightWithThreeZeros().SubString(0, index + 4));\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you like regular expression, you can use them to.", "Take the following expression and match it against the full precision number string padded with three zeros and you are done."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ^([0-9]|[1-9][0-9]|100)\\.(9*)([0-8][0-9]{2})\n</code>\n</pre>\n", "senID": 3}, {"tag": "hr", "senID": 4}, {"text": ["I just realized that both suggestion may cause rounding errors.", "99.91238123 becomes 99.9123 when it should become 99.9124 - so the last digits requires additional correction.", "Easy to do, but makes my suggestion even uglier.", "This is far away from an elegant and smart algorithm."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "99.91238123", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "99.9123", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "99.9124", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"code": "<pre>\n<code>\n def ilike9s(f):\n   return re.sub(r\"(\\d*\\.9*\\d\\d\\d)\\d*\",r\"\\1\",\"%.17f\" % f)\n</code>\n</pre>\n", "senID": 0}, {"tag": "hr", "senID": 1}, {"text": ["So..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ilike9s(1.0)\n'1.000'\n&gt;&gt;&gt; ilike9s(12.9999991232132132)\n'12.999999123'\n&gt;&gt;&gt; ilike9s(12.345678901234)\n'12.345'\n</code>\n</pre>\n", "senID": 3}, {"text": ["And don't forget to import re"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "import re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]