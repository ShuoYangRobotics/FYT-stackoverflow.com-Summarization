[[{"text": ["Wow!", "5 answers already and nobody has suggested the most obvious and simple:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Kids these days with their fancy debuggers &amp; IDEs...", "Sometimes engineering problems are solved most simply with crude tools that provide just a little bit more information."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Let's assume that you are running your program as:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n python YOURSCRIPT.py\n</code>\n</pre>\n", "senID": 1}, {"text": ["Try running your program as:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n python -m trace --trace YOURSCRIPT.py\n</code>\n</pre>\n", "senID": 3}, {"text": ["And have some patience while lots of stuff is printed on the screen.", "If you have an infinite loop, it will go on for-ever (halting problem).", "If it gets stuck somewhere, then mostly you are stuck on I/O or it is a deadlock."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["If your program is too big and complex to be viable for single stepping with pdb or printing every line with the trace module then you could try a trick from my days of 8-bit games programming.", "From Python 2.5 onwards pdb has the ability to associate code with a breakpoint by using the commands command.", "You can use this to print a message and continue running:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "commands", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n (Pdb) commands 1\n(com) print \"*** Breakpoint 1 ***\"\n(com) continue\n(com) end\n(Pdb)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will print a message and carry on running when breakpoint 1 is hit.", "Define similar commands for a few other breakpoints.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You can use this to do a kind of binary search of your code.", "Attach breakpoints at key places in the code and run it until it hangs.", "You can tell from the last message which was the last breakpoint it hit.", "You can then move the other breakpoints and re-run to narrow down the place in the code where it hangs.", "Rinse and repeat."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Incidentally on the 8-bit micros (Commodore 64, Spectrum etc) you could poke a value into a registry location to change the colour of the border round the screen.", "I used to set up a few breakpoints to do this with different colours, so when the program ran it would give a psychedelic rainbow display until it hung, then the border would change to a single colour that told you what the last breakpoint was.", "You could also get a good feel for the relative performance of different sections of code by the amount of each colour in the rainbow.", "Sometimes I miss that simplicity in these new fangled \"Windows\" machines."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Nothing like the good old pdb"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pdb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/pdb.html"}]}, {"code": "<pre>\n<code>\n import pdb\npdb.run('my_method()',globals(),locals())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then just hit (n) to go to the next command, (s) to step into.", "see the docs for the full reference.", "Follow your program step by step, and you'll probably figure it out fast enough."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It's easier to prevent these hang-ups than it is to debug them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First: for loops are very, very hard to get stuck in a situation where the loop won't terminate.", "Very hard.  "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Second: while loops are relatively easy to get stuck in a loop."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The first pass is to check every while loop to see if it must be a while loop.", "Often you can replace while constructs with for, and you'll correct your problem by rethinking your loop."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "must", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you cannot replace a while loop with for, then you simply have to prove that the expression in the while statement must change every time through the loop.", "This isn't that hard to prove."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "must", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}], [{"text": ["Haven't used it myself but I've heard that the Eric IDE is good and has a good debugger.", "That's also the only IDE I know of that has a debugger for Python"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Eric IDE", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://eric-ide.python-projects.org/index.html"}]}], [{"text": ["If your program has more than one thread, it could be ignoring ctrl-c because the one thread is wired up to the ctrl-c handler, but the live (runaway?", ") thread is deaf to it.", "The GIL (global interpreter lock) in CPython means that normally only one thread can actually be running at any one time.", "I think I solved my (perhaps) similar problem using this"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://bytes.com/topic/python/answers/627399-how-can-i-kill-running-thread-when-exiting-__main__"}]}], [{"text": ["Wow !", "Seems you added so much code in one go without testing it that you can't say what code was added just before program started to hang... (the most likely cause of problem)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Seriously, you should code by small steps and test each one individually (ideally doing TDD)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For your exact problem of spotting what python code is running and ctrl-c does not work, I will try a raw guess: did you used some except: catching all exceptions indistinctly.", "If you did so in a loop, it's a very likely reason why ctrl-c does not work : it's catched by this exception.", "Change to except Exception: and it should not be catched any more (there is other possibilities for ctrl+c not working like thread management as another poster suggested, but I believe the above reason is more likely)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "except:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "except Exception:", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["You could also try http://code.activestate.com/recipes/576515-debugging-a-running-python-process-by-interrupting/ .", "It should work as long as the Python process doesn't have signals masked, which is normally the case even if Ctrl-C doesn't work."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.activestate.com/recipes/576515-debugging-a-running-python-process-by-interrupting/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/576515-debugging-a-running-python-process-by-interrupting/"}]}]]