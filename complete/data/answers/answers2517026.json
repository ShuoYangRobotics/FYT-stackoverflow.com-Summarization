[[{"text": ["this might help - http://wiki.python.org/moin/PythonGraphApi.", "From the page and quick lookaround, python-graph seems pretty mature."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://wiki.python.org/moin/PythonGraphApi", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/PythonGraphApi"}, {"text": "python-graph", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/python-graph/"}]}, {"tag": "ul", "num": 21, "lis": [{"text": "Support for directed, undirected, weighted and non-weighted graphs", "tag": "none", "senID": 1}, {"text": "Support for hypergraphs", "tag": "none", "senID": 2}, {"text": "Canonical operations", "tag": "none", "senID": 3}, {"text": "XML import and export", "tag": "none", "senID": 4}, {"text": "DOT-Language import and export (for usage with Graphviz)", "tag": "none", "senID": 5}, {"text": "Random graph generation ", "tag": "none", "senID": 6}, {"text": "Accessibility (transitive closure)", "tag": "none", "senID": 7}, {"text": "Breadth-first search", "tag": "none", "senID": 8}, {"text": "Critical path algorithm", "tag": "none", "senID": 9}, {"text": "Cut-vertex and cut-edge identification", "tag": "none", "senID": 10}, {"text": "Cycle detection", "tag": "none", "senID": 11}, {"text": "Depth-first search", "tag": "none", "senID": 12}, {"text": "Heuristic search (A* algorithm)", "tag": "none", "senID": 13}, {"text": "Identification of connected components", "tag": "none", "senID": 14}, {"text": "Maximum-flow / Minimum-cut (Edmonds-Karp algorithm)", "tag": "none", "senID": 15}, {"text": "Minimum spanning tree (Prim's algorithm)", "tag": "none", "senID": 16}, {"text": "Mutual-accessibility (strongly connected components)", "tag": "none", "senID": 17}, {"text": "Shortest path search (Dijkstra's algorithm)", "tag": "none", "senID": 18}, {"text": "Shortest path search (Bellman-Ford algorithm)", "tag": "none", "senID": 19}, {"text": "Topological sorting", "tag": "none", "senID": 20}, {"text": "Transitive edge identification ", "tag": "none", "senID": 21}]}], [{"text": ["networkx"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "networkx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://networkx.lanl.gov/"}]}, {"text": ["Standard graph-theoretic and statistical physics functions\nEasy exchange of network algorithms between applications, disciplines, and platforms\nMany classic graphs and synthetic networks\nNodes and edges can be \"anything\" (e.g.", "time-series, text, images, XML records)\nExploits existing code from high-quality legacy software in C, C++, Fortran, etc.", "Open source (encourages community input)\nUnit-tested"], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["Fast prototyping of new algorithms\nEasy to teach\nMulti-platform\nAllows easy access to almost any database  "], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}], [{"text": ["You can also have a look at NetworkX which has pretty advanced algorithms &amp; drawing capability for graphs !"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "NetworkX", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://networkx.lanl.gov/"}]}, {"text": ["From the web site : "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Features"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n * Standard graph-theoretic and statistical physics functions\n* Easy exchange of network algorithms between applications, disciplines, and platforms\n* Many classic graphs and synthetic networks\n* Nodes and edges can be \"anything\" (e.g. time-series, text, images, XML records)\n* Exploits existing code from high-quality legacy software in C, C++, Fortran, etc.\n* Open source (encourages community input)\n* Unit-tested\n</code>\n</pre>\n", "senID": 3}], [{"text": ["There's also igraph, which is a library primarily implemented in C (hence it is usually faster than pure Python solutions), with a higher level interface to Python.", "Therefore, you get the best of both worlds: the speed of a pure C solution and all the usual benefits (fast prototyping etc.", ") of Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "igraph", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://igraph.sourceforge.net/"}]}, {"text": ["An example with igraph:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from igraph import Graph\n&gt;&gt;&gt; g = Graph.Famous(\"petersen\")\n&gt;&gt;&gt; g.girth()\n5\n</code>\n</pre>\n", "senID": 2}, {"text": ["Disclaimer: I'm a co-developer of igraph, so I'm not totally impartial :)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Disclaimer", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["There is a wonderful article http://www.python.org/doc/essays/graphs/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.python.org/doc/essays/graphs/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/essays/graphs/"}]}], [{"text": ["I would like to shamelessly plug my own python graph library: graph-tool."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "graph-tool", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://graph-tool.skewed.de"}]}, {"text": ["It is very fast, since it is implemented in C++ with the Boost Graph Library, and it contains lots of algorithms and extensive documentation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]