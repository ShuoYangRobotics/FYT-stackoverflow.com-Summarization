[[{"text": ["Here's a good example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def key(x):\n    return x[1]\n\na = [(1, 2), (3, 1), (5, 10), (11, -3)]\na.sort(key=key)\n</code>\n</pre>\n", "senID": 1}, {"text": ["versus"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = [(1, 2), (3, 1), (5, 10), (11, -3)]\na.sort(key=lambda x: x[1])\n</code>\n</pre>\n", "senID": 3}, {"text": ["From another angle: Lambda expressions are also known as \"anonymous functions\", and are very useful in certain programming paradigms, particularly functional programming, which lambda calculus provided the inspiration for."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["http://en.wikipedia.org/wiki/Lambda_calculus"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://en.wikipedia.org/wiki/Lambda_calculus", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Lambda_calculus"}]}], [{"text": ["For me it's a matter of the expressiveness of the code.", "When writing code that people will have to support, that code should tell a story in as concise and easy to understand manner as possible.", "Sometimes the lambda expression is more complicated, other times it more directly tells what that line or block of code is doing.", "Use judgment when writing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Think of it like structuring a sentence.", "What are the important parts (nouns and verbs vs. objects and methods, etc.", ") and how should they be ordered for that line or block of code to convey what it's doing intuitively."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The syntax is more concise in certain situations, mostly when dealing with map et al."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n map(lambda x: x * 2, [1,2,3,4])\n</code>\n</pre>\n", "senID": 1}, {"text": ["seems better to me than:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def double(x):\n    return x * 2\n\nmap(double, [1,2,3,4])\n</code>\n</pre>\n", "senID": 3}, {"text": ["I think the lambda is a better choice in this situation because the def double seems almost disconnected from the map that is using it.", "Plus, I guess it has the added benefit that the function gets thrown away when you are done."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "def double", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["There is one downside to lambda which limits its usefulness in Python, in my opinion: lambdas can have only one expression (i.e., you can't have multiple lines).", "It just can't work in a language that forces whitespace."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Plus, whenever I use lambda I feel awesome."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Yes, you're right \u2014 it is a structural choice.", "It probably does not make your programs more correct by just using lambda expressions.", "Nor does it make them more reliable, and this has nothing to do with speed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It is only about flexibility and the power of expression.", "Like list comprehension.", "You can do most of that defining named functions (possibly polluting namespace, but that's again purely stylistic issue)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It can aid to readability by the fact, that you do not have to define a separate named function, that someone else will have to find, read and understand that all it does is to call a method blah() on its argument."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It may be much more interesting when you use it to write functions that create and return other functions, where what exactly those functions do, depends on their arguments.", "This may be a very concise and readable way of parameterizing your code behaviour.", "You can just express more interesting ideas."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["But that is still a structural choice.", "You can do that otherwise.", "But the same goes for object oriented programming ;) "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["One use of lambda function which I have learned, and where is not other good alternative or at least looks for me best is as default action in function parameter by"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n parameter=lambda x: x\n</code>\n</pre>\n", "senID": 1}, {"text": ["This returns the value without change, but you can supply one function optionally to perform a transformation or action (like printing the answer, not only returning)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Also often it is useful to use in sorting as key:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n key=lambda x: x[field]\n</code>\n</pre>\n", "senID": 4}, {"text": ["The effect is to sort by fieldth (zero based remember) element of each item in sequence.", "For reversing you do not need lambda as it is clearer to use"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n reverse=True\n</code>\n</pre>\n", "senID": 6}, {"text": ["Often it is almost as easy to do new real function and use that instead of lambda.", "If people has studied much Lisp or other functional programming, they also have natural tendency to use lambda function as in Lisp the function definitions are handled by lambda calculus."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Lambda functions are most useful in things like callback functions, or places in which you need a throwaway function.", "JAB's example is perfect - It would be better accompanied by the keyword argument key, but it still provides useful information."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "key", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["When"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def key(x):\n    return x[1]\n</code>\n</pre>\n", "senID": 2}, {"text": ["appears 300 lines away from "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [(1,2), (3,1), (5,10), (11,-3)].sort(key)\n</code>\n</pre>\n", "senID": 4}, {"text": ["what does key do?", "There's really no indication.", "You might have some sort of guess, especially if you're familiar with the function, but usually it requires going back to look.", "OTOH,"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n [(1,2), (3,1), (5,10), (11,-3)].sort(lambda x: x[1])\n</code>\n</pre>\n", "senID": 6}, {"text": ["tells you a lot more."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["There's probably some more information, but already that's a tremendous amount  that you get just by using an anonymous lambda function instead of a named function."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Plus it doesn't pollute your namespace ;)"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["In some cases it is much more clear to express something simple as a lambda.", "Consider regular sorting vs. reverse sorting for example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n some_list = [2, 1, 3]\nprint sorted(some_list)\nprint sorted(some_list, lambda a, b: -cmp(a, b))\n</code>\n</pre>\n", "senID": 1}, {"text": ["For the latter case writing a separate full-fledged function just to return a -cmp(a, b) would create more misunderstanding then a lambda.    "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "-cmp(a, b)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Lambda, while useful in certain situations, has a large potential for abuse.", "lambda's almost always make code more difficult to read.", "And while it might feel satisfying to fit all your code onto a single line, it will suck for the next person who has to read your code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Direct from PEP8"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["\"One of Guido's key insights is that code is read much more often than it is written."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Ignore for a moment the detail that it's specifically anonymous functions we're talking about.", "functions, including anonymous ones, are assignable quantities (almost, but not really, values) in Python.", "an expression like"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "functions", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n map(lambda y: y * -1, range(0, 10))\n</code>\n</pre>\n", "senID": 1}, {"text": ["explicitly mentions four anonymous quantities: -1, 0, 10 and the result of the lambda operator, plus the implied result of the map call.", "it's possible to create values of anonymous types in some languages.", "so ignore the superficial difference between functions and numbers.", "the question when to use an anonymous function as opposed to a named one is similar to a question of when to put a naked number literal in the code and when to declare a TIMES_I_WISHED_I_HAD_A_PONY or BUFFER_SIZE beforehand.", "there are times when it's appropriate to use a (numeric, string or function) literal, and there are times when it's more appropriate to name such a thing and refer to it through its name."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "values of anonymous types", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "TIMES_I_WISHED_I_HAD_A_PONY", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "BUFFER_SIZE", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["see eg.", "Allen Holub's provocative, thought-or-anger-provoking book on Design Patterns in Java; he uses anonymous classes quite a bit."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Lambdas allow you to create functions on the fly.", "Most of the examples I've seen don't do much more than create a function with parameters passed at the time of creation rather than execution.", "Or they simplify the code by not requiring a formal declaration of the function ahead of use."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A more interesting use would be to dynamically construct a python function to evaluate a mathematical expression that isn't known until run time (user input).", "Once created, that function can be called repeatedly with different arguments to evaluate the expression (say you wanted to plot it).", "That may even be a poor example given eval().", "This type of use is where the \"real\" power is - in dynamically creating more complex code, rather than the simple examples you often see which are not much more than nice (source) code size reductions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]