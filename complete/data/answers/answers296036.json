[[{"text": ["Python modules could be considered as singletons... no matter how many times you import them they get initialized only once, so it's better to do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import MyLib\nimport ReallyBigLib\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It makes no substantial difference.", "If the big module has already been loaded, the second import in your second example does nothing except adding 'ReallyBigLib' to the current namespace."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["As others have pointed out, Python maintains an internal list of all modules that have been imported.", "When you import a module for the first time, the module (a script) is executed in its own namespace until the end, the internal list is updated, and execution of continues after the import statement.   "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Try this code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # module/file a.py\n   print \"Hello from a.py!\"\n   import b\n\n   # module/file b.py\n   print \"Hello from b.py!\"\n   import a\n</code>\n</pre>\n", "senID": 2}, {"text": ["There is no loop:  there is only a cache lookup."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import b\nHello from b.py!\nHello from a.py!\n&gt;&gt;&gt; import a\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["One of the beauties of Python is how everything devolves to executing a script in a namespace."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["The internal registry of imported modules is the sys.modules dictionary, which maps module names to module objects.", "You can look there to see all the modules that are currently imported."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sys.modules", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You can also pull some useful tricks (if you need to) by monkeying with sys.modules - for example adding your own objects as pseudo-modules which can be imported by other modules."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sys.modules", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["WARNING: Python does not guarantee that module will not be initialized twice.", "I've stubled upon such issue.", "See discussion:\nhttp://code.djangoproject.com/ticket/8193"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.djangoproject.com/ticket/8193", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://code.djangoproject.com/ticket/8193"}]}], [{"text": ["It is the same performancewise.", "There is no JIT compiler in Python yet."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]