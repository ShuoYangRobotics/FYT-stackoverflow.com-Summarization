[[{"text": ["Subclass Bar near the wrapper code and give your subclass a ctor that takes a bp::object (or a more specific python type)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n struct Bar_wrapper:Bar,bp::wrapper&lt;Bar&gt;\n{\n    Bar_wrapper(bp::object arg)\n    {\n        //code to build a Bar_wrapper Here\n    }\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then export a Bar_wrapper to python instead of a Bar, and call it a Bar as the python name:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class&lt;Bar_wrapper&gt;(\"Bar\")\n    ...\n    .def(init&lt;bp::object&gt;())\n    ...\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Create some type TupleCollector with overridden \"operator ,(int)\" so you can write"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f.do_that((TuppleCollector(), 1, 2, 3))\n</code>\n</pre>\n", "senID": 1}, {"text": ["at last create conversion between TupleCollector and expected target"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Add a new constructor template &lt;typename T&gt; Bar(T)\nin your header and implement as template &lt;&gt;\nBar::Bar(Tupple) {}"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "template &lt;typename T&gt; Bar(T)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "template &lt;&gt;\nBar::Bar(Tupple) {}", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can make a static factory method and then expose it as one of the Python constructors for the class.", "Just make a converter that will take any Python object and you're free do do whatever your please."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n using namespace boost::python;\n\nBar CreateBar(object obj)\n{\n    // Do your thing here\n\n    return Bar;\n}\n\n// ..................\n\nclass_&lt;Bar&gt;(\"Bar\")\n    // .....................\n    .def(\"__init__\", make_constructor(&amp;CreateBar))\n    //.............\n    ;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can register from-python converter which will construct Bar instance from arbitrary object.", "See here and an exmaple of my own (converts either (Vector3,Quaternion) tuple or 7*double-tuple to 3d transformation Se3) here."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "Bar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://misspent.wordpress.com/2009/09/27/how-to-write-boost-python-converters/"}, {"text": "(Vector3,Quaternion)", "childNum": 0, "tag": "code", "childList": []}, {"text": "Se3", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://bazaar.launchpad.net/~eudoxos/+junk/tr2/view/head:/py/wrapper/customConverters.cpp#L76", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Note that the logic has two steps, first you determine whether the object is convertible (convertible; in your case, you check that it is a sequence, and has the right number of elements), then the construct method is called, which actually returns the instance, allocated with the pointer passed as parameter."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "convertible", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "construct", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The converter must then be registered in BOOST_PYTHON_MODULE.", "Since the converter registry is global, once registered, it will be subsequently used automatically everywhere.", "All function argument of type Bar or const Bar&amp; should be handled just fine (nor sure about Bar&amp; from the top of my head)."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "BOOST_PYTHON_MODULE", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Bar", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "const Bar&amp;", "childNum": 0, "tag": "code", "childList": []}, {"text": "Bar&amp;", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can export function do_that which take boost::python::object param, check if param is a python tuple, extract data and pass it to object."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]