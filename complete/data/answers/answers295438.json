[[{"text": ["Another simple approach is to have your test override urllib's urlopen() function.", "For example, if your module has"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import urllib\n\ndef some_function_that_uses_urllib():\n    ...\n    urllib.urlopen()\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["You could define your test like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import mymodule\n\ndef dummy_urlopen(url):\n    ...\n\nmymodule.urllib.urlopen = dummy_urlopen\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then, when your tests invoke functions in mymodule, dummy_urlopen() will be called instead of the real urlopen().", "Dynamic languages like Python make it super easy to stub out methods and classes for testing."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["See my blog posts at http://visionandexecution.org for more information about stubbing out dependencies for tests."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://visionandexecution.org", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://visionandexecution.org"}]}], [{"text": ["Did you give Mox a look?", "It should do everything you need?", "Here is a simple interactive session illustrating the solution you need:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Mox", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pymox/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import urllib\n&gt;&gt;&gt; # check that it works\n&gt;&gt;&gt; urllib.urlopen('http://www.google.com/')\n&lt;addinfourl at 3082723820L ...&gt;\n&gt;&gt;&gt; # check what happens when it doesn't\n&gt;&gt;&gt; urllib.urlopen('http://hopefully.doesnotexist.com/')\n#-- snip --\nIOError: [Errno socket error] (-2, 'Name or service not known')\n\n&gt;&gt;&gt; # OK, let's mock it up\n&gt;&gt;&gt; import mox\n&gt;&gt;&gt; m = mox.Mox()\n&gt;&gt;&gt; m.StubOutWithMock(urllib, 'urlopen')\n&gt;&gt;&gt; # We can be verbose if we want to :)\n&gt;&gt;&gt; urllib.urlopen(mox.IgnoreArg()).AndRaise(\n...   IOError('socket error', (-2, 'Name or service not known')))\n\n&gt;&gt;&gt; # Let's check if it works\n&gt;&gt;&gt; m.ReplayAll()\n&gt;&gt;&gt; urllib.urlopen('http://www.google.com/')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/lib/python2.5/site-packages/mox.py\", line 568, in __call__\n    raise expected_method._exception\nIOError: [Errno socket error] (-2, 'Name or service not known')\n\n&gt;&gt;&gt; # yay! now unset everything\n&gt;&gt;&gt; m.UnsetStubs()\n&gt;&gt;&gt; m.VerifyAll()\n&gt;&gt;&gt; # and check that it still works\n&gt;&gt;&gt; urllib.urlopen('http://www.google.com/')\n&lt;addinfourl at 3076773548L ...&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I am using Mock's patch decorator:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Mock's", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.voidspace.org.uk/python/mock/"}]}, {"code": "<pre>\n<code>\n from mock import patch\n\n[...]\n\n@patch('urllib.urlopen')\ndef test_foo(self, urlopen_mock):\n    urlopen_mock.return_value = MyUrlOpenMock()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Probably the best way to handle this is to split up the code, so that logic that processes the page contents is split from the code that fetches the page."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then pass an instance of the fetcher code into the processing logic, then you can easily replace it with a mock fetcher for the unit test."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["e.g."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Processor(oject):\n    def __init__(self, fetcher):\n        self.m_fetcher = fetcher\n\n    def doProcessing(self):\n        ## use self.m_fetcher to get page contents\n\nclass RealFetcher(object):\n    def fetchPage(self, url):\n        ## get real contents\n\nclass FakeFetcher(object):\n    def fetchPage(self, url):\n        ## Return whatever fake contents are required for this test\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The simplest way is to change your function so that it doesn't necessarily use urllib.urlopen.", "Let's say this is your original function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def my_grabber(arg1, arg2, arg3):\n    # .. do some stuff ..\n    url = make_url_somehow()\n    data = urllib.urlopen(url)\n    # .. do something with data ..\n    return answer\n</code>\n</pre>\n", "senID": 1}, {"text": ["Add an argument which is the function to use to open the URL.", "Then you can provide a mock function to do whatever you need:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def my_grabber(arg1, arg2, arg3, urlopen=urllib.urlopen):\n    # .. do some stuff ..\n    url = make_url_somehow()\n    data = urlopen(url)\n    # .. do something with data ..\n    return answer\n\ndef test_my_grabber():\n    my_grabber(arg1, arg2, arg3, urlopen=my_mock_open)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["In case you don't want to even load the module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys,types\nclass MockCallable():\n  \"\"\" Mocks a function, can be enquired on how many calls it received \"\"\"\n  def __init__(self, result):\n    self.result  = result\n    self._calls  = []\n\n  def __call__(self, *arguments):\n    \"\"\"Mock callable\"\"\"\n    self._calls.append(arguments)\n    return self.result\n\n  def called(self):\n    \"\"\"docstring for called\"\"\"\n    return self._calls\n\nclass StubModule(types.ModuleType, object):\n  \"\"\" Uses a stub instead of loading libraries \"\"\"\n\n  def __init__(self, moduleName):\n    self.__name__ = moduleName\n    sys.modules[moduleName] = self\n\n  def __repr__(self):\n    name  = self.__name__\n    mocks = ', '.join(set(dir(self)) - set(['__name__']))\n    return \"&lt;StubModule: %(name)s; mocks: %(mocks)s&gt;\" % locals()\n\nclass StubObject(object):\n  pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["And then:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; urllib = StubModule(\"urllib\")\n&gt;&gt;&gt; import urllib # won't actually load urllib\n\n&gt;&gt;&gt; urls.urlopen = MockCallable(StubObject())\n\n&gt;&gt;&gt; example = urllib.urlopen('http://example.com')\n&gt;&gt;&gt; example.read = MockCallable('foo')\n\n&gt;&gt;&gt; print(example.read())\n'foo'\n</code>\n</pre>\n", "senID": 3}]]