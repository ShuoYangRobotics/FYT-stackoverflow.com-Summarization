[[{"text": ["The quotes are consumed by the shell.", "If you want to get them into python, you'll have to invoke like python test.py 1 \"'2'\" \"'3'\" 4"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python test.py 1 \"'2'\" \"'3'\" 4", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["It is common handling of args, performed by shell.", "\" and ' are ignored, since you may use them to pass, for instance, few words as one argument."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["This means that you can't differentiate '1' and 1 in Python."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "'1'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The shell command line doesn't support passing arguments of different types.", "If you want to have commands with arguments of different types you need to write your own command line or at least your own command parser."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Variant 1: "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Variant 1:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Usage:python test.py \"1 2 '3' '4'\""], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Usage:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "python test.py \"1 2 '3' '4'\"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Implementation:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Implementation:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n command = sys.argv[1]\narguments = map(ast.literal_eval, command.split())\nprint arguments\n</code>\n</pre>\n", "senID": 4}, {"text": ["Variant 2:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Variant 2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Usage:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Usage:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n python test.py\n1 2 '3' 4'\n5 6 '7' 8'\n</code>\n</pre>\n", "senID": 7}, {"text": ["Implementation:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Implementation:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for line in sys.stdin:\n    arguments = map(ast.literal_eval, line.split())\n    print arguments\n</code>\n</pre>\n", "senID": 9}, {"text": ["(Of course, you'd probably want to use raw_input to read the command lines, and readline when it is available, that's merely an example."], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "raw_input", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "readline", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["A much better solution would be to actually know what kind of arguments you're expected to get and parse them as such, preferably by using a module like argparse."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "argparse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As you can see from your experiment, the quotes are gone by the time Python is invoked.", "You'll have to change how the Python is invoked."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Windows-specific:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # test.py\nimport win32api\nprint(win32api.GetCommandLine())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n D:\\&gt;python3 test.py 3 \"4\"\nC:\\Python32\\python3.EXE  test.py 3 \"4\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can then parse the command line yourself."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I'm not sure how correct I am, but if you're using only integer command line arguments, you can typecast it to be int."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["suppose (in *nix), I run my program as:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ./test.py 1\n</code>\n</pre>\n", "senID": 2}, {"text": ["I can in my program say something line"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import sys\ndef main():\n  a=int(sys.argv[1])\n</code>\n</pre>\n", "senID": 4}]]