[[{"text": ["[Edited to reflect new findings and passing code on spoj]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Generally, when using Python for spoj:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": "Don't use \"raw_input\", use sys.stdin.readlines(). That can make a difference for large input. Also, if possible (and it is, for this problem), read everything at once (sys.stdin. readlines()), instead of reading line by line (\"for line in sys.stdin...\").", "tag": "none", "senID": 2}, {"text": "Similarly, don't use \"print\", use sys.stdout.write() - and don't forget \"\\n\". Of course, this is only relevant when printing multiple times.", "tag": "none", "senID": 3}, {"text": "As S.Mark suggested, use psyco. It's available for both python2.5 and python2.6, at spoj (test it, it's there, and easy to spot: solutions using psyco usually have a ~35Mb memory usage offset). It's really simple: just add, after \"import sys\": import psyco; psyco.full()", "tag": "none", "senID": 4}, {"text": "As Justin suggested, put your code (except psyco incantation) inside a function, and simply call it at the end of your code", "tag": "none", "senID": 5}, {"text": "Sometimes creating a list and checking its length can be faster than creating a list and adding its components.", "tag": "none", "senID": 6}, {"text": "Favour list comprehensions (and generator expressions, when possible) over \"for\" and \"while\" as well. For some constructs, map/reduce/filter may also speed up your code.", "tag": "none", "senID": 7}]}, {"text": ["Using (some of) these guidelines, I've managed to pass INTEST.", "Still testing alternatives, though."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["Use psyco, it will JIT your code, very effective when there is big loop and calculations."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "psyco", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://psyco.sourceforge.net/"}]}, {"text": ["Edit: Looks like third party modules are not allowed,"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["So, you may try converting your loop to list comprehensions, it supposed to be run at C level, so it should be faster a little bit."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n sum(1 if int(line) % k == 0 else 0 for line in sys.stdin)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Hey, I got it to be within the time limit.", "I used the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Psyco with Python 2.5. ", "tag": "none", "senID": 1}, {"text": "a simple loop with a variable to keep count in", "tag": "none", "senID": 2}, {"text": "my code was all in a main() function (except the psyco import) which I called.", "tag": "none", "senID": 3}]}, {"text": ["The last one is what made the difference.", "I believe that it has to do with variable visibility, but I'm not completely sure.", "My time was 10.81 seconds.", "You might get it to be faster with a list comprehension."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Using a list comprehension brought my time down to 8.23 seconds.", "Bringing the line from sys import stdin, stdout inside of the function shaved off a little too to bring my time down to 8.12 seconds."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "from sys import stdin, stdout", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["For other readers, here is the INTEST problem statement.", "It's intended to be an I/O throughput test."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here is the INTEST problem statement", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.spoj.pl/problems/INTEST/"}]}, {"text": ["On my system, I was able to shave 15% off the execution time by replacing the loop with the following:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print sum(1 for line in sys.stdin if int(line) % k == 0)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Just recently Alex Martinelli said that invoking code inside a function, outperforms code run in the module ( I can't find the post though ) "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Alex Martinelli", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/95810/alex-martelli"}]}, {"text": ["So, why don't you try: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import sys\nimport psyco\n\npsyco.full1()\n\ndef main():\n\n    first_in = raw_input()\n    thing = first_in.split()\n    n = int(thing[0])\n    k = int(thing[1])\n    total = 0\n    i = 0\n\n    total = sum(1 if int(line) % k == 0 else 0 for line in sys.stdin)\n\n    print total\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 2}, {"text": ["IIRC the reason was code inside a function can be optimized. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Using list comprehensions with psyco is counter productive."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n count = 0\n for l in sys.stdin:\n     count += not int(l)%k\n</code>\n</pre>\n", "senID": 2}, {"text": ["runs twice as fast as"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n count = sum(not int(l)%k for l in sys.stdin)\n</code>\n</pre>\n", "senID": 4}, {"text": ["when using psyco."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]