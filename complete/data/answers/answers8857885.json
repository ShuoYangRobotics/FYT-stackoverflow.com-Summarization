[[{"text": ["Using string.translate:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "string.translate", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#string.translate"}]}, {"code": "<pre>\n<code>\n s = ''' abc(de)f\\gh\"i' '''\nprint(s.translate(None, r\"()\\\"'\"))\n # abcdefghi\n</code>\n</pre>\n", "senID": 1}, {"text": ["or re.sub:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "re.sub", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#re.sub"}]}, {"code": "<pre>\n<code>\n import re\nre.sub(r\"[\\\\()'\\\"]\",'',s)\n</code>\n</pre>\n", "senID": 3}, {"text": ["but string.translate appears to be an order of magnitude faster:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "string.translate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n In [148]: %timeit (s*1000).translate(None, r\"()\\\"'\")\n10000 loops, best of 3: 112 us per loop\n\nIn [146]: %timeit re.sub(r\"[\\\\()'\\\"]\",'',s*1000)\n100 loops, best of 3: 2.11 ms per loop\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; r = re.compile(\"[\\(\\)\\\\\\\\'\\\"]\")\n&gt;&gt;&gt; r.sub(\"\", \"\\\"hello\\\" '(world)'\\\\\\\\\\\\\")\n'hello world'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can use str.translate(table[, deletechars]) with table set to None, which will result in all characters from deletechars being removed from the string:"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "str.translate(table[, deletechars])", "tag": "a", "pos": 0, "childList": [{"text": "str.translate(table[, deletechars])", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#str.translate"}, {"text": "str.translate(table[, deletechars])", "childNum": 0, "tag": "code", "childList": []}, {"text": "table", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}, {"text": "deletechars", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n s.translate(None, r\"()\\\"'\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Some examples:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"\\\"hello\\\" '(world)'\".translate(None, r\"()\\\"'\")\n'hello world'\n&gt;&gt;&gt; \"a'b c\\\"d e(f g)h i\\\\j\".translate(None, r\"()\\\"'\")\n'ab cd ef gh ij'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You could make a list of all the characters you don't want: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n unwanted = ['(', ')', '\\\\', '\"', '\\'']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you could make a function strip_punctuation(s) like so:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "strip_punctuation(s)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def strip_punctuation(s): \n    for u in unwanted: \n        s = s.replace(u, '')\n    return s\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can create a dict of all the characters you want to be replaced and replace them with char of your choice.   "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n char_replace = {\"'\":\"\" , \"(\":\"\" , \")\":\"\" , \"\\\":\"\" , \"\"\":\"\"}\n\nfor i,j in char_replace.iteritems():\n        string = string.replace(i,j)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n my_string = r'''\\(\"\"Hello ''W\\orld)'''\nstrip_chars = r'''()\\'\"'''\n</code>\n</pre>\n", "senID": 0}, {"text": ["using comprehension:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ''.join(x for x in my_string if x not in strip_chars)\n</code>\n</pre>\n", "senID": 2}, {"text": ["using filter:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ''.join(filter(lambda x: x not in strip_chars, my_string))\n</code>\n</pre>\n", "senID": 4}, {"text": ["output:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n Hello World\n</code>\n</pre>\n", "senID": 6}]]