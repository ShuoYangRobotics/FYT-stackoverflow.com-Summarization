[[{"text": ["Lua.", "It has a very small footprint, is rather fast, and I found it (subjectively) to have the most pleasant API to interact with C."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want to touch the Lua objects from C - it's quite easy using the built-in APIs.", "If you want to touch C data from Lua - it's a bit more work, typically you'd need to make wrapper methods to expose what you want to allow the Lua to modify."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Small code base and tight control over the amount of default libraries introduced into your embeded interpreter also means that you can make reasonable assumptions over the security."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The only odd part is the 1-based array numbering, however, it was not that big of a deal compared to what I thought, given the existence of the iterators."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["How to integrate with C: the distribution tarball for Lua has a directory \"etc\" with a few very good useful examples that should quickly get you started.", "Specifically - etc/min.c shows how to start up an interpreter, make it interpret the file, and make it call the C function ('print' in that case).", "From there on you can go by reading the Lua documentation and the source of the standard libraries included with the distribution."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Some useful links:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 8, "lis": [{"text": ["Embedding Python"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": "Embedding Lua: ", "tag": "none", "senID": 2}, {"text": ["Embedding Ruby"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["Embedding PLT Scheme"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["Embedding PERL"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}, {"text": ["Embedding TCL"], "childNum": 0, "tag": "a", "senID": 6, "childList": []}, {"text": ["Embedding JavaScript"], "childNum": 0, "tag": "a", "senID": 7, "childList": []}, {"text": ["Embedding PHP"], "childNum": 0, "tag": "a", "senID": 8, "childList": []}]}, {"text": ["I am familiar with Python.", "Python is a very rich language, and has a huge number of libraries available."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["Lua is totally optimized for exactly this sort of embedding.", "A good starting point is Roberto Ierusalimschy's book Programming in Lua; you can get the previous edition free online."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Programming in Lua", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"href": "http://www.lua.org/pil/", "text": "previous edition free online", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["How does your script know about the properties of your C object?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "How does your script know about the properties of your C object?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Imagine for a moment your object is defined like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n typedef struct my_object *Object;\nObject some_object;\n</code>\n</pre>\n", "senID": 3}, {"text": ["What does your C code know about the properties of that object?", "Almost nothing, that's what.", "All you can do is "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Pass around pointers to an object, put them in data structures, etc."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Call functions that actually know what's inside a struct my_object."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "struct my_object", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]}, {"text": ["Lua gets access to C objects in exactly the same way: indirectly through functions:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["You make API calls to put a pointer to the object on Lua's stack, from which it can go into Lua data structures, variables, or anywhere else in the Lua universe."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "pointer", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You define functions that know about the object's internals, and you export those functions to Lua."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["There is a lot of stuff in the \"auxiliary library\" to help you.", "Don't overlook it!"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]}, {"text": ["All of this is explained with crystal clarity in the third part of Roberto's book, which includes examples.", "One fine point is"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "You have the choice of allocating the memory yourself (\"light userdata\") or having Lua allocate the memory.  It's generally better to have Lua allocate the memory because it can then free the object automatically when it's no longer needed, and you can also associated a Lua ", "tag": "none", "senID": 12}]}, {"text": ["A final note: althought it's possible to use SWIG or toLua or other tools to try to generate code to connect C and Lua, I urge you to write the code yourself, by hand.", "It's actually quite easy to to, and it's the only way to understand what's really going on."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}], [{"text": ["Here's the document from the Python website for embedding Python 2.6..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/extending/embedding.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/extending/embedding.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/extending/embedding.html"}]}], [{"text": ["You may also want to take a look at SWIG, the Simplified Wrapper and Interface Generator.", "As one would guess, it generates much of the boiler plate code to interface your C/C++ code to the scripting engine (which can be quite cumbersome to do manually)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SWIG", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.swig.org/"}]}, {"text": ["It supports Python and Lua (your preferences) and many other languages.", "It is quite easy to generate a module that extends the scripting language.", "Extending and embedding, which is what you desire, takes a bit more effort."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "and", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Lua is designed for exactly this purpose, and fairly easy to work with."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Another thing worth looking at would be QtScript, which is Javascript based, although this would involve some work to \"qt-ify\" your app."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "QtScript", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://doc.trolltech.com/4.5/qtscript.html"}]}], [{"text": ["Most scripting language allow embedding in C and usually allow you to expose certain objects or even functions from your C code to the script so it can manipulate the objects and call the functions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As said Lua is designed for this purpose embedding, using the interpreter you can expose objects to the script and call lua functions from C, search for embedding lua in C and you should find a lot of information, also don't miss the lua manual section \"The Application Programming Interface\""], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "embedding lua in C", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://www.lua.org/manual/5.1/manual.html#3", "text": "\"The Application Programming Interface\"", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Although Python is more suitable for stand-alone usage, it can also be embedded, it can be useful in case your scripts use the vast amount libraries provided with Python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You might take a look at Game Scripting Mastery.", "As i am interested in the high level aspect of computer games aswell this book has been recommended to me very often. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Game Scripting Mastery", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/1931841578"}]}, {"text": ["Unfortunately the book seems to be out of print (at least in Europe)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You'll need to use an object type (struct in C) specifically designed for interop with the scripting language.", "The method of embedding varies per language, but IIRC lua is particularly easy to embed, though python works fine too.", "In short, from the C-side you'll be working with objects that contain a bunch of meta-information in addition to the actual data, which when passed to (or from) the scripting language will be used to inform the engine about runtime specifics."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There are language specific tutorials for this kind of interop - just take your pick.", "I presume that perf.", "isn't an issue, so just pick whichever language you prefer."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]