[[{"text": ["I'm afraid you're not gonna get it any prettier than that in Python, except that some people would advise against _ for an \"anonymous\" variable.", "This is the Pythonic idiom for doing what you want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(The _ can be considered confusing to novices because it can be mistaken for special syntax.", "I use it, but only in the \"expert parts\" of my code.", "I also encounter it more and more often, but opinion still seems a bit divided on this one."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You can write a generator repeat like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "repeat", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def repeat(times, func, *args, **kwargs):\n    for _ in xrange(times):\n        yield func(*args, **kwargs)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n list(repeat(100, foo))\n</code>\n</pre>\n", "senID": 3}, {"text": ["It also accepts arguments to be passed on to the function, so you can:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from random import randint\nlist(repeat(100, randint, 1, 100))   # 100 random ints between 1 and 100\n</code>\n</pre>\n", "senID": 5}, {"text": ["Since it's a generator, you can pipe it into any kind of iterable, be it a list (as here) or a tuple or a set, or use it in a comprehension or a loop."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tuple", "childNum": 0, "tag": "code", "childList": []}, {"text": "set", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["In case foo() always returns the same result, you could use"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "foo()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [foo()]*100\n</code>\n</pre>\n", "senID": 1}, {"text": ["This has the advantage that foo() is only called once."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "foo()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit: As @larsmans points out this only makes sense though if foo() returns an immutable result."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "foo()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "immutable", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["In all other cases, your solution is fine!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Depending on what it does, you can make foo() a generator."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "foo()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Depending on your definition of \"beautifuller\", you may prefer this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["map(lambda x: foo(), xrange(100))"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "map(lambda x: foo(), xrange(100))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Your list comprehension is already beatiful and effective but if you need several options to do the same things then i think you can use map here.", "In case you need to call a certain function the specified number of times use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # in case your func looks like\ndef func():\n    # do something\n#then\nmap(func(), xrange(numberOfTimes))\n</code>\n</pre>\n", "senID": 1}, {"text": ["In case your function need value from range then you can use map with lambda:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n # in case your func looks like\ndef func(value):\n    # do something with value\n#then\nmap(lambda val: func(val), xrange(numberOfTimes))\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or in case you need to use data from several lists of the same length:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n # in case your func looks like\ndef func(value1, value2):\n    # do something with values\n#then\nmap(lambda val: func(*val), zip(xrange(10), xrange(10,20)))\n</code>\n</pre>\n", "senID": 5}, {"text": ["And so on..."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]