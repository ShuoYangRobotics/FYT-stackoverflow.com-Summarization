[[{"text": ["You can do this kind of thing:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def log(*args):\n  logging.info(' '.join(args))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This works:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def log(*args):\n    logging.info(' '.join(map(str, args)))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Define a function that takes a variable number of arguments, you can operate on the parameter list args to print it how you'd like:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def log(*args):\n...   print args\n\n&gt;&gt;&gt; log(\"a\", 1, \"b\")\n(\"a\", 1, \"b\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def log(*args):\n...   for a in args:  # &lt;- loop over the arguments\n...     print a,   # &lt;- notice the comma that says \"no newline\".\n...   print        # &lt;- force a newline after the log statement.\n\n&gt;&gt;&gt; log(\"a\", 1, \"b\")\na 1 b\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want to use logging.info:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "logging.info", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def log(*args):\n...   logging.info(\" \".join(\"%s\" %a for a in args))\n</code>\n</pre>\n", "senID": 5}], [{"text": ["How about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def log(*args):\n    logging.info(' '.join([str(arg) for arg in args]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["HTH!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The logging methods require a format-string as the first argument (or, as some others have suggested, a literal string to log).", "You can easily generate a format string for a given-number of arguments with code something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def log(*args):\n    fmt_string = ' '.join(['%s'] * len(args))\n    logging.info(fmt_string, *args)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This works because the multiplication operator on lists is defined to extend the list with copies of the list's contents."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Note that I'm passing *args as the second \"argument\" to logging.info -- this is Python's syntax for expanding a sequence (args will be a tuple, I believe) into a series of positional arguments in the function call."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "*args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "logging.info", "childNum": 0, "tag": "code", "childList": []}, {"text": "args", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I do this, to make it accept a format string.", "Coming from a C world, I like my format strings.", "I use code exactly like this in several production systems."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def logf(fmt, *args):\n    try: m = fmt % args\n    except:\n        # Catch mismatch between fmt/args; prevents logging.info from\n        # failing below, as well.\n        m = fmt\n        fmt = \"%s\"\n    if DEBUG:\n        stderr.write(\"[%s] %s\\n\" % (time.asctime(), m))\n    logging.info(fmt, *args)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n logf(\"There are %u entries in the list, and my mood is %s.\", len(L), \"sad\")\nlogf(\"It works without arguments, as well\")\nlogf(\"Test %d started\", i)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Call me old-school, I guess.", "This is all Python 2, by the way - 3 is far different."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["One day I was reading the python docs and I came across the functools.partial() method (or I read about it somewhere -- I can't remember).", "A little playing around led to the following code I now put at the beginning of every python script I write:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nimport sys, functools\n\nnl = \"\\n\"\n\ndef StreamOut(stream, *s, **kw):\n    k = kw.setdefault\n    # Process keyword arguments\n    sep     = k(\"sep\", \"\")\n    auto_nl = k(\"auto_nl\", True)\n    prefix  = k(\"prefix\", \"\")\n    convert = k(\"convert\", str)\n    # Convert position arguments to strings\n    strings = map(convert, s)\n    # Dump them to the stream\n    stream.write(prefix + sep.join(strings))\n    # Add a newline if desired\n    if auto_nl:\n        stream.write(nl)\n\nout  = functools.partial(StreamOut, sys.stdout)\nouts = functools.partial(StreamOut, sys.stdout, sep=\" \")\ndbg  = functools.partial(StreamOut, sys.stdout, sep=\" \", prefix=\"+ \")\nerr  = functools.partial(StreamOut, sys.stderr)\n\nout(\"Hi there\", \"how are you?\")\nouts(\"Hi there\", \"how are you?\")\n</pre>\n", "senID": 1}, {"text": ["Put it into a file and try them out.", "This makes for some easily-extendible functions."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]