[[{"code": "<pre>\n<code>\n #!/bin/bash\nseq 1 1000 | split -l 1 -a 3 -d - file\n</code>\n</pre>\n", "senID": 0}, {"text": ["Above will create 1000 files with each file having a number from 1 to 1000.", "The files will be named file000 ... file999"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n for i in {0001..1000}\ndo\n  echo \"some text\" &gt; \"file_${i}.txt\"\ndone\n</code>\n</pre>\n", "senID": 0}, {"text": ["or  if you want to use Python &lt;2.6"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for x in range(1000):\n    open(\"file%03d.txt\" % x,\"w\").write(\"some text\")\n</code>\n</pre>\n", "senID": 2}], [{"text": ["In Perl:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n use strict;\nuse warnings;\n\nfor my $i (1..1000) {\n   open(my $out,\"&gt;\",sprintf(\"file%04d\",$i));\n   print $out \"some text\\n\";\n   close $out;\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Why the first 2 lines?", "Because they are good practice so I use them even in 1-shot programs like these."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Regards,\nOffer"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n #!/bin/bash\n\nfor suf in $(seq -w 1000)\ndo\n        cat &lt;&lt; EOF &gt; myfile.$suf\n        this is my text file\n        there are many like it\n        but this one is mine.\nEOF\ndone\n</code>\n</pre>\n", "senID": 0}], [{"text": ["For variety:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/perl\n\nuse strict; use warnings;\nuse File::Slurp;\n\nwrite_file $_, \"$_\\n\" for map sprintf('file%04d.txt', $_), 1 .. 1000;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I don't know in shell or perl but in python would be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\nfor i in xrange(1000):\n    with open('file%0.3d' %i,'w') as fd:\n        fd.write('some text')\n</code>\n</pre>\n", "senID": 1}, {"text": ["I think is pretty straightforward what it does."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can use only Bash with no externals and still be able to pad the numbers so the filenames sort properly (if needed):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n read -r -d '' text &lt;&lt; 'EOF'\nSome text for\nmy files\nEOF\n\nfor i in {1..1000}\ndo\n    printf -v filename \"file%04d\" \"$i\"\n    echo \"$text\" &gt; \"$filename\"\ndone\n</code>\n</pre>\n", "senID": 1}, {"text": ["Bash 4 can do it like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for filename in file{0001..1000}; do echo $text &gt; $filename; done\n</code>\n</pre>\n", "senID": 3}, {"text": ["Both versions produce filenames like \"file0001\" and \"file1000\"."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Here is a short command-line Perl program."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -E'say $_ $_ for grep {open $_, \"&gt;f$_\"} 1..1000'\n</code>\n</pre>\n", "senID": 1}]]