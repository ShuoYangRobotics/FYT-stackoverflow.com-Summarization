[[{"text": ["How about this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for x in wowList:\n    installWow(x, 'installed by me')\ndel x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could make your own \"each\" function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def each(fn, items):\n    for item in items:\n        fn(item)\n\n\n# called thus\neach(lambda x: installWow(x, 'installed by me'), wowList)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Basically it's just map, but without the results being returned.", "By using a function you'll ensure that the \"item\" variable doesn't leak into the current scope."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You might try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n filter(lambda x: installWow(x, 'installed by me') and False, wowList)\n</code>\n</pre>\n", "senID": 1}, {"text": ["That way, the return result is an empty list no matter what."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Or you could just drop the and False if you can force installWow() to always return False (or 0 or None or another expression that evaluates false)."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "and False", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "installWow()", "childNum": 0, "tag": "code", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Every expression evaluates to something, so you always get a result, whichever way you do it.", "And any such returned object (just like your list) will get thrown away afterwards because there's no reference to it anymore."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To clarify: Very few things in python are statements that don't return anything.", "Even a function call like"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n doSomething()\n</code>\n</pre>\n", "senID": 2}, {"text": ["still returns a value, even if it gets discarded right away.", "There is no such thing as Pascal's function / procedure distinction in python."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["if it is ok to distruct wowList"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n while wowList: installWow(wowList.pop(), 'installed by me')\n</code>\n</pre>\n", "senID": 1}, {"text": ["if you do want to maintain wowList"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n wowListR = wowList[:]\nwhile wowListR: installWow(wowListR.pop(), 'installed by me')\n</code>\n</pre>\n", "senID": 3}, {"text": ["and if order matters"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n wowListR = wowList[:]; wowListR.reverse()\nwhile wowListR: installWow(wowListR.pop(), 'installed by me')\n</code>\n</pre>\n", "senID": 5}, {"text": ["Though as the solution of the puzzle I like the first :)"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["I can not resist myself to post it as separate answer"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n reduce(lambda x,y: x(y, 'installed by me') , wowList, installWow)\n</code>\n</pre>\n", "senID": 1}, {"text": ["only twist is installWow should return itself e.g."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def installWow(*args):\n    print args\n    return installWow\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You could use a filter and a function that doesn't return a True value.", "You'd get an empty return list since filter only adds the values which evaluates to true, which I suppose would save you some memory.", "Something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\ny = 0\ndef myfunction(x):\n  global y\n  y += x\n\ninput = (1, 2, 3, 4)\n\nprint \"Filter output: %s\" % repr(filter(myfunction, input))\nprint \"Side effect result: %d\" % y\n</code>\n</pre>\n", "senID": 1}, {"text": ["Running it produces this output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Filter output: ()\nSide effect result: 10\n</code>\n</pre>\n", "senID": 3}], [{"text": ["first rewrite the for loop as a generator expression, which does not allocate any memory.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (installWow(x,  'installed by me') for x in wowList )\n</code>\n</pre>\n", "senID": 1}, {"text": ["But this expression doesn't actually do anything without finding some way to consume it.", "So we can rewrite this to yield something determinate, rather than rely on the possibly None result of installWow.  "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "installWow", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n ( [1, installWow(x,  'installed by me')][0] for x in wowList )\n</code>\n</pre>\n", "senID": 3}, {"text": ["which creates a list, but returns only the constant 1.  this can be consumed conveniently with reduce"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "reduce", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n reduce(sum, ( [1, installWow(x,  'installed by me')][0] for x in wowList ))\n</code>\n</pre>\n", "senID": 5}, {"text": ["Which conveniently returns the number of items in wowList that were affected."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Just make installWow return None or make the last statement be pass like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def installWow(item, phrase='installed by me'):\n  print phrase\n  pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["and use this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n list(x for x in wowList if installWow(x))\n</code>\n</pre>\n", "senID": 3}, {"text": ["x won't be set in the global name space and the list returned is [] a singleton"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]