[[{"text": ["sys.exit() raises the SystemExit exception."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "sys.exit()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "SystemExit", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you don't catch that exception the program ends."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Since you're getting that output, I'm not sure what is happening, but I guess that you're catching all exceptions and printing them yourself:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n try:\n    ...\nexcept:\n    print exception somehow\n    raise\n</code>\n</pre>\n", "senID": 3}, {"text": ["If that's the case, don't do that.", "catch Exception instead:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Exception", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n ...\n    except Exception:\n        ...\n</code>\n</pre>\n", "senID": 5}, {"text": ["That way you won't catch things not meant to be catched (like SystemExit)."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "SystemExit", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["sys.exit(error_code)  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Error_code will be 0 for a normal exit,  1 or some other positive number for an exit due to an error of some kind, e.g.", "the user has entered the wrong parameters."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["sys.exit() \"is undefined on some architectures\", (although it worked when I tried it on my Linux box!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The official python docs explains this more fully. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "official python docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sys.html"}]}, {"text": ["It's an extremely good idea for all your programs and scripts to follow the return convention. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["For example if you run a script which grabs some data out of a database; returning 0 and no output, means the database is perfectly fine there's just nothing in it (or nothing matching your query).", "returning 1 and no output means there is a fault with the database, the whole process should abort, because to continue would corrupt the other system too."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You should also consider alternatives to exiting directly.", "Often return works just as well if you wrap code in a function.", "(Better, in fact, because it avoids sys.exit() weirdness."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "return", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def main():\n    ...do something...\n    if something:\n        return               # &lt;----- return takes the place of exit\n    ...do something else...\n\nmain()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["import sys"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["sys.exit(0)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Try running a python interpreter out of your IDE.", "In my Windows installation the simple command line python.exe, both options work:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python.exe", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.exit()\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; raise SystemExit\n</code>\n</pre>\n", "senID": 3}], [{"text": ["In your case, your error is likely that you have a bare except block that is catching the SystemExit exception, like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\ntry:\n  sys.exit(return_code)\nexcept:\n  pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["The correct way to fix your problem is to remove the except: portion, and instead just catch the Exceptions you expect to be possibly raised.", "For example:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "except:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n  # Code which could raise exceptions\nexcept (NameError, ValueError):\n  # Do something in case of NameError or ValueError, but\n  # ignore other exceptions (like SystemExit)\n</code>\n</pre>\n", "senID": 3}, {"text": ["However, if you really wanted your program to exit, the following code will work:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import os\ntry:\n  os._exit(return_code)\nexcept:\n  pass\n</code>\n</pre>\n", "senID": 5}, {"text": ["This will exit even with the except: clause, as it just directly calls the C function of the same name which kills your process.", "This is not recommended unless you know what you are doing, since this will not call cleanup handlers or flush open IO buffers."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "except:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "not recommended", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}]]