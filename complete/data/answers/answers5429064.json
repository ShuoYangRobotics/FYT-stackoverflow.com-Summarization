[[{"text": ["Change"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data.write(c + n)\n</code>\n</pre>\n", "senID": 1}, {"text": ["to"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n data.write(\"%s%s\\n\" % (c, n))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["A properly-placed data.write('\\n') will handle that.", "Just indent it appropriately for the loop you want to punctuate."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "data.write('\\n')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As other answers gave already pointed out, you can do it by appending a '\\n' to c+n or by using the format string \"%s%s\\n\"."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "c+n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Just as a matter of interest, I think it would be more pythonic to use a list comprehension instead of two nested loops:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n data.write(\"\\n\".join(\"%s%s\"%(n,c) for c in s_chars for n in nums))\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Python's print is the standard \"print with newline\" function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Therefore, you can directly do, if you use Python 2.x:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print  &gt;&gt; data, c+n\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you use Python 3.x:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n print(c+n, file=data)\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n def generator():\n     nums = ['09', '98', '87', '76', '65', '54', '43']\n     s_chars = ['*', '&amp;', '^', '%', '$', '#', '@',]\n\n     data = open(\"list.txt\", \"w\")\n     for c in s_chars:\n        for n in nums:\n           data.write(c + n + \"\\n\")\n     data.close()\n</code>\n</pre>\n", "senID": 0}, {"text": ["OR"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def generator():\n     nums = ['09', '98', '87', '76', '65', '54', '43']\n     s_chars = ['*', '&amp;', '^', '%', '$', '#', '@',]\n\n     data = open(\"list.txt\", \"w\")\n     for c in s_chars:\n        for n in nums:\n           data.write(c + n)\n        data.write(\"\\n\")\n     data.close()\n</code>\n</pre>\n", "senID": 2}, {"text": ["depending on what you want."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["In the previously reply, I have made a wrong answer because I have misunderstood the requirements, please ignore it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think you can use join to simplify the inner loop"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n data = open(\"list.txt\", \"w\")\nfor c in s_chars:\n    data.write(\"%s%s\\n\" % (c, c.join(nums)))\ndata.close()\n</code>\n</pre>\n", "senID": 2}]]