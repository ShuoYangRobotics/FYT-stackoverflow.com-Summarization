[[{"text": ["This is recursion, though for some reason you're labeling it like it's factorial."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In any case, the sum from 1 to n is also simply:  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["n * ( n + 1 ) / 2"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "n * ( n + 1 ) / 2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(You can special case it for negative values if you like."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Transforming recursively-defined sequences of integers into ones that can be expressed in a closed form is a fascinating part of discrete mathematics -- I heartily recommend Concrete Mathematics: A Foundation for Computer Science, by Ronald Graham, Donald Knuth, and Oren Patashnik (see.", "e.g.", "the wikipedia entry about it)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Concrete Mathematics: A Foundation for Computer Science", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "wikipedia", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Concrete_Mathematics"}]}, {"text": ["However, the specific sequence you show, fac(x) = fac(x - 1) + x, according to a famous anecdote, was solved by Gauss when he was a child in first grade -- the teacher had given the pupils the taksk of summing numbers from 1 to 100 to keep them quet for a while, but two minutes later there was young Gauss with the answer, 5050, and the explanation: \"I noticed that I can sum the first, 1, and the last, 100, that's 101; and the second, 2, and the next-to-last, 99, and that's again 101; and clearly that repeats 50 times, so, 50 times 101, 5050\".", "Not rigorous as proofs go, but quite correct and appropriate for a 6-years-old;-)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "fac(x) = fac(x - 1) + x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In the same way (plus really elementary algebra) you can see that the general case is, as many have already said, (N * (N+1)) / 2 (the product is always even, since one of the numbers must be odd and one even; so the division by two will always produce an integer, as desired, with no remainder)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "(N * (N+1)) / 2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Here is how to prove the closed form for an arithmetic progression"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "arithmetic progression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Arithmetic_progression"}]}, {"code": "<pre>\n<code>\n S  = 1 +   2   + ... + (n-1) + n\nS  = n + (n-1) + ... +   2   + 1\n2S = (n+1) + (n+1) + ... + (n+1) + (n+1)\n     ^ you'll note that there are n terms there.\n2S = n(n+1)\nS = n(n+1)/2\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Larry is very correct with his formula, and its the fastest way to calculate the sum of all integers up to n."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["But for completeness, there are built-in Python functions, that perform what you have done, on lists with arbitrary elements.", "E.g."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "arbitrary", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["sum()"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "sum()", "tag": "a", "pos": 0, "childList": [{"text": "sum()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#sum"}, {"text": "sum()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["or more general, reduce()"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "reduce()", "tag": "a", "pos": 0, "childList": [{"text": "reduce()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#reduce"}, {"text": "reduce()", "childNum": 0, "tag": "code", "childList": []}]}]}], [{"text": ["I'm not allowed to comment yet so I'll just add that you'll want to be careful in using range() as it's 0 base.", "You'll need to use range(n+1) to get the desired effect."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Sorry for the duplication..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["sum(range(10)) != 55"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["sum(range(11)) == 55"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["OP has asked, in a comment, for a link to the story about Gauss as a schoolchild."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["He may want to check out this fascinating article by Brian Hayes.", "It not only rather convincingly suggests that the Gauss story may be a modern fabrication, but outlines how it would be rather difficult not to see the patterns involved in summing the numbers from 1 to 100.", "That in fact the only way to miss these patterns would be to solve the problem by writing a program."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this fascinating article by Brian Hayes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.americanscientist.org/issues/pub/gausss-day-of-reckoning"}]}, {"text": ["The article also talks about different ways to sum arithmetic progressions, which is at the heart of OP's question.", "There is also an ad-free version here."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.americanscientist.org/issues/id.3483,y.0,no.,content.true,page.1,css.print/issue.aspx"}]}], [{"text": ["Consider that N+1, N-1+2, N-2+3, and so on all add up to the same number, and there are approximately N/2 instances like that (exactly N/2 if N is even)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What you have there is called arithmetic sequence and as suggested, you can compute it directly without overhead which might result from the recursion."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["And I would say this is a homework despite what you say."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]