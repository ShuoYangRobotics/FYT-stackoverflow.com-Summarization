[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; import datetime\n&gt;&gt;&gt; a = datetime.datetime.strptime(\"Mon Jun 28 10:51:07 2010\", \"%a %b %d %H:%M:%S %Y\")\n&gt;&gt;&gt; b = datetime.datetime.strptime(\"Fri Jun 18 10:18:43 2010\", \"%a %b %d %H:%M:%S %Y\")\n&gt;&gt;&gt; c = a-b\n&gt;&gt;&gt; c.days\n10\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Use strptime."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "strptime", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/time.html#time.strptime"}]}, {"text": ["Sample usage:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from datetime import datetime\n\nmy_date = datetime.strptime('Mon Jun 28 10:51:07 2010', '%a %b %d %H:%M:%S %Y')\nprint my_date\n</code>\n</pre>\n", "senID": 2}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["You could also print the time difference in a human readable form, like so:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from time import strptime\nfrom datetime import datetime\n\ndef date_diff(older, newer):\n    \"\"\"\n    Returns a humanized string representing time difference\n\n    The output rounds up to days, hours, minutes, or seconds.\n    4 days 5 hours returns '4 days'\n    0 days 4 hours 3 minutes returns '4 hours', etc...\n    \"\"\"\n\n    timeDiff = newer - older\n    days = timeDiff.days\n    hours = timeDiff.seconds/3600\n    minutes = timeDiff.seconds%3600/60\n    seconds = timeDiff.seconds%3600%60\n\n    str = \"\"\n    tStr = \"\"\n    if days &gt; 0:\n        if days == 1:   tStr = \"day\"\n        else:           tStr = \"days\"\n        str = str + \"%s %s\" %(days, tStr)\n        return str\n    elif hours &gt; 0:\n        if hours == 1:  tStr = \"hour\"\n        else:           tStr = \"hours\"\n        str = str + \"%s %s\" %(hours, tStr)\n        return str\n    elif minutes &gt; 0:\n        if minutes == 1:tStr = \"min\"\n        else:           tStr = \"mins\"           \n        str = str + \"%s %s\" %(minutes, tStr)\n        return str\n    elif seconds &gt; 0:\n        if seconds == 1:tStr = \"sec\"\n        else:           tStr = \"secs\"\n        str = str + \"%s %s\" %(seconds, tStr)\n        return str\n    else:\n        return None\n\nolder = datetime.strptime('Mon Jun 28 10:51:07 2010', '%a %b %d %H:%M:%S %Y')\nnewer = datetime.strptime('Tue Jun 28 10:52:07 2010', '%a %b %d %H:%M:%S %Y')\nprint date_diff(older, newer)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Original source for the time snippet."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Original source", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://djangosnippets.org/snippets/412/"}]}], [{"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nimport datetime\n\ndef hrdd(d1, d2):\n    \"\"\"\n    Human-readable date difference.\n    \"\"\"\n    _d1 = datetime.datetime.strptime(d1, \"%a %b %d %H:%M:%S %Y\")\n    _d2 = datetime.datetime.strptime(d2, \"%a %b %d %H:%M:%S %Y\")\n    diff = _d2 - _d1\n    return diff.days # &lt;-- alternatively: diff.seconds \n\nif __name__ == '__main__':\n    d1 = \"Mon Jun 28 10:51:07 2010\"\n    d2 = \"Fri Jun 18 10:18:43 2010\"\n    d3 = \"Wed Dec 15 09:18:43 2010\"\n\n    print hrdd(d1, d2)\n    # ==&gt; -11\n    print hrdd(d2, d1)\n    # ==&gt; 10\n    print hrdd(d1, d3)\n    # ==&gt; 169\n    # ...\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This isn't along the same lines as the other answers, but it might be helpful to someone wanting to display something more human readable (and less precise).", "I did this quickly, so suggestions welcome."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(Note that it assumes until_seconds is the later timestamp."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "until_seconds", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def readable_delta(from_seconds, until_seconds=None):\n    '''Returns a nice readable delta.\n\n    readable_delta(1, 2)           # 1 second ago\n    readable_delta(1000, 2000)     # 16 minutes ago\n    readable_delta(1000, 9000)     # 2 hours, 133 minutes ago\n    readable_delta(1000, 987650)   # 11 days ago\n    readable_delta(1000)           # 15049 days ago (relative to now)\n    '''\n\n    if not until_seconds:\n        until_seconds = time.time()\n\n    seconds = until_seconds - from_seconds\n    delta = datetime.timedelta(seconds=seconds)\n\n    # deltas store time as seconds and days, we have to get hours and minutes ourselves\n    delta_minutes = delta.seconds // 60\n    delta_hours = delta_minutes // 60\n\n    ## show a fuzzy but useful approximation of the time delta\n    if delta.days:\n        return '%d day%s ago' % (delta.days, plur(delta.days))\n    elif delta_hours:\n        return '%d hour%s, %d minute%s ago' % (delta_hours, plur(delta_hours), delta_minutes, plur(delta_minutes))\n    elif delta_minutes:\n        return '%d minute%s ago' % (delta_minutes, plur(delta_minutes))\n    else:\n        return '%d second%s ago' % (delta.seconds, plur(delta.seconds))\n\ndef plur(it):\n    '''Quick way to know when you should pluralize something.'''\n    try:\n        size = len(it)\n    except TypeError:\n        size = int(it)\n    return '' if size==1 else 's'\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; (datetime.datetime.strptime(\"Mon Jun 28 10:51:07 2010\", \"%a %b %d %H:%M:%S %Y\") - datetime.datetime.strptime(\"Fri Jun 18 10:18:43 2010\", \"%a %b %d %H:%M:%S %Y\")).days\n10\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n from datetime import datetime\n\nresp = raw_input(\"What is the first date ?\")\ndate1 = datetime.strptime(resp,\"%a %b %d %H:%M:%S %Y\")\nresp2 = raw_input(\"What is the second date ?\")\ndate2 = datetime.strptime(resp2,\"%a %b %d %H:%M:%S %Y\")\nres = date2-date1\nprint str(res)\n</code>\n</pre>\n", "senID": 0}, {"text": ["For details on how to print a timedelta object better, you can see this previous post."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this previous post", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/538666/python-format-timedelta-to-string"}]}]]