[[{"text": ["The statement"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if A:\n</code>\n</pre>\n", "senID": 1}, {"text": ["will call A.__nonzero__() (see Special method names documentation) and use the return value of that function.", "Here's the summary:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "A.__nonzero__()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Special method names", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#object.__nonzero__"}]}, {"text": ["On the other hand,"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if A is not None:\n</code>\n</pre>\n", "senID": 4}, {"text": ["compares only the reference A with None to see whether it is the same or not."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "only", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["As written in PEP8:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["if A: will prove false if A is 0, False, or None, which can lead to undesired results."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Most guides I've seen suggest that you should use     "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["if A:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["unless you have a reason to be more specific. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["There are some slight differences.", "There are values other than None that return False, for example empty lists, or 0, so have a think about what it is you're really testing for."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["A lot of functions return None if there are no appropriate results.", "For example, an SQLAlchemy query's .first() method returns None if there were no rows in the result.", "Suppose you were selecting a value that might return 0 and need to know whether it's actually 0 or whether the query had no results at all."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".first()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["A common idiom is to give a function or method's optional argument the default value of None, and then to test that value being None to see if it was specified.", "For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def spam(eggs=None):\n    if eggs is None:\n        eggs = retrievefromconfigfile()\n</code>\n</pre>\n", "senID": 2}, {"text": ["compare that to:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def spam(eggs=None):\n    if not eggs:\n        eggs = retrievefromconfigfile()\n</code>\n</pre>\n", "senID": 4}, {"text": ["In the latter, what happens if you call spam(0) or spam([])?", "The function would (incorrectly) detect that you hadn't passed in a value for eggs and would computer a default value for you.", "That's probably not what you want."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "spam(0)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "spam([])", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "eggs", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Or imagine a method like \"return the list of transactions for a given account\".", "If the account does not exist, it might return None.", "This is different than returning an empty list (which would mean \"this account exists but has not recorded transactions)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Finally, back to database stuff.", "There's a big difference between NULL and an empty string.", "An empty string typically says \"there's a value here, and that value is nothing at all\".", "NULL says \"this value hasn't been entered."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["In each of those cases, you'd want to use if A is None.", "You're checking for a specific value - None - not just \"any value that happens to cast to False\"."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "if A is None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It depends on the context."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I use if A: when I'm expecting A to be some sort of collection, and I only want to execute the block if the collection isn't empty.", "This allows the caller to pass any well-behaved collection, empty or not, and have it do what I expect.", "It also allows None and False to suppress execution of the block, which is occasionally convenient to calling code."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "if A:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["OTOH, if I expect A to be some completely arbitrary object but it could have been defaulted to None, then I always use if A is not None, as calling code could have deliberately passed a reference to an empty collection, empty string, or a 0-valued numeric type, or boolean False, or some class instance that happens to be false in boolean context."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "A", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}, {"text": "always", "childNum": 0, "tag": "strong", "childList": []}, {"text": "if A is not None", "childNum": 0, "tag": "code", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["And on the other other hand, if I expect A to be some more-specific thing (e.g.", "instance of a class I'm going to call methods of), but it could have been defaulted to None, and I consider default boolean conversion to be a property of the class I don't mind enforcing on all subclasses, then I'll just use if A: to save my fingers the terrible burden of typing an extra 12 characters."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "A", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if A:", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The former is more Pythonic (better ideomatic code), but will not execute the block if A is False (not None)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n if x: #x is treated True except for all empty data types [],{},(),'',0 False, and None\n</code>\n</pre>\n", "senID": 0}, {"text": ["so it is not same as "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if x is not None # which works only on None\n</code>\n</pre>\n", "senID": 2}]]