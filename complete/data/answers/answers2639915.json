[[{"text": ["This is called the 'mutable defaults trap'.", "See: http://www.ferg.org/projects/python_gotchas.html#contents_item_6"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.ferg.org/projects/python_gotchas.html#contents_item_6", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ferg.org/projects/python_gotchas.html#contents_item_6"}]}, {"text": ["Basically, a_list is initialized when the program is first interpreted, not each time you call the function (as you might expect from other languages).", "So you're not getting a new list each time you call the function, but you're reusing the same one."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "a_list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I guess the answer to the question is that if you want to append something to a list, just do it, don't create a function to do it. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This: "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; my_list = []\n&gt;&gt;&gt; my_list.append(1)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Is clearer and easier to read than: "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; my_list = my_append(1)\n</code>\n</pre>\n", "senID": 6}, {"text": ["In the practical case, if you needed this sort of behavior, you would probably create your own class which has methods to manage it's internal list. "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Default arguments are evaluated at the time the def statement is executed, which is the probably the most reasonable approach: it is often what is wanted.", "If it wasn't the case, it could cause confusing results when the environment changes a little."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "def", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Differentiating with a magic local method or something like that is far from ideal.", "Python tries to make things pretty plain and there is no obvious, clear replacement for the current boilerplate that doesn't resort to messing with the rather consistent semantics Python currently has."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "local", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The extremely specific use case of a function that lets you optionally pass a list to modify, but generates a new list unless you specifically do pass one in, is definitely not worth a special-case syntax.", "Seriously, if you're making a number of calls to this function, why ever would you want to special-case the first call in the series (by passing only one argument) to distinguish it from every other one (which will need two arguments to be able to keep enriching an existing list)?!", "E.g., consider something like (assuming of course that betterappend did something useful, because in the current example it would be crazy to call it in lieu of a direct .append!-):"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "optionally", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "betterappend", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": ".append", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def thecaller(n):\n  if fee(0):\n    newlist = betterappend(foo())\n  else:\n    newlist = betterappend(fie())\n  for x in range(1, n):\n    if fee(x):\n      betterappend(foo(), newlist)\n    else:\n      betterappend(fie(), newlist)\n</code>\n</pre>\n", "senID": 1}, {"text": ["this is simply insane, and should obviously be, instead,"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "obviously", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def thecaller(n):\n  newlist = []\n  for x in range(n):\n    if fee(x):\n      betterappend(foo(), newlist)\n    else:\n      betterappend(fie(), newlist)\n</code>\n</pre>\n", "senID": 3}, {"text": ["always using two arguments, avoiding repetition, and building much simpler logic."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Introducing special-case syntax encourages and supports the special-cased use case, and there's really not much sense in encouraging and supporting this extremely peculiar one -- the existing, perfectly regular syntax is just fine for the use case's extremely rare good uses;-)."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "encourages and supports", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "good", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["What if you were not talking about lists, but about AwesomeSets, a class you just defined?", "Would you want to define \".local\" in every class?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "every class", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class Foo(object):\n    def get(self):\n        return Foo()\n    local = property(get)\n</code>\n</pre>\n", "senID": 1}, {"text": ["could possibly work, but would get old really quick, really soon.", "Pretty soon, the \"if a is None: a = CorrectObject()\" pattern becomes second nature, and you won't find it ugly -- you'll find it illuminating."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The problem is not one of syntax, but one of semantics -- the values of default parameters are evaluated at function definition time, not at function execution time. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I've edited this answer to include thoughts from the many comments posted in the question."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The example you give is flawed.", "It modifies the list that you pass it as a side effect.", "If that's how you intended the function to work, it wouldn't make sense to have a default argument.", "Nor would it make sense to return the updated list.", "Without a default argument, the problem goes away."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "flawed", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["If the intent was to return a new list, you need to make a copy of the input list.", "Python prefers that things be explicit, so it's up to you to make the copy."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "copy", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def better_append(new_item, a_list=[]): \n    new_list = list(a_list)\n    new_list.append(new_item) \n    return new_list\n</code>\n</pre>\n", "senID": 3}, {"text": ["For something a little different, you can make a generator that can take a list or a generator as input:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def generator_append(new_item, a_list=[]):\n    for x in a_list:\n        yield x\n    yield new_item\n</code>\n</pre>\n", "senID": 5}, {"text": ["I think you're under the misconception that Python treats mutable and immutable default arguments differently; that's simply not true.", "Rather, the immutability of the argument makes you change your code in a subtle way to do the right thing automatically.", "Take your example and make it apply to a string rather than a list:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def string_append(new_item, a_string=''):\n    a_string = a_string + new_item\n    return a_string\n</code>\n</pre>\n", "senID": 7}, {"text": ["This code doesn't change the passed string - it can't, because strings are immutable.", "It creates a new string, and assigns a_string to that new string.", "The default argument can be used over and over again because it doesn't change, you made a copy of it at the start."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["Probably you should not define these two functions as good and bad.", "You can use the first one with list or dictionaries to implement in place modifications of the corresponding objects.", "This method can give you headaches if you do not know how mutable objects work but given you known what you are doing it is OK in my opinion."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So you have two different methods to pass parameters providing different behaviors.", "And this is good, I would not change it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I think you're confusing elegant syntax with syntactic sugar.", "The python syntax communicates both approaches clearly, it just happens that the correct approach appears less elegant (in terms of lines of syntax) than the incorrect approach.", "But since the incorrect approach, is well...incorrect, it's elegance is irrelevant.", "As to why something like you demonstrate in better_append is not implemented, I would guess that There should be one-- and preferably only one --obvious way to do it.", "trumps minor gains in elegance. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "There should be one-- and preferably only one --obvious way to do it.", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}], [{"text": ["This is better than good_append(), IMO:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def ok_append(new_item, a_list=None):\n    return a_list.append(new_item) if a_list else [ new_item ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["You could also be extra careful and check that a_list was a list..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]