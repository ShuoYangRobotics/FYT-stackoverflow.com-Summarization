[[{"text": ["I would convert to a string at full precision and then just chop off everything but the first so many characters."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def trunc(f, n):\n    '''Truncates/pads a float f to n decimal places without rounding'''\n    slen = len('%.*f' % (n, f))\n    return str(f)[:slen]\n</code>\n</pre>\n", "senID": 1}, {"text": ["(edited to fix bugs)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In response to your comment: the version above doesn't include the zeros, but here's my old version that did:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def trunc(f, n):\n    '''Truncates/pads a float f to n decimal places without rounding'''\n    return ('%.*f' % (n + 1, f))[:-1]\n</code>\n</pre>\n", "senID": 4}, {"text": ["The latter does fail on some corner cases, though, like trunc(11.999999, 3)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n round(1.923328437452, 3)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Python standard types, you'll need to scroll down a bit to get to the round function.", "Essentially the second number says how many decimal places to round it to."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python standard types", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#numeric-types-int-float-long-complex"}]}], [{"text": ["The result of round is a float, so watch out:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "round", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; round(1.923328437452, 3)\n1.923\n&gt;&gt;&gt; round(1.23456, 3)\n1.2350000000000001\n</code>\n</pre>\n", "senID": 1}, {"text": ["You will be better off when using a formatted string:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"%.3f\" % 1.923328437452\n'1.923'\n&gt;&gt;&gt; \"%.3f\" % 1.23456\n'1.235'\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n def trunc(num, digits):\n   sp = str(num).split('.')\n   return '.'.join([sp[0], sp[:digits]])\n</code>\n</pre>\n", "senID": 0}, {"text": ["This should work.", "It should give you the truncation you are looking for."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n n = 1.923328437452\nstr(n)[:4]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["def trunc(f,n):\n  return ('%.16f' % f)[:(n-16)]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Just wanted to mention that the old \"make round() with floor()\" trick of"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n round(f) = floor(f+0.5)\n</code>\n</pre>\n", "senID": 1}, {"text": ["can be turned around to make floor() from round()"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n floor(f) = round(f-0.5)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Although both these rules break around negative numbers, so using it is less than ideal:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def trunc(f, n):\n    if f &gt; 0:\n        return \"%.*f\" % (n, (f - 0.5*10**-n))\n    elif f == 0:\n        return \"%.*f\" % (n, f)\n    elif f &lt; 0:\n        return \"%.*f\" % (n, (f + 0.5*10**-n))\n</code>\n</pre>\n", "senID": 5}], [{"text": ["int(16.5);\nthis will give an integer value of 16, i.e.", "trunc, won't be able to specify decimals, but guess you can do that by "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import math;\n\ndef trunc(invalue, digits):\n    return int(invalue*math.pow(10,digits))/math.pow(10,digits);\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you mean when printing, then the following should work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print '%.3f' % number\n</code>\n</pre>\n", "senID": 1}]]