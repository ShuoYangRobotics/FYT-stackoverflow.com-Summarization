[[{"text": ["For statements, use exec"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "exec", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/simple%5Fstmts.html#grammar-token-exec%5Fstmt"}]}, {"text": ["ie."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mycode = 'print \"hello world\"'\n&gt;&gt;&gt; exec mycode\nHello world\n</code>\n</pre>\n", "senID": 2}, {"text": ["When you need the value of an expression, use eval.", "eg"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "eval", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#eval"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = eval(\"2+2\")\n&gt;&gt;&gt; x\n4\n</code>\n</pre>\n", "senID": 4}, {"text": ["However, the first step should be to ask yourself if you really need to.", "Executing code should generally be the position of last resort: It's slow, ugly and dangerous if it can contain user-entered code.", "You should always look at alternatives first, such as higher order functions, to see if these can better meet your needs."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Use eval."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html"}]}], [{"text": ["In the example a string is executed as code using the exec function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nimport StringIO\n\n# create file-like string to capture output\ncodeOut = StringIO.StringIO()\ncodeErr = StringIO.StringIO()\n\ncode = \"\"\"\ndef f(x):\n    x = x + 1\n    return x\n\nprint 'This is my output.'\n\"\"\"\n\n# capture output and errors\nsys.stdout = codeOut\nsys.stderr = codeErr\n\nexec code\n\n# restore stdout and stderr\nsys.stdout = sys.__stdout__\nsys.stderr = sys.__stderr__\n\nprint f(4)\n\ns = codeErr.getvalue()\n\nprint \"error:\\n%s\\n\" % s\n\ns = codeOut.getvalue()\n\nprint \"output:\\n%s\" % s\n\ncodeOut.close()\ncodeErr.close()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["eval() is just for expressions, while eval('x+1') works, eval('x=1') won't work for example.", "In that case, it's better to use exec, or even better: try to find a better solution :)"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "eval()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "eval('x+1')", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "eval('x=1')", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "exec", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Check out eval:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#eval"}]}, {"code": "<pre>\n<code>\n x = 1\nprint eval('x+1')\n-&gt;2\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The most logical solution would be to use the built-in eval() function .Another solution is to write that string to a temporary python file and execute it. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#eval"}]}], [{"text": ["Just a response to hekevintran's advice.", "I don't think you can redirect stderr/stdout with exec.", "See this page http://docs.python.org/library/sys.html?highlight=stderr#sys.stderr"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/sys.html?highlight=stderr#sys.stderr", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sys.html?highlight=stderr#sys.stderr"}]}, {"text": ["it says \"Changing these objects doesn\u2019t affect the standard I/O streams of processes executed by os.popen(), os.system() or the exec*() family of functions in the os module."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["one approach I am experimenting with is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["try:\n    result=eval(user_input)\nexcept:\n    exec(user_input)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["eval returns a value, but doesn't work for all commands.", "exec works for all, but doesn't return a value.", "Still trying to figure out a way around this"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]