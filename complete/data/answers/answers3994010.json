[[{"text": ["There are ways to do it without a regex, but most of those ways are so convoluted that you'll wish you had spent the time learning the simple regex sequence that you need for it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "are", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["I think what you are trying to do is something more like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n\nwords_in_phrase = string.split(phrase)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now you'll have the words in a list like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['...', 'therefore,', 'I', 'conclude', 'I', 'am', 'awesome.']\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then compare the lists like so:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n indicators_in_phrase = []\nfor word in words_in_phrase:\n  if word in indicators:\n    indicators_in_phrase.append(word)\n</code>\n</pre>\n", "senID": 5}, {"text": ["There's probably several ways to make this less verbose, but I prefer clarity.", "Also, you might have to think about removing punctuation as in \"awesome.", "\" and \"therefore,\""], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["For that use rstrip as in the other answer"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["It is one line with regex..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\nindicators = [\"therefore\", \"for\", \"since\"]\nphrase = \"... therefore, I conclude I am awesome.\"\n\nindicators_in_phrase = set(re.findall(r'\\b(%s)\\b' % '|'.join(indicators), phrase.lower()))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Code:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Code:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n indicators = [\"therefore\", \"for\", \"since\"]\nphrase = \"... therefore, I conclude I am awesome.\"\nprint list(set(indicators).intersection(set( [ each.strip('.,') for each in phrase.split(' ')])))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Cheers:)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The regex are the simplest way!", "Hint:  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.compile(r'\\btherefore\\b')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you can change the word in the middle!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT: I wrote this for you:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import re\n\nindicators = [\"therefore\", \"for\", \"since\"]\n\nphrase = \"... therefore, I conclude I am awesome. \"\n\ndef find(phrase, indicators):\n    def _match(i):\n        return re.compile(r'\\b%s\\b' % (i)).search(phrase)\n    return [ind for ind in indicators if _match(ind)]\n\n&gt;&gt;&gt; find(phrase, indicators)\n['therefore']\n</code>\n</pre>\n", "senID": 4}], [{"text": ["A little lengthy but gives an idea / of course regex is there to make it simple"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; indicators = [\"therefore\", \"for\", \"since\"]\n&gt;&gt;&gt; phrase = \"... therefore, I conclude I am awesome.\"\n&gt;&gt;&gt; phrase_list = phrase.split()\n&gt;&gt;&gt; phrase_list\n['...', 'therefore,', 'I', 'conclude', 'I', 'am', 'awesome.']\n&gt;&gt;&gt; phrase_list = [ k.rstrip(',') for k in phrase_list]\n&gt;&gt;&gt; indicators_in_phrase = [indicator for indicator in indicators if indicator in phrase_list]\n&gt;&gt;&gt; indicators_in_phrase \n['therefore']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Is the problem with \"for\" that it's inside \"therefore\" or that it's not a word?", "For example, if one of your indicators was \"awe\", would you want it to be included in indicators_in_phrase?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["How would you want the following situation to be handled?", "indicators = [\"abc\", \"cde\"]\nphrase = \"One abcde two\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can strip off punctuations from your phrase, then do split on it so that all words are individual.", "Then you can do your string comparison"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; indicators = [\"therefore\", \"for\", \"since\"]\n&gt;&gt;&gt; phrase = \"... therefore, I conclude I am awesome.\"\n&gt;&gt;&gt; ''.join([ i for i in phrase.lower() if i not in string.punctuation]).strip().split()\n['therefore', 'I', 'conclude', 'I', 'am', 'awesome']\n&gt;&gt;&gt; p = ''.join([ i for i in phrase.lower() if i not in string.punctuation]).strip().split()\n&gt;&gt;&gt; indicators_in_phrase = [indicator for indicator in indicators if indicator in p ]\n&gt;&gt;&gt; indicators_in_phrase\n['therefore']\n</code>\n</pre>\n", "senID": 1}]]