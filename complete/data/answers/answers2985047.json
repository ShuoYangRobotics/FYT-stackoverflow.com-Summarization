[[{"text": ["Python is executed from top to bottom, but executing a \"def\" block doesn't immediately execute the contained code.", "Instead it creates a function object with the given name in the current scope.", "Consider a Python file much like your example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def func2():\n    print \"func2\"\n\ndef func1():\n    func2()\n\ndef func():\n    func1()\n\nif __name__ == '__main__':\n    func()\n</code>\n</pre>\n", "senID": 1}, {"text": ["What happens when this script is executed is as follows:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Firstly, a function object is created and bound to the name \"func2\" in the global scope.", "Then a function object is created and bound to the name \"func1\" in the global scope.", "Then one called \"func\".", "Then the \"if\" statement is executed, the condition is true and the \"func()\" statement is executed.", "At this point \"func\" is a function object found in the global scope, so it is invoked and its code runs.", "That code contains the \"func1()\" statement, which is resolved to a call to the \"func1\" function, and so on."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you put the \"if\" statement at the top then when it executes there would not yet be anything defined with the name \"func\", so you would get an error.", "The important thing to recognise is that the \"def\" statement is itself a statement that is executed.", "It is not like in some other languages where definitions are a separate sort of declaration with no order of execution."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Also note that so long as the \"if __name__...\" bit is at the end of the file, it doesn't really matter what order the other declarations are in, since by the time any of them are called all of the \"def\"s will have already been executed."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "if __name__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Python does, in general, process commands from top to bottom.", "However, a function call will cause Python to execute that function, and continue downward only after that call has ended."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In your example, the Python interpreter executes the following steps:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The if __name__ == \"__main__\" part goes at the end, because presumably whatever your main function does will need all the other definitions in the script.", "If there were any other function definitions below the main block, then it would not be possible for them to be used in there, since they haven't been seen by the interpreter at that point."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "if __name__ == \"__main__\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "below", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}], [{"text": ["functions definitions are not executed when the program is read.", "In your program the first executable instruction is the if statement\nTry for example, writing \"print 'hello\" at the top of your program: It will be executed first"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["def statements simply define a function - they don't actually run it until the function is invoked.", "Hence why they generally come before whatever code uses them - they set the function up to be used in the future."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "def", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["There's no hard requirement that def statements come before anything else, it's just fairly common to put the __main__ code at the bottom (among other things, it makes it clear what's in that section and what isn't, since anything below the if is part of that section).", "It also makes sure whatever you want to call from the section has already been def'd."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "def", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__main__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "def", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["It's true that the convention is to put the \"main\" function just above the \"if __name__ == '__main__'\" statement at the end of the file.", "I think that this is because we usually want functions to be near to their calling sites."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "if __name__ == '__main__'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["As for the called function coming above the calling function, I think that this is just a result of refactoring.", "At least in my case, I tend to write a function, and then take out bits of code to put into sub-functions, which I put on top so that I can see better."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This is just a primitive form of code organization.", "If there's a stronger cohesive unit, I'd be tempted to pull those functions into their own module."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The defs are just creating the functions.", "No code is executed, other than to parse the syntax and tie functions to those names."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "def", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The if is the first place code is actually executed.", "If you put it first, and call a function before it is defined, the result is a NameError.", "Therefore, you need to put it after the functions are defined."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Note that this is unlike PHP or JavaScript, where functions are 'hoisted' - any function definitions are processed and parsed before everything else.", "In PHP and JavaScript, it's perfectly legal to do what you are saying and define functions in the source lower down than where they are called.", "(One detail in JS is that functions defined like function(){} are hoisted, while functions defined like var func1=function(){}; are not.", "I don't know how it works with anonymous functions in PHP 5.3 yet)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "function(){}", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "var func1=function(){};", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["See, in this, cat() will print correctly, and yip() gives you a NameError because the parser hasn't gotten to the definition of yip() at the time you call it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def cat():\n  print 'meowin, yo'\n\ncat()\n\nyip()\n\ndef yip():\n  print 'barkin, yall'\n</code>\n</pre>\n", "senID": 4}], [{"text": ["For the second part of your question (Style of coding in Python), I would take a look at PEP 8, which provides a style guide written by Guido van Rossum (the BFDL himself!", ") and provides the basics of writing Pythonic code."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}]]