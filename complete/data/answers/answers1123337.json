[[{"text": ["You can also rely on django code already written ;)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.forms.models import model_to_dict\nmodel_to_dict(intance, fields=[], exclude=[])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Regards\nArthur"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You want the in_bulk queryset method which, according to the docs:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "in_bulk", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It takes a list of IDs, so you'll need to get that first via the values_list method:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "values_list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ids = MyModel.objects.values_list('id', flat=True)\nmodel_dict = MyModel.objects.in_bulk(ids)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You are looking for the Values member of QuerySet which allows you to get a list of dictionaries from your query"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Values member of QuerySet", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/models/querysets/#values-fields"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; Blog.objects.values()\n[{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}],\n&gt;&gt;&gt; Blog.objects.values('id', 'name')\n[{'id': 1, 'name': 'Beatles Blog'}]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["use "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict(((m.key, m.value) for m in DictModel.objects.all())\n</code>\n</pre>\n", "senID": 1}, {"text": ["As suggested by Tom Leys, we do not need to get whole object, we can get only those values we need e.g."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n dict(((m['key'], m['value']) for m in DictModel.objects.values('key', 'value')))\n</code>\n</pre>\n", "senID": 3}, {"text": ["and if you need all values, it is better to keep whole object in dict e.g."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n dict(((m.key, m) for m in DictModel.objects.all())\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Does this need to create an actual dict?", "could you get by with only something that looked like a dict?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class DictModelAdaptor():\n    def __init__(self, model):\n        self.model = model\n\n    def __getitem__(self, key):\n        return self.model.objects.get(key=key)\n\n    def __setitem__(self, key, item):\n        pair = self.model()\n        pair.key = key\n        pair.value = item\n        pair.save()\n\n    def __contains__(self, key):\n        ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["You could then wrap a model in this way:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n modelDict = DictModelAdaptor(DictModel)\nmodelDict[\"name\"] = \"Bob Jones\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["etc..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You can use the python serializer:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "python", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.djangoproject.com/en/dev/topics/serialization", "text": "serializer", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n from django.core import serializers\ndata = serializers.serialize('python', DictModel.objects.all())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["dict((x.name, getattr(o, x.name)) for x in o._meta.fields)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict((x.name, getattr(o, x.name)) for x in o._meta.fields)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Or were you trying to do something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def someview(req):\n    models = MyModel.objects.all()\n    toTuple = lambda field: (getattr(field, 'someatt'), getattr(field, 'someotheratt'))  \n    data = dict(map(toTuple,models))\n    return render_to_response(template, data)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Perhaps I'm missing something, but Django objects have a dict attribute which seems be what you want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]