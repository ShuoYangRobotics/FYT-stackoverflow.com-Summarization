[[{"text": ["I think the XML format can be so diverse that it's impossible to write a code that could do this without a very strict defined XML format.", "Here is what I mean:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &lt;persons&gt;\n\t&lt;person&gt;\n\t\t&lt;name&gt;Koen Bok&lt;/name&gt;\n\t\t&lt;age&gt;26&lt;/age&gt;\n\t&lt;/person&gt;\n\t&lt;person&gt;\n\t\t&lt;name&gt;Plutor Heidepeen&lt;/name&gt;\n\t\t&lt;age&gt;33&lt;/age&gt;\n\t&lt;/person&gt;\n&lt;/persons&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Would become"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n {'persons': [\n\t{'name': 'Koen Bok', 'age': 26},\n\t{'name': 'Plutor Heidepeen', 'age': 33}]\n}\n</code>\n</pre>\n", "senID": 3}, {"text": ["But what would this be:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &lt;persons&gt;\n\t&lt;person name=\"Koen Bok\"&gt;\n\t\t&lt;locations name=\"defaults\"&gt;\n\t\t\t&lt;location long=123 lat=384 /&gt;\n\t\t&lt;/locations&gt;\n\t&lt;/person&gt;\n&lt;/persons&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["See what I mean?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Edit: just found this article: http://www.xml.com/pub/a/2006/05/31/converting-between-xml-and-json.html"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "http://www.xml.com/pub/a/2006/05/31/converting-between-xml-and-json.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.xml.com/pub/a/2006/05/31/converting-between-xml-and-json.html"}]}], [{"text": ["Jacob Smullyan wrote a utility called pesterfish which uses effbot's ElementTree to convert XML to JSON."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "pesterfish", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://bitbucket.org/smulloni/pesterfish"}, {"href": "http://effbot.org/zone/element-index.htm", "text": "ElementTree", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Soviut's advice for lxml objectify is good.", "With a specially subclassed simplejson, you can turn an lxml objectify result into json."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import simplejson as json\nimport lxml\n\nclass objectJSONEncoder(json.JSONEncoder):\n\"\"\"A specialized JSON encoder that can handle simple lxml objectify types\n   &gt;&gt;&gt; from lxml import objectify\n   &gt;&gt;&gt; obj = objectify.fromstring(\"&lt;Book&gt;&lt;price&gt;1.50&lt;/price&gt;&lt;author&gt;W. Shakespeare&lt;/author&gt;&lt;/Book&gt;\")       \n   &gt;&gt;&gt; objectJSONEncoder().encode(obj)\n   '{\"price\": 1.5, \"author\": \"W. Shakespeare\"}'       \n\"\"\"\n def default(self,o):\n    if isinstance(o, lxml.objectify.IntElement):\n        return int(o)\n    if isinstance(o, lxml.objectify.NumberElement) or isinstance(o, lxml.objectify.FloatElement):\n        return float(o)\n    if isinstance(o, lxml.objectify.ObjectifiedDataElement):\n        return str(o)\n    if hasattr(o, '__dict__'):\n        #For objects with a __dict__, return the encoding of the __dict__\n        return o.__dict__\n    return json.JSONEncoder.default(self, o)\n</code>\n</pre>\n", "senID": 1}, {"text": ["See the docstring for usage, essentially you pass the result of lxml objectify to the encode method of an instance of objectJSONEncoder"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Note that Koen's point is very valid here, the solution above only works for simply nested xml and doesn't include the name of root elements.", "This could be fixed."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I've included this class in a gist here: http://gist.github.com/345559"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://gist.github.com/345559", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://gist.github.com/345559"}]}], [{"text": ["One possibility would be to use Objectify or ElementTree from the lxml module.", "An older version ElementTree is also available in the python xml.etree module as well.", "Either of these will get your xml converted to Python objects which you can then use simplejson to serialize the object to JSON."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "lxml module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/objectify.html"}, {"text": "simplejson", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/simplejson/"}]}, {"text": ["While this may seem like a painful intermediate step, it starts making more sense when you're dealing with both XML and normal Python objects."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["In general, you want to go from XML to regular objects of your language (since there are usually reasonable tools to do this, and it's the harder conversion).", "And then from Plain Old Object produce JSON -- there are tools for this, too, and it's a quite simple serialization (since JSON is \"Object Notation\", natural fit for serializing objects).", "I assume Python has its set of tools."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I wrote a small command-line based Python script based on pesterfesh that does exactly this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["https://github.com/hay/xml2json"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "https://github.com/hay/xml2json", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/hay/xml2json"}]}]]