[[{"text": ["As Google Web Toolkit is a subset of Java it works best when you Java at the backend too.", "Since Google App Engine is currently Python only I think you'd have to do a lot of messing about to get your server and client to talk nicely to each other."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "subset of Java", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/support/bin/answer.py?answer=54830&topic=10208"}, {"text": "Python only", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/appengine/kb/general.html#language"}]}, {"text": ["jQuery seems to be the most popular JavaScript library option in the AJAX Tag at DjangoSnippets.com."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "AJAX Tag at DjangoSnippets.com", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangosnippets.org/tags/ajax/?page=1"}]}, {"text": ["Edit: The above is only true of Google App Engine applications written in Python.", "As Google App Engine now supports Java, GWT could now be a good choice for writing an AJAX front end.", "Google even have a tutorial showing you how to do it."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Google even have a tutorial showing you how to do it.", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://code.google.com/webtoolkit/doc/latest/tutorial/appengine.html"}]}], [{"text": ["A nice way is to use an AJAX library is to take advantage of Google's AJAX Libraries API service.", "This is a bit faster and cleaner than downloading the JS and putting it in your /static/ folder and doesn't eat into your disk quota."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Google's AJAX Libraries API service", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/apis/ajaxlibs/"}, {"text": "/static/", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["In your javascript you would just put, for example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n google.load(\"jquery\", \"1.3.2\");\n</code>\n</pre>\n", "senID": 2}, {"text": ["and/or"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n google.load(google.load(\"dojo\", \"1.3.0\");\n</code>\n</pre>\n", "senID": 4}, {"text": ["Somewhere in your header you would put something like:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &lt;script src=\"http://www.google.com/jsapi?key=your-key-here\"&gt;&lt;/script&gt;\n</code>\n</pre>\n", "senID": 6}, {"text": ["And that's all you need to use Google's API libraries."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["There is no reason why you shouldn't use GAE and Google Web Toolkit (GWT) together.", "You write your backend code in Python and the frontend code in Java (and possibly some JavaScript), which is then compiled to JavaScript.", "When using another AJAX framework you will also have this difference between server and client side language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["GWT has features that make remote invocation of java code on the server easier, but these are entirely optional.", "You can just use JSON or XML interfaces, just like with other AJAX frameworks."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["GWT 1.5 also comes with JavaScript Overlay Types, that basically allow you to treat a piece of JSON data like a Java object when developing the client side code.", "You can read more about this here."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://googlewebtoolkit.blogspot.com/2008/08/getting-to-really-know-gwt-part-2.html"}]}, {"text": ["Update:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Now that Google has added Java support for Google App Engine, you can develop both backend and frontend code in Java on a full Google stack - if you like.", "There is a nice Eclipse plugin from Google that makes it very easy to develop and deploy applications that use GAE, GWT or both."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Eclipse plugin", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/eclipse/"}]}], [{"text": ["I'd recommend looking into a pure javascript framework (probably Jquery) for your client-side code, and write JSON services in python- that seems to be the easiest / bestest way to go."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Google Web Toolkit lets you write the UI in Java and compile it to javascript.", "As Dave says, it may be a better choice where the backend is in Java, as it has nice RPC hooks for that case."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Here is how we've implemented Ajax on the Google App Engine, but the idea can be generalized to other platforms."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["We have a handler script for Ajax requests that responds -mostly- with JSON responses.", "The structure looks something like this (this is an excerpt from a standard GAE handler script):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def Get(self, user):\n    self.handleRequest()\n\ndef Post(self, user):\n    self.handleRequest()\n\n\ndef handleRequest(self):        \n    '''\n    A dictionary that maps an operation name to a command.\n    aka: a dispatcher map.\n    '''\n    operationMap = {'getfriends':               [GetFriendsCommand],\n                    'requestfriend':            [RequestFriendCommand, [self.request.get('id')]],\n                    'confirmfriend':            [ConfirmFriendCommand, [self.request.get('id')]],\n                    'ignorefriendrequest':      [IgnoreFriendRequestCommand, [self.request.get('id')]],\n                    'deletefriend':             [DeleteFriendCommand, [self.request.get('id')]]}\n\n    # Delegate the request to the matching command class here.\n</code>\n</pre>\n", "senID": 2}, {"text": ["The commands are a simple implementation of the command pattern:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Command():\n    \"\"\" A simple command pattern.\n    \"\"\"\n    _valid = False\n    def validate(self):\n        \"\"\" Validates input. Sanitize user input here.\n        \"\"\"\n        self._valid = True\n\n    def _do_execute(self):\n        \"\"\" Executes the command. \n            Override this in subclasses.\n        \"\"\"\n        pass\n\n    @property\n    def valid(self):\n        return self._valid\n\n    def execute(self):\n        \"\"\" Override _do_execute rather than this.\n        \"\"\" \n        try:\n            self.validate()\n        except:\n            raise\n        return self._do_execute()\n\n    # Make it easy to invoke commands:\n    # So command() is equivalent to command.execute()\n    __call__ = execute\n</code>\n</pre>\n", "senID": 4}, {"text": ["On the client side, we create an Ajax delegate.", "Prototype.js makes this easy to write and understand.", "Here is an excerpt:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n /** \n * Ajax API\n *\n * You should create a new instance for every call.\n */\nvar AjaxAPI = Class.create({\n    /* Service URL */\n    url: HOME_PATH+\"ajax/\",\n\n    /* Function to call on results */\n    resultCallback: null,\n\n    /* Function to call on faults. Implementation not shown */\n    faultCallback: null,\n\n    /* Constructor/Initializer */\n    initialize: function(resultCallback, faultCallback){\n        this.resultCallback = resultCallback;\n        this.faultCallback = faultCallback;\n    },\n\n    requestFriend: function(friendId){\n        return new Ajax.Request(this.url + '?op=requestFriend', \n        {method: 'post',\n         parameters: {'id': friendId},\n         onComplete: this.resultCallback\n        });     \n    },\n\n    getFriends: function(){\n        return new Ajax.Request(this.url + '?op=getfriends', \n        {method: 'get',\n         onComplete: this.resultCallback\n        });    \n    }\n\n});\n</code>\n</pre>\n", "senID": 6}, {"text": ["to call the delegate, you do something like:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n new AjaxApi(resultHandlerFunction, faultHandlerFunction).getFriends()\n</code>\n</pre>\n", "senID": 8}, {"text": ["I hope this helps!"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["In my blog I deal with an easy way to do this - the link is: AJAX with Google App Engine.", "I include all the javascript and python code I used."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "AJAX with Google App Engine", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pythoughts.com/ajax-with-google-app-engine"}]}], [{"text": ["You may want to have a look at Pyjamas (http://pyjs.org/), which is \"GWT for Python\". "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pyjs.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyjs.org/"}]}], [{"text": ["try also GQuery for GWT.", "This is Java code:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "GQuery for GWT", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ajaxian.com/archives/gquery-java-gwt-and-jquery-together"}]}, {"code": "<pre>\n<code>\n public void onModuleLoad() { \n    $(\"div\").css(\"color\", \"red\").click(new Function() { \n        public void f(Element e) { \n            Window.alert(\"Hello\"); \n            $(e).as(Effects).fadeOut(); \n        } \n    }); \n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Being Java code resulting in somewhat expensive compile-time (Java->JavaScript) optimizations and easier refactoring.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Nice, it isn't?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["jQuery is a fine library, but also check out the Prototype JavaScript framework.", "It really turns JavaScript from being an occasionally awkward language into a beautiful and elegant language."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Prototype JavaScript framework", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.prototypejs.org/"}]}], [{"text": ["Thanks Dave."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Ah, I suppose that this rules out the potential of using Google Web Toolkit as the AJAX framework for GAE.", "Too bad!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Is there any other framework?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you want to be able to invoke method calls from JavaScript to Python, JSON-RPC works well with Google App Engine.", "See Google's article, \"Using AJAX to Enable Client RPC Requests\", for details."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "JSON-RPC", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://json-rpc.org/wiki/python-json-rpc"}, {"text": "Using AJAX to Enable Client RPC Requests", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/appengine/articles/rpc.html"}]}], [{"text": ["I'm currently using JQuery for my GAE app and it works beautifully for me.", "I have a chart (google charts) that is dynamic and uses an Ajax call to grab a JSON string.", "It really seems to work fine for me."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Google has recently announced the Java version of Google App Engine.", "This release also provides an Eclipse plugin that makes developing GAE applications with GWT easier."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See details here: http://code.google.com/appengine/docs/java/overview.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/appengine/docs/java/overview.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/appengine/docs/java/overview.html"}]}, {"text": ["Of course, it would require you to rewrite your application in Java instead of python, but as someone who's worked with GWT, let me tell you, the advantages of using a modern IDE on your AJAX codebase are totally worth it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]