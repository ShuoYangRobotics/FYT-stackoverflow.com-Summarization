[[{"text": ["Another simple option is removing the innermost parentheses at every stage, until there are no more parentheses:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n p = re.compile(\"\\([^()]*\\)\")\ncount = 1\nwhile count:\n    s, count = p.subn(\"\", s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Working example: http://ideone.com/WicDK"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://ideone.com/WicDK", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ideone.com/WicDK"}]}], [{"text": ["You can just use string manipulation without regular expression"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"AX(p&gt;q)&amp;E(qUr)\"\n&gt;&gt;&gt; [ i.split(\"(\")[0] for i in s.split(\")\") ]\n['AX', '&amp;E', '']\n</code>\n</pre>\n", "senID": 1}, {"text": ["I leave it to you to join the strings up."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; s = \"AX(p&gt;q)&amp;E(qUr)\"\n&gt;&gt;&gt; re.compile(\"\"\"\\([^\\)]*\\)\"\"\").sub('', s)\n'AX&amp;E'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Yeah, it should be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; s = \"AX(p&gt;q)&amp;E(qUr)\"\n&gt;&gt;&gt; p = re.compile(\"\\(.*?\\)\", re.DOTALL)\n&gt;&gt;&gt; new_string = p.sub(\"\", s)\n&gt;&gt;&gt; new_string\n'AX&amp;E'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use PyParsing to parse the string:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyParsing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyparsing.wikispaces.com/"}]}, {"code": "<pre>\n<code>\n from pyparsing import nestedExpr\nimport sys\n\ns = \"AX(p&gt;q)&amp;E((-p)Ur)\"\nexpr = nestedExpr('(', ')')\nresult = expr.parseString('(' + s + ')').asList()[0]\ns = ''.join(filter(lambda x: isinstance(x, str), result))\nprint(s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Most code is from: How can be implemented recursive regexp in python? "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "How can be implemented recursive regexp in python?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1656859/how-can-be-implemented-recursive-regexp-in-python"}]}], [{"text": ["Nested brackets (or tags, ...) are something that are not possible to handle in a general way using regex.", "See http://www.amazon.de/Mastering-Regular-Expressions-Jeffrey-Friedl/dp/0596528124/ref=sr_1_1?ie=UTF8&amp;s=gateway&amp;qid=1304230523&amp;sr=8-1-spell for details why.", "You would need a real parser."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.amazon.de/Mastering-Regular-Expressions-Jeffrey-Friedl/dp/0596528124/ref=sr_1_1?ie=UTF8&amp;s=gateway&amp;qid=1304230523&amp;sr=8-1-spell", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0596528124"}]}, {"text": ["It's possible to construct a regex which can handle two levels of nesting, but they are already ugly, three levels will already be quite long.", "And you don't want to think about four levels.", ";-)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You could use re.subn():"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "re.subn()", "tag": "a", "pos": 0, "childList": [{"text": "re.subn()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/re.html#re.subn"}, {"text": "re.subn()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import re\n\ns = 'AX(p&gt;q)&amp;E((-p)Ur)'\nwhile True:\n    s, n = re.subn(r'\\([^)(]*\\)', '', s)\n    if n == 0:\n        break\nprint(s)\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n AX&amp;E\n</code>\n</pre>\n", "senID": 2}]]