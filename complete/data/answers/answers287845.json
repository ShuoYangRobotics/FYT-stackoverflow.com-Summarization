[[{"text": ["The simple answer is to put your reusable code in your site-packages directory, which is in your sys.path."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can also extend the search path by adding .pth files somewhere in your path.", "See http://www.python.org/doc/2.5.2/inst/search-path.html#search-path for more details"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.python.org/doc/2.5.2/inst/search-path.html#search-path", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/inst/search-path.html#search-path"}]}, {"text": ["Oh, and python 2.6/3.0 adds support for PEP370, Per-user site-packages Directory"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Per-user site-packages Directory", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/whatsnew/2.6.html#pep-370-per-user-site-packages-directory"}]}], [{"text": ["If your reusable files are packaged (that is, they include an __init__.py file) and the path to that package is part of your PYTHONPATH or sys.path then you should be able to do just"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import Foo\n</code>\n</pre>\n", "senID": 1}, {"text": ["This question provides a few more details."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "This question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/279237/python-import-a-module-from-a-folder#279287"}]}, {"text": ["(Note: As Jim said, you could also drop your reusable code into your site-packages directory."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "site-packages", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You can put the reusable stuff in site-packages.", "That's completely transparent, since it's in sys.path by default."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "site-packages", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sys.path", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You can put someName.pth files in site-packages.", "These files have the directory in which your actual reusable stuff lives.", "This is also completely transparent.", "And doesn't involve the extra step of installing a change in site-packages."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "someName.pth", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "site-packages", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "site-packages", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can put the directory of the reusable stuff on PYTHONPATH.", "That's a little less transparent, because you have to make sure it's set.", "Not rocket science, but not completely transparent."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "PYTHONPATH", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["In one project, I wanted to make sure that the user could put python scripts (that could basically be used as plugins) anywhere.", "My solution was to put the following in the config file for that project:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [server]\nPYPATH_APPEND: /home/jason:/usr/share/some_directory\n</code>\n</pre>\n", "senID": 1}, {"text": ["That way, this would add /home/jason and /usr/share/some_directory to the python path at program launch."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Then, it's just a simple matter of splitting the string by the colons and adding those directories to the end of the sys.path.", "You may want to consider putting a module in the site-packages directory that contains a function to read in that config file and add those directories to the sys.path (unfortunately, I don't have time at the moment to write an example)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["As others have mentioned, it's a good idea to put as much in site-packages as possible and also using .pth files.", "But this can be a good idea if you have a script that needs to import a bunch of stuff that's not in site-packages that you wouldn't want to import from other scripts."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["(there may also be a way to do this using .pth files, but I like being able to manipulate the python path in the same place as I put the rest of my configuration info)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["The simplest way is to set (or add to) PYTHONPATH, and put (or symlink) your modules and packages into a path contained in PYTHONPATH."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["My solution was to package up one utility that would import the module:\nmy_util is in site packages"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import my_util\n\nfoo = myutil.import_script('..//shared1//reusable_foo')\nif foo == None:\n    sys.exit(1)\n\n\ndef import_script(script_path, log_status = True):\n    \"\"\"\n    imports a module and returns the handle\n    \"\"\"\n    lpath = os.path.split(script_path)\n\n    if lpath[1] == '':\n        log('Error in script \"%s\" in import_script' % (script_path))\n        return None\n\n\n    #check if path is already in sys.path so we don't repeat\n    npath = None\n    if lpath[0] == '':\n        npath = '.'\n    else:\n        if lpath[0] not in sys.path:\n            npath = lpath[0]\n\n    if npath != None:\n        try:\n            sys.path.append(npath)\n        except:\n            if log_status == True:\n                log('Error adding path \"%s\" in import_script' % npath)\n            return None\n\n    try:   \n        mod =  __import__(lpath[1])\n    except:\n        error_trace,error_reason =  FormatExceptionInfo()\n        if log_status == True:\n            log('Error importing \"%s\" module in import_script: %s' % (script_path, error_trace + error_reason))\n        sys.path.remove(npath)\n        return None\n\n    return mod\n</code>\n</pre>\n", "senID": 1}]]