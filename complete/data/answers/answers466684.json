[[{"text": ["Regarding cross-platform: your best bet is probably to write platform-specific code, and then import it conditionally.", "e.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nif sys.platform == 'win32':\n  import win32_sysinfo as sysinfo\nelif sys.platform == 'darwin':\n  import mac_sysinfo as sysinfo\nelif 'linux' in sys.platform:\n  import linux_sysinfo as sysinfo\n#etc\n\nprint 'Memory available:', sysinfo.memory_available()\n</code>\n</pre>\n", "senID": 1}, {"text": ["For specific resources, as Anthony points out you can access /proc under linux.", "For Windows, you could have a poke around at the Microsoft Script Repository.", "I'm not sure where to get that kind of information on Macs, but I can think of a great website where you could ask :-)"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "/proc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Microsoft Script Repository", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.microsoft.com/technet/scriptcenter/scripts/python/default.mspx?mfr=true"}]}], [{"text": ["In a Linux environment you could read from the /proc file system."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ~$ cat /proc/meminfo\nMemTotal:      2076816 kB\nMemFree:        130284 kB\nBuffers:        192664 kB\nCached:        1482760 kB\nSwapCached:          0 kB\nActive:         206584 kB\nInactive:      1528608 kB\nHighTotal:     1179484 kB\nHighFree:       120768 kB\nLowTotal:       897332 kB\nLowFree:          9516 kB\nSwapTotal:     2650684 kB\nSwapFree:      2650632 kB\nDirty:              64 kB\nWriteback:          12 kB\nAnonPages:       59668 kB\nMapped:          22008 kB\nSlab:           200744 kB\nPageTables:       1220 kB\nNFS_Unstable:        0 kB\nBounce:              0 kB\nCommitLimit:   3689092 kB\nCommitted_AS:   263892 kB\nVmallocTotal:   114680 kB\nVmallocUsed:      3604 kB\nVmallocChunk:   110752 kB\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It looks like you want to get a lot more information than the standard Python library offers.", "If I were you, I would download the source code for 'ps' or 'top', or the Gnome/KDE version of the same, or any number of system monitoring/graphing programs which are more likely to have all the necessary Unix cross platform bits, see what they do, and then make the necessary native calls with ctypes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's trivial to detect the platform.", "For example with ctypes you might try to load libc.so, if that throws an exception try to load 'msvcrt.dll' and so on.", "Not to mention simply checking the operating system's name with os.name.", "Then just delegate calls to your new cross-platform API to the appropriate platform-specific (sorry) implementation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["When you're done, don't forget to upload the resulting package to pypi."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I recommend the platform module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://doc.astro-wise.org/platform.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://doc.astro-wise.org/platform.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://doc.astro-wise.org/platform.html"}]}, {"text": ["http://docs.python.org/library/platform.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/library/platform.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/platform.html"}]}, {"text": ["http://www.doughellmann.com/PyMOTW/platform/index.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://www.doughellmann.com/PyMOTW/platform/index.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.doughellmann.com/PyMOTW/platform/index.html"}]}], [{"text": ["take a look to the os module..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/os.html"}]}], [{"text": ["Yes - the OS package is the way to go but it doesn't give you everything you are looking for."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There's an example here."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.wellho.net/resources/ex.php4?item=y115/get_os.py"}]}], [{"text": ["There's the PSI (Python System Information) project with that aim, but they don't cover Windows yet."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PSI", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.psychofx.com/psi/"}]}, {"text": ["You can probably use PSI and recpies like this one and create a basic library that meets your needs."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "like this one", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/511491/"}]}]]