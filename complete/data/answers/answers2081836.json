[[{"text": ["If the file to read is big, and you don't want to read the whole file in memory at once:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fp = open(\"file\")\nfor i, line in enumerate(fp):\n    if i == 25:\n        # 26th line\n    elif i == 29:\n        # 30th line\n    elif i &gt; 29:\n        break\nfp.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that i == n-1 for the nth line."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "i == n-1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "n", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The quick answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f=open('filename')\nlines=f.readlines()\nprint lines[26]\nprint lines[30]\n</code>\n</pre>\n", "senID": 1}, {"text": ["or:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n lines=[26,30]\ni=0\nf=open('filename')\nfor line in f:\n    if i in lines:\n        print i\n        i+=1\n</code>\n</pre>\n", "senID": 3}, {"text": ["There is a more elegant solution for extracting many lines: linecache (courtesy of \"python: how to jump to a particular line in a huge text file?", "\", a previous stackoverflow.com question)."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "linecache", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/linecache.html"}, {"text": "\"python: how to jump to a particular line in a huge text file?\"", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/620367/python-how-to-jump-to-a-particular-line-in-a-huge-text-file"}]}, {"text": ["Quoting the python documentation linked above:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import linecache\n&gt;&gt;&gt; linecache.getline('/etc/passwd', 4)\n'sys:x:3:3:sys:/dev:/bin/sh\\n'\n</code>\n</pre>\n", "senID": 6}, {"text": ["Change the 4 to your desired line number, and you're on.", "Note that 4 would bring the fifth line as the count is zero-based."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "4", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If the file might be very large, and cause problems when read into memory, it might be a good idea to take @Alok's advice and use enumerate()."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "@Alok's advice and use enumerate()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2081836/reading-specific-lines-only-python/2081880#2081880"}]}, {"text": ["To Conclude:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "To Conclude:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "Use ", "tag": "none", "senID": 10}, {"text": "Use ", "tag": "none", "senID": 11}, {"text": "Take ", "tag": "none", "senID": 12}]}], [{"text": ["A fast and compact approach could be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def picklines(thefile, whatlines):\n  return [x for i, x in enumerate(thefile) if i in whatlines]\n</code>\n</pre>\n", "senID": 1}, {"text": ["this accepts any open file-like object thefile (leaving up to the caller whether it should be opened from a disk file, or via e.g a socket, or other file-like stream) and a set of zero-based line indices whatlines, and returns a list, with low memory footprint and reasonable speed.", "If the number of lines to be returned is huge, you might prefer a generator:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "thefile", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "whatlines", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def yieldlines(thefile, whatlines):\n  return (x for i, x in enumerate(thefile) if i in whatlines)\n</code>\n</pre>\n", "senID": 3}, {"text": ["which is basically only good for looping upon -- note that the only difference comes from using rounded rather than square parentheses in the return statement, making a list comprehension and a generator expression respectively."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "return", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Further note that despite the mention of \"lines\" and \"file\" these functions are much, much more general -- they'll work on any iterable, be it an open file or any other, returning a list (or generator) of items based on their progressive item-numbers.", "So, I'd suggest using more appropriately general names;-)."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "much", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "any", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}], [{"text": ["if you want line 7"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nline = open(\"file.txt\", \"r\").readlines()[7]\n</pre>\n", "senID": 1}], [{"text": ["How about this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; with open('a', 'r') as fin: lines = fin.readlines()\n&gt;&gt;&gt; for i, line in enumerate(lines):\n      if i &gt; 30: break\n      if i == 26: dox()\n      if i == 30: doy()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you don't mind importing then fileinput does exactly what you need (this is you can read the line number of the current line)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "fileinput", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pydoc.org/2.5.1/fileinput.html"}]}], [{"code": "<pre>\n<code>\n def getitems(iterable, items):\n  items = list(items) # get a list from any iterable and make our own copy\n                      # since we modify it\n  if items:\n    items.sort()\n    for n, v in enumerate(iterable):\n      if n == items[0]:\n        yield v\n        items.pop(0)\n        if not items:\n          break\n\nprint list(getitems(open(\"/usr/share/dict/words\"), [25, 29]))\n# ['Abelson\\n', 'Abernathy\\n']\n# note that index 25 is the 26th item\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here's my little 2 cents, for what it's worth ;)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def indexLines(filename, lines=[2,4,6,8,10,12,3,5,7,1]):\n    fp   = open(filename, \"r\")\n    src  = fp.readlines()\n    data = [(index, line) for index, line in enumerate(src) if index in lines]\n    fp.close()\n    return data\n\n\n# Usage below\nfilename = \"C:\\\\Your\\\\Path\\\\And\\\\Filename.txt\"\nfor line in indexLines(filename): # using default list, specify your own list of lines otherwise\n    print \"Line: %s\\nData: %s\\n\" % (line[0], line[1])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["File objects have a .readlines() method which will give you a list of the contents of the file, one line per list item.", "After that, you can just use normal list slicing techniques."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/stdtypes.html#file.readlines"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#file.readlines", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#file.readlines"}]}], [{"text": ["You can do a seek() call which positions your read head to a specified byte within the file.", "This won't help you unless you know exactly how many bytes (characters) are written in the file before the line you want to read.", "Perhaps your file is strictly formatted (each line is X number of bytes?", ") or, you could count the number of characters yourself (remember to include invisible characters like line breaks) if you really want the speed boost. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "seek()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/inputoutput.html"}]}, {"text": ["Otherwise, you do have to read every line prior to the line you desire, as per one of the many solutions already proposed here."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n f = open(filename, 'r')\ntotalLines = len(f.readlines())\nf.close()\nf = open(filename, 'r')\n\nlineno = 1\nwhile lineno &lt; totalLines:\n    line = f.readline()\n\n    if lineno == 26:\n        doLine26Commmand(line)\n\n    elif lineno == 30:\n        doLine30Commmand(line)\n\n    lineno += 1\nf.close()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I prefer this approach because it's more general-purpose, i.e.", "you can use it on a file, on the result of f.readlines(), on a StringIO object, whatever:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "f.readlines()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "StringIO", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def read_specific_lines(file, lines_to_read):\n   \"\"\"file is any iterable; lines_to_read is an iterable containing int values\"\"\"\n   lines = set(lines_to_read)\n   last = max(lines)\n   for n, line in enumerate(file):\n      if n + 1 in lines:\n          yield line\n      if n + 1 &gt; last:\n          return\n\n&gt;&gt;&gt; with open(r'c:\\temp\\words.txt') as f:\n        [s for s in read_specific_lines(f, [1, 2, 3, 1000])]\n['A\\n', 'a\\n', 'aa\\n', 'accordant\\n']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["@OP, you can use enumerate"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for n,line in enumerate(open(\"file\")):\n    if n+1 in [26,30]: # or n in [25,29] \n       print line.rstrip()\n</code>\n</pre>\n", "senID": 1}]]