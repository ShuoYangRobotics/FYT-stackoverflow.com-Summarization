[[{"text": ["In terms of speed, it's no competition for empty lists/dicts:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; timeit(\"[]\")\n0.040084982867934334\n&gt;&gt;&gt; timeit(\"list()\")\n0.17704233359267718\n&gt;&gt;&gt; timeit(\"{}\")\n0.033620194745424214\n&gt;&gt;&gt; timeit(\"dict()\")\n0.1821558326547077\n</code>\n</pre>\n", "senID": 1}, {"text": ["and for non-empty:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit(\"[1,2,3]\")\n0.24316302770330367\n&gt;&gt;&gt; timeit(\"list((1,2,3))\")\n0.44744206316727286\n&gt;&gt;&gt; timeit(\"list(foo)\", setup=\"foo=(1,2,3)\")\n0.446036018543964\n&gt;&gt;&gt; timeit(\"{'a':1, 'b':2, 'c':3}\")\n0.20868602015059423\n&gt;&gt;&gt; timeit(\"dict(a=1, b=2, c=3)\")\n0.47635635255323905\n&gt;&gt;&gt; timeit(\"dict(bar)\", setup=\"bar=[('a', 1), ('b', 2), ('c', 3)]\")\n0.9028228448029267\n</code>\n</pre>\n", "senID": 3}, {"text": ["Also, using the bracket notation let's you use list and dictionary comprehensions, which may be reason enough."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The dict literal might be a tiny bit faster as its bytecode is shorter:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "tiny", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n In [1]: import dis\nIn [2]: a = lambda: {}\nIn [3]: b = lambda: dict()\n\nIn [4]: dis.dis(a)\n  1           0 BUILD_MAP                0\n              3 RETURN_VALUE\n\nIn [5]: dis.dis(b)\n  1           0 LOAD_GLOBAL              0 (dict)\n              3 CALL_FUNCTION            0\n              6 RETURN_VALUE\n</code>\n</pre>\n", "senID": 1}, {"text": ["Same applies to the list vs []"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["In my opinion [] and {} are the most pythonic and readable ways to create empty lists/dicts."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "[]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "{}", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Be wary of set()'s though, for example:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "set()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n this_set = {5}\nsome_other_set = {}\n</code>\n</pre>\n", "senID": 2}, {"text": ["Can be confusing.", "The first creates a set with one element, the second creates an empty dict and not a set."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}], [{"text": ["As it is not mentioned in the Python Style Guide you can use whatever style you want, it's a matter of personal taste."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Style Guide", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["IMHO, using list() and dict() makes your Python look like C.  Ugh."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "list()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["It's mainly a matter of choice most of the time.", "It's a matter of preference."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Note however that if you have numeric keys for example, that you can't do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n mydict = dict(1=\"foo\", 2=\"bar\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["You have to do:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n mydict = {\"1\":\"foo\", \"2\":\"bar\"}\n</code>\n</pre>\n", "senID": 4}]]