[[{"text": ["Try the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.sub(r\"([a-z\\.!?])([A-Z])\", r\"\\1 \\2\", your_string)\n</code>\n</pre>\n", "senID": 1}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import re\nlines = \"I like bananasAnd this is a new line.And another one.\"\nprint re.sub(r\"([a-z\\.!?])([A-Z])\", r\"\\1 \\2\", lines)\n# I like bananas And this is a new line. And another one.\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want to insert a newline instead of a space, change the replacement to r\"\\1\\n\\2\"."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "r\"\\1\\n\\2\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Using re.sub you should be able to make a pattern that grabs a lowercase and uppercase letter and substitutes them for the same two letters, but with a space in between:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re.sub", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import re\nre.sub(r'([a-z][.?]?)([A-Z])', '\\\\1\\n\\\\2', mystring)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You're looking for the sub function.", "See http://docs.python.org/library/re.html for documentation."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "sub", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "http://docs.python.org/library/re.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}], [{"text": ["Hmm, interesting.", "You can use regular expressions to replace text with the sub()function:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "sub()function", "tag": "a", "pos": 1, "childList": [{"text": "sub()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/re.html#re.sub"}, {"text": "sub()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; string = 'fooBar'\n&gt;&gt;&gt; re.sub(r'([a-z][.!?]*)([A-Z])', r'\\1 \\2', string)\n'foo Bar'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you really don't have any caps except at the beginning of a sentence, it will probably be easiest to just loop through the string."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; s = \"a word endsA new sentence\"\n&gt;&gt;&gt; lastend = 0\n&gt;&gt;&gt; sentences = list()\n&gt;&gt;&gt; for i in range(0, len(s)):\n...    if s[i] in string.uppercase:\n...        sentences.append(s[lastend:i])\n...        lastend = i\n&gt;&gt;&gt; sentences.append(s[lastend:])\n&gt;&gt;&gt; print sentences\n['a word ends', 'A new sentence']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's another approach, which avoids regular expressions and does not use any imported libraries, just built-ins..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = \"I like bananasAnd this is a new line.And another one.\"\nwith_whitespace = ''\nlast_was_upper = True\nfor c in s:\n    if c.isupper():\n        if not last_was_upper:\n            with_whitespace += ' '\n        last_was_upper = True\n    else:\n        last_was_upper = False\n    with_whitespace += c\n\nprint with_whitespace\n</code>\n</pre>\n", "senID": 1}, {"text": ["Yields:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n I like bananas And this is a new line. And another one.\n</code>\n</pre>\n", "senID": 3}]]