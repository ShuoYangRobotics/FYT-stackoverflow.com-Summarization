[[{"text": ["Thank you to everyone who was posting here.", "It really helps my unicode knowledge (and hoepfully other people learned something)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["We seemed to be all barking up the wrong tree since I tried to simplify my problem and didn't give ALL information.", "It seems that I wasn't using \"REAL\" unicode strings, but rather BeautifulSoup.NavigableString which repr themselves as unicode strings.", "So all the printouts looked like unicode, but they weren't."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Somewhere deep in the MySQLDB library they couldn't deal with these strings. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This worked :"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; Achievement.objects.get(name = u\"Mirror's Edge\\u2122\")\n&lt;Achievement: Mirror's Edge\u2122&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["On the other hand :"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; b = BeautifulSoup(u\"&lt;span&gt;Mirror's Edge\\u2122&lt;/span&gt;\").span.string\n&gt;&gt;&gt; Achievement.objects.get(name = b)\n... Exceptoins ...\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\u2122' in position 13: ordinal not in range(128)\n</code>\n</pre>\n", "senID": 6}, {"text": ["But this works :"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; Achievement.objects.get(name = unicode(b))\n&lt;Achievement: Mirror's Edge\u2122&gt;\n</code>\n</pre>\n", "senID": 8}, {"text": ["So, thanks again for all the unicode help, I'm sure it will come in handy.", "But for now ..."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["WARNING : BeautifulSoup doesn't return REAL unicode strings and should be coerced with unicode() before doing anything meaningful with them."], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "WARNING", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "REAL", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["A few remarks: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 8, "lis": [{"text": ["Python 2.x has two string types"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Instances of these types are considered \"decoded\" data.", "The internal representation is the reference, so you \"decode\" external data into it, and \"encode\" into some external format."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["A good strategy is to decode as early as possible when data enters the system, and encode as late as possible.", "Try to use unicode for the strings in your system as much as possible.", "(I disagree with Nikolai in this regard)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["This encoding aspect applies to Nicolai's answer.", "He takes the original unicode string, and encodes it into utf-8.", "But this doesn't solve the problem (at least not generally), because the resulting byte buffer can still contain bytes outside the range(127) (I haven't checked for \\u2122), which means you will hit the same exception again."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "doesn't solve", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}, {"text": "still", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Still Nicolai's analysis holds that you are passing a unicode string, but somewhere down in the system this is regarded a str instance.", "It suffices if somewhere the str() function is applied to your unicode argument."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["In that case Python uses the so called default encoding which is ascii if you don't change it.", "There is a function sys.setdefaultencoding which you can use to switch to e.g.", "utf-8, but the function is only available in a limited context, so you cannot easily use it in application code."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["My feeling is the problem is somewhere deeper in the layers you are calling.", "Unfortunately, I cannot comment on Django or MySQL/SQLalchemy, but I wonder if you could specify a unicode type when declaring the 'name' attribute in your model.", "It would be good DB practice to handle type information on the field level.", "Maybe there is an alternative to CharField?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["And yes, you can safely embed a single quote (') in a double quoted (\") string, and vice versa."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]}], [{"text": ["You are using strings of type 'unicode'.", "If your model or SQL backend does not support them or does not know how to convert to UTF-8, simply do the conversion yourself.", "Stick with simple strings (python type str) and convert like in"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = models.Achievement(name=u\"Played Mirror's Edge\\u2122\".encode(\"UTF-8\"))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I was working on this yesterday, and I found that adding \"charset=utf8\" and \"use_unicode=1\" to the connection string made it work (using SQLAlchemy, guess it's the same problem)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So my string looks like:\n\"mysql://user:pass@host:3306/database?use_unicode=1&amp;charset=utf8\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I agree with Nikolai.", "I already encountered problem to use UTF-8, even in pure Python (2.5)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I finally used the unicode function(?", "): "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n entry    = unicode(sys.stdin, ENCODING)\n</code>\n</pre>\n", "senID": 2}, {"text": ["ENCODING was depending on the locale, if I remember well:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import sys, locale\n\nENCODING    = locale.getdefaultlocale()[1]\nDEFAULT_ENCODING    = sys.getdefaultencoding()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Maybe take a look at the Python Unicode HOWTO ?"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Python Unicode HOWTO", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/unicode"}]}], [{"text": ["I was having similar problems with mysql and postgres but no problems with sqllite."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is how i solved the problem with postgres (didnt test this trick with mysql but id asume it would solve it as well)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["in the file where u are dealing with the unicode string do a "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from django.utils.safestring import SafeUnicode\n</code>\n</pre>\n", "senID": 3}, {"text": ["and assume unistr is the variable containing the string, do a "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n unistr = SafeUnicode(unistr)\n</code>\n</pre>\n", "senID": 5}, {"text": ["in my case i was scraping from a website"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["original code which was giving problems (ht is beautifulsoup object):- "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n keyword = ht.a.string\n</code>\n</pre>\n", "senID": 8}, {"text": ["the fix:-"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n keyword = SafeUnicode(ht.a.string)\n</code>\n</pre>\n", "senID": 10}, {"text": ["I dont know why or what SafeUnicode is doing, all i know is it solved my problems."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["To me the apostrophe looks strange, should it not be escapded like so:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "To me the apostrophe looks strange, should it not be escapded like so:", "childNum": 0, "tag": "del", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n u\"Played Mirror\\'s Edge\\u2122\"\n</code>\n</pre>\n", "senID": 1}]]