[[{"text": ["First parse your input into a list of pairs like fieldN: some_string.", "You can do this easily with re module, or probably even simpler with slicing left and right of the index line.strip().find(': ').", "Then use a literal eval on the value some_string:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "fieldN: some_string", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "re", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "line.strip().find(': ')", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "some_string", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import ast\n&gt;&gt;&gt; ast.literal_eval('6.2')\n6.2\n&gt;&gt;&gt; type(_)\n&lt;type 'float'&gt;\n&gt;&gt;&gt; ast.literal_eval('\"Hello, world!\"')\n'Hello, world!'\n&gt;&gt;&gt; type(_)\n&lt;type 'str'&gt;\n&gt;&gt;&gt; ast.literal_eval('7')\n7\n&gt;&gt;&gt; type(_)\n&lt;type 'int'&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For older python versions, like the one being asked, the eval function can be used but, to reduce evilness, a dict to be the global namespace should be used as second argument to avoid function calls."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "reduce", "childNum": 0, "tag": "strong", "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [eval(i, {\"__builtins__\":None}) for i in ['6.2', '\"Hello, world!\"', '7']]\n[6.2, 'Hello, world!', 7]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can attempt to convert it to an int first using the built-in function int().", "If the string cannot be interpreted as an int a ValueError exception is raised.", "You can then attempt to convert to a float using float().", "If this fails also then just return the initial string"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "int()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "ValueError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "float()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def interpret(val):\n    try:\n        return int(val)\n    except ValueError:\n        try:\n            return float(val)\n        except ValueError:\n            return val\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Since the \"only data types that need to be parsed areint,floatandstr\", maybe somthing like this will work for you:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "\"only data types that need to be parsed areint,floatandstr\"", "childNum": 3, "tag": "em", "pos": 0, "childList": [{"text": "int", "tag": "code"}, {"text": "float", "tag": "code"}, {"text": "str", "tag": "code"}]}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n entries = {'field1': '7', 'field2': \"Hello, world!\", 'field3': '6.2'}\n\nfor k,v in entries.items():\n    if v.isdecimal():\n        conv = int(v)\n    else:\n        try:\n            conv = float(v)\n        except ValueError:\n            conv = v\n    entries[k] = conv\n\nprint(entries)\n# {'field2': 'Hello, world!', 'field3': 6.2, 'field1': 7}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Hope this helps to do what you are trying to do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\na = {'field1': 7}\nb = {'field2': \"Hello, world!\"}\nc = {'field3': 6.2}\n\ntemp1 = type(a['field1'])\ntemp2 = type(b['field2'])\ntemp3 = type(c['field3'])\n\nprint temp1\nprint temp2\nprint temp3\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Thanks to wim for helping me figure out what I needed to search for to figure this out."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "wim", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/a/9072884/789750"}]}, {"text": ["One can just use eval():"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "eval()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a=eval(\"7\")\n&gt;&gt;&gt; b=eval(\"3\")\n&gt;&gt;&gt; a+b\n10\n&gt;&gt;&gt; b=eval(\"7.2\")\n&gt;&gt;&gt; a=eval(\"3.5\")\n&gt;&gt;&gt; a+b\n10.699999999999999\n&gt;&gt;&gt; a=eval('\"Hello, \"')\n&gt;&gt;&gt; b=eval('\"world!\"')\n&gt;&gt;&gt; a+b\n'Hello, world!'\n</code>\n</pre>\n", "senID": 2}]]