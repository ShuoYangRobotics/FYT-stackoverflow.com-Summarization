[[{"text": ["Use the OR \"|\" operator:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "|", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.sub(r'(^|\\W)GBP([\\W\\d])', u'\\g&lt;1&gt;\u00a3\\g&lt;2&gt;', text)\nu'\\xa3 5 Off when you spend \\xa375.00'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This replaces GBP if it's preceded by the start of a string or a word boundary (which the start of a string already is), and after GBP comes a numeric value or a word boundary: "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "word boundary", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.regular-expressions.info/wordboundaries.html"}]}, {"code": "<pre>\n<code>\n re.sub(u'\\bGBP(?=\\b|\\d)', u'\u00a3', text)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This removes the need for any unnecessary backreferencing by using a lookahead.", "Inclusive enough?"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "lookahead", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.regular-expressions.info/lookaround.html"}]}], [{"text": ["\\b is word boundary, which can be a white space, the beginning of a line or a non-alphanumeric symbol (\"\\\"GBP\\\"\")."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "\\b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"\\\"GBP\\\"\"", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I think you're looking for '(^|\\W)GBP([\\W\\d])'"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "'(^|\\W)GBP([\\W\\d])'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Yes, why not?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.sub(u'^\\W*GBP...\n</code>\n</pre>\n", "senID": 1}, {"text": ["matches the start of the string, 0 or more whitespaces, then GBP..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["edit: Oh, I think you want alternation, use the |:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "edit", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "|", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n re.sub(u'(^|\\W)GBP...\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You can always trim leading and trailing whitespace from the token before you search if it's not a matching/grouping situation that requires the full line."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It works in Perl:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $text = 'GBP 5 off when you spend GBP75';\n$text =~ s/(\\W|^)GBP([\\W\\d])/$1\\$$2/g;\nprintf \"$text\\n\";\n</code>\n</pre>\n", "senID": 1}, {"text": ["The output is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ 5 off when you spend $75\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note that I stipulated that the match should be global, to get all occurrences."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]