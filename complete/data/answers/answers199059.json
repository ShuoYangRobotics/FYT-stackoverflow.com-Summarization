[[{"text": ["If there are consecutive capitals, then Gregs result could\nnot be what you look for, since the \\w consumes the caracter\nin front of the captial letter to be replaced."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", \"WordWordWWWWWWWord\")\n'Word Word WW WW WW Word'\n</code>\n</pre>\n", "senID": 1}, {"text": ["A look-behind would solve this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.sub(r\"(?&lt;=\\w)([A-Z])\", r\" \\1\", \"WordWordWWWWWWWord\")\n'Word Word W W W W W W Word'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You could try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", \"WordWordWord\")\n'Word Word Word'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Perhaps shorter:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.sub(r\"\\B([A-Z])\", r\" \\1\", \"DoIThinkThisIsABetterAnswer?\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Have a look at my answer on .NET - How can you split a \u201ccaps\u201d delimited string into an array?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": ".NET - How can you split a \u201ccaps\u201d delimited string into an array?", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": ".NET - How can you split a \u201ccaps\u201d delimited string into an array?", "tag": "a"}]}, {"href": "http://stackoverflow.com/questions/155303/net-how-can-you-split-a-caps-delimited-string-into-an-array#155487", "text": ".NET - How can you split a \u201ccaps\u201d delimited string into an array?", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Edit: Maybe better to include it here."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n re.sub(r'([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', r'\\1 ', text)\n</code>\n</pre>\n", "senID": 2}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n \"SimpleHTTPServer\" =&gt; [\"Simple\", \"HTTP\", \"Server\"]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["With regexes you can do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.sub('([A-Z])', r' \\1', str)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, that will only work for ASCII characters, if you want to do Unicode it's a whole new can of worms :-)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I agree that the regex solution is the easiest, but I wouldn't say it's the most pythonic."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["How about:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n text = 'WordWordWord'\nnew_text = ''\nis_first_letter = True\n\nfor letter in text:\n    if not is_first_letter and letter.isupper():\n        new_text += ' ' + letter\n    else:\n        new_text += letter\n\n    isFirstLetter = False\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I think regexes are the way to go here, but just to give a pure python version without (hopefully) any of the problems \u03a4\u0396\u03a9\u03a4\u0396\u0399\u039f\u03a5 has pointed out:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def splitCaps(s):\n    result = []\n    for ch, next in window(s+\" \", 2):\n        result.append(ch)\n        if next.isupper() and not ch.isspace():\n            result.append(' ')\n    return ''.join(result)\n</code>\n</pre>\n", "senID": 1}, {"text": ["window() is a utility function I use to operate on a sliding window of items, defined as:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import collections, itertools\n\ndef window(it, winsize, step=1):\n    it=iter(it)  # Ensure we have an iterator\n    l=collections.deque(itertools.islice(it, winsize))\n    while 1:  # Continue till StopIteration gets raised.\n        yield tuple(l)\n        for i in range(step):\n            l.append(it.next())\n            l.popleft()\n</code>\n</pre>\n", "senID": 3}]]