[[{"text": ["Here is one way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result = dict(d2)\nfor k in d1:\n    if k in result:\n        result[k] = (result[k] + d1[k]) / 2.0\n    else:\n        result[k] = d1[k]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This would work for any number of dictionaries:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dicts = ({\"a\": 5},{\"b\": 2, \"a\": 10}, {\"a\": 15, \"b\": 4})\nkeys = set()\naveraged = {}\nfor d in dicts:\n    keys.update(d.keys())\nfor key in keys:\n    values = [d[key] for d in dicts if key in d]\n    averaged[key] = float(sum(values)) / len(values)\nprint averaged\n# {'a': 10.0, 'b': 3.0}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Update: @mhyfritz showed a way how you could reduce 3 lines to one!"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n dicts = ({\"a\": 5},{\"b\": 2, \"a\": 10}, {\"a\": 15, \"b\": 4})\naveraged = {}\nkeys = set().union(*dicts)\nfor key in keys:\n    values = [d[key] for d in dicts if key in d]\n    averaged[key] = float(sum(values)) / len(values)\nprint averaged\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Your question was for the most 'Pythonic' way."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think for a problem like this, the Pythonic way is one that is very clear.", "There are many ways to implement the solution to this problem!", "If you really do have only 2 dicts then the solutions that assume this are great because they are much simpler (and easier to read and maintain as a result).", "However, it's often a good idea to have the general solution because it means you won't need to duplicate the bulk of the logic for other cases where you have 3 dictionaries, for example."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As an addendum, phant0m's answer is nice because it uses a lot of Python's features to make the solution readable.", "We see a list comprehension:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [d[key] for d in dicts if key in d]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Use of Python's very useful set type:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n keys = set()\nkeys.update(d.keys())\n</code>\n</pre>\n", "senID": 5}, {"text": ["And generally, good use of Python's type methods and globals:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n d.keys()\nkeys.update( ... )\nkeys.update\nlen(values)\n</code>\n</pre>\n", "senID": 7}, {"text": ["Thinking of and implementing an algorithm to solve this problem is one thing, but making it this elegant and readable by utilising the power of the language is what most people would deem 'Pythonic'."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["(I would use phant0m's solution)"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["Yet another way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result = dict(d1)\nfor (k,v) in d2.items():\n    result[k] = (result.get(k,v) + v) / 2.0\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A Counter and some Generators are useful in this situation"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["General Case:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d1 = { 'apples': 2, 'oranges':5 }\n&gt;&gt;&gt; d2 = { 'apples': 1, 'bananas': 3 }\n&gt;&gt;&gt; all_d=[d1,d2]\n&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; counts=Counter(sum((d.keys() for d in all_d),[]))\n&gt;&gt;&gt; counts\nCounter({'apples': 2, 'oranges': 1, 'bananas': 1})\n&gt;&gt;&gt; s=lambda k: sum((d.get(k,0) for d in all_d))\n&gt;&gt;&gt; result_set=dict(((k,1.0*s(k)/counts[k]) for k in counts.keys()))\n&gt;&gt;&gt; result_set\n{'apples': 1.5, 'oranges': 5.0, 'bananas': 3.0}\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n d1 = { 'apples': 2, 'oranges':5 }\nd2 = { 'apples': 1, 'bananas': 3, 'oranges':0 }\ndicts = [d1, d2]\n\nresult_dict = {}\n\nfor dict in dicts:\n    for key, value in dict.iteritems():\n        if key in result_dict:\n            result_dict[key].append(value)\n        else:\n            result_dict[key] = [value]\n\nfor key, values in result_dict.iteritems():\n    result_dict[key] = float(sum(result_dict[key])) / len(result_dict[key])\n\nprint result_dict\n</code>\n</pre>\n", "senID": 0}]]