[[{"text": ["I like ctypes a lot, swig always tended to give me problems.", "Also ctypes has the advantage that you don't need to satisfy any compile time dependency on python, and your binding will work on any python that has ctypes, not just the one it was compiled against."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "ctypes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-ctypes.html"}, {"text": "swig", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.swig.org/"}, {"text": "problems", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://groups.google.com/group/comp.lang.python/browse_thread/thread/d94badd9847fe43a?pli=1"}]}, {"text": ["Suppose you have a simple C++ example class you want to talk to in a file called foo.cpp:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #include &lt;iostream&gt;\n\nclass Foo{\n    public:\n        void bar(){\n            std::cout &lt;&lt; \"Hello\" &lt;&lt; std::endl;\n        }\n};\n</code>\n</pre>\n", "senID": 2}, {"text": ["Since ctypes can only talk to C functions, you need to provide those declaring them as extern \"C\""], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n extern \"C\" {\n    Foo* Foo_new(){ return new Foo(); }\n    void Foo_bar(Foo* foo){ foo-&gt;bar(); }\n}\n</code>\n</pre>\n", "senID": 4}, {"text": ["Next you have to compile this to a shared library"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n g++ -c -fPIC foo.cpp -o foo.o\ng++ -shared -Wl,-soname,libfoo.so -o libfoo.so  foo.o\n</code>\n</pre>\n", "senID": 6}, {"text": ["And finally you have to write your python wrapper (e.g.", "in fooWrapper.py)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n from ctypes import cdll\nlib = cdll.LoadLibrary('./libfoo.so')\n\nclass Foo(object):\n    def __init__(self):\n        self.obj = lib.Foo_new()\n\n    def bar(self):\n        lib.Foo_bar(self.obj)\n</code>\n</pre>\n", "senID": 8}, {"text": ["Once you have that you can call it like"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n f = Foo()\nf.bar() #and you will see \"Hello\" on the screen\n</code>\n</pre>\n", "senID": 10}], [{"text": ["You should have a look at Boost.Python, here is the short introdution taken from their website:\n\"\"\"\nThe Boost Python Library is a framework for interfacing Python and C++.", "It allows you to quickly and seamlessly expose C++ classes functions and objects to Python, and vice-versa, using no special tools -- just your C++ compiler.", "It is designed to wrap C++ interfaces non-intrusively, so that you should not have to change the C++ code at all in order to wrap it, making Boost.Python ideal for exposing 3rd-party libraries to Python.", "The library's use of advanced metaprogramming techniques simplifies its syntax for users, so that wrapping code takes on the look of a kind of declarative interface definition language (IDL).", "\"\"\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The quickest way to do this is using SWIG."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SWIG", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.swig.org/"}]}], [{"text": ["I've never used it but I've heard good things about ctypes."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ctypes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-ctypes.html"}]}], [{"text": ["This paper, claiming python to be all a scientist needs, basically says: first prototype everything in Python.", "Then when you need to speed a part up, use SWIG and translate this part to C."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "This paper, claiming python to be all a scientist needs,", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://openwetware.org/wiki/Julius_B._Lucks/Projects/Python_All_A_Scientist_Needs"}]}], [{"text": ["Check out pyrex or cython.", "They're python-like languages for interfacing between C/C++ and python."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "pyrex", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"}, {"text": "cython", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://cython.org/"}]}], [{"text": ["One of the official python documents (see link) contains details on extending python using c/c++.", "Even without the use of SWIG it's quite straightforward and works perfectly well on Windows."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "link", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/ext/ext.html"}]}], [{"text": ["You might find the suggestions in this similar question also helpful -> Prototyping hybrid Python code"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Prototyping hybrid Python code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/16067/prototyping-hybrid-python-code"}]}]]