[[{"text": ["well, according to http://docs.python.org/tutorial/controlflow.html "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/tutorial/controlflow.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html"}]}], [{"text": ["You can do this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n bonus_rows = []\nfor a in myarr:\n  if somecond(a):\n      bonus_rows.append(newObj())\nmyarr.extend( bonus_rows )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["make copy of your original list, iterate over it,\nsee the modified code below"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for a in myarr[:]:\n      if somecond(a):\n          myarr.append(newObj())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The danger with doing this is that the elements added at the end will also be iterated through.", "This means that if those objects also satisfy somecond(), then more elements will be added on.", "This can create an infinite loop.", "For instance, here is a very simple infinite loop:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = [1]\nfor a in x:\n    x.append(a+1)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to avoid copying the array, then you could use an index to loop through the items:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n L = len(myarr)\nfor i in xrange(L):\n    if somecond(a[i]):\n        myarr.append(newObj())\n</code>\n</pre>\n", "senID": 3}, {"text": ["This isn't Pythonic, but it will avoid copying the array."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You could use the islice from itertools to create an iterator over a smaller portion of the list.", "Then you can append entries to the list without impacting the items you're iterating over:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "islice", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n islice( myarr, 0, len(myarr)-1 )\n</code>\n</pre>\n", "senID": 1}, {"text": ["Even better, you don't even have to iterate over all the elements.", "You can increment a step size."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Why don't you just do it the idiomatic C way.", "This ought to be bullet-proof, however it won't be fast.", "I'm pretty sure indexing into a list in Python walks the linked list, so this is a Shlemiel the Painter algorithm.", "But I tend not to worry about optimization until it becomes clear that a particular section of code is really a problem.", "First make it work, then worry about making it fast, if necessary."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want to iterate over all the elements):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n i = 0  \nwhile i &lt; len(some_list):  \n  more_elements = do_something_with(some_list[i])  \n  some_list.extend(more_elements)  \n  i += 1\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you only want to iterate over the elements that were originally in the list:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n i = 0  \noriginal_len = len(some_list)  \nwhile i &lt; original_len:  \n  more_elements = do_something_with(some_list[i])  \n  some_list.extend(more_elements)  \n  i += 1\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Access your list elements directly by i.", "Then you can append to your list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in xrange(len(myarr)):\n    if somecond(a[i]):\n        myarr.append(newObj())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Expanding S.Lott's answer so that new items are processed as well:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n todo = myarr\ndone = []\nwhile todo:\n    added = []\n    for a in todo:\n        if somecond(a):\n            added.append(newObj())\n    done.extend(todo)\n    todo = added\n</code>\n</pre>\n", "senID": 1}, {"text": ["The final list is in done."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "done", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]