[[{"code": "<pre>\n<code>\n &gt;&gt; items = [1,2,3,4]\n&gt;&gt; Z = [3,4,5,6]\n\n&gt;&gt; print list(set(items)-set(Z))\n[1, 2]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Your code is not doing what I think you think it is doing.", "The line for item in z: will iterate through z, each time making item equal to one single element of z.", "The original item list is therefore overwritten before you've done anything with it."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "for item in z:", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "z", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "item", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "z", "childNum": 0, "tag": "code", "childList": []}, {"text": "item", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I think you want something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n item = [0,1,2,3,4,5,6,7,8,9]\n\nfor element in item:\n    if element not in z:\n        print element\n</code>\n</pre>\n", "senID": 2}, {"text": ["But you could easily do this like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n set(item) - set(z)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If you run a loop taking items from z, how do you expect them not to be in z?", "IMHO it would make more sense comparing items from a different list to z."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n list1 = [1,2,3,4]; list2 = [0,3,3,6]\n\nprint set(list2) - set(list1)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; item = set([0,1,2,3,4,5,6,7,8,9])\n&gt;&gt;&gt; z = set([2,3,4])\n&gt;&gt;&gt; print item - z\nset([0, 1, 5, 6, 7, 8, 9])\n</code>\n</pre>\n", "senID": 0}], [{"text": ["No, z is undefined.", "item contains a list of integers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think what you're trying to do is this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #z defined elsewhere\nitem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nfor i in item:\n  if i not in z: print i\n</code>\n</pre>\n", "senID": 2}, {"text": ["As has been stated in other answers, you may want to try using sets."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Your code is a no-op.", "By the definition of the loop, \"item\" has to be in Z.", "A \"For ... in\" loop in Python means \"Loop though the list called 'z', each time you loop, give me the next item in the list,  and call it 'item'\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/tutorial/controlflow.html#for-statements"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/tutorial/controlflow.html#for-statements", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html#for-statements"}]}, {"text": ["I think your confusion arises from the fact that you're using the variable name \"item\" twice, to mean two different things."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You are reassigning item to the values in z as you iterate through z.", "So the first time in your for loop, item = 0, next item = 1, etc...  You are never checking one list against the other."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To do it very explicitly:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; item = [0,1,2,3,4,5,6,7,8,9]\n&gt;&gt;&gt; z = [0,1,2,3,4,5,6,7]\n&gt;&gt;&gt; \n&gt;&gt;&gt; for elem in item:\n...   if elem not in z:\n...     print elem\n... \n8\n9\n</code>\n</pre>\n", "senID": 2}]]