[[{"text": ["There are a number of ways of achieving your result.", "If you're just wanting a solution for your case, use string multiplication as @Ant mentions.", "This is only going to work if each of your print statements prints the same string.", "Note that it works for multiplication of any length string (e.g.", "'foo' * 20 works)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "string multiplication", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#typesseq"}, {"text": "@Ant", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/4499073/print-python-whithout-n/4499087#4499087"}, {"text": "print", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "'foo' * 20", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print 'a' * 20\naaaaaaaaaaaaaaaaaaaa\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to do this in general, build up a string and then print it once.", "This will consume a bit of memory for the string, but only make a single call to print.", "Note that string concatenation using += is now linear in the size of the string you're concatenating so this will be fast."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "+=", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i in xrange(20):\n...     s += 'a'\n... \n&gt;&gt;&gt; print s\naaaaaaaaaaaaaaaaaaaa\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or you can do it more directly using sys.stdout.write(), which print is a wrapper around.", "This will write only the raw string you give it, without any formatting.", "Note that no newline is printed even at the end of the 20 as."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "sys.stdout", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sys.html#sys.stdout"}, {"text": "write()", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#file.write"}, {"text": "print", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i in xrange(20):\n...     sys.stdout.write('a')\n... \naaaaaaaaaaaaaaaaaaaa&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["Python 3 changes the print statement into a print() function, which allows you to set an end parameter.", "You can use it in >=2.6 by importing from __future__.", "I'd avoid this in any serious 2.x code though, as it will be a little confusing for those who have never used 3.x.", "However, it should give you a taste of some of the goodness 3.x brings."], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print() function", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#print"}, {"text": "end", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__future__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from __future__ import print_function\n&gt;&gt;&gt; for i in xrange(20):\n...     print('a', end='')\n... \naaaaaaaaaaaaaaaaaaaa&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 7}], [{"text": ["You can suppress the space by printing an empty string to stdout between the print statements."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; for i in range(20):\n...   print 'a',\n...   sys.stdout.write('')\n... \naaaaaaaaaaaaaaaaaaaa\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, a cleaner solution is to first build the entire string you'd like to print and then output it with a single print statement."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["without what?", "do you mean"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print 'a' * 20\naaaaaaaaaaaaaaaaaaaa\n</code>\n</pre>\n", "senID": 1}, {"text": [], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["From http://docs.python.org/whatsnew/2.6.html#pep-3105-print-as-a-function"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/whatsnew/2.6.html#pep-3105-print-as-a-function", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/whatsnew/2.6.html#pep-3105-print-as-a-function"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from __future__ import print_function\n&gt;&gt;&gt; print('a', end='')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Obviously that only works with python 2.6 or higher."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Python 3.x:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range(20):\n    print('a', end='')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Python 2.6 or 2.7:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import print_function\nfor i in xrange(20):\n    print('a', end='')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Either what Ant says, or accumulate into a string, then print once:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Ant", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/465159/ant"}, {"href": "http://stackoverflow.com/questions/4499073/print-python-whithout-n/4499087#4499087", "text": "says", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n s = '';\nfor i in xrange(20):\n    s += 'a'\nprint s\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could print a backspace character ('\\b'):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "'\\b'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in xrange(20):\n    print '\\ba',\n</code>\n</pre>\n", "senID": 1}, {"text": ["result:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n aaaaaaaaaaaaaaaaaaaa\n</code>\n</pre>\n", "senID": 3}], [{"text": ["EDIT Dammit, misread question"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Place an extra comma at the end of the statement"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print \"a\",\n</code>\n</pre>\n", "senID": 2}]]