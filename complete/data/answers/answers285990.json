[[{"text": ["BeautifulSoup is a good Python library for dealing with messy HTML in clean ways."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}], [{"text": ["In python, ElementTidy parses tag soup and produces an element tree, which allows querying using XPath:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ElementTidy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/elementtidy/1.0-20050212"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from elementtidy.TidyHTMLTreeBuilder import TidyHTMLTreeBuilder as TB\n&gt;&gt;&gt; tb = TB()\n&gt;&gt;&gt; tb.feed(\"&lt;p&gt;Hello world\")\n&gt;&gt;&gt; e= tb.close()\n&gt;&gt;&gt; e.find(\".//{http://www.w3.org/1999/xhtml}p\")\n&lt;Element {http://www.w3.org/1999/xhtml}p at 264eb8&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It seems the question could be more precisely stated as \"How to convert HTML to XML so that XPath expressions can be evaluated against it\"."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "How to convert HTML to XML so that XPath expressions can be evaluated against it", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Here are two good tools:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I'm surprised there isn't a single mention of lxml.", "It's blazingly fast and will work in any environment that allows CPython libraries."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's how you can parse HTML via XPATH using lxml."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "you can parse HTML via XPATH using lxml", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/xpathxslt.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from lxml import etree\n&gt;&gt;&gt; doc = '&lt;foo&gt;&lt;bar&gt;&lt;/bar&gt;&lt;/foo&gt;'\n&gt;&gt;&gt; tree = etree.HTML(doc)\n\n&gt;&gt;&gt; r = tree.xpath('/foo/bar')\n&gt;&gt;&gt; len(r)\n1\n&gt;&gt;&gt; r[0].tag\n'bar'\n\n&gt;&gt;&gt; r = tree.xpath('bar')\n&gt;&gt;&gt; r[0].tag\n'bar'\n</code>\n</pre>\n", "senID": 2}], [{"text": ["For Ruby, I highly recommend Hpricot that Jb Evain pointed out.", "If you're looking for a faster libxml-based competitor, Nokogiri (see http://tenderlovemaking.com/2008/10/30/nokogiri-is-released/) is pretty good too (it supports both XPath and CSS searches like Hpricot but is faster).", "There's a basic wiki and some benchmarks."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "http://tenderlovemaking.com/2008/10/30/nokogiri-is-released/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://tenderlovemaking.com/2008/10/30/nokogiri-is-released/"}, {"text": "wiki", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://github.com/tenderlove/nokogiri/wikis"}, {"href": "http://gist.github.com/22176", "text": "benchmarks", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["An outstanding achievement is the pure XSLT 2.0 Parser of HTML written by David Carlisle."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "the pure XSLT 2.0 Parser of HTML", "tag": "a", "pos": 0, "childList": [{"text": "the pure XSLT 2.0 Parser of HTML", "tag": "strong"}], "childNum": 1, "href": "http://www.dcarlisle.demon.co.uk/htmlparse.xsl"}, {"text": "the pure XSLT 2.0 Parser of HTML", "childNum": 0, "tag": "strong", "childList": []}, {"href": "http://dpcarlisle.blogspot.com/", "text": "David Carlisle", "childNum": 1, "tag": "a", "childList": [{"text": "David Carlisle", "tag": "strong"}]}, {"text": "David Carlisle", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Reading its code would be a great learning exercise for everyone of us."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["From the description:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["\"d:htmlparse(string)&nbsp;d:htmlparse(string,namespace,html-mode)&nbsp;&nbsp;The one argument form is equivalent to)&nbsp;&nbsp;d:htmlparse(string,'http://ww.w3.org/1999/xhtml',true()))&nbsp;&nbsp;Parses the string as HTML and/or XML using some inbuilt heuristics to)&nbsp;&nbsp;control implied opening and closing of elements.&nbsp;&nbsp;It doesn't have full knowledge of HTML DTD but does have full list of&nbsp;&nbsp;empty elements and full list of entity definitions.", "HTML entities, and&nbsp;&nbsp;decimal and hex character references are all accepted.", "Note html-entities&nbsp;&nbsp;are recognised even if html-mode=false().&nbsp;&nbsp;Element names are lowercased (if html-mode is true()) and placed into the&nbsp;&nbsp;namespace specified by the namespace parameter (which may be \"\" to denote&nbsp;&nbsp;no-namespace unless the input has explict namespace declarations, in&nbsp;&nbsp;which case these will be honoured.&nbsp;&nbsp;Attribute names are lowercased if html-mode=true()\""], "childNum": 21, "tag": "p", "senID": 3, "childList": [{"text": "d:htmlparse(string)&nbsp;d:htmlparse(string,namespace,html-mode)&nbsp;&nbsp;The one argument form is equivalent to)&nbsp;&nbsp;d:htmlparse(string,'http://ww.w3.org/1999/xhtml',true()))&nbsp;&nbsp;Parses the string as HTML and/or XML using some inbuilt heuristics to)&nbsp;&nbsp;control implied opening and closing of elements.&nbsp;&nbsp;It doesn't have full knowledge of HTML DTD but does have full list of&nbsp;&nbsp;empty elements and full list of entity definitions. HTML entities, and&nbsp;&nbsp;decimal and hex character references are all accepted. Note html-entities&nbsp;&nbsp;are recognised even if html-mode=false().&nbsp;&nbsp;Element names are lowercased (if html-mode is true()) and placed into the&nbsp;&nbsp;namespace specified by the namespace parameter (which may be \"\" to denote&nbsp;&nbsp;no-namespace unless the input has explict namespace declarations, in&nbsp;&nbsp;which case these will be honoured.&nbsp;&nbsp;Attribute names are lowercased if html-mode=true()", "childNum": 20, "tag": "em", "pos": -1, "childList": [{"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "http://ww.w3.org/1999/xhtml", "tag": "a"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}, {"text": "", "tag": "br"}]}, {"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://ww.w3.org/1999/xhtml", "text": "http://ww.w3.org/1999/xhtml", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["Read a more detailed description here."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [{"text": "here", "tag": "strong"}], "childNum": 1, "href": "http://www.dcarlisle.demon.co.uk/htmlparse.xsl"}, {"text": "here", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Hope this helped."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Cheers,"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Dimitre Novatchev."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["There is a free C implementation for XML called libxml2 which has some api bits for XPath which I have used with great success which you can specify HTML as the document being loaded.", "This had worked for me for some less than perfect HTML documents..  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For the most part, XPath is most useful when the inbound HTML is properly coded and can be read 'like an xml document'.", "You may want to consider using a utility that is specific to this purpose for cleaning up HTML documents.", "Here is one example: http://tidy.sourceforge.net/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://tidy.sourceforge.net/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://tidy.sourceforge.net/"}]}, {"text": ["As far as these XPath tools go- you will likely find that most implementations are actually based on pre-existing C or C++ libraries such as libxml2."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]