[[{"text": ["Files are compiled upon import.", "It isn't a security thing.", "It is simply that if you import it python saves the output.", "See this post by Fredrik Lundh on Effbot."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this post", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/python-compile.htm"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt;import main\n# main.pyc is created\n</code>\n</pre>\n", "senID": 1}, {"text": ["When running a script python will not use the *.pyc file.", "If you have some other reason you want your script pre-compiled you can use the compileall module."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "compileall", "tag": "a", "pos": 1, "childList": [{"text": "compileall", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/compileall.html"}, {"text": "compileall", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n python -m compileall .\n</code>\n</pre>\n", "senID": 3}, {"text": ["compileall Usage"], "childNum": 0, "tag": "h2", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n python -m compileall --help\noption --help not recognized\nusage: python compileall.py [-l] [-f] [-q] [-d destdir] [-x regexp] [directory ...]\n-l: don't recurse down\n-f: force rebuild even if timestamps are up-to-date\n-q: quiet operation\n-d destdir: purported directory name for error messages\n   if no directory arguments, -l sys.path is assumed\n-x regexp: skip files matching the regular expression regexp\n   the regexp is searched for in the full path of the file\n</code>\n</pre>\n", "senID": 5}, {"text": ["Answers to Question Edit"], "childNum": 0, "tag": "h2", "senID": 6, "childList": []}, {"text": ["Glenn Maynard provided some inspiration to correct and improve this answer."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Glenn Maynard", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/136829/glenn-maynard"}]}], [{"text": ["Nobody seems to want to say this, but I'm pretty sure the answer is simply: there's no solid reason for this behavior."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["All of the reasons given so far are essentially incorrect:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "There's nothing special about the main file.  It's loaded as a module, and shows up in ", "tag": "none", "senID": 2}, {"text": "There's no problem with failing to save .pyc files due to read-only directories; Python simply ignores it and moves on.", "tag": "none", "senID": 3}, {"text": "The benefit of caching a script is the same as that of caching any module: not wasting time recompiling the script every time it's run.  The docs acknowledge this explicitly (\"Thus, the startup time of a script may be reduced ...\").", "tag": "none", "senID": 4}]}, {"text": ["Another issue to note: if you run python foo.py and foo.pyc exists, it will not be used.", "You have to explicitly say python foo.pyc.", "That's a very bad idea: it means Python won't automatically recompile the .pyc file when it's out of sync (due to the .py file changing), so changes to the .py file won't be used until you manually recompile it.", "It'll also fail outright with a RuntimeError if you upgrade Python and the .pyc file format is no longer compatible, which happens regularly.", "Normally, this is all handled transparently."], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "python foo.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "will not be used", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "explicitly", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "python foo.pyc", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["You shouldn't need to move a script to a dummy module and set up a bootstrapping script to trick Python into caching it.", "That's a hackish workaround."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The only possible (and very unconvincing) reason I can contrive is to avoid your home directory from being cluttered with a bunch of .pyc files.", "(This isn't a real reason; if that was an actual concern, then .pyc files should be saved as dotfiles.", ")  It's certainly no reason not to even have an option to do this."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "option", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["Python should definitely be able to cache the main module."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["Since:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Since", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html#compiled-python-files"}]}, {"text": ["That is unnecessary to generate .pyc file for main script.", "Only the libraries which might be loaded many times should be compiled."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edited:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edited", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["It seem you didn't get my point.", "First, knowing the whole idea of compiling into .pyc file is to make the same file executing faster at the second time.", "However, consider if Python did compile the script being run.", "The interpreter will write bytecode into a .pyc file at the first running, this takes time.", "So it will even run a bit slower.", "You might argue that it will run faster after.", "Well, it just a choice.", "Plus, as this says:"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": ".pyc", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ".pyc", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "this", "childNum": 0, "tag": "code", "pos": 7, "childList": []}]}, {"text": ["If one wants a speedup by using .pyc file, one should compile it manually and run the .pyc file explicitly."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": ".pyc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".pyc", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["To answer your question, reference to 6.1.3.", "\u201cCompiled\u201d Python files in Python official document."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "6.1.3. \u201cCompiled\u201d Python files", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html#compiled-python-files"}]}], [{"text": ["Because the script being run may be somewhere where it is inappropriate to generate .pyc files, such as /usr/bin."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "/usr/bin", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The benefits are very low, considering that one might conceivably import hundreds of modules thanks to inheritance.", "With hundreds of modules, it wouldn't offer much of a size increase to cache the main file, and as stated before, there are many downsides such as a stuffed /usr directory or maybe even a stuffed /home directory if the user is running scripts from their home directory."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]