[[{"text": ["You need some way of finding the column size,\nmaybe by reading all the data and finding the maximum width."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; line='234 127 34 23 45567'\n&gt;&gt;&gt; line.split()\n['234', '127', '34', '23', '45567']\n&gt;&gt;&gt; max(map(len, line.split()))\n5\n</code>\n</pre>\n", "senID": 1}, {"text": ["Repeat over all lines, to find column size (e.g., 5).", "Constructing a formatted line with percent formatting is straightforward."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "percent formatting", "tag": "a", "pos": 1, "childList": [{"text": "percent formatting", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#string-formatting"}, {"text": "percent formatting", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; colsize = 5\n&gt;&gt;&gt; ' '.join(('%*s' % (colsize, i) for i in line.split()))\n'  234   127    34    23 45567'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nclass ALIGN:\n    LEFT, RIGHT = '-', ''\n\nclass Column(list):\n    def __init__(self, name, data, align=ALIGN.RIGHT):\n        list.__init__(self, data)\n        self.name = name\n        width = max(len(str(x)) for x in data + [name])\n        self.format = ' %%%s%ds ' % (align, width)\n\nclass Table:\n    def __init__(self, *columns):\n        self.columns = columns\n        self.length = max(len(x) for x in columns)\n    def get_row(self, i=None):\n        for x in self.columns:\n            if i is None:\n                yield x.format % x.name\n            else:\n                yield x.format % x[i]\n    def get_rows(self):\n        yield ' '.join(self.get_row(None))\n        for i in range(0, self.length):\n            yield ' '.join(self.get_row(i))\n\n    def __str__(self):\n        return '\\n'.join(self.get_rows())\n</code>\n</pre>\n", "senID": 0}, {"text": ["For your example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if __name__ == '__main__':\n    print Table(\n        Column(\"\", [234, 32, 23456]),\n        Column(\"\", [127, 12, 2]),\n        Column(\"\", [34, 4, 1]),\n        Column(\"\", [23, 4, 444]),\n        Column(\"\", [45567, 45, 567])\n    )\n</code>\n</pre>\n", "senID": 2}, {"text": ["It will yield:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n 234   127   34    23   45567 \n    32    12    4     4      45 \n 23456     2    1   444     567\n</code>\n</pre>\n", "senID": 4}, {"text": ["Adapted from http://code.activestate.com/recipes/577202-render-tables-for-text-interface/"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://code.activestate.com/recipes/577202-render-tables-for-text-interface/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/577202-render-tables-for-text-interface/"}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; rows = \"\"\"234 127 34 23 45567\n... 23 12 4 4 45\n... 23456 2 1 444 567\"\"\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["first convert the rows into a 2d array (list of lists)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; arr=[x.split() for x in rows.split(\"\\n\")]\n</code>\n</pre>\n", "senID": 2}, {"text": ["now compute the space each field will need to fit into"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; widths = [max(map(len,(f[i] for f in tab))) for i in range(len(arr[0]))]\n</code>\n</pre>\n", "senID": 4}, {"text": ["and pad each element to fit into that space"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [[k.rjust(widths[i]) for i,k in enumerate(j)] for j in arr]\n[['  234', '127', '34', ' 23', '45567'], ['   23', ' 12', ' 4', '  4', '   45'], ['23456', '  2', ' 1', '444', '  567']]\n</code>\n</pre>\n", "senID": 6}, {"text": ["finally join the array back into a string"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print \"\\n\".join(\"  \".join(k.rjust(widths[i]) for i,k in enumerate(j)) for j in arr)\n  234  127  34   23  45567\n   23   12   4    4     45\n23456    2   1  444    567\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Here is a simple, self-contained example that shows how to format variable column widths:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data = '''\\\n234 127 34 23 45567\n23 12 4 4 45\n23456 2 1 444 567'''\n\n# Split input data by row and then on spaces\nrows = [ line.strip().split(' ') for line in data.split('\\n') ]\n\n# Reorganize data by columns\ncols = zip(*rows)\n\n# Compute column widths by taking maximum length of values per column\ncol_widths = [ max(len(value) for value in col) for col in cols ]\n\n# Create a suitable format string\nformat = ' '.join(['%%%ds' % width for width in col_widths ])\n\n# Print each row using the computed format\nfor row in rows:\n  print format % tuple(row)\n</code>\n</pre>\n", "senID": 1}, {"text": ["which outputs:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Try this nice well documented example http://code.activestate.com/recipes/267662-table-indentation/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.activestate.com/recipes/267662-table-indentation/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/267662-table-indentation/"}]}], [{"text": ["look at the .rjust(n) method - left padding characters perhaps?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".rjust(n)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["For years I've been using a very powerful and easy to use module called TextFormatter by Hamish B Lawson for this sort of thing.", "Originally I got it from www.faqts.com but that's now gone, so I just did a Google search and found a copy of it here -- looks like it might be used in Zope."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.filewatcher.com/p/zope-zwiki-0.27.1.tgz.380166/lib/zope/lib/python/Products/ZWiki/TextFormatter.py.html"}]}, {"text": ["Edit: I checked www.faqts.com using the Internet Archive Wayback Machine and there don't seem to be any licensing issues -- so here's the module with some tweaks by myself and others:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://web.archive.org/web/20100915104702/http://%2a/about%3ablank", "text": "Internet Archive Wayback Machine", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n #===================================================================\n#!/usr/bin/env python\n# File:    TextFormatter2.py\n# Author:  Hamish B Lawson\n# Date:    19/11/1999\n# from http://www.faqts.com/knowledge_base/view.phtml/aid/4517\n\"\"\"\nHere is TextFormatter, a simple module for formatting text into\ncolumns of specified widths. It does multiline wrapping and supports\nleft, center and right alignment.\n\nSKWM made filling &amp; padding optional, tweaked some edge cases\n\"\"\"\n\nimport string\n\nleft  = 0\ncenter = centre = 1\nright  = 2\n\nclass TextFormatter:\n\n    \"\"\"\n    Formats text into columns.\n\n    Constructor takes a list of dictionaries that each specify the\n    properties for a column. Dictionary entries can be:\n\n       width         the width within which the text will be wrapped\n       alignment     left|center|right\n       margin        amount of space to prefix in front of column\n\n    The compose() method takes a list of strings and returns a formatted\n    string consisting of each string wrapped within its respective column.\n\n    Example:\n\n            formatter = TextFormatter(\n                    (\n                            {'width': 10},\n                            {'width': 12, 'margin': 4},\n                            {'width': 20, 'margin': 8, 'alignment': right},\n                    )\n            )\n\n            print formatter.compose(\n                    (\n                            \"A rather short paragraph\",\n                            \"Here is a paragraph containing a veryveryverylongwordindeed.\",\n                            \"And now for something on the right-hand side.\",\n                    )\n            )\n\n    gives:\n\n            A rather      Here is a                    And now for\n            short         paragraph               something on the\n            paragraph     containing a            right-hand side.\n                                      veryveryvery\n                                      longwordinde\n                                      ed.\n\n    \"\"\"\n    class Column:\n\n        def __init__(self, width=75, alignment=left, margin=0, fill=1, pad=1):\n            self.width = width\n            self.alignment = alignment\n            self.margin = margin\n            self.fill = fill\n            self.pad = pad\n            self.lines = []\n\n        def align(self, line):\n            if self.alignment == center:\n                return string.center(line, self.width)\n            elif self.alignment == right:\n                return string.rjust(line, self.width)\n            else:\n                if self.pad:\n                    return string.ljust(line, self.width)\n                else:\n                    return line\n\n        def wrap(self, text):\n            self.lines = []\n            words = []\n            if self.fill:               # SKWM\n                for word in string.split(text):\n                    wordlen = len(word)\n                    if wordlen &lt;= self.width:  # fixed MRM\n                        words.append(word)\n                    else:\n                        for i in range(0, wordlen, self.width):\n                            words.append(word[i:i+self.width])\n            else:\n                for line in string.split(text,'\\n'):\n                    for word in string.split(line):\n                        for i in range(0, len(word), self.width):\n                            words.append(word[i:i+self.width])\n                    words.append('\\n')\n                if words[-1] == '\\n': words.pop() # remove trailing newline - this comment by MRM\n\n            if words:\n                current = words.pop(0)\n                for word in words:\n                    increment = 1 + len(word)\n                    if word == '\\n':\n                        self.lines.append(self.align(current))\n                        current = ''\n                    elif len(current) + increment &gt; self.width:\n                        self.lines.append(self.align(current))\n                        current = word\n                    else:\n                        if current:\n                            current = current + ' ' + word\n                        else:\n                            current = word\n                if current: self.lines.append(self.align(current))\n\n        def getline(self, index):\n            if index &lt; len(self.lines):\n                return ' '*self.margin + self.lines[index]\n            else:\n                if self.pad:\n                    return ' ' * (self.margin + self.width)\n                else:\n                    return ''\n\n        def numlines(self):\n            return len(self.lines)\n\n    def __init__(self, colspeclist):\n        self.columns = []\n        for colspec in colspeclist:\n            self.columns.append(apply(TextFormatter.Column, (), colspec))\n\n    def compose(self, textlist):\n        numlines = 0\n        textlist = list(textlist)\n        if len(textlist) != len(self.columns):\n            raise IndexError, \"Number of text items does not match columns\"\n        for text, column in map(None, textlist, self.columns):\n            column.wrap(text)\n            numlines = max(numlines, column.numlines())\n        complines = [''] * numlines\n        for ln in range(numlines):\n            for column in self.columns:\n                complines[ln] = complines[ln] + column.getline(ln)\n        return string.join(complines, '\\n') + '\\n'\n        #return string.join(complines, '\\n')\n\n\ndef test():\n    formatter = TextFormatter(\n            (\n                    {'width': 10},\n                    {'width': 12, 'margin': 4, 'fill': 0},\n                    {'width': 20, 'margin': 8, 'alignment': right},\n            )\n    )\n\n    result = formatter.compose(\n            (\n                    \"A rather short paragraph\",\n                    \"Here is\\na paragraph containing a veryveryverylongwordindeed.\",\n                    \"And now for something\\non the right-hand side.\",\n            )\n    )\n\n    print result\n    print\n    for line in result.split('\\n'):\n        print repr(line+'\\n')\n\nif __name__ == '__main__':\n    test()\n</code>\n</pre>\n", "senID": 2}]]