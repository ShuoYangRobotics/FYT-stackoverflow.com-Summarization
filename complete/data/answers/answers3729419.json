[[{"text": ["You can even do"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Hello:\n    def __init__(self):\n        self.greeting = \"Hello!\"\n\nclass Salut:\n    def __init__(self):\n        self.greeting = \"Salut!\"\n\nif my_switch:\n    Hello = Salut\n</code>\n</pre>\n", "senID": 1}, {"text": ["(note that your code needs lower-case Class keywords...)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It's certainly not recommended for localization, as in your example. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The main thing to consider is how much of the code is going to be similar versus different in the specialized versions of the class.", "If only a small amount of code is different, or if only data is different (\"Hello\" vs \"Salut\"), there are better ways."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["One case where I might consider conditional declaration of classes is if I'm providing functionality on two different OSes, and getting that functionality is very different between the two.", "As an example, maybe I'm trying to drive iTunes from a script, and on MacOS I'm using AppleScript to drive it, but on Windows I have to use COM.", "I might create a wrapper class that the rest of my code could use without caring about which OS was in use."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Yes, the code is valid.", "but why not just run the code to find out?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can also do this with function definitions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It is valid code but not really recommended in that format (assuming that code would follow the class declaration).", "Since you will eventually use the class.", "Assuming that you still use two classes named the same, it might be confusing afterward.", "Maybe you should have the code wrapped in a function to return the class that you have created.", "Now you have a basic factory."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "factory", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Factory_method_pattern"}]}, {"code": "<pre>\n<code>\n def HelloFactory(my_switch)\n    if my_switch:\n        class Hello:\n           def __init__(self):\n               self.greeting = \"Hello!\"\n    else:\n        class Hello:\n           def __init__(self):\n               self.greeting = \"Salut!\"\n    return Hello\n\nhelloClass = HelloFactory(False)\nhello = helloClass()\nhello.greeting\n</code>\n</pre>\n", "senID": 1}, {"text": ["Would output \"Salut!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can also put conditions around the \"declarations\" inside the class, since those are executed as part of the class construction:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Hello:\n    if my_switch:\n        igreeting = \"Hello!\"\n    else:\n        igreeting = \"Salut!\"       \n    def __init__(self, greeting):\n            self.greeting = self.igreeting\n</code>\n</pre>\n", "senID": 1}, {"text": ["(igreeting here is a class variable, greeting a member variable)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["or just plain"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Hello:\n    if my_switch:\n        greeting = \"Hello!\"\n    else:\n        greeting = \"Salut!\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["... will usually give the same effect."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["If you like it better, you could put each class definition in a separate .py file and just import the one you want.", "Something like the following:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if my_switch:\n    from hello_en import Hello\nelse:\n    from hello_fr import Hello\n\nh = Hello()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You may not need to repeat the code as you do.", "Ask yourself if you need to repeat the class construction code, or just variables within the class itself?", "If it's the latter, then you could use the same class for both cases using an argument in __init__(), and then conditionally return an instance of the class with the desired variable:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n my_switch = False\n\nclass Hello:\n    def __init__(self, greeting):\n        self.greeting = greeting\n\nif my_switch:\n    mygreeting = \"Hello!\"\nelse:\n    mygreeting = \"Salut!\"\n\nhello = Hello(mygreeting)\nprint hello.greeting\n# =&gt; Salut!\n</code>\n</pre>\n", "senID": 1}]]