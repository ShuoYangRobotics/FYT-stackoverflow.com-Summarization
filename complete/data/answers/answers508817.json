[[{"text": ["Often when I've had performance problems with httplib, the problem hasn't been with the httplib itself, but with how I'm using it.", "Here are a few common pitfalls:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(1) Don't make a new TCP connection for every web request.", "If you are making lots of request to the same server, instead of this pattern:  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\nconn = httplib.HTTPConnection(\"www.somewhere.com\")\n    conn.request(\"GET\", '/foo')\n    conn = httplib.HTTPConnection(\"www.somewhere.com\")\n    conn.request(\"GET\", '/bar')\n    conn = httplib.HTTPConnection(\"www.somewhere.com\")\n    conn.request(\"GET\", '/baz')\n</pre>\n", "senID": 2}, {"text": ["Do this instead:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\nconn = httplib.HTTPConnection(\"www.somewhere.com\")\n    conn.request(\"GET\", '/foo')\n    conn.request(\"GET\", '/bar')\n    conn.request(\"GET\", '/baz')\n</pre>\n", "senID": 4}, {"text": ["(2) Don't serialize your requests.", "You can use threads or asynccore or whatever you like, but if you are making multiple requests from different servers, you can improve performance by running them in parallel."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Do you suspect it or are you sure that that it's httplib?", "Profile before you do anything to improve the performance of your app."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "suspect", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "sure", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "httplib", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["I've found my own intuition on where time is spent is often pretty bad (given that there isn't some code kernel executed millions of times).", "It's really disappointing to implement something to improve performance then pull up the app and see that it made no difference."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you're not profiling, you're shooting in the dark!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["PyCurl is awesome, and extremely high performance."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You seem to assume its the library.", "Its open source, so it would be worth checking the code to see if it is."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You mention that you're sending a lot of data over HTTP.", "The inefficieny might be because of the library, but HTTP isn't the most efficient protocol for sending large amounts of data.", "Then again, it could be the simple use of the library (are you sending a big string or list, or using a stream or generators?", ")."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["httplib2 is another option:\nhttp://code.google.com/p/httplib2/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/httplib2/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/httplib2/"}]}, {"text": ["I have never benchmarked or profiled it in comparison to httplib, but I would also be interested in any findings there."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["As others answered httplib2 is a good alternative because it handles headers properly and can cache responses, but I doubt this would help in POST performance."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["An alternative that might actually give you a performance boost for POST, especially on Windows, is the new HTTP 1.1 client in Twisted.web"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "new HTTP 1.1 client in Twisted.web", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/trac/ticket/886"}]}], [{"text": ["httplib2 is a very good option.", "Joe Gregorio has fixed many bugs of httplib."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It works on my windows machine:\nWith Py 2.3 (without IPv6 support) this is only the IPv4 address,\nbut with Py 2.4-2.6 the order is (on my Win XP host) the IPv6 address\nfirst, then the IPv4 address.", "Since the IPv6 address is checked first,\nthis gives a timeout and causes the slow connect() call. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I have only changed \"localhost\" to 127.0.0.1 and it started working 10 times faster (from 1087ms to 87ms).", "Solution from http://www.velocityreviews.com/forums/t668272-problem-with-slow-httplib-connections-on-windows-and-maybe-otherplatforms.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.velocityreviews.com/forums/t668272-problem-with-slow-httplib-connections-on-windows-and-maybe-otherplatforms.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.velocityreviews.com/forums/t668272-problem-with-slow-httplib-connections-on-windows-and-maybe-otherplatforms.html"}]}]]