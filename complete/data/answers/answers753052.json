[[{"text": ["I think you will want to look into Beautiful Soup.", "Once you do, use the advice from this article and strip the HTML elements very simply like this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Beautiful Soup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}, {"text": "this article", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ghastlyfop.com/blog/2008/12/strip-html-tags-from-string-python.html"}]}, {"code": "<pre>\n<code>\n from BeautifulSoup import BeautifulSoup\n\n''.join(BeautifulSoup(page).findAll(text=True))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I always used this function to strip html tags, as it requires only the python stdlib."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from HTMLParser import HTMLParser\n\nclass MLStripper(HTMLParser):\n    def __init__(self):\n        self.reset()\n        self.fed = []\n    def handle_data(self, d):\n        self.fed.append(d)\n    def get_data(self):\n        return ''.join(self.fed)\n\ndef strip_tags(html):\n    s = MLStripper()\n    s.feed(html)\n    return s.get_data()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I haven't thought much about the cases it will miss, but you can do a simple regex:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.sub('&lt;[^&lt;]+?&gt;', '', text)\n</code>\n</pre>\n", "senID": 1}, {"text": ["For those that don't understand regex, this searches for a string '&lt;...>', where the inner content is made of one or more (+) characters that isn't a '&lt;'.", "The '?", "' means that it will match the smallest string it can find.", "eg.", "Given &lt;'p>Hello&lt;'/p>, it will match &lt;'p> and &lt;'/p> separately with the '?'.", "Without it, it will match the entire string &lt;..Hello..>."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "&lt;'p>Hello&lt;'/p>", "childNum": 0, "tag": "em", "pos": 4, "childList": []}, {"text": "&lt;'p>", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "&lt;'/p>", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "&lt;..Hello..>", "childNum": 0, "tag": "em", "pos": 5, "childList": []}]}, {"text": ["If non-tag '&lt;' appears in html (eg.", "2 &lt; 3), it should be written as an escape sequence &amp;... anyway so the '^&lt;' may be unnecessary."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You can use either a different HTML parser (like lxml, or Beautiful Soup) -- one that offers functions to extract just text.", "Or, you can run a regex on your line string that strips out the tags.", "See http://www.amk.ca/python/howto/regex/ for more."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "like lxml", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/"}, {"text": "Beautiful Soup", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}, {"text": "http://www.amk.ca/python/howto/regex/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/regex/"}]}], [{"text": ["you can write your own function"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def StripTags(text): \n     finished = 0 \n     while not finished: \n         finished = 1 \n         start = text.find(\"&lt;\") \n         if start &gt;= 0: \n             stop = text[start:].find(\"&gt;\") \n             if stop &gt;= 0: \n                 text = text[:start] + text[start+stop+1:] \n                 finished = 0 \n     return text\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This method works flawlessly for me and requires no additional installations:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nimport htmlentitydefs\n\ndef convertentity(m):\n    if m.group(1)=='#':\n        try:\n            return unichr(int(m.group(2)))\n        except ValueError:\n            return '&amp;#%s;' % m.group(2)\n        try:\n            return htmlentitydefs.entitydefs[m.group(2)]\n        except KeyError:\n            return '&amp;%s;' % m.group(2)\n\ndef converthtml(s):\n    return re.sub(r'&amp;(#?)(.+?);',convertentity,s)\n\nhtml =  converthtml(html)\nhtml.replace(\"&amp;nbsp;\", \" \") ## Get rid of the remnants of certain formatting(subscript,superscript,etc).\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I needed a way to strip tags and decode HTML entities to plain text.", "The following solution is based on Eloff's answer (which I couldn't use because it strips entities)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from HTMLParser import HTMLParser\nimport htmlentitydefs\n\nclass HTMLTextExtractor(HTMLParser):\n    def __init__(self):\n        HTMLParser.__init__(self)\n        self.result = [ ]\n\n    def handle_data(self, d):\n        self.result.append(d)\n\n    def handle_charref(self, number):\n        codepoint = int(number[1:], 16) if number[0] in (u'x', u'X') else int(number)\n        self.result.append(unichr(codepoint))\n\n    def handle_entityref(self, name):\n        codepoint = htmlentitydefs.name2codepoint[name]\n        self.result.append(unichr(codepoint))\n\n    def get_text(self):\n        return u''.join(self.result)\n\ndef html_to_text(html):\n    s = HTMLTextExtractor()\n    s.feed(html)\n    return s.get_text()\n</code>\n</pre>\n", "senID": 1}, {"text": ["A quick test:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n html = u'&lt;a href=\"#\"&gt;Demo &lt;em&gt;(&amp;not; \\u0394&amp;#x03b7;&amp;#956;&amp;#x03CE;)&lt;/em&gt;&lt;/a&gt;'\nprint repr(html_to_text(html))\n</code>\n</pre>\n", "senID": 3}, {"text": ["Result:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n u'Demo (\\xac \\u0394\\u03b7\\u03bc\\u03ce)'\n</code>\n</pre>\n", "senID": 5}, {"text": ["Error handling:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Invalid HTML structure may cause an ", "tag": "none", "senID": 7}, {"text": "Invalid named HTML entities (such as ", "tag": "none", "senID": 8}, {"text": "Numeric HTML entities specifying code points outside the Unicode range acceptable by Python (such as, on some systems, characters outside the ", "tag": "none", "senID": 9}]}]]