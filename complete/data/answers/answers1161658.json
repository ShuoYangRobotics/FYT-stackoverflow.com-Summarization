[[{"text": ["FTFY."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Seriously though, it will help you but confuse and annoy other Python programmers that try to read your code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This also isn't as necessary because of how Python itself works.", "For example you would never need your \"mVariable\" form because it's obvious in Python:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "never", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class Example(object):\n    def__init__(self):\n        self.my_member_var = \"Hello\"\n\n    def sample(self):\n        print self.my_member_var\n\ne = Example()\ne.sample()\nprint e.my_member_var\n</code>\n</pre>\n", "senID": 3}, {"text": ["No matter how you access a member variable (using self.foo or myinstance.foo) it's always clear that it's a member."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "self.foo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "myinstance.foo", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The other cases might not be so painfully obvious, but if your code isn't simple enough that a reader can keep in mind \"the 'names' variable is a parameter\" while reading a function you're probably doing something wrong."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Use PEP-8.", "It is almost universal in the Python world."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I violate PEP8 in my code.", "I use: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "lowercaseCamelCase for methods and functions", "tag": "none", "senID": 1}, {"text": "_prefixedWithUnderscoreLowercaseCamelCase for \"private\" methods", "tag": "none", "senID": 2}, {"text": "underscore_spaced for variables (any)", "tag": "none", "senID": 3}, {"text": "_prefixed_with_underscore_variables for \"private\" self variables (attributes)", "tag": "none", "senID": 4}, {"text": "CapitalizedCamelCase for classes and modules (although I am moving to lowercasedmodules)", "tag": "none", "senID": 5}]}, {"text": ["I never liked hungarian notation.", "A variable name should be easy and concise, provide sufficient information to be clear where (in which scope) it's used and what is its purpose, easy to read, concerned about the meaning of what it refers to, not its technical mumbo-jumbo (eg.", "type)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The reason behind my violations are due to practical considerations, and previous experience."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "in C++ and Java, it's tradition to have CapitalizedCamel for classes and lowercaseCamel for member functions.", "tag": "none", "senID": 8}, {"text": "I worked on a codebase where the underscore prefix was used to indicate private but not that much private. We did not want to mess with the python name mangling (double underscore). This gave us the chance to violate a bit the formalities and peek the internal class state during unit testing.", "tag": "none", "senID": 9}]}], [{"text": ["There exists a handy pep-8 compliance script you can run against your code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://github.com/cburroughs/pep8.py/tree/master"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://github.com/cburroughs/pep8.py/tree/master", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/cburroughs/pep8.py/tree/master"}]}], [{"text": ["It'll depend on the project and the target audience."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you're building an open source application/plug-in/library, stick with the PEP guidelines."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If this is a project for your company, stick with the company conventions, or something similar."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If this is your own personal project, then use what ever convention is fluid and easy for you to use."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I hope this makes sense."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You should simply be consistent with your naming conventions in your own code.", "However, if you intend to release your code to other developers you should stick to PEP-8."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example the 4 spaces vs. 1 tab is a big deal when you have a collaborative project.", "People submitting code to a source repository with tabs requires developers to be constantly arguing over whitespace issues (which in Python is a BIG deal)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Python and all languages have preferred conventions.", "You should learn them."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Java likes mixedCaseStuff."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["C likes szHungarianNotation."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Python prefers stuff_with_underscores."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["You can write Java code with_python_type_function_names.", "You can write Python code with javaStyleMixedCaseFunctionNamesThatAreSupposedToBeReallyExplict"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["as long as your consistant :p"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]]