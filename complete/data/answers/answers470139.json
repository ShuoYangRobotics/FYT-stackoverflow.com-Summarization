[[{"text": ["Your expression is the same as:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 1+(+(+2))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Any numeric expression can be preceded by - to make it negative, or + to do nothing (the option is present for symmetry).", "With negative signs:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "-", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n 1-(-(2)) = 1-(-2)\n         = 1+2\n         = 3\n</code>\n</pre>\n", "senID": 3}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n 1-(-(-2)) = 1-(2)\n          = -1\n</code>\n</pre>\n", "senID": 5}, {"text": ["I see you clarified your question to say that you come from a C background.", "In Python, there are no increment operators like ++ and -- in C, which was probably the source of your confusion.", "To increment or decrement a variable i in Python use this style:"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "++", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "--", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n i += 1\nj -= 1\n</code>\n</pre>\n", "senID": 7}], [{"text": ["The extra +'s are not incrementors (like ++a or a++ in c++).", "They are just showing that the number is positive."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There is no such ++ operator.", "There is a unary + operator and a unary - operator though.", "The unary + operator has no effect on its argument.", "The unary - operator negates its operator or mulitplies it by -1. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n +1\n</code>\n</pre>\n", "senID": 2}, {"text": ["-> 1"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ++1\n</code>\n</pre>\n", "senID": 4}, {"text": ["-> 1"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["This is the same as +(+(1))"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n 1+++2\n</code>\n</pre>\n", "senID": 7}, {"text": ["-> 3\nBecause it's the same as 1 + (+(+(2))"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Likewise you can do --1 to mean - (-1)  which is +1."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n --1\n</code>\n</pre>\n", "senID": 10}, {"text": ["-> 1"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["For completeness there is no * unary opeartor.", "So *1 is an error.", "But there is a ** \noperator which is power of, it takes 2 arguments. "], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n 2**3\n</code>\n</pre>\n", "senID": 13}, {"text": ["-> 8"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}], [{"text": ["1+(+(+2)) = 3"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1 - (-2) = 3"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["1 - (-(-2)) = -1"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Trying Unary Plus and Unary minus:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Unary Plus and Unary minus", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/expressions.html#unary-arithmetic-operations"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; +2\n2\n&gt;&gt;&gt; ++2\n2\n&gt;&gt;&gt; +++2\n2\n&gt;&gt;&gt; -2\n-2\n&gt;&gt;&gt; --2\n2\n&gt;&gt;&gt; ---2\n-2\n&gt;&gt;&gt; 1+(++2)\n3\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I believe it's being parsed as, the first + as a binary operation (add), and the rest as unary operations (make positive). "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 1 + (+(+2))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Think it as 1 + (+1*(+1*2))).", "The first + is operator and following plus signs are sign of second operand (= 2)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Just like 1---2 is same as 1 - -(-(2)) or 1- (-1*(-1*(2))"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It's simple.", "There are no post-incrementation or post-decrementation operators in Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See here: http://mail.python.org/pipermail/python-list/2006-January/361771.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://mail.python.org/pipermail/python-list/2006-January/361771.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2006-January/361771.html"}]}]]