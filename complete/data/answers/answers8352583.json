[[{"text": ["You probably don't want Schedule to be a subclass of Time; the relationship between the two is most likely \"has a\" rather than \"is a\".", "Just make it a subclass of object and you should be fine."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You don't really need to change anything in your code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, you can:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Document it to make it clear the expected type of the parameters (I recommend ", "tag": "none", "senID": 2}, {"text": "Write assertions to make sure the type passed matches your expectations (", "tag": "none", "senID": 3}, {"text": "Write unittests also to make sure that the whole API works as expected, that is, only the expected types are accepted (", "tag": "none", "senID": 4}]}, {"text": ["Regarding Schedule being a subclass of Time, I agree with the other answers."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Schedule", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Time", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Some dynamically-typed languages would want you to do this everywhere (statically-typed languages will generally enforce it themselves), but in Python the generally recommended practice is duck typing, which suggests that you just expect it to be a Time, but if it's something else, don't worry (if it implements the same interface as Time, well and good, if it doesn't, let it fail when you try accessing attributes that don't exist on the object).", "The general idea there is that you are expected to be intelligent enough to know what you're doing."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "duck typing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Duck_typing"}]}, {"text": ["If a I were writing this code, I would leave it as you have it, with a few notes:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "As others have mentioned, change ", "tag": "none", "senID": 2}, {"text": "In ", "tag": "none", "senID": 3}, {"text": "If you're in Python 2, change ", "tag": "none", "senID": 4}]}], [{"text": ["Would you say that \"a schedule is a time\" ?", "I wouldn't.", "This implies that they don't inherit in this way.", "I'd say that a schedule is a collection of times, which means that your schedule class will have an attribute which is a listing of times."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Since in pyton, type cannot be checked at compile time you need to write something like this on init of Schedule"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if not isinstance(start_time, Time):\n     raise ValueError(\"Start time need to be of type time\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n assert isinstance(start_time, Time)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Similarly for end_time also"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "end_time", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Generally best practice in Python is to treat it as if it is a Time object and simply test whether it has the properties that you want rather than using isinstance.", "That way someone (including you) could create your own Time-like object in the future with the appropriate attributes (hr, min, ampm) and use it as a drop-in replacement.", "This would even work\u2013if you aren't doing substantive logic with the Time objects or interact with that logic using operators\u2013with their own custom objects that don't use the same fields.", "That would have a few good advantages, depending on exactly how your schedule objects work. "], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "Time", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "isinstance", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Time", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "hr", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "min", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "ampm", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Time", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["This style of coding is known as \"Easier to ask for forgiveness than permission\" and is relatively common in python, thanks to widespread use of duck typing. "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Easier to ask for forgiveness than permission", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/glossary.html#term-eafp"}, {"href": "http://en.wikipedia.org/wiki/Duck_typing#In_Python", "text": "duck typing", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["A somewhat better pattern than using isinstance that still lets you check whether it conforms to a standard (if you want to do that) might be to use hasattr instead.", "For example:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "isinstance", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "hasattr", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["hasattr(start_time, 'ampm')"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "hasattr(start_time, 'ampm')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I'll also agree with the others that a Schedule doesn't seem to have a is a relationship with Time but rather a has a relationship, else you could end up with someone creating a schedule with a Schedule as the start time and a Schedule as the end time. "], "childNum": 6, "tag": "p", "senID": 4, "childList": [{"text": "Schedule", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is a", "childNum": 0, "tag": "em", "childList": []}, {"text": "Time", "childNum": 0, "tag": "code", "childList": []}, {"text": "has a", "childNum": 0, "tag": "em", "childList": []}, {"text": "Schedule", "childNum": 0, "tag": "code", "childList": []}, {"text": "Schedule", "childNum": 0, "tag": "code", "childList": []}]}]]