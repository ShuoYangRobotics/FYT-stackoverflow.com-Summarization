[[{"text": ["How about this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #Only for use in Python 2.6.0a2 and later\nfrom __future__ import print_function\n</code>\n</pre>\n", "senID": 1}, {"text": ["This allows you to use the Python 3.0 style print function without having to hand-edit all occurrences of print :)"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["First of all, you're missing a quote at the beginning but this is probably a copy/paste error."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In Python 3.x, the end=' ' part will place a space after the displayed string instead of a newline.", "To do the same thing in Python 2.x, you'd put a comma at the end:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "end=' '", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print \"Building internam Index for %d tile(s) ...\" % len(inputTiles),\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Are you sure you are using Python 3.x?", "The syntax isn't available in Python 2.x because print is still a statement."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["print(\"foo\" % bar, end=\" \")"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "print(\"foo\" % bar, end=\" \")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["in Python 2.x is identical to"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["print (\"foo\" % bar, end=\" \")"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "print (\"foo\" % bar, end=\" \")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["print \"foo\" % bar, end=\" \""], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "print \"foo\" % bar, end=\" \"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["i.e.", "as a call to print with a tuple as argument."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["That's obviously bad syntax (literals don't take keyword arguments).", "In Python 3.x print is an actual function, so it takes keyword arguments, too."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["The correct idiom in Python 2.x for end=\" \" is:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "end=\" \"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["print \"foo\" % bar,"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "print \"foo\" % bar,", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(note the final comma, this makes it end the line with a space rather than a linebreak)"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["If you want more control over the output, consider using sys.stdout directly.", "This won't do any special magic with the output."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "sys.stdout", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Of course in somewhat recent versions of Python 2.x (2.5 should have it, not sure about 2.4), you can use the __future__ module to enable it in your script file:"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "__future__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["from __future__ import print_function"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "from __future__ import print_function", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The same goes with unicode_literals and some other nice things (with_statement, for example).", "This won't work in really old versions (i.e.", "created before the feature was introduced) of Python 2.x, though."], "childNum": 2, "tag": "p", "senID": 14, "childList": [{"text": "unicode_literals", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "with_statement", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["It looks like you're just missing an opening double-quote.", "Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if Verbose:\n   print(\"Building internam Index for %d tile(s) ...\" % len(inputTiles), end=' ')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think the author probably meant:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if Verbose:\n   print(\"Building internam Index for %d tile(s) ...\" % len(inputTiles), end=' ')\n</code>\n</pre>\n", "senID": 1}, {"text": ["He's missing an initial quote after print(."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "print(", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Note that as of Python 3.0, print is a function as opposed to a statement, if you're using older versions of Python the equivalent would be:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Python 3.0", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/3.0.1/whatsnew/3.0.html#print-is-a-function"}, {"text": "print", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n print \"Building internam Index for %d tile(s) ...\" % len(inputTiles)\n</code>\n</pre>\n", "senID": 4}, {"text": ["The end parameter means that the line gets ' ' at the end rather than a newline character.", "The equivalent in earlier versions of Python is:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "end", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "' '", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n print \"Building internam Index for %d tile(s) ...\" % len(inputTiles),\n</code>\n</pre>\n", "senID": 6}, {"text": ["(thanks Ignacio)."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I think he's using Python 3.0 and you're using Python 2.6."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]