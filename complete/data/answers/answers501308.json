[[{"text": ["Maybe best explained with an example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print \"\".join([e[1] * e[0] for e in elt])\n</code>\n</pre>\n", "senID": 1}, {"text": ["is the short form of"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x = []\nfor e in elt:\n  x.append(e[1] * e[0])\nprint \"\".join(x)\n</code>\n</pre>\n", "senID": 3}, {"text": ["List comprehensions are simply syntactic sugar for for loops, which make an expression out of a sequence of statements."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["elt can be an arbitrary object, since you load it from pickles, and e likewise.", "The usage suggests that is it a sequence type, but it could just be anything that implements the sequence protocol."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "elt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "e", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-buffer-xrange", "text": "sequence", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Firstly, you need to put http:// in front of the URL, ie:\nhandle = urllib.urlopen(\"http://www.pythonchallenge.com/pc/def/banner.p\")"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["An expression [e for e in aList] is a list comprehension which generates a list of values."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "list comprehension", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/List_comprehension"}]}, {"text": ["With Python strings, the * operator is used to repeat a string.", "Try typing in the commands one by one into an interpreter then look at data:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; data[0]\n[(' ', 95)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["This shows us each line of data is a tuple containing two elements."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Thus the expression e[1] * e[0] is effectively the string in e[0] repeated e[1] times."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Hence the program draws a banner."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["[e[1] * e[0] for e in elt] is a list comprehension, which evaluates to a list itself by looping through another list, in this case elt.", "Each element in the new list is e[1]*e[0], where e is the corresponding element in elt."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "[e[1] * e[0] for e in elt]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "elt", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "e[1]*e[0]", "childNum": 0, "tag": "code", "childList": []}, {"text": "e", "childNum": 0, "tag": "code", "childList": []}, {"text": "elt", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["join() is a string method, that works on a separator in new string"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ':'.join(['ab', 'cd'])\n&gt;&gt;&gt; 'ab:cd'\n</code>\n</pre>\n", "senID": 1}, {"text": ["and list comprehension is not necessary there, generator would suffice"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Andy's is a great answer!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want to see every step of the loop (with line-breaks) try this out:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for elt in data:\n    for e in elt:\n        print \"e[0] == %s, e[1] == %d, which gives us:  '%s'\" % (e[0], e[1], ''.join(e[1] * e[0]))\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The question itself has already been fully answered but I'd like to add that a list comprehension also supports filtering.", "Your original line"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print \"\".join([e[1] * e[0] for e in elt])\n</code>\n</pre>\n", "senID": 1}, {"text": ["could,  as an example,  become"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print \"\".join([e[1] * e[0] for e in elt if len(e) == 2])\n</code>\n</pre>\n", "senID": 3}, {"text": ["to only operate on items in elt that have two elements."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]