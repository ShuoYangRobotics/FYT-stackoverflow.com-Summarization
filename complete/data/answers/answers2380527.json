[[{"text": ["You can do this by adding/editing the suite() function in tests.py which defines what tests will be run by the django test runner."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import unittest\nimport doctest\nfrom project import views\n\ndef suite():\n    suite = unittest.TestSuite()\n    suite.addTest(doctest.DocTestSuite(views))\n    return suite\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then just run your tests as usual and you should see your doctests in views.py run."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ python manage.py test project\n</code>\n</pre>\n", "senID": 3}, {"text": ["This is described in more detail in the django testing documentation"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "django testing documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/1.2/topics/testing/"}]}, {"text": ["However, keep in mind that constructing your own test suite means that the django test runner will not automatically run any tests you have in tests.py.", "You'll have to add these into your suite manually, for example"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n import unittest\nimport doctest\nfrom project import views\n\nclass FooTestCase(unittest.TestCase):\n    def testFoo(self):\n        self.assertEquals('foo', 'bar')\n\ndef suite():\n    suite = unittest.TestSuite()\n    suite.addTest(doctest.DocTestSuite(views))\n    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(FooTestCase))\n    return suite\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Use nosetests with plugin for django (django-sane-testing or django-nose) and use --with-doctests."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You could try to write your own testrunner and see, if you can include other files to be checked for doc tests."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "testrunner", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["http://docs.djangoproject.com/en/dev/topics/testing/#defining-a-test-runner"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.djangoproject.com/en/dev/topics/testing/#defining-a-test-runner", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/testing/#defining-a-test-runner"}]}], [{"text": ["Django's native testing system is based on unittest package.", "So it is not as powerful as it can be."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "unittest", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I recommend you using nose that is backward-compatible unittest on steroids.", "Use it along with Django test runner that uses nose.", "You can customize nose in many ways including pointing it to custom test locations using -m flag."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "nose", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose/0.11.2/"}, {"text": "unittest", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Django test runner that uses nose", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/django-nose"}, {"text": "-m", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["This is my tests/__init__.py implementation, based on Jesse Shieh answer:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "tests/__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/2380527/django-doctests-in-views-py/3030065#3030065", "text": "Jesse Shieh answer", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import doctest\nimport unittest\n\nlist_of_doctests = [\n    'myapp.views.myview',\n    'myapp.forms.myform',\n]\nlist_of_unittests = [\n    'sometestshere',  # This file is myapp/tests/sometestshere.py\n    'moretestshere',  # This file is myapp/tests/moretestshere.py\n    'myapp.tests.othertest',  # Absolute paths also work.\n]\n\ndef suite():\n    suite = unittest.TestSuite()\n    for t in list_of_doctests:\n        suite.addTest(doctest.DocTestSuite(\n            __import__(t, globals(), locals(), fromlist=[\"*\"])\n        ))\n    for t in list_of_unittests:\n        suite.addTest(unittest.TestLoader().loadTestsFromModule(\n            __import__(t, globals(), locals(), fromlist=[\"*\"])\n        ))\n    return suite\n</code>\n</pre>\n", "senID": 1}, {"text": ["Basically, this solution allows adding arbitrary \"files\" (actually, modules) to the test suite.", "It allows splitting the unit tests into separate files, and allows adding any module that contains doctests.", "Just add the module names to the appropriate list at the top of this file."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I posted a github gist that lets you run test in any file or module in your project.", "Running doctests from specific modules and files"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Running doctests from specific modules and files", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://dodrum.blogspot.com/2011/01/running-doctests-in-django-project.html"}]}]]