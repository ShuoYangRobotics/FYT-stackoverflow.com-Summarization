[[{"code": "<pre>\n<code>\n l = [15, 18, 2, 36, 12, 78, 5, 6, 9]\nsum(l) / float(len(l))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If your reduce is already returning your sum, then all you have left to do is divide."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = [15, 18, 2, 36, 12, 78, 5, 6, 9]\nprint reduce(lambda x, y: x + y, l) / len(l)\n</code>\n</pre>\n", "senID": 1}, {"text": ["though sum(l)/len(l) would be simpler, as you wouldn't need a lambda."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "sum(l)/len(l)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you want a more exact float result instead of an int then just use float(len(l)) instead of len(l)."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "float(len(l))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "len(l)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Why would you use reduce() for this when Python has a perfectly cromulent sum() function?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "reduce()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sum()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n print sum(l) / float(len(l))\n</code>\n</pre>\n", "senID": 1}, {"text": ["(The float() is necessary to force Python to do a floating-point division."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "float()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Or you could use numpy:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = [15, 18, 2, 36, 12, 78, 5, 6, 9]\n\nimport numpy as np\nprint np.mean(l)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n print reduce(lambda x, y: x + y, l)/(len(l)*1.0)\n</code>\n</pre>\n", "senID": 0}, {"text": ["or like posted previously"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n sum(l)/(len(l)*1.0)\n</code>\n</pre>\n", "senID": 2}, {"text": ["The 1.0 is to make sure you get a floating point division"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["In order to use reduce for taking a running average, you'll need to track the total but also the total number of elements seen so far.", "since that's not a trivial element in the list, you'll also have to pass reduce an extra argument to fold into.  "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "reduce", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "reduce", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [15, 18, 2, 36, 12, 78, 5, 6, 9]\n&gt;&gt;&gt; running_average = reduce(lambda aggr, elem: (aggr[0] + elem, aggr[1]+1), l, (0.0,0))\n&gt;&gt;&gt; running_average[0]\n(181.0, 9)\n&gt;&gt;&gt; running_average[0]/running_average[1]\n20.111111111111111\n</code>\n</pre>\n", "senID": 1}], [{"text": ["sum(l) / float(len(l)) is the right answer, but just for completeness you can compute an average with a single reduce:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sum(l) / float(len(l))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; reduce(lambda x, y: x + y / float(len(l)), l, 0)\n20.111111111111114\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that this can result in a slight rounding error:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sum(l) / float(len(l))\n20.111111111111111\n</code>\n</pre>\n", "senID": 3}]]