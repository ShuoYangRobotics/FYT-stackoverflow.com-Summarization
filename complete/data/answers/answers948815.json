[[{"text": ["CherryPy might be what you need.", "It transparently maps URLs onto Python functions, and handles all the cookie and session stuff (and of course the POST / GET parameters for you)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CherryPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cherrypy.org"}]}, {"text": ["It's not a full-stack solution like Django or Rails.", "On the other hand, that means that it doesn't lump you with a template engine or ORM you don't like; you're free to use whatever you like."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It includes a WSGI compliant web server, so you don't even need Apache."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["What you're describing most resembles Pylons, it seems to me.", "However, the number of web frameworks in/for Python is huge -- see this page for an attempt to list and VERY briefly characterize each and every one of them!-)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Pylons", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pylonshq.com/"}, {"text": "this page", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/WebFrameworks"}]}], [{"text": ["For low barrier to entry, web.py is very very light and simple. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "web.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://webpy.org/"}]}, {"text": ["Features:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "easy (dev) deploy... copy web.py folder into your app directory, then start the server", "tag": "none", "senID": 2}, {"text": "regex-based url mapping", "tag": "none", "senID": 3}, {"text": "very simple class mappings", "tag": "none", "senID": 4}, {"text": "built-in server (most frameworks have this of course)", "tag": "none", "senID": 5}, {"text": ["very thin"], "childNum": 0, "tag": "em", "senID": 6, "childList": []}]}, {"text": ["Here is its hello world:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "hello world", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import web\n\nurls = (\n    '/(.*)', 'hello'\n)\napp = web.application(urls, globals())\n\nclass hello:        \n    def GET(self, name):\n        if not name: \n            name = 'world'\n        return 'Hello, ' + name + '!'\n\nif __name__ == \"__main__\":\n    app.run()\n</code>\n</pre>\n", "senID": 8}, {"text": ["As much as I like Werkzeug conceptually, writing wsgi plumbing in the Hello, World!", "is deeply unpleasant, and totally gets in the way of actually demoing an app.  "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["That said, web.py isn't perfect, and for big jobs, it's probably not the right tool, since:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "routes style systems are (imho) better than pure regex ones", "tag": "none", "senID": 11}, {"text": "integrating web.py with other middlewares might be adventurous", "tag": "none", "senID": 12}]}], [{"text": ["Look at:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["WSGI"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Django"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["web.py"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}], [{"text": ["Have you looked into the Django web framework?", "Its an MVC framework written in python, and is relatively simple to set up and get started.", "You can run it with nothing but python, as it can use SQLite and its own development server, or you can set it up to use MySQL and Apache if you'd like."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://djangoproject.com"}]}, {"text": ["Pylons is another framework that supports SQLAlchemy for models.", "I've never used it but it seems promising."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Pylons", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pylonshq.com/"}]}], [{"text": ["Check out web2py.", "It runs out of the box with no configuration - even from a USB stick.", "The template language is pure Python and you can develop your entire app through the browser editor (although I find vim faster ;)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "web2py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://web2py.com/"}]}], [{"text": ["Don't forget Bottle.", "It is a single-file micro web framework with no dependencies and very easy to use.", "Here is an \"Hello world\" example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Bottle", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bottle.paws.de"}]}, {"code": "<pre>\n<code>\n from bottle import route, run\n@route('/')\ndef index():\n    return 'Hello World!'\nrun(host='localhost', port=8080)\n</code>\n</pre>\n", "senID": 1}, {"text": ["And here an example for accessing POST variables (cookies and GET vars are similar)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from bottle import route, request\n@route('/submit', method='POST')\ndef submit():\n    name = request.POST.get('name', 'World')\n    return 'Hello %s!' % name\n</code>\n</pre>\n", "senID": 3}]]