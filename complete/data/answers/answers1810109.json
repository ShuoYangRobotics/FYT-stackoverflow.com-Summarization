[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; import ast\n&gt;&gt;&gt; print ast.literal_eval(\"(8, 12.25), (13, 15), (16.75, 18.5)\")\n((8, 12.25), (13, 15), (16.75, 18.5))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I've used safe_eval for jobs like this in the past.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "safe_eval", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/28369/is-safeeval-really-safe"}]}], [{"text": ["If you're working with a CSV file, and you want more than the \"naive\" solution which doesn't handle any errors, you're probably best off using the Python's CSV module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python's CSV module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}], [{"text": ["Download PyParsing."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyParsing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyparsing.wikispaces.com/"}]}, {"text": ["I've worked with it before.", "You can get some pretty robust parsing behavior out of it, and I think it provides builtins that will handle your entire parsing needs with this sort of thing.", "Look up commaSeparatedList and nestedExpr."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n def parse(s):\n    tuples = s.split('), ')\n    out = []\n    for x in tuples:\n        a,b = x.strip('()').split(', ')\n        out.append((float(a),float(b)))\n    return out\n</code>\n</pre>\n", "senID": 0}, {"text": ["this should do the job."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["what's wrong with doing it systematically ?", "split on \")\", then go through the list, remove all \"(\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s=\"(8, 12.25), (13, 15), (16.75, 18.5)\"\n&gt;&gt;&gt; [ i.replace(\"(\",\"\") for i in s.split(\")\") ]\n['8, 12.25', ', 13, 15', ', 16.75, 18.5', '']\n&gt;&gt;&gt; b = [ i.replace(\"(\",\"\") for i in s.split(\")\") ]\n&gt;&gt;&gt; for i in b:\n...  print i.strip(\", \").replace(\" \",\"\").split(\",\")\n...\n['8', '12.25']\n['13', '15']\n['16.75', '18.5']\n['']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now you can bring each element into your data structure."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]