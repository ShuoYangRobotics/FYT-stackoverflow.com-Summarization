[[{"text": ["Alex is absolutely right, it's more efficient to do it this way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from array import array\noutput_file = open('file', 'wb')\nfloat_array = array('d', [3.14, 2.7, 0.0, -1.0, 1.1])\nfloat_array.tofile(output_file)\noutput_file.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["And then read the array like that:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n input_file = open('file', 'r')\nfloat_array = array('d')\nfloat_array.fromstring(input_file.read())\n</code>\n</pre>\n", "senID": 3}, {"text": ["array.array objects also have a .fromfile method which can be used for reading the file, if you know the count of items in advance (e.g.", "from the file size, or some other mechanism)"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "array.array", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".fromfile", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["The array module in the standard library may be more suitable for this task than the struct module which everybody is suggesting.", "Performance with 200 MB of data should be substantially better with array."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "substantially", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["See: Python's struct module"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python's struct module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/struct.html"}]}, {"code": "<pre>\n<code>\n import struct\ns = struct.pack('f'*len(floats), *floats)\nf = open('file','wb')\nf.write(s)\nf.close()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'm not sure how NumPy will compare performance-wise for your application, but it may be worth investigating."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "NumPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}]}, {"text": ["Using NumPy:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "NumPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}]}, {"code": "<pre>\n<code>\n from numpy import array\na = array(floats,'float32')\noutput_file = open('file', 'wb')\na.tofile(output_file)\noutput_file.close()\n</code>\n</pre>\n", "senID": 2}, {"text": ["results in a 20 byte file as well."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["have a look at struct.pack_into"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "struct.pack_into", "tag": "a", "pos": 0, "childList": [{"text": "struct.pack_into", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/struct.html?highlight=struct#struct.pack%5Finto"}, {"text": "struct.pack_into", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["struct.pack() looks like what you need."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/struct.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/struct.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/struct.html"}]}]]