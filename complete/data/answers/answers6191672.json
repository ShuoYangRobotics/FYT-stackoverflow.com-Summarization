[[{"text": ["How about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 501 $ python\nPython 2.7.1+ (r271:86832, Apr 11 2011, 18:13:53) \n[GCC 4.5.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; a = {\"q\":1}\n&gt;&gt;&gt; print a\n{'q': 1}\n&gt;&gt;&gt; a[\"q\"]\n1\n&gt;&gt;&gt; a[\"r\"] = a[\"s\"] = a[\"t\"] = 2\n&gt;&gt;&gt; a\n{'q': 1, 's': 2, 'r': 2, 't': 2}\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could turn it around:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d1 = {\"yes\": [1,2,3], \"no\": [4]}\n</code>\n</pre>\n", "senID": 1}, {"text": ["and then \"invert\" that dictionary:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d2 = {value:key for key in d1 for value in d1[key]}\n&gt;&gt;&gt; d2\n{1: 'yes', 2: 'yes', 3: 'yes', 4: 'no'}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Code golf?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n yesindices = [1,2,3,22,34,33]\nnoindices = [4,8,9]\ndict (zip(yesindices, ['yes' for i in yesindices]) + zip(noindices, ['no' for i in noindices]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["yields"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n {1: 'yes', 2: 'yes', 3: 'yes', 4: 'no', 33: 'yes', 8: 'no', 9: 'no', 34: 'yes', 22: 'yes'}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["For your case"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict([(_, 'yes') for _ in range(1,4)], **{4:'no'})\n</code>\n</pre>\n", "senID": 1}, {"text": ["And if you need multiple keys for 'yes' and 'no'"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "'yes'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'no'", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import chain\n&gt;&gt;&gt; dict(chain([(_, 'yes') for _ in range(1,4)], [(_, 'no') for _ in range(4, 10)]))\n{1: 'yes', 2: 'yes', 3: 'yes', 4: 'no', 5: 'no', 6: 'no', 7: 'no', 8: 'no', 9: 'no'}\n</code>\n</pre>\n", "senID": 3}, {"text": ["Not so great, but works."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n d = {'READY': 'GPLR2_95',\n    95: 'GPLR2_95',\n    'CHARGING': 'GPLR3_99',\n    'PROTECTION': 'GPLR3_100',\n    'CONNECTED': 'GPLR3_101',\n    'ERROR':'GPLR3_102'}\n</code>\n</pre>\n", "senID": 0}, {"text": ["What's wrong with breaking this into multiple lines (as above)?", "Is the point saving typing or saving vertical space?", "Something else?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["BTW, it feels really strange to have keys that are a mix of numbers and strings."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["note: I wrote this as an answer instead of a comment because I wanted to show formatted code on multiple lines."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "note:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n dict((x, {4: 'no'}.get(x, 'yes')) for x in range(1, 5))\n</code>\n</pre>\n", "senID": 0}, {"text": ["Or in 3.x:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n {x: {4: 'no'}.get(x, 'yes') for x in range(1, 5)}\n</code>\n</pre>\n", "senID": 2}]]