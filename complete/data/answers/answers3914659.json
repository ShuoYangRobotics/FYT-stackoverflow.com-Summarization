[[{"text": ["The following can replace your if statement."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in a.split(':'):\n    print i.partition('#')[2]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n a = \"aaaa#b:c:\"\nprint(a.split(\":\")[0].split(\"#\")[1])\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I'd suggest:\nfrom: Python Docs\nstr.rsplit([sep[, maxsplit]])\nReturn a list of the words in the string, using sep as the delimiter string.", "If maxsplit is given, at most maxsplit splits are done, the rightmost ones.", "If sep is not specified or None, any whitespace string is a separator.", "Except for splitting from the right, rsplit() behaves like split() which is described in detail below."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html"}]}, {"text": ["so to answer your question yes."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It depends on how you wish to index your strings too, it looks like Rstring does it from the right, so if your data is always \"rightmost\" you could index by 0 (or 1, not sure how python indexes), every time, rather then having to do a size check of the returned array."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a=\"aaaa#b:c:\"\n&gt;&gt;&gt; a.split(\":\",2)[0].split(\"#\")[-1]\n'b'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["do you really need to use split?", "split create a list, so isn't so efficient..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["what about something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = \"aaaa#b:c:\"\n&gt;&gt;&gt; a[a.find('#') + 1]\n'b'\n</code>\n</pre>\n", "senID": 2}, {"text": ["or if you need particular occurence, use regex instead..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["split would do the job nicely.", "Use rsplit only if you need to split from the last '#'."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "split", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "rsplit", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n a=\"aaaa#b:c:\"\n&gt;&gt;&gt; for i in a.split(\":\"):\n...   print i\n...   b = i.split('#',1)\n...   if len(b)==2:\n...     print b[1]\n</code>\n</pre>\n", "senID": 1}]]