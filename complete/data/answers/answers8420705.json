[[{"text": ["I like to use continue in loops where there are a lot of contitions to be fulfilled before you get \"down to business\".", "So instead of code like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for x, y in zip(a, b):\n    if x &gt; y:\n        z = calculate_z(x, y)\n        if y - z &lt; x:\n            y = min(y, z)\n            if x ** 2 - y ** 2 &gt; 0:\n                lots()\n                of()\n                code()\n                here()\n</code>\n</pre>\n", "senID": 1}, {"text": ["I get code like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for x, y in zip(a, b):\n    if x &lt;= y:\n        continue\n    z = calculate_z(x, y)\n    if y - z &gt;= x:\n        continue\n    y = min(y, z)\n    if x ** 2 - y ** 2 &lt;= 0:\n        continue\n    lots()\n    of()\n    code()\n    here()\n</code>\n</pre>\n", "senID": 3}, {"text": ["By doing it this way I avoid very deeply nested code.", "Also, it is easy to optimize the loop by eliminating the most frequently occurring cases first, so that I only have to deal with the infrequent but important cases (e.g.", "divisor is 0) when there is no other showstopper."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Usually the situation where continue is necessary/useful, is when you want to skip the remaining code in the loop and continue iteration."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I don't really believe it's necessary, since you can always use if statements to provide the same logic, but it might be useful to increase readability of code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n def filter_out_colors(elements):\n  colors = ['red', 'green']\n  result = []\n  for element in elements:\n    if element in colors:\n       continue # skip the element\n    # You can do whatever here\n    result.append(element)\n  return result\n\n  &gt;&gt;&gt; filter_out_colors(['lemon', 'orange', 'red', 'pear'])\n  ['lemon', 'orange', 'pear']\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You might find that using continue makes your code cleaner when you need to handle a case where you need to skip the rest of the loop."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's a slighly cleaned up example from some code I've written recently:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n watchdirs = ['/some/nfs/directory1',\n             '/some/nfs/directory2']\n\nfor dir in watchdirs:\n    try:\n        os.listdir(dir)\n    except OSError:\n        print \"mount not available: %s\\nskipping it for now\" % (dir)\n        continue\n</code>\n</pre>\n", "senID": 2}, {"text": ["Usually you can achieve the same result with an If block wrapping parts of the loop body, but I think this reads better."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Consider this example"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "example", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/8410347/how-to-search-a-file-for-all-positions-within-a-range-in-perl-or-python/8412999"}]}, {"text": ["I have changed the code a bit to include the continue statement.", "This will also help you understand how we can easily circumvent the usage."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "continue", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def Test():\n    fin1=open(\"file1.txt\") #File as per your First Table\n    fin2=open(\"file2.txt\") #File as per your Second Table\n    fin1.readline()        #Skip the Header\n    fin2.readline()        #Skip the Header\n    #Sort The First list and create an Iterator\n    data1=iter(sorted([[f.split()[1],f.split()[2],f.split()[0]] \n               for f in fin1.xreadlines()],key=operator.itemgetter(0))) \n    #Sort The Second List and create an Iterator\n    data2=iter(sorted([f.split() for f in fin2.xreadlines()],\n               key=operator.itemgetter(0))) \n    # Print The Header\n    print \"{0:10}{1:10}{2:10}{3:10}{4:10}{5:10}\".format(\"gene_id\",\n                                                         \"start\",\n                                                         \"stop\",\n                                                         \"position\",\n                                                         \"nucleotide\",\n                                                         \"support\")\n    try:\n        v1=data1.next() #Read First Item from First List\n        v2=data2.next() #Read Second Item from First List\n        #Loop Until One of the List has reached the end\n        while True: \n            if v2[0] &gt; v1[1]:\n                #If the Position is greater than stop range (from first list)\n                #read the next item from the first list\n                v1=data1.next()\n                continue # Example of Continue\n            # If the Position is greater or equal than the start range \n            # (We are in the range)\n            if v2[0] &gt;= v1[0]: \n                #Format and Print it\n                print \"{0:10}{1:10}{2:10}{3:10}{4:10}{5:10}\".format(v1[2],\n                                                                    v1[0],\n                                                                    v1[1],\n                                                                    v2[0],\n                                                                    v2[1],\n                                                                    v2[2]) \n            v2=data2.next() \n    except StopIteration:\n        None\n</code>\n</pre>\n", "senID": 2}], [{"text": ["For example if you want to do diferent things depending on the value of a variable:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for items in range(0,100):\n    if my_var &lt; 10:\n        continue\n    elif my_var == 10:\n        print(\"hit\")\n    elif my_var &gt; 10:\n        print(\"passed\")\n    my_var = my_var + 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["In the example above if I use break the interpreter will skip the loop.", "But with continueit only skips the if-elif statements and go directly to the next item of the loop."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "break", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "continue", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]