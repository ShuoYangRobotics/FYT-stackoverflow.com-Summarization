[[{"text": ["I'll try to give an answer to the second and third question using the Java library which might become part of Java 7."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "I'll try to give an answer to the second and third question using the Java library which might become part of Java 7.", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["These classes are a complete rewrite of JodaTime trying to fix the design flaws of util.Date/util.Time as well as JodaTime."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "util.Date", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "util.Time", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["JSR 310 tries to provide a comprehensive model for date and time, which is type-safe and self-documenting.", "It is interoperable with existing classes, but also considers XML- and DBMS-based use-cases.", "The classes are final, immutable, thread-safe and cannot be modified after construction.", "Instances are created via a rich set of Factory methods which can cache things in the background."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n LocalDate dateToday     = LocalDate.of(2010, 9, 14);\nLocalDate oneMonthLater = dateToday.with(OCTOBER);\nLocalDate oneYearLater  = dateToday.withYear(2011);\n</code>\n</pre>\n", "senID": 3}, {"text": ["The API has some \"machine-oriented\" classes and some \"human-oriented\" classes:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Machine-oriented"], "childNum": 0, "tag": "h2", "senID": 5, "childList": []}, {"text": ["Instant"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "Instant", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Instant", "tag": "code"}]}, {"text": "Instant", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For a point of time comparable to an Unix or Java timestamp.", "Actually there are Instant, TAIInstant and UTCInstant which enable people to exactly choose which definition of time they need i. e. \"day-based\", \"linear, without leap seconds\" etc."], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "Instant", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "TAIInstant", "childNum": 0, "tag": "code", "childList": []}, {"text": "UTCInstant", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Duration"], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "Duration", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Duration", "tag": "code"}]}, {"text": "Duration", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["A time range not necessarily associated with a specific Date or Calendar."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Human-oriented"], "childNum": 0, "tag": "h2", "senID": 10, "childList": []}, {"text": ["There is a rich collection of classes handling different use-cases like Date-only, Time-only, Time and Date, with and without Timezones, with and without DST."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["DateProvider"], "childNum": 2, "tag": "p", "senID": 12, "childList": [{"text": "DateProvider", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "DateProvider", "tag": "code"}]}, {"text": "DateProvider", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["OffsetDate, LocalDate (, java.sql.Date compatibility)"], "childNum": 3, "tag": "p", "senID": 13, "childList": [{"text": "OffsetDate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "LocalDate", "childNum": 0, "tag": "code", "childList": []}, {"text": "java.sql.Date", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["TimeProvider"], "childNum": 2, "tag": "p", "senID": 14, "childList": [{"text": "TimeProvider", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "TimeProvider", "tag": "code"}]}, {"text": "TimeProvider", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["OffsetTime, LocalTime (, java.sql.Time compatibility)"], "childNum": 3, "tag": "p", "senID": 15, "childList": [{"text": "OffsetTime", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "LocalTime", "childNum": 0, "tag": "code", "childList": []}, {"text": "java.sql.Time", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["DateTimeProvider"], "childNum": 2, "tag": "p", "senID": 16, "childList": [{"text": "DateTimeProvider", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "DateTimeProvider", "tag": "code"}]}, {"text": "DateTimeProvider", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["ZonedDateTime, OffsetDateTime, LocalDateTime (, java.util.GregorianCalendar compatibility)"], "childNum": 4, "tag": "p", "senID": 17, "childList": [{"text": "ZonedDateTime", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "OffsetDateTime", "childNum": 0, "tag": "code", "childList": []}, {"text": "LocalDateTime", "childNum": 0, "tag": "code", "childList": []}, {"text": "java.util.GregorianCalendar", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["InstantProvider"], "childNum": 2, "tag": "p", "senID": 18, "childList": [{"text": "InstantProvider", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "InstantProvider", "tag": "code"}]}, {"text": "InstantProvider", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Instant, ZonedDateTime, OffsetDateTime (, java.util.Date compatibility)"], "childNum": 4, "tag": "p", "senID": 19, "childList": [{"text": "Instant", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ZonedDateTime", "childNum": 0, "tag": "code", "childList": []}, {"text": "OffsetDateTime", "childNum": 0, "tag": "code", "childList": []}, {"text": "java.util.Date", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Period"], "childNum": 2, "tag": "p", "senID": 20, "childList": [{"text": "Period", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Period", "tag": "code"}]}, {"text": "Period", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Periods represent a time span like \"5 days\" that can be added and subtracted from a date/time."], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"text": ["Matcher"], "childNum": 2, "tag": "p", "senID": 22, "childList": [{"text": "Matcher", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Matcher", "tag": "code"}]}, {"text": "Matcher", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Matchers enable queries like \"is this date in the year 2006?", "\" or \"is this day the last day of this year\"."], "childNum": 0, "tag": "p", "senID": 23, "childList": []}, {"text": ["Adjuster"], "childNum": 2, "tag": "p", "senID": 24, "childList": [{"text": "Adjuster", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Adjuster", "tag": "code"}]}, {"text": "Adjuster", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Adjusters come to the rescue if you have want to make more complex changes, like \"Give me the last day of the month!", "\" or \"The second Tuesday after Christmas, please!", "\"."], "childNum": 0, "tag": "p", "senID": 25, "childList": []}, {"text": ["Resolver"], "childNum": 2, "tag": "p", "senID": 26, "childList": [{"text": "Resolver", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Resolver", "tag": "code"}]}, {"text": "Resolver", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Resolvers allow users to define what should happen if a certain date is not valid, like February 31st 2010:"], "childNum": 0, "tag": "p", "senID": 27, "childList": []}, {"code": "<pre>\n<code>\n DateResolver previous = DateResolvers.previousValid();\nLocalDate date = date(2010, 2, 30, previous);\n// date = 2010-02-28\n</code>\n</pre>\n", "senID": 28}, {"text": ["Working with Timezone and DST data"], "childNum": 1, "tag": "p", "senID": 29, "childList": [{"text": "Working with Timezone and DST data", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["It is possible to serialize these classes and deserialize them using either the current timezone data or the timezone data when they were serialized.", "Additionally, rules from different timezones can be compared: It is possible to find out if DST rules have changed, e. g. between version 2010e and 2010f for Dates in London or Moscow and decide what should be done if a Time is in a gap or overlap."], "childNum": 0, "tag": "p", "senID": 30, "childList": []}, {"text": ["Calendar systems"], "childNum": 1, "tag": "p", "senID": 31, "childList": [{"text": "Calendar systems", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Although everything is based on ISO-8601, simple calendars for Hebrew, Hijrah, Japanese, ThaiBuddist, etc.", "time systems are provided."], "childNum": 1, "tag": "p", "senID": 32, "childList": [{"text": "ISO-8601", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/ISO_8601"}]}, {"text": ["Formatting and Parsing"], "childNum": 1, "tag": "p", "senID": 33, "childList": [{"text": "Formatting and Parsing", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["toString() returns ISO8601 and patterns like those in SimpleDateFormat and more advanced are supported."], "childNum": 2, "tag": "p", "senID": 34, "childList": [{"text": "toString()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "SimpleDateFormat", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Integration"], "childNum": 1, "tag": "p", "senID": 35, "childList": [{"text": "Integration", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "Databases", "tag": "none", "senID": 36}, {"text": "JodaTime", "tag": "none", "senID": 37}, {"text": "Legacy JDK classes (", "tag": "none", "senID": 38}, {"text": "XML", "tag": "none", "senID": 39}]}, {"text": ["References:"], "childNum": 2, "tag": "p", "senID": 40, "childList": [{"text": "References:", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "References:", "tag": "strong"}]}, {"text": "References:", "childNum": 0, "tag": "strong", "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["https://jsr-310.dev.java.net/nonav/doc-2010-06-22/index.html"], "childNum": 0, "tag": "a", "senID": 41, "childList": []}, {"text": ["JavaZone 2010 - Stephen Colebourne: Time to fix it!", "- JSR-310 Date and Time API"], "childNum": 0, "tag": "a", "senID": 42, "childList": []}]}], [{"text": ["I don't think there's a single standard to such things at the moment, however there are multiple standards which such things may conform to: ISO 8601 for example."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["ICU's own date/time handling is a cross-language (C/C++ and Java) and multi-platform library."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "ICU", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://icu-project.org"}]}, {"text": ["It handles dates and times internally, typically, using for a single time a UDate (C/C++) or a java.util.Date/long (Java), as number of milliseconds since 1-1-1970, or a Calendar object which is specific to the type of calendar (Gregorian vs Hijri, etc).", "Durations are available for formatting.", "Leap years are calculated as part of calendar systems, and leap seconds are assumed to be handled by the underlying operating system.", "DST/Timezone data is kept up to date with 'the tz database' sometimes referred to by its author's surname, Olson."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Hope this has answered your question some as regards ICU."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["There are time(s) and there are dates (calendars)\nThe first problem is that dates are not linked to time but to astronomical position of Earh, Moon, etc.", "+ regularity/periodicity of human activity.", "The time is also subjective and relative or even relativistic and measured either astronomically or or atomically.    "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "There are time(s) and there are dates (calendars)", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["The time bodies and the date/calendar bodies\nThe International Standartization Organization (ISO) [4] has issued   "], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "The time bodies and the date/calendar bodies", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "The International Standartization Organization (ISO)", "childNum": 0, "tag": "em", "childList": []}]}, {"tag": "ul", "num": 1, "lis": [{"text": "\"ISO 8601 Data elements and interchange formats \u2014 Information interchange \u2014 Representation of dates and times\" [4a]   ", "tag": "none", "senID": 2}]}, {"text": ["which, like other international standards,  is recommendation and is based on already established practices.", "It is (subjectively) based only on Gregorian Calendar [5] and on proleptic one (projected backwards to well before it was actually invented so is of limited use in dealing with historic dates) [5a].   "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["The World Calendar Association [1d] initiated the introduction of new World Calendar since 2012 [1b-1d] which would make useless already existing date libraries.", "Again, the same main problem, see on it further on.    "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["The most covering, I ever saw, date-time-related comparison in IT systems is [2] between BIG8 DBMS (IBM DB2, Informix, Ingres, InterBase, Microsoft SQL Server, MySQL, Oracle, and Sybase).", "This and all other surveys show that the processing of the same, for ex., Gregorian calendar time/dates are different between all systems as well as inside the same platforms (between different products and versions of the same product), see for ex., [3]. "], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "the processing of the same, for ex., Gregorian calendar time/dates are different between all systems as well as inside the same platforms (between different products and versions of the same product), see for ex., [3].", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["THE MAIN PROBLEM with all date/time libraries in all-all systems, frameworks is that their date/time datatypes do not permit to include geographical and calendar information in date/time datatypes.", "Without which they are mainly half- useless - what is the sense of milliseconds in SQL Server datetime2 values in 7th century?", "At that time there was even no clocks measuring time with accuracy of minutes (Galileo Galilei used, for ex., his heart beats to measure intervals of time in his experiments) as well as Gregorian Calendar was not even invented.    "], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "THE MAIN PROBLEM with all date/time libraries", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "geographical and calendar information in date/time datatypes", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["So, plenty of datetime type space is misused failing to give the most important flexibility of working with dates by linking and including with them to geography and/or calendar info. "], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "So, plenty of datetime type space is misused failing to give the most important flexibility of working with dates by linking and including with them to geography and/or calendar info.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Just fast illustrations:   "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Modern Russia uses Gregorian calendar and the Russian Orthodox Church uses Julian calendar by which many state holidays in Russia are determined (for example, Christmas in Russia is on 7th of January and Old New Year is on 14th of January by Gregorian Calendar while the dates of other religious  holidays are floating relatively to Gregorian Calendar).", "tag": "none", "senID": 9}, {"text": "In pre-1917 Russia, Poland as its part, used Gregorian Calendar while all the rest Russia used Julian Calendar (with floating difference of 13-18 days at the \"same\" time zone) [5b];  ", "tag": "none", "senID": 10}, {"text": "Double-click on clock in MS Windows (or open Control Panel --> Date and Time) --> Time Zone tab --> view time zones in combobox. You will see that there are 25 hours from GMT-12:00 to GMT+13:00 over a hundred of time zones with fractions of hour like GMT+5:00, GMT+5:30, GMT+5:45, etc.       ", "tag": "none", "senID": 11}]}, {"text": ["==== Cited:\n[1] New World Calendar\n[1a]Update: Sorry, do not read [1a], author confused calendars and wrote wrong info in this news brief\nWorld Calendar 2012: 35 days in a monthhttp://www.panorama.am/en/society/2010/01/29/newcalendar\n[1b] http://en.wikipedia.org/wiki/World_Calendar\n[1c] http://www.theworldcalendarin2012.org/Index2.htm\n[1d] http://www.theworldcalendar.org/TWCA.htm"], "childNum": 13, "tag": "p", "senID": 12, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "Update: Sorry, do not read [1a], author confused calendars and wrote wrong info in this news brief", "childNum": 0, "tag": "strong", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "World Calendar 2012: 35 days in a monthhttp://www.panorama.am/en/society/2010/01/29/newcalendar", "childNum": 2, "tag": "strike", "childList": [{"text": "", "tag": "br"}, {"text": "http://www.panorama.am/en/society/2010/01/29/newcalendar", "tag": "a"}]}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://www.panorama.am/en/society/2010/01/29/newcalendar", "text": "http://www.panorama.am/en/society/2010/01/29/newcalendar", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://en.wikipedia.org/wiki/World_Calendar", "text": "http://en.wikipedia.org/wiki/World_Calendar", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://www.theworldcalendarin2012.org/Index2.htm", "text": "http://www.theworldcalendarin2012.org/Index2.htm", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://www.theworldcalendar.org/TWCA.htm", "text": "http://www.theworldcalendar.org/TWCA.htm", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["[2] Peter Gulutzan,Trudy Pelzer.", "SQL Performance Tuning: Dates in SQL\nhttp://www.informit.com/articles/printerfriendly.aspx?p=30939"], "childNum": 2, "tag": "p", "senID": 13, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "http://www.informit.com/articles/printerfriendly.aspx?p=30939", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.informit.com/articles/printerfriendly.aspx?p=30939"}]}, {"text": ["[3] SqlDateTime.MinValue != C# DateTime.MinValue, why?", "SqlDateTime.MinValue  != DateTime.MinValue, why? "], "childNum": 2, "tag": "p", "senID": 14, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "SqlDateTime.MinValue  != DateTime.MinValue, why?", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/805770/sqldatetime-minvalue-c-datetime-minvalue-why"}]}, {"text": ["[4]\nInternational Organization for Standardization\nhttp://en.wikipedia.org/wiki/International_Organization_for_Standardization\n[4a] ISO 8601 Data elements and interchange formats \u2014 Information interchange \u2014 Representation of dates and times\nhttp://en.wikipedia.org/wiki/ISO_8601 "], "childNum": 6, "tag": "p", "senID": 15, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://en.wikipedia.org/wiki/International_Organization_for_Standardization", "text": "http://en.wikipedia.org/wiki/International_Organization_for_Standardization", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://en.wikipedia.org/wiki/ISO_8601", "text": "http://en.wikipedia.org/wiki/ISO_8601", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["[5]\nGregorian Calendar\nhttp://en.wikipedia.org/wiki/Gregorian_calendar\n[5a] Proleptic Gregorian calendar\nhttp://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar\n[5b] Gregorian Calendar Adoption\nhttp://en.wikipedia.org/wiki/Gregorian_calendar#Adoption\n[6]\nhttp://en.wikipedia.org/wiki/Galileo_Galilei "], "childNum": 12, "tag": "p", "senID": 16, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://en.wikipedia.org/wiki/Gregorian_calendar", "text": "http://en.wikipedia.org/wiki/Gregorian_calendar", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar", "text": "http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://en.wikipedia.org/wiki/Gregorian_calendar#Adoption", "text": "http://en.wikipedia.org/wiki/Gregorian_calendar#Adoption", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://en.wikipedia.org/wiki/Galileo_Galilei", "text": "http://en.wikipedia.org/wiki/Galileo_Galilei", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I haven't used it in a while, but from past experience I'd say that Boost.Date_Time is a pretty good example."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Boost.Date_Time", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/release/doc/html/date_time.html"}]}, {"text": ["While probably not the first choice for many fast paced projects today, the expressive power of C++ still seems to be a very good match for a complex problem domain like date/time, so combined with the high quality peer review process to pass for becoming an official Boost C++ library I'd hope that the library at hand could serve as a example for how time-related things should be handled, albeit not as a complete implementation, see below."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "serve as a example for how time-related things should be handled", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "complete implementation", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["The library is documented very well, so I could probably assmble the entire answer from quotes, but I'll try to extract some fragments according to the template suggested by socs answer instead - nonetheless I'm going to start with an entire quote:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "very", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/3709870/how-do-libraries-in-different-programming-languages-handle-date-time-timestamp/3710304#3710304", "text": "socs answer", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Motivation"], "childNum": 0, "tag": "h2", "senID": 3, "childList": []}, {"text": ["Domain Concepts"], "childNum": 0, "tag": "h2", "senID": 4, "childList": []}, {"text": ["The library supports 3 basic temporal types:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Time Point -- Specifier for a location in the time continuum.", "tag": "none", "senID": 6}, {"text": "Time Duration -- A length of time unattached to any point on the time continuum.", "tag": "none", "senID": 7}, {"text": "Time Interval -- A duration of time attached to a specific point in the time continuum. Also known as a time period.", "tag": "none", "senID": 8}]}, {"text": ["You can get a pretty intuitive overview on how the domain concepts relate to each other in section Details - Calculations."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Details - Calculations", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1_44_0/doc/html/date_time/details.html#date_time.calculations"}]}, {"text": ["Constraints"], "childNum": 0, "tag": "h2", "senID": 10, "childList": []}, {"text": ["An important part of my original decision to evaluate the library has been the available documentation of design goals and necessary tradeoffs in light of the complex problem domain, which seems to outline the real world expertise that has been put into the library - you can read more about it in the following two sections:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Design Goals"], "childNum": 0, "tag": "a", "senID": 12, "childList": []}, {"text": ["Tradeoffs: Stability, Predictability, and Approximations"], "childNum": 0, "tag": "a", "senID": 13, "childList": []}]}, {"text": ["Working with Timezone and DST data"], "childNum": 0, "tag": "h2", "senID": 14, "childList": []}, {"text": ["There is full support for all kind of calculations and conversions one could think of, as far as I'm concerned - see the headings in section Examples for an initial impression."], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "Examples", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1_44_0/doc/html/date_time/examples.html"}]}, {"text": ["Calendar/Time systems"], "childNum": 0, "tag": "h2", "senID": 16, "childList": []}, {"text": ["This is definitely the weak spot concerning your specification, despite the library being specifically designed with extensibility in mind:"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["However, I'm not aware of any implementations of other calendar/time systems than the ones included, see Library Reference for the current implementations of:"], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "Library Reference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1_44_0/doc/html/date_time/doxy.html"}]}, {"tag": "ul", "num": 4, "lis": [{"text": "Date Time", "tag": "none", "senID": 19}, {"text": "Gregorian", "tag": "none", "senID": 20}, {"text": "Posix Time", "tag": "none", "senID": 21}, {"text": "Local Time", "tag": "none", "senID": 22}]}, {"text": ["Formatting and Parsing"], "childNum": 0, "tag": "h2", "senID": 23, "childList": []}, {"text": ["This is fully supported and one of the strong points of the library due to the respective power of the underlying C++ I/O system, see Date Time Input/Output - the stream oriented C++ I/O has both merit and issues depending on your needs and expectations, but this topic is discussed elsewhere on this site."], "childNum": 1, "tag": "p", "senID": 24, "childList": [{"text": "Date Time Input/Output", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1_44_0/doc/html/date_time/date_time_io.html"}]}, {"text": ["Integration"], "childNum": 0, "tag": "h2", "senID": 25, "childList": []}, {"text": ["This is provided as well via compatibility with Boost Serialization, which is archive oriented though, usually meaning a file of binary data, text data, XML or so; i.e.", "databases are not explicitly supported as in your JSR 310 example."], "childNum": 4, "tag": "p", "senID": 26, "childList": [{"text": "provided as well", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1_44_0/doc/html/date_time/serialization.html"}, {"text": "Boost Serialization", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/release/libs/serialization/doc/index.html"}, {"text": "archive", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "file of binary data, text data, XML", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["You mention Python in an earlier comment.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python's builtin datetime support (docs) is pretty practical, but you have to use a third-party timezone database such as pytz (docs) to make it close to complete.", "And, as the pytz docs mention, you may still have problems with adding deltas to times right around DST transitions if you aren't careful."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "datetime", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(docs)", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/datetime.html#module-datetime"}, {"text": "pytz", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://pytz.sourceforge.net/", "text": "(docs)", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["It was once the case that eGenix's mx.DateTime was the way to go if datetime didn't do it for your application, particularly for string to timestamp conversions, but dateutil seems to be popular these days (I haven't used it though)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "mx.DateTime", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.egenix.com/products/python/mxBase/mxDateTime/"}, {"href": "http://labix.org/python-dateutil", "text": "dateutil", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["To answer your \"Good Example\" question, take a look at noda time - Jon Skeet's port of the JODA time libraries for Java to .Net - http://code.google.com/p/noda-time/wiki/Welcome?tm=6"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/noda-time/wiki/Welcome?tm=6", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/noda-time/wiki/Welcome?tm=6"}]}]]