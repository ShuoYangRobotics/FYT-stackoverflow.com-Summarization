[[{"text": ["Here's a pretty literal translation with just the minimum of obvious style changes (putting all code into a function, using string rather than re operations where possible)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re, fileinput\n\ndef main():\n  for line in fileinput.input():\n    process = False\n    for nope in ('BEGIN TRANSACTION','COMMIT',\n                 'sqlite_sequence','CREATE UNIQUE INDEX'):\n      if nope in line: break\n    else:\n      process = True\n    if not process: continue\n    m = re.search('CREATE TABLE \"([a-z_]*)\"(.*)', line)\n    if m:\n      name, sub = m.groups()\n      line = '''DROP TABLE IF EXISTS %(name)s;\nCREATE TABLE IF NOT EXISTS %(name)s%(sub)s\n'''\n      line = line % dict(name=name, sub=sub)\n    else:\n      m = re.search('INSERT INTO \"([a-z_]*)\"(.*)', line)\n      if m:\n        line = 'INSERT INTO %s%s\\n' % m.groups()\n        line = line.replace('\"', r'\\\"')\n        line = line.replace('\"', \"'\")\n    line = re.sub(r\"([^'])'t'(.)\", r\"\\1THIS_IS_TRUE\\2\", line)\n    line = line.replace('THIS_IS_TRUE', '1')\n    line = re.sub(r\"([^'])'f'(.)\", r\"\\1THIS_IS_FALSE\\2\", line)\n    line = line.replace('THIS_IS_FALSE', '0')\n    line = line.replace('AUTOINCREMENT', 'AUTO_INCREMENT')\n    print line,\n\nmain()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Alex Martelli's solution above works good, but needs some fixes and additions:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Alex Martelli's solution above", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1067060/translating-perl-to-python/1067151#1067151"}]}, {"text": ["In the lines using regular expression substitution, the insertion of the matched groups must be double-escaped OR the replacement string must be prefixed with r to mark is as regular expression:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n line = re.sub(r\"([^'])'t'(.)\", \"\\\\1THIS_IS_TRUE\\\\2\", line)\n</code>\n</pre>\n", "senID": 2}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n line = re.sub(r\"([^'])'f'(.)\", r\"\\1THIS_IS_FALSE\\2\", line)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Also, this line should be added before print:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n line = line.replace('AUTOINCREMENT', 'AUTO_INCREMENT')\n</code>\n</pre>\n", "senID": 6}, {"text": ["Last, the column names in create statements should be backticks in MySQL.", "Add this in line 15:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n sub = sub.replace('\"','`')\n</code>\n</pre>\n", "senID": 8}, {"text": ["Here's the complete script with modifications:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n import re, fileinput\n\ndef main():\n  for line in fileinput.input():\n    process = False\n    for nope in ('BEGIN TRANSACTION','COMMIT',\n                 'sqlite_sequence','CREATE UNIQUE INDEX'):\n      if nope in line: break\n    else:\n      process = True\n    if not process: continue\n    m = re.search('CREATE TABLE \"([a-z_]*)\"(.*)', line)\n    if m:\n      name, sub = m.groups()\n      sub = sub.replace('\"','`')\n      line = '''DROP TABLE IF EXISTS %(name)s;\nCREATE TABLE IF NOT EXISTS %(name)s%(sub)s\n'''\n      line = line % dict(name=name, sub=sub)\n    else:\n      m = re.search('INSERT INTO \"([a-z_]*)\"(.*)', line)\n      if m:\n        line = 'INSERT INTO %s%s\\n' % m.groups()\n        line = line.replace('\"', r'\\\"')\n        line = line.replace('\"', \"'\")\n    line = re.sub(r\"([^'])'t'(.)\", \"\\\\1THIS_IS_TRUE\\\\2\", line)\n    line = line.replace('THIS_IS_TRUE', '1')\n    line = re.sub(r\"([^'])'f'(.)\", \"\\\\1THIS_IS_FALSE\\\\2\", line)\n    line = line.replace('THIS_IS_FALSE', '0')\n    line = line.replace('AUTOINCREMENT', 'AUTO_INCREMENT')\n    if re.search('^CREATE INDEX', line):\n        line = line.replace('\"','`')\n    print line,\n\nmain()\n</code>\n</pre>\n", "senID": 10}], [{"text": ["Here is a slightly better version of the original."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #! /usr/bin/perl\nuse strict;\nuse warnings;\nuse 5.010; # for s/\\K//;\n\nwhile( &lt;&gt; ){\n  next if m'\n    BEGIN TRANSACTION   |\n    COMMIT              |\n    sqlite_sequence     |\n    CREATE UNIQUE INDEX\n  'x;\n\n  if( my($name,$sub) = m'CREATE TABLE \\\"([a-z_]*)\\\"(.*)' ){\n    # remove \"\n    $sub =~ s/\\\"//g; #\"\n    $_ = \"DROP TABLE IF EXISTS $name;\\nCREATE TABLE IF NOT EXISTS $name$sub\\n\";\n\n  }elsif( /INSERT INTO \\\"([a-z_]*)\\\"(.*)/ ){\n    $_ = \"INSERT INTO $1$2\\n\";\n\n    # \" =&gt; \\\"\n    s/\\\"/\\\\\\\"/g; #\"\n    # \" =&gt; '\n    s/\\\"/\\'/g; #\"\n\n  }else{\n    # '' =&gt; \\'\n    s/\\'\\'/\\\\\\'/g; #'\n  }\n\n  # 't' =&gt; 1\n  s/[^\\\\']\\K\\'t\\'/1/g; #'\n\n  # 'f' =&gt; 0\n  s/[^\\\\']\\K\\'f\\'/0/g; #'\n\n  s/AUTOINCREMENT/AUTO_INCREMENT/g;\n  print;\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Based on http://docs.python.org/dev/howto/regex.html ..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/dev/howto/regex.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/howto/regex.html"}]}], [{"text": ["I am not sure what is so hard to understand about this that it requires a snide remark as in your comment above.", "Note that &lt;&gt; is called the diamond operator.", "s/// is the substitution operator and // is the match operator m//."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "&lt;&gt;", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "s///", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "//", "childNum": 0, "tag": "code", "childList": []}, {"text": "m//", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["all of scripts on this page can't deal with simple sqlite3:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n PRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE Filename (\n  FilenameId INTEGER,\n  Name TEXT DEFAULT '',\n  PRIMARY KEY(FilenameId) \n  );\nINSERT INTO \"Filename\" VALUES(1,'');\nINSERT INTO \"Filename\" VALUES(2,'bigfile1');\nINSERT INTO \"Filename\" VALUES(3,'%gconf-tree.xml');\n</code>\n</pre>\n", "senID": 1}, {"text": ["None were able to reformat \"table_name\" into proper mysql's `table_name` .", "Some messed up empty string value."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Shortest?", "The tilde signifies a regex in perl.", "\"import re\" and go from there.", "The only key differences are that you'll be using \\1 and \\2 instead of $1 and $2 when you assign values, and you'll be using %s for when you're replacing regexp matches inside strings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Real issue is do you know actually how to migrate the database?", "What is presented is merely a search and replace loop."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]