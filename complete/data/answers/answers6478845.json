[[{"text": ["You can use a regular expression as the delimiter, as in :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.split(pattern, string[, maxsplit=0, flags=0])\n</code>\n</pre>\n", "senID": 1}, {"text": ["From the docs."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "the docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}], [{"text": ["This is about as concise as you can get:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string = 'aaa'\nresult = [s for s in string.split('a') if s]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or you could switch to regular expressions:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n string = 'aaa'\nresult = re.split('a+', string)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You could use regular expressions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.split(pattern, string[, maxsplit=0, flags=0])\n</code>\n</pre>\n", "senID": 1}, {"text": ["as"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n re.split('a+', 'aaa')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["No, there isn't a more convenient way.", "Either you write your own split function, or do the removing empty strings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But your solution seems very clear and pythonic."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Although it's not exactly what you asked for, you can get rid of all non-unique tokens by using a set:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; result\n['', '', '']\n&gt;&gt;&gt; set(result)\nset([''])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think your solution is perfectly OK.", "Here's an equivalent one:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n filter(bool, 'aaa'.split('a'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Probably not as perspicuous as a list comprehension, though."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]