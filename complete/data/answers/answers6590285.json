[[{"text": ["I think your idea is to have a different decorator apply to a function depending on whether the module is being run directly, or imported.", "Unfortunately this won't work the way you have it, because the decorator call needs the function to follow immediately after it.", "However, you could do it like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if __name__ != '__main__':\n    route = application.route\n\n@route('/')\ndef index():\n    index_temp = lookup.get_template('index.html')\n    return index_temp.render(site=site, corperate=corperate, copyright=copyright)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or, assuming you're importing application somewhere, you could just from application import route to begin with, and then you wouldn't need any if statements."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "application", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "from application import route", "childNum": 0, "tag": "code", "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The syntax of the def statement doesn't allow what your trying to do.", "Do this instead:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "syntax of the def statement", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/compound_stmts.html#function-definitions"}]}, {"code": "<pre>\n<code>\n def index():\n    index_temp = lookup.get_template('index.html')\n    return index_temp.render(site=site, corperate=corperate, copyright=copyright)\n\nif __name__ == '__main__':\n    index = route('/')(index)\nelse:\n    index = application.route('/')(index)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'm confused with the way you are using decorators, check this out: http://www.python.org/dev/peps/pep-0318/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.python.org/dev/peps/pep-0318/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0318/"}]}, {"text": ["I'm fairly sure your use of a decorator needs to be at the same level of indentation as the function definition itself.", "Also, the first decorator (@route()), has no function following it."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "@route()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Another possible solution close to what you have:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def decorate(func):\n    if __name__ == '__main__':\n       @route('/')\n       def f():\n          func()\n    else:\n       @application.route('/')\n       def f():\n          func()\n\n    return f\n\n@decorate\ndef index():\n    index_temp = lookup.get_template('index.html')\n    return index_temp.render(site=site, corperate=corperate, copyright=copyright)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You cannot detach a decorator from the decorated function this way."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Still you can compute your decorator and then apply it:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if condition:\n  deco = route('/')\nelse:\n  deco = application.route('/')\n@deco\ndef foo(...):\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You could do something like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n route_decorator = route if __name__ == '__main__' else application.route\n\n@route_decorator('/')\ndef index():\n    index_temp = lookup.get_template('index.html')\n    return index_temp.render(site=site, corperate=corperate, copyright=copyright)\n</code>\n</pre>\n", "senID": 1}, {"text": ["if route is not needed for anything else, you could just say"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if __name__ != '__main__':\n    route = application.route\n\n@route('/')\ndef index():\n    index_temp = lookup.get_template('index.html')\n    return index_temp.render(site=site, corperate=corperate, copyright=copyright)\n</code>\n</pre>\n", "senID": 3}]]