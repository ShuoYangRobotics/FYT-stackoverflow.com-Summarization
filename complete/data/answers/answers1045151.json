[[{"text": ["I'd do it this way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n public class FibonacciAlgorithm {\n\n    private int a = 0;\n\n    private int b = 1;\n\n    public FibonacciAlgorithm() {\n\n    }\n\n    public int increment() {\n        int temp = b;\n        b = a + b;\n        a = temp;\n        return value;\n    }\n\n    public int getValue() {\n        return b;\n    }\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["This keeps it as close to your original Java code as possible."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["[Editor's note:Integershave been replaced withints.", "There is no reason to useIntegersfor this."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "[Editor's note:Integershave been replaced withints. There is no reason to useIntegersfor this.]", "childNum": 3, "tag": "em", "pos": -1, "childList": [{"text": "Integers", "tag": "code"}, {"text": "ints", "tag": "code"}, {"text": "Integers", "tag": "code"}]}, {"text": "Integers", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ints", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Integers", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["The line"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a, b = b, b+a\n</code>\n</pre>\n", "senID": 1}, {"text": ["Doesn't easily translate.", "It's something like this.", "You could simplify it.", "This is the literal meaning."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n t1 = b\nt2 = b+a\na = t1\nb = t2\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You need to store the value of either a or b in a temporary variable first;"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n public Integer increment() \n    {                \n            int temp = a;\n            a = b;\n            b = temp + b;\n            return value;\n    }\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Java integers can only store the first 46 Fibonacci numbers, use a lookup table."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I'll just translate your earlier code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n public void fibb(int max) {\n  int a = 0;\n  int b = 1;\n  while (a &lt; max) {\n    System.out.println(a);\n    int temp = a + b;\n    a = b;\n    b = temp;\n  }\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Don't you want to create a function to return the nth Fibnoacci number?", "This is how I remember it being taught when I was a kid:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n public int Fibb(int index) {\nif (index &lt; 2)\n    return 1;\nelse\n    return Fibb(index-1)+Fibb(index-2);\n};\n</code>\n</pre>\n", "senID": 1}, {"text": ["Given the definition being the first pair of Fibbonaci numbers are 1 and everything else is based off of that.", "Now, if you merely want to print out the Fibonaccis a loop may be simpler which is what a lot of the other replies cover."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The main problem with your Python-to-Java translation is that Python's assignment statement up there is executed all at once, while Java's are executed serially.", "Python's statement is equivalent to saying this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Make a list out of 'b' and 'a + b'\nMake another list out of references to 'a' and 'b'\nAssign all the elements from the second list to the first one\n</code>\n</pre>\n", "senID": 1}, {"text": ["(It might actually be a tuple, I'm not exactly fluent in Python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So the 'b' and 'a+b' resolve to values before they are assigned.", "You can't do that kind of multiple-simultaneous assignment in Java."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In general, a statement in Python like"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n var1, var2, ...varN = expression1, expression2, ...expressionN\n</code>\n</pre>\n", "senID": 5}, {"text": ["is going to translate in Java to"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n temp1 = expression1;\ntemp2 = expression2;\n...\ntempN = expressionN;\nvar1 = temp1;\nvar2 = temp2;\n...\nvarN = tempN;\n</code>\n</pre>\n", "senID": 7}, {"text": ["This way all the expressions resolve to values before the assignments happen, and none of the assignments have side effects on the expressions."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "before", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["If I were doing this for real I'd probably do the lookup table and store longs (since Fibonacci numbers grow vaguely exponentially and I'd want to go past 46).", "The iterative form, like you have, will take O(N) to calculate the Nth Fibonacci value; the typical recursive formulation will take as many function calls as the returned value.", "Fibonacci practically begs for the answers to be cached somewhere, and this would make the recursive form much more feasible."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["There was a recursive solution posted above, but this solution is tail recursive so it grows linearly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n public class Fibonacci {\n    public long fibonacci(int number) {\n        return fib(0,1,number);\n    }\n\n    private long fib(long result, long next, int n) {\n        if (n == 0)\n            return result;\n        else\n            return fib(next, result+next, n-1);\n    }\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["i'll do this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fib = 100;\nfor(int a = 1, b = 0;a &lt;= fib;a += b, b = (a-b)) {\n    System.out.print(a + \",\");\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["public Integer increment() {\n                a = b;\n        b = a + b;\n                return value;\n        }"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Is certainly wrong.", "I think switching the first two lines should do the trick"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]