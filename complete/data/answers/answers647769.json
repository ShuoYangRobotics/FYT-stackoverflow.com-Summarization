[[{"text": ["The reason is explained in the part of that section which I highlighted in bold:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So raw strings are not 100% raw, there is still some rudimentary backslash-processing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["That's the way it is!", "I see it as one of those small defects in python!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I don't think there's a good reason for it, but it's definitely not parsing; it's really easy to parse raw strings with \\ as a last character."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The catch is, if you allow \\ to be the last character in a raw string then you won't be able to put \" inside a raw string.", "It seems python went with allowing \" instead of allowing \\ as the last character."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["However, this shouldn't cause any trouble."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you're worried about not being able to easily write windows folder pathes such as c:\\mypath\\ then worry not, for, you can represent them as r\"C:\\mypath\", and, if you need to append a subdirectory name, don't do it with string concatenation, for it's not the right way to do it anyway!", "use os.path.join"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "c:\\mypath\\", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "r\"C:\\mypath\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "os.path.join", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import os\n&gt;&gt;&gt; os.path.join(r\"C:\\mypath\", \"subfolder\")\n'C:\\\\mypath\\\\subfolder'\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Another user who has since deleted their answer (not sure if they'd like to be credited) suggested that the Python language designers may be able to simplify the parser design by using the same parsing rules and expanding escaped characters to raw form as an afterthought (if the literal was marked as raw)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I thought it was an interesting idea and am including it as community wiki for posterity."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Since \\\" is allowed inside the raw string.", "Then it can't be used to identify the end of the string literal. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Why not stop parsing the string literal when you encounter the first \"?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If that was the case, then \\\" wouldn't be allowed inside the string literal.", "But it is."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Another trick is to use chr(92) as it evaluates to \"\\\". "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I recently had to clean a string of backslashes and the following did the trick:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n CleanString = DirtyString.replace(chr(92),'')\n</code>\n</pre>\n", "senID": 2}, {"text": ["I realize that this doe not take care of the \"why\" but the thread attracts many people looking for a solution to an immediate problem."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The reason for why r'\\' is syntactical incorrect is that although the string expression is raw the used quotes (single or double) always have to be escape since they would mark the end of the quote otherwise.", "So if you want to express a single quote inside single quoted string, there is no other way than using \\'.", "Same applies for double quotes."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "r'\\'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\\'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["But you could use:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n '\\\\'\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Comming from C it pretty clear to me that a single \\ works as escape character allowing you to put special characters such as newlines, tabs and quotes into strings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That does indeed disallow \\ as last character since it will escape the \" and make the parser choke.", "But as pointed out earlier \\ is legal."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["some tips :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1) if you need to manipulate backslash for path then standard python module os.path is your friend.", "for example : "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["2) if you want to build strings with backslash in it BUT without backslash at the END of your string then raw string is your friend (use 'r' prefix before your literal string).", "for example : "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n r'\\one \\two \\three'\n</code>\n</pre>\n", "senID": 3}, {"text": ["3) if you need to prefix a string in a variable X with a backslash then you can do this :"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n X='dummy'\nbs=r'\\ ' # don't forget the space after backslash or you will get EOL error\nX2=bs[0]+X  # X2 now contains \\dummy\n</code>\n</pre>\n", "senID": 5}, {"text": ["4) if you need to create a string with a backslash at the end then combine tip 2 and 3 :"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n voice_name='upper'\nlilypond_display=r'\\DisplayLilyMusic \\ ' # don't forget the space at the end\nlilypond_statement=lilypond_display[:-1]+voice_name\n</code>\n</pre>\n", "senID": 7}, {"text": ["now lilypond_statement contains \"\\DisplayLilyMusic \\upper\""], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "\"\\DisplayLilyMusic \\upper\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["long live python !", ":)"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["n3on"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["In order for you to end a raw string with a slash I suggest you can use this trick:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print r\"c:\\test\"'\\\\'\ntest\\\n</code>\n</pre>\n", "senID": 1}]]