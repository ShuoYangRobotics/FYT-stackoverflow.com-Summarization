[[{"text": ["First, one of Perlis's epigrams:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some of the 10 arguments are presumably related.", "Group them into an object, and pass that instead."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Making an example up, because there's not enough information in the question to answer directly:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class PersonInfo(object):\n  def __init__(self, name, age, iq):\n    self.name = name\n    self.age = age\n    self.iq = iq\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then your 10 argument function:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def f(x1, x2, name, x3, iq, x4, age, x5, x6, x7):\n  ...\n</code>\n</pre>\n", "senID": 5}, {"text": ["becomes:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def f(personinfo, x1, x2, x3, x4, x5, x6, x7):\n  ...\n</code>\n</pre>\n", "senID": 7}, {"text": ["and the caller changes to:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n personinfo = PersonInfo(name, age, iq)\nresult = f(personinfo, x1, x2, x3, x4, x5, x6, x7)\n</code>\n</pre>\n", "senID": 9}], [{"text": ["You could try using Python's variable arguments feature:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python's variable arguments", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html#arbitrary-argument-lists"}]}, {"code": "<pre>\n<code>\n def myfunction(*args):\n    for x in args:\n        # Do stuff with specific argument here\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Perhaps you could turn some of the arguments into member variables.", "If you need that much state a class sounds like a good idea to me. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You can easily change the maximum allowed number of arguments in pylint.", "Just open your pylintrc file (generate it if you don't already have one) and change:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["max-args=5"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["to:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["max-args = 6 # or any value that suits you "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["From pylint's manual"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "manual", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.logilab.org/card/pylint%5Fmanual"}]}], [{"text": ["Simplify or break apart the function so that it doesn't require nine arguments (or ignore pylint, but dodges like the ones you're proposing defeat the purpose of a lint tool)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EDIT: if it's a temporary measure, disable the warning for the particular function in question using a comment as described here: http://lists.logilab.org/pipermail/python-projects/2006-April/000664.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://lists.logilab.org/pipermail/python-projects/2006-April/000664.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://lists.logilab.org/pipermail/python-projects/2006-April/000664.html"}]}, {"text": ["Later, you can grep for all of the disabled warnings."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Do you want a better way to pas the arguments or just a way to stop pylint from nagging you about it?", "If the latter, I seem to recall that you could stop the nagging by putting pylint-controlling comments in your code along the lines of:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #pylint: disable-msg=R0913,R0914\n</code>\n</pre>\n", "senID": 1}, {"text": ["In my opinion, there's nothing inherently wrong with passing a lot of arguments and solutions advocating wrapping them all up in some container argument don't solve any problems (other than the nagging pylint :-)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you need to pass twenty arguments, then pass them.", "It may be that this is required because your function is doing too much and a re-factoring could assist there.", "But that's not a decision we can really make unless we see what the 'real' code is."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Python has some nice functional programming tools that are likely to fit your needs well.", "Check out lambda functions and map.", "Also, you're using dicts when it seems like you'd be much better served with lists.", "For the simple example you provided, try this idiom.", "Note that map would be better and faster but may not fit your needs:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "lambda functions", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.secnetix.de/olli/Python/lambda%5Ffunctions.hawk"}, {"text": "map", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html"}]}, {"code": "<pre>\n<code>\n def mysum(d):\n   s = 0  \n   for x in d:\n        s += x\n   return s\n\ndef mybigfunction():\n   d = (x1, x2, x3, x4, x5, x6, x7, x8, x9)\n   return mysum(d)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You mentioned having a lot of local variables, but frankly if you're dealing with lists (or tuples), you should use lists and factor out all those local variables in the long run."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]