[[{"text": ["There are many who feel that having assignments be expressions, especially in languages like Python where any value is allowable in a condition (not just values of some boolean type), is error-prone.", "Presumably Guido is/was among those who feel that way.", "The classic error is:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "any", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if x = y: # oops! meant to say ==\n</code>\n</pre>\n", "senID": 1}, {"text": ["The situation is also a bit more complicated in Python than it is in a language like C, since in Python the first assignment to a variable is also its declaration.", "For example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def f():\n    print x\n\ndef g():\n    x = h()\n    print x\n</code>\n</pre>\n", "senID": 3}, {"text": ["In these two functions the \"print x\" lines do different things: one refers to the global variable x, and the other refers to the local variable x.", "The x in g is local because of the assignment.", "This could be even more confusing (than it already is) if it was possible to bury the assignment inside some larger expression/statement."], "childNum": 5, "tag": "p", "senID": 4, "childList": [{"text": "print x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "childList": []}, {"text": "g", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I believe this was deliberate on Guido's part in order to prevent certain classic errors.", "E.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["if x = 3: print x"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if x = 3: print x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["when you actually meant to say "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["if x == 3: ..."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "if x == 3: ...", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I do agree there are times I wished it would work, but I also miss { and } around a block of code, and that sure isn't going to change."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "{", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "}", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The real-world answer: it's not needed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Most of the cases you see this in C are because of the fact that error handling is done manually:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if((fd = open(\"file\", O_RDONLY)) == -1)\n{\n    // error handling\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["Similarly for the way many loops are written:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n while(i++ &lt; 10)\n    ;\n</code>\n</pre>\n", "senID": 4}, {"text": ["These common cases are done differently in Python.", "Error handling typically uses exception handling; loops typically use iterators."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["The arguments against it aren't necessarily earth-shattering, but they're weighed against the fact that it simply isn't that important in Python."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["I actually like this behavior.", "I don't like code that produces a value AND has side effects.", "It should be one or the other, or it can get really confusing, really fast. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["That's the point"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If assigments were expressions, these and many other features would have to be re-worked.", "For me it is like a deal you have to make in order to have such readable code and useful features.", "In order to have"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if a and (h not in b): ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["rather than "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if (a &amp;&amp; !(h in b)) { ... }\n</code>\n</pre>\n", "senID": 3}, {"text": ["[not talking about the classic (if a = b:) kind of error."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]