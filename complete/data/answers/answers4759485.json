[[{"text": ["Java will usually be quicker to run (don't take this as an absolute truth), but slower to write."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python is the opposite.", "Since libraries such as SciPy and NumPy already exist, which are built upon fast C code, I'd suggest going with Python if you prefer to go the \"speedier\" way in terms of code writing.", "Unless fundamental blocks for your application are missing in SciPy + NumPy, and those exist for Java."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "SciPy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.scipy.org/"}, {"text": "NumPy", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}]}], [{"text": ["Why not get the best of both worlds by taking advantage of multiple languages on the JVM:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Write the performance intensive parts in Java (or use existing great Java libraries)", "tag": "none", "senID": 1}, {"text": "Use ", "tag": "none", "senID": 2}]}], [{"text": ["Deploying python code on clients computers is hard to deal with, especially when clients are idiots I thinks this is a problem with Java too."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Deploying python code on clients computers is hard to deal with, especially when clients are idiots", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["I can't find a good graphing library like matplotlib for python\nHave you tried JFreechart http://www.jfree.org/jfreechart/"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "I can't find a good graphing library like matplotlib for python", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://www.jfree.org/jfreechart/", "text": "http://www.jfree.org/jfreechart/", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Also, suggestions for other languages is great too I would suggest Groovy, it looks a bit like Python and is a JVM language that integrates well with Java."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Also, suggestions for other languages is great too", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You did not ask this directly, but I will recommend you the Apache Commons Math library for Math Java computations."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["NumPy usually put quite some kick into the computational force of Python.", "It's the defacto standard for any real number crunching in python.", "I don't have any real experience with Java in this field so Im not really qualified to answer this question for you."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "NumPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.numpy.org/"}]}], [{"text": ["If those are the choices, then Java should be the faster for math intensive work.", "It is compiled (although yes it is still running byte code)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Exelian mentions NumPy.", "There's also the SciPy package.", "Both are worth looking at but only really seem to give speed improvements for work with lots of arrays and vector processing.", "When I tried using these with NLTK for a math-intensive routine, I found there wasn't that much of a speedup."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For math intensive work these days, I'd be using C/C++ or C# (personally I prefer C# over Java although that shouldn't affect your decision).", "My first employer out of univ.", "paid me to use Fortran for stuff that is almost certainly more math intensive than anything you're thinking of.", "Don't laugh - the Fortran compilers are some of the best for math processing on heavy iron."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["What is more important for you?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If it's rapid application development, I found Python significantly easier to code for than Java - and I was just learning Python, while I had been coding on Java for years."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If it's application speed and the ability to reuse existing code, then you should probably stick with Java.", "It's reasonably fast and many research efforts at the moment use Java as their language of choice."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It seems Java can be really fast: http://blog.dhananjaynene.com/2008/07/performance-comparison-c-java-python-ruby-jython-jruby-groovy/ \nOn the other hand Python is very good for doing math, and there's quite a lot of room for performance improvement if you use it correctly (I mean, with the right idioms/modules/builtin functions)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://blog.dhananjaynene.com/2008/07/performance-comparison-c-java-python-ruby-jython-jruby-groovy/", "text": "http://blog.dhananjaynene.com/2008/07/performance-comparison-c-java-python-ruby-jython-jruby-groovy/", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["Edit: Suggestions for other languages: Haskell.", "It's very high level; writing it in \"low level style\" it can be very fast (can compare quite fairly with C) and its even better if you can make some use of its multithreading capabilities.", "However experience tells its never good learning to use new tools while they're needed in a project. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The Apache Commons Math picked up where JAMA left off.", "They are quite capable for scientific computing.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So is Python - NumPy and SciPy are excellent.", "I also like the fact that Python is a hybrid of object-orientation and functional programming.", "Functional programming is awfully handy for numerical methods."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'd recommend using the one that you know best, but if the choice is a toss up I might lean towards Python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I think you should use python because it has fast file writing on which you can store the memory."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]