[[{"text": ["Here's one way that should be reasonably fast:  convert your number to a binary string, then reinterpret the result as being in base 4.", "Now to make sure that all the '1's are doubled properly, multiply the result by 3."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 9\n&gt;&gt;&gt; bin(x)\n'0b1001'\n&gt;&gt;&gt; y = int(bin(x)[2:], 4)*3\n&gt;&gt;&gt; bin(y)\n'0b11000011'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["(Reference http://graphics.stanford.edu/~seander/bithacks.html#Interleave64bitOps):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://graphics.stanford.edu/~seander/bithacks.html#Interleave64bitOps", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://graphics.stanford.edu/~seander/bithacks.html#Interleave64bitOps"}]}, {"text": ["If your number is below 256, you may use"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n @magic\ndef double_digits_holger8(x):\n    m = (x * 0x0101010101010101 &amp; 0x8040201008040201) * 0x0102040810204081\n    return ((m &gt;&gt; 49) &amp; 0x5555) | ((m &gt;&gt; 48) &amp; 0xAAAA)\n</code>\n</pre>\n", "senID": 2}, {"text": ["and if it is below 65536,"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n @more_magic\ndef double_digits_binmag16(x):\n    x = (x | x &lt;&lt; 8) &amp; 0x00FF00FF\n    x = (x | x &lt;&lt; 4) &amp; 0x0F0F0F0F\n    x = (x | x &lt;&lt; 2) &amp; 0x33333333\n    x = (x | x &lt;&lt; 1) &amp; 0x55555555\n    return x | x &lt;&lt; 1\n</code>\n</pre>\n", "senID": 4}, {"text": ["Comparison with other solutions (the function must take an integer and return an integer for fair comparison):"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n Method        Time per 256 calls\n--------------------------------\nDo nothing        46.2 usec \nHolger8          256   usec\nBinMag16         360   usec\nMark             367   usec # http://stackoverflow.com/questions/2928886/doubling-binary-digits/2929198#2929198\nMax              720   usec # http://stackoverflow.com/questions/2928886/doubling-binary-digits/2928938#2928938\nPeter          1.08    msec # http://stackoverflow.com/questions/2928886/doubling-binary-digits/2928973#2928973\nPhi\u00b5\u00b5 w/o Log  1.11    msec # http://stackoverflow.com/questions/2928886/doubling-binary-digits/2929106#2929106\nJim16          1.26    msec # http://stackoverflow.com/questions/2928886/doubling-binary-digits/2929038#2929038\nElegant        1.66    msec # int(''.join([''.join(i) for i in zip(X,X)]),2)\nMore Elegant   2.05    msec # int(''.join(chain(*zip(X, X))), 2)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Benchmark source code can be found in http://gist.github.com/417172."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "http://gist.github.com/417172", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://gist.github.com/417172"}]}], [{"text": ["The straightforward solution just using integer arithmetic would be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def doubledigits(n):\n    result = 0\n    power = 1\n    while n &gt; 0:\n        if n%2==1:\n            result += 3*power\n        power *= 4\n        n //= 2\n    return result\n</code>\n</pre>\n", "senID": 1}], [{"text": ["any_number - int    "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["str(n) - produces string from int."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["str::replace(pattern, replaced_value) - replaces all patterns in string to replaced_value."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["int(str) - makes int from string."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n n=any_number\nresult_number = int(str(n).replace(\"0\",\"00\").replace(\"1\",\"11\"))\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n $ python2.6\nPython 2.6.5 (r265:79063, Mar 25 2010, 14:13:28)\n&gt;&gt;&gt; def dd(n): return eval(\"0b\" + \"\".join(d * 2 for d in str(bin(n))[2:]))\n...\n&gt;&gt;&gt; dd(9)\n195\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n y = 0;\nfor(i = 15; i  &gt;= 0; i--) {\n    if((1 &lt;&lt; i) &amp; x) {\n       y |= 3;\n    }\n    y &lt;&lt;= 2;\n}\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n def doubledigits(x):\n    from math import log\n    print (bin(x))\n    numdigits = x.bit_length()\n    result = 1 &lt;&lt; (numdigits*2)\n    for i in range(numdigits, -1, -1):\n        mask = 1 &lt;&lt; i\n        if (x &amp; mask &gt; 0):\n            rmask = 0b11 &lt;&lt; (2*i)\n            result = result | rmask\n    return result\n</code>\n</pre>\n", "senID": 0}, {"text": ["should do it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]