[[{"text": ["Say your function bar is in a file called foo.py on your Python path."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "bar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If foo.py contains this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def bar():\n  return True\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then you can do this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from foo import bar\n\nif bar():\n  print \"bar() is True!\"\n</code>\n</pre>\n", "senID": 4}], [{"text": ["let's see what docs say:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "what docs say", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/simple%5Fstmts.html#the-return-statement"}]}, {"text": ["what you're trying to do, I guess is:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from mksfunction import mks_create_sandbox  \nimport os.path\n\nif not os.path.exists('home/build/test/new_sandbox/project.pj'):\n    mks_create_sandbox()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You probably need to import the module which contains the function, no?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Of course, a little more precision as to what you are trying to achieve would help."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["What exactly do you mean by \"the return statement will not work\"?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can import the function from the other file and call it like a local function."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I have a big touch on this recently as I was working on my final project in python.", "I would be engaged to look at your outside function file too."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you are calling a module (well actually, any function outside the same file can be treated as a module, I hate to specify things too precise), you need to make sure something.", "Here is an example of a module, let's called it my_module.py"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # Example python module\n\nimport sys\n# Any other imports... imports should always be first\n\n# Some classes, functions, whatever...\n# This is your meat and potatos\n\n# Now we'll define a main function\ndef main():\n    # This is the code that runs when you are running this module alone\n    print sys.platform\n\n# This checks whether this file is being run as the main script\n#  or if its being run from another script\nif __name__ == '__main__':\n    main()\n# Another script running this script (ie, in an import) would use it's own\n#  filename as the value of __name__\n</code>\n</pre>\n", "senID": 2}, {"text": ["Now I want to call this entire function in another file, called work.py"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import my_module\n\nx = my_module\nx.main()\n</code>\n</pre>\n", "senID": 4}], [{"text": ["It depends what you mean.", "If you want to create a static method then you would do something like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class fubar(object):\n\n    @classmethod\n    def foo():\n      return bar\n\nfubar.foo() # returns bar\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to run an external process then you would use subprocess library and do"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "subprocess", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html"}]}, {"code": "<pre>\n<code>\n import subprocess\nsubprocess.popen(\"cmd echo 'test'\",shell=true)\n</code>\n</pre>\n", "senID": 3}, {"text": ["really depends what you want to do"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Do you mean import?", "Say, your external function lives in mymodule.py in the same directory, you have to import it first:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import mymodule\n# or\nfrom mymodule import myfunction\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then it is straight forward to use the function:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if mymodule.myfunction() == \"abc\":\n    # do something\n</code>\n</pre>\n", "senID": 3}, {"text": ["or with the second import:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if myfunction() == \"abc\":\n    # do something\n</code>\n</pre>\n", "senID": 5}, {"text": ["See this tutorial."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "this tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html"}]}], [{"text": ["file1.py (comment out 2 of the versions)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #version 1\nfrom file2 import outsidefunction\nprint (outsidefunction(3))\n\n#version 2\nimport file2\nprint (file2.outsidefunction(3))\n\n#version 3\nfrom file2 import *\nprint (outsidefunction(3))\n</code>\n</pre>\n", "senID": 1}, {"text": ["file2.py"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def outsidefunction(num):\n    return num * 2\n</code>\n</pre>\n", "senID": 3}, {"text": ["Command-Line: python file1.py"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "python file1.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]