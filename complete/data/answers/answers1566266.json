[[{"text": ["Because \"append\" existed long before \"pop\" was thought of.", "Python 0.9.1 supported list.append in early 1991.", "By comparison, here's part of a discussion on comp.lang.python about adding pop in 1997.", "Guido wrote:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Python 0.9.1", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.dalkescientific.com/writings/diary/archive/2009/03/27/python%5F0%5F9%5F1p1.html"}, {"text": "discussion on comp.lang.python", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://groups.google.com/group/comp.lang.python/browse%5Fthread/thread/48a26add2d996268/57ab953cb73bc9c7?q=list+pop+group%3Acomp.lang.python+author%3Aguido#"}]}, {"text": ["You can also see he discusses the idea of if push/pop/put/pull should be at element [0] or after element [-1] where he posts a reference to Icon's list:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In other words, for stacks implemented directly as Python lists, which already supports fast append(), and del list[-1], it makes sense that list.pop() work by default on the last element.", "Even if other languages do it differently."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Implicit here is that most people need to append to a list, but many fewer have occasion to treat lists as stacks, which is why list.append came in so much earlier."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Because it appends; it doesn't push.", "\"Appending\" adds to the end of a list, \"pushing\" adds to the front."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Think of a queue vs. a stack."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://docs.python.org/tutorial/datastructures.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/tutorial/datastructures.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html"}]}, {"text": ["Edit: To reword my second sentence more exactly, \"Appending\" very clearly implies adding something to the end of a list, regardless of the underlying implementation.", "Where a new element gets added when it's \"pushed\" is less clear.", "Pushing onto a stack is putting something on \"top,\" but where it actually goes in the underlying data structure completely depends on implementation.", "On the other hand, pushing onto a queue implies adding it to the end."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "end", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}], [{"text": ["Because it appends an element to a list?", "Push is usually used when referring to stacks."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Because \"append\" intuitively means \"add at the end of the list\".", "If it was called \"push\", then it would be unclear whether we're adding stuff at the tail or at head of the list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Not an official answer by any means (just a guess based on using the language), but Python allows you to use lists as stacks (e.g., section 5.1.1 of the tutorial).", "However, a list is still first of all a list, so the operations that are common to both use list terms (i.e., append) rather than stack terms (i.e., push).", "Since a pop operation isn't that common in lists (though 'removeLast' could have been used), they defined a pop() but not a push()."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "section 5.1.1 of the tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#using-lists-as-stacks"}]}], [{"text": ["Ok, personal opinion here, but Append and Prepend imply precise positions in a set."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Push and Pop are really concepts that can be applied to either end of a set... Just as long as you're consistent... For some reason, to me, Push() seems like it should apply to the front of a set..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Because everyone knows what \"append\" means.", "Push refers to stacks, which not everyone (not even every programmer!", ") understands."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Probably because the original version of Python (CPython) was written in C, not C++."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "C", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The idea that a list is formed by pushing things onto the back of something is probably not as well-known as the thought of appending them."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["FYI, it's not terribly difficult to make a list that has a push method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class StackList(list):\n...     def push(self, item):\n...             self.append(item)\n... \n&gt;&gt;&gt; x = StackList([1,2,3])\n&gt;&gt;&gt; x\n[1, 2, 3]\n&gt;&gt;&gt; x.push(4)\n&gt;&gt;&gt; x\n[1, 2, 3, 4]\n</code>\n</pre>\n", "senID": 1}, {"text": ["A stack is a somewhat abstract datatype.", "The idea of \"pushing\" and \"popping\" are largely independent of how the stack is actually implemented.", "For example, you could theoretically implement a stack like this (although I don't know why you would):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n l = [1,2,3]\nl.insert(0, 1)\nl.pop(0)\n</code>\n</pre>\n", "senID": 3}, {"text": ["...and I haven't gotten into using linked lists to implement a stack."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Push and Pop make sense in terms of the metaphor of a stack of plates or trays in a cafeteria or buffet, specifically the ones in type of holder that has a spring underneath so the top plate is (more or less... in theory) in the same place no matter how many plates are under it.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you remove a tray, the weight on the spring is a little less and the stack \"pops\" up a little, if you put the plate back, it \"push\"es the stack down.", "So if you think about the list as a stack and the last element as being on top, then you shouldn't have much confusion.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It's called \"append\" because \"push\" is a daft name for a function that appends."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A reasonable question is why \"pop\" is called \"pop\", and not \"removeandreturnthelastitem\".", "And I think that also answers itself."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Push is a defined stack behaviour; if you pushed A on to stack (B,C,D) you would get (A,B,C,D)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "stack", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Stack_%28data_structure%29"}]}, {"text": ["If you used python append, the resulting dataset would look like (B,C,D,A)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit: Wow, holy pedantry."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I would assume that it would be clear from my example which part of the list is the top, and which part is the bottom.", "Assuming that most of us here read from left to right, the first element of any list is always going to be on the left."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]