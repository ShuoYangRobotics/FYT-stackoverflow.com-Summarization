[[{"text": ["Question 1: So you want (element 0 + element 1) / 2, (element 1 + element 2) / 2, ... etc."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What we do is make two lists: one of every element except the first, and one of every element except the last.", "Then the averages we want are the averages of each pair taken from the two lists.", "We use zip to take pairs from two lists."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "zip", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Edit: I assume you want to see decimals in the result, even though your input values are integers.", "By default, Python does integer division: it discards the remainder.", "To divide things through all the way, we need to use floating-point numbers.", "Fortunately, dividing an int by a float will produce a float, so we just use 2.0 for our divisor instead of 2."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "2.0", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "2", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Thus:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n averages = [(x + y) / 2.0 for (x, y) in zip(my_list[:-1], my_list[1:])]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Question 2:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["That use of sum should work fine.", "The following works:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "sum", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = range(10)\n# [0,1,2,3,4,5,6,7,8,9]\nb = sum(a)\nprint b\n# prints 45\n</code>\n</pre>\n", "senID": 7}, {"text": ["Also, you don't need to assign everything to a variable at every step along the way.", "print sum(a) works just fine."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "print sum(a)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You will have to be more specific about exactly what you wrote and how it isn't working."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["Sum list of numbers:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sum(list_of_nums)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Calculating half of n and n - 1 (if I have the pattern correct), using a list comprehension:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "list comprehension", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/2.7/tutorial/datastructures.html#list-comprehensions"}]}, {"code": "<pre>\n<code>\n [(x + (x - 1)) / 2 for x in list_of_nums]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Sum adjacent elements, e.g.", "((1 + 2) / 2) + ((2 + 3) / 2) + ... using reduce and lambdas"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "reduce", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/2.7/tutorial/datastructures.html#functional-programming-tools"}, {"href": "http://docs.python.org/release/2.7/tutorial/controlflow.html#lambda-forms", "text": "lambdas", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n reduce(lambda x, y: (x + y) / 2, list_of_nums)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Generators are a easy way to write this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import division\n# ^- so that 3/2 is 1.5 not 1 \n\ndef averages( lst ):\n    it = iter(lst) # get a iterator over the list\n    first = next(it)\n    for item in it:\n        yield (first+item)/2\n        first = item\n\nprint list(averages(range(1,11)))\n# [1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try using a list comprehension.", "Something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n new_list = [(old_list[i] + old_list[i+1])/2 for i in range(len(old_list-1))]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In the spirit of itertools.", "Inspiration from the pairwise recipe."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import tee, izip\n\ndef average(iterable):\n    \"s -&gt; (s0,s1)/2.0, (s1,s2)/2.0, ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return ((x+y)/2.0 for x, y in izip(a, b))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Examples:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt;list(average([1,2,3,4,5]))\n[1.5, 2.5, 3.5, 4.5]\n&gt;&gt;&gt;list(average([1,20,31,45,56,0,0]))\n[10.5, 25.5, 38.0, 50.5, 28.0, 0.0]\n&gt;&gt;&gt;list(average(average([1,2,3,4,5])))\n[2.0, 3.0, 4.0]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Using the pairwise itertools recipe:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "pairwise", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/itertools.html#recipes", "text": "itertools recipe", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import itertools\ndef pairwise(iterable):\n    \"s -&gt; (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = itertools.tee(iterable)\n    next(b, None)\n    return itertools.izip(a, b)\n\ndef pair_averages(seq):\n    return ( (a+b)/2 for a, b in pairwise(seq) )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Short and simple:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def ave(x,y):\n  return (x + y) / 2.0\n\nmap(ave, a[:-1], a[1:])\n</code>\n</pre>\n", "senID": 1}, {"text": ["And here's how it looks:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = range(10)\n&gt;&gt;&gt; map(ave, a[:-1], a[1:])\n[0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Due to some stupidity in how Python handles a map over two lists, you do have to truncate the list, a[:-1].", "It works more as you'd expect if you use itertools.imap:"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a[:-1]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "itertools.imap", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import itertools\n&gt;&gt;&gt; itertools.imap(ave, a, a[1:])\n&lt;itertools.imap object at 0x1005c3990&gt;\n&gt;&gt;&gt; list(_)\n[0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]\n</code>\n</pre>\n", "senID": 5}]]