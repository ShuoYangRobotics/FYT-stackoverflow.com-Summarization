[[{"text": ["Use ConfigParser."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Your config:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [myvars]\nvar_a: 'home'\nvar_b: 'car'\nvar_c: 15.5\n</code>\n</pre>\n", "senID": 2}, {"text": ["Your python code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import ConfigParser\n\nconfig = ConfigParser.ConfigParser()\nconfig.read(\"config.ini\")\nvar_a = config.get(\"myvars\", \"var_a\")\nvar_b = config.get(\"myvars\", \"var_b\")\nvar_c = config.get(\"myvars\", \"var_c\")\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Assuming you're happy to change your syntax slightly, just use python and import the \"config\" module."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # myconfig.py:\n\nvar_a = 'home'\nvar_b = 'car'\nvar_c = 15.5\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then do "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from myconfig import *\n</code>\n</pre>\n", "senID": 3}, {"text": ["And you can reference them by name in your current context."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Load your file with JSON or PyYAML into a dictionary the_dict (see doc for JSON or PyYAML for this step, both can store data type) and add the dictionary to your globals dictionary, e.g.", "using globals().update(the_dict)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "JSON", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/json.html"}, {"text": "PyYAML", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://pyyaml.org/wiki/PyYAML"}, {"text": "the_dict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "globals().update(the_dict)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you want it in a local dictionary instead (e.g.", "inside a function), you can do it like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for x in the_dict.items():\n    exec('%s=%s' % x)\n</code>\n</pre>\n", "senID": 2}, {"text": ["as long as it is safe to use exec.", "If not, you can use the dictionary directly."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "exec", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["How reliable is your format?", "If the seperator is always exactly ': ', the following works.", "If not, a comparatively simple regex should do the job."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As long as you're working with fairly simple variable types, Python's eval function makes persisting variables to files surprisingly easy."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["(The below gives you a dictionary, btw, which you mentioned was one of your prefered solutions)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def read_config(filename):\n    f = open(filename)\n    config_dict = {}\n    for lines in f:\n        items = lines.split(': ', 1)\n        config_dict[items[0]] = eval(items[1])\n    return config_dict\n</code>\n</pre>\n", "senID": 3}], [{"text": ["What you want appear to want is the following, but this is NOT RECOMMENDED:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "NOT RECOMMENDED", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for line in open('dangerous.txt'):\n...     exec('%s = %s' % tuple(line.split(':', 1)))\n... \n&gt;&gt;&gt; var_a\n'home'\n</code>\n</pre>\n", "senID": 1}, {"text": ["This creates somewhat similar behavior to PHP's register_globals and hence has the same security issues.", "Additionally, the use of exec that I showed allows arbitrary code execution.", "Only use this if you are absolutely sure that the contents of the text file can be trusted under all circumstances."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "register_globals", "tag": "a", "pos": 0, "childList": [{"text": "register_globals", "tag": "code"}], "childNum": 1, "href": "http://php.chinaunix.net/manual/en/security.globals.php"}, {"text": "register_globals", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "exec", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Only", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["You should really consider binding the variables not to the local scope, but to an object, and use a library that parses the file contents such that no code is executed.", "So: go with any of the other solutions provided here."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["(Please note: I added this answer not as a solution, but as an explicit non-solution."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "non-solution", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["You can treat your text file as a python module and load it dynamically:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "treat", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import imp\nimp.load_source( name, pathname[, file])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n // mydata.txt\nvar1 = 'hi'\nvar2 = 'how are you?'\nvar3 = { 1:'elem1', 2:'elem2' }\n//...\n\n// In your script file\ndef getVarFromFile(filename):\n    import imp\n    f = open(filename)\n    global data\n    data = imp.load_source('data', '', f)\n    f.close()\n\ngetVarFromFile('c:/mydata.txt'):\nprint data.var1\nprint data.var2\nprint data.var3\n...\n</code>\n</pre>\n", "senID": 3}]]