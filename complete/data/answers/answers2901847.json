[[{"text": ["Why not just:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n pos = [7] * 99\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is the most pythonic, in my opinion."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n import array\n\npos = array.array('l', 7 * [99])\n</code>\n</pre>\n", "senID": 0}, {"text": ["The array module of Python's standard library is the only way to make an array that comes with Python (the third-party module numpy offers other ways, but needs do be downloaded and installed separately) -- what your Q is doing, as well as every answer so far, is building a list, not an array."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "array", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/array.html?highlight=array#module-array"}, {"text": "array", "childNum": 0, "tag": "em", "childList": []}, {"text": "numpy", "childNum": 0, "tag": "code", "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}, {"text": "not", "childNum": 0, "tag": "strong", "childList": []}, {"text": "array", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In particular, there is no constraint that the pos list built in your Q and the several As contains just integers -- while, with the snippet I give, you do get that constraint (32-bit signed integers in this case, to be precise), which rigidly limits you but also saves a bunch of memory (an array of integers should take about one fifth the amount of memory that a list filled with integers will take, unless there's a lot of perennial duplication in the lists' items)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "pos", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "do", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["BTW, if you say array when you mean list (just in case list is what you meant), you're sure to cause a lot of confusion -- saying what you mean, and meaning what you say, helps a lot in clear communication, unsurprisingly!-)"], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "array", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}, {"text": "is", "childNum": 0, "tag": "em", "childList": []}, {"text": "lot", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["you do not declare the type of variables in python, so no pos=[int]\nall you have to do:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pos=[int]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n pos=[]\nfor i in range(99):\n    pos.append(7)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can simply do"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n pos = [7] * 99\nprint pos #will print the whole array [7, 7, .... 7]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you just want to declare the array, all you have to do in python is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n pos = []\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to fill the array with 99 7's:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n pos = [7] * 99\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want to fill the array based on a pattern:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n pos = [i for i in range(99)]\n</code>\n</pre>\n", "senID": 5}], [{"text": ["One way is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n pos = [7 for _ in xrange(0,99)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["in Python 2 or:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n pos = [7 for _ in range(0,99)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["in Python 3.", "These are list comprehensions, and are easy to extend for more complex work."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "list comprehensions", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}, {"text": ["Also:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n pos = [int]\n</code>\n</pre>\n", "senID": 6}, {"text": ["doesn't make much sense.", "You're creating a list with the only element being the type int."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]]