[[{"code": "<pre>\n<code>\n key = +1\n</code>\n</pre>\n", "senID": 0}, {"text": ["+1 is the same thing as 1.", "I assume you meant key += 1.", "I also can't see a reason why you'd split each line when there's only one item per line."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "+1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "key += 1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "split", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["However, there's really no reason to do the looping yourself."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n with open('words') as f3data:\n    mydict = dict(enumerate(line.strip() for line in f3data))\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n dict(enumerate(x.rstrip() for x in f3data))\n</code>\n</pre>\n", "senID": 0}, {"text": ["But your error is key += 1."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "key += 1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The use of zero-based numeric keys in a dict is very suspicious.", "Consider whether a simple list would suffice. "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "tag": "a", "pos": 1, "childList": [{"text": "list", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/tutorial/datastructures.html#more-on-lists"}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Here is an example using a list comprehension:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "list comprehension", "tag": "a", "pos": 0, "childList": [{"text": "list comprehension", "tag": "em"}], "childNum": 1, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}, {"text": "list comprehension", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mylist = [word.strip() for word in open('/usr/share/dict/words')]\n&gt;&gt;&gt; mylist[1]\n'A'\n&gt;&gt;&gt; mylist[10]\n\"Aaron's\"\n&gt;&gt;&gt; mylist[100]\n\"Addie's\"\n&gt;&gt;&gt; mylist[1000]\n\"Armand's\"\n&gt;&gt;&gt; mylist[10000]\n\"Loyd's\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["I use str.strip() to remove whitespace and newlines, which are present in /usr/share/dict/words.", "This may not be necessary with your data."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "str.strip()", "tag": "a", "pos": 0, "childList": [{"text": "str.strip()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#str.strip"}, {"text": "str.strip()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "/usr/share/dict/words", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["However, if you really need a dictionary, Python's enumerate() built-in function is your friend here, and you can pass the output directly into the dict() function to create it:"], "childNum": 5, "tag": "p", "senID": 4, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/functions.html#enumerate", "text": "enumerate()", "childNum": 1, "tag": "a", "childList": [{"text": "enumerate()", "tag": "code"}]}, {"text": "enumerate()", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/stdtypes.html#dict", "text": "dict()", "childNum": 1, "tag": "a", "childList": [{"text": "dict()", "tag": "code"}]}, {"text": "dict()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mydict = dict(enumerate(word.strip() for word in open('/usr/share/dict/words')))\n&gt;&gt;&gt; mydict[1]\n'A'\n&gt;&gt;&gt; mydict[10]\n\"Aaron's\"\n&gt;&gt;&gt; mydict[100]\n\"Addie's\"\n&gt;&gt;&gt; mydict[1000]\n\"Armand's\"\n&gt;&gt;&gt; mydict[10000]\n\"Loyd's\"\n</code>\n</pre>\n", "senID": 5}], [{"text": ["With keys that dense, you don't want a dict, you want a list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n with open('words') as fp:\n    data = map(str.strip, fp.readlines())\n</code>\n</pre>\n", "senID": 1}, {"text": ["But if you really can't live without a dict:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n with open('words') as fp:\n    data = dict(enumerate(X.strip() for X in fp))\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n {index: x.strip() for index, x in enumerate(open('filename.txt'))}\n</code>\n</pre>\n", "senID": 0}, {"text": ["This code uses a dictionary comprehension and the enumerate built-in, which takes an input sequence (in this case, the file object, which yields each line when iterated through) and returns an index along with the item.", "Then, a dictionary is built up with the index and text."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "enumerate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["One question: why not just use a list if all of your keys are integers?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Finally, your original code should be"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n f3data = open('words')\n\nmydict = {}\n\nfor index, line in enumerate(f3data):\n    cmyline = line.strip()\n    mydict[index] = cmyline\n\nprint mydict\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Putting the words in a dict makes no sense.", "If you're using numbers as keys you should be using a list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import with_statement\n\nwith open('words.txt', 'r') as f:\n    lines = f.readlines()\n\n\nwords = {}\n\nfor n, line in enumerate(lines):\n    words[n] = line.strip()\n\nprint words\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n f3data = open('words')\nprint f3data.readlines()\n</code>\n</pre>\n", "senID": 0}]]