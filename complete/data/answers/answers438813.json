[[{"text": ["Depending on how you are going to use the list, it may be that you actually want a dictionary.", "This will work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = {}\n\nfor row in rows:\n  c = list_of_categories.index(row[\"id\"])\n  print c\n  d[c] = row[\"name\"]\n</code>\n</pre>\n", "senID": 1}, {"text": ["... or more compactly:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n d = dict((list_of_categories.index(row['id']), row['name']) for row in rows)\nprint d\n</code>\n</pre>\n", "senID": 3}, {"text": ["PHP arrays are much more like Python dicts than they are like Python lists.", "For example, they can have strings for keys."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["And confusingly, Python has an array module, which is described as \"efficient arrays of numeric values\", which is definitely not what you want."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["If the number of items you want is known in advance, and you want to access them using integer, 0-based, consecutive indices, you might try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n n = 3\narray = n * [None]\nprint array\narray[2] = 11\narray[1] = 47\narray[0] = 42\nprint array\n</code>\n</pre>\n", "senID": 1}, {"text": ["This prints:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [None, None, None]\n[42, 47, 11]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Use the list constructor, and append your items, like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = list ()\nl.append (\"foo\")\nl.append (3)\nprint (l)\n</code>\n</pre>\n", "senID": 1}, {"text": ["gives me ['foo', 3], which should be what you want.", "See the documentation on list and the sequence type documentation."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "['foo', 3]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "documentation on list", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html?highlight=list#list"}, {"href": "http://docs.python.org/library/stdtypes.html#typesseq", "text": "sequence type documentation", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["EDIT Updated"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["For inserting, use insert, like this:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "insert", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n l = list ()\nl.append (\"foo\")\nl.append (3)\nl.insert (1, \"new\")\nprint (l)\n</code>\n</pre>\n", "senID": 5}, {"text": ["which prints ['foo', 'new', 3]"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "['foo', 'new', 3]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["http://diveintopython.org/native_data_types/lists.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://diveintopython.org/native_data_types/lists.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/native_data_types/lists.html"}]}, {"text": ["You don't need to create empty lists with a specified length.", "You just add to them and query about their current length if needed. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["What you can't do without preparing to catch an exception is to use a non existent index.", "Which is probably what you are used to in PHP."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can use this syntax to create a list with n elements:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n lst = [0] * n\n</code>\n</pre>\n", "senID": 1}, {"text": ["But be careful!", "The list will contain n copies of this object.", "If this object is mutable and you change one element, then all copies will be changed!", "In this case you should use:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n lst = [some_object() for i in xrange(n)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then you can access these elements:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n for i in xrange(n):\n    lst[i] += 1\n</code>\n</pre>\n", "senID": 5}, {"text": ["A Python list is comparable to a vector in other languages.", "It is a resizable array, not a linked list."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Sounds like what you need might be a dictionary rather than an array if you want to insert into specified indices."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dictionary", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n dict = {'a': 1, 'b': 2, 'c': 3}\ndict['a']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I agree with ned that you probably need a dictionary for what you're trying to do.", "But here's a way to get a list of those lists of categories you can do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lst = [list_of_categories.index(row[\"id\"]) for row in rows]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["use a dictionary, because what you're really asking for is a structure you can access by arbitrary keys"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list = {}\n\nfor row in rows:\n  c = list_of_categories.index(row[\"id\"])\n  print c\n  list[c] = row[\"name\"]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you can iterate through the known contents with:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for x in list.values():\n  print x\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or check if something exists in the \"list\":"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if 3 in list: \n  print \"it's there\"\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I'm not sure if I understood what you mean or want to do, but it seems that you want a list which\nis dictonary-like where the index is the key.", "Even if I think, the usage of a dictonary would be a better\nchoice, here's my answer: Got a problem - make an object:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyList(UserList.UserList):\n\nNO_ITEM = 'noitem'\n\ndef insertAt(self, item, index):\n\n    length = len(self)\n    if index &lt; length:\n        self[index] = item\n    elif index == length:\n        self.append(item)\n    else:\n        for i in range(0, index-length):\n            self.append(self.NO_ITEM)\n        self.append(item)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Maybe some errors in the python syntax (didn't check), but in principle it should work.", "Of course the else case works also for the elif, but I thought, it might be a little harder\n to read this way.            "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]