[[{"text": ["i would suggest creating your functionality as django-management-command and run it via crontab"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-management-command", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/howto/custom-management-commands/"}]}, {"text": ["if your command is send_newsletter then simply"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "send_newsletter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n 0 0 * * * python /path/to/project/manage.py send_newsletter\n</code>\n</pre>\n", "senID": 2}, {"text": ["and you don't need to take care of setting the settings module in this case/"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I'd recommend option 3: use the jobs system in django-extensions.", "The relevant extension commands are:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "jobs system", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-command-extensions/wiki/JobsScheduling"}, {"text": "django-extensions", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://github.com/django-extensions/django-extensions"}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["create_jobs"], "childNum": 0, "tag": "code", "senID": 1, "childList": []}, {"text": ["runjob"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}, {"text": ["runjobs"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}]}, {"text": ["This lets you manage all the job handling inside of Django, so you don't have to keep messing with the crontab."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I have written a few command-line applications using a method similar to your first option.", "I prefer to do it this way as opposed to using the DJANGO_SETTINGS_MODULE environment variable because it feels more like a regular Python program (to me)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "DJANGO_SETTINGS_MODULE", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You should also note that you do not have to put your module in the same directory as your settings.py; you can use the absolute Python path of your settings module:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "settings.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from django.core.management import setup_environ\nfrom project import settings\nsetup_environ(settings)\n#The rest of your imports\n</code>\n</pre>\n", "senID": 2}, {"text": ["PEP 8 discourages relative imports anyway."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "PEP 8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"text": ["I always install my Django applications in site-packages (/usr/lib64/python2.6/site-packages on Gentoo) so I don't have to worry about setting PYTHONPATH from my crontabs, but I don't believe that is a widely practiced method.", "I also like to use setuptools Automatic Script Creation so that my console scripts get put wherever they should be (/usr/bin, for example) and are named appropriately automatically.", "Your first option also facilitates this.   "], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "/usr/lib64/python2.6/site-packages", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "PYTHONPATH", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "setuptools Automatic Script Creation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://peak.telecommunity.com/DevCenter/setuptools#automatic-script-creation"}, {"text": "/usr/bin", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Option 1 works for me.", "I normally have the script cd to the project directory and then do \"python ./script_name.py\" so that there are no mysterious path problems ... lazy, but it works consistently."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There is also django-cron.", "It is very simple to use, there is nothing else to install or set-up."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-cron", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-cron/"}]}, {"text": ["However, I am not sure about how it really works...", "I mean that I don't know how the jobs are run and if they are run at all when nobody makes a request to the site.", "But you can try-out !"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "However", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "and", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}], [{"text": ["I suggest to take a look at django-chronograph.", "Basically it does what you want in a simmilar way to other suggestions + it gives you a possbility to manage your cron jobs via admin panel.", "Cron jobs have to be implemented as django commands.", "You can then run all pending jobs by calling"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-chronograph", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://bitbucket.org/wnielson/django-chronograph/"}]}, {"code": "<pre>\n<code>\n python manage.py cron\n</code>\n</pre>\n", "senID": 1}, {"text": ["which should be triggered by your cron."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Ashok's suggestion of running management commands via cron works well, but if you're looking for something a little more robust I'd look into a library like Kronos:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Kronos", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/jgorset/django-kronos"}]}, {"code": "<pre>\n<code>\n # app/cron.py\n\nimport kronos\n\n@kronos.register('0 * * * *')\ndef task():\n    pass\n</code>\n</pre>\n", "senID": 1}]]