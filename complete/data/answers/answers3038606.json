[[{"text": ["You want Exuberant ctags (old ctags doesn't generate tags for Python)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Exuberant ctags", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ctags.sourceforge.net/"}]}, {"text": ["Once you've installed (the way to do that depends on your platform), run it on your files:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $ /usr/local/bin/ctags *py\n</code>\n</pre>\n", "senID": 2}, {"text": ["(you can run it multiple times to append tags to an existing tag file, have it recurse into subdirectories, etc, all with command-line options) and it makes a tags file like the following (for brevity I'm using a single Python file with one class defining a single method):"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "tags", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ cat tags\n!_TAG_FILE_FORMAT   2   /extended format; --format=1 will not append ;\" to lines/\n!_TAG_FILE_SORTED   1   /0=unsorted, 1=sorted, 2=foldcase/\n!_TAG_PROGRAM_AUTHOR    Darren Hiebert  /dhiebert@users.sourceforge.net/\n!_TAG_PROGRAM_NAME  Exuberant Ctags //\n!_TAG_PROGRAM_URL   http://ctags.sourceforge.net    /official site/\n!_TAG_PROGRAM_VERSION   5.7 //\nFoo a.py    /^class Foo(object):$/;\"    c\namethod a.py    /^  def amethod(self): pass$/;\" m   class:Foo\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now, quoting this article:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "this article", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://linux.byexamples.com/archives/177/vim-with-ctags/"}]}, {"text": ["Also, control-P does (some attempt at) code completion for identifiers found in tags.", "(:help tags in vim will give you more details)."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "code completion", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "tags", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ":help tags", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I sometimes inserted help(varName) into my code, so that when that particular function is run, the help file will show up instead.", "For example, if I have this code:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "help(varName)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def foo(bar):\n    bar.baz()\n</code>\n</pre>\n", "senID": 1}, {"text": ["and I want to figure out what class bar is and what .baz does, I just insert this"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def foo(bar):\n    help(bar)\n    help(bar.baz)\n    bar.baz()\n</code>\n</pre>\n", "senID": 3}, {"text": ["then run the script.", "Another way which is less invasive is to use print type(bar)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "print type(bar)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I'd take an interactive approach similar to Lie Ryan's: run the script in debug mode, set a break at the line of interest, and interactively query the variable in question."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is a more robust approach than your requested \"scan the source code looking for matching methodnames\" because it's guaranteed to get you the variable you're actually wondering about, rather than returning a set of possibles."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You could use the pydoc utility that comes with most versions of Python.", "On windows this is usually C:\\PythonXX\\Tools\\Scripts\\pydocgui.pyw (where XX is the Python version)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Running this will launch a small Tkinter window with a search box.", "You can search the auto-generated docs for all installed python modules, or open a browser on the top level documentation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you use Eclipse with PyDev for your IDE, you can use the PyDev Globals Browser.", "You can search for modules, classes, methods and functions.", "Clicking on a result will open the source file and move the cursor to the line where the object is defined."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Eclipse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.eclipse.org/"}, {"text": "PyDev", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://pydev.org/"}]}, {"src": "http://www.michaelfogleman.com/static/images/pydev_browser.png", "tag": "img", "senID": 1}, {"text": ["You can also hit F3 to jump to the definition of a variable that your cursor is on.", "For example if your cursor is on a line like import util, hitting F3 will open util.py."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "import util", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Given that your editor is vim, may I suggest ropevim.", "It uses rope, a Python refactoring library.", "Two of ropevim's features are \"find occurrences\" and \"goto definition\".", "Both of these will help you navigate your source tree."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ropevim", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rope.sourceforge.net/ropevim.html"}]}]]