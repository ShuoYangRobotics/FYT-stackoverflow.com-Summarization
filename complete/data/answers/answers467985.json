[[{"text": ["Why don't you do just use a ImageField?", "I don't see the need for the \"Image\" class."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # model\nclass Room(models.Model):\n    name = models.CharField(max_length=50)\n    image = models.ImageField(upload_to=\"uploads/images/\")\n\n\n# form\nfrom django import forms\n\nclass UploadFileForm(forms.Form):\n    name = forms.CharField(max_length=50)\n    image  = forms.FileField()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Take a look at Basic file uploads and How do I use image and file fields?"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Basic file uploads", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/http/file-uploads/#basic-file-uploads"}, {"href": "http://docs.djangoproject.com/en/dev/faq/usage/#how-do-i-use-image-and-file-fields", "text": "How do I use image and file fields?", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["You don't have to use the Image class.", "As DZPM suggested, convert the image field to an ImageField.", "You also need to make some changes to the view."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "DZPM", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/30300/dzpm"}]}, {"text": ["Instead of using an upload handler, you can create a Image object with the uploaded data and attach the Image object to the Room object."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To save the Image object you need to do something like this in the view:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from django.core.files.base import ContentFile\n\nif request.FILES.has_key('image_1'):\n    image_obj = Image()\n    image_obj.file.save(request.FILES['image_1'].name,\\\n                        ContentFile(request.FILES['image_1'].read()))\n    image_obj.save()\n    room_obj.image_set.create(image_obj)\n    room_obj.save()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Also, I think instead of the GenericRelation, you should use a ManyToManyField, in which case the syntax for adding an Image to a Room will change slightly."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["What about using two forms on the page: one for the room and one for the image?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You'll just have to make the generic foreign key fields of the image form not required, and fill in their values in the view after saving the room."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Django does support your use case at least up to a point:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "formsets display repeated forms", "tag": "none", "senID": 1}, {"text": "model formsets handle repeated model forms", "tag": "none", "senID": 2}, {"text": "inline formsets bind model formsets to related objects of an instance", "tag": "none", "senID": 3}, {"text": ["generic inline formsets"], "childNum": 0, "tag": "em", "senID": 4, "childList": []}]}, {"text": ["Generic inline formsets were introduced in changeset [8279].", "See the changes to unit tests to see how they are used."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "changeset [8279]", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.djangoproject.com/changeset/8279"}, {"text": "the changes to unit tests", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.djangoproject.com/changeset/8279#file4"}]}, {"text": ["With generic inline formsets you'll also be able to display multiple already saved images for existing rooms in your form."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Inline formsets seem to expect an existing parent instance in the instance= argument.", "The admin interface does let you fill in inlines before saving the parent instance, so there must be a way to achieve that.", "I've just never tried that myself."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "instance=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I found this page look for a solution to this same problem."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is my info -- hopefully helps some."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["MODELS: Image, Review, Manufacturer, Profile"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I want Review, Manufacturer, Profile to have a relationship to the Image model.", "But you have to beable to have multiple Images per object.", "(Ie, One Review can have 5 images a different Review can have 3, etc)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Originally I did a "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n images = ManyToManyField(Image)\n</code>\n</pre>\n", "senID": 5}, {"text": ["in each of the other models.", "This works fine, but sucks for admin (combo select box).", "This may be a solution for you though.", "I dont like it for what I'm trying to do."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The other thing I'm working on now is having multiple foreign keys."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n class Image(models.Model):\n    description = models.TextField(blank=True)\n    image = models.ImageField(upload_to=\"media/\")\n    user_profile = models.ForeignKey(UserProfile)\n    mfgr = models.ForeignKey(Manufacturer)\n    review = models.ForeignKey(Review)\n</code>\n</pre>\n", "senID": 8}, {"text": ["but like you said.", "This is pretty sloppy looking and I just dont like it."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["One other thing I just found but don't have my brain completely wrapped around (and not sure how transparent it is after implementation is Generic Relationships (or Generic Foreign Keys), which may be a solution.", "Well once I comprehend it all.", "Need more caffeine."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["http://www.djangoproject.com/documentation/models/generic_relations/"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "http://www.djangoproject.com/documentation/models/generic_relations/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/documentation/models/generic_relations/"}]}, {"text": ["Let me know if you get this sorted out or any of this helps.", "Thanks!"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Let me know if this helps or you have a different solutions."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}], [{"text": ["Ok I figured it out with some more reading...", "I feel like you want to do exactly what I have done so here it is."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'll be using GenericForeignKeys for this."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["First the imports for models.py"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "models.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from django.contrib.contenttypes.models import ContentType\nfrom django.contrib.contenttypes import generic\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now add the following to your Image Model"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class Image(models.Model):\n    content_type = models.ForeignKey(ContentType)\n    object_id = models.PositiveIntegerField()\n    content_object = generic.GenericForeignKey()\n</code>\n</pre>\n", "senID": 5}, {"text": ["This lets this model be just that, a Generic Foreign Key for any number of models.", "Then add the following to all the models you want to have related images"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n images = generic.GenericRelation(Image)\n</code>\n</pre>\n", "senID": 7}, {"text": ["Now in admin.py you need to add the following things."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n from django.contrib.contenttypes.generic import GenericTabularInline\n\nclass ImageInline(GenericTabularInline):\n    model = Image\n    extra = 3\n    ct_field_name = 'content_type'\n    id_field_name = 'object_id'\n</code>\n</pre>\n", "senID": 9}, {"text": ["And then include it in a admin declaration"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n class ReviewAdmin(admin.ModelAdmin):\n    inlines = [ImageInline]\n</code>\n</pre>\n", "senID": 11}, {"text": ["And thats it.", "Its working great over here.", "Hope this helps man!", ".adam."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"text": ["Use two forms, one for the room and one for the image:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["class Image(models.Model)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n content_type = models.ForeignKey(ContentType)\nobject_id = models.PositiveIntegerField()\ncontent_object = generic.GenericForeignKey('content_type', 'object_id')\nimage = models.ImageField(upload_to='')\n</code>\n</pre>\n", "senID": 2}, {"text": ["class UploadImage(forms.ModelForm):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Meta:\n    model = Image\n    fields = ('image')\n</code>\n</pre>\n", "senID": 4}, {"text": ["class Room(models.Model):"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n name = models.CharField(max_length=50)\nimages = models.ManyToManyField(Image)\n</code>\n</pre>\n", "senID": 6}, {"text": ["class RoomForm(forms.ModelForm):"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n class Meta:\n    model = Room\n</code>\n</pre>\n", "senID": 8}, {"text": ["in the views"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["if request.method == \"POST\":"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n ##2 form, una per l'annuncio ed una per la fotografia\n    form = RoomForm(request.POST)\n    image_form = UploadImage(request.POST, request.FILES)\n    #my_logger.debug('form.is_valid() : ' + str(form.is_valid()))\n    if form.is_valid() and image_form.is_valid():\n        ##save room\n        room = room.save()\n\n        ##save image\n        image = image_form.save()\n\n        ##ManyToMany\n        room.images = [image]\n        room.save()\n</code>\n</pre>\n", "senID": 11}]]