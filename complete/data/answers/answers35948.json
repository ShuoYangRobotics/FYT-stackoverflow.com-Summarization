[[{"text": ["I found a \"nicer\"/\"better\" solution for getting variables inside\nIts not the nicest way, but it works."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You install a custom filter into django which gets the key of your dict as a parameter"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To make it work in google app-engine you need to add a file to your main directory,\nI called mine *django_hack.py* which contains this little piece of code"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from google.appengine.ext import webapp\n\nregister = webapp.template.create_template_register()\n\ndef hash(h,key):\n    if key in h:\n        return h[key]\n    else:\n        return None\n\nregister.filter(hash)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now that we have this file, all we need to do is tell the app-engine to use it...\nwe do that by adding this little line to your main file"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n webapp.template.register_template_library('django_hack')\n</code>\n</pre>\n", "senID": 5}, {"text": ["and in your template view add this template instead of the usual code"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n {{ user|hash:item }}\n</code>\n</pre>\n", "senID": 7}, {"text": ["And its should work perfectly =)"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["I'm assuming that the part the doesn't work is {{ user.item }}."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "{{ user.item }}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Django will be trying a dictionary lookup, but using the string \"item\" and not the value of the item loop variable.", "Django did the same thing when it resolved {{ user.name  }} to the name attribute of the user object, rather than looking for a variable called name."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "\"item\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "item", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "{{ user.name  }}", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "name", "childNum": 0, "tag": "code", "childList": []}, {"text": "user", "childNum": 0, "tag": "code", "childList": []}, {"text": "name", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I think you will need to do some preprocessing of the data in your view before you render it in your template."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Or you can use the default django system which is used to resolve attributes in tempaltes like this : "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.template import Variable, VariableDoesNotExist\n@register.filter\ndef hash(object, attr):\n    pseudo_context = { 'object' : object }\n    try:\n        value = Variable('object.%s' % attr).resolve(pseudo_context)\n    except VariableDoesNotExist:\n        value = None\nreturn value\n</code>\n</pre>\n", "senID": 1}, {"text": ["That just works"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["in your template :"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n {{ user|hash:item }}\n</code>\n</pre>\n", "senID": 4}], [{"text": ["@Dave Webb (i haven't been rated high enough to comment yet)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The dot lookups can be summarized like this: when the template system encounters a dot in a variable name, it tries the following lookups, in this order:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n * Dictionary lookup (e.e., foo[\"bar\"])\n* Attribute lookup (e.g., foo.bar)\n* Method call (e.g., foo.bar())\n* List-index lookup (e.g., foo[bar])\n</code>\n</pre>\n", "senID": 2}, {"text": ["The system uses the first lookup type that works.", "It\u2019s short-circuit logic."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["As a replacement for k,v in user.items on Google App Engine using django templates where user = {'a':1, 'b', 2, 'c', 3}"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n {% for pair in user.items %}\n   {% for keyval in pair %} {{ keyval }}{% endfor %}&lt;br&gt;\n{% endfor %}\n</code>\n</pre>\n", "senID": 1}, {"text": ["a 1\nb 2\nc 3"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["pair = (key, value) for each dictionary item."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["shouldn't this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["{{ user.item }}"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["be this?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["{{ item }}"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["there is no user object in the context within that loop....?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]