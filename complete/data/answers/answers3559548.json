[[{"text": ["you can set the precision you want with the decimal built-in module:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "decimal", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/decimal.html"}, {"text": "built-in module", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n from decimal import *\ngetcontext().prec = 40\nDecimal(1).exp()\n</code>\n</pre>\n", "senID": 1}, {"text": ["returned:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Decimal('2.718281828459045235360287471352662497757')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This can also be done with sympy using numerical evaluation:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "sympy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/sympy/"}, {"href": "http://docs.sympy.org/modules/evalf.html", "text": "numerical evaluation", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import sympy\n\nprint sympy.N(sympy.E, 100)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Using a series sum you could calculate it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n getcontext().prec = 2000\ne = Decimal(0)\ni = 0\nwhile True:\n    fact = math.factorial(i)\n    e += Decimal(1)/fact\n    i += 1\n    if fact &gt; 10**2000: break\n</code>\n</pre>\n", "senID": 1}, {"text": ["But that's not really necessary, as what Mermoz did agrees just fine with it:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; e \nDecimal('2.7182818284590452353602874713526624977572470936999595749669676 \n277240766303535475945713821785251664274274663919320030599218174135966290 \n435729003342952605956307381323286279434907632338298807531952510190115738 \n341879307021540891499348841675092447614606680822648001684774118537423454 \n424371075390777449920695517027618386062613313845830007520449338265602976 \n067371132007093287091274437470472306969772093101416928368190255151086574 \n637721112523897844250569536967707854499699679468644549059879316368892300 \n987931277361782154249992295763514822082698951936680331825288693984964651 \n058209392398294887933203625094431173012381970684161403970198376793206832 \n823764648042953118023287825098194558153017567173613320698112509961818815 \n930416903515988885193458072738667385894228792284998920868058257492796104 \n841984443634632449684875602336248270419786232090021609902353043699418491 \n463140934317381436405462531520961836908887070167683964243781405927145635 \n490613031072085103837505101157477041718986106873969655212671546889570350 \n354021234078498193343210681701210056278802351930332247450158539047304199 \n577770935036604169973297250886876966403555707162268447162560798826517871 \n341951246652010305921236677194325278675398558944896970964097545918569563 \n802363701621120477427228364896134225164450781824423529486363721417402388 \n934412479635743702637552944483379980161254922785092577825620926226483262 \n779333865664816277251640191059004916449982893150566047258027786318641551 \n956532442586982946959308019152987211725563475463964479101459040905862984 \n967912874068705048958586717479854667757573205681288459205413340539220001 \n137863009455606881667400169842055804033637953764520304024322566135278369 \n511778838638744396625322498506549958862342818997077332761717839280349465 \n014345588970719425863987727547109629537415211151368350627526023264847287 \n039207643100595841166120545297030236472549296669381151373227536450988890 \n313602057248176585118063036442812314965507047510254465011727211555194866 \n850800368532281831521960037356252794495158284188294787610852639810')\n&gt;&gt;&gt; Decimal(1).exp() \nDecimal('2.7182818284590452353602874713526624977572470936999595749669676 \n277240766303535475945713821785251664274274663919320030599218174135966290 \n435729003342952605956307381323286279434907632338298807531952510190115738 \n341879307021540891499348841675092447614606680822648001684774118537423454 \n424371075390777449920695517027618386062613313845830007520449338265602976 \n067371132007093287091274437470472306969772093101416928368190255151086574 \n637721112523897844250569536967707854499699679468644549059879316368892300 \n987931277361782154249992295763514822082698951936680331825288693984964651 \n058209392398294887933203625094431173012381970684161403970198376793206832 \n823764648042953118023287825098194558153017567173613320698112509961818815 \n930416903515988885193458072738667385894228792284998920868058257492796104 \n841984443634632449684875602336248270419786232090021609902353043699418491 \n463140934317381436405462531520961836908887070167683964243781405927145635 \n490613031072085103837505101157477041718986106873969655212671546889570350 \n354021234078498193343210681701210056278802351930332247450158539047304199 \n577770935036604169973297250886876966403555707162268447162560798826517871 \n341951246652010305921236677194325278675398558944896970964097545918569563 \n802363701621120477427228364896134225164450781824423529486363721417402388 \n934412479635743702637552944483379980161254922785092577825620926226483262 \n779333865664816277251640191059004916449982893150566047258027786318641551 \n956532442586982946959308019152987211725563475463964479101459040905862984 \n967912874068705048958586717479854667757573205681288459205413340539220001 \n137863009455606881667400169842055804033637953764520304024322566135278369 \n511778838638744396625322498506549958862342818997077332761717839280349465 \n014345588970719425863987727547109629537415211151368350627526023264847287 \n039207643100595841166120545297030236472549296669381151373227536450988890 \n313602057248176585118063036442812314965507047510254465011727211555194866 \n850800368532281831521960037356252794495158284188294787610852639814')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I would think you could combine the info from these webpages:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://en.wikipedia.org/wiki/Taylor_series"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://en.wikipedia.org/wiki/Taylor_series", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Taylor_series"}]}, {"text": ["This gives you the familiar power series.", "Since you're working with large factorial numbers you should then probably work with gmpy which implements multiiprecision arithmetic.", "An example for the evaluation of pi is given here"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://wj32.wordpress.com/2007/12/04/ways-to-calculate-pi-in-python/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://wj32.wordpress.com/2007/12/04/ways-to-calculate-pi-in-python/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wj32.wordpress.com/2007/12/04/ways-to-calculate-pi-in-python/"}]}], [{"text": ["The excellent pure-python library, Mpmath, will certainly do the trick. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Mpmath", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/mpmath/"}]}, {"text": ["The sole focus of this library is multi-precision floating-point arithmetic."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "multi-precision floating-point arithmetic", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["E.g., Mpath can evaluate e to arbitrary precision:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "Mpath", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "e", "childNum": 1, "tag": "strong", "childList": [{"text": "e", "tag": "em"}]}, {"text": "e", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n In [2]: from mpmath import *\n# set the desired precision on the fly\nIn [3]: mp.dps=20; mp.pretty=True\nIn [4]: +e\nOut[4]: 2.7182818284590452354\n\n# re-set the precision (50 digits)\nIn [5]: mp.dps=50; mp.pretty=True\nIn [6]: +e\nOut[6]: 2.7182818284590452353602874713526624977572470937\n</code>\n</pre>\n", "senID": 3}, {"text": ["As an aside, Mpmath is also tightly integrated with Matplotlib."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Using Sage:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n N(e, digits=2000)\n</code>\n</pre>\n", "senID": 1}]]