[[{"text": ["The quad function is a function from an old Fortran library.", "It works by judging by the flatness and slope of the function it is integrating how to treat the step size it uses for numerical integration in order to maximize efficiency.", "What this means is that you may get slightly different answers from one region to the next even if they're analytically the same."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "quad", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Without a doubt both integrations should return zero.", "Returning something that is 1/(10 trillion) is pretty close to zero!", "The slight differences are due to the way quad is rolling over sin and changing its step sizes.", "For your planned task, quad will be all you need."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "quad", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "sin", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "quad", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["EDIT:\nFor what you're doing I think quad is fine.", "It is fast and pretty accurate.", "My final statement is use it with confidence unless you find something that really has gone quite awry.", "If it doesn't return a nonsensical answer then it is probably working just fine.", "No worries."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "quad", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I think it is probably machine precision since both answers are effectively zero."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want an answer from the horse's mouth I would post this question on the scipy discussion board"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "scipy discussion board", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.nabble.com/Scipy-User-f33045.html"}]}], [{"text": ["I would say that a number O(10^-14) is effectively zero.", "What's your tolerance?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It might be that the algorithm underlying quad isn't the best.", "You might try another method for integration and see if that improves things.", "A 5th order Runge-Kutta can be a very nice general purpose technique."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It could be just the nature of floating point numbers: \"What Every Computer Scientist Should Know About Floating Point Arithmetic\"."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\"What Every Computer Scientist Should Know About Floating Point Arithmetic\".", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.physics.ohio-state.edu/~dws/grouplinks/floating%5Fpoint%5Fmath.pdf"}]}], [{"text": ["This output seems correct to me since you have absolute error estimate here.", "The integral value of sin(x) is indeed should have value of zero for full period (any interval of 2*pi length) in both ordinary and numeric integration and your results is close to that value.", "To evaluate arc length you should calculate integral for sqrt(1+diff(f(x), x)^2) function, where diff(f(x), x) is derivative of f(x).", "See also Arc length"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "Arc length", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Arclength"}]}], [{"code": "<pre>\n<code>\n 0.0 == 2.3e-16 (absolute error tolerance 4.4e-14)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Both answers are the same and correct i.e., zero within the given tolerance."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "correct", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["The difference comes from the fact that sin(x)=-sin(-x) exactly even in finite precision.", "Whereas finite precision only gives sin(x)~sin(x+2*pi) approximately.", "Sure it would be nice if quad were smart enough to figure this out, but it really has no way of knowing apriori that the integral over the two intervals you give are equivalent or that the the first is a better result."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]