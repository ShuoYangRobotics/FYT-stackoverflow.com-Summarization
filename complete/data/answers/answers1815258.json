[[{"text": ["First of, don't use list as the name for a variable, as it shadows the built-in list function."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/3.1/library/functions.html#list", "text": "list", "childNum": 1, "tag": "a", "childList": [{"text": "list", "tag": "code"}]}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["For the finding"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; L = [('ba',4), ('hh',5), ('gg', 25)]\n&gt;&gt;&gt; [ i for i,l in enumerate(L) if l[0] == 'hh' ][0]\n1\n</code>\n</pre>\n", "senID": 1}, {"text": ["You need to decide what to do if it is found multiple times or not at all - the above will throw IndexError if not found and return the first if it is found multiple times."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "IndexError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For the sorting"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; L = [('ba',4), ('hh',5), ('gg', 25)]\n&gt;&gt;&gt; sorted(L, key=lambda x: x[1])\n[('ba', 4), ('hh', 5), ('gg', 25)]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I think Nick's sorting answer is good, but his find method unnecessarily iterates over the entire list, even after it has found a match.", "With a small change it can be fixed to stop iterating as soon as it finds the first element:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n index = (i for i,l in enumerate(l) if l[0] == 'aa').next()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or in Python 3:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n index = next(i for i,l in enumerate(l) if l[0] == 'aa')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["to sort the list u can use a custom sort method some thing like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = [('ba',4), ('hh',5), ('gg', 25)]\n\ndef sortMethod(x,y):\n    if x[1] &lt; y[1]:return 1\n    elif x[1] &gt; y[1]:return -1\n    else: return 0\n\n\nprint x         #unsorted\nx.sort(sortMethod)\nprint x         #sorted\n</code>\n</pre>\n", "senID": 1}], [{"text": ["you can also have your list in dictionary form"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list1 = [('ba',4), ('hh',5), ('gg', 25)]\ndict1 = dict(list1)\n\nprint dict1['hh']\n5\n</code>\n</pre>\n", "senID": 1}, {"text": ["dicts are faster then list if you need to search like that."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["btw, overriding built-in type list to variables are not good idea list = [('ba',4), ('hh',5), ('gg', 25)]."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list = [('ba',4), ('hh',5), ('gg', 25)]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["For the sort, you should use itemgetter"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import operator\n&gt;&gt;&gt; L = [('ba',4), ('hh',5), ('gg', 25)]\n&gt;&gt;&gt; sorted(L, key=operator.itemgetter(1))\n[('ba', 4), ('hh', 5), ('gg', 25)]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n from itertools import imap\n\ndef find(iterable, item, key=None):\n    \"\"\"Find `item` in `iterable`.\n\n    Return index of the found item or ``-1`` if there is none.\n\n    Apply `key` function to items before comparison with\n    `item`. ``key=None`` means an identity function.\n    \"\"\"\n    it = iter(iterable) if key is None else imap(key, iterable)\n    for i, e in enumerate(it):\n        if e == item:\n            return i\n    return -1\n</code>\n</pre>\n", "senID": 0}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n L = [('ba', 4), ('hh', 5), ('gg', 25)]\nprint find(L, 'hh', key=lambda x: x[0])\n</code>\n</pre>\n", "senID": 2}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n 1\n</code>\n</pre>\n", "senID": 4}], [{"text": ["For the last question, convert list2 into a set:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; list1 = [('ba',4), ('hh',5), ('gg', 25)]\n&gt;&gt;&gt; list2 = [('ja',40), ('hgh',88), ('hh', 2)]\n&gt;&gt;&gt; \n&gt;&gt;&gt; wanted = set(a for (a,b) in list2)\n&gt;&gt;&gt; for x in list1:\n...     if x[0] in wanted:\n...         print x\n... \n('hh', 5)\n</code>\n</pre>\n", "senID": 1}]]