[[{"text": ["To trigger a download you need to set Content-Disposition header:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Content-Disposition", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from django.http import HttpResponse\nfrom django.core.servers.basehttp import FileWrapper\n\n# generate the file\nresponse = HttpResponse(FileWrapper(myfile), content_type='application/zip')\nresponse['Content-Disposition'] = 'attachment; filename=myfile.zip'\nreturn response\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you don't want the file on disk you need to use StringIO"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "StringIO", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import cStringIO as StringIO\n\nmyfile = StringIO.StringIO()\nwhile not_finished:\n    # generate chunk\n    myfile.write(chunk)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Optionally you can set Content-Length header as well:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Content-Length", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n response['Content-Length'] = myfile.tell()\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You'll be happier creating a temporary file.", "This saves a lot of memory.", "When you have more than one or two users concurrently, you'll find the memory saving is very, very important."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can, however, write to a StringIO object."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "StringIO", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stringio.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import zipfile\n&gt;&gt;&gt; import StringIO\n&gt;&gt;&gt; buffer= StringIO.StringIO()\n&gt;&gt;&gt; z= zipfile.ZipFile( buffer, \"w\" )\n&gt;&gt;&gt; z.write( \"idletest\" )\n&gt;&gt;&gt; z.close()\n&gt;&gt;&gt; len(buffer.getvalue())\n778\n</code>\n</pre>\n", "senID": 2}, {"text": ["The \"buffer\" object is file-like with a 778 byte ZIP archive."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Yes, you can use the zipfile module, zlib module or other compression modules to create a zip archive in memory.", "You can make your view write the zip archive to the HttpResponse object that the Django view returns instead of sending a context to a template.", "Lastly, you'll need to set the mimetype to the appropriate format to tell the browser to treat the response as a file."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "zipfile module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/zipfile-objects.html"}, {"text": "zlib module", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-zlib.html"}, {"text": "compression modules", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/archiving.html"}, {"text": "HttpResponse", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "tell the browser to treat the response as a file", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/request-response/#telling-the-browser-to-treat-the-response-as-a-file-attachment"}]}], [{"text": ["There is a code example at http://djangosnippets.org/snippets/365/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://djangosnippets.org/snippets/365/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://djangosnippets.org/snippets/365/"}]}], [{"text": ["Why not make a tar file instead?", "Like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def downloadLogs(req, dir):\n    response = HttpResponse(mimetype='application/x-gzip')\n    response['Content-Disposition'] = 'attachment; filename=download.tar.gz'\n    tarred = tarfile.open(fileobj=response, mode='w:gz')\n    tarred.add(dir)\n    tarred.close()\n\n    return response\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n from django.db import models\n\nclass PageHeader(models.Model):\n    image = models.ImageField(upload_to='uploads')\n</code>\n</pre>\n", "senID": 0}, {"code": "<pre>\n<code>\n from django.http import HttpResponse\nfrom StringIO import StringIO\nfrom models import *\nimport os, mimetypes, urllib\n\ndef random_header_image(request):\n    header = PageHeader.objects.order_by('?')[0]\n    image = StringIO(file(header.image.path, \"rb\").read())\n    mimetype = mimetypes.guess_type(os.path.basename(header.image.name))[0]\n\n    return HttpResponse(image.read(), mimetype=mimetype)\n</code>\n</pre>\n", "senID": 1}]]