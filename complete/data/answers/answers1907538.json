[[{"text": ["The following line will create a list where each item is a list.", "The inner list is one line thats split up into \"words\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n li = [i.strip().split() for i in open(\"input.txt\").readlines()]\n</code>\n</pre>\n", "senID": 1}, {"text": ["I put the code snippet you posted into a input.txt file in c:\\temp and ran this line.", "Is the output similar to what you want?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n C:\\temp&gt;python\nPython 3.1.1 (r311:74483, Aug 17 2009, 17:02:12) [MSC v.1500 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; print([i.strip().split() for i in open(\"input.txt\").readlines()])\n[['p', 'wfgh', '1111', '11111', '111111'], ['287', '48', '0'], ['65626', '-1818', '0'], ['4654', '21512', '02020', '0']]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n fileName=open(\"d:/foo.bar\")\nlines = [i for i in fileName.readlines()]\n</code>\n</pre>\n", "senID": 0}, {"text": ["hope that helps :D"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n p = open('filename')\n\n#List:\nlinelist = [line for line in p.readlines()]\n\n\"\"\"\nBut I prefer creating a dictionary as I find them more useful at times. Example here is very trivial. You can use the list index as a line number also.\n\"\"\"\n\n#Dictionary:\nlinedict = dict([(no, line) for no, line in enumerate(p.readlines())])\n</code>\n</pre>\n", "senID": 0}], [{"text": ["look at this:\nInput Output Python Documentation"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Input Output Python Documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/inputoutput.html"}]}, {"text": ["The Keyword here is \"readline\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you have problems using it...reedit your question"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you want all of the values in a flat list, the code would look as follows:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ls=[]\nfor line in open( \"input.txt\", \"r\" ).readlines():\n    for value in line.split( ' ' ):\n        ls.append( value )\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you just want the lines in a list then you can stop at readlines()."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n fh=open(\"file\")\nmylist=[]\nheader=fh.readline().rstrip()\nif not header.startswith(\"p wncf\") :\n    print \"error\"\nheader=header.split()\nmylist.append(header)\nif len(header) != 5:\n    print \"error\"\nif False in map(str.isdigit, header[2:]):\n    print \"Error\"\nfor line in fh:\n    line=line.rstrip().split()\n    if False in map(str.isdigit, line[0:2]):\n        print \"Error\"            \n    elif line[-1] != 0: \n        print \"Error\"\n    else:\n        mylist.append(line)\nfh.close()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["To build a list of only the lines in the file that contain at least two integers and end with a zero, use a regular expression:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\np = re.compile(r'^((\\-?\\d*\\s+){2,})0$')\nwith open(filename, 'rb') as f:\n    seq = [line.strip() for line in f if p.match(line)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You're not providing all the details, but i assume that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "there's only 1 header line at the beginning and you don't need what's in it", "tag": "none", "senID": 1}, {"text": "the other lines only contain integers", "tag": "none", "senID": 2}, {"text": "you don't need to retain the trailing '0'", "tag": "none", "senID": 3}]}, {"text": ["I have to also assume your file may be very big, so reading the entire file in memory, or storing the entire resulting list in memory is not a very good idea."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Here's a quick solution which reads the file line-by-line and uses a generator to yield each line as a list.", "You can use the entire result as one list if you want, like so:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n result_list = read_data('foo.dat')\n</code>\n</pre>\n", "senID": 6}, {"text": ["or you can do as i did in the example call and use each result line as it's read out.", "You can call this file directly if you're on linux, otherwise just associate it with the python interpreter, and call it with the name of the data file as the first argument, and it'll print the results line by line - this will work even if your file is humongous.", "You can also just import the file as a module and use the read_data method and use the results in other calculations."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Note that it does some error checking (the header line starts with a p and the data lines end with a 0, and only contain integers), and you probably want to either not do this checking at all, or raise a proper exception when they're encountered."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\nimport sys\n\ndef read_data(fn):\n    \"\"\"Reads in datafile\n\n    data file is in format:\n        p wfgh 1111 11111 111111\n        287 48 0\n        65626 -1818 0\n        4654 21512 02020 0\n    where first line begins with p and is a header, and following lines\n    are comprised of at least 2 integers plus a tailing 0.\n    Pass in the filename, the resulting list of lists of integers will be \n    returned.\n    \"\"\"\n    f = open(fn, 'r')\n    # check for header line\n    assert(f.readline().split()[0]=='p')\n    for l in f:\n        d = [int(col) for col in l.split()]\n        if not d:\n            # skip empty lines\n            continue\n        # check we have at least 2 integers and the last column is 0\n        assert(d[-1] == 0 and len(d) &gt;= 3)\n        # yield current line\n        yield d[:-1]\n\nif __name__ == '__main__':\n    for l in read_data(sys.argv[1]):\n        print unicode(l)\n</code>\n</pre>\n", "senID": 9}]]