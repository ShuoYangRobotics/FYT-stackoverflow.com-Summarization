[[{"code": "<pre>\n<code>\n perl -nE '$,=\"\\t\"; say eval' file.txt\n</code>\n</pre>\n", "senID": 0}, {"text": ["Making use of perl's output record separator, $, to provide the tabs.", "eval should be safe to use on single quoted strings, and is probably the best option. "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "$,", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "eval", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Perl one-liner here ^_^"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n cat file.txt | perl -ni -e \"printf qq{%s\\t%s\\t%s\\n}, m/'([^']+)'/g;\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["using python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for line in open('filename'): print('%s\\t%s\\t%s'%(eval(line)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["(of course, you need to pass this one-line python script to the python interpreter:python -c \"...\")"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "(of course, you need to pass this one-line python script to the python interpreter:python -c \"...\")", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "python -c \"...\"", "tag": "code"}]}, {"text": "python -c \"...\"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["the eval() function is not safe and should be considered \"evil\" if you are going to process unverified user input through it.", "if this function is a real threat to you, you can use this version, which is much more restrictive with its input: "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "eval()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import ast\nfor line in open('filename'):\n    print('%s\\t%s\\t%s'%(ast.literal_eval(line)))\n</code>\n</pre>\n", "senID": 4}, {"text": ["(hereis the documentation forast.literal_eval())"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "(hereis the documentation forast.literal_eval())", "childNum": 2, "tag": "em", "pos": 0, "childList": [{"text": "here", "tag": "a"}, {"text": "ast.literal_eval()", "tag": "code"}]}, {"href": "http://docs.python.org/library/ast.html#ast.literal_eval", "text": "here", "childNum": 0, "tag": "a", "childList": []}, {"text": "ast.literal_eval()", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n perl -pe \"s/\\('(.*)', \\'([0-9]*)', '([0-9]*)'\\)/$1\\t$2\\t$3/g\" yourfile\n</code>\n</pre>\n", "senID": 0}, {"text": ["did the trick for me"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Would sed/awk work for you, too?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n awk '{print $1\"\\t\"$2\"\\t\"$3}' your_file_with_stuff_in_it | sed \"s/[')(,]//g\"\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n awk -F \"'\" 'BEGIN {OFS=\"\\t\"} {print $2, $4, $6}' FILE\n</code>\n</pre>\n", "senID": 0}]]