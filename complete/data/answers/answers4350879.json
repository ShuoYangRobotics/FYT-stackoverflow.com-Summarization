[[{"text": ["'man expand' for some info"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["it's in coreutils on Debian"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can use expand and unexpand Unix commands for this."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "expand", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "unexpand", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Generally if I code in vim for instance I have it automatically convert tabs to spaces."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["my ~/.vimrc looks something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n set expandtab\nset tabstop=4\n</code>\n</pre>\n", "senID": 3}], [{"text": ["reindent.py is a nifty utility script which converts any python .py file into one using 4-space indents and no tabs. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "reindent.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/projects/python/trunk/Tools/scripts/reindent.py"}]}, {"text": ["This is useful for \"normalizing\" code from disparate sources, assuming you're willing to settle on the 4-space standard.", "(Or, if you want tabs, you could run reindent.py followed by the unix unexpand command."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "unexpand", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["PS.", "Your installation of Python may have reindent.py already installed in a Tools or Examples folder.", "On Ubuntu it is provided by the python-examples package, and is located at /usr/share/doc/python2.6/examples/Tools/scripts/reindent.py."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "python-examples", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "/usr/share/doc/python2.6/examples/Tools/scripts/reindent.py", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Many editors (vi for example) will convert tabs to or from spaces when you indent a line.", "So set the tab settings however you want, then indent the entire file 1 step, and then unindent one step, and your're done."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Vim commands:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 1GVG  &lt;-- select entire file (i have this bound to CTRL-A)\n&gt;     &lt;-- indent one step\n1GVG  &lt;-- select again \n&lt;     &lt;--- unindent one step\n</code>\n</pre>\n", "senID": 2}], [{"text": ["How about Perl: perl -pe 's/(.*?)\\t/$1.", "(\" \" x (4-length($1)%4))/ge' file_with_tabs.txt"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "perl -pe 's/(.*?)\\t/$1.(\" \" x (4-length($1)%4))/ge' file_with_tabs.txt", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["python (this is from the source of Markdown...):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def _detab_sub(self, match):\n    g1 = match.group(1)\n    return g1 + (' ' * (self.tab_width - len(g1) % self.tab_width))\ndef _detab(self, text):\n\n    if '\\t' not in text:\n        return text\n    return self._detab_re.subn(self._detab_sub, text)[0]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["A good programmer's editor will have a command that converts tabs to spaces or vice/versa; you can also do it with search-and-replace in the editor."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]