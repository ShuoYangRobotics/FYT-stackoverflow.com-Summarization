[[{"text": ["Not tested:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class TestPreReqs(unittest.TestCase):\n    ...\n\ndef create_test (pair):\n    def do_test_expected(self):\n        self.assertEqual(under_test(pair[0]), pair[1])\n    return do_test_expected\n\nfor k, pair in enumerate ([(23, 55), (4, 32)]):\n    test_method = create_test (pair)\n    test_method.__name__ = 'test_expected_%d' % k\n    setattr (TestPreReqs, test_method.__name__, test_method)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you use this often, you could prettify this by using utility functions and/or decorators, I guess.", "Note that pairs are not an attribute of TestPreReqs object in this example (and so setUp is gone).", "Rather, they are \"hardwired\" in a sense to the TestPreReqs class."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "TestPreReqs", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "setUp", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "TestPreReqs", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"code": "<pre>\n<code>\n #!/usr/bin/env python\n# file: test_pairs_nose.py\nfrom nose.tools import eq_ as eq\n\nfrom mymodule import f\n\ndef test_pairs(): \n    for input, output in [ (2, 332), (234, 99213), (9, 3), ]:\n        yield _test_f, input, output\n\ndef _test_f(input, output):\n    try:\n        eq(f(input), output)\n    except AssertionError:\n        if input == 9: # expected failure\n            from nose.exc import SkipTest\n            raise SkipTest(\"expected failure\")\n        else:\n            raise\n\nif __name__==\"__main__\":\n   import nose; nose.main()\n</code>\n</pre>\n", "senID": 0}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $ nosetests test_pairs_nose -v\ntest_pairs_nose.test_pairs(2, 332) ... ok\ntest_pairs_nose.test_pairs(234, 99213) ... ok\ntest_pairs_nose.test_pairs(9, 3) ... SKIP: expected failure\n\n----------------------------------------------------------------------\nRan 3 tests in 0.001s\n\nOK (SKIP=1)\n</code>\n</pre>\n", "senID": 2}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\nimport unittest2 as unittest\nfrom mymodule import f\n\ndef add_tests(generator):\n    def class_decorator(cls):\n        \"\"\"Add tests to `cls` generated by `generator()`.\"\"\"\n        for f, input, output in generator():\n            test = lambda self, i=input, o=output, f=f: f(self, i, o)\n            test.__name__ = \"test_%s(%r, %r)\" % (f.__name__, input, output)\n            setattr(cls, test.__name__, test)\n        return cls\n    return class_decorator\n\ndef _test_pairs():\n    def t(self, input, output):\n        self.assertEqual(f(input), output)\n\n    for input, output in [ (2, 332), (234, 99213), (9, 3), ]:\n        tt = t if input != 9 else unittest.expectedFailure(t)\n        yield tt, input, output\n\nclass TestCase(unittest.TestCase):\n    pass\nTestCase = add_tests(_test_pairs)(TestCase)\n\nif __name__==\"__main__\":\n    unittest.main()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n $ python test_pairs_unit2.py -v\ntest_t(2, 332) (__main__.TestCase) ... ok\ntest_t(234, 99213) (__main__.TestCase) ... ok\ntest_t(9, 3) (__main__.TestCase) ... expected failure\n\n----------------------------------------------------------------------\nRan 3 tests in 0.000s\n\nOK (expected failures=1)\n</code>\n</pre>\n", "senID": 5}, {"text": ["If you don't want to install unittest2 then add:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "unittest2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n try:    \n    import unittest2 as unittest\nexcept ImportError:\n    import unittest\n    if not hasattr(unittest, 'expectedFailure'):\n       import functools\n       def _expectedFailure(func):\n           @functools.wraps(func)\n           def wrapper(*args, **kwargs):\n               try:\n                   func(*args, **kwargs)\n               except AssertionError:\n                   pass\n               else:\n                   raise AssertionError(\"UnexpectedSuccess\")\n           return wrapper\n       unittest.expectedFailure = _expectedFailure\n</code>\n</pre>\n", "senID": 7}], [{"text": ["As often with Python, there is a complicated way to provide a simple solution."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In that case, we can use metaprogramming, decorators, and various nifty Python tricks to achieve a nice result.", "Here is what the final test will look like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import unittest\n\n# some magic code will be added here later\n\nclass DummyTest(unittest.TestCase):\n  @for_examples(1, 2)\n  @for_examples(3, 4)\n  def test_is_smaller_than_four(self, value):\n    self.assertTrue(value &lt; 4)\n\n  @for_examples((1,2),(2,4),(3,7))\n  def test_double_of_X_is_Y(self, x, y):\n    self.assertEqual(2 * x, y)\n\nif __name__ == \"__main__\":\n  unittest.main()\n</code>\n</pre>\n", "senID": 2}, {"text": ["When executing this script, the result is:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ..F...F\n======================================================================\nFAIL: test_double_of_X_is_Y(3,7)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/xdecoret/Documents/foo.py\", line 22, in method_for_example\n    method(self, *example)\n  File \"/Users/xdecoret/Documents/foo.py\", line 41, in test_double_of_X_is_Y\n    self.assertEqual(2 * x, y)\nAssertionError: 6 != 7\n\n======================================================================\nFAIL: test_is_smaller_than_four(4)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/xdecoret/Documents/foo.py\", line 22, in method_for_example\n    method(self, *example)\n  File \"/Users/xdecoret/Documents/foo.py\", line 37, in test_is_smaller_than_four\n    self.assertTrue(value &lt; 4)\nAssertionError\n\n----------------------------------------------------------------------\nRan 7 tests in 0.001s\n\nFAILED (failures=2)\n</code>\n</pre>\n", "senID": 4}, {"text": ["which achieves our goal:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "it is unobtrusive: we derive from TestCase as usual", "tag": "none", "senID": 6}, {"text": "we write parametrized tests only once", "tag": "none", "senID": 7}, {"text": "each example value is considered an individual test", "tag": "none", "senID": 8}, {"text": "the decorator can be stacked, so it is easy to use sets of examples (e.g. using a function to build the list of values from example files or directories)", "tag": "none", "senID": 9}, {"text": "icing on the cake, it works for arbitrary arity of the signature", "tag": "none", "senID": 10}]}, {"text": ["So how does it work.", "Basically, the decorator stores the examples in an attribute of the function.", "We use metaclass to replace every decorated function with a list of functions.", "And we replace the unittest.TestCase with our new The magic code (to be pasted in the \"magic\" comment above) is:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n __examples__ = \"__examples__\"\n\ndef for_examples(*examples):\n    def decorator(f, examples=examples):\n      setattr(f, __examples__, getattr(f, __examples__,()) + examples)\n      return f\n    return decorator\n\nclass TestCaseWithExamplesMetaclass(type):\n  def __new__(meta, name, bases, dict):\n    def tuplify(x):\n      if not isinstance(x, tuple):\n        return (x,)\n      return x\n    for methodname, method in dict.items():\n      if hasattr(method, __examples__):\n        dict.pop(methodname)\n        examples = getattr(method, __examples__)\n        delattr(method, __examples__)\n        for example in (tuplify(x) for x in examples):\n          def method_for_example(self, method = method, example = example):\n            method(self, *example)\n          methodname_for_example = methodname + \"(\" + \", \".join(str(v) for v in example) + \")\"\n          dict[methodname_for_example] = method_for_example\n    return type.__new__(meta, name, bases, dict)\n\nclass TestCaseWithExamples(unittest.TestCase):\n  __metaclass__ = TestCaseWithExamplesMetaclass\n  pass\n\nunittest.TestCase = TestCaseWithExamples\n</code>\n</pre>\n", "senID": 12}, {"text": ["If someone wants to package this nicely, or propose a patch for unittest, feel free!", "A quote of my name will be appreciated."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["-- Edit --------"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["The code can be made much simpler and fully encapsulated in the decorator if you are ready to use frame introspection (import the sys module)"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n def for_examples(*parameters):\n\n  def tuplify(x):\n    if not isinstance(x, tuple):\n      return (x,)\n    return x\n\n  def decorator(method, parameters=parameters):\n    for parameter in (tuplify(x) for x in parameters):\n\n      def method_for_parameter(self, method=method, parameter=parameter):\n        method(self, *parameter)\n      args_for_parameter = \",\".join(repr(v) for v in parameter)\n      name_for_parameter = method.__name__ + \"(\" + args_for_parameter + \")\"\n      frame = sys._getframe(1)  # pylint: disable-msg=W0212\n      frame.f_locals[name_for_parameter] = method_for_parameter\n    return None\n  return decorator\n</code>\n</pre>\n", "senID": 16}], [{"text": ["With nose tests, then yes.", "See this: http://somethingaboutorange.com/mrl/projects/nose/0.11.1/writing_tests.html#test-generators"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://somethingaboutorange.com/mrl/projects/nose/0.11.1/writing_tests.html#test-generators", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose/0.11.1/writing_tests.html#test-generators"}]}], [{"text": ["I had to do something similar.", "I created simple TestCase subclasses that took a value in their __init__, like this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "TestCase", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class KnownGood(unittest.TestCase):\n    def __init__(self, input, output):\n        super(KnownGood, self).__init__()\n        self.input = input\n        self.output = output\n    def runTest(self):\n        self.assertEqual(function_to_test(input), output)\n</code>\n</pre>\n", "senID": 1}, {"text": ["I then made a test suite with these values:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def suite():\n    suite = unittest.TestSuite()\n    suite.addTests(KnownGood(input, output) for input, output in known_values)\n    return suite\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can then run it from your main method:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if __name__ == '__main__':\n    unittest.TextTestRunner().run(suite())\n</code>\n</pre>\n", "senID": 5}, {"text": ["The advantages of this are:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "As you add more values, the number of reported tests increases, which makes you feel like you are doing more.", "tag": "none", "senID": 7}, {"text": "Each individual test case can fail individually", "tag": "none", "senID": 8}, {"text": "It's conceptually simple, since each input/output value is converted into one TestCase", "tag": "none", "senID": 9}]}], [{"text": ["I think Rory's solution is the cleanest and shortest.", "However, this variation of  doublep's \"create synthetic functions in a TestCase\"  also works:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from functools import partial\nclass TestAllReports(unittest.TestCase):\n    pass\n\ndef test_spamreport(name):\n    assert classify(getSample(name))=='spamreport', name\n\nfor rep in REPORTS:\n    testname = 'test_'+rep\n    testfunc = partial(test_spamreport, rep)\n    testfunc.__doc__ = testname\n    setattr( TestAllReports, testname, testfunc )\n\nif __name__=='__main__':\n    unittest.main(argv=sys.argv + ['--verbose'])\n</code>\n</pre>\n", "senID": 1}]]