[[{"code": "<pre>\n<code>\n sum(x &gt; 0 for x in frequencies)\n</code>\n</pre>\n", "senID": 0}, {"text": ["bool is a subclass of int:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "bool", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n In [15]: isinstance(True,int)\nOut[15]: True\n</code>\n</pre>\n", "senID": 2}, {"text": ["and True's value is 1:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n In [16]: True==1\nOut[16]: True\n</code>\n</pre>\n", "senID": 4}], [{"text": ["A slightly more Pythonic way would be to use a generator instead:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sum(1 for x in frequencies if x &gt; 0)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This avoids generating the whole list before calling sum()."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "sum()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["This works, but adding bools as ints may be dangerous.", "Please take this code with a grain of salt (maintainability goes first):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "bool", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n sum(k&gt;0 for k in x)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use len() on the filtered list:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "len()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n len([x for x in frequencies if x &gt; 0])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How about this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["reduce(lambda x, y: x+1 if y &gt; 0 else x, frequencies)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "reduce(lambda x, y: x+1 if y &gt; 0 else x, frequencies)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["EDIT:\nWith inspiration from the accepted answer from @~unutbu:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["reduce(lambda x, y: x + (y &gt; 0), frequencies)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "reduce(lambda x, y: x + (y &gt; 0), frequencies)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If the array only contains elements >= 0 (i.e.", "all elements are either 0 or a positive integer) then you could just count the zeros and subtract this number form the length of the array:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n len(arr) - arr.count(0)\n</code>\n</pre>\n", "senID": 1}]]