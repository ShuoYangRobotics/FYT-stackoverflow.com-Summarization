[[{"code": "<pre>\n<code>\n use strict;\nuse warnings;\nwhile(my $line = &lt;DATA&gt;){\n  $line =~ s/#(\\d+)/'#'.($1 + 11)/e;\n}\n__DATA__\n(bookmarks\n(\"Chapter 1 Introduction 1\" \"#1\"\n(\"1.1 Problem Statement and Basic Definitions 2\" \"#2\")\n(\"1.2 Illustrative Examples 4\" \"#4\")\n(\"1.3 Guidelines for Model Construction 26\" \"#26\")\n(\"Exercises 30\" \"#30\")\n(\"Notes and References 34\" \"#34\"))\n)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Output:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Output:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n (bookmarks\n(\"Chapter 1 Introduction 1\" \"#12\"\n(\"1.1 Problem Statement and Basic Definitions 2\" \"#13\")\n(\"1.2 Illustrative Examples 4\" \"#15\")\n(\"1.3 Guidelines for Model Construction 26\" \"#37\")\n(\"Exercises 30\" \"#41\")\n(\"Notes and References 34\" \"#45\"))\n)\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n awk -F'#' 'NF&gt;1{split($2,a,\"[0-9]+\");print $1 FS $2+11 a[2];next}1' infile\n</code>\n</pre>\n", "senID": 0}, {"code": "<pre>\n<code>\n $ awk -F'#' 'NF&gt;1{split($2,a,\"[0-9]+\");print $1 FS $2+11 a[2];next}1' infile\n(bookmarks\n(\"Chapter 1 Introduction 1\" \"#12\"\n(\"1.1 Problem Statement and Basic Definitions 2\" \"#13\")\n(\"1.2 Illustrative Examples 4\" \"#15\")\n(\"1.3 Guidelines for Model Construction 26\" \"#37\")\n(\"Exercises 30\" \"#41\")\n(\"Notes and References 34\" \"#45\"))\n)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Python, try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nm = re.search(r'(?&lt;=#)([0-9]+)',txt)\n</code>\n</pre>\n", "senID": 1}, {"text": ["to find the next number.", "Then set:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n txt = txt[:m.start()] + str(int(m.group())+11) + txt[m.end():]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Repeat that (e.g.", "in a while-loop) as long as search doesnt find any further matches."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "search", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Note: The regExp (?&lt;=#)([0-9]+) matches any sequence of digits which follow the #-character.", "start() yields the start-position of the next match; end() yields the end-Position and group() yields the actual match.", "The expression str(int(m.group()) +11) converts the matched number to an int-value, adds 11 and re-converts in to a string."], "childNum": 5, "tag": "p", "senID": 5, "childList": [{"text": "(?&lt;=#)([0-9]+)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "start()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "end()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "group()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "str(int(m.group()) +11)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If you can use Ruby(1.9+)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ ruby -ne 'puts $_=/#/?$_.gsub(/(.*#)(\\d+)(.*)/){\"#{$1}\"+($2.to_i+11).to_s+\"#{$3}\"}:$_' file\n(bookmarks\n(\"Chapter 1 Introduction 1\" \"#12\"\n(\"1.1 Problem Statement and Basic Definitions 2\" \"#13\")\n(\"1.2 Illustrative Examples 4\" \"#15\")\n(\"1.3 Guidelines for Model Construction 26\" \"#37\")\n(\"Exercises 30\" \"#41\")\n(\"Notes and References 34\" \"#45\"))\n)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Python"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dh = '''\"Chapter 1 Introduction 1\" \"#1\"\n\"1.1 Problem Statement and Basic Definitions 2\" \"#2\"\n\"1.2 Illustrative Examples 4\" \"#4\"\n\"1.3 Guidelines for Model Construction 26\" \"#26\"\n\"Exercises 30\" \"#30\"\n\"Notes and References 34\" \"#34\"'''\n\npat = re.compile('^(\".+?(\\d+)\" *\"#)\\\\2\" *$',re.M)\n\ndef zoo(mat):\n    return '%s%s\"' % (mat.group(1),str(int(mat.group(2))+11))\n\nprint dh\nprint\nprint pat.sub(zoo,dh)\n</code>\n</pre>\n", "senID": 1}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n \"Chapter 1 Introduction 1\" \"#1\"\n\"1.1 Problem Statement and Basic Definitions 2\" \"#2\"\n\"1.2 Illustrative Examples 4\" \"#4\"\n\"1.3 Guidelines for Model Construction 26\" \"#26\"\n\"Exercises 30\" \"#30\"\n\"Notes and References 34\" \"#34\"\n\n\"Chapter 1 Introduction 1\" \"#12\"\n\"1.1 Problem Statement and Basic Definitions 2\" \"#13\"\n\"1.2 Illustrative Examples 4\" \"#15\"\n\"1.3 Guidelines for Model Construction 26\" \"#37\"\n\"Exercises 30\" \"#41\"\n\"Notes and References 34\" \"#45\"\n</code>\n</pre>\n", "senID": 3}, {"text": [], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["But beginning from the preceding string as exposed in your other message:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n eh = '''Chapter 3 Convex Functions 97 \n3.1 Definitions 98  \n3.2 Basic Properties 103'''\n\npat = re.compile('^(.+?(\\d+)) *$',re.M)\n\ndef zaa(mat):\n    return '\"%s\" \"%s\"' % (mat.group(1),str(int(mat.group(2))+11))\n\nprint eh\nprint\nprint pat.sub(zaa,eh)\n</code>\n</pre>\n", "senID": 6}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n Chapter 3 Convex Functions 97 \n3.1 Definitions 98  \n3.2 Basic Properties 103\n\n\"Chapter 3 Convex Functions 97\" \"108\"\n\"3.1 Definitions 98\" \"109\"\n\"3.2 Basic Properties 103\" \"114\"\n</code>\n</pre>\n", "senID": 8}, {"text": ["Is all that a homework ?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": [], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["EDIT  : "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["I corrected the first above code"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n dh = '''(bookmarks\n(\"Chapter 1 Introduction 1\" \"#1\")\n(\"1.1 Problem Statement and Basic Definitions 2\" \"#2\")\n(\"1.2 Illustrative Examples 4\" \"#4\")\n(\"1.3 Guidelines for Model Construction 26\" \"#26\")\n(\"Exercises 30\" \"#30\")\n(\"Notes and References 34\" \"#34\"))\n)'''\n\npat = re.compile('^(\\(\".+?(\\d+)\" *\"#)\\\\2\" *(\\)\\)?)$',re.M)\n\ndef zoo(mat):\n    return '%s%s\"%s' % (mat.group(1),str(int(mat.group(2))+11),mat.group(3))\n\nprint dh\nprint\nprint pat.sub(zoo,dh)\n</code>\n</pre>\n", "senID": 13}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n (bookmarks\n(\"Chapter 1 Introduction 1\" \"#1\")\n(\"1.1 Problem Statement and Basic Definitions 2\" \"#2\")\n(\"1.2 Illustrative Examples 4\" \"#4\")\n(\"1.3 Guidelines for Model Construction 26\" \"#26\")\n(\"Exercises 30\" \"#30\")\n(\"Notes and References 34\" \"#34\"))\n)\n\n(bookmarks\n(\"Chapter 1 Introduction 1\" \"#12\")\n(\"1.1 Problem Statement and Basic Definitions 2\" \"#13\")\n(\"1.2 Illustrative Examples 4\" \"#15\")\n(\"1.3 Guidelines for Model Construction 26\" \"#37\")\n(\"Exercises 30\" \"#41\")\n(\"Notes and References 34\" \"#45\"))\n)\n</code>\n</pre>\n", "senID": 15}], [{"text": ["From my answer to your earlier question:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n awk '{n = $NF + 11; print \"(\\\"\" $0 \"\\\" \\\"#\" n \"\\\")\"}' inputfile\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n awk 'BEGIN {q=\"\\x22\"} {n = $NF + 11; print \"(\" q $0 q \" \" q \"#\" n q \")\"}' inputfile\n</code>\n</pre>\n", "senID": 3}, {"text": ["This works on the data as you presented in the previous question.", "I can't determine how you're getting from that to the example you posted in this question since there's a difference in the way the parentheses are nested.", "You also don't say whether the (bookmarks ) wrapper already exists in the original input or if some code we don't see is adding it while other things are being added."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "(bookmarks )", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["What you're doing is starting to look a little bit like XML.", "Perhaps you should use the real thing and use proper tools to manipulate it."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nfile_name=\"bin/SO/bookmarks.txt\"\n\nprint \"unmodified file:\"\nwith open(file_name) as f:\n    for line in f:\n        print line.rstrip()\n\nprint   \n\nprint \"modified file:\"\ni=11\nwith open(file_name) as f:\n    for line in f:\n        m=re.match(r'(^.*\"#)(\\d+)(.*$)',line)\n        if m:\n            new_line=m.group(1)+str(int(m.group(2))+i)+m.group(3)\n            print new_line\n        else:\n            print line.rstrip()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n unmodified file:\n(bookmarks\n(\"Chapter 1 Introduction 1\" \"#1\"\n(\"1.1 Problem Statement and Basic Definitions 2\" \"#2\")\n(\"1.2 Illustrative Examples 4\" \"#4\")\n(\"1.3 Guidelines for Model Construction 26\" \"#26\")\n(\"Exercises 30\" \"#30\")\n(\"Notes and References 34\" \"#34\"))\n)\n\nmodified file:\n(bookmarks\n(\"Chapter 1 Introduction 1\" \"#12\"\n(\"1.1 Problem Statement and Basic Definitions 2\" \"#13\")\n(\"1.2 Illustrative Examples 4\" \"#15\")\n(\"1.3 Guidelines for Model Construction 26\" \"#37\")\n(\"Exercises 30\" \"#41\")\n(\"Notes and References 34\" \"#45\"))\n)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This syntax is s-expressions (sexps for short), easiest to manipulate in Lisp and related languages such as Scheme.", "Easiest for complex tasks, that is; if you can assume that your input is sufficiently tame (e.g.", "no \"# inside chapter titles, newlines where you illustrate them, etc.", "), then for this task a text processing tool (as shown by other answers) is preferable."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "s-expressions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/S-expression"}, {"text": "Lisp", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Lisp_programming_language"}, {"text": "Scheme", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Scheme_%28programming_language%29"}, {"text": "\"#", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["In Lisp or Scheme, reading and writing the data as structured data is as simple as (read) and (write data).", "Other things aren't so easy, for example there's no standard way to read the command line arguments in Lisp or Scheme."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "(read)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(write data)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Here's a Lisp program that does the desired transformation.", "It treats the data as structured data, so you don't have to worry about the presentation.", "The first line, to obtain the first command line argument, is for CLisp; the rest is portable Common Lisp."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "CLisp", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://clisp.sourceforge.net/"}]}, {"code": "<pre>\n<code>\n (setq delta (parse-integer (car ext:*args*)))\n(defun shift-page (page)\n  (format nil \"#~D\" (+ delta (parse-integer page :start 1))))\n(defun shift-pages (entry)\n  (let ((title (car entry))\n        (page (cadr entry))\n        (subentries (cddr entry)))\n    (cons title (cons (shift-page page) (mapcar #'shift-pages subentries)))))\n(let ((toc (read)))\n  (write (cons 'bookmarks (mapcar #'shift-pages (cdr toc)))))\n</code>\n</pre>\n", "senID": 3}]]