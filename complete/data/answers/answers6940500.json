[[{"text": ["Something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = \"\"\"some text **\nActions Pending are: Action-1, Action-2, Action-3\nsome text**\n\"\"\"\nres = []\nfor line in re.findall('Actions Pending are: (.+)', d):\n    res.extend([action.strip() for action in line.split(',')])\n['Action-1', 'Action-2', 'Action-3']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can try something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n pendingActions = []\ntextToSearch = 'Actions Pending are:'\nfor line in open(filename, 'r'):\n    line = line.strip()\n    if line and line.startswith(textToSearch):\n        pendingActions.extend([x.strip() for x in line[len(textToSearch):].split(',') if x.strip()])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You need to iterate over the file, not a string read from the file."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "file", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n with open(filename) as text:\n    for line in text:\n         rc.logMessage(some_function_of_the_line(line))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Iterating over the file gives you lines; iterating over a string gives you characters / bytes."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You want str.splitlines() http://docs.python.org/library/stdtypes.html#str.splitlines"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str.splitlines()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/stdtypes.html#str.splitlines", "text": "http://docs.python.org/library/stdtypes.html#str.splitlines", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n for index in text:\n    rc.logMessage(str(index))\n</code>\n</pre>\n", "senID": 1}, {"text": ["becomes:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for index in text.splitlines():\n    rc.logMessage(str(index))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Try something like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n with file(\"your_file\") as logfile:\n   result = [line for line in logfile if line.startswith(\"Actions pending\")]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This way in result you will have all the actions lines."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n search_string = 'Actions Pending are: '\n    for line in open('yourfile.txt', 'r').readlines():\n      if line.startswith(search_string):\n        actions = line[len(search_string):].split(',')\n        break\n    print actions\n</code>\n</pre>\n", "senID": 0}, {"text": ["Artsiom was faster: parsing text file for a line, in python, maybe my version is more readable."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "parsing text file for a line, in python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/6940500/parsing-text-file-for-a-line-in-python/6940611#6940611"}]}]]