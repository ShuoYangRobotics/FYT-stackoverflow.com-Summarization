[[{"text": ["Pass a function as the repl argument.", "The MatchObject is passed to this function and .group(1) gives the first parenthesized subgroup:"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "Pass a function", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#re.sub"}, {"text": "repl", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "MatchObject", "tag": "a", "pos": 1, "childList": [{"text": "MatchObject", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/re.html#match-objects"}, {"text": "MatchObject", "childNum": 0, "tag": "code", "childList": []}, {"text": ".group(1)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import re\ns = 'start TT end'\ncallback = lambda pat: pat.group(1).lower()\nre.sub(r'([A-Z]){2}', callback, s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT\nAnd yes, you should use ([A-Z])\\1 instead of ([A-Z]){2} in order to not match e.g.", "AZ.", "(See @bobince's answer."], "childNum": 7, "tag": "p", "senID": 2, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "([A-Z])\\1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "([A-Z]){2}", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "not", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "AZ", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "answer", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/4145451/using-a-regular-expression-to-replace-upper-case-repeated-letters-in-python-with/4145495#4145495"}]}, {"code": "<pre>\n<code>\n import re\ns = 'start TT end'\nre.sub(r'([A-Z])\\1', lambda pat: pat.group(1).lower(), s) # Inline\n</code>\n</pre>\n", "senID": 3}, {"text": ["Gives:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n 'start t end'\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You can't change case in a replacement string.", "You would need a replacement function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def replacement(match):\n...     return match.group(1).lower()\n... \n&gt;&gt;&gt; re.sub(r'([A-Z])\\1', replacement, 'start TT end')\n'start t end'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can do it with a regular expression, just pass a function as the replacement like the docs say.", "The problem is your pattern."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}, {"text": ["As it is, your pattern matches runs of any two capital letters.", "I'll leave the actual pattern to you, but it starts with AA|BB|CC|."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "any", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "AA|BB|CC|", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["The 'repl' parameter that identifies the replacement can be either a string (as you have it here) or a function.", "This will do what you wish:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\ndef toLowercase(matchobj):\n   return matchobj.group(1).lower()\n\ns = 'start TT end'\nre.sub(r'([A-Z]){2}', toLowercase, s)\n&gt;&gt;&gt; 'start t end'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def tol(m):\n   return m.group(0)[0].lower()\n\ns = 'start TTT AAA end'\nre.sub(r'([A-Z]){2,}', tol, s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that this doesn't replace singe upper letters.", "If you want to do it, use r'([A-Z]){1,}'."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "r'([A-Z]){1,}'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["WARNING!", "This post has no re as requested.", "Continue with your own responsibility!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "WARNING! This post has no re as requested. Continue with your own responsibility!", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["I do not know how possible are corner cases but this is how normal Python does my naive coding."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import string\ns = 'start TT end AAA BBBBBBB'\nfor c in string.uppercase:\n    s = s.replace(c+c,c.lower())\nprint s\n\"\"\" Output:\nstart t end aA bbbB\n\"\"\"\n</code>\n</pre>\n", "senID": 2}]]