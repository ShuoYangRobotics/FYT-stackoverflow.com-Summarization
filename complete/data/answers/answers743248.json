[[{"text": ["You want something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n english2german = open(\"english2german.txt\")\nenglist = []\ngerlist = []\n\nfor line in english2german:\n    (e, g) = line.split()\n    englist.append(e)\n    gerlist.append(g)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The problem with your code before is that englist[i:] is actually a slice of a list, not just a single index.", "A string is also iterable, so you were basically stuffing a single letter into several indices.", "In other words, something like gerlist[0:] = \"alfa\" actually results in gerlist = ['a', 'l', 'f', 'a']."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "englist[i:]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "slice", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "gerlist[0:] = \"alfa\"", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "gerlist = ['a', 'l', 'f', 'a']", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["And even shorter than amo-ej1's answer, and likely faster:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "amo-ej1's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/743248/something-wrong-with-output-from-list-in-python/743274#743274"}]}, {"code": "<pre>\n<code>\n In [1]: english2german = open('english2german.txt')\nIn [2]: eng, ger = zip(*( line.split() for line in english2german ))\nIn [3]: eng\nOut[3]: ('A', 'B', 'C')\nIn [4]: ger\nOut[4]: ('Alfa', 'Betta', 'Charlie')\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you're using Python 3.0 or from future_builtins import zip, this is memory-efficient too.", "Otherwise replace zip with izip from itertools if english2german is very long."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "from future_builtins import zip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "zip", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "izip", "childNum": 0, "tag": "code", "childList": []}, {"text": "itertools", "childNum": 0, "tag": "code", "childList": []}, {"text": "english2german", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["just an addition: you're working with files.", "please close them :) or use the with construct:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n with open('english2german.txt') as english2german:\n  englist, gerlist = zip(*(line.split() for line in english2german))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Like this you mean:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n english2german = open('k.txt', 'r')\nenglist = []\ngerlist = []\n\nfor i, line in enumerate(english2german):\n    englist.append(line.split()[0])\n    gerlist.append(line.split()[1])\n\nprint englist\nprint gerlist\n</code>\n</pre>\n", "senID": 1}, {"text": ["which generates:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["['A', 'B', 'C']\n['Alfa', 'Betta', 'Charlie']"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The solutions already posted are OK if you have no spaces in any of the words (ie each line has a single space).", "If I understand correctly, you are trying to build a dictionary, so I would suggest you consider the fact that you can also have definitions of multiple word expressions.", "In that case, you'd better use some other character instead of a space to separate the definition from the word.", "Something like \"|\", which is impossible to appear in a word."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then, you do something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for line in english2german:\n    (e, g) = line.split(\"|\")\n    englist.append(e)\n    gerlist.append(g)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Slightly meta-answer(?", ") to Autoplectic's suggestion of using zip()"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Autoplectic's", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/743248/something-wrong-with-output-from-list-in-python/743313#743313"}, {"text": "zip()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["With 3 lines in the input file (from the supplied data in the question):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The zip() method takes an average of 0.404729390144 seconds, compared to 0.341339087486 with the simple for loop constructing two lists (the code from mipadi's currently accepted answer)."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "zip()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "0.404729390144", "childNum": 0, "tag": "code", "childList": []}, {"text": "0.341339087486", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://stackoverflow.com/questions/743248/something-wrong-with-output-from-list-in-python/743268#743268", "text": "mipadi's", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["With 10,000 lines in the input file (random generated 3-12 character words.", "I reduced the timeit.repeat() values to 100 times, repeated twice):"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "timeit.repeat()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["zip() took an average of 1.43965339661 seconds, compared to 1.52318406105 with the for loop."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "zip()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "1.43965339661", "childNum": 0, "tag": "code", "childList": []}, {"text": "1.52318406105", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Both benchmarks were done using Python version 2.5.1"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Hardly a huge difference..", "Given how much more readable the simple for loop is, I would recommend using it..", "The zip code might be a bit quicker with large files, but the difference is about 0.083 seconds with 10,000 lines.."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "zip", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Benchmarking code:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n import timeit\n\n# http://stackoverflow.com/questions/743248/something-wrong-with-output-from-list-in-python/743313#743313\ncode_zip = \"\"\"english2german = open('english2german.txt')\neng, ger = zip(*( line.split() for line in english2german ))\n\"\"\"\n\n# http://stackoverflow.com/questions/743248/something-wrong-with-output-from-list-in-python/743268#743268\ncode_for = \"\"\"english2german = open(\"english2german.txt\")\nenglist = []\ngerlist = []\n\nfor line in english2german:\n    (e, g) = line.split()\n    englist.append(e)\n    gerlist.append(g)\n\"\"\"\n\nfor code in [code_zip, code_for]:\n    t = timeit.Timer(stmt = code)\n    try:\n        times = t.repeat(10, 10000)\n    except:\n        t.print_exc()\n    else:\n        print \"Code:\"\n        print code\n        print \"Time:\"\n        print times\n        print \"Average:\"\n        print sum(times) / len(times)\n        print \"-\" * 20\n</code>\n</pre>\n", "senID": 8}]]