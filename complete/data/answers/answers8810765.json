[[{"text": ["This code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def main():\n    dog = Animal()    \n    dog.set_owner('Sue')\n    print dog.get_owner()\n    dog.noise()\n\n\nif  __name__ =='__main__':main()\n</code>\n</pre>\n", "senID": 1}, {"text": ["should not be in the class.", "When you take it outside (no indent) it should work."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So after taking that into account it should look like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Animal:\n    __hungry = \"yes\"\n    __name = \"no name\"\n    __owner = \"no owner\"\n\n    def __init__(self):\n        pass\n\n    def set_owner(self,newOwner):\n        self.__owner= newOwner\n        return\n\n    def get_owner(self):\n        return self.__owner\n\n    def set_name(self,newName):\n        self.__name= newName\n        return\n\n    def get_name(self):\n        return self.__name\n\n    def noise(self):\n        print('errr')\n        return\n\n    def __hiddenmethod(self):\n        print(\"hard to find\")\n\n\ndef main():\n    dog = Animal()    \n    dog.set_owner('Sue')\n    print dog.get_owner()\n    dog.noise()\n\n\nif  __name__ =='__main__':\n    main()\n</code>\n</pre>\n", "senID": 4}], [{"text": ["To understand why what you wrote failed, you need to know a little bit about how class definitions work in Python.", "As you may know, Python is an interpreted language: there is a program which reads through Python files and executes them as it goes.", "When the interpreter encounters a class definition, it does the following:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "why", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["So what happened when you indented the main function inside your code?", "While inside step 2, you referred to the name Animal.", "But this name isn't defined until step 4!", "Indeed, it can't be defined at the stage you referred to it, because that would be circular.", "When you move main outside of the class definition, it won't be executed until after steps 1-4 have been completed, and hence the name Animal will already be bound."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "main", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Animal", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "can't", "childNum": 0, "tag": "em", "pos": 3, "childList": []}, {"text": "main", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "Animal", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["By the way, the code you have written is not good Python.", "You should probably try to find a better tutorial; the usual recommendation is \"Dive Into Python\".", "I've rewritten it as it should be done:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Animal(object):\n\u00a0 \u00a0   def __init__(self, hungry=\"yes\", name=None, owner=None):\n          self.hungry = hungry\n          self.name = name\n          self.owner = owner\n\n\u00a0   \u00a0 def noise(self):\n\u00a0 \u00a0 \u00a0   \u00a0 print('errr')\n\n\u00a0   \u00a0 def _internal_method(self):\n\u00a0 \u00a0 \u00a0   \u00a0 print(\"hard to find\")\n\n  if \u00a0__name__ =='__main__':\n\u00a0 \u00a0 \u00a0 dog = Animal() \u00a0 \u00a0\n\u00a0 \u00a0 \u00a0 dog.owner = 'Sue'\n\u00a0 \u00a0 \u00a0 print dog.owner\n\u00a0 \u00a0 \u00a0 dog.noise()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Move both the main() method and the if __name__ == '__main__' statement out of the scope of the class.", "Remember - whitespace counts."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "main()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if __name__ == '__main__'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Your indentation is off.", "Remember that in Python, indentation counts.", "Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Animal:\n    __hungry = \"yes\"\n    __name = \"no name\"\n    __owner = \"no owner\"\n\n    def __init__(self):\n        pass\n\n    def set_owner(self,newOwner):\n        self.__owner= newOwner\n        return\n\n    def get_owner(self):\n        return self.__owner\n\n    def set_name(self,newName):\n        self.__name= newName\n        return\n\n    def get_name(self):\n        return self.__name\n\n    def noise(self):\n        print('errr')\n        return\n\n    def __hiddenmethod(self):\n        print(\"hard to find\")\n\ndef main():\n    dog = Animal()    \n    dog.set_owner('Sue')\n    print dog.get_owner()\n    dog.noise()\n\n\nif  __name__ =='__main__':main()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The following construct is worth having in most of your code - particularly if you are running in multiple environments."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if  __name__ =='__main__':\n    main()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The main function you have defined looks like it is within the Animal class.", "Main should be a function(classes contain methods) outside of the animal class.", "You should also have your class Animal inherit from object ie"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["class Animal(object):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]