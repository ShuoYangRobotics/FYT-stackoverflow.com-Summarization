[[{"text": ["If the order is not important, you should use set.difference.", "However, if you want to retain order, a simple list comprehension is all it takes."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "set.difference", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n result = [a for a in A if a not in subset_of_A]\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: As delnan says, performance will be substantially improved if subset_of_A is an actual set, since checking for membership in a set is O(1) as compared to O(n) for a list."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "subset_of_A", "childNum": 0, "tag": "code", "childList": []}, {"text": "set", "childNum": 0, "tag": "code", "childList": []}, {"text": "set", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n A = [6, 7, 8, 9, 10, 11, 12]\nsubset_of_A = set([6, 9, 12]) # the subset of A\n\nresult = [a for a in A if a not in subset_of_A]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["set(A)-set(subset_of_A) gives your the intended result set, but it won't retain the original order.", "The following is order preserving:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "set(A)-set(subset_of_A)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [a for a in A if not a in subset_of_A]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How about"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n set(A).difference(subset_of_A)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This was just asked a couple of days ago (but I cannot find it):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; A = [6, 7, 8, 9, 10, 11, 12]\n&gt;&gt;&gt; subset_of_A = set([6, 9, 12])\n&gt;&gt;&gt; [i for i in A if i not in subset_of_A]\n[7, 8, 10, 11]\n</code>\n</pre>\n", "senID": 1}, {"text": ["It might be better to use sets from the beginning, depending on the context.", "Then you can use set operations like other answers show. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "set operations", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#set"}]}, {"text": ["However, converting lists to sets and back only for these operations is slower than list comprehension."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = set([6, 7, 8, 9, 10, 11, 12])\n&gt;&gt;&gt; sub_a = set([6, 9, 12])\n&gt;&gt;&gt; a - sub_a\nset([8, 10, 11, 7])\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Use the Set type:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n A_set = Set([6,7,8,9,10,11,12])\nsubset_of_A_set = Set([6,9,12])\n\nresult = A_set - subset_of_A_set\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; A           = [6, 7, 8, 9, 10, 11, 12]\n&gt;&gt;&gt; subset_of_A  = [6, 9, 12];\n&gt;&gt;&gt; set(A) - set(subset_of_A)\nset([8, 10, 11, 7])\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["No, there is no build in function in python to do this, because simply:  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n set(A)- set(subset_of_A)\n</code>\n</pre>\n", "senID": 1}, {"text": ["will provide you the answer."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Yes, the filter function:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n filter(lambda x: x not in subset_of_A, A)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["tuple(set([6, 7, 8, 9, 10, 11, 12]).difference([6, 9, 12]))"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "tuple(set([6, 7, 8, 9, 10, 11, 12]).difference([6, 9, 12]))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]