[[{"text": ["Rather than changing the template directories dynamically you could modify the request and add a value that lets your view know if the user is on an iphone or not.", "Then wrap render_to_response (or whatever you are using for creating HttpResponse objects) to grab the iphone version of the template instead of the standard html version if they are using an iphone. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This article might be useful: Build a Mobile and Desktop-Friendly Application in Django in 15 Minutes"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Build a Mobile and Desktop-Friendly Application in Django in 15 Minutes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mobiforge.com/developing/story/build-a-mobile-and-desktop-friendly-application-django-15-minutes-or-less"}]}], [{"text": ["I'm developing djangobile, a django mobile extension: http://code.google.com/p/djangobile/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/djangobile/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/djangobile/"}]}], [{"text": ["You should take a look at the django-mobileadmin source code, which solved exactly this problem."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-mobileadmin", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-mobileadmin/"}]}], [{"text": ["Other way would be creating your own template loader that loads templates specific to user agent.", "This is pretty generic technique and can be use to dynamically determine what template has to be loaded depending on other factors too, like requested language (good companion to existing Django i18n machinery)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Django Book has a section on this subject."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "section on this subject", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangobook.com/en/1.0/chapter10/#cn234"}]}], [{"text": ["There is a nice article which explains how to render the same data by different templates\nhttp://www.postneo.com/2006/07/26/acknowledging-the-mobile-web-with-django"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.postneo.com/2006/07/26/acknowledging-the-mobile-web-with-django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.postneo.com/2006/07/26/acknowledging-the-mobile-web-with-django"}]}, {"text": ["You still need to automatically redirect the user to mobile site however and this can be done using several methods (your check_mobile trick will work too)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Detect the user agent in middleware, switch the url bindings, profit!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["How?", "Django request objects have a .urlconf attribute, which can be set by middleware."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["From django docs:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\nimport re\nMOBILE_AGENT_RE=re.compile(r\".*(iphone|mobile|androidtouch)\",re.IGNORECASE)\nclass MobileMiddleware(object):\ndef process_request(self,request):\n    if MOBILE_AGENT_RE.match(request.META['HTTP_USER_AGENT']):\n        request.urlconf=\"yourproj.mobile_urls\"\n</pre>\n", "senID": 3}], [{"text": ["How about redirecting user to i.xxx.com after parsing his UA in some middleware?", "I highly doubt that mobile users care how url look like, still they can access your site using main url."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["best possible scenario: use minidetector to add the extra info to the request, then use django's built in request context to pass it to your templates like so"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.shortcuts import render_to_response\nfrom django.template import RequestContext\n\ndef my_view_on_mobile_and_desktop(request)\n    .....\n    render_to_response('regular_template.html', \n                       {'my vars to template':vars}, \n                       context_instance=RequestContext(request))\n</code>\n</pre>\n", "senID": 1}, {"text": ["then in your template you are able to introduce stuff like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &lt;html&gt;\n  &lt;head&gt;\n  {% block head %}\n    &lt;title&gt;blah&lt;/title&gt;\n  {% if request.mobile %}\n    &lt;link rel=\"stylesheet\" href=\"{{ MEDIA_URL }}/styles/base-mobile.css\"&gt;\n  {% else %}\n    &lt;link rel=\"stylesheet\" href=\"{{ MEDIA_URL }}/styles/base-desktop.css\"&gt;\n  {% endif %}\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"navigation\"&gt;\n      {% include \"_navigation.html\" %}\n    &lt;/div&gt;\n    {% if not request.mobile %}\n    &lt;div id=\"sidebar\"&gt;\n      &lt;p&gt; sidebar content not fit for mobile &lt;/p&gt;\n    &lt;/div&gt;\n    {% endif %&gt;\n    &lt;div id=\"content\"&gt;\n      &lt;article&gt;\n        {% if not request.mobile %}\n        &lt;aside&gt;\n          &lt;p&gt; aside content &lt;/p&gt;\n        &lt;/aside&gt;\n        {% endif %}\n        &lt;p&gt; article content &lt;/p&gt;\n      &lt;/aricle&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code>\n</pre>\n", "senID": 3}]]