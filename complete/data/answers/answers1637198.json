[[{"text": ["If you place "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import code\ncode.interact(local=locals())\n</code>\n</pre>\n", "senID": 1}, {"text": ["at any point in your script, python will instantiate a python shell at exactly that point that has access to everything in the state of the script at that point.", "^D exits the shell and resumes execution past that point."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You can even modify the state at that point from the shell, call functions, etc."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you have a running Python, which wasn't built with any sort of trace or logging mechanism, and you want to see what it's doing internally, then two options are:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["On a Solaris or Mac, if you are using the system-provided Python then use dtrace"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["use gdb to attach to a running Python process, "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "gdb to attach to a running Python process", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/DebuggingWithGdb"}]}]}], [{"text": ["To \"crash\" a python program with a stacktrace you can send it SIGINT, that is unless you trap it or catch KeyboardInterrupt (python installs a SIGINT handler by default, that raises KeyboardInterrupt)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As for debugging, doesn't PyDev have built-in debugging support (through pdb)?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Personally, I prefer ipdb.", "It's pdb with added IPython goodness.", "It seems to be more of an interactive Python interpreter with a few shortcuts for debugging functions."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ipdb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/ipdb/0.1dev-r1716"}, {"text": "IPython", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/"}]}], [{"text": ["Install signal handler that sets a trace function with sys.settrace() that prints traceback and clears clears trace function.", "This will allow you to see where your program is at any moment without interrupting it.", "Note, that signal is handled after each sys.getcheckinterval() python instructions."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "sys.settrace()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sys.getcheckinterval()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["If you're happy with a crash, inserting \"1/0\" will create a quick and dirty breakpoint, with a complete backtrace!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]