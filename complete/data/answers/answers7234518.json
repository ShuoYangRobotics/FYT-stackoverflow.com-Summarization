[[{"code": "<pre>\n<code>\n def ordered(string, words):\n    pos = [string.index(word) for word in words]\n    return pos == sorted(pos)\n\ns = \"I like to eat maki sushi and the best sushi is in Japan\"\nw =  [\"maki\", \"sushi\"]\nordered(s, w) #Returns True.\n</code>\n</pre>\n", "senID": 0}, {"text": ["Not exactly the most efficient way of doing it but simpler to understand."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n s = 'I like to eat maki sushi and the best sushi is in Japan'\n</code>\n</pre>\n", "senID": 0}, {"text": ["check order"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "check order", "childNum": 0, "tag": "b", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n indices = [s.split().index(w) for w in ['maki', 'sushi']]\nsorted(indices) == indices\n</code>\n</pre>\n", "senID": 2}, {"text": ["how to count"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "how to count", "childNum": 0, "tag": "b", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n s.split().count('maki')\n</code>\n</pre>\n", "senID": 4}, {"text": ["Note (based on discussion below):"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["suppose the sentence is 'I like makim more than sushi or maki'.", "Realizing that makim is another word than maki, the word maki is placed after sushi and occurs only once in the sentence.", "To detect this and count correctly, the sentence must be split over the spaces into the actual words."], "childNum": 6, "tag": "p", "senID": 6, "childList": [{"text": "'I like makim more than sushi or maki'", "childNum": 0, "tag": "i", "pos": 0, "childList": []}, {"text": "makim", "childNum": 0, "tag": "i", "pos": 1, "childList": []}, {"text": "maki", "childNum": 0, "tag": "i", "pos": -1, "childList": []}, {"text": "maki", "childNum": 0, "tag": "i", "pos": -1, "childList": []}, {"text": "sushi", "childNum": 0, "tag": "i", "pos": -1, "childList": []}, {"text": "must be split", "childNum": 0, "tag": "b", "pos": 2, "childList": []}]}], [{"text": ["According to the added code, you mean that words are adjacent?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Why not just put them together:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print len(re.findall(r'\\bmaki sushi\\b', sent))\n</code>\n</pre>\n", "senID": 2}], [{"text": ["if res > 0:\n    words are sorted in the sentence"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n words = [\"sushi\", \"maki\", \"xxx\"]\nsorted_words = sorted(words)\nsen = \" I like to eat maki sushi and the best sushi is in Japan xxx\";\nind = map(lambda x : sen.index(x), sorted_words)\nres = reduce(lambda a, b: b-a, ind)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A regex solution :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nsent = 'I like to eat maki sushi and the best sushi is in Japan'\nwords = sorted(['maki', 'sushi'])\nassert re.search(r'\\b%s\\b' % r'\\b.*\\b'.join(words), sent)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Just and idea, it might need some more work"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (sentence.index('maki') &lt;= sentence.index('sushi')) == ('maki' &lt;= 'sushi')\n</code>\n</pre>\n", "senID": 1}]]