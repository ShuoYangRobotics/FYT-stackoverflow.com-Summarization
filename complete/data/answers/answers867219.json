[[{"text": ["What you keep referring to as a bug is the documented, standard behavior of Python classes."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "documented", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html"}]}, {"text": ["Declaring a dict outside of __init__ as you initially did is declaring a class-level variable.", "It is only created once at first, whenever you create new objects it will reuse this same dict.", "To create instance variables, you declare them with self in __init__; its as simple as that."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["@Matthew : Please review the difference between a class member and an object member in Object Oriented Programming.", "This problem happens because of the declaration of the original dict makes it a class member, and not an object member (as was the original poster's intent.", ")  Consequently, it exists once for (is shared accross) all instances of the class (ie once for the class itself, as a member of the class object itself) so the behaviour is perfectly correct. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["When you access attribute of instance, say, self.foo, python will first find 'foo' in self.__dict__.", "If not found, python will find 'foo' in TheClass.__dict__"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "self.__dict__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "TheClass.__dict__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["In your case, dict1 is of class A, not instance. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "dict1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Pythons class declarations are executed as a code block and any local variable definitions (of which function definitions are a special kind of) are stored in the constructed class instance.", "Due to the way attribute look up works in Python, if an attribute is not found on the instance the value on the class is used."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The is an interesting article about the class syntax on the history of Python blog."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "an interesting article about the class syntax", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python-history.blogspot.com/2009/02/adding-support-for-user-defined-classes.html"}]}], [{"text": ["If this is your code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class ClassA:\n    dict1 = {}\na = ClassA()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you probably expected this to happen inside Python:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class ClassA:\n    __defaults__['dict1'] = {}\n\na = instance(ClassA)\n# a bit of pseudo-code here:\nfor name, value in ClassA.__defaults__:\n    a.&lt;name&gt; = value\n</code>\n</pre>\n", "senID": 3}, {"text": ["As far as I can tell, that is what happens, except that a dict has its pointer copied, instead of the value, which is the default behaviour everywhere in Python.", "Look at this code:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n a = {}\nb = a\na['foo'] = 'bar'\nprint b\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I'm going to bring the word \"bug\" back into the picture."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'm writing a python script for the graphics application Blender, where each instance of my class is a wall of a building.", "Each wall class has a list of features (doors, windows and the end of the wall).", "All the instances of the wall class share the same ends of the wall."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I know I'm new to this particular language, so I might not know intra-cut details, however the lists inside the instance of a class should be just in that class and not shared with other instances."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So I'm going to be the one to say the word, bug, bug, bug!!!!!!!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]