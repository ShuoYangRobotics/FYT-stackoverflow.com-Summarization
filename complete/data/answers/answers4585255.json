[[{"code": "<pre>\n<code>\n egrep -o '[^ ]{N,}' &lt;filename&gt;\n</code>\n</pre>\n", "senID": 0}, {"text": ["Find all non-space constructs at least N characters long.", "If you're concerned about \"words\" you might try [a-zA-Z]."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "N", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[a-zA-Z]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nimport sys, re\n\ndef morethan(n, file_or_string):\n    try:\n        content = open(file_or_string, 'r').read()\n    except:\n        content = file_or_string\n    pattern = re.compile(\"[\\w]{%s,}\" % n)\n    return pattern.findall(content)\n\nif __name__ == '__main__':\n    try:\n        print morethan(*sys.argv[1:])\n    except:\n        print &gt;&gt; sys.stderr, 'Usage: %s [COUNT] [FILENAME]' % sys.argv[0]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Example usage (via this gist):"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this gist", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://gist.github.com/763574"}]}, {"code": "<pre>\n<code>\n $ git clone -q git://gist.github.com/763574.git &amp;&amp; \\\n     cd 763574 &amp;&amp; python morethan.py 7 morethan.py\n\n['stackoverflow', 'questions', '4585255', 'contain', ...\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Python"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import fileinput\n N = 5\n for line in fileinput.input():\n     for word in line.split():\n         if len(word) &gt; N:\n              print word\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import re; [s for s in re.findall(r\"\\w+\", open(filename, \"r\").read()) if len(s) &gt;= N]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["ouput words greater than length of 5, and the line number"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n awk -F ' ' '{for(i=1;i&lt;=NF;i++){ if(length($i)&gt;=6) print NR, $i }}' your_file\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use a simple grep, but it would return the entire lines:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n grep '[^ ]\\{N\\}'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Where N is your number."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I don't know how to get the single words in grep or awk, but it's easy in Python:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import re\nf = open(filename, 'r')\ntext = f.read()\nbig_words = re.findall('[^ ]{N,}', s)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Again, N is your number.", "big_words will be a list containing your words."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["In this example, replace the value of 5 with whatever length you're looking for.", "The second example shows it as a function"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "5", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["1)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; filename = r'c:\\temp\\foo.txt'\n&gt;&gt;&gt; re.findall('\\w{5}', open(filename).read())\n['Lorem', 'ipsum', 'dolor', 'conse', 'ctetu', 'adipi', 'scing', 'digni', 'accum', 'congu', ...]\n</code>\n</pre>\n", "senID": 2}, {"text": ["2)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def FindAllWordsLongerThanN(n=5, file='foo.txt'):\n    return re.findall('\\w{%s}' % n, open(file).read())\n\nFindAllWordsLongerThanN(7, r'c:\\temp\\foo.txt')\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n re.findall(r'\\w'*N+r'\\w+',txt)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n N = 5 #Threshold\nf = open('test.txt','r')\ntry:\n  for line in f.xreadlines():\n    print \" \".join([w for w in line.split() if len(w) &gt;= N])\nfinally:\n  f.close()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For completeness (although the regexp solution probably is better in this case):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from string import punctuation\n&gt;&gt;&gt; with open('foreword.rst', 'rt') as infile:\n...    for line in infile:\n...       for x in line.split():\n...           x = x.strip(punctuation)\n...           if len(x) &gt; 5:\n...              print x\n</code>\n</pre>\n", "senID": 1}, {"text": ["Assuming you really mean \"filter\", that is each word should be printed several times.", "If you just want the words once each I'd do this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from string import punctuation\n&gt;&gt;&gt; result = set()\n&gt;&gt;&gt; with open('foreword.rst', 'rt') as infile:\n...    for line in infile:\n...       for x in line.split():\n...           x = x.strip(punctuation)\n...           if len(x) &gt; 5:\n...              if x not in result:\n...                  result.add(x)\n...                  print x\n</code>\n</pre>\n", "senID": 3}], [{"text": ["hello I believe that this is a nice solutino with lambda functions.", "first parameter is the N"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nimport os\ndef main():\n    p_file = open(\"file.txt\")\n    t= lambda n,s:filter(lambda t:len(t)&gt;n,s.split())\n    for line in p_file:\n        print t(3,line)\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Pure Bash:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n N=10; set -o noglob; for word in $(&lt;inputfile); do ((${#word} &gt; N)) &amp;&amp; echo \"$word\"; done; set +o noglob\n</code>\n</pre>\n", "senID": 1}, {"text": ["If your inputfile doesn't contain any globbing characters (*, ?, [), you can omit the set commands."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "*", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "?", "childNum": 0, "tag": "code", "childList": []}, {"text": "[", "childNum": 0, "tag": "code", "childList": []}, {"text": "set", "childNum": 0, "tag": "code", "childList": []}]}]]