[[{"text": ["I use catdoc or antiword for this, whatever gives the result that is the easiest to parse.", "I have embedded this in python functions, so it is easy to use from the parsing system (which is written in python)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\n\ndef doc_to_text_catdoc(filename):\n    (fi, fo, fe) = os.popen3('catdoc -w \"%s\"' % filename)\n    fi.close()\n    retval = fo.read()\n    erroroutput = fe.read()\n    fo.close()\n    fe.close()\n    if not erroroutput:\n        return retval\n    else:\n        raise OSError(\"Executing the command caused an error: %s\" % erroroutput)\n\n# similar doc_to_text_antiword()\n</code>\n</pre>\n", "senID": 1}, {"text": ["The -w switch to catdoc turns off line wrapping, BTW."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Open Office has an API"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "API", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://api.openoffice.org/"}]}], [{"text": ["Using the OpenOffice API, and Python, and Andrew Pitonyak's excellent online macro book I managed to do this.", "Section 7.16.4 is the place to start."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Andrew Pitonyak's excellent online macro book", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pitonyak.org/oo.php"}]}, {"text": ["One other tip to make it work without needing the screen at all is to use the Hidden property:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n RO = PropertyValue('ReadOnly', 0, True, 0)\nHidden = PropertyValue('Hidden', 0, True, 0)\nxDoc = desktop.loadComponentFromURL( docpath,\"_blank\", 0, (RO, Hidden,) )\n</code>\n</pre>\n", "senID": 2}, {"text": ["Otherwise the document flicks up on the screen (probably on the webserver console) when you open it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["(Same answer as http://stackoverflow.com/questions/125222/extracting-text-from-ms-word-files-in-python)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/125222/extracting-text-from-ms-word-files-in-python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/125222/extracting-text-from-ms-word-files-in-python"}]}, {"text": ["Use the native Python docx module which I made this week.", "Here's how to extract all the text from a doc:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n document = opendocx('Hello world.docx')\n\n# This location is where most document content lives \ndocbody = document.xpath('/w:document/w:body', namespaces=wordnamespaces)[0]\n\n# Extract all text\nprint getdocumenttext(document)\n</code>\n</pre>\n", "senID": 2}, {"text": ["See http://github.com/mikemaccana/python-docx"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://github.com/mikemaccana/python-docx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/mikemaccana/python-docx"}]}, {"text": ["100% Python, no COM, no .net, no Java, no parsing serialized XML with regexs, no crap."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["For docx files, check out the Python script docx2txt available at"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://cobweb.ecn.purdue.edu/~kak/distMisc/docx2txt"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://cobweb.ecn.purdue.edu/~kak/distMisc/docx2txt", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cobweb.ecn.purdue.edu/~kak/distMisc/docx2txt"}]}, {"text": ["for extracting the plain text from a docx document."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If it is Word 2007 docx, you could unzip it and parse the XML files that are contained inside."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]