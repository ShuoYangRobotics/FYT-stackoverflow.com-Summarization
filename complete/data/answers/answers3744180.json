[[{"text": ["All modern languages require this because referencing a function and calling a function are separate actions."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "referencing", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "calling", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["For example,"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def func():\n    print \"hello\"\n    return 10\na = func\na()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Clearly, a = func and a = func() have very different meanings."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "a = func", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a = func()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Ruby--the most likely language you're thinking of in contrast--doesn't require the parentheses; it can do this because it doesn't support taking references to functions."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["In languages like Python and JavaScript, functions are first\u2013class objects.", "This means that you can pass functions around, just like you can pass around any other value.", "The parentheses after the function name (the () in myfunc()) actually constitute an operator, just like + or *) Instead of meaning \"add this number to another number\" (in the case of +), () means \"execute the preceding function\".", "This is necessary because it is possible to use a function without executing it \u2014 for example you may wish to compare it to another function using ==, or you may wish to pass it into another function, such as in this JavaScript example:"], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "myfunc()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "*", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"code": "<pre>\n<code>\n function alertSomething(message) {\n    alert(message);\n}\n\nfunction myOtherFunction(someFunction, someArg) {\n   someFunction(someArg);\n}\n\n// here we are using the alertSomething function without calling it directly\nmyOtherFunction(alertSomething, \"Hello, araneae!\");\n</code>\n</pre>\n", "senID": 1}, {"text": ["In short: it is important to be able to refer to a function without calling it \u2014 this is why the distinction is necessary."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["At least in JS, its because you can pass functions around."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n var func = new Function();\n</code>\n</pre>\n", "senID": 1}, {"text": ["you can then so something like"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n var f = func\n f()\n</code>\n</pre>\n", "senID": 3}, {"text": ["so 'f' and 'func' are references to the function, and f() or func() is the invocation of the function."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["which is not the same as"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n var val = f();\n</code>\n</pre>\n", "senID": 6}, {"text": ["which assigns the result of the invocation to a var."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["For Java, you cannot pass functions around, at least like you can in JS, so there is no reason the language needs to require a () to invoke a method.", "But it is what it is."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["I can't speak at all for python."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["But the main point is different languages might have reasons why syntax may be necessary, and sometimes syntax is just syntax."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["I think you answered it yourself:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Consider the following:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["if (colorOfTheSky == 'blue')"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "if (colorOfTheSky == 'blue')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["vs:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["if (colorOfTheSky() == 'blue')"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "if (colorOfTheSky() == 'blue')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["We can tell just by looking that the first checks for a variable called colorOfTheSky, and we want to know if its value is blue.", "In the second, we know that colorOfTheSky() calls a function (method) and we want to know if its return value is blue."], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "colorOfTheSky", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "blue", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "colorOfTheSky()", "childNum": 0, "tag": "code", "childList": []}, {"text": "blue", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If we didn't have this distinction it would be extremely ambiguous in situations like this."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["To answer your last question, I don't know of any languages that don't have this distinction."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Also, you probably have a design problem if you can't tell the difference between your methods and your properties; as another answer points out, methods and properties have different roles to play.", "Furthermore it is good practice for your method names to be actions, e.g.", "getPageTitle, getUserId, etc., and for your properties to be nouns, e.g., pageTitle, userId.", "These should be easily decipherable in your code for both you and anyone who comes along later and reads your code."], "childNum": 4, "tag": "p", "senID": 8, "childList": [{"text": "getPageTitle", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "getUserId", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "pageTitle", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "userId", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["If you're having troubles, distinguishing between your properties and methods, you're probably not naming them very well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In general, your methods should have a verb in them: i.e.", "write, print, echo, open, close, get, set, and property names should be nouns or adjectives: name, color, filled, loaded."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It's very important to use meaningful method and property names, without it, you'll find that you'll have difficulty reading your own code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Because referencing and calling a method a two different things.", "Consider X.method being the method, so x.method == 'blue' would be false.", "You can try this: print a method of an object:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "x.method == 'blue'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n >>> class X(object):\n...   def a(self):\n...     print 'a'\n...\n>>> x=X()\n>>> print x.a\n&lt;bound method X.a of &lt;__main__.X object at 0x0235A910&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Java, I can think of two reasons why the () is required:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["1) Java had a specific design goal to have a \"C/C++ like\" syntax, to make it easy for C and C++ programmers to learn the language.", "Both C and C++ require the parentheses."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["2) The Java syntax specifically requires the parentheses to disambiguate a reference to an attribute or local from a call to a method.", "This is because method names and attribute / local names are declared in different namespaces.", "So the following is legal Java:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n public class SomeClass {\n    private int name;\n    private int name() { ... }\n\n    ...\n\n    int norm = name;  // this one\n}\n</code>\n</pre>\n", "senID": 3}, {"text": ["If the () was not required for a method call, the compiler would not be able to tell if the labeled statement (\"this one\") was assigning the value of the name attribute or the result of calling the name() method."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "name", "childNum": 0, "tag": "code", "childList": []}, {"text": "name()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The difference isn't always explicit in VBA.", "This is a call to a Sub (i.e.", "a method with no return value) which takes no parameters (all examples are from Excel):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Worksheets(\"Sheet1\").UsedRange.Columns.AutoFit\n</code>\n</pre>\n", "senID": 1}, {"text": ["whereas this is accessing an attribute then passing it as a parameter:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n MsgBox Application.Creator\n</code>\n</pre>\n", "senID": 3}, {"text": ["As in the previous example, parentheses are also optional around parameters if there is no need to deal with the return value:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n Application.Goto Worksheets(\"Sheet2\").Range(\"A1\")\n</code>\n</pre>\n", "senID": 5}, {"text": ["but are needed if the return value is used:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n iRows = Len(\"hello world\")\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Typically properties are accessors, and methods perform some sort of action.", "Going on this assumption, it's cheap to use a property, expensive to use a method."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Foo.Bar, for example, would indicate to me that it would return a value, like a string, without lots of overhead."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Foo.Bar() (or more likely, Foo.GetBar()), on the other hand, implies needing to retrieve the value for \"Bar\", perhaps from a database."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Properties and methods have different purposes and different implications, so they should be differentiated in code as well."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["By the way, in all languages I know of the difference in syntax is explicit, but behind the scenes properties are often treated as simply special method calls."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]