[[{"text": ["It's really hard to guess what you want from what you provided, since, instead of saying what you want to do, you provided your newbie code, so one has a hard guess time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'd think something like this would do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n data = {\n        (1, 'user1'): (\"name1\", \"coord1\", \"hero1\"),\n        (2, 'user1'): (\"name2\", \"coord2\", \"hero2\"),\n        #...\n        (1, 'user2'): (\"name11\", \"coord11\", \"hero11\"),\n        (2, 'user2'): (\"name12\", \"coord12\", \"hero12\"),\n        # ...\n    }\n\n\nclass CityBean:\n    def __init__(self,name,coords,hero):\n        self.name = name\n        self.coords = coords\n        self.hero = hero\n\nclass Castles:\n    def __init__(self,user,n):\n        self.user = user\n        self.n = n\n        name, coords, hero = data.get((n, user))\n        self.citybean = CityBean(name, coords, hero)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Why did your write this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n temp = {\n            1:  CityBean( \"name21\" , \"coord21\" , \"hero21\" ),\n            ... blah blah blah\n            10: CityBean( \"name30\" , \"coord30\" , \"hero30\" ) }[self.n]()\n</code>\n</pre>\n", "senID": 1}, {"text": ["What do you think temp= {...}[something]() will do?"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "temp= {...}[something]()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Why are you calling the CityBean object as if it was a function?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Further, why are you creating entire dictionaries only to pick a single item of it?", "What's wrong with if statements?"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["your are doing "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n {\n1:  CityBean( \"name1\"  , \"coord1\" , \"hero1\"),\n... blah blah blah\n10: CityBean( \"name10\" , \"coord10\" , \"hero10\" )}[self.n]()\n</code>\n</pre>\n", "senID": 1}, {"text": ["which is basically from a dict get value based on key, values on your dict are CityBean instances, so in short you are doing this"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n CityBean( \"name1\"  , \"coord1\" , \"hero1\")()\n</code>\n</pre>\n", "senID": 3}, {"text": ["which is valid but will call the special method __call__ of the instance, so either remove () or add a __call__ method depending on the need"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "__call__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "()", "childNum": 0, "tag": "code", "childList": []}, {"text": "__call__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I don't really understand what you're trying to do exactly, but:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 10: CityBean( \"name10\" , \"coord10\" , \"hero10\" )}[self.n]()\n</code>\n</pre>\n", "senID": 1}, {"text": ["if calling something (the () at the end make it a function call). "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["What you would want is I think\n    temp = { ...\n        10: CityBean( \"name10\" , \"coord10\" , \"hero10\" )}[self.n]"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In that case you'd get the dict entry with key n and label that temp."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Notice, that in python, when you write"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n CityBean( \"name1\"  , \"coord1\" , \"hero1\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["You initialize the object CityBean.", "There is no need for an extra ()."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "CityBean", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Putting parens after a class name in a normal expression instantiates it immediately.", "If you want to delay instantiation then you'll need to use lambda or functools.partial():"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "lambda", "tag": "a", "pos": 1, "childList": [{"text": "lambda", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/tutorial/controlflow.html#lambda-forms"}, {"text": "lambda", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/functools.html#functools.partial", "text": "functools.partial()", "childNum": 1, "tag": "a", "childList": [{"text": "functools.partial()", "tag": "code"}]}, {"text": "functools.partial()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n 10: lambda: CityBean(\"\", \"\", \"\")}...\n</code>\n</pre>\n", "senID": 1}]]