[[{"text": ["If you are using Python &lt;2.7 I would suggest optparse.", "optparse is deprecated though, and in 2.7 you should use argparse"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "optparse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/optparse.html"}, {"text": "argparse", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/argparse.html#module-argparse"}]}, {"text": ["It makes passing named parameters a breeze."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Have you taken a look at the getopt module?", "It's designed to make working with command line options easier.", "See also the examples at  Dive Into Python."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "getopt module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/getopt.html"}, {"text": "Dive Into Python", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.faqs.org/docs/diveintopython/kgp_commandline.html"}]}, {"text": ["If you are working with Python 2.7 (and not lower), than you can also have a look at the argparse module which should make it even easier."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "argparse module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/argparse.html#module-argparse"}]}], [{"text": ["If your script is not called too often, you can use a configuration file. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The .ini style is easily readable by ConfigParser:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "The .ini style is easily readable by ConfigParser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/configparser.html"}]}, {"code": "<pre>\n<code>\n [Section_1]\nfoo1=1\nfoo2=2\nfoo3=5\n...\n\n[Section_2]\nbar1=1\nbar2=2\nbar3=3\n...\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you have a serious amount of variables, it might be the right way to go."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Since you're working on windows with VB, it's worth mentioning that IronPython might be one option.", "Since both VB and IronPython can interact through .NET, you could wrap up your script in an assembly and expose a function which you call with the required arguments."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "IronPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ironpython.net/"}]}], [{"text": ["you can do something fun like call it as"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n thepyscript.py \"x = 12,y = 'hello world', z = 'jam'\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["and inside your script,"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["parse do:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n stuff = arg[1].split(',')\nfor item in stuff:\n    exec(item) #or eval(item) depending on how complex you get \n#Exec can be a lot of fun :) In fact with this approach you could potentially  \n#send functions to your script.\n#If this is more than you need, then i'd stick w/ arg/optparse\n</code>\n</pre>\n", "senID": 4}], [{"text": ["What do you think about creating a python script setting these variables from the gui side?", "When starting the python app you just start this script and you have your vars."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Execfile"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Execfile", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#execfile"}]}]]