[[{"text": ["When in doubt, leave it \"public\" - I mean, do not add anything to obscure the name of your attribute.", "If you have a class with some internal value, do not bother about it.", "Instead of writing:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Stack(object):\n\n    def __init__(self):\n        self.__storage = [] # Too uptight\n\n    def push(self, value):\n        self.__storage.append(value)\n</code>\n</pre>\n", "senID": 1}, {"text": ["write this by default:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Stack(object):\n\n    def __init__(self):\n        self.storage = [] # No mangling\n\n    def push(self, value):\n        self.storage.append(value)\n</code>\n</pre>\n", "senID": 3}, {"text": ["This is for sure a controversial way of doing things.", "Python newbies just hate it and even some old Python guys despise this default - but it is the default anyway, so I really recommend you to follow it, even if you feel uncomfortable."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If you really want to send the message to your users saying \"Can't touch this!", "\", the usual way is to precede the variable with one underscore.", "This is just a convention, but people understand it and take double care when dealing with such stuff:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "one", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class Stack(object):\n\n    def __init__(self):\n        self._storage = [] # This is ok but pythonistas use to be relaxed about it\n\n    def push(self, value):\n        self._storage.append(value)\n</code>\n</pre>\n", "senID": 6}, {"text": ["This can be useful, too, for avoiding conflict between properties names and attribute names:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n class Person(object):\n     def __init__(self, name, age):\n         self.name = name\n         self._age = age if age &gt;= 0 else 0\n\n     @property\n     def age(self):\n         return self._age\n\n     @age.setter\n     def age(self, age):\n         if age &gt;= 0:\n             self._age = age\n         else:\n             self._age  = 0\n</code>\n</pre>\n", "senID": 8}, {"text": ["What about the double underscore?", "Well, it seems the double underscore magic is used mainly to avoid accidental overloading of methods.", "If you want to use it eventually, you can, but it is nor usual neither recommended."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "to avoid accidental overloading of methods", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/70528/why-are-pythons-private-methods-not-actually-private/70900#70900"}]}, {"text": ["EDIT: Why is this so?", "Well, man, there is a lot of reasons - most of them controversial... Let us see some of them."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Most OO languages today use the opposite approach: what should not be used should not be visible, so attributes should be private.", "Theoretically, this would yield more manageable, less coupled classes, because no one would change values inside the objects recklessly."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["However, this is not so simple.", "For example, Java classes do have a lot attributes and getters that just get the values and setters that just set the values.", "You need, let us say, seven lines of code to declare a single attribute - which a Python programmer would say is needless complex.", "Also, in practice you just write this lot of code to get one public field, since you can change its value using the getters and setters."], "childNum": 4, "tag": "p", "senID": 12, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "get", "childNum": 0, "tag": "em", "pos": 3, "childList": []}, {"text": "and", "childNum": 0, "tag": "em", "childList": []}, {"text": "set", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["So why to follow this private-by-default policy?", "Just make your attributes public by default.", "Of course, it is problematic in Java, because if you decide to add some validation to your attribute, it would require you to change all"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n person.age = age;\n</code>\n</pre>\n", "senID": 14}, {"text": ["in your code to, let us say,"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n person.setAge(age);\n</code>\n</pre>\n", "senID": 16}, {"text": ["being setAge():"], "childNum": 1, "tag": "p", "senID": 17, "childList": [{"text": "setAge()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n public void setAge(int age) {\n    if (age &gt;= 0) {\n        this.age = age;\n    } else {\n        this.age = 0;\n    }\n}\n</code>\n</pre>\n", "senID": 18}, {"text": ["So in Java (and other languages) the default is to use getters and setters anyway, because they can be annoying to write but can spare you a lot of time if you find yourself in the situation I've described."], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"text": ["However, you do not need to do it in Python, since Python have properties.", "If you had this class:"], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"code": "<pre>\n<code>\n class Person(object):\n     def __init__(self, name, age):\n         self.name = name\n         self.age = age\n</code>\n</pre>\n", "senID": 21}, {"text": ["and then you decide to validate ages, you do not need to change the person.age = age pieces of your code.", "Just add a property (as shown below)"], "childNum": 1, "tag": "p", "senID": 22, "childList": [{"text": "person.age = age", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Person(object):\n     def __init__(self, name, age):\n         self.name = name\n         self._age = age if age &gt;= 0 else 0\n\n     @property\n     def age(self):\n         return self._age\n\n     @age.setter\n     def age(self, age):\n         if age &gt;= 0:\n             self._age = age\n         else:\n             self._age  = 0\n</code>\n</pre>\n", "senID": 23}, {"text": ["If you can do it and still use  person.age = age, why would you add private fields and getters and setters?"], "childNum": 1, "tag": "p", "senID": 24, "childList": [{"text": "person.age = age", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(Also, see Python is not Java and this article about the harms of using getters and setters.", ")."], "childNum": 2, "tag": "p", "senID": 25, "childList": [{"text": "Python is not Java", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dirtsimple.org/2004/12/python-is-not-java.html"}, {"text": "this article about the harms of using getters and setters", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.javaworld.com/javaworld/jw-09-2003/jw-0905-toolbox.html?page=1"}]}, {"text": ["Even in languages where there are private attributes, you can access them through some kind of reflection/introspection librariy.", "And people do it a lot of times, in frameworks and for solving urgent needs.", "The problem is that introspection libraries are just a hard way of doing what you could do with public attributes."], "childNum": 0, "tag": "p", "senID": 26, "childList": []}, {"text": ["Since Python is a very dynamic language which favors alternative approaches to problems, it is just counterproductive to add this burden to your classes."], "childNum": 0, "tag": "p", "senID": 27, "childList": []}, {"text": ["For a Pythonista, encapsulation is not the inability of seeing internals of classes, but the possibility of avoiding to look at it.", "I mean, encapsulation is the property of a component which allows it to be used without the user being concerned about the internal details.", "If you can use a component without bothering yourself about its implementation, then it is encapsulated (in the opinion of a Python programmer)."], "childNum": 0, "tag": "p", "senID": 28, "childList": []}, {"text": ["Now, if you wrote your class in such a way you can use it without needing to think about implementations details, there is no problem if you want to look inside the class for some reason.", "The question is: your API should be good and the rest is detail."], "childNum": 1, "tag": "p", "senID": 29, "childList": [{"text": "want", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Well, this is not controversial: he said so, actually."], "childNum": 1, "tag": "p", "senID": 30, "childList": [{"text": "he said so, actually", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://awurl.com/VqusqUY5C#first_awesome_highlight"}]}, {"text": ["Yes, there are some reasons, but no killing reason.", "This is mostly a cultural aspect of programming in Python.", "Frankly, it could be the other way, too - but it is not.", "Also, you could just ask the other way around: why do some languages use private attributes by default?", "For the same main reason for the Python practice: because it is the culture of these languages, and each choice has advantages and disadvantages."], "childNum": 0, "tag": "p", "senID": 31, "childList": []}, {"text": ["Since this culture grew up, you are well advised to follow it.", "Otherwise, you will get annoyed by Python programmers saying to you to remove the __ of your code when you asked a question in Stack Overflow :)"], "childNum": 1, "tag": "p", "senID": 32, "childList": [{"text": "__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I feel my answer is not so good.", "Sorry, I just planned to answer to the more straightforward question about what is the convention; I just tried to answer about why this is the convention because I have posted the first answer.", "I hope it can be a bit clarifying, anyway."], "childNum": 2, "tag": "p", "senID": 33, "childList": [{"text": "what", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "why", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["I wouldn't say that practice produces better code.", "Visibility modifiers only distract you from the task at hand, and as a side effect force your interface to be used as you intended.", "Generally speaking, enforcing visibility prevents programmers from messing things up if they haven't read the documentation properly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A far better solution is the route that Python encourages: Your classes and variables should be well documented, and their behaviour clear.", "The source should be available.", "This is far more extensible and reliable way to write code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My strategy in Python is this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Above all, it should be clear what everything does.", "Document it if someone else will be using it.", "Document it if you want it to be useful in a year's time."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["As a side note, you should actually be going with protected in those other languages: You never know your class might be inherited later and for what it might be used.", "Best to only protect those variables that you are certain cannot or should not be used by foreign code."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "protected", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["You shouldn't start with private data and make it public as necessary.", "Rather, you should start by figuring out the interface of your object.", "I.e.", "you should start by figuring out what the world sees (the public stuff) and then figure out what private stuff is necessary for that to happen."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Other language make difficult to make private that which once was public.", "I.e.", "I'll break lots of code if I make my variable private or protected.", "But with properties in python this isn't the case.", "Rather, I can maintain the same interface even with rearranging the internal data."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The difference between _ and __ is that python actually makes an attempt to enforce the latter.", "Of course, it doesn't try really hard but it does make it difficult.", "Having _ merely tells other programmers what the intention is, they are free to ignore at their peril.", "But ignoring that rule is sometimes helpful.", "Examples include debugging, temporary hacks, and working with third party code that wasn't intended to be used the way you use it. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["At first glance it should be the same as for other languages (under \"other\" I mean Java or C++), but it isn't."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In Java you made private all variables that shouldn't be accessible outside.", "In the same time in Python you can't achieve this since there is no \"privateness\" (as one of Python principles says - \"We're all adults\").", "So double underscore means only \"Guys, do not use this field directly\".", "The same meaning has singe underscore, which in the same time doesn't cause any headache when you have to inherit from considered class (just an example of possible problem caused by double underscore)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So, I'd recommend you to use single underscore by default for \"private\" members."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["There are already a lot of good answers to this, but I'm going to offer another one.", "This is also partially a response to people who keep saying that double underscore isn't private (it really is)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you look at Java/C#, both of them have private/protected/public.", "All of these are compile-time constructs.", "They are only enforced at the time of compilation.", "If you were to use reflection in Java/C#, you could easily access private method."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "compile-time constructs", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Now every time you call a function in Python, you are inherently using reflection.", "These pieces of code are the same in Python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n lst = []\nlst.append(1)\ngetattr(lst, 'append')(1)\n</code>\n</pre>\n", "senID": 3}, {"text": ["The \"dot\" syntax is only syntactic sugar for the latter piece of code.", "Mostly because using getattr is already ugly with only one function call.", "It just gets worse from there."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["So with that, there can't be a Java/C# version of private, as Python doesn't compile the code.", "Java and C# can't check if a function is private or public at runtime, as that information is gone (and it has no knowledge of where the function is being called from)."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "can't", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Now with that information, the name mangling of the double underscore makes the most sense for achieving \"private-ness\".", "Now when a function is called from the 'self' instance and it notices that it starts with '__', it just performs the name mangling right there.", "It's just more syntactic sugar.", "That syntactic sugar allows the equivalent of 'private' in a language that only uses reflection for data member access."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Disclaimer: I have never heard anybody from the Python development say anything like this.", "The real reason for the lack of \"private\" is cultural, but you'll also notice that most scripting/interpreted languages have no private.", "A strictly enforceable private is not practical at anything except for compile time."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["First: Why do you want to hide your data?", "Why is that so important?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Most of the time you don't really want to do it but you do because others are doing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you really really really don't want people using something, add one underscore in front of it.", "That's it... Pythonistas know that things with one underscore is not guaranteed to work every time and may change without you knowing."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "one", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["That's the way we live and we're okay with that."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Using two underscores will make your class so bad to subclass that even you will not want to work that way."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]