[[{"text": ["If you are using python 2.7+/3.1+, there is a Counter Class in the collections module which is purpose built to solve this type of problem:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Counter Class", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/py3k/library/collections.html#collections.Counter"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; words = \"apple banana apple strawberry banana lemon\"\n&gt;&gt;&gt; freqs = Counter(words.split())\n&gt;&gt;&gt; print(freqs)\nCounter({'apple': 2, 'banana': 2, 'strawberry': 1, 'lemon': 1})\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Since both 2.7 and 3.1 are still in beta it's unlikely you're using it, so just keep in mind that a standard way of doing this kind of work will soon be readily available."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["defaultdict to the rescue!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "defaultdict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#defaultdict-objects"}]}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\nwords = \"apple banana apple strawberry banana lemon\"\n\nd = defaultdict(int)\nfor word in words.split():\n    d[word] += 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["This runs in O(n)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Standard approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\nwords = \"apple banana apple strawberry banana lemon\"\nwords = words.split()\nresult = collections.defaultdict(int)\nfor word in words:\n    result[word] += 1\n\nprint result\n</code>\n</pre>\n", "senID": 1}, {"text": ["Groupby oneliner:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from itertools import groupby\n\nwords = \"apple banana apple strawberry banana lemon\"\nwords = words.split()\n\nresult = dict((key, len(list(group))) for key, group in groupby(sorted(words)))\nprint result\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you don't want to use the standard dictionary method (looping through the list incrementing the proper dict.", "key), you can try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import groupby\n&gt;&gt;&gt; myList = words.split() # ['apple', 'banana', 'apple', 'strawberry', 'banana', 'lemon']\n&gt;&gt;&gt; [(k, len(list(g))) for k, g in groupby(sorted(myList))]\n[('apple', 2), ('banana', 2), ('lemon', 1), ('strawberry', 1)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["It runs in O(n log n) time."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n freqs = {}\nfor word in words:\n    freqs[word] = freqs.get(word, 0) + 1 # fetch and increment OR initialize\n</code>\n</pre>\n", "senID": 0}, {"text": ["I think this results to the same as Triptych's solution, but without importing collections.", "Also a bit like Selinap's solution, but more readable imho.", "Almost identical to Thomas Weigel's solution, but without using Exceptions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This could be slower than using defaultdict() from the collections library however.", "Since the value is fetched, incremented and then assigned again.", "Instead of just incremented.", "However using += might do just the same internally."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Without defaultdict:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n words = \"apple banana apple strawberry banana lemon\"\nmy_count = {}\nfor word in words.split():\n    try: my_count[word] += 1\n    except KeyError: my_count[word] = 1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Can't you just use count?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n words = 'the quick brown fox jumps over the lazy gray dog'\nwords.count('z')\n#output: 1\n</code>\n</pre>\n", "senID": 1}]]