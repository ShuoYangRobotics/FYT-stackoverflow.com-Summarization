[[{"text": ["You've got a problem.", "You can't -- and shouldn't be able to -- compare two times.", "Is 11pm before or after 1am?", "It depends whether or not they're on the same day."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You need to either store them as datetime or something else that represents a relatively absolute time, or you need to turn them into datetimes like this:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "datetime", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "datetime", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def todatetime(time):\n    return datetime.datetime.today().replace(hour=time.hour, minute=time.minute, second=time.second, \n                                             microsecond=time.microsecond, tzinfo=time.tzinfo)\n\ndef timestodelta(starttime, endtime):\n    return todatetime(endtime) - todatetime(starttime)\n</code>\n</pre>\n", "senID": 2}, {"text": ["This will fail to give the expected answer if the two calls to today span midnight."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "today", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Then you should probably use this app for a DurationField which stores a timedelta to store the result in the database for easy display."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "DurationField", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://django-durationfield.readthedocs.org/en/latest/"}, {"text": "timedelta", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I don't see where is the problem, apart in case the end-time would be later than 24 hours after the start-time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Suppose that start-time is  9:00:00 and end-time is 13:00:00\nIf these times were taken on August 15, 9:00:00 and August 17, 13:00:00 , there would be no sense to try to obtain the time delta between them without knowing the days 15 and 17."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["Hence there are two cases: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["either the start time and end time may be really separated by more than 24 hours , then as it has already been said, you must move to the use of datetime's objects"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["either there is always less than 24 hours between the start-time and the end-time, then the problem is simple."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]}, {"text": ["=========================="], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Let us examine the second case."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["If\nstart-time 11:30:00\nend-time.. 12:35:00\nThe end is evidently 1 hour 5 minutes after the start"], "childNum": 4, "tag": "p", "senID": 7, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "1 hour 5 minutes", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["If\nstart-time 11:30:00\nend-time.. 10:35:00\nThe end can't be before the start in the same morning, then the end is in fact in the morning of the next day after the day in which is the start, that is to say 24 hours later."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["The same reasoning applies when the start is in the afternoon and the end time is apparently before the start time in the same day, in afternoon or morning: end time is in fact in the the next day, morning or afternoon, it depends but it's still 24 hours later."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["So a little function, that need only the attributes of the times is sufficient to deduct the time difference:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n def difft(start,end):\n    a,b,c,d = start.hour, start.minute, start.second, start.microsecond\n    w,x,y,z = end.hour, end.minute, end.second, end.microsecond\n    delt = (w-a)*60 + (x-b) + (y-c)/60. + (z-d)/60000000\n    return delt + 1440 if delt&lt;0 else delt\n</code>\n</pre>\n", "senID": 11}, {"text": ["The following code is only for a better display of the result:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["from datetime import time"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n def difft(start,end):\n    a,b,c,d = start.hour, start.minute, start.second, start.microsecond\n    w,x,y,z = end.hour, end.minute, end.second, end.microsecond\n    delt = (w-a)*60 + (x-b) + (y-c)/60. + (z-d)/60000000\n\n    D = '%sh %smn %ss %sms - %sh %smn %ss %sms == '\n    ft = '%s + 1440 = %s  (1440 = 24x60mn)'\n    return D % (w,x,y,z,a,b,c,d) +( ft % (delt, delt+1440) if delt&lt;0 else str(delt))\n\n\nprint difft(time(11,30,0),time(12,35,0))\nprint difft(time(11,30,0),time(10,35,0))\nprint\nprint difft(time(20,40,0),time(22,41,0))\nprint difft(time(20,40,0),time(18,41,0))\n</code>\n</pre>\n", "senID": 14}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n 12h 35mn 0s 0ms - 11h 30mn 0s 0ms == 65.0\n10h 35mn 0s 0ms - 11h 30mn 0s 0ms == -55.0 + 1440 = 1385.0  (1440 = 24x60mn)\n\n22h 41mn 0s 0ms - 20h 40mn 0s 0ms == 121.0\n18h 41mn 0s 0ms - 20h 40mn 0s 0ms == -119.0 + 1440 = 1321.0  (1440 = 24x60mn)\n</code>\n</pre>\n", "senID": 16}, {"text": ["To obtain the durations in a more readable format:"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n def difft2(start,end):\n    a,b,c,d = start.hour, start.minute, start.second, start.microsecond\n    w,x,y,z = end.hour, end.minute, end.second, end.microsecond\n    delt = (w-a)*60 + (x-b) + (y-c)/60. + (z-d)/60000000.\n    if delt &lt; 0:\n        delt += 1440\n\n    hh,rem = divmod(delt,60)\n    hh = int(hh)\n    mm = int(rem)\n    rem = (rem - mm)*60\n    ss = int(rem)\n    ms = (rem - ss)*1000000\n    ms = int(ms)\n\n    SS = '%sh %smn %ss %sms - %sh %smn %ss %sms == %sh %smn %ss %sms'\n    return SS % (w,x,y,z,a,b,c,d,hh,mm,ss,ms)\n\n\n\nprint difft2(time(11,30,0),time(12,35,45,478129))\nprint difft2(time(11,30,45,11),time(10,35,45,12))\nprint\nprint difft2(time(20,40,0),time(22,41,0))\nprint difft2(time(20,40,0),time(18,41,0))\n</code>\n</pre>\n", "senID": 18}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"code": "<pre>\n<code>\n 12h 35mn 45s 478129ms - 11h 30mn 0s 0ms == 1h 5mn 45s 478128ms\n10h 35mn 45s 12ms - 11h 30mn 45s 11ms == 23h 5mn 0s 1ms\n\n22h 41mn 0s 0ms - 20h 40mn 0s 0ms == 2h 1mn 0s 0ms\n18h 41mn 0s 0ms - 20h 40mn 0s 0ms == 22h 1mn 0s 0ms\n</code>\n</pre>\n", "senID": 20}], [{"text": ["1:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Probably not, but you could create your own tag, take a look at this code that does something similar:\nTimedelta template tag"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Timedelta template tag", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://djangosnippets.org/snippets/210/"}]}, {"text": ["2: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Again, i couldnt find anything like this.", "But it should be easy to code a custom tag to do it.", "Something like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def round_to_hours(minutes):\n    return str(minutes/60) + ' hours and ' + str(minutes%60) + ' minutes'\nregister.filter(round_to_hours)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Of course, this is just a start code, There's much to improve."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["As agf pointed out, you'll probably need a way to make timedelta objects.", "You could try something like this (if you can assume both times are on the same day):"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n dummydate = datetime.date(1999,1,1)\ndelta = datetime.combine(dummydate, time1) - datetime.combine(dummydate, time2)\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Represent duration as a property on your model:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "duration", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://docs.djangoproject.com/en/1.3/topics/db/models/#model-methods"}]}, {"code": "<pre>\n<code>\n from datetime import timedelta\n\n@property\ndef duration(self):\n    end = timedelta(self.endtime.hour, self.endtime.minute, self.endtime.second)\n    start = timedelta(self.starttime.hour, self.starttime.minute, self.starttime.second)\n    return end - start\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which returns a timedelta object.", "You can format it there as a string, or use a templatetag, etc."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Perhaps this is what you are looking for Look at the time_delta_total_seconds.", "You might like to use the lib if you have complicated event scheduling requirements."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.google.com/p/django-swingtime/source/browse/swingtime/utils.py"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/django-swingtime/source/browse/swingtime/utils.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-swingtime/source/browse/swingtime/utils.py"}]}], [{"text": ["I would probably just add a \"duration\" method to your Entry model.", "It's easy, straight forward, and you can access it in the template like any other model field, {{ entry.duration }}."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Entry(models.Model):\n    title = models.CharField(unique=True,max_length=50)\n    starttime=models.TimeField(null=True)\n    endtime=models.TimeField(null=True)\n\n    def duration(self):\n        # perform duration calculation here\n        return duration_display\n</code>\n</pre>\n", "senID": 1}]]