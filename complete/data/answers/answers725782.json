[[{"text": ["For your case the only difference is performance: append is twice as fast."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Python 3.0 (r30:67507, Dec  3 2008, 20:14:27) [MSC v.1500 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; timeit.Timer('s.append(\"something\")', 's = []').timeit()\n0.20177424499999999\n&gt;&gt;&gt; timeit.Timer('s += [\"something\"]', 's = []').timeit()\n0.41192320500000079\n\nPython 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; timeit.Timer('s.append(\"something\")', 's = []').timeit()\n0.23079359499999999\n&gt;&gt;&gt; timeit.Timer('s += [\"something\"]', 's = []').timeit()\n0.44208112500000141\n</code>\n</pre>\n", "senID": 1}, {"text": ["In general case append will add one item to the list, while += will copy all elements of right-hand-side list into the left-hand-side list."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "append", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "+=", "childNum": 0, "tag": "code", "childList": []}, {"text": "all", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Update: perf analysis"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Update: perf analysis", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Comparing bytecodes we can assume that append version wastes cycles in LOAD_ATTR + CALL_FUNCTION, and += version -- in BUILD_LIST.", "Apparently BUILD_LIST outweighs LOAD_ATTR + CALL_FUNCTION. "], "childNum": 7, "tag": "p", "senID": 4, "childList": [{"text": "append", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "LOAD_ATTR", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "CALL_FUNCTION", "childNum": 0, "tag": "code", "childList": []}, {"text": "BUILD_LIST", "childNum": 0, "tag": "code", "childList": []}, {"text": "BUILD_LIST", "childNum": 0, "tag": "code", "childList": []}, {"text": "LOAD_ATTR", "childNum": 0, "tag": "code", "childList": []}, {"text": "CALL_FUNCTION", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import dis\n&gt;&gt;&gt; dis.dis(compile(\"s = []; s.append('spam')\", '', 'exec'))\n  1           0 BUILD_LIST               0\n              3 STORE_NAME               0 (s)\n              6 LOAD_NAME                0 (s)\n              9 LOAD_ATTR                1 (append)\n             12 LOAD_CONST               0 ('spam')\n             15 CALL_FUNCTION            1\n             18 POP_TOP\n             19 LOAD_CONST               1 (None)\n             22 RETURN_VALUE\n&gt;&gt;&gt; dis.dis(compile(\"s = []; s += ['spam']\", '', 'exec'))\n  1           0 BUILD_LIST               0\n              3 STORE_NAME               0 (s)\n              6 LOAD_NAME                0 (s)\n              9 LOAD_CONST               0 ('spam')\n             12 BUILD_LIST               1\n             15 INPLACE_ADD\n             16 STORE_NAME               0 (s)\n             19 LOAD_CONST               1 (None)\n             22 RETURN_VALUE\n</code>\n</pre>\n", "senID": 5}, {"text": ["We can improve performance even more by removing LOAD_ATTR overhead:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "LOAD_ATTR", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit.Timer('a(\"something\")', 's = []; a = s.append').timeit()\n0.15924410999923566\n</code>\n</pre>\n", "senID": 7}], [{"text": ["In the example you gave, there is no difference, in terms of output, between append and +=.", "But there is a difference between append and + (which the question originally asked about)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "append", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "+=", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "append", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = []\n&gt;&gt;&gt; id(a)\n11814312\n&gt;&gt;&gt; a.append(\"hello\")\n&gt;&gt;&gt; id(a)\n11814312\n\n&gt;&gt;&gt; b = []\n&gt;&gt;&gt; id(b)\n11828720\n&gt;&gt;&gt; c = b + [\"hello\"]\n&gt;&gt;&gt; id(c)\n11833752\n&gt;&gt;&gt; b += [\"hello\"]\n&gt;&gt;&gt; id(b)\n11828720\n</code>\n</pre>\n", "senID": 1}, {"text": ["As you can see, append and += have the same result; they add the item to the list, without producing a new list.", "Using + adds the two lists and produces a new list."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "append", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "+=", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n some_list2 += [\"something\"]\n</code>\n</pre>\n", "senID": 0}, {"text": ["is actually "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n some_list2.extend([\"something\"])\n</code>\n</pre>\n", "senID": 2}, {"text": ["for one value, there is no difference.", "Documentation states, that:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Thus obviously s.append(x) is same as s.extend([x])"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "s.append(x)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "s.extend([x])", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a=[]\n&gt;&gt;&gt; a.append([1,2])\n&gt;&gt;&gt; a\n[[1, 2]]\n&gt;&gt;&gt; a=[]\n&gt;&gt;&gt; a+=[1,2]\n&gt;&gt;&gt; a\n[1, 2]\n</code>\n</pre>\n", "senID": 0}, {"text": ["See that append adds a single element to the list, which may be anything.", "+=[] joins the lists."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "+=[]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["+= is an assignment.", "When you use it you're really saying \u2018some_list2= some_list2+['something']\u2019.", "Assignments involve rebinding, so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l= []\n\ndef a1(x):\n    l.append(x) # works\n\ndef a2(x):\n    l= l+[x] # assign to l, makes l local\n             # so attempt to read l for addition gives UnboundLocalError\n\ndef a3(x):\n    l+= [x]  # fails for the same reason\n</code>\n</pre>\n", "senID": 1}, {"text": ["The += operator should also normally create a new list object like list+list normally does:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l1= []\n&gt;&gt;&gt; l2= l1\n\n&gt;&gt;&gt; l1.append('x')\n&gt;&gt;&gt; l1 is l2\nTrue\n\n&gt;&gt;&gt; l1= l1+['x']\n&gt;&gt;&gt; l1 is l2\nFalse\n</code>\n</pre>\n", "senID": 3}, {"text": ["However in reality:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l2= l1\n&gt;&gt;&gt; l1+= ['x']\n&gt;&gt;&gt; l1 is l2\nTrue\n</code>\n</pre>\n", "senID": 5}, {"text": ["This is because Python lists implement __iadd__() to make a += augmented assignment short-circuit and call list.extend() instead.", "(It's a bit of a strange wart this: it usually does what you meant, but for confusing reasons."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "__iadd__()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#object.%5F%5Fiadd%5F%5F"}]}, {"text": ["In general, if you're appending/extended an existing list, and you want to keep the reference to the same list (instead of making a new one), it's best to be explicit and stick with the append()/extend() methods."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["In addition to the aspects described in the other answers, append and +[] have very different behaviors when you're trying to build a list of lists."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; list1=[[1,2],[3,4]]\n&gt;&gt;&gt; list2=[5,6]\n&gt;&gt;&gt; list3=list1+list2\n&gt;&gt;&gt; list3\n[[1, 2], [3, 4], 5, 6]\n&gt;&gt;&gt; list1.append(list2)\n&gt;&gt;&gt; list1\n[[1, 2], [3, 4], [5, 6]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["list1+['5','6'] adds '5' and '6' to the list1 as individual elements.", "list1.append(['5','6']) adds the list ['5','6'] to the list1 as a single element."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The performance tests here are not correct:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["e.g.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["good tests can be found here: http://markandclick.com/1/post/2012/01/python-list-append-vs.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://markandclick.com/1/post/2012/01/python-list-append-vs.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://markandclick.com/1/post/2012/01/python-list-append-vs.html"}]}]]