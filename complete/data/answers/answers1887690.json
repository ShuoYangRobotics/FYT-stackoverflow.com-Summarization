[[{"text": ["You can of course use a dictionary, to look up the response:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lst = ['one', 'two', 'three']\nresp = { 'one': num1, 'two': num2, 'three': num3 }\n\nfor item in lst:\n  print resp[item]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is still pretty static, though.", "Another approach would be object-orienting it, so you get to implement a function in the objects in lst that makes the decision."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "lst", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; tups = ('one', 33), ('two', 45), ('three', 76)\n&gt;&gt;&gt; for i, j in tups:\n    print(j)\n\n\n33\n45\n76\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Is it intentional that your code ignores objects that are not mentioned in any if/elif clause?", "If so, use a dictionary with a default value of 'None' if the object is not found:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lst = ['one', 'two', 'three'] \nd = { 'one': 33, 'two': 45, 'three': 76}\n\nfor item in lst: \n    x = d.get(item)\n    if x is not None:\n        print x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["the whole logic of your if/else is equivalent to a dictionary's key and value pairs"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = {\"one\":33, \"two\":44, \"three\":76}\n</code>\n</pre>\n", "senID": 1}, {"text": ["this part of your code"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if item == 'one':\n    print num1\n</code>\n</pre>\n", "senID": 3}, {"text": ["is the same as "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print d[\"one\"]\n</code>\n</pre>\n", "senID": 5}, {"text": ["like wise for the others"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["If you have dictionary like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = {\"one\":33, \"two\":44, \"three\":76}\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can print it like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for k in d.keys():\n    print d[k]\n</code>\n</pre>\n", "senID": 3}, {"text": ["This presumes that you do not care about the order."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["For your simple example a dictinary lookup poposed in other answers is the best.", "But sometimes you need to run completely different code for each condition, so the following idiom might be useful too:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyClass(object):\n\n    def process(self, item):\n        # Select the method to call based on item value\n        return getattr(self, 'do_'+item)()\n\n    def do_one(self):\n        # do something here\n\n    def do_two(self):\n        # do something other here\n\n    # ... other methods ...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["When there's no correlation between the if clause and the prints, you can create a mapping dictionary to store the correlations.", "You need to be careful to map to the variable of numx, not the current value (thus the use of the eval function):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n num1 = 33\nnum2 = 45\nnum3 = 76\nlst = ['one', 'two', 'three']\n\nmap = {'one': 'num1', 'two': 'num2', 'three': 'num3'} \n\nfor item in lst:\n    print item in map and eval(map[item]) or 'Unknown'\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you're sure the item is in the map, the last line can be simplified further to:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print eval(map[item])\n</code>\n</pre>\n", "senID": 3}]]