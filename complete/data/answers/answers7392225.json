[[{"text": ["Let me try to break this down. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Start by considering a list.", "It is \"almost\" sorted.", "That is, the first few elements are sorted, but the last element is not sorted.", "So it looks something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [10, 20, 30, 50, 15]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Obviously, the 15 is in the wrong place.", "So how do we move it? "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n key = mylist[4]\n    mylist[4] = mylist[3]\n    mylist[3] = key\n</code>\n</pre>\n", "senID": 4}, {"text": ["That'll switch around the 15 and the 50 so now the list looks like:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n [10, 20, 30, 15, 50]\n</code>\n</pre>\n", "senID": 6}, {"text": ["But we'd like to do this several times in a loop.", "To do that we can do:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n while ???:\n    key = mylist[i]\n    mylist[i] = mylist[i-1]\n    mylist[i-1] = key\n    i -= 1\n</code>\n</pre>\n", "senID": 8}, {"text": ["That loop will go back one position at a time swapping the two elements.", "That'll move the out of order position one place back each time.", "But how do we know when to stop?"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Let's look again at our list and the moves we want to make:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n [10, 20, 30, 50, 15]\n[10, 20, 30, 15, 50]\n[10, 20, 15, 30, 50]\n[10, 15, 20, 30, 50]\n# stop! we are sorted now!\n</code>\n</pre>\n", "senID": 11}, {"text": ["But what is different that last time around?", "Every time we move the number one place back, it is because the 15 is less then the element on the left, meaning its not sorted.", "When that is no longer true we should stop moving.", "But we can easily deal with that:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n key = mylist[i]\nwhile key &lt; mylist[i-1]:\n    mylist[i] = mylist[i-1]\n    mylist[i-1] = key\n    i -= 1\n</code>\n</pre>\n", "senID": 13}, {"text": ["Ok, but happens if we now try to sort this list:"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["[10, 20, 1]\n   [10, 1, 20]\n   [1, 10, 20]\n   # ERROR!"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["At this point something bad happens.", "We try to check whether key &lt; mylist[i-1] but when we've reached the beginning, i = 0, and this checks the end of the list.", "But we should stop moving to left at this point..."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["If we reach the beginning of the list, we can't move our pivot/key further so we should stop.", "We update our while loop to handle that:"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n key = mylist[i]\nwhile i &gt; 0 and key &lt; mylist[i-1]:\n    mylist[i] = mylist[i-1]\n    mylist[i-1] = key\n    i -= 1\n</code>\n</pre>\n", "senID": 18}, {"text": ["So now we have a technique for sorting an almost sorted list.", "But how can we use that to sort a whole list?", "We sort parts of the list at a time."], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"code": "<pre>\n<code>\n [8, 2, 4, 9, 3, 6]\n</code>\n</pre>\n", "senID": 20}, {"text": ["First we sort the first 1 elements:"], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"code": "<pre>\n<code>\n [8, 2, 4, 9, 3, 6]\n</code>\n</pre>\n", "senID": 22}, {"text": ["Then we sort the first 2 elements:"], "childNum": 0, "tag": "p", "senID": 23, "childList": []}, {"code": "<pre>\n<code>\n [2, 8, 4, 9, 3, 6]\n</code>\n</pre>\n", "senID": 24}, {"text": ["Then we sort the first 3 elements"], "childNum": 0, "tag": "p", "senID": 25, "childList": []}, {"code": "<pre>\n<code>\n [2, 4, 8, 9, 3, 6]\n</code>\n</pre>\n", "senID": 26}, {"text": ["So on and so forth"], "childNum": 0, "tag": "p", "senID": 27, "childList": []}, {"code": "<pre>\n<code>\n [2, 4, 8, 9, 3, 6]\n [2, 4, 8, 9, 3, 6]\n [2, 3, 4, 8, 9, 6]\n [2, 3, 4, 6, 8, 9]\n</code>\n</pre>\n", "senID": 28}, {"text": ["But how do we do we do that?", "With a for loop"], "childNum": 0, "tag": "p", "senID": 29, "childList": []}, {"code": "<pre>\n<code>\n for j in range(len(mylist)):\n    i = j\n    key = mylist[i]\n    while i &gt; 0 and key &lt; mylist[i-1]:\n        mylist[i] = mylist[i-1]\n        mylist[i-1] = key\n        i -= 1\n</code>\n</pre>\n", "senID": 30}, {"text": ["But we can skip the first time through, because a list of one element is obviously already sorted."], "childNum": 0, "tag": "p", "senID": 31, "childList": []}, {"code": "<pre>\n<code>\n for j in range(1, len(mylist)):\n    i = j\n    key = mylist[i]\n    while i &gt; 0 and key &lt; mylist[i-1]:\n        mylist[i] = mylist[i-1]\n        mylist[i-1] = key\n        i -= 1\n</code>\n</pre>\n", "senID": 32}, {"text": ["A few minor changes which make no difference brings us back to your original code"], "childNum": 0, "tag": "p", "senID": 33, "childList": []}, {"code": "<pre>\n<code>\n for j in range(1, len(mylist)):\n    key = mylist[j]\n    i = j\n    while i &gt; 0 and key &lt; mylist[i-1]:\n        mylist[i] = mylist[i-1]\n        i -= 1 \n        mylist[i] = key\n</code>\n</pre>\n", "senID": 34}], [{"text": ["The insertion sort algorithm works by trying to build up a sorted list of increasing length at the start of the array.", "The idea is that if you start off by building a one-element sorted list at the beginning, then a two-element list, then a three-element list, etc., that once you've built up an n-element sorted list, you have sorted the entire array and are done."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, given the array"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 3  1  4\n</code>\n</pre>\n", "senID": 2}, {"text": ["We can split this into a zero-element sorted list and a three-element unsorted list:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n | 3  1  4\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now, we add 3 to our sorted list.", "Since that list is now only one element long, it's automatically sorted:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n 3 | 1  4\n</code>\n</pre>\n", "senID": 6}, {"text": ["Now, we want to add 1 to our sorted list.", "If we just add 1 to the end of the list like this:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n 3 1 | 4\n</code>\n</pre>\n", "senID": 8}, {"text": ["then the sorted list is no longer sorted.", "To fix this, the inner loop of the insertion sort code works by continuously swapping the 1 with the element before it until it's in the proper position.", "In our case, we swap the 1 and the 3:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n 1 3 | 4\n</code>\n</pre>\n", "senID": 10}, {"text": ["and since the 1 is now at the beginning of the array, we don't need to move it any more.", "This is why the inner loop runs while i &gt; 0; once the index of the new element (i) is at the start of the array, there's nothing before it that could be any bigger."], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "i &gt; 0", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Finally, we update the array by adding 4 to the sorted list.", "Since it's in sorted position, we're done:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n 1 3 4\n</code>\n</pre>\n", "senID": 13}, {"text": ["And our array is now in sorted order."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Now, to your original question: why does the outer loop start at 1?", "This is a cute optimization trick.", "The idea is that any one-element array must automatically be sorted.", "This means that the algorithm can start off by saying that the first element of the array is a one-element sorted list.", "For example, given the array"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n 2  7  1  8\n</code>\n</pre>\n", "senID": 16}, {"text": ["The insertion sort algorithm could try splitting this array like this, putting an empty sorted list at the front:"], "childNum": 1, "tag": "p", "senID": 17, "childList": [{"text": "could", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n | 2  7  1  8\n</code>\n</pre>\n", "senID": 18}, {"text": ["But a marginally faster option is to split the list like this:"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"code": "<pre>\n<code>\n 2 | 7  1  8\n</code>\n</pre>\n", "senID": 20}, {"text": ["which is guaranteed to be safe because any one-element list is automatically sorted."], "childNum": 0, "tag": "p", "senID": 21, "childList": []}, {"text": ["This is really an optimization of the algorithm on the part of the authors.", "The algorithm would work perfectly fine if the outer loop started at zero, but they've just decided to start it at one to avoid an unnecessary loop iteration."], "childNum": 0, "tag": "p", "senID": 22, "childList": []}, {"text": ["Hope this helps!"], "childNum": 0, "tag": "p", "senID": 23, "childList": []}], [{"text": ["Have a look at the while loop.", "It starts with i having the value of 1, but then i is decreased.", "So in the last line, the minimum value of i could be 0, which is the first element in the list.", "If you would start with 0, i would become -1 which is valid in python, but means the last element.", "Therefore the range has to start with 1."], "childNum": 10, "tag": "p", "senID": 0, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "childList": []}, {"text": "-1", "childNum": 0, "tag": "code", "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I would like to mention, that you are asking for insertion sort.", "I don't thin that your code implements insertion sort.", "Looks rather like bubble sort or something like that."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The reason is that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n i = j\n</code>\n</pre>\n", "senID": 1}, {"text": ["and that mylist is accessed like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n mylist[i - 1]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Therefor the first value is 0.", "If the range would have started at 0, it would cause an mylist to be accessed at position -1."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "-1", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Later on i = j is set, and and myList[i-1] is accessed.", "So, j must be j &gt;= 1."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "i = j", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "myList[i-1]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "j", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "j &gt;= 1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Added: setting j = 0 is logicaly wrong because in the loop myList[j-1] is accessed - this is just by doing statical analysis of the code (and knowing i = j).", "Even if this cannot happen during runtime because of while i &gt; 0, it is at least meaningless.", "If the expression myList[j-1] appears in the code, then it must surely be j &gt;= 1.  "], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "Added", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "j = 0", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "myList[j-1]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "while i &gt; 0", "childNum": 0, "tag": "code", "childList": []}, {"text": "myList[j-1]", "childNum": 0, "tag": "code", "childList": []}, {"text": "j &gt;= 1", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The j-the iteration inserts the j-th element into the sorted elements before j.", "So it makes no sense to start with j=0.", "In the case j=1 the sublist below is myList[0:1] which is allways sorted, and the loop inserts myList[1] into the sublist myList[0:2]"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "myList[0:1]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "myList[1]", "childNum": 0, "tag": "code", "childList": []}, {"text": "myList[0:2]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Check out animated InsertionSort HERE"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "HERE", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://edu.i-lo.tarnow.pl/inf/alg/003_sort/flash/010_01.swf"}]}]]