[[{"text": ["As Jeffrey Said, you are not checking the value of check().", "In addition, your check() function is not returning anything.", "Note the difference:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "check()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "check()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def check():\n        datafile = file('example.txt')\n        found = False #this isn't really necessary \n        for line in datafile:\n            if blabla in line:\n                #found = True #not necessary \n                return True\n        return False #because you finished the search without finding anything\n\n\nif check():\n    print \"true\"\nelse:\n    print \"false\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The reason why you always got True has already been given, so I'll just offer another suggestion:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If your file is not too large, you can read it into a string, and just use that (easier and often faster than reading and checking line per line):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if 'blabla' in open('example.txt').read():\n    print \"true\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["Another trick: you can alleviate the possible memory problems by using mmap.mmap() to create a \"string-like\" object that uses the underlying file (instead of reading the whole file in memory):"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "mmap.mmap()", "tag": "a", "pos": 0, "childList": [{"text": "mmap.mmap()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/mmap.html"}, {"text": "mmap.mmap()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import mmap\nf = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif 'blabla' in s:\n    print 'true'\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n if True:\n    print \"true\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["This always happens because True is always True."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You want something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if check():\n    print \"true\"\nelse:\n    print \"false\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["Good luck!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Your check function should return the found boolean and use that to determine what to print."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "check", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "found", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def check():\n        datafile = file('example.txt')\n        found = False\n        for line in datafile:\n            if blabla in line:\n                found = True\n                break\n\n        return found\n\nfound = check()\nif found:\n    print \"true\"\nelse:\n    print \"false\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["the second block could also be condensed to:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if check():\n    print \"true\"\nelse:\n    print \"false\"\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Two problems:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": [], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def check(fname, txt):\n    with open(fname) as dataf:\n        return any(txt in line for line in dataf)\n\nif check('example.txt', 'blabla'):\n    print \"true\"\nelse:\n    print \"false\"\n</code>\n</pre>\n", "senID": 2}], [{"text": ["if check() then do something\nelse do something else"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["found = False"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def check():\n    datafile = file('example.txt')\n    for line in datafile:\n        if blabla in line:\n            found = True\n            break\n    return found\n\nif check():\n    print \"true\"\nelse:\n    print \"false\"\n</code>\n</pre>\n", "senID": 1}]]