[[{"text": ["is always returns True if it compares the same object instance"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Whereas == is ultimately determined by the __eq__() method"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "==", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__eq__()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["i.e."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n >>> class foo(object):\n       def __eq__(self, other):\n           return True\n\n>>> f = foo()\n>>> f == None\nTrue\n>>> f is None\nFalse\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You may want to read this object identity and equivalence."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "object identity and equivalence", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2001-November/113994.html"}]}, {"text": ["The statement 'is' is use for object identity, it checks if objects refer to the same instance (same address in memory)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["And the '==' statement refers to equality (same value)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["(ob1 is ob2) equal to (id(ob1) == id(ob2))"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "(ob1 is ob2)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(id(ob1) == id(ob2))", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["A word of caution: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["if foo:\n  # do something"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Is not exactly the same as:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["if x is not None:\n  # do something"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The former is a boolean value test and can evaluate to false in different contexts.", "There are a number of things that represent false in a boolean value tests for example empty containers, boolean values.", "None also evaluates to false in this situation but other things do too."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["For None there shouldn't be a difference between equality (==) and identity (is).", "The NoneType probably returns identity for equality.", "Since None is the only instance you can make of NoneType (I think this is true), the two operations are the same.", "In the case of other types this is not always the case.", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nif list1==list2: print \"Equal\"\nif list1 is list2: print \"Same\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["This would print \"Equal\" since lists have a comparison operation that is not the default returning of identity."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The reason foo is None is the preferred way is that you might be handling an object that defines its own __eq__, and that defines the object to be equal to None.", "So, always use foo is None if you need to see if it is infact None."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "foo is None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__eq__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "foo is None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["@Jason:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Jason", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none#26698"}]}, {"text": ["I don't like using \"if foo:\" unless foo truly represents a boolean value (i.e.", "0 or 1).", "If foo is a string or an object or something else, \"if foo:\" may work, but it looks like a lazy shortcut to me.", "If you're checking to see if x is None, say \"if x is None:\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["@Graeme Perrow , @Tendayi Mawushe:\nAbout translating the English statement \"if x is None\" to the Python code \"if x is None:\"...", "I did not understand why would you want to choose so..., apart to have a look-and-feel of programming with English statements...", "I would use instead \"if x == None:\" Python code, to check whether \"x is None\".", "Borrego's and Stephen's answers explain and elaborate on the purpose of \"is\".", "The fact that there's apparent no difference in these cases is not a good reason to rely on this quirk, for reasons such as implementations of Python that would not use caching of values would have broke your code, because this quirk depends on this detail.", "So if you are intending \"x is None\" write \"x == None\", as you would write \"y is 10\" as \"y == 10\".", "If still unclear please read: http://mail.python.org/pipermail/python-list/2001-November/113994.html\nAlso there could be good reasons to write \"x is None\", but I cannot imagine any scenario that would make this useful.", "The point that \"if\" use implicit boolean conversions, with the effects mentioned, is correct, and is proper to be aware about it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://mail.python.org/pipermail/python-list/2001-November/113994.html", "tag": "a", "pos": 6, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2001-November/113994.html"}]}], [{"text": ["John Machin's conclusion that None is a singleton is a conclusion bolstered by this code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = None\n&gt;&gt;&gt; y = None\n&gt;&gt;&gt; x == y\nTrue\n&gt;&gt;&gt; x is y\nTrue\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Since None is a singleton, x == None and x is None would have the same result.", "However, in my aesthetical opininon, x == None is best."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "x == None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x is None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]]