[[{"code": "<pre>\n<code>\n l = [ 'NICE dog' , 'blue FLOWER' , 'GOOD cat' , 'YELLOW caw']\n\noutput = [' '.join(w for w in a.split() if w.isupper())  for a in l]\n# or:    \noutput = [' '.join(filter(str.isupper, a.split())) for a in l]\n</code>\n</pre>\n", "senID": 0}, {"text": ["returns:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ['NICE', 'FLOWER', 'GOOD', 'YELLOW']\n</code>\n</pre>\n", "senID": 2}, {"text": ["(Don't use list as variable name."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The following will do it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def remove_lower(s):\n    return ' '.join(w for w in s.split(' ') if not w.islower())\n\nl = [ 'NICE dog' , 'blue FLOWER' , 'GOOD cat' , 'YELLOW caw']\n\nl = map(remove_lower, l)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's a way to do it with the re (regular expression) module:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n list = map(lambda l: re.sub(r'\\b\\w*[a-z]+\\w*\\b','',l).strip(), list)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n list = [ 'NICE dog' , 'blue FLOWER' , 'GOOD cat' , 'YELLOW caw']\n\nprint [word for pair in list for word in pair.split() if not word.islower()]\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n lst = [ 'NICE dog' , 'blue FLOWER' , 'GOOD cat' , 'YELLOW caw']\n\nfor i in range(len(lst)):\n    tmp = \"\"\n    for j in range(len(lst[i])):\n        if ord(lst[i][j]) &lt;= ord('Z'):\n            tmp = tmp + lst[i][j]\n    lst[i] = tmp.strip()\nprint(lst) #['NICE', 'FLOWER', 'GOOD', 'YELLOW']\n</code>\n</pre>\n", "senID": 0}], [{"text": ["string.translate() will quickly delete specified characters:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "string.translate()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; mylist=['NICE dog', 'blue FLOWER', 'GOOD cat', 'YELLOW caw']\n&gt;&gt;&gt; print [s.translate(None, string.ascii_lowercase) for s in mylist]\n['NICE', 'FLOWER', 'GOOD', 'YELLOW']\n</code>\n</pre>\n", "senID": 1}]]