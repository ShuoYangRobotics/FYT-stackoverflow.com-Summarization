[[{"code": "<pre>\n<code>\n base = ord('A') - 1\nmystring = 'ABC'\nprint sum(ord(char) - base for char in mystring)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can use ord to get the ascii code, then subtract 64."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ord", "tag": "a", "pos": 0, "childList": [{"text": "ord", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#ord"}, {"text": "ord", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def codevalue(char):\n    return ord(char) - ord('A')\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import string\n\nletter_to_numeral = dict(zip(string.uppercase, range(1, len(string.uppercase) + 1) ))\n\nprint letter_to_numeral\n&gt;&gt;&gt; {'A': 1, 'C': 3, 'B': 2, 'E': 5, 'D': 4, 'G': 7, 'F': 6, 'I': 9, 'H': 8, 'K': 11, 'J': 10, 'M': 13, 'L': 12, 'O': 15, 'N': 14, 'Q': 17, 'P': 16, 'S': 19, 'R': 18, 'U': 21, 'T': 20, 'W': 23, 'V': 22, 'Y': 25, 'X': 24, 'Z': 26}\n\ndef score_string(s):\n    return sum([letter_to_numeral[character] for character in s])\n\n\nscore_string('ABC')\n&gt;&gt;&gt; 6\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n def getvalue(mystring):\n    letterdict = dict(zip('ABCDEFGHIJKLMNOPQRSTUVWXYZ',range(1,27)))\n    return sum(letterdict[c] for c in mystring)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Enumerate can do the numbering for you:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\nnumerology_table = dict((ch,num+1) for (num,ch) in enumerate(string.ascii_letters[:26].upper()))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you are using Python3: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result = 0\nmystring = 'ABC'\nfor char in mystring.encode('ascii'):\n    result += char - 64\n\n&gt;&gt;&gt; result\n6\n</code>\n</pre>\n", "senID": 1}], [{"text": ["After you define the variables you can just return the answer or print the answer\nA = 1\nB = 2\nC = 3\ntotal = A + B + C\nprint (total)\nreturn total"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Golfy answer certain to annoy your professor:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'ABC'\n&gt;&gt;&gt; sum(map(ord,s),-64*len(s))\n6\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The most sensible answer is of course using ord as shown earlier.", "But for those who chose to construct a dictionary, I would rather just use the index in the string:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ord", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; mystring = 'ABC'\n&gt;&gt;&gt; sum(string.uppercase.index(c) + 1 for c in mystring)\n6\n</code>\n</pre>\n", "senID": 1}]]