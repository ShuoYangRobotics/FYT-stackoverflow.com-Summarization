[[{"text": ["You should post your example document, because the code works fine:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import BeautifulSoup\n&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;div id=\"articlebody\"&gt; ... &lt;/div&gt;&lt;/body&gt;&lt;/html')\n&gt;&gt;&gt; soup.find(\"div\", {\"id\": \"articlebody\"})\n&lt;div id=\"articlebody\"&gt; ... &lt;/div&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Finding &lt;div&gt;s inside &lt;div&gt;s works as well:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "&lt;div&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "&lt;div&gt;", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;div&gt;&lt;div id=\"articlebody\"&gt; ... &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html')\n&gt;&gt;&gt; soup.find(\"div\", {\"id\": \"articlebody\"})\n&lt;div id=\"articlebody\"&gt; ... &lt;/div&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["In the beautifulsoup source this line allows divs to be nested within divs; so your concern in lukas' comment wouldn't be valid."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n NESTABLE_BLOCK_TAGS = ['blockquote', 'div', 'fieldset', 'ins', 'del']\n</code>\n</pre>\n", "senID": 1}, {"text": ["What I think you need to do is to specify the attrs you want such as"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n source.find('div', attrs={'id':'articlebody'})\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I think there is a problem when the 'div' tags are too much nested.", "I am trying to parse some contacts from a facebook html file, and the Beautifulsoup is not able to find tags \"div\" with class \"fcontent\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This happens with other classes as well.", "When I search for divs in general, it turns only those that are not so much nested."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The html source code can be any page from facebook of the friends list of a friend of you (not the one of your friends).", "If someone can test it and give some advice I would really appreciate it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This is my code, where I just try to print the number of tags \"div\" with class \"fcontent\":"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from BeautifulSoup import BeautifulSoup \nf = open('/Users/myUserName/Desktop/contacts.html')\nsoup = BeautifulSoup(f) \nlist = soup.findAll('div', attrs={'class':'fcontent'})\nprint len(list)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["have you tried soup.findAll(\"div\", {\"id\": \"articlebody\"})?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "soup.findAll(\"div\", {\"id\": \"articlebody\"})", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["sounds crazy, but if you're scraping stuff from the wild, you can't rule out multiple divs..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I used:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n soup.findAll('tag', attrs={'attrname':\"attrvalue\"})\n</code>\n</pre>\n", "senID": 1}, {"text": ["As my syntax for find/findall; that said, unless there are other optional parameters between the tag and attribute list, this shouldn't be different."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here is a code fragment "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n soup = BeautifulSoup(:\"index.html\")\ntitleList = soup.findAll('title')\ndivList = soup.findAll('div', attrs={ \"class\" : \"article story\"})\n</code>\n</pre>\n", "senID": 1}, {"text": ["As you can see I find all  tags and then I find all  tags with class=\"article\" inside"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]