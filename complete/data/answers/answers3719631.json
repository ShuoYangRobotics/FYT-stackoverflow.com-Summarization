[[{"text": ["It's good to know that"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"src": "http://i.stack.imgur.com/yt8vU.gif", "tag": "img", "senID": 1}, {"text": ["but also know that\nmath.log takes an optional second argument which allows you to specify the base:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "math.log", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n In [22]: import math\n\nIn [23]: math.log?\nType:       builtin_function_or_method\nBase Class: &lt;type 'builtin_function_or_method'&gt;\nString Form:    &lt;built-in function log&gt;\nNamespace:  Interactive\nDocstring:\n    log(x[, base]) -&gt; the logarithm of x to the given base.\n    If the base not specified, returns the natural logarithm (base e) of x.\n\n\nIn [25]: math.log(8,2)\nOut[25]: 3.0\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; def log2( x ):\n...     return math.log( x ) / math.log( 2 )\n... \n&gt;&gt;&gt; log2( 2 )\n1.0\n&gt;&gt;&gt; log2( 4 )\n2.0\n&gt;&gt;&gt; log2( 8 )\n3.0\n&gt;&gt;&gt; log2( 2.4 )\n1.2630344058337937\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["http://en.wikipedia.org/wiki/Binary_logarithm"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://en.wikipedia.org/wiki/Binary_logarithm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Binary_logarithm"}]}, {"code": "<pre>\n<code>\n def lg(x, tol=1e-13):\n  res = 0.0\n\n  # Integer part\n  while x&lt;1:\n    res -= 1\n    x *= 2\n  while x&gt;=2:\n    res += 1\n    x /= 2\n\n  # Fractional part\n  fp = 1.0\n  while fp&gt;=tol:\n    fp /= 2\n    x *= x\n    if x &gt;= 2:\n        x /= 2\n        res += fp\n\n  return res\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Using numpy:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [1]: import numpy as np\n\nIn [2]: np.log2?\nType:           function\nBase Class:     &lt;type 'function'&gt;\nString Form:    &lt;function log2 at 0x03049030&gt;\nNamespace:      Interactive\nFile:           c:\\python26\\lib\\site-packages\\numpy\\lib\\ufunclike.py\nDefinition:     np.log2(x, y=None)\nDocstring:\n    Return the base 2 logarithm of the input array, element-wise.\n\nParameters\n----------\nx : array_like\n  Input array.\ny : array_like\n  Optional output array with the same shape as `x`.\n\nReturns\n-------\ny : ndarray\n  The logarithm to the base 2 of `x` element-wise.\n  NaNs are returned where `x` is negative.\n\nSee Also\n--------\nlog, log1p, log10\n\nExamples\n--------\n&gt;&gt;&gt; np.log2([-1, 2, 4])\narray([ NaN,   1.,   2.])\n\nIn [3]: np.log2(8)\nOut[3]: 3.0\n</code>\n</pre>\n", "senID": 1}], [{"text": ["log_base_2(x) = log(x) / log(2)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["logbase2(x) = log(x)/log(2)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Don't forget that log[base A] x = log[base B] x / log[base B] A."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "log[base A] x = log[base B] x / log[base B] A", "childNum": 0, "tag": "i", "pos": 0, "childList": []}]}, {"text": ["So if you only have log (for natural log) and log10 (for base-10 log), you can use"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "log", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "log10", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n myLog2Answer = log10(myInput) / log10(2)\n</code>\n</pre>\n", "senID": 2}]]