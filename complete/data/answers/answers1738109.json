[[{"text": ["A \"for loop\" in most, if not all, programming languages is a mechanism to run a piece of code more than once."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for i in range(5):\n    print i\n</code>\n</pre>\n", "senID": 2}, {"text": ["can be thought of working like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n i = 0\nprint i\ni = 1\nprint i\ni = 2\nprint i\ni = 3\nprint i\ni = 4\nprint i\n</code>\n</pre>\n", "senID": 4}, {"text": ["So you see, what happens is not that i gets the value 0, 1, 2, 3, 4 at the same time, but rather sequentially."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "at the same time", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["I assume that when you say \"call a, it gives only 5\", you mean like this:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n for i in range(5):\n    a=i+1\nprint a\n</code>\n</pre>\n", "senID": 7}, {"text": ["this will print the last value that a was given.", "Every time the loop iterates, the statement a=i+1 will overwrite the last value a had with the new value."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "last", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "a=i+1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Code basically runs sequentially, from top to bottom, and a for loop is a way to make the code go back and something again, with a different value for one of the variables."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["I hope this answered your question."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["range(x) returns a list of numbers from 0 to x - 1."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "range(x)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; range(1)\n[0]\n&gt;&gt;&gt; range(2)\n[0, 1]\n&gt;&gt;&gt; range(3)\n[0, 1, 2]\n&gt;&gt;&gt; range(4)\n[0, 1, 2, 3]\n</code>\n</pre>\n", "senID": 1}, {"text": ["for i in range(x): executes the body (which is print i in your first example) once for each element in the list returned by range().", "i is used inside the body to refer to the \u201ccurrent\u201d item of the list.", "In that case, i refers to an integer, but it could be of any type, depending on the objet on which you loop."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "for i in range(x):", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print i", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "range()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["The range function wil give you a list of numbers, while the for loop will iterate through the list and execute the given code for each of its items."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "range", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for i in range(5):\n      print i\n</code>\n</pre>\n", "senID": 1}, {"text": ["This simply executes print i five times, for i ranging from 0 to 4."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "print i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in range(5):\n      a=i+1\n</code>\n</pre>\n", "senID": 3}, {"text": ["This will execute a=i+1 five times.", "Since you are overwriting the value of a on each iteration, at the end you will only get the value for the last iteration, that is 4+1."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "a=i+1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Useful links:\nhttp://www.network-theory.co.uk/docs/pytut/rangeFunction.html\nhttp://www.ibiblio.org/swaroopch/byteofpython/read/for-loop.html"], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://www.network-theory.co.uk/docs/pytut/rangeFunction.html", "text": "http://www.network-theory.co.uk/docs/pytut/rangeFunction.html", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"href": "http://www.ibiblio.org/swaroopch/byteofpython/read/for-loop.html", "text": "http://www.ibiblio.org/swaroopch/byteofpython/read/for-loop.html", "childNum": 0, "tag": "a", "childList": []}]}], [{"code": "<pre>\n<code>\n for i in range(5):\n</code>\n</pre>\n", "senID": 0}, {"text": ["is the same as"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for i in [0,1,2,3,4]:\n</code>\n</pre>\n", "senID": 2}], [{"text": ["It is looping, probably the problem is in the part of the print..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you can't find the logic where the system prints, just add the folling where you want the content out:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for i in range(len(vs)):\n    print vs[i]\n    print fs[i]\n    print rs[i]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["When I'm teaching someone programming (just about any language) I introduce for loops with terminology similar to this code example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for eachItem in someList:\n    doSomething(eachItem)\n</code>\n</pre>\n", "senID": 1}, {"text": ["... which, conveniently enough, is syntactically valid Python code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The Python range() function simple returns or generates a list of integers from some lower bound (zero, by default) up to (but not including) some upper bound, possibly in increments (steps) of some other number (one, by default)."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "range()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So range(5) returns (or possibly generates) a sequence: 0, 1, 2, 3, 4 (up to but not including the upper bound)."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "range(5)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "generates", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["A call to range(2,10) would return: 2, 3, 4, 5, 6, 7, 8, 9"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "range(2,10)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["A call to `range(2,12,3) would return: 2, 5, 8, 11"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Notice that I said, a couple times, that Python's range() function returns or generates a sequence.", "This is a relatively advanced distinction which usually won't be an issue for a novice.", "In older versions of Python range() built a list (allocated memory for it and populated with with values) and returned a reference to that list.", "This could be inefficient for large ranges which might consume quite a bit of memory and for some situations where you might want to iterate over some potentially large range of numbers but were likely to \"break\" out of the loop early (after finding some particular item in which you were interested, for example)."], "childNum": 5, "tag": "p", "senID": 7, "childList": [{"text": "range()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "or generates", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "range()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "potentially", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}, {"text": "break", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Python supports more efficient ways of implementing the same semantics (of doing the same thing) through a programming construct called a generator.", "Instead of allocating and populating the entire list and return it as a static data structure, Python can instantiate an object with the requisite information (upper and lower bounds and step/increment value) ... and return a reference to that.", "The object then keeps track of which number it returned most recently and computes the new values until it hits the upper bound (and which point it signals the end of the sequence to the caller using an exception called \"StopIteration\").", "This technique (computing values dynamically rather than all at once, up-front) is referred to as \"lazy evaluation."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "generator", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Other constructs in the language (such as those underlying the for loop) can then work with that object as though it were a list."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For most cases don't have to know whether your version of Python is using the old implementation of range() or the newer one based on generators.", "You can just use it and be happy.", "If you're working with ranges of millions of items, or creating thousands of different ranges of thousands each, then you might notice a performance penalty for using range() on an old version of Python.", "In such cases you could re-think your design and use while loops, or create objects which implement the \"lazy evaluation\" semantics of a generator, or use the xrange() version of range() if your version of Python includes it, or the range() function from a version of Python that uses the generators implicitly."], "childNum": 6, "tag": "p", "senID": 10, "childList": [{"text": "range()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "range()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "xrange()", "childNum": 0, "tag": "code", "childList": []}, {"text": "range()", "childNum": 0, "tag": "code", "childList": []}, {"text": "range()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Concepts such as generators, and more general forms of lazy evaluation, permeate Python programming as you go beyond the basics.", "They are usually things you don't have to know for simple programming tasks but which become significant as you try to work with larger data sets or within tighter constraints (time/performance or memory bounds, for example)."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]]