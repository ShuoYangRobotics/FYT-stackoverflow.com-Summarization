[[{"text": ["Neither mxDateTime nor Datejs nor that webservice support \"last thursday of the month\".", "The OP wants to know all of the last thursdays of the month for, say, a full year."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["mxDateTime supports the operations, but the question must be posed in Python code, not as a string."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The best I could figure is parsedatetime, but that doesn't support \"last thursday of the month\".", "It does support:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "parsedatetime", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/parsedatetime/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; c.parseDateText(\"last thursday of april 2001\")\n(2001, 4, 20, 13, 55, 58, 3, 64, 0)\n&gt;&gt;&gt; c.parseDateText(\"last thursday of may 2001\")\n(2001, 5, 20, 13, 56, 3, 3, 64, 0)\n&gt;&gt;&gt; c.parseDateText(\"last thursday of may 2010\")\n(2010, 5, 20, 13, 56, 7, 3, 64, 0)\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["(Note that neither DateJS nor that web service support this syntax."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["EDIT: Umm, okay, but while the year and the month are right, the day isn't.", "The last thursday of april 2001 was the 27th.", "I think you're going to have to roll your own solution here."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["It does not support:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; c.parseDateText(\"last thursday of 2010\")\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"parsedatetime/parsedatetime.py\", line 411, in parseDateText\n    mth = self.ptc.MonthOffsets[mth]\nKeyError\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 7}, {"text": ["So one possibility is text substitution: normalize the string to lowercase, single spaces, etc.", "then do a string substitution of \"the month\" for each of the months you're interested in.", "You'll likely have to tweak any solution you find.", "For example, in some old code of Skip Montanaro which he wrote for an online music calendering system:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "old code of Skip Montanaro", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://web.archive.org/web/20050309211440/manatee.mojam.com/~skip/python/dates.py"}]}, {"code": "<pre>\n<code>\n # someone keeps submitting dates with september spelled wrong...\n     'septmber':9,\n</code>\n</pre>\n", "senID": 9}, {"text": ["Or you write your own parser on top of mxDateTime, using all of the above links as references."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["I think you can get pretty far using just Python's standard calendar module, maybe by adding some \"human-friendly\" methods on top of those methods.", "The module gives you iterators for dates, while taking weeks into consideration, and so on."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "calendar", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/calendar.html#module-calendar"}]}, {"text": ["First I guess you must answer the question \"what are some human-friendly ways to talk about dates?", "\", which I guess is more than half the difficulty of this problem."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The algorithms aren't hard.", "They're provided in the following book, which is worth every penny."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://emr.cs.iit.edu/home/reingold/calendar-book/third-edition/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://emr.cs.iit.edu/home/reingold/calendar-book/third-edition/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://emr.cs.iit.edu/home/reingold/calendar-book/third-edition/"}]}, {"text": ["The general approach is to find first days of a required month.", "You can then subtract one day to find the last day of a required month.", "Then you compute an offset for day of week you want relative to the day of the week you found."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Assume you have a datetime.date, d.  You can work out the end of the month by computing the start of the next month minus one day."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "datetime.dat", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "d", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n monIx= d.year*12 + (d.month-1) + 1\nendOfMonth= datetime.date( monIx//12, monIx%12+1, 1 ) - datetime.timedelta( days=1 )\n</code>\n</pre>\n", "senID": 4}, {"text": ["At this point, you're looking for an offset to the required day of the week.", "In this case, the desired day of the week is Thursday, which is 3."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "3", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n dayOffset =  ((3 - endOfMonth.weekday()) -7 ) % -7 \nlastDay = endOfMonth + datetime.timedelta( days=dayOffset )\n</code>\n</pre>\n", "senID": 6}, {"text": ["The general approach of getting the day-of-week offset requires a little bit of thinking, but there are only a few combinations of cases to experiment with."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I'm not entirely sure, but you might look at the Python DateUtil module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "DateUtil", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://labix.org/python-dateutil"}]}], [{"text": ["Well, don't know if such library exists, but date from GNU coreutils has something like that:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "date", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ date -d \"last monday\"\nMon Mar  2 00:00:00 RST 2009\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use mxDateTime.", "http://www.egenix.com/products/python/mxBase/mxDateTime/"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "mxDateTime", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "http://www.egenix.com/products/python/mxBase/mxDateTime/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.egenix.com/products/python/mxBase/mxDateTime/"}]}], [{"text": ["If this is for a web app take a look at Datejs, it may be easier to use that in your form then just pass it's date object's value to Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Datejs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.datejs.com/"}]}, {"text": ["If you end up writing one yourself the source may be helpful too."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]