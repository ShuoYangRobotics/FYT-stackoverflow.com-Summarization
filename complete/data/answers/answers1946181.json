[[{"text": ["I use dogtail (https://fedorahosted.org/dogtail/) to do such things, using this I have created a automated testing fromework for my linux(ubuntu) app.", "That framework clicks buttons and types into text fields."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "https://fedorahosted.org/dogtail/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://fedorahosted.org/dogtail/"}]}, {"text": ["see the gedit example, https://fedorahosted.org/dogtail/browser/examples/gedit-test-utf8-procedural-api.py"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "https://fedorahosted.org/dogtail/browser/examples/gedit-test-utf8-procedural-api.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://fedorahosted.org/dogtail/browser/examples/gedit-test-utf8-procedural-api.py"}]}, {"text": ["So just use dogtail e.g"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n dogtail.rawinput.click(100, 100)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here is an interessting Thread from Python Forum for you:\nPython Forum"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Forum", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python-forum.org/pythonforum/viewtopic.php?f=2&t=8976"}]}, {"text": ["Edit:\nThere was also an interessting question on stackoverflow regarding mouse control...maybe it is a good starting point..", "Mouse Control with Python"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Mouse Control with Python", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1181464/controlling-mouse-with-python"}]}, {"text": ["One of the Answers is refering to an Linux example...which heads you to an nice blog entry."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["for the mouse, I've found pymouse which seems to work (I haven't fully tried it, a small hack needed for the click, cf the issues)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pymouse", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pymouse/"}]}, {"text": ["for the keyboard, I'm not sure Xlib can do the job.", "I'm still looking on how to write something but you can catch key event as explained here or in C here using Xlib (but I don't know C)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.larsen-b.com/Article/184.html"}, {"href": "http://danielbaggio.blogspot.com/2008/04/generating-keypresses-on-linux.html", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["here is an example working on gnome only (not good enough yet)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python-forum.org/pythonforum/viewtopic.php?p=43596#p43596"}]}, {"text": ["In pymouse, they have a nice way to make it work on the 3 different platform but needs to make 3 code..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["For console try ncurses or slang.", "In other situation try PyQt, PyGtk, TkInter."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["ALL of this solution ARE cross-platform and work almost anywhere. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Yes, it work for keyboard also."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This totally works... on a Mac at least.", "This is for a click AND drag, etc.. but can be retrofitted accordingly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\nimport sys\nimport time\nfrom Quartz.CoreGraphics import * # imports all of the top-level symbols in the module\n\ndef mouseEvent(type, posx, posy):\n    theEvent = CGEventCreateMouseEvent(None, type, (posx,posy), kCGMouseButtonLeft)\n    CGEventPost(kCGHIDEventTap, theEvent)\ndef mousemove(posx,posy):\n    mouseEvent(kCGEventMouseMoved, posx,posy);\ndef mouseclickdn(posx,posy):\n    mouseEvent(kCGEventLeftMouseDown, posx,posy);\ndef mouseclickup(posx,posy):\n    mouseEvent(kCGEventLeftMouseUp, posx,posy);\ndef mousedrag(posx,posy):\n    mouseEvent(kCGEventLeftMouseDragged, posx,posy);\n\nourEvent = CGEventCreate(None);\ncurrentpos=CGEventGetLocation(ourEvent); # Save current mouse position\nmouseclickdn(60, 100);\nmousedrag(60, 300);\nmouseclickup(60, 300);\ntime.sleep(1);\nmousemove(int(currentpos.x),int(currentpos.y)); # Restore mouse position\n</code>\n</pre>\n", "senID": 1}]]