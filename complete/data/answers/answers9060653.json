[[{"code": "<pre>\n<code>\n &gt;&gt;&gt;''.join( str(_) for _ in xrange(10) )\n</code>\n</pre>\n", "senID": 0}, {"text": ["This is called a generator expression, and is explained in PEP 289."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "generator expression", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://www.python.org/dev/peps/pep-0289/", "text": "PEP 289", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["The main difference between generator expressions and list comprehensions is that the former don't create the list in memory."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Note that there's a third way to write the expression:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ''.join(map(str, xrange(10)))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["The other respondents were correct in answering that you had discovered a generator expression (which has a notation similar to list comprehensions but without the surrounding square brackets)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "generator expression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0289/"}]}, {"text": ["In general, genexps (as they are affectionately known) are more memory efficient and faster than list comprehensions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["HOWEVER, it the case of ''.join(), a list comprehension is both faster and more memory efficient.", "The reason is that join needs to make two passes over the data, so it actually needs a real list.", "If you give it one, it can start its work immediately.", "If you give it a genexp instead, it cannot start work until it builds-up a new list in memory by running the genexp to exhaustion:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "''.join()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "join", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n ~ $ python -m timeit '\"\".join(str(n) for n in xrange(1000))'\n1000 loops, best of 3: 335 usec per loop\n~ $ python -m timeit '\"\".join([str(n) for n in xrange(1000)])'\n1000 loops, best of 3: 288 usec per loop\n</code>\n</pre>\n", "senID": 3}, {"text": ["The same result holds when comparing itertools.imap versus map:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "itertools.imap", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "map", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n ~ $ python -m timeit -s'from itertools import imap' '\"\".join(imap(str, xrange(1000)))'\n1000 loops, best of 3: 220 usec per loop\n~ $ python -m timeit '\"\".join(map(str, xrange(1000)))'\n1000 loops, best of 3: 212 usec per loop\n</code>\n</pre>\n", "senID": 5}], [{"text": ["If it's in parens, but not brackets, it's technically a generator expression.", "Generator expressions were first introduced in Python 2.4."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "technically", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["http://wiki.python.org/moin/Generators"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://wiki.python.org/moin/Generators", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/Generators"}]}, {"text": ["The part after the join, ( str(_) for _ in xrange(10) ) is, by itself, a generator expression.", "You could do something like:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "( str(_) for _ in xrange(10) )", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n mylist = (str(_) for _ in xrange(10))\n''.join(mylist)\n</code>\n</pre>\n", "senID": 3}, {"text": ["and it means exactly the same thing that you wrote in the second case above."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Generators have some very interesting properties, not the least of which is that they don't end up allocating an entire list when you don't need one.", "Instead, a function like join \"pumps\" the items out of the generator expression one at a time, doing its work on the tiny intermediate parts."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["In your particular examples, list and generator probably don't perform terribly differently, but in general, I prefer using generator expressions (and even generator functions) whenever I can, mostly because it's extremely rare for a generator to be slower than a full list materialization."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "slower", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Your second example uses a generator expression rather than a list comprehension.", "The difference is that with the list comprehension, a list is completely built and passed to .join().", "With the generator expression, items are generated one by one and consumed by .join().", "The latter uses less memory and is generally faster."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": ".join()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ".join()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["As it happens, the list constructor will happily consume any iterable, including a generator expression.", "So:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [str(n) for n in xrange(10)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["is just \"syntactic sugar\" for:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n list(str(n) for n in xrange(10))\n</code>\n</pre>\n", "senID": 4}, {"text": ["In other words, a list comprehension is just a generator expression that is turned into a list."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["As mentioned it's a generator expression."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "generator expression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/expressions.html#generator-expressions"}]}, {"text": ["From the documentation:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["That's a generator, rather than a list comprehension.", "Generators are also iterables, but rather than creating the entire list first then passing it to join, it passes each value in the xrange one by one, which can be much more efficient."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The argument to your second join call is a generator expression.", "It does produce an iterable."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]