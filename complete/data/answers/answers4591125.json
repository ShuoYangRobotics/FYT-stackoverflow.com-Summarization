[[{"text": ["You shouldn't ever need to compare booleans.", "If you are doing something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if(some_bool == True):\n  ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["...just change it to:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if(some_bool):\n  ...\n</code>\n</pre>\n", "senID": 3}, {"text": ["No is or == needed."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Added: okay, if it's simply about knowing more about the internals: there should only ever be two boolean literal objects (see also the C API), and bool(x) is True should be True if bool(x) == True for any Python program.", "This does not mean that x is True if x == True, however (eg.", "x = 1)."], "childNum": 10, "tag": "p", "senID": 5, "childList": [{"text": "Added:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "two boolean literal objects", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#bool"}, {"text": "C API", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/c-api/bool.html"}, {"text": "bool(x) is True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "bool(x) == True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "does not mean", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "x is True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "x == True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "x = 1", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["Watch out for what else you may be comparing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 1 == True\nTrue\n&gt;&gt;&gt; 1 is True\nFalse\n</code>\n</pre>\n", "senID": 1}, {"text": ["True and False will have stable object ids for their lifetime in your python instance."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; id(True)\n4296106928\n&gt;&gt;&gt; id(True)\n4296106928\n</code>\n</pre>\n", "senID": 3}, {"text": ["is compares the id of an object"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["EDIT: adding or"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "or", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Since OP is using or in question it may be worth pointing this out."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "or", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["or that evaluates True: returns the first 'True' object."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "or that evaluates True:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 1 or True\n1\n&gt;&gt;&gt; 'a' or True\n'a'\n&gt;&gt;&gt; True or 1\nTrue\n</code>\n</pre>\n", "senID": 8}, {"text": ["or that evaluates False: returns the last 'False' object"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "or that evaluates False:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; False or ''\n''\n&gt;&gt;&gt; '' or False\nFalse\n</code>\n</pre>\n", "senID": 10}, {"text": ["and that evaluates to True: returns the last 'True' object"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "and that evaluates to True:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; True and 1\n1\n&gt;&gt;&gt; 1 and True\nTrue\n</code>\n</pre>\n", "senID": 12}, {"text": ["and that evaluates to False: returns the first 'False' object"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "and that evaluates to False:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; '' and False\n''\n&gt;&gt;&gt; False and ''\nFalse\n</code>\n</pre>\n", "senID": 14}, {"text": ["This is an important python idiom and it allows concise and compact code for dealing with boolean logic over regular python objects."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; bool([])\nFalse\n&gt;&gt;&gt; bool([0])\nTrue\n&gt;&gt;&gt; bool({})\nFalse\n&gt;&gt;&gt; bool({False: False})\nTrue\n&gt;&gt;&gt; bool(0)\nFalse\n&gt;&gt;&gt; bool(-1)\nTrue\n&gt;&gt;&gt; bool('False')\nTrue\n&gt;&gt;&gt; bool('')\nFalse\n</code>\n</pre>\n", "senID": 16}, {"text": ["Basically 'empty' objects are False, 'non empty' are True."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["Combining this with @detly's and the other answers should provide some insight into how to use if and bools in python.  "], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The == operator tests for equality The is keyword tests for object identity.", "Whether we are talking about the same object.", "Note, that more variables may refer to the same object. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "The == operator tests for equality The is keyword tests for object identity. Whether we are talking about the same object. Note, that more variables may refer to the same object.", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://zetcode.com/tutorials/pythontutorial/keywords/"}]}], [{"text": ["Yes.", "There are guaranteed to be exactly two bools, True and False:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "guaranteed", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#bool"}, {"text": "bool", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["That means if you know both operands are bool, == and is are equivalent.", "However, as detly notes, there's usually no reason to use either in this case."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "if", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "bool", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["== and is are both comparison operators, which would return a boolean value - True or False.", "True has a numeric value of 1 and False has a numeric value of 0."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "==", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The operator == compare the values of two objects and objects compared are most often are the same types (int vs int, float vs float), If you compare objects of different types, then they are unequal.", "The operator is tests for object identity, 'x is y' is true if both x and y have the same id.", "That is, they are same objects."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "==", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["So, when you are comparing if you comparing the return values of same type, use == and if you are comparing if two objects are same (be it boolean or anything else), you can use is."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["42 is 42 is True and is same as 42 == 42."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "42 is 42", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "42 == 42", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["It seems that all answers deal with True and False as defined after an interpreter startup.", "Before booleans became part of Python they were often defined as part of a program.", "Even now (Python 2.6.6) they are only names that can be pointed to different objects:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; True = 1\n&gt;&gt;&gt; (2 &gt; 1)\nTrue\n&gt;&gt;&gt; (2 &gt; 1) == True\nTrue\n&gt;&gt;&gt; (2 &gt; 1) is True\nFalse\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you have to deal with older software, be aware of that."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]