[[{"text": ["in bash, assuming first column has fixed with (3):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sort input-file.txt | uniq -u -w 3\n</code>\n</pre>\n", "senID": 1}, {"text": ["'-u' option prints only the unique lines and '-w 3' compares no more than the first 3 characters."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["How about this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\nfrom collections import defaultdict\ndata = defaultdict(list)\nwith open('file', 'rb') as f:\n    for line in sorted(f.readlines()):\n        data[line[0]].append(line)\nfor key in sorted(data.iterkeys()):\n    if len(data[key]) == 1:\n        print data[key]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n awk '\n  {count[$1]++; line[$1]=$0}\n  END {for (val in count) if (count[val]==1) print line[val]}\n' filename\n</code>\n</pre>\n", "senID": 0}, {"text": ["That may alter the order of lines.", "If that's a problem, try this 2-pass approach:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n awk '\n  NR==FNR {count[$1]++; next}\n  count[$1] == 1 {print}\n' filename filename\n</code>\n</pre>\n", "senID": 2}], [{"text": ["in python, much easier to read and tweak:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = dict()\nfor line in open('input-file.txt', 'r'):\n  key = line.split(' ', 1)[0]\n  d.setdefault(key, list()).append(line.rstrip())\n\nfor k, v in sorted(d.items()):\n  if len(v) == 1:\n     print v[0]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import sys\nfrom collections import OrderedDict\nlines = OrderedDict()\nfor line in sys.stdin:\n    field0 = line.strip().split('\\t')[0]\n    lines[field0] = None if field0 in lines else line\nfor line in lines.values():\n    if line is not None:\n        sys.stdout.write(line)\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you don't care aout preserving order you could use a plain old dict ({}) instead of OrderedDict."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "{}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "OrderedDict", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["This implementation doesn't care if the duplicate fields are adjacent."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["sed one liner solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sed -r '$!N;/^(.).*\\n\\1/{x;s/.*/DUP/;x;D};{x;s/DUP//;x;tb;P;D};:b;${s/.*\\n//p};D' file\n</code>\n</pre>\n", "senID": 1}]]