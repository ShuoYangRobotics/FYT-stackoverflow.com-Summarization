[[{"text": ["You can do this with regular expressions.", "The regex .+(dog|cat).+ will match one or more characters, followed by dog or cat, and one of more characters afterwards.", "You can then use filter to find strings which don't match this regex:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".+(dog|cat).+", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import re\nregex.compile(r'.+(dog|cat).+')\nsentence = 'i have a dog and a cat', 'i have a cat and a dog', 'i have a cat', \n           'i have a dog'\nfiltered_sentence = filter(lambda s: not regex.match(s), sentence)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use a Regular Expression to match the sentences you don't want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["We can build up the pattern as follows:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "We want to match dog or cat - ", "tag": "none", "senID": 2}, {"text": "followed by a space, i.e. not at the end of the line", "tag": "none", "senID": 3}]}, {"text": ["So our code looks like so:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mysentence = ('i have a dog and a cat', 'i have a cat and a dog', 'i have a cat', 'i have a dog')\n&gt;&gt;&gt; import re                                                                   \n&gt;&gt;&gt; pattern = re.compile(\"(dog|cat) \")\n&gt;&gt;&gt; [x for x in mysentence if not pattern.search(x)]                            \n['i have a cat', 'i have a dog']\n</code>\n</pre>\n", "senID": 5}], [{"text": ["If the string should just end with a specific phrase then this will do the job:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n phases = (\"I have a cat\", \"I have a dog\")\nfor sentence in mysentence:\n    for phase in phases:\n        if sentence.lower().endswith(phase.lower()):\n            print(sentence)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Simplest thing that could possibly work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [10]: [phrase for phrase in mysentence if not ' and ' in phrase]\nOut[10]: ['i have a cat', 'i have a dog']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use regexp or string methods. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I see other answered with regex, so I try string methods: with string.find() you will get position of substring in string.", "Then check if it is in the middle of the sentence."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "string.find()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def filter_function(sentence, words):\n    for word in words:\n        p = sentence.find(word)\n        if p &gt; 0 and p &lt; len(sentence) - len(word):\n            return 0\n    return 1\n\nfor sentence in mysentence:\n    print('%s: %d' % (sentence, filter_function(sentence, ['dog', 'cat'])))\n</code>\n</pre>\n", "senID": 2}, {"text": ["You also must define what to do when you will have only 'cat' in sentence."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n for items in mysentence:\n    if (items.find(\"dog\")&gt;=0)^(items.find(\"cat\")&gt;=0):\n        print(items)\n</code>\n</pre>\n", "senID": 0}, {"text": ["You just need an xor operator and the find function.", "No need to import"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]