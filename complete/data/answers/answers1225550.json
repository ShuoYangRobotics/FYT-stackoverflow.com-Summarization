[[{"text": ["You can use Spreadsheet::ParseExcel to read a spreadsheet.", "Unfortunately that is all I can help you with because, frankly, the description of your problem makes no sense."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Spreadsheet::ParseExcel", "tag": "a", "pos": 0, "childList": [{"text": "Spreadsheet::ParseExcel", "tag": "code"}], "childNum": 1, "href": "http://search.cpan.org/dist/Spreadsheet-ParseExcel/lib/Spreadsheet/ParseExcel.pm"}, {"text": "Spreadsheet::ParseExcel", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Use Python and xlrd &amp; xlwt.", "See http://www.python-excel.org"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.python-excel.org", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python-excel.org"}]}, {"text": ["The following script should do what you want:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import xlrd, xlwt, sys\n\ndef raj_split(in_path, out_stem):\n    in_book = xlrd.open_workbook(in_path)\n    in_sheet = in_book.sheet_by_index(0)\n    first_row = in_sheet.row_values(0)\n    # find the rightmost 1 value in the first row\n    split_pos = max(\n        colx for colx, value in enumerate(first_row) if value == 1.0\n        ) + 1\n    out_book = xlwt.Workbook()\n    out_sheet = out_book.add_sheet(\"Sheet1\", cell_overwrite_ok=True)\n    # copy the common cells\n    for rowx in xrange(in_sheet.nrows):\n        row_vals = in_sheet.row_values(rowx, end_colx=split_pos)\n        for colx in xrange(split_pos):\n            out_sheet.write(rowx, colx, row_vals[colx])\n    out_num = 0\n    # for each output file ...\n    for out_col in range(split_pos, in_sheet.ncols):\n        out_num += 1\n        # ... overwrite the `split_pos` column\n        for rowx, value in enumerate(in_sheet.col_values(colx=out_col)):\n            out_sheet.write(rowx, split_pos, value)\n        # ... and save the file.\n        out_book.save(\"%s_%03d.xls\" % (out_stem, out_num))\n\nraj_split(*sys.argv[1:3])\n</code>\n</pre>\n", "senID": 2}], [{"text": ["In python, you can use xlrd to read an Excel spreadsheet into data you can work with.", "See the README for sample usage.", "You can then use xlwt to create new spreadsheets."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "xlrd", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/xlrd"}, {"text": "README", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.lexicon.net/sjmachin/README.html"}, {"text": "xlwt", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/xlwt"}]}], [{"text": ["in Excel, save your file as CSV."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["in Python, use the CSV reader module to read it (read the python docs, search for csv)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["now you say you have rows of maybe 20 columns and you want to put columns 1..10 in file A and columns 11..20 in file B, yes ?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["open 2 csv writers (let's call them A and B)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["you will read rows :"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["for row in csvreader:\n    A.writerow( row[:10 ] )\n    B.writerow( row[11: ] )"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["that's it."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["go here :\nhttp://stackoverflow.com/questions/1223967/how-can-i-merge-fields-in-a-csv-string-using-python"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "http://stackoverflow.com/questions/1223967/how-can-i-merge-fields-in-a-csv-string-using-python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1223967/how-can-i-merge-fields-in-a-csv-string-using-python"}]}], [{"text": ["As others have commented your question is almost totally incomprehensible.", "Based on the difficulty you have describing your issue, you might want to take a look at \nthis post."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this post", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1120016/hash-arrays-combining-files-how/1122992#1122992"}]}, {"text": ["Some here have suggested saving your file as a CSV.", "Saving your file as a CSV file will greatly simplify the job of parsing it, but it will make converting to and from excel format a manual process.", "This may be acceptable if you have a small number of files to process.", "If you have hundreds, it won't work so well.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The Spreadsheet::ParseExcel and Spreadsheet::WriteExcel modules will help your read and write your spreadsheet file in native format."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Spreadsheet::ParseExcel", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/dist/Spreadsheet-ParseExcel/lib/Spreadsheet/ParseExcel.pm"}, {"href": "http://search.cpan.org/dist/Spreadsheet-WriteExcel/", "text": "Spreadsheet::WriteExcel", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["The Text::CSV_XS module provides a powerful, fast CSV parser for perl."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Text::CSV_XS", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/dist/Text-CSV%5FXS/"}]}], [{"text": ["I think the xlrd and xlwt modules are the way to go in Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "xlrd", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.lexicon.net/sjmachin/xlrd.htm"}]}, {"code": "<pre>\n<code>\n # Read the first 5 rows and columns of an excel file\nimport xlrd # Import the package\nbook = xlrd.open_workbook(\"sample.xls\") # Open an .xls file\nsheet = book.sheet_by_index(0) # Get the first sheet\nfor row in range(5): # Loop for five times (five rows)\n    # grab the current row\n    rowValues = sheet.row_values(row, start_col=0, end_colx=4)\n    # Do magic here, like printing\n    import xlrd # Import the package\n    print \"%-10s | %-10s | %-10s | %-10s | %-10s\" % tuple(rowValues)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now if you feel like writing back Excel files..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import xlwt # Import the package\nwbook = xlwt.Workbook() # Create a new workbook\nsheet = wbook.add_sheet(\"Sample Sheet\") # Create a sheet\ndata = \"Sample data\" # Something to write into the sheet\nfor rowx in range(5):\n    # Loop through the first five rows\n    for colx in range(5):\n        # Loop through the first five columns\n        # Write the data to rox, column\n        sheet.write(rowx, colx, data)\n# Save our workbook on the harddrive\nwbook.save(&amp;amp;quot;myFile.xls&amp;amp;quot;)\n</code>\n</pre>\n", "senID": 3}, {"text": ["I have used this method in the part extensively to read/write data from Excel files for Input/Output models to use in NetworkX.", "The above examples are from my blog entries talking about that adventure."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["As I am a new user, I can only post one link.", "Maybe you can Google xlwt?", ":)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Actually, this is exactly what xlutils' filter functionality was designed for."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See the 'xutils.filter' section in the tutorial on http://www.python-excel.org"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.python-excel.org", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python-excel.org"}]}, {"text": ["There's also more here:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["https://secure.simplistix.co.uk/svn/xlutils/trunk/xlutils/docs/filter.txt"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "https://secure.simplistix.co.uk/svn/xlutils/trunk/xlutils/docs/filter.txt", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://secure.simplistix.co.uk/svn/xlutils/trunk/xlutils/docs/filter.txt"}]}, {"text": ["cheers,"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Chris"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You could use Visual Basic for Applications to loop over the cells and then save to a text file."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "loop over the cells", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/aa221353%28office.11%29.aspx"}, {"href": "http://www.vbaexpress.com/kb/getarticle.php?kb%5Fid=805", "text": "save to a text file", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["OR"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Save the file as a comma separated value file and use perl or python to easily parse the lines.", "(split on the comma for columns, end of line character for rows)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]