[[{"text": ["You could make a dictionary from list 1 that contains the intervals then loops through it to see if any value in list 2 is inside the range.", "For example,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list1 = {\"A\": [100, 160], \"B\": [200, 500], \"C\": [800, 1500],\n         \"D\": [1600, 2000], \"E\": [2500,3000]}\n\nlist2 = [150, 600, 900, 1700, 2400]\n\nfor key, val in list1.iteritems():\n    for num in list2:\n        if num in range(val[0], val[1]):\n            val.append(num)\n\nfor key, val in sorted(list1.iteritems()):\n    print key, \":\", val\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is an example.", "It is expecting two filenames to be passed on the command line."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\n\nif len(sys.argv) != 3:\n    print 'parameters: list1 list2'\n    sys.exit(1)\n\nlist1 = []\nfor line in file(sys.argv[1]):\n    fields = line.split()\n    f1 = fields[0]\n    f2, f3 = fields[1].split('-')\n    list1.append((f1, int(f2), int(f3), [], ))\n\nfor line in file(sys.argv[2]):\n    value = int(line)\n    for name, lb, ub, values in list1:\n        if value &gt;= lb and value &lt;= ub:\n            values.append(str(value))\n\nfor name, lb, ub, values in list1:\n    if values: vals = ','.join(values)\n    else: vals = ''\n    print '%s %d-%d %s' % (name, lb, ub, vals, )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Do it simply on the command line.So far this is the only awk solution among all:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n paste list1 list2|awk '{split($2,a,\"-\");\n                           if($3&gt;a[1] &amp;&amp; $3&lt;a[2])\n                           {h=$3}\n                           else\n                           {h=\"\"};\n                           print $1,$2,h}'\n\nA 100-160 150\nB 200-500\nC 800-1500 900\nD 1600-2000 1700\nE 2500-3000\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could do something like this in Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n L1 = [(100, 160), (200, 500), (800, 1500), (1600, 2000), (2500, 3000)]\nL2 = [150, 600, 900, 1700, 2400]\nL3 = [((a, b), [i for i in L2 if a&lt;=i&lt;b]) for (a, b) in L1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's easy to parse the data into that structure if that's what you want (and print it back out), but I'll wait until you explain what format the data comes in and what format you need it in, because I have a feeling there will be a catch to it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Dunno for sure if Ruby is needed, but here's a quick pass at it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list1 = %w[ A 100-160 B 200-500 C 800-1500 D 1600-2000 E 2500-3000 ]\nlist2 = %w[ 150, 600, 900, 1700, 2400 ]\n\nlist3 = []\n\nlist1.each_slice(2) do |char, range|\n  min_range, max_range = range.split('-').map{ |i| i.to_i }\n  l2 = list2.shift\n  case l2.to_i\n  when min_range..max_range\n    list3 &lt;&lt; [ char, range, l2 ]\n  else\n    list3 &lt;&lt; [ char, range ]\n  end\nend\n\nrequire 'pp'\npp list3\n\n&gt;&gt; [[\"A\", \"100-160\", \"150,\"],\n&gt;&gt;  [\"B\", \"200-500\"],\n&gt;&gt;  [\"C\", \"800-1500\", \"900,\"],\n&gt;&gt;  [\"D\", \"1600-2000\", \"1700,\"],\n&gt;&gt;  [\"E\", \"2500-3000\"]]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's my take.", "I just made up the parsing and printing bit since you didn't specify."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list_1 = ['A\\t100-160', 'B\\t200-500', 'C\\t800-1500', 'D\\t1600-2000', 'E\\t2500-3000']\nlist_2 = [150, 600, 900, 1700, 2400]\n\nfor range in list_1:\n    # parse the input (this may be different, but you didn't specify)\n    lower_bound, upper_bound = range.split('\\t')[1].split('-')  # this is a bit fragile\n    lower_bound = int(lower_bound)\n    upper_bound = int(upper_bound)\n\n    # make sure lower_bound is less than upper_bound\n    if upper_bound &lt; lower_bound:\n        (lower_bound, upper_bound) = (upper_bound, lower_bound)\n\n    # loop over list 2 and see if any fall into the current range\n    items_in_range = [str(number) for number in list_2 if lower_bound &lt;= number &lt; upper_bound]\n\n    # output List 3\n    print range + '\\t' + ','.join(items_in_range)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use iterable tools to write this.", "Not all too readable but this works.", "Definitely was fun to write! "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import chain\n\nnameranges = ['A', '100-160', 'B', '200-500', 'C', '800-1500', 'D', '1600-2000', \n              'E', '2500-3000']\n\nvalues = [150, 600, 900, 1700, 2400]\nz = zip(nameranges[0::2], ( map(int, x.split(\"-\")) for x in nameranges[1::2]))\nf = list(chain(* (map(lambda x, y: (x[0][0], x[1][0], x[1][1], y) \n               if x[1][0]&lt;=y&lt;=x[1][1] else (x[0], x[1][0], x[1][1]), \n               z, values))))\n# print f\n#['A', 100, 160, 150, 'B', 200, 500, 'C', 800, 1500, 900, 'D', 1600, 2000, 1700, \n# 'E', 2500, 3000]\n</code>\n</pre>\n", "senID": 1}]]