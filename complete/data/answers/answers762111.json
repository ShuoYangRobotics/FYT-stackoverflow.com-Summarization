[[{"text": ["You can extend the path at runtime like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sys.path.extend(map(os.path.abspath, ['other1/', 'other2/', 'yourlib/']))\n</code>\n</pre>\n", "senID": 1}], [{"tag": "ul", "num": 2, "lis": [{"text": ["python will import from the current directory by default."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["sys.path is the variable that controls where python searches for imports."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sys.path", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]}], [{"text": ["You can edit your PYTHONPATH to add or remove locations that python will search whenever you attempt an import."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PYTHONPATH", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html#the-module-search-path"}]}], [{"text": ["For low-level control over the import process, the imp module lets you import modules from arbitrary open files under arbitrary names."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "imp", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/imp.html"}]}, {"text": ["For example, if this is foo.py:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "foo.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def x():\n    print 'hello, world'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then this code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import imp\n\nwith open('foo.py', 'r') as module_file:\n    imp.load_module('module_name', module_file, '', ('', 'r', imp.PY_SOURCE))\n\nimport module_name\n\nmodule_name.x()\n</code>\n</pre>\n", "senID": 4}, {"text": ["prints \"hello, world\"."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Use init.py"], "childNum": 1, "tag": "h2", "senID": 0, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The only problem with doing dynamic modification of sys.path is that you need to repeat it in every script and hard-code the pathnames.", "That gets messy and non DRY if you have even two or three files. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Instead, if your file structure looks like this: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ~/foo/__init__.py\n~/foo/foo.py\n~/foo/bar/__init__.py\n~/foo/bar/baz.py\n</code>\n</pre>\n", "senID": 3}, {"text": ["Here the init.py's are blank files created with touch, while foo.py and baz.py are actual python scripts.", "Then you can do something like this: "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\ntry:\n    from foo import foo\n    from foo.bar import baz\nexcept ImportError:\n    \"%s is not in %s. Add to your PYTHONPATH in ~/.bashrc\" % \\\n    (os.path.expanduser(\"~/foo\"),sys.path)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Structuring your stuff as a package from the beginning is a little more work but makes it much easier to scale the project later and to see where imports are coming from.", "Moreover, if you move stuff around, you can use a single symlink rather than doing a find/replace through your codebase.", "E.g.", "if you moved '~/foo' to '~/downloads/foo', just do this: "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "little", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n cd ~\nln -s ~/downloads/foo foo\n</code>\n</pre>\n", "senID": 7}, {"text": ["And all your imports will still work. "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["It searches in ./lib by default."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You can import module that are in the same path the module you are importing to.", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Directory contains:  mod1.py, mod2.py"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "mod1.py, mod2.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n mod2.py\n--------\nimport mod1\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or you can add any directory to your PYTHON_PATH variable:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import sys\nsys.path.extend('/user/some/other/directory')\nimport mod1\n</code>\n</pre>\n", "senID": 4}]]