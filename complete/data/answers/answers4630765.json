[[{"code": "<pre>\n<code>\n import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('server') # first positional argument\nparser.add_argument('port') # second positional argument\nargs = parser.parse_args()\n\nurl = '%s:%s' % (args.server, args.port)\nprint url\n</code>\n</pre>\n", "senID": 0}], [{"text": ["argparse is one way to solve it, but may be overkill if you're just learning (YMMV)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you import the sys module, the command line arguments passed to you are available in a list of strings at sys.argv"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "sys", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sys.argv", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import sys\nif len(sys.argv) &lt; 3:\n    print \"Not enough args!\"\n    sys.exit(0)\n# sys.argv[0] is the name of your script, the rest are parameters\nurl = \"%s:%s\" % (sys.argv[1], sys.argv[2])\nprint url\n</code>\n</pre>\n", "senID": 2}], [{"text": ["If you want a variable with the string http://www.domain.com:1234 from command line input then do the following:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.domain.com:1234", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.domain.com:1234"}]}, {"code": "<pre>\n<code>\n if len(sys.argv) &gt;= 3:\n    result = '%s:%s' % tuple(sys.argv[1:3])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Why not do,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n argstring = ':'.join(args[1:])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Thanks Amber,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["that was exactly what I was looking for"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\nfrom urllib import urlopen\nimport argparse\n\nusage='will be using it later'\n\nparser=argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=usage, add_help=False)\nparser.add_argument('link')\nparser.add_argument('port')\nargs = parser.parse_args()\n\nurl = '%s:%s' % (args.link, args.port)\nlink = urlopen(url)\ncontent=link.read()\n\nprint(content)\n</code>\n</pre>\n", "senID": 2}, {"text": ["just a bit confused with this line \"url = '%s:%s' % (args.link, args.port)\"\ndoes that line take the arguments in brackets and add it to the string variable 'url'?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Jack"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["That format is actually not recommended any more.", "( see http://docs.python.org/tutorial/inputoutput.html).", "The simplest way to do the same with a currently recommended method would be:-"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/tutorial/inputoutput.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/inputoutput.html"}]}, {"code": "<pre>\n<code>\n url = '{0}:{1}'.format( args.link , args.port )\n</code>\n</pre>\n", "senID": 1}, {"text": ["where {n} is the nth variable within format( variables ).", "This method will always convert the arguments to a string for you."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The older method using %s does the same; the 's' meaning turn an argument into a string, but there has to be exactly as many '%s' flags within the string as there are arguments after the % sign after the string.", "Don't worry about this, but if you're learning, use .format()."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]