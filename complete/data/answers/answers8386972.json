[[{"code": "<pre>\n<code>\n l1 = [('x',20),('y',10),('z',40)]\nl2 = [('x',30),('r',90),('z',10),('s',20)]\nl3 = [('y',20),('z',40),('x',39)]\nl4 = [('s',10),('p',20),('z',20)]\n\nd = {}\nfor k, v in l1+l2+l3+l4:\n    d.setdefault(k, []).append(v)\n\nmylist = [(k, max(v)) for k, v in d.items()]\n</code>\n</pre>\n", "senID": 0}, {"text": ["mylist is now: [('p', 20), ('s', 20), ('r', 90), ('y', 20), ('x', 39), ('z', 40)]."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "mylist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[('p', 20), ('s', 20), ('r', 90), ('y', 20), ('x', 39), ('z', 40)]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you need it in the order you gave us, change the last line:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n mylist = [(k, max(d[k])) for k in 'xyzrsp']\n\n[('x', 39), ('y', 20), ('z', 40), ('r', 90), ('s', 20), ('p', 20)]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n import collections, itertools\n\nclass Minimum(object):\n    # simulates negative infinity to some degree\n    def __cmp__(self, other):\n        return -1\n\ndef max_elements(*lists): # no idea how to call it\n    values = collections.defaultdict(Minimum)\n    for key, value in itertools.chain(*lists):\n        values[key] = max(values[key], value)\n    return values.items()\n\nl1 = [('x',20),('y',10),('z',40)]\nl2 = [('x',30),('r',90),('z',10),('s',20)]\nl3 = [('y',20),('z',40),('x',39)]\nl4 = [('s',10),('p',20),('z',20)]\n\nprint max_elements(l1, l2, l3, l4)\n# [('p', 20), ('s', 20), ('r', 90), ('y', 20), ('x', 39), ('z', 40)]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Assuming that all the numbers are positive"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import collections\n\nl1 = [('x',20),('y',10),('z',40)]\nl2 = [('x',30),('r',90),('z',10),('s',20)]\nl3 = [('y',20),('z',40),('x',39)]\nl4 = [('s',10),('p',20),('z',20)]\n\nd = collections.defaultdict(int)\n\nfor k,v in l1 + l2 + l3 + l4:\n   if d[k] &lt; v: d[k] = v\n\nresult = list(d.iteritems())\n</code>\n</pre>\n", "senID": 1}, {"text": ["result is "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "result", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [('p', 20), ('s', 20), ('r', 90), ('y', 20), ('x', 39), ('z', 40)]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["may be you can try this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d={}\n&gt;&gt;&gt; for l in zip(l1,l2,l3,l4):\n        for t in l:\n            if d.has_key(t[0]):\n                d[t[0]]=max(d[t[0]],t[1])\n            else:\n                d[t[0]]=t[1]\n&gt;&gt;&gt; [(k,v) for k,v in d.iteritems()]\n[('p', 20), ('s', 10), ('r', 90), ('y', 20), ('x', 39), ('z', 40)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Just whipped this up.", "Should do what you want.", "Try adding a 5th list and running it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def maxmerge(d1, d2):\n    for k in d2.keys():\n        if not d1.has_key(k):\n            d1[k] = d2[k]\n        elif d2[k] &gt; d1[k]:\n            d1[k] = d2[k]\n\ndef maxtup(*lists):\n    r = dict()\n    for l in lists:\n        maxmerge(r, dict(l))\n    return r.items()\n\nl1 = [('x',20),('y',10),('z',40)]\nl2 = [('x',30),('r',90),('z',10),('s',20)]\nl3 = [('y',20),('z',40),('x',39)]\nl4 = [('s',10),('p',20),('z',20)]\nprint maxtup(l1,l2,l3,l4)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Assuming the order of the final list doesn't matter."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["From the documentation for the built-in dict type:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n dict(seq) -&gt; new dictionary initialized as if via:\n    d = {}\n    for k, v in seq:\n        d[k] = v\n</code>\n</pre>\n", "senID": 2}, {"text": ["Thus, if we initialize with multiple equal keys, the last one in the seq will take precedence."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "seq", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["We can exploit that by joining our lists into one, sorting it in increasing order of the numeric values, and then building the dictionary. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Thus, the whole thing is a very short one-liner:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n dict(sorted(l1+l2+l3+l4, key=lambda x:x[1])).items()\n</code>\n</pre>\n", "senID": 6}, {"text": ["(Or if you prefer, use operator.itemgetter to implement the key."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "operator.itemgetter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]