[[{"text": ["I'm assuming this is a homework question."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you don't care about the order in which you present the results, just create an empty dictionary for the results, which will map from value to count. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Iterate over every item in your original list.", "Check if it is in the result dictionary.", "If not, add a mapping from that value to 1.", "If it is, replace the mapping from value to X with a mapping from value to X + 1."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Now iterate over the pairs (or keys) in the dictionary and print the count. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Another approach: Use the set type to form a mathematical set from your list.", "Now, for each set item, ask for list.count(value)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "list.count(value)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["There are also library functions supposedly for this sort of count, but I'm guessing this is homework. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["If your class is using Python2.7 or newer you can use a Counter"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; wordLst = ['bat', 'cat', 'bat', 'rat', 'bat', 'rat']\n&gt;&gt;&gt; for k,v in Counter(wordLst).items():\n...     print k, \"appears\", v, \"times\"\n... \nbat appears 3 times\nrat appears 2 times\ncat appears 1 times\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n from collections import defaultdict\n\ndef listAnalyzer(wordLst):\n    counts = defaultdict(int)\n    for w in wordLst:\n        counts[w] += 1\n    for w, cnt in counts.iteritems():\n        print \"%s appears %d times\" % (w, cnt)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I'm assuming you really want the \"x appears n times\" output to only appear once.", "The following is a bit of a brute force approach, but it doesn't require any imports and should be easy to understand:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def listAnalyzer(the_list):\n    d = {}                         # creates an empty dictionary\n    for item in the_list:\n        if item in d.keys():\n            d[item] = d[item] + 1  # Increment items already in dictionary\n        else:\n            d[item] = 1            # Adds item to dictionary if it isn't already there\n    for k in d.keys():\n        print k, \" appears \", d[k], \" times\"\n\nwordLst = ['bat', 'cat', 'bat', 'rat', 'bat', 'rat']\nlistAnalyzer(wordLst)\nnumLst = [3, 1, 4, 3, 2, 3, 1]\nlistAnalyzer(numLst)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import groupby\n&gt;&gt;&gt; for i,j in groupby(sorted(wordLst)):\n...   count = sum(1 for _ in j)\n...   for k in range(count):\n...     print i, \"appears\", count, \"times\"\n... \nbat appears 3 times\nbat appears 3 times\nbat appears 3 times\ncat appears 1 times\nrat appears 2 times\nrat appears 2 times\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You need groupby()\nIt's a little bit hard to understand groupby() because it can use a key which is useful when it's not the identity and which make it unclear when it is the identity."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["suppose you have a sequence seq = [ 1,1,1,3,3,3,3,3,4,5,5,5,5]"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["groupby(seq) returns an iterator.", "That is to say, if you want to see something you have to read the iterator: for that use list(groupby)\nYou'll see a list of tuple.", "The first element of each tuple is one of the elements of the set(seq).", "The second element is ... an iterator.", "Now you know what to do to an iterator, so you will watch what are the elements iterated by the iterator in second place of each tuple.", "And you'll wonder why to build such iterators whose information seems poor.", "But keep in mind: this second iterator can be more complex when groupby() is used with a key for selection of elements to form the second iterators in tuples...."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For you , only use groupby() without key, watch the elements returned... and deduce what you can to find yourself the answer."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]