[[{"text": ["The inspect module, already mentioned in other answers, is especially handy because you get to easily filter the names and values of objects you care about.", "inspect.getmembers takes two arguments: the object whose members you're exploring, and a predicate (a function returning bool) which will accept (return True for) only the objects you care about."], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "inspect", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "filter", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "inspect.getmembers", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/inspect.html?highlight=inspect.getmembers#inspect.getmembers"}, {"text": "two", "childNum": 0, "tag": "em", "childList": []}, {"text": "predicate", "childNum": 0, "tag": "em", "childList": []}, {"text": "bool", "childNum": 0, "tag": "code", "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["To get \"the object that is this module\" you need the following well-known idiom:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import sys\nthis_module = sys.modules[__name__]\n</code>\n</pre>\n", "senID": 2}, {"text": ["In your predicate, you want to select only objects which are functions and have names that start with site_:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "site_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import inspect\ndef function_that_has_site(f):\n    return inspect.isfunction(f) and f.__name__.startswith('site_')\n</code>\n</pre>\n", "senID": 4}, {"text": ["With these two items in hand, your loop becomes:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n for n, coolfunc in inspect.getmembers(this_module, function_that_has_site):\n   result = coolfunc(blabla, yada)\n   if result: return result\n</code>\n</pre>\n", "senID": 6}, {"text": ["I have also split the loop body so that each function is called only once (which both saves time and is a safer approach, avoiding possible side effects)... as well as rewording it in Python;-)"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Have you tried using the inspect module?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/inspect.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/inspect.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/inspect.html"}]}, {"text": ["The following will return the methods:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n inspect.getmembers\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then you could invoke with:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n methodobjToInvoke = getattr(classObj, methodName) \nmethodobj(\"arguments\")\n</code>\n</pre>\n", "senID": 5}], [{"text": ["This method goes through all properties of the current module and executes all functions it finds with a name starting with site_:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "site_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\nimport types\nfor elm in dir():\n    f = getattr(sys.modules[__name__], elm)\n    if isinstance(f, types.FunctionType) and f.__name__[:5] == \"site_\":\n        f()\n</code>\n</pre>\n", "senID": 1}, {"text": ["The function-type check is unnecessary if only functions are have names starting with site_."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "site_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n def run():\n    for f_name, f in globals().iteritems():\n        if not f_name.startswith('site_'):\n            continue\n        x = f()\n        if x:\n            return x\n</code>\n</pre>\n", "senID": 0}], [{"text": ["It's best to use a decorator to enumerate the functions you care about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n _funcs = []\n\ndef enumfunc(func):\n  _funcs.append(func)\n  return func\n\n@enumfunc\ndef a():\n  print 'foo'\n\n@enumfunc\ndef b():\n  print 'bar'\n\n@enumfunc\ndef c():\n  print 'baz'\n\nif __name__ == '__main__':\n  for f in _funcs:\n    f()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try dir(), globals() or locals().", "Or inspect module (as mentioned above)."], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "dir()", "tag": "a", "pos": 0, "childList": [{"text": "dir()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#dir"}, {"text": "dir()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "globals()", "tag": "a", "pos": -1, "childList": [{"text": "globals()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#globals"}, {"text": "globals()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "locals()", "tag": "a", "pos": -1, "childList": [{"text": "locals()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#locals"}, {"text": "locals()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "inspect", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/inspect.html"}]}, {"code": "<pre>\n<code>\n def site_foo():\n  pass\n\ndef site_bar():\n  pass\n\nfor name, f in globals().items():\n  if name.startswith(\"site_\"):\n    print name, f()\n</code>\n</pre>\n", "senID": 1}]]