[[{"code": "<pre>\n<code>\n import random\n\nsamples = [ random.randint(1, 2) for i in range(100) ]\nheads = samples.count(1)\ntails = samples.count(2)\n\nfor s in samples:\n    msg = 'Heads' if s==1 else 'Tails'\n    print msg\n\nprint \"Heads count=%d, Tails count=%d\" % (heads, tails)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You have a variable for the number of tries, which allows you to print that at the end, so just use the same approach for the number of heads and tails.", "Create a heads and tails variable outside the loop, increment inside the relevant if coin == X block, then print the results at the end."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "heads", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tails", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if coin == X", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Keep a running track of the number of heads:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random\ntries = 0\nheads = 0\nwhile tries &lt; 100:\n    tries += 1\n    coin = random.randint(1, 2)\n    if coin == 1:\n        heads += 1\n        print('Heads')\n    if coin == 2:\n        print ('Tails')\ntotal = tries\nprint('Total heads '.format(heads))\nprint('Total tails '.format(tries - heads))\nprint(total)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use random.getrandbits() to generate all 100 random bits at once:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "random.getrandbits()", "tag": "a", "pos": 0, "childList": [{"text": "random.getrandbits()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/dev/library/random#random.getrandbits"}, {"text": "random.getrandbits()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import random\n\nN = 100\n# get N random bits; convert them to binary string; pad with zeros if necessary\nbits = \"{1:&gt;0{0}}\".format(N, bin(random.getrandbits(N))[2:])\n# print results\nprint('{total} {heads} {tails}'.format(\n    total=len(bits), heads=bits.count('0'), tails=bits.count('1')))\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n 100 45 55\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n import random\ntries = 0\nheads=0\ntails=0\nwhile tries &lt; 100:\n    tries += 1\n    coin = random.randint(1, 2)\n    if coin == 1:\n        print('Heads')\n        heads+=1\n    if coin == 2:\n        print ('Tails')\n        tails+=1\ntotal = tries\nprint(total)\nprint tails\nprint heads\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n # Please make sure to import random.\n\nimport random\n\n# Create a list to store the results of the for loop; number of tosses are limited by range() and the returned values are limited by random.choice().\n\ntossed = [random.choice([\"heads\", \"tails\"]) for toss in range(100)]\n\n# Use .count() and .format() to calculate and substitutes the values in your output string.\n\nprint(\"There are {} heads and {} tails.\".format(tossed.count(\"heads\"), tossed.count(\"tails\")))\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n tosses = 100\nheads = sum(random.randint(0, 1) for toss in range(tosses))\ntails = tosses - heads\n</code>\n</pre>\n", "senID": 0}]]