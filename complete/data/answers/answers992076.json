[[{"text": ["Before thinking about how to implement this in python (or any language) lets look at the pseudocode, which looks like a pretty good plan to solve the problem.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would guess that one thing you might be getting stuck on is the way the pseudocode references variables, like high and low.", "The way to understand variables is to consider them slots that values can be stored.", "At any given time, a variable has some value, like the number 5, or a reference to an open file.", "That value can be summoned at any time by using its name, or it can be given a new value by assigning to it, and the old value will be forgotten with the new value taking its place.  "], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "variables", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "high", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "low", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["The pseudocode references three variables, high, low and tries.", "It also tells you what their initial values should be.", "After the second line has executed, those values are set to 1000, 1 and 1, respectively, but they take on new values as the program progresses."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "high", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "low", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "tries", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Another feature of the pseudocode is a conditional loop, and a case analysis of the user input.", "Your translation of the pseudocode's loop is incorrect.", "In your case, you have created a new variable, i and have instructed your program to run the loop body with every value of i between 1 and 1000.", "Obviously this doesn't have a whole lot to do with the pseudocode.  "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Instead what you want to do is loop forever, until some condition (which changes in the loop body) becomes false.", "In python, the while statement does this.", "If you're familiar with an if statement, while looks the same, but after the body is done, the condition is re-evaluated and the body is executed again if it is still true.  "], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Finally, the case analysis in the body of the loop requires comparing something to expected values.", "Although some other languages have a number of ways of expressing this, in python we only have if-elif-else clauses.  "], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "elif", "childNum": 0, "tag": "code", "childList": []}, {"text": "else", "childNum": 0, "tag": "code", "childList": []}]}, {"tag": "hr", "senID": 6}, {"text": ["Outside of transforming pseudocode to working code, it is probably useful to understand what the program is actually doing.", "The key here is on line 4, where the program guesses the average of two values.", "after that the program acts on how well the guess worked out.  "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["In the first run through the loop, with high containing 1000 and low containing 1, the average is 500 (actually the average is 500.5, but since we're averaging whole numbers, python guesses that we want the result of the division to also be an integer).", "Obviously that guess has only a 0.1% chance of being right, but if it's wrong, the user is expected to tell us if it was too high, or too low.", "Either way, that answer completely eliminates 50% of the possible guesses. "], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "high", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "low", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["If, for instance, the user was thinking of a low number, then when the program guessed 500, the user would tell the program that 500 was too high, and then the program wouldn't ever have to guess that the number was in the range of 501 thru 1000.", "That can save the computer a lot of work. "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["To put that information to use, the program keeps track of the range of possible values the goal number could be.", "When the number guessed is too high, the program adjusts its upper bound downward, just below the guess, and if the guess was too low, the program adjusts its lower bound upward to just above the guess."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["When the program guesses again, the guess is right in the middle of the possible range, cutting the range in half again.", "The number of possible guesses went from the original 1000 to 500 in one guess, to 250 in two guesses.", "If the program has terrible luck, and can't get it two (which is actually pretty likely), then by the third, it has only 125 numbers left to worry about.", "After the fourth guess, only 62 numbers remain in range.", "This continues, and after eight guesses, only 3 numbers remain, and the program tries the middle number for its ninth guess.", "If that turns out to be wrong, only one number is left, and the program guesses it!"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["This technique of splitting a range in half and then continuing to the closer half is called bisection and appears in a wide range topics of interest to computer science.  "], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "bisection", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "hr", "senID": 13}, {"text": ["How about some CODE!", "Since i don't want to deprive you of the learning experience, I'll just give you some snippets that might help you along.", "python is a language designed for interactive exploration, so fire up your interpreter and give this a shot.", "I'll be posting examples with the prompts shown, don't actually type that.  "], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Here's an example using the while clause: "], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 1000\n&gt;&gt;&gt; while x &gt; 1:\n...     x = x/2\n...     print x\n...\n500\n250\n125\n62\n31\n15\n7\n3\n1\n&gt;&gt;&gt; x\n1\n</code>\n</pre>\n", "senID": 16}, {"text": ["Getting console input from the user should be done through the raw_input() function.", "It just returns whatever the user types.", "This is a little harder to show.", "To simplify things, after every line of python that requires input, I'll type \"Hello World!", "\" (without the quotes)"], "childNum": 1, "tag": "p", "senID": 17, "childList": [{"text": "raw_input()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; raw_input()\nHello World!\n'Hello World!'\n&gt;&gt;&gt; y = raw_input()\nHello World!\n&gt;&gt;&gt; print y\nHello World!\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 18}, {"text": ["How about some combining of concepts!"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; myvar = ''\n&gt;&gt;&gt; while myvar != 'exit':\n...     myvar = raw_input()\n...     if myvar == 'apples':\n...         print \"I like apples\"\n...     elif myvar == 'bananas':\n...         print \"I don't like bananas\"\n...     else:\n...         print \"I've never eaten\", myvar\n...\napples\nI like apples\nmangoes\nI've never eaten mangoes\nbananas\nI don't like bananas\nexit\nI've never eaten exit\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 20}, {"text": ["Oops.", "little bit of a bug there.", "See if you can fix it!"], "childNum": 0, "tag": "p", "senID": 21, "childList": []}], [{"text": ["That's pretty problematic, but, fine, let's do one step at a time!", "Your homework assignment begins:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So you don't understand ANY of the stuff, you say, so that means you don't understand this part either.", "Well: \"the user\" is the person who's running your program.", "\"Instructions\" are English sentences that tell him or her what to do to play the game, as per the following quote from this excellently clear and detailed assignment:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["\"print\" is a Python instruction that emits information; for example, try a program containing only"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print \"some information\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["to see how it works.", "OK, can you please edit your answer to show us that you've gotten this point, so we can move to the next one?", "Feel free to comment here with further questions if any words or concepts I'm using are still too advanced for you, and I'll try to clarify!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You're obviously very new to programming, and I guess that is one of the reasons for a delayed response from the community.", "It's tough to decide where to start and how to guide you through this whole exercise."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, before you get a good answer here that includes making you understand what's happening there, and guiding you through building the solution yourself (ideally!", ") I would suggest you visit this page to try to get a grasp of the actual problem itself."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://www.openbookproject.net/pybiblio/gasp/course/4-highlow.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.openbookproject.net/pybiblio/gasp/course/4-highlow.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.openbookproject.net/pybiblio/gasp/course/4-highlow.html"}]}, {"text": ["In the meantime, look at all the answers in this thread and keep editing your post so that we know you're getting it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Okay, the nice part about using Python is that it's almost pseudocode anyway."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Now, let's think about the individual steps:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's another hint -- you can run python as an interpreter and try individual statements along, so, for example, you could do"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n high=23\nlow=7\n</code>\n</pre>\n", "senID": 3}, {"text": ["then compute what you think should be the average or midpoint between them (hint: 15)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Welcome to Stack Overflow!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The trick here is to realize that your Python program should look almost like the pseudocode."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["First let's try to understand exactly what the pseudocode is doing.", "If we had to interact with the program described by the pseudocode, it would look something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Think of a number between 1 and 1000 and press Enter.\n&gt;&gt;&gt; \nIs it 500? Enter -1 if it's lower, 0 if I guessed right, or 1 if it's higher.\n&gt;&gt;&gt; 1\nIs it 750? Enter -1 if it's lower, 0 if I guessed right, or 1 if it's higher.\n&gt;&gt;&gt; -1\nIs it 625? Enter -1 if it's lower, 0 if I guessed right, or 1 if it's higher.\n</code>\n</pre>\n", "senID": 3}, {"text": ["etc."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["When we first think of our number, the program knows only that it is between 1 and 1000.", "It represents this knowledge by setting the variable 'low' to 1 and the variable 'high' to 1000.", "Its first guess is the average of these numbers, which is 500."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["After we tell the program that our number is greater than 500, it updates the value of 'low' to 501.", "In other words the program then knows that our number is between 501 and 1000.", "It then guesses the average of 501 and 1000, which is 750.", "We tell it that our number is lower, so the program updates the value of 'high' to 749 and guesses the average of 501 and 749 next, and so on until it guesses right, or it has narrowed the possible range down to a single number (meaning its next guess will be right)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["So back to writing the program in Python: We basically just translate the pseudocode line for line.", "For example our program loop should look just like it does in the pseucode:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n while high &gt; low:\n  # Guess (high + low) / 2 and ask user to respond\n  # Handle user response\n</code>\n</pre>\n", "senID": 8}, {"text": ["There is no need for a for-loop as you have in your code."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["To take input we can do something like this:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n guess = (high + low) / 2\nresponse = input('Is it ' + str(guess) + '? Enter -1 if it's lower, 0 if I guessed right, or 1 if it's higher.')\n</code>\n</pre>\n", "senID": 11}, {"text": ["Now the user input is stored in the variable 'response', and we can handle the possibilities with if statements like 'if response == -1:' for example."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Just remember to print the instructions and set 'high' and 'low' to their initial values before entering the while loop and you should be all set."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["Good luck!"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}], [{"text": ["Here's a few hints to get you started:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Average = Value + Value + Value [...] / Number of Values; (for instance, ((2 + 5 + 3) / (3))"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Many programming languages use different operator precedence.", "When I am programming, I always use parentheses when I am unsure about operator precedence.", "In my example above, if you only did 2 + 5 + 3 / 3, the program would do division operations before addition - so it would evaulate to 2 + 5 + (3 / 3), or 2 + 5 + 1 == 7."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Skip this for python users\n/*\nSecondly: your earliest programs can benefit from  const correctness (here is a good explanation of what it is and why it is EXTREMELY good practice).", "Please read through that and understand why you should use constants (or whatever the python equivalent is).", "Also look up \"magic numbers,\" which is a big area where constants are used.", "*/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.parashift.com/c%2B%2B-faq-lite/const-correctness.html"}]}, {"text": ["Google \"Please Excuse My Dear Aunt Sally\" (NOTE: this only deals with mathematical operators, and mostly holds true for programming languages; for a more comprehensive study of operator precedence, look up your chosen language's documentation for precedence - also note that most programs don't have built in power operators, but most standard libraries have pow functions)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Speaking of standard library: Get acquainted with standard library functions (I have never used Python, I don't know how it implements a SL, but I would be extremely surprised if a language that popular didn't have a well developed SL).", "If you don't know what that is, and your book/tutorial doesn't have it, get a new one.", "Any resource that doesn't reference a standard library is not worth the time. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Lastly: while this post may look like I know what I'm talking about, I really am still in the early phases of learning, just like you.", "A few things you might want to get used to early on (when I skipped these parts, it slowed my learning a lot): The use of references and pointers (Q for comments: does Python have pointers?", "), the difference between the data IN a memory location and the actual memory location (often times, the location of the value in memory will be more useful than the value itself, at least when writing data structures).", "Especially get used to the standard library; look for copy, find, etc.", "type functions useful in string manipulation. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Actually, rereading your original post, I did not realize this was a homework type assignment.", "If you aren't doing this for fun, you will probably never take my advice.", "Just remember that programming can be extremely fun, if you don't make it a chore - and don't get frustrated when your code doesn't compile (or...interpret), or you get unexpected results, etc. "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Doesn't match the psudocode exactly but it works.", "lol  ;)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I know this is a wicked old post but this is the same assignment I got also.", "Here is what I ended up with:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n high = 1000\nlow = 1\nprint \"Pick a number between 1 and 1000.\"\nprint \"I will guess your number in 10 tries or less.\"\nprint \"Or at least i'll try to.  ;)\"\nprint \"My first guess is 500.\"\nguess = 500\ntries = 0\nanswer = 1\nprint \"Enter 1 if it's higher.\"\nprint \"Enter -1 if it's lower.\"\nprint \"Enter 0 if I guessed it!\"\nprint \"\"\nwhile (answer != 0):\n    answer = int(raw_input(\"Am I close?\"))\n    if answer == 1:\n        tries = tries + 1\n        low = guess\n        guess = (high + low) / 2\n        print \"My next guess is:\"\n        print guess\n    elif answer == -1:\n        tries = tries + 1\n        high = guess\n        guess = (high + low) / 2\n        print \"My next guess is:\"\n        print guess\n    elif answer == 0:\n        tries = tries + 1\n        print \"Your number is:\"\n        print guess\n        print \"Yay! I got it! Number of guesses:\"\n        print tries\n</code>\n</pre>\n", "senID": 2}]]