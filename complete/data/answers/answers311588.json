[[{"text": ["It depends on how long they are.", "I tend to structure them like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [x.id for x\n in self.db.query(schema.allPostsUuid).execute(timeout=20)\n if x.type == 'post' \n    and x.deleted is not False\n    and ...\n    and ...]\n</code>\n</pre>\n", "senID": 1}, {"text": ["That way every expression has its own line."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If any line becomes too big I like to extract it out in a lambda or expression:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n transform = lambda x: x.id\nresults = self.db.query(schema.allPostsUuid).execute(timeout=20)\ncondition = lambda x: x.deleted is not False and ... and ...\n[transform(x) for x in results if condition(x)]\n</code>\n</pre>\n", "senID": 4}, {"text": ["And then if a lambda becomes too long it gets promoted to a function."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Where I work, our coding guidelines would have us do something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n all_posts_uuid_query = self.db.query(schema.allPostsUuid)\nall_posts_uuid_list = all_posts_uuid_query.execute(timeout=20)\nall_uuid_list = [\n    x.id \n    for x in all_posts_uuid_list \n    if (\n        x.type == \"post\" \n        and \n        not x.deleted  # &lt;-- if you don't care about NULLs / None\n    )\n]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For me that's too much.", "Maybe it's just a terrible example, since \"type\" and \"deleted\" would clearly be part of the db query."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I tend to think that if a list comprehension spans multiple lines it probably shouldn't be a list comprehension.", "Having said that, I usually just split the thing at \"if\" like other people have and will answer here."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["How about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n allUuids = [x.id for x in self.db.query(schema.allPostsUuid).execute(timeout = 20) \n                   if (x.type == \"post\" and x.deleted is not False)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Generally, long lines can be avoided by pre-computing subexpressions into variables, which might add a minuscule performance cost:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n query_ids = self.db.query(schema.allPostsUuid).execute(timeout = 20)\nallUuids = [x.id for x in query_ids\n                   if (x.type == \"post\" and x.deleted is not False)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["By the way, isn't 'is not False' kind-of superfluous ?", "Are you worried about differentiating between None and False ?", "Because otherwise, it suffices to leave the condition as only: if (x.type == \"post\" and x.deleted)"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "is not False", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "f (x.type == \"post\" and x.deleted)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["You should not use a list comprehension for that."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "You should not use a list comprehension for that", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["List comprehensions are an awesome feature, but they are meant to be shortcuts, not regular code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For such a long snippet, you should use ordinary blocs :"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n allUuids = []\nfor x in self.db.query(schema.allPostsUuid).execute(timeout = 20) :\n    if x.type == \"post\" and x.deleted is not False :\n        allUuids.append(x.id)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Exactly the same behavior, much more readable.", "Guido would be proud of you :-)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n allUuids = [x.id \n            for x in self.db.query(schema.allPostsUuid).execute(timeout = 20) \n            if x.type == \"post\" and x.deleted is not False]\n</code>\n</pre>\n", "senID": 0}]]