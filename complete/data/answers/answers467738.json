[[{"text": ["Do not invent yet another rules language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Either use Python or use some other existing, already debugged and working language like BPEL."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Just write your rules in Python, import them and execute them.", "Life is simpler, far easier to debug, and you've actually solved the actual log-reading problem without creating another problem."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Imagine this scenario.", "Your program breaks.", "It's now either the rule parsing, the rule execution, or the rule itself.", "You must debug all three.", "If you wrote the rule in Python, it would be the rule, and that would be that."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["\"I think it would be difficult to filter the Python down to the point where the user couldn't inadvertently do some crazy stuff with the rules that was not intended."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["This is largely the \"I want to write a compiler\" argument.  "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["1) You're the primary user.", "You'll write, debug and maintain the rules.", "Are there really armies of crazy programmers who will be doing crazy things?", "Really?", "If there is any potential crazy user, talk to them.", "Teach Them.", "Don't fight against them by inventing a new language (which you will then have to maintain and debug forever."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "talk to them", "childNum": 0, "tag": "em", "pos": 4, "childList": []}]}, {"text": ["2) It's just log processing.", "There's no real cost to the craziness.", "No one is going to subvert the world economic system with faulty log handling.", "Don't make a small task with a few dozen lines of Python onto a 1000 line interpreter to interpret a few dozen lines of some rule language.", "Just write the few dozen lines of Python."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "craziness", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Just write it in Python as quickly and clearly as you can and move on to the next project."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["See this question:\nhttp://stackoverflow.com/questions/318888/solving-who-owns-the-zebra-programmatically"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/318888/solving-who-owns-the-zebra-programmatically", "text": "http://stackoverflow.com/questions/318888/solving-who-owns-the-zebra-programmatically", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Specifically, the current accepted answer has a really great example of using the constraint module as a rules engine."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You might also want to look at PyKE."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyKE", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyke.sourceforge.net/logic%5Fprogramming/index.html"}]}], [{"text": ["Or even pychinko, a Rete-based RDF friendly rule engine."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pychinko", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.mindswap.org/~katz/pychinko/"}]}], [{"text": ["The only place that's different from Python syntax itself is the message ~ \"program\\\\[\\d+\\\\]: message\" part, so I wonder if you really need a new syntax."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "message ~ \"program\\\\[\\d+\\\\]: message\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Update: OK, you have either usability or safety concerns -- that's reasonable.", "A couple suggestions:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["Take a hint from Awk and streamline the pattern-matching syntax, e.g.", "/program\\[\\d+\\]: message/ instead of message ~ \"program\\\\[\\d+\\\\]: message\"."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "/program\\[\\d+\\]: message/", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "message ~ \"program\\\\[\\d+\\\\]: message\"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I'd implement it by translating to a Python expression as the input is parsed, instead of building a tree of objects to evaluate, unless you expect to be doing more operations on these things than evaluation.", "This should need less code and run faster.", "The top level might go something like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]}, {"text": ["Another idea, further afield: write your app in Lua.", "It's designed for nonprogrammers to extend programs reasonably safely without needing to learn a lot.", "(It's been used that way successfully, and you can sandbox evaluation so user's code can't get at any capabilities you don't pass to it explicitly, I'm told."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I'll shut up now.", ":-) Good luck!"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["It's a little hard to answer the question without knowing what the scope of the application is."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "What are you trying to reason about?", "tag": "none", "senID": 1}, {"text": "What level of analysis are you talking about?", "tag": "none", "senID": 2}, {"text": "How complicated do you see the rules becoming?", "tag": "none", "senID": 3}, {"text": "How complicated is the interplay between different rules?", "tag": "none", "senID": 4}]}, {"text": ["On one end of the spectrum is a simple one-off approach like you have proposed.", "This is fine if the rules are few, relatively simple, and you're not doing anything more complicated than aggregating log messages that match the specified rules."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["On the other side of the spectrum is a heavy-weight reasoning system, something like CLIPS that has a Python interface.", "This is a real rules engine with inferencing  and offers the ability to do sophisticated reasoning.", "If you're building something like a diagnostic engine that operates off of a program log this could be more appropriate."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "CLIPS", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/CLIPS"}, {"text": "Python interface", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://pyclips.sourceforge.net/web/"}]}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I would say that the current implementation idea is fine for what you're doing.", "Anything much more and I think you probably run the risk of over-engineering the solution.", "It seems to capture what you want, matching on the log messages just based on a few different criteria."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]]