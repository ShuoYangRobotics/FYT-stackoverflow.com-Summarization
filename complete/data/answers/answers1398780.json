[[{"text": ["This works for me as long as the IE dialogs are in the foreground and the downloaded file does not already exist in the \"Save As\" directory:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import time\nimport threading\nimport win32ui, win32gui, win32com, pythoncom, win32con\nfrom win32com.client import Dispatch\n\nclass IeThread(threading.Thread):\n    def run(self):\n        pythoncom.CoInitialize()\n        ie = Dispatch(\"InternetExplorer.Application\")\n        ie.Visible = 0\n        ie.Navigate('http://website/file.xml')\n\ndef PushButton(handle, label):\n    if win32gui.GetWindowText(handle) == label:\n        win32gui.SendMessage(handle, win32con.BM_CLICK, None, None)\n        return True\n\nIeThread().start()\ntime.sleep(3)  # wait until IE is started\nwnd = win32ui.GetForegroundWindow()\nif wnd.GetWindowText() == \"File Download - Security Warning\":\n    win32gui.EnumChildWindows(wnd.GetSafeHwnd(), PushButton, \"&amp;Save\");\n    time.sleep(1)\n    wnd = win32ui.GetForegroundWindow()\nif wnd.GetWindowText() == \"Save As\":\n    win32gui.EnumChildWindows(wnd.GetSafeHwnd(), PushButton, \"&amp;Save\");\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I don't know how to say this nicely, but this sounds like about the most foolhardy software idea in recent memory.", "Python is much more capable of performing AJAX calls than IE is."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To access the data, yes, you can use urllib and urllib2 .", "If there is JSON data in the response, there's the json library; likewise for XML and HTML, there's BeautifulSoup.  "], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "can", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "urllib", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "urllib2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "json", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "BeautifulSoup", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For one project, I had to write a Python program that would simulate a browser and sign into any of 20 different social networks (remember Friendster?", "Orkut?", "CyberWorld?", "I do), and upload images and text into the user's account, even grasping CAPTCHAs and complex JavaScript interactions.", "Pure Python makes it (comparatively) easy; as you've already seen, trying to use IE makes it impossible."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "20", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["pamie perhaps"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pamie", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pamie.sourceforge.net/"}]}], [{"text": ["You don't need to use IE.", "You could use something like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import urllib2\ndata = urllib2.urlopen(\"http://website/file.xml\").read()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Update: I see you've updated your question.", "If you need to use a browser, then clearly this answer isn't appropriate for you."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Further update: When you click the button which is generated by JavaScript, if the URL retrieved is not computed by the JavaScript, and only the button is, then you can perhaps retrieve that URL via urllib2.", "On the other hand, you might also need to pass a session cookie from your authenticated session."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "Further update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "not", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "urllib2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["If you can't control Internet Explorer using its COM interface, I suggest using the AutoIt COM to control its GUI from Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "AutoIt", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.autoitscript.com/autoit3/"}]}], [{"text": ["One option could also be to embed your own browser."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Thats e.g.", "possible with Qt via PyQt (GPL) or PySide (LGPL).", "There you could embed the WebKit engine.", "You could then either display the page in a QWebView and let the user navigate to your download and filter that event or use a simple QWebPage where everything could be automated and nothing has to be shown at all."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "PyQt", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.riverbankcomputing.co.uk/software/pyqt/intro"}, {"text": "PySide", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.pyside.org/"}, {"text": "QWebView", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://doc.trolltech.com/latest/qwebview.html#details"}, {"href": "http://doc.trolltech.com/latest/qwebpage.html#details", "text": "QWebPage", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["And WebKit should be mighty enough to do anything you want."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "WebKit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Webkit"}]}, {"text": ["Very basic example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import sys\n\nfrom PySide import QtCore, QtGui, QtWebKit\n\nurl = 'http://developer.qt.nokia.com/wiki/PySideDownloads/'\n\nclass TestKit(QtCore.QObject):\n    def __init__(self, app):\n        self.page = QtWebKit.QWebPage()\n        self.page.loadFinished.connect(self.finished)\n        self.page.mainFrame().load(QtCore.QUrl(url))\n        self.app = app\n\n    def finished(self, evt):\n        # inspect DOM -&gt; navigate to next page or download\n        print self.page.currentFrame().documentElement().toInnerXml().encode(\n                'utf-8')\n        # when everything is done\n        self.app.quit()\n\n\nif __name__ == '__main__':\n    app = QtGui.QApplication(sys.argv)\n    t = TestKit(app)\n    sys.exit(app.exec_())\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I have something like that (an awful 3rd part application with lots of weird dotnet 'ajax' controls), and I use iMacros plugin for Firefox to do some automation.", "But I'm doing batch inserts, not downloads."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can try record, edit and replay the inputs sent thru a VNC session.", "Look at something like http://code.google.com/p/python-vnc-viewer/ for inspiration."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/python-vnc-viewer/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/python-vnc-viewer/"}]}]]