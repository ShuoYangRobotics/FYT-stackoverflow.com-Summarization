[[{"text": ["This is highly unlikely to be the bottleneck in your application, so worrying about the performance is probably a waste of time.", "However, if this is the bottleneck or you just have some time on your hands, look into using a namedtuple.", "It combines the immutability and low memory footprint of a tuple with the nice syntax of class attributes."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "highly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "namedtuple", "tag": "a", "pos": 1, "childList": [{"text": "namedtuple", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/dev/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields"}, {"text": "namedtuple", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "tuple", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["A few thoughts:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Objects were originally created to bundle data with functionality.", "If you just want to store data, use dictionaries.", "If you want to include methods for manipulating the data, use objects."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Kind of similar to your problem: http://stackoverflow.com/questions/794132/returning-an-object-vs-returning-a-tuple"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/794132/returning-an-object-vs-returning-a-tuple", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/794132/returning-an-object-vs-returning-a-tuple"}]}, {"text": ["There's no clearcut choice.", "Dictionaries are fast, nice, and clean.", "Class instances are, after all, a special dictionary.", "If you want to provide a way to add functionalities and change your interface later on, a class would be the best choice, but overdesign something simple is always a bad choice.", "Python is not java, where everything must be an instance of a properly made class.", "This is a sin I fall for as well."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you go with objects, I wouldn't store the data pickled in the database simply for the reasons you gave.", "It would be considerably worse if you underwent a change of language or similar."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["FWIW, I would start with a dictionary.", "If things get complicated or new features are needed, make it an object."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You actually summarize the trade-offs quite well.", "It seems lots of people get worried far too early about performance.", "Rather than repeat the standard advice on the subject I'll suggest you search the web for \"Knuth premature optimization\".", "The fact of the matter is that for objects of known structure you will be very much happier using class-based objects than dicts."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "known structure", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}, {"text": ["Again, your desire not to instantiate objects each time their (instance) data is read in form the database represents a slightly unhealthy focus on the wrong parts of your program's design.", "Creating an instance of one of your classes from data attributes takes very little time, and the convenience of being able to add behavior through methods is well worth the slight extra complexity."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Using a dict with constant subscripts to reference the elements of a data object seems wrong-headed to me.", "You are effectively emulating Python's namespace mechanism and creating lots of unnecessary string constants (which won't necessarily be consolidated by the interpreter).", "If you're really interested in speed then why not use a list, with symbolic constants for the field names?", "Answer: because it would be wrong-headed to contort your code  in this way for a potentially illusory increase in execution speed that in 99% of all cases (a figure I just plucked from my ass) isn't going to be noticed because the application isn't CPU-bound anyway."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Write your program the easiest way you know how.", "If it works and runs fast enough, move on to the next task."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]