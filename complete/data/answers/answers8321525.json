[[{"text": ["A dictionary has one value per key.", "What would self.termdict[11] return otherwise?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self.termdict[11]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["The problem is here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n termdict = dict(termpairs)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You are \"converting\" your termpairs to a dict, so you will get something like:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "termpairs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ((2, 14), (2, 11), (-12, 3), (42, 0)) =&gt; {2: 14, 2: 11, -12: 3, 42: 0}\n</code>\n</pre>\n", "senID": 3}, {"text": ["In a dict there cannot be two items with the same key, so the second one (2: 11) is overwriting the first one (2: 14)."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "2: 11", "childNum": 0, "tag": "code", "childList": []}, {"text": "2: 14", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["EDIT: Why are you converting it to a dict anyway?", "This would be a simpler solution (with no dict conversion):"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def __init__(self, *termpairs):\n    self.termdict = {}\n    # termpairs is a tuple of tuples\n    for x, y in termdict:\n        self.termdict[y] = x\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Because your dictionary termdict (not self.termdict) maps coefficients to powers, then the same coefficient forces only the second one to be used (i.e., (2, 11) erases (2, 14)).", "Instead, you want to replace your class with:"], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "termdict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self.termdict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "coefficients", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "powers", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "(2, 11)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "(2, 14)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class Polynomial:\n    def __init__(self, *termpairs):\n        termdict = dict([ (b, a) for a, b in termpairs ])\n        self.termdict = {}\n        for x, y in termdict.items():\n            self.termdict[x] = y\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is your culprit:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n termdict = dict(termpairs)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This creates a dictionary where the keys are the coefficients and the values are the exponents.", "Since it's a dictionary, each key points to one value, so at this point you lose the (2, 14) pair -- there can't be more than one item with the key 2.", "That you then proceed to switch 'em around makes no difference; you've already dropped some data on the floor."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "(2, 14)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["I'm not sure why you're putting them in a dictionary to begin with, and then iterating over that to make a second dictionary.", "Why not just put them in the way you want to begin with?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n self.termdict = dict(reversed(pair) for pair in termpairs)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You're overwriting the older values each time you add to the dictionary, you need to do something such as adding the values into a list and storing that list as the value."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["the dictionary structure would look like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["{ 2:[14,11], -12:[3], 42:[0] }\nand will allow you to store multiple pairs."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "{ 2:[14,11], -12:[3], 42:[0] }", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}], [{"text": ["You don't need to create the termdict dictionary, just iterate over the items of the tuple (untested):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "termdict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Polynomial(object):\n    def __init__(self, *termpairs):\n        self.termdict = {}\n        for x, y in termpairs:\n            self.termdict[y] = x\n</code>\n</pre>\n", "senID": 1}]]