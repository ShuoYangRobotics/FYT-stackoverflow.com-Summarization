[[{"text": ["re.match matches from the start of the string.", "Use re.search instead to \"match the first occurrence anywhere in the string\".", "The key bit about this in the docs is here."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "re.match", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "start", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "re.search", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#matching-vs-searching"}]}], [{"text": ["I don't think you need the comma within the brackets.", "i.e."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n found = re.match(\"0x([0-9,a-f]{2})\", line)\n</code>\n</pre>\n", "senID": 1}, {"text": ["tells python to look for commas which it might be mistakenly matching.", "I think you want"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n found = re.match(\"0x([0-9a-f]{2})\", line)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You're using a partial pattern, so you can't use re.match, which expects to match the entire input string.", "You need to use re.search, which can perform partial matches."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "re.match", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "re.search", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; that = \"[0x2b]\"\n&gt;&gt;&gt; m = re.search(\"0x([0-9,a-f]{2})\", that)\n&gt;&gt;&gt; m.group()\n'0x2b'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You'll want to change"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n found = re.match(\"0x([0-9,a-f]{2})\", line)\n</code>\n</pre>\n", "senID": 1}, {"text": ["to"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n found = re.search(\"0x([0-9,a-f]{2})\", line)\n</code>\n</pre>\n", "senID": 3}, {"text": ["re.match will match only from the beginning of the string, which fails in the \"[0x2b]\" case."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "re.match", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "only from the beginning of the string", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["re.search will match anywhere in the string, and thus ignore the leading \"[\" in the \"[0x2b]\" case. "], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "re.search", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "anywhere in the string", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["See search() vs. match() for details."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "search() vs. match()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#search-vs-match"}]}], [{"text": ["You want to use re.search.", "This explains why."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "re.search", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "This explains why.", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#matching-vs-searching"}]}], [{"text": ["If you use re.sub, and pass a callable as the replacement string, it will also do the uppercasing for you:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; that = 'some_dict[0x2a] = blah'\n&gt;&gt;&gt; m = re.sub(\"0x([0-9,a-f]{2})\", lambda x: \"0x\"+x.group(1).upper(), that)\n&gt;&gt;&gt; m\n'some_dict[0x2A] = blah'\n</code>\n</pre>\n", "senID": 1}]]