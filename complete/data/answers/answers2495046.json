[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [1,2,3,4,5,6,7,8,9,10]\n&gt;&gt;&gt; [l[i::3] for i in xrange(3)]\n[[1, 4, 7, 10], [2, 5, 8], [3, 6, 9]]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Replace 3 by the number of lines you want as a result:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "3", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [l[i::5] for i in xrange(5)]\n[[1, 6], [2, 7], [3, 8], [4, 9], [5, 10]]\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n import itertools\ndef grouper(n, iterable, fillvalue=None):\n    # Source: http://docs.python.org/library/itertools.html#recipes\n    \"grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx\"\n    return itertools.izip_longest(*[iter(iterable)]*n,fillvalue=fillvalue)\n\ndef format_table(L):\n    result=[]\n    for row in L:\n        result.append('| '+', '.join(row)+' |')\n    return '\\n'.join(result)\n\nL = ['a','b','c','d','e','f','g','h','i','j']\nL_in_rows=list(grouper(3,L,fillvalue=' '))\nL_in_columns=zip(*L_in_rows)\nprint(format_table(L_in_columns))\n# | a, d, g, j |\n# | b, e, h,   |\n# | c, f, i,   |\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here's a rough solution that works (prints numbers from 0 to N-1 inclusive):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import math\n\nNROWS = 3\nN = 22\n\nfor nr in xrange(NROWS):\n    for nc in xrange(int(math.ceil(1.0 * N/NROWS))):\n        num = nc * NROWS + nr\n        if num &lt; N:\n            print num,\n    print ''\n</code>\n</pre>\n", "senID": 1}, {"text": ["This just print numbers, for example with NROWS = 3 and N = 22:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "NROWS = 3", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "N = 22", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n 0 3 6 9 12 15 18 21 \n1 4 7 10 13 16 19 \n2 5 8 11 14 17 20\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can easily adapt it to print anything you want of course and add the required formatting."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n int array_size = 26;\nint col_size = 4;\n\nfor (int i = 0; i &lt;= array_size/col_size; ++i) {\n    for (int j = i; j &lt; array_size; j += col_size-1) {\n        print (a[j]);\n    }\n    print(\"\\n\");\n}\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This is how I'd do it.", "Given the list of l (of integers, in the example)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "l", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "Decide the number of columns (or rows) and,", "tag": "none", "senID": 1}, {"text": "Calculate the number of rows (or columns) needed.", "tag": "none", "senID": 2}, {"text": "Then loop through them, row by row and print the corresponding value.", "tag": "none", "senID": 3}]}, {"text": ["See code below:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import math\nl = [0,1,2,3,4,5,6,7,8,9]\nnum_cols=4\nnum_rows=int(math.ceil(1.0*len(l)/num_cols))\n\nfor r in range(num_rows):\n    for c in range(num_cols):\n        i = num_rows*c + r\n        if i&lt;len(l):\n            print '%3d ' % l[i],\n        else:\n            print '  - ', # no value\n    print # linebreak\n</code>\n</pre>\n", "senID": 5}, {"text": ["Best,"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Philip"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; L=['a','b','c','d','e','f','g','h','i','j']\n&gt;&gt;&gt; width=4\n&gt;&gt;&gt; height = (len(L)-1)/width+1\n&gt;&gt;&gt; L=L+[' ']*(width*height-len(L))   #Pad to be even multiple of width  \n&gt;&gt;&gt; A = np.array([L])\n&gt;&gt;&gt; A.shape=(width,height)\n&gt;&gt;&gt; A.transpose()\narray([['a', 'd', 'g', 'j'],\n       ['b', 'e', 'h', ' '],\n       ['c', 'f', 'i', ' ']], \n      dtype='|S1')\n</code>\n</pre>\n", "senID": 0}]]