[[{"text": ["Try escaping two backslashes instead of one: \\\\\\\\"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\\\\\\\\", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["re.sub('\\\\\\\\', '/', \"C:\\\\Users\\\\Judge\")"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "re.sub('\\\\\\\\', '/', \"C:\\\\Users\\\\Judge\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You are just passing the RE engine one backslash, which confuses it.", "So, not only do you have to escape the backslashes for Python to be happy, you need to escape it again for RE.", "Since you are escaping two backslashes, you need four total."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you aren't using any regular expression features, perhaps you'd be better off with string's simpler replace method:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["'C:\\\\Users\\\\Judge'.replace('\\\\', '/')"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "'C:\\\\Users\\\\Judge'.replace('\\\\', '/')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You don't need a regular expression for such a simple substitution.", "And the quoting becomes easier then:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"C:\\\\Users\\\\Judge\".replace(\"\\\\\", \"/\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can also use raw strings:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.sub(r'\\\\', '/', 'C:\\\\Users')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note the r in front of the search string which interprets backslashes differently from ordinary strings.", "That is, control sequences like \\n will be taken literally, i.e.", "as backslash followed by n instead of a newline."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "r", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n \"C:\\\\Users\\\\Judge\".replace('\\\\', '/')\n</code>\n</pre>\n", "senID": 0}, {"text": ["As for regex patterns, use r'\\\\'"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "r'\\\\'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Assuming you want to normalize your path, and not just generally asking how to turn backslashes into forward ones, you can use the path.normpath() instead.", "Granted it may not work exactly as you expect, because you are trying to convert away from the windows-form, but consider this sample:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "path.normpath()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import os2emxpath as path\nprint path.normpath(\"C:\\\\windows\\\\hello\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["prints "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT\nAs Oben points out in the comments the backslash-ed string is the correct form for windows, so it should work for most of your needs.", "However if you want to mangle that to some other form, you could just import the corresponding path module."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["You need to use \\\\\\\\:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\\\\\\\\", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n re.sub('\\\\\\\\', '/', \"C:\\\\Users\\\\Judge\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or use the r modifier:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "r", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n re.sub(r'\\\\', '/', \"C:\\\\Users\\\\Judge\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["See Python documentation on re."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Python documentation on re", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}]]