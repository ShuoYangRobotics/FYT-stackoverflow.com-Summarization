[[{"text": ["tempfile.mkdtemp will create a temp dir for you and return its name.", "It will create it in /tmp by default (on Unix-like systems), but \"in the most secure manner possible\" and with read/write/list permissions only for the caller's user id."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "tempfile.mkdtemp", "tag": "a", "pos": 0, "childList": [{"text": "tempfile.mkdtemp", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/tempfile.html#tempfile.mkdtemp"}, {"text": "tempfile.mkdtemp", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "/tmp", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = tempfile.mktemp()\n&gt;&gt;&gt; with open(os.path.join(d, \"secret\")) as output:\n...     output.write(\"Ha, you can't read this!\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Btw., on a Unix/Linux system with default settings, users can't just edit or remove each others' files from /tmp."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "/tmp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I'd say that the best practice is to use tempfile.mkdtemp."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "tempfile.mkdtemp", "tag": "a", "pos": 0, "childList": [{"text": "tempfile.mkdtemp", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/tempfile.html#tempfile.mkdtemp"}, {"text": "tempfile.mkdtemp", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you don't wan to use /tmp then, you can take advantage of the prefix parameter:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "/tmp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "prefix", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import tempfile\ntempfile.mkdtemp(prefix=&lt;your_preferred_directory&gt;)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Edit: Regarding what's the most appropriate directory to sotre your application configuration, cache data, etc.", "If you're using linux, please have a look at the XDG Base Directory Specification."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "XDG Base Directory Specification", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html"}]}], [{"text": ["If it's really temporary, follow larmans' advice and use mkdtemp. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "mkdtemp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If it's some sort of semi-permanent cache that must survive reboots, then you should use the local application directory, as defined by your OS (%APPDATA%, ~/.local/ etc); some toolkits (e.g.", "Qt) provide functions to look that folder up in a cross-platform manner."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit: from Wikipedia:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "HOME (Unix-like) and USERPROFILE (Microsoft Windows) - indicate where\na user's home directory is located in the file system.", "tag": "none", "senID": 3}, {"text": "HOME/{.AppName} (Unix-like) and APPDATA{DeveloperName\\AppName}\n(Microsoft Windows) - for storing application settings. Many open\nsource programs incorrectly use USERPROFILE for application settings\nin Windows - USERPROFILE should only be used in dialogs that allow\nuser to choose between paths like Documents/Pictures/Downloads/Music,\n", "tag": "none", "senID": 4}]}, {"text": ["So you should look up os.environ['APPDATA'] or os.environ['HOME'], depending on platform (see sys.platform) and then append your app name, and then you can store there anything you want."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "os.environ['APPDATA']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.environ['HOME']", "childNum": 0, "tag": "code", "childList": []}, {"text": "sys.platform", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n mydir = os.path.join( \".myAppName\", \"cache\")\nhomeVar = 'HOME'  # default for all *nix variants\nif sys.platform == 'win32': \n   homeVar = 'APPDATA'\nmydir = os.path.join( os.environ[homeVar], mydir)\n</code>\n</pre>\n", "senID": 6}], [{"text": ["http://pypi.python.org/pypi/appdirs is a Python module that offers a cross-platform user_cache_dir function."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://pypi.python.org/pypi/appdirs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/appdirs"}, {"text": "user_cache_dir", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Usually programs use a ~/.progname directory to store data that should be persistent but should stay \"out of the way\" of the user. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "~/.progname", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Just a though: You may want to look into git commit hooks.", "That way, instead of monitoring a tmp directory for new commits (sounds strange: who would commit into a tmp directory with limited permissions?", ") the repo informs you about commits, or, more specifically, automatically runs a script whenever a commit occurs.."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "commit hooks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bit.ly/wDgniE"}]}]]