[[{"text": ["Short Answer to make Modular Design"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Short Answer to make Modular Design", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Short Answer to make Modular Design", "tag": "em"}]}, {"text": "Short Answer to make Modular Design", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["You can check,"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "(Inversion of control) pattern", "tag": "none", "senID": 2}, {"text": "Dependency Injection pattern", "tag": "none", "senID": 3}, {"text": "Locator pattern", "tag": "none", "senID": 4}]}, {"text": ["All of them are described in Martin Fowler:IOC and Microsoft:Modularity"], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "Martin Fowler:IOC", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Martin Fowler:IOC", "tag": "a"}]}, {"href": "http://martinfowler.com/articles/injection.html", "text": "Martin Fowler:IOC", "childNum": 0, "tag": "a", "childList": []}, {"text": "Microsoft:Modularity", "childNum": 1, "tag": "strong", "childList": [{"text": "Microsoft:Modularity", "tag": "a"}]}, {"href": "http://msdn.microsoft.com/en-us/library/cc304758.aspx", "text": "Microsoft:Modularity", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["to Implement them in real world"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "to Implement them in real world", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "to Implement them in real world", "tag": "em"}]}, {"text": "to Implement them in real world", "childNum": 0, "tag": "em", "childList": []}]}, {"src": "http://www.russianit.info/en/scrum/scrum%5Flarge.gif", "tag": "img", "senID": 7}, {"tag": "hr", "senID": 8}, {"src": "http://upload.wikimedia.org/wikipedia/en/9/9c/Test-driven%5Fdevelopment.PNG", "tag": "img", "senID": 9}, {"tag": "hr", "senID": 10}, {"src": "http://www.simple-talk.com/iwritefor/articlefiles/330-Fig2RefactoringD-jan07.gif", "tag": "img", "senID": 11}, {"tag": "hr", "senID": 12}, {"src": "http://media.wiley.com/assets/400/98/image1Large.jpg", "tag": "img", "senID": 13}, {"tag": "hr", "senID": 14}, {"src": "http://www.methodsandtools.com/archive/CI1.jpg", "tag": "img", "senID": 15}, {"tag": "hr", "senID": 16}, {"src": "http://intranetblog.blogware.com/IA%20sample.jpg", "tag": "img", "senID": 17}, {"tag": "hr", "senID": 18}, {"src": "http://www.javaworld.com/javaworld/jw-12-2005/images/jw-1205-maven2.gif", "tag": "img", "senID": 19}, {"tag": "hr", "senID": 20}, {"src": "http://www.restafari.org/005-object-oriented-sheep-running-in-ruby-shoes/animals.png", "tag": "img", "senID": 21}, {"tag": "hr", "senID": 22}, {"src": "http://phpimpact.files.wordpress.com/2008/06/programming%5Flanguages.png", "tag": "img", "senID": 23}, {"tag": "hr", "senID": 24}, {"src": "http://www.alliancetechpartners.com/attask/sol-issue-tracking.gif", "tag": "img", "senID": 25}, {"tag": "hr", "senID": 26}, {"src": "http://wiki.laptop.org/images/f/ff/Important.png", "tag": "img", "senID": 27}, {"tag": "hr", "senID": 28}, {"text": ["After that we can develop everything in modular etc."], "childNum": 1, "tag": "p", "senID": 29, "childList": [{"text": "After that we can develop everything in modular etc.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["As you will deliver some basic functionality with your app, make sure that you code the part that should be extendable/replaceable already as a plugin by yourself.", "Then you'll best get a feeling about how your API should look like."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["And to prove that the API is good, you should write a second and third plugin, because then you will discover that you made a lot of assumptions when writing the first one.", "Normally things clear up a bit after doing this 2nd and 3rd step."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Now, you should write one more plugin, because the last plugins you wrote resemble the first one in type, input data and presentation (maybe yet another weather webservice).", "Choose something total different, with absolutely different data, and you will see your API being still too tailored.", "(Else you did a good job!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Try to keep things loosely coupled, and use interfaces liberally to help."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'd start the design with the Separation of Concerns.", "The major architectural layers are:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Separation of Concerns", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "Problem Domain (aka. Engine, Back-end): the domain classes, which do all the actual work, have domain knowledge implement domain behaviour", "tag": "none", "senID": 2}, {"text": "Persistence: storage management for domain classes, database/filesystem layer", "tag": "none", "senID": 3}, {"text": "User Interface: the GUI, which talks to the domain classes", "tag": "none", "senID": 4}, {"text": "System Interfaces: talking to other systems, eg. networking, web services", "tag": "none", "senID": 5}]}, {"text": ["The domain classes do the work, but don't know about the UI.", "The persistence layer knows about the domain classes, enough to save/load as required.", "The system interface layer abstracts away external systems, which lets you plug a simulator in behind while testing.", "The UI should ideally use MVC, for maximum flexibility."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Without putting too fine a point on it, one would not ordinarily look to Drupal as an exemplar of good architectural design.", "It has grown rather organically, and there have been many upheavals of the design, as evidenced by the regular plugin breakage upon system upgrades."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I would also echo what MicSim said, regarding carefully designing the plugin interface and writing multiple different plugins to exercise it.", "This is the only way to really flesh out the issues of how the app and plugins interact."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["Well, probably the first place to start is to sit down and figure out what the plug-in might need to fulfill its purpose."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You'd want to consider two main aspects in your design."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "How will your framework pass requests / receive responses from the plug-in?", "tag": "none", "senID": 2}, {"text": "What helper classes or modules might be good to provide?", "tag": "none", "senID": 3}]}, {"text": ["And probably also, since this sounds like a learning project."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "What do you want to write yourself, and what are you happy just to pick out of an existing library?", "tag": "none", "senID": 5}]}, {"text": ["I'd also recommend developing some basic plugins as you design the API.", "The experience of having to actually use what you design will allow you to see where a given approach might be making things harder than they need to be."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"tag": "ul", "num": 4, "lis": [{"text": "design the api for your app, carefully (", "tag": "none", "senID": 0}, {"text": "make everything, which could be used independently a module, then group and build larger parts out of the simple parts (KISS)", "tag": "none", "senID": 1}, {"text": "don't repeat yourself (DRY)", "tag": "none", "senID": 2}, {"text": "write/publish short documentation frequently, for yourself and others (open source mantra) ...", "tag": "none", "senID": 3}]}], [{"text": ["Look into the listener-subscriber pattern.", "Sooner or later, your app will be complex enough that you need to implement callbacks.", "When you hit that limit, use listener-subscriber (there's an implementation in wxPython)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, several modules will want to watch for new data from a number of feeds.", "Modules that link together might want to update themselves, based on new data."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]