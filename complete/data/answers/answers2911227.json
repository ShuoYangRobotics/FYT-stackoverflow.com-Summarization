[[{"code": "<pre>\n<code>\n domain = 'subdomain.domain.ext'\nname, ext = domain.split('.')[-2:]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You mean internet domain name, like www.stackoverflow.com?", "If so, then just use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 'www.stackoverflow.com'.rsplit('.', 1)\n['www.stackoverflow', 'com']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Depending on your application, be a little wary of simply taking the part following the last '.'.", "That works fine for .com, .net, .org, etc but will likely fall over for many County Code TLDs.", "E.g.", "bit.ly or google.co.uk."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "County Code", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Country_code_top-level_domain"}, {"text": "bit.ly", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://bit.ly"}, {"href": "http://www.google.co.uk", "text": "google.co.uk", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["(By which I mean 'bit.ly' probably prefer to be identified including the .ly TLD whereas google probably don't want to be identified with a spurious .co remainder.", "Whether that's important will obviously depend on what you're doing)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "including", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "don't", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["In those complicated cases ... well, you've got your work cut out I suspect!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["A robust answer will probably depend on how you're gathering / storing your domains and what you really want back as the 'name'. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["For example, if you've got a set of domain names, with no subdomain information, then you could do the opposite of what's suggested above and simply take the first part off:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"stackoverflow.com\".split('.')[0]\n'stackoverflow'\n</code>\n</pre>\n", "senID": 5}], [{"text": ["If you always want to get the last part of a domain name, you can:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n subdomain, _, domain= fqdn.rpartition('.')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I guess you will find urlparse module interesting: http://docs.python.org/library/urlparse.html"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "urlparse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/urlparse.html", "text": "http://docs.python.org/library/urlparse.html", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["In general, it's not easy to work out where the user-registered bit ends and the registry bit begins.", "For example: a.com, b.co.uk, c.us, d.ca.us, e.uk.com, f.pvt.k12.wy.us..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The nice people at Mozilla have a project dedicated to listing domain suffixes under which the public can register domains:  http://publicsuffix.org/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://publicsuffix.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://publicsuffix.org/"}]}]]