[[{"code": "<pre>\n<code>\n for x in xrange(10):\n    for y in xrange(10):\n        print x*y\n        if x*y &gt; 50:\n            break\n    else:\n        continue  # only executed if break was not used\n    break\n</code>\n</pre>\n", "senID": 0}, {"text": ["The same works for deeper loops:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for x in xrange(10):\n    for y in xrange(10):\n        for z in xrange(10):\n            print x,y,z\n            if x*y*z == 30:\n                break\n        else:\n            continue\n        break\n    else:\n        continue\n    break\n</code>\n</pre>\n", "senID": 2}], [{"text": ["It has at least been suggested, but also rejected.", "I don't think there is another way, short of repeating the test or re-organizing the code.", "It is sometimes a bit annoying."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "rejected", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3136/"}]}, {"text": ["In the rejection message, Mr van Rossum mentions using return, which is really sensible and something I need to remember personally.", ":)"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "rejection message", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-3000/2007-July/008663.html"}, {"text": "return", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"code": "<pre>\n<code>\n def foo():\n    for x in range(10):\n        for y in range(10):\n            print x*y\n            if x*y &gt; 50:\n                return\nfoo()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can also refactor your code to use a generator.", "But this may not be a solution for all types of nested loops."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Sometimes I use a boolean variable.", "Naive, if you want, but I find it quite flexible and comfortable to read.", "Testing a variable may avoid testing again complex conditions and may also collect results from several tests in inner loops."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x_loop_must_break = False\n    for x in range(10):\n        for y in range(10):\n            print x*y\n            if x*y &gt; 50:\n                x_loop_must_break = True\n                break\n        if x_loop_must_break: break\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In this particular case, you can merge the loops with a modern python (3.0 and probably 2.6, too) by using itertools.product."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I for myself took this as a rule of thumb, if you nest too many loops (as in, more than 2), you are usually able to extract one of the loops into a different method or merge the loops into one, as in this case."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["At risk of being stoned to death - http://entrian.com/goto/download.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://entrian.com/goto/download.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://entrian.com/goto/download.html"}]}], [{"text": ["Use itertools.product!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import product\nfor x, y in product(range(10), range(10)):\n    #do whatever you want\n    break\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here's a link to itertools.product in the python documentation: \nhttp://docs.python.org/library/itertools.html#itertools.product"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/library/itertools.html#itertools.product", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#itertools.product"}]}]]