[[{"text": ["You might be better off using a tool like Selenium to automate the scraping using a web browser, so the JS executes and the page renders just like it would for a real user."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Selenium", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://seleniumhq.org/"}]}], [{"text": ["The PyV8 package nicely wraps Google's V8 Javascript engine for Python.", "It's particularly nice because not only can you call from Python to Javascript code, but you can call back from Javascript to Python code.", "This makes it quite straightforward to implement the usual browser-supplied objects (that is, everything in the Javascript global namespace: \"window\", \"document\", and so on), which you'd need to do if you were going to make a Javascript-capable Python browser emulator thing, possibly by hooking this up with mechanize."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "PyV8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pyv8/"}, {"text": "Google's V8 Javascript engine", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://code.google.com/apis/v8/"}, {"text": "mechanize", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://wwwsearch.sourceforge.net/mechanize/"}]}], [{"text": ["My favorite is PyPhantomJS.", "It's written using Python and PyQt4.", "It's completely headless and you can control it completely from JavaScript."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyPhantomJS", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dev.umaclan.com/projects/pyphantomjs"}]}, {"text": ["However, if you are looking to actually see the page, you can use QWebView from PyQt4 as well."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "QWebView", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You could also try defining Chickenfoot page triggers on the pages in question, executing whatever operations you want on the page and saving the results of the operation to a local file, and calling Firefox from the command line inside your program, followed by reading the file."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Chickenfoot", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groups.csail.mit.edu/uid/chickenfoot/"}]}], [{"text": ["i recommend that you take a look at some of the options available to you at http://wiki.python.org/moin/WebBrowserProgramming - surprisingly this is coming up as a common question (i've found three on stackoverflow today, by searching for the words \"python browser\" on google).", "if you do the same you'll find the other answers i gave."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://wiki.python.org/moin/WebBrowserProgramming", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/WebBrowserProgramming"}]}], [{"text": ["you may try zope browser"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://pypi.python.org/pypi?", ":action=display&amp;name=zope.testbrowser"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pypi.python.org/pypi?:action=display&amp;name=zope.testbrowser", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi?:action=display&name=zope.testbrowser"}]}], [{"text": ["There is also spynner \" a stateful programmatic web browser module for Python with Javascript/AJAX support based on the QtWebkit framework\" : http://code.google.com/p/spynner/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/spynner/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/spynner/"}]}]]