[[{"text": ["A one-liner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n max(max(v) if isinstance(v, collections.Iterable) else v for v in d.itervalues())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Needs at least Python 2.6 due to collections.Iterable ABC."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "collections.Iterable", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n max(max(k,max(v) if isinstance(v,collections.Iterable) else v) for k,v in x1.items())\n</code>\n</pre>\n", "senID": 0}, {"text": ["The other one-liner does not take account of the keys."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This is icky because it is not the designed use of a dictionary: the keys are meant to be keys, not themselves stores of data.", "I think you should reconsider your data structure."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT: The above was nonsense.", "Thanks to @SilentGhost for pointing it out."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["This is my version of one liner not needing 2.6:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x1 = {0:2, 2:1, 3:(1, 2), 20:3}\nx2 = {0:2, 2:1, 3:(1, 5), 20:3}\nprint max(max(values) if hasattr(values,'__iter__') else values for values in x1.values()) \nprint max(max(values) if hasattr(values,'__iter__') else values for values in x2.values())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 3\n5\n</code>\n</pre>\n", "senID": 3}, {"text": ["HOWEVER I strongly suggest to go to origin of these values and change the storing of integers to singleton tuples.Then you can use cleaner code:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "HOWEVER", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "singleton tuples", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n x1 = {0:(2,), 2:(1,), 3:(1, 2), 20:(3,)}\nx2 = {0:(2,), 2:(1,), 3:(1, 5), 20:(3,)}\nfor x in (x1,x2):\n    print max(max(values) for values in x.values())\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You could try this aproach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "create a set for storing integers", "tag": "none", "senID": 1}, {"text": "loop through the values of the dictionary\n", "tag": "none", "senID": 2}, {"text": "find max of set", "tag": "none", "senID": 3}]}, {"text": ["Something like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def maxofdict(x):\n   s = set()\n   for v in x.values():\n      if hasattr(v, '__len__'):\n         s.update(v)\n      else:\n         s.add(v)\n   return max(s)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Assuming the correct result for x1 = 4;"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def maxOfMixedDict(x):\n    max = 0\n    for key, value in x.items():\n        if(key &gt; max):\n            max = key\n        try:\n            for v2 in value:\n                if(v2 &gt; max):\n                    max = v2\n        except TypeError, e:\n            pass\n\n    return max\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You need a generic flatten() function.", "The Python standard library oddly enough doesn't provide one -- not even in itertools -- but googling around should get you an implementation.", "If you don't mind being potentially backwards incompatible, you can import a \"private\" implementation from tkinter:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "flatten()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "itertools", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "import", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "tkinter", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from _tkinter import _flatten as flatten\n\ndef mixed_max(d):\n    return max(flatten(d.items()))\n\nmixed_max({0: 2, 2: 1, 3: (1,2), 4: 0}) # =&gt; 4\nmixed_max({0: 2, 2: 1, 3: (1,5), 4: 0}) # =&gt; 5\n</code>\n</pre>\n", "senID": 1}]]