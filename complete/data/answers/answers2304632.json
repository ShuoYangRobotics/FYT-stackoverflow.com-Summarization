[[{"text": ["If you're talking about the @username thing they use on twitter, then you can use this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "@username", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import re\ntwitter_username_re = re.compile(r'@([A-Za-z0-9_]+)')\n</code>\n</pre>\n", "senID": 1}, {"text": ["To make every instance an HTML link, you could do something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n my_html_str = twitter_username_re.sub(lambda m: '&lt;a href=\"http://twitter.com/%s\"&gt;%s&lt;/a&gt;' % (m.group(1), m.group(0)), my_tweet)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Twitter recently released to open source both java and ruby (gem) implementations of the code they use for finding user names, hash tags, lists and urls."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "recently released", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://engineering.twitter.com/2010/02/introducing-open-source-twitter-text.html"}, {"href": "http://github.com/mzsanford/twitter-text-java", "text": "java", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://github.com/mzsanford/twitter-text-rb", "text": "ruby", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://rubygems.org/gems/twitter-text", "text": "gem", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["It is very regular expression oriented."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The only characters accepted in the form are A-Z, 0-9, and underscore.", "Usernames are not case-sensitive, though, so you could use r'@(?i)[a-z0-9_]+' to match everything correctly and also discern between users."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Usernames are not case-sensitive", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "r'@(?i)[a-z0-9_]+'", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Shorter, /@([\\w]+)/ works fine."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "/@([\\w]+)/", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n (?&lt;=^|(?&lt;=[^a-zA-Z0-9-_\\.]))@([A-Za-z]+[A-Za-z0-9]+)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Ive used this as it disregards emails"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here is a sample tweet"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n @Hello how are @you doing, email @000 me @ whats.up@example.com @shahmirj\n</code>\n</pre>\n", "senID": 3}, {"text": ["Picks Up:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n @Hello\n@you\n@shahmirj\n</code>\n</pre>\n", "senID": 5}, {"text": ["It will also work for hash tags, I use the same experssion with the @ changed to #"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "@", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "#", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["That's right I just sneaked myself in there :D"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Here is a PHP function that links urls and also mailto and twitter usernames and arguments tags."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Here is a PHP function", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.barattalo.it/2010/03/10/php-parse-url-mailto-and-also-twitters-usernames-and-arguments/"}]}]]