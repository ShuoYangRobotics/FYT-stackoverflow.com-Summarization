[[{"text": ["Floating-point division a/b is not mathematical division a \u00f7 b, except in very rare* circumstances.  "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "a/b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "em", "childList": []}, {"text": "b", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Generally, floating point division a/b is a \u00f7 b + \u03b5.  "], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "a/b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "em", "childList": []}, {"text": "b", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["This is true for two reasons."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Therefore, when you do something like repeatedly add 1/k values you're computing"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "1/k", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["1 \u00f7 k + \u03b5"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "k", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["And adding those up.", "Your result (if you had the right range) would be"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "range", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["n \u00d7 (1 \u00f7 k + \u03b5) = n \u00f7 k + n \u00d7 \u03b5"], "childNum": 5, "tag": "p", "senID": 6, "childList": [{"text": "n", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "k", "childNum": 0, "tag": "em", "childList": []}, {"text": "n", "childNum": 0, "tag": "em", "childList": []}, {"text": "k", "childNum": 0, "tag": "em", "childList": []}, {"text": "n", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["You've multiplied the small error, \u03b5, by n.   Making it a big error.", "(Except in rare cases."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "n", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["This is bad.", "Very bad.", "All floating point division introduces an error.", "Your job as a programmer is to do the algebra to avoid or defer division to prevent this.", "Good software design means good algebra to prevent errors being introduced by the division operator."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["[* The rare cases.", "In rare cases, the small error happens to be zero.", "The rare cases occur when your floating point values are small whole numbers or fractions that are sums of powers of two 1/2, 1/4, 1/8, etc.", "In the rare case that you have a benign number with a benign fractional part, the error will be zero.", "]  "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["Sure, they are different, because of how floating point division works."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; res = 0\n&gt;&gt;&gt; for x in xrange(5000): res += 0.1\n... \n&gt;&gt;&gt; res == 5000 * 0.1\nFalse\n</code>\n</pre>\n", "senID": 1}, {"text": ["There's a good explanation in the python official tutorial."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "a good explanation in the python official tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/floatingpoint.html"}]}], [{"text": ["Well if k divides n then definitely the first one is more precise :-) To be serious, if the division is floating point and n &gt; 1 then the first one will be more precise anyway though they will probably give different results, as nosklo said."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "k", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "n", "childNum": 0, "tag": "code", "childList": []}, {"text": "n &gt; 1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["BTW, in Python 2.6 the division is integer by default so you'll have very different results.", "1/k will always give 0 unless k &lt;= 1."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "1/k", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "k &lt;= 1", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Floating point arithmetic has representation and roundoff errors.", "For the types of data floating point numbers are intended to represent, real numbers of reasonable size, these errors are generally acceptable. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want to calculate the quotient of two numbers, the right way is simply to say result = n / k (beware if these are both integers and you have not said from __future__ import division, this is not what you may expect).", "The second way is silly, error-prone, and ugly."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "result = n / k", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "from __future__ import division", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["There is some discussion of floating point inexactness in the Python tutorial: http://docs.python.org/tutorial/floatingpoint.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/tutorial/floatingpoint.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/floatingpoint.html"}]}], [{"text": ["Even if we charitably assume a floating-point division, there's very definitely a difference in precision; the for loop is executed n - 1 times!"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "n - 1", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n assert (n-1) / k != n / k\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also depends on what res is initialised to in the second case :-)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "res", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Certainly there is a difference if you use floating point numbers, unless the Python interpreter/compiler you are using is capable of optimizing away the loop (Maybe Jython or IronPython might be able to?", "C compilers are pretty good at this)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you actually want these two approaches to be the same precision though, and you are using integers for your numerator and denominator, you can use the python fractions package"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "and you are using integers for your numerator and denominator", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/fractions.html", "text": "fractions", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n from fractions import Fraction\nn,k = 999,1000\nres = Fraction(0,1)\n\nfor i in range(0,n):\n    res += Fraction(1,k)\n\nprint float(res)\n</code>\n</pre>\n", "senID": 2}]]