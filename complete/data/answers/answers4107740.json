[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; class Node(object):\n...     def __init__(self, id_):\n...             self.id_ = id_\n... \n&gt;&gt;&gt; class Atom(Node):\n...     def __init__(self, symbol, id_):\n...             super(Atom, self).__init__(id_)\n...             self.symbol = symbol\n... \n&gt;&gt;&gt; a = Atom(\"FE\", 1)\n&gt;&gt;&gt; a.symbol\n'FE'\n&gt;&gt;&gt; a.id_\n1\n&gt;&gt;&gt; type(a)\n&lt;class '__main__.Atom'&gt;\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}, {"text": ["It's a good idea to inherit from object in your code."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "inherit from object", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["You have to call the __init__-method of the super-class manually."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Atom(Node):\n  def __init__(self, symbol, identifier)\n    Node.__init__(self, identifier)\n    self.symbol = symbol\n</code>\n</pre>\n", "senID": 1}], [{"text": ["When creating a class you need to use the self word in the declaration.", "After that you can define the other arguments.", "To inherit call the super init method:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Node():\n...   def __init__(self, identifier):\n...     self.identifier = identifier\n...\n&gt;&gt;&gt;\n&gt;&gt;&gt; class Atom(Node):\n...   def __init__(self, symbol, identifier):\n...     Node.__init__(self, identifier)\n...     self.symbol = symbol\n...\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; fe = Atom(\"Fe\", 1)\n&gt;&gt;&gt; fe.symbol\n'Fe'\n&gt;&gt;&gt; fe.identifier\n1\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You have two missing things in your code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Something more like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Node():\n  def __init__(self, identifier):\n    self.identifier = identifier\n\nclass Atom(Node):\n  def __init__(self, identifier, symbol)\n    Node.__init__(self, identifier)\n    self.symbol = symbol\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n class Node(): \n  def __init__(self, identifier): \n    self.identifier = identifier \n\nclass Atom(Node): \n  def __init__(self, symbol, *args, **kwargs)\n    super(Atom, self).__init__(*args, **kwargs)\n    self.symbol = symbol\n</code>\n</pre>\n", "senID": 0}, {"text": ["See here for an explanation of the *args and **kwargs.", "By using super, you can access the base class (superclass) of the Atom class and call it's __init__.", "Also, the self parameter needs to be included as well."], "childNum": 7, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html#arbitrary-argument-lists"}, {"text": "*args", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "**kwargs", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "super", "tag": "a", "pos": 1, "childList": [{"text": "super", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#super"}, {"text": "super", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"code": "<pre>\n<code>\n class Node(object): \n  def __init__(self, identifier): \n    self.identifier = identifier \n\nclass Atom(Node): \n  def __init__(self, symbol, *args, **kwargs)\n    super(Atom, self).__init__(*args, **kwargs)\n    self.symbol = symbol\n</code>\n</pre>\n", "senID": 0}, {"text": ["Points:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Node should inherit from ", "tag": "none", "senID": 2}, {"text": "Use ", "tag": "none", "senID": 3}, {"text": "Class member functions take ", "tag": "none", "senID": 4}]}]]