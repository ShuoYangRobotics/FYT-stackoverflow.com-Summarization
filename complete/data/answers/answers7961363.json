[[{"text": ["This should cover whatever you are trying to do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; t = [ 1, 2, 3, 1, 2, 5, 6, 7, 8 ]\n&gt;&gt;&gt; t\n[1, 2, 3, 1, 2, 5, 6, 7, 8]\n&gt;&gt;&gt; list( set( t ) )\n[1, 2, 3, 5, 6, 7, 8]\n&gt;&gt;&gt; s = [ 1, 2, 3 ]\n&gt;&gt;&gt; list( set( t ) - set( s ) )\n[8, 5, 6, 7]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It's a one-liner: list(set(source_list)) will do the trick."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "list(set(source_list))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["A set is something that can't possibly have duplicates."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you don't care about the order, just do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def remove_duplicates(l):\n    return list(set(l))\n</code>\n</pre>\n", "senID": 1}, {"text": ["A set is guaranteed to not have duplicates."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Check out this blog post for a few ways to do it, all benchmarked: http://www.peterbe.com/plog/uniqifiers-benchmark"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.peterbe.com/plog/uniqifiers-benchmark", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.peterbe.com/plog/uniqifiers-benchmark"}]}], [{"text": ["FWIW, the new Python way for removing duplicates from an iterable while keeping it in the original order is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; list(OrderedDict.fromkeys('abracadabra'))\n['a', 'b', 'r', 'c', 'd']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try using sets:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sets\nt = sets.Set(['a', 'b', 'c', 'd'])\nt1 = sets.Set(['a', 'b', 'c'])\n\nprint t | t1\nprint t - t1\n</code>\n</pre>\n", "senID": 1}]]