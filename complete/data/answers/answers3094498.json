[[{"code": "<pre>\n<code>\n import unicodedata as ud\n\nlatin_letters= {}\n\ndef is_latin(uchr):\n    try: return latin_letters[uchr]\n    except KeyError:\n         return latin_letters.setdefault(uchr, 'LATIN' in ud.name(uchr))\n\ndef only_roman_chars(unistr):\n    return all(is_latin(uchr)\n           for uchr in unistr\n           if uchr.isalpha()) # isalpha suggested by John Machin\n\n&gt;&gt;&gt; only_roman_chars(u\"\u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac means greek\")\nFalse\n&gt;&gt;&gt; only_roman_chars(u\"frapp\u00e9\")\nTrue\n&gt;&gt;&gt; only_roman_chars(u\"h\u00f4tel l\u0153we\")\nTrue\n&gt;&gt;&gt; only_roman_chars(u\"123 \u00e5ngstrom \u00f0 \u00e1\u00df\")\nTrue\n&gt;&gt;&gt; only_roman_chars(u\"russian: \u0433\u0430\u0433\u0430\")\nFalse\n</code>\n</pre>\n", "senID": 0}], [{"text": ["For what you say you want to do, your approach is about right.", "If you are running on Windows, I'd suggest using cp1252 instead of iso-8859-1.", "You might also allow cp1250 as well -- this would pick up eastern European countries like Poland, Czech Republic, Slovakia, Romania, Slovenia, Hungary, Croatia, etc where the alphabet is Latin-based.", "Other cp125x would include Turkish and Maltese ..."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "cp1252", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "iso-8859-1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "cp1250", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["You may also like to consider transcription from Cyrillic to Latin; as far as I know there are several systems, one of which may be endorsed by the UPU (Universal Postal Union)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'm a little intrigued by your comment \"Our shipping department doesn't want to have to fill out labels with, e.g., Chinese addresses\" ... three questions: (1) do you mean \"addresses in country X\" or \"addresses written in X-ese characters\" (2) wouldn't it be better for your system to print the labels?", "(3) how does the order get shipped if it fails your test?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["check the code in django.template.defaultfilters.slugify"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django.template.defaultfilters.slugify", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import unicodedata\nvalue = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore')\n</code>\n</pre>\n", "senID": 1}, {"text": ["is what you are looking for, you can then compare the resulting string with the original"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Checking for ISO-8559-1 would miss reasonable Western characters like '\u0153' and '\u20ac'.", "The solution depends on how you define \"Western\", and how you want to handle non-letters.", "Here's one approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import unicodedata\n\ndef is_permitted_char(char):\n    cat = unicodedata.category(char)[0]\n    if cat == 'L': # Letter\n        return 'LATIN' in unicodedata.name(char, '').split()\n    elif cat == 'N': # Number\n        # Only DIGIT ZERO - DIGIT NINE are allowed\n        return '0' &lt;= char &lt;= '9'\n    elif cat in ('S', 'P', 'Z'): # Symbol, Punctuation, or Space\n        return True\n    else:\n        return False\n\ndef is_valid(text):\n    return all(is_permitted_char(c) for c in text)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Maybe this will do if you're a django user?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.template.defaultfilters import slugify \n\ndef justroman(s):\n  return len(slugify(s)) == len(s)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use unicodedata to check character category"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "character category", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.fileformat.info/info/unicode/category/index.htm"}]}, {"code": "<pre>\n<code>\n import unicodedata\nunicodedata.category(u'a') # returns 'Ll'\nunicodedata.category(u'\u05d0') # returns 'Lo'\n</code>\n</pre>\n", "senID": 1}]]