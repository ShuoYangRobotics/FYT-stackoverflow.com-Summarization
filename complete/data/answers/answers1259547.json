[[{"text": ["the Book Expert Python Programming has discuss this topic: \"super Pitfalls\" section of Chapter 3.", "The book is worth reading.", "below is the book's conclusion:\nsuper usage has to be consistent: In a class hierarchy, super should be used everywhere or nowhere.", "Mixing super and classic calls is a confusing practice.", "People tend to avoid super, for their code to be more explicit.", "Edit: Today I read this part of the book again.", "So Copy several sentences again:\nSince super usage is tricky:\nAvoid multiple inheritance in your code.", "Be consistent with its usage and don't mix new-style and\nold-style.", "Check the class hierarchy before calling its methods in\nyour subclass.  "], "childNum": 8, "tag": "p", "senID": 0, "childList": [{"text": "Expert Python Programming", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.packtpub.com/expert-python-programming/"}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 3, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 4, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 5, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 6, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 7, "childList": []}]}], [{"text": ["You can use super, but as the article says, there are drawbacks.", "As long as you know them, there is no problem with using the feature.", "It's like people saying \"use composition, not inheritance\" or \"never use global variables\".", "If the feature exists, there is a reason.", "Just be sure to understand the why and the what and use them wisely."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The problem people have with super is more a problem of multiple inheritance.", "So it is a little unfair to blame super.", "Without super multiple inheritance is even worse.", "Michele Simionato nicely wrapped this up in his blog article on super:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "super", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "super", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "super", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "blog article", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.artima.com/weblogs/viewpost.jsp?thread=237121"}]}, {"text": ["So the main lesson is that you should try to avoid multiple inheritance, but of course there are legitimate use cases."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In the interest of consistency I always use super, even if for single inheritance it does not really matter (apart from the small advantage of not having to now the parent class name).", "In Python 3+ super is more convenient, so there one should definitely use super."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "super", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Yes, just stick to keyword arguments in your __init__ methods and you shouldn't have too many problems."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I agree that it is brittle, but no less so than using the name of the inherited class."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I like super()  more because it allows you to change the inherited class (for example when you're refactoring and add an intermediate class) without changing it on all the methods."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["super() tries to solve for you the problem of multiple inheritance; it's hard to replicate its semantics and you certainly shouldn't create any new semantics unless you're completely sure. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For single inheritance, there's really no difference between "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class X(Y):\n    def func(self):\n        Y.func(self)\n</code>\n</pre>\n", "senID": 2}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class X(Y):\n    def func(self):\n        super().func()\n</code>\n</pre>\n", "senID": 4}, {"text": ["so I guess that's just the question of taste."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]