[[{"code": "<pre>\n<code>\n (str(i)[-2:] == '.0' and str(i)[:-2] or str(i) for i in ...)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n def floatstrip(x):\n    if x == int(x):\n        return str(int(x))\n    else:\n        return str(x)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Be aware, though, that Python represents 0.1 as an imprecise float, on my system 0.10000000000000001 ."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n from decimal import Decimal\n'%g' % (Decimal(str(x)))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["rstrip doesn't do what you want it to do, it strips any of the characters you give it and not a suffix:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "rstrip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "any", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; '30000.0'.rstrip('.0')\n'3'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Actually, just '%g' % i  will do what you want.", "EDIT: as Robert pointed out in his comment this won't work for large numbers since it uses the default precision of %g which is 6 significant digits."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "'%g' % i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Since str(i) uses 12 significant digits, I think this will work:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "str(i)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; numbers = [ 0.0, 1.0, 0.1, 123456.7 ]\n&gt;&gt;&gt; ['%.12g' % n for n in numbers]\n['1', '0', '0.1', '123456.7']\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If you only care about 1 decimal place of precision (as in your examples), you can just do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (\"%.1f\" % i).replace(\".0\", \"\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will convert the number to a string with 1 decimal place and then remove it if it is a zero:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; (\"%.1f\" % 0).replace(\".0\", \"\")\n'0'\n&gt;&gt;&gt; (\"%.1f\" % 0.0).replace(\".0\", \"\")\n'0'\n&gt;&gt;&gt; (\"%.1f\" % 0.1).replace(\".0\", \"\")\n'0.1'\n&gt;&gt;&gt; (\"%.1f\" % 1.0).replace(\".0\", \"\")\n'1'\n&gt;&gt;&gt; (\"%.1f\" % 3000.0).replace(\".0\", \"\")\n'3000'\n&gt;&gt;&gt; (\"%.1f\" % 1.0000001).replace(\".0\", \"\")\n'1'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Using Python's string formatting (use str.format() with Python 3.0):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "string formatting", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#string-formatting"}, {"href": "http://docs.python.org/library/stdtypes.html#str.format", "text": "str.format()", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n from decimal import Decimal\n\ndef format_number(i):\n    return '%g' % (Decimal(str(i)))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; '%g' % 0\n'0'\n&gt;&gt;&gt; '%g' % 0.0\n'0'\n&gt;&gt;&gt; '%g' % 0.1\n'0.1'\n&gt;&gt;&gt; '%g' % 1.0\n'1'\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; x = '1.0'\n&gt;&gt;&gt; int(float(x))\n1\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; int(float(x))\n1\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n str(x)[-2:] == '.0' and int(x) or x\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Us the 0 prcision and add a period if you want one.", "EG \"%.0f."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print \"%.0f.\"%1.0\n1.\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}]]