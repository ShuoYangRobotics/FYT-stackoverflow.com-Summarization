[[{"text": ["Perhaps uuid.uuid4()?", "See: uuid."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "uuid", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/uuid.html"}]}], [{"text": ["You might want Python's UUID functions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["21.15. uuid \u2014 UUID objects according to RFC 4122"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "21.15. uuid \u2014 UUID objects according to RFC 4122", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/uuid.html"}]}], [{"text": ["Here ya go:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nid = os.urandom(32)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["unique and random are mutually exclusive.", "perhaps you want this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random\ndef uniqueid():\n    seed = random.getrandbits(32)\n    while True:\n       yield seed\n       seed += 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n unique_sequence = uniqueid()\nid1 = unique_sequence()\nid2 = unique_sequence()\nid3 = unique_sequence()\nids = [unique_sequence() for dummy in range(1000)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["no two returned id is the same (Unique) and this is based on a randomized seed value"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n def guid( *args ):\n    \"\"\"\n    Generates a universally unique ID.\n    Any arguments only create more randomness.\n    \"\"\"\n    t = long( time.time() * 1000 )\n    r = long( random.random()*100000000000000000L )\n    try:\n        a = socket.gethostbyname( socket.gethostname() )\n    except:\n        # if we can't get a network address, just imagine one\n        a = random.random()*100000000000000000L\n    data = str(t)+' '+str(r)+' '+str(a)+' '+str(args)\n    data = hashlib.md5(data).hexdigest()\n\n    return data\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Maybe the uuid module?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "uuid", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/uuid.html"}]}], [{"code": "<pre>\n<code>\n import time\ndef new_id():\n    time.sleep(0.000001)\n    return time.time()\n</code>\n</pre>\n", "senID": 0}, {"text": ["On my system, time.time() seems to offer 6 significant figures after the decimal point.", "With a brief sleep it should be guaranteed unique with at least a moderate amount of randomness down in the last two or three digits."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You could hash it as well if you're worried."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]