[[{"text": ["There are three options:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 4 / float(100)\n0.04\n&gt;&gt;&gt; 4 / 100.0\n0.04\n</code>\n</pre>\n", "senID": 1}, {"text": ["which is the same behavior as the C, C++, Java etc, or "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from __future__ import division\n&gt;&gt;&gt; 4 / 100\n0.04\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can also activate this behavior by passing the argument -Qnew to the Python interpreter:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "-Qnew", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ python -Qnew\n&gt;&gt;&gt; 4 / 100\n0.04\n</code>\n</pre>\n", "senID": 5}, {"text": ["The second option will be the default in Python 3.0.", "If you want to have the old integer division, you have to use the // operator. "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "//", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Edit: added section about -Qnew, thanks to \u03a4\u0396\u03a9\u03a4\u0396\u0399\u039f\u03a5!"], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "-Qnew", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://stackoverflow.com/users/6899/", "text": "\u03a4\u0396\u03a9\u03a4\u0396\u0399\u039f\u03a5", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Other answers suggest how to get a floating-point value.", "While this wlil be close to what you want, it won't be exact:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 0.4/100.\n0.0040000000000000001\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you actually want a decimal value, do this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "decimal", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import decimal\n&gt;&gt;&gt; decimal.Decimal('4') / decimal.Decimal('100')\nDecimal(\"0.04\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["That will give you an object that properly knows that 4 / 100 in base 10 is \"0.04\".", "Floating-point numbers are actually in base 2, i.e.", "binary, not decimal."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "base 10", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Make one or both of the terms a floating point number, like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 4.0/100.0\n</code>\n</pre>\n", "senID": 1}, {"text": ["Alternatively, turn on the feature that will be default in Python 3.0, 'true division', that does what you want.", "At the top of your module or script, do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import division\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You need to tell Python to use floating point values, not integers.", "You can do that simply by using a decimal point yourself in the inputs:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 4/100.0\n0.040000000000000001\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try 4.0/100"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["A simple route 4 / 100.0 "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["4.0 / 100"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You might want to look at Python's decimal package, also.", "This will provide nice decimal results."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "decimal", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-decimal.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; decimal.Decimal('4')/100\nDecimal(\"0.04\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You cant get a decimal value by dividing one integer with another, you'll allways get an integer that way (result truncated to integer).", "You need at least one value to be a decimal number."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]