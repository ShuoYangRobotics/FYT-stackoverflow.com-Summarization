[[{"text": ["You could do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for key in myRDP:\n    if key in myNames:\n        print key, myNames[key]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Your first attempt was slow because you were comparing every key in myRDP with every key in myNames.", "In algorithmic jargon, if myRDP has n elements and myNames has m elements, then that algorithm would take O(n\u00d7m) operations.", "For 600k elements each, this is 360,000,000,000 comparisons!"], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "every", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "every", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "n", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "m", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}, {"text": "n", "childNum": 0, "tag": "strong", "childList": []}, {"text": "m", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["But testing whether a particular element is a key of a dictionary is fast -- in fact, this is one of the defining characteristics of dictionaries.", "In algorithmic terms, the key in dict test is O(1), or constant-time.", "So my algorithm will take O(n) time, which is one 600,000th of the time."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "key in dict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "n", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}]}], [{"text": ["Use sets, because they have a built-in intersection method which ought to be quick:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "intersection", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n myRDP = { 'Actinobacter': 'GATCGA...TCA', 'subtilus sp.': 'ATCGATT...ACT' }\nmyNames = { 'Actinobacter': '8924342' }\n\nrdpSet = set(myRDP)\nnamesSet = set(myNames)\n\nfor name in rdpSet.intersection(namesSet):\n    print name, myNames[name]\n\n# Prints: Actinobacter 8924342\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n for key in myRDP:\n    name = myNames.get(key, None)\n    if name:\n        print key, name\n</code>\n</pre>\n", "senID": 0}, {"text": ["dict.get returns the default value you give it (in this case, None) if the key doesn't exist."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "dict.get", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You could start by finding the common keys and then iterating over them.", "Set operations should be fast because they are implemented in C, at least in modern versions of Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n common_keys = set(myRDP).intersection(myNames)\nfor key in common_keys:\n    print key, myNames[key]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use the get method instead:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "get", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for key in myRDP:\n    value = myNames.get(key)\n    if value != None:\n      print key, \"=\", value\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Copy both dictionaries into one dictionary/array.", "This makes sense as you have 1:1 related values.", "Then you need only one search, no comparison loop, and can access the related value directly."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "one", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Example Resulting Dictionary/Array:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "code", "senID": 2}, {"code": "<pre>\n<code>\n [Name][Value1][Value2]\n\n[Actinobacter][GATCGA...TCA][8924342]\n\n[XYZbacter][BCABCA...ABC][43594344]\n</code>\n</pre>\n", "senID": 3}, {"senID": 4}, {"text": ["..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Here is my code for doing intersections, unions, differences, and other set operations on dictionaries:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class DictDiffer(object):\n    \"\"\"\n    Calculate the difference between two dictionaries as:\n    (1) items added\n    (2) items removed\n    (3) keys same in both but changed values\n    (4) keys same in both and unchanged values\n    \"\"\"\n    def __init__(self, current_dict, past_dict):\n    \tself.current_dict, self.past_dict = current_dict, past_dict\n    \tself.set_current, self.set_past = set(current_dict.keys()), set(past_dict.keys())\n    \tself.intersect = self.set_current.intersection(self.set_past)\n    def added(self):\n    \treturn self.set_current - self.intersect \n    def removed(self):\n    \treturn self.set_past - self.intersect \n    def changed(self):\n    \treturn set(o for o in self.intersect if self.past_dict[o] != self.current_dict[o])\n    def unchanged(self):\n    \treturn set(o for o in self.intersect if self.past_dict[o] == self.current_dict[o])\n\nif __name__ == '__main__':\n    import unittest\n    class TestDictDifferNoChanged(unittest.TestCase):\n    \tdef setUp(self):\n    \t\tself.past = dict((k, 2*k) for k in range(5))\n    \t\tself.current = dict((k, 2*k) for k in range(3,8))\n    \t\tself.d = DictDiffer(self.current, self.past)\n    \tdef testAdded(self):\n    \t\tself.assertEqual(self.d.added(), set((5,6,7)))\n    \tdef testRemoved(self):\t\t\n    \t\tself.assertEqual(self.d.removed(), set((0,1,2)))\n    \tdef testChanged(self):\n    \t\tself.assertEqual(self.d.changed(), set())\n    \tdef testUnchanged(self):\n    \t\tself.assertEqual(self.d.unchanged(), set((3,4)))\n    class TestDictDifferNoCUnchanged(unittest.TestCase):\n    \tdef setUp(self):\n    \t\tself.past = dict((k, 2*k) for k in range(5))\n    \t\tself.current = dict((k, 2*k+1) for k in range(3,8))\n    \t\tself.d = DictDiffer(self.current, self.past)\n    \tdef testAdded(self):\n    \t\tself.assertEqual(self.d.added(), set((5,6,7)))\n    \tdef testRemoved(self):\t\t\n    \t\tself.assertEqual(self.d.removed(), set((0,1,2)))\n    \tdef testChanged(self):\n    \t\tself.assertEqual(self.d.changed(), set((3,4)))\n    \tdef testUnchanged(self):\n    \t\tself.assertEqual(self.d.unchanged(), set())\n    unittest.main()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If the entries are sorted, you can try a binary search algorithm.", "Its the fastest search method you could do here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "binary search algorithm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Binary_search_algorithm"}]}]]