[[{"text": ["Try with basic list comprehension:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [ x for x in l if x[1] == \"Plot\" ]\n[[8, 'Plot', 'Sunday'], [12, 'Plot', 'Monday'], [10, 'Plot', 'Tuesday'], [14, 'Plot', 'Wednesday'], [19, 'Plot', 'Thursday'], [28, 'Plot', 'Friday']]\n&gt;&gt;&gt; [ x for x in l if x[1] == \"unPlot\" ]\n[[1, 'unPlot', 'Monday'], [4, 'unPlot', 'Tuesday'], [6, 'unPlot', 'Wednesday'], [1, 'unPlot', 'Thursday'], [10, 'unPlot', 'Friday'], [3, 'unPlot', 'Saturday']]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or with filter if you fancy functional programming:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "filter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; filter(lambda x: x[1] == \"Plot\", l)\n[[8, 'Plot', 'Sunday'], [12, 'Plot', 'Monday'], [10, 'Plot', 'Tuesday'], [14, 'Plot', 'Wednesday'], [19, 'Plot', 'Thursday'], [28, 'Plot', 'Friday']]\n&gt;&gt;&gt; filter(lambda x: x[1] == \"unPlot\", l)\n[[1, 'unPlot', 'Monday'], [4, 'unPlot', 'Tuesday'], [6, 'unPlot', 'Wednesday'], [1, 'unPlot', 'Thursday'], [10, 'unPlot', 'Friday'], [3, 'unPlot', 'Saturday']]\n</code>\n</pre>\n", "senID": 3}, {"text": ["I personally find list comprehensions much clearer.", "It's certainly the most \"pythonic\" way."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n data = [[8, \"Plot\", \"Sunday\"], [1, \"unPlot\", \"Monday\"], [12, \"Plot\", \"Monday\"], [10, \"Plot\", \"Tuesday\"], [4, \"unPlot\", \"Tuesday\"], [14, \"Plot\", \"Wednesday\"], [6, \"unPlot\", \"Wednesday\"], [1, \"unPlot\", \"Thursday\"], [19, \"Plot\", \"Thursday\"], [28, \"Plot\", \"Friday\"], [10, \"unPlot\", \"Friday\"], [3, \"unPlot\", \"Saturday\"]]\n\nres = {'Plot':[],'unPlot':[]}\nfor i in data: res[i[1]].append(i)\n</code>\n</pre>\n", "senID": 0}, {"text": ["This way you iterate the list once"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n yourList=[[8, \"Plot\", \"Sunday\"], [1, \"unPlot\", \"Monday\"], [12, \"Plot\", \"Monday\"], [10, \"Plot\", \"Tuesday\"], [4, \"unPlot\", \"Tuesday\"], [14, \"Plot\", \"Wednesday\"], [6, \"unPlot\", \"Wednesday\"], [1, \"unPlot\", \"Thursday\"], [19, \"Plot\", \"Thursday\"], [28, \"Plot\", \"Friday\"], [10, \"unPlot\", \"Friday\"], [3, \"unPlot\", \"Saturday\"]]\nplotList=[]\nunPlotList=[]\n\nfor i in yourList:\n    if \"Plot\" in i:\n        plotList.append(i)\n    else:\n        unPlotList.append(i)\n</code>\n</pre>\n", "senID": 1}, {"text": ["or shorter with comprehension:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n plotList = [i for i in yourList if \"Plot\" in i]\nunPlotList = [i for i in yourList if \"unPlot\" in i]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Use list comprehension:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = [[8, \"Plot\", \"Sunday\"], [1, \"unPlot\", \"Monday\"], [12, \"Plot\", \"Monday\"], [10, \"Plot\", \"Tuesday\"], [4, \"unPlot\", \"Tuesday\"], [14, \"Plot\", \"Wednesday\"], [6, \"unPlot\", \"Wednesday\"], [1, \"unPlot\", \"Thursday\"], [19, \"Plot\", \"Thursday\"], [28, \"Plot\", \"Friday\"], [10, \"unPlot\", \"Friday\"], [3, \"unPlot\", \"Saturday\"]]\n\nlist1 = [x for x in l if x[1] == \"Plot\"]\n\nlist2 = [x for x in l if x[1] == \"unPlot\"]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use list comprehensions, e.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # old_list elements should be tuples if they're fixed-size, BTW\nlist1 = [(X, Y, Z) for X, Y, Z in old_list if Y == 'Plot']\nlist2 = [(X, Y, Z) for X, Y, Z in old_list if Y == 'unPlot']\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to traverse the input list only once, then maybe:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def split_list(old_list):\n    list1 = []\n    list2 = []\n    for X, Y, Z in old_list:\n        if Y == 'Plot':\n            list1.append((X, Y, Z))\n        else:\n            list2.append((X, Y, Z))\n    return list1, list2\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You could simply go through the list, and check if the value is \"Plot\" like this: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in List:\n  if i[1]==\"Plot\":\n    list1.append(i)\n  else:\n    list2.append(i)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can also do it with the filter command:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#filter"}]}, {"code": "<pre>\n<code>\n list1 = filter(lambda x: x[1] == \"Plot\", list)\nlist2 = filter(lambda x: x[1] == \"unPlot\", list)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I have a helper function for the general case of partitioning a list in two:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def partition(iterable, condition):\n        def partition_element(partitions, element):\n            (partitions[0] if condition(element) else partitions[1]).append(element)\n            return partitions\n        return reduce(partition_element, iterable, ([], []))\n</code>\n</pre>\n", "senID": 1}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; partition([1, 2, 3, 4], lambda d: d % 2 == 0)\n([2, 4], [1, 3])\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or in your case:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; partition(your_list, lambda i: i[1] == \"Plot\")\n</code>\n</pre>\n", "senID": 5}]]