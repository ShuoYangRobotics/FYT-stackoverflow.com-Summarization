[[{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dictionary['foo' if otherset == 'bar' else 'bar'].discard(element)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use a dictionary to look up the other set:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; other={'foo':'bar','bar':'foo'}\n&gt;&gt;&gt; d = { \"foo\": set([\"a\", \"b\"]), \"bar\": set([\"b\", \"c\"]) }\n&gt;&gt;&gt; element = \"b\"\n&gt;&gt;&gt; setname = \"bar\"\n&gt;&gt;&gt; d[other[setname]].discard(element)\n&gt;&gt;&gt; d\n{'foo': set(['a']), 'bar': set(['c', 'b'])}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n keys = dict.keys()\ndict[keys[1 - keys.index(Other_Set)]].discard(Element)\n</code>\n</pre>\n", "senID": 1}, {"text": ["With discard, you don't get a KeyError if the element's not in the set.", "Thus, you don't need your check (another alternative is to just ignore the KeyError).", "And 1 - removes the need for the abs."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "discard", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "KeyError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "KeyError", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "1 -", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "abs", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["This one might suit you if you do not know a priori the names of the keys in dct:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dct", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n dct={ \"foo\": set([\"a\", \"b\"]), \"bar\": set([\"c\", \"d\"]) }\n\nelement='b'\nother_set='bar'\n\nfor key,value in dct.iteritems():\n    if key != other_set:\n        value.discard(element)\n\nprint(dct)\n# {'foo': set(['a']), 'bar': set(['c', 'd'])}\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n element = \"b\"\nother = \"bar\"\nd = { \"foo\": set([\"a\", \"b\"]), \"bar\": set([\"b\", \"c\"]) }\ntheSet = d[[s for s in d.iterkeys() if s != other][0]]\ntheSet.discard(element)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["My variation, generic for any number of sets, takes out given item for all the others:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict_of_sets={'foo':set(['a','b','c']),'bar': set(['d','b','e']),'onemore': set(['a','e','b'])}\ngivenset,givenitem='bar','b'\notherset= (key for key in dict_of_sets if key != givenset)\nfor setname in otherset:\n  dict_of_sets[setname].discard(givenitem)\n\nprint dict_of_sets\n\n\"\"\"Output:\n{'foo': set(['c', 'a']), 'bar': set(['e', 'b', 'd']), 'onemore': set(['e', 'a'])}\n\"\"\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is a much more \"pythonic\" way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = { \"foo\": set([\"a\", \"b\"]), \"bar\": set([\"b\", \"c\"]) }\n\n&gt;&gt;&gt; d['foo']-=d['bar']\n&gt;&gt;&gt; d\n{'foo': set(['a']), 'bar': set(['c', 'b'])}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course d['foo'] could be d[hashable_key] with hashable_key having user input or what have you.  "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "d['foo']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "d[hashable_key]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Recall that the operators - &amp; ^ | on sets are overloaded to the respective mutating methods of:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Recall that the operators", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#set"}, {"text": "- &amp; ^ |", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n a_set.difference_update(other_set) # also \"-\"\na_set.intersection_update(other_set) # also \"&amp;\"\na_set.symmetric_difference_update(other_set) # also \"^\"\na_set.update(other_set) # also \"-\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["You can then use augmented assignment -= to modify the set value of 'foo' in place.", "All these other solutions offered here seem -- too wordy to me."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "-=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit I misread the OP, and ignore this as an answer.", "I voted up the best solution. "], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "the best solution", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3368613/remove-a-given-element-from-the-other-set-in-a-dict-of-two-sets/3368649#3368649"}]}]]