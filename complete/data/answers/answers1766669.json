[[{"text": ["We can't guess what you are trying to do, nor what's in your code, not what \"setting many different codecs\" means, nor what u\"string\" is supposed to do for you."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Please change your code to its initial state so that it reflects as best you can what you are trying to do, run it again, and then edit your question to provide (1) the full traceback and error message that you get (2) snippet encompassing the last statement in your script that appears in the traceback (3) a brief description of what you want the code to do (4) what version of Python you are running."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit after details added to question:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit after details added to question:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["(0) Let's try some transformations on the failing statement:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Original:\nprint \"Error reading file %s\"%u\"%s/%s\"%(folder, f)\nAdd spaces for reduced illegibility:\nprint \"Error reading file %s\" % u\"%s/%s\" % (folder, f)\nAdd parentheses to emphasise evaluation order:\nprint (\"Error reading file %s\" % u\"%s/%s\") % (folder, f)\nEvaluate the (constant) expression in parentheses:\nprint u\"Error reading file %s/%s\" % (folder, f)"], "childNum": 11, "tag": "p", "senID": 4, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "print \"Error reading file %s\"%u\"%s/%s\"%(folder, f)", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "print \"Error reading file %s\" % u\"%s/%s\" % (folder, f)", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "print (\"Error reading file %s\" % u\"%s/%s\") % (folder, f)", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "print u\"Error reading file %s/%s\" % (folder, f)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Is that really what you intended?", "Suggestion: construct the path ONCE, using a better method (see point (2) below)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["(1) In general, use repr(foo) or \"%r\" % foo for diagnostics.", "That way, your diagnostic code is much less likely to cause an exception (as is happening here) AND you avoid ambiguity.", "Insert the statement print repr(folder), repr(f) before you try to get the size, rerun, and report back."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "repr(foo)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"%r\" % foo", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "print repr(folder), repr(f)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["(2) Don't make paths by u\"%s/%s\" % (folder, filename) ... use os.path.join(folder, filename)"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "u\"%s/%s\" % (folder, filename)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.path.join(folder, filename)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["(3) Don't have bare excepts, check for known problems.", "So that unknown problems don't remain unknown, do something like this:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n try:\n    some_code()\nexcept ReasonForBaleOutError:\n    continue\nexcept: \n    # something's gone wrong, so get diagnostic info\n    print repr(interesting_datum_1), repr(interesting_datum_2)\n    # ... and get traceback and error message\n    raise\n</code>\n</pre>\n", "senID": 9}, {"text": ["A more sophisticated way would involve logging instead of printing, but the above is much better than not knowing what's going on."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Further edits after rtm(\"os.walk\"), remembering old legends, and re-reading your code:"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "Further edits", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["(4) os.walk() walks over the whole tree; you don't need to call it recursively."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["(5) If you pass a unicode string to os.walk(), the results (paths, filenames) are reported as unicode.", "You don't need all that u\"blah\" stuff.", "Then you just have to choose how you display the unicode results."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["(6) Removing paths with \"$\" in them: You must modify the list in situ but your method is dangerous.", "Try something like this:"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n for i in xrange(len(folders), -1, -1):\n    if '$' in folders[i]:\n        del folders[i]\n</code>\n</pre>\n", "senID": 15}, {"text": ["(7) Your refer to files by joining a folder name and a file name.", "You are using the ORIGINAL folder name; when you rip out the recursion, this won't work; you'll need to use the currently-discarded content[0] value reported by os.walk."], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "content[0]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["(8) You should find yourself using something very simple like:"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n for folder, subfolders, filenames in os.walk(unicoded_top_folder):\n</code>\n</pre>\n", "senID": 18}, {"text": ["There's no need for generator = os.walk(...); try: content = generator.next() etc and BTW if you ever need to do generator.next() in the future, use except StopIteration instead of a bare except."], "childNum": 3, "tag": "p", "senID": 19, "childList": [{"text": "generator = os.walk(...); try: content = generator.next()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "generator.next()", "childNum": 0, "tag": "code", "childList": []}, {"text": "except StopIteration", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["(9) If the caller provides a non-existent folder, no exception is raised, it just does nothing.", "If the provided folder is exists but is empty, ditto.", "If you need to distinguish between these two scenarios, you'll need to do extra testing yourself."], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"text": ["Response to this comment from the OP: \"\"\"Thanks, please read the info repr() has shown in the first post.", "I don't know why it printed so many different items, but it looks like they all have problems.", "And the common thing between all of them is they are .ink files.", "May that be the problem?", "Also, in the last ones, the firefox ones, it prints ( Modalitrovvisoria) while the real file name from Explorer contains ( Modalit\u00e0 provvisoria)\"\"\""], "childNum": 1, "tag": "p", "senID": 21, "childList": [{"text": "Response to this comment from the OP:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["(10) Umm that's not \".INK\".lower(), it's \".LNK\".lower() ... perhaps you need to change the font in whatever you're reading that with."], "childNum": 0, "tag": "p", "senID": 22, "childList": []}, {"text": ["(11) The fact that the \"problem\" file names all end in \".lnk\" /may/ be something to do with os.walk() and/or Windows doing something special with the names of those files."], "childNum": 0, "tag": "p", "senID": 23, "childList": []}, {"text": ["(12) I repeat here the Python statement that you used to produce that output, with some whitespace introduced :"], "childNum": 0, "tag": "p", "senID": 24, "childList": []}, {"code": "<pre>\n<code>\n print repr(\n    \"Error reading file %s\" \\\n    % u\"%s/%s\" % (\n        folder.decode('utf-8','ignore'),\n        f.decode('utf-8','ignore')\n        )\n    )\n</code>\n</pre>\n", "senID": 25}, {"text": ["It seems that you have not read, or not understood, or just ignored, the advice I gave you in a comment on another answer (and that answerer's reply): UTF-8 is NOT relevant in the context of file names in a Windows file system."], "childNum": 2, "tag": "p", "senID": 26, "childList": [{"text": "UTF-8 is NOT relevant in the context of file names in a Windows file system.", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "UTF-8 is NOT relevant in the context of file names in a Windows file system.", "tag": "em"}]}, {"text": "UTF-8 is NOT relevant in the context of file names in a Windows file system.", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["We are interested in exactly what folder and f refer to.", "You have trampled all over the evidence by attempting to decode it using UTF-8.", "You have compounded the obfuscation by using the \"ignore\" option.", "Had you used the \"replace\" option, you would have seen \"( Modalit\\ufffdrovvisoria)\".", "The \"ignore\" option has no place in debugging. "], "childNum": 0, "tag": "p", "senID": 27, "childList": []}, {"text": ["In any case, the fact that some of the file names had some kind of error but appeared NOT to lose characters with the \"ignore\" option (or appeared NOT to be mangled) is suspicious."], "childNum": 0, "tag": "p", "senID": 28, "childList": []}, {"text": ["Which part of \"\"\"Insert the statement print repr(folder), repr(f) \"\"\" did you not understand?", "All that you need to do is something like this:"], "childNum": 1, "tag": "p", "senID": 29, "childList": [{"text": "print repr(folder), repr(f)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print \"Some meaningful text\" # \"error reading file\" isn't\nprint \"folder:\", repr(folder)\nprint \"f:\", repr(f)\n</code>\n</pre>\n", "senID": 30}, {"text": ["(13) It also appears that you have introduced UTF-8 elsewhere in your code, judging by the traceback: self.exploreRec((\"%s/%s\"%(folder, f)).encode(\"utf-8\"), treshold)"], "childNum": 1, "tag": "p", "senID": 31, "childList": [{"text": "self.exploreRec((\"%s/%s\"%(folder, f)).encode(\"utf-8\"), treshold)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I would like to point out that you still do not know whether folder and f refer to str objects or unicode objects, and two answers have suggested that they are very likely to be str objects, so why introduce blahbah.encode() ?"], "childNum": 0, "tag": "p", "senID": 32, "childList": []}, {"text": ["A more general point: Try to understand what your problem(s) is/are, BEFORE changing your script.", "Thrashing about trying every suggestion coupled with near-zero effective debugging technique is not the way forward."], "childNum": 0, "tag": "p", "senID": 33, "childList": []}, {"text": ["(14) When you run your script again, you might like to reduce the volume of the output by running it over some subset of C:\\ ... especially if you proceed with my original suggestion to have debug printing of ALL file names, not just the erroneous ones (knowing what non-error ones look like could help in understanding the problem)."], "childNum": 0, "tag": "p", "senID": 34, "childList": []}, {"text": ["Response to Bryan McLemore's \"clean up\" function:"], "childNum": 1, "tag": "p", "senID": 35, "childList": [{"text": "Response to Bryan McLemore's \"clean up\" function:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["(15) Here is an annotated interactive session that illustrates what actually happens with os.walk() and non-ASCII file names:"], "childNum": 0, "tag": "p", "senID": 36, "childList": []}, {"code": "<pre>\n<code>\n C:\\junk\\terabytest&gt;dir\n[snip]\n Directory of C:\\junk\\terabytest\n\n20/11/2009  01:28 PM    &lt;DIR&gt;          .\n20/11/2009  01:28 PM    &lt;DIR&gt;          ..\n20/11/2009  11:48 AM    &lt;DIR&gt;          empty\n20/11/2009  01:26 PM                11 Ha\u0161ek.txt\n20/11/2009  01:31 PM             1,419 tbyte1.py\n29/12/2007  09:33 AM                 9 \u00d0.txt\n               3 File(s)          1,439 bytes\n[snip]\n\nC:\\junk\\terabytest&gt;\\python26\\python\nPython 2.6.4 (r264:75708, Oct 26 2009, 08:23:19) [MSC v.1500 32 bit (Intel)] onwin32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; from pprint import pprint as pp\n&gt;&gt;&gt; import os\n</code>\n</pre>\n", "senID": 37}, {"text": ["os.walk(unicode_string) -> results in unicode objects"], "childNum": 0, "tag": "p", "senID": 38, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; pp(list(os.walk(ur\"c:\\junk\\terabytest\")))\n[(u'c:\\\\junk\\\\terabytest',\n  [u'empty'],\n  [u'Ha\\u0161ek.txt', u'tbyte1.py', u'\\xd0.txt']),\n (u'c:\\\\junk\\\\terabytest\\\\empty', [], [])]\n</code>\n</pre>\n", "senID": 39}, {"text": ["os.walk(str_string) -> results in str objects"], "childNum": 0, "tag": "p", "senID": 40, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; pp(list(os.walk(r\"c:\\junk\\terabytest\")))\n[('c:\\\\junk\\\\terabytest',\n  ['empty'],\n  ['Ha\\x9aek.txt', 'tbyte1.py', '\\xd0.txt']),\n ('c:\\\\junk\\\\terabytest\\\\empty', [], [])]\n</code>\n</pre>\n", "senID": 41}, {"text": ["cp1252 is the encoding I'd expect to be used on my system ..."], "childNum": 0, "tag": "p", "senID": 42, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; u'\\u0161'.encode('cp1252')\n'\\x9a'\n&gt;&gt;&gt; 'Ha\\x9aek'.decode('cp1252')\nu'Ha\\u0161ek'\n</code>\n</pre>\n", "senID": 43}, {"text": ["decoding the str with UTF-8 doesn't work, as expected"], "childNum": 0, "tag": "p", "senID": 44, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 'Ha\\x9aek'.decode('utf8')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"C:\\python26\\lib\\encodings\\utf_8.py\", line 16, in decode\n    return codecs.utf_8_decode(input, errors, True)\nUnicodeDecodeError: 'utf8' codec can't decode byte 0x9a in position 2: unexpected code byte\n</code>\n</pre>\n", "senID": 45}, {"text": ["ANY random string of bytes can be decoded without error using latin1"], "childNum": 0, "tag": "p", "senID": 46, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 'Ha\\x9aek'.decode('latin1')\nu'Ha\\x9aek'\n</code>\n</pre>\n", "senID": 47}, {"text": ["BUT U+009A is a control character (SINGLE CHARACTER INTRODUCER), i.e.", "meaningless gibberish; absolutely nothing to do with the correct answer"], "childNum": 0, "tag": "p", "senID": 48, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; unicodedata.name(u'\\u0161')\n'LATIN SMALL LETTER S WITH CARON'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 49}, {"text": ["(16) That example shows what happens when the character is representable in the default character set; what happens if it's not?", "Here's an example (using IDLE this time) of a file name containing CJK ideographs, which definitely aren't representable in my default character set:"], "childNum": 0, "tag": "p", "senID": 50, "childList": []}, {"code": "<pre>\n<code>\n IDLE 2.6.4      \n&gt;&gt;&gt; import os\n&gt;&gt;&gt; from pprint import pprint as pp\n</code>\n</pre>\n", "senID": 51}, {"text": ["repr(Unicode results) looks fine"], "childNum": 0, "tag": "p", "senID": 52, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; pp(list(os.walk(ur\"c:\\junk\\terabytest\\chinese\")))\n[(u'c:\\\\junk\\\\terabytest\\\\chinese', [], [u'nihao\\u4f60\\u597d.txt'])]\n</code>\n</pre>\n", "senID": 53}, {"text": ["and the unicode displays just fine in IDLE:"], "childNum": 0, "tag": "p", "senID": 54, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print list(os.walk(ur\"c:\\junk\\terabytest\\chinese\"))[0][2][0]\nnihao\u4f60\u597d.txt\n</code>\n</pre>\n", "senID": 55}, {"text": ["The str result is evidently produced by using .encode(whatever, \"replace\") -- not very useful e.g.", "you can't open the file by passing that as the file name."], "childNum": 0, "tag": "p", "senID": 56, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; pp(list(os.walk(r\"c:\\junk\\terabytest\\chinese\")))\n[('c:\\\\junk\\\\terabytest\\\\chinese', [], ['nihao??.txt'])]\n</code>\n</pre>\n", "senID": 57}, {"text": ["So the conclusion is that for best results, one should pass a unicode string to os.walk(), and deal with any display problems."], "childNum": 0, "tag": "p", "senID": 58, "childList": []}], [{"text": ["Does this help: http://farmdev.com/talks/unicode/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://farmdev.com/talks/unicode/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://farmdev.com/talks/unicode/"}]}, {"text": ["It's hard to help more without knowing more or seeing some code, like where your directory or file names are coming from."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Python uses ASCII encoding by default, which is annoying.", "If you want to change it permanently, find and edit site.py file, search for def setencoding() and few lines below change  encoding = \"ascii\" to  encoding = \"utf-8\".", "Bye, bye default ASCII encoding."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "site.py", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "def setencoding()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "encoding = \"ascii\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "encoding = \"utf-8\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Are you running this program in a Windows cmd.exe box?", "If so, try running it in IDLE and see if you get the same errors.", "The Cmd.exe box doesn't do unicode, only ascii. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You are trying to perform some action (e.g., print) on unicode string that contains non-ASCII characters, and the string is being converted to ascii by default.", "You will need specify the encoding to correctly represent the string.", "It would help significantly, if you post some sample code of what you are trying to do."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["The simplest way to do this would be:\ns = u'ma\\xf1ana';\nprint s.encode('latin-1');"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "s = u'ma\\xf1ana';", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "print s.encode('latin-1');", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edited after details added to question:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edited after details added to question:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["In your case you need to decode the string you read first:\nf.decode();, \nso try changing \nu\"%s/%s\" % (folder, f)\nto \nos.path.join(folder, f.decode())"], "childNum": 8, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "f.decode();", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "u\"%s/%s\" % (folder, f)", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "os.path.join(folder, f.decode())", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Note, that 'latin-1' encoding might be needed to changed to what your file is named with"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["PS: John Machin has mentioned very helpful ways to improve and clean up the code.", "+1"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Some unicode items:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "putting ", "tag": "none", "senID": 1}, {"text": ["s = \"i'm a string\""], "childNum": 0, "tag": "code", "senID": 2, "childList": []}, {"text": ["u = u\"i'm unicode, at least in python &lt; \u06f3\""], "childNum": 0, "tag": "code", "senID": 3, "childList": []}, {"text": "If your work with files try to look into the ", "tag": "none", "senID": 4}]}, {"text": ["Further readings:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["http://www.amk.ca/python/howto/unicode"], "childNum": 0, "tag": "a", "senID": 6, "childList": []}, {"text": ["http://evanjones.ca/python-utf8.html"], "childNum": 0, "tag": "a", "senID": 7, "childList": []}]}], [{"code": "<pre>\n<code>\n u\"%s\" % f\n</code>\n</pre>\n", "senID": 0}, {"text": ["In various places you're doing something similar to the above code.", "This is exactly the wrong way to convert a str object to a unicode object as the conversion is done using sys.getdefaultencoding() (ascii), which is almost guaranteed to be wrong."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You should be using the encode/decode methods to convert to/from a unicode object.", "This requires knowing what encoding your input (the strings returned from os.walk) is.", "E.g., if the filenames are encoded in UTF-8"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n uf = f.decode('utf-8')\n</code>\n</pre>\n", "senID": 3}, {"text": ["will interpret f as a UTF-8 encoded sequence of bytes and give back the proper unicode object.", "Similarly, when you need to output the unicode object you would then convert it back to a str, specifying the valid encoding you want to output it as."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print uf.encode('utf-8')\n</code>\n</pre>\n", "senID": 5}], [{"text": ["instead of doing:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print \"Error reading file %s\"%u\"%s/%s\"%(folder, f)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print \"Error reading file %s\"%u\"%s/%s\"%(folder.encode('ascii','ignore'), f.encode('ascii','ignore'))\n</code>\n</pre>\n", "senID": 3}, {"text": ["Since the console can't print unicode chars, you can's see the correct name.", "'ignore' tells the codec to skip those characters.", "you can also use 'replace' (prints a '?", "'), 'xmlcharrefreplace' (replaces with &amp;x#### of the code point), 'backslashreplace' (replaces with \\x###### of the code)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You will need to encode every unicode string like this that you print."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I've had the misfortune of working in some codebases that weren't consistent with their encoding."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is a function we used to help clean it up:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def to_unicode(value):\n    if isinstance(value, unicode):\n        return value\n    elif isinstance(value, str):\n        try:\n            if value.startswith('\\xff\\xfe'):\n                return value.decode('utf-16-le')\n            elif value.startswith('\\xfe\\xff'):\n                return value.decode('utf-16-be')\n            else:\n                return value.decode('utf-8')\n        except UnicodeDecodeError:\n            return value.decode('latin-1')\n    else:\n        try:\n            return unicode(value)\n        except UnicodeError:\n            return to_unicode(str(value))\n        except TypeError:\n            if hasattr(value, '__unicode__'):\n                return value.__unicode__()\n</code>\n</pre>\n", "senID": 2}, {"text": ["So using that function you can use:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n print u\"Error reading file %s/%s\" % (to_unicode(folder), to_unicode(f))\n</code>\n</pre>\n", "senID": 4}]]