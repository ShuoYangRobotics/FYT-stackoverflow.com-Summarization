[[{"text": ["You should never have to shell quote.", "The correct way to do a command is to not do shell quoting and instead use subprocess.call or subprocess.Popen, and pass a list of unquoted arguments.", "This is immune to shell expansion."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "subprocess.call", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/3.0/library/subprocess.html#subprocess.call"}, {"text": "subprocess.Popen", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/3.0/library/subprocess.html#subprocess.Popen"}]}, {"text": ["i.e."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n subprocess.Popen(['echo', '\"', '$foo'], shell=False)\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want to unquote shell quoted data, you can use shlex.shlex like this:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "shlex.shlex", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/3.0/library/shlex.html?highlight=shlex#shlex.shlex"}]}, {"code": "<pre>\n<code>\n list(shlex.shlex(\"hello stack 'overflow'\\''s' quite cool\"))\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Looks like "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt; ipython\n\n# In [1]: \nimport pipes\n\n# In [2]: \npipes.quote(\"hello stack overflow's quite cool\")\n# Out[2]: '\"hello stack overflow\\'s quite cool\"'\n</code>\n</pre>\n", "senID": 1}, {"text": ["gets me far enough."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'm pretty sure that pipes.quote is broken, and should not be used, because it does not handle zero-length arguments correctly:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from pipes import quote\n&gt;&gt;&gt; args = ['arg1', '', 'arg3']\n&gt;&gt;&gt; print 'mycommand %s' % (' '.join(quote(arg) for arg in args))\nmycommand arg1  arg3\n</code>\n</pre>\n", "senID": 1}, {"text": ["I believe the result should be something like"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n mycommand arg1 '' arg3\n</code>\n</pre>\n", "senID": 3}], [{"text": ["To unquote, try  shlex.split()"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "shlex.split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["For shell quoting, this works:  I've rigorously tested it on Posix.", "[I'm assuming that the list2cmdline function supplied by Python works as advertised on Windows]"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "list2cmdline", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n # shell.py\nimport os\nif os.name == 'nt':\n    from subprocess import list2cmdline\n\n    def quote(arg):\n        return list2cmdline([arg])[0]\nelse:\n    import re\n    _quote_pos = re.compile('(?=[^-0-9a-zA-Z_./\\n])')\n\n    def quote(arg):\n        r\"\"\"\n        &gt;&gt;&gt; quote('\\t')\n        '\\\\\\t'\n        &gt;&gt;&gt; quote('foo bar')\n        'foo\\\\ bar'\n        \"\"\"\n        # This is the logic emacs uses\n        if arg:\n            return _quote_pos.sub('\\\\\\\\', arg).replace('\\n',\"'\\n'\")\n        else:\n            return \"''\"\n\n    def list2cmdline(args):\n        return ' '.join([ quote(a) for a in args ])\n</code>\n</pre>\n", "senID": 1}, {"text": ["The tests are here, if anyone cares."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/boostpro/bbot/blob/43cf775186d9f895f69992e800612e1c52a08a49/test/util_shell_tests.py"}]}], [{"text": ["The standard library module subprocess has the list2cmdline function which does this, albeit according to Microsoft rules so I am not sure how reliable it works in Unix-like environments for more complicated command lines."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Microsoft rules", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/17w5ykft.aspx"}]}]]