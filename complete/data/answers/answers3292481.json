[[{"text": ["The Zen of Python (import this if you don't know it), while being only a collection of trivial wisdoms rather than a list of concrete idioms, is all-important.", "There's not an idiom for everything, but the Zen can be applied in almost every case.", "The remaining question is how exactly you apply it ;-)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "import this", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Others may provide in-depth answer revolving around certain idioms.", "I, for my part, will just talk about one I use regularily, though too advanced to teach to every new Python user right away: Generator expressions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Generator expressions are iterables (and thus lazy).", "Period.", "A list/dict/set comprehension is just a generator expression fed to the list/dict/set constructor.", "Omit the second step by just using a generator expression whenever you can - it will save hogs of memory and in possibly some time when processing much data.", "Example: Don't build a list of booleans via list comprehension (or for-loop which would make a great list comprehension) and feed it to all().", "Just pass the underlying generator expression.", "If all values are True, you don't loose (much) performance, since you compute them all anyway.", "But if the first element of that 500 element list if False, you computed 499 elements too much.", "Plus, I feel warm and fuzzy about using a Haskell-like (lazy lists) feature in Python ;-)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "are", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["But I wouldn't call e.g.", "the use of the operator module an idiom - it's just knowing the standard lib and choosing wisely from it.", "It's there for exactly that reason - of course it's more optimized than you own half-assed implementation, and of course any user of the language who knows it will naturally use it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Admittedly, some might argue that this means there are no idioms, since it's all only about using the language's facilities wisely (taking advantage of lists being iterable instead of using range to get indexes, for example).", "I can't disagree, though I'd like to note that..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["-> while certainly not the most pyhonic solution, it doesn't brand one as \"total newbie who didn't even care to read the preface of a tutorial\".", "Of course knowing the libraries is required to be a guru (in any language).", "But not knowing some isn't too bad imho."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Here you are three interesting links, IMHO:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First of all: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["Code Like a Pythonista: Idiomatic\nPython"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}]}, {"text": ["and as a complement:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Google Python Style Guide"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["How not to write Python code"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}], [{"text": ["Obligatory link: Python Speed/Performance tips."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Speed/Performance tips", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/PythonSpeed/PerformanceTips"}]}], [{"text": ["In addition to David Goodger's tutorial already mentioned by someone, in a similar category (perhaps in a broad sense):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Rob Knight's ", "tag": "none", "senID": 1}, {"text": ["Python Patterns - An Optimization Anecdote"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": "Alex Martelli's google talk on ", "tag": "none", "senID": 3}]}], [{"text": ["I completely agree with SilentGhost's comment on writing idiomatic code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you compare Python to other languages (especially C), you'll discover that it is very much optimized for what I'll call the 'simple case' or the most straightforward solution.", "While in C you can optimize performance at the expense of creating unreadable code, in Python unreadable code is just that.", "I realize that this isn't as true today with smart compilers as it might have been years ago, but the principle is sound, I think."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As far as specific answers to your question, I'd think that Python programmers should be familiar with the String API, list comprehensions, maybe generators?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["People sometimes ask me where I picked up a certain tidbit of information and it is hard to answer because there isn't one definitive source in the world.", "Just keep reading SO, and Google things that seem not quite right, and you'll eventually pick it all up."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The most important optimization in python is to not worry about optimization until you find your program is running less-than-optimal and there's a bottleneck."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["And of course if you write idiomatic code as has been previously suggested, you'll rarely run into bottlenecks."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]