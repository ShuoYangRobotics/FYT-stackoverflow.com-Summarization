[[{"text": ["regex definition:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (?P&lt;zip&gt;...)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Creates a named group \"zip\""], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Zip:\\s*\n</code>\n</pre>\n", "senID": 3}, {"text": ["Match \"Zip:\" and zero or more whitespace characters"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n \\d\n</code>\n</pre>\n", "senID": 5}, {"text": ["Match a digit"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n \\w\n</code>\n</pre>\n", "senID": 7}, {"text": ["Match a word character [A-Za-z0-9_]"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n y.groupdict('zip')\n</code>\n</pre>\n", "senID": 9}, {"text": ["The groupdict method returns a dictionary with named groups as keys and their matches as values.", "In this case, the match for the \"zip\" group gets returned"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n y.group(2)\n</code>\n</pre>\n", "senID": 11}, {"text": ["Return the match for the second group, which is a unnamed group \"(...)\""], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Hope that helps."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}], [{"text": ["The search method will return an object containing the results of your regex pattern. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "search", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["groupdict returns a dictionnary of groups where the keys are the name of the groups defined by (?P...).", "Here name is a name for the group."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "groupdict", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "name", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["group returns a list of groups that are matched.", "\"State: NY\" is your third group.", "The first is the entire string and the second is \"Zip: 10010\"."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "group", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["This was a relatively simple question by the way.", "I simply looked up the method documentation on google and found this page.", "Google is your friend."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "this page", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pydoc.org/1.6/pre.html"}]}], [{"code": "<pre>\n<code>\n # my_regex = r' &lt;= this means that the string is a raw string, normally you'd need to use double backslashes\n# ( ... ) this groups something\n# ? this means that the previous bit was optional, why it's just after a group bracket I know not\n# * this means \"as many of as you can find\"\n# \\s is whitespace\n# \\d is a digit, also works with [0-9]\n# \\w is an alphanumeric character\nmy_regex = r'(?P&lt;zip&gt;Zip:\\s*\\d\\d\\d\\d\\d)\\s*(State:\\s*\\w\\w)'\naddrs = \"Zip: 10010 State: NY\"\n\n# Runs the grep on the string\ny = re.search(my_regex, addrs)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["The (?P&lt;identifier&gt;match) syntax is Python's way of implementing named capturing groups.", "That way, you can access what was matched by match using a name instead of just a sequential number."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "(?P&lt;identifier&gt;match)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "match", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Since the first set of parentheses is named zip, you can access its match using the match's groupdict method to get an {identifier: match} pair.", "Or you could use y.group('zip') if you're only interested in the match (which usually makes sense since you already know the identifier).", "You could also access the same match using its sequential number (1).", "The next match is unnamed, so the only way to access it is its number."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "zip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "groupdict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "{identifier: match}", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "y.group('zip')", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Adding to previous answers: In my opinion you'd better choose one type of groups (named or unnamed) and stick with it.", "Normally I use named groups.", "For example: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; my_regex = r'(?P&lt;zip&gt;Zip:\\s*\\d\\d\\d\\d\\d)\\s*(?P&lt;state&gt;State:\\s*\\w\\w)'\n&gt;&gt;&gt; addrs = \"Zip: 10010 State: NY\"\n&gt;&gt;&gt; y = re.search(my_regex, addrs)\n&gt;&gt;&gt; print y.groupdict()\n{'state': 'State: NY', 'zip': 'Zip: 10010'}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["strfriend isyourfriend:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "strfriend isyourfriend:", "tag": "a", "pos": 0, "childList": [{"text": "your", "tag": "em"}], "childNum": 1, "href": "http://strfrield.com/"}, {"text": "your", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["http://strfriend.com/vis?re=(Zip%3A\\s*\\d\\d\\d\\d\\d)\\s*(State%3A\\s*\\w\\w)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["EDIT: Why the heck is it making the entire line a link in the actual comment, but not the preview?"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]