[[{"text": ["To do precisely what you want, you could do something like the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import functools\ndef try_x_times(x, exceptions_to_catch, exception_to_raise, fn):\n    @functools.wraps(fn) #keeps name and docstring of old function\n    def new_fn(*args, **kwargs):\n        for i in xrange(x):\n            try:\n                return fn(*args, **kwargs)\n            except exceptions_to_catch:\n                 pass\n        raise exception_to_raise\n    return new_fn\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you just wrap the old function in this new function:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #instead of\n#risky_method(1,2,'x')\nnot_so_risky_method = try_x_times(3, (MyError,), myError2, risky_method)\nnot_so_risky_method(1,2,'x')\n\n#or just\ntry_x_times(3, (MyError,), myError2, risky_method)(1,2,'x')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Use a loop"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n i = 0\nwhile True:\n  try: myfunc(x); break;\n  except myError:\n    i = i + 1;\n    # print \"Trying again\"\n    if i &gt; 5: raise myError2;\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n for x in xrange(num_retries):\n    try:\n        myFunc()\n    except MyError, err:\n        continue\n        #time.sleep(1)\n    err = None\n    break\nif err:\n    raise MyError2\n#else:\n#    print \"Success!\"\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Try following snippet:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n while True:\n    try:\n        func()\n        break\n    except:\n        print \"Error. Gonna try again\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["But it is better to limit the number of retries."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n success = False\nattempts = 0\nwhile not success and attempts &lt; 10: # or however many times you want to attempt\n    try:\n        functionCall()\n        success = True\n    except:\n        i += 1\nif not success:\n    raise functionCallFailedError\n</code>\n</pre>\n", "senID": 0}, {"text": ["Hope this helps"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I like to do these problems with recursion:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def tryfor(times, on_failure, excepts, func, *args, **kwargs):\n    if times &lt; 1:\n        raise on_failure()\n    try:\n        return func(*args, **kwargs)\n    except excepts:\n        return tryfor(times-1, on_failure, excepts, func, *args, **kwargs)\n\n\ntryfor(3, PermanentException, (SomeError,), dostuff,1,2)\n</code>\n</pre>\n", "senID": 1}]]