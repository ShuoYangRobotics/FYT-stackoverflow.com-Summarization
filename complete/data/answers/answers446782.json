[[{"text": ["If you catch an exception and then want to rethrow it, this pattern is pretty simple:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this pattern", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nedbatchelder.com/blog/200711/rethrowing_exceptions_in_python.html"}]}, {"code": "<pre>\n<code>\n try:\n    do_something_dangerous()\nexcept:\n    do_something_to_apologize()\n    raise\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course if you want to raise the exception in the first place, that's easy, too:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "raise", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def do_something_dangerous(self):\n    raise Exception(\"Boo!\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["If that's not what you wanted, please provide more information!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Can't think of another way to \"get out\" of a function other than a) return, b) throw an exception, or c) terminate execution of the program."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The exception itself will terminate the function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def f():\n    a = 1 / 0  # will raise an exception\n    return a\n\ntry:\n    f()\nexcept:\n    print 'no longer in f()'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Assuming you want to \"stop\" execution inside of that method.", "There's a few things you can do."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Are you looking for yield?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["As others have pointed out, an exception will get you out of the method.", "You shouldn't be ashamed or embarassed by exceptions; an exception indicates an error, but that's not necessarily the same as a bug."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "error", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "bug", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["For example, say I'm writing a factorial function.", "Factorial isn't defined for negative numbers, so I might do this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def factorial(n):\n  if n &lt; 0:\n    raise ValueError\n  if n == 0:\n    return 1\n  return n*factorial(n-1)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I would then look for the exception:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n n = raw_input('Enter a number.')\ntry:\n  print factorial(n)\nexcept ValueError:\n  print 'You entered a negative number.'\n</code>\n</pre>\n", "senID": 4}, {"text": ["I can make the exception more informative than a ValueError by defining my own:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n class NegativeInputError(Exception):\n  pass\n\n# in the function:\nif n &lt; 0:\n  raise NegativeInputError\n</code>\n</pre>\n", "senID": 6}, {"text": ["HTH!"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]]