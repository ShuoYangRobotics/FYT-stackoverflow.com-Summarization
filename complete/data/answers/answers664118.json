[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; def f():\n...     return {'a' : 1, 'b' : 2}\n... \n&gt;&gt;&gt; def g():\n...     return dict(a=1, b=2)\n... \n&gt;&gt;&gt; g()\n{'a': 1, 'b': 2}\n&gt;&gt;&gt; f()\n{'a': 1, 'b': 2}\n&gt;&gt;&gt; import dis\n&gt;&gt;&gt; dis.dis(f)\n  2           0 BUILD_MAP                0\n              3 DUP_TOP             \n              4 LOAD_CONST               1 ('a')\n              7 LOAD_CONST               2 (1)\n             10 ROT_THREE           \n             11 STORE_SUBSCR        \n             12 DUP_TOP             \n             13 LOAD_CONST               3 ('b')\n             16 LOAD_CONST               4 (2)\n             19 ROT_THREE           \n             20 STORE_SUBSCR        \n             21 RETURN_VALUE        \n&gt;&gt;&gt; dis.dis(g)\n  2           0 LOAD_GLOBAL              0 (dict)\n              3 LOAD_CONST               1 ('a')\n              6 LOAD_CONST               2 (1)\n              9 LOAD_CONST               3 ('b')\n             12 LOAD_CONST               4 (2)\n             15 CALL_FUNCTION          512\n             18 RETURN_VALUE\n</code>\n</pre>\n", "senID": 0}, {"text": ["dict() is apparently some C built-in.", "A really smart or dedicated person (not me) could look at the interpreter source and tell you more.", "I just wanted to show off dis.dis.", ":)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["As far as performance goes:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; timeit(\"a = {'a': 1, 'b': 2}\")\n0.424...\n&gt;&gt;&gt; timeit(\"a = dict(a = 1, b = 2)\")\n0.889...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["@Jacob: There is a difference in how the objects are allocated, but they are not copy-on-write.", "Python allocates a fixed-size \"free list\" where it can quickly allocate dictionary objects (until it fills).", "Dictionaries allocated via the {} syntax (or a C call to PyDict_New) can come from this free list.", "When the dictionary is no longer referenced it gets returned to the free list and that memory block can be reused (though the fields are reset first)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "{}", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "PyDict_New", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["This first dictionary gets immediately returned to the free list, and the next will reuse its memory space:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; id({})\n340160\n&gt;&gt;&gt; id({1: 2})\n340160\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you keep a reference, the next dictionary will come from the next free slot:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = {}\n&gt;&gt;&gt; id(x)\n340160\n&gt;&gt;&gt; id({})\n340016\n</code>\n</pre>\n", "senID": 4}, {"text": ["But we can delete the reference to that dictionary and free its slot again:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; del x\n&gt;&gt;&gt; id({})\n340160\n</code>\n</pre>\n", "senID": 6}, {"text": ["Since the {} syntax is handled in byte-code it can use this optimization mentioned above.", "On the other hand dict() is handled like a regular class constructor and Python uses the generic memory allocator, which does not follow an easily predictable pattern like the free list above."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "{}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Also, looking at compile.c from Python 2.6, with the {} syntax it seems to pre-size the hashtable based on the number of items it's storing which is known at parse time."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "{}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Basically, {} is syntax and is handled on a language and bytecode level.", "dict() is just another builtin with a more flexible initialization syntax.", "Note that dict() was only added in the middle of 2.x series."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Update: thanks for the responses.", "Removed speculation about copy-on-write."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Update", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["One other difference between {} and dict is that dict always allocates a new dictionary (even if the contents are static) whereas {} doesn't always do so (see mgood's answer for when and why):"], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "{}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}, {"text": "{}", "childNum": 0, "tag": "code", "childList": []}, {"text": "always", "childNum": 0, "tag": "em", "childList": []}, {"href": "http://stackoverflow.com/questions/664118/whats-the-difference-between-dict-and/681358#681358", "text": "mgood's answer", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n def dict1():\n    return {'a':'b'}\n\ndef dict2():\n    return dict(a='b')\n\nprint id(dict1()), id(dict1())\nprint id(dict2()), id(dict2())\n</code>\n</pre>\n", "senID": 2}, {"text": ["produces:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n$ ./mumble.py\n11642752 11642752\n11867168 11867456\n</pre>\n", "senID": 4}, {"text": ["I'm not suggesting you try to take advantage of this or not, it depends on the particular situation, just pointing it out.", "(It's also probably evident from the disassembly if you understand the opcodes)."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "disassembly", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/664118/whats-the-difference-between-dict-and/664143#664143"}]}], [{"text": ["dict() is used when you want to create a dictionary from an iterable, like :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict( generator which yields (key,value) pairs )\ndict( list of (key,value) pairs )\n</code>\n</pre>\n", "senID": 1}]]