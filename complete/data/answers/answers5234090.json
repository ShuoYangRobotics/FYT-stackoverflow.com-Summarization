[[{"text": ["You can't slice a generator directly in python.", "You could use itertools.islice() as a helper function to do so.", "itertools.islice(generator, start, stop, step) Remember, slicing a generator will exhaust it partially.", "If you want to keep the entire generator intact, perhaps turn it into a tuple or list first: result = tuple(generator)"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "itertools.islice()", "tag": "a", "pos": 1, "childList": [{"text": "itertools.islice()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html#itertools.islice"}, {"text": "itertools.islice()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "itertools.islice(generator, start, stop, step)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "result = tuple(generator)", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["For a normal list, you can just use regular slicing.", "list[start:stop:step]\nYou can omit \"step\", or either start/stop in either of these slice implementations."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "list[start:stop:step]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n list[:5] # grab the first five elements\n list[-5:] # grab the last five elements\n           # (negative list indices start from the right side)\n\n import itertools\n itertools.islice(list, 0, 5) # grab the first five elements\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n import itertools\n\ntop5 = itertools.islice(array, 5)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Do you mean the first N items, or the N largest items?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "first", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "largest", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["If you want the first:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n top5 = iterable[:5]\n</code>\n</pre>\n", "senID": 2}, {"text": ["This also works for the largest N items, assuming that your iterable is sorted in descending order.", "(Your LINQ example seems to assume this as well."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you want the largest, and it isn't sorted, it's easiest to sort it first:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n l = list(iterable)\nl.sort(reverse=True)\ntop5 = l[:5]\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n top5 = array[:5]\n</code>\n</pre>\n", "senID": 0}, {"text": ["(extra padding to make answer long enough to be submitted)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This should work"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n top5 = array[:5]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You have to use slices:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lst = [1,2,3,4,5]\n\n&gt;&gt;&gt; lst[:2]\n[1, 2]\n</code>\n</pre>\n", "senID": 2}, {"text": ["It takes from index 0 to index 2."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You can also do things like:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lst = [1,2,3,4,5]\n\n&gt;&gt;&gt; lst[2:4]\n\n[3, 4]\n</code>\n</pre>\n", "senID": 5}]]