[[{"text": ["Transform your string into list with split()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = \"\"\"A' B F2 E' B2 A2 C' D2 C D' E2 F\"\"\"\n\nL = s.split(' ')\n\nfor i in xrange(len(L)):\n  if len(L[i]) == 1:\n    L[i] += 'x'\n\nstr_out = ' '.join(L)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The split-comprehend-join version:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ' '.join(n+'x' if len(n)==1 else n for n in inputstr.split(' '))\n</code>\n</pre>\n", "senID": 1}, {"text": ["The regex version:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; inputstr = \"A' F B2 C\"\n&gt;&gt;&gt; re.sub(r'([A-Z])(?=\\s|$)', r'\\1x', inputstr)\n\"A' Fx B2 Cx\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["In essence, find any uppercase letter not followed by either a space or the end of the string, and replace it with that character followed by an x."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I ran a few tests with timeit; the former (list comprehension) appears to run slightly faster than the latter (about 15-20% faster on average).", "This does not appear to change no matter the number of replacements that need to be done (a string 10 times as long still has about the same ratio of processing time as the original)."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "timeit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/timeit.html"}]}], [{"text": ["Ugly or Pythonic?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n items = \"A' B F2 E' B2 A2 C' D2 C D' E2 F\".split()\n\nitemsx = ((a+'x' if len(a)==1 else a) for a in items)\nout = ' '.join(itemsx)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["With a regular expression,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nnewstring = re.sub(r\"\\b(\\w)(?![2'])\", r'\\1x', oldstring)\n</code>\n</pre>\n", "senID": 1}, {"text": ["should be fine.", "If you're allergic to res,"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n news = ' '.join(x + 'x' if len(x)==1 else x for x in olds.split())\n</code>\n</pre>\n", "senID": 3}, {"text": ["is a concise way of expressing a similar transformation (if length-one is really the only thing you need to check before appending 'x' to an item)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n ' '.join(n if len(n) == 2 else n + 'x' for n in s.split(' '))\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s=\"A' B F2 E' B2 A2 C' D2 C D' E2 F\".split()\n&gt;&gt;&gt; import string\n&gt;&gt;&gt; letters=list(string.letters)\n&gt;&gt;&gt; for n,i in enumerate(s):\n...     if i in letters:\n...        s[n]=i+\"x\"\n...\n&gt;&gt;&gt; ' '.join(s)\n\"A' Bx F2 E' B2 A2 C' D2 Cx D' E2 Fx\"\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; ' '.join((i+'x')[:2] for i in items.split())\n\"A' Bx F2 E' B2 A2 C' D2 Cx D' E2 Fx\"\n</code>\n</pre>\n", "senID": 0}]]