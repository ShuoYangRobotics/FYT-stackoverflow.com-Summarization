[[{"text": ["When you initialize a set, you provide a list of values that must each be hashable."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "each", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n s = set()\ns.add([10])\n</code>\n</pre>\n", "senID": 1}, {"text": ["is the same as"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n s = set([[10]])\n</code>\n</pre>\n", "senID": 3}, {"text": ["which throws the same error that you're seeing right now."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n In [13]: (2).__hash__\nOut[13]: &lt;method-wrapper '__hash__' of int object at 0x9f61d84&gt;\n\nIn [14]: ([2]).__hash__ # nothing.\n</code>\n</pre>\n", "senID": 0}, {"text": ["The thing is that set needs its items to be hashable, i.e.", "implement the __hash__ magic method (this is used for ordering in the tree as far as I know).", "list does not implement that magic method, hence it cannot be added in a set."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__hash__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "not", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["In this line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s.add([10])\n</code>\n</pre>\n", "senID": 1}, {"text": ["You are trying to add a list to the set, rather than the elements of the list.", "If you want ot add the elements of the list, use the update method."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Think of the constructor being something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Set:\n    def __init__(self,l):\n        for elem in l:\n            self.add(elem)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Nothing too interesting to be concerned about why it takes lists but on the other hand add(element) does not."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "add(element)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["s.add([10]) works as documented.", "An exception is raised because [10] is not hashable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There is no magic happening during initialisation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["set([0,1,2,3,4,5,6,7,8,9]) has the same effect as set(range(10)) and set(xrange(10)) and set(foo()) where "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def foo():\n    for i in (9,8,7,6,5,4,3,2,1,0):\n        yield i\n</code>\n</pre>\n", "senID": 3}, {"text": ["In other words, the arg to set is an iterable, and each of the values obtained from the iterable must be hashable."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "iterable", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["It behaves according to the documentation: set.add() adds a single element (and since you give it a list, it complains it is unhashable - since lists are no good as hash keys).", "If you want to add a list of elements, use set.update().", "Example:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "set.add()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "set.update()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = set([1,2,3])\n&gt;&gt;&gt; s.add(5)\n&gt;&gt;&gt; s\nset([1, 2, 3, 5])\n&gt;&gt;&gt; s.update([8])\n&gt;&gt;&gt; s\nset([8, 1, 2, 3, 5])\n</code>\n</pre>\n", "senID": 1}]]