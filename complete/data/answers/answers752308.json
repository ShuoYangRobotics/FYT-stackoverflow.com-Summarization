[[{"code": "<pre>\n<code>\n A = [1,2,3,4,5,6]\nB = A[:len(A)/2]\nC = A[len(A)/2:]\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you want a function:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def split_list(a_list):\n    half = len(a_list)/2\n    return a_list[:half], a_list[half:]\n\nA = [1,2,3,4,5,6]\nB, C = split_list(A)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["A little more generic solution (you can specify the number of parts you want, not just split 'in half'):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EDIT: updated post to handle odd list lengths"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["EDIT2: update post again based on Brians informative comments "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def split_list(alist, wanted_parts=1):\n    length = len(alist)\n    return [ alist[i*length // wanted_parts: (i+1)*length // wanted_parts] \n             for i in range(wanted_parts) ]\n\nA = [0,1,2,3,4,5,6,7,8,9]\n\nprint split_list(A, wanted_parts=1)\nprint split_list(A, wanted_parts=2)\nprint split_list(A, wanted_parts=8)\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n def splitter(A):\n    B = A[0:len(A)//2]\n    C = A[len(A)//2:]\n\n return (B,C)\n</code>\n</pre>\n", "senID": 0}, {"text": ["I tested, and the double slash is required to force int division in python 3.", "My original post was correct, although wysiwyg broke in Opera, for some reason."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["B,C=A[:len(A)/2],A[len(A)/2:]"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "B,C=A[:len(A)/2],A[len(A)/2:]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["f = lambda A, n=3: [A[i:i+n] for i in range(0, len(A), n)]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["f(A)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["n - the predefined length of result arrays "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Using list slicing.", "The syntax is basically my_list[start_index:end_index]"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "list slicing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/introduction.html#lists"}, {"text": "my_list[start_index:end_index]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; i = [0,1,2,3,4,5]\n&gt;&gt;&gt; i[:3] # same as i[0:3] - grabs from first to third index (0-&gt;2)\n[0, 1, 2]\n&gt;&gt;&gt; i[3:] # same as i[3:len(i)] - grabs from fourth index to end\n[3, 4, 5]\n</code>\n</pre>\n", "senID": 1}, {"text": ["To get the first half of the list, you slice from the first index to len(i)/2..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "len(i)/2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; i[:len(i)/2]\n[0, 1, 2]\n</code>\n</pre>\n", "senID": 3}, {"text": ["..and the swap the values around to get the second half:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; i[len(i)/2:]\n[3, 4, 5]\n</code>\n</pre>\n", "senID": 5}], [{"text": ["While the answers above are more or less correct, you may run into trouble if the size of your array isn't divisible by 2, as the result of a / 2, a being odd, is a float in python 3.0, and in earlier version if you specify from __future__ import division at the beginning of your script.", "You are in any case better off going for integer division, i.e.", "a // 2, in order to get \"forward\" compatibility of your code."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "a / 2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "from __future__ import division", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "a // 2", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["There is an official Python receipe for the more generalized case of splitting an array into smaller arrays of size N. In the case of this question:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n N = len(A)/2\n</code>\n</pre>\n", "senID": 1}, {"text": ["See the python itertools grouper recipe (do a Control-F on the page for \"def grouper\")."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "python itertools grouper recipe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html"}]}, {"text": ["The function there also includes  the ability to specify a particular 'fillvalue' when the last smaller array wouldn't have N elements."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you don't care about the order...  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def split(list):  \n    return list[::2], list[1::2]\n</code>\n</pre>\n", "senID": 1}, {"text": ["list[::2] gets every second element in the list starting from the 0th element.", "list[1::2] gets every second element in the list starting from the 1st element."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}]]