[[{"text": ["The real proper way is to not use file extensions at all.", "Do a GET (or HEAD) request to the URL in question, and use the returned \"Content-type\" HTTP header to get the content type.", "File extensions are unreliable."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "real", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["See Multimedia MIME reference for a list of useful MIME types."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Multimedia MIME reference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.w3schools.com/media/media_mimeref.asp"}]}], [{"text": ["Use urlparse to parse the path out of the URL, then os.path.splitext to get the extension."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "urlparse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.path.splitext", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import urlparse, os\n\nurl = 'http://www.plssomeotherurl.com/station.pls?id=111'\npath = urlparse.urlparse(url).path\next = os.path.splitext(path)[1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that the extension may not be a reliable indicator of the type of the file.", "The HTTP Content-Type header may be better."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Content-Type", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["File extensions are basically meaningless in URLs.", "For example, if you go to http://code.google.com/p/unladen-swallow/source/browse/branches/release-2009Q1-maint/Lib/psyco/support.py?r=292 do you want the extension to be \".py\" despite the fact that the page is HTML, not Python?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/unladen-swallow/source/browse/branches/release-2009Q1-maint/Lib/psyco/support.py?r=292", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/unladen-swallow/source/browse/branches/release-2009Q1-maint/Lib/psyco/support.py?r=292"}]}, {"text": ["Use the Content-Type header to determine the \"type\" of a URL."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Use urlparse, that'll get most of the above sorted:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/urlparse.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/urlparse.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/urlparse.html"}]}, {"text": ["then split the \"path\" up.", "You might be able to split the path up using os.path.split, but your example 2 with the :8024 on the end needs manual handling.", "Are your file extensions always three letters?", "Or always letters and numbers?", "Use a regular expression."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n $ python3\nPython 3.1.2 (release31-maint, Sep 17 2010, 20:27:33) \n[GCC 4.4.5] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; from os.path import splitext\n&gt;&gt;&gt; from urllib.parse import urlparse \n&gt;&gt;&gt; \n&gt;&gt;&gt; urls = [\n...     'http://m3u.com/tunein.m3u',\n...     'http://asxsomeurl.com/listen.asx:8024',\n...     'http://www.plssomeotherurl.com/station.pls?id=111',\n...     'http://22.198.133.16:8024',\n... ]\n&gt;&gt;&gt; \n&gt;&gt;&gt; for url in urls:\n...     path = urlparse(url).path\n...     ext = splitext(path)[1]\n...     print(ext)\n... \n.m3u\n.asx:8024\n.pls\n\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["To get the content-type you can write a function one like I have written using urllib2.", "If you need to utilize page content anyway it is likely that you will use urllib2 so no need to import os."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import urllib2\n\ndef getContentType(pageUrl):\n    page = urllib2.urlopen(pageUrl)\n    pageHeaders = page.headers\n    contentType = pageHeaders.getheader('content-type')\n    return contentType\n</code>\n</pre>\n", "senID": 1}]]