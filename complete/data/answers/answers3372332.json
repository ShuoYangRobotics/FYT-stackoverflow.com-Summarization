[[{"text": ["If you have a huge amount of text, I wouldn't use regexps in this case but simply split text:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n words = {\"this\": 0, \"that\": 0}\nfor w in text.split():\n  if w in words:\n    words[w] += 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["words will give you the frequency for each word"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Try stripping all the punctuation from your text and then splitting on whitespace.", "Then simply do "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for word in list_word:\n    occurence = strippedText.count(word)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or if you're using python 3.0 I think you could do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n occurences = {word: strippedText.count(word) for word in list_word}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Googling: python frequency\ngives me this page as the first result: http://www.daniweb.com/code/snippet216747.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.daniweb.com/code/snippet216747.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.daniweb.com/code/snippet216747.html"}]}, {"text": ["Which seems to be what you're looking for."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can also split the text into words and search the resulting list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Regular expressions may not be what you want.", "Python has a number of built-in string operations that are much faster, and I believe .count() has what you need."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "much", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["http://docs.python.org/library/stdtypes.html#string-methods"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#string-methods", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#string-methods"}]}], [{"text": ["If Python is not a must, you can use awk"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ cat file\nword1\nword2\nword3\nword4\n\n$ cat file1\nblah1 blah2 word1 word4 blah3 word2\njunk1 junk2 word2 word1 junk3\nblah4 blah5 word3 word6 end\n\n$ awk 'FNR==NR{w[$1];next} {for(i=1;i&lt;=NF;i++) a[$i]++}END{for(i in w){ if(i in a) print i,a[i] } } ' file file1\nword1 2\nword2 2\nword3 1\nword4 1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It sounds to me like the Natural Language Toolkit might have what you need."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.nltk.org/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.nltk.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.nltk.org/"}]}], [{"text": ["Maybe you could adapt this my multisearch generator function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import islice\ntestline = \"Sentence 1.  Sentence 2?  Sentence 3!  Sentence 4.  Sentence 5.\"\ndef multis(search_sequence,text,start=0):\n    \"\"\" multisearch by given search sequence values from text, starting from position start\n        yielding tuples of text before sequence item and found sequence item\"\"\"\n    x=''\n    for ch in text[start:]:\n        if ch in search_sequence:\n            if x: yield (x,ch)\n            else: yield ch\n            x=''\n        else:\n            x+=ch\n    else:\n        if x: yield x\n\n# split the first two sentences by the dot/question/exclamation.\ntwo_sentences = list(islice(multis('.?!',testline),2)) ## must save the result of generation\nprint \"result of split: \", two_sentences\n\nprint '\\n'.join(sentence.strip()+sep for sentence,sep in two_sentences)\n</code>\n</pre>\n", "senID": 1}]]