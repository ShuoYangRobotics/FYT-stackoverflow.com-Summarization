[[{"text": ["Tried evaluating it python?", "Looks like a list of tuples to me."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n eval(your_string)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note, it's massively unsafe!", "If there's code in there to delete your hard disk, evaluating it will run that code!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I would like to use Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lines = open('filename.txt','r').readlines()\nn = len(lines) # n % 3 == 0\nfor i in range(0,n,3):\n    name1 = lines[i].strip(\"',[]\\n\\r\")\n    name2 = lines[i+1].strip(\"',[]\\n\\r\")\n    value = lines[i+2].strip(\"',[]\\n\\r\")\n    print name1,name2,value\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It looks like legal Python.", "You might be able to just import it as a module and then write it back out after formatting it. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Oh boy, here is a job for ast.literal_eval:\n(literal_eval is safer than eval, since it restricts the input string to literals such as strings, numbers, tuples, lists, dicts, booleans and None:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "ast.literal_eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "literal_eval", "childNum": 0, "tag": "code", "childList": []}, {"text": "eval", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import ast\nfilename='in'\nwith open(filename,'r') as f:\n    contents=f.read()\n    data=ast.literal_eval(contents)\n\nfor elt in data:\n    print(', '.join(map(str,elt)))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["here's one way to do it with (g)awk"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ awk -vRS=\"),\" ' { gsub(/\\n|[\\047\\]\\[)(]/,\"\") } 1' file\nname_1a,name_1b,value_1\nname_2a,name_2b,value_2\nname_XXXa,name_XXXb,value_XXX\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Awk is typically line oriented, and bash is a shell, with limited numbrer of string manipulation functions.", "It really depends on where your strength as a programmer lies, but all other things being equal, I would choose python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Did you ever consider that by redirecting the time it took to post this on SO, you could have had it done?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Asking what's the best language for doing a given task is a very different question to say, asking: 'what's the best way of doing a given task in a particular language'.", "The first, what you're asking, is in most cases entirely subjective."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Since this is a fairly simple task, I would suggest going with what you know (unless you're doing this for learning purposes, which I doubt).", "If you know any of the languages you suggested, go ahead and solve this in a matter of minutes.", "If you know none of them, now enters the subjective part, I would suggest learning Python, since it's so much more fun than the other 2 ;)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"text": ["If the values are legal python values, you can take advantage of eval() since your data is a legal python data sucture.", "The following would work if values are integers, otherwise you might have to massage the print call a bit:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n input = \"\"\"[('name_1a',\n          'name_1b',\n          1),\n         ('name_2a',\n          'name_2b',\n          2),\n         ('name_XXXa',\n          'name_XXXb',\n          3)]\"\"\"\n\nfor e in eval(input):\n    print '%s,%s,%d' % e\n</code>\n</pre>\n", "senID": 1}, {"text": ["P.S.", "using eval() is quite controversial since it will execute any valid python code that you pass into it, so take care."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]