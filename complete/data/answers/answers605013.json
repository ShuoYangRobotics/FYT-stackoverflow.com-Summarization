[[{"text": ["I recommned using threading module.", "Even more benefit is to use InterruptableThread for terminating the thread.", "You do not have to use flag for terminating your thread but exception will occur if you call terminate() on this thread from parent.", "You can handle exception or not."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import threading, ctypes\n\nclass InterruptableThread(threading.Thread):\n@classmethod\ndef _async_raise(cls, tid, excobj):\n    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, ctypes.py_object(excobj))\n    if res == 0:\n        raise ValueError(\"nonexistent thread id\")\n    elif res &gt; 1:\n        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, 0)\n        raise SystemError(\"PyThreadState_SetAsyncExc failed\")\n\ndef raise_exc(self, excobj):\n    assert self.isAlive(), \"thread must be started\"\n    for tid, tobj in threading._active.items():\n        if tobj is self:\n            self._async_raise(tid, excobj)\n            return\n\ndef terminate(self):\n    self.raise_exc(SystemExit)\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT:\nYou can rewrite your code like this using another thread that is waiting 1 minute and then killing your other thread"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def send_data:\n    IP = ...\n    # other vars\n\n    ...\n    s = socket.socket(.....)\n\n    # no killed checking\n    # no time checking\n    # just do your work here\n    ...\n    s.close()\n\n\nmy_thread = InterruptableThread(target=send_data)\nmy_thread.start()\n\ndef one_minute_kill(who):\n   time.sleep(60)\n   who.terminate()\n\nkiller_thread = InterruptableThread(target=one_minute_kill, args=[my_thread])\nkiller.start()\n\nprint \"to quit type quit\"\nwhile my_thread.isAlive():\n  if raw_input(\"Enter something: \") == \"quit\":\n    my_thread.terminate()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I don't know how to do this with the \"thread\" module, but I can do it with the \"threading\" module.", "I think this code accomplishes what you want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For documentation on the threading module:\nhttp://docs.python.org/library/threading.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/threading.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/threading.html"}]}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\nimport time\nfrom threading import Thread\nimport threading\nimport sys\n\ntest_time = 10\nkilled = False\n\nclass SillyThread( threading.Thread ):\n    def run(self):\n    \tglobal killed\n    \tstarttime = time.time()\n    \tcounter = 0\n    \twhile (time.time() - starttime) &lt; test_time:\n    \t\tif killed:\n    \t\t\tbreak\n    \t\tcounter = counter + 1\n    \t\ttime.sleep(0.1)\n    \tprint \"I did %d loops\" % counter\n\nclass ManageThread( threading.Thread ):\n    def run(self):\n    \tglobal killed\n    \twhile True:\n    \t\tvar = raw_input(\"Enter something: \")\n    \t\tif var == \"quit\":\n    \t\t\tkilled = True\n    \t\t\tbreak\n    \tprint \"Got var [%s]\" % var\n\nsilly = SillyThread()\nsilly.start()\nManageThread().start()\nThread.join(silly)\nprint \"bye bye\"\nsys.exit(0)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note that I use time.time() instead of time.clock().", "time.clock() gives elapsed processor time on Unix (see http://docs.python.org/library/time.html).", "I think time.clock() should work everywhere.", "I set my test_time to 10 seconds because I don't have the patience for a minute."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://docs.python.org/library/time.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/time.html"}]}, {"text": ["Here's what happens if I let it run the full 10 seconds:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n leif@peacock:~/tmp$ ./test.py\nEnter something: I did 100 loops\nbye bye\n</code>\n</pre>\n", "senID": 5}, {"text": ["Here's what happens if I type 'quit':"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n leif@peacock:~/tmp$ ./test.py\nEnter something: quit\nGot var [quit]\nI did 10 loops\nbye bye\n</code>\n</pre>\n", "senID": 7}, {"text": ["Hope this helps."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["As mentioned above, use the threading module, it is much easier to use and provides several synchronization primitives.", "It also provides a Timer class that runs after a specified amount of time."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "threading", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/threading.html"}, {"text": "Timer", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/threading.html#id7"}]}, {"text": ["If you just want the program to exit, you can simply make the sending thread a daemon.", "You do this by calling setDaemon(True) before calling start() (2.6 might use a daemon attribute instead).", "Python won't exit so long as a non-daemon thread is running."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can do this pretty easily without threads.", "For example, using Twisted, you just set up a timed call and a producer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from twisted.internet.protocol import ClientFactory, Protocol\nfrom twisted.internet import reactor\n\nclass Noisy(Protocol):\n    def __init__(self, delay, data):\n        self.delay = delay\n        self.data = data\n\n    def stop(self):\n        self.transport.unregisterProducer()\n        self.transport.loseConnection()\n        reactor.stop()\n\n    def resumeProducing(self):\n        self.transport.write(self.data)\n\n    def connectionMade(self):\n        self.transport.registerProducer(self, False)\n        reactor.callLater(self.delay, self.stop)\n\nfactory = ClientFactory()\nfactory.protocol = lambda: Noisy(60, \"hello server\")\nreactor.connectTCP(host, port, factory)\nreactor.run()\n</code>\n</pre>\n", "senID": 1}, {"text": ["This has various advantages over the threaded approach.", "It doesn't rely on daemon threads, so you can actually clean up the network connection (eg, to send a close message if necessary) rather than relying on the platform to destroy it.", "It handles all the actual low level networking code for you (your original example is doing the wrong thing in the case of socket.send returning 0; this code will handle that case properly).", "You also don't have to rely on ctypes or the obscure CPython API for raising an exception in another thread (so it's portable to more versions of Python and can actually interrupt a blocked send immediately, unlike some of the other suggested approaches)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Ensure that the \"quit\" is working correctly and add a small print to test that the input is working."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if var == \"quit\":\n print \"Hey we got quit\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The variable elapsed is not initialized.", "Set it to zero above the while loop."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's easy to test the scope of killed:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "killed", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import thread\n&gt;&gt;&gt; killed = False\n&gt;&gt;&gt; import time\n&gt;&gt;&gt; def test():\n...  while True:\n...   time.sleep(1)\n...   if killed:\n...     print 'Dead.'\n...     break\n... \n&gt;&gt;&gt; thread.start_new_thread(test, ())\n25479680\n&gt;&gt;&gt; time.sleep(3)\n&gt;&gt;&gt; killed = True\n&gt;&gt;&gt; Dead.\n</code>\n</pre>\n", "senID": 1}]]