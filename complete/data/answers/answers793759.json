[[{"text": ["With awk"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n awk 'NF &gt; 2' input_file &gt; output_file\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n grep ':' filename\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n with open(source_filename) as src:\n    with open(dest_filename, 'w') as dst:\n        for line in src:\n            if len(line.split()) &gt; 1:\n                dst.write(line)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["With Perl:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -ne 'print if /^([0-9]+\\s+){2}.+$/' $filename\n</code>\n</pre>\n", "senID": 1}], [{"text": ["awk \"NF>1\" &lt; filename"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Just working my perl here, but this might help as well:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -lane 'if (scalar(@F) == 3) { print @F;}' file &gt;&gt; file.out\n</code>\n</pre>\n", "senID": 1}], [{"text": ["With Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n file = open(filename, 'r')\nlines = file.readlines()\nfile.close()\n\np = re.compile('^\\d*$')\n\nfor line in lines:\n    if not p.search(line): print line,\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n sed '/^[0-9]$/d'  filename\n</code>\n</pre>\n", "senID": 0}, {"text": ["(might have to modify the pattern if the bad lines have trailing spaces).", "You can also use grep -v, which will omit the matched pattern."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]