[[{"text": ["Nearly no interpreter really interprets code directly, line by line \u2013 it's simply too inefficient.", "Almost all interpreters use some intermediate representation which can be executed easily.", "Also, small optimizations can be performed on this intermediate code."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "directly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Python furthermore stores this code which has a huge advantage for the next time this code gets executed: Python doesn't have to parse the code anymore; parsing is the slowest part in the compile process.", "Thus, a bytecode representation reduces execution overhead quite substantially."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Because interpretting from bytecode directly is faster.", "It avoids the need to do lexing, for one thing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Because you can compile to a .pyc once and interpret from it many times."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".pyc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So if you're running a script many times you only have the overhead of parsing the source code once."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Re-lexing and parsing the source code over and over, rather than doing it just once (most often on the first import), would obviously be a silly and pointless waste of effort."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Although there is a small efficiency aspect to it (you can store the bytecode on disk or in memory), its mostly engineering: it allows you separate parsing from interpreting.", "Parsers can often be nasty creatures, full of edge-cases and having to conform to esoteric rules like using just the right amount of lookahead and resolving shift-reduce problems.", "By contrast, interpreting is really simple: its just a big switch statement using the bytecode's opcode."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I doubt very much that the reason is performance, albeit be it a nice side effect.", "I would say that it's only natural to think a VM built around some high-level assembly language would be more practical than to find and replace text in some source code string."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Okay, clearly, who ever put a -1 vote on my post without leaving a reasonable comment to explain knows very little about virtual machines (run-time environments)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://channel9.msdn.com/shows/Going+Deep/Expert-to-Expert-Erik-Meijer-and-Lars-Bak-Inside-V8-A-Javascript-Virtual-Machine/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://channel9.msdn.com/shows/Going+Deep/Expert-to-Expert-Erik-Meijer-and-Lars-Bak-Inside-V8-A-Javascript-Virtual-Machine/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://channel9.msdn.com/shows/Going+Deep/Expert-to-Expert-Erik-Meijer-and-Lars-Bak-Inside-V8-A-Javascript-Virtual-Machine/"}]}]]