[[{"text": ["Use lxml which is the best xml/html library for python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lxml", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/lxmlhtml.html"}]}, {"code": "<pre>\n<code>\n import lxml.html\nt = lxml.html.fromstring(\"...\")\nt.text_content()\n</code>\n</pre>\n", "senID": 1}, {"text": ["And if you just want to sanitize the html look at the lxml.html.clean module"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/lxmlhtml.html#cleaning-up-html"}]}], [{"text": ["Use BeautifulSoup!", "It's perfect for this, where you have incoming markup of dubious virtue and need to get something reasonable out of it.", "Just pass in the original text, extract all the string tags, and join them."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}], [{"text": ["While I agree with Lucas that regular expressions are not all that scary, I still think that you should go with a specialized HTML parser.", "This is because the HTML standard is hairy enough (especially if you want to parse arbitrarily \"HTML\" pages taken off the Internet) that you would need to write a lot of code to handle the corner cases.", "It seems that python includes one out of the box. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python includes one out of the box", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-htmllib.html"}]}, {"text": ["You should also check out the python bindings for TidyLib which can clean up broken HTML, making the success rate of any HTML parsing much higher."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "python bindings for TidyLib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://utidylib.berlios.de/"}]}], [{"text": ["How about parsing the HTML data and extracting the data with the help of the parser ?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'd try something like the author described in chapter 8.3 in the Dive Into Python book "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "chapter 8.3 in the Dive Into Python book", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/html_processing/extracting_data.html"}]}], [{"text": ["You might need something more complicated than a regular expression.", "Web pages often have angle brackets that aren't part of a tag, like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &lt;div&gt;5 &lt; 7&lt;/div&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Stripping the tags with regex will return the string \"5 \" and treat"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &lt; 7&lt;/div&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["as a single tag and strip it out."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I suggest looking for already-written code that does this for you.", "I did a search and found this: http://zesty.ca/python/scrape.html It also can resolve HTML entities."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://zesty.ca/python/scrape.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://zesty.ca/python/scrape.html"}]}], [{"text": ["Regular expressions are not scary, but writing your own regexes to strip HTML is a sure path to madness (and it won't work, either).", "Follow the path of wisdom, and use one of the many good HTML-parsing libraries."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Lucas' example is also broken because \"sub\" is not a method of a Python string.", "You'd have to \"import re\", then call re.sub(pattern, repl, string).", "But that's neither here nor there, as the correct answer to your question does not involve writing any regexes."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Looking at the amount of sense people are demonstrating in other answers here, I'd say that using a regex probably isn't the best idea for your situation.", "Go for something tried and tested, and treat my previous answer as a demonstration that regexes need not be that scary."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "that", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["if you use django you might also use \nhttp://docs.djangoproject.com/en/dev/ref/templates/builtins/#striptags\n;)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.djangoproject.com/en/dev/ref/templates/builtins/#striptags", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/templates/builtins/#striptags"}]}]]