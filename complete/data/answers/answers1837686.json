[[{"text": ["Just use gzip compression, and save 60-70% with 0% effort!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Do you understand that files are divided into bytes?", "Thus, if you did that, you'd have 7 bits of the first letter in bytes 1, plus 1 bit of the second letter, then in byte two, you'd have 6 bits of the second letter, and 2 bits of the third, so on.", "It would look like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n |AAAAAAAB|BBBBBBCC|CCCCCDDD|DDDDEEEE|EEEFFFFF|FF...\n \\------/ \\------/ \\------/ \\------/ \\------/\n   byte     byte     byte     byte     byte\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Your idea is on the right track, but needs some development.", "If you're interested in this kind of data compression, you may want to investigate Huffman coding.", "This is a simple data compression technique that is used in many real-world situations."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Huffman coding", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Huffman%5Fcoding"}]}, {"text": ["I can recommend The Data Compression Book by Mark Nelson which is a great introduction to data compression techniques."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "The Data Compression Book", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/1558514341"}]}], [{"text": ["Your idea is unlikely to work.", "If you write the byte 0x05 into a file, the byte gets written, all 8 bits of it - with leading zeros.", "To actually accomplish what you need, you can encode each 8 bytes in 7 bytes (since you only need 8*7 bits to encode 8 values).", "One approach is keep the 7 values in the 7 low bits of their bytes, and spread the 8th byte over the 7 MSBits."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As for Python, opening a file in binary write mode is open(filename, 'wb').", "You'll also have to learn about bit operations to pack bytes as described above."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "open(filename, 'wb')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Just a small example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 0x03\n&gt;&gt;&gt; b = 0x59\n&gt;&gt;&gt; c = ((a &amp; 0x1) &lt;&lt; 7) | b\n&gt;&gt;&gt; hex(c)\n'0xd9'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["This places the lowest bit of a into the MSBit of c and the rest of c is the value of b."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I'm sure you can take it from here."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["\"this would simply leave an extra 0 on the binary string--11011001 might get mapped to 01000001 rather than 1000001, and I won't actually save space."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Correct.", "Your plan will do nothing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["What you need is UTF-7."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Edit: UTF-7 has the advantage of bloating \"only\" special characters, so if special characters are rare in the input, you get far less bytes than by just converting UTF-8 to 7 bit.", "That's what UTF-7 is for."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]