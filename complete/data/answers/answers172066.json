[[{"text": ["A user profile (as returned by django.contrib.auth.models.User.get_profile) doesn't extend the User table - the model you specify as the profile model with the AUTH_PROFILE_MODULE setting is just a model which has a ForeignKey to User.", "get_profile and the setting are really just a convenience API for accessing an instance of a specific model which has a ForeignKey to a specific User instance."], "childNum": 8, "tag": "p", "senID": 0, "childList": [{"text": "user profile", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users"}, {"text": "django.contrib.auth.models.User.get_profile", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "AUTH_PROFILE_MODULE", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "ForeignKey", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "User", "childNum": 0, "tag": "code", "childList": []}, {"text": "get_profile", "childNum": 0, "tag": "code", "childList": []}, {"text": "ForeignKey", "childNum": 0, "tag": "code", "childList": []}, {"text": "User", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["As such, one option is to create a profile model in which the ForeignKey to User can be null and associate your Photo model with this profile model instead of the User model.", "This would allow you to create a profile for a non-existent user and attach a registered User to the profile at a later date."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "ForeignKey", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "User", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "null", "childNum": 0, "tag": "code", "childList": []}, {"text": "Photo", "childNum": 0, "tag": "code", "childList": []}, {"text": "User", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Supply your own authentication routine, then you can check (or not check) anything you like.", "We do this so if they fail on normal username, we can also let them in on email/password (although that's not what I'm showing below)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["in settings.py:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n AUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'userprofile.my_authenticate.MyLoginBackend', # if they fail the normal test\n )\n</code>\n</pre>\n", "senID": 2}, {"text": ["in userprofile/my_authenticate.py:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from django.contrib.auth.backends import ModelBackend\nfrom django.contrib.auth.models import User\n\nclass MyLoginBackend(ModelBackend):\n    \"\"\"Return User record if username + (some test) is valid.\n       Return None if no match.\n    \"\"\"\n\n    def authenticate(self, username=None, password=None, request=None):\n        try:\n            user = User.objects.get(username=username)\n            # plus any other test of User/UserProfile, etc.\n            return user # indicates success\n        except User.DoesNotExist:\n            return None\n    # authenticate\n# class MyLoginBackend\n</code>\n</pre>\n", "senID": 4}], [{"text": ["From the documentation on django auth, if you want to use the User model, it's mandatory to have a username and password, there are no \"anonymous accounts\".", "I guess you could create accounts with a default password and then give the opportunity for people to enable a \"real\" account (by setting a password themselves)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django auth", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/auth/"}]}, {"text": ["To set up a \"People\" table that ties to the User table you just have to use a ForeignKey field (that's actually the recommended way of adding additional info to the User model, and not inheritance)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "recommended way", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users"}]}], [{"text": ["Using a model with a ForeignKey field linking to User might not work as you want because you need anonymous access.", "I'm not sure if that's going to work, but you might try what happens if you let it have a ForeignKey to AnonymousUser (whose id is always None!", ") instead."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "model with a ForeignKey field linking to User", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users"}, {"text": "AnonymousUser", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/auth/#anonymous-users"}]}, {"text": ["If you try it, post your results here, I'd be curious."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The django.contrib.auth.models.User exists solely for the purpose of using default authentication backend (database-based).", "If you write your own backend, you can make some accounts passwordless, while keeping normal accounts with passwords.", "Django documentation has a chapter on this."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "normal", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "chapter on this", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/auth/#other-authentication-sources"}]}], [{"text": ["Another upvote for insin's answer: handle this through a UserProfile.", "James Bennett has a great article about extending django.contrib.auth.models.User.", "He walks through a couple methods, explains their pros/cons and lands on the UserProfile way as ideal."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "insin's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/172066/django-userprofile-without-a-password#172097"}, {"text": "UserProfile", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"href": "http://djangopeople.net/ubernostrum/", "text": "James Bennett", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://www.b-list.org/weblog/2006/jun/06/django-tips-extending-user-model/", "text": "great article", "childNum": 0, "tag": "a", "childList": []}, {"text": "django.contrib.auth.models.User", "childNum": 0, "tag": "code", "childList": []}, {"text": "UserProfile", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Users that can't login?", "Just given them a totally random password."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random\nuser.set_password( str(random.random()) )\n</code>\n</pre>\n", "senID": 1}, {"text": ["They'll never be able to log on."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]