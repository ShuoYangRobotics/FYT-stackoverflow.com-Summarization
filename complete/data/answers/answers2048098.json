[[{"text": ["You don't use the same signal, when emitting and connecting. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["QtCore.SIGNAL(\"aa(str)\") is not the same as QtCore.SIGNAL(\"aa\").", "Signals must have the same signature.", "By the way, if you are defining your own signals, don't define parametres.", "Just write SIGNAL('aa'), because defining parametres is a thing from C++ and Python version of Qt doesn't need this."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "QtCore.SIGNAL(\"aa(str)\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "QtCore.SIGNAL(\"aa\")", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["So it should look like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n QtCore.QObject.connect(self.loginDialog, QtCore.SIGNAL(\"aa\"), self.login)\n</code>\n</pre>\n", "senID": 3}, {"text": ["and if you pass any parametres in emit, your login method must accept those parametres.", "Check, if this helps :-)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I checked your code and it looks like the problem is in the way how you're connecting your signal"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["notice first parameter is changed to self.loginDialog.ui; your original connect call was using self.loginDialog which is of the LoginDialog type, whereas signal is emitted by the Ui_Dialog class which is ui property of the LoginDialog.", "After this change login method of the Ui_MainWindow got called  "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "self.loginDialog.ui", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["hope this helps, regards"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["There are some concepts to be clarified"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["[QT signal &amp; slot] VS [Python singal &amp; slot]"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "[QT signal &amp; slot] VS [Python singal &amp; slot]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["All the predefined singals &amp; slots provided by pyqt are implemented by QT's c++ code.", "Whenever you want to have a customized signal &amp; slot in Python, it is a python signal &amp; slot.", "Hence there are four cases to emits a singal to a slot:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "from a QT signal to a QT slot", "tag": "none", "senID": 3}, {"text": "from a QT signal to a Python slot", "tag": "none", "senID": 4}, {"text": "from a Python signal to a QT slot", "tag": "none", "senID": 5}, {"text": "from a Python signal to a Python slot", "tag": "none", "senID": 6}]}, {"text": ["The code below shows how to connect for these four different scnarios"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n import sys\n    from PyQt4.QtCore import *\n    from PyQt4.QtGui import *\n\n    class Foo(QtCore.QObject):\n\n        def __init__(self, parent=None):\n            super(Foo, self).__init__(parent)\n            dial = QDial()\n            spinbox = QSpinbox()\n\n            # --------------------------------------\n            # QT signal &amp; QT slot\n            # --------------------------------------\n\n            # option 1: more efficient \n            self.connect(spinbox, SIGNAL(\"valueChanged(int)\"), \n                dial, SLOT(\"setValue(int)\"))\n            # option 2:\n            self.connect(spinbox, SIGNAL(\"valueChanged(int)\"), \n                dial.setValue)\n\n\n            # --------------------------------------\n            # QT signal &amp; Python slot\n            # --------------------------------------\n\n            self.connect(spinbox, SIGNAL(\"valueChanged(int)\"), \n                self.myValChanged)\n\n\n            # --------------------------------------\n            # Python signal &amp; Qt slot\n            # --------------------------------------\n\n            # connect option 1: more efficient\n            self.connect(self, SIGNAL(\"mysignal\"), dial, \n                SLOT(\"setValue(int)\"))\n\n            # connect option 2:\n            self.connect(self, SIGNAL(\"mysignal\"), dial.setValue)\n\n            # emit\n            param = 100\n            self.emit(SIGNAL(\"mysignal\"), param)\n\n\n            # --------------------------------------\n            # Python signal &amp; Python slot\n            # --------------------------------------\n\n            # connect\n            self.connect(self, SIGNAL(\"mysignal\"), self.myValChanged)\n\n            # emit\n            param = 100\n            self.emit(SIGNAL(\"mysignal\"), param)\n\n\n        def myValChanged(val):\n            print \"New spin val %d\" % val\n</code>\n</pre>\n", "senID": 8}, {"text": ["Conclusion is --"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Singal signature for Python singnal differentiate from that of QT signal in that it doesn't have the parenthesis and can be passed any python data types when you emit it.", "The Python signal is created when you emit it."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["For slot, there are three forms of signatures."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "s.connect(w, SIGNAL(\"signalSignature\"), functionName) ", "tag": "none", "senID": 12}, {"text": "s.connect(w,SIGNAL(\"signalSignature\"), instance.methodName)", "tag": "none", "senID": 13}, {"text": "s.connect(w,SIGNAL(\"signalSignature\"), instance, SLOT(\"slotSignature\"))", "tag": "none", "senID": 14}]}, {"text": ["Number 1 &amp; 2 are available for Python slot, while number 2 &amp; 3 are available for QT slot.", "It is clear that besides QT predefined slot, any python callable function/methods is qulified to be a Python slot."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["[Old style qt signal &amp; slot] VS [new style qt singal &amp; slot]"], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "[Old style qt signal &amp; slot] VS [new style qt singal &amp; slot]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Well, all the description above is based on the old style pyqt signal &amp; slot.", "As @Idan K suggested there is an alternative new-style to do the things, especially for the Python signal.", "Refer to here for more."], "childNum": 1, "tag": "p", "senID": 17, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pysnippet.blogspot.com/2010/01/new-style-pyqt-signals-and-slots.html"}]}], [{"text": ["I haven't used PyQT4 but take a look at here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://zetcode.com/tutorials/pyqt4/eventsandsignals/"}]}], [{"text": ["Looks like you miss the \"SLOT\" part in your connect call."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is an example :"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n QtCore.QObject.connect(self.loginDialog, QtCore.SIGNAL(\"NotifyMySignal(int)\"), QtCore.SLOT(\"onNotifyMySignal(int)\"));\n</code>\n</pre>\n", "senID": 2}, {"text": ["then "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n self.emit(QtCore.SIGNAL('NotifyMySignal(1)'));\n</code>\n</pre>\n", "senID": 4}, {"text": ["Hope this helps !"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["As noted by gruszczy you have to use the same QtCore.SIGNAL('xxx') to connect signal and to emit it.", "Also I think you should use Qt types in the arguments list of signal function.", "E.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n QtCore.QObject.connect(self.loginDialog, QtCore.SIGNAL(\"aa(QString&amp;)\"), self.login)\n</code>\n</pre>\n", "senID": 1}, {"text": ["And then emit with:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n self.emit(QtCore.SIGNAL(\"aa(QString&amp;)\"), \"jacek\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["Sometimes it makes sense to define signal only once as global variable and use it elsewhere:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n MYSIGNAL = QtCore.SIGNAL(\"aa(QString&amp;)\")\n...\nQtCore.QObject.connect(self.loginDialog, MYSIGNAL, self.login)\n...\nself.emit(MYSIGNAL, \"jacek\")\n</code>\n</pre>\n", "senID": 5}], [{"text": ["What @bialix suggested should have worked, but try an alternative way of connecting:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Foo(QtCore.QObject):\n    mysignal = QtCore.pyqtSignal(str, name='mysignal')\n\n    def connect_to_signal(self):\n        # you can use this syntax instead of the 'old' one\n        self.mysignal.connect(self.myslot)\n\n        # but this will also work\n        self.connect(self, QtCore.SIGNAL('mysignal(QString)'), self.myslot) \n\n        self.mysignal.emit(\"hello\")\n\n    def myslot(self, param):\n        print \"received %s\" % param\n</code>\n</pre>\n", "senID": 1}, {"text": ["For a more detailed explanation of how signals/slots work in PyQt I'd suggest going through it's documentation, specifically this section. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this section", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.riverbankcomputing.co.uk/static/Docs/PyQt4/pyqt4ref.html#new-style-signal-and-slot-support"}]}]]