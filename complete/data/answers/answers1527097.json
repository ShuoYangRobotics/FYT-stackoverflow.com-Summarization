[[{"text": ["Hint: You will need to use a loop"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would look at the Python Flow Control documentation.", "Also note the range() function."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Python Flow Control", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html"}, {"text": "range()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You can grab the n'th element from an array like this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "n", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n val = some_array[n]\n</code>\n</pre>\n", "senID": 3}, {"text": ["And remember that in Python, arrays start counting at 0, not 1."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["There is in fact a more Pythonic answer to your homework.", "Again, I can't give it to you directly, but as well as looking at the loop documentation, you might also want to look at zip.", "You can do a lot in Python without directly using index variables."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "loop documentation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html"}, {"text": "zip", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html?highlight=zip#zip"}]}], [{"text": ["First, read up on tuples and lists in Python; then read up on the for loop."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I suggest that you use a tuple to store things that go together."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # define a list of tuples\nlst = [ (\"eggs\", \"an omelet\"), (\"bread\", \"a sandwich\"), (\"sugar\", \"cookies\") ]\n\nfor ingredient, food in lst:\n    print \"I need\", ingredient, \"to make\", food + \".\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you run the above code, here is the output you will get:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n I need eggs to make an omelet.\nI need bread to make a sandwich.\nI need sugar to make cookies.\n</code>\n</pre>\n", "senID": 4}, {"text": ["This is the Pythonic way to solve this problem.", "Here is another way, which I don't like as well:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n ingredients = [\"eggs\", \"bread\", \"sugar\"]\nfoods = [\"an omelet\", \"a sandwich\", \"cookies\"]\n\nfor i in range(len(ingredients)):\n    print \"I need\", ingredients[i], \"to make\", foods[i] + \".\"\n</code>\n</pre>\n", "senID": 6}, {"text": ["This will print the same output as the previous example, but it's harder to work with.", "You need to make sure that the two lists stay synchronized.", "The whole \"list of tuples\" thing may seem weird, but it's actually much easier once you are used to it."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I suggest you get the book Learning Python and study that; it will teach you a lot and it is very clear."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Learning Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0596513984"}]}], [{"text": ["I am not sure if I want to do your homework, but I will give you some hints: To me, this looks like a good place for a for loop.", "Use range, xrange, or enumerate."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["First, you probably want to say z = 0 because arrays in Python (and most programming languages) are zero-indexed - the first element of num is num[0], the second is num[1], and so on.", "Though we don't really even need z.", "More on that later."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "z = 0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "num", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "num[0]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "num[1]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "z", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Second, I would change num and end to nums and endings.", "If we give them a plural name it's clearer that we're using a list.", "Also, lists aren't individual values, but a collection of values.", "We need to get an element of that collection in this case.", "We wouldn't say (nums) (or (num) if you keep it your way) - that gets the entire list.", "We would say nums[x] (or num[x]) which gets element x (remember that arrays are zero-indexed!", "), where x can be a number, a variable holding a number, or any arbitrary expression that evaluates to a number."], "childNum": 11, "tag": "p", "senID": 1, "childList": [{"text": "num", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "end", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "nums", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "endings", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "element", "childNum": 0, "tag": "em", "pos": 5, "childList": []}, {"text": "(nums)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "(num)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "nums[x]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "num[x]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": 6, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Third, you could use a while loop, but even better would be a for loop and the range() and len() functions.", "The syntax for for loops is:"], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "range()", "childNum": 0, "tag": "code", "childList": []}, {"text": "len()", "childNum": 0, "tag": "code", "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for x in y:\n</code>\n</pre>\n", "senID": 3}, {"text": ["Where x is a temporary variable, and y is a list of items.", "The loop iterates over all the items in y, setting each one to x for the body of the loop.", "The range() function creates a list of numbers (which can be easily used as array indices, hint hint).", "The len() function takes a list and returns the length of the list.", "Combine these in the appropriate order to create a loop."], "childNum": 6, "tag": "p", "senID": 4, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "range()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "len()", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}], [{"text": ["first half shamelessly copied from from nailer's answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # List of rhymes, with each part of the rhyme as another list.\nrhymes = ['one','on my thumb'],['two','on my shoe']\n\nfor number, position in rhymes:\n    # print your output in terms of number and position\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I appreciate all the help, I was able to figure out my own working code.", "All of you have been very helpful.", "I will be sure to use this site for help in the future."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Your rhyme encourages violence against the Irish.", "Nevertheless, here's some help. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Since the rhymes themselves have two parts, I've put each rhyme as a two part list, put together into a list of all those rhymes. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # List of rhymes, with each part of the rhyme as another list.\nrhymes = ['one','on my thumb'],['two','on my shoe']\n\n# The total amount of rhymes len(rhymes) lets us know when to stop...\ncount = 0\nwhile count &lt; len(rhymes):\n    print \"This old man, he played \"+rhymes[count][0]\n    print \"He played knick-knack \"+rhymes[count][1]\n    print \"Knick-knack paddywhack, give your dog a bone\"\n    print \"This old man came rolling home \\n\"\n    count += 1\n</code>\n</pre>\n", "senID": 2}]]