[[{"text": ["You can use the python sorting functions' key parameter to sort the index array instead."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "key", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = [2, 3, 1, 4, 5]\n&gt;&gt;&gt; sorted(range(5), key=lambda k: s[k])\n[2, 0, 1, 3, 4]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can do this with numpy's argsort method if you have numpy available:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "argsort", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html#numpy.argsort"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import numpy\n&gt;&gt;&gt; vals = numpy.array([2,3,1,4,5])\n&gt;&gt;&gt; vals\narray([2, 3, 1, 4, 5])\n&gt;&gt;&gt; sort_index = numpy.argsort(vals)\n&gt;&gt;&gt; sort_index\narray([2, 0, 1, 3, 4])\n</code>\n</pre>\n", "senID": 1}, {"text": ["If not available, taken from this question, this is the fastest method:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3382352/equivalent-of-numpy-argsort-in-basic-python"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; vals = [2,3,1,4,5]\n&gt;&gt;&gt; sorted(range(len(vals)), key=vals.__getitem__)\n[2, 0, 1, 3, 4]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you need both the sorted list and the list of indices, you could do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; L = [2,3,1,4,5]\n&gt;&gt;&gt; from operator import itemgetter\n&gt;&gt;&gt; indices, L_sorted = zip(*sorted(enumerate(L), key=itemgetter(1)))\n&gt;&gt;&gt; list(L_sorted)\n[1, 2, 3, 4, 5]\n&gt;&gt;&gt; list(indices)\n[2, 0, 1, 3, 4]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or, for Python &lt;2.4 (no itemgetter or sorted):"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "itemgetter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sorted", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; temp = [(v,i) for i,v in enumerate(L)]\n&gt;&gt;&gt; temp.sort\n&gt;&gt;&gt; indices, L_sorted = zip(*temp)\n</code>\n</pre>\n", "senID": 3}, {"text": ["p.s.", "The zip(*iterable) idiom reverses the zip process (unzip)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "zip(*iterable)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["To deal with your specific requirements:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["That's a long-winded way of doing it.", "You can achieve that with a single sort by zipping both lists together then sort using the object property as your sort key (and unzipping after)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n zipped = zip(obj_list, secondary_list)\nzipped_sorted = sorted(combined, key=lambda x: x[0].some_obj_attribute)\nobj_list, secondary_list = map(list, zip(*zipped_sorted))\n</code>\n</pre>\n", "senID": 7}, {"text": ["Here's a simple example, using strings to represent your object.", "Here we use the length of the string as the key for sorting."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; str_list = [\"banana\", \"apple\", \"nom\", \"Eeeeeeeeeeek\"]\n&gt;&gt;&gt; sec_list = [0.123423, 9.231, 23, 10.11001]\n&gt;&gt;&gt; temp = sorted(zip(str_list, sec_list), key=lambda x: len(x[0]))\n&gt;&gt;&gt; str_list, sec_list = map(list, zip(*temp))\n&gt;&gt;&gt; str_list\n['nom', 'apple', 'banana', 'Eeeeeeeeeeek']\n&gt;&gt;&gt; sec_list\n[23, 9.231, 0.123423, 10.11001]\n</code>\n</pre>\n", "senID": 9}], [{"text": ["What I would do, looking at your specific need:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Say you have list a with some values, and your keys are in the attribute x of the objects stored in list b"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n keys = {i:j.x for i,j in zip(a, b)}\na.sort(key=keys.__get_item__)\n</code>\n</pre>\n", "senID": 2}, {"text": ["With this method you get your list ordered without having to construct the intermediate permutation list you were asking for."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["How about"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l1 = [2,3,1,4,5]\nl2 = [l1.index(x) for x in sorted(l1)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["you can use numpy.argsort"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "numpy.argsort", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["or you can do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n test =  [2,3,1,4,5]\nidxs = zip(*sorted([(val, i) for i, val in enumerate(test)]))[1]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Straight out of the documentation for collections.OrderedDict:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "collections.OrderedDict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; # dictionary sorted by value\n&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[1]))\nOrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Adapted to the example in the original post:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l=[2,3,1,4,5]\n&gt;&gt;&gt; OrderedDict(sorted(enumerate(l), key=lambda x: x[1])).keys()\n[2, 0, 1, 3, 4]\n</code>\n</pre>\n", "senID": 3}, {"text": ["See http://docs.python.org/library/collections.html#collections.OrderedDict for details."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://docs.python.org/library/collections.html#collections.OrderedDict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#collections.OrderedDict"}]}]]