[[{"text": ["If what you want is an \"observable collection\" -- that is, a collection which pushes results at you rather than letting the consumer pull them -- then you probably want to look into the Reactive Framework extensions.", "Here's an article on it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.infoq.com/news/2009/07/Reactive-Framework-LINQ-Events"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.infoq.com/news/2009/07/Reactive-Framework-LINQ-Events", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.infoq.com/news/2009/07/Reactive-Framework-LINQ-Events"}]}, {"text": ["Now, as you note, you can build both \"push\" and \"pull\" style iterators easily if you have coroutines available.", "(Or, as Thomas points out, you can build them with continuations as well.", ")  In the current version of C# we do not have true coroutines (or continuations).", "However, we are very concerned about the pain users feel around asynchronous programming. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "asynchronous programming", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}]}, {"text": ["Implementing fiber-based coroutines as a first-class language feature is one technique that could possibly be used to make asynchronous programming easier, but that is just one possible idea of many that we are at present researching.", "If you have a really solid awesome scenario where coroutines do a better job than anything else -- including the reactive framework -- then I'd love to hear more about it.", "The more realistic data we have about what real problems people are facing in asynchronous programming, the more likely we are to come up with a good solution.", "Thanks!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["UPDATE: We have recently announced that we are adding coroutine-like asynchronous control flows to the next version of C# and VB.", "You can try it yourself with our Community Technology Preview edition, which you can download here."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/vstudio/async.aspx"}]}], [{"text": ["C# does not have general co-routines.", "A general co-routine is where the co-routine has its own stack, i.e.", "it can invoke other methods and those methods can \"yield\" values.", "Implementation of general co-routines requires making some smart things with stacks, possibly up to and including allocating stack frames (the hidden structures which contain local variables) on the heap.", "This can be done, some languages do that (e.g.", "Scheme), but it is somewhat tricky to do it right.", "Also, many programmers find the feature difficult to understand."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "general", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["General co-routines can be emulated with threads.", "Each thread has its own stack.", "In a co-routine setup, both threads (the initial caller, and the thread for the co-routine) will alternate control, they will never actually run simultaneously.", "The \"yield\" mechanism is then an exchange between the two threads, and as such it is expensive (synchronization, a roundtrip through the OS kernel and scheduler...).", "Also, there is much room for memory leaks (the co-routine must be explicitly \"stopped\", otherwise the waiting thread will stick forever).", "Thus, this is rarely done."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["C# provides a bastardized-down co-routine feature called iterators.", "The C# compiler automatically converts the iterator code into a specific state class, with local variables becoming class fields.", "Yielding is then, at the VM level, a plain return.", "Such a thing is doable as long as the \"yield\" is performed from the iterator code itself, not from a method which the iterator code invokes.", "C# iterators already cover many use cases and the C# designers were unwilling to go further down the road to continuations.", "Some sarcastic people are keen to state that implementing full-featured continuations would have prevented C# from being as efficient as its arch-enemy Java (efficient continuations are feasible, but this requires quite some work with the GC and the JIT compiler)."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "iterators", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "return", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "continuations", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Continuation"}]}], [{"text": ["Maybe this will help."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://blogs.msdn.com/ericlippert/archive/2009/07/23/iterator-blocks-part-five-push-vs-pull.aspx"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://blogs.msdn.com/ericlippert/archive/2009/07/23/iterator-blocks-part-five-push-vs-pull.aspx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blogs.msdn.com/ericlippert/archive/2009/07/23/iterator-blocks-part-five-push-vs-pull.aspx"}]}], [{"text": ["thanks @NickLarsen, you helped me remember the new stuff that MS have introduced, the IObservable interface."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["link http://msdn.microsoft.com/en-us/library/dd783449(VS.100).aspx"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://msdn.microsoft.com/en-us/library/dd783449(VS.100).aspx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/dd783449%28VS.100%29.aspx"}]}], [{"text": ["Actually .NET does not make \"incorrect assumptions\" about thread affinity, in fact it totally decouples the notion of a .NET level thread from the OS level thread. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What you have to do is associate a logical .NET thread state with your fiber ( for that you need the CLR Hosting API's but you don'T need to write a host yourself you can use those needed from your own application directly ) and everything, lock tracking, exception handling works normally again."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["An example can be found here: http://msdn.microsoft.com/en-us/magazine/cc164086.aspx"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://msdn.microsoft.com/en-us/magazine/cc164086.aspx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/magazine/cc164086.aspx"}]}, {"text": ["Btw Mono 2.6 contains low level Coroutine support and can be used to implement all higher level primitives easily."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I would love to see a fiber-based API for .Net."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I attempted to use the native fiber API in C# through p/invoke a while back, but because the runtime's exception handling (incorrectly) makes thread-based assumptions, things broke (badly) when exceptions happened."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["One \"killer app\" for a fiber-based coroutine API is game programming; certain types of AI require a \"lightweight\" thread that you can time-slice at will.", "For example, game behavior trees require the ability to \"pulse\" the decision code every frame, allowing the AI code to cooperatively yield back to the caller when the decision slice is up.", "This is possible to implement with hard threads, but much, much more complicated."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So while true fiber use-cases are not mainstream, they definitely exist, and a small niche of us .Net coders would cheer mightily if the existing bugs in the fiber subsystem were worked out."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]