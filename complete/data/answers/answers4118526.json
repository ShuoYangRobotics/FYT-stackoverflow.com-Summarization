[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; import datetime\n&gt;&gt;&gt; hours = ['19:30', '20:10', '20:30', '21:00', '22:00']\n&gt;&gt;&gt; now = datetime.datetime.strptime(\"20:18\", \"%H:%M\")\n&gt;&gt;&gt; min(hours, key=lambda t: abs(now - datetime.datetime.strptime(t, \"%H:%M\")))\n'20:10'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["easy but dirty way"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n max(t for t in sorted(hours) if t&lt;=now)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use functions in the time module; time.strptime() allows you to parse a string into a time-tuple, then time.mktime() converts this to seconds.", "You can then simply compare all items in seconds, and find the smallest difference."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "time.strptime()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "time.mktime()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"code": "<pre>\n<code>\n import bisect\n# you can use the time module like katrielalex answer which a standard library \n# in python, but sadly for me i become an addict to dateutil :)\nfrom dateutil import parser \n\nhour_to_get = parser.parse('20:18')\n\nhours = ['19:30', '20:10', '20:30', '21:00', '22:00']\nhours = map(parser.parse, hours) # Convert to datetime.\n\nhours.sort() # In case the list of hours isn't sorted.\n\nindex = bisect.bisect(hours, hour_to_get)\n\nif index in (0, len(hours) - 1):\n    print \"there is no show running at the moment\"\nelse:\n    print \"running show started at %s \" % hours[index-1]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Hope this can help you :)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I'm not a Python programmer, but I'd use the following algorithm:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["@katrielalex &amp; Tim"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import itertools\n[x for x in itertools.takewhile( lambda t: now &gt; datetime.datetime.strptime(t, \"%H:%M\"), hours )][-1]\n</code>\n</pre>\n", "senID": 1}]]