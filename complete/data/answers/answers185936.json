[[{"text": ["Try the shutil module"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import shutil\nshutil.rmtree('/path/to/folder')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Updated to only delete files and to used the os.path.join() method suggested in the comments.", "If you want to remove all contents of the folder just remove the if statement."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "all", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import os \nfolder = '/path/to/folder'\nfor the_file in os.listdir(folder):\n    file_path = os.path.join(folder, the_file)\n    try:\n        if os.path.isfile(file_path):\n            os.unlink(file_path)\n    except Exception, e:\n        print e\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Expanding on mhawke's answer this is what I've implemented.", "It removes all the content of a folder but not the folder itself.", "Tested on Linux with files, folders and symbolic links, should work on Windows as well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport shutil\n\nfor root, dirs, files in os.walk('/path/to/folder'):\n    for f in files:\n    \tos.unlink(os.path.join(root, f))\n    for d in dirs:\n    \tshutil.rmtree(os.path.join(root, d))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You might be better off using os.walk() for this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.walk()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["os.listdir() doesn't distinguish files from directories and you will quickly get into trouble trying to unlink these.", "There is a good example of using os.walk() to recursively remove a directory here, and hints on how to adapt it to your circumstances."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "os.listdir()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.walk()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://docs.python.org/library/os.html#os.walk", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["You can simply do this :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport glob\n\nfiles = glob.glob('/YOUR/PATH/*')\nfor f in files:\n    os.remove(f)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can of corse use an other filter in you path, for exemple : /YOU/PATH/*.txt for removing all text files in a directory."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The accepted answer will not work if you want to delete the entire folder contents (including sub-folders), as the folder could be non-empty, which will cause os.unlink to error."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Using rmtree and recreating the folder could work, but I have run into errors when deleting and immediately recreating folders on network drives."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The proposed solution using walk does not work as it uses rmtree to remove folders and then may attempt to use os.unlink on the files that were previously in those folders.", "This causes an error."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The posted glob solution will also attempt to delete non-empty folders, causing errors."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I suggest you use:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n folder_path = '/path/to/folder'\nfor file_object in os.listdir(folder_path):\n    file_object_path = os.path.join(folder_path, file_object)\n    if os.path.isfile(file_object_path):\n        os.unlink(file_object_path)\n    else:\n        shutil.rmtree(file_object_path)\n</code>\n</pre>\n", "senID": 5}]]