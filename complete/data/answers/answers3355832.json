[[{"text": ["I would go for a simplified csv file.", "Given that all your values are numbers, you can read them in C# using"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n File.ReadAllText(filename).Split(',')\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can find more C# options for csv here"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1375410/very-simple-c-csv-reader"}]}, {"text": ["On Python you can use the csv module to read and write them.", "Better explanation here, but the short of it is"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "csv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://effbot.org/librarybook/csv.htm"}]}, {"code": "<pre>\n<code>\n import csv\nwriter = csv.writer(filename)\nwriter.writerows(data)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Using CSV also gives you flexibility for future improvements, as well as exporting and importing from other programs like Excel for further processing."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You may consider running IronPython - then you can pass values back and forth across C#/Python"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Have a look at NetCDF and/or HDF5 file formats.", "HDF5 in particular seems to have a .NET implementation, and PyTables is handy on the Python side of things."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "NetCDF", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.unidata.ucar.edu/software/netcdf/"}, {"text": "HDF5", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.hdfgroup.org/HDF5/"}, {"href": "http://www.pytables.org/moin/PyTables", "text": "PyTables", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Why not just have your C# program check for the existence of a file called something like \"constants.bin\".", "If the file does not exist, then have it generate the array and serialize it out to \"constants.bin\".", "If the file does exist then just use serialization to read it back in."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n int[,] constants;\n\nif(!File.Exists(\"constants.bin\")) {\n    GenerateConstants();\n\n    Stream stream = new FileStream(\"constants.bin\", FileMode.Create, FileAccess.Write, FileShare.None);\n    new BinaryFormatter.Serialize(stream, constants);\n    stream.Close();\n}\nelse\n{\n    Stream stream = new FileStream(\"constants.bin\", FileMode.Open, FileAccess.Read, FileShare.Read);\n    constants = (int[,])(new BinaryFormatter.Deserialize(stream));\n    stream.Close();\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["I haven't tested this, so you may need to tweak it a little bit."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The first time you run the C# app the \"constants.bin\" won't exist so it will generate the 2D array and then serialize it out to the file.", "Each subsequent run of the program will find the \"constants.bin\" file and deserialize it into the local 2D array."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["CSV is fine suggestion, but may be clumsy with values being int and double.", "Generally tab or semicomma are best separators."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Python standard library includes the sqlite3module - a lightweight disk-based database.", "For C# there are a few libraries providing sqlite support.", "For example, System.Data.SQLite - a complete ADO.NET 2.0/3.5 provider."], "childNum": 8, "tag": "p", "senID": 0, "childList": [{"text": "Python", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sqlite3module", "tag": "a", "pos": -1, "childList": [{"text": "sqlite3", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/sqlite3.html#module-sqlite3"}, {"text": "sqlite3", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "C#", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "sqlite", "tag": "a", "pos": -1, "childList": [{"text": "sqlite", "tag": "code"}], "childNum": 1, "href": "http://www.sqlite.org/"}, {"text": "sqlite", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "System.Data.SQLite", "tag": "a", "pos": 2, "childList": [{"text": "System.Data.SQLite", "tag": "code"}], "childNum": 1, "href": "http://sqlite.phxsoftware.com/"}, {"text": "System.Data.SQLite", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For your application, use datatypes REAL (stored as an 8-byte IEEE floating point number)\nand INTEGER (stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value). "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "REAL", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "INTEGER", "childNum": 0, "tag": "code", "childList": []}]}]]