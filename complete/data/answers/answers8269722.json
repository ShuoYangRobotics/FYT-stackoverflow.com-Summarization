[[{"code": "<pre>\n<code>\n file = 'file.txt'\nwith open(file, 'r') as f:\n    for line in f:\n        pass\n</code>\n</pre>\n", "senID": 0}], [{"text": ["The Python Tutorial has you covered:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/inputoutput.html#reading-and-writing-files"}]}, {"text": ["You can use itertools.combinations to get all combinations of words:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "itertools.combinations", "tag": "a", "pos": 0, "childList": [{"text": "itertools.combinations", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html#itertools.combinations"}, {"text": "itertools.combinations", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n with open(\"file.txt\") as word_list:\n    for (word1, word2) in itertools.combinations(word_list, 2):\n        if anagram(word1, word2):\n            # do stuff\n</code>\n</pre>\n", "senID": 2}], [{"text": ["This one should show you how to do that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/tutorial/inputoutput.html#methods-of-file-objects"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/tutorial/inputoutput.html#methods-of-file-objects", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/inputoutput.html#methods-of-file-objects"}]}], [{"text": ["The readlines gets you a list of all the words in the file:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n text = open(\"myfile.txt\")\nwordlist = text.readlines()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now you just have to do the for loop:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for item in wordlist:\n    anagramfunction()...\n</code>\n</pre>\n", "senID": 3}], [], [{"text": ["I assume your list of words is not so huge it does not fit in RAM.", "Here is a (non-optimized) algorithm that would build the list of anagrams (using bits of previous answers):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def buildAnagramsList(word, wordList):\n    anagramsList = []\n    for word2 in wordList:\n        if areAnagrams(word, word2): #you already have a similar method\n            list.remove(word2) # Spare some time here by not looking twice for the same anagrams\n            anagramsList.append(word2)\n    return anagramsList\n\nfile = open(\"myfile.txt\")\nwords = [s.strip() for s in file.readlines()]\nanagramsLists = [buildAnagramsList(word, words) for word in words]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I would have gone for something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n wordList = []\nanagrams = []\n\nfile = StringIO.StringIO(open(\"file.txt\",\"rb\"),dialect=csv.excel) //Using csv.excel as each word is on a different line, so hoping this should work but Im not entirely sure\nwordList.extend(wordList)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Wordlist should now be something like [Word1, Word2, Word3]"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for i in xrange(wordList):\n    if wordList[i] == wordList[i+1]://Code to analyse anagrams here\n        anagrams.append(wordList[i])\n</code>\n</pre>\n", "senID": 3}, {"text": ["Im really not sure on this syntax, Im giving you an idea of what I would do.", "Although someone will probably down-vote this answer as its off the top of my head and you would have to stop it throwing an OutOfBounds error but I didnt have a lot of time to write it!", ":P"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]