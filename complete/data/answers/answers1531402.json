[[{"text": ["Use a list comprehension:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def do_something(x):\n  return x**2\n\nlist = []\nresult = [do_something(x) for x in list if list]\nprint result        # []\n\nlist = [1, 2, 3]\nresult = [do_something(x) for x in list if list]\nprint result       # [1, 4, 9]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def do_something_with_maybe_list(maybe_list):\n    if maybe_list:\n        for x in list:\n            do_something(x)\n    else:\n        do_something_else()\n\ndo_something_with_maybe_list(get_list())\n</code>\n</pre>\n", "senID": 0}, {"text": ["You could even extract the actions to be done:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def do_something_with_maybe_list(maybe_list, process_item, none_action):\n    if maybe_list:\n        for x in list:\n            process_item(x)\n    else:\n        none_action()\n\ndo_something_with_maybe_list(get_list(), do_something, do_something_else)\ndo_something_with_maybe_list(get_otherlist(), do_other, do_still_other)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Edit from Oli: Or go one further:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def do_something_with_maybe_list(maybe_list, process_item, none_action):\n    if maybe_list:\n        return process_list(maybe_list)\n    return none_action()\n\ndo_something_with_maybe_list(get_list(), do_something, do_something_else)\ndo_something_with_maybe_list(get_otherlist(), do_other, do_still_other)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Slighty more terse is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in my_list:\n    # got a list\nif not my_list:\n    # not a list\n</code>\n</pre>\n", "senID": 1}, {"text": ["assuming you are not changing the length of the list in the loop. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edit from Oli: To compensate my worries of memory use, it would want withing:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n with get_list() as my_list:\n    for i in my_list:\n        # got a list\n    if not my_list:\n        # not a list\n</code>\n</pre>\n", "senID": 4}, {"text": ["But yes, that's quite a simple way around the issue."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Based on the other answers, I think the cleanest solutions are"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #Handles None return from get_list\nfor item in get_list() or []: \n    pass #do something\n</code>\n</pre>\n", "senID": 1}, {"text": ["or the comprehension equiv"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n result = [item*item for item in get_list() or []]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I think your way is ok in general case, but you may consider this approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def do_something(item):\n   pass # do something with the list\n\ndef action_when_empty():\n   pass # do something if the list was empty\n\n# and here goes your example\nyourlist = get_list() or []\nanother_list = [do_something(x) for x in yourlist] or action_when_empty()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If your actions are different, I would do:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "different", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n list_ = get_list() # underscore to keep built-in list\nif not list_:\n    # do something\nfor i in list_: #\n    # do something for each item\n</code>\n</pre>\n", "senID": 1}, {"text": ["If your actions are similar, this is more beautiful:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "similar", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in list_ or [None]:\n   # do something for list item or None\n</code>\n</pre>\n", "senID": 3}, {"text": ["or, if you might have None as a list element, "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in list_ or [...]:\n   # do something for list item or built-in constant Ellipsis\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n i = None\nfor i in get_list():\n    pass # do something with the list\nelse:\n    if i is None:\n        pass # do something if the list was empty\n</code>\n</pre>\n", "senID": 0}, {"text": ["Does that help?", "Yes I know we are two years away from the need :-)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]