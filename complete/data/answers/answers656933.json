[[{"text": ["What about having it run an http server?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It seems crazy but running a simple web server for administrating your\nserver requires just a few lines using web.py"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You can also consider creating a unix pipe."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Use werkzeug and make your daemon include an HTTP-based WSGI server.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "werkzeug", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://werkzeug.pocoo.org/"}]}, {"text": ["Your daemon has a collection of small WSGI apps to respond with status information."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Your client simply uses urllib2 to make POST or GET requests to localhost:somePort.", "Your client and server must agree on the port number (and the URL's)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This is very simple to implement and very scalable.", "Adding new commands is a trivial exercise."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Note that your daemon does not have to respond in HTML (that's often simple, though).", "Our daemons respond to the WSGI-requests with JSON-encoded status objects."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Yet another approach: use Pyro (Python remoting objects)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Pyro", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyro.sourceforge.net/"}]}, {"text": ["Pyro basically allows you to publish Python object instances as services that can be called remotely.", "I have used Pyro for the exact purpose you describe, and I found it to work very well."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["By default, a Pyro server daemon accepts connections from everywhere.", "To limit this, either use a connection validator (see documentation), or supply host='127.0.0.1' to the Daemon constructor to only listen for local connections."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "host='127.0.0.1'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Daemon", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Example code taken from the Pyro documentation:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Server"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Server", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\nimport Pyro.core\n\nclass JokeGen(Pyro.core.ObjBase):\n        def __init__(self):\n                Pyro.core.ObjBase.__init__(self)\n        def joke(self, name):\n                return \"Sorry \"+name+\", I don't know any jokes.\"\n\nPyro.core.initServer()\ndaemon=Pyro.core.Daemon()\nuri=daemon.connect(JokeGen(),\"jokegen\")\n\nprint \"The daemon runs on port:\",daemon.port\nprint \"The object's uri is:\",uri\n\ndaemon.requestLoop()\n</pre>\n", "senID": 5}, {"text": ["Client"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Client", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\nimport Pyro.core\n\n# you have to change the URI below to match your own host/port.\njokes = Pyro.core.getProxyForURI(\"PYROLOC://localhost:7766/jokegen\")\n\nprint jokes.joke(\"Irmen\")\n</pre>\n", "senID": 7}, {"text": ["Another similar project is RPyC.", "I have not tried RPyC."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "RPyC", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rpyc.wikidot.com/"}]}], [{"text": ["I would use twisted with a named pipe or just open up a socket.", "Take a look at the echo server and client examples.", "You would need to modify the echo server to check for some string passed by the client and then respond with whatever requested info."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "examples", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/projects/core/documentation/examples/"}]}, {"text": ["Because of Python's threading issues you are going to have trouble responding to information requests while simultaneously continuing to do whatever the daemon is meant to do anyways.", "Asynchronous techniques or forking another processes are your only real option.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n # your server\n\nfrom twisted.web import xmlrpc, server\nfrom twisted.internet import reactor\n\nclass MyServer(xmlrpc.XMLRPC):\n\n    def xmlrpc_monitor(self, params):        \n        return server_related_info\n\nif __name__ == '__main__':\n    r = MyServer()\n    reactor.listenTCP(8080, Server.Site(r))\n    reactor.run()\n</code>\n</pre>\n", "senID": 0}, {"text": ["client can be written using xmlrpclib, check example code here."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/xmlrpclib.html"}]}], [{"text": ["You could associate it with Pyro (http://pyro.sourceforge.net/) the Python Remote Object.", "It lets you remotely access python objects.", "It's easily to implement, has low overhead, and isn't as invasive as Twisted."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pyro.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyro.sourceforge.net/"}]}], [{"text": ["Assuming you're under *nix, you can send signals to a running program with kill from a shell (and analogs in many other environments).", "To handle them from within python check out the signal module."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "kill", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "signal", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/signal.html"}]}]]