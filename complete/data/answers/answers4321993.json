[[{"text": ["multithreading cannot make use of extra processors or cores."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You should spawn new processes instead of new threads."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This tool is by far the simplest among all that I have come across:\nparallel python"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "parallel python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.parallelpython.com"}]}], [{"text": ["you can get that if your program is of the type that would benefit using python's multiprocessing module"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python's multiprocessing module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html"}]}, {"text": ["multiprocessing uses multiple python process which avoids problems with the GIL so it's possible to use all of those cores with python code it has a easy threaded map and the basis for more complex schemes"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["it is similar to parallel python but is limited to the local machine and is included with python 2.6 and higher and is metaphorically similar to python's threading"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["As an addition to what Jon said, if you're using the standard Python interpreter you should understand the limitations with respect to multi-threading.", "If your threads are pure-python and aren't making system calls, they can't run concurrently on multiple processors due to the Global Interpreter Lock so the benefits to multi-threading are minimal.", "In this case, perhaps the recommendation would be to go with multiple processes instead or to switch to another Python implementation such as JPython or IronPython, which do not have a Global Interpreter Lock."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Global Interpreter Lock", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Global_Interpreter_Lock"}]}], [{"text": ["Assuming your task is parallelizable, then yes, threading is certainly a solution.", "In particular, if you have a lot of data items to process but they can all be handled independently then it should be relatively straightforward to parallelize."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "independently", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Using multiple processes instead of multiple threads might be another solution - you haven't told us enough about the problem to say, really."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "might", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Multithreading is required for a single process, but it is not necessarily a solution; processor affinity can restrict it to a subset of available cores even if you have more than enough threads to use all."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Do this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Break your task in to steps or stages.", "Each step reads something, does part of the overall calculation and writes something."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n \"\"\"Some Step.\"\"\"\nimport json\nfor some_line in sys.stdin:\n    object= json.loads( some_line )\n    # process the object\n    json.dump( result, sys.stdout )\n</code>\n</pre>\n", "senID": 2}, {"text": ["Something like that ought to do fine."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you have multiple objects that must be communicated, make a simple dictionary of the objects."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n results = { 'a': a, 'b': b }\n</code>\n</pre>\n", "senID": 5}, {"text": ["Connect them in a pipeline, like this."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n python step1.py | python step2.py | python step3.py &gt;output_file.dat\n</code>\n</pre>\n", "senID": 7}, {"text": ["If you can break things into 8 or more steps, you will use 8 or more cores.", "And, BTW, this will be blazingly fast for very little real work."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]]