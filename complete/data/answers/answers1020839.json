[[{"text": ["If you want to code it from scratch select is the way to go (and you can read on Google Book Search most of the chapter of Python in a Nutshell that covers such matters); if you want to leverage more abstraction, asyncore is usable, but Twisted is much richer and more powerful."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "select", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "asyncore", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://twistedmatrix.com/trac/", "text": "Twisted", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["You should use select."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "select", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://linux.die.net/man/2/select"}]}, {"text": ["Check:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Another select link"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["howto"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}], [{"text": ["I wrote one in async I/O...  its a lot easier to wrap your head around than a full threading model."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["if you can get your hands ahold of \"talk\"'s source code, you can learn a lot about it.", "see a demo http://dsl.org/cookbook/cookbook_40.html#SEC559 , or try it your self if you are on a linux box..."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://dsl.org/cookbook/cookbook_40.html#SEC559", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://dsl.org/cookbook/cookbook_40.html#SEC559"}]}, {"text": ["it sends characters in real-time."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["also, ytalk is interactive and multiple users....   kinda like hudddlechat or campfire."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Chat programs are doing two things concurrently."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You have several ways to do this."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Well, well, here's what I am having at this very moment."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Server goes like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import asyncore\nimport socket\n\nclients = {}\n\nclass MainServerSocket(asyncore.dispatcher):\n    def __init__(self, port):\n        asyncore.dispatcher.__init__(self)\n        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.bind(('',port))\n        self.listen(5)\n    def handle_accept(self):\n        newSocket, address = self.accept( )\n        clients[address] = newSocket\n        print \"Connected from\", address\n        SecondaryServerSocket(newSocket)\n\nclass SecondaryServerSocket(asyncore.dispatcher_with_send):\n    def handle_read(self):\n        receivedData = self.recv(8192)\n        if receivedData:\n            every = clients.values()\n            for one in every:\n                one.send(receivedData+'\\n')\n        else: self.close( )\n    def handle_close(self):\n        print \"Disconnected from\", self.getpeername( )\n        one = self.getpeername( )\n        del clients[one]\n\nMainServerSocket(21567)\nasyncore.loop( )\n</code>\n</pre>\n", "senID": 2}, {"text": ["And client goes just like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from Tkinter import *\nfrom socket import *\nimport thread\n\nHOST = 'localhost'\nPORT = 21567\nBUFSIZE = 1024\nADDR = (HOST, PORT)\n\ntcpCliSock = socket(AF_INET, SOCK_STREAM)\ntcpCliSock.connect(ADDR)\n\nclass Application(Frame):\n    def __init__(self, master):\n        Frame.__init__(self, master)\n        self.grid()\n        self.create_widgets()\n        self.socket()\n\n    def callback(self, event):\n        message = self.entry_field.get()\n        tcpCliSock.send(message)\n\n    def create_widgets(self):\n        self.messaging_field = Text(self, width = 110, height = 20, wrap = WORD)\n        self.messaging_field.grid(row = 0, column = 0, columnspan = 2, sticky = W)\n\n        self.entry_field = Entry(self, width = 92)\n        self.entry_field.grid(row = 1, column = 0, sticky = W)\n        self.entry_field.bind('&lt;Return&gt;', self.callback)\n\n    def add(self, data):\n        self.messaging_field.insert(END, data)\n\n    def socket(self):\n        def loop0():\n            while 1:\n                data = tcpCliSock.recv(BUFSIZE)\n                if data: self.add(data)\n\n        thread.start_new_thread(loop0, ())\n\n\n\nroot = Tk()\nroot.title(\"Chat client\")\nroot.geometry(\"550x260\")\n\napp = Application(root)\n\nroot.mainloop()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now it's time to make the code look better and add some functionality."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Thanks for your help, folks!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Your question was not very coherent.", "However, your program does not need to be asynchronous at all to attain what you are asking for."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is a working chat script you originally wanted with minimal changes.", "It uses 1 thread for receiving and 1 for sending, both using blocking sockets.", "It is far simpler than using asynchronous methods."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from socket import *\nfrom threading import Thread\nimport sys\n\nHOST = 'localhost'\nPORT = 21567\nBUFSIZE = 1024\nADDR = (HOST, PORT)\n\ntcpCliSock = socket(AF_INET, SOCK_STREAM)\ntcpCliSock.connect(ADDR)\n\ndef recv():\n    while True:\n        data = tcpCliSock.recv(BUFSIZE)\n        if not data: sys.exit(0)\n        print data\n\nThread(target=recv).start()\nwhile True:\n    data = raw_input('&gt; ')\n    if not data: break\n    tcpCliSock.send(data)\n\ntcpCliSock.close()\n</code>\n</pre>\n", "senID": 2}]]