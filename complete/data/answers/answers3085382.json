[[{"text": ["If the quotes you want to strip are always going to be \"first and last\" as you said, then you could simply use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["string = string[1:-1]"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "string = string[1:-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you can't assume that all the strings you process have double quotes you can use something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if string.startswith('\"') and string.endswith('\"'):\n    string = string[1:-1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I'm sure that you just used string as the variable name for exemplification here and in your real code it has a useful name, but I feel obliged to warn you that there is a module named string in the standard libraries.", "It's not loaded automatically, but if you ever use import string make sure your variable doesn't eclipse it."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "string", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "string", "tag": "a", "pos": 1, "childList": [{"text": "string", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/string.html"}, {"text": "string", "childNum": 0, "tag": "code", "childList": []}, {"text": "import string", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If string is always as you show:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string[1:-1]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you are sure there is a \" at the beginning and at the end, which you want to remove, just do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string = string[1:len(string)-1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n string = string[1:-1]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["To remove the first and last characters, and in each case do the removal only if the character in question is a double quote:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\ns = re.sub(r'^\"|\"$', '', s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that the RE pattern is different than the one you had given, and the operation is sub (\"substitute\") with an empty replacement string (strip is a string method but does something pretty different from your requirements, as other answers have indicated)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "sub", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "strip", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["find the position of the first and the last \" in your string"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = '\"\" \" \" \"\"\\\\1\" \" \"\" \"\"'\n&gt;&gt;&gt; l = s.find('\"')\n&gt;&gt;&gt; r = s.rfind('\"')\n\n&gt;&gt;&gt; s[l+1:r]\n'\" \" \" \"\"\\\\1\" \" \"\" \"'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Almost done.", "Quoting from http://docs.python.org/library/stdtypes.html?highlight=strip#str.strip"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/stdtypes.html?highlight=strip#str.strip", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html?highlight=strip#str.strip"}]}, {"text": ["[...]"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So the argument is not a regexp."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; string = '\"\" \" \" \"\"\\\\1\" \" \"\" \"\"'\n&gt;&gt;&gt; string.strip('\"')\n' \" \" \"\"\\\\1\" \" \"\" '\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note, that this is not exactly what you requested, because it eats multiple quotes from both end of the string!"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Note, that this is not exactly what you requested, because it eats multiple quotes from both end of the string!", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]