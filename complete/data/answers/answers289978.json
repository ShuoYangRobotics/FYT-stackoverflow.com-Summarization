[[{"text": ["Everyone else seems to have the cPython -> SQL Server side covered.", "If you want to use IronPython, you can use the standard ADO.NET API to talk to the database:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import clr\nclr.AddReference('System.Data')\nfrom System.Data.SqlClient import SqlConnection, SqlParameter\n\nconn_string = 'data source=&lt;machine&gt;; initial catalog=&lt;database&gt;; trusted_connection=True'\nconnection = SqlConnection(conn_string)\nconnection.Open()\ncommand = connection.CreateCommand()\ncommand.CommandText = 'select id, name from people where group_id = @group_id'\ncommand.Parameters.Add(SqlParameter('group_id', 23))\n\nreader = command.ExecuteReader()\nwhile reader.Read():\n    print reader['id'], reader['name']\n\nconnection.Close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you've already got IronPython, you don't need to install anything else."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Lots of docs available here and here."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlconnection.aspx"}, {"href": "http://www.ironpython.info/index.php/Contents#Databases", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I use SQL Alchemy with cPython (I don't know if it'll work with IronPython though).", "It'll be pretty familiar to you if you've used Hibernate/nHibernate.", "If that's a bit too verbose for you, you can use Elixir, which is a thin layer on top of SQL Alchemy.", "To use either one of those, you'll need pyodbc, but that's a pretty simple install."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "SQL Alchemy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/"}, {"text": "Elixir", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://elixir.ematia.de/trac/wiki"}, {"text": "pyodbc", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://pyodbc.sourceforge.net/"}]}, {"text": ["Of course, if you want to write straight SQL and not use an ORM, you just need pyodbc."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["pyodbc comes with Activestate Python, which can be downloaded from here.", "A minimal odbc script to connect to a SQL Server 2005 database looks like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.activestate.com/store/productdetail.aspx?prdGuid=b08b04e0-6872-4d9d-a722-7a0c2dea2758"}]}, {"code": "<pre>\n<code>\n import odbc\n\nCONNECTION_STRING=\"\"\"\\\nDriver={SQL Native Client};\nServer=[Insert Server Name Here];\nDatabase=[Insert DB Here];\nTrusted_Connection=yes;\n\"\"\"\n\ndb = odbc.odbc(CONNECTION_STRING)\nc = db.cursor()\nc.execute ('select foo from bar')\nrs = c.fetchall()\nfor r in rs:\n    print r[0]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["http://adodbapi.sourceforge.net/ can be used with either CPython or IronPython.", "I have been very pleased with it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://adodbapi.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://adodbapi.sourceforge.net/"}]}], [{"text": ["I also successfully use pymssql with CPython.", "(With and without SQLAlchemy)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pymssql", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pymssql.sourceforge.net/"}]}], [{"text": ["I've used pymssql with standard python and liked it.", "Probably easier than the alternatives mentioned if you're just looking for basic database access."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "pymssql", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pymssql.sourceforge.net/"}, {"text": "just", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Sample code."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pymssql.sourceforge.net/example_pymssql.html"}]}], [{"text": ["If you are want the quick and dirty way with CPython (also works for 3.X python):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Install PYWIN32 after you install python http://sourceforge.net/projects/pywin32/files/pywin32/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://sourceforge.net/projects/pywin32/files/pywin32/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/pywin32/files/pywin32/"}]}, {"text": ["Import the following library:\nimport odbc"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I created the following method for getting the SQL Server odbc driver (it is slightly different in naming depending on your version of Windows, so this will get it regardless):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def getSQLServerDriver():\n    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r\"SOFTWARE\\ODBC\\ODBCINST.INI\")\n    sqlServerRegExp =  re.compile('sql.*server', re.I | re.S)\n\n    try:\n        for i in range(0, 2048):\n            folder = winreg.EnumKey(key, i)\n            if sqlServerRegExp.match(folder):\n                return folder.strip()\n    except WindowsError:\n        pass\n</code>\n</pre>\n", "senID": 4}, {"text": ["Note: if you use the above function, you'll need to also import these two libraries: winreg and re"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Then you use the odbc API 1 information as defined here: http://www.python.org/dev/peps/pep-0248/"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://www.python.org/dev/peps/pep-0248/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0248/"}]}, {"text": ["Your connection interface string should look something like this (assuming you are using my above method for getting the ODBC driver name, and it is a trusted connection):"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n dbString = \"Driver={SQLDriver};Server=[SQL Server];Database=[Database Name];Trusted_Connection=yes;\".replace('{SQLDriver}', '{' + getSQLServerDriver() + '}')\n</code>\n</pre>\n", "senID": 8}, {"text": ["This method has many down sides.", "It is clumsy because of only supporting ODBC API 1, and there are a couple minor bugs in either the API or the ODBC driver that I've run across, but it does get the job done in all versions of CPython in Windows."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]]