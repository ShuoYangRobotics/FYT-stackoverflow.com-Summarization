[[{"text": ["what about this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n  if x:\n      print 'before statement 1'\n      statement1\n      print 'before statement 2' #ecc. ecc.\n      statement2\n      statement3\n  elif y:\n      statement4\n      statement5\n      statement6\n  else:\n      raise\n\nexcept:\n      statement7\n</code>\n</pre>\n", "senID": 1}, {"text": ["this is the straightforward workaround but I suggest to use a debugger"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["or even better, use the sys module :D"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n try:\n      if x:\n          print 'before statement 1'\n          statement1\n          print 'before statement 2' #ecc. ecc.\n          statement2\n          statement3\n      elif y:\n          statement4\n          statement5\n          statement6\n      else:\n          raise\nexcept:\n    print sys.exc_traceback.tb_lineno \n    #this is the line number, but there are also other infos\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You should wrap the statements you care about more tightly.", "Extracting the line number from the traceback is going to be involved and fragile."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you restructure the code like so, you should get a line number when the exception is raised again:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n except:\n    statement7\n    raise\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I believe the several answers here recommending you manage your try/except blocks more tightly are the answer you're looking for.", "That's a style thing, not a library thing."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "try/except", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["However, at times we find ourselves in a situation where it's not a style thing, and you really do need the line number to do some other programattic action.", "If that's what you're asking, you should consider the traceback module.", "You can extract all the information you need about the most recent exception.", "The tb_lineno function will return the line number causing the exception. "], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "do", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "traceback", "tag": "a", "pos": 1, "childList": [{"text": "traceback", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/traceback.html"}, {"text": "traceback", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "tb_lineno", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import traceback\n&gt;&gt;&gt; dir(traceback)\n['__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '_format_final_exc_line', '_print', '_some_str', 'extract_stack', 'extract_tb', 'format_exc', 'format_exception', 'format_exception_only', 'format_list', 'format_stack', 'format_tb', 'linecache', 'print_exc', 'print_exception', 'print_last', 'print_list', 'print_stack', 'print_tb', 'sys', 'tb_lineno', 'types']\n&gt;&gt;&gt; help(traceback.tb_lineno)\nHelp on function tb_lineno in module traceback:\n\ntb_lineno(tb)\nCalculate correct line number of traceback given in tb.\nObsolete in 2.3\n</code>\n</pre>\n", "senID": 2}, {"text": ["Newer versions of the traceback plumbing fix the issue prior to 2.3, allowing the code below to work as it was intended:  (this is the \"right way\")"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import traceback\nimport sys\n\ntry:\n    raise Exception(\"foo\")\nexcept:\n    for frame in traceback.extract_tb(sys.exc_info()[2]):\n        fname,lineno,fn,text = frame\n        print \"Error in %s on line %d\" % (fname, lineno)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Remove the lines one at a time..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Using a general except statement is usually a bad programming practice, so you should specify in your except statement what exception you want to catch.", "( like except ValueError: ) "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Moreover, you should surround with a try except structure the bits of code that are supposed to be raising an exception."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]