[[{"text": ["For the first question, the first thing you should do is sort the list by the second field:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = [\n ['4', '21', '1', '14', '2008-10-24 15:42:58'], \n ['3', '22', '4', '2somename', '2008-10-24 15:22:03'], \n ['5', '21', '3', '19', '2008-10-24 15:45:45'], \n ['6', '21', '1', '1somename', '2008-10-24 15:45:49'], \n ['7', '22', '3', '2somename', '2008-10-24 15:45:51']\n]\n\nfrom operator import itemgetter\n\nx.sort(key=itemgetter(1))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you can use itertools' groupby function:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from itertools import groupby\ny = groupby(x, itemgetter(1))\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now y is an iterator containing tuples of (element, item iterator).", "It's more confusing to explain these tuples than it is to show code:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n for elt, items in groupby(x, itemgetter(1)):\n    print elt, items\n    for i in items:\n        print i\n</code>\n</pre>\n", "senID": 5}, {"text": ["Which prints:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n 21 &lt;itertools._grouper object at 0x511a0&gt;\n['4', '21', '1', '14', '2008-10-24 15:42:58']\n['5', '21', '3', '19', '2008-10-24 15:45:45']\n['6', '21', '1', '1somename', '2008-10-24 15:45:49']\n22 &lt;itertools._grouper object at 0x51170&gt;\n['3', '22', '4', '2somename', '2008-10-24 15:22:03']\n['7', '22', '3', '2somename', '2008-10-24 15:45:51']\n</code>\n</pre>\n", "senID": 7}, {"text": ["For the second part, you should use list comprehensions as mentioned already here:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n from pprint import pprint as pp\npp([y for y in x if y[3] == '2somename'])\n</code>\n</pre>\n", "senID": 9}, {"text": ["Which prints:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n [['3', '22', '4', '2somename', '2008-10-24 15:22:03'],\n ['7', '22', '3', '2somename', '2008-10-24 15:45:51']]\n</code>\n</pre>\n", "senID": 11}], [{"text": ["If you assigned it to var \"a\"..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["#1:  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a.sort(lambda x,y: cmp(x[1], y[1]))\n</code>\n</pre>\n", "senID": 2}, {"text": ["#2:  "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n filter(lambda x: x[3]==\"2somename\", a)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If I understand your question correctly, the following code should do the job:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = [\n ['4', '21', '1', '14', '2008-10-24 15:42:58'], \n ['3', '22', '4', '2somename', '2008-10-24 15:22:03'], \n ['5', '21', '3', '19', '2008-10-24 15:45:45'], \n ['6', '21', '1', '1somename', '2008-10-24 15:45:49'], \n ['7', '22', '3', '2somename', '2008-10-24 15:45:51']\n]\n\ndef compareField(field):\n   def c(l1,l2):\n      return cmp(l1[field], l2[field])\n   return c\n\n# Use compareField(1) as the ordering criterion, i.e. sort only with\n# respect to the 2nd field\nl.sort(compareField(1))\nfor row in l: print row\n\nprint\n# Select only those sublists for which 4th field=='2somename'\nl2somename = [row for row in l if row[3]=='2somename']\nfor row in l2somename: print row\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['4', '21', '1', '14', '2008-10-24 15:42:58']\n['5', '21', '3', '19', '2008-10-24 15:45:45']\n['6', '21', '1', '1somename', '2008-10-24 15:45:49']\n['3', '22', '4', '2somename', '2008-10-24 15:22:03']\n['7', '22', '3', '2somename', '2008-10-24 15:45:51']\n\n['3', '22', '4', '2somename', '2008-10-24 15:22:03']\n['7', '22', '3', '2somename', '2008-10-24 15:45:51']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["For part (2), with x being your array, I think you want,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [y for y in x if y[3] == '2somename']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which will return a list of just your data lists that have a fourth value being '2somename'...", "Although it seems Kamil is giving you the best advice with going for SQL..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Lists have a built in sort method and you can provide a function that extracts the sort key."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import pprint\n&gt;&gt;&gt; l.sort(key = lambda ll: ll[1])\n&gt;&gt;&gt; pprint.pprint(l)\n[['4', '21', '1', '14', '2008-10-24 15:42:58'],\n ['5', '21', '3', '19', '2008-10-24 15:45:45'],\n ['6', '21', '1', '1somename', '2008-10-24 15:45:49'],\n ['3', '22', '4', '2somename', '2008-10-24 15:22:03'],\n ['7', '22', '3', '2somename', '2008-10-24 15:45:51']]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This looks like a job for list comprehensions"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "list comprehensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [ll[3] for ll in l]\n['14', '2somename', '19', '1somename', '2somename']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you'll be doing a lot of sorting and filtering, you may like some helper functions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n m = [\n ['4', '21', '1', '14', '2008-10-24 15:42:58'], \n ['3', '22', '4', '2somename', '2008-10-24 15:22:03'], \n ['5', '21', '3', '19', '2008-10-24 15:45:45'], \n ['6', '21', '1', '1somename', '2008-10-24 15:45:49'], \n ['7', '22', '3', '2somename', '2008-10-24 15:45:51']\n]\n\n# Sort and filter helpers.\nsort_on   = lambda pos:     lambda x: x[pos]\nfilter_on = lambda pos,val: lambda l: l[pos] == val\n\n# Sort by second column\nm = sorted(m, key=sort_on(1))\n\n# Filter on 4th column, where value = '2somename'\nm = filter(filter_on(3,'2somename'),m)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You're simply creating indexes on your structure, right?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import defaultdict\n&gt;&gt;&gt; def indexOn( things, pos ):\n...     inx= defaultdict(list)\n...     for t in things:\n...             inx[t[pos]].append(t)\n...     return inx\n... \n&gt;&gt;&gt; a=[\n...  ['4', '21', '1', '14', '2008-10-24 15:42:58'], \n...  ['3', '22', '4', '2somename', '2008-10-24 15:22:03'], \n...  ['5', '21', '3', '19', '2008-10-24 15:45:45'], \n...  ['6', '21', '1', '1somename', '2008-10-24 15:45:49'], \n...  ['7', '22', '3', '2somename', '2008-10-24 15:45:51']\n... ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here's your first request, grouped by position 1."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import pprint\n&gt;&gt;&gt; pprint.pprint( dict(indexOn(a,1)) )\n{'21': [['4', '21', '1', '14', '2008-10-24 15:42:58'],\n        ['5', '21', '3', '19', '2008-10-24 15:45:45'],\n        ['6', '21', '1', '1somename', '2008-10-24 15:45:49']],\n '22': [['3', '22', '4', '2somename', '2008-10-24 15:22:03'],\n        ['7', '22', '3', '2somename', '2008-10-24 15:45:51']]}\n</code>\n</pre>\n", "senID": 3}, {"text": ["Here's your second request, grouped by position 3."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dict(indexOn(a,3))\n{'19': [['5', '21', '3', '19', '2008-10-24 15:45:45']], '14': [['4', '21', '1', '14', '2008-10-24 15:42:58']], '2somename': [['3', '22', '4', '2somename', '2008-10-24 15:22:03'], ['7', '22', '3', '2somename', '2008-10-24 15:45:51']], '1somename': [['6', '21', '1', '1somename', '2008-10-24 15:45:49']]}\n&gt;&gt;&gt; pprint.pprint(_)\n{'14': [['4', '21', '1', '14', '2008-10-24 15:42:58']],\n '19': [['5', '21', '3', '19', '2008-10-24 15:45:45']],\n '1somename': [['6', '21', '1', '1somename', '2008-10-24 15:45:49']],\n '2somename': [['3', '22', '4', '2somename', '2008-10-24 15:22:03'],\n               ['7', '22', '3', '2somename', '2008-10-24 15:45:51']]}\n</code>\n</pre>\n", "senID": 5}], [{"text": ["It looks a lot like you're trying to use a list as a database."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Nowadays Python includes sqlite bindings in the core distribution.", "If you don't need persistence, it's really easy to create an in-memory sqlite database (see http://stackoverflow.com/questions/304393/how-do-i-create-a-sqllite3-in-memory-database). "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/304393/how-do-i-create-a-sqllite3-in-memory-database", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/304393/how-do-i-create-a-sqllite3-in-memory-database"}]}, {"text": ["Then you can use SQL statements to do all this sorting and filtering without having to reinvent the wheel."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]