[[{"text": ["To solve your example you can do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mydict = dict((k.strip(), v.strip()) for k,v in \n              (item.split('-') for item in s.split(',')))\n</code>\n</pre>\n", "senID": 1}, {"text": ["It does 3 things:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "split the string into ", "tag": "none", "senID": 3}, {"text": "split each part into ", "tag": "none", "senID": 4}, {"text": "remove the whitespace from each pair: ", "tag": "none", "senID": 5}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'A - 13, B - 14, C - 29, M - 99'\n&gt;&gt;&gt; dict(e.split(' - ') for e in s.split(','))\n{'A': '13', 'C': '29', 'B': '14', 'M': '99'}\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT: The next solution is for when you want the values as integers, which I think is what you want."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))\n{'A': 13, ' B': 14, ' M': 99, ' C': 29}\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; dict((k.strip(),int(v.strip())) for k,v in (p.split('-') for p in s.split(',')))\n{'A': 13, 'B': 14, 'M': 99, 'C': 29}\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n dict((p.split(' - ') for p in s.split(',')))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here's an answer that doesn't use generator expressions and uses replace rather than strip."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "replace", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "strip", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'A - 13, B - 14, C - 29, M - 99'\n&gt;&gt;&gt; d = {}\n&gt;&gt;&gt; for pair in s.replace(' ','').split(','):\n...     k, v = pair.split('-')\n...     d[k] = int(v)\n...\n&gt;&gt;&gt; d\n{'A': 13, 'C': 29, 'B': 14, 'M': 99}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This should work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict(map(lambda l:map(lambda j:j.strip(),l), map(lambda i: i.split('-'), s.split(','))))\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you don't want to strip, just do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n dict(map(lambda i: i.split('-'), s.split(',')))\n</code>\n</pre>\n", "senID": 3}]]