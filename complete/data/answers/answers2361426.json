[[{"text": ["Similar to using ifilter, you could use a generator expression:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ifilter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; (x for x in xrange(10) if x &gt; 5).next()\n6\n</code>\n</pre>\n", "senID": 1}, {"text": ["In either case, you probably want to catch StopIteration though, in case no elements satisfy your condition."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "StopIteration", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Technically speaking, I suppose you could do something like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; foo = None\n&gt;&gt;&gt; for foo in (x for x in xrange(10) if x &gt; 5): break\n... \n&gt;&gt;&gt; foo\n6\n</code>\n</pre>\n", "senID": 4}, {"text": ["It would avoid having to make a try/except block.", "But that seems kind of obscure and abusive to the syntax."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "try/except", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["In Python 2.6 or better, next(x for x in the_iterable if x &gt; 3), assuming you want None if no item in the iterale satisfies the condition (if you want a different default result in that case, you can pass it to next as a second argument, but you'll need an extra pair of parentheses around the generator expression)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "next(x for x in the_iterable if x &gt; 3)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}, {"text": "next", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I see most answers resolutely ignore the next built-in and so I assume that for some mysterious reason they're 100% focused on versions 2.5 and older -- without mentioning the Python-version issue (but then I don't see that mention in the answers that do mention the next built-in, which is why I thought it necessary to provide an answer myself -- at least the \"correct version\" issue gets on record this way;-)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "next", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "do", "childNum": 0, "tag": "em", "childList": []}, {"text": "next", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In 2.5, the .next() method of iterators immediately raises StopIteration if the iterator immediately finishes -- i.e., for your use case, if no item in the iterable satisfies the condition.", "If you don't care (i.e., you know there must be at least one satisfactory item) then just use .next() (best on a genexp, line for the next built-in in Python 2.6 and better)."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": ".next()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "StopIteration", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "must", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": ".next()", "childNum": 0, "tag": "code", "childList": []}, {"text": "next", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you do care, wrapping things in a function as you had first indicated in your Q seems best, and while the function implementation you proposed is just fine, you could alternatively use itertools, a for...: break loop, or a genexp, or a try/except StopIteration as the function's body, as various answers suggested.", "There's not much added value in any of these alternatives so I'd go for the starkly-simple version you first proposed."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "do", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "itertools", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "for...: break", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "try/except StopIteration", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["The itertools module contains a filter function for iterators.", "The first element of the filtered iterator can be obtained by calling next() on it:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "tag": "a", "pos": 0, "childList": [{"text": "itertools", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html"}, {"text": "itertools", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "next()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n from itertools import ifilter\n\nprint ifilter((lambda i: i &gt; 3), range(10)).next()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I would write this "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n next(x for x in xrange(10) if i &gt; 3)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For older versions of Python where the next built-in doesn't exist:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (x for x in range(10) if x &gt; 3).next()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Oneliner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n thefirst = [i for i in range(10) if i &gt; 3][0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["If youre not sure that any element will be valid according to the criteria, you should enclose this with try/except since that [0] can raise an IndexError."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "try/except", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[0]", "childNum": 0, "tag": "code", "childList": []}, {"text": "IndexError", "childNum": 0, "tag": "code", "childList": []}]}]]