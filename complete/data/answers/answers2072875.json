[[{"text": ["First, note that your question has nothing to do with classmethod (which makes class methods in Python) -- it's entirely about normal instance methods (you should edit your title... or your question, if you do mean it to be about class methods)."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "classmethod", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html?highlight=classmethod#classmethod"}, {"text": "class", "childNum": 0, "tag": "em", "childList": []}, {"text": "instance", "childNum": 0, "tag": "em", "childList": []}, {"text": "do", "childNum": 0, "tag": "strong", "childList": []}, {"text": "class", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["For the Q as it stands, the only way to do what you want is to pass the names of the attributes that the method needs to set (or enough data to let the method reconstruct the names), e.g."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "names", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def update(self,data):\n     x, y, vx, vy = data\n     self.update_sums('x' , x)\n     self.update_sums('y' , y)\n\ndef update_sums(self, attname, val):\n     sums = 'sum_' + attname\n     setattr(self, sums, getattr(self, sums, 0) + val)\n     sums = 'sum_' + attname + '_squared'\n     setattr(self, sums, getattr(self, sums, 0) + val * val)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I would not recommend this approach, in general, as it makes code bulkier, less readable, and marginally less efficient than the elementary approach of just hard-coding the attribute names.", "If the auxiliary method (here update_sums) encapsulates a lot of tricky logic that you're really very keen to avoid duplicating, maybe; but while eliminating repetition is a very worthwhile task, it takes taste and balance to avoid going overboard with it;-)."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "update_sums", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["you don't need to pass nothing but the self, which you're mandated to do anyway:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def update_sums(self, val):\n    self.sum += val\n    self.sum_squared += val * val\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["the call will be the following: self.update_sums(x)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "self.update_sums(x)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The way you designed the class so far is not very useful or flexible, I'd suggest something along these lines:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class X:\n    def __init__(self):\n          self.sums = [0] * 4\n          self.sums_squared = [0] * 4\n\n    def update(self, data):\n         self.update_sums(data)\n\n    def update_sums(self, vals):\n          self.sums = [i + j for i, j in zip(self.sums, vals)]\n          self.sums_squared = [i + j*j for i, j in zip(self.sums, vals)]\n</code>\n</pre>\n", "senID": 4}, {"text": ["It's still no ideal, because I don't know what the purpose of this whole thing is, but it's better then to have all those values."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["No need.", "You have direct access to self.sumx, etc."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Are you sure that the functions do belong to the class X?", "You seem to be missing semicolon and whitespace formatting."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You don't have to pass them, update_sums can access them just like update can."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It looks to me like there is another class in there wanting to be let out.", "I would remove duplication by refactoring the code like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class SumOfSquares(object):\n    def __init__(self):\n        self.sum = 0.0\n        self.squares = 0.0\n\n    def update(self, val):\n        self.sum += val\n        self.squares += val * val\n\nclass X(object):\n    def __init__(self):\n        self.x = SumOfSquares()\n        self.y = SumOfSquares()\n\n    def update(self,data):\n         [x,y,vx,vy]=data\n         self.x.update(x)\n         self.y.update(y)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["self.sumx, self.sum_x_squared?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]