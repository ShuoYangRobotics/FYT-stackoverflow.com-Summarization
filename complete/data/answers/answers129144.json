[[{"text": ["You could use the withstatement if you have python 2.5"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "withstatement", "tag": "a", "pos": 0, "childList": [{"text": "with", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/whatsnew/pep-343.html"}, {"text": "with", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from __future__ import with_statement\nimport contextlib\n\n@contextlib.contextmanager\ndef handler():\n    try:\n        yield\n    except Exception, e:\n        baz(e)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Your example now becomes:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n with handler():\n    foo(a, b)\nwith handler():\n    bar(c, d)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If they're simple one-line commands, you can wrap them in lambdas:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lambda", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for cmd in [\n    (lambda: foo (a, b)),\n    (lambda: bar (c, d)),\n]:\n    try:\n        cmd ()\n    except StandardError, e:\n        baz (e)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You could wrap that whole thing up in a function, so it looked like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ignore_errors (baz, [\n    (lambda: foo (a, b)),\n    (lambda: bar (c, d)),\n])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If this is always, always the behaviour you want when a particular function raises an exception, you could use a decorator:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "always", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def handle_exception(handler):\n    def decorate(func):\n        def call_function(*args, **kwargs):\n            try:\n                func(*args, **kwargs)\n            except Exception, e:\n                handler(e)\n        return call_function\n    return decorate\n\ndef baz(e):\n    print(e)\n\n@handle_exception(baz)\ndef foo(a, b):\n    return a + b\n\n@handle_exception(baz)\ndef bar(c, d):\n    return c.index(d)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; foo(1, '2')\nunsupported operand type(s) for +: 'int' and 'str'\n&gt;&gt;&gt; bar('steve', 'cheese')\nsubstring not found\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The best approach I have found, is to define a function like such:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def handle_exception(function, reaction, *args, **kwargs):\n    try:\n        result = function(*args, **kwargs)\n    except Exception, e:\n        result = reaction(e)\n    return result\n</code>\n</pre>\n", "senID": 1}, {"text": ["But that just doesn't feel or look right in practice:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n handle_exception(foo, baz, a, b)\nhandle_exception(bar, baz, c, d)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You could try something like this.", "This is vaguely C macro-like."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class TryOrBaz( object ):\n    def __init__( self, that ):\n        self.that= that\n    def __call__( self, *args ):\n        try:\n            return self.that( *args )\n        except Exception, e:\n            baz( e )\n\nTryOrBaz( foo )( a, b )\nTryOrBaz( bar )( c, d )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In your specific case, you can do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    foo(a, b)\n    bar(c, d)\nexcept Exception, e:\n    baz(e)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or, you can catch the exception one step above:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n try:\n    foo_bar() # This function can throw at several places\nexcept Exception, e:\n    baz(e)\n</code>\n</pre>\n", "senID": 3}]]