[[{"text": ["Maybe you are better off using the URL library instead?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In Python 2, use urllib2:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "urllib2", "tag": "a", "pos": 0, "childList": [{"text": "urllib2", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/urllib2.html"}, {"text": "urllib2", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import urllib2\n&gt;&gt;&gt; url = urllib2.urlopen(\"http://www.google.com/index.html\")\n&gt;&gt;&gt; url.getcode()\n200\n</code>\n</pre>\n", "senID": 2}, {"text": ["In Python 3, use urllib.request:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "urllib.request", "tag": "a", "pos": 0, "childList": [{"text": "urllib.request", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/dev/py3k/library/urllib.request.html"}, {"text": "urllib.request", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import urllib.request\n&gt;&gt;&gt; url = urllib.request.urlopen(\"http://www.google.com/index.html\")\n&gt;&gt;&gt; url.getcode()\n200\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Alternatively, if you expect that actually downloading the data is problematic and you really need the HEAD method, you could parse the URL using urlparse:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "HEAD", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/urlparse.html", "text": "urlparse", "childNum": 1, "tag": "a", "childList": [{"text": "urlparse", "tag": "code"}]}, {"text": "urlparse", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import httplib\n&gt;&gt;&gt; import urlparse\n&gt;&gt;&gt; url = \"http://www.google.com/index.html\"\n&gt;&gt;&gt; (scheme, netloc, path, params, query, fragment) = urlparse.urlparse(url)\n&gt;&gt;&gt; conn = httplib.HTTPConnection(netloc)\n&gt;&gt;&gt; conn.request(\"HEAD\", urlparse.urlunparse(('', '', path, params, query, fragment))\n&gt;&gt;&gt; res = conn.getresponse()\n&gt;&gt;&gt; print res.status, res.reason\n302 Found\n</code>\n</pre>\n", "senID": 1}, {"text": ["And wrap this into a function taking the URL as an argument."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The connect method takes a server argument (with an optional port).", "You have to split the connection with the resource you actually want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "connect", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For a simpler way to download web resources directly, you could go with urllib2 but urllib2 only supports GET or POST methods, no HEAD, so you end up downloading the whole resource."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "urllib2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "urllib2", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["According to the spec you're supposed to split it up like that, maybe Python could abstract that out for you a bit, they're probably just giving you straight access to the header so you know exactly how it's being formatted, which is really the preference."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "spec", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I like urllib2, sample code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import urllib2\nres = urllib2.urlopen('http://google.com/index.html')\nres.getCode() #contains code\n</code>\n</pre>\n", "senID": 1}, {"text": ["I something went wrong, you'll get an exception you can catch."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT: Thanks, changes res.code to res.getCode() since the second one is documented"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "res.code", "childNum": 0, "tag": "code", "childList": []}, {"text": "res.getCode()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Keep in mind that not all web servers support HEAD on each resource so you'll end up retrieving the resource anyway.", "You should write code accordingly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]