[[{"text": ["If you want to pass the function's name, as you said and you're doing, of course you can't call it -- why would one \"call a name\"?", "It's meaningless."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "name", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "name", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["If you want to call it, pass the function itself, that is, most emphatically not"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n var = 'dork1'\n</code>\n</pre>\n", "senID": 2}, {"text": ["but rather"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n var = dork1\n</code>\n</pre>\n", "senID": 4}, {"text": ["without quotes!"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Edit: the OP wonders in a comment (!", ") how to get a function object given the function name (as a string).", "As it happens I just showed how to do that in a tutorial I taught at OSCON (from which I'm just back) -- get the slides from here and see page 47, \"Lazy-loading callbacks\":"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.aleax.it/oscon010_pydp.pdf"}]}, {"code": "<pre>\n<code>\n class LazyCallable(object):\n\u00a0 def __init__(self, name):\n\u00a0 \u00a0 self.n, self.f = name, None\n\u00a0 def __call__(self, *a, **k):\n\u00a0 \u00a0 if self.f is None:\n\u00a0 \u00a0 \u00a0 modn, funcn = self.n.rsplit('.', 1)\n\u00a0 \u00a0 \u00a0 if modn not in sys.modules:\n\u00a0 \u00a0 \u00a0 \u00a0 __import__(modn)\n\u00a0 \u00a0 \u00a0 self.f = getattr(sys.modules[modn],\n                       funcn)\n\u00a0 \u00a0 self.f(*a, **k)\n</code>\n</pre>\n", "senID": 7}, {"text": ["So you could pass LazyCallable('somemodule.dork1') and live happily ever after.", "If you don't need to deal with the module of course (what a weird architecture that must imply!-) it's easy to adjust this code."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "LazyCallable('somemodule.dork1')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Don't pass the name of a function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Pass the function."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n fun = dork1\nned = doIt(3, fun, 4, 9)\nprint (ned)\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n var = 'dork1'\nned = doIt(3, var, 4, 9)\nprint (ned)\n</code>\n</pre>\n", "senID": 0}, {"text": ["In this example, var is a string.", "The doIt function \"calls\" its second argument (for which you pass var).", "Pass a function instead."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "var", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "doIt", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "var", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["If you have to pass it as a string you can call it with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n globals()['dork1'](arg1,arg2,arg3)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Functions are first-class objects in python.", "Do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n var = dork1\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you must pass a string, such as user input, then:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n globals()[var]\n</code>\n</pre>\n", "senID": 3}, {"text": ["will look up the function object."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You probably shouldn't do this, but you can get the function using eval()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["for example, to use len,"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n eval(\"len\")([\"list that len is called on\"])\n</code>\n</pre>\n", "senID": 2}]]