[[{"text": ["Python has the difflib module in its standard library that can be used to do this."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "difflib", "tag": "a", "pos": 0, "childList": [{"text": "difflib", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/difflib.html"}, {"text": "difflib", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import difflib\n\ns1 = \"abcdefghijklmnop\"\ns2 = \"abcdefghi\"\ns = difflib.SequenceMatcher(s1, s2)\nfor block in s.get_matching_blocks():\n    print \"match of length %d at a[%d] and b[%d]\" % block\n</code>\n</pre>\n", "senID": 1}, {"text": ["difflib is very powerful and has many different ways of searching for differences.", "Some study of the documentation would be worthwhile if you choose to use this."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "difflib", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["In PHP.", "array_diff compares the first against the second array and returns the difference."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "array_diff", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n $a1 = str_split('abcdefghijklmnop');\n$a2 = str_split('abcdefghi');\n\necho join('', array_diff($a1, $a2)); // jklmnop\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will work as well."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $s1 = 'abcdefghijklmnop';\n$s2 = 'abcdefghi';\n\necho str_replace(str_split($s2), '', $s1); // jklmnop\n</code>\n</pre>\n", "senID": 3}, {"text": ["This could handle $s2 = 'ghiabcdef'; as well because str_replace() is fed with an array, not a string."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "$s2 = 'ghiabcdef';", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str_replace()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["In Python, you can do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = \"abcdefghijklmnop\"\ny = x.replace(\"abcdefghi\", \"\")\n\n# y now equals \"jklmnop\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you are sure that first string always starts with second string, you can do by this way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s1 = \"abcdefghijklmnop\"\n&gt;&gt;&gt; s2 = \"abcdefghi\"\n&gt;&gt;&gt; s1[len(s2):]\n'jklmnop'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string1 = \"abcdefghijklmnop\"\nstring2 = \"abcdefghi\"\n\ndef stringComp(string1, string2):\n   if len(string1.split(string2)) &gt; 0:\n    if string1 == string1.split(string2)[0]:\n    \tfinalstring = stringComp(string2, string1)\n    else:\n    \tfinalstring = ''.join(string1.split(string2))\n   else:\n      finalstring = \"\"\n   return finalstring\n</code>\n</pre>\n", "senID": 1}, {"text": ["This should always give you the difference in the strings.", "However, I'm sure there is a much easier way to do this."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s1 = \"abcdefghijklmnop\"\n&gt;&gt;&gt; s2 = \"abcdefghi\"\n&gt;&gt;&gt; s1.strip(s2)\n'jklmnop'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["In Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s1 = 'abcdefghijklmnop'\n&gt;&gt;&gt; s2 = 'abcdefghi'\n&gt;&gt;&gt; set(s1) - set(s2)\nset(['k', 'j', 'm', 'l', 'o', 'n', 'p'])\n</code>\n</pre>\n", "senID": 1}]]