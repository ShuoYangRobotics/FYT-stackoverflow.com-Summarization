[[{"text": ["Personally I'd start with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["matches = [item for item in list1 if item in list2]"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "matches = [item for item in list1 if item in list2]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["This does not answer the question.", "See my comment below."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "This does not answer the question. See my comment below.", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["As a start:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n list(i[0] == i[1] for i in zip(list1, list2))\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I'm not sure how you want these packaged up, but this does the work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def matches(lst, value):\n    return [l == value for l in lst]\n\nall_matches = [matches(list2, v) for l in list1]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n [([int(item1 == item2) for item2 in list2], [n for n, item2 in enumerate(list2) if item1 == item2]) for item1 in list1]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This will give a list of lists with True/False values instead of 1/0:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n matches = [ [ list1[i] == list2[j] for j in range(0, len(list2)) ] for i in range(0, len(list1)) ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit:  If you're using 2.5 or later, this should give 1's &amp; 0's:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n matches = [ [ 1 if list1[i] == list2[j] else 0 for j in range(0, len(list2)) ] for i in range(0, len(list1)) ]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This should do what you want and it can be easily turned into a generator:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [[i for i in range(len(list2)) if item1 == list2[i]] for item1 in list1]\n[[3, 4], [5], []]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here is a version with a slightly different output format:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [(i, j) for i in range(len(list1)) for j in range(len(list2)) if list1[i] == list2[j]]\n[(0, 3), (0, 4), (1, 5)]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n def findInstances(list1, list2):\n    \"\"\"For each item in list1,\n    return a list of offsets to its occurences in list2\n    \"\"\"\n\n    for i in list1:\n        yield [pos for pos,j in enumerate(list2) if i==j]\n\nlist1 = ['AS144','401M','31TP01']\nlist2 = ['HDE342','114','M9553','AS144','AS144','401M']\n\nres = list(findInstances(list1, list2))\n</code>\n</pre>\n", "senID": 0}, {"text": ["results in"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [[3, 4], [5], []]\n</code>\n</pre>\n", "senID": 2}]]