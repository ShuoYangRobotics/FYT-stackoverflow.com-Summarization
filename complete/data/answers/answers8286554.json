[[{"text": ["Create a dictionary of (sorted word, list of word).", "All the words that are in the same list are anagrams of each other."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\ndef load_words():\n    with open('/usr/share/dict/american-english') as f:\n        return [word.rstrip() for word in f]\n\ndef find_anagrams():\n    d = defaultdict(list)\n    for word in load_words():\n        d[\"\".join(sorted(word))].append(word)\n    for k, v in d.iteritems():\n        if len(v) &gt; 1:\n            print k, v\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Sort each element then look for duplicates.", "There's a built-in function for sorting so you do not need to import anything"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In order to do this for 2 strings you can do this:  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def isAnagram(str1, str2):\n    str1_list = list(str1)\n    str1_list.sort()\n    str2_list = list(str2)\n    str2_list.sort()\n\n    return (str1_list == str2_list)\n</code>\n</pre>\n", "senID": 1}, {"text": ["As for the iteration on the list, it is pretty straight forward"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["One solution is to sort the word you're searching anagrams for (for example using sorted), sort the alternative and compare those."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sorted", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So if you would be searching for anagrams of 'rac' in the list ['car', 'girl', 'tofu', 'rca'], your code could look like this:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "['car', 'girl', 'tofu', 'rca']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n word = sorted('rac')\nalternatives = ['car', 'girl', 'tofu', 'rca']\n\nfor alt in alternatives:\n    if word == sorted(alt):\n        print alt\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; words = [\"car\", \"race\", \"rac\", \"ecar\", \"me\", \"em\"]\n&gt;&gt;&gt; anagrams = {}\n... for word in words:\n...     reverse_word=word[::-1]\n...     if reverse_word in words:\n...         anagrams[word] = (words.pop(words.index(reverse_word)))\n&gt;&gt;&gt; anagrams\n20: {'car': 'rac', 'me': 'em', 'race': 'ecar'}\n</code>\n</pre>\n", "senID": 0}, {"text": ["Logic:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Logic:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Create a dictionary with key = words, value = sorted(words)\nand then search the dictionary using Set Comprehension.", "This will be faster than using Loops."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n yourList=['car', 'tree', 'boy', 'girl', 'arc', 'yob']\nd={x:''.join(sorted(x)) for x in yourList}\nset([k1 for k in d for k1 in d if d[k]==d[k1] and k!=k1])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Line1 is your List"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Line2 uses dictionary comprehension to create a dictionary with key = words, value = sorted(words)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Line3 Uses set comprehension (to remove duplicates) to search for entries where the sorted values are the same.", "You can add an extra condition to compare length if you want."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Note** Set and Dictionary Comprehension is new to Python 2.7"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]