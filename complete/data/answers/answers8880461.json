[[{"text": ["With python2.7 you can use subprocess.check_output:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "subprocess.check_output", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html#subprocess.check_output"}]}, {"code": "<pre>\n<code>\n ls_lines = subprocess.check_output(['ls', '-l']).splitlines()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Prior to python2.7, you need to use the lower level api, which is a bit more involved."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ls_proc = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE)\nls_proc.wait()\n# check return code\nls_lines = ls_proc.stdout.readlines()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["One way to access to the information in ls -l output is to parse it.", "For example, csv.DictReader could be use to map each column to a field in a dictionary:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ls -l", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "csv.DictReader", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import subprocess\nimport csv\n\nprocess = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE)\nstdout, stderr = process.communicate()\n\nreader = csv.DictReader(stdout.decode('ascii').splitlines(),\n                        delimiter=' ', skipinitialspace=True,\n                        fieldnames=['permissions', 'links',\n                                    'owner', 'group', 'size',\n                                    'date', 'time', 'name'])\n\nfor row in reader:\n    print(row)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The code above will print a dictionary for each line in ls -l output such as:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "ls -l", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n {'group': '&lt;group_name&gt;',\n 'name': '&lt;filename&gt;',\n 'links': '1',\n 'date': '&lt;modified_date&gt;',\n 'time': '&lt;modified_time&gt;',\n 'owner': '&lt;user_name&gt;',\n 'permissions': '-rw-rw-r--',\n 'size': '&lt;size&gt;'}\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n from subprocess import Popen, PIPE\noutput = Popen(['ls', '-l'], stdout=PIPE).communicate()[0]\n</code>\n</pre>\n", "senID": 0}, {"text": ["You can then do whatever you want with the output.", "See python docs for detailed documentation"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "python docs", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html#subprocess.Popen"}]}], [{"text": ["Read about Popen.", "the set you asked for you get with"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import subprocess\nproc = subprocess.Popen(['ls','-l'],stdout=subprocess.PIPE,stderr=subprocess.PIPE)\nmyset=set(proc.stdout)\n</code>\n</pre>\n", "senID": 1}, {"text": ["or do something like"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for x in proc.stdout : print x\n</code>\n</pre>\n", "senID": 3}, {"text": ["and the same for stderr"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["you can examine the state of the process with "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n proc.poll()\n</code>\n</pre>\n", "senID": 6}, {"text": ["or wait for it to terminate with "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n proc.wait()\n</code>\n</pre>\n", "senID": 8}, {"text": ["also read"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["read subprocess stdout line by line"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "read subprocess stdout line by line", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2804543/read-subprocess-stdout-line-by-line"}]}], [{"text": ["If what you really want is to list a directory, rather use os.listdir"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.listdir", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/os.html#os.listdir"}]}, {"code": "<pre>\n<code>\n import os\nfiles = os.listdir('/path/to/dir')\nfor file in files:\n    print(file)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Have a look at os.stat"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.stat", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/2.5.2/lib/module-stat.html"}]}]]