[[{"text": ["I would strongly recommend ack, a grep substitute, \"aimed at programmers with large trees of heterogeneous source code\" (from the website)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ack", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://betterthangrep.com/"}]}], [{"text": ["find DIRECTORY -name \"*.py\" | xargs grep PATTERN"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I also use ack a lot these days.", "I did tweak it a bit to find all the relevant file types:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Add zcml to the xml type:\n--type-add\nxml=.zcml\n\n# Add more files the plone type:\n--type-add\nplone=.dtml,.zpt,.kss,.vpy,.props\n\n# buildout config files\n--type-set\nbuildout=.cfg\n\n# Include our page templates to the html type so we can limit our search:\n--type-add\nhtml=.pt,.zpt\n\n# Create txt file type:\n--type-set\ntxt=.txt,.rst\n\n# Define i18n file types:\n--type-set\ni18n=.pot,.po\n\n# More options\n--follow\n--ignore-case\n--nogroup\n</code>\n</pre>\n", "senID": 1}, {"text": ["Important to remember is that ack won't find files if the extension isn't in its configuration.", "See \"ack --help-types\" for all the available types."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I also assume you are using omelette so you can grep/ack/find all the related files?"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "omelette", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/collective.recipe.omelette"}]}], [{"code": "<pre>\n<code>\n grep -r -n \"PATTERN\" --include=\"*.py\" DIRECTORY\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This problem was the motivation for the creation of collective.recipe.omelette.", "It is a buildout recipe which can symlink all the eggs from your working set into one directory structure, which you can point your favorite search utility at."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["find &lt;directory&gt; -name '*.py' -exec grep &lt;pattern&gt; {} \\;"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I second the suggestion to use ack, it's a faster and more capable tool than grep."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There's also GNU idutils if you want to grep for identifiers in a large source tree very very quickly.", "It requires building a search database in advance, by running mkid (and tweaking its config file to not ignore .py files).", "z3c.recipe.tag takes care of that, if you use buildout."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "GNU idutils", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.gnu.org/software/idutils/"}, {"text": "z3c.recipe.tag", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/z3c.recipe.tag"}]}], [{"text": ["I recomend grin to search, omelette when working with plone and the pydev-feature 'Globals browser' (with eclipse or aptana studio)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "grin", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/grin"}, {"href": "http://pypi.python.org/pypi/collective.recipe.omelette", "text": "omelette", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["And simply because there are not enough answers..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you're developing routinely, it's well worth the effort to install Eclipse with Pydev (or even easier, Aptana Studio - which is a modified Eclipse), in which case the find tools are right there."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["My grepping life is way more satisfying since discovering Emacs' rgrep command."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Say I want to find 'IPortletDataProvider' in Plone's source.", "I do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The results appear in a new buffer.", "At the top is the find | xargs grep command Emacs ran.", "All matches are highlighted.", "I can search the buffer using the standard text search commands.", "Best of all, I can hit Enter (or click) on a match to open that file."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "find | xargs grep", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["It's a pretty nice way to work.", "I like that I don't have to remember find | xargs grep argument sequences, but that all that power is there if I need it. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "find | xargs grep", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"senID": 4}], [{"text": ["Just in case you want a non-commandline OSS solution..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I use pycharm.", "It has built in support for buildout.", "You point it at a buildout generated bin/instance and it sets the projects external dependencies to all the eggs used by the instance.", "Then all the IDE's introspection and code navigation work nicely.", "Goto definition, goto instances, refactoring support and of course search."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["OpenGrok is an excellent choice for source searching and navigation.", "Runs on Java, though."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I really wish there was something like http://opengrok.plone.org/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://opengrok.plone.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://opengrok.plone.org/"}]}]]