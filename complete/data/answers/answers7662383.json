[[{"text": ["len will tell you the length of the list.", "To quote the docs:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "len", "tag": "a", "pos": 0, "childList": [{"text": "len", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#len"}, {"text": "len", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Of course, if you want to get the final element in a list, tuple, or string, since indexes are 0 based, and the length of an item is the element count, a[len(a)-1] will be the last item. "], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tuple", "childNum": 0, "tag": "code", "childList": []}, {"text": "string", "childNum": 0, "tag": "code", "childList": []}, {"text": "a[len(a)-1]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["As an aside, generally, the proper way to access the last element in an object which allows numeric indexing (str, list, tuple, etc) is using a[-1].", "Obviously, that does not involve len though."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "a[-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "len", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You're not providing a specific use-case, but generally for a list your would use len to see how many elements are in the list."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "len", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if len(a) &gt; 3:\n    # Do something\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use len"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "len", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if len(a) &lt;= index:\n   ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note:  Your question asks how you would find out \"if a[4] is null\".", "a[4] isn't anything, which is why you get an IndexError when you try to check it."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "a[4]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a[4]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "IndexError", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The general way to check if you're currently looking at the element at the end of a list (in any language) is to compare the current index you're looking at with the length of the list minus one (since indexes start at 0)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["a[4] isn't really anything, because it doesn't exist - some languages may implement that as being null (or undefined) but many will simply throw an exception if you try to access it instead."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "a[4]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["a[4] in this case will throw a IndexError exception, which isn't the same as comparing the value of a at index 4 to None.", "You can have values of None in a list, and if you were to compare values of a, then when you encounter a None, it doesn't mean that the index is not found in the list.", "For example:"], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "a[4]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "IndexError", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a=[1,None,2]\n&gt;&gt;&gt; a[1]==None\nTrue\n&gt;&gt;&gt; a[3]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code>\n</pre>\n", "senID": 1}, {"text": ["Since lists are contiguous and indexed sequentially, the correct way to check if an index is in a list is to compare it to the len() of a list, but depending on the application, there are other ways around it, like catching an IndexError, or iteration."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "len()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "IndexError", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for index, value in enumerate(a):\n...     print index, value\n... \n0 1\n1 None\n2 2\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I think the OP is asking for a way to find out if an index is within the range of valid values for a given list (or tuple, or string).", "For that, I'd use a check like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if not lst or index &lt; 0 or index &gt;= len(lst):\n    # the index is invalid, do something\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, in Python a negative index is valid, but it accesses elements from the end of the list counting backwards."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["with a = [1,2,3]  :"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a = [1,2,3]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["a[2:3] is [3] "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "a[2:3]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "[3]", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["a[3:4] is [ ]"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "a[3:4]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "[ ]", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["So a[i:i+1] != [ ] tells if is an index of a "], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "a[i:i+1] != [ ]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["a[i:] does the same, but a[i:] creates another list, possible very long, while a[i:i+1] is 1 element if not empty"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "a[i:]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "a[i:]", "childNum": 0, "tag": "strong", "childList": []}, {"text": "a[i:i+1]", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["You could write a function which behaves kind of like dict.get() does for dictionaries:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict.get()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#dict.get"}]}, {"code": "<pre>\n<code>\n def listget(list_, index, default=None):\n    \"\"\"Return the item for index if index is in the range of the list_,\n    else default. If default is not given, it defaults to None, so that\n    this method never raises an IndexError.\"\"\"\n    if index &gt;= len(list_) or index &lt; -len(list_):\n        return default\n    else:\n        return list_[index]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example usage:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; names = [\"Mark\",\"Frank\",\"James\"]\n&gt;&gt;&gt; listget(names, 2)\n'James'\n&gt;&gt;&gt; listget(names,-3)\n'Mark'\n&gt;&gt;&gt; listget(names,3) # returns None\n&gt;&gt;&gt; listget(names,4,0)\n0\n</code>\n</pre>\n", "senID": 3}, {"text": ["So it will always return a value and you get no exceptions."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]