[[{"text": ["You're creating a reference, instead of a copy.", "In order to make a complete copy and leave the original untouched, you need copy.deepcopy().", "So:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "copy.deepcopy()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n from copy import deepcopy\ndictionary_new = deepcopy(dictionary_old)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Just using a = dict(b) or a = b.copy() will make a shallow copy and leave any lists in your dictionary as references to each other (so that although editing other items won't cause problems, editing the list in one dictionary will cause changes in the other dictionary, too)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "a = dict(b)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a = b.copy()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You are just giving making newdictionary point to the same reference olddictionary points to.", "See this page (it's about lists, but it is also applicable to dicts)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "newdictionary", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "olddictionary", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "this page", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://henry.precheur.org/python/copy_list"}]}, {"src": "http://i.stack.imgur.com/eD6Xi.png", "tag": "img", "senID": 1}, {"text": ["Use .copy() instead (note: this creates a shallow copy):"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": ".copy()", "tag": "a", "pos": 0, "childList": [{"text": ".copy()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#dict.copy"}, {"text": ".copy()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n newdictionary = olddictionary.copy()\n</code>\n</pre>\n", "senID": 3}, {"text": ["To create a deep copy, you can use .deepcopy() from the copy module"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": ".deepcopy()", "tag": "a", "pos": 0, "childList": [{"text": ".deepcopy()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/copy.html"}, {"text": ".deepcopy()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n newdictionary = copy.deepcopy(olddictionary)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Shallow vs Deep Copy"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Shallow vs Deep Copy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Object_copy#Deep_vs._Shallow_vs._Lazy_copy"}]}], [{"text": ["Assignment like that in Python just makes the newdictionary name refer to the same thing as olddictionary, as you've noticed.", "You can create a new dictionary with the dict() constructor:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "newdictionary", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "olddictionary", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "new", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "dict()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n newdictionary = dict(olddictionary)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that this makes a shallow copy.", "For deep copies, see the copy standard library module."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "shallow", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "copy", "tag": "a", "pos": 1, "childList": [{"text": "copy", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/copy.html"}, {"text": "copy", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n newdictionary = dict(olddictionary.items())\n</code>\n</pre>\n", "senID": 0}, {"text": ["This creates a new copy (more specifically, it feeds the contents of olddict as (key,value) pairs to dict, which constructs a new dictionary from (key,value) pairs)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit: Oh yeah, copy - totally forgot it, that's the right way to do it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = b\n</code>\n</pre>\n", "senID": 3}, {"text": ["just copies a reference, but not the object."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You are merely creating another reference to the same dictionary."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You need to make a copy: use one of the following (after checking in the docs what each does):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n new = dict(old)\n\nnew = old.copy()\n\nimport copy\nnew = copy.copy(old)\n\nimport copy\nnew = copy.deepcopy(old)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I think you need a deep copy for what you are asking.", "See here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.java2s.com/Code/Python/Dictionary/Dictionarydeepcopy.htm"}]}, {"text": ["It looks like dict.copy() does a shallow copy, which is what Rick does not want."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "looks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.java2s.com/Code/Python/Dictionary/Dictionarycopy.htm"}, {"text": "not", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n from copy import deepcopy\nd = {}\nd['names'] = ['Alfred', 'Bertrand']\nc = d.copy()\ndc = deepcopy(d)\n</code>\n</pre>\n", "senID": 2}]]