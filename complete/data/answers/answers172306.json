[[{"text": ["Here's the general plan for Twisted.", "I was originally going to blog this, but then I thought: why blog about it when I could get points for it?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "points", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["So, that's the plan.", "I'm hoping that it ends up looking laughably conservative in a year or so; that the 3.x transition is easy as pie, and everyone rapidly upgrades.", "Other things could happen, too: the 2.x and 3.x branches could converge, someone might end up writing a 3to2, or another runtime (PyPy comes to mind) might allow for running 2.x and 3.x code in the same process directly, making our conversion process easier."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "3to2", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["For the time being, however, we're assuming that, for many years, we will have people with large codebases they're maintaining (or people writing new code who want to use other libraries which have not yet been migrated) who still want new features and bug fixes in Twisted.", "Pretty soon I expect we will also have bleeding-edge users that want to use Twisted on python 3.", "I'd like to provide all of those people with a positive experience for as long as possible."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "other", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["The main idea of 2.6 is to provide a migration path to 3.0.", "So you can use from __future__ import X slowly migrating one feature at a time until you get all of them nailed down and can move to 3.0.", "Many of the 3.0 features will flow into 2.6 as well, so you can make the language gap smaller gradually rather than having to migrate everything in one go."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "from __future__ import X", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["At work, we plan to upgrade from 2.5 to 2.6 first.", "Then we begin enabling 3.0 features slowly one module at a time.", "At some point a whole subpart of the system will probably be ready for 3.x."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The only problem are libraries.", "If a library is never migrated, we are stuck with the old library.", "But I am pretty confident that we'll get a fine alternative in due time for that part."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Speaking as a library author:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'm waiting for the final version to be released.", "My belief, like that of most of the Python community, is that 2.x will continue to be the dominant version for a period of weeks or months.", "That's plenty of time to release a nice, polished 3.x release."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'll be maintaining separate 2.x and 3.x branches.", "2.x will be backwards compatible to 2.4, so I can't use a lot of the fancy syntax or new features in 2.6 / 3.0.", "In contrast, the 3.x branch will use every one of those features that results in a nicer experience for the user.", "The test suite will be modified so that 2to3 will work upon it, and I'll maintain the same tests for both branches."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Support both"], "childNum": 1, "tag": "h2", "senID": 0, "childList": [{"text": "Support both", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I wanted to make an attempt at converting the BeautifulSoup library to 3x for a project I'm working on but I can see how it would be a pain to maintain two different branches of the code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The current model to handle this include:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This model works but IMHO it sucks.", "For every change/release you have to go through these steps ::sigh::.", "Plus, it discourages developers from extending the 3x branch with new features that can only be supported in py3k because you're still essentially targeting all the code to 2x."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The solution... use a preprocessor"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "The solution... use a preprocessor", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Since I couldn't find a decent c-style preprocessor with #define and #ifdef directives for python I wrote one. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["It's called pypreprocessor and can be found in the PYPI"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "pypreprocessor and can be found in the PYPI", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi?%3aaction=search&term=pypreprocessor&submit=search"}]}, {"text": ["Essentially, what you do is:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["That's it.", "Now it'll work in both 2x and 3x.", "If you are worried about added performance hit of running a preprocessor there's also a mode that will strip out all of the metadata and output the post-processed source to a file."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Best of all... you only have to do the 2to3 conversion once."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Best of all... you only have to do the 2to3 conversion once.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Here's the a working example:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n# py2and3.py\n\nimport sys\nfrom pypreprocessor import pypreprocessor\n\n#exclude\nif sys.version[:3].split('.')[0] == '2':\n    pypreprocessor.defines.append('python2')\nif sys.version[:3].split('.')[0] == '3':\n    pypreprocessor.defines.append('python3')\n\npypreprocessor.parse()\n#endexclude\n#ifdef python2\nprint('You are using Python 2x')\n#ifdef python3\nprint('You are using python 3x')\n#else\nprint('Python version not supported')\n#endif\n</code>\n</pre>\n", "senID": 11}, {"text": ["These are the results in the terminal:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\npython py2and3.py\n >>>You are using Python 2x \n python3 py2and3.py\n >>>You are using python 3x\n</pre>\n", "senID": 13}, {"text": ["If you want to output to a file and make clean version-specific source file with no extra meta-data, add these two lines somewhere before the pypreprocessor.parse() statement:"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n pypreprocessor.output = outputFileName.py\npypreprocessor.removeMeta = True\n</code>\n</pre>\n", "senID": 15}, {"text": ["Then:"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"code": "<pre>\npython py2and3.py\n</pre>\n", "senID": 17}, {"text": ["Will create a file called outputFileName.py that is python 2x specific with no extra metadata."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"code": "<pre>\npython3 py2and3.py\n</pre>\n", "senID": 19}, {"text": ["Will create a file called outputFileName.py that is python 3x specific with no extra metadata."], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"text": ["For documentation and more examples see check out pypreprocessor on GoogleCode."], "childNum": 1, "tag": "p", "senID": 21, "childList": [{"text": "pypreprocessor on GoogleCode", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pypreprocessor/"}]}, {"text": ["I sincerely hope this helps.", "I love writing code in python and I hope to see support progress into the 3x realm asap.", "I hate to see the language not progress.", "Especially, since the 3x version resolves a lot of the featured WTFs and makes the syntax look a little more friendly to users migrating from other languages."], "childNum": 0, "tag": "p", "senID": 22, "childList": []}, {"text": ["The documentation at this point is complete but not extensive.", "I'll try to get the wiki up with some more extensive information soon."], "childNum": 0, "tag": "p", "senID": 23, "childList": []}, {"text": ["Update:"], "childNum": 1, "tag": "p", "senID": 24, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Although I designed pypreprocessor specifically to solve this issue, it doesn't work because the lexer does syntax checking on all of the code before any code is executed."], "childNum": 1, "tag": "p", "senID": 25, "childList": [{"text": "Although I designed pypreprocessor specifically to solve this issue, it doesn't work because the lexer does syntax checking on all of the code before any code is executed.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["If python had real C preprocessor directive support it would allow developers to write both python2x and python3k code alongside each other in the same file but due to the bad reputation of the C preprocessor (abuse of macro replacement to change language keywords) I don't see legitimate C preprocessor support being added to python any time soon."], "childNum": 1, "tag": "p", "senID": 26, "childList": [{"text": "If python had real C preprocessor directive support it would allow developers to write both python2x and python3k code alongside each other in the same file but due to the bad reputation of the C preprocessor (abuse of macro replacement to change language keywords) I don't see legitimate C preprocessor support being added to python any time soon.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["The Zope Toolkit has been in a slow progress to Python 3 support.", "Slow mainly because many of these libraries are very complex. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For most libraries I use 2to3.", "Some libraries make do without it because they are simple or have most of the code in a C-extension.", "zc.buildout, which is a related package, will run the same code without 2to3 for Python 2 and 3 support."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["We port the ZTK to Python 3 because many other libraries and frameworks depend on it, such as Twisted and the Pyramid framework."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Some of my more complex 2.x code is going to stay at 2.5 or 2.6.", "I am moving onto 3.0 for all new development once some of the 3rd party libraries I use often have been updated for 3."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]