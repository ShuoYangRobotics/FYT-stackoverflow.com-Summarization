[[{"text": ["\"id()\" is a fundamental built-in:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In general, using variable names that eclipse a keyword or built-in function in any language is a bad idea, even if it is allowed."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["-k"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["id is a built-in function that gives the memory address of an object.", "If you name one of your functions id, you will have to say __builtins__.id to get the original.", "Renaming id globally is confusing in anything but a small script. "], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "id", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "id", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__builtins__.id", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "id", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["However, reusing built-in names as variables isn't all that bad as long as the use is local.", "Python has a lot of built-in functions that (1) have common names and (2) you will not use much anyway.", "Using these as local variables or as members of an object is OK because it's obvious from context what you're doing:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "lot", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def numbered(filename):\n  file = open(filename)\n  for i,input in enumerate(file):\n    print \"%s:\\t%s\" % (i,input)\n  file.close()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Some built-ins with tempting names: "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 10, "lis": [{"text": ["id"], "childNum": 0, "tag": "code", "senID": 5, "childList": []}, {"text": ["file"], "childNum": 0, "tag": "code", "senID": 6, "childList": []}, {"text": ["list"], "childNum": 0, "tag": "code", "senID": 7, "childList": []}, {"text": ["map"], "childNum": 0, "tag": "code", "senID": 8, "childList": []}, {"text": ["all"], "childNum": 0, "tag": "code", "senID": 9, "childList": []}, {"text": ["complex"], "childNum": 0, "tag": "code", "senID": 10, "childList": []}, {"text": ["dir"], "childNum": 0, "tag": "code", "senID": 11, "childList": []}, {"text": ["input"], "childNum": 0, "tag": "code", "senID": 12, "childList": []}, {"text": ["slice"], "childNum": 0, "tag": "code", "senID": 13, "childList": []}, {"text": ["buffer"], "childNum": 0, "tag": "code", "senID": 14, "childList": []}]}], [{"text": ["I might say something unpopular here: id() is a rather specialized built-in function that is rarely used in business logic.", "Therefore I don't see a problem in using it as a variable name in a tight and well-written function, where it's clear that id doesn't mean the built-in function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "id()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Because it's the name of a builtin function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's bad to name any variable after a built in function.", "One of the reasons is because it can be confusing to a reader that doesn't know the name is overridden."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Because id is a built in function"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["'id' is a built-in method in Python.", "Assigning a value to 'id' will overwrite the method.", "It is best to use either an identifier before as in \"some_id\" or use it in a different capitalization method."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The built in method takes a single parameter and returns an integer for the memory address of the object that you passed."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["&gt;&gt;&gt;id(1)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "&gt;&gt;&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["9787760"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["&gt;&gt;&gt;x = 1"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "&gt;&gt;&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["&gt;&gt;&gt;id(x)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "&gt;&gt;&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["9787760"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Because python is a dynamic language, it's not usually a good idea to give a variable and a function the same name.", "id() is a function in python, so it's recommend not to use a variable named id.", "Bearing that in mind, that applies to all functions that you might use... a variable shouldn't have the same name as a function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In response to:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["While this is true, it's probably a good idea to be more specific with this variable name than simply \"id\".", "Lots of things have IDs (especially if you're working with a RDBMS), and as the second line of Tim Peters's The Zen of Python tells us:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "The Zen of Python", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["See the rest by running: import this"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "import this", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]