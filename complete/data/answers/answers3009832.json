[[{"text": ["You may find perlfaq5 useful."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "perlfaq5", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://perldoc.perl.org/perlfaq5.html#How-do-I-select-a-random-line-from-a-file?"}]}], [{"text": ["If the file is small enough, read the pairs of lines into memory and select randomly from that data structure.", "If the file is too large, Eugene Y provides the right answer: use reservoir sampling."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "reservoir sampling", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Reservoir_sampling"}]}, {"text": ["Here's an intuitive explanation for the algorithm."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Process the file line by line.\npick = line, with probability 1/N, where N = line number\n</code>\n</pre>\n", "senID": 2}, {"text": ["In other words, on line 1, we will pick line 1 with 1/1 probability.", "On line 2, we will change the pick to line 2, with 1/2 probability.", "On line 3, we will change the pick to line 3, with 1/3 probability.", "Etc."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "1/1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "change", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "1/2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "1/3", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["For an intuitive proof, imagine a file with 3 lines:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n 1            Pick line 1.\n       / \\\n     .5  .5\n     /     \\\n    2       1        Switch to line 2?\n   / \\     / \\\n .67 .33 .33 .67\n /     \\ /     \\\n2       3       1    Switch to line 3?\n</code>\n</pre>\n", "senID": 5}, {"text": ["The probability for each outcome:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n Line 1: .5 * .67     = 1/3\nLine 2: .5 * .67     = 1/3\nLine 3: .5 * .33 * 2 = 1/3\n</code>\n</pre>\n", "senID": 7}, {"text": ["From there, the rest is induction.", "For example, suppose the file has 4 lines.", "We've already convinced ourselves that as of line 3, every line so far (1, 2, 3) will have an equal chance of being our current selection.", "When we advance to line 4, it will have a 1/4 chance of being picked -- exactly what it should be, thus reducing the probabilities on the previous 3 lines by exactly the right amount (1/3 * 3/4 = 1/4)."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "current", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "1/4", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "1/3 * 3/4 = 1/4", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Here's the Perl FAQ answer, adapted to your problem."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Perl FAQ answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://perldoc.perl.org/perlfaq5.html#How-do-I-select-a-random-line-from-a-file?"}]}, {"code": "<pre>\n<code>\n use strict;\nuse warnings;\n\n# Ignore 5 lines.\n&lt;&gt; for 1 .. 5;\n\n# Use reservoir sampling to select pairs from remaining lines.\nmy (@picks, $n);\nuntil (eof){\n    my @lines;\n    $lines[$_] = &lt;&gt; for 0 .. 1;\n\n    $n ++;\n    @picks = @lines if rand($n) &lt; 1;\n}\n\nprint @picks;\n</code>\n</pre>\n", "senID": 10}], [{"code": "<pre>\n<code>\n sed \"1,5d\" &lt; FILENAME | sort -R | head -2\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Python solution - reads file only once and requires little memory"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Invoke like so getRandomItems(file('myHuge.log'), 5, 2) - will return list of 2 lines"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "getRandomItems(file('myHuge.log'), 5, 2)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from random import randrange\n\ndef getRandomItems(f, skipFirst=0, numItems=1):\n    for _ in xrange(skipFirst):\n        f.next()\n    n = 0; r = []\n    while True:\n        try:\n            nxt = [f.next() for _ in range(numItems)]\n        except StopIteration: break\n        n += 1\n        if not randrange(n):\n            r = nxt\n    return r\n</code>\n</pre>\n", "senID": 2}, {"text": ["Returns empty list if it could not get the first passable items from f. The code's only requirement is that argument f is an iterator (supports next() method).", "Hence we can pass something different than file, say we want to see the distribution:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "f", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "next()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s={}\n&gt;&gt;&gt; for i in xrange(5000):\n...     r = getRandomItems(iter(xrange(50)))[0]\n...     s[r] = 1 + s.get(r,0)\n... \n&gt;&gt;&gt; for i in s: \n...     print i, '*' * s[i]\n... \n0 ***********************************************************************************************\n1 **************************************************************************************************************\n2 ******************************************************************************************************\n3 ***************************************************************************\n4 *************************************************************************************************************************\n5 ********************************************************************************\n6 **********************************************************************************************\n7 ***************************************************************************************\n8 ********************************************************************************************\n9 ********************************************************************************************\n10 ***********************************************************************************************\n11 ************************************************************************************************\n12 *******************************************************************************************************************\n13 *************************************************************************************************************\n14 ***************************************************************************************************************\n15 *****************************************************************************************************\n16 ********************************************************************************************************\n17 ****************************************************************************************************\n18 ************************************************************************************************\n19 **********************************************************************************\n20 ******************************************************************************************\n21 ********************************************************************************************************\n22 ******************************************************************************************************\n23 **********************************************************************************************************\n24 *******************************************************************************************************\n25 ******************************************************************************************\n26 ***************************************************************************************************************\n27 ***********************************************************************************************************\n28 *****************************************************************************************************\n29 ****************************************************************************************************************\n30 ********************************************************************************************************\n31 ********************************************************************************************\n32 ****************************************************************************************************\n33 **********************************************************************************************\n34 ****************************************************************************************************\n35 **************************************************************************************************\n36 *********************************************************************************************\n37 ***************************************************************************************\n38 *******************************************************************************************************\n39 **********************************************************************************************************\n40 ******************************************************************************************************\n41 ********************************************************************************************************\n42 ************************************************************************************\n43 ****************************************************************************************************************************\n44 ****************************************************************************************************************************\n45 ***********************************************************************************************\n46 *****************************************************************************************************\n47 ***************************************************************************************\n48 ***********************************************************************************************************\n49 ****************************************************************************************************************\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Answer is in Python.", "Assuming you can read a whole file into memory."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #using python 2.6\nimport sys\nimport os\nimport itertools\nimport random\n\ndef main(directory, num_files=5, num_entries=5):\n    file_paths = os.listdir(directory)\n\n    # get a random sampling of the available paths\n    chosen_paths = random.sample(file_paths, num_files)\n\n    for path in chosen_paths:\n        chosen_entries = get_random_entries(path, num_entries)\n        for entry in chosen_entries:\n            # do something with your chosen entries\n            print entry\n\ndef get_random_entries(file_path, num_entries):\n    with open(file_path, 'r') as file:\n        # read the lines and slice off the headers\n        lines = file.readlines()[5:]\n\n        # group the lines into pairs (i.e. entries)\n        entries = list(itertools.izip_longest(*[iter(lines)]*2))\n\n        # return a random sampling of entries\n        return random.sample(entries, num_entries)\n\nif __name__ == '__main__':\n    #use optparse here to do fancy things with the command line args\n    main(sys.argv[1:])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Links: itertools, random, optparse"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "itertools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#itertools.izip_longest"}, {"href": "http://docs.python.org/library/random.html#random.sample", "text": "random", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://docs.python.org/library/optparse.html", "text": "optparse", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Another Python option; reading the contents of all files into memory:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random\nimport fileinput\n\ndef openhook(filename, mode):\n    f = open(filename, mode)\n    headers = [f.readline() for _ in range(5)]\n    return f\n\nnum_entries = 3\nlines = list(fileinput.input(openhook=openhook))\nprint random.sample(lines, num_entries)\n</code>\n</pre>\n", "senID": 1}]]