[[{"text": ["You are reading the file once, so its contents is stored in memory once.", "What happens is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "the file contents are read in and called ", "tag": "none", "senID": 1}, {"text": "a reference is passed to the ", "tag": "none", "senID": 2}, {"text": "that passes a reference to the ", "tag": "none", "senID": 3}, {"text": "that stores the reference;", "tag": "none", "senID": 4}, {"text": "the initializers return references to the objects they created.", "tag": "none", "senID": 5}]}, {"text": ["It's important to realize that Python always passes arguments and returns values by reference.", "Variables in Python are just names for objects, not storage locations."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Python passes arguments by reference, so essentially the 'string' you pass into B() is actually a pointer (a memory address) to the actual string.", "If you look at the objects at each point in execution of your example script, you'll see that they are all the same."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "B()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For example, this version prints a repr() of the passed object (using object.__repr__ because str.__repr__ prints the data):"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "repr()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "object.__repr__", "childNum": 0, "tag": "code", "childList": []}, {"text": "str.__repr__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class A:\n    def __init__(self, f):\n        print(repr(self), \"received\", object.__repr__(f))\n        self.f = f\n\n\nclass B:\n    def __init__(self, f):\n        print(repr(self), \"received\", object.__repr__(f))\n        self.a = A(f)\n\n\n\nwith open(LARGE_FILE, 'rb') as f:\n    text = f.read()\n\nprint(\"passing\", object.__repr__(f), \"into B()\")\nx = B(text)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Results in something like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n passing &lt;str object at 0x280f960&gt; into B()\n&lt;__main__.B object at 0x290acd0&gt; received &lt;str object at 0x280f960&gt;\n&lt;__main__.A object at 0x290add0&gt; received &lt;str object at 0x280f960&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["As you can see, when the string variable is passed into the constructors for A() and B(), it is the same object: actually a pointer to the string."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "A()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "B()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Very little additional memory is consumed by this."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["You are passing just the reference.", "No wasting of memory."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [], [{"text": ["No.", "In fact, no file is created in the first place."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Only a reference to a wrapper around the OS file handle is passed in the example given."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Definitely not."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Just a tip: You should not use file as a name as it is a function within python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can do"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n myfile=open('somepath','r')\n</code>\n</pre>\n", "senID": 2}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n myfile=file('somepath','r')\n</code>\n</pre>\n", "senID": 4}, {"text": ["open is the preferred way."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "open", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["in fact, I believe open() uses file() so reassigning file should create some strange behaviour."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "open()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "file()", "childNum": 0, "tag": "code", "childList": []}]}]]