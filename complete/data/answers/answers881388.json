[[{"text": ["Looking at the code referenced in the question referenced, the justification is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Fork a second child and exit immediately to prevent zombies.  This\n# causes the second child process to be orphaned, making the init\n# process responsible for its cleanup.  And, since the first child is\n# a session leader without a controlling terminal, it's possible for\n# it to acquire one by opening a terminal in the future (System V-\n# based systems).  This second fork guarantees that the child is no\n# longer a session leader, preventing the daemon from ever acquiring\n# a controlling terminal.\n</code>\n</pre>\n", "senID": 1}, {"text": ["So it is to ensure that the daemon is re-parented onto init (just in case the process kicking off the deamon is long lived), and removes any chance of the daemon reaquiring a controlling tty.", "So if neither of these cases apply, then one fork should be sufficient.", "\"Unix Network Programming - Stevens\" has a good section on this."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I was trying to understand the double fork and stumbled upon this question here.", "After a lot of research this is what I figured out.", "Hopefully it will help clarify things better for anyone who has the same question."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In Unix every process belongs to a group which in turn belongs to a session.", "Here is the hierarchy \u2026"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Session (SID) ->  Process Group (PGID) -> Process (PID)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The first process in the process group becomes the process group leader and the first process in the session becomes the session leader.", "Every session can have one TTY associated with it.", "Only a session leader can take control of a TTY.", "For a process to be truly daemonized (ran in the background) we should ensure that the session leader is killed so that there is no possibility of the session ever taking control of the TTY. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I ran Sander Marechal's python example daemon program from this site on my Ubuntu.", "Here are the results with my comments. "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "this site", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/"}]}, {"text": ["The parent\nPID: 28084, PGID: 28084, SID: 28046"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["After fork#1\nPID: 28085, PGID: 28084, SID: 28046"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["After 'decouple' from parent environment.", "Note that Fork#1 is now a session leader because its PID = SID.", "It could still take control of a TTY.", "PID: 28085, PGID: 28085, SID:28085"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "PID = SID", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["After fork#2\nNote that Fork#2 is no longer the session leader PID != SID.", "This process can never take control of a TTY.", "Truly demonized.", "PID: 28086, PGID: 28085, SID:28085"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Truly demonized.", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["I personally find terminology fork-twice to be confusing.", "A better idiom might be fork-decouple-fork."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Additional links of interest:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "Unix processes - ", "tag": "none", "senID": 11}]}], [{"text": ["Taken from Bad CTK:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Bad CTK", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blog.charcoalphile.com/2008/05/03/python-tips-for-writing-daemons/"}]}, {"text": ["\"On some flavors of Unix, you are forced to do a double-fork on startup, in order to go into daemon mode.", "This is because single forking isn\u2019t guaranteed to detach from the controlling terminal."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["According to \"Advanced Programming in the Unix Environment\", by Stephens and Rago, the second fork is more a recommendation, and it is done to guarantee that the daemon does not acquire a controlling terminal on System V-based systems. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["One reason is that the parent process can immediately wait_pid() for the child, and then forget about it.", "When then grand-child dies, it's parent is init, and it will wait() for it - and taking it out of the zombie state.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The result is that the parent process doesn't need to be aware of the forked children, and it also makes it possible to fork long running processes from libs etc."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["A decent discussion of it appear to be at http://www.developerweb.net/forum/showthread.php?t=3025"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.developerweb.net/forum/showthread.php?t=3025", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.developerweb.net/forum/showthread.php?t=3025"}]}, {"text": ["Quoting mlampkin from there:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The daemon() call has the parent call _exit() if it succeeds.", "The original motivation may have been to allow the parent to do some extra work while the child is daemonizing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It may also be based on a mistaken belief that it's necessary in order to ensure the daemon has no parent process and is reparented to init - but this will happen anyway once the parent dies in the single fork case."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So I suppose it all just boils down to tradition in the end - a single fork is sufficient as long as the parent dies in short order anyway."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]