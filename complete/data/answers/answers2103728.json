[[{"text": ["Yes, tons.", "Lua and Python seems to be the most popular:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Embedding Lua"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Embedding Lua", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["http://www.lua.org/pil/24.html"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["Why is Lua considered a game language?"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["Lua as a general-purpose scripting language?"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}]}, {"text": ["Embedding Python"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Embedding Python", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://docs.python.org/extending/embedding.html"], "childNum": 0, "tag": "a", "senID": 6, "childList": []}]}, {"text": ["Embedding Ruby"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Embedding Ruby", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 1, "lis": [{"text": ["How to embed Ruby in C++?"], "childNum": 0, "tag": "a", "senID": 8, "childList": []}]}, {"text": ["Embed Perl"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Embed Perl", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://perldoc.perl.org/perlembed.html"], "childNum": 0, "tag": "a", "senID": 10, "childList": []}]}, {"text": ["Embed JavaScript"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "Embed JavaScript", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://spiderape.sourceforge.net/"], "childNum": 0, "tag": "a", "senID": 12, "childList": []}]}, {"text": ["There are dozens of JavaScript engines around, this is just an example.", "Some of them are also frighteningly quick. "], "childNum": 0, "tag": "p", "senID": 13, "childList": []}], [{"text": ["Lua is quite fast as it is.", "If you need more speed, try LuaJIT, which is excellent."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "LuaJIT", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://luajit.org/"}]}], [{"text": ["The performance drop will be noticeable, perhaps painful.", "If you can put the data into arrays and process it in batches using NumPy, it should be much faster."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "NumPy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}]}, {"text": ["NumPy makes it super easy to do any kind of arithmetic a million times in a row.", "For example, squaring every element of an array is like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = numpy.array([1, 2, 3, 4, 5, 6, 7])\n&gt;&gt;&gt; x**2\narray([1, 4, 9, 16, 25, 36, 49])\n</code>\n</pre>\n", "senID": 2}, {"text": ["Super easy, and the tight inner loop here is actually implemented in C."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Of course NumPy can also do more advanced number-crunching."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Tcl was designed from the ground up to be an embedded language. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I believe tcl and Rexx were both intended for this purpose."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "tcl", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.tcl.tk/"}, {"href": "http://www.rexx.org/", "text": "Rexx", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["For millions of calls (from I'm assuming c++, because you mentioned boost) into python, yes: you will notice a performance hit.", "This may or may not be significant - perhaps the speed gain of trying out new 'agents' would be greater than the hit.", "Python does have fast numerical libraries (such as numpy) that might help, but you'll still incur overhead of marshalling data, calling into python, the gil, etc."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Yes, you can embed many other languages:  check out lua.", "Also, check out swig.org, which can connect to many other languages besides python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["you could probably create an embedded language using C++ templates and operator overloading, see for example ublas or ftensor matrix languages.", "i do not think python or other interpreted languages of is suitable for having numbercrunching/data processing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]