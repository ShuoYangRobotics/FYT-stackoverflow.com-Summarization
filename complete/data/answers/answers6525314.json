[[{"code": "<pre>\n<code>\n filter(test1, filter(test2, filter(test3, the_list)))\n</code>\n</pre>\n", "senID": 0}, {"text": ["Firstly, this is O(n) time, not O(n^3) time.", "The time adds not multiply.", "The only this could be worse then that is if test3/test2/test1 are doing something odd, in which we should look at those."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If we suggest that each test?", "function takes 10 ms, then we have 10*3*10^5 ms = 50 minutes.", "If it was n^3, then we'd have (10*10^5)^3 = 31 million years.", "I'm pretty sure you are only one linear time, you just have a ton of data. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Replace filter with itertools.ifilter, it'll avoid generating the list.", "Instead, python will pull one item out of the list at a time, pass it through the three tests and give it to you if and only if it passes.", "It'll avoid the memory requirement and probably be faster as well."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You aren't going to be able to improve on O(n) time unless you use some indexing techniques.", "However, the applicability of indexing techniques depends on what you are doing inside the test1/test2/test3 functions.", "If you want help on that, show an example for those functions."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["As other have noted, database were designed to solve these problems.", "You can make this faster only be reimplementing badly what databases already do for you."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["If the objects are unique within the set, and hashable, then you can create a set from them, and search the set.", "Creation should be O(N) (N calls to a hashing function), and search is  O(1).", "Here's an example with a list of objects holding a string each:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "set", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class Dummy(object) :\n   def __init__(self, val) :\n      self.val=val\n\nmyList = [Dummy(str(val)) for val in xrange(100000)]\nmySet = set(myList)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now check if one of the elements is in the set:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print myList[3] in mySet\n&gt;&gt;&gt; True\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want quick look-up via a set of unique attributes of the element, you can use a dict and a tuple of these attributes as key, or just a single attribute as key if you have that:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Dummy(object) :\n   def __init__(self, val, someUniqueKey) :\n      self.val=val\n      self.key=someUniqueKey\n\nmyList = ... # create the list of elements with unique keys\nmyDict = dict(zip([elem.key for elem in myList],myList)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Then access via the key.", "The problem here is that you have to make sure that the elements have a unique key that you can use to search (i.e.", "it needs to have some meaning)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Concatenate the attribute values for each object to make unique keys.", "You may have to pad the attributes out to the same length to guarantee uniqueness.", "Construct a hash table to return the object that matches a key."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["10^5 is not really that big a number of objects, even in-memory.", "littletable is a little module I wrote as an experiment for simulating queries, pivots, etc.", "using just Python dicts.", "One nice thing about littletable queries is that the result of any query or join is itself a new littletable Table.", "Indexes are kept as dicts of keys->table objects, and index keys can be defined to be unique or not."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I created a table of 140K objects with 3 single letter keys, and then queried for a specific key.", "The time to build the table itself was the longest, the indexing and querying pretty fast."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from itertools import product\nfrom littletable import Table,DataObject\n\nobjects = Table()\nalphas = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nalphas += alphas.lower()\nimport time\n\nprint \"building table\", time.time()\nobjects.insert_many(\n    DataObject(k1=k1, k2=k2, k3=k3, created=time.time())\n        for k1,k2,k3 in product(alphas.upper(),alphas,alphas)\n    )\nprint \"table complete\", time.time()\nprint len(objects)\n\nprint \"indexing table\", time.time()\nfor k in \"k1 k2 k3\".split():\n    objects.create_index(k)\nprint \"index complete\", time.time()\n\nprint \"get specific row\", time.time()\nmatches = objects.query(k1=\"X\", k2=\"k\", k3=\"W\")\nfor o in matches:\n    print o\nprint time.time()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Prints:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n building table 1309377011.63\ntable complete 1309377012.52\n140608\nindexing table 1309377012.52\nindex complete 1309377012.98\nget specific row 1309377012.98\n{'k3': 'W', 'k2': 'k', 'k1': 'X', 'created': 1309377011.9960001}\n{'k3': 'W', 'k2': 'k', 'k1': 'X', 'created': 1309377012.4260001}\n1309377013.0\n</code>\n</pre>\n", "senID": 4}], [{"text": ["It seems to me one typical solution would be to use a database query.", "Either SQL (raw or with some kind of ORM), or some kind of object database, maybe MongoDB?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If your data is in a CSV file, you could try sql2csv: https://sourceforge.net/projects/sql2csv/."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "https://sourceforge.net/projects/sql2csv/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://sourceforge.net/projects/sql2csv/"}]}, {"text": ["EDIT: Pardon my early-onset senility, I meant this project: https://github.com/ccoffey/sql4csv/wiki/Examples."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "https://github.com/ccoffey/sql4csv/wiki/Examples", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/ccoffey/sql4csv/wiki/Examples"}]}]]