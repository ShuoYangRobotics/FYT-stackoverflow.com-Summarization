[[{"text": ["Have a look at the subprocess module.", "You can also use low-level primitives like fork() via the os module."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "subprocess", "tag": "a", "pos": 0, "childList": [{"text": "subprocess", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/subprocess.html"}, {"text": "subprocess", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "fork()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "os", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["http://docs.python.org/library/os.html#process-management"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/os.html#process-management", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/os.html#process-management"}]}], [{"text": ["A simple function that uses subprocess module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def CMD(cmd) :\n    p = subprocess.Popen(cmd, shell=True,\n                         stdin=subprocess.PIPE,\n                         stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE,\n                         close_fds=False)\n    return (p.stdin, p.stdout, p.stderr)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's a little python script that starts a process, checks if it is running, waits a while, kills it, waits for it to terminate, then checks again.", "It uses the 'kill' command.", "Version 2.6 of python subprocess has a kill function.", "This was written on 2.5."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import subprocess\nimport time\n\nproc = subprocess.Popen([\"sleep\", \"60\"], shell=False)\nprint 'poll =', proc.poll(), '(\"None\" means process not terminated yet)'\ntime.sleep(3)\nsubprocess.call([\"kill\", \"-9\", \"%d\" % proc.pid])\nproc.wait()\nprint 'poll =', proc.poll()\n</code>\n</pre>\n", "senID": 1}, {"text": ["The timed output shows that it was terminated after about 3 seconds, and not 60 as the call to sleep suggests."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ time python prockill.py \npoll = None (\"None\" means process not terminated yet)\npoll = -9\n\nreal    0m3.082s\nuser    0m0.055s\nsys 0m0.029s\n</code>\n</pre>\n", "senID": 3}], [{"text": ["see docs for primitive fork() and modules subprocess, multiprocessing, multithreading "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "subprocess", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html"}, {"href": "http://docs.python.org/library/multiprocessing.html#module-multiprocessing.managers", "text": "multiprocessing", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://docs.python.org/library/threading.html?highlight=threading#module-threading", "text": "multithreading", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["If you need to interact with the sub process at all, I recommend the pexpect module (link text).", "You can send input to the process, receive (or \"expect\") output in return, and you can close the process (with force=True to send SIGKILL)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "link text", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/pexpect/2.4"}]}]]