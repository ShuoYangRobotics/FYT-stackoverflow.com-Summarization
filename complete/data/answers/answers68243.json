[[{"text": ["A context-free grammar is, simply, one that doesn't require a symbol table in order to correctly parse the code.", "A context-sensitive grammar does."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The D programming language is an example of a context free grammar.", "C++ is a context sensitive one.", "(For example, is T*x declaring x to be pointer to T, or is it multiplying T by x ?", "We can only tell by looking up T in the symbol table to see if it is a type or a variable."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Whitespace has nothing to do with it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["D uses a context free grammar in order to greatly simplify parsing it, and so that simple tools can parse it (such as syntax highlighting editors)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You might want to read this rather well written essay on parsing Python, Python: Myths about Indentation."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python: Myths about Indentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.secnetix.de/olli/Python/block_indentation.hawk"}]}, {"text": ["While I haven't tried to write a context free parser using something like yacc, I think it may be possible using a conditional lexer to return the indentation change tokens as described in the url."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["By the way, here is the official python grammar from python.org: http://www.python.org/doc/current/ref/grammar.txt"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.python.org/doc/current/ref/grammar.txt", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/current/ref/grammar.txt"}]}], [{"text": ["I would familiarize myself with the problem first by reading up on some of the literature that's available on the subject.", "The classic Compilers book by Aho et.", "al.", "may be heavy on the math and comp sci, but a much more aproachable text is the Let's Build a Compiler articles by Jack Crenshaw.", "This is a series of articles that Mr. Crenshaw wrote back in the late 80's and it's the most under-appreciated text on compilers ever written.", "The approach is simple and to the point: Mr. Crenshaw shows \"A\" approach that works.", "You can easily go through the content in the span of a few evenings and have a much better understanding of what a compiler is all about.", "A couple of caveats are that the examples in the text are written in Turbo Pascal and the compilers emit 68K assembler.", "The examples are easy enough to port to a more current programming language and I recomment Python for that.", "But if you want to follow along as the examples are presented you will at least need Turbo Pascal 5.5 and a 68K assembler and emulator.", "The text is still relevant today and using these old technologies is really fun.", "I highly recommend it as anyone's first text on compilers.", "The great news is that languages like Python and Ruby are open sourced and you can download and study the C source code in order to better understand how it's done. "], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "Compilers", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "Let's Build a Compiler", "tag": "a", "pos": 3, "childList": [{"text": "Let's Build a Compiler", "tag": "em"}], "childNum": 1, "href": "http://compilers.iecc.com/crenshaw/"}, {"text": "Let's Build a Compiler", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "A", "childNum": 0, "tag": "strong", "pos": 5, "childList": []}, {"text": "Turbo Pascal 5.5", "tag": "a", "pos": 9, "childList": [], "childNum": 0, "href": "http://dn.codegear.com/article/20803"}, {"text": "a 68K assembler and emulator", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.easy68k.com/"}]}], [{"text": ["I don't know of any tutorials/guides, but you could try looking at the source for tinypy, it's a very small implementation of a python like language."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "tinypy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.tinypy.org/"}]}], [{"text": ["Using indentation in a language doesn't necessarily mean that the language's grammar can not be context free.", "I.e.", "the indentation will determine in which scope a statement exists.", "A statement will still be a statement no matter which scope it is defined within (scope can often be handled by a different part of the compiler/interpreter, generally during a semantic parse)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That said a good resource is the antlr tool (http://www.antlr.org).", "The author of the tool has also produced a book on creating parsers for languages using antlr (http://www.pragprog.com/titles/tpantlr/the-definitive-antlr-reference).", "There is pretty good documentation and lots of example grammars."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "http://www.antlr.org", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.antlr.org"}, {"text": "http://www.pragprog.com/titles/tpantlr/the-definitive-antlr-reference", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.antlr.org"}]}], [{"text": ["If you're really going to take a whack at language design and implementation, you might want to add the following to your bookshelf:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Programming Language Pragmatics, Scott et al.", "tag": "none", "senID": 1}, {"text": "Design Concepts in Programming Languages, Turbak et al.", "tag": "none", "senID": 2}, {"text": "Modern Compiler Design, Grune et al. (I sacrilegiously prefer this to \"The Dragon Book\" by Aho et al.)", "tag": "none", "senID": 3}]}, {"text": ["Gentler introductions such as:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Crenshaw's tutorial (as suggested by @'Jonas Gorauskas' here)", "tag": "none", "senID": 5}, {"text": "The Definitive ANTLR Reference by Parr", "tag": "none", "senID": 6}, {"text": "Martin Fowler's recent work on DSLs", "tag": "none", "senID": 7}]}, {"text": ["You should also consider your implementation language.", "This is one of those areas where different languages vastly differ in what they facilitate.", "You should consider languages such as LISP, F# / OCaml, and Gilad Bracha's new language Newspeak. "], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "vastly", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["\"Context-free\" is a relative term.", "Most context-free parsers actually parse a superset of the language which is context-free and then check the resulting parse tree to see if it is valid.", "For example, the following two C programs are valid according to the context-free grammar of C, but one quickly fails during context-checking:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n int main()\n{\n    int i;\n    i = 1;\n    return 0;\n}\n\nint main()\n{\n    int i;\n    i = \"Hello, world\";\n    return 0;\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Free of context, i = \"Hello, world\"; is a perfectly valid assignment, but in context you can see that the types are all wrong.", "If the context were char* i; it would be okay.", "So the context-free parser will see nothing wrong with that assignment.", "It's not until the compiler starts checking types (which are context dependent) that it will catch the error."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "i = \"Hello, world\";", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "char* i;", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Anything that can be produced with a keyboard can be parsed as context-free; at the very least you can check that all the characters used are valid (the set of all strings containing only displayable Unicode Characters is a context-free grammar).", "The only limitation is how useful your grammar is and how much context-sensitive checking you have to do on your resulting parse tree."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Whitespace-dependent languages like Python make your context-free grammar less useful and therefore require more context-sensitive checking later on (much of this is done at runtime in Python through dynamic typing).", "But there is still plenty that a context-free parser can do before context-sensitive checking is needed."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I would recommend that you write your parser by hand, in which case having significant whitespace should not present any real problems."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The main problem with using a parser generator is that it is difficult to get good error recovery in the parser.", "If you plan on implementing an IDE for your language, then having good error recovery is important for getting things like Intellisence to work.", "Intellisence always works on incomplete syntactic constructs, and the better the parser is at figuring out what construct the user is trying to type, the better an intellisence experience you can deliver."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you write a hand-written top-down parser, you can pretty much implement what ever rules you want, where ever you want to.", "This is what makes it easy to provide error recovery.", "It will also make it trivial for you to implement significant whitespace.", "You can simply store what the current indentation level is in a variable inside your parser class, and can stop parsing blocks when you encounter a token on a new line that has a column position that is less than the current indentation level.", "Also, chances are that you are going to run into ambiguities in your grammar.", "Most \u201cproduction\u201d languages in wide use have syntactic ambiguities.", "A good example is generics in C# (there are ambiguities around \"&lt;\" in an expression context, it can be either a \"less-than\" operator, or the start of a \"generic argument list\").", "In a hand-written parser solving ambiguities like that are trivial.", "You can just add a little bit of non-determinism where you need it with relatively little impact on the rest of the parser, "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Furthermore, because you are designing the language yourself, you should assume it's design is going to evolve rapidly (for some languages with standards committees, like C++ this is not the case).", "Making changes to automatically generated parsers to either handle ambiguities, or evolve the language, may require you to do significant refactoring of the grammar, which can be both irritating and time consuming.", "Changes to hand written parsers, particularly for top-down parsers, are usually pretty localized."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I would say that parser generators are only a good choice if:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Have you read Aho, Sethi, Ullman: \"Compilers: Principles, Techniques, and Tools\"?", "It is a classical language reference book."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["/Allan"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Just because a language uses significant indentation doesn't mean that it is inherently context-sensitive.", "As an example, Haskell makes use of significant indentation, and (to my knowledge) its grammar is context-free."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["An example of source requiring a context-sensitive grammar could be this snippet from Ruby:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n my_essay = &lt;&lt; END_STR\nThis is within the string\nEND_STR\n\n&lt;&lt; self\n  def other_method\n    ...\n  end\nend\n</code>\n</pre>\n", "senID": 2}, {"text": ["Another example would be Scala's XML mode:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def doSomething() = {\n  val xml = &lt;code&gt;def val &lt;tag/&gt; class&lt;/code&gt;\n  xml\n}\n</code>\n</pre>\n", "senID": 4}, {"text": ["As a general rule, context-sensitive languages are slightly harder to imagine in any precise sense and thus far less common.", "Even Ruby and Scala don't really count since their context sensitive features encompass only a minor sub-set of the language.", "If I were you, I would formulate my grammar as inspiration dictates and then worry about parsing methodologies at a later date.", "I think you'll find that whatever you come up with will be naturally context-free, or very close to it."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["As a final note, if you really need context-sensitive parsing tools, you might try some of the less rigidly formal techniques.", "Parser combinators are used in Scala's parsing.", "They have some annoying limitations (no lexing), but they aren't a bad tool.", "LL(*) tools like ANTLR also seem to be more adept at expressing such \"ad hoc\" parsing escapes.", "Don't try to use Yacc or Bison with a context-sensitive grammar, they are far to strict to express such concepts easily."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["If you've never written a parser before, start with something simple.", "Parsers are surprisingly subtle, and you can get into all sorts of trouble writing them if you've never studied the structure of programming languages."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Reading Aho, Sethi, and Ullman (it's known as \"The Dragon Book\") is a good plan.", "Contrary to other contributors, I say you should play with simpler parser generators like Yacc and Bison first, and only when you get burned because you can't do something with that tool should you go on to try to build something with an LL(*) parser like Antlr."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["A context-sensitive language?", "This one's non-indented: Protium (http://www.protiumble.com)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.protiumble.com", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.protiumble.com"}]}], [{"text": ["Link to a previous SO question about compilers - the context issue wasn't part of that though."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Link to a previous SO question about compilers - the context issue wasn't part of that though.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/41785/learning-resources-on-parsers-interpreters-and-compilers#41986"}]}]]