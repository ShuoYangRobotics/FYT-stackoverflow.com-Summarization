[[{"text": ["I would choose the JVM over python, primarily because multi-threading in Python is impeded by the Global Interpreter Lock.", "However, Java is unlikely to be your best when running on the JVM.", "Clojure or Scala (using actors) are both likely to be better suited to multi-threaded problems."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Global Interpreter Lock", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Global%5FInterpreter%5FLock"}, {"text": "Clojure", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://clojure.org/"}, {"href": "http://www.scala-lang.org/", "text": "Scala", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["If you do choose Java you should consider making use of the java.util.concurrent libraries and avoid multi-threading primitives such as synchronized."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "java.util.concurrent", "tag": "a", "pos": 0, "childList": [{"text": "java.util.concurrent", "tag": "strong"}], "childNum": 1, "href": "http://www.ibm.com/developerworks/java/library/j-jtp1126.html"}, {"text": "java.util.concurrent", "childNum": 0, "tag": "strong", "childList": []}, {"text": "synchronized", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["For concurrency, I would use Java.", "By use Java, I actually mean Scala, which borrows a lot from Erlang's concurrency constructs, but is (probably) more accessible to a Java developer who has never used either before."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Scala", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.scala-lang.org/"}]}, {"text": ["Python threads suffer from having to wait for the Global Interpreter Lock, making true concurrency (within a single process) unachievable for CPU-bound programs.", "As I understand, Stackless Python solves some (though not all) of CPython's concurrency deficiencies, but as I have not used it, I can't really advise on it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Definetely Stackless Python!", "That a Python variant especially made for concurrency. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Stackless Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.stackless.com/"}]}, {"text": ["But in the end it depends on your target platform and what you are trying to achieve. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Best wishes,\nFabian"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"text": ["If not Java/Python I would go for a functional language since taking side effects into account is one of the complexities of writing concurrent software.", "(As far as your question goes : this one happens to be statical typed, but compiler infered most of the time)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "functional language", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Personally I would pick F#, since I've seen lots of nice examples of writing concurrent software with ease using it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As an introduction : this man is equally fun as inspiring, even a must have seen if you are not interested in F# what so ever. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "equally fun as inspiring", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mschnlnine.vo.llnwd.net/d1/pdc08/WMV-HQ/TL11.wmv"}]}], [{"text": ["I don't think the argument is about language choice or static or dynamic typing - it's between two models of concurrency - shared memory and message passing.", "Which model makes more sense in your situation &amp; does your chosen language allow you to make a choice or are you forced to adopt one model over the other?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Why not have a look at Erlang (which has dynamic typing) and message passing, the Actor model, and read why Joe Armstrong doesn't like shared memory.", "There's also a interesting discussion about java concurrency using locks and threads here on SO."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "Erlang", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.erlang.org/"}, {"text": "message passing", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Message_passing"}, {"text": "Actor model", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Actor_model"}, {"text": "Joe Armstrong doesn't like shared memory", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://armstrongonsoftware.blogspot.com/2006/09/why-i-dont-like-shared-memory.html"}, {"text": "here on SO", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/508850/java-concurrency-cynicism-gone-too-far"}]}, {"text": ["I don't know about Python, but Java, along with the inbuilt locks and threads model, has a mesasge passing framework called Kilim."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Kilim", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.malhar.net/sriram/kilim/"}]}], [{"text": ["I would use Java, via Jython.", "Java has strong thread capabilities, and it can be written using the Python syntax with Jython, so you got the best of the two worlds."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python itself is not really good with concurrency, and is slower than Java anyway."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["But if you have concurrency issues and free hands, I'd have a look at Erlang because it has been design for such problems.", "Of course, you must consider Erlang only if you have:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "time to master a (very) new technology", "tag": "none", "senID": 3}, {"text": "control on a reasonable part of the production chain, since Erland need some adaptations in your toolbox to fit", "tag": "none", "senID": 4}]}], [{"text": ["For some tasks, Python is too slow.", "Your single thread Java program could be faster than the concurrent version of Python on a multi-core computer..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'd like to use Java or Scala, F# or simply go to C++(MPI and OpenMPI)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The Java environment (JVM + libraries) is better for concurrency than (C)Python, but Java the language sucks.", "I would probably go with another language on the JVM - Jython has already been mentioned, and Clojure and Scala both have excellent support for concurrency.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Clojure is particularly good - it has support for high performance persistent data structures, agents and software transactional memory.", "It is a dynamic language but you can give it type hints to get performance as good as Java."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Watch this video on InfoQ by Richard Hickey (creator of Clojure) on the problems with traditional approaches to concurrency, and how Clojure handles it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this video", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey"}]}], [{"text": ["I'd look at Objective-C and the Foundation Framework.", "Asynchronous, concurrent programming is well provided for."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This of course depends on your access to Apple's Developer Tools or GnuStep, but if you have access to either one it's a good route to take with concurrent programming."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Neither.", "Concurrent programming is notoriously hard to get correct.", "There is the option of using a process oriented programming language like occam-pi which is based of the idea of communicating sequential processes and the pi calculus.", "This allows compile time checking for deadlock and many other problems that arise during concurrent systems development.", "If you do not like occam-pi, which I cant blame you if you dont, you could try Go the new language from google which also implements a version of CSP."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "occam-pi", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Occam-%CF%80"}, {"text": "communicating sequential processes", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Communicating%5Fsequential%5Fprocesses"}, {"text": "pi calculus", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Pi%5Fcalculus"}, {"text": "Go", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Go%5F%28programming%5Flanguage%29"}]}], [{"text": ["The answer is that it depends.", "For example are you trying to take advantage of multiple cores or cpus on a single machine or are you wanting to distribute your task across many machines?", "How important is speed vs. ease of implementation?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As mentioned before, Python has the Global Interpreter Lock but you could use the multiprocessing module.", "Note that while Stackless is very cool, it won't utilise multiple cores on its own.", "Python is usually considered easier to work with than Java.", "If speed is a priority Java is usually faster."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "multiprocessing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html"}, {"text": "Stackless", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.stackless.com/"}, {"text": "won't utilise multiple cores", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.stackless.com/pipermail/stackless/2008-June/003551.html"}]}, {"text": ["The java.util.concurrent library in Java makes writing concurrent applications on a single machine simpler but you'll still need to synchronise around any shared state.", "While Java isn't necessarily the best language for concurrency, there are a lot of tools, libraries, documentation and best practices out there to help."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "java.util.concurrent", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Using message passing and immutability instead of threads and shared state is considered the better approach to programming concurrent applications.", "Functional languages that discourage mutability and side effects are often preferred as a result.", "If distributing your concurrent applications across multiple machines is a requirement, it is worth looking at runtimes designed for this e.g.", "Erlang or Scala Actors."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Erlang", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://ftp.sunet.se/pub/lang/erlang/"}, {"href": "http://www.scala-lang.org/node/242", "text": "Scala Actors", "childNum": 0, "tag": "a", "childList": []}]}]]