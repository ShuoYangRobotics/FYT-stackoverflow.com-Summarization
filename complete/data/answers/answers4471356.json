[[{"text": ["Maybe you want"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def getTribuner(self):\n    return self.__Tribuner\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def getTribuner(self):\n    for tr in self.__Tribuner:\n        yield tr\n</code>\n</pre>\n", "senID": 3}, {"text": ["I would recommend to expose the standard Python sequence interface instead of your custom method names.", "In your case it would be easiset to just derive Stadion from list."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "Python sequence interface", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#emulating-container-types"}, {"text": "Stadion", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The first time it hits return tr, it will quit.", "You either want to return a generator (yield tr) or just return self.__Tribuner."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "return tr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "yield tr", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "return self.__Tribuner", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def getTribuner(self):\n    return self.__Tribuner\n</code>\n</pre>\n", "senID": 1}, {"text": ["If don't want to return the list at once, you can use a generator, like so:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "generator", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#generators"}]}, {"code": "<pre>\n<code>\n def getTribuner(self):\n    for tr in self.__Tribuner:\n        yield tr\n\n# usage it within a loop ...\nfor tr in instance.getTribuner():\n    # process tr\n</code>\n</pre>\n", "senID": 3}, {"text": ["This will return a list with all members in self.__Tribuner."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "self.__Tribuner", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Sidenote: Concerning getters and setters in python, see this article: "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://tomayko.com/writings/getters-setters-fuxors"], "childNum": 0, "tag": "a", "senID": 6, "childList": []}]}], [{"text": ["If you're wanting to iterate through the items, swap return for yield in getTribuner."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "return", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "yield", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Subclass from UserList.UserList, and all this get's much easier.", ":) Or directly from list.", "Or even better do this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "UserList.UserList", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Stadion:\n    def __init__(self,):\n        self.tribuner=[]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Done.", "Thats all you need.", "You want to add a SitteTribun:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n stadion = Stadion()\nstadion.tribuner.append(SitteTribute())\n</code>\n</pre>\n", "senID": 3}, {"text": ["Getting all the Tribuner:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n stadion.tribuner\n</code>\n</pre>\n", "senID": 5}, {"text": ["Looping over them:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n for tribun in stadion.tribuner:\n    whatevah()\n</code>\n</pre>\n", "senID": 7}, {"text": ["Counting:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n len(stadion.tribuner)\n</code>\n</pre>\n", "senID": 9}, {"text": ["Yes.", "Python really is that easy.", ":-)"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"code": "<pre>\n<code>\n class Stadion(object):\n    def __init__(self, tribuner):\n        self.tribuner = tribuner\n</code>\n</pre>\n", "senID": 0}, {"text": ["In your code, replace stadion.GetTribuner() with stadion.tribuner.", "Replace stadion.SetTribuner(t) with stadion.tribuner = t. To iterate over tribuner, use for x in stadion.tribuner: Now you're programming in Python rather than in Java."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "stadion.GetTribuner()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "stadion.tribuner", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "stadion.SetTribuner(t)", "childNum": 0, "tag": "code", "childList": []}, {"text": "stadion.tribuner = t", "childNum": 0, "tag": "code", "childList": []}, {"text": "for x in stadion.tribuner:", "childNum": 0, "tag": "code", "childList": []}]}]]