[[{"text": ["I first thought you wanted the continue keyword, but that would of course get you the next line of input."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "continue", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I think I'm stumped.", "When looping over the lines of a file, what exactly should happen if you continued the loop without getting a new line?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Do you want to inspect the line again?", "If so, I suggest adding an inner loop that runs until you're \"done\" with the input line, which you can then break out of, or use maybe the while-condition and a flag variable to terminate."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "break", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["What you need is a simple, deterministic finite state machine.", "Something like this..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "finite state machine", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks/library/l-python-state.html"}]}, {"code": "<pre>\n<code>\n state = 1\nfor sLine in oFile:\n   if state == 1:\n      if ... some logic ... :\n         state = 2\n   elif state == 2:\n      if ... some logic ... :\n         state = 1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Simply create an iterator of your own that lets you push data back on the front of the stream so that you can give the loop a line that you want to see over again:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nnext_lines = []\ndef prependIterator(i):\n    while True:\n        if next_lines:\n            yield(next_lines.pop())\n        else:\n            yield(i.next())\n\nfor sLine in prependIterator(oFile):\n    if ... some logic ... :\n        sLine = oFile.next()\n        ... some more logic ...\n        # put the line back so that it gets read\n        # again as we head back up to the \"for\n        # statement\n        next_lines.append(sLine)\n</pre>\n", "senID": 1}, {"text": ["If the prepend&#95;list is never touched, then the prependIterator behaves exactly like whatever iterator it is passed: the if statement inside will always get False and it will just yield up everything in the iterator it has been passed.", "But if items are placed on the prepend&#95;list at any point during the iteration, then those will be yielded first instead before it returns back to reading from the main iterator."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Instead of looping through the file line by line, you can do a file.readlines() into a list.", "Then loop through the list (which allows you to look at the next item if you want).", "Example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list = oFile.readlines()\nfor i in range(len(list))\n    #your stuff\n    list[i] #current line\n    list[i-1] #previous line\n    list[i+1] #next line\n</code>\n</pre>\n", "senID": 1}, {"text": ["you can go to the previous or next line by simply using [i-1] or [i+1].", "You just need to make sure that no matter what, i does not go out of range."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Ugly.", "Wrap the body in another loop."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for sLine in oFile :\n  while 1:\n    if ... some logic ... :\n      sLine = oFile.next()\n      ... some more logic ...\n      continue\n    ... some more logic ...\n    break\n</code>\n</pre>\n", "senID": 1}, {"text": ["A little better:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class pushback_iter(object):\n    def __init__(self,iterable):\n        self.iterator = iter(iterable)\n        self.buffer = []\n    def next(self):\n        if self.buffer:\n            return self.buffer.pop()\n        else:\n            return self.iterator.next()\n    def __iter__(self):\n        return self\n    def push(self,item):\n        self.buffer.append(item)\n\nit_file = pushback_iter(file)\nfor sLine in it_file:\n    if ... some logic ... :\n        sLine = it_file.next()\n        ... some more logic ...\n        it_file.push(sLine)\n        continue\n    ... some more logic ...\n</code>\n</pre>\n", "senID": 3}, {"text": ["Unfortunately no simple way of referencing the current iterator."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You can assign your iterator to an variable then use the .next get te next one."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n iter = oFile.xreadlines() # is this the correct iterator you want?\ntry:\n  sLine = iter.next()\n  while True:\n    if ... some logic ... :\n      sLine = iter.next()\n      ... some more logic ...\n      continue\n    sLine = iter.next()\nexcept StopIterator:\n  pass\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You just need to create a variable out of your iterator, and then manipulate that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n% cat /tmp/alt-lines.py\n<code>\n #! /usr/bin/python -tt\n\nimport sys\n\nlines = iter(open(sys.argv[1]))\nfor line in lines:\n    print line,\n    lines.next()\n</code>\n% cat /tmp/test\n1\n2\n3\n4\n% /tmp/alt-lines.py /tmp/test\n1\n3\n</pre>\n", "senID": 1}, {"text": ["...note that in this case we unconditionally do lines.next() so the above fails for files with odd lines, but I assume that isn't going to be the case for you (and adding the error checking is fairly trivial -- just catch and throw away StopIteration on the manual .next())."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["jle's approach should work, though you might as well use enumerate():"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for linenr, line in enumerate(oFile):\n    # your stuff\n</code>\n</pre>\n", "senID": 1}]]