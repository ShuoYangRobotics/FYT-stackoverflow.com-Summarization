[[{"text": ["list.reverse() modifies the list in-place, returns None.", "But if you want to protect old list, you can use reversed() function for that, it returns an iterator."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [1]: a=[1,2,3,4]\n\nIn [2]: print(a.reverse())\nNone\n\nIn [3]: a\nOut[3]: [4, 3, 2, 1]\n\nIn [4]: a=[1,2,3,4]\n\nIn [5]: print(reversed(a))\n&lt;listreverseiterator object at 0x24e7e50&gt;\n\nIn [6]: list(reversed(a))\nOut[6]: [4, 3, 2, 1]\n\nIn [7]: a\nOut[7]: [1, 2, 3, 4]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["reverse changes list in-place, and doesn't return anything.", "Thus, this is the expected usage:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "reverse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = [1, 2, 3, 4]\na.reverse()\na       # =&gt; [4, 3, 2, 1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you assign the result of reverse back to a, you will overwrite all its hard work with the nonsensical return value (None), which is where your bug comes from."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "reverse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["list is a mutable type, so list operations are in-place, and return None."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The built-in method reverse of a list on python doesn't return the reversed list."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "reverse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It reverses the list in place."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So, if you want to reverse your list, like in your code, just do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = [1,2,3,4]\na.reverse()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I think what you want to do is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = [1,2,3,4]\na.reverse()\n</code>\n</pre>\n", "senID": 1}, {"text": ["a is an object and the operations work on it's data, so you don't need to assign again it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The reverse method does the reverse 'in place' (like sort) and returns None, so after calling a.reverse() a already contains the result."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "a.reverse()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["list.reverse() just doesn't return anything, because it changes the list in-place.", "See this example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "list.reverse()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1,2,3,4]\n&gt;&gt;&gt; a.reverse()\n&gt;&gt;&gt; a\n[4, 3, 2, 1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["There also is the reversed function (actually a type, but doesn't matter here), which does not change the list in-place, but instead returns an iterator with the list items in the reverse order.", "Try:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "reversed", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1,2,3,4]\n&gt;&gt;&gt; a = list(reversed(a))\n&gt;&gt;&gt; a\n[4, 3, 2, 1]\n</code>\n</pre>\n", "senID": 3}]]