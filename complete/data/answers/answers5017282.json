[[{"text": ["See the Python style guide for a comprehensive explanation."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the Python style guide", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"text": ["In practice:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n the following special forms using leading or trailing\nunderscores are recognized (these can generally be combined with any case\nconvention):\n\n- _single_leading_underscore: weak \"internal use\" indicator.  E.g. \"from M\n  import *\" does not import objects whose name starts with an underscore.\n\n- single_trailing_underscore_: used by convention to avoid conflicts with\n  Python keyword, e.g.\n\n  Tkinter.Toplevel(master, class_='ClassName')\n\n- __double_leading_underscore: when naming a class attribute, invokes name\n  mangling (inside class FooBar, __boo becomes _FooBar__boo; see below).\n\n- __double_leading_and_trailing_underscore__: \"magic\" objects or\n  attributes that live in user-controlled namespaces.  E.g. __init__,\n  __import__ or __file__.  Never invent such names; only use them\n  as documented.\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Wrapping a method name in underscores is just a way to separate namespaces.", "If a method begins and ends with underscores, it's simply a convention to indicate that the method isn't meant to be used by external code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The blurb from help(list) you posted simply means that when you use Python's syntax to say e in lst, you're actually invoking lst.__contains__(e)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "help(list)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "e in lst", "childNum": 0, "tag": "code", "childList": []}, {"text": "lst.__contains__(e)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Here is Guido van Rossum, the creator of Python, explaining the use of double underscores:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "explaining the use of double underscores", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python-history.blogspot.com/2009/02/adding-support-for-user-defined-classes.html"}]}, {"text": ["..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Also see the Python documentation on special method names which reads in part:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "special method names", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#special-method-names"}]}], [{"text": ["They are special methods (not the \"dunder\" (double underscore) makes them special, but most often they have a special meaning).", "They are often called when using operators.", "You can overwrite the behaviour in your classes."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "They are special methods", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#special-method-names"}]}, {"text": ["E.g if you have a class C, by defining "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "C", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class C:\n    def __add__(self, other):\n        #....\n        return something\n</code>\n</pre>\n", "senID": 2}, {"text": ["you can define what should happen if you add two instances from the class:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n val = instance1 + instance2\n</code>\n</pre>\n", "senID": 4}], [{"text": ["To some extent, these underscores are nothing special; they're just part of the method name."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, they are used to indicate \"magical\" methods, such as constructors and overloaded operators.", "You should not use them in your own method names.", "From PEP 8:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PEP 8", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"text": ["You will rarely have to call any of these directly.", "For example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["MyClass(...)"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}, {"text": ["a + b"], "childNum": 0, "tag": "code", "senID": 4, "childList": []}, {"text": ["str(a)"], "childNum": 0, "tag": "code", "senID": 5, "childList": []}]}], [{"text": ["In this case, double underscores are used as a convention to denote special methods - methods that are implemented to support syntactic sugar purposes and other special interfaces."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/reference/datamodel.html#specialnames"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/reference/datamodel.html#specialnames", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#specialnames"}]}]]