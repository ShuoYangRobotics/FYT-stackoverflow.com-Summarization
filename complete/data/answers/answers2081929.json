[[{"text": ["Python offers a way to use arbitrary-length argument lists:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def myfunc(*args):\n    for argument in args:\n        print \"myfunc was given\", argument\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you put *args in your function definition, all values passed to the function are available as a tuple called args.", "Note that you can also put additional arguments before *args,\nlike"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "*args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "args", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "*args", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def my_other_func(name, *args):\n</code>\n</pre>\n", "senID": 3}, {"text": ["so the first argument will be available as name, the rest will be in the tuple args."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "name", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "args", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["It is convention, but not neccessary, to call this parameter args.", "As long as there's an asterisk in front of it, you can call it whatever you like."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Could you use a loop."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for value in values:\n    strip_tags(value)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could pass in value as an array of strings, and then return the array of cleaned values."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "value", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n import re\ndef strip_tags(values):\n  return map(lambda i: re.sub(r'&lt;[^&gt;]*?&gt;', '', i), values)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If the values are independent of each other, then don't modify strip_tags, just change how you call it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n values = [some_value, another_value]\nvalues = [strip_tags(v) for v in values]\n# values[0] is now the strip_tags version of the old values[0]\n# similar to values[0] = strip_tags(values[0]), except for every item\n</code>\n</pre>\n", "senID": 1}, {"text": ["If the values are related, such as being adjacent pieces of the same file, then concatenate them before using strip_tags:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n values = [some_value, another_value]\nresult = strip_tags(\"\".join(values))\n# note result is single string\n</code>\n</pre>\n", "senID": 3}], [{"text": ["here is a function written over the function you have provided.", "this would take in a list of values and return the corresponding processed list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\ndef strip_tags_list(values):\n     return map(strip_tags, values)\n</code>\n</pre>\n", "senID": 1}, {"text": ["note: this would work on python 2.6 and earleir versions.", "on python 3.0, you would have to explicitly convert the result of map() to list using list()."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]