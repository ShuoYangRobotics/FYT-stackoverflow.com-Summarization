[[{"text": ["You can't.", "It is just not possible with actual text file implementations on current filesystems."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "You can't", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Text files are sequential, because the lines in a text file can be of any length.", "Deleting a particular line would mean rewriting the entire file from that point on."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Suppose you have a file with the following 3 lines;"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 'line1\\nline2reallybig\\nline3\\nlast line'\n</code>\n</pre>\n", "senID": 3}, {"text": ["To delete the second line you'd have to move the third and fourth lines' positions in the disk.", "The only way would be to store the third and fourth lines somewhere, truncate the file on the second line, and rewrite the missing lines."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If you know the size of every line in the text file, you can truncate the file in any position using .truncate(line_size * line_number) but even then you'd have to rewrite everything after the line."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": ".truncate(line_size * line_number)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You're better off keeping a index into the file so that you can start where you stopped last, without destroying part of the file.", "Something like this would work :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try :\n    for index, line in enumerate(file) :\n        processLine(line)\nexcept :\n    # Failed, start from this line number next time.\n    print(index)\n    raise\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Truncating the file as you read it seems a bit extreme.", "What if your script has a bug that doesn't cause an error?", "In that case you'll want to restart at the beginning of your file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["How about having your script print the line number it breaks on and having it take a line number as a parameter so you can tell it which line to start processing from?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n with open('myfile.txt', 'rw+') as file:\n    for line in file:\n        processLine(line)\n    file.truncate(0)\n</code>\n</pre>\n", "senID": 0}, {"code": "<pre>\n<code>\n lines = open('myfile.txt').readlines()\n\nfor i, line in enumerate(lines[:]):\n    processLine(line)\n    del lines[i]\n\nopen('myfile.txt', 'w').writelines(lines)\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n import fileinput\n\nfor line in fileinput.input(['myfile.txt'], inplace=1):\n    try: processLine(line)\n    except:\n         sys.stdout.write(line) # it prints to 'myfile.txt'\n</code>\n</pre>\n", "senID": 2}, {"text": ["In general, as other people already said it is a bad idea what you are trying to do."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["First of all, calling the operation truncate is probably not the best pick.", "If I understand the problem correctly, you want to delete everything up to the current position in file.", "(I would expect truncate to cut everything from the current position up to the end of the file.", "This is how the standard Python truncate method works, at least if I Googled correctly."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "truncate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "truncate", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "truncate", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["Second, I am not sure it is wise to modify the file while iterating on in using the for loop.", "Wouldn\u2019t it be better to save the number of lines processed and delete them after the main loop has finished, exception or not?", "The file iterator supports in-place filtering, which means it should be fairly simple to drop the processed lines afterwards."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "in-place filtering", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/fileinput.html"}]}, {"text": ["P.S.", "I don\u2019t know Python, take this with a grain of salt."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["A related post has what seems a good strategy to do that, see\n http://stackoverflow.com/questions/366533/how-can-i-run-the-first-process-from-a-list-of-processes-stored-in-a-file-and-imm/366604#366604"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/366533/how-can-i-run-the-first-process-from-a-list-of-processes-stored-in-a-file-and-imm/366604#366604", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/366533/how-can-i-run-the-first-process-from-a-list-of-processes-stored-in-a-file-and-imm/366604#366604"}]}, {"text": ["I have used it as follows:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import os;\n\n  tasklist_file = open(tasklist_filename, 'rw');  \n  first_line = tasklist_file.readline();\n  temp = os.system(\"sed -i -e '1d' \" + tasklist_filename); # remove first line from task file;\n</code>\n</pre>\n", "senID": 2}, {"text": ["I'm not sure it works on Windows.", "Tried it on a mac and it did do the trick."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]