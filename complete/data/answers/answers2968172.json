[[{"text": ["I suggest Google's protobuf"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "protobuf", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/protobuf/"}]}], [{"text": ["You could try usingboost::pythonto make your applications interoperable."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "You could try usingboost::pythonto make your applications interoperable.", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "boost::python", "tag": "code"}]}, {"text": "boost::python", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Some information about pickle support and plain boost::python documentation."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "information", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1_43_0/libs/python/doc/v2/pickle.html"}, {"text": "pickle", "childNum": 0, "tag": "code", "childList": []}, {"text": "boost::python", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://www.boost.org/doc/libs/1_43_0/libs/python/doc/index.html", "text": "documentation.", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["You could try hosting the array in a Memory-mapped file, although you will need to synchronize access to the file to avoid race conditions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Memory-mapped file", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/mmap.html"}]}, {"text": ["Alternatively you could establish a socket (or pipe) connection between both processes and pass values by exchanging messages."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Your case is handled very well by PyUblas, a bridge between Numpy and Boost.Ublas using Boost.Python.", "This bridge supports copy-free transfer of vectors and matrices and is very easy to use."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyUblas", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mathema.tician.de/software/pyublas"}]}], [{"text": ["How large is this array?", "If it isn't very large, then JSON serialization is a good fit.", "There are libraries readily available for C++, and Python has JSON serialization in its standard library as of version 2.6.", "See http://www.json.org/ for more info."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "libraries", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/jsoncpp/"}, {"text": "readily", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://zoolib.cvs.sourceforge.net/zoolib/zoolib/src_other/misc/ZUtil_JSON.cpp"}, {"text": "available", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://ddsbench.svn.sourceforge.net/viewvc/ddsbench/trunk/jost/"}, {"text": "in its standard library", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/json.html"}, {"text": "http://www.json.org/", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.json.org/"}]}], [{"text": ["I would propose simply to use c arrays(via ctypes on the python side) and simply pull/push the raw data through an socket"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Serialization is one problem while IPC is another.", "Do you have the IPC portion figured out?", "(pipes, sockets, mmap, etc?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["On to serialization - if you're concerned about performance more than robustness (being able to plug more modules into this architecture) and security, then you should take a look at the struct module.", "This will let you pack data into C structures using format strings to define the structure (takes care of padding, alignment, and byte ordering for you!", ") In the C++ program, cast a pointer to the buffer to the corresponding structure type. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "struct", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This works well with a tightly-coupled Python script and C++ program that is only run internally."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]