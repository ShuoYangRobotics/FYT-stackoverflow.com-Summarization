[[{"text": ["Like you said, return None is (almost) never needed."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "return None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["But you should consider that the intention of your code is much clearer with an explicit return None.", "Remember: a piece of code also needs to be readable by human-beings, and being explicit usually helps."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "intention", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "return None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["To expound on what others have said, I use a return None if the function is supposed to return a value.", "In Python, all function return a value, but often we write functions that only ever return None, because their return value is ignored.", "In some languages, these would be called procedures."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "return None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So if a function is supposed to return a value, then I make sure all code paths have a return, and that the return has a value, even if it is None."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If a function \"doesn't\" return a value, that is, if it is never called by someone using its return value, then it's ok to end without a return, and if I need to return early, I use the bare form, return."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "return", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Yes and No."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In the simplest case, it is ok to skip \"return None\" because it returns None in only single negative condition. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "In the simplest case, it is ok to skip", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["But if there are nested condition evaluation and multiple scenarios where a function could return None.", "I tend to include them as visual documentation of the scenarios."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "visual documentation of the scenarios", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["[Editing: Based on comment below]"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I prefer \"return None\" to bare \"return\" as It is explicit and later, no one will be in doubt if the return meant returning None or was it an error as something was missing."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "I prefer \"return None\" to bare \"return\"", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Yes, if you do not return any value from a Python function, it returns None.", "So, whether to explicitly return None is a stylistic decision."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Personally, I prefer to always return a value for clarity."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The more I think about it, the less I think the case you describe shows good practice.", "It forces the client to discriminate, so client code would almost always look like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b = foo1(123)\nif b is not None:\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["You couldn't even write:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if b:\n    ...\n</code>\n</pre>\n", "senID": 3}, {"text": ["since, if Baz.__nonzero__ is overwritten, b could evaluate to False, even if it's not None.", "It would be better to have a Null-Baz instance (AKA Null Object), e.g."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "Baz.__nonzero__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Null-Baz", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://en.wikipedia.org/wiki/Null_Object_pattern", "text": "Null Object", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n class Baz(object):\n    def some_method(self):\n        \"\"\"some action:\"\"\"\n        ...\n    ...\n\nclass BazNull(Baz):\n    def some_method(self):\n        \"\"\"nothing happens here\"\"\"\n    ...\n\nBaz.Null = BazNull()\n\n...\n\ndef foo1(x):\n    if some_condition:\n        return Baz(x)\n    else:\n        return Baz.Null\n\n...\n\nb = foo1(123)\nb.some_method()\n</code>\n</pre>\n", "senID": 5}, {"text": ["The point is: help the client (who might be yourself!", ") to keep Cyclomatic Complexity low.", "The fewer branches, the better. "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Cyclomatic Complexity", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Cyclomatic_complexity"}]}], [{"code": "<pre>\n<code>\n def foo1(x):\n    try:\n        return Baz(x)\n    except:\n        raise ValueError('Incorrect value fo Bac')\n</code>\n</pre>\n", "senID": 0}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def foo3(x):\n    return Baz(x) if &lt;condition&gt; else False\n</code>\n</pre>\n", "senID": 2}, {"text": ["I do not believe in half defined function, but this False can be usefull in search type failure pruning."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]