[[{"text": ["That is not what Django is for.", "What you want to do can be achieved with something as simple as this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer\n\nclass Handler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n\n        self.wfile.write(\"magic content goes here\")\n\nif __name__==\"__main__\":\n    try:\n        server = HTTPServer((\"\", 8080), Handler)\n        server.serve_forever()\n    except KeyboardInterrupt:\n        server.socket.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Observe the self.wfile.write line.", "Whatever you write there ends up in the browser.", "If it matters, you can use self.path in the Handler to check which file was requested."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "self.wfile.write", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self.path", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "Handler", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Tested with Python 2.6.4, accessed the server with Chrome browser."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Everyone is right.", "This is the wrong way to use django.", "However, if you need a stop-gap measure while you convert your script to the proper idiom:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nfrom django.http import HttpResponse\n\ndef cgi_view(request, my_module):\n    __import__(my_module)\n    mod = sys.modules[my_module]\n    text = mod.main()\n\n    resp = HttpResponse(text)\n    # Then set your headers on resp\n    return resp\n</code>\n</pre>\n", "senID": 1}, {"text": ["I leave it as an exercise to figure out how to set the headers.", "Sorry for the laziness, but I gotta go get to work."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["P.S.", "if your script is not factored to wrap all its output producing functions in a main() function, you can use subprocess to get the output instead."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Use mod_wsgi plugin to Apache."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can do this to see how an existing script might be transformed into a WSGI application.", "This is a starting point, to show how the WSGI interface works."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import sys\ndef myWSGIApp( environ, start_response ):\n    with file( \"temp\", \"w\" ) as output:\n        sys.stdout= output\n        execfile( \"some script.py\" )\n        sys.stdout= __stdout__\n\n    status = '200 OK'\n    headers = [('Content-type', 'text/plain')]\n\n    start_response(status, headers)\n\n    result= file( \"temp\", \"r\" )\n    return result\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note that you can easily rewrite your scripts to conform to the WSGI\nstandard, also.", "This is still not quite the best approach."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you had this"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 5}, {"text": ["You simply have to add something like this to each script."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def myWSGIApp( environ, start_response ):\n    with file( \"temp\", \"w\" ) as output:\n        sys.stdout= output\n        main()\n        sys.stdout= __stdout__\n\n    status = '200 OK'\n    headers = [('Content-type', 'text/plain')]\n\n    start_response(status, headers)\n\n    result= file( \"temp\", \"r\" )\n    return result\n</code>\n</pre>\n", "senID": 7}, {"text": ["Then each script is callable as a WSGI application and can be plugged\ninto a WSGI-based framework."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["The best approach is to rewrite your scripts so they do not use sys.stdout, but write to a file that's passed to them as an argument."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "sys.stdout", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["A test version of your server can be this simple."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n from wsgiref.simple_server import make_server\nhttpd = make_server('', 8000, myWSGIApp)\n</code>\n</pre>\n", "senID": 11}, {"text": ["Once you have WSGI applications for your scripts, you can create an smarter\nWSGI application that"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Look at http://docs.python.org/library/wsgiref.html for information."], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "http://docs.python.org/library/wsgiref.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/wsgiref.html"}]}, {"text": ["You can then configure Apache to use your WSGI server via mod_wsgi.  "], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "mod_wsgi", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Look at http://code.google.com/p/modwsgi/ for details."], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "http://code.google.com/p/modwsgi/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/modwsgi/"}]}], [{"text": ["That's not how Django works.", "Do the tutorial, you'll save a lot of time and frustration."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What is Django for?", "Use either CGI script on python (probably you already have one) or WSGI application (which is a bit harder to deploy)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Django is a frame work.", "Just use CGI scripts."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]