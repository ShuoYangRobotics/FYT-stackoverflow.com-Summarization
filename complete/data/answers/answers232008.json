[[{"text": ["The Django permission system totally rules.", "Each model has a default set of permissions.", "You can add new permissions to your models, also."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Each User has a set of permissions as well as group memberships.", "Individual users can have individual permissions.", "And they inherit permissions from their group membership."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Your view functions (and templates) can easily check the presence of absence of those permissions at any level of granularity you need to use.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["And if this isn't enough for you, the Profile add-on gives you yet more options for defining a \"User\" and their capabilities, permissions, roles, responsibilities, etc."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["And if this isn't enough for you, you can define your own authentication schemes."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "hr", "senID": 5}, {"text": ["What's important is not to try and define groups that are actual subsets of users, not casually defined titles or roles.", "You never need to \"set permissions for a sub-set of a group\".", "You need to have smaller groups.", "Groups defined around subsets of people."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "casually", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Django's default permissions are around model access, not row access within a model.", "On the other hand, your problem is about subsets of rows in several models: Client, Store, Employee, Manager."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["You'll need a basic set of FK's among these items, and some filters to subset the rows.", "You may have trouble doing this with default admin pages.", "You may need your own version of admin to make use of specialized filters."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "hr", "senID": 9}, {"text": ["If you can't do it with the Django permission system, you should rethink your use cases.", "Seriously."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["[The Django-REST Interface, however, is another beast entirely, and requires some care and feeding."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["If I read your updated requirements correctly, I don't think Django's existing auth system will be sufficient.", "It sounds like you need a full-on ACL system."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This subject has come up a number of times.", "Try googling on django+acl."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Random samplings ..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["There was a Summer of Code project a couple of years ago, but I'm not sure where they got to.", "See http://code.djangoproject.com/wiki/GenericAuthorization"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://code.djangoproject.com/wiki/GenericAuthorization", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.djangoproject.com/wiki/GenericAuthorization"}]}, {"text": ["There is a fresh ticket at djngoproject.org that might be interesting:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://code.djangoproject.com/ticket/9444"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}, {"text": ["There is some interesting code snips on dumpz.org:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["http://dumpz.org/274/"], "childNum": 0, "tag": "a", "senID": 7, "childList": []}, {"text": ["http://dumpz.org/273/"], "childNum": 0, "tag": "a", "senID": 8, "childList": []}]}, {"text": ["... but there are zero docs."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Good luck!"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["ModelAdmin objects have has_add_permission, has_change_permission, has_delete_permission and queryset methods which can be used to enforce permissions around what the logged-in user can see and modify - you could create a subclass which uses these to enforce whatever permissions you want to implement and register all your models with the admin application using your subclass."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "ModelAdmin", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.djangoproject.com/browser/django/trunk/django/contrib/admin/options.py#L154"}, {"text": "has_add_permission", "childNum": 0, "tag": "code", "childList": []}, {"text": "has_change_permission", "childNum": 0, "tag": "code", "childList": []}, {"text": "has_delete_permission", "childNum": 0, "tag": "code", "childList": []}, {"text": "queryset", "childNum": 0, "tag": "code", "childList": []}, {"text": "admin", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["However, it all depends how exactly your permissions system will work - what are the exact requirements which fall out of your fine-grained permissions?", "The more you move away from what the admin application was designed to do, the more work it'll take, but there are a lot of hooks in there which you can use to implement your custom requirements.", "Here's a blog post from Luke Plant which gives examples of some of the fine-tuning you can do without having to dig too deep."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "admin", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "blog post from Luke Plant", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://lukeplant.me.uk/blog.php?id=1107301686"}]}, {"text": ["Does it absolutely have to be based around the admin application?", "Generic views and ModelForms can take care of a lot of the tedious bits involved in implementing CRUD , so be wary of getting too hung up on customising admin - it's almost a Django tradition to start by getting hung up on the admin app and what it can and can't do, initially thinking you'll never have to write any code again ;)"], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "admin", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Generic views", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/generic-views/#create-update-delete-generic-views"}, {"href": "http://docs.djangoproject.com/en/dev/topics/forms/modelforms/", "text": "ModelForms", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://www.jonathanbuchanan.plus.com/images/admin.jpg", "text": "be wary", "childNum": 0, "tag": "a", "childList": []}, {"text": "admin", "childNum": 0, "tag": "code", "childList": []}, {"text": "admin", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You may also want to have a look at the granular-permissions monkeypatch:\nhttp://code.google.com/p/django-granular-permissions/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/django-granular-permissions/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-granular-permissions/"}]}, {"text": ["It adds row-level permissions to django's permission system."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I've just found http://bitbucket.org/jezdez/django-authority/ , it looks promising."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://bitbucket.org/jezdez/django-authority/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bitbucket.org/jezdez/django-authority/"}]}], [{"text": ["From django 1.2 there is support for row-level permissions, which django-guardian makes very intuitive to handle."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-guardian", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://packages.python.org/django-guardian/"}]}]]