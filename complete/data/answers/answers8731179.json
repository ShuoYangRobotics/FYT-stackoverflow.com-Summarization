[[{"text": ["You want to create a daemon that will watch the file system (Folder F) and then run some script (move the file from A to B).", "I know of two libraries and a writeup."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "two", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "https://github.com/seb-m/pyinotify/wiki"}, {"href": "http://sourceforge.net/projects/python-fam/", "text": "libraries", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html", "text": "writeup", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["If your folder F is on machine A, then watch for it using inotify and then just copy it over.", "You don't need python.", "Here's a shell one liner that does it for you."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "F", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n if [ $(inotifywait -e create . --format %f) = \"your_special_file\" ]\nthen\n# Run command to copy your special file\nfi\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can stick that into a while true loop to run forever daemon style."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["inotifywait is part of the inotify-tools suite and it available in Debian and probably RedHat as well. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "inotify-tools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/rvoicilas/inotify-tools/wiki/"}]}], [{"text": ["You have two options:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["In your script, you can have a loop that sleeps for a couple of seconds (or even 5 minutes) and then checks whether the file exists.", "This is called \"busy waiting\" but since you let the process sleep between the checks, the computer won't notice."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You can use a system service like inotify (Python module) to put the script to sleep unless the file changes/is created."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Python module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/seb-m/pyinotify/wiki"}]}]}, {"text": ["The latter approach uses less resources but is much more complex."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Very simple to implement in BASH and also in Python:\nHere is my 2 Cent BASH example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n triger=0\n while [ $triger -ne 1 ];  do sleep 3;  \n       if [ -f NameOfFile ];\n       then\n       echo \"FileFound\";\n       sh YourScriptToLaunch\n       triger=1\n       fi\n echo \"sleeping ...\"\n done\n</code>\n</pre>\n", "senID": 1}, {"text": ["Run this in a shell, you'll see the message sleeping every 3 seconds.", "Then from another shell session to in the directory where you ran the script do \"touch \nNameOfFile\" the script will break and try to launch the script YourScriptToLaunch."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The inotify system of Linux is meant to assist with tasks like this.", "One tool that should work fine for your needs, even if its a bit old, is fsniper.", "You can read about it and download it from here:\nhttp://files.minuslab.net/doc.html"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "fsniper", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}, {"href": "http://files.minuslab.net/doc.html", "text": "http://files.minuslab.net/doc.html", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["One thing worth mentioning is to properly test this tool, aswell as other ways you might want to try, so that it doesn't copy incomplete files.", "I've had issues with that in the past, for example when the purpose is to copy files from a temporary FTP server, if proper checks aren't in place it often happened that the file was copied half-way through its upload.", "Just wanted to mention this since its often overlooked, and its confusing with corrupt files.", ":P"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This is a job for cron.", "Cron man, man cron!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]