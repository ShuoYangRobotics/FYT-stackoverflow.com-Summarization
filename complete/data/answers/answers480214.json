[[{"text": ["Here you have some alternatives: http://www.peterbe.com/plog/uniqifiers-benchmark"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.peterbe.com/plog/uniqifiers-benchmark", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.peterbe.com/plog/uniqifiers-benchmark"}]}, {"text": ["Fastest one:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def f7(seq):\n    seen = set()\n    seen_add = seen.add\n    return [ x for x in seq if x not in seen and not seen_add(x)]\n</code>\n</pre>\n", "senID": 2}, {"tag": "hr", "senID": 3}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["If you plan on using this function a lot, perhaps you would be better off with an ordered set: http://code.activestate.com/recipes/528878/"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://code.activestate.com/recipes/528878/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/528878/"}]}, {"text": ["O(1) insertion, deletion and member-check."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "O", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n from itertools import groupby\n[ key for key,_ in groupby(sortedList)]\n</code>\n</pre>\n", "senID": 0}, {"text": ["The list doesn't even have to be sorted, the sufficient condition is that equal values are grouped together."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sorted", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Edit: I assumed that \"preserving order\" implies that the list is actually ordered.", "If this is not the case, then the solution from MizardX is the right one."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit: I assumed that \"preserving order\" implies that the list is actually ordered. If this is not the case, then the solution from MizardX is the right one.", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["Community edit: This is however the most elegant way to \"compress duplicate consecutive elements into a single element\"."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If order doesn't matter - just convert list to set"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "set", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n ls = [1, 2, 3, 3]\nprint set(ls)  # set([1, 2, 3])\n</code>\n</pre>\n", "senID": 1}, {"text": ["More about set type - http://docs.python.org/release/2.4.4/lib/types-set.html"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/release/2.4.4/lib/types-set.html", "text": "http://docs.python.org/release/2.4.4/lib/types-set.html", "childNum": 0, "tag": "a", "childList": []}]}], [{"code": "<pre>\n<code>\n for i in range(len(theArray)-1,-1,-1): #get the indexes in reverse\n if theArray.count(theArray[i]) &gt; 1:\n   theArray.pop(i)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you need one liner then maybe this would help:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n reduce(lambda x, y: x + y if y[0] not in x else x, map(lambda x: [x],lst))\n</code>\n</pre>\n", "senID": 1}, {"text": ["... should work but correct me if i'm wrong"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["For no hashable types (e.g.", "list of lists), based on MizardX's:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def f7_noHash(seq)\n    seen = set()\n    return [ x for x in seq if str( x ) not in seen and not seen.add( str( x ) )]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["MizardX's answer gives a good collection of multiple approaches."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is what I came up with while thinking aloud:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["mylist = [ x for i,x in enumerate(mylist) if x not in mylist[i+1:]]"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Short and sweet:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]