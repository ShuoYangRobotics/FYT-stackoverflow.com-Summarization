[[{"text": ["You're too late.", "By the time that the typed command gets to Python your shell has already worked its magic.", "For example, quotes get consumed (as you've noticed), variables get interpolated, etc."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In a unix environment, this is not generally possible...the best you can hope for is the command line as passed to your process."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Because the shell (essentially any shell) may munge the typed command line in several ways before handing it to the OS to for execution."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "any", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["As mentioned, this probably cannot be done, at least not reliably.", "In a few cases, you might be able to find a history file for the shell (e.g.", "- \"bash\", but not \"tcsh\") and get the user's typing from that.", "I don't know how much, if any, control you have over the user's environment."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["On Windows subprocess.list2cmdline() might help."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "subprocess.list2cmdline()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you're on linux, I'd suggest monkeying with the ~/.bash_history or the shell history command, although I believe the command must finish executing before it's added to the shell history."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I started playing with:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import popen2\nx,y = popen2.popen4(\"tail ~/.bash_history\")\nprint x.readlines()\n</code>\n</pre>\n", "senID": 2}, {"text": ["but I'm getting weird behavior where the shell doesn't seem to be completely flushing to the .bash_history file"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["On linux there is /proc//cmdline that is in format of argv[] (ie.", "there is 0x00 between all the lines and you can't really know how many strings there are since you don't get the argc; though you will know it when the file runs out of data ;)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can be sure that that commandline is already munged too since all escaping/variable filling is done and parameters are nicely packages (no extra spaces between parameters etc.", ")."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]