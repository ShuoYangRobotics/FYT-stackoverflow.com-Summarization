[[{"text": ["When your regular expression solution hits a wall, try this super easy (and reliable) BeautifulSoup program."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}, {"code": "<pre>\n<code>\n from BeautifulSoup import BeautifulSoup\n\nhtml = \"&lt;a&gt; Keep me &lt;/a&gt;\"\nsoup = BeautifulSoup(html)\n\ntext_parts = soup.findAll(text=True)\ntext = ''.join(text_parts)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There is also a small library called stripogram which can be used to strip away some or all HTML tags."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "stripogram", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/stripogram"}]}, {"text": ["You can use it like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from stripogram import html2text, html2safehtml\n# Only allow &lt;b&gt;, &lt;a&gt;, &lt;i&gt;, &lt;br&gt;, and &lt;p&gt; tags\nclean_html = html2safehtml(original_html,valid_tags=(\"b\", \"a\", \"i\", \"br\", \"p\"))\n# Don't process &lt;img&gt; tags, just strip them out. Use an indent of 4 spaces \n# and a page that's 80 characters wide.\ntext = html2text(original_html,ignore_tags=(\"img\",),indent_width=4,page_width=80)\n</code>\n</pre>\n", "senID": 2}, {"text": ["So if you want to simply strip out all HTML, you pass valid_tags=() to the first function."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You can find the documentation here."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "documentation here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://zope.org/Members/chrisw/StripOGram/readme"}]}], [{"text": ["You can use a regular expression to remove all the tags:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; s = 'blah blah &lt;a href=\"blah\"&gt;link&lt;/a&gt;'\n&gt;&gt;&gt; re.sub('&lt;[^&gt;]*&gt;', '', s)\n'blah blah link'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try Beautiful Soup.", "Throw away everything except the text."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Beautiful Soup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}], [{"text": ["Regexs, BeautifulSoup, html2text don't work if an attribute has '&gt;' in it.", "See Is \u201c>\u201d (U+003E GREATER-THAN SIGN) allowed inside an html-element attribute value?"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "don't work", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "'&gt;'", "childNum": 1, "tag": "strong", "pos": -1, "childList": [{"text": "&gt;", "tag": "code"}]}, {"text": "&gt;", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Is \u201c>\u201d (U+003E GREATER-THAN SIGN) allowed inside an html-element attribute value?", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/94528/is-u003e-greater-than-sign-allowed-inside-an-html-element-attribute-value"}]}, {"text": ["'HTML/XML parser'-based solution might help in such cases e.g., stripogram suggested by @MrTopf does work. "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "stripogram", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/stripogram"}, {"href": "http://stackoverflow.com/questions/598817/python-html-removal/599924#599924", "text": "suggested by @MrTopf", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Here's ElementTree-based solution: "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "ElementTree", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/element-index.htm"}]}, {"code": "<pre>\n<code>\n ####from xml.etree import ElementTree as etree # stdlib\nfrom lxml import etree\n\nstr_ = 'blah blah &lt;a href=\"blah\"&gt;link&lt;/a&gt; END'\nroot = etree.fromstring('&lt;html&gt;%s&lt;/html&gt;' % str_)\nprint ''.join(root.itertext()) # lxml or ElementTree 1.3+\n</code>\n</pre>\n", "senID": 3}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n blah blah link END\n</code>\n</pre>\n", "senID": 5}], [{"text": ["html2text will do something like this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "html2text", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.aaronsw.com/2002/html2text/"}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; s = 'blah blah &lt;a href=\"blah\"&gt;link&lt;/a&gt;'\n&gt;&gt;&gt; q = re.compile(r'&lt;.*?&gt;', re.IGNORECASE)\n&gt;&gt;&gt; re.sub(q, '', s)\n'blah blah link'\n</code>\n</pre>\n", "senID": 0}]]