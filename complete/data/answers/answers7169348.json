[[{"code": "<pre>\n<code>\n while ((j &lt;= len(input)) |  (j != ' ') | (input[j+1] != \"'\")):\n</code>\n</pre>\n", "senID": 0}, {"text": ["0) You should be using or."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "or", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["1) You should not use input as a variable name; it hides a built-in function."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "input", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["2) j is an integer, so it can never be equal to ' ', so that test is useless."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "j", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "' '", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["3) j &lt;= len(input) passes when j == len(input).", "The length of a string is not a valid index into the string; indices into a string of length N range from 0 to (N - 1) (you can also use negative numbers from -1 to -N, to count from the end).", "Certainly j+1 doesn't work either."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "j &lt;= len(input)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "j == len(input)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "not", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "j+1", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["4) I can't tell what the heck you are actually trying to do.", "Could you explain it in words?", "As stated, this isn't a very good question; making the code stop throwing exceptions doesn't mean it's any closer to working correctly, and certainly doesn't mean it's any closer to being good code."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["It looks like j+1 is a number greater than or equal to the length of the string you have (input).", "Make sure you structure your while loop so that j &lt; (len(input) - 1) is always true and you won't end up with the string index out of range error."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "j+1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "input", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "j &lt; (len(input) - 1)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["if j &gt;= len(input) - 1 then j+1 will most certainly be out of bounds.", "Also, use or and not |. "], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "j &gt;= len(input) - 1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "j+1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "|", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You get an error IndexError: string index out of range.", "The only index reference is in part input[j+1].", "Situation when j = len(input) will cause an error, as the following code demonstrates:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "IndexError: string index out of range", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "input[j+1]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "j = len(input)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; input = \"test string\"\n&gt;&gt;&gt; len(input)\n11\n&gt;&gt;&gt; input[11]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: string index out of range\n&gt;&gt;&gt; input[10]\n'g'\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you try to reference element number j+1, then condition j &lt; ( len(input) - 1 ) needs to be satisfied."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "j+1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "j &lt; ( len(input) - 1 )", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["When using != in if statements, make sure that or is actually what you need.", "Here's an example:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "!=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n import random\na = random.randint(1, 10)\nb = random.randint(1, 10)\nc = random.randint(1, 10)\nif a != 1 or b != 1 or c != 1:\n    print \"None of the values should equal 1\"\n    # The interpreter sees `a != 1`.\n    # If `a` is not equal to 1 the condition is true, and this code gets excecuted.\n    # This if statement will return true if ANY of the values are not equal to 1.\nif a != 1 and b != 1 and c != 1:\n    print \"None of the values are equal to 1\" # True\n    # This if statement will return true if ALL of the values are not equal to 1.\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is a hard thing to understand at first (I made this mistake all the time), but if you practise it a bit, it will make perfect sense."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So, to get your code working, replace those |s with and, and it will work (and stick with the keywords or and and unless you specifically need boolean or or and (|/&amp;):"], "childNum": 6, "tag": "p", "senID": 3, "childList": [{"text": "|", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "and", "childNum": 0, "tag": "code", "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "childList": []}, {"text": "and", "childNum": 0, "tag": "code", "childList": []}, {"text": "|", "childNum": 0, "tag": "code", "childList": []}, {"text": "&amp;", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n while ((j &lt;= len(input)) and  (j != ' ') and (input[j+1] != \"'\")):\n</code>\n</pre>\n", "senID": 4}, {"text": ["and the output is:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n 100px\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Not the solution to your problem.", "Code that probably does what you are aiming for. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Just use a single regular expression:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import re\n\ndef width(input, attr):\n    \"\"\"\n    &gt;&gt;&gt; width(\"a='100px'\", 'a')\n    '100px'\n    \"\"\"\n    regex = re.compile(attr + r\"\"\".*?'(?P&lt;quoted_string&gt;[^']+)'\"\"\")\n    m = regex.match(input.strip())\n    return m.group(\"quoted_string\") if m else ''\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</code>\n</pre>\n", "senID": 2}, {"text": ["This code skips attr and searches for a quoted string that follows.", "(?P&lt;quoted_string&gt;[^']+) captures the quoted string.", "m.group(\"quoted_string\") recovers the quoted string."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "attr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(?P&lt;quoted_string&gt;[^']+)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "m.group(\"quoted_string\")", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}]]