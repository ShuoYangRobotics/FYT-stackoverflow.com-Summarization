[[{"text": ["This is how I make an executable script.", "It doesn't take eggs or anything like that into account.", "It's just a simple script that I want to be able to execute.", "I'm assuming you are using linux."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eggs", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n #! /usr/bin/env python\nimport sys\n\n\ndef main():\n    #\n    # Do something ... Whatever processing you need to do, make it happen here.\n    # Don't shove everything into main, break it up into testable functions!\n    #\n    # Whatever this function returns, is what the exit code of the interpreter,\n    # i.e. your script, will be.  Because main is called by sys.exit(), it will\n    # behave differently depending on what you return.\n    # \n    # So, if you return None, 0 is returned.  If you return integer, that \n    # return code is used.  Anything else is printed to the console and 1 (error) \n    # is returned.\n    #\n    if an_error_occurred:\n        return 'I\\'m returning a string, it will be printed and 1 returned'\n\n    # Otherwise 0, success is returned.\n    return 0\n\n# This is true if the script is run by the interpreter, not imported by another\n# module.\nif __name__ == '__main__':\n    # main should return 0 for success, something else (usually 1) for error.\n    sys.exit(main())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now, if you're permissions are set correctly, you can execute this script."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["One thing to realize is as your script is processed each line is executed in the interpreter.", "This is true, regardless of how the processor \"gets it\".", "That is importing a  script as a module and executing it as a script essentially both work the same, in that they both execute each line of the module."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Once you realize your script is simply executing as it runs, you realize that the order of functions don't matter.", "A function declaration is a function declaration.", "It's when you call the function that matters."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "call", "childNum": 1, "tag": "strong", "pos": 2, "childList": [{"text": "call", "tag": "em"}]}, {"text": "call", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["So, in general, the layout of your script looks like this"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def func1():\n    pass\ndef func2():\n    pass\ndef main():\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n</code>\n</pre>\n", "senID": 6}, {"text": ["You create the functions you want to use first, then you use them.", "Hope it helps."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["The only thing (like you said it) is to include:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #! /bin/env python\n</code>\n</pre>\n", "senID": 1}, {"text": ["on the first line.", "And is not even mandatory, but recommended.", "After that, you can just call it writing:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n python [filename].py\n</code>\n</pre>\n", "senID": 3}, {"text": ["in a terminal or in a bash file."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You'll also have to give it execution rights:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n chmod u+x yourfile.py\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Delete the first space.", "That is,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n</code>\n</pre>\n", "senID": 1}, {"text": ["Should be the very first line of your file.", "Then, make sure you make set the permisions for the the file to executable with:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n chmod u+x your_script.py\n</code>\n</pre>\n", "senID": 3}, {"text": ["Python scripts execute in sequential order.", "If you have a file filled with functions, common practice is to have something that looks like this at the very end of your file:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 5}, {"text": ["Where main() starts execution of your script.", "The reason we do it this way, instead of a bare call to main() is that this allows you to make your script act like a module without any modification; if you just had a single line that called main(), your module would would execute the script's main.", "The if statement just checks if your script is running in the __main__ namespace, i.e., it is running as a script."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["You need to add sha bang as you described, e.g."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sha bang", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n</code>\n</pre>\n", "senID": 3}, {"text": ["as the first line in your file and you need to make it executable by running"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n chmod +x Dosomething\n</code>\n</pre>\n", "senID": 5}, {"text": ["You do not need to do anything else, in particular file name may be anything including Dosomething.", "Your PATH probably doesn't include the directory where the file resides, so you should run it like this (assuming your current working directory is where the file is):"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "Dosomething", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "PATH", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n ./Dosomething\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Your code should follow the template"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # any functions I want to define, and will be accessible when imported as module  \n# or run from command line\n...\n\nif __name__ == '__main__':\n    # things I want to do only when I run it from the command line\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to be able to run it without having to use python fileName.py but rather just ./fileName.py then you will want to make the first line of your file"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "python fileName.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "./fileName.py", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n</code>\n</pre>\n", "senID": 3}, {"text": ["And make the file executable by the user at least"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n chmod u+x fileName.py\n</code>\n</pre>\n", "senID": 5}, {"text": ["If you do not add a .py extension to your file then it will still be runnable from the command line ... but not importable by other modules."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Example: myPythonScript"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\nprint \"hello, world!\"\n</code>\n</pre>\n", "senID": 1}]]