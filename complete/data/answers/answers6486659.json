[[{"text": ["The 'r' in the front denotes a particular category of string called raw string.", "You can't get that by adding two strings or re substituting a  string.", "It is just a string type, but with the escape characters take care. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = r'something'\n&gt;&gt;&gt; s\n'something'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["When you are writing the script, use the 'r', if you are getting the input via raw_input, python will take care of escaping the characters.", "So, the question is why are you trying to do that?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n music_file='C:/Music/song.mp3'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Python, the r prefix introduces a raw string.", "Outside of raw strings, backslash (\\) characters are considered as escape characters and have to be escaped themselves (by doubling them)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "r", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "raw string", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/lexical_analysis.html#string-literals"}, {"text": "\\", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://en.wikipedia.org/wiki/Escape_character", "text": "escape characters", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Try a simple string instead:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n music_file = 'C:\\\\Music\\\\song.mp3'\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The r you are talking about has to be placed before a string definition, and tells python that the following string is \"raw\", meaning it will ignore backslash escapes (so it doesn't error on invalid backslashes in filenames, for example)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "r", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Why don't you just do it like in the first example?", "I don't see what you are trying to accomplish in the second example."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["you can try music_file = r'%s' % path_to_file"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "music_file = r'%s' % path_to_file", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As a few of the other answers have pointed out (I'm just posting this as an answer because it seemed kind of silly to make it a comment), what you've given in your first code block is exactly what the contents of your script should be.", "You don't need to do anything special to get the r there.", "In fact the 'r' is not part of the string, it's part of the code that makes the string."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "exactly what the contents of your script should be", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "r", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]