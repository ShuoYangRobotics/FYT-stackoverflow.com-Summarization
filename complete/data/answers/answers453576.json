[[{"text": ["I find this solution more elegant:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\nd = dict.fromkeys(string.ascii_lowercase, 0)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import string\nletter_count = dict(zip(string.ascii_lowercase, [0]*26))\n</code>\n</pre>\n", "senID": 0}, {"text": ["Or maybe:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import string\nimport itertools\nletter_count = dict(zip(string.lowercase, itertools.repeat(0)))\n</code>\n</pre>\n", "senID": 2}, {"text": ["Can't decide which one I like more at the moment."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT: I've decided that I like nosklo's the best :-)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import string\nletter_count = dict.fromkeys(string.ascii_lowercase, 0)\n</code>\n</pre>\n", "senID": 5}, {"tag": "hr", "senID": 6}, {"text": ["I'll take a guess here: do you want to count occurences of letters in a text (or something similar)?", "There are better ways to do this than starting with an initialized dictionary."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["For one, there is defaultdict in the collections module:"], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "defaultdict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "collections", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import collections\n&gt;&gt;&gt; letter_count = collections.defaultdict(int)\n&gt;&gt;&gt; the_text = 'the quick brown fox jumps over the lazy dog'\n&gt;&gt;&gt; for letter in the_text: letter_count[letter] += 1\n... \n&gt;&gt;&gt; letter_counts\ndefaultdict(&lt;type 'int'&gt;, {' ': 8, 'a': 1, 'c': 1, 'b': 1, ... 'z': 1})\n</code>\n</pre>\n", "senID": 9}, {"text": ["Then there is this way:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dict((c, s.count(c)) for c in string.ascii_lowercase)\n{'a': 1, 'b': 1, 'c': 1, ... 'z': 1}\n</code>\n</pre>\n", "senID": 11}, {"text": ["Horrible performance, but short and easy to read.", "Might be worth it, if performance doesn't matter."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"text": ["If you plan to use it for counting, I suggest the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import collections\nd = collections.defaultdict(int)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's a compact version, using a list comprehension:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "list comprehension", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; letter_count = dict( (key, 0) for key in string.ascii_lowercase )\n&gt;&gt;&gt; letter_count\n{'a': 0, 'c': 0, 'b': 0, 'e': 0, 'd': 0, 'g': 0, 'f': 0, 'i': 0, 'h': 0, 'k': 0,\n 'j': 0, 'm': 0, 'l': 0, 'o': 0, 'n': 0, 'q': 0, 'p': 0, 's': 0, 'r': 0, 'u': 0, \n't': 0, 'w': 0, 'v': 0, 'y': 0, 'x': 0, 'z': 0}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There's this too:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\nletter_count = dict((letter, 0) for letter in string.ascii_lowercase)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import string\nletters = string.ascii_lowercase\nd = dict(zip(letters, [0]*len(letters))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Yet another 1-liner Python hack:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n letter_count = dict([(chr(i),0) for i in range(97,123)])\n</code>\n</pre>\n", "senID": 1}]]