[[{"text": ["There is no built-in dictionary method that would return your desired result."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can, however, achieve your goal by creating a helper function that will format the dictionary, e.g."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def getNiceDictRepr(aDict):\n    return '\\n'.join('%s %s' % t for t in aDict.iteritems())\n</code>\n</pre>\n", "senID": 2}, {"text": ["This will produce your exact desired output:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; myDict = dict([(u'BC',45), (u'CHM',25), (u'CPM',30)])\n&gt;&gt;&gt; print getNiceDictRepr(myDict)\nBC 45\nCHM 25\nCPM 30\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then, in your application code, you can use it by passing it to SetValue:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "SetValue", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n self.textCtrl.SetValue(getNiceDictRepr(myDict))\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Maybe the pretty print module will help:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pretty print", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-pprint.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import pprint\n&gt;&gt;&gt; pprint.pformat({ \"my key\": \"my value\"})\n\"{'my key': 'my value'}\"\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n text_for_display = '\\n'.join(item + u' ' + unicode(value) for item, value in my_dictionary.items())\n</code>\n</pre>\n", "senID": 0}], [{"text": ["use % formatting (known in C as sprintf), e.g:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"%10s - %d\" % dict.items()[0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Number of % conversion specifications in the format string should match tuple length, in the dict.items() case, 2.", "The result of the string formatting operator is a string, so that using it as an argument to SetValue() is no problem.", "To translate the whole dict to a string:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "% conversion specifications", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n '\\n'.join((\"%10s - %d\" % t) for t in dict.items())\n</code>\n</pre>\n", "senID": 3}, {"text": ["The format conversion types are specified in the doc."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "doc", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/typesseq-strings.html"}]}], [{"text": ["That data seems much better displayed as a Table/Grid."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I figured out a \"better\" way of formatting the output.", "As usual, I was trying to nuke it out when a more elegant method will do."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for key, value in sorted(self.dict.items()):\n    self.current_list.WriteText(key + \" \" + str(self.dict[key]) + \"\\n\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["This way also sorts the dictionary alphabetically, which is a big help when identifying items that have already been selected or used."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]