[[{"text": ["Bored at work.", "The majority of this code is to set up the numwords dict, which is only done on the first call."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def text2int(textnum, numwords={}):\n    if not numwords:\n      units = [\n        \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n        \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n        \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\",\n      ]\n\n      tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n\n      scales = [\"hundred\", \"thousand\", \"million\", \"billion\", \"trillion\"]\n\n      numwords[\"and\"] = (1, 0)\n      for idx, word in enumerate(units):    numwords[word] = (1, idx)\n      for idx, word in enumerate(tens):     numwords[word] = (1, idx * 10)\n      for idx, word in enumerate(scales):   numwords[word] = (10 ** (idx * 3 or 2), 0)\n\n    current = result = 0\n    for word in textnum.split():\n        if word not in numwords:\n          raise Exception(\"Illegal word: \" + word)\n\n        scale, increment = numwords[word]\n        current = current * scale + increment\n        if scale &gt; 100:\n            result += current\n            current = 0\n\n    return result + current\n\nprint text2int(\"seven billion one hundred million thirty one thousand three hundred thirty seven\")\n#7100031337\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Some earlier posts might be helpful, even though they deal more with turning text to numbers.", "http://stackoverflow.com/questions/468241/python-convert-alphabetically-spelled-out-numbers-to-numerics"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/468241/python-convert-alphabetically-spelled-out-numbers-to-numerics", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/468241/python-convert-alphabetically-spelled-out-numbers-to-numerics"}]}, {"text": ["Also a great code snippet from Greg Hewgill at http://github.com/ghewgill/text2num/tree/master"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://github.com/ghewgill/text2num/tree/master", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/ghewgill/text2num/tree/master"}]}, {"text": ["My first post : )"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here's the trivial case approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; number = {'one':1,\n...           'two':2,\n...           'three':3,}\n&gt;&gt;&gt; \n&gt;&gt;&gt; number['two']\n2\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or are you looking for something that can handle \"twelve thousand, one hundred seventy-two\"?"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\"twelve thousand, one hundred seventy-two\"", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["This could be easily be hardcoded into a dictionary if there's a limited amount of numbers you'd like to parse. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For slightly more complex cases, you'll probably want to generate this dictionary automatically, based on the relatively simple numbers grammar.", "Something along the lines of this (of course, generalized...)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for i in range(10):\n   myDict[30 + i] = \"thirty-\" + singleDigitsDict[i]\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you need something more extensive, then it looks like you'll need natural language processing tools.", "This article might be a good starting point."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "This article", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.acm.org/crossroads/xrds13-4/natural_language.html"}]}], [{"text": ["Thanks for the code snippet... saved me a lot of time! "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I needed to handle a couple extra parsing cases, such as ordinal words (\"first\", \"second\"), hyphenated words (\"one-hundred\"), and hyphenated ordinal words like (\"fifty-seventh\"), so I added a couple lines:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def text2int(textnum, numwords={}):\n    if not numwords:\n        units = [\n        \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n        \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n        \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\",\n        ]\n\n        tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n\n        scales = [\"hundred\", \"thousand\", \"million\", \"billion\", \"trillion\"]\n\n        numwords[\"and\"] = (1, 0)\n        for idx, word in enumerate(units):  numwords[word] = (1, idx)\n        for idx, word in enumerate(tens):       numwords[word] = (1, idx * 10)\n        for idx, word in enumerate(scales): numwords[word] = (10 ** (idx * 3 or 2), 0)\n\n    ordinal_words = {'first':1, 'second':2, 'third':3, 'fifth':5, 'eighth':8, 'ninth':9, 'twelfth':12}\n    ordinal_endings = [('ieth', 'y'), ('th', '')]\n\n    textnum = textnum.replace('-', ' ')\n\n    current = result = 0\n    for word in textnum.split():\n        if word in ordinal_words:\n            scale, increment = (1, ordinal_words[word])\n        else:\n            for ending, replacement in ordinal_endings:\n                if word.endswith(ending):\n                    word = \"%s%s\" % (word[:-len(ending)], replacement)\n\n            if word not in numwords:\n                raise Exception(\"Illegal word: \" + word)\n\n            scale, increment = numwords[word]\n\n         current = current * scale + increment\n         if scale &gt; 100:\n            result += current\n            current = 0\n\n    return result + current`\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Made change so that text2int(scale) will return correct conversion.", "Eg, text2int(\"hundred\") => 100. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\nnumwords = {}\n\n\ndef text2int(textnum):\n\n    if not numwords:\n\n        units = [ \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\",\n                \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\n                \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\",\n                \"eighteen\", \"nineteen\"]\n\n        tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \n                \"seventy\", \"eighty\", \"ninety\"]\n\n        scales = [\"hundred\", \"thousand\", \"million\", \"billion\", \"trillion\", \n                'quadrillion', 'quintillion', 'sexillion', 'septillion', \n                'octillion', 'nonillion', 'decillion' ]\n\n        numwords[\"and\"] = (1, 0)\n        for idx, word in enumerate(units): numwords[word] = (1, idx)\n        for idx, word in enumerate(tens): numwords[word] = (1, idx * 10)\n        for idx, word in enumerate(scales): numwords[word] = (10 ** (idx * 3 or 2), 0)\n\n    ordinal_words = {'first':1, 'second':2, 'third':3, 'fifth':5, \n            'eighth':8, 'ninth':9, 'twelfth':12}\n    ordinal_endings = [('ieth', 'y'), ('th', '')]\n    current = result = 0\n    tokens = re.split(r\"[\\s-]+\", textnum)\n    for word in tokens:\n        if word in ordinal_words:\n            scale, increment = (1, ordinal_words[word])\n        else:\n            for ending, replacement in ordinal_endings:\n                if word.endswith(ending):\n                    word = \"%s%s\" % (word[:-len(ending)], replacement)\n\n            if word not in numwords:\n                raise Exception(\"Illegal word: \" + word)\n\n            scale, increment = numwords[word]\n\n        if scale &gt; 1:\n            current = max(1, current)\n\n        current = current * scale + increment\n        if scale &gt; 100:\n            result += current\n            current = 0\n\n    return result + current\n</code>\n</pre>\n", "senID": 1}]]