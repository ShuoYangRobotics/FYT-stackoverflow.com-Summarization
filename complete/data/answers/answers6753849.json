[[{"text": ["This should do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def removenewlines(s):\n    inquotes = False\n    result = []\n\n    for chunk in s.split(\"\\\"\"):\n        if inquotes: chunk.replace(\"\\n\", \"\")\n        result.append(chunk)\n        inquotes = not inquotes\n\n    return \"\\\"\".join(result)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A simple stateful filter will do the trick."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n in_string  = False\ninput_str  = 'foo,bar,\\n\"hihi\",\"hi\\nhi\"'\noutput_str = ''\n\nfor ch in input_str:\n    if ch == '\"': in_string = not in_string\n    if ch == '\\n' and in_string: continue\n    output_str += ch\n\nprint output_str\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; str = \"foo,bar,\\n\\\"hihi\\\",\\\"hi\\nhi\\\"\"\n&gt;&gt;&gt; re.sub(r'\".*?\"', lambda x: x.group(0).replace('\\n',''), str, flags=re.S)\n'foo,bar,\\n\"hihi\",\"hihi\"'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}, {"text": ["Short explanation:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Personally I find longer functions that say the same thing more tiring and less readable, in the same way that in C I would prefer i++ to i = i + 1.", "It's all about what one is used to reading."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "i++", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "i = i + 1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Quick note: Python strings can use '' or \"\" as delimiters, so it's common practice to use one when the other is inside your string, for readability.", "Eg: 'foo,bar,\\n\"hihi\",\"hi\\nhi\"'.", "On to the question..."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "''", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "'foo,bar,\\n\"hihi\",\"hi\\nhi\"'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You probably want the python regexp module: re.", "In particular, the substitution function is what you want here.", "There are a bunch of ways to do it, but one quick option is to use a regexp that identifies the \"\" substrings, then calls a helper function to strip any \\n out of them..."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "re", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}, {"text": "\"\"", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "\\n", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import re\ndef helper(match):\n    return match.group().replace(\"\\n\",\"\")\ninput = 'foo,bar,\\n\"hihi\",\"hi\\nhi\"'\nresult = re.sub('(\".*?\")', helper, input, flags=re.S)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["This regex works (assuming that quotes are correctly balanced):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nresult = re.sub(r\"\"\"(?x) # verbose regex\n    \\n        # Match a newline\n    (?!       # only if it is not followed by\n     (?: \n      [^\"]*\"  # an even number of quotes\n      [^\"]*\"  # (and any other non-quote characters)\n     )*       # (yes, zero counts, too)\n     [^\"]*\n     \\z       # until the end of the string.\n    )\"\"\", \n    \"\", str)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Something like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Break the CSV data into columns."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; m=re.findall(r'(\".*?\"|[^\"]*?)(,\\s*|\\Z)',s,re.M|re.S)\n&gt;&gt;&gt; m\n[('foo', ','), ('bar', ',\\n'), ('\"hihi\"', ','), ('\"hi\\nhi\"', ''), ('', '')]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Replace just the field instances of '\\n' with ''."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [ field.replace('\\n','') + sep for field,sep in m ]\n['foo,', 'bar,\\n', '\"hihi\",', '\"hihi\"', '']\n</code>\n</pre>\n", "senID": 4}, {"text": ["Reassemble the resulting stuff (if that's really the point."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"\".join(_)\n'foo,bar,\\n\"hihi\",\"hihi\"'\n</code>\n</pre>\n", "senID": 6}]]