[[{"text": ["There is no reason to use replace for this, Python comes with batteries included. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What you have is a encoded string (using the string_escape encoding) and you want to decode it:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "string_escape", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = r\"Escaped\\nNewline\"\n&gt;&gt;&gt; print s\nEscaped\\nNewline\n&gt;&gt;&gt; s.decode('string_escape')\n'Escaped\\nNewline'\n&gt;&gt;&gt; print s.decode('string_escape')\nEscaped\nNewline\n&gt;&gt;&gt; \"a\\\\nb\".decode('string_escape')\n'a\\nb'\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You are missing, that \\ is the escape character."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Look here: http://docs.python.org/reference/lexical_analysis.html\nat 2.4.1 \"Escape Sequence\""], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/reference/lexical_analysis.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/lexical_analysis.html"}]}, {"text": ["Most importantly \\n is a newline character.", "And \\\\ is an escaped escape character :D"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 'a\\\\\\\\nb'\n&gt;&gt;&gt; a\n'a\\\\\\\\nb'\n&gt;&gt;&gt; print a\na\\\\nb\n&gt;&gt;&gt; a.replace('\\\\\\\\', '\\\\')\n'a\\\\nb'\n&gt;&gt;&gt; print a.replace('\\\\\\\\', '\\\\')\na\\nb\n</code>\n</pre>\n", "senID": 3}], [{"text": ["It's because, even in \"raw\" strings (=strings with an r before the starting quote(s)), an unescaped escape character cannot be the last character in the string.", "This should work instead:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "r", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n '\\\\ '[0]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Python string literals, backslash is an escape character.", "This is also true when the interactive prompt shows you the value of a string.", "It will give you the literal code representation of the string.", "Use the print statement to see what the string actually looks like."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["This example shows the difference:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; '\\\\'\n'\\\\'\n&gt;&gt;&gt; print '\\\\'\n\\\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n r'a\\\\nb'.replace('\\\\\\\\', '\\\\')\n</code>\n</pre>\n", "senID": 0}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 'a\\nb'.replace('\\n', '\\\\n')\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Your original string, a = 'a\\\\nb' does not actually have two '\\' characters, the first one is an escape for the latter.", "If you do, print a, you'll see that you actually have only one '\\' character."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "a = 'a\\\\nb'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'\\'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "print a", "childNum": 0, "tag": "code", "childList": []}, {"text": "'\\'", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 'a\\\\nb'\n&gt;&gt;&gt; print a\na\\nb\n</code>\n</pre>\n", "senID": 1}, {"text": ["If, however, what you mean is to interpret the '\\n' as a newline character, without escaping the slash, then:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "'\\n'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; b = a.replace('\\\\n', '\\n')\n&gt;&gt;&gt; b\n'a\\nb'\n&gt;&gt;&gt; print b\na\nb\n</code>\n</pre>\n", "senID": 3}]]