[[{"code": "<pre>\n<code>\n lines = [i for i in open(file_path) if i[:-1]]\n</code>\n</pre>\n", "senID": 0}, {"text": ["If writing to another file is a requirement, you can use file_object.writelines(lines) with opening file for writing."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "file_object.writelines(lines)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The following isn't a one-liner, but does the job and is easy to read:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for line in open(filename):\n  line = line.rstrip()\n  if line != '':\n    print line\n</code>\n</pre>\n", "senID": 1}, {"text": ["This prints the result to standard output.", "It is trivial to modify this code to print elsewhere."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you insist, it is fairly easy to convert it to a one-liner:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ''.join(l for l in open(filename) if l.rstrip())\n</code>\n</pre>\n", "senID": 4}], [{"text": ["filter(bool, map(lambda x:x.rstrip(), open(filename)))"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filter(bool, map(lambda x:x.rstrip(), open(filename)))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you need a real one-liner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n python -c 'import sys; print \"\".join(l for l in sys.stdin.readlines() if l.strip()),'\n</code>\n</pre>\n", "senID": 1}, {"text": ["which can be used in your shell as:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n cat input.txt | python -c 'import sys; print \"\".join(l for l in sys.stdin.readlines() if l.strip()),' &gt; output.txt\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you want to process large files without worrying about out-of-memory errors, you should do it in a loop:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\n\nfor line in sys.stdin:\n    if line[:-1]:\n        sys.stdout.write(line)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If must have a one-liner, here's the same code in one line:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for _ in (sys.stdout.write(line) for line in sys.stdin if line[:-1]): pass\n</code>\n</pre>\n", "senID": 3}, {"text": ["EDITED to include agf's hint."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "EDITED", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n os.system(\"grep -v '^$' file_name &gt; file_name\")\n</code>\n</pre>\n", "senID": 0}], [{"text": ["A loopless one:  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n open('dst','w').write(re.sub('\\n\\s*\\n+','\\n', open('src').read()))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The fileinput module has the 'inplace' option for the express purpose of editing files in one step.", "While the file is being read, standard output is temporarily redirected to the input file."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "fileinput", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/fileinput.html"}]}, {"text": ["Here's a one-liner that will do what you want (done in bash):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n python -c $'import sys, re, fileinput\\nfor line in fileinput.input(\"file_name\", inplace=True): sys.stdout.write( re.sub(r\"^\\\\n$\", \"\", line) )'\n</code>\n</pre>\n", "senID": 2}]]