[[{"text": ["Instead of using regexes you could just (for example) separate your string withstr.partition(separator) like this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "withstr.partition(separator)", "tag": "a", "pos": 0, "childList": [{"text": "str.partition(separator)", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html"}, {"text": "str.partition(separator)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n mystring =  \"hi my name is ryan, and i am new to python and would like to learn more\"\nkeyword = 'name'\nbefor_keyowrd, keyword, after_keyword = mystring.partition('keyword')\n# before_keyword = 'hi my '\n# keyword = name\n# after_keyword = ' is ryan, and i am new to python and would like to learn more'\n</code>\n</pre>\n", "senID": 1}, {"text": ["You have to deal with the needless whitespaces separately, though."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Instead of \"^name: (\\w+)\" use:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"^name: (\\w+)\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n \"^name:(.*)\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could simply do"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["s = \"hi my name is ryan, and i am new to python and would like to learn more\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["s.split('name')"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This will split your string and return a list like this ['hi my', 'is ryan, and i am new to python and would like to learn more']"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["depending on what you want to do this may help or not."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Your example will not work, but as I understand the idea:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n regexp = re.compile(\"name(.*)$\")\nprint regexp.search(s).group(1)\n# prints \" is ryan, and i am new to python and would like to learn more\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will print all after \"name\" and till end of the line."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["What you have used regarding your output:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.search(\"name (\\w+)\", s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["What you have to use (match all):"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "match all", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n re.search(\"name (.*)\", s)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["An other alternative..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n   m = re.search('(?&lt;=name)(.*)', s)\n   print m.groups()\n</code>\n</pre>\n", "senID": 1}]]