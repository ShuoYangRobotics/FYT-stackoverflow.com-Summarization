[[{"text": ["Because python supports some algebraic forms, you could do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n eval(\"1 + 1\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["But this allows the input to execute about anything defined in your env:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n eval(\"__import__('sys').exit(1)\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["Also, if you want to support something python doesn't support, the approach fails:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n x\u00b3 + y\u00b2 + c\n----------- = 0\n     z\n</code>\n</pre>\n", "senID": 5}, {"text": ["Instead of doing this, you can implement a tokenizer and a parser with ply.", "Evaluating a thing like '1 + 1' ought not take more than ten lines or so."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "ply", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/ply/"}]}, {"text": ["You could also implement the tokenizer and the parser by hand.", "Read about LL and LR parsers.", "Before attempting this it's also better to learn using parser generators first."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["If you are receiving an expression as a string you'll need to parse it into its operators and operands and then process the resulting tree.", "This isn't a python problem per se.", "but a general issue of how to deal with mathematical expressions delivered as strings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A quick google reveals a bunch of lexical parsers for python.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Don't writing your own parser unless you want to learn how to write a parser.", "As already mentioned in the comments by @J.F.", "Sebastian, I would suggest a full-on computer algebra system (CAS) like SAGE.", "It will handle mathematical statements much more complicated than 1+1 :)"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "computer algebra system (CAS)", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Computer_algebra_system"}, {"text": "SAGE", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.sagemath.org/"}, {"text": "much", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}]}], [{"text": ["Perhaps eval is what you're after?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; eval('1+1')\n2\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Read about the input function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "input", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#input"}]}], [{"text": ["You can take advantage of Python's own evaluation capabilities.", "However, blind use of eval() is a very dangerous, since somebody can trick your program into:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n eval( (__import__(\"os\").system(\"rm important_file\") or 1) + 1)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The correct way to use eval is with the following receipe, which will make sure nothing dangerous is contained in the expression that you are evaluating:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://code.activestate.com/recipes/496746-restricted-safe-eval/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://code.activestate.com/recipes/496746-restricted-safe-eval/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/496746-restricted-safe-eval/"}]}]]