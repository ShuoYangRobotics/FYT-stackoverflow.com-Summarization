[[{"text": ["You could use django.utils.datastructures.DotExpandedDict with inputs named category.1, category.2 etc.", "to do something similar, but I don't really see why you would if you ever have to validate and redisplay the information you're receiving, when using a django.forms.Form will do everything for you - appropriate fields will call the getlist method for you and the prefix argument can be used to reuse the same form multiple times."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "django.utils.datastructures.DotExpandedDict", "tag": "a", "pos": 0, "childList": [{"text": "django.utils.datastructures.DotExpandedDict", "tag": "code"}], "childNum": 1, "href": "http://code.djangoproject.com/browser/django/trunk/django/utils/datastructures.py#L365"}, {"text": "django.utils.datastructures.DotExpandedDict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "getlist", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "prefix", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Hardly pretty, but it should get the job done:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\ndef getdict(d, pref):\n  r = re.compile(r'^%s\\[(.*)\\]$' % pref)\n  return dict((r.sub(r'\\1', k), v) for (k, v) in d.iteritems() if r.match(k))\n\nD = {\n  'foo[bar]': '123',\n  'foo[baz]': '456',\n  'quux': '789',\n}\n\nprint getdict(D, 'foo')\n# Returns: {'bar': '123', 'baz': '456'}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can do request.POST['namefromform'] - I take it this isn't what you're looking for?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "request.POST['namefromform']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Use request.POST.keys()"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "request.POST.keys()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Sorry, as far as I've found, getlist is all there is for what you want, but you could easily parse the request using request.POST.keys() and turn them into dictionaries."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "request.POST.keys()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I'm not a python expert but you might try"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for key,value in request.POST.iteritems() \n  doSomething....\n</code>\n</pre>\n", "senID": 1}], [{"text": ["django.utils.datastrctures has DotExpandedDict"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I have written fork of it, that parses dictionary by brackets.. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class BrExpandedDict(dict):\n    \"\"\"\n    A special dictionary constructor that takes a dictionary in which the keys\n    may contain brackets to specify inner dictionaries. It's confusing, but this\n    example should make sense.\n\n    &gt;&gt;&gt; d = BrExpandedDict({'person[1][firstname]': ['Simon'], \\\n            'person[1][lastname]': ['Willison'], \\\n            'person[2][firstname]': ['Adrian'], \\\n            'person[2][lastname]': ['Holovaty']})\n    &gt;&gt;&gt; d\n    {'person': {'1': {'lastname': ['Willison'], 'firstname': ['Simon']}, '2': {'lastname': ['Holovaty'], 'firstname': ['Adrian']}}}\n    &gt;&gt;&gt; d['person']\n    {'1': {'lastname': ['Willison'], 'firstname': ['Simon']}, '2': {'lastname': ['Holovaty'], 'firstname': ['Adrian']}}\n    &gt;&gt;&gt; d['person']['1']\n    {'lastname': ['Willison'], 'firstname': ['Simon']}\n\n    \"\"\"\n    def __init__(self, key_to_list_mapping):\n        for k, v in key_to_list_mapping.items():\n            current = self\n            k = k.replace(']', '')\n            bits = k.split('[')\n            for bit in bits[:-1]:\n                current = current.setdefault(bit, {})\n            # Now assign value to current position\n            try:\n                current[bits[-1]] = v\n            except TypeError: # Special-case if current isn't a dict.\n                current = {bits[-1]: v}\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n</code>\n</pre>\n", "senID": 2}]]