[[{"text": ["There's a whole Wikipedia page on just this problem, see:  http://en.wikipedia.org/wiki/Closest_pair_of_points"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://en.wikipedia.org/wiki/Closest_pair_of_points", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Closest_pair_of_points"}]}, {"text": ["Executive summary:  you can achieve O(n log n) with a recursive divide and conquer algorithm (outlined on the Wiki page, above)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Try scipy.spatial.distance.pdist(myArr).", "This will give you a condensed distance matrix.", "You can use argmin on it and find the index of the smallest value.", "This can be converted into the pair information."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "scipy.spatial.distance.pdist(myArr)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "argmin", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["There is a scipy function pdist that will get you the pairwise distances between points in an array in a fairly efficient manner:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pdist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["http://docs.scipy.org/doc/scipy/reference/spatial.distance.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.scipy.org/doc/scipy/reference/spatial.distance.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.scipy.org/doc/scipy/reference/spatial.distance.html"}]}, {"text": ["that outputs the N*(N-1)/2 unique pairs (since r_ij == r_ji).", "You can then search on the minimum value and avoid the whole loop mess in your code. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You could take advantage of the latest version of SciPy's (v0.9) Delaunay triangulation tools.", "You can be sure that the closest two points will be an edge of a simplex in the triangulation, which is a much smaller subset of pairs than doing every combination.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's the code (updated for general N-D):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import numpy\nfrom scipy import spatial\n\ndef closest_pts(pts):\n    # set up the triangluataion\n    # let Delaunay do the heavy lifting\n    mesh = spatial.Delaunay(pts)\n\n    # TODO: eliminate reduncant edges (numpy.unique?)\n    edges = numpy.vstack((mesh.vertices[:,:dim], mesh.vertices[:,-dim:]))\n\n    # the rest is easy\n    x = mesh.points[edges[:,0]]\n    y = mesh.points[edges[:,1]]\n\n    dists = numpy.sum((x-y)**2, 1)\n    idx = numpy.argmin(dists)\n\n    return edges[idx]\n    #print 'distance: ', dists[idx]\n    #print 'coords:\\n', pts[closest_verts]\n\ndim = 3\nN = 1000*dim\npts = numpy.random.random(N).reshape(N/dim, dim)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Seems closely O(n):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"src": "http://i.stack.imgur.com/OFDYR.png", "tag": "img", "senID": 4}], [{"text": ["Perhaps you could proceed along these lines:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In []: from scipy.spatial.distance import pdist as pd, squareform as sf\nIn []: m= 1234\nIn []: n= 123\nIn []: p= randn(m, n)\nIn []: d= sf(pd(p))\nIn []: a= arange(m)\nIn []: d[a, a]= d.max()\nIn []: where(d&lt; d.min()+ 1e-9)\nOut[]: (array([701, 730]), array([730, 701]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["With substantially more points you need to be able to somehow utilize the hierarchical structure of your clustering."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["How fast is it compared to just doing a nested loop and keeping track of the shortest pair?", "I think creating a huge cross array is what might be hurting you.", "Even O(n^2) is still pretty quick if you're only doing 2 dimensional points."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]