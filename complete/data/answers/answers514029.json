[[{"text": ["Use a regular expression:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re \ns = \"name[id]\"\nre.find(r\"\\[(.*?)\\]\", s).group(1) # = 'id'\n</code>\n</pre>\n", "senID": 1}, {"text": ["str.split() takes a string on which to split input.", "For instance:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "str.split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n \"i,split,on commas\".split(',') # = ['i', 'split', 'on commas']\n</code>\n</pre>\n", "senID": 3}, {"text": ["The re module also allows you to split by regular expression, which can be very useful, and I think is what you meant to do."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "very", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n import re\ns = \"name[id]\"\n\n# split by either a '[' or a ']'\nre.split('\\[|\\]', s) # = ['name', 'id', '']\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Either"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"name[id]\".split('[')[:-1] == \"id\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n \"name[id]\".split('[')[1].split(']')[0] == \"id\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n re.search(r'\\[(.*?)\\]',\"name[id]\").group(1) == \"id\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n re.split(r'[\\[\\]]',\"name[id]\")[1] == \"id\"\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Yes, the delimiter is the whole string argument passed to split.", "So your example would only split a string like 'name[]id[]'."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Try eg.", "something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 'name[id]'.split('[', 1)[-1].split(']', 1)[0]\n\n'name[id]'.split('[', 1)[-1].rstrip(']')\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I'm not a fan of regex, but in cases like it often provides the best solution."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Triptych already recommended this, but I'd like to point out that the ?P&lt;> group assignment can be used to assign a match to a dictionary key:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; m = re.match(r'.*\\[(?P&lt;id&gt;\\w+)\\]', 'name[id]')\n&gt;&gt;&gt; result_dict = m.groupdict()\n&gt;&gt;&gt; result_dict\n{'id': 'id'}\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You don't actually need regular expressions for this.", "The .index() function and string slicing will work fine."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Say we have:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'name[id]'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s[s.index('[')+1:s.index(']')]\n'id'\n</code>\n</pre>\n", "senID": 4}, {"text": ["To me, this is easy to read: \"start one character after the [ and finish before the ]\"."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n def between_brackets(text):\n    return text.partition('[')[2].partition(']')[0]\n</code>\n</pre>\n", "senID": 0}, {"text": ["This will also work even if your string does not contain a [\u2026] construct, and it assumes an implied ] at the end in the case you have only a [ somewhere in the string."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "[\u2026]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "]", "childNum": 0, "tag": "code", "childList": []}, {"text": "[", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I'm new to python and this is an old question, but maybe this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["str.split('[')[1].strip(']')"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "str.split('[')[1].strip(']')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["str.split uses the entire parameter to split a string.", "Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n str.split(\"[\")[1].split(\"]\")[0]\n</code>\n</pre>\n", "senID": 1}]]