[[{"text": ["another not so intuitive implementation"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def vScale(xmax):\n    return ((xmax-1)/250+1)*250\n</code>\n</pre>\n", "senID": 1}, {"text": ["and here is the result"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [(x,vScale(x)) for x in xrange(0,1200,50)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["[(0, 0), (50, 250), (100, 250), (150, 250), (200, 250), (250, 250), (300, 500), (350, 500), (400, 500), (450, 500), (500, 500), (550, 750), (600, 750), (650, 750), (700, 750), (750, 750), (800, 1000), (850, 1000), (900, 1000), (950, 1000), (1000, 1000), (1050, 1250), (1100, 1250), (1150, 1250)]"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "[(0, 0), (50, 250), (100, 250), (150, 250), (200, 250), (250, 250), (300, 500), (350, 500), (400, 500), (450, 500), (500, 500), (550, 750), (600, 750), (650, 750), (700, 750), (750, 750), (800, 1000), (850, 1000), (900, 1000), (950, 1000), (1000, 1000), (1050, 1250), (1100, 1250), (1150, 1250)]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["And yet another implementation"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n limits=[0,250,500,750,1000]\nymax=limits[bisect.bisect_right(limits,xmax-1)]\n</code>\n</pre>\n", "senID": 6}, {"text": ["Add one more to the bouquet"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def vScale(xmax):\n    return [250,500,750,1000][(xmax-1)/250]\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Please don't call a variable max, that's a builtin function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "max", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if 0 &lt; xmax &lt;= 250:\n    ymax = 250\nelif xmax &lt;= 500:\n    ymax = 500\nelif xmax &lt;= 750:\n    ymax = 750\nelif xmax &lt;= 1000:\n    ymax = 1000\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that Python allows comparisons of the form x &lt; y &lt; z with the meaning x &lt; y and y &lt; z."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "x &lt; y &lt; z", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x &lt; y and y &lt; z", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can simplify it still more:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if mymax &lt; 250:\n    ymax = 250\nelif mymax &lt; 500:\n    ymax = 500\nelif mymax &lt; 750:\n    ymax = 750\nelse:\n    ymax = 1000\n</code>\n</pre>\n", "senID": 1}, {"text": ["and in a more generic way:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mymax = 633\n&gt;&gt;&gt; limits = [250, 500, 750, 1000]\n&gt;&gt;&gt; for m in limits:\n...     if mymax &lt; m:\n...         ymax = m\n...         break\n...         \n&gt;&gt;&gt; ymax\n750\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The following is pretty concise:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n min(th for th in (250, 500, 750, 1000) if val &lt;= th)\n</code>\n</pre>\n", "senID": 1}, {"text": ["where val is the variable you call max (I've renamed it to avoid shadowing the builtin)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "val", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "max", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The (250, 500, 750, 1000) can be replaced with any iterable (or even a generator)."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "(250, 500, 750, 1000)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You could use a for loop:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range(4):\n    if 250*i &lt; max &lt;= 250*(i+1):\n        max = 250*(i+1)\n        break\n</code>\n</pre>\n", "senID": 1}, {"text": ["(although agree with others that the variable probably shouldn't be called \"max\")"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["See this answer: how to determine a correct domain for a range of numbers for drawing a line-graph?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "how to determine a correct domain for a range of numbers for drawing a line-graph?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/a/8605998/957595"}]}]]