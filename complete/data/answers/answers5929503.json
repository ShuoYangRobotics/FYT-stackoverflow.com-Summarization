[[{"text": ["Just loop over the list, and assign according to the value of month."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n total_items = [0]*12\nfor d in q:\n  month = int(d['month'], 10)\n  total_items[month-1] = d['total_item']\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n result = [0]*12\nfor r in q:\n    result[int(r['month'])-1] = r['total_item']\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Use this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyDict(dict):\n    def __missing__(self, key):\n        self[key] = 0\n        return self[key]\n</code>\n</pre>\n", "senID": 1}, {"text": ["And then you can use this object instead of a normal dictionary.", "It acts just like it, but when you access an item that doesn't exist, it will create it with a value of 0."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; months = [0] * 12\n&gt;&gt;&gt; for r in q: months[int(r['month'])-1] = r['total_item']\n&gt;&gt;&gt; months\n[0, 3, 1, 1, 1, 5, 6, 6, 0, 1, 1, 1]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["And one more way to do it ... map existing months to their total_item values and then use dict.get() with a default of 0:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "total_item", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict.get()", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n nitems = dict((int(x['month']), x['total_item']) for x in q)\nresult = [nitems.get(i, 0) for i in range(1, 13)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Perhaps you might want to use scikits.timeseries:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://pytseries.sourceforge.net/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pytseries.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pytseries.sourceforge.net/"}]}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import scikits.timeseries as TS\naDate = TS.Date('M', '2010-01-01')\nmyTS = TS.time_series(myData, start_date = aDate, freq = 'M')\n</code>\n</pre>\n", "senID": 3}, {"text": ["From there you can fill missing values with zeros and export (I believe using myTS.fill(0))."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["A shorter approach (Python \u2265 2.7 because of the dict comprehension):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d={int(i[\"month\"]):i[\"total_item\"] for i in q} #create a easier to use dict\n&gt;&gt;&gt; d\n{2: 3, 3: 1, 5: 1, 6: 5, 7: 6, 10: 1, 12: 1}\n&gt;&gt;&gt; [d.get(i,0) for i in range(1,13)] #d.get(i,0) returns 0 if i not in dict\n[0, 3, 1, 0, 1, 5, 6, 0, 0, 1, 0, 1]\n</code>\n</pre>\n", "senID": 1}]]