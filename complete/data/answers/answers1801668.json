[[{"text": ["It can be done with list comprehensions"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [x.lower() for x in [\"A\",\"B\",\"C\"]]\n['a', 'b', 'c']\n&gt;&gt;&gt; [x.upper() for x in [\"a\",\"b\",\"c\"]]\n['A', 'B', 'C']\n</code>\n</pre>\n", "senID": 1}, {"text": ["or with map function"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; map(lambda x:x.lower(),[\"A\",\"B\",\"C\"])\n['a', 'b', 'c']\n&gt;&gt;&gt; map(lambda x:x.upper(),[\"a\",\"b\",\"c\"])\n['A', 'B', 'C']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Besides being easier to read (for many people), list comprehensions win the speed race, too:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ python2.6 -m timeit '[x.lower() for x in [\"A\",\"B\",\"C\"]]'\n1000000 loops, best of 3: 1.03 usec per loop\n$ python2.6 -m timeit '[x.upper() for x in [\"a\",\"b\",\"c\"]]'\n1000000 loops, best of 3: 1.04 usec per loop\n\n$ python2.6 -m timeit 'map(str.lower,[\"A\",\"B\",\"C\"])'\n1000000 loops, best of 3: 1.44 usec per loop\n$ python2.6 -m timeit 'map(str.upper,[\"a\",\"b\",\"c\"])'\n1000000 loops, best of 3: 1.44 usec per loop\n\n$ python2.6 -m timeit 'map(lambda x:x.lower(),[\"A\",\"B\",\"C\"])'\n1000000 loops, best of 3: 1.87 usec per loop\n$ python2.6 -m timeit 'map(lambda x:x.upper(),[\"a\",\"b\",\"c\"])'\n1000000 loops, best of 3: 1.87 usec per loop\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; map(str.lower,[\"A\",\"B\",\"C\"])\n['a', 'b', 'c']\n</code>\n</pre>\n", "senID": 0}], [{"text": ["List comprehensions is how I'd do it.", "This snippet below shows how to convert a list to all upper case then back to lower:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ python\nPython 2.5.2 (r252:60911, Dec  2 2008, 09:26:14)\n[GCC 3.4.4 (cygming special, gdc 0.12, using dmd 0.125)] on cygwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n&gt;&gt;&gt; list = [\"one\", \"two\", \"three\"]\n&gt;&gt;&gt; list\n['one', 'two', 'three']\n\n&gt;&gt;&gt; list = [element.upper() for element in list]\n&gt;&gt;&gt; list\n['ONE', 'TWO', 'THREE']\n\n&gt;&gt;&gt; list = [element.lower() for element in list]\n&gt;&gt;&gt; list\n['one', 'two', 'three']\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n mylist = ['Mixed Case One', 'Mixed Case Two', 'Mixed Three']\nprint map(lambda x: x.lower(), mylist)\nprint map(lambda x: x.upper(), mylist)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["For this sample the comprehension is fastest"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n$ python -m timeit -s 's=[\"one\",\"two\",\"three\"]*1000' '[x.upper for x in s]'\n1000 loops, best of 3: 809 usec per loop\n\n$ python -m timeit -s 's=[\"one\",\"two\",\"three\"]*1000' 'map(str.upper,s)'\n1000 loops, best of 3: 1.12 msec per loop\n\n$ python -m timeit -s 's=[\"one\",\"two\",\"three\"]*1000' 'map(lambda x:x.upper(),s)'\n1000 loops, best of 3: 1.77 msec per loop\n</pre>\n", "senID": 1}], [{"text": ["Depending on your inputstream there might be special cases to look for.", "One that I know of is German \"\u00df\" for which there is no uppercase letter.", "Its rendered to an \"SS\" in uppercase."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]