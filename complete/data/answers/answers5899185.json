[[{"text": ["Try this approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Neuron(object):\n\n    def __init__(self, **kwargs):\n        prop_defaults = {\n            \"num_axon_segments\": 0, \n            \"apical_bifibrications\": \"fancy default\",\n            ...\n        }\n\n        for (prop, default) in prop_defaults.iteritems():\n            setattr(self, prop, kwargs.get(prop, default))\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can then create a Neuron like this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Neuron", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n n = Neuron(apical_bifibrications=\"special value\")\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You could perhaps use a Python\"dict\" object ?", "http://docs.python.org/tutorial/datastructures.html#dictionaries"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/tutorial/datastructures.html#dictionaries", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#dictionaries"}]}], [{"text": ["Having so many parameters suggests that the class is probably doing too many things."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I suggest that you want to divide your class into several classes, each of which take some of your parameters.", "That way each class is simpler and won't take so many parameters."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Without knowing more about your code, I can't say exactly how you should split it up."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'd say there is nothing wrong with this approach - if you need 15 parameters to model something, you need 15 parameters.", "And if there's no suitable default value, you have to pass in all 15 parameters when creating an object.", "Otherwise, you could just set the default and change it later via a setter or directly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Another approach is to create subclasses for certain common kinds of neurons (in your example) and provide good defaults for certain values, or derive the values from other parameters."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Or you could encapsulate parts of the neuron in separate classes and reuse these parts for the actual neurons you model.", "I.e., you could write separate classes for modeling a synapse, an axon, the soma, etc."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You could create a class for your parameters."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Instead passing a bunch of parameters, you pass one class."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["could you supply some example code of what you are working on?", "It would help to get an idea of what you are doing and get help to you sooner."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If it's just the arguments you are passing to the class that make it long, you don't have to put it all in init.", "You can set the parameters after you create the class, or pass a dictionary/class full of the parameters as an argument."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class MyClass(object):\n\n    def __init__(self, **kwargs):\n        arg1 = None\n        arg2 = None\n        arg3 = None\n\n        for (key, value) in kwargs.iteritems():\n            if hasattr(self, key):\n                setattr(self, key, value)\n\nif __name__ == \"__main__\":\n\n    a_class = MyClass()\n    a_class.arg1 = \"A string\"\n    a_class.arg2 = 105\n    a_class.arg3 = [\"List\", 100, 50.4]\n\n    b_class = MyClass(arg1 = \"Astring\", arg2 = 105, arg3 = [\"List\", 100, 50.4])\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Can you give a more detailed use case ?", "Maybe a prototype pattern will work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If there are some similarities in groups of objects, a prototype pattern might help.", "Do you have a lot of cases where one population of neurons is just like another except different in some way ?", "( i.e.", "rather than having a small number of discrete classes,\nyou have a large number of classes that slightly differ from each other.", ") "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Python is a classed based language, but just as you can simulate class based \nprogramming in a prototype based language like Javascript, you can simulate \nprototypes by giving your class a CLONE method, that creates a new object and\npopulates its ivars from the parent.", "Write the clone method so that keyword parameters\npassed to it override the \"inherited\"  parameters, so you can call it with something\nlike: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n new_neuron = old_neuron.clone( branching_length=n1, branching_randomness=r2 )\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I have never had to deal with this situation, or this topic.", "Your description implies to me that you may find, as you develop the design, that there are a number of additional classes that will become relevant - compartment is the most obvious.", "If these do emerge as classes in their own right, it is probable that some of your parameters become parameters of these additional classes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["After looking over your code and realizing I have no idea how any of those parameters relate to each other (soley because of my lack of knowledge on the subject of neuroscience) I would point you to a very good book on object oriented design.", "Building Skills in Object Oriented Design by Steven F. Lott is an excellent read and I think would help you, and anyone else in laying out object oriented programs."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It is released under the Creative Commons License, so is free for you to use, here is a link of it in PDF format http://homepage.mac.com/s_lott/books/oodesign/build-python/latex/BuildingSkillsinOODesign.pdf"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://homepage.mac.com/s_lott/books/oodesign/build-python/latex/BuildingSkillsinOODesign.pdf", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://homepage.mac.com/s_lott/books/oodesign/build-python/latex/BuildingSkillsinOODesign.pdf"}]}, {"text": ["I think your problem boils down to the overall design of your classes.", "Sometimes, though very rarely, you need a whole lot of arguments to initialize, and most of the responses here have detailed other ways of initialization, but in a lot of cases you can break the class up into more easier to handle and less cumbersome classes."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]