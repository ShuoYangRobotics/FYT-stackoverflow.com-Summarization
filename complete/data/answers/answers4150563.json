[[{"text": ["You only need to go to the square root of the input number to get all the factors (not as far as half the number, as suggested elsewhere).", "For example, 24 has factors 1, 2, 3, 4, 6, 8, 12, 24.  sqrt(24) is approx 4.9.", "Check 1 and also get 24, check 2 and also get 12, check 3 and also get 8, check 4 and also get 6.", "Since 5 > 4.9, no need to check it.", "(Yes, I know 24 isn't the best example as all whole numbers less than sqrt(24) are factors of 24."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n factors = set()\nfor i in xrange(math.floor(math.sqrt(x))+1):\n    if x % i == 0:\n        factors.add(i)\n        factors.add(x/i)\nprint factors\n</code>\n</pre>\n", "senID": 1}, {"text": ["There are some really complicated ways to do better for large numbers, but this should get you a decent runtime improvement.", "Depending on your application, caching could also save you a lot of time."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Use for loops, for starters.", "Then, let Python increment for you, and get rid of the unnecessary rem variable.", "This code does exactly the same as your code, except in a \"Pythonic\" way."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "rem", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n num = input()\nfor x in xrange(1, num):\n    if (num % x) == 0:\n        print fact\n</code>\n</pre>\n", "senID": 1}, {"text": ["xrange(x, y) returns a generator for all integers from x up to, but not including y."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "xrange(x, y)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["So that prints out all the factors of a number?", "The first obvious optimisation is that you could quit when fact*2 is greater than num.", "Anything greater than half of num can't be a factor.", "That's half the work thrown out instantly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The second is that you'd be better searching for the prime factorisation and deriving all the possible factors from that.", "There are a bunch of really smart algorithms for that sort of thing."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "really smart algorithms", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Integer_factorization"}]}], [{"text": ["Once you get halfway there (once fact>num/2), your not going to discover any new numbers as the numbers above num/2 can be discovered by calculating num/fact for each one (this can also be used to easily print each number with its pair)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The following code should cust the time down by a few seconds on every calculation and cut it in half where num is odd.", "Hopefully you can follow it, if not, ask.", "I'll add more if I think of something later."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def even(num):\n    '''Even numbers can be divided by odd numbers, so test them all'''\n    fact=0\n    while fact&lt;num/2:\n         fact+=1\n         rem=num % fact\n         if rem == 0:\n              print '%s and %s'%(fact,num/fact)\ndef odd(num):\n    '''Odd numbers can't be divided by even numbers, so why try?'''\n    fact=-1\n    while fact&lt;num/2:\n         fact+=2\n         rem=num % fact\n         if rem == 0:\n              print '%s and %s'%(fact,num/fact)\nwhile True:\n    num=input(':')\n    if  str(num)[-1] in '13579':\n        odd(num)\n    else:\n        even(num)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Research integer factorization methods."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "integer factorization methods", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Integer_factorization"}]}], [{"text": ["Yes.", "Use a quantum computer"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "quantum computer", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Shor%27s_algorithm"}]}], [{"text": ["Unfortunately in Python, the divmod operation is implemented as a built-in function.", "Despite hardware integer division often producing the quotient and the remainder simultaneously, no non-assembly language that I'm aware of has implemented a /% or //% basic operator."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "/%", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "//%", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So: the following is a better brute-force algorithm if you count machine operations.", "It gets all factors in O(sqrt(N)) time without having to calculate sqrt(N) -- look, Mum, no floating point!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # even number\n\nfact = 0\nwhile 1:\n    fact += 1\n    fact2, rem = divmod(num, fact)\n    if not rem:\n        yield fact\n        yield fact2\n    if fact &gt;= fact2 - 1:\n        # fact &gt;= math.sqrt(num)\n        break\n</code>\n</pre>\n", "senID": 2}]]