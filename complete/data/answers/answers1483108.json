[[{"code": "<pre>\n<code>\n [^.]*\\.?[^.]*$\n</code>\n</pre>\n", "senID": 0}, {"text": ["And be sure to match, don't search"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "match", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "search", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dot = re.compile(\"[^.]*\\.[^.]*$\")\n&gt;&gt;&gt; dot.match(\"fooooooooooooo.bar\")\n&lt;_sre.SRE_Match object at 0xb7651838&gt;\n&gt;&gt;&gt; dot.match(\"fooooooooooooo.bar.sad\") is None\nTrue\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["Edit:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["If you consider only integers and decimals, it's even easier:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def valid(s):\n    return re.match('[0-9]+(\\.[0-9]*)?$', s) is not None\n\nassert valid(\"42\")\nassert valid(\"13.37\")\nassert valid(\"1.\")\nassert not valid(\"1.2.3.4\")\nassert not valid(\"abcd\")\n</code>\n</pre>\n", "senID": 5}], [{"text": ["No regexp is needed, see str.count():"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str.count()", "tag": "a", "pos": 0, "childList": [{"text": "str.count()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#str.count"}, {"text": "str.count()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"A.B.C.D\".count(\".\")\n3\n&gt;&gt;&gt; \"A/B.C/D\".count(\".\")\n1\n&gt;&gt;&gt; \"A/B.C/D\".count(\".\") == 1\nTrue\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.search('^[^.]*\\.?[^.]*$', 'this.is') != None\n\n&gt;&gt;&gt; re.search('^[^.]*\\.?[^.]*$', 'thisis') != None\nTrue\n&gt;&gt;&gt; re.search('^[^.]*\\.?[^.]*$', 'this.is') != None\nTrue\n&gt;&gt;&gt; re.search('^[^.]*\\.?[^.]*$', 'this..is') != None\nFalse\n</code>\n</pre>\n", "senID": 1}, {"text": ["(Matches period zero or one times."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["While period is special char it must be escaped.", "So \"\\.+\" should work."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Use '?", "' instead of '+' to match one or zero repetitions.", "Have a look at: re \u2014 Regular expression operations"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "re \u2014 Regular expression operations", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}], [{"text": ["If the period should exist only once in the entire string, then use the ?", "operator:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "?", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ^[^.]*\\.?[^.]*$\n</code>\n</pre>\n", "senID": 1}, {"text": ["Breaking this down:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["As an aside, personally I wouldn't use a regular expression for this (unless I was checking other aspects of the string for validity too).", "I would just use the count function."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Why do you need to check?", "If you have a number in a string, I now guess you will want to handle it as a number soon.", "Perhaps you can do this without Looking Before You Leap:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Looking Before You Leap", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n  value = float(input_str)\nexcept ValueError:\n  ...\nelse:\n  ...\n</code>\n</pre>\n", "senID": 1}]]