[[{"text": ["Maybe try list comprehension"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "list comprehension", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [x.lower() for x in line]\n</code>\n</pre>\n", "senID": 1}, {"text": ["will return a list with the words lowered.", "If you want to omit spaces:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [x.lower() for x in line if x.strip() != '']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Something more compact maybe:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = \"I AM A DEVELOPER\"\n\n&gt;&gt;&gt; a.lower().split()\n['i', 'am', 'a', 'developer']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I don't know about speed, but this doesn't do what you think it does:  for word in line.lower().", "It yields you characters, not words."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "for word in line.lower()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As long as you are calling lower and append for each word, I don't think it really makes any difference the order in which you call them."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "lower", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "append", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["My preference is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n words = line.lower().split()\n</code>\n</pre>\n", "senID": 1}, {"text": ["this is better than:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n words = [word.lower() for word in line.split()]\n</code>\n</pre>\n", "senID": 3}, {"text": ["If n is the number of words, the first does n + 1 allocations, whereas the second does 2n."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Since list comprehensions have already been pointed out in another answer, here's one other approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lst=map(lambda x: x.lower(),line)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, please try not to use variable names like list that are already used in Python.", "That's really bad form and would cause a lot of confusion in any non-trivial project."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]