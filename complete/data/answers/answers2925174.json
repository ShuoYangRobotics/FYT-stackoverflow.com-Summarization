[[{"text": ["No, Python does not support preprocessor macros like C. Your example isn't something you would need to do in Python though; you might consider providing a relevant example so people can suggest a Pythonic way to express what you need."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["While there does seem to be a library for python preprocessing called pypp, I am not entirely familiar with it.", "There really is no preprocessing capability for python built-in.", "Python code is translated into byte-code, there are no intermediate steps.", "If you are a beginner in python I would recommend avoiding pypp entirely."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pypp", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pypp/"}]}, {"text": ["The closest equivalent of macros might be to define a global function.", "The python equivalent to your C style macro might be:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import sys\nOBJWITHSIZE = lambda x: sys.getsizeof(x) / sys.getsizeof(x[0])\naList = [1, 2, 4, 5]\nsize = OBJWITHSIZE(aList)\nprint str(size)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note that you would rarely ever need to get the size of a python object as all allocation and deletion are handled for you in python unless you are doing something quite strange."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Instead of using a lambda function you could also do this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import sys\ndef getSize(x):\n   return sys.getsizeof(x) / sys.getsizeof(x[0])\n\nOBJWITHSIZE = getSize\naList = [1, 2, 4, 5]\nsize = OBJWITHSIZE(aList)\nprint str(size)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Which is essentially the same."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["As it has been previously mentioned, your example macro is redundant in python because you could simply write:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n aList = [1, 2, 4, 5]\nsize = len(aList)\nprint str(size)\n</code>\n</pre>\n", "senID": 8}], [{"text": ["This is not supported at the language level.", "In Python, you'd usually use a normal function or a normal variable where you might use a #define in C."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Answering the new question."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In your first python file (called, for example, first.py):"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "first.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import os\n\ndef replaceProgramFilesPath(filenameBr):\n  new_path = os.environ.get(\"PROGRAMFILES\") + chr(92)\n  return filenameBr.replace(\"&lt;ProgramFilesPath&gt;\", new_path)\n</code>\n</pre>\n", "senID": 2}, {"text": ["In the second python file (called, for example, second.py):"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "second.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from first import replaceProgramFilesPath\n# now replaceProgramFilesPath can be used in this script.\n</code>\n</pre>\n", "senID": 4}, {"text": ["Note that first.py will need to be in python's search path for modules or the same directory as second.py for you to be able to do the import in second.py."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "first.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "second.py", "childNum": 0, "tag": "code", "childList": []}, {"text": "second.py", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can do much more powerful things than C macros: you can do lisp macros!", "You will need to use the ast package however, which can transform any python code into another python code (in particular applying macros).", "It is, as lisp macros, much harder to use than C macros, require more knowledge about the language syntax itself, but they can make wonderful things."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ast", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/ast.html"}]}, {"text": ["You can see one example of a macro I've made that makes any function traceable: printing all variables when they are set and printing every line before it is executed.", "The specs go more in details."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "example of a macro", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/hyperellpiticpairingscrypto/source/browse/trunk/src/metaEnhance.py"}, {"text": "specs", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/hyperellpiticpairingscrypto/source/browse/trunk/test/MetaEnhanceTest.py"}]}], [{"text": ["Generally speaking if you want to convert string to python code, use eval.", "You rarely need eval in Python.", "There's a module somewhere in the standard library that can tell you a bit about an objects code (doesn't work in the interp), I've never used it directly.", "You can find stuff on comp.lang.python that explains it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As to 'C' macros which seem to be the real focus of your question."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["clears throat DO NOT USE C MACROS IN PYTHON CODE."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "clears throat", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Most uses of a 'CPP' macro in Python, can be accomplished  by writing a function.", "You may wish to get a book on higher order functions, in order to handle more complex cases.", "I personally like a book called Higher Order Perl (HOP), and although it is not Python based, most of the book covers language independent ideas -- and those ideas should be required learning for every programmer."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "higher order functions", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Higher_order_function"}]}, {"text": ["For all intents and purposes the only use of the C Pre Processor that you need in Python, that isn't quite provided out of box, is the ability to #define constants, which is often the wrong thing to do, even in C and C++."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Now implementing lisp macros in python, in a smart way and actually needing them... clears throat and sweeps under rug."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "clears throat and sweeps under rug", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Well, for the brave, there's Metapython:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.google.com/p/metapython/wiki/Tutorial"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/metapython/wiki/Tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/metapython/wiki/Tutorial"}]}, {"code": "<pre>\n<code>\n For instance, the following MetaPython code:\n\n$for i in range(3):\n    print $i\n\nwill expand to the following Python code:\n\nprint 0\nprint 1\nprint 2\n</code>\n</pre>\n", "senID": 2}, {"text": ["But if you have just started with Python, you probably won't need it.", "Just keep practicing the usual dynamic features (duck typing, callable objects, decorators, generators...) and you won't feel any need for C-style macros."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You can write this into the second file instead of replicating the code string"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"\"\"\nfrom firstFile import replaceProgramFilesPath\n\"\"\"\n</code>\n</pre>\n", "senID": 1}]]