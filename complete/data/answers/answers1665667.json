[[{"text": ["How about a list comprehension?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [5]: versions = [m.group(1) for m in [regex.match(lib) for lib in libs] if m] \nIn [6]: versions\nOut[6]: ['3.3.1', '3.2.0']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n versions = [m.group(1) for m in [regex.match(l) for l in libs] if m]\n</code>\n</pre>\n", "senID": 1}, {"text": ["I don't think it's very readable, though..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Maybe it's clearer done in two steps:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n matches = [regex.match(l) for l in line]\nversions = [m.group(1) for m in matches if m]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["One more one-liner just to show other ways (I've also cleaned regexp a bit):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n regex = re.compile(r'^libIce\\.so\\.([0-9]+\\.[0-9]+\\.[0-9]+)$')\nsum(map(regex.findall, libs), [])\n</code>\n</pre>\n", "senID": 1}, {"text": ["But note, that your original version is more readable than all suggestions.", "Is it worth to change?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["you don't really need to bother with regex for your simple case"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; libs = ['libIce.so.33', 'libIce.so.3.3.1', 'libIce.so.32', 'libIce.so.3.2.0']\n&gt;&gt;&gt; libs\n['libIce.so.33', 'libIce.so.3.3.1', 'libIce.so.32', 'libIce.so.3.2.0']\n&gt;&gt;&gt; for i in libs:\n...   print i.split(\"so.\")\n...\n['libIce.', '33']\n['libIce.', '3.3.1']\n['libIce.', '32']\n['libIce.', '3.2.0']\n&gt;&gt;&gt; for i in libs:\n...   print i.split(\"so.\")[-1]\n...\n33\n3.3.1\n32\n3.2.0\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Do further checking to get those with \"dots\"."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["There's nothing that isn't pythonic about using a standard for loop.", "However, you can use the map() function to generate a new list based on the results from a function run against each item in the list."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "map()", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.go4expert.com/forums/showthread.php?t=6251"}]}], [{"text": ["How about this one:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\ndef matches(regexp, list):\n    'Regexp, [str] -&gt; Iterable(Match or None)'\n    return (regexp.match(s) for s in list)\n\nlibs = ['libIce.so.33', 'libIce.so.3.3.1', 'libIce.so.32', 'libIce.so.3.2.0']\nregexp = re.compile('libIce.so\\.([0-9]+\\.[0-9]+\\.[0-9]+)')\nversions = [m.group(1) for m in matches(regexp, libs) if m is not None]\n\n&gt;&gt;&gt; print versions\n['3.3.1', '3.2.0']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One way I could think of was to combine 'map' and list comprehension.", "The solution looks as below:   "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"tag": "code", "senID": 1}, {"code": "<pre>\n<code>\n import re  \nlibs = ['libIce.so.33', 'libIce.so.3.3.1', 'libIce.so.32', 'libIce.so.3.2.0']  \nversions = []  \n\nregex = re.compile('libIce.so\\.([0-9]+\\.[0-9]+\\.[0-9]+)')  \n\ndef match(s):  \n    m = regex.match(s)  \n    if m:  \n        return m.group(1)  \n\nversions = [x for x in map(match,libs) if x]\n</code>\n</pre>\n", "senID": 2}, {"senID": 3}]]