[[{"text": ["You're viewing it as though both if char == '\"' and elif char == ',' and not quote were run."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "if char == '\"'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "elif char == ',' and not quote", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["However the if statement explicitly makes it so that only one will run."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Either, quote will be inverted OR the current value will get cut."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "current", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In the case where the current char is \", then the logic will be called to invert the quote flag.", "But the logic to cut the string will not run."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "quote", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["In the case where the current char is ,, then the logic for inverting the flag will NOT run, but the logic to cut the string will if the quote flag is not set."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": ",", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "quote", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["That is initializing current to the empty string, wiping out whatever it may have been set to before."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "current", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["As long as you are not inside quotes (ie.", "quote is False), when you see a ,, you have hit the end of the field.", "Whatever you have accumulated into current is the content of that field, so append it to retval and reset current to the empty string, ready for the next field."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "quote", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ",", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "current", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "retval", "childNum": 0, "tag": "code", "childList": []}, {"text": "current", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["That said, this looks like you're dealing with a .csv input.", "There is a csv module that can deal with this for you."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "csv module", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}], [{"text": ["current is reset to empty because in the case where you have encountered ',' and you are not under \"\" quotes you should interpret that as an end of a \"token\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is definitely not pythonic, for char in string makes me cringe and whoever wrote this code should have used regex."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "for char in string", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["What you're looking at is a condensed version of a Finite State Machine, used by most language parsing programs."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Finite State Machine", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Finite-state_machine"}]}, {"text": ["Let's see if I can't annotate it:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def mysplit (string):\n    # We start out at the beginning of the string NOT in between quotes\n    quote = False\n    # Hold each element that we split out\n    retval = []\n    # This variable holds  whatever the current item we're interested in is\n    # e.g: If we're in a quote, then it's everything (including commas)\n    # otherwise it's every UP UNTIL the next comma\n    current = \"\"\n    # Scan the string character by character\n    for char in string:\n        # We hit a quote, so turn on QUOTE SCANNING MODE!!!\n        # If we're in quote scanning mode, turn it off\n        if char == '\"':\n            quote = not quote\n        # We hit a comma, and we're not in quote scanning mode\n        elif char == ',' and not quote:\n            # We got what we want, let's put it in the return value\n            # and then reset our current item to nothing so we can prepare for the next item.\n            retval.append(current) \n            current = \"\" \n        else:\n            # Nothing special, let's just keep building up our current item\n            current += char\n    # We're done with all the characters, let's put together whatever we were working on when we ran out of characters\n    retval.append(current)\n    # Return it!\n    return retval\n</code>\n</pre>\n", "senID": 2}], [{"text": ["This is not the best code for splitting but it is pretty straight forward     "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 1 current = \"\"\n\n   # First you set current to empty string, the following line\n   # will loop through the string to be split and pull characters out of it\n   # one by one... setting 'char' to be the value of next character\n\n   2 for char in string:\n\n   # the following code will check if the line we are currently inside of the quote\n   # if otherwise it will add the current character to the the 'current' variable\n   # \n\n   3     if char == '\"':\n   4         quote = not quote\n   5     elif char == ',' and not quote:\n   6         retval.append(current) \n\n   ### if we see the comma, it will append whatever is accumulated in current to the \n   ### return result.\n   ### then you have to reset the value in the current to let the next word accumulate\n\n\n   7         current = \"\" #why do we cut current here? \n   8     else:\n   9         current += char\n\n   ### after the last char is seen, we still have left over characters in current which\n   ### we can just shove into the final result\n\n   10 retval.append(current)\n   11 return retval\n\n\n   Here is an example run:\n\n   Let string be  'a,bbb,ccc\n\n   Step  char  current   retval\n\n    1     a      a        {}\n    2     ,               {a}       ### Current is reset\n    3     b      b        {a}\n    4     b      bb       {a} \n    5     b      bbb      {a}\n    6     ,               {a,bbb}   ### Current is reset\n\n   and so on\n</code>\n</pre>\n", "senID": 1}], [{"text": ["OK you aren't quite there!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["good!", "so quote was set to the inverse of whatever it was previously.", "At the beginning of the prog, it was false, so when \" is seen, it becomes true.", "But vice versa, if it was True, and a quote is seen, it becomes false."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "\"", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["In other words, this line of the program changes quote from whatever is was before that line.", "It is called 'toggling'."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "quote", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This isn't quite right.", "not quote means \"only if quote is false\".", "This has nothing to do with whether it is 'set to its inverse'.", "No variable can be equal to its own inverse!", "it is like saying X=True and X=False - obviously nonsense."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "not quote", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "'set to its inverse'", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "No", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}, {"text": "X=True and X=False", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"text": ["quote is always either True or False - and nothing else!"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "quote", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So hopefully you can see now that, you are not between the quotes if you reach this line.", "the not quote ensures that you don't cut inside a quote, because not quote really means just that - not in a quote!"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "not quote", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "not quote", "childNum": 0, "tag": "code", "childList": []}, {"text": "not", "childNum": 0, "tag": "strong", "childList": []}]}]]