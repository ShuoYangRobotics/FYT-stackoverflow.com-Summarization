[[{"text": ["No need for regexes:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = 'Hello this is a mighty fine day today'\n' '.join('%s%sD'%('8' if len(w) &gt; 1 else '', '='*(len(w)-2)) for w in s.split())\n# '8===D 8==D 8D D 8====D 8==D 8=D 8===D'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: debugged ;) Thanks for the pointer @tg"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The question is asking for a re.sub one-liner, so here is one that does the job:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re.sub", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n In [1]: import re\n\nIn [2]: s = \"Hello this is a mighty fine day today\"\nIn [3]: print re.sub(r\"\\w+\", lambda x:(\"8\"+\"=\"*1000)[:len(x.group())-1]+\"D\", s)\n8===D 8==D 8D D 8====D 8==D 8=D 8===D\n</code>\n</pre>\n", "senID": 1}, {"text": ["For educational purposes only!", "8=D"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here is a re.sub oneliner as requested (split for clarity):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re \n\nprint re.sub( r'\\w(\\w?)(\\w*)', \\\n              lambda m: '8'*len(m.group(1)) + '='*len(m.group(2)) + 'D', \\\n              \"Hello this is a mighty fine day today\" )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's your one-liner (sorry, no regex):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for word in sentence.split(' '): print '8' + '=' * (len(word) - 2) + 'D',\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import re\n\nstring = \"Hello this is a mighty fine day today\"\n\ndef repl(matchobj):\n    word = matchobj.group()\n    return ('8' if len(word) &gt; 1 else '') + '=' * (len(word) - 2) + 'D'\n\nresult = re.sub(r'\\w+', repl, string)\n\nprint(result)\n</code>\n</pre>\n", "senID": 0}, {"text": ["This gives exactly what you specified (just 'D' for the one char case) and doesn't need to make a 1000 character string of '='s :P"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I don't think there is any reason to use regular expression as in the previous solutions.", "Try this instead:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def pen(string):\n    return ' '.join([(\"%s%s%s\"%('8','='*(len(word)-2),'D'))[-len(word):] \\\n         for word in string.split()])\n</code>\n</pre>\n", "senID": 1}, {"text": ["It seems to work much faster than one of the regex ones that I chose arbitrarily."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]