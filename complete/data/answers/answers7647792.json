[[{"text": ["You can use itertools.starmap"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools.starmap", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = itertools.starmap(lambda x,y: x+y, zip(itertools.repeat(x), y))\na = list(a)\n</code>\n</pre>\n", "senID": 1}, {"text": ["and you get your desired output."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["BTW, both itertools.imap and Python3's map will accept the following:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "itertools.imap", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n itertools.imap(lambda x,y: x+y, itertools.repeat(x), y)\n</code>\n</pre>\n", "senID": 4}, {"text": ["The default Python2's map will not stop at the end of y and will insert Nones..."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["But a comprehension is much better"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "much", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [x + num for num in y]\n</code>\n</pre>\n", "senID": 7}], [{"code": "<pre>\n<code>\n from itertools import repeat\n\nmap(lambda (x, y): x + y, zip(repeat(x), y))\n</code>\n</pre>\n", "senID": 0}, {"text": ["Update: for python3, I think this'll work:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "think", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n map(lambda xy: ''.join(xy), zip(repeat(x), y))\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Also you could use closure for this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x='a'\nf = lambda y: x+y\nmap(f, ['1', '2', '3', '4', '5'])\n&gt;&gt;&gt; ['a1', 'a2', 'a3', 'a4', 'a5']\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def prependConstant(x, y):\n  return map(lambda yel: x + yel, y)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n ['a' + x for x in y]\n</code>\n</pre>\n", "senID": 0}, {"text": ["or if you really need a callable:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def f(x, y):\n    return x + y\n\n[f('a', x) for x in y]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Do you have to use lambda?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x='a'\n&gt;&gt;&gt; y=['2','4','8','16']\n&gt;&gt;&gt; map(x.__add__, y)\n['a2', 'a4', 'a8', 'a16']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}]]