[[{"text": ["a += b is essentially the same as a = a + b, except that:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "a += b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a = a + b", "childNum": 0, "tag": "code", "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": [], "childNum": 0, "tag": "code", "senID": 1, "childList": []}, {"text": "In ", "tag": "none", "senID": 2}]}, {"text": ["http://docs.python.org/reference/simple_stmts.html#augmented-assignment-statements"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://docs.python.org/reference/simple_stmts.html#augmented-assignment-statements", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/simple_stmts.html#augmented-assignment-statements"}]}, {"tag": "hr", "senID": 4}, {"text": ["If this is the first time you encounter the += operator, you may wonder why it matters that it may modify the object in-place instead of building a new one.", "Here is an example:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "+=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # two variables referring to the same list\n&gt;&gt;&gt; list1 = []\n&gt;&gt;&gt; list2 = list1\n\n# += modifies the object pointed to by list1 and list2\n&gt;&gt;&gt; list1 += [0]\n&gt;&gt;&gt; list1, list2\n([0], [0])\n\n# + creates a new, independent object\n&gt;&gt;&gt; list1 = []\n&gt;&gt;&gt; list2 = list1\n&gt;&gt;&gt; list1 = list1 + [0]\n&gt;&gt;&gt; list1, list2\n([0], [])\n</code>\n</pre>\n", "senID": 6}], [{"code": "<pre>\n<code>\n a += b\n</code>\n</pre>\n", "senID": 0}, {"text": ["is in this case the same as"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "in this case", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = a + b\n</code>\n</pre>\n", "senID": 2}, {"text": ["In this case cnt += 1 means that cnt is increased by one."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Note that the code you pasted will loop indefinitely if cnt > 0 and len(aStr) > 1."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Edit: quote Carl Meyer: ``[..] the answer is misleadingly mostly correct.", "There is a subtle but very significant difference between + and +=, see Bastien's answer.", "''."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Carl Meyer", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/3207/carl-meyer"}, {"text": "Bastien's answer", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/823561/what-does-mean-in-python/823878#823878"}]}], [{"text": ["Google 'python += operator' leads you to http://docs.python.org/library/operator.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/operator.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/operator.html"}]}, {"text": ["Search for += once the page loads up for a more detailed answer."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["FYI: it looks like you might have an infinite loop in your example..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if cnt &gt; 0 and len(aStr) &gt; 1:\n    while cnt &gt; 0:                  \n        aStr = aStr[1:]+aStr[0]\n        cnt += 1\n</code>\n</pre>\n", "senID": 1}, {"tag": "ul", "num": 3, "lis": [{"text": "a condition of entering the loop is that ", "tag": "none", "senID": 2}, {"text": "the loop continues to run as long as ", "tag": "none", "senID": 3}, {"text": "each iteration of the loop increments ", "tag": "none", "senID": 4}]}, {"text": ["The net result is that cnt will always be greater than 0 and the loop will never exit."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "cnt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "always", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["+= is the in-place addition operator."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "+=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/operator.html#operator.iadd", "text": "in-place addition operator", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["It's the same as doing cnt = cnt + 1.", "For example:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "cnt = cnt + 1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; cnt = 0\n&gt;&gt;&gt; cnt += 2\n&gt;&gt;&gt; print cnt\n2\n&gt;&gt;&gt; cnt += 42\n&gt;&gt;&gt; print cnt\n44\n</code>\n</pre>\n", "senID": 2}, {"text": ["The operator is often used in a similar fashion to the ++ operator in C-ish languages, to increment a variable by one in a loop (i += 1)"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "++", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "i += 1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["There are similar operator for subtraction/multiplication/division/power and others:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n i -= 1 # same as i = i - 1\ni *= 2 # i = i * 2\ni /= 3 # i = i / 3\ni **= 4 # i = i ** 4\n</code>\n</pre>\n", "senID": 5}, {"text": ["The += operator also works on strings, for example:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "+=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"Hi\"\n&gt;&gt;&gt; s += \" there\"\n&gt;&gt;&gt; print s\nHi there\n</code>\n</pre>\n", "senID": 7}, {"text": ["People tend to recommend against doing this for performance reason, but for the most scripts this really isn't an issue.", "To quote from the \"Sequence Types\" docs:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "\"Sequence Types\" docs", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-buffer-xrange"}]}, {"text": ["The str.join() method refers to doing the following:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n mysentence = []\nfor x in range(100):\n    mysentence.append(\"test\")\n\" \".join(mysentence)\n</code>\n</pre>\n", "senID": 10}, {"text": ["..instead of the more obvious:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n mysentence = \"\"\nfor x in range(100):\n    mysentence += \" test\"\n</code>\n</pre>\n", "senID": 12}, {"text": ["The problem with the later is (aside from the leading-space), depending on the Python implementation, the Python interpreter will have to make a new copy of the string in memory every time you append (because strings are immutable), which will get progressively slower the longer the string to append is..", "Whereas appending to a list then joining it together into a string is a consistent speed (regardless of implementation)"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["If you're doing basic string manipulation, don't worry about it.", "If you see a loop which is basically just appending to a string, consider constructing an array, then \"\".join()'ing it."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "\"\".join()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["it means \"append \"THIS\" to the current value\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["a = \"hello\";\na += \" world\";"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["printing a now will output: \"hello world\""], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]