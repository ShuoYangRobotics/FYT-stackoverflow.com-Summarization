[[{"text": ["I didn't found any Python profanity library, so I made one myself."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Parameters"], "childNum": 0, "tag": "h2", "senID": 1, "childList": []}, {"text": ["A list of regular expressions that match a forbidden word.", "Please do not use \\b, it will be inserted depending on inside_words."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "\\b", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "inside_words", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Example:\n ['bad', 'un\\w+']"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "['bad', 'un\\w+']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Default: True"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Self-explanatory."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Default: \"$@%-?!"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "\"$@%-?!\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["A string with characters from which the replacements strings will be randomly generated."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Examples: \"%&amp;$?!", "\" or \"-\" etc."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "\"%&amp;$?!\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "\"-\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Default: True"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Controls if the entire string will be replaced or if the first and last chars will be kept."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Default: False"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "False", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Controls if words are searched inside other words too.", "Disabling this "], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Module source"], "childNum": 0, "tag": "h2", "senID": 13, "childList": []}, {"text": ["(examples at the end)"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n \"\"\"\nModule that provides a class that filters profanities\n\n\"\"\"\n\n__author__ = \"leoluk\"\n__version__ = '0.0.1'\n\nimport random\nimport re\n\nclass ProfanitiesFilter(object):\n    def __init__(self, filterlist, ignore_case=True, replacements=\"$@%-?!\", \n                 complete=True, inside_words=False):\n        \"\"\"\n        Inits the profanity filter.\n\n        filterlist -- a list of regular expressions that\n        matches words that are forbidden\n        ignore_case -- ignore capitalization\n        replacements -- string with characters to replace the forbidden word\n        complete -- completely remove the word or keep the first and last char?\n        inside_words -- search inside other words?\n\n        \"\"\"\n\n        self.badwords = filterlist\n        self.ignore_case = ignore_case\n        self.replacements = replacements\n        self.complete = complete\n        self.inside_words = inside_words\n\n    def _make_clean_word(self, length):\n        \"\"\"\n        Generates a random replacement string of a given length\n        using the chars in self.replacements.\n\n        \"\"\"\n        return ''.join([random.choice(self.replacements) for i in\n                  range(length)])\n\n    def __replacer(self, match):\n        value = match.group()\n        if self.complete:\n            return self._make_clean_word(len(value))\n        else:\n            return value[0]+self._make_clean_word(len(value)-2)+value[-1]\n\n    def clean(self, text):\n        \"\"\"Cleans a string from profanity.\"\"\"\n\n        regexp_insidewords = {\n            True: r'(%s)',\n            False: r'\\b(%s)\\b',\n            }\n\n        regexp = (regexp_insidewords[self.inside_words] % \n                  '|'.join(self.badwords))\n\n        r = re.compile(regexp, re.IGNORECASE if self.ignore_case else 0)\n\n        return r.sub(self.__replacer, text)\n\n\nif __name__ == '__main__':\n\n    f = ProfanitiesFilter(['bad', 'un\\w+'], replacements=\"-\")    \n    example = \"I am doing bad ungood badlike things.\"\n\n    print f.clean(example)\n    # Returns \"I am doing --- ------ badlike things.\"\n\n    f.inside_words = True    \n    print f.clean(example)\n    # Returns \"I am doing --- ------ ---like things.\"\n\n    f.complete = False    \n    print f.clean(example)\n    # Returns \"I am doing b-d u----d b-dlike things.\"\n</code>\n</pre>\n", "senID": 15}], [{"text": ["You can use Clean Speak from Inversoft to filter from Python via a WebService.", "Clean Speak is deployable software, so you can install it on your servers and don't have to worry about network hops or failures."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Clean Speak from Inversoft", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.inversoft.com/products/overview"}]}], [{"text": ["You could probably combine http://spambayes.sourceforge.net/ and http://www.cs.cmu.edu/~biglou/resources/bad-words.txt."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://spambayes.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://spambayes.sourceforge.net/"}, {"href": "http://www.cs.cmu.edu/~biglou/resources/bad-words.txt", "text": "http://www.cs.cmu.edu/~biglou/resources/bad-words.txt", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Profanity?", "What the f***'s that?", ";-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It will still take a couple of years before a computer will really be able to recognize swearing and cursing and it is my sincere hope that people will have understood by then that profanity is human and not \"dangerous."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Instead of a dumb filter, have a smart human moderator who can balance the tone of discussion as appropriate.", "A moderator who can detect abuse like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["\"If you were my husband, I'd poison your tea.", "\" - \"If you were my wife, I'd drink it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["(that was from Winston Churchill, btw."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Here's my Rather Lazy Attempt at this...My idea was to use the difflib.", "Ofcourse this isn't the entire program...but it should get you started :)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "difflib", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import difflib,re\nbadwords = map(lambda x: x.strip(), open(\"words.txt\",\"r\").readlines())\n\nbody = open(\"text.txt\",\"r\").read();\n\np = re.compile(\"\\w+\")\n\nfor word in set(p.findall(body)):\n    lst = difflib.get_close_matches(word,badwords,n=1,cutoff=0.9) #configure the cutoff accordin to how strict you want the filter\n    if lst :\n        body = body.replace(word,\"!@#&amp;@%^tutsifruitsy$%&amp;$\")\n\nprint body\n</code>\n</pre>\n", "senID": 1}, {"text": ["The tutsifruitsy is a reference to \"The Late Late Show with Craig Ferguson\" :)"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "tutsifruitsy", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"The Late Late Show with Craig Ferguson\"", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["It's possible for users to work around this, of course, but it should do a fairly thorough job of removing profanity:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\ndef remove_profanity(s):\n    def repl(word):\n        m = re.match(r\"(\\w+)(.*)\", word)\n        if not m:\n            return word\n        word = \"Bork\" if m.group(1)[0].isupper() else \"bork\"\n        word += m.group(2)\n        return word\n    return \" \".join([repl(w) for w in s.split(\" \")])\n\nprint remove_profanity(\"You just come along with me and have a good time. The Galaxy's a fun place. You'll need to have this fish in your ear.\")\n</code>\n</pre>\n", "senID": 1}]]