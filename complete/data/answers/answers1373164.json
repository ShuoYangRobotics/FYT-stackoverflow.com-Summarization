[[{"text": ["Use dictionaries to accomplish this.", "Dictionaries are stores of keys and values. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dict = { \n    'x': 1, \n    'y': 2, \n    'z': 3\n}\n&gt;&gt;&gt; dict\n{'y': 2, 'x': 1, 'z': 3}\n&gt;&gt;&gt; dict['y']\n2\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can use variable key names to achieve the effect of variable variables without the security risk."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 'spam'\n&gt;&gt;&gt; z = { x: 'eggs' }\n&gt;&gt;&gt; z['spam']\n'eggs'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Make sense?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Whenever you want to use variable variables, it's probably better to use a dictionary.", "So instead of writing"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $foo = \"bar\"\n$$foo = \"baz\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["you write "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n mydict = {}\nfoo = \"bar\"\nmydict[foo] = \"baz\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["This way you won't accidentally overwrite previously existing variables (which is the security aspect) and you can have different \"namespaces\"."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["can be easily accomplished with built-in getattr."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "getattr", "tag": "a", "pos": 0, "childList": [{"text": "getattr", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#getattr"}, {"text": "getattr", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n getattr(obj, 'foobar')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It's not a good idea.", "If you are accessing a global variable you can use globals()"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "globals()", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#globals"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 10\n&gt;&gt;&gt; globals()['a']\n10\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to access a variable in the local scope you can use locals()"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "locals()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#locals"}]}, {"text": ["A better solution is to use getattr or store your variables in a dictionary and then access them by name."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You could also use exec and eval:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n newvar = 'x'\nnewvalue = 12\nexec('%s=%d') % (newvar, newvalue)\n#this will print 12\nprint x\n#this will print 12 as well\nprint eval(newvar)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is more proof of concept than usable and/or good practice (don't use list comprehensions for this), but works:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n values = {\n    'a': 1,\n    'b': 2,\n    'c': 3,\n    'd': 4\n}\n\nwhitelist = ['a', 'd']\n\n[locals().update({k: v}) for k, v in (values).items() if k in whitelist]\n\nprint a # 1\nprint b # undefined\nprint c # undefined\nprint d # 4\n</code>\n</pre>\n", "senID": 1}]]