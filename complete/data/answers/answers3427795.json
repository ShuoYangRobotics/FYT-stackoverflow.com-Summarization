[[{"text": ["i will recommend to check this book \nhttp://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1281129036&amp;sr=1-1"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "img", "pos": 0, "childList": []}, {"href": "http://rads.stackoverflow.com/amzn/click/0735619670", "text": "http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1281129036&amp;sr=1-1", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I don't think there will be any good tutorials, because there aren't any hard-and-fast rules.", "Here are some tips:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": ["Conform to convention: Loop variables are i, j, and k; variable numbers of arguments go in *args and **kwargs; use camelCase or underscored_names."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "j", "childNum": 0, "tag": "code", "childList": []}, {"text": "k", "childNum": 0, "tag": "code", "childList": []}, {"text": "*args", "childNum": 0, "tag": "code", "childList": []}, {"text": "**kwargs", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Be consistent."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Be concise.", "list_of_drugs_used_in_this_program is much less clear than drugs.", "Similarly, you don't need to include the datatype of the variable in the name: drugs_list is redundant."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "list_of_drugs_used_in_this_program", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "drugs", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "drugs_list", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Don't go overboard with the underscores.", "I've never needed more than one.", "2+ is pushing it."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Never ever ever use metasyntactic variables (foo, spam...) in anything but quick-and-dirty examples.", "method1 is also out."], "childNum": 5, "tag": "p", "senID": 5, "childList": [{"text": "ever", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "metasyntactic variables", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Metasyntactic_variable"}, {"text": "foo", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "spam", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "method1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]}, {"text": ["But you could summarise all of that with:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Don't be silly."], "childNum": 0, "tag": "h2", "senID": 7, "childList": []}, {"text": ["Tee hee."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["http://www.oreillynet.com/onlamp/blog/2004/03/the_worlds_two_worst_variable.html"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "http://www.oreillynet.com/onlamp/blog/2004/03/the_worlds_two_worst_variable.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.oreillynet.com/onlamp/blog/2004/03/the_worlds_two_worst_variable.html"}]}], [{"text": ["All the answers here are quite valid.", "Most important: be consistent."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That said, here are my rules (C#):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "camelCase identifiers -- I personally\nfind this much easier to read than\nunderscores ", "tag": "none", "senID": 2}, {"text": ["Public"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}, {"text": "Something I\nshould never touch starts with an\nunderscore -- example, the backing\nfield to a property should only be\ntouched from the property. If I have\nunderscores elsewhere, I know I'm\nwrong", "tag": "none", "senID": 4}, {"text": "Apps Hungarian where\nappropriate -- ints describing row\nIDs perhaps could be named\n", "tag": "none", "senID": 5}]}], [{"text": ["Those are the only two I would state as any sort of rule.", "Beyond that convention preferences are a matter of opinions quickly turning into rants.", "The rest of this post is exactly that, and shouldn't be read as anything else."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Not a tutorial... more like a guide/best practice kind of thing:\nhttp://msdn.microsoft.com/en-us/library/xzf533w0(VS.71).aspx"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://msdn.microsoft.com/en-us/library/xzf533w0(VS.71).aspx", "text": "http://msdn.microsoft.com/en-us/library/xzf533w0(VS.71).aspx", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I'd recommend purchasing a copy of \"Clean Code\" by Robert C. Martin.", "It is full of great suggstions ranging from naming conventions to how to write easy-to-understand functions and much more.", "Definitely worth a read.", "I know it influenced my coding style since reading it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["hi for me you should always put the most explicit names:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string_to_hash = \"blabla\"\nhash(sring_to_hash)\n</code>\n</pre>\n", "senID": 1}, {"text": ["and respect the pep8 style guide.", "You code should then be very easy to read."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pep8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["There are many different views on the specifics of naming conventions, but the overall gist could be summed up as:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So a major no-no would be\nsingle letter variables (some people\nuse i and j for indexing loops, which\nis OK because every programmer knows\nwhat they are.", "Nevertheless, I prefer\n'idx' instead of 'i').", "Also out are\nnames like 'method1', it means nothing\n- it should indicate what the variable holds."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Another (less common) convention is the 'Hungarian' notation where the data type is prefixed to the variable name such as 'int i_idx'.", "This is quite useless in modern, object oriented programming languages.", "Not to mention a blatant violation of the DRY principle."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The second point, consistency, is just as important.", "camelCase, UpperCamelCase, whatever - just don't switch between them for no reason."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You'll find that naming conventions vary from language to language and often, a company will have their own rules on naming. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Its a worthwhile investment to properly name your variables because when you come to maintain your code much later on and you have forgotten what everything means, it will pay dividends."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You didn't specify what language are you looking for.", "Since your question is flagged .NET, here is a document I follow when writing  C# code: http://weblogs.asp.net/lhunt/pages/CSharp-Coding-Standards-document.aspx."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://weblogs.asp.net/lhunt/pages/CSharp-Coding-Standards-document.aspx", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://weblogs.asp.net/lhunt/pages/CSharp-Coding-Standards-document.aspx"}]}], [{"text": ["Have you read Code Complete?", "He does a full treatise on this in the book.", "Definitely the best naming strategy I've seen in print... And it's easy to find like 1000 programmers at the drop of a hat who name this one of the top 5 resources for programmers and program design."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Just my $.05"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Can I make a shameless plug for the \"Names\" chapter in my book, \"A Sane Approach to Database Design\" ?", "I'm specifically talking about names for things in databases, but most of the same considerations apply to variables in programs."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's not clear if your question relates to Python naming conventions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If so, for starters I would try to follow just these simple rules:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["ClassName"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}, {"text": ["variable_name"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}]}]]