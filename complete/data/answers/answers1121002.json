[[{"text": ["You already have the blueprint there for what you want it to do.", "You're doing:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if(line[0]==\"PING\"):\n</code>\n</pre>\n", "senID": 1}, {"text": ["No reason you couldn't adapt that scheme to accept input of PORT, NICK, etc."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "PORT", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "NICK", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also, while 1 isn't very Pythonic.", "Yes it works, but really there is no reason not to use True.", "It's not a big deal, but it makes the code slightly more readable."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["So you want the user to control the exact connection information that the IRC client uses?", "In order to do this, you must collect input from the user before you start your connection using the raw_input function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "raw_input", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#raw%5Finput"}]}, {"text": ["NOTE: raw_input will strip a trailing newline character."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n HOST = raw_input('Enter Host: ')\nPORT = int(raw_input('Enter Port: '))\n</code>\n</pre>\n", "senID": 2}, {"text": ["...for all of the values that you want the user to be able to configure."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n HOST = raw_input('Enter host: ')\nprint HOST\n\n&gt;&gt;&gt; \nEnter host: stackoverflow.com\nstackoverflow.com\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Not a direct answer, but you should check the IRC implementation in twisted, an event-driven networking engine written in Python that includes support for irc in twisted.words.protocols.irc."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "IRC", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://twistedmatrix.com/", "text": "twisted", "childNum": 0, "tag": "a", "childList": []}, {"text": "irc", "childNum": 0, "tag": "code", "childList": []}, {"text": "twisted.words.protocols.irc", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If you're trying to carry out actions in response to user input, maybe the cmd module will help you out:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "cmd", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["cmd \u2014 Support for line-oriented command interpreters"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["PyMOTW: cmd"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}]}, {"text": ["If you're interested in the IRC protocol itself, this tutorial on using sockets to write an IRC client in python may be of use:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["Python and IRC"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}]}], [{"text": ["But how i can make this, because i'm starting in Python development.", "Thanks!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you're brand new to Python, an IRC client is quite an undertaking, especially if you haven't worked with similar clients before in other languages."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would recommend you to look up on threading, so that you can put your IRC handler on a separate thread, and receive user input on another thread (If you do both on the same thread, one will block the other, making for a bad experience."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To answer your question though, the simplest way to get input from the user in the console is to use in = raw_input(), but as I said, it will not interact well with the socket on the same thread."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "in =", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/functions.html#raw%5Finput", "text": "raw_input()", "childNum": 1, "tag": "a", "childList": [{"text": "raw_input()", "tag": "code"}]}, {"text": "raw_input()", "childNum": 0, "tag": "code", "childList": []}]}]]