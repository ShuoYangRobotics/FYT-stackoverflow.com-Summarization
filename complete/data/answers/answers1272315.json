[[{"text": ["The rsplit string method splits a string starting from the right instead of the left, and so it's probably what you're looking for (it takes an argument specifying the max number of times to split):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "rsplit", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n line = \"hello, world    , 1       , 2   , 3\"\nparts = line.rsplit(\",\", 3)\nprint parts  # prints ['hello, world    ', ' 1       ', ' 2   ', ' 3']\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to strip the whitespace from the beginning and end of each item in your splitted list, then you can just use the strip method with a list comprehension"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "strip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n parts = [s.strip() for s in parts]\nprint parts  # prints ['hello, world', '1', '2', '3']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I don't fully understand why you want to read each line in reverse, but you could do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import csv\nfile = open(\"mycsvfile.csv\")\nreversedLines = [line[::-1] for line in file]\nfile.close()\nreader = csv.reader(reversedLines)\nfor backwardRow in reader:\n    lastField = backwardRow[0][::-1]\n    secondField = backwardRow[1][::-1]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could always do something with regex's, like (perl regex)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/perl\n\nuse IO::File;\n\nif (my $file = new IO::File(\"test.csv\"))\n{\n    foreach my $line (&lt;$file&gt;) {\n    $line =~ m/^(.*),(.*?),(.*?),(.*?)$/;\n    print \"[$1][$2][$3][$4]\\n\";\n    }\n} else {\n    print \"Unable to open test.csv\\n\";\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["(The first is a greedy search, the last 3 are not)\nEdit: posted full code instead of just the regex"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Reverse the string first and then process it. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["tmp = tmp[::-1]"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["From the sample You have provided, it looks like \"columns\" are fixed size.", "First (the one with commas) is 16 characters long, so why don't You try reading the file line by line, then for each line reading the first 16 characters (as a value of first column), and the rest accordingly?", "After You have each value, You can go and parse it further (trim whitespaces, and so on...)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["That's not then a CSV file, comma separated means just that."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["How can you be certain that is not:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n CSV FILE\n\"a\"             , \"b\"     , \"c\" , \"d\"\nhello           , world   , 1   , 2   , 3\n1               , 2       , 3   , 4   , 5,6,7,2,456,87\nh               , 1231232 , 3   , 3   , 45,44\n</code>\n</pre>\n", "senID": 2}, {"text": ["If the file is as you indicate then the first group should be surrounded by quotes, looks as though the field names are so odd that fields containing commas are not."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I'm not a fan of fixing errors away from their source, I'd push back to the data generator to deliver proper CSV if that's what they are claiming it is."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["If you always expect the same number of columns, and only the first column can contain commas, just read anything and concatenate excess columns at the beginning."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The problem is that the interface is ambiguous, and you can try to circumvent this, but the better solution is to try to get the interface fixed (which is often harder than creating several patches...)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I agree with mr beer.", "That is a badly formed csv file.", "Your best bet is to find other delimiters or stop overloading the commas or quote/escape the non field separating commas"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]