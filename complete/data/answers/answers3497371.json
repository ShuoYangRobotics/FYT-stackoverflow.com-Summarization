[[{"text": ["I wouldn't recommend it.", "First because notifyUpdated() will be called even if the code in either branch throws an exception.", "You would need something like this to really get the intended behavior:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "notifyUpdated()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n    if x:\n        return update(1)\n    else:\n        return update(2)\nexcept:\n    raise\nelse:\n    notifyUpdated()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Secondly, because try blocks generally indicate you're doing some kind of exception handling, and you aren't, you're just using them for convenience.", "So this construct will confuse people."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "try", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For example, I don't think either of the first two people (at least one of which deleted their answer) to answer your question realized what you were really trying to do.", "Confusing code is bad, no matter how convenient and clever it seems."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I would not use try/finally for flow that doesn't involve exceptions.", "It's too tricky for its own good."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is better:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if x:\n    ret = update(1)\nelse:\n    ret = update(2)\nnotifyUpdated()\nreturn ret\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I think you mean you want to use try/finally as an alternative to this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if x:\n    result = update(1)\nelse:\n    result = update(2)\nnotifyUpdated()\nreturn result\n</code>\n</pre>\n", "senID": 1}, {"text": ["I guess this is a matter of style.", "For me I like to reserve try for handling exceptional conditional.", "I won't use it as a flow control statement."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "try", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I think this is asking for trouble.", "What happens later, when you change your code to the following?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    if x:\n        return update(1)\n    elif y:\n        return update(2)\n    else:\n        return noUpdateHere()\nfinally:\n    notifyUpdated() # even if noUpdateHere()!\n</code>\n</pre>\n", "senID": 1}, {"text": ["At best, it's a stumbling point for most readers of your code (probably even you in six months), because it's using try/finally for a purpose that differs from the normal use patterns.", "And the typing it saves is minimal, anyway."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "try/finally", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I think a decorator is a better idea here"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def notifyupdateddecorator(f):\n    def inner(*args, **kw):\n        retval = f(*args, **kw)\n        notifyUpdated()\n        return retval\n    return inner\n\n@notifyupdateddecorator\ndef f(x):\n    if x:\n        return update(1)\n    else:\n        return update(2)\n\n@notifyupdateddecorator\ndef g(x):\n    return update(1 if x else 2)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["from http://docs.python.org/library/contextlib.html:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/contextlib.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/contextlib.html"}]}, {"code": "<pre>\n<code>\n from contextlib import closing\nimport urllib\n\nwith closing(urllib.urlopen('http://www.python.org')) as page:\n    for line in page:\n        print line\n</code>\n</pre>\n", "senID": 1}, {"text": ["so you can create a similar function and use it"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]