[[{"text": ["You can use multiprocessing.", "Or, if findCluster(companyid) has sensible stopping points, you can turn it into a generator along with draw_ascii_spinner, to do something like this:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "multiprocessing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html"}, {"text": "findCluster(companyid)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "draw_ascii_spinner", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for tick in findCluster(companyid):\n    ascii_spinner.next()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use threads:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import threading, time\n\ndef wrapper(func, args, res):\n    res.append(func(*args))\n\nres = []\nt = threading.Thread(target=wrapper, args=(findcluster, (companyid,), res))\nt.start()\nwhile t.is_alive():\n    # print next iteration of ASCII spinner\n    t.join(0.2)\nprint res[0]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This can be done with threads.", "FindCluster runs in a separate thread and when done, it can simply signal another thread that is polling for a reply."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You'll want to do some research on threading, the general form is going to be this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Create a new thread for findCluster and create some way for the program to know the method is running - simplest in Python is just a global boolean", "tag": "none", "senID": 1}, {"text": "Run draw_ascii_spinner in a while loop conditioned on whether it is still running, you'll probably want to have this thread sleep for a short period of time between iterations", "tag": "none", "senID": 2}]}, {"text": ["Here's a short tutorial in Python -  http://linuxgazette.net/107/pai.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://linuxgazette.net/107/pai.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://linuxgazette.net/107/pai.html"}]}], [{"text": ["Generally, you will use Threads.", "Here is a simplistic approach which assumes, that there are only two threads: 1) the main thread executing a task, 2) the spinner thread:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "task", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nimport time\nimport thread\n\ndef spinner():\n    while True:\n        print '.'\n        time.sleep(1)\n\ndef task():\n    time.sleep(5)\n\nif __name__ == '__main__':\n    thread.start_new_thread(spinner, ())\n    # as soon as task finishes (and so the program)\n    # spinner will be gone as well\n    task()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Run findCluster() in a thread (the Threading module makes this very easy), and then draw_ascii_spinner until some condition is met."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "findCluster()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "draw_ascii_spinner", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Instead of using sleep() to set the pace of the spinner, you can wait on the thread's wait() with a timeout."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "sleep()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "wait()", "childNum": 0, "tag": "code", "childList": []}]}]]