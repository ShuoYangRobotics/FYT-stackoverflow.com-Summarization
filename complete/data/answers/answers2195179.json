[[{"text": ["Found !!!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Yes, exactly the way where I came from."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So, actually the ENGINE_init() is not implemented in M2Crypto.Engine.", "So, only one solution: patching!!!", "(very small...) so I've created a new Engine method (in Engine.py)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def engine_initz(self):\n        \"\"\"Return engine name\"\"\"\n        return m2.engine_initz(self._ptr)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Why engine_initz ?", "because engine_init is already define in SWIG/_engine.i,:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n void engine_init(PyObject *engine_err) {\n    Py_INCREF(engine_err);\n    _engine_err = engine_err;\n}\n</code>\n</pre>\n", "senID": 5}, {"text": ["I don't really know what is done, so I've prefered creating a new one...", "So I've just added the following to SWIG/_engine.i:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n %rename(engine_initz) ENGINE_init;\nextern int ENGINE_init(ENGINE *);\n</code>\n</pre>\n", "senID": 7}, {"text": ["And recompile the __m2crypto.so, now just add a \"pkcs11.engine_initz()\" before launching the private key, and it works....."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["I don't know what and why the engine_init code present in current M2Crypto is supposed to do.", "Exposing ENGINE_init() as engine_init2 with the following patch to M2Crypto helps:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Index: SWIG/_engine.i\n===================================================================\n--- SWIG/_engine.i  (revision 719)\n+++ SWIG/_engine.i  (working copy)\n@@ -44,6 +44,9 @@\n %rename(engine_free) ENGINE_free;\n extern int ENGINE_free(ENGINE *);\n\n+%rename(engine_init2) ENGINE_init;\n+extern int ENGINE_init(ENGINE *);\n+\n /*\n  * Engine id/name functions\n  */\n</code>\n</pre>\n", "senID": 1}, {"text": ["After this, the following code takes me further (but urllib does not fully work for me currently):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import sys, os, time, cgi, urllib, urlparse\nfrom M2Crypto import m2urllib2 as urllib2\nfrom M2Crypto import m2, SSL, Engine\n\n# load dynamic engine\ne = Engine.load_dynamic_engine(\"pkcs11\", \"/Users/martin/prefix/lib/engines/engine_pkcs11.so\")\npk = Engine.Engine(\"pkcs11\")\npk.ctrl_cmd_string(\"MODULE_PATH\", \"/Library/OpenSC/lib/opensc-pkcs11.so\")\n\nm2.engine_init2(m2.engine_by_id(\"pkcs11\")) # This makes the trick\n\ncert = e.load_certificate(\"slot_01-id_01\")\nkey = e.load_private_key(\"slot_01-id_01\", sys.argv[1])\n\nctx = SSL.Context(\"sslv23\")\nctx.set_cipher_list(\"HIGH:!aNULL:!eNULL:@STRENGTH\")\nctx.set_session_id_ctx(\"foobar\")\nm2.ssl_ctx_use_x509(ctx.ctx, cert.x509)\nm2.ssl_ctx_use_pkey_privkey(ctx.ctx, key.pkey)\n\nopener = urllib2.build_opener(ctx)\nurllib2.install_opener(opener)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Looking at the pastebin link Becky provided, I believe it translates to something like this in the new API:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pastebin link", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://fronted.pastebin.ca/549820"}]}, {"code": "<pre>\n<code>\n from M2Crypto import Engine, m2\n\ndynamic = Engine.load_dynamic_engine(\"pkcs11\", \"/Users/martin/prefix/lib/engines/engine_pkcs11.so\")\n\npkcs11 = Engine.Engine(\"pkcs11\")\n\npkcs11.ctrl_cmd_string(\"MODULE_PATH\", \"/Library/OpenSC/lib/opensc-pkcs11.so\")\n\nr = pkcs11.ctrl_cmd_string(\"PIN\", sys.argv[1])\n\nkey = pkcs11.load_private_key(\"id_01\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["So I am betting that if you substitute \"/Users/martin/prefix/lib/engines/engine_pkcs11.so\" with \"/usr/local/ssl/lib/engines/engine_pkcs11.so\" and \"/Library/OpenSC/lib/opensc-pkcs11.so\" with \"/usr/lib/libeTPkcs11.so\" you might get it to work with Aladdin."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["That is exactly the code I've tried.", "But It ended with the following error:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Traceback (most recent call last):\n  File \"prog9.py\", line 13, in &lt;module&gt;\n    key = pkcs11.load_private_key(\"id_45\")\n  File \"/usr/lib/pymodules/python2.5/M2Crypto/Engine.py\", line 70, in load_private_key\n    return self._engine_load_key(m2.engine_load_private_key, name, pin)\n  File \"/usr/lib/pymodules/python2.5/M2Crypto/Engine.py\", line 60, in _engine_load_key\n    raise EngineError(Err.get_error())\nM2Crypto.Engine.EngineError: 11814:error:26096075:engine outines:ENGINE_load_private_key:not initialised:eng_pkey.c:112:\n</code>\n</pre>\n", "senID": 1}, {"text": ["I'm using OpenSC PKCS11 lib, not aladdin lib.", "But I don't think the problem is closed."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I tried the code that Heikki suggested (minus one line) and got the same error as Erlo.", "For load_private_key(), how do I know what to put in for the argument?  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dynamic = Engine.load_dynamic_engine(\"pkcs11\", \"/usr/local/ssl/lib/engines/engine_pkcs11.so\")\n#  m2.engine_free(dynamic) this line gave me an error TypeError: in method 'engine_free', argument 1 of type 'ENGINE *'\n\npkcs11 = Engine.Engine(\"pkcs11\")\npkcs11.ctrl_cmd_string(\"MODULE_PATH\", \"/usr/lib/libeTPkcs11.so\")\n\nr = pkcs11.ctrl_cmd_string(\"PIN\", \"password\")\n\nkey = pkcs11.load_private_key(\"id_01\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think the problem is not really the \"load_private_key()\".", "It's like something is missing between \"MODULE_PATH\" definition and the load_private_key() call.", "What happen if you remplace \"/usr/lib/libeTPkcs11.so\" by a wrong path ?", "In my case I have no error related to this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I've run \"pcscd\" in foreground with high debug level, there is no call to smartcard during the python execution...", "So definitly, I don't understand what's wrong..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The equivalent in \"openssl\" is using \"-pre\" command.", "The \"-pre\" (by opposite to the \"-post\") are command sent to the engine before loading.", "Perhaps we need to call a methode which \"load\" the engine after all \"ctrl_cmd_string\" calls ??", "..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Lost :-/"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]