[[{"text": ["There is no such thing as \"multiprocessor\" or \"multicore\" programming.", "The distinction between \"multiprocessor\" and \"multicore\" computers is probably not relevant to you as an application programmer; it has to do with subtleties of how the cores share access to memory."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "computers", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["In order to take advantage of a multicore (or multiprocessor) computer, you need a program written in such a way that it can be run in parallel, and a runtime that will allow the program to actually be executed in parallel on multiple cores (and operating system, although any operating system you can run on your PC will do this).", "This is really parallel programming, although there are different approaches to parallel programming.", "The ones that are relevant to Python are multiprocessing and multithreading."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "parallel", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["In languages like C, C++, Java, and C#, you can write parallel programs by executing multiple threads.", "The global interpreter lock in the CPython and PyPy runtimes preclude this option; but only for those runtimes.", "(In my personal opinion, multithreading is dangerous and tricky and it is generally a good thing that Python encourages you not to consider it as a way to get a performance advantage."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "dangerous and tricky", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.softpanorama.org/People/Ousterhout/Threads/index.shtml"}]}, {"text": ["If you want to write a parallel program which can run on multiple cores in Python, you have a few different options:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Write a multithreaded program using the ", "tag": "none", "senID": 4}, {"text": "Use the ", "tag": "none", "senID": 5}, {"text": "Use the ", "tag": "none", "senID": 6}, {"text": "Use ", "tag": "none", "senID": 7}]}, {"text": ["No matter which of these options you choose, you will need to understand how to split the work that your program is doing up into chunks that make sense to separate.", "Since I'm not sure what kind of programs you are thinking of writing, it would be difficult to provide a useful example."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["As mentioned in another post Python 2.6 has the multiprocessing module, which can take advantage of multiple cores/processors (it gets around GIL by starting multiple processes transparently).", "It offers some primitives similar to the threading module.", "You'll find some (simple) examples of usage in the documentation pages."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "multiprocessing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html"}]}], [{"text": ["If I understand things correctly, Python has something called the GIL (Global Interpreter Lock) that effectively makes it impossible to take advantage of multicores when doing multiple threads in Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See eg Guido van Rossum's blog entry on the topic.", "As far as I know, among the \"mainstream\" languages only C/C++ and Java have effective support for multicores."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "blog entry", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.artima.com/weblogs/viewpost.jsp?thread=214235"}]}], [{"text": ["The main difference is how you organize and distribute data.", "Multicore typically has higher bandwidths between the different cores in a cpu, and multiprocessor needs to involve the bus between the cpus more."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python 2.6 has gotten multiprocess (process, as in program running) and more synchronization and communication objects for multithreaded programming."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can actually write programs which will use multiple processors.", "You cannot do it with threads because of the GIL lock, but you can do it with different process.", "Either:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "use the ", "tag": "none", "senID": 1}, {"text": "have a look at ", "tag": "none", "senID": 2}, {"text": "if you use python > 2.6 have a look at the ", "tag": "none", "senID": 3}]}], [{"text": ["You can read about multithreading in python, and threading in general"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Multithreading in Python:\nhttp://www.devshed.com/c/a/Python/Basic-Threading-in-Python/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.devshed.com/c/a/Python/Basic-Threading-in-Python/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.devshed.com/c/a/Python/Basic-Threading-in-Python/"}]}], [{"text": ["If you don't have Python 2.6 (which you don't if you're using Ubuntu Edgy or Intrepid for example), you can use the Google code backported version of multiprocessing.", "It is part of PyPI, which means you can easily install it using EasyInstall (which is part of the python-setuptools package in Ubuntu)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Google code backported", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/python-multiprocessing/"}]}], [{"text": ["Always remember, however, that if you also care about performance, using Python is a problem.", "It's really slow compared for instance to either Java or C#, because it's still interpreted and not JIT-compiled, and the interpreter is not very efficient.", "To make it fast, most popular recommendations (ranging from manual inlining to writing C extensions) make your program less readable.", "So using Java or C# might be a much better choice, especially if you need to start from scratch anyway."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Things like Psyco do not, but Psyco has some bugs and does not speed up all code.", "And still they don't support multithreading."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Jython and IronPython support real multithreading.", "However Jython, instead, is even slower than CPython, while IronPython is not faster than CPython, even if it runs on top of an efficient VM, with JIT-compilation for instance."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]