[[{"text": ["This method works for ifs, multiple nested loops and other constructs that you can't break from easily."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "break", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Wrap the code in its own function.", "Instead of break, return."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "break", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "return", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\nfrom\n<a href=\"http://entrian.com/goto/\" rel=\"nofollow\">\n goto\n</a>\nimport goto, label\n\nif some_condition:\n   ...\n   if condition_a:\n       # do something\n       # and then exit the outer if block\n       goto .end\n   ...\n   if condition_b:\n       # do something\n       # and then exit the outer if block\n       goto .end\n   # more code here\n\nlabel .end\n</pre>\n", "senID": 0}, {"text": ["(Don't actually use this, please."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can emulate goto's functionality with exceptions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    # blah, blah ...\n    # raise MyFunkyException as soon as you want out\nexcept MyFunkyException:\n    pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["Disclaimer: I only mean to bring to your attention the possibility of doing things this way, while in no way do I endorse it as reasonable under normal circumstances.", "As I mentioned in a comment on the question, structuring code so as to avoid Byzantine conditionals in the first place is preferable by far.", ":-)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "possibility", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["may be this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if some_condition and condition_a:\n       # do something\nelif some_condition and condition_b:\n           # do something\n           # and then exit the outer if block\nelif some_condition and not condition_b:\n           # more code here\nelse:\n     #blah\nif\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Effectively what you're describing are goto statements, which are generally panned pretty heavily.", "Your second example is far easier to understand. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, cleaner still would be:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if some_condition:\n   ...\n   if condition_a:\n       your_function1()\n   else:\n       your_function2()\n\n...\n\ndef your_function2():\n   if condition_b:\n       # do something\n       # and then exit the outer if block\n   else:\n       # more code here\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n while some_condition:\n   ...\n   if condition_a:\n       # do something\n       break\n   ...\n   if condition_b:\n       # do something\n       break\n   # more code here\n   break\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Generally speaking, don't.", "If you are nesting \"ifs\" and breaking from them, you are doing it wrong."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, if you must:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if condition_a:\n   def condition_a_fun():\n       do_stuff()\n       if we_wanna_escape:\n           return\n   condition_a_fun()\nif condition_b:\n   def condition_b_fun():\n       do_more_stuff()\n       if we_wanna_get_out_again:\n           return\n   condition_b_fun()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note, the functions don't HAVE to be declared in the if statement, they can be declared in advance ;) This would be a better choice, since it will avoid needing to refactor out an ugly if/then later on."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I don't like the whole idea of structuring code this way.", "I fear it leads to the same problems as using goto statements.", "(luckily, Python has not goto statement)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "goto", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]