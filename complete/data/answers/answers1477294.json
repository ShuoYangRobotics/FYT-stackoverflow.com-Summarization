[[{"text": ["There is a UTF-8 stress test from Markus Kuhn you could use."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "UTF-8 stress test from Markus Kuhn", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt"}]}, {"text": ["See also Really Good, Bad UTF-8 example test data."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Really Good, Bad UTF-8 example test data", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1319022/really-good-bad-utf-8-example-test-data"}]}], [{"text": ["It depends how thoroughly you want to do the testing and how accurately you want to do the generation.", "In full, Unicode is a 21-bit code set (U+0000 .. U+10FFFF).", "However, some quite large chunks of that range are set aside for custom characters.", "Do you want to worry about generating combining characters at the start of a string (because they should only appear after another character)?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The basic approach I'd adopt is randomly generate a Unicode code point (say U+2397 or U+31232), validate it in context (is it a legitimate character; can it appear here in the string) and encode valid code points in UTF-8."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you just want to check whether your code handles malformed UTF-8 correctly, you can use much simpler generation schemes."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Note that you need to know what to expect given the input - otherwise you are not testing; you are experimenting."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Here is an example function that probably creates a random well-formed UTF-8 sequence, as defined in Table 3\u20137 of Unicode 5.0.0:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python3.1\n\n# From Table 3\u20137 of the Unicode Standard 5.0.0\n\nimport random\n\ndef byte_range(first, last):\n    return list(range(first, last+1))\n\nfirst_values = byte_range(0x00, 0x7F) + byte_range(0xC2, 0xF4)\ntrailing_values = byte_range(0x80, 0xBF)\n\ndef random_utf8_seq():\n    first = random.choice(first_values)\n    if first &lt;= 0x7F:\n        return bytes([first])\n    elif first &lt;= 0xDF:\n        return bytes([first, random.choice(trailing_values)])\n    elif first == 0xE0:\n        return bytes([first, random.choice(byte_range(0xA0, 0xBF)), random.choice(trailing_values)])\n    elif first == 0xED:\n        return bytes([first, random.choice(byte_range(0x80, 0x9F)), random.choice(trailing_values)])\n    elif first &lt;= 0xEF:\n        return bytes([first, random.choice(trailing_values), random.choice(trailing_values)])\n    elif first == 0xF0:\n        return bytes([first, random.choice(byte_range(0x90, 0xBF)), random.choice(trailing_values), random.choice(trailing_values)])\n    elif first &lt;= 0xF3:\n        return bytes([first, random.choice(trailing_values), random.choice(trailing_values), random.choice(trailing_values)])\n    elif first == 0xF4:\n        return bytes([first, random.choice(byte_range(0x80, 0x8F)), random.choice(trailing_values), random.choice(trailing_values)])\n\nprint(\"\".join(str(random_utf8_seq(), \"utf8\") for i in range(10)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Because of the vastness of the Unicode standard I cannot test this thoroughly.", "Also note that the characters are not equally distributed (but each byte in the sequence is)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Since Unicode is just a range of - well - codes, what about using unichr() to get the unicode string corresponding to a random number between 0 and 0xFFFF?", "(Of course that would give just one codepoint, so iterate as required)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"text": ["You could download a website written in greek or german that uses unicode and feed that to your code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Answering revised question:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Yes, on a strict definition of \"control characters\" -- note that you won't include CR, LF, and TAB; is that what you want?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Please consider responding to my earlier invitation to tell us what you are really trying to do."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]