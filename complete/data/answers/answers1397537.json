[[{"text": ["This answer from Carl Meyer to the question mentioned earlier by Paul McMillan might be what your looking for.", "A subtlety to this problem not captured in some of the answers is how to get at derived class instances from a QuerySet on Entity."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "answer from Carl Meyer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/929029/how-do-i-access-the-child-classes-of-an-object-in-django-without-knowing-the-name/929982#929982"}]}, {"text": ["The Problem"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "The Problem", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for entity in Entity.objects.all()\n  print unicode(entity) # Calls the Entity class unicode, which is not what you want.\n</code>\n</pre>\n", "senID": 2}, {"text": ["A Solution"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "A Solution", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Use the InheritanceCastModel mixin in the answer linked above as a base class for Entity.", "You can then cast from Entity instances to the actual derived class instances.", "This is particularly handy when you want to use querysets on your parent class (Entity) but access the derived class instances. "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "InheritanceCastModel", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Entity(InheritanceCastModel):\n  # your model definition. You can get rid of the entity_type_list and type, as the\n  # real_type provided by InheritanceCastModel provides this info\n\nclass Athlete(Entity):\n  # unchanged\n\nclass Team(Entity):\n  # unchanged\n\nfor entity in Entity.objects.all():\n  actual_entity = entity.cast()\n  print unicode(actual_entity) # actual entity is a a Team or Athlete\n</code>\n</pre>\n", "senID": 5}], [{"text": ["This is a little ugly, but I think it should work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n entities = Entity.objects.all()\nfor entity in entities:\n   try:\n       print entity.team\n   except:\n       print entity.athlete\n</code>\n</pre>\n", "senID": 1}, {"text": ["Check out http://docs.djangoproject.com/en/1.0/topics/db/models/#id7 for more on multi-table inheritance.", "Just be careful, because the Django ORM is inevitably a leaky abstraction and things you might normally do with objects can get you in trouble, or do unexpected things."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.djangoproject.com/en/1.0/topics/db/models/#id7", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/1.0/topics/db/models/#id7"}]}], [{"text": ["Loop over all the entities... if entity.class == 'Athlete' and entity.firstname and entity.lastname: blah"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "class", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Hope this helps."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit: hmmm looks like I forgot about actually getting the combined list of both entities.", "Not sure I know of a slick way to do that."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I answered a similar question a while ago.", "Have a look, I think one of the answers probably solves your problem as well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://stackoverflow.com/questions/929029/how-do-i-access-the-child-classes-of-an-object-in-django-without-knowing-the-name"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/929029/how-do-i-access-the-child-classes-of-an-object-in-django-without-knowing-the-name", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/929029/how-do-i-access-the-child-classes-of-an-object-in-django-without-knowing-the-name"}]}, {"text": ["My answer from there was to add this to the parent class:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def get_children(self):\n    rel_objs = self._meta.get_all_related_objects()\n    return [getattr(self, x.get_accessor_name()) for x in rel_objs if x.model != type(self)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then you can call that function to get the children objects (in your case you will only have one) and then call the unicode function from that object."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I am not very clear what you want to do, but in any case you can add a criteria in dervied class instead of checking unicode method of derived classes"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "unicode", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["e.g.", "you can ask the class isTypeA ?", "or why don't you check the type?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["From pure Python, you can use the isinstance function:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "isinstance", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Entity:\n    def __init__(self):\n        if isinstance(self, Team):\n            print 'is team'\n        elif isinstance(self, Athlete):\n            print 'is athlete'\n\nclass Team(Entity):\n    def __unicode__(self):\n        return 'Team'\n\nclass Athlete(Entity):\n    def __unicode__(self):\n        return 'Athlete'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If I undestand correctly, you are simply asking how to call the __unicode__ method of a given object. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__unicode__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Use unicode(instance) and depending on the type of entity, the appropriate implementation will be called polymorphically."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "unicode(instance)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I don't believe you have to do anything.", "If Entity is never instantiated directly, you will never call the non-existent Entity.__unicode__ method.", "However, if you'd like to play it save, you could add a stub method in your Entity class:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Entity", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Entity.__unicode__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Entity", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n class Entity(models.Model):\n\n    def __unicode__(self):\n        pass\n\nclass Team(Entity):\n\n    def __unicode__(self):\n        return self.name\n\nclass Athlete(Entity):\n\n    def __unicode__(self):\n        return '%s %s' % (self.firstname, self.lastname)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You are now assured that any class which inherits from Entity will have a __unicode__ method, and you can simply traverse them:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Entity", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__unicode__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for thing in [TeamA(), AthleteA(), TeamB(), AthleteB()]:\n    print unicode(thing)\n</code>\n</pre>\n", "senID": 3}]]