[[{"text": ["Python"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print list[::3] # print it\nnewlist = list[::3] # copy it\n</code>\n</pre>\n", "senID": 1}, {"text": ["Perl"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for ($i = 0; $i &lt; @list; $i += 3) {\n    print $list[$i]; # print it\n    push @y, $list[$i]; # copy it\n}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Perl:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Perl:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["As with draegtun's answer, but using a count var:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n my $i;\nmy @new = grep {not ++$i % 3} @list;\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Perl 5.10 new state variables comes in very handy here:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "state", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://perldoc.perl.org/functions/state.html"}]}, {"code": "<pre>\n<code>\n my @every_third = grep { state $n = 0; ++$n % 3 == 0 } @list;\n</code>\n</pre>\n", "senID": 1}, {"text": ["\nAlso note you can provide a list of elements to slice:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n my @every_third = @list[ 2, 5, 8 ];  # returns 3rd, 5th &amp; 9th items in list\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can dynamically create this slice list using map (see Gugod's excellent answer) or a subroutine: "], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "map", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://perldoc.perl.org/functions/map.html"}, {"href": "http://stackoverflow.com/questions/1464923/how-can-i-print-only-every-third-index-in-perl-or-python/1466696#1466696", "text": "answer", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n my @every_third = @list[ loop( start =&gt; 2, upto =&gt; $#list, by =&gt; 3  ) ];\n\nsub loop {\n    my ( %p ) = @_;\n    my @list;\n\n    for ( my $i = $p{start} || 0; $i &lt;= $p{upto}; $i += $p{by} ) {\n        push @list, $i;\n    }\n\n    return @list;\n}\n</code>\n</pre>\n", "senID": 5}, {"tag": "br", "senID": 6}, {"text": ["Update:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Regarding runrig's comment... this is \"one way\" to make it work within a loop:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n my @every_third = sub { grep { state $n = 0; ++$n % 3 == 0 } @list }-&gt;();\n</code>\n</pre>\n", "senID": 9}, {"text": ["/I3az/"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for x in a[::3]:\n   something(x)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Perl:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # The initial array\nmy @a = (1..100);\n\n# Copy it, every 3rd elements\nmy @b = @a[ map { 3 * $_ } 0..$#a/3 ];\n\n# Print it. space-delimited\n$, = \" \";\nsay @b;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could do a slice in Perl."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n my @in = ( 1..10 );\n\n# need only 1/3 as many indexes.\nmy @index = 1..(@in/3);\n\n# adjust the indexes.\n$_ = 3 * $_ - 1 for @index;\n# These would also work\n# $_ *= 3, --$_ for @index;\n# --($_ *= 3) for @index\n\nmy @out = @in[@index];\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Perl:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $size = @array; \nfor ($i=0; $i&lt;$size; $i+=3)  # or start from $i=2, depends what you mean by \"every third index\"\n{  \n        print \"$array[$i] \";  \n}\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n@array = qw(1 2 3 4 5 6 7 8 9);\nprint @array[(grep { ($_ + 1) % 3 == 0 } (1..$#array))];\n</pre>\n", "senID": 0}]]