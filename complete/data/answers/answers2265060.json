[[{"text": ["You actually want to use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class A(object):\n    ...\n...\nb = B()\nbar = super(b.__class__, b)\nprint bar.msg\n</code>\n</pre>\n", "senID": 1}, {"text": ["Base classes must be new-style classes (inherit from object)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As msg is a class variable, you can just do:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "msg", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print C.msg    # prints hohoho\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you overwrite the variable (as you do in class B), you have to find the right parent class.", "Remember that Python supports multiple inheritance."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "B", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "multiple inheritance", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["But as you define the classes and you now that B inherits from A you can always do this:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "B", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class B(A):\n    msg = 'hohoho'\n\n    def get_parent_message(self):\n       return A.msg\n</code>\n</pre>\n", "senID": 4}, {"text": ["UPDATE:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The most reliable thing would be:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def get_parent_attribute(instance, attribute):\n    for parent in instance.__class__.__bases__:\n        if attribute in parent.__dict__:\n             return parent.__dict__[attribute]\n</code>\n</pre>\n", "senID": 7}, {"text": ["and then:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n foo = B()\nprint get_parent_attribute(foo, 'msg')\n</code>\n</pre>\n", "senID": 9}], [{"text": ["Not sure why you want to do this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class A(object):\n...     msg = 'hehehe'\n... \n&gt;&gt;&gt; class B(A):\n...     msg = 'hohoho'\n... \n&gt;&gt;&gt; foo=B()\n&gt;&gt;&gt; foo.__class__.__mro__[1].msg\n'hehehe'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class A(object):\n    msg = 'hehehe'\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For the 'msg' attribute you would need:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n foo = B()\nbar = super(foo.__class__, foo)\nprint bar.msg\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n foo = B()\nprint foo.__class__.__bases__[0].msg\n// 'hehehe'\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n #for B() you can use __bases__\nprint foo.__class__.__bases__[0].msg\n</code>\n</pre>\n", "senID": 0}, {"text": ["But this is not gonna be easy when there are multiple base classes and/or the depth of hierarchy is not one."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]