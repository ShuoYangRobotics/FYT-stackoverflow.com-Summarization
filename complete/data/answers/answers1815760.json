[[{"text": ["You could use logging and assign those things that should not be printed if QUIET a different log level."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "logging", "tag": "a", "pos": 0, "childList": [{"text": "logging", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/logging.html"}, {"text": "logging", "childNum": 0, "tag": "code", "childList": []}, {"text": "QUIET", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit: THC4K's answer shows an example of how to do this, assuming that all output should be silent if QUIET is set.", "Note that in Python 3 from __future__ import print_function is not necessary:"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "THC4K's answer", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1815760/whats-an-easy-way-to-implement-a-quiet-option-in-a-python-script/1815802#1815802"}, {"text": "QUIET", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "from __future__ import print_function", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n print = logging.info\nlogging.basicConfig(level=logging.WARNING if QUIET else logging.INFO,\n                    format=\"%(message)s\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["For for important output that should not be silenced by --quiet, define e.g.", "iprint:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "--quiet", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "iprint", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n iprint = logging.warning\n</code>\n</pre>\n", "senID": 4}], [{"text": ["can silence all the output by running it as python myscript.py &gt; /dev/null"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "all", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "python myscript.py &gt; /dev/null", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["change the output streams in the script:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if QUIET:\n    sys.stdout = open(os.devnull,'a')\n    sys.stderr = open(os.devnull,'a')\nprint something\n</code>\n</pre>\n", "senID": 2}, {"text": ["use a different print function"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import print_function\nif QUIET:\n    def print(*args):\n        pass\nprint( something )\n</code>\n</pre>\n", "senID": 4}, {"text": ["use logging and loglevels"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import print_function\nimport logging\nlogging.basicConfig(level=logging.INFO, format=\"%(message)s\")\nprint = logging.info\nif QUIET:\n    logging.basicConfig(level=logging.ERROR)\n\nprint( something )\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Why don't you just modify your output function based on whether the program is in quiet mode, so you only do the check once?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if QUIET:\n    def DoOutput(stuff):\n        pass\nelse:\n    def DoOutput(stuff):\n        print(stuff)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or, you could of course put the check for QUIET inside your output function:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "QUIET", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def DoOutput(stuff):\n    if QUIET:\n        print(stuff)\n</code>\n</pre>\n", "senID": 3}, {"text": ["The situation that you've described is actually one of the reasons that Python 3 has changed print from a keyword to an actual function: people's large projects were becoming very dependent on print being a keyword, and then when it came time to modify how output was recorded, it required a massive refactoring; whereas when print is a proper function, you can just redefine it, so that print(foo) would output to a log file, for instance.", "That's why it's better practice to wrap your output/logging in an actual function, rather than having print scattered about your script."], "childNum": 5, "tag": "p", "senID": 4, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "childList": []}, {"text": "print(foo)", "childNum": 0, "tag": "code", "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You could replace stdout with a proxy that filters calls to write or writelines:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class FileProxy(object):\n    def __init__(self, real_file, quiet_flag):\n        self.real_file = real_file\n        self.quiet_flag = quiet_flag\n\n    def write(self, string):\n        if not self.quiet_flag:\n            self.real_file.write(string)\n\n    def writelines(self, strings):\n        if not self.quiet_flag:\n            self.real_file.write(strings)\n\n    def __getattr__(self, name):\n        return getattr(self.file, name)\n\nimport sys\nsys.stdout = FileProxy(sys.stdout, QUIET)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The advantage of this is that it is cross platform (unlike writing to /dev/null) and it will still work for print statements in third-party libraries that you do not have control over.", "You could also refine it further to give more control over exactly what is written, e.g.", "to add a timestamp, or redirect print statements to the logging system."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you want it quick and dirty and you want to get rid of all output then redirect stdout and stderr to /dev/null.", "Put:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "all", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\nsys.stdout = open(\"/dev/null\", \"a\")\nsys.stderr = open(\"/dev/null\", \"a\")\n</pre>\n", "senID": 1}, {"text": ["At the point where you detect --quiet."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n if QUIET:\n   sys.stdout=open(\"/dev/null\",\"w\")\n...\nprint 'my output'\n</code>\n</pre>\n", "senID": 0}, {"text": ["On Windows,  use \"nul\" instead of \"/dev/null\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]