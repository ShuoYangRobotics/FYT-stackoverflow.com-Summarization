[[{"code": "<pre>\n<code>\n import re\n\nastr='My---sun--is------very-big---.'\n\nprint(re.sub('-+','-',astr))\n# My-sun-is-very-big-.\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you want to replace any run of consecutive characters, you can use"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "any", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; a = \"AA---BC++++DDDD-EE$$$$FF\"\n&gt;&gt;&gt; print(re.sub(r\"(.)\\1+\",r\"\\1\",a))\nA-BC+D-E$F\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you only want to coalesce non-word-characters, use"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print(re.sub(r\"(\\W)\\1+\",r\"\\1\",a))\nAA-BC+DDDD-EE$FF\n</code>\n</pre>\n", "senID": 3}, {"text": ["If it's really just hyphens, I recommend unutbu's solution."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["If you really only want to coalesce hyphens, use the other suggestions.", "Otherwise you can write your own function, something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def coalesce(x):\n...     n = []\n...     for c in x:\n...         if not n or c != n[-1]:\n...             n.append(c)\n...     return ''.join(n)\n...\n&gt;&gt;&gt; coalesce('My---sun--is------very-big---.')\n'My-sun-is-very-big-.'\n&gt;&gt;&gt; coalesce('aaabbbccc')\n'abc'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As usual, there's a nice itertools solution, using groupby:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "groupby", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import groupby\n&gt;&gt;&gt; s = 'aaaaa----bbb-----cccc----d-d-d'\n&gt;&gt;&gt; ''.join(key for key, group in groupby(s))\n'a-b-c-d-d-d'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.sub(\"-+\", \"-\", \"My---sun--is------very-big---.\")\n'My-sun-is-very-big-.'\n</code>\n</pre>\n", "senID": 1}, {"text": ["the regular expression \"-+\" will look for 1 or more \"-\"."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "\"-+\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"-\"", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n re.sub('-+', '-', \"My---sun--is------very-big---\")\n</code>\n</pre>\n", "senID": 0}], [{"text": ["How about an alternate without the re module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n '-'.join(filter(lambda w: len(w) &gt; 0, 'My---sun--is------very-big---.'.split(\"-\")))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or going with Tim and FogleBird's previous suggestion, here's a more general method:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def coalesce_factory(x):\n    return lambda sent: x.join(filter(lambda w: len(w) &gt; 0, sent.split(x)))\n\nhyphen_coalesce = coalesce_factory(\"-\")\nhyphen_coalesce('My---sun--is------very-big---.')\n</code>\n</pre>\n", "senID": 3}, {"text": ["Though personally, I would use the re module first :)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "mcpeterson", "tag": "none", "senID": 5}]}], [{"text": ["Another simple solution is the String object's replace function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n while '--' in astr:\n    astr = astr.replace('--','-')\n</code>\n</pre>\n", "senID": 1}]]