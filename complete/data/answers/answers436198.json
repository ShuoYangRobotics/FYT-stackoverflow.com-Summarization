[[{"text": ["You are just supposed to read the file and exec the code yourself.", "2to3 current replaces"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n execfile(\"somefile.py\", local_vars, global_vars)\n</code>\n</pre>\n", "senID": 1}, {"text": ["as"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n exec(compile(open(\"somefile.py\").read(), \"somefile.py\", 'exec'), global_vars, local_vars)\n</code>\n</pre>\n", "senID": 3}, {"text": ["(The compile call isn't strictly needed, but it associates the filename with the code object making debugging a little easier."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["If the script you want to load is in the same directory than the one you run, maybe \"import\" will do the job ?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you need to dynamically import code the built-in function __ import__ and the module imp are worth looking at."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "__ import__", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#__import__"}, {"href": "http://docs.python.org/library/imp.html", "text": "imp", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.path = ['/path/to/script'] + sys.path\n&gt;&gt;&gt; __import__('test')\n&lt;module 'test' from '/path/to/script/test.pyc'&gt;\n&gt;&gt;&gt; __import__('test').run()\n'Hello world!'\n</code>\n</pre>\n", "senID": 2}, {"text": ["test.py:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def run():\n        return \"Hello world!\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you're using Python 3.1 or later, you should also take a look at importlib."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "importlib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/3.1/library/importlib.html"}]}], [{"code": "<pre>\n<code>\n def execfile(file, globals=globals(), locals=locals()):\n    with open(file, \"r\") as fh:\n        exec(fh.read()+\"\\n\", globals, locals)\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you really needed to..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This one is better, since it takes the globals and locals from the caller:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\ndef execfile(filename, globals=None, locals=None):\n    if globals is None:\n        globals = sys._getframe(1).f_globals\n    if locals is None:\n        locals = sys._getframe(1).f_locals\n    with open(filename, \"r\") as fh:\n        exec(fh.read()+\"\\n\", globals, locals)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Note that the above pattern will fail if you're using PEP-263 encoding declarations\nthat aren't ascii or utf-8.", "You need to find the encoding of the data, and encode it \ncorrectly before handing it to exec()."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class python3Execfile(object):\n    def _get_file_encoding(self, filename):\n        with open(filename, 'rb') as fp:\n            try:\n                return tokenize.detect_encoding(fp.readline)[0]\n            except SyntaxError:\n                return \"utf-8\"\n\n    def my_execfile(filename):\n        globals['__file__'] = filename\n        with open(filename, 'r', encoding=self._get_file_encoding(filename)) as fp:\n            contents = fp.read()\n        if not contents.endswith(\"\\n\"):\n            # http://bugs.python.org/issue10204\n            contents += \"\\n\"\n        exec(contents, globals, globals)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you have to use execfile, you have a design problem.", "Of course you can always read the entire file as a string and use the exec statement on it.", "But it would be even better to rethink your application's design so you won't need it in first place."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "execfile", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "exec", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]