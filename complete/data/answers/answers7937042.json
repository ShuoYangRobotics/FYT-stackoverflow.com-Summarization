[[{"code": "<pre>\n<code>\n $ grep '^[[:alpha:]]\\+$' &lt;&lt; EOF\n&gt; !Somejunk)(^%\n&gt; )%(&amp;_\n&gt; this\n&gt; my_file\n&gt; is\n&gt; *(%%$\n&gt; the\n&gt; they're\n&gt; file\n&gt; EOF\nthis\nis\nthe\nfile\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This seems to work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sed '/[^[:alpha:]]/d' source_file\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you want to keep ONLY lines with alpha characters (as the OP requested), then:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ grep -v '[^a-zA-Z]' foo\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or if you only want English characters:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "English", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ grep -v '[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]' foo\n</code>\n</pre>\n", "senID": 3}, {"text": ["But if you just want to remove non-alpha characters, sed will do the job:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "sed", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ cat foo | sed 's/[^a-zA-Z]//g'\n</code>\n</pre>\n", "senID": 5}, {"text": ["Or if you just want to kill binary, non-printable data, use strings:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "binary", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ strings foo\n</code>\n</pre>\n", "senID": 7}], [{"text": ["grep -v and some regex?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "grep -v", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["say,\negrep -v '[^a-zA-Z]'"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "egrep -v '[^a-zA-Z]'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You can use the following command to filter out the required lines:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["grep '^[A-Za-z ]\\+$' file"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "file", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["If you don't even allow spaces in rows, you may omit out space after z."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "z", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["or like this completely in bash"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/bin/bash\n\nfile=$(cat file.txt);\n\nfor line in $file; do\n    if [[ $line =~ ^[a-zA-Z]+$ ]]; then\n        echo $line\n    fi\ndone\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'm going to take the really nooby approach."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = open('file','r')\ny = x.read().split('\\n')\nx.close()\n\nfor z in range (0, len(y)):\n    for a in range (0, len(y[z])):\n        if not y[z][a].isalpha() and not y[z][a].isdigit():\n            y[z][a] = ''\n\nOutputString = '\\n'.join(y)\n</code>\n</pre>\n", "senID": 1}]]