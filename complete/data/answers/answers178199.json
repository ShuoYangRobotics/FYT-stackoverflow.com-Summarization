[[{"text": ["This sounds like the PHP array using named indices is very similar to a python dict:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n shows = [\n  {\"id\": 1, \"name\": \"Sesaeme Street\"},\n  {\"id\": 2, \"name\": \"Dora The Explorer\"},\n]\n</code>\n</pre>\n", "senID": 1}, {"text": ["See http://docs.python.org/tutorial/datastructures.html#dictionaries for more on this."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/tutorial/datastructures.html#dictionaries", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#dictionaries"}]}], [{"text": ["PHP arrays are actually maps, which is equivalent to dicts in Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Thus, this is the Python equivalent:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["showlist = [{'id':1, 'name':'Sesaeme Street'}, {'id':2, 'name':'Dora the Explorer'}]"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "showlist = [{'id':1, 'name':'Sesaeme Street'}, {'id':2, 'name':'Dora the Explorer'}]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Sorting example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["from operator import attrgetter"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "from operator import attrgetter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["showlist.sort(key=attrgetter('id'))"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "showlist.sort(key=attrgetter('id'))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["BUT!", "With the example you provided, a simpler datastructure would be better:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["shows = {1: 'Sesaeme Street', 2:'Dora the Explorer'}"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "shows = {1: 'Sesaeme Street', 2:'Dora the Explorer'}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["@Unkwntech,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What you want is available in the just-released Python 2.6 in the form of named tuples.", "They allow you to do this:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "named tuples", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/whatsnew/2.6.html#new-improved-and-deprecated-modules"}]}, {"code": "<pre>\n<code>\n import collections\nperson = collections.namedtuple('Person', 'id name age')\n\nme = person(id=1, age=1e15, name='Dan')\nyou = person(2, 'Somebody', 31.4159)\n\nassert me.age == me[2]   # can access fields by either name or position\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Yes,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = {\"id\": 1, \"name\":\"Sesame Street\"}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["To assist future Googling, these are usually called associative arrays in PHP, and dictionaries in Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You should read the python tutorial and esp.", "the section about datastructures which also covers dictionaries."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "python tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/"}, {"text": "datastructures", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html"}, {"href": "http://docs.python.org/tutorial/datastructures.html#dictionaries", "text": "dictionaries.", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Not exactly the same syntax, but there are a number of dictionary extensions out there which respect the order in which the key/value pairs have been added.", "E.g.", "seqdict."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "seqdict", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://home.arcor.de/wolfgang.grafen/Python/Modules/seqdict/Seqdict.html"}]}], [{"text": ["Python has lists and dicts as 2 separate data structures.", "PHP mixes both into one.", "You should use dicts in this case. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I did it like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def MyStruct(item1=0, item2=0, item3=0):\n    \"\"\"Return a new Position tuple.\"\"\"\n    class MyStruct(tuple):\n        @property\n        def item1(self):\n            return self[0]\n        @property\n        def item2(self):\n            return self[1]\n        @property\n        def item3(self):\n            return self[2]\n    try:\n        # case where first argument a 3-tuple                               \n        return MyStruct(item1)\n    except:\n        return MyStruct((item1, item2, item3))\n</code>\n</pre>\n", "senID": 1}, {"text": ["I did it also a bit more complicate with list instead of tuple, but I had override the setter as well as the getter."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Anyways this allows:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a = MyStruct(1,2,3)\n    print a[0]==a.item1\n</code>\n</pre>\n", "senID": 4}]]