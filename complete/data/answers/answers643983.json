[[{"text": ["Use the ternary operator(formally conditional expression) in Python 2.5+."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "conditional expression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/expressions.html#boolean-operations"}]}, {"code": "<pre>\n<code>\n x = 1 if foo else 2\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The Ternary operator mentioned is only available from Python 2.5.", "From the WeekeePeedeea:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "mentioned", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/643983/whats-the-best-way-to-replace-the-ternary-operator-in-python/644001#644001"}, {"text": "WeekeePeedeea", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Ternary%5Foperation"}]}], [{"text": ["Duplicate of this one."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this one.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/394809/python-ternary-operator"}]}, {"text": ["I use this (although I'm waiting for somebody to downvote or comment if it is incorrect):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x = foo and 1 or 2\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You could use something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n val = float(raw_input(\"Age: \"))\nstatus = (\"working\",\"retired\")[val&gt;65]\nprint \"You should be\",status\n</code>\n</pre>\n", "senID": 1}, {"text": ["though it is not very pythonic"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pythonic", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["(the other options are closer to C/PERL, but this involves more tuple magic)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I'm still using 2.4 in one of my projects and have come across this a few times.", "The most elegant solution I've see for this is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = {True: 1, False: 2}[foo is not None]\n</code>\n</pre>\n", "senID": 1}, {"text": ["I like this because it represents a more clear boolean test than using a list with the index values 0 and 1 to get your return value."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["A nice python trick is using this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n foo = [\"ifFalse\",\"ifTrue\"][booleanCondition]\n</code>\n</pre>\n", "senID": 1}, {"text": ["It creates a 2 membered list, and the boolean becomes either 0 (false) or 1 (true), which picks the correct member.", "Not very readable, but pythony :)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]