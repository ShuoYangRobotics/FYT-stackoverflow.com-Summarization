[[{"text": ["I happen to do this task.", "You have to install Spreadsheet::ParseExcel and Spreadsheet::WriteExcel modules."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Spreadsheet::ParseExcel", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://search.cpan.org/dist/Spreadsheet-ParseExcel/lib/Spreadsheet/ParseExcel.pm#SYNOPSIS"}, {"href": "http://search.cpan.org/~jmcnamara/Spreadsheet-WriteExcel-2.37/lib/Spreadsheet/WriteExcel.pm", "text": "Spreadsheet::WriteExcel", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n use strict;\nuse warnings;\n\nuse Spreadsheet::ParseExcel::SaveParser;\n\nmy $parser   = Spreadsheet::ParseExcel::SaveParser-&gt;new();\nmy $workbook = $parser-&gt;Parse('Book1.xls');\n\nif ( !defined $workbook ) {\n    die $parser-&gt;error(), \".\\n\";\n}\n\nfor my $worksheet ( $workbook-&gt;worksheets() ) {\n\n    my ( $row_min, $row_max ) = $worksheet-&gt;row_range();\n    my ( $col_min, $col_max ) = $worksheet-&gt;col_range();\n\n    for my $row ( $row_min .. $row_max ) {\n        for my $col ( $col_min .. $col_max ) {\n\n            my $cell = $worksheet-&gt;get_cell( $row, $col );\n            next unless $cell;\n\n            # \"ucfirst lc\" make sure that only the first letter is capitalized\n            # if you dont like that just remove lc\n            $worksheet-&gt;AddCell( $row, $col, ucfirst lc $cell-&gt;value() );\n\n        }\n    }\n}\n\n# ofcouse save your work\n$workbook-&gt;SaveAs('Book2.xls');\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Maybe you just need to udpate to a more recent version.", "I'm using LibreOffice 3.4.4 and I see Format -&gt; Change Case -&gt; Sentence case which I'd say does exactly what you need."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Format -&gt; Change Case -&gt; Sentence case", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Is Perl an option?", "There's a module in the CPAN archive called Spreadsheet::WriteExcel that can also handle OpenOffice spreadsheets too."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Spreadsheet::WriteExcel", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://search.cpan.org/~jmcnamara/Spreadsheet-WriteExcel-2.37/lib/Spreadsheet/WriteExcel.pm"}]}, {"text": ["You basically read in the spreadsheet, search the cells, modify the ones you want, and the create a new spreadsheet with the modified data.", "You cannot directly modify an Excel spreadsheet.", "I don't know if this applies to OpenOffice documents."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "new", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "new", "tag": "em"}]}, {"text": "new", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["I used this before to read and write Excel spreadsheets, but that was a while ago.", "However, this module can handle your situation without first having to save the spreadsheet in CSV format."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Perl one-liner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -pwe 's/(?:^|,)\\s*\\K([a-z])/\\U$1/g;' file.csv &gt; fileout.csv\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can also use in-place edit with the -i switch.", "E.g.", "perl -pi.bak -we ..."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "-i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "perl -pi.bak -we ...", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Longer version, using Text::CSV_XS.", "This module will (probably) treat your csv files with more care."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Text::CSV_XS", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/perldoc?Text%3a%3aCSV_XS"}]}, {"code": "<pre>\n<code>\n use strict;\nuse warnings;\nuse Text::CSV_XS;\n\nmy $csv = Text::CSV_XS-&gt;new({\n        binary  =&gt; 1,\n        eol     =&gt; $/,\n    });\n\nmy $file = shift;\nopen my $fh, '&lt;', $file or die $!;\nwhile (my $row = $csv-&gt;getline($fh)) {\n    s/([a-z])/\\U$1/ for @$row;\n    $csv-&gt;print (*STDOUT, $row);\n}\n</code>\n</pre>\n", "senID": 4}, {"text": ["Run it with: perl script.pl file.csv &gt; fileout.csv"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "perl script.pl file.csv &gt; fileout.csv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["you could do something pretty dodgy with python or any other language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nlastchar = \"\"\norig_csv = open(\"yourfile.csv\", \"r\")\nnew_csv = open(\"newfile.csv\", \"w\")\nfor line in orig_csv:\n    for char in line:\n        if lastchar == \",\":\n            new_csv.write(char.upper())\n        else:\n            new_csv.write(char)\norig_csv.close()\nnew_csv.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["This assumes that none of the fields are enclosed in quotes, because it'll just upcase everything after a comma."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Failing that, you'll want to actually use a csv library."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I have an awk script that will do what you want (I think)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is my test intput (test.input):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n cook, chef, fireman\ncook, chef, fireman\ncook, chef, fireman\ncook, chef, fireman\nhouse, farm, road\n</code>\n</pre>\n", "senID": 2}, {"text": ["My awk script (up.awk):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n # from: http://www.gnu.org/software/gawk/manual/html_node/Join-Function.html\nfunction join(array, start, end, sep, result, i){\n         if (sep == \"\")\n            sep = \" \"\n         else if (sep == SUBSEP) # magic value\n            sep = \"\"\n         result = array[start]\n         for (i = start + 1; i &lt;= end; i++)\n            result = result sep array[i]\n         return result\n}\nBEGIN {\n    FS=\"\\n\";\n}\n{\n    # split input on newline\n    for(i=1;i&lt;=NF;i++) {\n        # split line on the commas\n        size = split($i, s, \",\")\n        for(ii=1;ii&lt;=size;ii++) {\n            # trim whitespace\n            gsub(/[[:space:]]*/,\"\",s[ii])\n            # uppercase first char and glue it back together\n            s[ii] = toupper(substr(s[ii], 0, 1)) substr(s[ii], 2)\n        }\n        # join array back and print it out\n        print join(s, 1, size, \", \")\n    }\n}\n</code>\n</pre>\n", "senID": 4}, {"text": ["How I run the script:\nawk -f up.awk test.input &gt;test.output"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "awk -f up.awk test.input &gt;test.output", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The output in my test.output:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n Cook, Chef, Fireman\nCook, Chef, Fireman\nCook, Chef, Fireman\nCook, Chef, Fireman\nHouse, Farm, Road\n</code>\n</pre>\n", "senID": 7}], [{"text": ["If you are using, or if you upgrade to, OOo 3.3 there are options for this built in.", "Mark all the cells you want to affect, then choose Format -&gt; Change Case -&gt; Sentence case and voila!", "See if that does the trick for you?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "Format -&gt; Change Case -&gt; Sentence case", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Export it as a csv.", "Then do something like this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #psuedo python\nout=\"\"\nnums = [col numbers to capitalize]\nfor line in file.read_csv('input.csv'):\n    for n in nums:\n       line[n] = line[n].capitalize()\n       out += \",\".join(line) + \"\\n\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can write up a small gawk and sed combo to get title case -"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "gawk", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sed", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n gawk -v RS=\"[,\\n]\" -v ORS=\"\" '\n{a=substr($1,1,1); b=substr($1,2); print toupper(a)b\" \"; if (NR%3==0) print \"\\n\"}' file | \nsed -e 's/ /, /g' -e 's/, *$//'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Test:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Test:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [jaypal:~/Temp] cat file\ncook, chef, fireman\ncook, chef, fireman\ncook, chef, fireman\ncook, chef, fireman\nhouse, farm, road\n\n[jaypal:~/Temp] gawk -v RS=\"[,\\n]\" -v ORS=\"\" '\n{a=substr($1,1,1); b=substr($1,2); print toupper(a)b\" \"; if (NR%3==0) print \"\\n\"}' file | \nsed -e 's/ /, /g' -e 's/, *$//'\nCook, Chef, Fireman\nCook, Chef, Fireman\nCook, Chef, Fireman\nCook, Chef, Fireman\nHouse, Farm, Road\n</code>\n</pre>\n", "senID": 3}, {"text": ["Obviously this isn't the perfect solution, you might have to tweak it a little bit depending on how many rows of data you have or want.", "Changes to NR%3 should be good enough."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "NR%3", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["This might work for you:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n cat &lt;&lt;! | sed 's/\\&lt;[^,]*/\\u&amp;/g'\n&gt; cook, chef, fireman\n&gt; head cook, head chef, chief fireman\n&gt; house, farm, road\n&gt; !\nCook, Chef, Fireman\nHead cook, Head chef, Chief fireman\nHouse, Farm, Road\n</code>\n</pre>\n", "senID": 1}, {"text": ["Probably GNU sed specific."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]