[[{"text": ["Yes.", "You cannot create the \"classic\" kernel-mode drivers.", "However, starting with XP, Windows offers a User-Mode Driver Framework.", "They can't do everything, obviously - any driver used in booting the OS obviously has to be kernel-mode.", "But with UMDF, you only need to implement COM components. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "User-Mode Driver Framework", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.microsoft.com/whdc/driver/wdf/UMDF.mspx"}]}, {"text": ["Besides boot-time drivers, you also can't write UMDF drivers that:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Handle interrupts", "tag": "none", "senID": 2}, {"text": "Directly access hardware, such as direct memory access (DMA)", "tag": "none", "senID": 3}, {"text": "have strict timing loops", "tag": "none", "senID": 4}, {"text": "Use nonpaged pool or other resources that are reserved for kernel mode", "tag": "none", "senID": 5}]}], [{"text": ["The definitive answer is not without embedding an interpreter in your otherwise C/assembly driver.", "Unless someone has a framework available, then the answer is no.", "Once you have the interpreter and bindings in place then the rest of the logic could be done in Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, writing drivers is one of the things for which C is best suited.", "I imagine the resulting Python code would look a whole lot like C code and defeat the purpose of the interpreter overhead."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["A good way to gain insight why this is practically impossible is by reading Microsoft's advice on the use of C++ in drivers.", "As a derivative of C, the use of C++ appears to be straightforward.", "In practice, not so. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Microsoft's advice", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.microsoft.com/whdc/driver/kernel/KMcode.mspx"}]}, {"text": ["For instance, you must decide for every function (and really every assembly instruction) whether it's in pageable or non-pageable memory.", "This requires extensions to C, careful use of new C++ features, or in this case a special extension to the Python language and VM.", "In addition, your driver-compatible VM would also have to deal with the different IRQLs - there's a hierarchy of \"levels\" which restrict what you can and cannot do. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Python runs in a virtual machine, so no."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["BUT:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You could write a compiler that translates Python code to machine language.", "Once you've done that, you can do it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I don't know the restrictions on drivers on windows (memory allocation schemes, dynamic load of libraries and all), but you may be able to embed a python interpreter in your driver, at which point you can do whatever you want.", "Not that I think it is a good idea :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Never say never but eh.. no"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You might be able to hack something together to run user-mode parts of drivers in python.", "But kernel-mode stuff can only be done in C or assembly."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["No they cannot.", "Windows drivers must be written in a language that can "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then again, there's nothing stopping you from writing a compiler that translates python to machine code ;)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Yes you can :)\nJust you need know deeper python and C \nyou can do anything with python"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]