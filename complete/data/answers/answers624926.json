[[{"text": ["Just check if the object has a &#x5f;&#x5f;call&#x5f;&#x5f; attribute.", "Don't use callable(), as this is being deprecated.", "You can check this with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n hasattr(obj, '__call__')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Builtin types that don't have constructors (e.g.", "functions, generators, methods) are in the types module.", "You can use types.FunctionType in an isinstance call."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "types", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "types.FunctionType", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n In [1]: import types\nIn [2]: types.FunctionType\nOut[2]: &lt;type 'function'&gt;\nIn [3]: def f(): pass\n   ...:\nIn [4]: isinstance(f, types.FunctionType)\nOut[4]: True\nIn [5]: isinstance(lambda x : None, types.FunctionType)\nOut[5]: True\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The following should return a boolean:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n callable(x)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["callable(x) will return true if the object passed can be called in Python, but the function does not exist in Python 3.0, and properly speaking will not distinguish between:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "callable(x)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "will", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n class A(object):\n    def __call__(self):\n        return 'Foo'\n\ndef B():\n    return 'Bar'\n\na = A()\nb = B\n\nprint type(a), callable(a)\nprint type(b), callable(b)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You'll get &lt;class 'A'&gt; True and &lt;type function&gt; True as output."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "&lt;class 'A'&gt; True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "&lt;type function&gt; True", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["isinstance works perfectly well to determine if something is a function (try isinstance(b, types.FunctionType)); if you're really interested in knowing if something can be called, you can either use hasattr(b, '__call__') or just try it."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "isinstance", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "isinstance(b, types.FunctionType)", "childNum": 0, "tag": "code", "childList": []}, {"text": "hasattr(b, '__call__')", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n test_as_func = True\ntry:\n    b()\nexcept TypeError:\n    test_as_func = False\nexcept:\n    pass\n</code>\n</pre>\n", "senID": 4}, {"text": ["This, of course, won't tell you whether it's callable but throws a TypeError when it executes, or isn't callable in the first place.", "That may not matter to you."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "TypeError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["A function is just a class with a __call__ method, so you can do"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__call__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n hasattr(obj, '__call__')\n</code>\n</pre>\n", "senID": 1}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; hasattr(x, '__call__')\nTrue\n\n&gt;&gt;&gt; x = 2\n&gt;&gt;&gt; hasattr(x, '__call__')\nFalse\n</code>\n</pre>\n", "senID": 3}, {"text": ["That is the \"best\" way of doing it, but depending on why you need to know if it's callable or note, you could just put it in a try/execpt block:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n try:\n    x()\nexcept TypeError:\n    print \"was not callable\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["It's arguable if try/except is more Python'y than doing if hasattr(x, '__call__'): x()..", "I would say hasattr is more accurate, since you wont accidently catch the wrong TypeError, for example:"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "if hasattr(x, '__call__'): x()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "hasattr", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def x():\n...     raise TypeError\n... \n&gt;&gt;&gt; hasattr(x, '__call__')\nTrue # Correct\n&gt;&gt;&gt; try:\n...     x()\n... except TypeError:\n...     print \"x was not callable\"\n... \nx was not callable # Wrong!\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Python's 2to3 tool (http://docs.python.org/dev/library/2to3.html) suggests:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import collections\nisinstance(obj, collections.Callable)\n</code>\n</pre>\n", "senID": 1}, {"text": ["It seems this was chosen instead of the hasattr(x, 'call') method because of http://bugs.python.org/issue7006."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "hasattr(x, 'call')", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "call", "tag": "strong"}]}, {"text": "call", "childNum": 0, "tag": "strong", "childList": []}, {"href": "http://bugs.python.org/issue7006", "text": "http://bugs.python.org/issue7006", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Try using callable(x)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "callable(x)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Since Python 2.1 you can import isfunction from the inspect module."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Since Python 2.1", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/inspect.html#module-inspect"}, {"text": "isfunction", "childNum": 0, "tag": "code", "childList": []}, {"text": "inspect", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from inspect import isfunction\n&gt;&gt;&gt; def f(): pass\n&gt;&gt;&gt; isfunction(f)\nTrue\n&gt;&gt;&gt; isfunction(lambda x: x)\nTrue\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Python3 I came up with type (f) == type (lambda x:x) which yields True if f is a function and False if it is not.", "But I think I prefer isinstance (f, types.FunctionType), which feels less ad hoc.", "I wanted to do type (f) is function, but that doesn't work. "], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "type (f) == type (lambda x:x)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "f", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "isinstance (f, types.FunctionType)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "type (f) is function", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}]]