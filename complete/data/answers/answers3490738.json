[[{"text": ["You can use the collections.Counter "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "collections.Counter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/library/collections.html#collections.Counter"}]}, {"code": "<pre>\n<code>\n counter = collections.Counter()\nfor d in dict1: \n    counter.update(d)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or, if you prefer oneliners:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n functools.reduce(operator.add, map(collections.Counter, dict1))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["A little ugly, but a one-liner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dictf = reduce(lambda x, y: dict((k, v + y[k]) for k, v in x.iteritems()), dict1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Leveraging sum() should get better performance when adding more than a few dicts"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sum()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dict1 = [{'a':2, 'b':3},{'a':3, 'b':4}]\n&gt;&gt;&gt; from operator import itemgetter\n&gt;&gt;&gt; {k:sum(map(itemgetter(k), dict1)) for k in dict1[0]}        # Python2.7+\n{'a': 5, 'b': 7}\n&gt;&gt;&gt; dict((k,sum(map(itemgetter(k), dict1))) for k in dict1[0])  # Python2.6\n{'a': 5, 'b': 7}\n</code>\n</pre>\n", "senID": 1}, {"text": ["adding Stephan's suggestion"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; {k: sum(d[k] for d in dict1) for k in dict1[0]}            # Python2.7+\n{'a': 5, 'b': 7}\n&gt;&gt;&gt; dict((k, sum(d[k] for d in dict1)) for k in dict1[0])      # Python2.6\n{'a': 5, 'b': 7}\n</code>\n</pre>\n", "senID": 3}, {"text": ["I think Stephan's version of the Python2.7 code reads really nicely"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The following code shows one way to do it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict1 = [{'a':2, 'b':3},{'a':3, 'b':4}]\n\nfinal = {}\nfor k in dict1[0].keys():           # Init all elements to zero.\n    final[k] = 0\nfor d in dict1:\n    for k in d.keys():\n        final[k] = final[k] + d[k]  # Update the element.\n\nprint final\n</code>\n</pre>\n", "senID": 1}, {"text": ["This outputs:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n {'a': 5, 'b': 7}\n</code>\n</pre>\n", "senID": 3}, {"text": ["as you desired."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Or, as inspired by kriss, better but still readable:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n dict1 = [{'a':2, 'b':3},{'a':3, 'b':4}]\n\nfinal = {}\nfor d in dict1:\n    for k in d.keys():\n        final[k] = final.get(k,0) + d[k]\n\nprint final\n</code>\n</pre>\n", "senID": 6}, {"text": ["I pine for the days of the original, readable Python :-)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["This might help:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def sum_dict(d1, d2):\n    for key, value in d1.items():\n        d1[key] = value + d2.get(key, 0)\n    return d1\n\n&gt;&gt;&gt; dict1 = [{'a':2, 'b':3},{'a':3, 'b':4}]\n&gt;&gt;&gt; reduce(sum_dict, dict1)\n{'a': 5, 'b': 7}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Python 2.7 you can replace the dict with a collections.Counter object.", "This supports addition and subtraction of Counters."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "collections.Counter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#collections.Counter"}]}]]