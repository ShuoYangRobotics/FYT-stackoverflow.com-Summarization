[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; class Foo:\n...     a=1\n... \n&gt;&gt;&gt; f1=Foo()\n&gt;&gt;&gt; f2=Foo()\n&gt;&gt;&gt; f1.a    # no instance attribute here in f1, so look up class attribute in Foo\n1\n&gt;&gt;&gt; f1.a=5  # create new instance attribute in f1\n&gt;&gt;&gt; f1.a    # instance attribute here. Great, let's use this.\n5\n&gt;&gt;&gt; f2.a    # no instance attribute in f2, look up class attribute in Foo\n1\n&gt;&gt;&gt;\n&gt;&gt;&gt; class Foo:\n...     a=[]\n... \n&gt;&gt;&gt; f1=Foo()\n&gt;&gt;&gt; f2=Foo()\n&gt;&gt;&gt; f1.a            # no instance attribute - look up class attribute in Foo\n[]\n&gt;&gt;&gt; f1.a.append(5)  # no instance attribute, modify class attribute in-place\n&gt;&gt;&gt; f1.a            # no instance attribute - look up class attribute in Foo\n[5]\n&gt;&gt;&gt; f2.a            # same here\n[5]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You're not doing the same thing in your second example.", "In you first example, you are assigning f1.a a new value:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "f1.a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n f1.a = 5\n</code>\n</pre>\n", "senID": 1}, {"text": ["In your second example, you are simply extending a list:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n f1.a.append(5)\n</code>\n</pre>\n", "senID": 3}, {"text": ["This doesn't change what f1.a is pointing to.", "If you were instead to do this:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "f1.a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n f1.a = [5]\n</code>\n</pre>\n", "senID": 5}, {"text": ["You would find that this behaves the same as your first example."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["But consider this example:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f1=Foo()\n&gt;&gt;&gt; f2=Foo()\n&gt;&gt;&gt; Foo.a = 5\n&gt;&gt;&gt; f1.a\n5\n&gt;&gt;&gt; f2.a\n5\n</code>\n</pre>\n", "senID": 8}, {"text": ["In this example, we're actually changing the value of the class attribute,\nand the change is visible in all instances of the class.", "When you\ntype:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "class", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n f1.a = 5\n</code>\n</pre>\n", "senID": 10}, {"text": ["You're overriding the class attribute with an instance attribute."], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "class", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "instance", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["Python's class attributes and object attributes are stored in separate dictionaries.", "For the object f1, these can be accessed via, respectively, f1.__class__.__dict__ and f1.__dict__.", "Executing print f1.__class__ is Foo will output True."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "dictionaries", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#dictionaries"}, {"text": "f1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "f1.__class__.__dict__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "f1.__dict__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "print f1.__class__ is Foo", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["When you reference the attribute of an object, Python first tries to look it up in the object dictionary.", "If it does not find it there, it checks the class dictionary (and so on up the inheritance heirarchy)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["When you assign to f1.a, you are adding an entry to the object dictionary for f1.", "Subsequent lookups of f1.a will find that entry.", "Lookups of f2.a will still find the class attribute \u2014 the entry in the class attribute dictionary."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "f1.a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "f1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "f1.a", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "f2.a", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["You can cause the value of f1.a to revert to 1 by deleting it:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "f1.a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n del f1.a\n</code>\n</pre>\n", "senID": 4}, {"text": ["This will remove the entry for a in the object dictionary of f1, and subsequent lookups will continue on to the class dictionary.", "So, afterwards, print f1.a will output 1."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "f1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "print f1.a", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["What happens is the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When you instantiate a new object f1 = Foo(), it does not have any attributes of its own.", "Whenever you try to access for example f1.a, you get redirected to the class\u2019s Foo.a:"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "f1 = Foo()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "f1.a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Foo.a", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n print f1.__dict__\n{}\n\nprint f1.a\n1\n</code>\n</pre>\n", "senID": 2}, {"text": ["However, if you set f1.a = 5, the instance gets a new attribute of that value:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "set", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "f1.a = 5", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n print f1.__dict__\n{'a': 5}\n</code>\n</pre>\n", "senID": 4}, {"text": ["The class definition is untouched by this, as are any other instances."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["In the second example, you do not reassign anything.", "With append you are only using that very same list which was defined in the class.", "Therefore, your instance still refers to that list, as do all other instances."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "append", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["When you assign an attribute in python, it doesn't matter where that attribute might already be defined, the new assignment is always applied to the object assigned to.", "When you say"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f1.a=5\n</code>\n</pre>\n", "senID": 1}, {"text": ["The object that has the attribute here is the instance, so it's the instance that gets the new value.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["My advice: to understand such cases, do tests using id, and __dict__ too :"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "id", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class Foo:\n    a=1\n\n# Foo.a == 1\n# id(Foo.a) == 10021840\n# Foo.__dict__ == {'a': 1, '__module__': '__main__', '__doc__': None}\n\n\nf1 = Foo()\n\n# f1.a == 1\n# id(f1.a) == 10021840\n# f1.__dict__ == {}\n\nf2 = Foo()\n\n# f2.a == 1\n# id(f2.a) == 10021840\n# f2.__dict__ == {}\n\nf1.a = 5\n\n# f1.a == 5\n# id(f1.a) == 10021792\n# f1.__dict__ == {'a': 5}\n\n# f2.a == 1\n# id(f2.a) == 10021840\n# f2.__dict__ == {}\n</code>\n</pre>\n", "senID": 1}, {"text": ["This shows that as long as the instruction f1.a = 5 has not been executed, the instance f1 doesn't have a personal attribute a. "], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "f1.a = 5", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "f1", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Then, why does the instruction print f1.a executed before f1.a = 5 produce 1?", "That's because:  "], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "print f1.a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "f1.a = 5", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}]]