[[{"text": ["You can use get()"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "get()", "tag": "a", "pos": 0, "childList": [{"text": "get()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#dict.get"}, {"text": "get()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n value = d.get(key)\n</code>\n</pre>\n", "senID": 1}, {"text": ["which will return None if key is not in d or provide a different default value:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "key is not in d", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n value = d.get(key, \"empty\")\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Use dict.get"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "dict.get", "tag": "a", "pos": 0, "childList": [{"text": "dict.get", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#dict.get"}, {"text": "dict.get", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Wonder no more.", "It's built into the language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n>>> help(dict)\n\n    Help on class dict in module builtins:\n\n    class dict(object)\n     |  dict() -> new empty dictionary\n     |  dict(mapping) -> new dictionary initialized from a mapping object's\n     |      (key, value) pairs\n    ...\n     |  \n     |  get(...)\n     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.\n     |  \n    ...\n</pre>\n", "senID": 1}], [{"text": ["You should use the get() method from the dict class"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = {}\nr = d.get( 'missing_key', None )\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will result in r == None.", "If the key isn't found in the dictionary, the get function returns the second argument."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you want a more transparent solution, you can subclass dict to get this behavior:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class NoneDict(dict):\n    def __getitem__(self, key):\n        return dict.get(self, key)\n\n&gt;&gt;&gt; foo = NoneDict([(1,\"asdf\"), (2,\"qwerty\")])\n&gt;&gt;&gt; foo[1]\n'asdf'\n&gt;&gt;&gt; foo[2]\n'qwerty'\n&gt;&gt;&gt; foo[3] is None\nTrue\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As others have said above, you can use get()."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But to check for a key, you can also do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n d = {}\nif 'keyname' in d:\n\n    # d['keyname'] exists\n    pass\n\nelse:\n\n    # d['keyname'] does not exist\n    pass\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I usually use a defaultdict for situations like this.", "You supply a factory method that takes no arguments and creates a value when it sees a new key.", "It's more useful when you want to return something like an empty list on new keys (see the examples)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "defaultdict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#defaultdict-objects"}, {"text": "see the examples", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#defaultdict-examples"}]}, {"code": "<pre>\n<code>\n from collections import defaultdict\nd = defaultdict(lambda : None)\nprint d['new_key'] #prints 'None'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use a dict object's get() method, as others have already suggested.", "Alternatively, depending on exactly what you're doing, you might be able use a try/except suite like this:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "get()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "try/except", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n   &lt;to do something with d[key]&gt;\nexcept KeyError:\n   &lt;deal with it not being there&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which is considered to be a very \"Pythonic\" approach to handling the case."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]