[[{"text": ["hm, try something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import datetime, calendar\ndate1 = datetime.date(year1, month1, day1) # month and day are 1-base\ndate2 = datetime.date(year2, month2, day2)\ndays_in_first_year = (datetime.date(year1,12,31)-date1).days\ndays_in_last_year = (date2 - datetime.date(year2, 1, 1)).days\nif year1 != year2:\n    n_days_list = [days_in_first_year]\n    for year in range(year1+1, year2): n_days_list.append(365 + (1*calendar.isleap(year)))\n    n_days_list.append(days_in_last_year)\nelse: n_days_list = [days_in_first_year + days_in_last_year]\n</code>\n</pre>\n", "senID": 1}, {"text": ["haven't tested this, might be some off-by-one errors; make sure it does what you expect."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["edit: correct the boundaries of the range() call, correctly handle year1 == year2"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; start_date = datetime.datetime(2006, 7, 3)\n&gt;&gt;&gt; end_date = datetime.datetime(2012, 12, 21)\n&gt;&gt;&gt; years = range(start_date.year, end_date.year + 1)\n&gt;&gt;&gt; start, end = start_date, end_date + datetime.timedelta(1)\n&gt;&gt;&gt; for year in years:\n...     year_start = datetime.datetime(year, 1, 1, 0, 0)\n...     year_end = datetime.datetime(year + 1, 1, 1, 0, 0)\n...     print(year, min(end, year_end) - max(start, year_start))\n... \n2006 182 days, 0:00:00\n2007 365 days, 0:00:00\n2008 366 days, 0:00:00\n2009 365 days, 0:00:00\n2010 365 days, 0:00:00\n2011 365 days, 0:00:00\n2012 356 days, 0:00:00\n</code>\n</pre>\n", "senID": 0}, {"text": ["UPDATE: You should probably add a datetime.timedelta(1) to the end date, because otherwise you'd be off with one day at the end.", "Fixed.", "But that depends on whether you want to include it or exclude it."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "datetime.timedelta(1)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n from datetime import date\n\nDATE_END = date(2006, 11, 17)\n\ndef get_days(date_start):\n</code>\n</pre>\n", "senID": 0}, {"code": "<pre>\n<code>\n starting_dates = [\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n print map(get_days, starting_dates)\n</code>\n</pre>\n", "senID": 2}], [], [{"text": ["Use this pseudocode to see if a year is a leap-year or not"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if year modulo 400 is 0\n       then is_leap_year\nelse if year modulo 100 is 0\n       then not_leap_year\nelse if year modulo 4 is 0\n       then is_leap_year\nelse\n       not_leap_year\n</code>\n</pre>\n", "senID": 1}, {"text": ["to create a list of all leap-years and the years that's not."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can have something simply by doing this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; d1 = datetime.strptime(\"30 Nov 00\", \"%d %b %y\")\n&gt;&gt;&gt; (datetime.now() - d1).days\n3907\n</code>\n</pre>\n", "senID": 1}]]