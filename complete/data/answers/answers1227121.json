[[{"text": ["As usual with Python, it's kiss :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Test(object) :\n\n    def __init__(self, attr1, attr2) :\n        self.attr1 = attr1\n        self.attr2 = attr2\n\n    def __str__(self) :\n        return str(self.__dict__)\n\n    def __eq__(self, other) : \n        return self.__dict__ == other.__dict__\n\nt1 = Test(\"foo\", 42)\nt2 = Test(\"foo\", 42)\nt3 = Test(\"bar\", 42)\n\nprint t1, t2, t3\nprint t1 == t2\nprint t2 == t3\n</code>\n</pre>\n", "senID": 1}, {"text": ["It outputs :"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n {'attr2': 42, 'attr1': 'foo'} {'attr2': 42, 'attr1': 'foo'} {'attr2': 42, 'attr1': 'bar'}\nTrue\nFalse\n</code>\n</pre>\n", "senID": 3}, {"text": ["N.B : be aware that before Python 3.0, you are more likely to use __cmp__ instead of __eq__, working the same way."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "__cmp__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__eq__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You override the rich comparison operators in your object."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "rich comparison operators", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html"}]}, {"code": "<pre>\n<code>\n class MyClass:\n def __lt__(self, other):\n      # return comparison\n def __le__(self, other)\n      # return comparison\n def __eq__(self, other)\n      # return comparison\n def __ne__(self, other)\n      # return comparison\n def __gt__(self, other)\n      # return comparison\n def __ge__(self, other)\n      # return comparison\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Implement the __eq__ method in your class; something like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__eq__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def __eq__(self, other):\n    return self.path == other.path and self.title == other.title\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: if you want your objects to compare equal if and only if they have equal instance dictionaries:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def __eq__(self, other):\n    return self.__dict__ == other.__dict__\n</code>\n</pre>\n", "senID": 3}], [{"text": ["When comparing instances of objects, the cmp function is called."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "cmp", "tag": "a", "pos": 0, "childList": [{"text": "cmp", "tag": "strong"}], "childNum": 1, "href": "http://docs.python.org/reference/datamodel.html#object.%5F%5Fcmp%5F%5F"}, {"text": "cmp", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["If the == operator is not working for you by default, you can always redefine the cmp function for the object."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "cmp", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["As has been pointed out, the cmp function is deprecated since 3.0.", "Instead you should use the \u201crich comparison\u201d methods."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "\u201crich comparison\u201d", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#object.%5F%5Flt%5F%5F"}]}], [{"text": ["You can speed things little by using a Hash"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class ErrorDocument(object):\n    def __init__(self, path, name):\n        self.path = path\n        self.name = name\n        self.uid = hash(path + name)\n\n    def __eq__(self, other):\n        return self.uid == other.uid\n</code>\n</pre>\n", "senID": 1}, {"text": ["This of course will only work to compare ErrorDocument objects."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I don't have enough points to comment other posts, but surely you DON'T want to \"compare\" two objects by just comparing their hashes.", "That would mean that different objects sometimes compare identical!", "A sure invitation to subtle bugs!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "DON'T", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Instance of a class when compared with == comes to non-equal.", "The best way is to ass the cmp function to u r class which will do the stuff. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "cmp", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["If u want to do comparison by  the content u can simply use cmp(obj1,obj2)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In u r case cmp(doc1,doc2) It will return -1 if the content wise thy are same."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]