[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; value=\"ab3asdf\"\n&gt;&gt;&gt; any(c.isdigit() for c in value)\nTrue\n&gt;&gt;&gt; value=\"asf\"\n&gt;&gt;&gt; any(c.isdigit() for c in value)\nFalse\n\n\n\n\n&gt;&gt;&gt; value = 'ad.41.bd'\n&gt;&gt;&gt; any(map(lambda c:c.isdigit(),value))\nTrue\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; value=\"1\"+\"a\"*10**6\n&gt;&gt;&gt; any(map(lambda c:c.isdigit(),value))\nTrue\n&gt;&gt;&gt; from itertools import imap\n&gt;&gt;&gt; any(imap(lambda c:c.isdigit(),value))\nTrue\n</code>\n</pre>\n", "senID": 2}, {"text": ["map took 1 second (on old python)\nimap was instant because imap returns a generator.", "note often in the real world there is a higher probability of the number being at the end of the file name."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["What about this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nif not re.search('\\d+', value):\n    # no numbers\nelse:\n    # numbers present\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n from string import digits\ndef containsnumbers(value):\n    return any(char in digits for char in value)\n</code>\n</pre>\n", "senID": 0}, {"text": ["And just for thoroughness:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["any(c.isdigit()):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit.timeit('any(c.isdigit() for c in value)', setup='value = \"abcd1\"')\n1.4080650806427002\n</code>\n</pre>\n", "senID": 3}, {"text": ["any(c in digits):"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit.timeit('any(c in digits for c in value)', setup='from string import digits; value = \"abcd1\"')\n1.392179012298584\n</code>\n</pre>\n", "senID": 5}, {"text": ["re.search (1 or more digits):"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit.timeit(\"re.search('\\d+', value)\", setup='import re; value = \"abcd1\"')\n1.8129329681396484\n</code>\n</pre>\n", "senID": 7}, {"text": ["re.search (stop after one digit):"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit.timeit(\"re.search('\\d', value)\", setup='import re; value = \"abcd1\"')\n1.599431037902832\n</code>\n</pre>\n", "senID": 9}, {"text": ["re.match (non-greedy):"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit.timeit(\"re.match(r'^.*?\\d', value)\", setup='import re; value = \"abcd1\"')\n1.6654980182647705\n</code>\n</pre>\n", "senID": 11}, {"text": ["re.match(greedy):"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit.timeit(\"re.match(r'^.*\\d', value)\", setup='import re; value = \"abcd1\"')\n1.5637178421020508\n</code>\n</pre>\n", "senID": 13}, {"text": ["any(map()):"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit.timeit(\"any(map(lambda c:c.isdigit(),value))\", setup='value = \"abcd1\"')\n1.9165890216827393\n</code>\n</pre>\n", "senID": 15}, {"text": ["any(imap()):"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit.timeit(\"any(imap(lambda c:c.isdigit(),value))\", setup='from itertools import imap;value = \"abcd1\"')\n1.370448112487793\n</code>\n</pre>\n", "senID": 17}, {"text": ["Generally, the less complex regexps ran more quickly.", "c.isdigit() and c in digits are almost equivalent.", "re.match is slightly faster than re.search.", "map() is the slowest solution, but imap() was the fastest (but within rounding error of any(c.isdigit) and any(c in digits)."], "childNum": 8, "tag": "p", "senID": 18, "childList": [{"text": "c.isdigit()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "c in digits", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "re.match", "childNum": 0, "tag": "code", "childList": []}, {"text": "re.search", "childNum": 0, "tag": "code", "childList": []}, {"text": "map()", "childNum": 0, "tag": "code", "childList": []}, {"text": "imap()", "childNum": 0, "tag": "code", "childList": []}, {"text": "any(c.isdigit)", "childNum": 0, "tag": "code", "childList": []}, {"text": "any(c in digits)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can use a regular expression:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "regular expression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}, {"code": "<pre>\n<code>\n import re\n# or if re.search(r'\\d', value):\nif re.match(r'^.*?\\d', value):\n    # numbers present\nelse:\n    # no numbers\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n if not any(c.isdigit() for c in value)\n    # no numbers\nelse:\n    # numbers present\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you want to know how big is the difference, you can use re.sub()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]