[[{"code": "<pre>\n<code>\n awk 'NR==1{for(i=1;i&lt;=NF;i++)n[i]=$i}; NR==3{for(i=1;i&lt;=NF;i++){if($i~/florida|texas/)print $i\"\\t\"n[i];}}' yourFile\n</code>\n</pre>\n", "senID": 0}, {"text": ["see the test below:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n kent$  echo \"Ron Rob rock bammy\nm f m f\nflorida Atlanta florida texas\"|awk 'NR==1{for(i=1;i&lt;=NF;i++)n[i]=$i}; NR==3{for(i=1;i&lt;=NF;i++){if($i~/florida|texas/)print $i\"\\t\"n[i];}}'\n</code>\n</pre>\n", "senID": 2}, {"text": ["output"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "output", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n florida Ron\nflorida rock\ntexas   bammy\n</code>\n</pre>\n", "senID": 4}, {"text": ["EDIT"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n kent$  echo \"Ron  Rob  rock bammy\nm    f   m  f\nflorida(8)  Atlanta  florida(8) texas(2;7)\"|awk 'NR==1{for(i=1;i&lt;=NF;i++)n[i]=$i}; NR==3{for(i=1;i&lt;=NF;i++){if($i~/florida\\(8\\)|texas\\(2;7\\)/)print $i\"\\t\"n[i];}}'\n</code>\n</pre>\n", "senID": 6}, {"text": ["output:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n florida(8)      Ron\nflorida(8)      rock\ntexas(2;7)      bammy\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Yet another Perl solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -ane 'push@c,@F}{print grep{/^(florida|atlanta)\\t/i}map{\"$c[$_+$#c/3*2+1]\\t$c[$_]\\n\"}0..$#c/3'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or as a script"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nmy (@data, @rows);\n\npush @data, split/\\s+/ while (&lt;&gt;);\n\nfor (0 .. $#data/3) {\n    my $name = $data[$_];\n    my $location = $data[$_+$#data/3*2+1];\n    push @rows, \"$location\\t$name\\n\" if $location =~ /^(florida|atlanta)$/i;\n}\n\nprint join(\"\", @rows);\n</code>\n</pre>\n", "senID": 3}, {"text": ["with an if condition inside the loop instead of the separate grep."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "grep", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["My approach is to flatten all three lines into a single array and use for (0 .. $#data/3) to loop over the indexes corresponding to the names from the first line and get the location from the matching column with $data[$_+$#data/3*2+1]."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "for (0 .. $#data/3)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "$data[$_+$#data/3*2+1]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Try this in Python"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x=\"Ron &lt;t&gt; Rob &lt;t&gt; rock &lt;t&gt; bammy\\nm   &lt;t&gt; f &lt;t&gt;  m &lt;t&gt; f\\nflorida &lt;t&gt; Atlanta &lt;t&gt; florida &lt;t&gt; texas\"\nprint '\\n'.join(' &lt;t&gt; '.join([b,a]) for a,b in zip(x.splitlines()[0].split(),x.splitlines()[2].split()) if b in ['florida','texas'])\n\nflorida &lt;t&gt; Ron\nflorida &lt;t&gt; rock\ntexas &lt;t&gt; bammy\n</code>\n</pre>\n", "senID": 1}, {"text": ["in-case you want to read from a file say data.txt you can do so as"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n fin=open('data.txt')\ndata=fin.read()\n</code>\n</pre>\n", "senID": 3}, {"text": ["then you can apply the above"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print '\\n'.join(' &lt;t&gt; '.join([b,a]) for a,b in zip(data.splitlines()[0].split(),data.splitlines()[2].split()) if b in ['florida','texas'])\n</code>\n</pre>\n", "senID": 5}, {"text": ["Note** Split the lines and Zip the 1st and the 3rd.", "Now for every tuple in the zipped list search for only those item where the second item in the tuple (i.e.", "country) is within the list ['florida','texas']"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Here's a Perl solution that works, but it's a bit more convoluted that I'd like.", "You'd probably be better off putting this data into a database."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse 5.010;\n\nmy %rows = (\n  name =&gt; 1,\n  location =&gt; 3,\n);\n\nmy %location = map { $_ =&gt; 1 } qw[florida texas];\n\nmy @names;\n\nwhile (&lt;DATA&gt;) {\n  next unless grep { $_ == $. } values %rows;\n\n  chomp;\n\n  if ($. == $rows{name}) {\n    @names = split;\n  }\n\n  if ($. == $rows{location}) {\n    my @locs = split;\n\n    for my $x (0 .. $#locs) {\n      if ($location{lc $locs[$x]}) {\n        say ucfirst $locs[$x]. \"\\t$names[$x]\";\n      }\n    }\n    last;\n  }\n}\n\n__END__\nRon     Rob     rock    bammy\nm       f       m       f\nflorida         Atlanta florida texas\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n #!/usr/bin/env perl\nuse strict;\nuse warnings;\n\nmy $pat = shift;\n\nsub interleave($$){\n    my ($foo,$bar) = @_;\n    return map { ( $_ , shift @{$bar} ) } @{$foo};\n}\n\nmy $n=0;\nmy(@p,%h);\nwhile(&lt;&gt;){\n    chomp;\n    if($n%3==0){\n            @p = split /\\t/, $_;\n    } elsif($n%3==2){\n            my @l = split /\\t/, $_;\n            my %kv = interleave(\\@p, \\@l);\n            foreach my $k (keys %kv){\n                    push(@{$h{$kv{$k}}}, $k);\n            }\n    }\n    $n++;\n}\n\nforeach my $loc (keys %h){\n    if(!defined $pat || $loc =~ /$pat/i){\n            foreach my $name (@{$h{$loc}}){\n                    print ucfirst($loc), \"\\t\", ucfirst($name), \"\\n\";\n            }\n    }\n}\n</code>\n</pre>\n", "senID": 0}, {"text": ["And then call it"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n perl extract.pl 'texas|florida' &lt; data\n</code>\n</pre>\n", "senID": 2}, {"text": ["\"Oneliner\" form:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n perl -ne 'BEGIN{$p=shift||\"^\";}chomp;if($n++%3!=1){unless(@p){@p=split/\\t/,$_;next;}my %kv = map { ( $_ , shift @p ) } split(/\\t/, $_);map { push(@{$h{$_}}, $kv{$_}); } keys %kv;}END{map{for my$nm(@{$h{$_}}){print ucfirst($_),\"\\t\",ucfirst($nm),\"\\n\";}}grep{/$p/i}keys%h;}' 'florida|texas' &lt; data\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Sounds to me like this is a job for Text::CSV_XS.", "It is not a good idea to split on whitespace, as many seem to be suggesting, as that will fail for anything but simplified data."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Text::CSV_XS", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/perldoc?Text%3a%3aCSV_XS"}, {"text": "not", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Code:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Code:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n use strict;\nuse warnings;\nuse Text::CSV_XS;\n\nmy $csv = Text::CSV_XS-&gt;new( {\n        sep_char    =&gt; \"\\t\",\n        binary      =&gt; 1,\n    });\n\n# get array refs to each row, with appropriate name\n# For larger data sets, using an array to hold the array refs would be better\nmy $name       = $csv-&gt;getline(*DATA);\nmy $gender     = $csv-&gt;getline(*DATA);\nmy $city       = $csv-&gt;getline(*DATA);\n\nfor (keys @$city) {   # lists the column numbers\n    if ($city-&gt;[$_] =~ /florida|texas/i) {\n        print \"$city-&gt;[$_]\\t$name-&gt;[$_]\\n\";\n    }\n}\n\n__DATA__\nRon Rob rock    bammy\nm   f   m   f\nflorida Atlanta florida texas\n</code>\n</pre>\n", "senID": 2}, {"text": ["Output:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Output:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n florida Ron\nflorida rock\ntexas   bammy\n</code>\n</pre>\n", "senID": 4}]]