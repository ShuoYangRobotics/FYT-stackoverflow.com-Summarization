[[{"text": ["It sounds like the environment you apache process is running under is a little unusual.", "For whatever reason, svn seems to think the user configuration files it needs are in /root.", "You can avoid having svn use the root versions of the files by specifying on the command line which config directory to use, like so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n svn --config-dir /home/myuser/.subversion checkout http://example.com/path\n</code>\n</pre>\n", "senID": 1}, {"text": ["While not fixing your enviornment, it will at least allow you to have your script run properly..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Try granting the Apache user (the user that the apache service is running under) r+w permissions on that file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Doesn't Apache's error log give you a clue?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Maybe it has to do with SELinux.", "Check /var/log/audit/audit.log and adjust your SELinux configuration accordingly, if the audit.log file indicates that it's SELinux which denies Apache access."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The Permission Denied error is showing that the script is running with root credentials, because it's looking in root's home dir for files."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I suggest you change the hook script to something that does:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n id &gt; /tmp/id\n</code>\n</pre>\n", "senID": 2}, {"text": ["so that you can check the results of that to make sure what the uid/gid and euid/egid are.", "You will probably find it's not actually running as the user you think it is."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["My first guess, like Troels, was also SELinux, but that would only be my guess if you are absolutely sure the script through Apache is running with exactly the same user/group as your manual test."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Well, thanks to all who answered the question.", "Anyway, I think I solved the mistery. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["SELinux is completely disabled on the machine, so the problem is definitely in 'svn co' not being able to found config_dir for the user account it runs under."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Apache / mod_python doesn't read in shell environment of the user account which apache is running  on.", "Thus for examle no $HOME is seen by mod_python when apache \nis running under some  real user ( not nobody ) "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Now 'svn co' has a flag --config-dir which points to configuration directory to read params from.", "By default it is $HOME/.subversion, i.e.", "it corresponds to the user account home directory.", "Apparently when no $HOME exists mod_python goes to root home dir ( /root) and tries to fiddle with .subversion content over there - which is obviously\nfails miserably."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["putting "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["SetEnv HOME /home/qa "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["into the /etc/httpd/conf/httpd.conf doesn't solve the problem because of SetEnv having nothing to do with shell environment - it only sets apache related environment"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Likewise PythonOption - sets only mod_python related variables which can be read with req.get_options()  after that"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Running 'svn co --config-dir /home/ ...' definitely gives a workaround for running from within mod_python, but gets in the way of those who will try to run the script from command line."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["So the proposed ( and working) solution is to set HOME environment variable prior to starting appache."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["For example in /etc/init.d/httpd  script "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n QAHOME=/home/qa\n    ...\n    HOME=$QAHOME LANG=$HTTPD_LANG daemon $httpd $OPTIONS\n</code>\n</pre>\n", "senID": 11}], [{"text": ["What is happening is apache is being started with the environment variables of root, so it thinks that it should find its config files in /root/.", "This is NOT the case.", "what happens is if you do sudo apache2ctl start, it pulls your $HOME variable from the sudo $HOME=/root/"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I have just found a solution to this problem myself (although with mod_perl, but same thing)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["run this command (if its apache 1, remove the 2):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n sudo /etc/init.d/apache2 stop\nsudo /etc/init.d/apache2 start\n</code>\n</pre>\n", "senID": 3}, {"text": ["When /etc/init.d/apache2 starts apache, it sets all the proper environment variables that apache should be running under."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]