[[{"text": ["First, use an HTML parser built for this, like BeautifulSoup:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.crummy.com/software/BeautifulSoup/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.crummy.com/software/BeautifulSoup/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}, {"text": ["Then, you can identify remaining particular slow spots with the profiler:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://docs.python.org/library/profile.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://docs.python.org/library/profile.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/profile.html"}]}, {"text": ["And for learning about regular expressions, I've found Mastering Regular Expressions very valuable, no matter what the programming language:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["http://oreilly.com/catalog/9781565922570"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://oreilly.com/catalog/9781565922570", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://oreilly.com/catalog/9781565922570"}]}, {"text": ["Also:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["http://stackoverflow.com/questions/606350/how-can-i-debug-a-regular-expression-in-python"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "http://stackoverflow.com/questions/606350/how-can-i-debug-a-regular-expression-in-python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/606350/how-can-i-debug-a-regular-expression-in-python"}]}, {"text": ["Due to the reclarification of the use-case, then for this request, I would say the above is not what you want.", "My alternate recommendation would be: http://stackoverflow.com/questions/3277239/speeding-up-regular-expressions-in-python/3277705#3277705"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "http://stackoverflow.com/questions/3277239/speeding-up-regular-expressions-in-python/3277705#3277705", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3277239/speeding-up-regular-expressions-in-python/3277705#3277705"}]}], [{"text": ["You're processing each file five times, so the first thing you should do (as Paul Sanwald said) is try to reduce that number by combining your regexes together.", "I would also avoid using reluctant quantifiers, which are designed for convenience at the expense of efficiency.", "Consider this regex:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &lt;script.*?&lt;/script&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Each time the .", "goes to consume another character, it first has to make sure &lt;/script&gt; won't match at that spot.", "It's almost like doing a negative lookahead at every position:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": ".", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "&lt;/script&gt;", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &lt;script(?:(?!&lt;/script&gt;).)*&lt;/script&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["But we know there's no point doing the lookahead if the next character is anything but &lt;, and we can tailor the regex accordingly:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "&lt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &lt;script[^&lt;]*(?:&lt;(?!/script&gt;)[^&lt;]*)*&lt;/script&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["When I test them in RegexBuddy with this target string:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &lt;script type=\"text/javascript\"&gt;var imagePath='http://sstatic.net/stackoverflow/img/';&lt;/script&gt;\n</code>\n</pre>\n", "senID": 7}, {"text": ["...the reluctant regex takes 173 steps to make the match, while the tailored regex takes only 28."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Combining your first three regexes into one yields this beast:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n &lt;(?:(script|style)[^&lt;]*(?:&lt;(?!/\\1)[^&lt;]*)*&lt;/\\1&gt;|[!/]?[a-zA-Z-]+[^&lt;&gt;]*&gt;)\n</code>\n</pre>\n", "senID": 10}, {"text": ["You might want to zap the &lt;HEAD&gt; element while you're at it (i.e., (script|style|head))."], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "&lt;HEAD&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(script|style|head)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I don't know what you're doing with the fourth regex, for character entities--are you just deleting those, too?", "I'm guessing the fifth regex has to be run separately, since some of the whitespace it's cleaning up is generated by the earlier steps.", "But try it with the first three regexes combined and see how much difference it makes.", "That should tell you if it's worth going forward with this approach."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"text": ["one thing you can do is combine the script/style regexes using backreferences.", "here's some sample data:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ cat sample \n&lt;script&gt;some stuff&lt;/script&gt;\n&lt;html&gt;whatever &lt;/html&gt;\n&lt;style&gt;some other stuff&lt;/style&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["using perl:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n perl -ne \"if (/&lt;(script|style)&gt;.*?&lt;\\/\\1&gt;/) { print $1; } \" sample\n</code>\n</pre>\n", "senID": 3}, {"text": ["it will match either script or style.", "I second the recommendation for \"mastering regular expressions\", it's an excellent book."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The suggestion to use an HTML parser is a good one, since it'll quite possibly be faster than regular expressions.", "But I'm not sure BeautifulSoup is the right tool for the job, since it constructs a parse tree from the entire file and stores the whole thing in memory.", "For a terabyte of HTML, you'd need an obscene amount of RAM to do that ;-) I'd suggest you look at HTMLParser, which is written at a lower level than BeautifulSoup, but I believe it's a stream parser, so it will only load a bit of the text at a time."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "HTMLParser", "tag": "a", "pos": 2, "childList": [{"text": "HTMLParser", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/htmlparser.html"}, {"text": "HTMLParser", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If your use-case is indeed to parse a few things for each of millions of documents, then my above answer won't help.", "I recommend some heuristics, like doing a couple \"straight text\" regexes on them to begin with - like just plain /script/ and /style/ to throw things out quickly if you can.", "In fact, do you really need to do the end-tag check at all?", "Isn't &lt;style good enough?", "Leave validation for someone else.", "If the quick ones succeed, then put the rest into a single regex, like /&lt;script|&lt;style|\\s{2,}|etc.../ so that it doesn't have to go through so much text once for each regex."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "/script/", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "/style/", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "&lt;style", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "/&lt;script|&lt;style|\\s{2,}|etc.../", "childNum": 0, "tag": "code", "pos": 5, "childList": []}]}], [{"text": ["I would use simple program with regular Python partition something like, this, but it is tested only with one style example file:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ## simple filtering when not hierarchical tags inside other discarded tags\n\nstart_tags=('&lt;style','&lt;script')\nend_tags=('&lt;/style&gt;','&lt;/script&gt;')\n\n##print(\"input:\\n %s\" % open('giant.html').read())\nout=open('cleaned.html','w')\nend_tag=''\n\nfor line in open('giant.html'):\n    line=' '.join(line.split())\n    if end_tag:\n        if end_tag in line:\n            _,tag,end = line.partition(end_tags[index])\n            if end.strip():\n                out.write(end)\n            end_tag=''\n        continue ## discard rest of line if no end tag found in line\n\n    found=( index for index in (start_tags.index(start_tag)\n                                if start_tag in line else ''\n                                for start_tag in start_tags)\n            if index is not '')\n    for index in  found:\n        start,tag,end = line.partition(start_tags[index])\n        # drop until closing angle bracket of start tag\n        tag,_ ,end = end.partition('&gt;')\n        # check if closing tag already in same line\n        if end_tags[index] in end:\n            _,tag,end = end.partition(end_tags[index])\n            if end.strip():\n                out.write(end)\n            end_tag = '' # end tag reset after found\n        else:\n            end_tag=end_tags[index]\n            out.write(end) # no end tag at same line\n    if not end_tag: out.write(line+'\\n')\n\nout.close()\n##    print 'result:\\n%s' % open('cleaned.html').read()\n</code>\n</pre>\n", "senID": 1}]]