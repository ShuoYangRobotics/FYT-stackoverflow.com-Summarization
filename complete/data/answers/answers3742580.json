[[{"text": ["Far as I know, it's there to avoid excessive indentation.", "You could write "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if x &lt; 0:\n    print 'Negative'\nelse:\n    if x == 0:\n        print 'Zero'\n    else:\n        print 'Positive'\n</code>\n</pre>\n", "senID": 1}, {"text": ["but "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if x &lt; 0:\n    print 'Negative'\nelif x == 0:\n    print 'Zero'\nelse:\n    print 'Positive'\n</code>\n</pre>\n", "senID": 3}, {"text": ["is just so much nicer."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["To avoid brace^H^H^H^H^Helse if war."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In C/C++ where you have an else if, you can structure your code in many different styles:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "else if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if (...) {\n    ...\n} else if (...) {\n    ...\n}\n\n\nif (...) {\n    ...\n} \nelse if (...) {\n    ...\n}\n\nif (...) {\n    ...\n} else \nif (...) {\n    ...\n}\n\n// and so on\n</code>\n</pre>\n", "senID": 2}, {"text": ["by having an elif instead, such war would never happen since there is only one way to write an elif.", "Also, elif is much shorter than else if."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "elif", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "elif", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "elif", "childNum": 0, "tag": "code", "childList": []}, {"text": "else if", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Most likely its syntactic sugar.", "Like the Wend of Visual Basic."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Wend", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["That's just the way it is.", "Javascript uses else if, php uses elseif, perl uses elsif, the C preprocessor and python use elif.", "None of them are wrong, they just choose slightly different syntax to do the same thing.", ":D"], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "Javascript", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.w3schools.com/js/js_if_else.asp"}, {"text": "else if", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "php", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://php.net/manual/en/control-structures.elseif.php"}, {"text": "elseif", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "perl", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://perlmeme.org/howtos/syntax/ifelsifelse.html"}, {"text": "elsif", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "elif", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Python inherits this from Perl, where it's called elsif."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "elsif", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In Python's case, else if as two separate constructs like it is in C-like languages would be quite ugly as you'd have to have else: if: with two indenting levels."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "else if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "else: if:", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["It's arguable whether special-casing the two keywords together would be better (so making else if a single construct, like the not in operator."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "else if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "not in", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["PL/SQL also has elsif, and the C preprocessor has it spelled elif."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "elsif", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "elif", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["elif is some sort of replacement for switch in other languages but with more power"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["for example in C you write"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\nswitch (number){\n case 1:\n   doA()\n   break;\n case 2:\n   doB()\n   break;\n case N:\n   doN()\n   break;\n default:\n   doSomethingElse()\n   break;\n}\n</pre>\n", "senID": 2}, {"text": ["in Python you write"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\nif number == 1: doA()\nelif number == 2: doB()\nelif number == N: doC()\nelse: doSomethingElse()\n</pre>\n", "senID": 4}, {"text": ["As you see elif is more powerful since you can put more complex statements than in a switch, plus avoid nesting if/else statements"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "elif", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if/else", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I find them helpful to help differentiate the \"else-if\"s from the \"final else\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["else if in python called elif"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "elif", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if a:\n    print \"a\" \nelif b:\n    print \"b\" \nelse:\n    print \"c\"\n</code>\n</pre>\n", "senID": 1}]]