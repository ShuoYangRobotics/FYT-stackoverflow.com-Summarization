[[{"text": ["If you want to store a pickled object, you'll need to use a blob, since it is binary data.", "However, you can, say, base64 encode the pickled object to get a string that can be stored in a text field."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Generally, though, doing this sort of thing is indicative of bad design, since you're storing opaque data you lose the ability to use SQL to do any useful manipulation on that data.", "Although without knowing what you're actually doing, I can't really make a moral call on it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I needed to achieve the same thing too.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I turns out it caused me quite a headache before I finally figured out, thanks to this post, how to actually make it work in a binary format."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "thanks to this post", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://coding.derkeiler.com/Archive/Python/comp.lang.python/2008-12/msg00352.html"}]}, {"code": "<pre>\n<code>\n pdata = cPickle.dumps(data, cPickle.HIGHEST_PROTOCOL)\ncurr.execute(\"insert into table (data) values (:data)\", sqlite3.Binary(pdata))\n</code>\n</pre>\n", "senID": 2}, {"text": ["You must specify the second argument to dumps to force a binary pickling.", "Also note the sqlite3.Binary to make it fit in the BLOB field."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "sqlite3.Binary", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n curr.execute(\"select data from table limit 1\")\nfor row in curr:\n  data = cPickle.loads(str(row['data']))\n</code>\n</pre>\n", "senID": 4}, {"text": ["When retrieving a BLOB field, sqlite3 gets a 'buffer' python type, that needs to be strinyfied using str before being passed to the loads method."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "str", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["I wrote a blog about this idea, except instead of a pickle, I used json, since I wanted it to be interoperable with perl and other programs.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://writeonly.wordpress.com/2008/12/05/simple-object-db-using-json-and-python-sqlite/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://writeonly.wordpress.com/2008/12/05/simple-object-db-using-json-and-python-sqlite/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://writeonly.wordpress.com/2008/12/05/simple-object-db-using-json-and-python-sqlite/"}]}, {"text": ["Architecturally, this is a quick and dirty way to get persistence, transactions, and the like for arbitrary data structures.", "I have found this combination to be really useful when I want persistence, and don't need to do much in the sql layer with the data (or it's very complex to deal with in sql, and simple with generators).  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The code itself is pretty simple:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #  register the \"loader\" to get the data back out.\nsqlite3.register_converter(\"pickle\", cPickle.loads)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then, when you wnat to dump it into the db, "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n p_string = p.dumps( dict(a=1,b=[1,2,3]))  \nconn.execute(''' \n   create table snapshot( \n      id INTEGER PRIMARY KEY AUTOINCREMENT, \n        mydata pickle); \n''')  \n\nconn.execute(''' \n    insert into snapshot values \n    (null, ?)''', (p_string,))\n''')\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Pickle has both text and binary output formats.", "If you use the text-based format you can store it in a TEXT field, but it'll have to be a BLOB if you use the (more efficient) binary format."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Since Pickle can dump your object graph to a string it should be possible. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Be aware though that TEXT fields in SQLite uses database encoding so you might need to convert it to a simple string before you un-pickle."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If a dictionary can be pickled, it can be stored in text/blob field as well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Just be aware of the dictionaries that can't be pickled (aka that contain unpickable objects)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Yes, you can store a pickled object in a TEXT or BLOB field in an SQLite3 database, as others have explained."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Just be aware that some object cannot be pickled.", "The built-in container types can (dict, set, list, tuple, etc.).", "But some objects, such as file handles, refer to state that is external to their own data structures, and other extension types have similar problems."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "cannot be pickled", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Since a dictionary can contain arbitrary nested data structures, it might not be pickle-able."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I have to agree with some of the comments here.", "Be careful and make sure you really want to save pickle data in a db, there's probably a better way."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In any case I had trouble in the past trying to save binary data in the sqlite db.", "Apparently you have to use the sqlite3.Binary() to prep the data for sqlite."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's some sample code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n query = u'''insert into testtable VALUES(?)'''\nb = sqlite3.Binary(binarydata)\ncur.execute(query,(b,))\ncon.commit()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["SpoonMeiser is correct, you need to have a strong reason to pickle into a database.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's not difficult to write Python objects that implement persistence with SQLite.", "Then you can use the SQLite CLI to fiddle with the data as well.", "Which in my experience is worth the extra bit of work, since many debug and admin functions can be simply performed from the CLI rather than writing specific Python code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In the early stages of a project, I did what you propose and ended up re-writing with a Python class for each business object (note: I didn't say for each table!", ") This way the body of the application can focus on \"what\" needs to be done rather than \"how\" it is done."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The other option, considering that your requirement is to save a dict and then spit it back out for the user's \"viewing pleasure\", is to use the shelve module which will let you persist any pickleable data to file.", "The python docs are here."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "shelve", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/shelve.html#example"}]}], [{"text": ["Depending on what you're working on, you might want to look into the shove module.", "It does something similar, where it auto-stores Python objects inside a sqlite database (and all sorts of other options) and pretends to be a dictionary (just like the shelve module)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "shove", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/shove"}, {"text": "shelve", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-shelve.html"}]}], [{"text": ["See this solution at SourceForge:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["y_serial.py module :: warehouse Python objects with SQLite"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["\"Serialization + persistance :: in a few lines of code, compress and annotate Python objects into SQLite; then later retrieve them chronologically by keywords without any SQL.", "Most useful \"standard\" module for a database to store schema-less data."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://yserial.sourceforge.net"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://yserial.sourceforge.net", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://yserial.sourceforge.net"}]}]]