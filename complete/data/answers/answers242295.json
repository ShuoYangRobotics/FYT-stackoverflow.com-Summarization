[[{"text": ["Stolen directly from django:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def get_svn_revision(path=None):\n    rev = None\n    if path is None:\n        path = MODULE.__path__[0]\n    entries_path = '%s/.svn/entries' % path\n\n    if os.path.exists(entries_path):\n        entries = open(entries_path, 'r').read()\n        # Versions &gt;= 7 of the entries file are flat text.  The first line is\n        # the version number. The next set of digits after 'dir' is the revision.\n        if re.match('(\\d+)', entries):\n            rev_match = re.search('\\d+\\s+dir\\s+(\\d+)', entries)\n            if rev_match:\n                rev = rev_match.groups()[0]\n        # Older XML versions of the file specify revision as an attribute of\n        # the first entries node.\n        else:\n            from xml.dom import minidom\n            dom = minidom.parse(entries_path)\n            rev = dom.getElementsByTagName('entry')[0].getAttribute('revision')\n\n    if rev:\n        return u'SVN-%s' % rev\n    return u'SVN-unknown'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Adapt as appropriate.", "YOu might want to change MODULE for the name of one of your codemodules."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This code has the advantage of working even if the destination system does not have subversion installed."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Python has direct bindings to libsvn, so you don't need to invoke the command line client at all.", "See this blog post for more details."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this blog post", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://jtauber.com/python_subversion_binding/"}]}, {"text": ["EDIT: You can basically do something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from svn import fs, repos, core\nrepository = repos.open(root_path)\nfs_ptr = repos.fs(repository)\nyoungest_revision_number = fs.youngest_rev(fs_ptr)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["There is a command called svnversion which comes with subversion and is meant to solve exactly that kind of problem."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "svnversion", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I use a technique very similar to this in order to show the current subversion revision number in my shell:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n svnRev=$(echo \"$(svn info)\" | grep \"^Revision\" | awk -F\": \" '{print $2};')\necho $svnRev\n</code>\n</pre>\n", "senID": 1}, {"text": ["It works very well for me."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Why do you want the python files to change every time the version number of the entire repository is incremented?", "This will make doing things like doing a diff between two files annoying if one is from the repo, and the other is from a tarball.."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you want to have a variable in one source file that can be set to the current working copy revision, and does not replay on subversion and a working copy being actually available at the time you run your program, then SubWCRev my be your solution."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SubWCRev", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-subwcrev.html"}]}, {"text": ["There also seems to be a linux port called SVNWCRev"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "SVNWCRev", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svnwcrev.tigris.org/"}]}, {"text": ["Both perform substitution of $WCREV$ with the highest commit level of the working copy.", "Other information may also be provided."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Based on CesarB's response and the link Charles provided, I've done the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n  from subprocess import Popen, PIPE\n  _p = Popen([\"svnversion\", \".\"], stdout=PIPE)\n  REVISION= _p.communicate()[0]\n  _p = None # otherwise we get a wild exception when Django auto-reloads\nexcept Exception, e:\n  print \"Could not get revision number: \", e\n  REVISION=\"Unknown\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Golly Python is cool.", ":)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]