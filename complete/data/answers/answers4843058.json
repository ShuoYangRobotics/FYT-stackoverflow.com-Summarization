[[{"code": "<pre>\n<code>\n x = min(n, 10)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Or, more generally:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x = 10 if 10&lt;n else n\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Here is the ternary operator in Python (also know as conditional expressions in the docs)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ternary operator", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Ternary_operation#Python"}, {"href": "http://docs.python.org/reference/expressions.html#conditional-expressions", "text": "conditional expressions", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n x if cond else y\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There are various ways to make a ternary operation, the first one is the expression added with 2.5:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n n = foo if condition else bar\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to be compatible with versions lower than 2.5 you can exploit the fact that booleans are subclasses from int and that True behaves like 1 whereas False behaves like 0:"], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n n = [bar, foo][condition]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Another possibility is to exploit the way operators in Python behave or more exactly how and and or behave:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n n = condition and foo or bar\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; n = 100\n&gt;&gt;&gt; x = 10 if n &gt; 10 else n\n&gt;&gt;&gt; x\n10\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n 10 if 10 &lt; n else n\n</code>\n</pre>\n", "senID": 0}, {"text": ["see http://en.wikipedia.org/wiki/Ternary_operation"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://en.wikipedia.org/wiki/Ternary_operation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Ternary_operation"}]}], [{"code": "<pre>\n<code>\n x = 10 if (10 &lt; n) else n\n</code>\n</pre>\n", "senID": 0}, {"text": ["(requires python 2.5)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]