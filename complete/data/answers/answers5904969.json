[[{"text": ["The name of the key 'key_name' is key_name, therefore print 'key_name' or whatever variable you have representing it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print 'key_name'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["What's wrong with using 'key_name' instead, even if it is a variable?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "'key_name'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Hmm, I think that what you might be wanting to do is print all the keys in the dictionary and their respective values?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "all", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["If so you want the following:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for key in mydic.keys():\n  print \"the key name is\" + key + \"and its value is\" + mydic[key]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Make sure you use +'s instead of ,' as well.", "The comma will put each of those items on a separate line I think, where as plus will put them on the same line."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["A dictionary has, by definition, an arbitrary number of keys.", "There is no \"the key\".", "You have the keys() method, which gives you a python list of all the keys, and you have the iteritems() method, which returns key-value pairs, so"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "keys()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}, {"text": "iteritems()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for key, value in mydic.iteritems() :\n    print key, value\n</code>\n</pre>\n", "senID": 1}, {"text": ["So you have a handle on the keys, but they only really mean sense if coupled to a value.", "I hope I have understood your question."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def name_the_key(dict, key):\n    return key, dict[key]\n\nmydict = {'key1':1, 'key2':2, 'key3':3}\n\nkey_name, value = name_the_key(mydict, 'key2')\nprint 'KEY NAME: %s' % key_name\nprint 'KEY VALUE: %s' % value\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Since we're all trying to guess what \"print a key name\" might mean, I'll take a stab at it.", "Perhaps you want a function that takes a value from the dictionary and finds the corresponding key?", "A reverse lookup?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def key_for_value(d, value):\n    \"\"\"Return a key in `d` having a value of `value`.\"\"\"\n    for k, v in d.iteritems():\n        if v == value:\n            return k\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that many keys could have the same value, so this function will return some key having the value, perhaps not the one you intended."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "some", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["If you need to do this frequently, it would make sense to construct the reverse dictionary:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n d_rev = dict(v,k for k,v in d.iteritems())\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n import pprint\npprint.pprint(mydic.keys())\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n key_name = '...'\nprint \"the key name is %s and its value is %s\"%(key_name, mydic[key_name])\n</code>\n</pre>\n", "senID": 0}]]