[[{"tag": "ul", "num": 5, "lis": [{"text": "If you are open to some other kind of file where you can keep your parameters, I would suggest you to use ", "tag": "none", "senID": 0}, {"text": "The python lib is ", "tag": "none", "senID": 1}, {"text": "For better introduction, look at the wiki article : ", "tag": "none", "senID": 2}, {"text": "The benefit is you can read the parameter values as list, maps", "tag": "none", "senID": 3}, {"text": "You would love it!", "tag": "none", "senID": 4}]}], [{"text": ["Try the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def load(self, filename=\"input.dat\"):\n    d = {\"Z0\": \"z0\", \"k\": \"k\", \"g\": \"g\", \"Delta\": \"D\", \"t_end\": \"T\"}\n    FILE = open(filename)\n    for line in FILE:\n        name, value = line.split(\":\")\n        value = value.strip()\n        if \" \" in value:\n            value = map(float, value.split())\n        else:\n            value = float(value)\n        setattr(self, d[name], value)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Proof that it works:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class A(object): pass\n...\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; load(a)\n&gt;&gt;&gt; a.__dict__\n{'k': 0.10000000000000001, 'z0': [0.0, 0.0], 'D': 20.0, 'g': 1.0, 'T': 300.0}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can loop over the lines in a file as follows:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for line in FILE:\n    s = line.split\n    var = s[0]\n    if var == 'z0:':\n        self.z0 = [float(s1), float(s2)]\n    elif var == 'k:':\n         etc.\n</code>\n</pre>\n", "senID": 1}, {"text": ["and so on."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Perhaps this might give you what you need:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def load(self,filename='input.dat'):\n    with open(filename) as fh:\n        for line in fh:\n           s = line.split()\n           if len(s) == 2:\n               setattr(self,s[1],s[2])\n           elif len(s) == 3:\n               setattr(self,s[1],s[2:])\n</code>\n</pre>\n", "senID": 1}, {"text": ["I also didn't include any error checking, but setattr is very handy."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "setattr", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#setattr"}]}], [{"text": ["Something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def load(self,filename=\"input.dat\"):\n\n    # maps names to number of fields they need\n    # only necessary for variables with more than 1 field\n    argmap = dict(Z0=2)\n\n    # maps config file names to their attribute names on the object\n    # if name is the same both places, no need\n    namemap = dict(Z0=\"z0\", Delta=\"D\", t_end=\"T\")\n\n    with open(filename) as FILE:\n        for line in FILE:\n            s = line.split()\n            var = s[0].rstrip(\":\")\n            try:\n                val = [float(x) for x in s[1:]]\n            except ValueError:\n                continue\n            if len(val) == varmap.get(var, 1):\n               if len(val) == 1:\n                   val = val[0]\n               setattr(self, namemap.get(var, var), val)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Though this may not look very intuitive and you may have to change your program approach a bit, but the following approach is more flexible and clean."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fin=open(\"input.dat\")\nparams={k:[float(i) for i in v.split()]\nfor k,v in (f[:-1].split(\":\") for f in fin.xreadlines())}\n&gt;&gt;&gt; params.keys() #Will List all the variables\n['k', 't_end', 'Z0', 'g', 'Delta']\n&gt;&gt;&gt; params['k'][0] #Value of K\n0.1\n&gt;&gt;&gt; params['Z0'] #Value of Z0 as a List\n[0.0, 0.0]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you don;t intend to save single valued variables as list you might do it this way"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for k,v in (f[:-1].split(\":\") for f in fin.xreadlines()):\n     v= [float(i) for i in v.split()]\n    if len(v) == 1: v = v[0]\n    params[k] = v\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note***"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["What you are trying to do here is..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["If tomorrow the input file specification changes, you don't need to change the parsing logic and accommodate more floating point variables as required. "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Python objects have a built-in __dict__ member.", "You can modify it, and then refer to properties as obj.key."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__dict__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "obj.key", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class Data(object):\n  def __init__(self, path='infile.dat'):\n    with open(path, 'r') as fo:\n      for line in fo.readlines():\n        if len(line) &lt; 2: continue\n\n        parts = [s.strip(' :\\n') for s in line.split(' ', 1)]\n        numbers = [float(s) for s in parts[1].split()]\n\n        # This is optional... do you want single values to be stored in lists?\n        if len(numbers) == 1: numbers = numbers[0]\n        self.__dict__[parts[0]] = numbers\n        # print parts  -- debug\n\nobj = Data('infile.dat')\nprint obj.g\nprint obj.Delta\nprint obj.Z0\n</code>\n</pre>\n", "senID": 1}, {"text": ["At the end of this, we print out a few of the keys.", "Here's the output of those."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 1.0\n20.0\n[0.0, 0.0]\n</code>\n</pre>\n", "senID": 3}, {"text": ["For consistency, you can remove the line marked \"optional\" in my code, and have all objects in lists -- regardless of how many elements they have.", "That will make using them quite a bit easier, because you never have to worry about obj.g[0] returning an error."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "obj.g[0]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Here's another one "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def splitstrip(s):\n    return s.split(':')[1].strip()\n\nwith open('input.dat','r') as f:\n    a.z0 = [float(x) for x in splitstrip(f.readline()).split(' ')]\n    a.k, a.g, a.D, a.T = tuple([float(splitstrip(x)) for x in f.read().rstrip().split('\\n')])\n</code>\n</pre>\n", "senID": 1}, {"text": [";)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Assuming the params are coming from a safe place (made by you or users, not the internet), just make the parameters file a Python file, params.py:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "params.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n Z0 = (0, 0)\nk = 0.1\ng = 1\nDelta = 20\nt_end = 300\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then in your code all you need is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import params\nfancy_calculation(10, k=params.k, delta=params.Delta)\n</code>\n</pre>\n", "senID": 3}, {"text": ["The beauty of this is two-fold: 1) simplicity, and 2) you can use the power of Python in your parameter descriptions -- particularly useful here, for example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n k = 0.1\nDelta = 20\ng = 3 * k + Delta\n</code>\n</pre>\n", "senID": 5}, {"text": ["Alternatively, you could use Python's built-in JSON or ConfigParser .INI parser modules."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "JSON", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/json.html"}, {"href": "http://docs.python.org/library/configparser.html", "text": "ConfigParser .INI parser", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["As others have mentioned, in Python you can create object attributes on-the-fly.", "That means you could do something like the following can create a Params object as it's read-in.", "I've tried to make the code data-driven and thus relatively flexible."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Params", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n # maps label to attribute name and types\nlabel_attr_map = {\n       \"Z0:\": [\"z0\", float, float],\n        \"k:\": [ \"k\", float],\n        \"g:\": [ \"g\", float],\n    \"Delta:\": [ \"D\", float],\n    \"t_end:\": [ \"T\", float]\n}\n\nclass Params(object):\n    def __init__(self, input_file_name):\n        with open(input_file_name, 'r') as input_file:\n            for line in input_file:\n                row = line.split()\n                label = row[0]\n                data = row[1:]  # rest of row is data list\n\n                attr = label_attr_map[label][0]\n                datatypes = label_attr_map[label][1:]\n\n                values = [(datatypes[i](data[i])) for i in range(len(data))]\n                self.__dict__[attr] = values if len(values) &gt; 1 else values[0]\n\n\nparams = Params('input.dat')\nprint 'params.z0:', params.z0\nprint 'params.k:', params.k\nprint 'params.g:', params.g\nprint 'params.D:', params.D\nprint 'params.T:', params.T\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre class=\"lang-none prettyprint-override\">\n<code>\n params.z0: [0.0, 0.0]\nparams.k: 0.1\nparams.g: 1.0\nparams.D: 20.0\nparams.T: 300.0\n</code>\n</pre>\n", "senID": 3}]]