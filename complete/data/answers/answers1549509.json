[[{"text": ["My answer to your other question, which you completely ignored!, shows you're wrong in claiming that  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "my answer ", "tag": "none", "senID": 1}]}, {"text": ["Probably the fastest approach, for a really big list, if you want to preserve the exact order of the items that remain, is the following...:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "if you want to preserve the exact order of the items that remain", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n biglist = [ \n    {'title':'U2 Band','link':'u2.com'}, \n    {'title':'ABC Station','link':'abc.com'}, \n    {'title':'Live Concert by U2','link':'u2.com'} \n]\n\nknown_links = set()\nnewlist = []\n\nfor d in biglist:\n  link = d['link']\n  if link in known_links: continue\n  newlist.append(d)\n  known_links.add(link)\n\nbiglist[:] = newlist\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Generators are great."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def unique( seq ):\n    seen = set()\n    for item in seq:\n        if item not in seen:\n            seen.add( item )\n            yield item\n\nbiglist[:] = unique( biglist )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This page discusses different methods and their speeds:\nhttp://www.peterbe.com/plog/uniqifiers-benchmark"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.peterbe.com/plog/uniqifiers-benchmark", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.peterbe.com/plog/uniqifiers-benchmark"}]}, {"text": ["The recommended* method:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def f5(seq, idfun=None):  \n    # order preserving \n    if idfun is None: \n        def idfun(x): return x \n    seen = {} \n    result = [] \n    for item in seq: \n        marker = idfun(item) \n        # in old Python versions: \n        # if seen.has_key(marker) \n        # but in new ones: \n        if marker in seen: continue \n        seen[marker] = 1 \n        result.append(item) \n    return result\n\nf5(biglist,lambda x: x['link'])\n</code>\n</pre>\n", "senID": 2}, {"text": ["*by that page"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n dups = {}\nnewlist = []\nfor x in biglist:\n    if x['link'] not in dups:\n      newlist.append(x)\n      dups[x['link']] = None\n\nprint newlist\n</code>\n</pre>\n", "senID": 0}, {"text": ["produces"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [{'link': 'u2.com', 'title': 'U2 Band'}, {'link': 'abc.com', 'title': 'ABC Station'}]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note that here I used a dictionary.", "This makes the test not in dups much more efficient than using a list."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "not in dups", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["A super easy way to do this is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def uniq(a):\n    if len(a) == 0:\n        return []\n    else:\n        return [a[0]] + uniq([x for x in a if x != a[0]])\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is not the most efficient way, because:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "it searches through the whole list for every element in the list, so it's O(n^2)", "tag": "none", "senID": 3}, {"text": "it's recursive so uses a stack depth equal to the length of the list", "tag": "none", "senID": 4}]}, {"text": ["However, for simple uses (no more than a few hundred items, not performance critical) it is sufficient."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I think using a set should be pretty efficent."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n seen_links = set()\nfor index in len(biglist):\n    link = biglist[index]['link']\n    if link in seen_links:\n        del(biglist[index])\n    seen_links.add(link)\n</code>\n</pre>\n", "senID": 1}, {"text": ["I think this should come in at O(nlog(n))"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]