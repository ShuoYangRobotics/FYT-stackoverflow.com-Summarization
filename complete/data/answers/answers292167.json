[[{"text": ["I don't think your regex is doing what you want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &lt;a\\s*href=['|\"](http:\\/\\/(.*?)\\S['|\"]&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["This captures anything non-greedily from http:// up to the first non-space character before a quote, single quote, or pipe.", "For that matter, I'm not sure how it parses, as it doesn't seem to have enough close parens."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you are trying to capture the href, you might try something like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &lt;a .*?+href=['\"](http:\\/\\/.*?)['\"].*?&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["This uses the .*?", "(non-greedy match anything) to allow for other attributes (target, title, etc.).", "It matches an href that begins and ends with either a single or double quote (it does not distinguish, and allows the href to open with one and close with the other)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Why are you trying to match HTML links with a regex?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Depending on what you're trying to do the appropriate thing to do would vary."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You could try using an HTML Parser.", "There are several available, there's even one in the Python Library: http://www.python.org/doc/2.5.2/lib/module-HTMLParser.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.python.org/doc/2.5.2/lib/module-HTMLParser.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-HTMLParser.html"}]}, {"text": ["Hope this helps!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; regex = '&lt;a\\s+href=[\"\\'](http://(.*?))[\"\\']&gt;'\n&gt;&gt;&gt; string = '&lt;a href=\"http://google.com/test/this\"&gt;'\n&gt;&gt;&gt; match = re.search(regex, string)\n&gt;&gt;&gt; match.group(1)\n'http://google.com/test/this'\n&gt;&gt;&gt; match.group(2)\n'google.com/test/this'\n</code>\n</pre>\n", "senID": 0}, {"text": ["explanations:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n \\s+   = match at least one white space (&lt;ahref) is a bad link\n [\"\\'] = character class, | has no meaning within square brackets\n         (it will match a literal pipe \"|\")\n</code>\n</pre>\n", "senID": 2}], [{"text": ["\\S matches any character that is not a whitespace character, just like [^\\s]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Written like that, you can easily exclude quotes: [^\\s\"']"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Note that you'll likely have to give the .*?", "in your regex the same treatment.", "The dot matches any character that is not a newline, just like [^\\r\\n]"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Again, written like that, you can easily exclude quotes: [^\\r\\n'\"]"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Read Jeff Friedl's \"Mastering Regular Expressions\" book."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As written:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &lt;a\\s*href=['|\"](http:\\/\\/(.*?)\\S['|\"]&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["You have unbalanced parentheses in the expression.", "Maybe the trouble is that the first match is being treated as \"read to end of regex\".", "Also, why would you not want the last non-space character of the URL?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The .*?", "(lazy greedy) operator is interesting.", "I must say, though, that I'd be more inclined to write:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &lt;a\\s+href=['|\"]http://([^'\"&gt;&lt;]+)\\1&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["This distinguishes between \"&lt;ahref\" (a non-existent HTML tag) and \"&lt;a href\" (a valid HTML tag).", "It doesn't capture the 'http://' prefix.", "I'm not certain whether you have to escape the slashes -- in Perl, where I mainly work, I wouldn't need to.", "The capturing part uses the greedy match, but only on characters that might semi-legitimately appear in the URL.", "Specifically, it excludes both quotes and the end-tag (and, for good measure, the begin-tag too).", "If you really want the 'http://' prefix, shift the capturing parenthesis appropriately."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["I ran into on issue with single quotes in some urls such as this one from Fox Sports.", "I made a slight adjustment that I think should take care of it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://msn.foxsports.com/mlb/story/9152594/Fehr:'Heightened'-concern-about-free-agent-market"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://msn.foxsports.com/mlb/story/9152594/Fehr", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msn.foxsports.com/mlb/story/9152594/Fehr"}]}, {"text": ["/&lt;a\\s+href\\s*=\\s*[\"'](http:\\/\\/.*?", ")[\"'][>\\s]/i"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["this requires that the closing quote be followed by a space or closing bracket."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]