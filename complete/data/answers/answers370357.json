[[{"text": ["Python treats variables in functions differently depending on whether you assign values to them from within the function or not.", "If you assign any value to a variable, it is treated by default as a local variable.", "Therefore, when you uncomment the line, you are attempting to reference a local variable before any value has been assigned to it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want the variable c to refer to the global c put"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n global c\n</code>\n</pre>\n", "senID": 2}, {"text": ["as the first line of the function."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["As of python 3, there is now"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n nonlocal c\n</code>\n</pre>\n", "senID": 5}, {"text": ["that you can use to refer to the nearest enclosing (not necessarily global) scope."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["okay, here's the deal.", "Python is a little weird, in that it keeps everything in a dictionary for the various scopes.", "The original a,b,c are in the uppermost scope and so in that uppermost dictionary.", "The function has its own dictionary.", "When you reach the print(a) and print(b) statements, there's nothing by that name in the dictionary, so Python looks up the list and finds them in the clobal dictionary."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "print(a)", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "print(b)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Now we get to c+=1, which is, of course, equivalent to c=c+1.", "When Python scans that line, it says \"ahah, there's a variable named c, I'll put it into my local scope dictionary.", "\"  Then when it goes looking for a value for c for the c on the right hand side of the assignment, it finds its local variable named c, which has no value yet, and so throws the error."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "c+=1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "c=c+1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "local variable named c", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["The statement global c mentioned above simply tells the parser that it uses the c from the global scope and so doesn't need a new one."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "global c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The reason it says there's an issue on the line it does is because it is effectively looking for the names before it tries to generate code, and so in some sense doesn't think it's really doing that line yet.", "I'd argue that is a useability bug, but it's generally a good practice to just learn not to take a compiler's messages too seriously."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "too", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["If it's any comfort, I spent probably a day digging and experimenting with this same issue before I found something Guido had written about the dictionaries that Explained Everything."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["It doesn't scan the code twice, but it does scan the code in two phases, lexing and parsing."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Consider how the parse of this cline of code works.", "The lexer reads the source text and breaks it into lexemes, the \"smallest components\" of the grammar.", "So when it hits the line"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n c+=1\n</code>\n</pre>\n", "senID": 7}, {"text": ["it breaks it up into something like"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n SYMBOL(c) OPERATOR(+=) DIGIT(1)\n</code>\n</pre>\n", "senID": 9}, {"text": ["The parser eventually wants to make this into a parse tree and execute it, but since it's an assignment, before it does, it looks for the name c in the local dictionary, doesn't see it, and inserts it in the dictionary, marking it as uninitialized.", "In a fullly compiled language, it would just go into the symbol table and wait for the parse, but since it WON'T have the luxury of a second pass, the lexer does a little extra work to make life easier later on.", "Only, then it sees the OPERATOR, sees that the rules say \"if you have an operator += the left hand side must have been initialized\" and says \"whoops!"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["The point here is that it hasn't really started the parse of the line yet.", "This is all happening sort of preparatory to the actual parse, so the line counter hasn't advanced to the next line.", "Thus when it signals the error, it still thinks its on the previous line."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "hasn't really started the parse of the line yet", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["As I say, you could argue it's a usability bug, but its actually a fairly common thing.", "Some compilers are more honest about it and say \"error on or around line XXX\", but this one doesn't."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"text": ["Taking a look at the disassembly may clarify what is happening:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def f():\n...    print a\n...    print b\n...    a = 1\n\n&gt;&gt;&gt; import dis\n&gt;&gt;&gt; dis.dis(f)\n\n  2           0 LOAD_FAST                0 (a)\n              3 PRINT_ITEM\n              4 PRINT_NEWLINE\n\n  3           5 LOAD_GLOBAL              0 (b)\n              8 PRINT_ITEM\n              9 PRINT_NEWLINE\n\n  4          10 LOAD_CONST               1 (1)\n             13 STORE_FAST               0 (a)\n             16 LOAD_CONST               0 (None)\n             19 RETURN_VALUE\n</code>\n</pre>\n", "senID": 1}, {"text": ["As you can see, the bytecode for accessing a is LOAD_FAST, and for b, LOAD_GLOBAL.", "This is because the compiler has identified that a is assigned to within the function, and classified it as a local variable.", "The access mechanism for locals is fundamentally different for globals - they are statically assigned an offset in the frame's variables table, meaning lookup is a quick index, rather than the more expensive dict lookup as for globals.", "Because of this, Python is reading the print a line as \"get the value of local variable 'a' held in slot 0, and print it\", and when it detects that this variable is still uninitialised, raises an exception."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "LOAD_FAST", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "LOAD_GLOBAL", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "print a", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}], [{"text": ["Python has rather interesting behavior when you try traditional global variable semantics.", "I don't remember the details, but you can read the value of a variable declared in 'global' scope just fine, if you want to modify it, you have to use the global keyword.", "Try changing test() to this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def test():\n    global c\n    print(a)\n    print(b)\n    print(c)    # (A)\n    c+=1       # (B)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, the reason you are getting this error is because you can also declare a new variable inside that function with the same name as a 'global' one, and it would be completely separate.", "The interpreter thinks you are trying to make a new variable in this scope called 'c' and modify it all in one operation, which isn't allowed in python because this new 'c' wasn't initialized."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This is not a direct answer to your question, but it is closely related, as it's another gotcha caused by the relationship between augmented assignment and function scopes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In most cases, you tend to think of augmented assignment (a += b) as exactly equivalent to simple assignment (a = a + b).", "It is possible to get into some trouble with this though, in one corner case.", "Let me explain:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The way python's simple assignment works means that if a is passed into a function (like func(a); note that python is always pass-by-reference), then a = a + b will not modify the a that is passed in.", "Instead, it will just modify the local pointer to a. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["But if you use a += b, then it is sometimes implemented as:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a = a + b\n</code>\n</pre>\n", "senID": 4}, {"text": ["or sometimes (if the method exists) as:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n a.__iadd__(b)\n</code>\n</pre>\n", "senID": 6}, {"text": ["In the first case (as long as a is not declared global), there are no side-effects outside local scope, as the assignment to \"a\" is just a pointer update."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["In the second case, a will actually modify itself, so all references to a will point to the modified version.", "This is demonstrated by the following code:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n def copy_on_write(a):\n      a = a + a\ndef inplace_add(a):\n      a += a\na = [1]\ncopy_on_write(a)\nprint a # [1]\ninplace_add(a)\nprint a # [1, 1]\nb = 1\ncopy_on_write(b)\nprint b # [1]\ninplace_add(b)\nprint b # 1\n</code>\n</pre>\n", "senID": 9}, {"text": ["So the trick is to avoid augmented assignment on function arguments (I try to only use it for local/loop variables).", "Use simple assignment, and you will be safe from ambiguous behaviour. "], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["Here are two links that may help"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1: docs.python.org/3.1/faq/programming.html?highlight=nonlocal#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "docs.python.org/3.1/faq/programming.html?highlight=nonlocal#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/3.1/faq/programming.html?highlight=nonlocal#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value"}]}, {"text": ["2: docs.python.org/3.1/faq/programming.html?highlight=nonlocal#how-do-i-write-a-function-with-output-parameters-call-by-reference"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "docs.python.org/3.1/faq/programming.html?highlight=nonlocal#how-do-i-write-a-function-with-output-parameters-call-by-reference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/3.1/faq/programming.html?highlight=nonlocal#how-do-i-write-a-function-with-output-parameters-call-by-reference"}]}, {"text": ["link one describes the error UnboundLocalError.", "Link two can help with with re-writing your test function.", "Based on link two, the original problem could be rewritten as:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a, b, c = (1, 2, 3)\n&gt;&gt;&gt; print (a, b, c)\n(1, 2, 3)\n&gt;&gt;&gt; def test (a, b, c):\n...     print (a)\n...     print (b)\n...     print (c)\n...     c += 1\n...     return a, b, c\n...\n&gt;&gt;&gt; a, b, c = test (a, b, c)\n1\n2\n3\n&gt;&gt;&gt; print (a, b ,c)\n(1, 2, 4)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["The Python interpreter will read a function as a complete unit.", "I think of it as reading it in two passes, once to gather its closure (the local variables), then again to turn it into byte-code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As I'm sure you were already aware, any name used on the left of a '=' is implicitly a local variable.", "More than once I've been caught out by changing a variable access to a += and it's suddenly a different variable."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I also wanted to point out it's not really anything to do with global scope specifically.", "You get the same behaviour with nested functions."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]