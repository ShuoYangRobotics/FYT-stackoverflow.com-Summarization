[[{"code": "<pre>\n<code>\n def unique(items):\n    found = set([])\n    keep = []\n\n    for item in items:\n        if item not in found:\n            found.add(item)\n            keep.append(item)\n\n    return keep\n\nprint unique([1, 1, 2, 'a', 'a', 3])\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Using:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lst = [8, 8, 9, 9, 7, 15, 15, 2, 20, 13, 2, 24, 6, 11, 7, 12, 4, 10, 18, 13, 23, 11, 3, 11, 12, 10, 4, 5, 4, 22, 6, 3, 19, 14, 21, 11, 1, 5, 14, 8, 0, 1, 16, 5, 10, 13, 17, 1, 16, 17, 12, 6, 10, 0, 3, 9, 9, 3, 7, 7, 6, 6, 7, 5, 14, 18, 12, 19, 2, 8, 9, 0, 8, 4, 5]\n</code>\n</pre>\n", "senID": 1}, {"text": ["And using the timeit module:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ python -m timeit -s 'import uniquetest' 'uniquetest.etchasketch(uniquetest.lst)'\n</code>\n</pre>\n", "senID": 3}, {"text": ["(and so on for the various other functions -- which I named after their posters), I have the following results (on my first generation Intel MacBook Pro):"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 9, "lis": [{"text": "Allen: 14.6 usec per loop [1]", "tag": "none", "senID": 5}, {"text": "Terhorst: 26.6 usec per loop", "tag": "none", "senID": 6}, {"text": "Tarle: 44.7 usec per loop", "tag": "none", "senID": 7}, {"text": "ctcherry: 44.8 usec per loop", "tag": "none", "senID": 8}, {"text": "Etchasketch 1 (the short one): 64.6 usec per loop", "tag": "none", "senID": 9}, {"text": "Schinckel: 65 usec per loop", "tag": "none", "senID": 10}, {"text": "Etchasketch 2: 71.6 usec per loop", "tag": "none", "senID": 11}, {"text": "Little: 89.4 usec per loop", "tag": "none", "senID": 12}, {"text": "Tyler: 179 usec per loop", "tag": "none", "senID": 13}]}, {"text": ["[1] Note that Allen modifies the list in place \u2013 I believe this has skewed the time, in that the timeit module runs the code 100000 times and 99999 of them are with the dupe-less list."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Summary: Straight-forward implementation with sets wins over confusing one-liners :-)"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}], [{"text": ["What's going to be fastest depends on what percentage of your list is duplicates.", "If it's nearly all duplicates, with few unique items, creating a new list will probably be faster.", "If it's mostly unique items, removing them from the original list (or a copy) will be faster."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's one for modifying the list in place:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def unique(items):\n  seen = set()\n  for i in xrange(len(items)-1, -1, -1):\n    it = items[i]\n    if it in seen:\n      del items[i]\n    else:\n      seen.add(it)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Iterating backwards over the indices ensures that removing items doesn't affect the iteration."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["This is the fastest in-place method I've found (assuming a large proportion of duplicates):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def unique(l):\n    s = set(); n = 0\n    for x in l:\n        if x not in s: s.add(x); l[n] = x; n += 1\n    del l[n:]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is 10% faster than Allen's implementation, on which it is based (timed with timeit.repeat, JIT compiled by psyco).", "It keeps the first instance of any duplicate."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["repton-infinity: I'd be interested if you could confirm my timings."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Here is the fastest solution so far (for the following input):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def del_dups(seq):\n    seen = {}\n    pos = 0\n    for item in seq:\n        if item not in seen:\n            seen[item] = True\n            seq[pos] = item\n            pos += 1\n    del seq[pos:]\n\nlst = [8, 8, 9, 9, 7, 15, 15, 2, 20, 13, 2, 24, 6, 11, 7, 12, 4, 10, 18, \n       13, 23, 11, 3, 11, 12, 10, 4, 5, 4, 22, 6, 3, 19, 14, 21, 11, 1, \n       5, 14, 8, 0, 1, 16, 5, 10, 13, 17, 1, 16, 17, 12, 6, 10, 0, 3, 9, \n       9, 3, 7, 7, 6, 6, 7, 5, 14, 18, 12, 19, 2, 8, 9, 0, 8, 4, 5]\ndel_dups(lst)\nprint(lst)\n# -&gt; [8, 9, 7, 15, 2, 20, 13, 24, 6, 11, 12, 4, 10, 18, 23, 3, 5, 22, 19, 14, \n#     21, 1, 0, 16, 17]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Dictionary lookup is slightly faster then the set's one in Python 3."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Obligatory generator-based variation:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def unique(seq):\n  seen = set()\n  for x in seq:\n    if x not in seen:\n      seen.add(x)\n      yield x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Taken from http://www.peterbe.com/plog/uniqifiers-benchmark"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.peterbe.com/plog/uniqifiers-benchmark", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.peterbe.com/plog/uniqifiers-benchmark"}]}, {"code": "<pre>\n<code>\n def f5(seq, idfun=None):  \n    # order preserving \n    if idfun is None: \n        def idfun(x): return x \n    seen = {} \n    result = [] \n    for item in seq: \n        marker = idfun(item) \n        # in old Python versions: \n        # if seen.has_key(marker) \n        # but in new ones: \n        if marker in seen: continue \n        seen[marker] = 1 \n        result.append(item) \n    return result\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can actually do something really cool in Python to solve this.", "You can create a list comprehension that would reference itself as it is being built.", "As follows:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # remove duplicates...\n   def unique(my_list):\n       return [x for x in my_list if x not in locals()['_[1]'].__self__]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: I removed the \"self\", and it works on Mac OS X, Python 2.5.1."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "I removed the \"self\", and it works on Mac OS X, Python 2.5.1.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The _[1] is Python's \"secret\" reference to the new list.", "The above, of course, is a little messy, but you could adapt it fit your needs as necessary.", "For example, you can actually write a function that returns a reference to the comprehension; it would look more like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n return [x for x in my_list if x not in this_list()]\n</code>\n</pre>\n", "senID": 4}, {"tag": "hr", "senID": 5}], [{"text": ["One-liner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n new_list = reduce(lambda x,y: x+[y][:1-int(y in x)], my_list, [])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Do the duplicates necessarily need to be in the list in the first place?", "There's no overhead as far as looking the elements up, but there is a little bit more overhead in adding elements (though the overhead should be O(1) )."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x  = []\n&gt;&gt;&gt; y = set()\n&gt;&gt;&gt; def add_to_x(val):\n...     if val not in y:\n...             x.append(val)\n...             y.add(val)\n...     print x\n...     print y\n... \n&gt;&gt;&gt; add_to_x(1)\n[1]\nset([1])\n&gt;&gt;&gt; add_to_x(1)\n[1]\nset([1])\n&gt;&gt;&gt; add_to_x(1)\n[1]\nset([1])\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Benchmark and a clear answer here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.peterbe.com/plog/uniqifiers-benchmark"}]}], [{"text": ["has_key in python is O(1).", "Insertion and retrieval from a hash is also O(1).", "Loops through n items twice, so O(n)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def unique(list):\n  s = {}\n  output = []\n  for x in list:\n    count = 1\n    if(s.has_key(x)):\n      count = s[x] + 1\n\n    s[x] = count\n  for x in list:\n    count = s[x]\n    if(count &gt; 0):\n      s[x] = 0\n      output.append(x)\n  return output\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There are some great, efficient solutions here.", "However, for anyone not concerned with the absolute most efficient O(n) solution, I'd go with the simple one-liner O(n^2*log(n)) solution:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "O(n)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "O(n^2*log(n))", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def unique(xs):\n    return sorted(set(xs), key=lambda x: xs.index(x))\n</code>\n</pre>\n", "senID": 1}, {"text": ["or the more efficient two-liner O(n*log(n)) solution:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "O(n*log(n))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def unique(xs):\n    positions = dict((e,pos) for pos,e in reversed(list(enumerate(xs))))\n    return sorted(set(xs), key=lambda x: positions[x])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["An in-place one-liner for this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = [1, 1, 2, 'a', 'a', 3]\n&gt;&gt;&gt; [ item for pos,item in enumerate(x) if x.index(item)==pos ]\n[1, 2, 'a', 3]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here are two recipes from the itertools documentation:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def unique_everseen(iterable, key=None):\n    \"List unique elements, preserving order. Remember all elements ever seen.\"\n    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D\n    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D\n    seen = set()\n    seen_add = seen.add\n    if key is None:\n        for element in ifilterfalse(seen.__contains__, iterable):\n            seen_add(element)\n            yield element\n    else:\n        for element in iterable:\n            k = key(element)\n            if k not in seen:\n                seen_add(k)\n                yield element\n\ndef unique_justseen(iterable, key=None):\n    \"List unique elements, preserving order. Remember only the element just seen.\"\n    # unique_justseen('AAAABBBCCDAABBB') --&gt; A B C D A B\n    # unique_justseen('ABBCcAD', str.lower) --&gt; A B C A D\n    return imap(next, imap(itemgetter(1), groupby(iterable, key)))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This may be the simplest way (not the fastest):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list(OrderedDict.fromkeys(iterable))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I have no experience with python, but an algorithm would be to sort the list, then remove duplicates (by comparing to previous items in the list), and finally find the position in the new list by comparing with the old list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Longer answer: http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52560"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52560", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52560"}]}], [{"text": ["I haven't done any tests, but one possible algorithm might be to create a second list, and iterate through the first list.", "If an item is not in the second list, add it to the second list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = [1, 1, 2, 'a', 'a', 3]\ny = []\nfor each in x:\n    if each not in y:\n        y.append(each)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; def unique(list):\n...   y = []\n...   for x in list:\n...     if x not in y:\n...       y.append(x)\n...   return y\n</code>\n</pre>\n", "senID": 0}], [{"text": ["O(n) if dict is hash, O(nlogn) if dict is tree, and simple, fixed.", "Thanks to Matthew for the suggestion.", "Sorry I don't know the underlying types."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def unique(x):    \n  output = []\n  y = {}\n  for item in x:\n    y[item] = \"\"\n\n  for item in x:\n    if item in y:\n      output.append(item)\n\n  return output\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you take out the empty list from the call to set() in Terhost's answer, you get a little speed boost."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Change:\n    found = set([])\nto:\n    found = set()"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["However, you don't need the set at all."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def unique(items):\n    keep = []\n\n    for item in items:\n        if item not in keep:\n            keep.append(item)\n\n    return keep\n</code>\n</pre>\n", "senID": 3}, {"text": ["Using timeit I got these results:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["with set([]) -- 4.97210427363\nwith set() -- 4.65712377445\nwith no set -- 3.44865284975"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}], [{"text": ["Remove duplicates and preserve order:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is a fast 2-liner that leverages built-in functionality of list comprehensions and dicts."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x = [1, 1, 2, 'a', 'a', 3]\n\ntmpUniq = {} # temp variable used below \nresults = [tmpUniq.setdefault(i,i) for i in x if i not in tmpUniq]\n\nprint results\n[1, 2, 'a', 3]\n</code>\n</pre>\n", "senID": 2}, {"text": ["The dict.setdefaults() function returns the value as well as adding it to the temp dict directly in the list comprehension.", "Using the built-in functions and the hashes of the dict will work to maximize efficiency for the process."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; x=[1,1,2,'a','a',3]\n&gt;&gt;&gt; y = [ _x for _x in x if not _x in locals()['_[1]'] ]\n&gt;&gt;&gt; y\n[1, 2, 'a', 3]\n</code>\n</pre>\n", "senID": 0}, {"text": ["\n\"locals()['_[1]']\" is the \"secret name\" of the list being created."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"text": ["I don't know if this one is fast or not, but at least it is simple."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Simply, convert it first to a set and then again to a list"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def unique(container):\n  return list(set(container))\n</code>\n</pre>\n", "senID": 2}], [{"text": ["One pass."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = [1,1,'a','b','c','c']\n\nnew_list = []\nprev = None\n\nwhile 1:\n    try:\n        i = a.pop(0)\n        if i != prev:\n            new_list.append(i)\n        prev = i\n    except IndexError:\n        break\n</code>\n</pre>\n", "senID": 1}], [{"text": ["a=[1,2,3,4,5,7,7,8,8,9,9,3,45]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["def unique(l):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ids={}\nfor item in l:\n\tif not ids.has_key(item):\n\t\tids[item]=item\nreturn  ids.keys()\n</code>\n</pre>\n", "senID": 2}, {"text": ["print a"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["print unique(a)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Inserting elements will take theta(n)\nretrieving if element is exiting or not will take constant time\ntesting all the items will take also theta(n)\nso we can see that this solution will take theta(n)\nBear in Mind that dictionary in python implemented by hash table"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]