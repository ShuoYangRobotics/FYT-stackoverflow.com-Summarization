[[{"text": ["I solve this using virtualenv.", "I sympathise with wanting to avoid further layers of nightmare abstraction, but virtualenv is actually amazingly clean and simple to use.", "You literally do this (command line, Linux):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "virtualenv", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/virtualenv"}, {"text": "virtualenv", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n virtualenv my_env\n</code>\n</pre>\n", "senID": 1}, {"text": ["This creates a new python binary and library location, and symlinks to your existing system libraries by default.", "Then, to switch paths to use the new environment, you do this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n source my_env/bin/activate\n</code>\n</pre>\n", "senID": 3}, {"text": ["That's it.", "Now if you install modules (e.g.", "with easy_install), they get installed to the lib directory of the my_env directory.", "They don't interfere with existing libraries, you don't get weird conflicts, stuff doesn't stop working in your old environment.", "They're completely isolated."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "easy_install", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "lib", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "my_env", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["To exit the environment, just do"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n deactivate\n</code>\n</pre>\n", "senID": 6}, {"text": ["If you decide you made a mistake with an installation, or you don't want that environment anymore, just delete the directory:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n rm -rf my_env\n</code>\n</pre>\n", "senID": 8}, {"text": ["And you're done.", "It's really that simple."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["virtualenv is great.", ";)"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "virtualenv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Take a look at virtualenv."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "virtualenv", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/virtualenv"}]}], [{"text": ["Some tips:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "on Mac OS X, use ", "tag": "none", "senID": 1}, {"text": "whenever you use numpy/scipy/matplotlib, install the enthought python distribution", "tag": "none", "senID": 2}, {"text": "use virtualenv and virtualenvwrapper to keep those \"system\" installations pristine; ideally use one virtual environment per project, so each project's dependencies are fulfilled. And, yes, that means potentially a lot of code will be replicated in the various virtual envs.", "tag": "none", "senID": 3}]}, {"text": ["That seems like a bigger mess indeed, but at least things work that way.", "Basically, if one of the projects works in a virtualenv, it will keep working no matter what upgrades you perform, since you never change the \"system\" installs."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["What I usually do is trying to (progressively) keep up with the Python versions as they come along (and once all of the external dependencies have correct versions available)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Most of the time the Python code itself can be transferred as-is with only minor needed modifications."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My biggest Python project @ work (15.000+ LOC) is now on Python 2.6 a few months (upgrading everything from Python 2.5 did take most of a day due to installing / checking 10+ dependencies...)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In general I think this is the best strategy with most of the interdependent components in the free software stack (think the dependencies in the linux software repositories): keep your versions (semi)-current (or at least: progressing at the same pace)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"tag": "ul", "num": 2, "lis": [{"text": "install the python versions you need, better if from sources", "tag": "none", "senID": 0}, {"text": "when you write a script, include the full python version into it (such as ", "tag": "none", "senID": 1}]}, {"text": ["I can't see what could go wrong."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If something does, it's probably macports fault anyway, not yours (one of the reasons I don't use macports anymore)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I know I'm probably missing something and this will get downvoted, but please leave at least a little comment in that case, thanks :)"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "I know I'm probably missing something and this will get downvoted, but please leave at least a little comment in that case, thanks :)", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["I use the MacPorts version for everything, but as you note a lot of the default versions are bizarrely old.", "For example vim omnicomplete in Snow Leopard has python25 as a dependency.", "A lot of python related ports have old dependencies but you can usually flag the newer version at build time, for example port install vim +python26 instead of port install vim +python.", "Do a dry run before installing anything to see if you are pulling, for example, the whole of python24 when it isn't necessary.", "Check portfiles often because the naming convention as Darwin ports was getting off the ground left something to be desired.", "In practice I just leave everything in the default /opt... folders of MacPorts, including a copy of the entire framework with duplicates of PyObjC, etc., and just stick with one version at a time, retaining the option to return to the system default if things break unexpectedly.", "Which is all perhaps a bit too much work to avoid using virtualenv, which I've been meaning to get around to using."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "port install vim +python26", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "port install vim +python", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "portfiles", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://trac.macports.org/browser/trunk/dports/python/py26-game/Portfile"}, {"text": "/opt...", "childNum": 0, "tag": "code", "pos": 5, "childList": []}, {"text": "virtualenv", "childNum": 0, "tag": "code", "pos": 6, "childList": []}]}], [{"text": ["I've had good luck using Buildout.", "You set up a list of which eggs and which versions you want.", "Buildout then downloads and installs private versions of each for you.", "It makes a private \"python\" binary with all the eggs already installed.", "A local \"nosetests\" makes things easy to debug.", "You can extend the build with your own functions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["On the down side, Buildout can be quite mysterious.", "Do \"buildout -vvvv\" for a while to see exactly what it's doing and why."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://www.buildout.org/docs/tutorial.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.buildout.org/docs/tutorial.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.buildout.org/docs/tutorial.html"}]}], [{"text": ["At least under Linux, multiple pythons can co-exist fairly happily.", "I use Python 2.6 on a CentOS system that needs Python 2.4 to be the default for various system things.", "I simply compiled and installed python 2.6 into a separate directory tree (and added the appropriate bin directory to my path) which was fairly painless.", "It's then invoked by typing \"python2.6\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Once you have separate pythons up and running, installing libraries for a specific version is straightforward.", "If you invoke the setup.py script with the python you want, it will be installed in directories appropriate to that python, and scripts will be installed in the same directory as the python executable itself and will automagically use the correct python when invoked."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I also try to avoid using too many libraries.", "When I only need one or two functions from a library (eg scipy), I'll often see if I can just copy them to my own project."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]