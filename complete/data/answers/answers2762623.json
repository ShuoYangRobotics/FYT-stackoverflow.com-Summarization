[[{"text": ["You don't need a listcomp here.", "Just write:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for w in words:\n    if w != '':\n        # ...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Assuming that you are after the keys, why not try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [w for w in words if w]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["filter(lambda w: w != '', words) or filter(None, words)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "filter(lambda w: w != '', words)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "filter(None, words)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["this is suggestion, it may not be the best solution for your problem."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Testing that an element does not equal '' isn't going to filter out whitespace elements.", "If that's what you're after, you probably want to use str.isspace (or a regular expression)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "''", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str.isspace", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["If you use a list comprehension, you'll make an extra copy of the list as an intermediary object.", "Probably not a big deal, but a generator won't use the extra memory."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'd do it like this, with a generator:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for word in (w for w in words if not w.isspace()):\n    # do stuff\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I think your solution is sub optimal.", "You're iterating over the list words twice - once in the list comprehension to create the non-null terms and again in the loop to do the processing.", "It would be better if you used a genexp like so."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "words", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n for w in (x for x in words if x): process(w)\n</code>\n</pre>\n", "senID": 1}, {"text": ["That way, the genexp will lazily return a list of non-nulls."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["What does the body of the outer for loop do?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If it's a function call you could potentially just do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["[f(w) for w in words if w != '']"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[f(w) for w in words if w != '']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]