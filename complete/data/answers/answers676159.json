[[{"text": ["In Python, you'd typically use PIL, the Python Image Library.", "I've never used PIL for anything beyond the simplest tasks, so I can't say how well it performs in practice."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'd start digging into PIL with a look at its documentation, particularly the documentation for the draw module."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "its documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonware.com/library/pil/"}, {"href": "http://www.pythonware.com/library/pil/handbook/imagedraw.htm", "text": "documentation for the draw module", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Maybe a vectorial format is better suited for your needs, but is hard to tell without having a concrete example of what you'd like to get."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, if the images are all alike, you could create a SVG base image with Inkscape, then edit it programmaticaly from Python or Ruby (either by editing the text or using a XML library) and finally export it to PNG."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "hr", "senID": 2}, {"text": ["Update:\nAfter seeing the example image, I think SVG would be the most convenient choice.", "A SVG image is an XML file that basically says \"draw a circle from here to here, write the string '13\u00ba52' there\", etc.", "You could draw a unique base chart in Inkscape and have your program just adding the lines and symbols for each case.", "Finally you export to PNG."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The advantages are: easier for you to draw, the image is fully scalable, you can change the styling just by editing a property (\"make all lines wider\", \"change all text to Arial\", \"paint the background blue\"), you can export to any format without losing quality, and I think it's more mantainable."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I found Gruff easy to use when I was in your shoes.", "Shameless blog plug."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Gruff", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nubyonrails.com/pages/gruff"}, {"text": "Shameless blog plug", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://madcoderspeak.blogspot.com/2008/12/graphs-in-ruby-on-rails.html"}]}], [{"text": ["Look at Ruby-GD2 or an ImageMagick or GraphicsMagick binding."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Ruby-GD2", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://gd2.rubyforge.org/"}]}], [{"text": ["For Python I the most common choice for image formats is PIL and then Pycairo for vector formats.", "The two can work together, for exadmple in this cookbook entry to use PIL images for Pycairo surfaces."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Pycairo", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cairographics.org/pycairo/"}, {"text": "use PIL images for Pycairo surfaces", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://cairographics.org/pythoncairopil/"}]}], [{"text": ["when I was doing python chalange (http://www.pythonchallenge.com/) I've used Python Image Library (http://www.pythonware.com/library/pil/)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://www.pythonchallenge.com/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonchallenge.com/"}, {"href": "http://www.pythonware.com/library/pil/", "text": "http://www.pythonware.com/library/pil/", "childNum": 0, "tag": "a", "childList": []}]}]]