[[{"text": ["I couldn't get superjoe30's regular expression to compile, so I adapted his solution to convert plain URLs (within Markdown text) to be Markdown compatible."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The modified filter:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n urlfinder = re.compile('^(http:\\/\\/\\S+)')\nurlfinder2 = re.compile('\\s(http:\\/\\/\\S+)')\n@register.filter('urlify_markdown')\ndef urlify_markdown(value):\n    value = urlfinder.sub(r'&lt;\\1&gt;', value)\n    return urlfinder2.sub(r' &lt;\\1&gt;', value)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Within the template:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &lt;div&gt;\n    {{ content|urlify_markdown|markdown}}\n&lt;/div&gt;\n</code>\n</pre>\n", "senID": 4}], [{"text": ["This isn't a feature of Markdown -- what you should do is run a post-processor against the text looking for a URL-like pattern.", "There's a good example in the Google app engine example code -- see the AutoLink transform."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Google app engine example code", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://google-app-engine-samples.googlecode.com/svn/trunk/cccwiki/wiki.py"}, {"text": "AutoLink", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Best case scenario, edit the markdown and just put &lt; > around the URLs.", "This will make the link clickable.", "Only problem is it requires educating your users, or whoever writes the markdown."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You could write an extension to markdown.", "Save this code as mdx_autolink.py"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import markdown\nfrom markdown.inlinepatterns import Pattern\n\nEXTRA_AUTOLINK_RE = r'(?&lt;!\"|&gt;)((https?://|www)[-\\w./#?%=&amp;]+)'\n\nclass AutoLinkPattern(Pattern):\n\n    def handleMatch(self, m):\n        el = markdown.etree.Element('a')\n        if m.group(2).startswith('http'):\n            href = m.group(2)\n        else:\n            href = 'http://%s' % m.group(2)\n        el.set('href', href)\n        el.text = m.group(2)\n        return el\n\nclass AutoLinkExtension(markdown.Extension):\n    \"\"\"\n    There's already an inline pattern called autolink which handles \n    &lt;http://www.google.com&gt; type links. So lets call this extra_autolink \n    \"\"\"\n\n    def extendMarkdown(self, md, md_globals):\n        md.inlinePatterns.add('extra_autolink', \n            AutoLinkPattern(EXTRA_AUTOLINK_RE, self), '&lt;automail')\n\ndef makeExtension(configs=[]):\n    return AutoLinkExtension(configs=configs)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then use it in your template like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n {% load markdown %}\n\n(( content|markdown:'autolink'))\n</code>\n</pre>\n", "senID": 3}, {"text": ["Update:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I've found an issue with this solution: When markdown's standard link syntax is used and the displayed portion matches the regular expression, eg:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n [www.google.com](http://www.yahoo.co.uk)\n</code>\n</pre>\n", "senID": 6}, {"text": ["strangely becomes:\n    www.google.com"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "www.google.com", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com"}]}, {"text": ["But who'd want to do that anyway?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["There's an extra for this in python-markdown2:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.google.com/p/python-markdown2/wiki/LinkPatterns"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/python-markdown2/wiki/LinkPatterns", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/python-markdown2/wiki/LinkPatterns"}]}], [{"text": ["I was using the Django framework, which has a filter called urlize, which does exactly what I wanted.", "However, it only works on plain text, so I couldn't pass is through the output of markdown.", "I followed this guide to create a custom filter called urlify2 which works on html, and passed the text through this filter:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Django framework", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/"}, {"text": "this guide", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "https://docs.djangoproject.com/en/dev/howto/custom-template-tags/"}]}, {"code": "<pre>\n<code>\n &lt;div class=\"news_post\"&gt;\n  {% autoescape off %}\n    {{ post.content|markdown|urlify2}}\n  {% endautoescape %}\n&lt;/div&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["The urlify2.py filter:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from django import template\nimport re\n\nregister = template.Library()\n\nurlfinder = re.compile(\"([0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}|((news|telnet|nttp|file|http|ftp|https)://)|(www|ftp)[-A-Za-z0-9]*\\\\.)[-A-Za-z0-9\\\\.]+):[0-9]*)?/[-A-Za-z0-9_\\\\$\\\\.\\\\+\\\\!\\\\*\\\\(\\\\),;:@&amp;=\\\\?/~\\\\#\\\\%]*[^]'\\\\.}&gt;\\\\),\\\\\\\"]\")\n\n@register.filter(\"urlify2\")\ndef urlify2(value):\n    return urlfinder.sub(r'&lt;a href=\"\\1\"&gt;\\1&lt;/a&gt;', value)\n</code>\n</pre>\n", "senID": 3}]]