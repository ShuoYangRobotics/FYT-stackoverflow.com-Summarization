[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; import time\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; blah = \"This is written slowly\\n\"\n&gt;&gt;&gt; for l in blah:\n...   sys.stdout.write(l)\n...   sys.stdout.flush()\n...   time.sleep(0.2)\n...\nThis is written slowly\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You are printing the result of time.sleep(0.2), which is None.", "Move it to the next line."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "time.sleep(0.2)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n text = \"Hello, this is a test text to see if all works fine.\"\nfor char in text:\n    print char,\n    time.sleep(0.2)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, you still have the problem of a space between each character, which can be solved by replacing the print statement with a call to sys.stdout.write."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sys.stdout.write", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n text = \"Hello, this is a test text to see if all works fine.\"\nfor char in text:\n    sys.stdout.write(char)\n    time.sleep(0.2)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Put the time.sleep in a separate line.", "With a comma, you are printing its return value as well."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "time.sleep", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You're printing the return value of time.sleep(0.2) which is None.", "Put it on a separate line.", "The comma after \"print char\" will prevent a newline from being printed but it will introduce a single space after each character.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Try this instead:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; import time\n&gt;&gt;&gt; text = \"Hello, this is a test text to see if all works fine.\"\n&gt;&gt;&gt; for char in text:\n...     sys.stdout.write(char)\n...     time.sleep(0.2)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Your example prints them all on separate lines I think (at least on windows).", "You can use printing to sys.stdout to get around this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sys.stdout", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import time, sys\nfor character in text:\n    sys.stdout.write(character)\n    time.sleep(0.2)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["this line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print char, time.sleep(0.2)\n</code>\n</pre>\n", "senID": 1}, {"text": ["decodes as \"print the value of char, and then print the return value of the function time.sleep() (which is None)\"."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "char", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "time.sleep()", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can break them onto separate lines, but the default behavior of print followed by a comma will leave you with spaces between the characters that you probably don't want.", "If not, look up how to change the behavior of print, or do something like this:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; import time\n&gt;&gt;&gt; for char in \"test string\\n\":\n...    sys.stdout.write(char)\n...    time.sleep(0.2)\n...\ntest string\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Thank you all for your help, this is my final code, I made a random timing for the delay as mentioned by Wooble:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import time\nimport sys\nfrom random import randrange\n\ntext = \"This is the introduction text.\"\n\nfor c in text:\n    sys.stdout.write(c)\n    sys.stdout.flush()\n    seconds = \"0.\" + str(randrange(1, 4, 1))\n    seconds = float(seconds)\n    time.sleep(seconds)\n</code>\n</pre>\n", "senID": 1}]]