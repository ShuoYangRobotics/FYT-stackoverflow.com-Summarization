[[{"text": ["This is a lame primality test."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "primality test", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Primality%5Ftest"}]}, {"text": ["% is the mod operator.", "It performs division and returns the remainder rather than the result of the division.", "For example, 5 // 2 == 2, and 5 % 2 == 1."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "mod operator", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Modulo%5Foperation"}]}, {"text": ["Commented:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x = y // 2  # For some y &gt; 1  ##Reduce search space to half of y\nwhile x &gt; 1:\n  if y % x == 0: # Remainder  ##If x divides y cleanly (4 / 2 == 2)\n    print(y, 'has factor', x) ##y is not prime\n    break  # Skip else        ##Exit the loop\n  x -= 1   # Normal exit  ##Try the next value\nelse:\n  print(y, 'is prime')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["the logic is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["if y modulo x is 0, it means that x is a dividor of y, so y has a factor.", "print that, and break out of the loop."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["if not, decrease x by 1, and try again."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["but some things are broken in this code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The program prints at least one factor of an integer y, or if it has no factors (other than itself and 1), prints that y is prime."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It uses the variable x to try all possible factors greater than one.", "It starts at the floor of y divided by 2, because no number larger than half of y could be a factor.", "Using normal division rather than floor division could give you a fractional value if y is odd.", "(An even better solution is to start with the square root of y - if y is not prime, one of its factors will be less than or equal to its square root."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Inside the loop, it tests y % x, which is the remainder after dividing y by x.", "If the remainder is zero, that means that x is a factor of y, and it prints it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The else clause is executed at the end of the loop, unless a factor is found, in which case the \"break\" skips out of the loop and the else clause.", "So either a factor is found, or it's prime."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Here's the improved code with the indentation fixed:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import math\n\ndef check_primality(y):\n  x = int(math.sqrt(y))\n  while x &gt; 1:\n    if y % x == 0:                                                \n      print y, 'has factor', x\n      break\n    x -= 1\n  else:\n    print y, 'is prime'\n</code>\n</pre>\n", "senID": 5}], [{"text": ["The code simply checks if the square root of x has been reached.", "Note that you can check the primality of a number by checking if the integers from 2 up to the square root of x divides x perfectly (without a remainder)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["For any number (x) which is not prime, there would be a factor greater than 1 and less than (x/2).", "9 = 3*3\nThe logic is to iterate through all the numbers &lt;= x/2 and check if the number divides."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I think the program tries to find the biggest prime factors of y.", "If y is a prime factor it prints this as well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["x = y // 2 is for testing the numbers in the range x: 2..y/2.", "A better approach would be to test only the numbers x: 2..sqrt(y)"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "x = y // 2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "2..y/2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "2..sqrt(y)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["the % denotes a modulus which gives you the remainder of division..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["and this code checks for prime Y and also checks if Y is a multiplier of x..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["x = y // 2     #x=the division or modulus of y , 2"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["while x > 1:  #you want to check if this is a division result or a modulus"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["if y % x == 0:  # if y is a multiplier of x "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print(y, 'has factor', x) \n\n  break  # break the while loop\n\nx -= 1 # decreament x\n</code>\n</pre>\n", "senID": 5}, {"text": ["else: # this line executes if the wihle reached x > 1 and didnt break \n    print(y, 'is prime')"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["so if y is a multiplier of x it will decreament x and the loop continue\notherwise it will print y is prime"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]]