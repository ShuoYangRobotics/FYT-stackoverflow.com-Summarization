[[{"text": ["You might try using the AuthSub method described in the Exporting Spreadsheets section of the documentation."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Exporting Spreadsheets", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/apis/documents/docs/1.0/developers_guide_python.html#DownloadingSpreadsheets"}]}, {"text": ["Get a separate login token for the spreadsheets service and substitue that for the export.", "Adding this to the get_spreadsheet code worked for me:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "get_spreadsheet", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import gdata.spreadsheet.service\n\ndef get_spreadsheet(key, gid=0):\n    # ...\n    spreadsheets_client = gdata.spreadsheet.service.SpreadsheetsService()\n    spreadsheets_client.email = gd_client.email\n    spreadsheets_client.password = gd_client.password\n    spreadsheets_client.source = \"My Fancy Spreadsheet Downloader\"\n    spreadsheets_client.ProgrammaticLogin()\n\n    # ...\n    entry = gd_client.GetDocumentListEntry(uri)\n    docs_auth_token = gd_client.GetClientLoginToken()\n    gd_client.SetClientLoginToken(spreadsheets_client.GetClientLoginToken())\n    gd_client.Export(entry, file_path)\n    gd_client.SetClientLoginToken(docs_auth_token) # reset the DocList auth token\n</code>\n</pre>\n", "senID": 2}, {"text": ["Notice I also used Export, as Download seems to give only PDF files."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Export", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Download", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["This no longer works as of gdata 2.0.1.4:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n gd_client.SetClientLoginToken(spreadsheets_client.GetClientLoginToken())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Instead, you have to do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n gd_client.SetClientLoginToken(gdata.gauth.ClientLoginToken(spreadsheets_client.GetClientLoginToken()))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The following code works in my case (Ubuntu 10.4, python 2.6.5 gdata 2.0.14)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import gdata.docs.service\nimport gdata.spreadsheet.service\ngd_client = gdata.docs.service.DocsService()\ngd_client.ClientLogin(email,password)\nspreadsheets_client = gdata.spreadsheet.service.SpreadsheetsService()\nspreadsheets_client.ClientLogin(email,password)\n#...\nfile_path = file_path.strip()+\".xls\"\ndocs_token = gd_client.auth_token\ngd_client.SetClientLoginToken(spreadsheets_client.GetClientLoginToken())\ngd_client.Export(entry, file_path)  \ngd_client.auth_token = docs_token\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In case anyone comes across this looking for a quick fix, here's another (currently) working solution that doesn't rely on the gdata client library:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "another (currently) working solution", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://gist.github.com/1650271"}]}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\nimport re, urllib, urllib2\n\nclass Spreadsheet(object):\n    def __init__(self, key):\n        super(Spreadsheet, self).__init__()\n        self.key = key\n\nclass Client(object):\n    def __init__(self, email, password):\n        super(Client, self).__init__()\n        self.email = email\n        self.password = password\n\n    def _get_auth_token(self, email, password, source, service):\n        url = \"https://www.google.com/accounts/ClientLogin\"\n        params = {\n            \"Email\": email, \"Passwd\": password,\n            \"service\": service,\n            \"accountType\": \"HOSTED_OR_GOOGLE\",\n            \"source\": source\n        }\n        req = urllib2.Request(url, urllib.urlencode(params))\n        return re.findall(r\"Auth=(.*)\", urllib2.urlopen(req).read())[0]\n\n    def get_auth_token(self):\n        source = type(self).__name__\n        return self._get_auth_token(self.email, self.password, source, service=\"wise\")\n\n    def download(self, spreadsheet, gid=0, format=\"csv\"):\n        url_format = \"https://spreadsheets.google.com/feeds/download/spreadsheets/Export?key=%s&amp;exportFormat=%s&amp;gid=%i\"\n        headers = {\n            \"Authorization\": \"GoogleLogin auth=\" + self.get_auth_token(),\n            \"GData-Version\": \"3.0\"\n        }\n        req = urllib2.Request(url_format % (spreadsheet.key, format, gid), headers=headers)\n        return urllib2.urlopen(req)\n\nif __name__ == \"__main__\":\n    import getpass\n    import csv\n\n    email = \"\" # (your email here)\n    password = getpass.getpass()\n    spreadsheet_id = \"\" # (spreadsheet id here)\n\n    # Create client and spreadsheet objects\n    gs = Client(email, password)\n    ss = Spreadsheet(spreadsheet_id)\n\n    # Request a file-like object containing the spreadsheet's contents\n    csv_file = gs.download(ss)\n\n    # Parse as CSV and print the rows\n    for row in csv.reader(csv_file):\n        print \", \".join(row)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This isn't a complete answer, but Andreas Kahler wrote up an interesting CMS solution using Google Docs + Google App Engline + Python.", "Not having any experience in the area, I cannot see exactly what portion of the code may be of use to you, but check it out.", "I know it interfaces with a Google Docs account and plays with files, so I have a feeling you'll recognize what's going on.", "It should at least point you in the right direction."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Andreas Kahler", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://andreaskahler.com/"}]}, {"text": ["Google AppEngine + Google Docs + Some Python = Simple CMS"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Google AppEngine + Google Docs + Some Python = Simple CMS", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blog.andreaskahler.com/2010/03/google-appengine-google-docs-some.html"}]}], [{"text": ["A hacky solution, but works:\nhttp://bitbucket.org/dariusdamalakas/parasykjiems/src/tip/contactdb/management/commands/downloadDocs.py"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://bitbucket.org/dariusdamalakas/parasykjiems/src/tip/contactdb/management/commands/downloadDocs.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bitbucket.org/dariusdamalakas/parasykjiems/src/tip/contactdb/management/commands/downloadDocs.py"}]}]]