[[{"code": "<pre>\n<code>\n sorted(score.items(), key=lambda x:-x[1])\n</code>\n</pre>\n", "senID": 0}, {"text": ["should do the trick"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The order of the elements in a dictionary is not defined, so the result of the sorting has to be stored in a list (or an OrderedDict)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "OrderedDict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/library/collections.html#collections.OrderedDict"}]}, {"text": ["You should convert it to a list of tuples using items().", "With sorted() you can sort them, the key parameter tells it to sort according to the inverse of the second tuple element."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Full example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; score= {1:0.98876, 8:0.12245, 13:0.57689}\n&gt;&gt;&gt; sorted(score.items(), key=lambda x:-x[1])\n[(1, 0.98875999999999997), (13, 0.57689000000000001), (8, 0.12245)]\n&gt;&gt;&gt; print [(y,x) for (x,y) in _]\n[(0.98875999999999997, 1), (0.57689000000000001, 13), (0.12245, 8)]\n</code>\n</pre>\n", "senID": 5}, {"text": ["This also shows how to reverse the elements in the tuple if you really want to do that."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["if you want to modify original list inverse then use inverse.sort(reverse=True).", "If you want to produce a new list and leave original list untouched, use sorted(inverse, reverse=True)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "inverse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "inverse.sort(reverse=True)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "sorted(inverse, reverse=True)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You don't need an intermediate list, however, just use score:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "score", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sorted(score.items(), key=lambda x: x[1], reverse=True)\n[(1, 0.98876), (13, 0.57689), (8, 0.12245)]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["After your inverse method, this would do the trick:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ranked = inverse.sort()\n</code>\n</pre>\n", "senID": 1}, {"text": ["And here's some more info on sorting in python: http://wiki.python.org/moin/HowTo/Sorting/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://wiki.python.org/moin/HowTo/Sorting/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/HowTo/Sorting/"}]}], [{"text": ["Sort the inverse list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n inverse.sort()\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will return the list in ascending order, if you want it in reverse order, reverse it also:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n inverse.reverse()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["use this:\ninverse.sort(reverse=True)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "inverse.sort(reverse=True)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["have a look here for more info on sorting"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/HowTo/Sorting/"}]}], [{"text": ["if you want rank itens in dict:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n score = {1:0.98876, 8:0.12245, 13:0.57689}\n# get a list of items...\nlist = score.items()\nprint list\n[(8, 0.12245), (1, 0.98875999999999997), (13, 0.57689000000000001)]\n\n# Sort items.\nlist.sort()\nprint list \n[(1, 0.98875999999999997), (8, 0.12245), (13, 0.57689000000000001)]\n# reverse order\nlist.reverse()\nprint list\n[(13, 0.57689000000000001), (8, 0.12245), (1, 0.98875999999999997)]\n</code>\n</pre>\n", "senID": 1}]]