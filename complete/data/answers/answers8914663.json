[[{"text": ["5 isn't necessarily 5:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n t=0\nwhile  t&lt;5:  #currently loop runs for 10 seconds\n    print \"in loop\",t, repr(t)\n    if (t&lt;5):\n        print \"true\"\n    t=t+0.1\n</code>\n</pre>\n", "senID": 1}, {"text": ["produces"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n in loop 0 0\ntrue\nin loop 0.1 0.1\ntrue\nin loop 0.2 0.2\ntrue\nin loop 0.3 0.30000000000000004\n</code>\n</pre>\n", "senID": 3}, {"text": ["[...]"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n in loop 4.8 4.799999999999999\ntrue\nin loop 4.9 4.899999999999999\ntrue\nin loop 5.0 4.999999999999998\ntrue\n</code>\n</pre>\n", "senID": 5}, {"text": ["0.1 can't be represented exactly in binary."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["[Ah, I just noticed that I used 0.1 instead of 0.01, like you did.", "Well, it's the same issue."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Two \"how floating point works\" references: classical and gentler."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "classical", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html"}, {"href": "http://floating-point-gui.de/formats/fp/", "text": "gentler", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["This is because values are rounded for printing.", "It is absolutely what one would expect. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you need to avoid this behaviour, then either format your output differently, or use an appropriate delta to test against, e.g.", "5.0 - t &lt; delta"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "5.0 - t &lt; delta", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["delta is any numeric value you like - it defines how close to 5 is equal to 5 for your purposes, given that in general decimal values cannot be represented exactly using a purely binary representation."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "delta", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If this is unacceptable in your application, the alternative is to use a decimal class that uses a decimal representation internally."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The value of t on the last loop iteration is close to, but just under 5.0.", "It is impossible to represent 0.01 exactly in binary, so a small error creeps in each time 0.01 is added to t. Python deems the result close enough to 5.0 to print \"5.0\", but it's not actually quite 5.0."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "t", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "t", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["To make it work as you expect, use a Decimal, which does not suffer from these rounding errors."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Decimal", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from decimal import Decimal\nt=Decimal(\"0\")\nwhile  t&lt;5:\n    print \"in loop\",t\n    if (t&lt;5):\n        print \"true\"\n    t=t+Decimal(\"0.01\")\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The problem is a precision error.", "If you change this to:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n t=0\nwhile  t&lt;5:  #currently loop runs for 10 seconds\n    print \"in loop\",repr(t)\n    if (t&lt;5):\n        print \"true\"\n    t=t+0.01\n</code>\n</pre>\n", "senID": 1}, {"text": ["you'll see that the last time through the loop t is actually something like 4.999999999999938."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Python (as well as most other programming languages) can't represent all real numbers exactly, so you end up with surprising behavior like this."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Based on Marcin's recommendation of using a delta, here's a workable solution:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Marcin's recommendation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/a/8914782/246801"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; step = 0.01\n&gt;&gt;&gt; t = 4.9\n&gt;&gt;&gt; while 5.0 - t &gt; step:\n        print 'in loop', t\n        t += step\n\n\nin loop 4.9\nin loop 4.91\nin loop 4.92\nin loop 4.93\nin loop 4.94\nin loop 4.95\nin loop 4.96\nin loop 4.97\nin loop 4.98\nin loop 4.99\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One other way of looking at it is that 0.1 in binary is similar to 1/3 in base 10 (i.e.", "0.333333).", "It cannot be represented with a finite number of digits.", "When you type 0.1 Python converts it to binary but (obviously) does so using a finite number of bits and therefore it's not exactly 0.1.", "So basically what happens here is with a hypothetical computer that works in base 10:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "0.1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "1/3", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "0.1", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "exactly", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n count = 0\nwhile count != 1:\n    count += 0.33333333333\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course count will never exactly be 1 and the while loop will keep running."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]