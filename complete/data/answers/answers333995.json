[[{"text": ["Python debuggers (as well as profilers and coverage tools) use the sys.settrace function (in the sys module) to register a callback that gets called when interesting events happen."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "sys.settrace", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sys", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you're using Python 2.6, you can call sys.gettrace() to get the current trace callback function.", "If it's not None then you can assume you should be passing debug parameters to the JVM."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "sys.gettrace()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["It's not clear how you could do this pre 2.6."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["From taking a quick look at the pdb docs and source code, it doesn't look like there is a built in way to do this.", "I suggest that you set an environment variable that indicates debugging is in progress and have your application respond to that."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ USING_PDB=1 pdb yourprog.py\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then in yourprog.py:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import os\nif os.environ.get('USING_PDB'):\n    # debugging actions\n    pass\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can try to peek into your stacktrace."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.python.org/doc/2.5.2/lib/inspect-stack.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.python.org/doc/2.5.2/lib/inspect-stack.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/inspect-stack.html"}]}, {"text": ["when you try this in a debugger session:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["import inspect\ninspect.getouterframes(inspect.currentframe()\nyou will get a list of framerecords and can peek for any frames that refer to the pdb file."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["A solution working with Python 2.4 (it should work with any version superior to 2.1) and Pydev:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import inspect\n\ndef isdebugging():\n  for frame in inspect.stack():\n    if frame[1].endswith(\"pydevd.py\"):\n      return True\n  return False\n</code>\n</pre>\n", "senID": 1}, {"text": ["The same should work with pdb by simply replacing pydevd.py with pdb.py.", "As do3cc suggested, it tries to find the debugger within the stack of the caller."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "pydevd.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "pdb.py", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Useful links:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["The Python Debugger"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["The interpreter stack"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}], [{"text": ["If you're using Pydev, you can detect it in such way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nif 'pydevd' in sys.modules: \n    print \"Debugger\"\nelse:\n    print \"commandline\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Another way to do it hinges on how your python interpreter is started.", "It requires you start Python using -O for production and with no -O for debugging.", "So it does require an external discipline that might be hard to maintain .. but then again it might fit your processes perfectly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["From the python docs (see \"Built-in Constants\" here or here):"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/constants.html"}, {"href": "http://docs.python.org/release/3.1.3/library/constants.html", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n __debug__\nThis constant is true if Python was not started with an -O option.\n</code>\n</pre>\n", "senID": 2}, {"text": ["Usage would be something like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if __debug__:\n    print 'Python started without optimization'\n</code>\n</pre>\n", "senID": 4}]]