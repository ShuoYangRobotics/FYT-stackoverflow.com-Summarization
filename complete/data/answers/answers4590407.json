[[{"text": ["I would use a dictionary with a bit of indirection thrown in.", "When you want to use dynamic variable names that's a hint that you should not be using actual variables but instead some sort of data structure like a list or a dict."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Try using two data structures: a list called variables which stores the names of the variables, and a dict called values which stores their values."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "variables", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "names", "childNum": 0, "tag": "em", "childList": []}, {"text": "values", "childNum": 0, "tag": "code", "childList": []}, {"text": "values", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n variables = ['y', 'x', 'xE']\nvalues = dict((name, None) for name in variables)\nfiles = [measurable, time, timeErr]\n\n# PROBLEM 1: Assignment problem\n#\n# Trying to do:\n#\n# var[1] = files[1] so that  if (y == measurable): print(\"it works\")\n# var[2] = files[2] so that  if (x == time): print(\"it works\")\n\nvalues[variables[1]] = files[1]\nvalues[variables[2]] = files[2]\n\nif values['y'] == measurable:\n    print(\"it works\")\n\n\n# GOAL TO GET ASSIGNMENT LIKE, data is in files \"y, x, xE\":\n\nfor name in variables:\n    variables[name] = open('./'+name).read()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You've got a basic idea of how references work but you're getting confused.", "When you call the statement variables[0] = data[0] instead of reassigning what x points to you reassign what variables[0] points to.", "That's why \"it does not work."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "variables[0] = data[0]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "variables[0]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Here:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x = 0\ny = x\ny = 4\n</code>\n</pre>\n", "senID": 2}, {"text": ["which is at the heart of what you're attempting to do.", "If you type this into the REPL you'll see that x still equates to 0, not 4."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Your confusing pointers with references."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["at 3 you are thinking you have a reference to x.", "But you do not!", "You only the have the reference to variables[0] "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Maybe your thinking of something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x = [1]\nvar = [x]\nvar[0][0] = 2\nprint var, x\n&gt;&gt;&gt; [[2]] [2]\n</code>\n</pre>\n", "senID": 3}, {"text": ["This will actually change the value of x.", "Lists and dictionaries will change (as in mutatable) while strings and numbers will not.", "Thre is no way to get a reference to them to change the underlying value."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "mutatable", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["It looks like you're just overthinking the problem.", "Think about what actual outcome you want to have.", "This code is so confused that I'm not even sure what the actual problem is you're trying to solve.", "I see one of two possibilities (that seem reasonable - there are infinite unreasonable ones):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["...ah, I think I get what you want.", "There is a 99% probability that this is not a good idea, but I will give you the code to do what I think you're asking for anyway:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First you need to change this line:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n variables = ['x','y']\n</code>\n</pre>\n", "senID": 2}, {"text": ["(since you want the variable names here, not the values)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Now in order for the variable x to be assigned, one way to do that is:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n locals()[variables[0]] = data[0]\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Your problem is that in your initialization of variables, variables[0] become 0, the value of x.", "And then you are over-writing that value with a new value."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The following code outputs 0, not 1."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n#\n# Description: trying to evaluate array -value to variable before assignment\n# but it overwrites the variable\n#\n# How can I evaluate before assigning on the line 16?\n\n#Initialization, dummy code?\nx=0\ny=0\n\nvariables = [x, y]\ndata = ['2,3,4', '5,5,6']\n\nx = 1    \n\nvariables[0] = data[0]\n\nprint(variables[0]);\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can get the desired result by wrapping x in an array and dereferencing."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n#\n# Description: trying to evaluate array -value to variable before assignment\n# but it overwrites the variable\n#\n# How can I evaluate before assigning on the line 16?\n\n#Initialization, dummy code?\nx=[0]\ny=[0]\n\nvariables = [x, y]\ndata = ['2,3,4', '5,5,6']\n\n# variables[0] should be evaluted to `x` here, i.e. x = data[0], how?\nvariables[0][0] = data[0]\n\nif ( variables[0][0] != x[0] ):\n    print(\"It does not work, why?\");\nelse:\n    print(\"It works!\");\n</code>\n</pre>\n", "senID": 4}], [{"text": ["[Partial Solution] "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[Partial Solution]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I think the Gerrat correctly uses locals, the limitations here, because some of the data in lab reports will never change."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Gerrat", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/4590407/how-can-i-evaluate-variable-to-another-variable-before-assigning/4590474#4590474"}, {"href": "http://docs.python.org/library/functions.html#locals", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n#\n# Description: smelling overuse, probably a roundabout of other problem, rethinking...\n\nvariables = ['x','y']\ndatas = ['1,2,3,4', '4,44,8,3']\n\nfor var, data in zip(variables, datas):\n        locals()[var] = data\n\n#Testing\nprint(x +\" should be '1,2,3,4'\");\nprint(y +\" should be '4,44,8,3'\");\n</code>\n</pre>\n", "senID": 2}, {"text": ["[SOLUTION] "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "[SOLUTION]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["jonesy and John Kugelman spot other problem, you need to use dynamic data structrures such as dictionary, a cleaned example below."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n variables = ['y', 'x', 'xE']\nvalues = dict((name, None) for name in variables)\n\n# GOAL TO GET ASSIGNMENT LIKE, data is in files \"y, x, xE\":\n\nfor name in variables:\n    values[name] = open('./'+name).read()\n\n# Testing, prints the contents\nfor val in variables:\n        print(values[val]);\n</code>\n</pre>\n", "senID": 5}, {"text": ["[Solution 2] by jonesy, it is actually the clearest code."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "[Solution 2]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/4590407/how-can-i-evaluate-variable-to-another-variable-before-assigning/4590473#4590473", "text": "jonesy", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n klist = ['x', 'y']\ndata = ['2,3,4', '5,5,6']\nmydict = dict(zip(klist, data))\n# mydict['x'] == '2,3,4'\n</code>\n</pre>\n", "senID": 7}]]