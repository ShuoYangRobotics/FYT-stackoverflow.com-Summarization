[[{"code": "<pre>\n<code>\n def first_lower(s):\n   if len(s) == 0:\n      return s\n   else:\n      return s[0].lower() + s[1:]\n\nprint first_lower(\"HELLO\")  # Prints \"hELLO\"\nprint first_lower(\"\")       # Doesn't crash  :-)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n s = \"Bobby tables\"\ns = s[0].lower() + s[1:]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Simplest way: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mystring = 'ABCDE'\n&gt;&gt;&gt; mystring[0].lower() + mystring[1:]\n'aBCDE'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Update "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["See this answer (by @RichieHindle) for a more foolproof solution, including handling empty strings.", "That answer doesn't handle None though, so here is my take:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "this answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3840843/how-to-downcase-the-first-character-of-a-string-in-python/3840854#3840854"}, {"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def first_lower(s):\n   if not s: # Added to handle case where s == None\n   return \n   else:\n      return s[0].lower() + s[1:]\n\n&gt;&gt;&gt; first_lower(None)\n&gt;&gt;&gt; first_lower(\"HELLO\")\n'hELLO'\n&gt;&gt;&gt; first_lower(\"\")\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 4}], [{"text": ["No need to handle special cases (and I think the symmetry is more Pythonic): "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def uncapitalize(s):\n    return s[:1].lower() + s[1:].upper()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One-liner which handles empty strings and None:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n func = lambda s: s[:1].lower() + s[1:] if s else ''\n\n&gt;&gt;&gt; func(None)\n&gt;&gt;&gt; ''\n&gt;&gt;&gt; func('')\n&gt;&gt;&gt; ''\n&gt;&gt;&gt; func('MARTINEAU')\n&gt;&gt;&gt; 'mARTINEAU'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Interestingly, none of these answers does exactly the opposite of capitalize().", "For example, capitalize('abC') returns Abc rather than AbC.", "If you want the opposite of capitalize(), you need something like:"], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "exactly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "capitalize()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "capitalize('abC')", "childNum": 0, "tag": "code", "childList": []}, {"text": "Abc", "childNum": 0, "tag": "code", "childList": []}, {"text": "AbC", "childNum": 0, "tag": "code", "childList": []}, {"text": "capitalize()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def uncapitalize(s):\n  if len(s) &gt; 0:\n    s = s[0].lower() + s[1:].upper()\n  return s\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'd write it this way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def first_lower(s):\n    if s == \"\":\n        return s\n    return s[0].lower() + s[1:]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This has the (relative) merit that it will throw an error if you inadvertently pass it something that isn't a string, like None or an empty list."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]