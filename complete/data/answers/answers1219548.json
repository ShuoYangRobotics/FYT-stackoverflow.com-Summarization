[[{"text": ["in Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for key, value in stateDict.items(): # .iteritems() in Python 2.x\n    print \"The abbreviation for %s is %s.\" % (key, value)\n</code>\n</pre>\n", "senID": 1}, {"text": ["in Java:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Map&lt;String,String&gt; stateDict;\n\nfor (Map.Entry&lt;String,String&gt; e : stateDict.entrySet())\n    System.out.println(\"The abbreviation for \" + e.getKey() + \" is \" + e.getValue() + \".\");\n</code>\n</pre>\n", "senID": 3}], [{"text": ["in java for associative array use Map"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import java.util.*;\n\nclass Foo\n{\n    public static void main(String[] args)\n    {\n    \tMap&lt;String, String&gt; stateMap = new HashMap&lt;String, String&gt;();\n    \tstateMap.put(\"ALABAMA\", \"AL\");\n    \tstateMap.put(\"ALASKA\", \"AK\");\n    \t// ...\n    \tstateMap.put(\"WYOMING\", \"WY\");\n\n    \tfor (Map.Entry&lt;String, String&gt; state : stateMap.entrySet()) {\n    \t\t System.out.printf(\n    \t\t\t\"The abbreviation for %s is %s%n\",\n    \t\t\tstate.getKey(),\n    \t\t\tstate.getValue()\n    \t\t);\n    \t}\n    }\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Also, to maintain insertion order, you can use a LinkedHashMap instead of a HashMap."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In python an ordered dictionary is available in Python 2.7 (not yet released) and Python 3.1.", "It's called OrderedDict."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ordered dictionary", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0372/"}]}], [{"text": ["Another way of doing it in Java.", "Although a better way has already been posted, this one's syntactically closer to your php code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for (String x:stateDict.keySet()){\n\t\tSystem.out.printf(\"The abbreviation for %s is %s\\n\",x,stateDict.get(x));\n\t}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is the modified code from o948 where you use a TreeMap instead of a HashMap.", "The Tree map will preserve the ordering of the keys by the key."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import java.util.*;\n\nclass Foo\n{\n public static void main(String[] args)\n {\n    Map&lt;String, String&gt; stateMap = new TreeMap&lt;String, String&gt;();\n    stateMap.put(\"ALABAMA\", \"AL\");\n    stateMap.put(\"ALASKA\", \"AK\");\n    // ...\n    stateMap.put(\"WYOMING\", \"WY\");\n\n    for (Map.Entry&lt;String, String&gt; state : stateMap.entrySet()) {\n             System.out.printf(\n                    \"The abbreviation for %s is %s%n\",\n                    state.getKey(),\n                    state.getValue()\n            );\n      }\n    }\n }\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Along the lines of Alexander's answer..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The native python dictionary doesn't maintain ordering for maximum efficiency of its primary use: an unordered mapping of keys to values."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I can think of two workarounds:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["TreeMap is not an answer to your question because it sorts elements by key, while LinkedHashMap preserves original order.", "However, TreeMap is more suitable for the dictionary because of sorting."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]