[[{"text": ["With b you already have an easily accessible list of the items you want.", "Just access them, when you need them at their indices b[0], b[1], .... Populating the namespace with too many variables, whose values can without major problems be stored in a container, is a design flaw (in my eyes)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b[0], b[1], ...", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Here's a way to inject new variables into the current modules namespace, but it's evil:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "evil", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nimport sys\n\nsomelist = range(10)\n\nfor i, item in enumerate(somelist):\n    setattr(sys.modules[__name__], 'v{0}'.format(i), item)\n\nprint v1 + v2\n# =&gt; 3\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Having these v1..10 variables seems like a code smell to me, but you can try this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n  v1 = b[0]\n  v2 = b[1]\n  v3 = b[2]\n  v4 = b[3]\n  v5 = b[4]\n  v6 = b[5]\n  v7 = b[6]\n  v8 = b[7]\n  v9 = b[8]\n  v10 = b[9]\nexcept IndexError:\n  pass\n</code>\n</pre>\n", "senID": 1}], [{"text": ["if you really want individual variables, at some point you have at least to do an unpacking like v1,v2,v3,v4,v5,v6,v7,v8,v9,v10 = some_list"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "v1,v2,v3,v4,v5,v6,v7,v8,v9,v10 = some_list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["but why would you want to do this?", "if something is a collection/list of things, it is best represented as such."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["To process a list of verses, verse by verse:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n with open('lyrics.conf') as f:\n    data = file.read()\nverses = data.split('/')\ndef build_blender_object(verse):\n  # Put meaningful code here\n  pass\nblender_objects = [build_blender_object(v) for v in verses]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then do whatever you want with the blender objects.", "If the position in the list matters, then you can use enumerate() to associate an index with each blender object."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Just for fun"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b = \"Some text/ with a / slash / character\".split('/')\nfor i in range(len(b)):\n    globals()['v' + str(i + 1)] = b[i]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Is it acceptable for the variables to exist and be set to None?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n v1,v2,v3,v4,v5,v6,v7,v8,v9,v10 = (b+[None]*10)[:10]\n</code>\n</pre>\n", "senID": 1}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n v1,v2,v3,v4,v5,v6,v7,v8,v9,v10 = b+[None]*(10-len(b))\n</code>\n</pre>\n", "senID": 3}]]