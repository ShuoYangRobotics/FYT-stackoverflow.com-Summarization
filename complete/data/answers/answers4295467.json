[[{"text": ["Note that I am testing speed, not correctness.", "If someone wants to edit in a unit test, I'll get around to it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n pyfunc_fastest: 152.58769989 usecs\npyfunc_local_extend: 154.679298401 usecs\npyfunc_iadd: 158.183312416 usecs\npyfunc_xrange: 162.234091759 usecs\npyfunc: 166.495800018 usecs\nIgnacio: 238.87629509 usecs\nIshpeck: 311.713695526 usecs\nFabrizioM: 456.708812714 usecs\nJohnKugleman: 519.239497185 usecs\nBwmat: 1309.29429531 usecs\n</code>\n</pre>\n", "senID": 1}, {"text": ["Test code here.", "The second revision is trash because I was rushing to get everybody tested that posted after my first batch of tests.", "These timings are for the fifth revision of the code."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://gist.github.com/718629"}]}, {"text": ["Here's the fastest version that I was able to get."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def pyfunc_fastest(x):\n    t = []\n    lenList = len(x)\n    extend = t.extend\n    for l in xrange(0, lenList):\n        extend([x[l]] * (lenList - l))\n</code>\n</pre>\n", "senID": 4}, {"text": ["Oddly, a version that I modified to avoid indexing into the list by using enumerate ran slower than the original."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "enumerate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; items = ['a', 'b', 'c', 'd']\n\n&gt;&gt;&gt; [item for i, item in enumerate(items) for j in xrange(len(items) - i)]\n['a', 'a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'd']\n</code>\n</pre>\n", "senID": 0}, {"text": ["First we use enumerate to pull out both indexes and values at the same time.", "Then we use a nested for loop to iterate over each item a decreasing number of times.", "(Notice that the variable j is never used.", "It is junk."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "enumerate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "j", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["This should be near optimal, with minimal memory usage thanks to the use of the enumerate and xrange generators."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "enumerate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "xrange", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["How about this - A simple one"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = ['a', 'b', 'c', 'd']\n&gt;&gt;&gt; t = []\n&gt;&gt;&gt; lenList = len(x)\n&gt;&gt;&gt; for l in range(0, lenList):\n...     t.extend([x[l]] * (lenList - l))\n... \n\n&gt;&gt;&gt; t\n['a', 'a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'd']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Lazy mode:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import itertools\n\nl = ['foo', 'bar', 'baz', 'quux']\n\nfor i in itertools.chain.from_iterable(itertools.repeat(e, len(l) - i)\n    for i, e in enumerate(l)):\n  print i\n</code>\n</pre>\n", "senID": 1}, {"text": ["Just shove it through list() if you really do need a list instead."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "list()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n list(itertools.chain.from_iterable(itertools.repeat(e, len(l) - i)\n  for i, e in enumerate(l)))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["My first instinct.."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = ['a', 'b', 'c', 'd']\nnl = []\n\ni = 0\n\nwhile len(l[i:])&gt;0:\n    nl.extend( [l[i]]*len(l[i:]) )\n    i+=1\n\nprint nl\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The trick is in using repeat from itertools"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import repeat\n\nalist = \"a b c d\".split()\nprint [ x  for idx, value in enumerate(alist) for x in repeat(value, len(alist) - idx) ]\n\n&gt;&gt;&gt;['a', 'a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'd']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use a generator: it's O(1) memory and O(N^2) cpu, unlike any solution that produces the final list which uses O(N^2) memory and cpu.", "This means it'll be massively faster as soon as the input list is large enough that the constructed list fills memory and swapping starts.", "It's unlikely you need to have the final list in memory unless this is homework."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def triangle(seq):\n    for i, x in enumerate(seq):\n        for _ in xrange(len(seq) - i - 1):\n            yield x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["To create that new list, list = [ a, a, a, a, b, b, b, c, c, d ] would require O(4n) = O(n) time since for every n elements, you are creating 4n elements in the second array.", "aaronasterling gives that linear solution."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "list = [ a, a, a, a, b, b, b, c, c, d ]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You could cheat and just not create the new list.", "Simply, get the index value as input.", "Divide the index value by 4.", "Use the result as the index value of the original list.   "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In pseudocode:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n function getElement(int i)\n{\n     int trueIndex = i / 4;\n     return list[trueIndex]; // Note: that integer division will lead us to the correct index in the original array.\n}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["fwiw:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lst = list('abcd')\n&gt;&gt;&gt; [i for i, j in zip(lst, range(len(lst), 0, -1)) for _ in range(j)]\n['a', 'a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'd']\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def gen_indices(list_length):\n    for index in range(list_length):\n        for _ in range(list_length - index):\n            yield index\n\nnew_list = [list[i] for i in gen_indices(len(list))]\n</code>\n</pre>\n", "senID": 0}, {"text": ["untested but I think it'll work"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]