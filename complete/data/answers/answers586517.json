[[{"text": ["I'd check out Python's built-in csv module.", "Frankly a .replace() on your first row should cover your synonyms issue, and if you're using csv.DictReader you should be able to deal with missing columns very easily:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv.DictReader", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html#csv.DictReader"}]}, {"code": "<pre>\n<code>\n my_dict_reader = csv.DictReader(somecsvfile)\nfor row in my_dict_reader:\n    SomeDBModel.address2=row.get('address2', None)\n</code>\n</pre>\n", "senID": 1}, {"text": ["assuming you wanted to store a None value for missing fields."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You should force the first row to be the headers, make the user match up their headers to your field names on the next page, and remember that mapping for their future dumps."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Whenever I do CSV imports the data really came from an Excel spreadsheet.", "I've been able to save time by using pyexcelerator to import the .xls directly.", "My .csv or .xls code is a generator that yields {'field_name':'data', ...} dictionaries that can be assigned to model objects."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "pyexcelerator", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/pyexcelerator"}, {"text": ".xls", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": ".csv", "childNum": 0, "tag": "code", "childList": []}, {"text": ".xls", "childNum": 0, "tag": "code", "childList": []}, {"text": "{'field_name':'data', ...}", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you're doing address data, you should accept vCard."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "vCard", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/VCard"}]}], [{"text": ["I would handle the random column header mapping in your script once it's uploaded.", "It's hard to make a \"catch all\" that would handle whatever the users might enter.", "I would have it evolve as you go and slowly build a list of one-one relations based on what your user uploads."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Or!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Check the column headers and make sure it's properly formatted and advise them how to fix it if it is not."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You could also accept XML and this would allow you to create your own schema that they would have to adhere to.", "Check out this tutorial."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "this tutorial", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.xfront.com/files/tutorials.html"}]}], [{"text": ["Take a look at this project: django-batchimport"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-batchimport", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-batchimport/"}]}, {"text": ["It might be overkill for you, but it can still give you some good ideas on improving your own code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit: also, ignore that it is only using xlrd for importing Excel.", "The base concepts are the same, just that you will use the csv module instead of xlrd."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you'll copy excel table into clipboard and then paste results into notepad, you'll notice that it's tab separated.", "I once used it to make bulk import from most of table editors by copy-pasting data from the editor into textarea on html page."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can use a background for textarea as a hint for number of columns and place your headers at the top suggesting the order for a user. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Javascript will process pasted data and display them to the user immediately with simple prevalidation making it easy to fix an error and repaste."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Then import button is clicked, data is validated again and import results are displayed.", "Unfortunately, I've never heard any feedback about whenever this was easy to use or not."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Anyway, I still see it as an option when implementing bulk import."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Look at csv module from stdlib.", "It contains presets for popualr CSV dialects like one produced by Excel."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Reader class support field mapping and if file contains column header it coes not depend on column order.", "For more complex logic, like looking up several alternative names for a field, you'll need to write your own implementation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]