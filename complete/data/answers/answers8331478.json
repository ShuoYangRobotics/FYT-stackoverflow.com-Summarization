[[{"text": ["If you want to get fancy, you could use operator.itemgetter:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "operator.itemgetter", "tag": "a", "pos": 0, "childList": [{"text": "operator.itemgetter", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/operator.html#operator.itemgetter"}, {"text": "operator.itemgetter", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from operator import itemgetter\n&gt;&gt;&gt; pick = itemgetter(0, 2)\n&gt;&gt;&gt; pick(\"Jack and Jill went up the hill\".split())\n('Jack', 'Jill')\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or as a one-liner (w/o the import):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; user1, user2 = itemgetter(0, 2)(\"Jack and Jill went up the hill\".split())\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You can do something like this "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = \"Jack and Jill went up the hill\"\nuser1, _, user2, _ = a.split(\" \", 3)\n</code>\n</pre>\n", "senID": 1}, {"text": ["where _ means that we don't care of the value, and split(\" \", 3) split the string in 4 segments. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "split(\" \", 3)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The first that comes to my mind is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = \"Jack and Jill went up the hill\"\n&gt;&gt;&gt; [e for n, e in enumerate(a.split()) if n in (0, 2)]\n['Jack', 'Jill']\n</code>\n</pre>\n", "senID": 1}, {"text": ["In case you wonder: enumerate generates tuples with a progressive number as first element and an element of the enumerated iterable as second."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "enumerate", "tag": "a", "pos": 0, "childList": [{"text": "enumerate", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#enumerate"}, {"text": "enumerate", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["EDIT: As said in the comments by @kindall, the final step would be:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; user1, user2 = [e for n, e in enumerate(a.split()) if n in (0, 2)]\n&gt;&gt;&gt; user1\n'Jack'\n&gt;&gt;&gt; user2\n'Jill'\n</code>\n</pre>\n", "senID": 4}, {"text": ["but I chose not to do the assignment just to keep the example more to the point (sorry if this confused somebody)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I'd rather do this in two lines, but here's a one-liner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["user1, user2 = [token for (i, token) in enumerate(a.split()) if i in (0, 2)]"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "user1, user2 = [token for (i, token) in enumerate(a.split()) if i in (0, 2)]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Here's what I would do instead (just for readability and less chance of introducing bugs if needs to be changed in the future)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n tokens = a.split()\nuser1 = tokens[0]\nuser2 = tokens[2]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This does the trick:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["user1, user2 = a.split()[0::2][:2]"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "user1, user2 = a.split()[0::2][:2]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Pick the first two elements of the sequence counting from 2 in 2."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Slicing supports a step parameter"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = \"Jack and Jill went up the hill\"\n(user1 , user2) = a.split()[0:4:2] #picks 1 and 3 element in the list\n</code>\n</pre>\n", "senID": 1}, {"text": ["but while it's possible to write funky oneliners in Python for sure it's not the best language for that kind of exercise."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]