[[{"text": ["You want to use a dict, but collections.defaultdict can come in really handy here so that you don't have to worry about whether the key exists in the dict or not -- it just defaults to 0.0:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "collections.defaultdict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import collections\n\nlines = [[0.2, 'A'], [0.1, 'A'], [0.3, 'A'], [0.3, 'B'], [0.2, 'C'], [0.5, 'C']]\namounts = collections.defaultdict(float)\nfor amount, letter in lines:\n    amounts[letter] += amount\n\nfor letter, amount in sorted(amounts.iteritems()):\n    print amount, letter\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try this out:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result = {}\nfor line in percents:\n    value, key = line\n    result[key] = result.get(key, 0) + float(value)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n total = {}\ndata = [('0.1', 'A'), ('0.2', 'A'), ('.3', 'B'), ('.4', 'B'), ('-10', 'C')]\nfor amount, key in data:\n    total[key] = total.get(key, 0.0) + float(amount)\n\nfor key, amount in total.items():\n    print key, amount\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Since all of the letter grades are grouped together, you can use itertools.groupby (and if not, just sort the list ahead of time to make them so):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data = [\n    [0.2, 'A'],\n    [0.1, 'A'],\n    [0.3, 'A'],\n    [0.3, 'B'],\n    [0.2, 'C'],\n    [0.5, 'C'],\n]\n\nfrom itertools import groupby\n\nsummary = dict((k, sum(i[0] for i in items)) \n                for k,items in groupby(data, key=lambda x:x[1]))\n\nprint summary\n</code>\n</pre>\n", "senID": 1}, {"text": ["Gives:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n {'A': 0.60000000000000009, 'C': 0.69999999999999996, 'B': 0.29999999999999999}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you have a list of lists like this:\n[ [0.2, A], [0.1, A], ...] (in fact it looks like a list of tuples :) "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[ [0.2, A], [0.1, A], ...]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n res_dict = {}\n\nfor pair in lst:\n    letter = pair[1]\n    val = pair[0]\n    try:\n        res_dict[letter] += val\n    except KeyError:\n        res_dict[letter] = val\n\nres_lst = [(val, letter) for letter, val in res_dict] # note, a list of tuples!\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Using collections.defaultdict to tally values\n(assuming text data in d):"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "collections.defaultdict", "tag": "a", "pos": 0, "childList": [{"text": "collections.defaultdict", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/release/2.6.6/library/collections.html#defaultdict-objects"}, {"text": "collections.defaultdict", "childNum": 0, "tag": "code", "childList": []}, {"text": "d", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s=collections.defaultdict(float)\n&gt;&gt;&gt; for ln in d:\n...     v,k=ln.split()\n...     s[k] += float(v)\n&gt;&gt;&gt; s\ndefaultdict(&lt;type 'float'&gt;, {'A': 0.60000000000000009, 'C': 0.69999999999999996, 'B': 0.29999999999999999})\n&gt;&gt;&gt; [\"%s %s\" % (v,k) for k,v in s.iteritems()]\n['0.6 A', '0.7 C', '0.3 B']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you are using Python 3.1 or newer, you can use collections.Counter.", "Also I suggest using decimal.Decimal instead of floats:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "collections.Counter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/library/collections.html#collections.Counter"}, {"text": "decimal.Decimal", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/decimal.html"}]}, {"code": "<pre>\n<code>\n # Counter requires python 3.1 and newer\nfrom collections import Counter\nfrom decimal import Decimal\n\nlines = [\"0.2 A\", \"0.1 A\", \"0.3 A\", \"0.3 B\", \"0.2 C\", \"0.5 C\"]\nresults = Counter()\nfor line in lines:\n    percent, label = line.split()\n    results[label] += Decimal(percent)\nprint(results)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The result is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This is verbose, but works:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Python 2.7\nlines = \"\"\"0.2 A\n0.1 A\n0.3 A\n0.3 B\n0.2 C\n0.5 C\"\"\"\n\nlines = lines.split('\\n')\n#print(lines)\npctg2total = {}\nthing2index = {}\nindex = 0\nfor line in lines:\n    pctg, thing = line.split()\n    pctg = float(pctg)\n    if thing not in thing2index:\n        thing2index[thing] = index\n        index = index + 1\n        pctg2total[thing] = pctg\n    else:\n        pctg2total[thing] = pctg2total[thing] + pctg\noutput = ((pctg2total[thing], thing) for thing in pctg2total)\n# Let's sort by the first occurrence.\noutput = list(sorted(output, key = lambda thing: thing2index[thing[1]]))\nprint(output)\n\n&gt;&gt;&gt; \n[(0.60000000000000009, 'A'), (0.29999999999999999, 'B'), (0.69999999999999996, 'C')]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n letters = {}\nfor line in open(\"data\", \"r\"):\n    lineStrip = line.strip().split()\n    percent = float(lineStrip[0])\n    letter = lineStrip[1]\n    if letter in letters:\n        letters[letter] = percent + letters[letter]\n    else:\n        letters[letter] = percent\n\nfor letter, percent in letters.items():\n    print letter, percent\n\nA 0.6\nC 0.7\nB 0.3\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import groupby, imap\n&gt;&gt;&gt; from operator import itemgetter\n&gt;&gt;&gt; data = [['0.2', 'A'], ['0.1', 'A'], ['0.3', 'A'], ['0.3', 'B'], ['0.2', 'C'], ['0.5', 'C']]\n&gt;&gt;&gt; # data = sorted(data, key=itemgetter(1))\n... \n&gt;&gt;&gt; for k, g in groupby(data, key=itemgetter(1)):\n...     print sum(imap(float, imap(itemgetter(0), g))), k\n... \n0.6 A\n0.3 B\n0.7 C\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Lets say we have this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data =[(b, float(a)) for a,b in \n    (line.split() for line in\n        \"\"\"\n        0.2 A\n        0.1 A\n        0.3 A\n        0.3 B\n        0.2 C\n        0.5 C\"\"\".splitlines()\n        if line)]\nprint data \n# [('A', 0.2), ('A', 0.1), ('A', 0.3), ('B', 0.3), ('C', 0.2), ('C', 0.5)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can now just go though this and sum"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n counter = {}\nfor letter, val in data:\n    if letter in counter:\n        counter[letter]+=val\n    else:\n        counter[letter]=val\n\nprint counter.items()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or group values together and use sum:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from itertools import groupby\n# you want the name and the sum of the values\nprint [(name, sum(value for k,value in grp)) \n    # from each group\n    for name, grp in \n    # where the group name of a item `p` is given by `p[0]`\n    groupby(sorted(data), key=lambda p:p[0])]\n</code>\n</pre>\n", "senID": 5}]]