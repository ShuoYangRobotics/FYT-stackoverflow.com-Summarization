[[{"tag": "ul", "num": 3, "lis": [{"text": ["Don't put everything into classes"], "childNum": 0, "tag": "strong", "senID": 0, "childList": []}, {"text": ["Don't worry about keeping one class per module"], "childNum": 0, "tag": "strong", "senID": 1, "childList": []}, {"text": ["Use inheritance for behavior, not interfaces"], "childNum": 0, "tag": "strong", "senID": 2, "childList": []}]}, {"text": ["Just do this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Dog(object):\n    def make_sound(self):\n        return \"woof!\"\n\nclass Cat(object):\n    def make_sound(self):\n        return \"meow!\"\n\nclass LolCat(object):\n    def make_sound(self):\n        return \"i can has cheezburger?\"\n</code>\n</pre>\n", "senID": 4}], [{"text": ["The referenced article has some good advice that can easily be misquoted and misunderstood.", "And some bad advice."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Leave Java behind.", "Start fresh.", "\"do not trust your [Java-based] instincts\".", "Saying things are \"counter-intuitive\" is a bad habit in any programming discipline.", "When learning a new language, start fresh, and drop your habits.", "Your intuition must be wrong.  "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "must", "childNum": 0, "tag": "em", "pos": 5, "childList": []}]}, {"text": ["Languages are different.", "Otherwise, they'd be the same language with different syntax, and there'd be simple translators.", "Because there are not simple translators, there's no simple mapping.", "That means that intuition is unhelpful and dangerous."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "different", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 5, "lis": [{"text": ["\"A static method in Java does not translate to a Python classmethod.", "\"  This kind of thing is really limited and unhelpful.", "Python has a staticmethod decorator.", "It also has a classmethod decorator, for which Java has no equivalent.  "], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "staticmethod", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#staticmethod"}, {"text": "classmethod", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#classmethod"}]}, {"text": ["The Java switch statement in Java can be implemented several ways.", "First, and foremost, it's usually an if elif elif elif construct.", "The article is unhelpful in this respect.", "If you're absolutely sure this is too slow (and can prove it) you can use a Python dictionary as a slightly faster mapping from value to block of code.", "Blindly translating switch to dictionary (without thinking) is really bad advice."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "switch", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if elif elif elif", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Don't use XML.", "Doesn't make sense when taken out of context.", "In context it means don't rely on XML to add flexibility.", "Java relies on describing stuff in XML; WSDL files, for example, repeat information that's obvious from inspecting the code.", "Python relies on introspection instead of restating everything in XML."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Getters and setters are not required in Python they way they're required in Java.", "First, you have better introspection in Python, so you don't need getters and setters to help make dynamic bean objects.", "(For that, you use collections.namedtuple).  "], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "required", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "collections.namedtuple", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#collections.namedtuple"}]}, {"text": ["Code duplication is often a necessary evil in Java (e.g.", "method overloading), but not in Python.", "Correct.", "Python uses optional arguments instead of method overloading.  "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]}], [{"text": ["One thing you might be used to in Java that you won't find in Python is strict privacy.", "This is not so much something to look out for as it is something not to look for (I am embarrassed by how long I searched for a Python equivalent to 'private' when I started out!).", "Instead, Python has much more transparency and easier introspection than Java.", "This falls under what is sometimes described as the \"we're all consenting adults here\" philosophy.", "There are a few conventions and language mechanisms to help prevent accidental use of \"unpublic\" methods and so forth, but the whole mindset of information hiding is virtually absent in Python."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "accidental", "childNum": 0, "tag": "em", "pos": 4, "childList": []}]}], [{"text": ["The biggest one I can think of is not understanding or not fully utilizing duck typing.", "In Java you're required to specify very explicit and detailed type information upfront.", "In Python typing is both dynamic and largely implicit.", "The philosophy is that you should be thinking about your program at a higher level than nominal types.", "For example, in Python, you don't use inheritance to model substitutability.", "Substitutability comes by default as a result of duck typing.", "Inheritance is only a programmer convenience for reusing implementation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Similarly, the Pythonic idiom is \"beg forgiveness, don't ask permission\".", "Explicit typing is considered evil.", "Don't check whether a parameter is a certain type upfront.", "Just try to do whatever you need to do with the parameter.", "If it doesn't conform to the proper interface, it will throw a very clear exception and you will be able to find the problem very quickly.", "If someone passes a parameter of a type that was nominally unexpected but has the same interface as what you expected, then you've gained flexibility for free."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "is", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["A sensation of flying?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "flying", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://xkcd.com/353/"}]}], [{"text": ["The most important thing, from a Java POV, is that it's perfectly ok to not make classes for everything.", "There are many situations where a procedural approach is simpler and shorter."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The next most important thing is that you will have to get over the notion that the type of an object controls what it may do; rather, the code controls what objects must be able to support at runtime (this is by virtue of duck-typing).  "], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "type", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "code", "childNum": 0, "tag": "em", "childList": []}, {"text": "at runtime", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Oh, and use native lists and dicts (not customized descendants) as far as possible."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The way exceptions are treated in Python is different from \nhow they are treated in Java.", "While in Java the advice\nis to use exceptions only for exceptional conditions this is not\nso with Python. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In Python things like Iterator makes use of exception mechanism to signal that there are no more items.But such a design is not considered as good practice in Java."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As Alex Martelli puts in his book Python in a Nutshell\nthe exception mechanism with other languages (and applicable to Java) \nis LBYL (Look Before You Leap) : \nis to check in advance, before attempting an operation, for all circumstances that might make the operation invalid. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Python in a Nutshell", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://oreilly.com/catalog/9780596100469"}, {"text": "LBYL", "childNum": 0, "tag": "b", "childList": []}]}, {"text": ["Where as with Python the approach is EAFP (it's easier to Ask for forgiveness than permission)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["A corrollary to \"Don't use classes for everything\": callbacks. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The Java way for doing callbacks relies on passing objects that implement the callback interface (for example ActionListener with its actionPerformed() method).", "Nothing of this sort is necessary in Python, you can directly pass methods or even locally defined functions:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "ActionListener", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "actionPerformed()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def handler():\n   print(\"click!\")\nbutton.onclick(handler)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or even lambdas:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n button.onclick(lambda: print(\"click!\\n\"))\n</code>\n</pre>\n", "senID": 4}]]