[[{"text": ["It helps to picture what happens to the reference held by c in each iteration:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [ 0, 1, 2, 3, 4, 5 ]\n  ^\n  |\n  c\n</code>\n</pre>\n", "senID": 1}, {"text": ["c holds a reference pointing to the first element in the list.", "When you do c += 2 (i.e., c = c + 2, the temporary variable c is reassigned a new value.", "This new value is 2, and c is rebound to this new value.", "The original list is left alone."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "c += 2", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "c = c + 2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n [ 0, 1, 2, 3, 4, 5 ]\n\n  c -&gt; 2\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now, in the dictionary case, here's what c is bound to during the first iteration:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [ {'cow':0}, {'cow':1}, {'cow':2}, {'cow':3}, {'cow':4}, {'cow':5} ]\n     ^\n     |\n     c\n</code>\n</pre>\n", "senID": 5}, {"text": ["Here, c points to the dictionary object {'cow':0}.", "When you do c['cow'] += 2 (i.e., c['cow'] = c['cow'] + 2), the dictionary object itself is changed, as c is not rebound to an unrelated object.", "That is, c still points to that first dictionary object."], "childNum": 6, "tag": "p", "senID": 6, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "{'cow':0}", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "c['cow'] += 2", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "c['cow'] = c['cow'] + 2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n [ {'cow':2}, {'cow':1}, {'cow':2}, {'cow':3}, {'cow':4}, {'cow':5} ]\n     ^\n     |\n     c\n</code>\n</pre>\n", "senID": 7}], [{"text": ["It's not actually acting differently.", "Changing a variable is not the same as changing the attribute of a variable.", "You'll see the same thing in the following example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = 1\nb = a\nb = 2\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here a is still 1.  b was assigned a different value and is no longer the same as a"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = {\"hello\": 1}\nb = a\nb[\"hello\"] = 2\n</code>\n</pre>\n", "senID": 3}, {"text": ["Here a[\"hello] returns 2 instead of 1.  b is still the same value because we didn't assign anything to b, and thus b is the same as a.", "We changed the property [\"hello\"] of b to 2 and since a and b are the same variable a[\"hello\"] is also 2"], "childNum": 10, "tag": "p", "senID": 4, "childList": [{"text": "a[\"hello]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "[\"hello\"]", "childNum": 0, "tag": "code", "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "a[\"hello\"]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["c is a temporary, disposable variable in both cases.", "(Keep in mind that in Python, all variables are merely references, bound to the objects they represent and capable of being rebound to different objects.", "Python is more consistent than certain other languages in this respect."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In your list example, each iteration rebinds c from one integer to another one, leaving the original list unchanged."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In your dict example, each iteration accesses the dict to which c is temporarily bound, rebinding one of that dict's members to a different integer."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In both cases, c is ignored at the end of the loop, but since you've changed a data structure other than c in the second case, you notice the changes when the loop is done."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Doing a name assignment as you have in the first loop only rebinds the name.", "Doing an item assigment as you have in the second loop modifies the existing object."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's nothing to do with for ... in .... Change your code from for c in cows: to c = cows[3] (and dedent the next line) in each example and see the effect."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "for ... in ...", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for c in cows:", "childNum": 0, "tag": "code", "childList": []}, {"text": "c = cows[3]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In your first example, the list elements are int objects; they are immutable.", "In the second example, they are dict objects, which are mutable."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Regardless of looping, you have to note that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n some_var = some_object\n</code>\n</pre>\n", "senID": 1}, {"text": ["binds the name some_var to the object some_object.", "The previous object (if any) referenced by some_var is unbound."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "some_var", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "some_object", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "some_var", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n some_var[some_index] = some_object\n</code>\n</pre>\n", "senID": 3}, {"text": ["does not bind/unbind some_var; it is just syntactic sugar for the following:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "some_var", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n some_var.__setitem__(some_index, some_object)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Obviously, some_var still points to the same indexable (a sequence or a mapping) object as before, which has just been modified."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "some_var", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["In the second example, you have a list of dictionary objects.", "c references the dictionary object which is modified inside the loop scope."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "of", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]