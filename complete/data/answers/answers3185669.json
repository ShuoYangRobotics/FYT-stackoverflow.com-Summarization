[[{"code": "<pre>\n<code>\n n = 1\nwith open('sourcefile.txt') as input:\n    with open('destination.txt', 'w') as output:\n        for line in input:\n            if line.startswith('%'):\n                line = str(n) + line[1:]\n                n += 1\n            output.write(line)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here's a way to do it in Python"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nfrom itertools import count\ns=\"\"\"\n% line one\n% line two\n% line three\"\"\"\n\ndef f():\n    n=count(1)\n    def inner(m):\n        return str(next(n))\n    return inner\n\nnew_s = re.sub(\"%\",f(),s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["alternatively you could use a lambda function in there like so:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n new_s = re.sub(\"%\",lambda m,n=count(1):str(next(n)),s)\n</code>\n</pre>\n", "senID": 3}, {"text": ["But it's easy and better to skip regexp altogether"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import print_function   # For Python&lt;3\nimport fileinput\n\nf=fileinput.FileInput(\"file.txt\", inplace=1)\nfor i,line in enumerate(f):\n    print (\"{0}{1}\".format(i, line[1:]), end=\"\")\n</code>\n</pre>\n", "senID": 5}, {"text": ["Since all the lines start with \"%\" there is no need to even look at that first char"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Although this problem would best be solved by reading the file line by line and checking the first character with simple string functions, here is how you would do incremental replacement on a string in java:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Pattern p = Pattern.compile(\"^%\");\nMatcher m = p.matcher(text);\nStringBuffer sb = new StringBuffer();\nint i = 0;\nwhile (m.find()) {\n    m.appendReplacement(sb, String.valueOf(i++));\n}\nm.appendTail(sb);\n\nreturn sb.toString();\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Depending on your choice of language (you've listed a few) PHP's preg_replace_callback() might be an appropriate function to use"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "preg_replace_callback()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://uk3.php.net/manual/en/function.preg-replace-callback.php"}]}, {"code": "<pre>\n<code>\n $text = \"% First Line\\n% Second Line\\n% Third Line\";\n\nfunction cb_numbers($matches)\n{\n    static $c = 1;\n\n    return $c++;\n}\n$text = preg_replace_callback(\n            \"/(%)/\",\n            \"cb_numbers\",\n            $text);\n\necho $text;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["in python re.sub accept function as parameter see http://docs.python.org/library/re.html#re.sub"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/re.html#re.sub", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#re.sub"}]}], [{"text": ["And a PHP version for good measure:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $input = @fopen('input.txt', 'r');\n$output = @fopen(\"output.txt\", \"w\");\n\nif ($input &amp;&amp; $output) {\n    $i = 0;\n    while (!feof($input)) {\n        $line = fgets($input);\n        fputs($output, ($line[0] === '%') ?\n            substr_replace($line, ++$i, 0, 1) :\n            $line\n        );\n    }\n    fclose($input);\n    fclose($output);\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["And just because you can, a perl one-liner (yes, with a regex):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n perl -i.bak -pe 'BEGIN{$i=1} (s/^%/$i/) &amp;&amp; $i++' input.txt\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here's a C# (3.0+) version:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string s = \"% line one\\n% line two\\n% line three\";\nint n = 1;\ns = Regex.Replace(s, @\"(?m)^%\", m =&gt; { return n++.ToString(); });\nConsole.WriteLine(s);\n</code>\n</pre>\n", "senID": 1}, {"text": ["output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 1 line one\n2 line two\n3 line three\n</code>\n</pre>\n", "senID": 3}, {"text": ["Of course it requires the whole text to be loaded into memory.", "If I were doing this for real, I'd probably go with a line-by-line approach."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n import re, itertools\ncounter= itertools.count(1)\nreplacer= lambda match: \"%d\" % counter.next()\ntext= re.sub(\"(?m)^%\", replacer, text)\n</code>\n</pre>\n", "senID": 0}, {"text": ["counter is\u2026 a counter :).", "replacer is a function returning the counter values as strings.", "The \"(?m)^%\" regex is true for every % at the start of a line (note the multi-line flag)."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "counter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "replacer", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "\"(?m)^%\"", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "%", "childNum": 0, "tag": "code", "childList": []}]}]]