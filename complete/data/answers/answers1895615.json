[[{"text": ["Just for reference for ignoring variables in PyDev"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["By default pydev will ignore following variables "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ['_', 'empty', 'unused', 'dummy']\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can add more by passing supression parameters"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n -E, --unusednames  ignore unused locals/arguments if name is one of these values\n</code>\n</pre>\n", "senID": 4}, {"text": ["Ref:\nhttp://eclipse-pydev.sourcearchive.com/documentation/1.0.3/PyCheckerLauncher%5F8java-source.html"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://eclipse-pydev.sourcearchive.com/documentation/1.0.3/PyCheckerLauncher%5F8java-source.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://eclipse-pydev.sourcearchive.com/documentation/1.0.3/PyCheckerLauncher%5F8java-source.html"}]}], [{"text": ["How about itertools.repeat:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools.repeat", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#itertools.repeat"}]}, {"code": "<pre>\n<code>\n import itertools\ncount = 5\ndef make_pat():\n    return (random() - 0.5, random() - 0.5)\nlist(x() for x in itertools.repeat(make_pat, count))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Sample output:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Sample output:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [(-0.056940506273799985, 0.27886450895662607), \n(-0.48772848046066863, 0.24359038079935535), \n(0.1523758626306998, 0.34423337290256517), \n(-0.018504578280469697, 0.33002406492294756), \n(0.052096928160727196, -0.49089780124549254)]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n randomSample = [(random() - 0.5, random() - 0.5) for _ in range(count)]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Sample output, for count=10 and assuming that you mean the Standard Library random() function:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "count=10", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "random()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n [(-0.07, -0.40), (0.39, 0.18), (0.13, 0.29), (-0.11, -0.15),\\\n(-0.49, 0.42), (-0.20, 0.21), (-0.44, 0.36), (0.22, -0.08),\\\n(0.21, 0.31), (0.33, 0.02)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you really need to make it a function, then you can abbreviate by using a lambda:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "lambda", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n f = lambda count: [(random() - 0.5, random() - 0.5) for _ in range(count)]\n</code>\n</pre>\n", "senID": 4}, {"text": ["This way  you can call it like:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f(1)\nf(1)\n[(0.03, -0.09)]\n&gt;&gt;&gt; f(2)\nf(2)\n[(-0.13, 0.38), (0.10, -0.04)]\n&gt;&gt;&gt; f(5)\nf(5)\n[(-0.38, -0.14), (0.31, -0.16), (-0.34, -0.46), (-0.45, 0.28), (-0.01, -0.18)]\n&gt;&gt;&gt; f(10)\nf(10)\n[(0.01, -0.24), (0.39, -0.11), (-0.06, 0.09), (0.42, -0.26), (0.24, -0.44) , (-0.29, -0.30), (-0.27, 0.45), (0.10, -0.41), (0.36, -0.07), (0.00, -0.42)]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 6}, {"text": ["you get the idea..."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Late to the party, but here's a potential idea:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def RandomSample(count):\n    f = lambda: random() - 0.5\n    r = range if count &lt; 100 else xrange # or some other number\n    return [(f(), f()) for _ in r(count)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Strictly speaking, this is more or less the same as the other answers, but it does two things that look kind of nice to me."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["First, it removes that duplicate code you have from writing random() - 0.5 twice by putting that into a lambda."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "random() - 0.5", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Second, for a certain size range, it chooses to use  xrange() instead of range() so as not to unnecessarily generate a giant list of numbers you're going to throw away.", "You may want to adjust the exact number, because I haven't played with it at all, I just thought it might be a potential efficiency concern."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "xrange()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "range()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["There should be a way to suppress code analysis errors in PyDev, like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://pydev.org/manual%5Fadv%5Fassistants.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pydev.org/manual%5Fadv%5Fassistants.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pydev.org/manual%5Fadv%5Fassistants.html"}]}, {"text": ["Also, PyDev will ignore unused variables that begin with an underscore, as shown here:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://pydev.org/manual%5Fadv%5Fcode%5Fanalysis.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://pydev.org/manual%5Fadv%5Fcode%5Fanalysis.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pydev.org/manual%5Fadv%5Fcode%5Fanalysis.html"}]}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n while count &gt; 0:\n    pattern.append((random() - 0.5, random() - 0.5))\n    count -= 1\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import itertools, random   \n\ndef RandomSample2D(npoints, get_random=lambda: random.uniform(-.5, .5)):\n    return ((r(), r()) for r in itertools.repeat(get_random, npoints))\n</code>\n</pre>\n", "senID": 0}, {"tag": "ul", "num": 2, "lis": [{"text": "uses ", "tag": "none", "senID": 1}, {"text": "returns an iterator instead of list", "tag": "none", "senID": 2}]}]]