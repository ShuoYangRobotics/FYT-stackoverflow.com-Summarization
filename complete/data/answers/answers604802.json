[[{"text": ["From Dive Into Python:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Dive Into Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.org/getting_to_know_python/lists.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; li\n['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new', 'two', 'elements']\n&gt;&gt;&gt; li.index(\"example\")\n5\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There is the index method, i = array.index(value), but I don't think you can specify a custom comparison operator.", "It wouldn't be hard to write your own function to do so, though:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "index", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "i = array.index(value)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def custom_index(array, compare_function):\n    for i, v in enumerate(array):\n        if compare_function(v):\n            return i\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The best way is probably to use the list method .index. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For the objects in the list, you can do something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def __eq__(self, other):\n    return self.Value == other.Value\n</code>\n</pre>\n", "senID": 2}, {"text": ["with any special processing you need."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You can also use a for/in statement with enumerate(arr)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Example of finding the index of an item that has value > 100."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n for index, item in enumerate(arr):\n    if item &gt; 100:\n        return index, item\n</code>\n</pre>\n", "senID": 6}, {"text": ["Source"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Source", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.daniweb.com/forums/thread174502.html"}]}], [{"text": ["The index method of a list will do this for you.", "If you want to guarantee order, sort the list first using sorted().", "Sorted accepts a cmp or key parameter to dictate how the sorting will happen:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sorted()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n a = [5, 4, 3]\nprint sorted(a).index(5)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = ['one', 'aardvark', 'a']\nprint sorted(a, key=len).index('a')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you just want to find out if an element is contained in the list or not:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; li\n['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new', 'two', 'elements']\n&gt;&gt;&gt; 'example' in li\nTrue\n&gt;&gt;&gt; 'damn' in li\nFalse\n</code>\n</pre>\n", "senID": 1}], [{"text": ["assuming you want to find a value in a numpy array,\nI guess something like this might work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Numpy.where(arr==\"value\")[0]"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["how's this one?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def global_index(lst, test):\n    return ( pair[0] for pair in zip(range(len(lst)), lst) if test(pair[1]) )\n</code>\n</pre>\n", "senID": 1}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; global_index([1, 2, 3, 4, 5, 6], lambda x: x&gt;3)\n&lt;generator object &lt;genexpr&gt; at ...&gt;\n&gt;&gt;&gt; list(_)\n[3, 4, 5]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here is another way using list comprehension (some people might find it debatable).", "It is very approachable for simple tests, e.g.", "comparisons on object attributes (which I need a lot):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n el = [x for x in mylist if x.attr == \"foo\"][0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course this assumes the existence (and, actually, uniqueness) of a suitable element in the list."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I found this by adapting some tutos.", "Thanks to google, and to all of you ;)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def findall(L, test):\n    i=0\n    indices = []\n    while(True):\n        try:\n            # next value in list passing the test\n            nextvalue = filter(test, L[i:])[0]\n\n            # add index of this value in the index list,\n            # by searching the value in L[i:] \n            indices.append(L.index(nextvalue, i))\n\n            # iterate i, that is the next index from where to search\n            i=indices[-1]+1\n        #when there is no further \"good value\", filter returns [],\n        # hence there is an out of range exeption\n        except IndexError:\n            return indices\n</code>\n</pre>\n", "senID": 1}, {"text": ["A very simple use:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = [0,0,2,1]\nind = findall(a, lambda x:x&gt;0))\n\n[2, 3]\n</code>\n</pre>\n", "senID": 3}, {"text": ["P.S.", "scuse my english"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I use function for returning index for the matching element (Python 2.6):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def index(l, f):\n     return next((i for i in xrange(len(l)) if f(l[i])), None)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then use it via lambda function for retrieving needed element by any required equation e.g.", "by using element name."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n element = mylist[index(mylist, lambda item: item[\"name\"] == \"my name\")]\n</code>\n</pre>\n", "senID": 3}, {"text": ["If i need to use it in several places in my code i just define specific find function e.g.", "for finding element by name:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def find_name(l, name):\n     return l[index(l, lambda item: item[\"name\"] == name)]\n</code>\n</pre>\n", "senID": 5}, {"text": ["And then it is quite easy and readable:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n element = find_name(mylist,\"my name\")\n</code>\n</pre>\n", "senID": 7}], [{"code": "<pre>\n<code>\n #include&lt;stdio.h&gt;\n#include&lt;conio.h&gt;\n\nvoid main (void)\n{\n    clrscr();\n    static int arr[10];\n    int i,n;\n    for(i=0; i&lt;10; i++)\n    {\n        printf(\"\\n enter value: \");\n        scanf(\"%d\",&amp;arr[i]);\n    }\n\n    clrscr();\n\n    printf(\"Enter Number to find Location: \");\n    scanf(\"%d\",&amp;n);\n\n    for(i=0; i&lt;10; i++)\n    {\n        if(n==arr[i])\n        printf(\"Location of Number in index is %d\",i);\n        if(i&gt;10)\n        printf(\"number not found in index\");\n    }\n    getch();\n}\n</code>\n</pre>\n", "senID": 0}]]