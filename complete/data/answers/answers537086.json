[[{"text": ["Here's four variants:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "an incremental list creation", "tag": "none", "senID": 1}, {"text": "\"pre-allocated\" list", "tag": "none", "senID": 2}, {"text": "array.array()", "tag": "none", "senID": 3}, {"text": "numpy.zeros()", "tag": "none", "senID": 4}]}, {"text": ["&nbsp;"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n python -mtimeit -s\"N=10**6\" \"a = []; app = a.append;\"\\\n    \"for i in xrange(N):  app(i);\"\n10 loops, best of 3: 390 msec per loop\n\npython -mtimeit -s\"N=10**6\" \"a = [None]*N; app = a.append;\"\\\n    \"for i in xrange(N):  a[i] = i\"\n10 loops, best of 3: 245 msec per loop\n\npython -mtimeit -s\"from array import array; N=10**6\" \"a = array('i', [0]*N)\"\\\n    \"for i in xrange(N):\" \"  a[i] = i\"\n10 loops, best of 3: 541 msec per loop\n\npython -mtimeit -s\"from numpy import zeros; N=10**6\" \"a = zeros(N,dtype='i')\"\\\n    \"for i in xrange(N):\" \"  a[i] = i\"\n10 loops, best of 3: 353 msec per loop\n</code>\n</pre>\n", "senID": 6}, {"text": ["It shows that [None]*N is the fastest and array.array is the slowest in this case."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "[None]*N", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "array.array", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["you can create list of the known length like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [None] * known_number\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In most of everyday code you won't need such optimization."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, when list efficiency becomes an issue, the first thing you should do is replace generic list with typed one from arraymodule which is much more efficient."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "arraymodule", "tag": "a", "pos": 0, "childList": [{"text": "array", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/array.html"}, {"text": "array", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Here's how list of 4 million floating point numbers cound be created:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import array\nlst = array.array('f', [0.0]*4000*1000)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["In python, all objects are allocated on the heap, but python uses a special memory allocator (so malloc won't be called every time you need a new object).", "There are also some optimizations for small ints and the likes, which are cached, but which values and how is implementation dependent."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you're wanting to manipulate numbers efficiently in Python then have a look at NumPy (\nhttp://numpy.scipy.org/).", "It let's you do things extremely fast while still getting to use Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://numpy.scipy.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}]}, {"text": ["To do what your asking in NumPy you'd do something like"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import numpy as np\nmyarray = np.zeros(4000)\n</code>\n</pre>\n", "senID": 2}, {"text": ["which would give you an array of floating point numbers initialized to zero.", "You can then do very cool things like multiply whole arrays by a single factor or by other arrays and other stuff (kind of like in Matlab if you've ever used that) which is very fast (most of the actual work is happening in the highly optimized C part of the NumPy library)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If it's not arrays of numbers your after then you're probably not going to find a way to do what you want in Python.", "A Python list of objects is a list of points to objects internally (I think so anyway, I'm not an expert of Python internals) so it would still be allocating each of its members as you create them."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Just create the list at the beginning like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = range(10)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you can assign values writing"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a[7] = an object\n</code>\n</pre>\n", "senID": 3}]]