[[{"text": ["As you copy each line of the file to the output, assess its probability that it should be deleted.", "The first line should have a 3,609,739/158,609,739 chance of being deleted.", "If you generate a random number between 0 and 1 and that number is less than that ratio, don't copy it to the output.", "Now the odds for the second line are 3,609,738/158,609,738; if that line is not deleted, the odds for the third line are 3,609,738/158,609,737.", "Repeat until done."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Because the odds change with each line processed, this algorithm guarantees the exact line count.", "Once you've deleted 3,609,739 the odds go to zero; if at any time you would need to delete every remaining line in the file, the odds go to one."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You could always pre-generate which line numbers (a list of 3,609,739 random numbers selected without replacement) you plan on deleting, then just iterate through the file and copy to another, skipping lines as necessary.", "As long as you have space for a new file this would work."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You could select the random numbers with random.sample\nE.g.,"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "random.sample", "tag": "a", "pos": 0, "childList": [{"text": "random.sample", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/random.html#random.sample"}, {"text": "random.sample", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n random.sample(xrange(158609739), 3609739)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I believe you're looking for \"Algorithm S\" from section 3.4.2 of Knuth (D. E. Knuth, The Art of Computer Programming.", "Volume 2: Seminumerical Algorithms, second edition.", "Addison-Wesley, 1981). "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"Algorithm S\" from section 3.4.2 of Knuth (D. E. Knuth, The Art of Computer Programming. Volume 2: Seminumerical Algorithms, second edition. Addison-Wesley, 1981)", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.sgi.com/tech/stl/random_sample.html"}]}, {"text": ["You can see several implementations at http://rosettacode.org/wiki/Knuth%27s_algorithm_S"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://rosettacode.org/wiki/Knuth%27s_algorithm_S", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rosettacode.org/wiki/Knuth%27s_algorithm_S"}]}, {"text": ["The Perlmonks list has some Perl implementations of Algorithm S and Algorithm R that might also prove useful."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Perlmonks list has some Perl implementations of Algorithm S and Algorithm R", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.perlmonks.org/?node_id=177092"}]}, {"text": ["These algorithms rely on there being a meaningful interpretation of floating point numbers like 3609739/158609739, 3609738/158609738, etc.", "which might not have sufficient resolution with a standard Float datatype, unless the Float datatype is implemented using numbers of double precision or larger."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "might", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "Float", "childNum": 0, "tag": "code", "childList": []}, {"text": "Float", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://en.wikipedia.org/wiki/Double_precision", "text": "double precision", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Here's a possible solution using Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random\n\nskipping = random.sample(range(158609739), 3609739)\n\ninput = open(input)\noutput = open(output, 'w')\n\nfor i, line in enumerate(input):\n    if i in skipping:\n        continue\n    output.write(line)\n\ninput.close()\noutput.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here's another using Mark's method:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import random\n\nlines_in_file = 158609739\nlines_left_in_file = lines_in_file\nlines_to_delete = lines_in_file - 155000000\n\ninput = open(input)\noutput = open(output, 'w')\n\ntry:\n    for line in input:\n        current_probability = lines_to_delete / lines_left_in_file\n        lines_left_in_file -= 1\n        if random.random &lt; current_probability:\n            lines_to_delete -= 1\n            continue\n        output.write(line)\nexcept ZeroDivisionError:\n    print(\"More than %d lines in the file\" % lines_in_file)\nfinally:\n    input.close()\n    output.close()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Let's use numbers easier to think about (at least for me!", "):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "10 items", "tag": "none", "senID": 1}, {"text": "delete 3 of them", "tag": "none", "senID": 2}]}, {"text": ["First time through the loop we will assume that the first three items get deleted -- here's what the probabilities look like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 10, "lis": [{"text": "first item:    3 / 10 = 30%", "tag": "none", "senID": 4}, {"text": "second item:   2 /  9 = 22%", "tag": "none", "senID": 5}, {"text": "third item:    1 /  8 = 12%", "tag": "none", "senID": 6}, {"text": "fourth item:   0 /  7 = 0 %", "tag": "none", "senID": 7}, {"text": "fifth item:    0 /  6 = 0 %", "tag": "none", "senID": 8}, {"text": "sixth item:    0 /  5 = 0 %", "tag": "none", "senID": 9}, {"text": "seventh item:  0 /  4 = 0 %", "tag": "none", "senID": 10}, {"text": "eighth item:   0 /  3 = 0 %", "tag": "none", "senID": 11}, {"text": "ninth item:    0 /  2 = 0 %", "tag": "none", "senID": 12}, {"text": "tenth item:    0 /  1 = 0 %", "tag": "none", "senID": 13}]}, {"text": ["As you can see, once it hits zero, it stays at zero.", "But what if nothing is getting deleted?"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"tag": "ul", "num": 10, "lis": [{"text": "first item:    3 / 10 =  30%", "tag": "none", "senID": 15}, {"text": "second item:   3 /  9 =  33%", "tag": "none", "senID": 16}, {"text": "third item:    3 /  8 =  38%", "tag": "none", "senID": 17}, {"text": "fourth item:   3 /  7 =  43%", "tag": "none", "senID": 18}, {"text": "fifth item:    3 /  6 =  50%", "tag": "none", "senID": 19}, {"text": "sixth item:    3 /  5 =  60%", "tag": "none", "senID": 20}, {"text": "seventh item:  3 /  4 =  75%", "tag": "none", "senID": 21}, {"text": "eighth item:   3 /  3 = 100%", "tag": "none", "senID": 22}, {"text": "ninth item:    2 /  2 = 100%", "tag": "none", "senID": 23}, {"text": "tenth item:    1 /  1 = 100%", "tag": "none", "senID": 24}]}, {"text": ["So even though the probability varies per line, overall you get the results you are looking for.", "I went a step further and coded a test in Python for one million iterations as a final proof to myself -- remove seven items from a list of 100:"], "childNum": 0, "tag": "p", "senID": 25, "childList": []}, {"code": "<pre>\n<code>\n # python 3.2\nfrom __future__ import division\nfrom stats import mean  # http://pypi.python.org/pypi/stats\nimport random\n\ncounts = dict()\nfor i in range(100):\n    counts[i] = 0\n\nremoved_failed = 0\n\nfor _ in range(1000000):\n    to_remove = 7\n    from_list = list(range(100))\n    removed = 0\n    while from_list:\n        current = from_list.pop()\n        probability = to_remove / (len(from_list) + 1)\n        if random.random() &lt; probability:\n            removed += 1\n            to_remove -= 1\n            counts[current] += 1\n    if removed != 7:\n        removed_failed += 1\n\nprint(counts[0], counts[1], counts[2], '...',\n      counts[49], counts[50], counts[51], '...',\n      counts[97], counts[98], counts[99])\nprint(\"remove failed: \", removed_failed)\nprint(\"min: \", min(counts.values()))\nprint(\"max: \", max(counts.values()))\nprint(\"mean: \", mean(counts.values()))\n</code>\n</pre>\n", "senID": 26}, {"text": ["and here's the results from one of the several times I ran it (they were all similar):"], "childNum": 0, "tag": "p", "senID": 27, "childList": []}, {"code": "<pre>\n<code>\n 70125 69667 70081 ... 70038 70085 70121 ... 70047 70040 70170\nremove failed:  0\nmin:  69332\nmax:  70599\nmean:  70000.0\n</code>\n</pre>\n", "senID": 28}, {"text": ["A final note:  Python's random.random() is [0.0, 1.0) (doesn't include 1.0 as a possibility)."], "childNum": 1, "tag": "p", "senID": 29, "childList": [{"text": "random.random()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I wrote this code before seeing that Darren Yin has expressed its principle.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I've modified my code to take the use of name skipping (I didn't dare to choose kangaroo ...) and of keyword continue from Ethan Furman whose code's principle is the same too."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "skipping", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "kangaroo", "childNum": 0, "tag": "code", "childList": []}, {"text": "continue", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I defined default arguments for the parameters of the function in order that the function can be used several times without having to make re-assignement at each call."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import random\nimport os.path\n\ndef spurt(ff,skipping):\n    for i,line in enumerate(ff):\n        if i in skipping:\n            print 'line %d excluded : %r' % (i,line)\n            continue\n        yield line\n\ndef randomly_reduce_file(filepath,nk = None,\n                         d = {0:'st',1:'nd',2:'rd',3:'th'},spurt = spurt,\n                         sample = random.sample,splitext = os.path.splitext):\n\n    # count of the lines of the original file\n    with open(filepath) as f:  nl = sum(1 for _ in f)\n\n    # asking for the number of lines to keep, if not given as argument\n    if nk is None:\n        nk = int(raw_input('  The file has %d lines.'\n                           '  How many of them do you '\n                           'want to randomly keep ? : ' % nl))\n\n    # transfer of the lines to keep,\n    # from one file to another file with different name\n    if nk&lt;nl:\n        with open(filepath,'rb') as f,\\\n             open('COPY'.join(splitext(filepath)),'wb') as g:\n            g.writelines(  spurt(f,sample(xrange(0,nl),nl-nk) )  )\n            # sample(xrange(0,nl),nl-nk) is the list\n            # of the counting numbers of the lines to be excluded \n    else:\n        print '   %d is %s than the number of lines (%d) in the file\\n'\\\n              '   no operation has been performed'\\\n              % (nk,'the same' if nk==nl else 'greater',nl)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["With the $RANDOM variable you can get a random number between 0 and 32,767."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "$RANDOM", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://tldp.org/LDP/abs/html/randomvar.html"}]}, {"text": ["With this, you could read in each line, and see if $RANDOM is less than 155,000,000 / 158,609,739 * 32,767 (which is 32,021), and if so, let the line through."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "155,000,000 / 158,609,739 * 32,767", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Of course, this wouldn't give you exactly 150,000,000 lines, but pretty close to it depending on the normality of the random number generator."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "exactly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["EDIT: Here is some code to get you started:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #!/bin/bash\nwhile read line; do\n  if (( $RANDOM &lt; 32021 ))\n  then\n    echo $line\n  fi\ndone\n</code>\n</pre>\n", "senID": 4}, {"text": ["Call it like so:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n thatScript.sh &lt;inFile.txt &gt;outFile.txt\n</code>\n</pre>\n", "senID": 6}]]