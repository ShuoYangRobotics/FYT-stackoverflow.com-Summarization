[[{"text": ["Try calling help on your class."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "help", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Try this from the command line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n pydoc modulename\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try the help() facility that is built into the interpreter.", "E.g."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "help()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class X(object):\n    \"\"\"Docstring for an example class.\"\"\"\n    def __init__(self):\n        \"\"\"Docstring for X.__init__().\"\"\"\n        pass\n    def method1(self, x):\n        \"\"\"Docstring for method1().\"\"\"\n        print x\n\n&gt;&gt;&gt; help(X)\nHelp on class X in module __main__:\n\nclass X(__builtin__.object)\n |  Docstring for an example class.\n |  \n |  Methods defined here:\n |  \n |  __init__(self)\n |      Docstring for X.__init__().\n |  \n |  method1(self, x)\n |      Docstring for method1().\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __dict__ = &lt;dictproxy object&gt;\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__ = &lt;attribute '__weakref__' of 'X' objects&gt;\n |      list of weak references to the object (if defined)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This works for just about anything, e.g."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; help(dir):\nHelp on built-in function dir in module __builtin__:\n\ndir(...)\n    dir([object]) -&gt; list of strings\n\n    Return an alphabetized list of names comprising (some of) the attributes\n    of the given object, and of attributes reachable from it:\n\n    No argument:  the names in the current scope.\n    Module object:  the module attributes.\n    Type or class object:  its attributes, and recursively the attributes of\n        its bases.\n    Otherwise:  its attributes, its class's attributes, and recursively the\n        attributes of its class's base classes.\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Not sure exactly what you need, but this chapter from Mark Pilgrim's \"Dive into Python\" might work."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this chapter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/power_of_introspection/index.html"}]}, {"text": ["EDIT: Cleared up formatting."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["try ipython"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ipython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org"}]}], [{"text": ["You want introspection.", "This is a good article about all that: http://www.ibm.com/developerworks/library/l-pyint.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.ibm.com/developerworks/library/l-pyint.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks/library/l-pyint.html"}]}, {"text": ["On the other hand, for debugging, you might just want to use Eclipse with the Python plugin."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]