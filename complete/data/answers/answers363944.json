[[{"text": ["The best way is this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = get_list()\nreturn a[0] if a else None\n</code>\n</pre>\n", "senID": 1}, {"text": ["You could also do it in one line, but it's much harder for the programmer to read:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n return (get_list()[:1] or [None])[0]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n def get_first(iterable, default=None):\n    if iterable:\n        for item in iterable:\n            return item\n    return default\n</code>\n</pre>\n", "senID": 0}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x = get_first(get_first_list())\nif x:\n    ...\ny = get_first(get_second_list())\nif y:\n    ...\n</code>\n</pre>\n", "senID": 2}, {"text": ["Another option is to inline the above function:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for x in get_first_list() or []:\n    # process x\n    break # process at most one item\nfor y in get_second_list() or []:\n    # process y\n    break\n</code>\n</pre>\n", "senID": 4}], [{"text": ["The OP's solution is nearly there, there are just a few things to make it more Pythonic."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For one, there's no need to get the length of the list.", "Empty lists in Python evaluate to False in an if check.", "Just simply say"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if list:\n</code>\n</pre>\n", "senID": 2}, {"text": ["Additionally, it's a very Bad Idea to assign to variables that overlap with reserved words.", "\"list\" is a reserved word in Python."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["So let's change that to"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n some_list = get_list()\nif some_list:\n</code>\n</pre>\n", "senID": 5}, {"text": ["A really important point that a lot of solutions here miss is that all Python functions/methods return None by default.", "Try the following below."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "all Python functions/methods return None by default", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def does_nothing():\n    pass\n\nfoo = does_nothing()\nprint foo\n</code>\n</pre>\n", "senID": 7}, {"text": ["Unless you need to return None to terminate a function early, it's unnecessary to explicitly return None.", "Quite succinctly, just return the first entry, should it exist."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n some_list = get_list()\nif some_list:\n    return list[0]\n</code>\n</pre>\n", "senID": 9}, {"text": ["And finally, perhaps this was implied, but just to be explicit (because explicit is better than implicit), you should not have your function get the list from another function; just pass it in as a parameter.", "So, the final result would be"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "explicit is better than implicit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}, {"code": "<pre>\n<code>\n def get_first_item(some_list): \n    if some_list:\n        return list[0]\n\nmy_list = get_list()\nfirst_item = get_first_item(my_list)\n</code>\n</pre>\n", "senID": 11}, {"text": ["As I said, the OP was nearly there, and just a few touches give it the Python flavor you're looking for."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"code": "<pre>\n<code>\n (get_list()[0:1] or [None])[0]\n</code>\n</pre>\n", "senID": 0}, {"text": ["That should work, but it's a mess."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["BTW I didn't use the variable list, because that overwrites the builtin list() function."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edit:  I had a slightly simpler, but wrong version here earlier."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Here's another approach:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n (get_list() + [None])[0]\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n for item in get_list():\n    return item\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Frankly speaking, I do not think there is a better idiom: your is clear and terse - no need for anything \"better\".", "Maybe, but this is really a matter of taste, you could change if len(list) &gt; 0: with if list: - an empty list will always evaluate to False."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "if len(list) &gt; 0:", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if list:", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["On a related note, Python is not Perl (no pun intended!", "), you do not have to get the coolest code possible.", "Actually, the worst code I have seen in Python, was also very cool :-) and completely unmaintainable."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["By the way, most of the solution I have seen here do not take into consideration when list[0] evaluates to False (e.g.", "empty string, or zero) - in this case, they all return None and not the correct element."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n try:\n    return a[0]\nexcept IndexError:\n    return None\n</code>\n</pre>\n", "senID": 0}], [{"text": ["For the heck of it, here's yet another possibility."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n return None if not get_list() else get_list()[0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Benefit:\nThis method handles the case where get_list is None, without using try/except or assignment.", "To my knowledge, none of the implementations above can handle this possibility"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Downfalls:\nget_list() is called twice, quite unnecessarily, especially if the list is long and/or created when the function is called."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The truth is, it's more \"Pythonic\" in my opinion, to provide code that is readable than it is to make a one-liner just because you can :) I have to admit I am guilty many times of unnecessarily compacting Python code just because I'm so impressed how small I can make a complex function look :)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Edit:\nAs user \"hasen j\" commented below, the conditional expression above is new in Python 2.5, as described here: http://www.python.org/doc/2.5/whatsnew/pep-308.html.", "Thanks, hasen!"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://www.python.org/doc/2.5/whatsnew/pep-308.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5/whatsnew/pep-308.html"}]}], [{"text": ["You could use Extract Method.", "In other words extract that code into a method which you'd then call."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Extract Method", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.refactoring.com/catalog/extractMethod.html"}]}, {"text": ["I wouldn't try to compress it much more, the one liners seem harder to read than the verbose version.", "And if you use Extract Method, it's a one liner ;)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["isn't the idiomatic python equivalent to C-style ternary operators "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n cond and true_expr or false_expr\n</code>\n</pre>\n", "senID": 1}, {"text": ["ie. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n list = get_list()\nreturn list and list[0] or None\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Using the and-or trick:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = get_list()\nreturn a and a[0] or None\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Several people have suggested doing something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list = get_list()\nreturn list and list[0] or None\n</code>\n</pre>\n", "senID": 1}, {"text": ["That works in many cases, but it will only work if list[0] is not equal to 0, False, or an empty string.", "If list[0] is 0, False, or an empty string, the method will incorrectly return None."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["(I've created this bug in my own code one too many times!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Out of curiosity, I ran timings on two of the solutions.", "The solution which uses a return statement to prematurely end a for loop is slightly more costly on my machine with Python 2.5.1, I suspect this has to do with setting up the iterable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random\nimport timeit\n\ndef index_first_item(some_list):\n    if some_list:\n        return some_list[0]\n\n\ndef return_first_item(some_list):\n    for item in some_list:\n        return item\n\n\nempty_lists = []\nfor i in range(10000):\n    empty_lists.append([])\n\nassert empty_lists[0] is not empty_lists[1]\n\nfull_lists = []\nfor i in range(10000):\n    full_lists.append(list([random.random() for i in range(10)]))\n\nmixed_lists = empty_lists[:50000] + full_lists[:50000]\nrandom.shuffle(mixed_lists)\n\nif __name__ == '__main__':\n    ENV = 'import firstitem'\n    test_data = ('empty_lists', 'full_lists', 'mixed_lists')\n    funcs = ('index_first_item', 'return_first_item')\n    for data in test_data:\n        print \"%s:\" % data\n        for func in funcs:\n            t = timeit.Timer('firstitem.%s(firstitem.%s)' % (\n                func, data), ENV)\n            times = t.repeat()\n            avg_time = sum(times) / len(times)\n            print \"  %s:\" % func\n            for time in times:\n                print \"    %f seconds\" % time\n            print \"    %f seconds avg.\" % avg_time\n</code>\n</pre>\n", "senID": 1}, {"text": ["These are the timings I got:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\nempty_lists:\n  index_first_item:\n    0.748353 seconds\n    0.741086 seconds\n    0.741191 seconds\n    0.743543 seconds avg.\n  return_first_item:\n    0.785511 seconds\n    0.822178 seconds\n    0.782846 seconds\n    0.796845 seconds avg.\nfull_lists:\n  index_first_item:\n    0.762618 seconds\n    0.788040 seconds\n    0.786849 seconds\n    0.779169 seconds avg.\n  return_first_item:\n    0.802735 seconds\n    0.878706 seconds\n    0.808781 seconds\n    0.830074 seconds avg.\nmixed_lists:\n  index_first_item:\n    0.791129 seconds\n    0.743526 seconds\n    0.744441 seconds\n    0.759699 seconds avg.\n  return_first_item:\n    0.784801 seconds\n    0.785146 seconds\n    0.840193 seconds\n    0.803380 seconds avg.\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n def head(iterable):\n    try:\n        return iter(iterable).next()\n    except StopIteration:\n        return None\n\nprint head(xrange(42, 1000)  # 42\nprint head([])               # None\n</code>\n</pre>\n", "senID": 0}, {"text": ["BTW: I'd rework your general program flow into something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n lists = [\n    [\"first\", \"list\"],\n    [\"second\", \"list\"],\n    [\"third\", \"list\"]\n]\n\ndef do_something(element):\n    if not element:\n        return\n    else:\n        # do something\n        pass\n\nfor li in lists:\n    do_something(head(li))\n</code>\n</pre>\n", "senID": 2}, {"text": ["(Avoiding repetition whenever possible)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]