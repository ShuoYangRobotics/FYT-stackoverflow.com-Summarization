[[{"text": ["It's OK for small applications and allegedly \"one-off\" scripts, especially with the vars enhancement mentioned by @kaizer.se and the .format version mentioned by @RedGlyph. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "vars", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".format", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["However, for large applications with a long maintenance life and many maintainers this practice can lead to maintenance headaches, and I think that's where @S.Lott's answer is coming from.", "Let me explain some of the issues involved, as they may not be obvious to anybody who doesn't have the scars from developing and maintaining large applications (or reusable components for such beasts)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In a \"serious\" application, you would not have your format string hard-coded -- or, if you had, it would be in some form such as _('Hello {name}.", "'), where the _ comes from gettext or similar i18n / L10n frameworks.", "The point is that such an application (or reusable modules that can happen to be used in such applications) must support internationalization (AKA i18n) and locatization (AKA L10n): you want your application to be able to emit \"Hello Paul\" in certain countries and cultures, \"Hola Paul\" in some others, \"Ciao Paul\" in others yet, and so forth.", "So, the format string gets more or less automatically substituted with another at runtime, depending on the current localization settings; instead of being hardcoded, it lives in some sort of database.", "For all intents and purposes, imagine that format string always being a variable, not a string literal."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "_('Hello {name}.')", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "gettext", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/gettext.html"}]}, {"text": ["So, what you have is essentially"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n formatstring.format(**locals())\n</code>\n</pre>\n", "senID": 4}, {"text": ["and you can't trivially check exactly what local names the formatting is going to be using.", "You'd have to open and peruse the L10N database, identify the format strings that are going to be used here in different settings, verify all of them."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "what", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["So in practice you don't know what local names are going to get used -- which horribly crimps the maintenance of the function.", "You dare not rename or remove any local variable, as it might horribly break the user experience for users with some (to you) obscure combinaton of language, locale and preferences"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "know", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["If you have superb integration / regression testing, the breakage will be caught before the beta release -- but QA will scream at you and the release will be delayed... and, let's be honest, while aiming for 100% coverage with unit tests is reasonable, it really isn't with integration tests, once you consider the combinatorial explosion of settings [[for L10N and for many more reasons]] and supported versions of all dependencies.", "So, you just don't blithely go around risking breakages because \"they'll be caught in QA\" (if you do, you may not last long in an environment that develops large apps or reusable components;-)."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "unit", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "integration", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["So, in practice, you'll never remove the \"name\" local variable even though the User Experience folks have long switched that greeting to a more appropriate \"Welcome, Dread Overlord!", "\" (and suitably L10n'ed versions thereof).", "All because you went for locals()..."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "locals()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["So you're accumulating cruft because of the way you've crimped your ability to maintain and edit your code -- and maybe that \"name\" local variable only exists because it's been fetched from a DB or the like, so keeping it (or some other local) around is not just cruft, it's reducing your performance too.", "Is the surface convenience of locals() worth that?-)"], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "locals()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "that", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["But wait, there's worse!", "Among the many useful services a lint-like program (like, for example, pylint) can do for you, is to warn you about unused local variables (wish it could do it for unused globals as well, but, for reusable components, that's just a tad too hard;-).", "This way you'll catch most occasional misspellings such as if ...: nmae = ... very rapidly and cheaply, rather than by seeing a unit-test break and doing sleuth work to find out why it broke (you do have obsessive, pervasive unit tests that would catch this eventually, right?-) -- lint will tell you about an unused local variable nmae and you will immediately fix it."], "childNum": 7, "tag": "p", "senID": 10, "childList": [{"text": "lint", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "pylint", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.logilab.org/857"}, {"text": "if ...: nmae = ...", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "why", "childNum": 0, "tag": "em", "childList": []}, {"text": "do", "childNum": 0, "tag": "em", "childList": []}, {"text": "would", "childNum": 0, "tag": "strong", "childList": []}, {"text": "nmae", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["But if you have in your code a blah.format(**locals()), or equivalently a blah % locals()... you're SOL, pal!-)  How is poor lint going to know whether nmae is in fact an unused variable, or actually it does get used by whatever external function or method you're passing locals() to?", "It can't -- either it's going to warn anyway (causing a \"cry wolf\" effect that eventually leads you to ignore or disable such warnings), or it's never going to warn (with the same final effect: no warnings;-)."], "childNum": 4, "tag": "p", "senID": 11, "childList": [{"text": "blah.format(**locals())", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "blah % locals()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "nmae", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "locals()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Compare this to the \"explicit is better than implicit\" alternative...:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n blah.format(name=name)\n</code>\n</pre>\n", "senID": 13}, {"text": ["There -- none of the maintenance, performance, and am-I-hampering-lint worries, applies any more; bliss!", "You make it immediately clear to everybody concerned (lint included;-) exactly what local variables are being used, and exactly for what purposes."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "what", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["I could go on, but I think this post is already pretty long;-)."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["So, summarizing: \"\u03b3\u03bd\u1ff6\u03b8\u03b9 \u03c3\u03b5\u03b1\u03c5\u03c4\u03cc\u03bd!", "\" Hmm, I mean, \"know thyself!\".", "And by \"thyself\" I actually mean \"the purpose and scope of your code\".", "If it's a 1-off-or-thereabouts thingy, never going to be i18n'd and L10n'd, will hardly need future maintenance, will never be reused in a broader context, etc, etc, then go ahead and use locals() for its small but neat convenience; if you know otherwise, or even if you're not entirely certain, err on the side of caution, and make things more explicit -- suffer the small inconvenience of spelling out exactly what you're going, and enjoy all the resulting advantages."], "childNum": 2, "tag": "p", "senID": 16, "childList": [{"text": "\u03b3\u03bd\u1ff6\u03b8\u03b9 \u03c3\u03b5\u03b1\u03c5\u03c4\u03cc\u03bd", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "locals()", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["BTW, this is just one of the examples where Python is striving to support both \"small, one-off, exploratory, maybe interactive\" programming (by allowing and supporting risky conveniences that extend well beyond locals() -- think of import *, eval, exec, and several other ways you can mush up namespaces and risk maintenance impacts for the sake of convenience), as well as \"large, reusable, enterprise-y\" apps and components.", "It can do a pretty good job at both, but only if you \"know thyself\" and avoid using the \"convenience\" parts except when you're absolutely certain you can in fact afford them.", "More often than not, the key consideration is, \"what does this do to my namespaces, and awareness of their formation and use by the compiler, lint &amp;c, human readers and maintainers, and so on?", "\". "], "childNum": 4, "tag": "p", "senID": 17, "childList": [{"text": "locals()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "import *", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "eval", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "exec", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Remember, \"Namespaces are one honking great idea -- let's do more of those!", "\" is how the Zen of Python concludes... but Python, as a \"language for consenting adults\", lets you define the boundaries of what that implies, as a consequence of your development environment, targets, and practices.", "Use this power responsibly!-)"], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "you", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}], [{"text": ["I think it is a great pattern because you are leveraging built-in functionality to reduce the code you need to write.", "I personally find it quite Pythonic."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I never write code that I don't need to write - less code is better than more code and this practice of using locals() for example allows me to write less code and is also very easy to read and understand."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "locals()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The \"%(name)s\" % &lt;dictionary&gt; or even better, the \"{name}\".format(&lt;parameters&gt;) have the merit of "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "\"%(name)s\" % &lt;dictionary&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"{name}\".format(&lt;parameters&gt;)", "childNum": 0, "tag": "code", "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "being more readable than \"%0s\"", "tag": "none", "senID": 1}, {"text": "being independent from the argument order", "tag": "none", "senID": 2}, {"text": "not compelling to use all the arguments in the string", "tag": "none", "senID": 3}]}, {"text": ["I would tend to favour the str.format(), since it should be the way to do that in Python 3 (as per PEP 3101), and is already available from 2.6.", "With locals() though, you would have to do this:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "PEP 3101", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3101/"}, {"text": "locals()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n print(\"hello {name} you are {age} years old\".format(**locals()))\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Using the built-in vars([object]) (documentation) might make the second look better to you:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "vars([object])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/3.1/library/functions.html#vars", "text": "documentation", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n def example2(obj):\n    print \"The file at %(path)s has %(length)s bytes\" % vars(obj)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The effect is of course just the same."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Never in a million years.", "It's unclear what the context for formatting is: locals could include almost any variable.", "self.__dict__ is not as vague.", "Perfectly awful to leave future developers scratching their heads over what's local and what's not local."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "locals", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "self.__dict__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["It's an intentional mystery.", "Why saddle your organization with future maintenance headaches like that?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Regarding the \"cousin\", instead of obj.__dict__, it looks a lot better with new string formatting:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "obj.__dict__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def example2(obj):\n    print \"The file at {o.path} has {o.length} bytes\".format(o=obj)\n</code>\n</pre>\n", "senID": 1}, {"text": ["I use this a lot for repr methods, e.g."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "repr", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def __repr__(self):\n    return \"{s.time}/{s.place}/{s.warning}\".format(s=self)\n</code>\n</pre>\n", "senID": 3}]]