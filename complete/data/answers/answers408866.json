[[{"text": ["For simple cases pprint() and eval() come to mind."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Using your example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {'age': 27,\n...  'name': 'Joe',\n...  'numbers': [1, \n...              2, \n...              3,\n...              4,\n...              5],\n...  'subdict': {\n...              'first': 1, \n...              'second': 2,\n...               'third': 3\n...              }\n... }\n&gt;&gt;&gt; \n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; pprint(d)\n{'age': 27,\n 'name': 'Joe',\n 'numbers': [1, 2, 3, 4, 5],\n 'subdict': {'first': 1, 'second': 2, 'third': 3}}\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["I would think twice about fixing two requirements with the same tool.", "Have you considered using pickle for the serializing and then pprint() (or a more fancy object viewer) for humans looking at the objects?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If its just Python list, dictionary and tuple object.", "- JSON is the way to go.", "Its human readable, very easy to handle and language independent too. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "just", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "JSON", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Caution: Tuples will be converted to lists in simplejson."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n In [109]: simplejson.loads(simplejson.dumps({'d':(12,3,4,4,5)}))\nOut[109]: {u'd': [12, 3, 4, 4, 5]}\n</code>\n</pre>\n", "senID": 2}], [{"text": ["To use simplejson first easy_install simplejson:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "easy_install simplejson", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import simplejson\nmy_structure = {\"name\":\"Joe\", \"age\":27, \"numbers\":[1,2,3,4,5], \"subdict\":{\"first\":1, \"second\":2, \"third\": 3}}\njson = simplejson.dumps(my_structure)\n</code>\n</pre>\n", "senID": 1}, {"text": ["results in json being:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n {\"age\": 27, \"subdict\": {\"second\": 2, \"third\": 3, \"first\": 1}, \"name\": \"Joe\", \"numbers\": [1, 2, 3, 4, 5]}\n</code>\n</pre>\n", "senID": 3}, {"text": ["Notice that its hardly changed the format of the dictionary at all, but you should run it through this step to ensure valid JSON data."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You can further pretty print the result:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n import pprint\npprint.pprint(my_structure)\n</code>\n</pre>\n", "senID": 6}, {"text": ["results in:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n {'age': 27,\n 'name': 'Joe',\n 'numbers': [1, 2, 3, 4, 5],\n 'subdict': {'first': 1, 'second': 2, 'third': 3}}\n</code>\n</pre>\n", "senID": 8}], [{"text": ["If you're after more representations than are covered by JSON, I highly recommend checking out PyON (Python Object Notation)...although I believe it's restricted to 2.6/3.0 and above, as it relies on the ast module.", "It handles custom class instances and recursive data types, amongst other features, which is more than is provided by JSON."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PyON", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pyon/wiki/GettingStarted"}, {"text": "ast", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}], [{"text": ["You should check out jsonpickle (http://code.google.com/p/jsonpickle/).", "It will write out any python object into a json file.", "You can then read that file back into a python object.", "The nice thing is the inbetween file is very readable because it's json."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The pprint solution may be what i'm after, but how to handle multiple nested levels?", "like:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pprint", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n {'age': 27,\n 'name': 'Joe',\n 'numbers': [1, \n             2, \n             3,\n             4,\n             5],\n 'subdict': {\n             'first': 1, \n             'second': 2,\n              'third': 3\n             }\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Parameter depth does not seem to work here."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "depth", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]]