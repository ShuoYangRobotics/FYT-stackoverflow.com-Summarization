[[{"text": ["Even without re:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n text.split('_', 1)[0].replace('.', '').upper()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.sub(\"[^A-Z\\d]\", \"\", re.search(\"^[^_]*\", str).group(0).upper())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You don't have to use re for this.", "Simple string operations would be enough based on your requirements:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n tests = \"\"\"\nAG.av08_binloop_v6 = AGAV08\nTL.av1_binloopv2   = TLAV1\n\"\"\"\n\nfor t in tests.splitlines(): \n     print t[:t.find('_')].replace('.', '').upper()\n\n# Returns:\n# AGAV08\n# TLAV1\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or if you absolutely must use re:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import re \n\npat = r'([a-zA-Z0-9.]+)_.*'\npat_re = re.compile(pat)\n\nfor t in tests.splitlines():\n    print re.sub(r'\\.', '', pat_re.findall(t)[0]).upper()\n\n# Returns:\n# AGAV08\n# TLAV1\n</code>\n</pre>\n", "senID": 3}], [{"text": ["import re"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["re.sub(\"[^A-Z\\d]\", \"\", yourstr.split('_',1)[0].upper())"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Since everyone is giving their favorite implementation, here's mine that doesn't use re:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for s in ('AG.av08_binloop_v6', 'TL.av1_binloopv2'):\n...     print ''.join(c for c in s.split('_',1)[0] if c.isalnum()).upper()\n...\nAGAV08\nTLAV1\n</code>\n</pre>\n", "senID": 1}, {"text": ["I put .upper() on the outside of the generator so it is only called once."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": ".upper()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["He, just for fun, another option to get text before the first underscore is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n before_underscore, sep, after_underscore = str.partition('_')\n</code>\n</pre>\n", "senID": 1}, {"text": ["So all in one line could be:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n re.sub(\"[^A-Z\\d]\", \"\", str.partition('_')[0].upper())\n</code>\n</pre>\n", "senID": 3}]]