[[{"text": ["settings.py"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n   from local_settings import *\nexcept ImportError, e:\n   pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can override what needed in local_settings.py; it should stay out of your version control then.", "But since you mention copying I'm guessing you use none ;)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I use a settings_local.py and a settings_production.py.", "After trying several options I've found that it's easy to waste time with complex solutions when simply having two settings files feels easy and fast."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When you use mod_python/mod_wsgi for your Django project you need to point it to your settings file.", "If you point it to app/settings_local.py on your local server and app/settings_production.py on your production server then life becomes easy.", "Just edit the appropriate settings file and restart the server (Django development server will restart automatically)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I use a slightly modified version of the \"if DEBUG\" style of settings that Harper Shelby posted.", "Obviously depending on the environment (win/linux/etc.", ") the code might need to be tweaked a bit."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I was in the past using the \"if DEBUG\" but I found that occasionally I needed to do testing with DEUBG set to False.", "What I really wanted to distinguish if the environment was production or development, which gave me the freedom to choose the DEBUG level."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n PRODUCTION_SERVERS = ['WEBSERVER1','WEBSERVER2',]\nif os.environ['COMPUTERNAME'] in PRODUCTION_SERVERS:\n    PRODUCTION = True\nelse:\n    PRODUCTION = False\n\nDEBUG = not PRODUCTION\nTEMPLATE_DEBUG = DEBUG\n\n# ...\n\nif PRODUCTION:\n    DATABASE_HOST = '192.168.1.1'\nelse:\n    DATABASE_HOST = 'localhost'\n</code>\n</pre>\n", "senID": 2}, {"text": ["I'd still consider this way of settings a work in progress.", "I haven't seen any one way to handling Django settings that covered all the bases and at the same time wasn't a total hassle to setup (I'm not down with the 5x settings files methods)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Remember that settings.py is a live code file.", "Assuming that you don't have DEBUG set on production (which is a best practice), you can do something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if DEBUG:\n    STATIC_PATH = /path/to/dev/files\nelse:\n    STATIC_PATH = /path/to/production/files\n</code>\n</pre>\n", "senID": 1}, {"text": ["Pretty basic, but you could, in theory, go up to any level of complexity based on just the value of DEBUG - or any other variable or code check you wanted to use."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["My solution to that problem is also somewhat of a mix of some solutions already stated here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "I keep a file called ", "tag": "none", "senID": 1}, {"text": "In ", "tag": "none", "senID": 2}]}, {"text": ["I then base all my environment-dependent settings on that one:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n DEBUG = USING_LOCAL\nif USING_LOCAL:\n    # dev database settings\nelse:\n    # prod database settings\n</code>\n</pre>\n", "senID": 4}, {"text": ["I prefer this to having two separate settings.py files that I need to maintain as I can keep my settings structured in a single file easier than having them spread across several files.", "Like this, when I update a setting I don't forget to do it for both environments."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Of course that every method has its disadvantages and this one is no exception.", "The problem here is that I can't overwrite the local_settings.py file whenever I push my changes into production, meaning I can't just copy all files blindly, but that's something I can live with."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "local_settings.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You might want to look at this question: http://stackoverflow.com/questions/1406892/elegantly-handle-site-specific-settings-configuration-in-svn-hg-git-etc"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/1406892/elegantly-handle-site-specific-settings-configuration-in-svn-hg-git-etc", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1406892/elegantly-handle-site-specific-settings-configuration-in-svn-hg-git-etc"}]}], [{"text": ["I use a variation of what jpartogi mentioned above, that I find a little shorter:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import platform\nfrom django.core.management import execute_manager \n\ncomputername = platform.node()\n\ntry:\n  settings = __import__(computername + '_settings')\nexcept ImportError: \n  import sys\n  sys.stderr.write(\"Error: Can't find the file '%r_settings.py' in the directory containing %r. It appears you've customized things.\\nYou'll have to run django-admin.py, passing it your settings module.\\n(If the file local_settings.py does indeed exist, it's causing an ImportError somehow.)\\n\" % (computername, __file__))\n  sys.exit(1)\n\nif __name__ == \"__main__\":\n  execute_manager(settings)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Basically on each computer (development or production) I have the appropriate hostname_settings.py file that gets dynamically loaded."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I differentiate it in manage.py and created two separate settings file: local_settings.py and prod_settings.py. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In manage.py I check whether the server is local server or production server.", "If it is a local server it would load up local_settings.py and it is a production server it would load up prod_settings.py.", "Basically this is how it would look like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\nimport sys\nimport socket\nfrom django.core.management import execute_manager \n\nipaddress = socket.gethostbyname( socket.gethostname() )\nif ipaddress == '127.0.0.1':\n    try:\n        import local_settings # Assumed to be in the same directory.\n        settings = local_settings\n    except ImportError:\n        import sys\n        sys.stderr.write(\"Error: Can't find the file 'local_settings.py' in the directory containing %r. It appears you've customized things.\\nYou'll have to run django-admin.py, passing it your settings module.\\n(If the file local_settings.py does indeed exist, it's causing an ImportError somehow.)\\n\" % __file__)\n        sys.exit(1)\nelse:\n    try:\n        import prod_settings # Assumed to be in the same directory.\n        settings = prod_settings    \n    except ImportError:\n        import sys\n        sys.stderr.write(\"Error: Can't find the file 'prod_settings.py' in the directory containing %r. It appears you've customized things.\\nYou'll have to run django-admin.py, passing it your settings module.\\n(If the file prod_settings.py does indeed exist, it's causing an ImportError somehow.)\\n\" % __file__)\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    execute_manager(settings)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I found it to be easier to separate the settings file into two separate file instead of doing lots of ifs inside the settings file."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["For most of my projects I use following pattern:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(To run manage.py with custom settings file you simply use --settings command option: manage.py &lt;command&gt; --settings=settings_you_wish_to_use.py)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "manage.py &lt;command&gt; --settings=settings_you_wish_to_use.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]