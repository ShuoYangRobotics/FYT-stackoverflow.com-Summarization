[[{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import datetime, pytz\nnow = datetime.datetime.now(pytz.timezone('Asia/Kolkata'))\n\nprint now.strftime('%Y-%m-%d %H:%M:%S %z')\n\n# prints: '2011-04-27 13:56:09 +0530'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["From the example you have given, it looks to me that what you are looking for is datetime.isoformat.", "The example in the page shows how to convert the datetime values to the ISO format with the time zone information."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "datetime.isoformat", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/datetime.html#datetime.datetime.isoformat"}]}], [{"text": ["To do this, you have to know the timezone (or the UTC offset) of the server date.", "What you have here is a \"naive\" date, without timezone info, you can't guess the UTC difference."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I think the datetime module is what you need here:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "datetime", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; datetime.now()\ndatetime.datetime(2011, 4, 27, 11, 8, 26, 149000)\n&gt;&gt;&gt; datetime.utcnow()\ndatetime.datetime(2011, 4, 27, 8, 8, 47, 712000)\n</code>\n</pre>\n", "senID": 1}, {"text": ["For a difference between two dates:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dtnow = datetime.now()\n&gt;&gt;&gt; dtutc = datetime.utcnow()\n&gt;&gt;&gt; dtnow - dtutc\ndatetime.timedelta(0, 10792, 847000)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Look up the datetime module and the relevant classes in Python's docs."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "datetime", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["A very powerful extension of the datetime standard python library is the dateutil one, that allows you to easily:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dateutil", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/python-dateutil"}]}, {"tag": "ul", "num": 2, "lis": [{"text": "set the delta of your time zone:", "tag": "none", "senID": 1}, {"text": "parse dates with various convenient options (in our case we will use the ", "tag": "none", "senID": 2}]}, {"text": ["So 1st set time zone, and default date with this zone:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from datetime import datetime \n&gt;&gt;&gt; from dateutil import parser\n&gt;&gt;&gt; from dateutil.tz import tzoffset\n&gt;&gt;&gt; tz_plus_5 = tzoffset(None, 5 * 60 * 60) # offset is in seconds !\n&gt;&gt;&gt; default = datetime.now(tz_plus_5)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now use this default date in the parsing:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; Datetime = \"2011-04-27 2:17:45\"\n&gt;&gt;&gt; my_date = parser.parse(Datetime, default=default)\n&gt;&gt;&gt; my_date\ndatetime.datetime(2011, 4, 27, 2, 17, 45, tzinfo=tzoffset(None, 18000))\n&gt;&gt;&gt; my_date.strftime(\"%Y-%m-%d %H:%M:%S %z\")\n'2011-04-27 02:17:45 +0500'\n</code>\n</pre>\n", "senID": 6}], [{"text": ["For those that simply need to get the offset between local time and UTC, the time module has an attribute time.altzone that specifies the difference between UTC and local time in seconds:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "time", "tag": "a", "pos": 0, "childList": [{"text": "time", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/time.html"}, {"text": "time", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://stackoverflow.com/questions/5800924/how-to-get-the-difference-in-localtime-and-gmt-time-python", "text": "time.altzone", "childNum": 1, "tag": "a", "childList": [{"text": "time.altzone", "tag": "code"}]}, {"text": "time.altzone", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Here's an example of how it works:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; datetime.now().isoformat()\n'2011-09-01T17:26:46.971000'\n&gt;&gt;&gt; datetime.utcnow().isoformat()\n'2011-09-01T15:27:32.699000'\n&gt;&gt;&gt; time.altzone / (60*60)\n-2\n</code>\n</pre>\n", "senID": 2}, {"text": ["Doesn't get much cleaner than that."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]