[[{"text": ["How about writing unit tests?", "You can execute them easily with one command.", "You can probably get started by reading the django manual chapter on testing"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django manual chapter on testing", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/testing/"}]}], [{"text": ["By all means create a trial.py for simple experimentation, then after doing"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n python manage.py shell\n</code>\n</pre>\n", "senID": 1}, {"text": ["you can do"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import trial\n</code>\n</pre>\n", "senID": 3}, {"text": ["and then invoke the code in trial, directly from the prompt, e.g."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n trial.myfunc()\n</code>\n</pre>\n", "senID": 5}, {"text": ["If you need to change things you can just save your changed trial.py and do"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n reload(trial)\n</code>\n</pre>\n", "senID": 7}, {"text": ["Of course, you may need to recreate any existing objects in the interactive session in order to make use of your changes."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["This should be seen as complementary to writing unit tests (as per Jani's answer), but I do find this approach useful for trying things out using iterative refinement."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["Create your file-for-tests in the Django project directory and add path to your project to env variable: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nsys.path.append(os.path.realpath(os.path.dirname(__file__)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["After that you'll be able to import any module from the project (e.g.", "models from models.py or just functions from views.py) and use your favorite IDE with it's editor and shell. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["For simpler cases you can use django-extensions add-on that contains shell_plus management command that is similar to the standard shell command but preloads all models. "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "django-extensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/django-extensions/django-extensions"}, {"text": "shell_plus", "childNum": 0, "tag": "code", "childList": []}, {"text": "shell", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You need to set the module used for settings."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "set the module used for settings", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.b-list.org/weblog/2007/sep/22/standalone-django-scripts/"}]}], [{"text": ["I also had this problem before,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["may be you could install ipython,which has a magic function called like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["%save."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This will save what you input into a file ."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["and ipython is a very charming tool ,which can take the palce of standard python prompt perfectly..", "It also have other wonderful things !"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["And in django , if you have install ipython, when you input python manage.py shell,"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["it will invoke ipython directly."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]