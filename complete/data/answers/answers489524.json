[[{"text": ["No, it is not possible."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As you can see from the Language Reference, there is no room left for extensions of the list of simple statements in the specification."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Language Reference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/3.0/reference/simple_stmts.html#simple-statements"}]}, {"text": ["Moreover, print as a statement no longer exists in Python 3.0 and is replaced by the print() builtin function."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If what you're looking for is to add a new statement (like print) to Python's language, then this would not be easy.", "You'd probably have to modify lexer, parser and then recompile Python's C sources.", "A lot of work to do for a questionable convenience."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I would not implement this, but if I was implementing this, I would give code with myfunc a special extension, write an import hook to parse the file, add the parenthesis to make it valid Python, and feed that into the interpreter."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Not if you want to pass in arguments.", "You could do something build an object that ABUSES the __str__ method, but it is highly not recommended.", "You can also use other operators like overload the &lt;&lt; operator like cout does in C++."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "__str__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "&lt;&lt;", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "cout", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["In Python 2.x print is not a function it is a statement just as if, while and def are statements."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Not possible in a planned way, or without a lot of work."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you are bold and adventurous, read this wikipedia article about meta circular evaluation.", "Python has pretty good inspection and reflection on its own compiler/evaluater objects, you may be able to cobble something together along these lines."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://en.wikipedia.org/wiki/Meta-circular_evaluator"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}]}, {"text": ["I believe pypy is doing something similarily, you might want to look into it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://pypy.org"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}]}], [{"text": ["This probably isn't going to cover your problem, but I'll mention it anyway.", "If myfunc is part of a module, and you are using it like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "myfunc", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n from mymodule import myfunc\nmyfunc # I want this to turn into a function call\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you could instead do this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import mymodule\nmymodule.myfunc # I want this to turn into a function call\n</code>\n</pre>\n", "senID": 3}, {"text": ["You could then remove myfunc from mymodule and overload the module so it calls a particular function each time the myfunc member is requested."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "myfunc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "mymodule", "childNum": 0, "tag": "code", "childList": []}, {"text": "myfunc", "childNum": 0, "tag": "code", "childList": []}]}]]