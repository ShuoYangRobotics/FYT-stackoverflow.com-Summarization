[[{"code": "<pre>\n<code>\n $ python -mtimeit -s 'import os.path' 'os.path.join(\"/root\", \"file\")'\n1000000 loops, best of 3: 1.02 usec per loop\n$ python -mtimeit '\"/root\" + \"file\"'\n10000000 loops, best of 3: 0.0223 usec per loop\n</code>\n</pre>\n", "senID": 0}, {"text": ["So yes, it's nearly 50 times slower.", "1 microsecond is still nothing though, so I really wouldn't factor the difference in.", "Use os.path.join: it's cross-platform, more readable and less bug-prone."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "nothing", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "os.path.join", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["EDIT: Two people have now commented that the import explains the difference.", "This is not true, as -s is a setup flag thus the import is not factored into the reported runtime.", "Read the docs."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "-s", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "import", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "the docs", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/timeit.html#command-line-interface"}]}], [{"text": ["I don't know who told you not to use it, but they're wrong."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Also be aware that periods in function calls are known to be slow.", "Compare:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n python -mtimeit -s \"import os.path;x=range(10)\" \"os.path.join(x)\"\n1000000 loops, best of 3: 0.405 usec per loop\n\npython -mtimeit -s \"from os.path import join;x=range(10)\" \"join(x)\"\n1000000 loops, best of 3: 0.29 usec per loop\n</code>\n</pre>\n", "senID": 1}, {"text": ["So that's a slowdown of 40% just by having periods in your function invocation syntax."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Curiously, these two are different speeds:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n $ python -mtimeit -s \"from os.path import sep;join=sep.join;x=map(str,range(10))\" \"join(x)\"\n1000000 loops, best of 3: 0.253 usec per loop\n\n$ python -mtimeit -s \"from os.path import join;x=map(str,range(10))\" \"join(x)\"\n1000000 loops, best of 3: 0.285 usec per loop\n</code>\n</pre>\n", "senID": 4}], [{"text": ["It may be nearly 50 times faster, but unless you're doing it in a CPU bound tight inner loop, the speed difference isn't going to matter at all.", "The portability difference on the other hand will make the difference between whether or not your program can be easily ported to a non-Unix platform or not."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, please use os.path.join unless you've profiled and discovered that it really is a major impediment to your program's performance."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "os.path.join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You should use os.path.join simply for portability."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.path.join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I don't get the point of comparing os.path.join (which works for any number or parts, on any platform) with something as trivial as string formatting two paths."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "os.path.join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["To answer the question in the title, \"Is Python's os.path.join slow?", "\" you have to at least compare it with a remotely similar function to find out what speed you can expect from a function like this. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Is Python's os.path.join slow?", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["As you can see below, compared to a similar function, there is nothing slow aboutos.path.join:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "there is nothing slow aboutos.path.join", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "os.path.join", "tag": "code"}]}, {"text": "os.path.join", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n python -mtimeit -s \"x = tuple(map(str, range(10)))\" \"'/'.join(x)\"\n1000000 loops, best of 3: 0.26 usec per loop\n\npython -mtimeit -s \"from os.path import join;x = tuple(range(10))\" \"join(x)\"\n1000000 loops, best of 3: 0.27 usec per loop\n\n\npython -mtimeit -s \"x = tuple(range(3))\" \"('/%s'*len(x)) % x\"\n1000000 loops, best of 3: 0.456 usec per loop\n\npython -mtimeit -s \"x = tuple(map(str, range(3)))\" \"'/'.join(x)\"\n10000000 loops, best of 3: 0.178 usec per loop\n</code>\n</pre>\n", "senID": 4}], [{"text": ["In this hot controversy, I dare to propose:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(I know, I know , there is timeit, but I'm not so trained with timeit, and clock() seems to me to be sufficient for the case)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import os\nfrom time import clock\n\nsepar = os.sep\nospath = os.path\nospathjoin = os.path.join\n\nA,B,C,D,E,F,G,H = [],[],[],[],[],[],[],[]\nn = 1000\n\nfor essays in xrange(100):\n\n    te = clock()\n    for i in xrange(n):\n        xa = os.path.join('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')\n    A.append(clock()-te)\n\n\n    te = clock()\n    for i in xrange(n):\n        xb = ospath.join('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')\n    B.append(clock()-te)\n\n\n    te = clock()\n    for i in xrange(n):\n        xc = ospathjoin('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')\n    C.append(clock()-te)\n\n\n    te = clock()\n    for i in xrange(n):\n        xd = 'C:\\WINNT\\system32'+os.sep+'Microsoft\\Crypto'+os.sep+'RSA\\MachineKeys'\n    D.append(clock()-te)\n\n\n    te = clock()\n    for i in xrange(n):\n        xe = '%s\\\\%s\\\\%s' % ('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')\n    E.append(clock()-te)\n\n\n    te = clock()\n    for i in xrange(n):\n        xf = 'C:\\WINNT\\system32'+separ+'Microsoft\\Crypto'+separ+'RSA\\MachineKeys'\n    F.append(clock()-te)\n\n\n    te = clock()\n    for i in xrange(n):\n        xg = os.sep.join(('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys'))\n    G.append(clock()-te)\n\n\n    te = clock()\n    for i in xrange(n):\n        xh = separ.join(('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys'))\n    H.append(clock()-te)\n\nprint min(A), \"os.path.join('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')\"\nprint min(B), \"ospath.join('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')\"\nprint min(C), \"ospathjoin('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')\"\nprint min(D), \"'C:\\WINNT\\system32'+os.sep+'Microsoft\\Crypto'+os.sep+'RSA\\MachineKeys'\"\nprint min(E), \"'%s\\\\%s\\\\%s' % ('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')\"\nprint min(F), \"'C:\\WINNT\\system32'+separ+'Microsoft\\Crypto'+separ+'RSA\\MachineKeys'\"\nprint min(G), \"os.sep.join('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')\"\nprint min(H), \"separ.join('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')\"\nprint 'xa==xb==xc==xd==xe==xf==xg==xh==',xa==xb==xc==xd==xe==xf==xg==xh\n</code>\n</pre>\n", "senID": 2}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["0.0284533369465 os.path.join('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["0.0277652606686 ospath.join('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["0.0272489939364 ospathjoin('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["0.00398598145854 'C:\\WINNT\\system32'+os.sep+'Microsoft\\Crypto'+os.sep+'RSA\\MachineKeys'"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["0.00375075603184 '%s\\%s\\%s' % ('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["0.00330824168994 'C:\\WINNT\\system32'+separ+'Microsoft\\Crypto'+separ+'RSA\\MachineKeys'"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["0.00292467338726 os.sep.join('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["0.00261401937956 separ.join('C:\\WINNT\\system32','Microsoft\\Crypto','RSA\\MachineKeys')"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["True"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["with "], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["separ = os.sep"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["ospath = os.path"], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["ospathjoin = os.path.join"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}], [{"text": ["Everyone sholud know one inevident feature of os.path.join()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n os.path.join( 'a', 'b' ) == 'a/b'\nos.path.join( 'a', '/b' ) == '/b'\n</code>\n</pre>\n", "senID": 1}]]