[[{"text": ["What exactly are you intending to do?", "Do you want to run it and forget about it?", "Then do a fork/exec.", "Do you want run it and wait until it's finished but otherwise do nothing?", "Then use Sys.command.", "Do you want to read/write to it?", "Then uses Unix.open_process* (or Unix.create_process*)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Sys.command", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "Unix.open_process*", "childNum": 0, "tag": "code", "pos": 6, "childList": []}, {"text": "Unix.create_process*", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For example, if I want to run ls and print out the results, I can do this:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "ls", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n let ls = Unix.open_process_in \"ls\"\ntry\n  while true do\n    Printf.printf \"%s\\n\" (input_line ls)\n  done\nwith End_of_file -&gt; ()\nUnix.close_process_in ls\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Don't have any real life experience with this, but this sounds interesting (from the Integrating Python with other languages wiki):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Integrating Python with other languages wiki", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/IntegratingPythonWithOtherLanguages"}]}, {"text": ["Pycaml: write Python extension modules in OCaml (instead of C), and use Python code and native libraries from OCaml programs."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Pycaml: write Python extension modules in OCaml (instead of C), and use Python code and native libraries from OCaml programs.", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "Pycaml", "tag": "a"}]}, {"href": "http://pycaml.sourceforge.net/", "text": "Pycaml", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["You can execute commands using Sys.command, so you can just do Sys.command \"python foo.py\", assuming python is in your path and foo.py is in the current directory."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Sys.command", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Sys.command \"python foo.py\"", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If your program is an executable (otherwise you would compile it ;) ) you can use the Unix module as you use it in C, for example :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n let program = \"path_to_python_program_exe\" in\n\nmatch Unix.fork () with\n    | 0 -&gt; (try\n          Unix.execvp program [|program; \"any_more_args_here\"|]\n       with\n          _ -&gt; printf \"%s\" \"error while execv\\n\"; exit (-1))\n    | -1 -&gt; printf \"%s\" \"error accured on fork\\n\"\n    | _ -&gt; ignore (wait ()); printf \"%s\" \"parent exit...\\n\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["When you compile, you use the unix.cma for the compiler: ocamlc unix.cma you_ml.ml"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "ocamlc unix.cma you_ml.ml", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Looks like you can use the Shell library."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Shell library", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://batteries.forge.ocamlcore.org/doc.preview%3abatteries-beta1/html/api/Shell.html"}]}], [{"text": ["It depends on your exact requirements, but you can use pythons os.system() to execute an program in the same way you would call it from the command line.", "That should be a good starting point."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]