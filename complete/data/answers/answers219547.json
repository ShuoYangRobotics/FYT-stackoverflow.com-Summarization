[[{"text": ["I cannot confirm your results, and your server is coded fishy.", "I whipped up my own server and do not have this problem either.", "Let's move the discussion to a simpler level:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import thread, socket, Queue\n\nconnections = Queue.Queue()\nnum_threads = 10\nbacklog = 10\n\ndef request():\n    while 1:\n        conn = connections.get()\n        data = ''\n        while '\\r\\n\\r\\n' not in data:\n            data += conn.recv(4048)\n        conn.sendall('HTTP/1.1 200 OK\\r\\n\\r\\nHello World')\n        conn.close()\n\nif __name__ == '__main__':\n    for _ in range(num_threads):\n        thread.start_new_thread(request, ())\n\n    acceptor = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    acceptor.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    acceptor.bind(('', 1234))\n    acceptor.listen(backlog)\n    while 1:\n        conn, addr = acceptor.accept()\n        connections.put(conn)\n</code>\n</pre>\n", "senID": 1}, {"text": ["which on my machine does:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ab -n 10000 -c 10 http://127.0.0.1:1234/ --&gt; 8695.03 [#/sec]\nab -n 10000 -c 11 http://127.0.0.1:1234/ --&gt; 8529.41 [#/sec]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["For the heck of it I also implemented an asynchronous version:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import socket, Queue, select\n\nclass Request(object):\n    def __init__(self, conn):\n        self.conn = conn\n        self.fileno = conn.fileno\n        self.perform = self._perform().next\n\n    def _perform(self):\n        data = self.conn.recv(4048)\n        while '\\r\\n\\r\\n' not in data:\n            msg = self.conn.recv(4048)\n            if msg:\n                data += msg\n                yield\n            else:\n                break\n        reading.remove(self)\n        writing.append(self)\n\n        data = 'HTTP/1.1 200 OK\\r\\n\\r\\nHello World'\n        while data:\n            sent = self.conn.send(data)\n            data = data[sent:]\n            yield\n        writing.remove(self)\n        self.conn.close()\n\nclass Acceptor:\n    def __init__(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sock.bind(('', 1234))\n        sock.listen(10)\n        self.sock = sock\n        self.fileno = sock.fileno\n\n    def perform(self):\n        conn, addr = self.sock.accept()\n        reading.append(Request(conn))\n\nif __name__ == '__main__':\n    reading = [Acceptor()]\n    writing = list()\n\n    while 1:\n        readable, writable, error = select.select(reading, writing, [])\n        for action in readable + writable:\n            try: action.perform()\n            except StopIteration: pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["which performs:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ab -n 10000 -c 10 http://127.0.0.1:1234/ --&gt; 16822.13 [#/sec]\nab -n 10000 -c 11 http://127.0.0.1:1234/ --&gt; 15704.41 [#/sec]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["rcar: Yes some performance hit, of course - but dropping from 1400req/s to 32req/s because I make ONE more request then what the backlog can handle?", "And by using that logic the multiplexing server should suffer from the same performance hit - since it only can \"accept\" one connection at a time also I don't use a different process to handle the connections in the multiplexing version - it's all done in the main loop.", "The multiplexing code looks like this: http://paste2.org/p/89734 which is very similair to the threaded code."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "some", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "http://paste2.org/p/89734", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://paste2.org/p/89734"}]}], [{"text": ["I found this article on backlog on tomcat / java which gives an interesting insight in the backlog:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this article", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.mail-archive.com/dev@tomcat.apache.org/msg22589.html"}]}, {"text": ["As I interpret it, by asking ab to create more simultaneous connection than your\nsocket is configured to handle packets get dropped, not refused, and I do not know\nhow ab handles that.", "It may be that it retransmits the SYN, but possibly after waiting\na while.", "This may even be specced somewhere (TCP protocol?", ")."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As said, I do not know but I hope this hints at the cause. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Good luck!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["extraneon.myopenid.com: Thanks for the article, it was a good read - but then the problem would show up in both the single-threaded multiplexing version and the multithreaded version of the code?", "it doesn't, i'm going crazy over this ;("], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["it looks like you're not really getting concurrency.", "apparently, when you do socket.accept(), the main thread doesn't go immediately back to waiting for the next connection.", "maybe your connection-handling thread is only python code, so you're getting sequentialized by the SIL (single interpreder lock)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["if there's not heavy communications between threads, better use a multi-process scheme (with a pool of pre-spawned processes, of course)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Ok, so I ran the code on a totally different server - (a vps I got at slicehost), not a single problem (everything works as expected) so honestly I think it's something wrong with my laptop now ;p "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Thanks for everyones help though!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]