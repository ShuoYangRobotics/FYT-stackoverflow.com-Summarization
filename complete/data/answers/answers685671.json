[[{"text": ["This code should work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n duplicates = set()\nfound = set()\nfor item in source:\n    if item in found:\n        duplicates.add(item)\n    else:\n        found.add(item)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["groupby from itertools will probably be useful here:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "groupby", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/itertools.html", "text": "itertools", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n from itertools import groupby\nduplicated=[k for (k,g) in groupby(sorted(l)) if len(list(g)) > 1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Basically you use it to find elements that appear more than once..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["NB.", "the call to sorted is needed, as groupby only works properly if the input is sorted."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "sorted", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "groupby", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["This will create the list in one line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n L = [1, 2, 3, 3, 4, 4, 4]\nL_dup = set([i for i in L if L.count(i) &gt; 1])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Definitely not the fastest way to do that, but it seem to work solve the problem:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lst = [23, 32, 23, None]\n&gt;&gt;&gt; set(i for i in lst if lst.count(i) &gt; 1)\n{23}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you don't care about the order of the duplicates:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = [1, 2, 3, 4, 5, 4, 6, 4, 7, 8, 8]\nb = sorted(a)\nduplicates = set([x for x, y in zip(b[:-1], b[1:]) if x == y])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Personally, I think this is the simplest way to do it with performance O(n).", "Similar to vartec's solution but no import required and no Python version dependencies to worry about:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def getDuplicates(iterable):\n    d = {}\n    for i in iterable:\n        d[i] = d.get(i, 0) + 1\n    return [i for i in d if d[i] &gt; 1]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["the solutions based on 'set' have a small drawback, namely they only work for hashable objects."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["the solution based on itertools.groupby on the other hand works for all comparable objects (e.g.", ": dictionaries and lists)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Here's a simple 1-liner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["'enumerate' returns an indexed list which we use to splice our input list determining whether there are any duplicates ahead of our current index in the loop and whether we have already found a duplicate behind."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["EDIT : Ok, doesn't work since you want duplicates only."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Whith python > 2.4 :"], "childNum": 0, "tag": "h2", "senID": 1, "childList": []}, {"text": ["You have set, just do :"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n my_filtered_list = list(set(mylist))\n</code>\n</pre>\n", "senID": 3}, {"text": ["Set is a data structure that doesn't have duplicate by nature."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["With older Python versions :"], "childNum": 0, "tag": "h2", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n my_filtered_list = list(dict.fromkeys(mylist).keys())\n</code>\n</pre>\n", "senID": 6}, {"text": ["Dictionary map a unique key to a value.", "We use the \"unique\" caracteristc to get rid of the duplicate."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]]