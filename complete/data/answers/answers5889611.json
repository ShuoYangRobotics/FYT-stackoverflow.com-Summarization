[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; someDict = {'a':[], 'b':[]} \n&gt;&gt;&gt; all(map(lambda x: x == [], someDict.values()))\nTrue\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Per my testing, the following one-liner (my original answer) has best time performance in all scenarios.", "See edits below for testing information.", "I do acknowledge that solutions using generator expressions will be much more memory efficient and should be preferred for large dicts."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n bool([a for a in my_dict.values() if a != []])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Decided to have some fun.", "A comparison of answers, not in any particular order:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["(As used below, timeit will calculate a loop order of magnitude based on what will take less than 0.2 seconds to run)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["bool([a for a in my_dict.values() if a != []]) :  "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n python -mtimeit -s\"my_dict={'a':[],'b':[]}\" \"bool([a for a in my_dict.values() if a != []])\"\n1000000 loops, best of 3: 0.875 usec per loop\n</code>\n</pre>\n", "senID": 6}, {"text": ["any([my_dict[i] != [] for i in my_dict]) :  "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n python -mtimeit -s\"my_dict={'a':[],'b':[]}\" \"any([my_dict[i] != [] for i in my_dict])\"\n1000000 loops, best of 3: 0.821 usec per loop\n</code>\n</pre>\n", "senID": 8}, {"text": ["any(x != [] for x in my_dict.itervalues()):  "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n python -mtimeit -s\"my_dict={'a':[],'b':[]}\" \"any(x != [] for x in my_dict.itervalues())\"\n1000000 loops, best of 3: 1.03 usec per loop\n</code>\n</pre>\n", "senID": 10}, {"text": ["all(map(lambda x: x == [], my_dict.values())):  "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n python -mtimeit -s\"my_dict={'a':[],'b':[]}\" \"all(map(lambda x: x == [], my_dict.values()))\"\n1000000 loops, best of 3: 1.47 usec per loop\n</code>\n</pre>\n", "senID": 12}, {"text": ["filter(lambda x: x != [], my_dict.values()):  "], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n python -mtimeit -s\"my_dict={'a':[],'b':[]}\" \"filter(lambda x: x != [], my_dict.values())\"\n1000000 loops, best of 3: 1.19 usec per loop\n</code>\n</pre>\n", "senID": 14}, {"text": ["\nEdit again - more fun:"], "childNum": 2, "tag": "p", "senID": 15, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["any() is best case O(1) (if bool(list[0]) returns True).", "any()'s worst case is the \"positive\" scenario - a long list of values for which bool(list[i]) returns False."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"text": ["\nCheck out what happens when the dict gets big:"], "childNum": 1, "tag": "p", "senID": 17, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["bool([a for a in my_dict.values() if a != []]) :  "], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"code": "<pre>\n<code>\n #n=1000\npython -mtimeit -s\"my_dict=dict(zip(range(1000),[[]]*1000))\" \"bool([a for a in my_dict.values() if a != []])\"\n10000 loops, best of 3: 126 usec per loop\n\n#n=100000\npython -mtimeit -s\"my_dict=dict(zip(range(100000),[[]]*100000))\" \"bool([a for a in my_dict.values() if a != []])\"\n100 loops, best of 3: 14.2 msec per loop\n</code>\n</pre>\n", "senID": 19}, {"text": ["any([my_dict[i] != [] for i in my_dict]):  "], "childNum": 0, "tag": "p", "senID": 20, "childList": []}, {"code": "<pre>\n<code>\n #n=1000\npython -mtimeit -s\"my_dict=dict(zip(range(1000),[[]]*1000))\" \"any([my_dict[i] != [] for i in my_dict])\"\n10000 loops, best of 3: 198 usec per loop\n\n#n=100000\npython -mtimeit -s\"my_dict=dict(zip(range(100000),[[]]*100000))\" \"any([my_dict[i] != [] for i in my_dict])\"\n10 loops, best of 3: 21.1 msec per loop\n</code>\n</pre>\n", "senID": 21}, {"senID": 22}, {"text": ["But that's not enough - what about a worst-case 'False' scenario?"], "childNum": 0, "tag": "p", "senID": 23, "childList": []}, {"text": ["bool([a for a in my_dict.values() if a != []]) :  "], "childNum": 0, "tag": "p", "senID": 24, "childList": []}, {"code": "<pre>\n<code>\n python -mtimeit -s\"my_dict=dict(zip(range(1000),[0]*1000))\" \"bool([a for a in my_dict.values() if a != []])\"\n10000 loops, best of 3: 198 usec per loop\n</code>\n</pre>\n", "senID": 25}, {"text": ["any([my_dict[i] != [] for i in my_dict]) :  "], "childNum": 0, "tag": "p", "senID": 26, "childList": []}, {"code": "<pre>\n<code>\n python -mtimeit -s\"my_dict=dict(zip(range(1000),[0]*1000))\" \"any([my_dict[i] != [] for i in my_dict])\"\n1000 loops, best of 3: 265 usec per loop\n</code>\n</pre>\n", "senID": 27}], [{"text": ["Not falsey or not empty lists:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Not falsey:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n any(someDict.values())\n</code>\n</pre>\n", "senID": 2}, {"text": ["Not empty lists:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n any(a != [] for a in someDict.values())\n</code>\n</pre>\n", "senID": 4}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n any(map(lambda x: x != [], someDict.values()))\n</code>\n</pre>\n", "senID": 6}, {"text": ["Or if you are ok with a falsey return value:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n filter(lambda x: x != [], someDict.values())\n</code>\n</pre>\n", "senID": 8}, {"text": ["Returns a list of items that are not empty lists, so if they are all empty lists it's an empty list :)"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["try this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n all([d[i] == [] for i in d])\n</code>\n</pre>\n", "senID": 1}, {"text": ["edit: oops, i think i got you backwards.", "lets deMorgan that"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n any([d[i] != [] for i in d])\n</code>\n</pre>\n", "senID": 3}, {"text": ["this second way has the short-circuit advantage on the first anyhow"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Quite literally:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n any(x != [] for x in someDict.itervalues())\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n len(filter(lambda x: x!=[], someDict.values())) != 0\n</code>\n</pre>\n", "senID": 0}]]