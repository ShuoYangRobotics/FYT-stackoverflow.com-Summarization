[[{"text": ["Not the most efficient one, but by far the most obvious way to do it is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; b = [9, 8, 7, 6, 5]\n&gt;&gt;&gt; set(a) &amp; set(b)\n{5}\n</code>\n</pre>\n", "senID": 1}, {"text": ["if order is significant you can do it with list comprehensions like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [i for i, j in zip(a, b) if i == j]\n[5]\n</code>\n</pre>\n", "senID": 3}, {"text": ["(only works for equal-sized lists, which order-significance implies)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Use set.intersection(..)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "set.intersection(..)", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#set.intersection"}]}, {"code": "<pre>\n<code>\n aa = set(a)\nprint aa.intersection(b)\n# =&gt; set([5])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def returnMatches(a,b):\n       return list(set(a) &amp; set(b))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I prefer the set based answers, but here's one that works anyway"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [x for x in a if x in b]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The easiest way to do that is to use sets:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sets", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#set-types-set-frozenset"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; b = [9, 8, 7, 6, 5]\n&gt;&gt;&gt; set(a) &amp; set(b)\nset([5])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Quick way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list(set(a).intersection(set(b)))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Do you want duplicates?", "If not maybe you should use sets instead:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n >>> set([1, 2, 3, 4, 5]).intersection(set([9, 8, 7, 6, 5]))\nset([5])\n</code>\n</pre>\n", "senID": 1}], [], [{"text": ["Also you can try this,by keeping common elements in a new list. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n new_list = []\nfor element in a:\n    if element in b:\n        new_list.append(element)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Setz' answer seems complicated.", "Perhaps you would rather do"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["set(f) - set(s)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": [":)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]