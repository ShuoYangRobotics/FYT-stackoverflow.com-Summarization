[[{"text": ["Using ctypes or Cython to wrap your C functions is definitely the way to go.", "That way, you won't even need to copy the data between the C and Python code -- both the C and the Python part run within the same process and access the same data.", "Let's stick with ctypes, since this is what you suggested.", "Additionally, using NumPy will make this a lot more comfortable."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ctypes", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ctypes", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["I infer your vertex type looks like this:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "vertex", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n typedef struct\n{\n    int index;\n    float x, y;\n} vertex;\n</code>\n</pre>\n", "senID": 2}, {"text": ["To have these vertices in a NumPy array, you can define a record \"dtype\" for it:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n vertex_dtype = [('index', 'i'), ('x', 'f'), ('y', 'f')]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Also define this type as a ctypes structure:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "ctypes", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Vertex(ctypes.Structure):\n    _fields_ = [(\"index\", ctypes.c_int),\n                (\"x\", ctypes.c_float),\n                (\"y\", ctypes.c_float)]\n</code>\n</pre>\n", "senID": 6}, {"text": ["Now, the ctypes prototype for your function find_vertex() would look like this:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "ctypes", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "find_vertex()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from numpy.ctypeslib import ndpointer\nlib = ctypes.CDLL(...)\nlib.find_vertex.argtypes = [ndpointer(dtype=vertex_dtype, flags=\"C_CONTIGUOUS\"),\n                            ctypes.c_int,\n                            ctypes.POINTER(Vertex),\n                            ctypes.POINTER(Vertex)]\nlib.find_vertex.restypes = None\n</code>\n</pre>\n", "senID": 8}, {"text": ["To call this function, create a NumPy array of vertices"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n vertices = numpy.empty(1000, dtype=vertex_dtype)\n</code>\n</pre>\n", "senID": 10}, {"text": ["and two structures for the return values"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n lower = Vertex()\nhigher = Vertex()\n</code>\n</pre>\n", "senID": 12}, {"text": ["and finally call your function:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n lib.find_vertex(vertices, len(vertices), lower, higher)\n</code>\n</pre>\n", "senID": 14}, {"text": ["NumPy and ctypes will take care of passing the pointer to the beginning of the data of vertices to your C function -- no copying required."], "childNum": 2, "tag": "p", "senID": 15, "childList": [{"text": "ctypes", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "vertices", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Probably, you will have to read a bit of documentation on ctypes and NumPy, but I hope this answer helps you to get started with it."], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "ctypes", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It seems like what you really want is to turn your C program into a Python module.", "Here is a tutorial that will get you started."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/extending/extending.html"}]}], [{"text": ["If you want to pass data between two programs, and you already have the code to use a file, why not just use a RAMdisk?", "For Windows, you can use something like http://www.ltr-data.se/opencode.html/#ImDisk to create the RAMdisk and you can use the commands listed here for Linux.", "For smallish amounts of data (anything that will fit in RAM without requiring to be constantly paged out), this should outperform disk-based operations by a couple of orders of magnitude."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://www.ltr-data.se/opencode.html/#ImDisk", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ltr-data.se/opencode.html/#ImDisk"}, {"text": "here", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.linuxscrew.com/2010/03/24/fastest-way-to-create-ramdisk-in-ubuntulinux/"}]}], [{"text": ["I think I would use a library like sysv ipc for this job and simply map the data to a shared memory segment."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sysv ipc", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://semanchuk.com/philip/sysv_ipc"}]}], [{"text": ["Iterating over millions of items is the worst possible operation you could do in Python...", "If at all possible write this portion of the program in C or C++, it will be 100's of times faster and use 100's of times less memory..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I love python, but it's not a best solution for this type of operation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you can, make the Python program buffer the data that it is sending so that it does not send every vertex one by one.", "Save them up until there are 100 or 500 or 1000 and that way you will make fewer calls.", "Do some timing tests to determine optimal buffer size."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Here's a variant that uses Cython to write an extension module for CPython."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # file: cvertex.pxd\ncdef extern from \"vertex.h\":\n    ctypedef struct vertex:\n        int index\n        float x,y\n    void find_vertex(vertex *list, int len, vertex* lower, vertex* highter)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Where vertex.h is:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "vertex.h", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n typedef struct{\n    int index;\n    float x,y;\n} vertex;\n\nvoid find_vertex(vertex *list, int len, vertex* lower, vertex* highter);\n</code>\n</pre>\n", "senID": 3}, {"code": "<pre>\n<code>\n # file: pyvertex.pyx\ncimport numpy\ncimport cvertex # use declarations from cvertex.pxd\n\ndef find_vertex(numpy.ndarray[cvertex.vertex,ndim=1,mode=\"c\"] vertices):\n    if len(vertices) &lt; 2:\n        raise ValueError('provide at least 2 vertices')\n\n    cdef cvertex.vertex lower, highter\n    cvertex.find_vertex(&lt;cvertex.vertex*&gt;vertices.data, len(vertices),\n                        &amp;lower, &amp;highter)\n    return lower, highter # implicitly convert to dicts\n</code>\n</pre>\n", "senID": 4}, {"code": "<pre>\n<code>\n $ python setup.py build_ext -i\n</code>\n</pre>\n", "senID": 5}, {"text": ["Where setup.py is:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "setup.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\n\nsetup(\n    cmdclass = {'build_ext': build_ext},\n    ext_modules = [Extension(\"vertex\", [\"pyvertex.pyx\", \"vertex.c\"])]\n)\n</code>\n</pre>\n", "senID": 7}, {"code": "<pre>\n<code>\n import numpy\nimport vertex # import the extension\n\nn = 10000000\nvertex_list = numpy.zeros(n, dtype=[('index', 'i'), ('x', 'f'), ('y', 'f')])\ni = n//2\nvertex_list[i] = i, 1, 1\nv1, v2 = vertex.find_vertex(vertex_list)\nprint(v2['index'])\nprint(v1, v2)\n</code>\n</pre>\n", "senID": 8}, {"code": "<pre>\n<code>\n 5000000\n{'y': 0.0, 'index': 0, 'x': 0.0} {'y': 1.0, 'index': 5000000, 'x': 1.0}\n</code>\n</pre>\n", "senID": 9}]]