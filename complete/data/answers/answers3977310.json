[[{"text": ["If you're using Python 2.7+ or 3.1+ you could create an OrderedDictfromcollections from a sort of your dictionary and then iterate through that."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "OrderedDictfromcollections", "tag": "a", "pos": 0, "childList": [{"text": "OrderedDict", "tag": "code"}, {"text": "collections", "tag": "code"}], "childNum": 2, "href": "http://docs.python.org/library/collections.html#collections.OrderedDict"}, {"text": "OrderedDict", "childNum": 0, "tag": "code", "childList": []}, {"text": "collections", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n ordered = OrderedDict(sorted(mydict.items(), key=lambda t: t[0]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, depending on what you want to do it's probably easier to iterate over a sorted list of keys from your dict. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Dictionaries never store anything in some order.", "But you can get a list of keys using d.keys() which could be sorted.", "Iterate over a generator like below."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "d.keys()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def sortdict(d):\n    for key in sorted(d): yield d[key]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Using this you will be able to iterate over values in chronological order."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for value in sortdict(mydict):\n    # your code\n    pass\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Dictionaries are unsortable.", "Iterate over sorted(mydict.keys()) instead."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sorted(mydict.keys())", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I'm sure that python knows how to compare dates.", "So:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def sortedDictValues(adict):\n items = adict.items()\n items.sort()\n return [value for key, value in items]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["since your date strings seem to be in a proper format you could just do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sorted(mydict.items())         # iteritems in py2k\n[('2000-01-01', {'fld_2': 42, 'fld_1': 1}), ('2000-01-02', {'fld_2': 22.17, 'fld_1': 23})]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Python 2.7 (released on July 3rd, 2010) supports an ordered dictionary type:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.python.org/download/releases/2.7/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.python.org/download/releases/2.7/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/download/releases/2.7/"}]}]]