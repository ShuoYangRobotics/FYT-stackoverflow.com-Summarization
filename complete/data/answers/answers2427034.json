[[{"text": ["From the link you provided in your question (Additional Methods on Float):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Additional Methods on Float", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#additional-methods-on-float"}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #include &lt;cstdio&gt;\n\nint main() {\n  float f = 42.79;\n  printf(\"%.2f == %a\\n\", f, f);  \n  fscanf(stdin, \"%a\", &amp;f);\n  printf(\"%.2f == %a\\n\", f, f);  \n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["Run it:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n $ g++ *.cpp &amp;&amp; (python -c'print 12.34.hex()' | ./a.out )\n</code>\n</pre>\n", "senID": 4}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n 42.79 == 0x1.5651ecp+5\n12.34 == 0x1.8ae148p+3\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Can you send raw binary data between the two instead of strings?", "The struct package of Python's standard library can unpack the raw data into a Python float object."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "struct", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/struct.html"}]}], [{"text": ["The docs there say that %a does this in C. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "%a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You're sorely mistaken if you believe that this will solve all your problems.", "The hex notation is exactly equivalent to the original float.", "It just uses a different representation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["C++ does not have any library routines for converting hex to floating point.", "One reason is that the internal representation of floating point is not standardized (although many compilers do use an IEEE standard).  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I recommend storing in ASCII format, which is portable across platforms.", "You could write your own library (or find another) which will convert between an IEEE format (in hex) to the internal representation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If you're on a platform whose system C library supports C99, you can just use printf( ) and scanf( ) with the %a format specifier.", "For reading in such values, you can also use the C99 strtod( ), strtof( ), and strtold( ) functions:"], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "printf( )", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "scanf( )", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "%a", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "strtod( )", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "strtof( )", "childNum": 0, "tag": "code", "childList": []}, {"text": "strtold( )", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n float value = strtof(string, NULL, 0);\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can optionally replace NULL with a char ** to get back a pointer to the end of the sequence of converted characters, and 0 with a known base for the string representation (if you set the base to be zero, it will infer the base from the format; it will parse the python hex floats just fine, and also handle normal decimal-formatted floating point)"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "NULL", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "char **", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If your compiler/library vendor has chosen not to care about C99 (MSVC, basically), you're probably out of luck until these function are incorporated into the C++ standard (I believe that they're in the draft C++0x, but I'm not completely sure)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]