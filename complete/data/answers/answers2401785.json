[[{"text": ["No, there is no shorter way.", "Usually, you will even break it into two lines :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n important_airports = (airport for airport in airports if airport.is_important)\nfor airport in important_airports:\n    # do stuff\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is more flexible, easier to read and still don't consume much memory."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Mabe this, but it's more or less the same verbose..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import itertools\n\nfor airport in itertools.ifilter(lambda x: x.is_important, airports):\n    ...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could do"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for airport in filter(lamdba x: x.is_important, airports):\n    # do stuff...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'd use a negative guard on the loop.", "It's readable, and doesn't introduce an extra level of indentation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for airport in airports:\n    if not airport.is_important: continue\n    &lt;body of loop&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is a design philosophy of python.", "If it takes you too many words to put it on one line, it should be broken into a few lines to help the person who comes after you.", "List and generator expressions are more for transforming iterables in-place -- making more readable forms of map and filter."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "filter", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Using list comprehension (only if airports is a list of objects):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for airport in [a for a in airports if a.is_important]:\n</code>\n</pre>\n", "senID": 1}]]