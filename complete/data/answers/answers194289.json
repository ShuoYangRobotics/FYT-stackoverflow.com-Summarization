[[{"text": ["Let's think.", "We're describing objects (locations and pieces) with states and behaviors.", "We need to note a current state and an ever-changing set of allowed state changes from a current state."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is programming.", "You don't want some \"meta-language\" that you can then parse in a regular programming language.", "Just use a programming language."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Start with ordinary class definitions in an ordinary language.", "Get it all to work.", "Then, those class definitions are the definition of chess.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["With only miniscule exceptions, all programming languages are"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "all", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "Textual", "tag": "none", "senID": 4}, {"text": "Human readable", "tag": "none", "senID": 5}, {"text": "Reasonably standardized", "tag": "none", "senID": 6}, {"text": "Easily parsed by their respective compilers or interpreters.", "tag": "none", "senID": 7}]}, {"text": ["Just pick a language, and you're done.", "Since it will take a while to work out the nuances, you'll probably be happier with a dynamic language like Python or Ruby than with a static language like Java or C#."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["If you want portability.", "Pick a portable language.", "If you want the language embedded in a \"larger\" application, then, pick the language for your \"larger\" application."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"tag": "hr", "senID": 10}, {"text": ["Since the original requirements were incomplete, a secondary minor issue is how to have code that runs in conjunction with multiple clients."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["Edit: Overly wordy answer deleted."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The short answer is, write the rules in Python.", "Use Iron Python to interface that to the C# client, and Jython for the Java client."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This is answering the followup question :-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I can point out that one of the most popular chess servers around documents its protocol here (Warning, FTP link, and does not support passive FTP), but only to write interfaces to it, not for any other purpose.", "You could start writing a client for this server as a learning experience."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "ftp://ftp.chessclub.com/pub/icc/formats/formats.txt"}, {"text": "only to write interfaces to it", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["One thing that's relevant is that good chess servers offer many more features than just a move relay."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["That said, there is a more basic protocol used to interface to chess engines, documented here."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.tim-mann.org/xboard/engine-intf.html"}]}, {"text": ["Oh, and by the way: Board Representation at Wikipedia"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Board Representation at Wikipedia", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Board_representation_%28chess%29"}]}, {"text": ["Anything beyond board representation belongs to the program itself, as many have already pointed out."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["There's already a widely used format specific to chess called Portable Game Notation.", "There's also Smart Game Format, which is adaptable to many different games."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Portable Game Notation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Portable_Game_Notation"}, {"text": "Smart Game Format", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.red-bean.com/sgf/"}]}], [{"text": ["I would suggest Prolog for describing the rules. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What I've gathered from the responses so far:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For chess board data representations:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "For chess board data representations:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["See the Wikipedia article on [chess board representations](http://en.wikipedia.org/wiki/Board_representation_(chess))."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For chess move data representations:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "For chess move data representations:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["See the Wikipedia articles on Portable Game Notation and Algebraic Chess Notation"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "Portable Game Notation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Portable_Game_Notation"}, {"href": "http://en.wikipedia.org/wiki/Algebraic_chess_notation", "text": "Algebraic Chess Notation", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["For chess rules representations:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "For chess rules representations:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["This must be done using a programming language.", "If one wants to reduce the amount of code written in the case where the rules will be implemented in more than one language then there are a few options"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Although I would have liked a declarative syntax that could have been interpreted by mutliple languages to enforce the rules of chess my research has lead me to no likely candidate.", "I have a suspicion that Constraint Based Programming may be a possible route given that solvers exist for many languages but I am not sure they would truly fulfill this requirement.", "Thanks for all the attention and perhaps in the future an answer will appear."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Constraint Based Programming", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Constraint_programming"}]}], [{"text": ["Drools has a modern human readable rules implementation -- https://www.jboss.org/drools/.", "They have a way users can enter their rules in Excel.", "A lot more users can understand what is in Excel than in other tools."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["To represent the current state of a board (including castling possibilities etc) you can use \nForsyth-Edwards Notation, which will give you a short ascii representation.", "e.g."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Forsyth-Edwards Notation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Forsyth-Edwards_Notation"}]}, {"code": "<pre>\nrnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\n</pre>\n", "senID": 1}, {"text": ["Would be the opening board position."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Then to represent a particular move from a position you could use numeric move notation (as used in correspondence chess), which give you a short (4-5 digits) representation of a move on the board."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "numeric move notation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/ICCF_numeric_notation"}]}, {"text": ["As to represent the rules - I'd love to know myself.", "Currently the rules for my chess engine are just written in Python and probably aren't as declarative as I'd like."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I would agree with the comment left by \u03a4\u0396\u03a9\u03a4\u0396\u0399\u039f\u03a5, viz.", "just let the server do the validation and let the clients submit a potential move.", "If that's not the way you want to take the design, then just write the rules in Python as suggested by S. Lott and others."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It really shouldn't be that hard.", "You can break the rules down into three major categories:\n  - Rules that rely on the state of the board (castling, en passant, draws, check, checkmate, passing through check, is it even this player's turn, etc.", ")\n  - Rules that apply to all pieces (can't occupy the same square as another piece of your own colour, moving to a square w/ opponent's piece == capture, can't move off the board)\n  - Rules that apply to each individual piece.", "(pawns can't move backwards, castles can't move diagonally, etc)"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}]}, {"text": ["Each rule can be implemented as a function, and then for each half-move, validity is determined by seeing if it passes all of the validations."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For each potential move submitted, you would just need to check the rules in the following order:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If all of those are ok, then the server should accept the move as legal\u2026"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]