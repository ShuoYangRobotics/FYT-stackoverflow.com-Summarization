[[{"text": ["There's no such facility built into Java language.", "You have to write all the getters and setters explicitly by yourself.", "IDEs like Eclipse can generate this boilerplate code for you though."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example :"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Point{\n  private int x, y;\n\n  public Point(int x, int y){\n    this.x = x;\n    this.y = y;\n  }\n\n  public void setX(int x){\n    this.x = x;\n  }\n\n  public int getX(){\n    return x;\n  }\n\n  public void setY(int y){\n    this.y = y;\n  }\n\n  public int getY(){\n    return y;\n  }\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["You might want to have a look at Project Lombok which provides the annotations @Getter and @Setter that are somewhat similar to Python's property."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "Project Lombok", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://projectlombok.org/features/GetterSetter.html"}, {"text": "@Getter", "childNum": 0, "tag": "code", "childList": []}, {"text": "@Setter", "childNum": 0, "tag": "code", "childList": []}, {"text": "property", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["With Lombok, the above example reduces to :"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class Point{\n  @Getter @Setter private int x, y;\n\n  public Point(int x, int y){\n    this.x = x;\n    this.y = y;\n  }\n}\n</code>\n</pre>\n", "senID": 5}], [{"text": ["the built-in property() function does exactly the opposite of what's described here in the answers.", "it's not about generating getters and setters for member variables.", "it just allows you to call a method by accessing a property (so, although you just access a variable in te Python class, a function will be called).", "(this post ecplains how and why to use it.", ")\n\nthis said, Java doesn't offer anything like this.", "even more, property access is discouraged in Java.", "i guess you could do it in Groovy script language and the meta magic though.", "but i don't know out of my head how to do this."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "this post", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://adam.gomaa.us/blog/2008/aug/11/the-python-property-builtin/"}, {"text": "", "childNum": 0, "tag": "br", "pos": 4, "childList": []}]}], [{"text": ["They don't really exist.", "In Java it's common practice to declare members as private or protected and only allow access to them via methods.", "Often this leads to lots of small getFoo() and setFoo(newFoo) methods.", "Python doesn't really have private and protected and it's more common to allow direct access to members. "], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "private", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "protected", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "getFoo()", "childNum": 0, "tag": "code", "childList": []}, {"text": "setFoo(newFoo)", "childNum": 0, "tag": "code", "childList": []}, {"text": "private", "childNum": 0, "tag": "code", "childList": []}, {"text": "protected", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["As others have noted, java has getters and setters, but there is no strict analogon.", "There is a third party library called Project Lombok tha uses annotation to generate the getters and setters in the .class files at comile time.", "This could be used to make things a little less verbose."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Project Lombok", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://projectlombok.org/"}]}], [{"text": ["Do you want to create new fields/getters/setters in the class?", "If you want to do this in runtime, you have to create completely new class with your fields and methods, and load it into the JVM.", "To create new class you can use library like ASM or CGLib, but if you're new to Java, this isn't something you want to start with."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Actually you may simulate this behavior in Java."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["WARNING: ugly solution below"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "WARNING: ugly solution below", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["You can write a method in an utility class like the code below:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n public Object getProperty(String property, Object obj) {\n  if (obj != null &amp;&amp; property != null) {\n       Field field = obj.getClass().getDeclaredField(property);\n       field.setAccessible(true);\n       try {\n          return field.get(obj);\n       } catch (Exception ex) {\n          return null;\n       }\n  }\n  return null;\n}\n</code>\n</pre>\n", "senID": 3}, {"text": ["You may actually declare it as a static method and then just import this method into your classes which will need this behavior."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["By the way, Groovy support this feature."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]