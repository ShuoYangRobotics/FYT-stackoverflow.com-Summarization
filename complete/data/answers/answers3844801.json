[[{"text": ["General method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def checkEqual1(iterator):\n      try:\n         iterator = iter(iterator)\n         first = next(iterator)\n         return all(first == rest for rest in iterator)\n      except StopIteration:\n         return True\n</code>\n</pre>\n", "senID": 1}, {"text": ["One-liner:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def checkEqual2(iterator):\n       return len(set(iterator)) &lt;= 1\n</code>\n</pre>\n", "senID": 3}, {"text": ["Also one-liner:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def checkEqual3(lst):\n       return lst[1:] == lst[:-1]\n</code>\n</pre>\n", "senID": 5}, {"text": ["The difference between the 3 versions are that:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["timeit result, for Python 2.7 and (only s1, s4, s7, s9 should return True)"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "timeit", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n s1 = [1] * 5000\ns2 = [1] * 4999 + [2]\ns3 = [2] + [1]*4999\ns4 = [set([9])] * 5000\ns5 = [set([9])] * 4999 + [set([10])]\ns6 = [set([10])] + [set([9])] * 4999\ns7 = [1,1]\ns8 = [1,2]\ns9 = []\n</code>\n</pre>\n", "senID": 8}, {"text": ["we get"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n checkEqual1  checkEqual2   checkEqual3 checkEqualIvo checkEqual6502\n\ns1 1.19     msec  348    usec  183     usec   51.6   usec   121     usec\ns2 1.17     msec  376    usec  185     usec   50.9   usec   118     usec\ns3     4.17 usec  348    usec  120     usec  264     usec    61.3   usec\n\ns4 1.73     msec               182     usec   50.5   usec   121     usec\ns5 1.71     msec               181     usec   50.6   usec   125     usec\ns6     4.29 usec               122     usec  423     usec    61.1   usec\n\ns7     3.1  usec    1.4  usec    1.24  usec    0.932 usec     1.92  usec\ns8     4.07 usec    1.54 usec    1.28  usec    0.997 usec     1.79  usec\ns9     5.91 usec    1.25 usec    0.749 usec    0.407 usec     0.386 usec\n</code>\n</pre>\n", "senID": 10}, {"text": ["Note:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n # http://stackoverflow.com/q/3844948/\ndef checkEqualIvo(lst):\n    return not lst or lst.count(lst[0]) == len(lst)\n\n# http://stackoverflow.com/q/3844931/\ndef checkEqual6502(lst):\n    return not lst or [lst[0]]*len(lst) == lst\n</code>\n</pre>\n", "senID": 12}], [{"text": ["A solution faster than using set() that works on sequences (not iterables) is to simply count the first element.", "This assumes the list is non-empty (but that's trivial to check, and decide yourself what the outcome should be on an empty list)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x.count(x[0]) == len(x)\n</code>\n</pre>\n", "senID": 1}, {"text": ["some simple benchmarks:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit.timeit('len(set(s1))&lt;=1', 's1=[1]*5000', number=10000)\n1.4383411407470703\n&gt;&gt;&gt; timeit.timeit('len(set(s1))&lt;=1', 's1=[1]*4999+[2]', number=10000)\n1.4765670299530029\n&gt;&gt;&gt; timeit.timeit('s1.count(s1[0])==len(s1)', 's1=[1]*5000', number=10000)\n0.26274609565734863\n&gt;&gt;&gt; timeit.timeit('s1.count(s1[0])==len(s1)', 's1=[1]*4999+[2]', number=10000)\n0.25654196739196777\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can convert the list to a set.", "A set cannot have duplicates.", "So if all the elements in the original list are identical, the set will have just one element."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if len(sets.Set(input_list)) == 1\n// input_list has all identical elements.\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is another option, faster than len(set(x))==1 for long lists (uses short circuit)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "len(set(x))==1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def constantList(x):\n    return x and [x[0]]*len(x) == x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Doubt this is the \"most Pythonic\", but something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; falseList = [1,2,3,4]\n&gt;&gt;&gt; trueList = [1, 1, 1]\n&gt;&gt;&gt; \n&gt;&gt;&gt; def testList(list):\n...   for item in list[1:]:\n...     if item != list[0]:\n...       return False\n...   return True\n... \n&gt;&gt;&gt; testList(falseList)\nFalse\n&gt;&gt;&gt; testList(trueList)\nTrue\n</code>\n</pre>\n", "senID": 1}, {"text": ["would do the trick."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This is a simple way of doing it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result = mylist and all(mylist[0] == elem for elem in mylist)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is slightly more complicated, it incurs function call overhead, but the semantics are more clearly spelled out:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def all_identical(seq):\n    if not seq:\n        # empty list is False.\n        return False\n    first = seq[0]\n    return all(first == elem for elem in seq)\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; z = [(a[x], a[x+1]) for x in range(0, len(a)-1)]\n&gt;&gt;&gt; z\n[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n# Replacing it with the test\n&gt;&gt;&gt; z = [(a[x] == a[x+1]) for x in range(0, len(a)-1)]\n&gt;&gt;&gt; z\n[False, False, False, False, False]\n&gt;&gt;&gt; if False in z : Print \"All elements are not equal\"\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n def allTheSame(i):\n    j = itertools.groupby(i)\n    for k in j: break\n    for k in j: return False\n    return True\n</code>\n</pre>\n", "senID": 0}, {"text": ["Works in Python 2.4, which doesn't have \"all\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I'd do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n not any((x[i] != x[i+1] for i in range(0, len(x)-1)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["as any stops searching the iterable as soon as it finds a True condition."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "any", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}]}]]