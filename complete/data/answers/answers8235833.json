[[{"text": ["Generators are perfect for this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def altenumerate( it ):\n    return ((idx+1, value) for idx, value in enumerate(it))\n</code>\n</pre>\n", "senID": 1}, {"text": ["A simplified for older versions of python:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def altenumerateOld( it ):\n    idx = 1\n    for value in it:\n        yield (idx, value)\n        idx += 1\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Instead of counter += 1, maybe use counter + 1 where you've used counter."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "counter += 1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "counter + 1", "childNum": 0, "tag": "code", "childList": []}, {"text": "counter", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Alternatively:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for counter, file in ((i + 1, f) for i, f in enumerate(files)):\n    ...\n</code>\n</pre>\n", "senID": 2}, {"text": ["(Python 2.6 and later has some great stuff.", "Try to upgrade if you can."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You can use zip():"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "zip()", "tag": "a", "pos": 0, "childList": [{"text": "zip()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#zip"}, {"text": "zip()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; enums = zip(range(1, len(files) + 1), files)\n&gt;&gt;&gt; for index, val in enums:\n    print index, val\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can make your own version of enumerate():"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "enumerate()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def enumerate_1based(iterable):\n    for index, item in enumerate(iterable):\n        yield index+1, item\n</code>\n</pre>\n", "senID": 1}, {"text": ["Alternately, add a start argument, to make it work just like later versions of enumerate()."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "start", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "enumerate()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I did this like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #Emulate enumerate() with start parameter (introduced in Python 2.6)\nfor i,v in (i+start,v for i,v in enumerate(seq)):\n    //do stuff\n</code>\n</pre>\n", "senID": 1}, {"text": ["Basically, this is the same, yet a self-contained construct."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n for counter, item in enumerate(testlist):\n    print(counter+1)\n    print(item)\n</code>\n</pre>\n", "senID": 0}]]