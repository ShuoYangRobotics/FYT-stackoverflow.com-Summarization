[[{"text": ["Consider these strings:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"Don't do that.\"\n'I said, \"okay\".'\n\"\"\"She said, \"That won't work\".\"\"\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which quote is \"best\"?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["' because it's one keystroke less than \".", "Save your wrists!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["They're otherwise identical (except you have to escape whichever you choose to use, if they appear inside the string)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Semantically there is no difference in Python; use either.", "Python also provides the handy triple string delimiter \"\"\" or ''' which can simplify multi-line quotes.", "There is also the raw string literal (r\"...\" or r'...') to inhibit \\ escapes.", "The Language Reference has all the details."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Language Reference", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/lexical%5Fanalysis.html#string-literals"}]}], [{"text": ["For string constants containing a single quote use the double quote as delimiter."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "single quote", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "double quote", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The other way around, if you need a double quote inside."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "double quote", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Quick, shiftless typing leads to single quote delimiters."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "single quote", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"it's very simple\"\n&gt;&gt;&gt; 'reference to the \"book\"'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Single and double quotes act identically in Python.", "Escapes (\\n) always work, and there is no variable interpolation.", "(If you don't want escapes, you can use the r flag, as in r\"\\n\"."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "\\n", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "r", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "r\"\\n\"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Since I'm coming from a Perl background, I have a habit of using single quotes for plain strings and double-quotes for formats used with the % operator.", "But there is really no difference."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "%", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Other answers are about nested quoting.", "Another point of view I've come across, but I'm not sure I subscribe to, is to use single-quotes(') for characters (which are strings, but ord/chr are quick picky) and to use double-quotes for strings.", "Which disambiguates between a string that is supposed to be one character and one that just happens to be one character."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Personally I find most touch typists aren't affected noticably by the \"load\" of using the shift-key.", "YMMV on that part.", "Going down the \"it's faster to not use the shift\" is a slippery slope.", "It's also faster to use hyper-condensed variable/function/class/module names.", "Everyone just so loves the fast and short 8.3 DOS files names too.", ":) Pick what makes semantic sense to you, then optimize."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This is a rule I have heard about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["\") If the string is for human consuption, that is interface text or output, use \"\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["') If the string is a specifier, like a dictionary key or an option, use ''"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I think a well-enforced rule like that can make sense for a project, but it's nothing that I would personally care much about.", "I like the above, since I read it, but I always use \"\" (since I learned C first wayy back?", ")."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I don't think there is a single best string delimiter.", "I like to use different delimiters to indicate different kinds of string.", "Specifically, I like to use \"...\" to delimit stings that are used for interpolation or that are natural language messages, and '...' to delimit small symbol-like strings.", "This gives me a subtle extra clue to the expected use for the string literal."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "\"...\"", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "'...'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["I try to always use raw strings (r\"...\") for regular expressions because (1) I don't have to escape backslash characters and (2) my editor recognises this convention and does syntax highlighting inside the regex."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "r\"...\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The stylistic issues of single- vs. double-quotes are covered in question 56011."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "question 56011", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/56011/single-quotes-vs-double-quotes-in-python"}]}]]