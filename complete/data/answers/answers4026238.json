[[{"text": ["Most other languages that support threading don't have an equivalent of the Python GIL; they require you to use mutexes, either implicitly or explicitly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Using lock, you would do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lock(some_list)\n{\n    some_list.Add(3);\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["and in thread 2:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n lock(some_list)\n{\n    some_list.Add(4);\n}\n</code>\n</pre>\n", "senID": 3}, {"text": ["The lock statement ensures that the object inside the lock statement, some_list in this case, can only be accessed by a single thread at a time.", "See http://msdn.microsoft.com/en-us/library/c5kehkcz(VS.80).aspx for more information."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "lock", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "lock", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "some_list", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "http://msdn.microsoft.com/en-us/library/c5kehkcz(VS.80).aspx", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/c5kehkcz(VS.80).aspx"}]}], [{"text": ["C# does not have an equivalent of GIL to Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As per one of the discussion -"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Note: Other implementation like IronPython do not have GIL."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It may be instructive to look at the documentation for the Java equivalent of the class you're discussing:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "documentation for the Java equivalent", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://download.oracle.com/javase/6/docs/api/index.html"}]}], [{"text": ["Most complex datastructures(for example lists) can be corrupted when used without locking in multiple threads."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Since changes of references are atomic, a reference always stays a valid reference."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["But there is a problem when interacting with security critical code.", "So any datastructures used by critical code most be one of the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Inaccessible from untrusted code, and locked/used correctly by trusted code", "tag": "none", "senID": 3}, {"text": "Immutable (String class)", "tag": "none", "senID": 4}, {"text": "Copied before use (valuetype parameters)", "tag": "none", "senID": 5}, {"text": "Written in trusted code and uses internal locking to guarantee a safe state", "tag": "none", "senID": 6}]}, {"text": ["For example critical code cannot trust a list accessible from untrusted code.", "If it gets passed in a List, it has to create a private copy, do it's precondition checks on the copy, and then operate on the copy."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I'm going to take a wild guess at what the question really means..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["In Python data structures in the interpreter get corrupted because Python is using a form of reference counting."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Both C# and Java use garbage collection and in fact they do use a global lock when doing a full heap collection."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "do", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Data can be marked and moved between \"generations\" without a lock.", "But to actually clean it up everything must come to a stop.", "Hopefully a very short stop, but a full stop."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Here is an interesting link on CLR garbage collection as of 2007:\nhttp://vineetgupta.spaces.live.com/blog/cns!8DE4BDC896BEE1AD!1104.entry"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://vineetgupta.spaces.live.com/blog/cns!8DE4BDC896BEE1AD!1104.entry", "text": "http://vineetgupta.spaces.live.com/blog/cns!8DE4BDC896BEE1AD!1104.entry", "childNum": 0, "tag": "a", "childList": []}]}]]