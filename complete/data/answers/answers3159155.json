[[{"text": ["To remove all integers, do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n no_integers = [x for x in mylist if not isinstance(x, int)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, your example list does not actually contain integers.", "It contains only strings, some of which are composed only of digits.", "To filter those out, do the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n no_integers = [x for x in mylist if not (x.isdigit() \n                                         or x[0] == '-' and x[1:].isdigit())]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Alternately:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n is_integer = lambda s: s.isdigit() or (x[0] == '-' and x[1:].isdigit())\nno_integers = filter(is_integer, mylist)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You can do this, too:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def int_filter( someList ):\n    for v in someList:\n        try:\n            int(v)\n            continue # Skip these\n        except ValueError:\n            yield v # Keep these\n\nlist( int_filter( items ))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Why?", "Because int is better than trying to write rules or regular expressions to recognize string values that encode an integer. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["None of the items in your list are integers.", "They are strings which contain only digits.", "So you can use the isdigit string method to filter out these items.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "isdigit", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n items = ['1','introduction','to','molecular','8','the','learning','module','5']\n\nnew_items = [item for item in items if not item.isdigit()]\n\nprint new_items\n</code>\n</pre>\n", "senID": 1}, {"text": ["Link to documentation: http://docs.python.org/library/stdtypes.html#str.isdigit"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#str.isdigit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#str.isdigit"}]}], [{"text": ["I personally like filter.", "I think it can help keep code readable and conceptually simple if used in a judicious way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = ['1','introduction','to','molecular','8','the','learning','module','5'] \nx = filter(lambda i: not str.isdigit(i), x)\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from itertools import ifilterfalse\nx = ifilterfalse(str.isdigit, x)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note the second returns an iterator."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You can also use lambdas (and, obviously, recursion), to achieve that (Python 3 needed):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n isNumber = lambda s: False if ( not( s[0].isdigit() ) and s[0]!='+' and s[0]!='-' ) else isNumberBody( s[ 1:] )\n\n isNumberBody = lambda s: True if len( s ) == 0 else ( False if ( not( s[0].isdigit() ) and s[0]!='.' ) else isNumberBody( s[ 1:] ) )\n\n removeNumbers = lambda s: [] if len( s ) == 0 else ( ( [s[0]] + removeNumbers(s[1:]) ) if ( not( isInteger( s[0] ) ) ) else [] + removeNumbers( s[ 1:] ) )\n\n l = removeNumbers([\"hello\", \"-1\", \"2\", \"world\", \"+23.45\"])\n print( l )\n</code>\n</pre>\n", "senID": 1}, {"text": ["Result (displayed from 'l') will be: ['hello', 'world']"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "['hello', 'world']", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Please do not use this way to remove items from a list: (edited after comment by THC4k)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; li = ['1','introduction','to','molecular','8','the','learning','module','5']\n&gt;&gt;&gt; for item in li:\n        if item.isdigit():\n            li.remove(item)\n\n&gt;&gt;&gt; print li\n['introduction', 'to', 'molecular', 'the', 'learning', 'module']\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will not work since changing a list while iterating over it will confuse the for-loop.", "Also, item.isdigit() will not work if the item is a string containing a negative integer, as noted by razpeitia."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]