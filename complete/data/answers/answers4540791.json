[[{"text": ["No, not every string \"should be Unicode\".", "Within your Python code, you know if the string literals needs to be Unicode or not, so it doesn't make any sense to make every string literal into a Unicode literal."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But there are cases where you should use Unicode.", "For example, if you have arbitrary input that is text, use Unicode for it.", "You will sooner or later find a non-american using it, and he want to wr\u00eete t\u00eaxt \u00e5s h\u00e9 is \u00fcsed t\u00f6.", "And you'll get problems in that case unless your input and output happen to use the same encoding, which you can't be sure of."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So in short, no,stringsshouldn't be Unicode.Textshould be.", "But YMMV."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "So in short, no,stringsshouldn't be Unicode.Textshould be.", "childNum": 2, "tag": "strong", "pos": 0, "childList": [{"text": "strings", "tag": "em"}, {"text": "Text", "tag": "em"}]}, {"text": "strings", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "Text", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["Specifically:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The \"always use Unicode\" suggestion is primarily to make the transition to Python 3 easier.", "If you have a lot of non-Unicode string access in your code, it'll take more work to port it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also, you shouldn't have to decide on a case-by-case basis whether a string should be stored as Unicode or not.", "You shouldn't have to change the types of your strings and their very syntax just because you changed their contents, either."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It's also easy to use the wrong string type, leading to code that mostly works, or code which works in Linux but not in Windows, or in one locale but not another.", "For example, for c in \"\u6f22\u5b57\" in a UTF-8 locale will iterate over each UTF-8 byte (all six of them), not over each character; whether that breaks things depends on what you do with them."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "mostly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "for c in \"\u6f22\u5b57\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["In principle, nothing should break if you use Unicode strings, but things may break if you use regular strings when you shouldn't."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In practice, however, it's a pain to use Unicode strings everywhere in Python 2.  codecs.open doesn't pick the correct locale automatically; this fails:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "codecs.open", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n codecs.open(\"blar.txt\", \"w\").write(u\"\u6f22\u5b57\")\n</code>\n</pre>\n", "senID": 5}, {"text": ["The real answer is:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n import locale, codecs\nlang, encoding = locale.getdefaultlocale()\ncodecs.open(\"blar.txt\", \"w\", encoding).write(u\"\u6f22\u5b57\")\n</code>\n</pre>\n", "senID": 7}, {"text": ["... which is cumbersome, forcing people to make helper functions just to open files.", "codecs.open should be using the encoding from locale automatically when one isn't specified; Python's failure to make such a simple operation convenient is one of the reasons people generally don't use Unicode everywhere."], "childNum": 4, "tag": "p", "senID": 8, "childList": [{"text": "codecs.open", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "should", "childNum": 0, "tag": "em", "childList": []}, {"text": "locale", "childNum": 0, "tag": "code", "childList": []}, {"text": "don't", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Finally, note that Unicode strings are even more critical in Windows in some cases.", "For example, if you're in a Western locale and you have a file named \"\u6f22\u5b57\", you must use a Unicode string to access it, eg.", "os.stat(u\"\u6f22\u5b57\").", "It's impossible to access it with a non-Unicode string; it just won't see the file."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "must", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "os.stat(u\"\u6f22\u5b57\")", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["So, in principle I'd say the Unicode string recommendation is reasonable, but with the caveat that I don't generally even follow it myself."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["IMHO (my simple rules):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Well, I use unicode literals only when I have some char above ASCII 128:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print 'New York', u'S\u00e3o Paulo'\n   t = ('New York', u'S\u00e3o Paulo')\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you expect unicode text, use codecs.    "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Only if you expect unicode text that may get transfered to another system with distinct default encoding (including databases)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["EDITED (about mixing unicode and byte strings):"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print 'New York', 'to', u'S\u00e3o Paulo'\nNew York to S\u00e3o Paulo\n&gt;&gt;&gt; print 'New York' + ' to ' + u'S\u00e3o Paulo'\nNew York to S\u00e3o Paulo\n&gt;&gt;&gt; print \"C\u00f4te d'Azur\" + ' to ' + u'S\u00e3o Paulo'\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 1: \n     ordinal not in range(128)\n&gt;&gt;&gt; print \"C\u00f4te d'Azur\".decode('utf-8') + ' to ' + u'S\u00e3o Paulo'\nC\u00f4te d'Azur to S\u00e3o Paulo\n</code>\n</pre>\n", "senID": 6}, {"text": ["So if you mix a byte string that contains utf-8 (or other non ascii char) with unicode text without explicit conversion, you will have trouble, because default assumes ascii.", "The other way arround seems to be safe.", "If you follow the rule of writing every string containing non-ascii as an unicode literal, you should be OK."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["DISCLAIMER: I live in Brazil where people speak Portuguese, a language with lots of non-ascii chars.", "My default encoding is always set to 'utf-8'.", "Your mileage may vary in English/ascii systems."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["The fact that you were writing Python code for 6 months before encountering anything about Unicode means that the Python 2.x ASCII default for strings didn't cause you any problems.", "Certainly for a beginner to try to grasp the idea of Unicode/code points/encoding in itself is a hard issue to tackle; therefore, most tutorials naturally bypass it until you get more of a grounding in the fundamentals.", "That's why in a book like Dive Into Python, Unicode is only mentioned in later chapters."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "in later chapters", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://diveintopython.org/xml_processing/unicode.html"}]}, {"text": ["If you need to support Unicode in your application, I suggest looking at Kumar McMillan's PyCon 2008 talk on Unicode for a list of best practices.", "It should answer your remaining questions."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Kumar McMillan's PyCon 2008 talk on Unicode", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://farmdev.com/talks/unicode/"}]}], [{"text": ["I\u2019m just adding my personal opinion here.", "Not as long and elaborate at the other answers, but maybe it can help, too."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I\u2019d indeed prefer the first.", "If you know that you only have Unicode strings, you have one invariant more.", "Various other languages (C, C++, Perl, PHP, Ruby, Lua, \u2026) sometimes encounter painful problems because of their lack of separation between code unit sequences and integer sequences.", "I find the approach of strict distinction between them that exists in .NET, Java, Python etc.", "quite a bit cleaner."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Yes."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Yes.", "Future statements apply only to the file where they\u2019re used, so you can use them without interfering with other modules.", "I generally import all futures in Python 2.x modules to make the transition to 3.x easier."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You should use the codecs module because that makes it impossible (or at least very hard) to accidentally write differently-encoded representations to a single file.", "It is also the way Python 3.x works when you open a file in text mode."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "codecs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I\u2019d say yes to this too: In most cases it\u2019s easier to deal with only one encoding, so I recommend converting to Python Unicode strings as early as possible."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I don\u2019t know what the common approach is, but I use that statement all the time.", "I have encountered only very few issues with this approach, and most of them are related to bugs in external libraries\u2014i.e., NumPy sometimes requires byte strings without documenting that."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["1/2) Personally I've never heard of \"always use unicode\".", "That seems pretty stupid to me.", "I guess I understand if you plan to support other languages that need unicode support.", "But other than that I wouldn't do that, it seems like more of a pain than it's worth."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["3) I would just read/write the standard way and encode when necessary."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]