[[{"text": ["Don't conflate Language and Run-Time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python (the language) has many run-time implementations."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["CPython is usually interpreted, and will be slower than native-code C#.", "It might be slower than Java, depending on the Java JIT compiler."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["JYthon is interpreted in the JVM and has the same performance profile as Java."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["IronPython is relies on the same .NET libraries and IL as C#, so the performance difference will be relatively small."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Python can be translated to native code via PyREX, PyToC, and others.", "In this case, it will generally perform as well as C++.", "You can -- to an extent -- further optimize C++ and perhaps squeeze out a little bit better performance than unoptimized output from PyREX. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]}, {"text": ["Note that Python (the language) is not slow.", "Some Python run-times (CPython, for example) will be slower than native-code C++."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["It is not really correct to ask why Python is slower than Java/C#.", "How fast is Java?", "Well, naive interpreters are around ten times slower than optimised compilers.", "I believe there is a Java bytcode interpreter written in JavaScript - that probably isn't very fast.", "So, the intended question appears to be \"Why is the CPython language system slower than the equivalent Sun, IBM and Oracle JRE and Microsoft .NET runtime?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I believe the correct answer is non-technical.", "The fastest Java and .NET runtime are faster because they have large full time technical teams developing them in performance-competitive environment."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Dynamic language systems are easy to implement.", "Any idiot can do it.", "I have.", "Static language systems are more complex to design and implement.", "A simple static system will tend to run much faster than the equivalent just-working dynamic equivalent.", "However, it is possible for highly optimised dynamic systems to run almost as fast.", "I understand some Smalltalk implementation were quite good.", "An often quoted example of a developed dynamic system is the MIT Lisp Machine."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "MIT Lisp Machine", "tag": "a", "pos": 7, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Lisp%5Fmachine"}]}, {"text": ["In addition if the real grunt is being done by library code, then the language system may not matter.", "Alternatively, the language may encourage (or give time(!", ")) to develop more efficient algorithms which can easily wipe out constant factor performance differences."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["It boils down to the fact that the compilation phase has lesser information to work with and hence the runtime needs to do more work in case of duck typed (dynamically typed) languages. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Thus if I am making the method invocation foo.bar(), in case of Java or C++ the invocation to bar can be optimized in the compilation process by discovering the type of \"foo\" and then directly invoking the method at the memory location where the compiler knows it will be found.", "Since a python or any other dynamically typed language compiler does not know what type the object foo belongs to, it has to do a type check at runtime and then look up the address of the bar method and then invoke it. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["There are other difficulties a python compiler writer struggles with as well, though the one above hopefully adequately gives an indication.", "So even with the best compiler writers, statically typed languages are likely to perform much better at runtime."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Where dynamically typed languages score are typically in the development time.", "Due to fewer lines of code to write and maintain, and no compile wait times for developers, the development often goes through much faster."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["As mentioned in the other answers this depends on the run-time system as well as the task at hand.", "So the standard (C)Python is not necessarily slower than Java or C#.", "Some of its modules are implemented in C. Thus combining speed of a native implementation with Python's language."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "native", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["We did a small experiment: We compared the execution time of a Factorial computation in different languages.", "The test was actually intended to evaluate the performance of arbitrary-precision integers implementations."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\ntestee. language arbitrary-precision integers run-time\n\n     1. Java     java.math.BigInteger         JRE 6.13\n     2. .NET     System.Numerics.BigInteger   MS CLR 4.0\n     3. Python   long                         Active Python 2.6.2.2\n     4. Squeak   BigInt                       Squeak 3.10.2\n     5. .NET     Mono.Math.BigInteger         MS CLR 4.0\n\nresults:\n\n                 1)         2)       3)       4)        5)\n   10.000!      343 ms    137 ms    91 ms  1.200 ms    169 ms\n   20.000!    1.480 ms    569 ms   372 ms  1.457 ms    701 ms\n   30.000!    3.424 ms  1.243 ms   836 ms  3.360 ms  1.675 ms\n   40.000!    6.340 ms  2.101 ms 1.975 ms  6.738 ms  3.042 ms\n   50.000!   10.493 ms  3.763 ms 3.658 ms 10.019 ms  5.242 ms\n   60.000!   15.586 ms  7.683 ms 5.788 ms 14.241 ms 10.000 ms\n</pre>\n", "senID": 2}, {"src": "http://www.mycsharp.de/wbb2/attachment.php?attachmentid=6909&sid=0d5aa62b522d005d9e7089785b5d19f1", "tag": "img", "senID": 3}, {"text": ["The bar chart shows the results.", "Python is the clear winner.", "As far as I know Python uses the Karatsuba-algorithm to multiply large integers, which explains the speed."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Karatsuba-algorithm", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Karatsuba%5Falgorithm"}]}, {"text": ["Besides, Python's \"arbitrary-precision integers\"-type is the built-in long.", "Hence you don't even need special type handling which is required for Java's BigInteger-class."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "long", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As suggested in comments, you should really provide a test case to reason about.", "Reasons behind performance differences will change depending on the test being executed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, I'd suggest that the static vs dynamic nature may well have a lot to do with it.", "For non-virtual calls, the JIT-compiled C#/Java is extremely cheap as it can be determined accurately at JIT-time.", "Even virtual calls just involve a single level of redirection.", "When binding becomes dynamic, there's a wider range of things to consider."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I don't know enough details about Python to claim to understand its exact runtime behaviour, which I suspect may vary with version and implementation too.", "There is such a thing as \"python byte code\" which is then executed by a virtual machine - whether this virtual machine actually performs JIT-compilation or not is another matter."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["What you got there is clear example of writing Java in Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self,size):  \n     self.first = None  \n     last = None  \n     for i in range(size):  \n         current = Person(i)  \n         if self.first == None : self.first = current  \n         if last != None :  \n             last.next = current  \n             current.prev = last  \n         last = current  \n     self.first.prev = last  \n     last.next = self.first\n</code>\n</pre>\n", "senID": 1}, {"text": ["A bit more pythonic:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self,size):  \n     chain = [Person(i) for i in range(size)]\n     self.first = chain[0]\n     chain = zip(chain, chain[1:].append(chain[0]))\n     for p,n in chain:\n        p.next = n\n        n.prev = p\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I think it's ultimately that Python doesn't go as far as it can with optimizations.", "Most of the optimization techniques that are common are for static languages.", "There are optimization techniques for dynamic languages, but the modern ones don't seem to make as much use of them as they could.", "Steve Yegge has an excellent blog post on the subject."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "are", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "blog post on the subject", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://steve-yegge.blogspot.com/2008/05/dynamic-languages-strike-back.html"}]}, {"text": ["EDIT:  I just wanted to point out that I'm not necessarily stating this to be critical of Python.", "I prefer simplicity over unnecessary speed any day. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["It doesn't have anything to do with the languages themselves, it's just the fact that java imlementation and runtime system (JVM) are very high quality, and that lots of resources have been invested in stability, scalability and performance improvements over the years."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "imlementation", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "runtime system", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Contrast that to the fact that CPython imlenmentation just recently imlemented eg threaded dispatch in its interpreter which gave it perf boost of up to 20% for certain problems.", "It's not a good thing as it sounds, it is bad because that kind of basic optimization should be there from the day one."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This type of question can't be answered just by qualitative reasoning, you need good benchmarks to back it up.", "Here's one set that compare Python 3 vs C# Mono and find Python to be 3 to 300 times slower.", "The Python vs. Java results are similar.", "(The usual cautions about interpreting benchmarks apply."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python 3 vs C# Mono", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://shootout.alioth.debian.org/u32q/benchmark.php?test=all&lang=python3&lang2=csharp&box=1"}]}, {"text": ["These benchmarks also report the source code size, and Python was significantly more concise than Java and C#."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I think opposite.", "I can do simple program in Python faster than in Java,\nand those Python scripts work really fast."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Of course your question without examples is hard to answer.", "Maybe you have found slow library, bug etc.", "Give us more details please."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I would argue that the ease and simplicity of writing Python code makes it possible to write more complex code; for example, code that takes advantage of multi-core processors.", "Since per-core performance has been mostly stagnant for the past 5-10 years, I don't think it's clear that Python programs (whether they're running on CPython or something else) are slower in the long run."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Since it's interpreted and not compiled.. it should be slower in execution time. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As a table mentioned in Code Complete (second edition) book, page 600, "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Code Complete (second edition)", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["C# equals C++ in execution time (1:1).", "And Python is slower above hundred times than C++ in execution time (>100:1)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "execution time", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "execution time", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["And Java is slower than C++ by one time and a half (1.5:1). "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["These statistics are on average.", "I don't know who made this study, but seems interesting.   "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Python is an interpreted language, And Java or C# is complied language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]