[[{"text": ["I found this implementation of a BitField by David Cramer, which should do what you want.", "Looks very nice."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "BitField", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/disqus/django-bitfield"}]}], [{"text": ["It's kinda tricky, but given that weekdays are not going to change, your further code could be clearer if you add the column with each day's name into your availability table with 0 or 1 indicating availability.", "This may seem a bit redundant, but will be easier to code and maintain in the future."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Second question, how can I convert POST data ([\"1\",\"2\",\"7\"]) into string (1100010)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n week=['0']*7\nfor day in [\"1\",\"2\",\"7\"]:\n    week[int(day) - 1]='1'\nweek=''.join(week)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Another option would be to just store it as comma separated integers.", "Django has a builtin field for that: http://docs.djangoproject.com/en/1.2/ref/models/fields/#commaseparatedintegerfield"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.djangoproject.com/en/1.2/ref/models/fields/#commaseparatedintegerfield", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/1.2/ref/models/fields/#commaseparatedintegerfield"}]}], [{"text": ["One other option is the more-or-less obvious one: define a table of the days of the week, and have a ManyToManyField map one to the other.", "The admin would just work, you can do searches based on dates, and it works on SQLite unlike some of the functions in django-bitfield.", "Searches can be fast, since they're within the database and you don't have to use SQL's LIKE (which ignores indexes if there are wildcards at the start of the string, which would be the case for CommaSeparatedIntegerField or a seven-character string)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "ManyToManyField", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "LIKE", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "CommaSeparatedIntegerField", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Sure, it takes more storage, but how many users do you have, anyway?", "Millions?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["P.S.", "if you have an ordering field in your weekday table, you can also make the database sort by day of week for you with something like queryset.order_by('available__order')."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "queryset.order_by('available__order')", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["1st - good solution, I'm doing mine similarly.", "2nd - you should think of assigning each day power of 2, that way it'll be easy to convert those numbers to binary using bin() and easy to compare you'll just do &amp;."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mon, tue, wed, thu, fri, sat, sun = (pow(2, i) for i in range(7)) \n&gt;&gt;&gt; bin(mon)\n'0b1'\n&gt;&gt;&gt; bin(sun)\n'0b1000000'\n\n# create range:\n&gt;&gt;&gt; x = mon | wed | fri\n&gt;&gt;&gt; bin(x)\n'0b10101'\n\n# check if day is in range:\n&gt;&gt;&gt; x &amp; mon\n1\n&gt;&gt;&gt; x &amp; tue\n0\n</code>\n</pre>\n", "senID": 1}, {"text": ["The problem with bin is that you must add 0's to the beginning to get 7 char long string,\nbut you could also write your own version like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n bin = lambda n:\"\".join([str((n &gt;&gt; y) &amp; 1) for y in range(7-1, -1, -1)])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I'd go for separate boolean columns."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "separate boolean columns", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["It'll be a lot easier for you to then query, say, for users that are available on mondays; or to count the number of users that available through every weekday, or whatever."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]