[[{"text": ["I started here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.devshed.com/c/a/Python/Using-SQLite-in-Python"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.devshed.com/c/a/Python/Using-SQLite-in-Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.devshed.com/c/a/Python/Using-SQLite-in-Python"}]}, {"text": ["It's 5 (short) pages with just the essentials got me going right away."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I highly recommend the use of a good ORM.", "When you can work with Python objects to manage your database rows, life is so much easier."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I am a fan of the ORM in Django.", "But that was already recommended and you said that is too heavyweight."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This leaves me with exactly one ORM to recommend: Autumn.", "Very lightweight, works great with SQLite.", "If your embedded application will be multithreaded, then you absolutely want Autumn; it has extensions to support multithreaded SQLite.", "(Full disclosure: I wrote those extensions and contributed them.", "I wrote them while working for RealNetworks, and my bosses permitted me to donate them, so a public thank-you to RealNetworks."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Autumn", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://autumn-orm.org/"}]}, {"text": ["Autumn is written in pure Python.", "For SQLite, it uses the Python official SQLite module to do the actual SQL stuff.", "The memory footprint of Autumn itself is tiny."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I do not recommend APSW.", "In my humble opinion, it doesn't really do very much to help you; it just provides a way to execute SQL statements, and leaves you to master the SQL way of doing things.", "Also, it supports every single feature of SQLite, even the ones you rarely use, and as a result it actually has a larger memory footprint than Autumn, while not being as easy to use."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["start with Django"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.djangoproject.com/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.djangoproject.com/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/"}]}, {"text": ["ORM is the way to go here.", "You won't regret it.", "The tutorial here http://docs.djangoproject.com/en/dev/intro/tutorial01/ is fairly gentle."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.djangoproject.com/en/dev/intro/tutorial01/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/intro/tutorial01/"}]}, {"text": ["Why Django/ORM ?", "Django will have you up an running in about half an hour, will manage your database connections, data management interfaces, etc.", "Django works SQLLite: you won't need to manage a MySQL/PostGre instance."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT1: You don't need to use the web-app portion of Django for this.", "You can use the db.Model classes to manipulate your data directly.", "Whatever standalone app/script you will come up with, you can just use the Django data-model layer.", "And when you decide you want a web front-end, or atleast would like to edit your data via the admin console - you can post back here and thank me ( or everyone that said use an ORM ) :)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["What you're looking for is SQLAlchemy, which is fast becoming the de facto standard Python data access layer.", "To make your first experiences with SQLAlchemy even easier, check out Elixir, which is a thin ActiveRecord-style wrapper around SQLAlchemy."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "SQLAlchemy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/"}, {"text": "Elixir", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://elixir.ematia.de/trac/wiki"}]}, {"text": ["Update:  Reread the question and saw the bit about not needing a full ORM.", "I'd still suggest going the SQLAlchemy route, just because it gives you a ridiculously easy way to work with databases in Python that you can reuse for any kind of database.", "Time spent working directly with SQLite is wasted once you need to connect to Oracle or something."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Django is perfect for this but the poster is not clear if he needs to actually make a compiled EXE or a web app.", "Django is only for web apps."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I'm not sure where you really get \"heavy\" from.", "Django is grossly smaller in terms of lines of code than any other major web app framework."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Another option to add to the other good suggestions: Elixir.", "It provides a simplified declarative layer on top of SQLAlchemy, so it should be easier to dive into, but it also allows you to call upon the full power of SQLAlchemy if and when you need it."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Elixir", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://elixir.ematia.de/trac/wiki"}, {"text": "SQLAlchemy", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "SQLAlchemy", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["This is an aggregate of answers, in no particular order:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Everybody is recommending an ORM layer.", "Which makes perfect sense, if you really need a database.", "Well, that was sort of requested in the title :-)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["But I'm starting to think that if an in-memory database is sufficient, in this will be used in scripts only, not a web app or even a desktop gui, then option 7 is also perfectly valid, provided no transaction support is needed and \"database\" integrity is not an issue."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["There is something that meets all the stated objectives, and it's a very simple to use Python module: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://yserial.sourceforge.net/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://yserial.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://yserial.sourceforge.net/"}]}, {"text": ["Serialization + persistance :: in a few lines of code, compress and annotate Python objects into SQLite; then later retrieve them chronologically by keywords without any SQL.", "Most useful \"standard\" module for a database to store schema-less data."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Surprisingly, there is not much difference between in :memory: and a persistent solution for most practical purposes."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Re: \"shield me from the actual database\" -- looking at the y_serial example, one cannot even tell that SQLite is behind it all.", "Ayman, if you construct your records as Python dictionaries, you can concentrate on just writing code (not stored procedures ;-)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Hope this is helpful..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]