[[{"text": ["Maybe ConfigParser can help you."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ConfigParser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/configparser.html"}]}], [{"code": "<pre>\n<code>\n d = {}\nwith open('filename') as f:\n    for line in f:\n        key, value = line.split('=')\n        d[key] = value\n</code>\n</pre>\n", "senID": 0}, {"text": ["Edit:\nAs suggested by foret, you could change it to"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for line in f:\n        tokens = line.split('=')\n        d[tokens[0]] = '='.join(tokens[1:])\n</code>\n</pre>\n", "senID": 2}, {"text": ["which would handle the case where equals signs were allowed in the value, but would still fail if the name could have equals signs as well -- for that you would need a true parser."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Or ConfigObj"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ConfigObj", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.voidspace.org.uk/python/configobj.html"}]}], [{"text": ["The oneliner answer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n H = dict(line.strip().split('=') for line in open('filename.txt'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["(optionally use .split() with maxsplit=1 if the values could also contain the \"=\" character)"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": ".split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "maxsplit=1", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["this may be a stupid answer but who know maybe it can help you :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["change the extension of your file to .py, and do necessary change like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["file.py"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n VarName=\"Value\"   # if it's a string\nVarName_2=1\n# and you can also assign a dict a list to a var, how cool is that ?\n</code>\n</pre>\n", "senID": 3}, {"text": ["and put it in your package tree or in sys.path, and now you can call it like this in the script when you want to use it:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import file\n&gt;&gt;&gt; file.VarName\n'Value'\n</code>\n</pre>\n", "senID": 5}, {"text": ["why i'm writing this answer it's because ,what the hell is this file ?", "i never see a conf file like this , no section no nothing ?", "why you want to create a config file like this ?", "it look like a bad config file that should look like the Django settings, and i prefer using a django setting-like config file when ever i can."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Now you can put your -1 in the left :)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["The csv module will let you do this easily enough:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}, {"code": "<pre>\n<code>\n import csv\nH = dict([(row[0], row[1]) for row in csv.reader(open(\"the_file\", \"r\"), delimiter=\"=\" )])\n</code>\n</pre>\n", "senID": 1}]]