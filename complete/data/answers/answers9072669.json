[[{"text": ["In this specific example, the check is to first make sure that 'test' is actually a valid key in the example dict, otherwise you would get a KeyError exception.", "Then the logic proceeds to check  the key and either return it, or a None if the value of example[str] evals to False"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It would be a lot easier if this example simply did:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n str='test'\nexample={'test':'value',}\nreturn example.get(str, None) or None\n</code>\n</pre>\n", "senID": 2}, {"text": ["Update"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Even simpler, since the extra param to get() is not needed:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n return example.get(str) or None\n</code>\n</pre>\n", "senID": 5}, {"text": ["Update 2: Breaking down the truth tests and boolean operations from the OP (based on comments)"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Update 2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n example = {\n    'test' : 'value', \n    'test2': 0, \n    'test3': [],\n}\ntest = lambda k: k in example and example[k] or None\nprint test('test')\n# value\nprint test('test2')\n# None\nprint test('test3')\n# None\n</code>\n</pre>\n", "senID": 7}], [{"text": ["For starters, the behaviour is different for the case where you're looking up a non-existent key (the extra test would prevent a KeyError exception being thrown).  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "KeyError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["However, it goes further than that because example[str] can be false in a boolean context.", "e.g., it could be an empty string."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "example[str]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; str='test'\n&gt;&gt;&gt; example={'test':[],}\n&gt;&gt;&gt; str in example and example[str] or None\n&gt;&gt;&gt; str in example or None\nTrue\n</code>\n</pre>\n", "senID": 2}, {"text": ["So it is not quite redundant.", "str in example checks for the existence of the key, whereas and example[str] is also checking the truthiness of the value.  "], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "str in example", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "and example[str]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Since Python evaluates Booleans lazily, you can safely omit parentheses in simple tests.", "This might make it easier to read:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (str in example and example[str]) or None\n</code>\n</pre>\n", "senID": 1}, {"text": ["In plain English:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["\"Make sure the dictionary example has the key str and that the key also has a non-False value.", "If so, return the value of the key example[str].", "Otherwise return None\""], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "example", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "example[str]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["str in example is a boolean test to see if str is a key in example, while example[str] yields the actual value associated with that key."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "str in example", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "childList": []}, {"text": "example", "childNum": 0, "tag": "code", "childList": []}, {"text": "example[str]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Graceful failure.", "If the key doesn't exist, the lookup 'example[str]' will fail at runtime.", "You'll get a fault, terminate your app and get a traceback.", "By checking for the key first you get the None value back instead and your application will go on on its merry way."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Another, more general approach would be to catch the exception and return None as a result of that. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def testfun():\n    str='test2'\n    example={'test':'value',}\n    try:\n        return example[str]\n    except KeyError:\n        return None\n</code>\n</pre>\n", "senID": 2}], [{"text": ["If the key doesn't exist it will get KeyError exception"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "KeyError exception", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\nstr='test'\nexample={'test':'value',}\n\nif str in example and example[str]:\n    print example[str]\nelse:\n    print False\n</code>\n</pre>\n", "senID": 1}]]