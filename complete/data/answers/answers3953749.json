[[{"text": ["You are giving a too many meanings:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = int(raw_input('Give amount: '))\n</code>\n</pre>\n", "senID": 1}, {"text": ["vs."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = fib()\n</code>\n</pre>\n", "senID": 3}, {"text": ["You won't run into the problem (as often) if you give your variables more descriptive names (3 different uses of the name a in 10 lines of code!", "):"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n amount = int(raw_input('Give amount: '))\n</code>\n</pre>\n", "senID": 5}, {"text": ["and change range(a) to range(amount)."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "range(a)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "range(amount)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Your a is a global name so-to-say."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = int(raw_input('Give amount: '))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Whenever Python sees an a, it thinks you are talking about the above one.", "Calling it something else (elsewhere or here) should help."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["python is a dynamically typed language.", "the type of a variable is determined at run time and it can vary as the execution is in progress.", "Here at first, you have declared a to hold an integer type and later you have assigned a function to it and so its type now became a function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["you are trying to apply 'a' as argument to range() function which expects and int arg but you have in effect provided a function variable as argument."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "a", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "range()", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["the corrected code shoud be"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = int(raw_input('Give amount: '))\n\ndef fib():\n    a, b = 0, 1\n    while 1:\n        yield a\n        a, b = b, a + b\n\nb = fib()\nb.next()\n\nfor i in range(a):\n    print b.next(),\n</code>\n</pre>\n", "senID": 3}, {"text": ["this will work"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I would use this method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = int(raw_input('Give amount: '))\n\ndef fib(n):\n    a, b = 0, 1\n    for _ in xrange(n):\n        yield a\n        a, b = b, a + b\n\nprint list(fib(a))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Also you can try the closed form solution (no guarantees for very large values of n due to rounding/overflow errors):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nroot5 = pow(5, 0.5)\nratio = (1 + root5)/2\n\ndef fib(n):\n    return int((pow(ratio, n) - pow(1 - ratio, n))/root5)\n</pre>\n", "senID": 1}], [{"text": ["Since you are writing a generator, why not use two yields, to save doing the extra shuffle?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import itertools as it\n\nnum_iterations = int(raw_input('How many? '))\ndef fib():\n    a,b = 1,0\n    while True:\n        yield a\n        b = a+b\n        yield b\n        a = a+b\n\nfor x in it.islice(fib(), num_iterations):\n    print x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I've build this a while ago:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = int(raw_input('Give amount: '))\n\nfab = [0, 1, 1]\ndef fab_gen():\n    while True:\n        fab.append(fab[-1] + fab[-2])\n        yield fab[-4]\n\nfg = fab_gen()\nfor i in range(a): print(fg.next())\n</code>\n</pre>\n", "senID": 1}, {"text": ["No that fab will grow over time, so it isn't a perfect solution."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "fab", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Also you can use enumerate infinite generator:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i,f  in enumerate(fib()):\n    print i, f\n    if i&gt;=n: break\n</code>\n</pre>\n", "senID": 1}]]