[[{"text": ["You might be talking about a callable object."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyFunction( object ):\n    def __init__( self ):\n        self.rememberThis= dict()\n    def __call__( self, arg1, arg2 ):\n        # do something\n        rememberThis['a'] = arg1\n        return someValue\n\nmyFunction= MyFunction()\n</code>\n</pre>\n", "senID": 1}, {"text": ["From then on, use myFunction as a simple function.", "You can access the rememberThis dictionary using myFunction.rememberThis."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "rememberThis", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "myFunction.rememberThis", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You could use a static variable:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "static variable", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/279561/what-is-the-python-equivalent-of-static-variables-inside-a-function"}]}, {"code": "<pre>\n<code>\n def foo(k, v):\n  foo.a[k] = v\nfoo.a = {'a': 1, 'b': 2, 'c': 3}\n\nfoo('a', 100)\nfoo('b', 200)\n\nprint foo.a\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If 'a' is being created inside the function.", "It is going out of scope.", "Simply create it outside the function(and before the function is called).", "By doing this the list/hash will not be deleted after the program leaves the function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = {'a':1,'b':2,'c':3}\n\n# call you funciton here\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can 'cheat' using Python's behavior for default arguments.", "Default arguments are only evaluated once; they get reused for every call of the function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def testFunction(persistent_dict={'a': 0}):\n...     persistent_dict['a'] += 1\n...     print persistent_dict['a']\n...\n&gt;&gt;&gt; testFunction()\n1\n&gt;&gt;&gt; testFunction()\n2\n</code>\n</pre>\n", "senID": 1}, {"text": ["This isn't the most elegant solution; if someone calls the function and passes in a parameter it will override the default, which probably isn't what you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you just want a quick and dirty way to get the results, that will work.", "If you're doing something more complicated it might be better to factor it out into a class like S. Lott mentioned."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT: Renamed the dictionary so it wouldn't hide the builtin dict as per the comment below."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Rather than forcing globals on the code base (that can be the decision of the caller) I prefer the idea of keeping the state related to an instance of the function.", "A class is good for this but doesn't communicate well what you are trying to accomplish and can be a bit verbose.", "Taking advantage of closures is, in my opinion, a lot cleaner."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def function_the_world_sees():\n    a = {'a':1,'b':2,'c':3}\n\n    def actual_function(arg0, arg1):\n        a[arg0] = arg1\n        return a\n\n    return actual_function\nstateful_function = function_the_world_sees()\n\nstateful_function(\"b\", 100)    \nstateful_function(\"b\", 200)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The main caution to keep in mind is that when you make assignments in \"actual_function\", they occur within \"actual_function\".", "This means you can't reassign a to a different variable.", "The work arounds I use are to put all of my variables I plan to reassign into either into a single element list per variable or a dictionary."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This question doesn't have an elegant answer, in my opinion.", "The options are callable objects, default values, and attribute hacks.", "Callable objects are the right answer, but they bring in a lot of structure for what would be a single \"static\" declaration in another language.", "Default values are a minor change to the code, but it's kludgy and can be confusing to a new python programmer looking at your code.", "I don't like them because their existence isn't hidden from anyone who might be looking at your API."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I generally go with an attribute hack.", "My preferred method is:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def myfunct():\n    if not hasattr(myfunct, 'state'): myfunct.state = list()\n    # access myfunct.state in the body however you want\n</code>\n</pre>\n", "senID": 2}, {"text": ["This keeps the declaration of the state in the first line of the function where it belongs, as well as keeping myfunct as a function.", "The downside is you do the attribute check every time you call the function.", "This is almost certainly not going to be a bottleneck in most code."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Personally, I like the idea of the global statement.", "It doesn't introduce a global variable but states that a local identifier actually refers to one in the global namespace."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = dict()\nl = list()\ndef foo(bar, baz):\n    global d\n    global l\n    l.append(bar, baz)\n    d[bar] = baz\n</code>\n</pre>\n", "senID": 1}, {"text": ["In python 3.0 there is also a \"nonlocal\" statement."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]