[[{"text": ["This is pretty much the way it's done."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    stuff()\nexcept KeyboardInterrupt:\n    if _debug:\n        sys.exit()\n    logging.exception(\"Normal handling\")\nexcept Exception as e:\n    logging.exception(\"Normal handling\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["There's minimal repetition.", "Not zero, however, but minimal."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If the \"normal handling\" is more than one line of code, you can define a function to avoid repetition of the two lines of code."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Well, really, you probably should keep the handler for KeyboardInterrupt separated.", "Why would you only want to handle keyboard interrupts in debug mode, but swallow them otherwise?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "KeyboardInterrupt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["That said, you can use isinstance to check the type of an object:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "isinstance", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n    stuff()\nexcept Exception as e:\n    if _debug and isinstance(e, KeyboardInterrupt):\n        sys.exit()\n    logger.exception(\"Normal handling\")\n</code>\n</pre>\n", "senID": 2}], [{"text": ["What's wrong with"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    stuff()\nexcept KeyboardInterrupt:\n    if _debug:\n        logging.exception(\"Debug handling\")\n        sys.exit()\n    else:\n        logging.exception(\"Normal handling\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Either use the standard method mentioned in the other answers, or if you really want to test within the except block then you can use isinstance()."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "isinstance()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#isinstance"}]}, {"code": "<pre>\n<code>\n try:\n    stuff()\nexcept Exception as e:\n   if _debug and isinstance(e, KeyboardInterrupt):\n        sys.exit()\n    logging.exception(\"Normal handling\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You should let KeyboardInterrupt bubble all the way up and trap it at the highest level."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if __name__ == '__main__':\n    try:\n        main()\n    except KeyboardInterrupt:\n        sys.exit()\n    except:\n        pass\n\ndef main():\n    try:\n        stuff()\n    except Exception as e:\n        logging.exception(\"Normal handling\")\n        if _debug:\n            raise e\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n try:\n    stuff()\nexcept KeyboardInterrupt:\n    if _debug:\n        sys.exit()\n    logging.exception(\"Normal handling\")\nexcept ValueError:\n    if _debug:\n        sys.exit()\n    logging.exception(\"Value error Normal handling\")\nelse:\n    logging.info(\"One more message without exception\")\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can name specific exceptions in Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    stuff()\nexcept KeyboardInterrupt:\n    sys.exit()\nexcept Exception:\n    normal_handling()\n</code>\n</pre>\n", "senID": 1}]]