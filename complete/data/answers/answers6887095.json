[[{"text": ["How about 3 lines?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fatcows, thincows = {}, {}\nfor name, weight in cows.items():\n    (fatcows if weight &gt; 50 else thincows)[name] = weight\n</code>\n</pre>\n", "senID": 1}, {"text": ["Tested:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; cows = {'bessie':53, 'maud':22, 'annabel': 77, 'myrna':43 }\n&gt;&gt;&gt; fatcows, thincows = {}, {}\n&gt;&gt;&gt; for name, weight in cows.items():\n...     (fatcows if weight &gt; 50 else thincows)[name] = weight\n... \n&gt;&gt;&gt; fatcows\n{'annabel': 77, 'bessie': 53}\n&gt;&gt;&gt; thincows\n{'maud': 22, 'myrna': 43}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["More fun with cows :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random; random.seed(42)\ncows = {n:random.randrange(50,150) for n in 'abcdefghijkl'}\n\nthin = {}\nfor name, weight in cows.iteritems():\n    thin.setdefault(weight &lt; 100, {})[name] = weight\n\n&gt;&gt;&gt; thin[True]\n{'c': 77, 'b': 52, 'd': 72, 'i': 92, 'h': 58, 'k': 71, 'j': 52}\n\n&gt;&gt;&gt; thin[False]\n{'a': 113, 'e': 123, 'l': 100, 'g': 139, 'f': 117}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It can be done with a genex, sorting, and itertools.groupby(), but it will probably not be much more efficient than the brute-force solution."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools.groupby()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def bifurcate(pred, seq):\n  if pred is None:\n    pred = lambda x: x\n  res1 = []\n  res2 = []\n  for i in seq:\n    if pred(i):\n      res1.append(i)\n    else:\n      res2.append(i)\n  return (res2, res1)\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n import itertools\nimport operator\n\ndef bifurcate(pred, seq):\n  if pred is None:\n    pred = lambda x: x\n  return tuple([z[1] for z in y[1]] for y in\n    itertools.groupby(sorted((bool(pred(x)), x) for x in seq),\n    operator.itemgetter(0)))\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Any solution is going to take O(N) time to compute, whether it be through two passes through the list or one pass that does more work per item.", "The simplest way is just to use the tools that are available to you: itertools.ifilter and itertools.ifilterfalse:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "itertools.ifilter", "tag": "a", "pos": 1, "childList": [{"text": "itertools.ifilter", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html#itertools.ifilter"}, {"text": "itertools.ifilter", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/itertools.html#itertools.ifilterfalse", "text": "itertools.ifilterfalse", "childNum": 1, "tag": "a", "childList": [{"text": "itertools.ifilterfalse", "tag": "code"}]}, {"text": "itertools.ifilterfalse", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def bifurcate(predicate, iterable):\n    \"\"\"Returns a tuple of two lists, the first of which contains all of the\n       elements x of `iterable' for which predicate(x) is True, and the second\n       of which contains all of the elements x of `iterable` for which\n       predicate(x) is False.\"\"\"\n    return (itertools.ifilter(predicate, iterable),\n            itertools.ifilterfalse(predicate, iterable))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Pretty simple, without any outside tools:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n my_list = [1,2,3,4]\nlist_a = []\nlist_b = []\n\ndef my_function(num):\n    return num % 2\n\ngenerator = (list_a.append(item) if my_function(item) else list_b.append(item)\\\n        for item in my_list)\nfor _ in generator:\n    pass\n</code>\n</pre>\n", "senID": 1}], [{"text": ["OK, its about cows :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n cows = {'a': 123, 'b': 90, 'c': 123, 'd': 70}\n\nselect = lambda cows, accept: {name: weight for name, weight\n                               in cows.items()\n                               if accept(weight)}\n\nthin = select(cows, lambda x: x &lt; 100)\nfat  = select(cows, lambda x: x &gt; 100)\n</code>\n</pre>\n", "senID": 1}]]