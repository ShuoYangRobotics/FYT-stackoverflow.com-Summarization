[[{"text": ["Just for the record:\nThis is only slightly longer, and closes the file immediately:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import with_statement\n\nwith open(filename, \"r\") as f:\n    data = f.read()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It is true that it will close eventually, but eventually might not be soon enough.", "Especially if you're using this inside a loop, the system might run out of file handles before the GC gets to the file objects."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The code works exactly as you say it does, but it's bad style nevertheless.", "Your code relies on assumptions which may be true now, but won't always be true.", "It's not impossible that your code will be run in a situation where the file being opened and not close does matter.", "Is it really worth that risk just to save 1 or 2 lines of code?", "I don't think so."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "does", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["No, it's perfectly reasonable Python style IMO, as per your reasoning."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Update: There are a lot of comments here about whether file objects get tidied up straight away or not.", "Rather than speculate, I did some digging.", "Here's what I see:\n\nFrom a comment in Python's object.h:"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "hr", "pos": 1, "childList": []}, {"text": "object.h", "tag": "a", "pos": 2, "childList": [{"text": "object.h", "tag": "code"}], "childNum": 1, "href": "http://svn.python.org/view/python/trunk/Include/object.h?revision=72461&view=markup"}, {"text": "object.h", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Looking in Python's fileobject.c:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "fileobject.c", "tag": "a", "pos": 0, "childList": [{"text": "fileobject.c", "tag": "code"}], "childNum": 1, "href": "http://svn.python.org/view/python/trunk/Objects/fileobject.c?view=markup"}, {"text": "fileobject.c", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The function table for file objects points to function file_dealloc.", "This function\ncalls close_the_file, which in turn closes the file.", "So it seems reasonable to state that at the moment, on CPython, when there are no\nmore references to a file object, it's closed without any delay.", "If you think this interpretation is wrong, please post a comment indicating why you feel that way."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "file_dealloc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "close_the_file", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "hr", "pos": 2, "childList": []}]}], [{"text": ["looks fine to me..", "I read files like that often."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Even though it works as expected, I think it fails in two counts:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It really helps being explicit!", "Python encourages explicit style."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Other than that, for a throwaway script, your style makes sense."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Maybe you will benefit from this answer."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "this answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1885868/pythonic-way-to-read-a-set-number-of-lines-from-a-file/1885999#1885999"}]}]]