[[{"text": ["From your question it sounds like a tutorial or an overview of what Makefiles actually do might benefit you."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A good places to start is the GNU Make documentation."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "GNU Make", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.gnu.org/software/make/manual/make.html"}]}, {"text": ["It includes the following overview \"The make utility automatically determines which pieces of a large program need to be recompiled, and issues commands to recompile them."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["And its first three chapters covers:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I use Makefiles for some Python projects, but this is highly dubious...", "I do things like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n SITE_ROOT=/var/www/apache/...\n\nsite_dist:\n     cp -a assets/css build/$(SITE_ROOT)/css\n     cp -a src/public/*.py build/$(SITE_ROOT)\n</code>\n</pre>\n", "senID": 1}, {"text": ["and so on.", "Makefile are nothing but batch execution systems (and fairly complex ones at that).", "You can use your normal Python tools (to generate .pyc and others) the same way you would use GCC."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n PY_COMPILE_TOOL=pycompiler\n\nall: myfile.pyc\n     cp myfile.pyc /usr/share/python/...wherever\nmyfile.pyc: &lt;deps&gt;\n     $(PY_COMPILE_TOOL) myfile.py\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n $ make all\n</code>\n</pre>\n", "senID": 5}, {"text": ["And so on.", "Just treat your operations like any other.", "Your pycompiler might be something simple like:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "pycompiler", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/python\nimport py_compile\npy_compile.compile(file_var)\n</code>\n</pre>\n", "senID": 7}, {"text": ["or some variation on "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n $ python -mcompileall .\n</code>\n</pre>\n", "senID": 9}, {"text": ["It is all the same.", "Makefiles are nothing special, just automated executions and the ability to check if files need updating."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["It's not.", "For example, KDE uses CMake, and Wesnoth uses SCons.", "I would suggest one of these systems instead, they are easier and more powerful than make.", "CMake can generate makefiles.", ":-)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "CMake", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.cmake.org/"}, {"text": "SCons", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.scons.org/"}]}], [{"text": ["A simple Makefile usually consists of a set of targets, its dependencies, and the actions performed by each target:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Makefile", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n all: output.out\n\noutput.out: dependency.o dependency2.o\n    ld -o output.out dependency.o dependency2.o\n\ndependency.o: dependency.c\n    gcc -o dependency.o dependency.c\n\ndependency2.o: dependency2.c\n    gcc -o dependency2.o dependency2.c\n</code>\n</pre>\n", "senID": 1}, {"text": ["The target all (which is the first in the example) and tries to build its dependencies in case they don't exist or are not up to date.", "will be run when no target argument is specified in the make command. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "all", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "make", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["For Python programs, they're usually distributed with a setup.py script which uses distutils in order to build the software.", "distutils has extensive documentation which should be a good starting point."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "setup.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "distutils", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "distutils", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/distutils/", "text": "documentation", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["If you are asking about a portable form of creating Makefiles you can try to look at http://www.cmake.org/cmake/project/about.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.cmake.org/cmake/project/about.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cmake.org/cmake/project/about.html"}]}]]