[[{"text": ["TkInter is usually supplied with Python"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "TkInter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/TkInter"}]}, {"code": "<pre>\n<code>\n # File: hello1.py\n\nfrom Tkinter import *\n\nroot = Tk()\n\nw = Label(root, text=\"Hello, world!\")\nw.pack()\n\nroot.mainloop()\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want something more native looking, you'll have to install something like wxpython"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["EasyGUI is a single file, and provides a simple way to work with Tkinter dialogs, but they're still ugly non-native Tkinter dialogs."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "EasyGUI", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://easygui.sourceforge.net/"}]}, {"code": "<pre>\n<code>\n from easygui import msgbox\nmsgbox('Stuff')\n</code>\n</pre>\n", "senID": 1}, {"src": "http://farm3.static.flickr.com/2627/4052101866%5Fb9af33718d%5Fo.png", "tag": "img", "senID": 2}], [{"text": ["Zenity works under Linux and Windows, and can be called from Python directly:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Zenity", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Zenity"}, {"href": "http://www.placella.com/software/zenity/", "text": "Windows", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import os\nos.system('zenity --info --text=\"Stuff\"')\n</code>\n</pre>\n", "senID": 1}, {"text": ["The return values from question boxes need to be captured for acting on, though, which is more complex, and you have to learn about communicating with subprocesses, etc."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It can also be used with the PyZenity front-end, which makes capturing return values simple:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "PyZenity", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.brianramos.com/docs/PyZenity/"}]}, {"code": "<pre>\n<code>\n from PyZenity import InfoMessage\nInfoMessage('Stuff')\n</code>\n</pre>\n", "senID": 4}, {"text": ["I have tested PyZenity in both Ubuntu and Windows XP, and it works in both."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"senID": 6}, {"text": ["I read that Zenity is GTK+ only, but I tried it in Gnome and KDE and it looks native in both.", "The port to Windows does not look native, though, because it uses the wrong GTK theme?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["There are also other programs like KDialog and Xdialog that might be interfaced to a similar Python frontend that could check and see what executables are available so that it automatically takes care of everything?", "(There's a Ruby frontend for KDialog, too."], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "KDialog", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://techbase.kde.org/Development/Tutorials/Shell%5FScripting%5Fwith%5FKDE%5FDialogs"}, {"text": "Xdialog", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://xdialog.free.fr/"}, {"text": "Ruby frontend for KDialog", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://rubyforge.org/projects/kdialog/"}]}, {"text": ["I don't know if PyZenity works under OS X, either."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["To extend on endolith's tkMessageBox answer with the ugly empty window in the background..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The code below pops up the box without the background window."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import Tkinter, tkMessageBox\nroot = Tkinter.Tk()\nroot.withdraw()\ntkMessageBox.showinfo(\"my dialog title\", \"my dialog message\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["This is lifted directly from a useful comment I found at the bottom of this article.", "Thanks to Jason (the commenter) and effbot.org."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "this article", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://effbot.org/tkinterbook/tkinter-standard-dialogs.htm"}]}], [{"text": ["@ endolith, re: zenity for Windows."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Hi,"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I repackaged \"Zenity  for Windows\" and included the correct GTK-theme file.", "It looks much better now.", ":)\nIt is now available for download: http://www.placella.com/software/zenity/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.placella.com/software/zenity/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.placella.com/software/zenity/"}]}, {"text": ["Screenshot:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"src": "http://www.placella.com/software/zenity/zenity-win32.png", "tag": "img", "senID": 4}, {"text": ["Peace, Rouslan"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Another possibility is the tkMessageBox module, which is apparently built into the standard library and is cross-platform, though this is even more ugly than the rest:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "tkMessageBox module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://epydoc.sourceforge.net/stdlib/tkMessageBox-module.html"}]}, {"code": "<pre>\n<code>\n import tkMessageBox\ntkMessageBox.showinfo('Title','Stuff')\n</code>\n</pre>\n", "senID": 1}, {"src": "http://farm3.static.flickr.com/2611/4059786460%5F65a942e828%5Fo.png", "tag": "img", "senID": 2}], [{"text": ["wxPython is the best Python GUI library (IMO) and uses native widgets."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import wx\napp = wx.PySimpleApp()\ndialog = wx.MessageDialog(None, 'wxPython is awesome!', 'Dialog Box', wx.OK|wx.ICON_INFORMATION)\ndialog.ShowModal()\ndialog.Destroy()\napp.MainLoop()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["pyglet is another alternative, though it may not be the simplest.", "that being said, it's cross-platform and only depends on python, so there's no external dependencies.", "that fact alone can be reason enough to use it over others."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["and all it can handle multimedia pretty easily as well, pretty handy if you want to display an image or video or something. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["the example below is from the documentation..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\nimport pyglet\nwindow = pyglet.window.Window()\nlabel = pyglet.text.Label('Hello, world',\n                      font_name='Times New Roman',\n                      font_size=36,\n                      x=window.width/2, y=window.height/2,\n                      anchor_x='center', anchor_y='center')\n\n@window.event\ndef on_draw():\n    window.clear()\n    label.draw()\n\npyglet.app.run()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This is not possible.", "If you want simple then you have to use Tkinter because that is what is included.", "If Tkinter is not good enough then you will have to choose and package a GUI for each platform separately."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I suggest that you do use Tkinter and wrap the parts that you need in a class that will be even simpler to use."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]