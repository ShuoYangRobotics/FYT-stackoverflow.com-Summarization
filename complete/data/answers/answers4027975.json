[[{"text": ["It sounds like you want arithmetic:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n min_containers = y*z/x\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you have situations that may give a remainder:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n min_full_containers = floor(y*z/x)\nremaining_items = y*z%x\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n def f(X, Y, Z):\n  d, r = divmod(Y * Z, X)\n  return d + bool(r)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n #python\nimport math\n\nint(math.ceil(float(Y) * Z / X))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Ned's answer is correct.", "It is also common to avoid the function call overhead to math.ceil() by doing the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n minContainers = int((y*z+(x-1))/x);\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Python, use // (integer floor division, introduced in Python 2.2) and force it to round up:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "//", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n number_required = y * z\ncontainer_holds = x\nreqd_containers = (number_required + container_holds - 1) // container_holds\n</code>\n</pre>\n", "senID": 1}, {"text": ["or if you require the so-called \"professional programmer\" version instead of the explanatory version:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n n=(y*z+(x-1))//x;\n</code>\n</pre>\n", "senID": 3}, {"text": ["or if you are really afraid of carpal tunnel syndrome, chop the two redundant parentheses and the semicolon:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n n=(y*z+x-1)//x\n</code>\n</pre>\n", "senID": 5}, {"text": ["Note: this solution works on both Python 2 (where10 / 3 -&gt; 3) and Python 3 (where10 / 3 -&gt; 3.3333333333333335) "], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "Note: this solution works on both Python 2 (where10 / 3 -&gt; 3) and Python 3 (where10 / 3 -&gt; 3.3333333333333335)", "childNum": 2, "tag": "strong", "pos": 0, "childList": [{"text": "10 / 3 -&gt; 3", "tag": "code"}, {"text": "10 / 3 -&gt; 3.3333333333333335", "tag": "code"}]}, {"text": "10 / 3 -&gt; 3", "childNum": 0, "tag": "code", "childList": []}, {"text": "10 / 3 -&gt; 3.3333333333333335", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Other \"solutions\" not only use unnecessary function calls but also fail with large numbers:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n # wrong in Python 3; works with Python 2.3 to 2.7\n# int overflow with Pythons up to 2.2\n&gt;&gt;&gt; int((100000000000000000 + 2)/3)\n33333333333333332 # last digit should be 4\n\n# wrong with Python 2.3 onwards; int overflow with earlier versions\n&gt;&gt;&gt; import math\n&gt;&gt;&gt; int(math.ceil(float(100000000000000000) / 3))\n33333333333333332L\n</code>\n</pre>\n", "senID": 8}], [{"text": ["($people * $breadSticksPerPerson) / $holders isn't correct?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EDIT: Sorry, misread your question, posted the correct solution in comments"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]