[[{"text": ["You can do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [i for i in range(5) for _ in range(3)]\n[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\n</code>\n</pre>\n", "senID": 1}, {"text": ["the range(3) part should be replaced with your number of repetitions..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "range(3)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["BTW, you should use generators"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Just to make it clearer, the _ is a variable name for something you don't care about (any name is allowed)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This list comprehension uses nested for loops and are just like that:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in range(5):\n    for j in range(3):\n        #your code here\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n itertools.chain.from_iterable(itertools.repeat(x, 3) for x in range(5))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n from itertools import chain, izip\nlist(chain(*izip(*[xrange(5)]*3)))\n</code>\n</pre>\n", "senID": 0}, {"text": ["Gives"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Leave off the list and you have a generator."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT: or even better (leaves out a function call to izip):"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n list(chain(*([x]*3 for x in xrange(5))))\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import chain, izip, tee\n&gt;&gt;&gt; list(chain.from_iterable(izip(*tee(range(5), 3))))\n[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["A cool iterator using another approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; Counter(range(5) * 3).elements()\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import itertools\n[x for tupl in itertools.izip(*itertools.tee(range(0,5),3)) for x in tupl]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Or:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [x for tupl in zip(range(0,5), range(0,5), range(0,5)) for x in tupl]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I like to Keep It Simple :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sorted(list(range(5)) * 3)\n[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Another way"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import repeat\n[[elem for elem in [i for i in repeat(lists, lim)]] for lists in range(lim)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This actually makes them separate lists, which I think is more useful."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You don't need to make it a generator if you don't need it to be lazy, but you can if you want it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]