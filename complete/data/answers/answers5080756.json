[[{"text": ["I think this is more or less what you're after:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def makeAdjuster(name, attr, lower, upper, step):\n    def doAdjust(par):\n        setattr(Bikedrawing.p, attr, par.get_value())\n        panelhoriz.queue_draw()\n\n    val = getattr(Bikedrawing.p, attr)\n    adjust = gtk.Adjustment(value=val, lower=lower, upper=upper, step_incr=step)\n\n    label = gtk.Label(name)\n    topcolumn1.pack_start(label, False, False)\n\n    scale = gtk.HScale(adjustment=adjust)\n    scale.set_value_pos(gtk.POS_LEFT)\n    scale.connect(\"value-changed\", doAdjust)\n    topcolumn1.pack_start(scale, True, True)\n\nfor adj in (\n    ('Bottom bracket height', 'bottomBracketHeight', 180., 400., 10.),\n    ('Seat tube angle', 'seatTubeAngle', 60., 80., 0.5),\n    ('Seat tube length', 'seatTubeLength', 300., 700., 10.),\n    ('Top tube length', 'topTubeLength', 400., 700., 10.)\n):\n    makeAdjuster(*adj)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If I understand you:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def widgetize(parameter):\n    def handler(par):\n        setattr(BikeDrawing.p, parameter, par.get_value()\n        painelhoriz.queue_draw()\n\n    adjust = gtk.Adjustment(value=getattr(BikeDrawing.p, parameter), lower=300., upper=700., step_incr=10.)\n    stlScale = gtk.HScale(adjustment=adjust)\n    stlScale.set_value_pos(gtk.POS_LEFT)\n    stlScale.connect(\"value-changed\", handler)\n    topcolumn1.pack_start(stlScale, True, True)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You might want to pass some other parameters such as BikeDrawing.p in to widgetize also."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Note that there's no need to customise local names for objects or the names of functions, only the names of attributes matter here.", "For more general code use more general function and object names."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["This higher-order function creates the functions for you.", "But you'll need to make sure variables like painelhoriz and BikeDrawing are either in scope for the definition or pass them manually."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "painelhoriz", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "BikeDrawing", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def widgetize(name, needsLabel = False, labelText = None):\n    def adjust(par):\n        val = par.get_value()\n        setattr(BikeDrawing.p, name, val)\n        painelhoriz.queue_draw()\n        adjustment = gtk.Adjustment(value=val, lower=180., upper=400., step_incr=10.0)\n        scale = gtk.HScale(adjustment=adjustment)\n        scale.set_value_pos(gtk.POS_LEFT)\n        scale.connect(\"value-changed\", adjust)\n        if needsLabel:\n            label = gtk.Label(labelText)\n            topcolumn1.pack_start(Label, False, False)\n        topcolumn1.pack_start(scale, True, True)\n    # add nice name for debugging\n    adjust.__name__ = \"adjust{}\".format(name[0].upper() + name[1:])\n    return adjust\n</code>\n</pre>\n", "senID": 1}, {"text": ["One remark: You seem to mix up generation of widgets with adjustment of attributes and per-frame-drawing.", "As is, the code will generate all the widgets anew every time one changes..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["To answer your question literally \u2014 exec.", "But this should be reserved when other options are not viable, and your code can easily be refactored to be more generic.", "Look into getattr and setattr, i.e.", "instead of BikeDrawing.p.something = foo do setattr(BikeDrawing.p, 'something', foo) \u2014 you can then use a variable for the attribute name, similarly with accessing attributes and getattr.", "It's all about finding patterns (and you have a lot of them \u2014 creating Adjustment/HScale instances, setting BikeDrawing.p), and moving code around."], "childNum": 9, "tag": "p", "senID": 0, "childList": [{"text": "exec", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "getattr", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "setattr", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "BikeDrawing.p.something = foo", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "setattr(BikeDrawing.p, 'something', foo)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "getattr", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Adjustment", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "HScale", "childNum": 0, "tag": "code", "childList": []}, {"text": "BikeDrawing.p", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You may want to use introspection, something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for par in par_list:\n    value=getattr(BikeDrawing.p, par)\n    # ...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I would suggest wrapping it into a class that knows how to manage/draw itself.", "You would still need to either pass in the attribute name to modify (\"bottomBracketHeight\" for example) and use getattr/setattr on BikeDrawing.p (or you could even just store them as instance variables of this new class if no other code touches these values!", "), and each class would get their own HScale and Label to manipulate."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "\"bottomBracketHeight\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "getattr", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "setattr", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "BikeDrawing.p", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "HScale", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "Label", "childNum": 0, "tag": "code", "childList": []}]}]]