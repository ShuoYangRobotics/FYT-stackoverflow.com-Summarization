[[{"text": ["Importing the math module only happens once, and you probably won't get much faster than the math module.", "There is also an older Stackoverflow question regarding Which is faster in Python: x**.5 or math.sqrt(x)?.", "It is not clear which method is faster."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Which is faster in Python: x**.5 or math.sqrt(x)?", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/327002/which-is-faster-in-python-x-5-or-math-sqrtx"}]}, {"text": ["Maybe take a look at NumPy and SciPy, not necessarily for the sqrt but if you're doing some heavy calculations they could be handy."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "NumPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}, {"href": "http://www.scipy.org/", "text": "SciPy", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["As Fabian said, it's hard to be faster than math.sqrt.", "The reason is that it calls the correspond function from the C library, with CPython."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "math.sqrt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["However, you can speed things up by removing the overhead of attribute lookup:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from math import sqrt\n</code>\n</pre>\n", "senID": 2}, {"text": ["Each subsequent call to sqrt will not have to look it up in the math module, which saves execution time:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print sqrt(2)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Here are timing numbers, from the fastest to the slowest (Python 2.6.5, Mac OS X 10.6.3): sqrt is faster than **0.5:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "sqrt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "**0.5", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n lebigot@weinberg ~ % python -m timeit -s 'from math import sqrt; x = 2' 'sqrt(x)'\n1000000 loops, best of 3: 0.207 usec per loop\nlebigot@weinberg ~ % python -m timeit -s 'x = 2' 'x**0.5'\n1000000 loops, best of 3: 0.226 usec per loop\nlebigot@weinberg ~ % python -m timeit -s 'import math; x = 2' 'math.sqrt(x)'\n1000000 loops, best of 3: 0.268 usec per loop\n</code>\n</pre>\n", "senID": 6}, {"text": ["Note that the timing tests calculate the square root of a variable.", "They do not calculate a constant like \"2*0.5\", because \"2*0.5\" is pre-calculated, in CPython:"], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "variable", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "0.5\", because \"2", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "pre", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n import dis\n\ndef f():\n    return 2**0.5\n\nprint dis.dis(f)\n</code>\n</pre>\n", "senID": 8}, {"text": ["prints"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n 2           0 LOAD_CONST               3 (1.4142135623730951)\n            3 RETURN_VALUE\n</code>\n</pre>\n", "senID": 10}, {"text": ["where you see the constant float sqrt(2) = 1.414\u2026"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["If you manipulate arrays of numbers, NumPy's sqrt is the way to go, as mentioned in another answer."], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "sqrt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You could implement Newton's method but, though it's really fast, it's unlikely to be faster than the C version which I assume is implemented in the math module.", "See http://en.wikipedia.org/wiki/Methods_of_computing_square_roots ."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://en.wikipedia.org/wiki/Methods_of_computing_square_roots", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Methods_of_computing_square_roots"}]}], [{"text": ["In some special cases you can trade program size for blistering speed.", "Create a large array and store the pre-calculated result for every square root operation (using the input value as the index).", "It's pretty limited but you won't get anything faster."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(That's how quake did it)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Use the power operator, and raise your numbers to the 1/2 power: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 2**0.5\n1.4142135623730951\n</code>\n</pre>\n", "senID": 1}, {"text": ["As to whether it's faster: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit.timeit(stmt='sqrt(x)', setup='from math import sqrt; x = 2')\n0.7182440785071833\n&gt;&gt;&gt; timeit.timeit(stmt='x**0.5', setup='from math import sqrt; x = 2')\n0.87514279049432275\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I'd think the math library would likely be as fast as anything you could write yourself.", "But if you want to write your own, here's one algorithm.", "I don't know Python, so I'll just write some pseudo-code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n function sqrt(x)\n  lastGuess=x/2\n  loop\n    guess=(lastGuess+x/lastGuess)/2\n    if abs(guess-lastGuess)&lt;.000001 // or whatever threshold you want\n      exit loop\n    lastGuess=guess\n  return guess\n</code>\n</pre>\n", "senID": 1}, {"text": ["and the pseudocode translated to Python:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def sqrt(x):\n    last_guess= x/2.0\n    while True:\n        guess= (last_guess + x/last_guess)/2\n        if abs(guess - last_guess) &lt; .000001: # example threshold\n            return guess\n        last_guess= guess\n</code>\n</pre>\n", "senID": 3}]]