[[{"text": ["I suspect the problem is that you are in fact editing wrong files.", "Subversion should never raise any errors about check sums when you are just modifying your tracked files -- independently of how you are modifying them."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "how", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Maybe you are accidentally editing files in the .svn directory?", "In .svn/text-base, Subversion stores copies of your files using the same name plus the extension .svn-base, make sure that you are not editing those!"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": ".svn", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".svn/text-base", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ".svn-base", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["What do you mean by \"SVN freaks out\"?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Anyway, the way vi/emacs/etc works is as follows:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n f = open(\"/path/to/.file.tmp\", \"w\")\nf.write(out_string)\nf.close()\nos.rename(\"/path/to/.file.tmp\", \"/path/to/file\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["(ok, there's actually an \"fsync\" in there...", "But I don't know off hand how to do that in Python)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The reason it does that copy is to ensure that, if the system dies half way through writing the new file, the old one is still there... And the 'rename' operation is defined as being atomic, so it will either work (you get 100% of the new file) or not work (you get 100% of the old file) -- you'll never be left with a half-file."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Perhaps the fileinput module can make your code simpler/shorter:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "fileinput", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Here's an example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import fileinput\n\nfor line in fileinput.input(\"test.txt\", inplace=1):\n    print \"%d: %s\" % (fileinput.filelineno(), line),\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Freaks out how?", "What you're describing, if it's working, is editing the file \"in place\", at least as much as vi(1) does."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "vi(1)", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["Try 'file = open('path/to/file', 'w+')'.", "This means you are updating an existing file, not writing a new one."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I suspect Ferdinand's answer, that you are recursing into the .svn dir, explains why you are messing up SVN, but note that there is another flaw in the way you are processing files."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Ferdinand's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/626617/file-editing-in-python/626666#626666"}]}, {"text": ["If your program is killed, or your computer crashes at the wrong point (when you are writing out the changed contents), you risk losing both the original and new contents of the file.", "A more robust approach is to perform the following steps:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This way, you won't risk losing data if killed at the wrong point.", "Note that the fileinput module will handle much of this for you.", "It can be given a sequence of files to process, and if you specify inplace=True, will redirect stdout to the appropriate file (keeping a backup).", "You could then structure your code something like:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "fileinput", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/fileinput.html"}]}, {"code": "<pre>\n<code>\n import os\nimport fileinput\n\ndef allfiles(dir, ignore_dirs=set(['.svn'])):\n    \"\"\"Generator yielding all writable filenames below dir.\n    Ignores directories specified \n    \"\"\"\n    for basedir, dirs, files in os.walk(dir):\n        if basedir in ignore_dirs:\n            dirs[:]=[] # Don't recurse\n            continue  # Skip this directory\n\n        for filename in files:\n            filename = os.path.join(basedir, filename)\n            # Check the file is writable\n            if os.access(filename, os.W_OK):\n                yield filename\n\n\nfor line in fileinput.input(allfiles(PATH_TO_PROCESS), inplace=True):\n    line = perform_some_substitution(line)\n    print line.rstrip(\"\\n\") # Print adds a newline, but line already has one\n</code>\n</pre>\n", "senID": 3}]]