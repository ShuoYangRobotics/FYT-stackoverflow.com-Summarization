[[{"text": ["== takes precedence over in, so you're actually testing word == True."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "==", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "in", "childNum": 0, "tag": "code", "childList": []}, {"text": "word == True", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; w = 'ab c'\n&gt;&gt;&gt; ' ' in w == True\n1: False\n&gt;&gt;&gt; (' ' in w) == True\n2: True\n</code>\n</pre>\n", "senID": 1}, {"text": ["But you don't need == True at all.", "if requires [something that evalutes to True or False] and ' ' in word will evalute to true or false.", "So, if ' ' in word: ... is just fine."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "== True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "' ' in word", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "if ' ' in word: ...", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Write if \" \" in word: instead of if \" \" in word == True:."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "if \" \" in word:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if \" \" in word == True:", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Explanation:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "In Python, for example ", "tag": "none", "senID": 2}, {"text": "The same holds for any chain of comparison operators, which include ", "tag": "none", "senID": 3}, {"text": "Therefore ", "tag": "none", "senID": 4}]}], [{"code": "<pre>\n<code>\n word = ' '\nwhile True:\n    if ' ' in word:\n        word = raw_input(\"Please enter a single word: \")\n    else:\n        print \"Thanks\"\n        break\n</code>\n</pre>\n", "senID": 0}, {"text": ["This is more idiomatic python - comparison against True or False is not necessary - just use the value returned by the expression ' ' in word. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "' ' in word", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Also, you don't need to use pastebin for such a small snippet of code - just copy the code into your post and use the little 1s and 0s button to make your code look like code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can say word.strip(\" \") to remove any leading/trailing spaces from the string - you should do that before your if statement.", "That way if someone enters input such as \" test \" your program will still work."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "word.strip(\" \")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "\" test \"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["That said, if \" \" in word: will determine if a string contains any spaces.", "If that does not working, can you please provide more information?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if \" \" in word:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["There are a lot of ways to do that :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n t = s.split(\" \")\nif len(t) &gt; 1:\n  print \"several tokens\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["To be sure it matches every kind of space, you can use re module : "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import re\nm = re.match(\"\\s\", your_string, re.M)\nif m:\n  print \"several words\"\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Use this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n word = raw_input(\"Please enter a single word : \")\nwhile True:\n    if \" \" in word:\n        word = raw_input(\"Please enter a single word : \")\n    else:\n        print \"Thanks\"\n        break\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can try this, and if it will find any space it will return the position where the first space is."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if mystring.find(' ') != -1:\n    print True\nelse:\n    print False\n</code>\n</pre>\n", "senID": 1}]]