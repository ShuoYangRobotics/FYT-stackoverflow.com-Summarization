[[{"text": ["__contains__ is the magic method that checks if something is in a sequence:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__contains__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class everything(object):\n    def __contains__(self, _):\n        return True           \n\nfor x in (1,2,3):\n    print x in everything()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The better syntax would be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [x for x in lst if x is None]\n[x for x in lst if x is not None]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What do you mean by"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Just do"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [x for x in list]\n</code>\n</pre>\n", "senID": 2}, {"text": ["and every item in list is matched."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You could change your program to accept a filter object, instead of a list. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The abstract base filter would have a matches method, that returns true if x *matches\"."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "matches", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Your general case filters would be constructed with a list argument, and would filter on membership of the list - the matches function would search the list and return true if the argument was in the list."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "matches", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "true", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You could also have two special subclasses of the filter object : none and all."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["These would have special match functions which either always return true (all) or false (none)."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "true", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "false", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You don't need an if, you can just say"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [x for x in list]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["To match everything, you don't need if statement"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [x for x in list1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["or If you really like to do"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [x for x in list1 if x in [x]]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Answering your revised question: the list that \"matches\" all possible values is effectively of infinite length.", "So you can't do what you want to do without an if test.", "I suggest that your arg should be either a list or one of two values representing the \"all\" and \"none\" cases:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n FILTER_NONE = object() # or []\nFILTER_ALL = object()\n\ndef filter_func(alist, filter_list):\n    if filter_list is FILTER_ALL:\n        return []\n    elif filter_list is FILTER_NONE:\n        return alist\n        # or maybe alist[:] # copy the list\n    return [x for x in alist if x not in filter_list]\n</code>\n</pre>\n", "senID": 1}, {"text": ["If filter_list is large, you may wish the replace the last line by:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n filter_set = set(filter_list)\n    return [x for x in alist if x not in filter_set]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Alternatively, don't bother; just document that filter_list (renamed as filter_collection) can be anything that supports  __contains__() and remind readers that sets will be faster than lists."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "__contains__()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]