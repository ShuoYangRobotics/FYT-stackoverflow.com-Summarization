[[{"code": "<pre>\n<code>\n words = text.split()\n</code>\n</pre>\n", "senID": 0}, {"text": ["this is your list"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["text.split() should be enough to store each word in a list.", "words is already a list of the words from the sentence, so there is no need for the loop.", "Second, it might be a typo, but\n you have your loop a little messed up.", "If you really did want to use append, it would be "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["words.append(word)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "words.append(word)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["not "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["word.append(words)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "word.append(words)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["string.split() returns a list:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "string.split()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#string.split"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; line=\"a sentence with a few words\"\n&gt;&gt;&gt; line.split()\n['a', 'sentence', 'with', 'a', 'few', 'words']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The str().split() method does this, it takes a string, splits it into a list:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "str().split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; the_string = \"this is a sentence\"\n&gt;&gt;&gt; words = the_string.split(\" \")\n&gt;&gt;&gt; print(words)\n['this', 'is', 'a', 'sentence']\n&gt;&gt;&gt; type(words)\n&lt;type 'list'&gt; # or &lt;class 'list'&gt; in Python 3.0\n</code>\n</pre>\n", "senID": 1}, {"text": ["The problem you're having is because of a typo, you wrote print(words) instead of print(word):"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "print(words)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print(word)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Renaming the word variable to current_word, this is what you had:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "word", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "current_word", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def split_line(text):\n    words = text.split()\n    for current_word in words:\n        print(words)\n</code>\n</pre>\n", "senID": 4}, {"text": ["..when you should have done:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def split_line(text):\n    words = text.split()\n    for current_word in words:\n        print(current_word)\n</code>\n</pre>\n", "senID": 6}, {"text": ["If for some reason you want to manually construct a list in the for loop, you would use the list append() method, perhaps because you want to lower-case all words (for example):"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "append()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n my_list = [] # make empty list\nfor current_word in words:\n    my_list.append(current_word.lower())\n</code>\n</pre>\n", "senID": 8}, {"text": ["Or more a bit neater, using a list-comprehension:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "list-comprehension", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}, {"code": "<pre>\n<code>\n my_list = [current_word.lower() for current_word in words]\n</code>\n</pre>\n", "senID": 10}], [{"text": ["Depending on what you plan to do with your sentence-as-a-list, you may want to look at the Natural Language Took Kit.", "It deals heavily with text processing and evaluation.", "You can also use it to solve your problem:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Natural Language Took Kit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.nltk.org/"}]}, {"code": "<pre>\n<code>\n import nltk\nwords = nltk.word_tokenize(raw_sentence)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This has the added benefit of splitting out punctuation."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import nltk\n&gt;&gt;&gt; s = \"The fox's foot grazed the sleeping dog, waking it.\"\n&gt;&gt;&gt; words = nltk.word_tokenize(s)\n&gt;&gt;&gt; words\n['The', 'fox', \"'s\", 'foot', 'grazed', 'the', 'sleeping', 'dog', ',', \n'waking', 'it', '.']\n</code>\n</pre>\n", "senID": 4}, {"text": ["This allows you to filter out any punctuation you don't want and use only words.  "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Please note that the other solutions using string.split() are better if you don't plan on doing any complex manipulation of the sentance."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "string.split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["i think u r confused because of a typo.", "replace print(words) with print(word) inside your loop to have every word printed on a different line"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}]]