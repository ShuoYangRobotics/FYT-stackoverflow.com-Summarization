[[{"text": ["One thing I've done in similar situations is this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n coupon_types = (self.months, self.dollars, self.lifetime,)\n\ntrue_count =  sum([1 for ct in coupon_types if ct])\nif true_count &gt; 1:\n    raise ValueError(\"Coupon can be valid for only one of: months, lifetime, or dollars\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's now much easier to add new coupon types to check for in the future!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n if (self.months &amp;&amp; (self.dollars || self.lifetime))  || (self.dollars &amp;&amp; (self.months || self.lifetime)) || (self.lifetime &amp;&amp; (self.dollars || self.months))\n    raise ValueError(\"Coupon can be valid for only one of: months, lifetime, or dollars\")\n</code>\n</pre>\n", "senID": 0}, {"text": ["Edit:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I did a quick circuit mimization using a Karnaugh map (http://en.wikipedia.org/wiki/Karnaugh_map).", "It ends up this is the smallest possible function with boolean logic:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if((self.months &amp;&amp; self.dollars) || (self.dollars &amp;&amp; self.lifetime) || (self.lifetime &amp;&amp; self.months))\n    raise ValueError(\"Coupon can be valid for only one of: months, lifetime, or dollars\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["Logically both my statements are equivelant but the second one is technically faster / more efficient."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Edit #2: If anyone is interested here is the K-Map"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Edit #2", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n A | B | C | f(A, B, C)\n----------------------\n0 | 0 | 0 |     0\n----------------------\n0 | 0 | 1 |     0\n----------------------\n0 | 1 | 0 |     0\n----------------------\n0 | 1 | 1 |     1\n----------------------\n1 | 0 | 0 |     0\n----------------------\n1 | 0 | 1 |     1\n----------------------\n1 | 1 | 0 |     1\n----------------------\n1 | 1 | 1 |     1\n</code>\n</pre>\n", "senID": 6}, {"text": ["Which Reduces to:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n C\\AB\n     -----------------\n     | 0 | 0 | 1 | 0 |     \n     -----------------      OR      AB + BC + AC\n     | 0 | 1 | 1 | 1 |\n     -----------------\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Your code looks fine.", "Here's why:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1.", ") You wrote it, and you're the one describing the logic.", "You can play all sort of syntactical tricks to cut down the lines of code (true_count += 1 if self.months else 0, huge if statement, etc.", "), but I think the way you have it is perfect because it's what you first thought of when trying to describe the logic."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Leave the cute code for the programming challenges, this is the real world."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["2.", ") If you ever decide that you need to add another type of coupon value type, you know exactly what you need to do: add another if statement.", "In one complex if statement, you'd end up with a harder task to do this."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Keep the quantity in a single field, and have the type be a separate field that uses choices."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "choices", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I don't know if this is better for you, but doing it this way would work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if (self.months &amp;&amp; self.dollars) || (self.months &amp;&amp; self.lifetime) || (self.dollars &amp;&amp; self.lifetime):\n   raise ValueError(\"Coupon can be valid for only one of: months, lifetime, or dollars\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could also use a list comp to filter false values:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if len([x for x in [self.months, self.dollars, self.lifetime] if x]) &gt; 1:\n    raise ValueError()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or building off MRAB's answer:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "MRAB's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/6687557/python-if-more-than-one-of-three-things-is-true-return-false/6687611#6687611"}]}, {"code": "<pre>\n<code>\n if sum(map(bool, [self.months, self.dollars, self.lifetime])) &gt; 1:\n    raise ValueErrro()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I think spreading this over a few lines is fine - this makes it easier to maintain if there were more attributes to test in the future.", "Using len or sum feels a bit too obfuscated"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "len", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "sum", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n # Ensure that only one of these values is set\ntrue_count = 0\ntrue_count += bool(self.months)\ntrue_count += bool(self.dollars)\ntrue_count += bool(self.lifetime)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you have Python2.7 or newer"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import Counter\nitems_to_test = (self.months, self.dollars, self.lifetime)\ntrue_count = Counter(map(bool, items_to_test))[True]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Even better solution than before, with combinations, any, and all.", "Assuming you have all the attributes you want to test in a sequence called attributes:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "combinations", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "any", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "all", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "attributes", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from itertools import combinations\nany(map(all, combinations(attributes, 2)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["In english, it reads"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This solution works for an arbitrary number of attributes, and can be modified to test for an arbitrary number of them being true."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Although admittedly it's very inefficient, I'd say it's pretty cute and readable."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["How about"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if len(filter([self.months, self.dollars, self.lifetime])) &gt; 1:\n...\n</code>\n</pre>\n", "senID": 1}, {"text": ["I find it just as readable as a list comprehension with an if clause, and more concise."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["bool is a subclass of int because Python originally lacked bool, using int for Boolean, so:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "bool", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}, {"text": "bool", "childNum": 0, "tag": "code", "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n if self.months + self.dollars + self.lifetime &gt; 1:\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["This works because False == 0 and True == 1 are both true."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "False == 0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True == 1", "childNum": 0, "tag": "code", "childList": []}]}]]