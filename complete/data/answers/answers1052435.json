[[{"text": ["Make him read"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Beginner's Guide to Python"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Beginner's Guide to Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/current/modindex.html"}]}, {"text": ["Python for Java Programmers"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Python for Java Programmers", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.computersci.org/"}]}, {"text": ["Consider reading the accepted answer to this question to point these things out to him"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Java -> Python list some features java doesn't have"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Java -> Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/49824/java-python/49953#49953"}]}, {"text": ["Two articles discussing the general different approaches"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Python is Not Java "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Python is Not Java", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dirtsimple.org/2004/12/python-is-not-java.html"}]}, {"text": ["Java is Not Python, either"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Java is Not Python, either", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dirtsimple.org/2004/12/java-is-not-python-either.html"}]}, {"text": ["A partial side by side comparison of java and python code"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Python/Java A Side-by-Side"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Python/Java A Side-by-Side", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ferg.org/projects/python%5Fjava%5Fside-by-side.html"}]}, {"text": ["Give him pointers how/where to find documentation similar to the Java JDK API"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["The Python Language Reference"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "The Python Language Reference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/current/reference/index.html"}]}, {"text": ["The Python Standard Library"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "The Python Standard Library", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/current/lib/lib.html"}]}, {"text": ["Global Module Index"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "Global Module Index", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/current/modindex.html"}]}], [{"text": ["I would say that one problem when moving from any language in which you are comfortable is the lost feeling of suddenly not knowing how anything works!"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "comfortable", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "not knowing how anything works!", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["I would advise to fill in the background for them first in terms of the following:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "fill in the background", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["I think that the language differences (like of getting used to lambdas) will be easy enough and take a few weeks at the developer's own pace but not understanding the above points will slow down the familiarization process."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "lambdas", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["For students coming from pure Java background and want to conduct their thesis involving some Python-based software I have found the best way is to just let them start writing code after having some first tutorials read. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then from time to time I screen their code and suggest code fragments that smell too Java-ish to migrate to a more Pythonic style."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Most often this is"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "for-loops that can be changed to list comprehensions", "tag": "none", "senID": 3}, {"text": "over-use of classes, where 1) modules, tuples or dictionaries work just fine or 2) interfaces are not needed explicitly", "tag": "none", "senID": 4}, {"text": "too complex conditions used in if-statements (", "tag": "none", "senID": 5}, {"text": "reinvented functionality, which could be easily imported from ", "tag": "none", "senID": 6}, {"text": "glue code for experiments in bash that can now be implemented much more reader-friendly in Python itself", "tag": "none", "senID": 7}]}], [{"text": ["I'm in a somewhat similar position to you, as I know Java fairly well but I'm just starting to use Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The Python tutorial is a pretty good place to start."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/index.html"}]}, {"text": ["The Python Style Guide tells you everything you need to know about what your code should look like (and this matters in Python - whitespace is important)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Python Style Guide", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"text": ["And remember that if and for always have a : after them :-)"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}, {"text": ":", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I've found dive into python to be the best remedy against the culture shock, that is sure to happen when moving from another lesser (just kidding, of course) language to python.", "It has almost no \"Hello world\" programs, but instead it shows you python ways of, say, working with xml, writing unit tests and so on.", "It was extremely useful to me."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dive into python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/"}]}], [{"text": ["What about http://python.computersci.org/?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://python.computersci.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.computersci.org/"}]}, {"text": ["I think that with a guide like that, plus mentoring on Python idioms (list comps, and so on) while converting some Java code to Python as an exercise would be enough"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Seconding oxbow_lakes, how do project teams document their stuff ?", "Although good doc is largely language-independent, can people comment on doc standards, tools,\nbrowsers ?", "Examples of good Python / good Java doc would be useful."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "document", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}]}], [{"text": ["Python is a language that can be described as: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Nearly everything in python follows the same simple standards.", "Everything is accessible, changeable, and tweakable.", "There are very few language level elements."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Take for example, the len(data) builtin function.", "len(data) works by simply checking for a data.__len__() method, and then calls it and returns the value.", "That way, len() can work on any object that implements a __len__() method."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "len(data)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "data.__len__()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "len()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "__len__()", "childNum": 0, "tag": "code", "childList": []}]}, {"tag": "hr", "senID": 3}, {"text": ["Start by learning about the types and basic syntax:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Then move on to learning about how python works:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Once you have an understanding of how to fit pieces together, go back and cover some of the more advanced language features:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["And once you have a comfort level with these items (with a focus on what makes them pythonic), look at more specific items:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "hr", "senID": 8}, {"text": ["And never forget The Zen of Python (by Tim Peters)"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "The Zen of Python", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code>\n</pre>\n", "senID": 10}], [{"text": ["There's a lot of good advice here already, but I should call attention to the more interactive nature of Python versus Java.", "Python unlike Java offers you a classic \"Read-Eval-Print-Loop\" (REPL) which allows you to experiment with the language quickly.", "Rather than guess as to how a particular statement would perform in real-life, the answer can be had by typing the expression into the interpreter and seeing the result right away.", "This is one reason I recommend Python to beginning programmers, you get more immediate feedback than the traditional edit-compile-run cycle of other languages."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In particular I use ipython for much of my interacting with Python.", "Among other things, it allows you to type '?", "' after any identifier to get some help on an identifier, which gives you more information than the standard help() function, and is less keystrokes."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "ipython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/moin/"}]}, {"text": ["Also, to turn learning Python into a game, I personally learned a lot of my Python by solving puzzles at the PythonChallenge .", "(Disclaimer: I am not affiliated with PythonChallenge).", "Admittedly, solving the challenges requires more than just Python knowledge (small hint: do \"view source\" a lot), but the desire to solve a puzzle will give you motivation to learn new bits of Python.", "It did for me at least.", "Best of luck."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "PythonChallenge", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonchallenge.com/"}]}]]