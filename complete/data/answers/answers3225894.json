[[{"text": ["Some remarks:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["a) I find this sort of thing clutters up the script and I don't see the advantage of using path_exists() instead of os.path.exists().", "But hey."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "path_exists()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.path.exists()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def path_exist(path):\n    return os.path.exists(path)\n\ndef list_dir(path):\n    return os.listdir(path)\n\ndef is_dir(path):\n    return os.path.isdir(path)\n</code>\n</pre>\n", "senID": 2}, {"text": ["b) More seriously, I'd suggest you use os.path.join() to connect the pat components instead of simple concatenation. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "os.path.join()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["c) I don't think i is a good variable name for a directory listing element.", "Why not: "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n for element in list_dir(path):\n  newpath = os.path.join(x86_64, element)\n</code>\n</pre>\n", "senID": 5}, {"text": ["EDIT: Even better -- it slipped out of my mind -- Triptych is entirely correct that you should be using os.walk() in the first place."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "os.walk()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["d) My personal preference would be to use try...except blocks to check whether you can delete a directory -- \"asking for forgiveness, instead of permission\".", "You're practicing \"look before you leap\"."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "try...except", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["e) For general style advice, don't forget to put PEP8 under your pillow! "], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "PEP8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"code": "<pre>\n<code>\n import os\n\ndef kill_empty_dirs(directory):\n   \"\"\" Deletes directories with no files and no subdirectories \"\"\"\n\n   for dir, subdirs, files in os.walk(directory):\n      if not subdirs and not files:\n         print 'DELETING: ', dir\n</code>\n</pre>\n", "senID": 0}, {"text": ["Obviously, replace my print line with a real deletion after testing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I would try to avoid repetition of the for i in list_dir(something) doing something like:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "for i in list_dir(something)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if path_exist(x86_64):\n    path = x86_64\nelse if path_exist(x86):\npath = x86\nelse:\nexit(1)\n\nfor i in list_dir(path):\n  i = x86_64 + i\n  if is_dir(i):\nif not list_dir(i):\n  os.rmdir(i)\n  print 'Removed', i\n</code>\n</pre>\n", "senID": 1}], [], [{"text": ["A less radical refactoring than Triptych's"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\n\ndef main():\n    x86_64 = 'C:\\\\Program Files\\\\'\n    x86 =  'C:\\\\Program Files (x86)\\\\'\n\n    for base in x86_64, x86:\n        if not os.path.exists(base):\n            continue\n        for diritem in os.listdir(base):\n            path = os.path.join(base, diritem) \n            if os.path.isdir(path) and not os.listdir(path):\n                os.rmdir(path)\n                print 'Removed', path\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can replace the first three subroutines with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from os.path import exists as path_exist\nfrom os import listdir as list_dir\nfrom os.path import isdir as is_dir\n</code>\n</pre>\n", "senID": 1}, {"text": ["of course, none of those are needed if you follow Triptych's suggestion and use os.walk(), which is clearly a better solution."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]