[[{"text": ["Bash supports bitwise operators..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "operators", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://tldp.org/LDP/abs/html/ops.html"}]}, {"code": "<pre>\n<code>\n $ let \"x = 5&gt;&gt;1\"\n$ echo $x\n2\n$ let \"x = 5 &amp; 4\"\n$ echo $x\n4\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A fatal message will be issued iff the status is odd, iff it has a 1 in the least significant digit."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["An error message will be issued iff the status has a 1 in the next most significant digit."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So you want to check whether the last two digits are both 1; in other words, to check whether the bitwise and of your status code with 0b11 is three."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "0b11", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The return code of the last executed command in bash is available as $?."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "$?", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [/tmp] % touch bar\n[/tmp] % ls /tmp/bar \n/tmp/bar\n[/tmp] % echo $?\n0\n[/tmp] % ls /tmp/baaz\nls: /tmp/baaz: No such file or directory\n[/tmp] % echo $?\n1\n[/tmp] %\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you were to call an external command from say python's subprocess module, you could get the return code of the external command from the Popen object once the subprocess has exited."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "subprocess", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Got it!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [ $(($NUMBER &amp; 3)) -ne 0 ] &amp;&amp; echo Fatal error or error was issued\n</code>\n</pre>\n", "senID": 1}, {"text": ["Thanks!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["in Bash you can use double parenthesis:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #fatal error\nreturncode=7\n(( res = errorcode &amp; 3 ))\n[[ $res != 0 ]] &amp;&amp; echo \"Fatal Error\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Using (probably sub-optimally) the bash arithmetic stuff:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for status in 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\ndo\n    if [ $status = 0 ]\n    then echo $status: it worked perfectly\n    elsif [ $(( $status &amp; 3 )) != 0 ]\n    then echo $status: a fatal or error message was sent\n    else echo $status: it sort of worked mostly\n    fi\ndone\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 0: it worked perfectly\n1: a fatal or error message was sent\n2: a fatal or error message was sent\n3: a fatal or error message was sent\n4: it sort of worked mostly\n5: a fatal or error message was sent\n6: a fatal or error message was sent\n7: a fatal or error message was sent\n8: it sort of worked mostly\n9: a fatal or error message was sent\n10: a fatal or error message was sent\n11: a fatal or error message was sent\n12: it sort of worked mostly\n13: a fatal or error message was sent\n14: a fatal or error message was sent\n15: a fatal or error message was sent\n16: it sort of worked mostly\n</code>\n</pre>\n", "senID": 3}, {"text": ["I strongly suspect that the scripting (testing) can be made tighter or cleaner (specifically in the elif clause), but this seems to work (and I need to get to work)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "elif", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n pylint ...\nstatus=$?     # Catch exit status before it changes\nif [ $status = 0 ]\nthen echo $status: it worked perfectly\nelsif [ $(( $status &amp; 3 )) != 0 ]\nthen echo $status: a fatal or error message was sent\nelse echo $status: it sort of worked mostly\nfi\n</code>\n</pre>\n", "senID": 5}]]