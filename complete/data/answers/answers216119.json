[[{"text": ["I know it's not a helpful answer (though this question has been already answered), but in any real code, please don't do that.", "Python cannot optimize tail-calls, has slow function calls and has a fixed recursion depth, so there are at least 3 reasons why to do it iteratively instead."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Append the first element of the list to a reversed sublist:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mylist = [1, 2, 3, 4, 5]\nbackwards = lambda l: (backwards (l[1:]) + l[:1] if l else []) \nprint backwards (mylist)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A bit more explicit:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def rev(l):\n    if len(l) == 0: return []\n    return [l[-1]] + rev(l[:-1])\n</code>\n</pre>\n", "senID": 1}, {"tag": "hr", "senID": 2}, {"text": ["This turns into:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def rev(l):\n    if not l: return []\n    return [l[-1]] + rev(l[:-1])\n</code>\n</pre>\n", "senID": 4}, {"text": ["Which turns into:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def rev(l):\n    return [l[-1]] + rev(l[:-1]) if l else []\n</code>\n</pre>\n", "senID": 6}, {"text": ["Which is the same as another answer."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "hr", "senID": 8}, {"text": ["Tail recursive / CPS style (which python doesn't optimize for anyway):"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n def rev(l, k):\n    if len(l) == 0: return k([])\n    def b(res):\n        return k([l[-1]] + res)\n    return rev(l[:-1],b)\n\n\n&gt;&gt;&gt; rev([1, 2, 3, 4, 5], lambda x: x)\n[5, 4, 3, 2, 1]\n</code>\n</pre>\n", "senID": 10}], [{"text": ["The trick is to join after recursing:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "after", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\ndef backwards(l):\n  if not l:\n    return\n  x, y = l[0], l[1:]\n  return backwards(y) + [x]\n</pre>\n", "senID": 1}], [{"text": ["Take the first element, reverse the rest of the list recursively, and append the first element at the end of the list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This one reverses in place.", "(Of course an iterative version would be better, but it has to be recursive, hasn't it?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def reverse(l, first=0, last=-1):\n    if first >= len(l)/2: return\n    l[first], l[last] = l[last], l[first]\n    reverse(l, first+1, last-1)\n\nmylist = [1,2,3,4,5]\nprint mylist\nreverse(mylist)\nprint mylist\n</code>\n</pre>\n", "senID": 1}], [{"text": ["def reverse(q):\n    if len(q) != 0:\n        temp = q.pop(0)\n        reverse(q)\n        q.append(temp)\n    return q"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]