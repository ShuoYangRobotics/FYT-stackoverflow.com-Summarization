[[{"code": "<pre>\n<code>\n python -c \"for x in range(1,10): print x\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["Just add the colon."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To address the question in the comments:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n python -c \"for x in range(1,10): x==1 and __import__('calendar').prcal(2009); print x;\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["As you can see it's pretty gross.", "We can't import before the loop.", "To get around this we check if x is at the first iteration in the loop, if so we do the import."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["More examples here."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2003-April/199822.html"}]}], [{"text": ["Not a python script, but might help:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for /L %i in (1, 1, 10) do echo %i\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n python -c \"for x in range(1,10): print x\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["Remember the \":\" !"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Don't you just want this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["python -c \u201cfor x in range(1,10): print x\u201d"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Here's a solution that doesn't require putting a statement after the colon, which is not considered very highly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n python2 -c \"print '\\n'.join([str(x) for x in range(1,10)])\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["What's more pythonic than a list comprehension!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n python -c 'print \"\\n\".join(map(str, range(1,10)))'\n</code>\n</pre>\n", "senID": 0}, {"text": ["but what's wrong in a \"real\" python script?", "(you know, a foo.py launched via \"python foo.py\")\nIf you really like one-liners, I suggest perl :)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]