[[{"text": ["maybe something like this (2.6+)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from fractions import Fraction\nfloat(sum(Fraction(s) for s in '1 2/3'.split()))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Though you should stear clear of eval completely.", "Perhaps some more refined version of:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n num,den = s.split( '/' )\nwh, num = num.split()\nresult = wh + (float(num)/float(den))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Sorry, meant to be num.split not s.split, and casts.", "Edited."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["That might be a dirty workaround, but you could convert spaces to a + sign to solve the 3rd case (or to a - if your fraction is negative)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "+", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "-", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Depending on what syntax you want to support for your fractions, eval('+'.join(s.split())) (with true division in place -- i.e., Python 3 or from __future__ import division in Python 2 -- might work.", "It would cover all the cases you mention, in particular."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "eval('+'.join(s.split()))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "from __future__ import division", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["This implementation avoids using eval and works on pre-2.6 versions of Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # matches a string consting of an integer followed by either a divisor\n# (\"/\" and an integer) or some spaces and a simple fraction (two integers\n# separated by \"/\")\nFRACTION_REGEX = re.compile(r'^(\\d+)(?:(?:\\s+(\\d+))?/(\\d+))?$')\n\ndef parse(x):\n  i, n, d = FRACTION_REGEX.match(x).groups()\n  if d is None: return i  # if d is None, then n is also None\n  if n is None: i, n = 0, i\n  return float(i) + float(n) / float(d)\n</code>\n</pre>\n", "senID": 1}, {"text": ["To test:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for x in ['1', '1/2', '1 2/3']: print parse(x)\n... \n1\n0.5\n1.66666666667\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s=\"1/2\"\n&gt;&gt;&gt; eval('/'.join(map(str,map(float,s.split(\"/\")))))\n0.5\n\n&gt;&gt;&gt; s=\"3/5\"\n&gt;&gt;&gt; eval('/'.join(map(str,map(float,s.split(\"/\")))))\n0.59999999999999998\n</code>\n</pre>\n", "senID": 0}]]