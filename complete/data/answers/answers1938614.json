[[{"text": ["Classic Example: You want to store point value as tuple of  (x, y) "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n salaries = {}\nsalaries[('John', 'Smith')] = 10000.0\nsalaries[('John', 'Parker')] = 99999.0\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT 1\nOf course you can do salaries['John Smith'] = whatever, but then you'll have to do extra work to separate the key into first and last names.", "What about pointColor[(x, y, z)] = \"red\", here the benefit of tuple key is more prominent. "], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "EDIT 1", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "salaries['John Smith'] = whatever", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "pointColor[(x, y, z)] = \"red\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I must stress out that this is not the best practice.", "In many cases you better create special classes to handle situations like that, but Arrieta asked for examples, which I gave her (him)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT 0"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT 0", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["By the way, each tuple element has to be hashable too:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {}\n&gt;&gt;&gt; t = (range(3), range(10, 13))\n&gt;&gt;&gt; d[t] = 11\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: list objects are unhashable\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I use tuple lots of time as dict key e.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["I do use them when I have to create a unique key from multiple values e.g."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Caching the results of a function "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]}], [{"text": ["I used tuples as dictionary keys in application that compares network devices by geographical location.", "Since the devices are named similarly for each location, it provides a natural way to know if a device matching that pairing has been seen yet while processing multiples."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["i.e."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n seen = {}\nseen[('abc', 'lax')] = 1\nseen[('xyz', 'nyc')] = 1\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n a[(\"John\", \"Doe\")] = \"123 Fake Street\"\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I suppose in the case of sorting, there could be merit in using a tuple.", "For example, suppose the dictionary key represents a sort field (obviously there would be a default sort field to prevent the key from being None).", "If you needed multiple sort fields, such as the case of sorting by last name, then first name, wouldn't using a tuple as the dictionary key be a good idea?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Sure, such an idea might have limited use, but that doesn't mean it is completely useless."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]