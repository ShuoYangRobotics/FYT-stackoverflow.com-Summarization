[[{"text": ["Something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n labels = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', \n    'place_effort']\nvalues = [1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']\n\npaddedLabels = []\npaddedValues = []\n\nfor label, value in zip(labels, values):\n    value = str(value)\n    columnWidth = max(len(label), len(value))\n    paddedLabels.append(label.center(columnWidth))\n    paddedValues.append(value.center(columnWidth))\n\nprint ' '.join(paddedLabels)\nprint ' '.join(paddedValues)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n id Version chip_name  xversion   device  opt_param place_effort\n1    1.0    virtex2  xilinx11.5 xc5vlx50   Speed       High\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want to get fancy, make it reStructuredText-ready:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "reStructuredText", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html"}]}, {"code": "<pre>\n<code>\n labels = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', \n    'place_effort']\nvalues = [1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']\n\npaddedLabels = []\npaddedValues = []\ndividers = []\ndblDividers = []\n\nfor label, value in zip(labels, values):\n    value = str(value)\n    columnWidth = max(len(label), len(value))\n    paddedLabels.append(label.center(columnWidth))\n    paddedValues.append(value.center(columnWidth))\n    dividers.append('-' * columnWidth)\n    dblDividers.append('=' * columnWidth)\n\nprint '+-' + '-+-'.join(dividers) + '-+'\nprint '| ' + ' | '.join(paddedLabels) + ' |'\nprint '+=' + '=+='.join(dblDividers) + '=+'\nprint '| ' + ' | '.join(paddedValues) + ' |'\nprint '+-' + '-+-'.join(dividers) + '-+'\n</code>\n</pre>\n", "senID": 5}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n +----+---------+-----------+------------+----------+-----------+--------------+\n| id | Version | chip_name |  xversion  |  device  | opt_param | place_effort |\n+====+=========+===========+============+==========+===========+==============+\n| 1  |   1.0   |  virtex2  | xilinx11.5 | xc5vlx50 |   Speed   |     High     |\n+----+---------+-----------+------------+----------+-----------+--------------+\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Use ljust to stuff the contents before they are printed out."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\n\ndef maxwidth(table, index):\n    \"\"\"Get the maximum width of the given column index\"\"\"\n    return max([len(str(row[index])) for row in table])\n\ndef pprint_table(table):\n    colpad = []\n\n    for i in range(len(table[0])):\n        colpad.append(maxwidth(table, i))\n\n    for row in table:\n        print str(row[0]).ljust(colpad[0] + 1),\n        for i in range(1, len(row)):\n            col = str(row[i]).rjust(colpad[i] + 2)\n            print \"\", col,\n        print \"\"\n\na = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', 'place_effort']\nb = [1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']\n\n# Put it in the table\n\nc = [a, b]\n\npprint_table(c)\n</code>\n</pre>\n", "senID": 1}, {"text": ["output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n id     Version    chip_name      xversion      device    opt_param    place_effort \n1          1.0      virtex2    xilinx11.5    xc5vlx50        Speed            High\n</code>\n</pre>\n", "senID": 3}], [{"text": ["you could try this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}\n&gt;&gt;&gt; for name, phone in table.items():\n...     print '{0:10} ==&gt; {1:10d}'.format(name, phone)\n...\nJack       ==&gt;       4098\nDcab       ==&gt;       7678\nSjoerd     ==&gt;       4127\n</code>\n</pre>\n", "senID": 1}, {"text": ["from http://docs.python.org/tutorial/inputoutput.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/tutorial/inputoutput.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/inputoutput.html"}]}, {"text": ["The integer after the :  is the padding."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": ":", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["or better yet"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\n&gt;&gt;&gt; print ('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '\n...        'Dcab: {0[Dcab]:d}'.format(table))\nJack: 4098; Sjoerd: 4127; Dcab: 8637678\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You can use ready solution: : prettytable A simple Python library for easily displaying tabular data in a visually appealing ASCII table format"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "prettytable A simple Python library for easily displaying tabular data in a visually appealing ASCII table format", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/prettytable/"}]}, {"text": ["Other solutions, see my similar questions other answers: http://stackoverflow.com/questions/3319540/how-to-extend-pretty-print-module-to-tables"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/3319540/how-to-extend-pretty-print-module-to-tables", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3319540/how-to-extend-pretty-print-module-to-tables"}]}], [{"text": ["Another solution is not to use tab at all, and uses spaces to adjust column width, also no need of manually padding, as '%Ns' string formatting comes handy e.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n header = ['id', 'Version', 'chip_name', 'xversion', 'device', 'opt_param', 'place_effort']\nrows = [[1, 1.0, u'virtex2', u'xilinx11.5', u'xc5vlx50', u'Speed', u'High']]\n\ndef print_row(row):\n    column_width=12\n    format_str = (\"%-\"+str(column_width)+\"s\")*len(row)\n    print format_str%tuple(row)\n\nprint_row(header)\nfor row in rows:\n    print_row(row)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Output:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n id          Version     chip_name   xversion    device      opt_param   place_effort\n1           1.0         virtex2     xilinx11.5  xc5vlx50    Speed       High\n</code>\n</pre>\n", "senID": 3}], [{"text": ["For a quick solution, If ln is the list containing all these lists, "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for l in ln:\n    print \"\\t\".join([str(x).ljust(10) for x in l])\n</code>\n</pre>\n", "senID": 1}, {"text": ["will print columns seperated by tab and left-justified.", "Increase the value inside ljust if it isn't pretty yet."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]