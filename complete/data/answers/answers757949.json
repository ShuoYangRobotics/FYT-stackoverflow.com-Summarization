[[{"text": ["Put extra parens around the choice: re.search(r\"{(?", ":\\\\fad|fade)\\((\\d{1,4}),(\\d{1,4})\\)}\", text).groups()"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re.search(r\"{(?:\\\\fad|fade)\\((\\d{1,4}),(\\d{1,4})\\)}\", text).groups()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Also, escaping {} braces isn't necessary, it just needlessly clutters your regexp."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "{}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The bracket is part of the or branch starting with fade, so it's looking for either \"{fad\" or \"fade(...\".", "You need to group the fad|fade part together.", "Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n r\"\\{\\\\(?:fad|fade)\\(\\d{1,4},\\d{1,4}\\)\\}\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["[Edit]\nThe reason you do get into the if block is because the regex is matching, but only because it detects it starts with \"{\\fad\".", "However, that part of the match contains no groups.", "You need to match with the part that defines the groups if you want to capture them."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "[Edit]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n r\"\\{\\\\fade?\\(\\d{1,4},\\d{1,4}\\)\\}\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think your conditional is looking for \"\\fad\" or \"fade\", I think you need to move a \\ outside the grouping if you want to look for \"\\fad\" or \"\\fade\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Try this instead:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n r\"\\{\\\\fade?\\((\\d{1,4}),(\\d{1,4})\\)\\}\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["The e?", "is an optional e.\nThe way you have it now matches {\\fad or fade(0000,0000)}"], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "e?", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "e", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "{\\fad", "childNum": 0, "tag": "code", "childList": []}, {"text": "fade(0000,0000)}", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I don't know the python dialect of regular expressions, but wouldn't you need to 'group' the \"fad|fade\" somehow to make sure it isn't trying to find \"fad OR fade(etc...\"?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]