[[{"code": "<pre>\n<code>\n if x % 3 == 0:\n    print 'x is divisible by 3'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["x % 3 == 0 will be True if x / 3 is an integer."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "x % 3 == 0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "x / 3", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Integers have no decimals.", "If you meant \"check if a number got decimals in Python\", you can do:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a number", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n not float(your_number).is_integer()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["assuming you mean if a string containing digits also has a decimal point:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Python 2.6.6 (r266:84292, Apr 20 2011, 11:58:30) \n[GCC 4.5.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; number='123.4'\n&gt;&gt;&gt; '.' in number\nTrue\n&gt;&gt;&gt; number='123'\n&gt;&gt;&gt; '.' in number\nFalse\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["To test if it's integral you could mod 1:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 1.0/3 % 1\n0.33333333333333331\n&gt;&gt;&gt; 1/3 % 1\n0\n</code>\n</pre>\n", "senID": 3}], [{"text": ["In Python 2, dividing an int by an int returns an int (unless python was invoked with the -Qnew option, or a from __future__ import division is at the beginning of the source; in that case / returns a float); a // specifies integer division."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "-Qnew", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "from __future__ import division", "childNum": 0, "tag": "code", "childList": []}, {"text": "/", "childNum": 0, "tag": "code", "childList": []}, {"text": "//", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In Python 3, dividing an int by an int returns a float if you use \"/\", or an int if you use \"//\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you want to know whether an int will divide into another int exactly, use \"%\" to look for a remainder."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It is best to make your determination before doing the division, assuming that your x variable is an integer."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Trying to do equality tests or comparisons on floating point numbers is dangerous: http://www.lahey.com/float.htm"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.lahey.com/float.htm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.lahey.com/float.htm"}]}, {"text": ["The answer already provided using modulus before doing the division to see if one integer is divsible by the other integer is safe.", "After you do a division and are dealing with possibly floating point values, then numbers are no longer exactly integers or not."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This function uses the fact that every other whole number will have at least one number divisible by two with no remainder.", "Any non-zero fractional representation in either n or n+1 will cause both n%2 and (n+1)%2 to have a remainder.", "This has the benefit that whole numbers represented as float values will return True. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The function works correctly for positive\nand negative numbers and zero as far as I can determine.", "As mentioned in the function, it fails for values very close to an integer."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def isInteger(n):\n\"\"\"Return True if argument is a whole number, False if argument has a fractional part.\n\nNote that for values very close to an integer, this test breaks. During\nsuperficial testing the closest value to zero that evaluated correctly\nwas 9.88131291682e-324. When dividing this number by 10, Python 2.7.1 evaluated\nthe result to zero\"\"\"\n\nif n%2 == 0 or (n+1)%2 == 0:\n    return True\nreturn False\n</code>\n</pre>\n", "senID": 2}]]