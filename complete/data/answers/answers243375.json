[[{"text": ["Store the text somewhere (e.g.", "a database) and then pass through the primary key."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This will get you an Image as the result of a POST -- you may not like it"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Putting together what has already been said, how about creating two pages.", "First page sends a POST request when the form is submitted (lets say to create_img.py) with a text=xxxxxxx... parameter.", "Then create_img.py takes the text parameter and creates an image with it and inserts it (or a filesystem reference) into the db, then when rendering the second page, generate img tags like &lt;img src=\"render_img.py?row_id=0122\"&gt;.", "At this point, render_img.py simply queries the db for the given image.", "Before creating the image you can check to see if its already in the database therefore reusing/recycling previous images with the same text parameter."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "&lt;img src=\"render_img.py?row_id=0122\"&gt;", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["img's use GET.", "You'll have to come up with another mechanism.", "How about calling the same functionality in image.py and saving the file as a temp file which you ref in the img tag?", "Or how about saving the value of text in a db row during the rendering of this img tag and using the row_id as what you pass into the image.py script?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You may be able to mitigate the problem by compressing the text in the get parameter."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["From the link below it looks like you'll be fine for a while ;)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.boutell.com/newfaq/misc/urllength.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.boutell.com/newfaq/misc/urllength.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boutell.com/newfaq/misc/urllength.html"}]}], [{"text": ["If you're using django, maybe you can do this via a template tag instead?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &lt;img src=\"{% create_image \"This is the text that will be displayed\" %}\"&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["The create_image function would create the image with a dummy/random/generated filename, and return the path."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["This avoids having to GET or POST to the script, and the images will have manageable filenames."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I can see some potential issues with this approach, I'm just tossing the idea out there ;)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["OK, I'm a bit late to the party, but you could use a mix of MHTML (for IE7 and below) and the data URI scheme (for all other modern browsers).", "It does require a bit of work on both client and server but you can ultimately end up with"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n newimg.src = 'blah';\n</code>\n</pre>\n", "senID": 1}, {"text": ["The write-up on how to do this is at http://gingerbbm.com/?p=127."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://gingerbbm.com/?p=127", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://gingerbbm.com/?p=127"}]}]]