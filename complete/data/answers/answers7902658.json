[[{"text": ["You could collect the records from a csv.reader in two different lists, depending on their length (or whatever criterion you use to distinguish the two streams):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv.reader", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n list1 = []\nlist2 = []\nwith open(\"input.csv\", \"rb\") as f:\n    for record in csv.reader(f, delimiter=\";\"):\n        if len(record) == 3:\n            list1.append(record)\n        else:\n            list2.append(record)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["csv.reader() has no problem with this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv.reader()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import csv\nfoo = []\nbar = []\nwith open(\"test.csv\", 'r') as f:\n    c = csv.reader(f, delimiter = \";\")\n    for row in c:\n        if row[0] == \"foo\":\n            foo.append(row[1:])\n        elif row[0] == \"bar\":\n            bar.append(row[1:])\nprint(a)\nprint(b)\n</code>\n</pre>\n", "senID": 1}, {"text": ["results in"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [[' val1', ' position1'], [' val2', ' position2'], [' val3', ' position3']]\n[[' name1', ' address1', ' phone_nbr1'], [' name2', ' address2', ' phone_nbr2'], [' name3', ' address3', ' phone_nbr3'], [' name4', ' address4', ' phone_nbr4'], [' name5', ' address5', ' phone_nbr5'], [' name6', ' address6', ' phone_nbr6']]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["What about just using str.split on each line?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str.split", "tag": "a", "pos": 0, "childList": [{"text": "str.split", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#str.split"}, {"text": "str.split", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n items = line.split(\";\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then if the first item in the items list is foo you do one thing, and if it's bar you do something else."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "items", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "foo", "childNum": 0, "tag": "code", "childList": []}, {"text": "bar", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The fact that the lines are different is not a problem for csv module, but you'll have to analyze line content differently depending on first 'cell'."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Example of code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n with open(input_file, 'rb') as fin:\n    c = csv.reader(fin)\n    for line in c:\n         if line[0] == 'foo':\n              # do some treatment\n         elif line[0] == 'bar':\n              # do something else\n    c.close()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["It's not clear from your question what it is you actually want to achieve, but I'm not sure you need the csv module here."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for row in myfile.readlines():\n    cols = [r.strip() for r in row.split(';')]\n    if (cols[0] == \"foo\"):\n        # Do something for foo\n    elif (cols[0] == \"bar\"):\n        # Do something for bar\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What about something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n foos = []\nbars = []\nfor line in csv.reader(open(\"file.csv\",\"rb\"), delimiter=\";\"):\n  if line[0] == \"foo\":\n    foos.append(Foo(line[1], line[2]))\n  else:\n    bars.append(Bar(line[1], line[2], line[3]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Assuming you have a Foo and a Bar class taking the rest of your line cells as arguments."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Foo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Bar", "childNum": 0, "tag": "code", "childList": []}]}]]