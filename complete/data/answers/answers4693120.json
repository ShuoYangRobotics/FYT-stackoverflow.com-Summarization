[[{"text": ["The keyword global is only useful to change or create global variables in a local context, although creating global variables is seldom considered a good solution."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def bob():\n    me = \"locally defined\"    # Defined only in local context\n    print me\n\nbob()\nprint me     # Asking for a global variable\n</code>\n</pre>\n", "senID": 1}, {"text": ["The above will give you:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n locally defined\nTraceback (most recent call last):\n  File \"file.py\", line 9, in &lt;module&gt;\n    print me\nNameError: name 'me' is not defined\n</code>\n</pre>\n", "senID": 3}, {"text": ["While if you use the global statement, the variable will become available \"outside\" the scope of the function, effectively becoming a global variable."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def bob():\n    global me\n    me = \"locally defined\"   # Defined locally but declared as global\n    print me\n\nbob()\nprint me     # Asking for a global variable\n</code>\n</pre>\n", "senID": 5}, {"text": ["So the above code will give you:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n locally defined\nlocally defined\n</code>\n</pre>\n", "senID": 7}, {"text": ["In addition, due to the nature of python, you could also use global to declare functions, classes or other objects in a local context.", "Although I would advise against it since it causes nightmares if something goes wrong or needs debugging."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Accessing a name and assigning a name are different.", "In your case, you are just accessing a name."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you assign to a variable within a function, that variable is assumed to be local unless you declare it global.", "In the absence of that, it is assumed to be global."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 1         # global \n&gt;&gt;&gt; def foo():\n        print x       # accessing it, it is global\n\n&gt;&gt;&gt; foo()\n1\n&gt;&gt;&gt; def foo():   \n        x = 2        # local x\n        print x \n\n&gt;&gt;&gt; x            # global x\n1\n&gt;&gt;&gt; foo()        # prints local x\n2\n</code>\n</pre>\n", "senID": 2}], [{"text": ["While you can access global variables without the global keyword, if you want to assign to them you have to it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n foo = 1\ndef test():\n    foo = 2 # new local foo\n\ndef blub():\n    global foo\n    foo = 3 # changes the value of the global foo\n</code>\n</pre>\n", "senID": 1}, {"text": ["In your case you're just accessing the list sub."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "sub", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["This is the difference between accessing the name and binding it within a scope."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "binding", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/executionmodel.html"}]}, {"text": ["If you're just looking up a variable to read its value, you've got access to global as well as local scope."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["However if you assign to a variable who's name isn't in local scope, you are binding that name into this scope (and if that name also exists as a global, you'll hide that). "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "binding", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["If you want to be able to assign to the global name, you need to tell the parser to use the global name rather than bind a new local name - which is what the 'global' keyword does."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Binding anywhere within a block causes the name everywhere in that block to become bound, which can cause some rather odd looking consequences (e.g.", "UnboundLocalError suddenly appearing in previously working code)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 1\n&gt;&gt;&gt; def p():\n    print(a) # accessing global scope, no binding going on\n&gt;&gt;&gt; def q():\n    a = 3 # binding a name in local scope - hiding global\n    print(a)\n&gt;&gt;&gt; def r():\n    print(a) # fail - a is bound to local scope, but not assigned yet\n    a = 4\n&gt;&gt;&gt; p()\n1\n&gt;&gt;&gt; q()\n3\n&gt;&gt;&gt; r()\nTraceback (most recent call last):\n  File \"&lt;pyshell#35&gt;\", line 1, in &lt;module&gt;\n    r()\n  File \"&lt;pyshell#32&gt;\", line 2, in r\n    print(a) # fail - a is bound to local scope, but not assigned yet\nUnboundLocalError: local variable 'a' referenced before assignment\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Any variable declared outside of a function is assumed to be global, it's only when declaring them from inside of functions (except constructors) that you must specify that the variable be global."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It means that you should not do the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = 1\n\ndef myfunc():\n  global x\n\n  # formal parameter\n  def localfunction(x):\n    return x+1\n\n  # import statement\n  import os.path as x\n\n  # for loop control target\n  for x in range(10):\n    print x\n\n  # class definition\n  class x(object):\n    def __init__(self):\n      pass\n\n  #function definition\n  def x():\n    print \"I'm bad\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The other answers answer your question.", "Another important thing to know about names in Python is that they are either local or global on a per-scope basis."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Consider this, for example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n value = 42\n\ndef doit():\n    print value\n    value = 0\n\ndoit()\nprint value\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can probably guess that the value = 0 statement will be assigning to a local variable and not affect the value of the same variable declared outside the doit() function.", "You may be more surprised to discover that the code above won't run.", "The statement print value inside the function produces an UnboundLocalError."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "value = 0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "doit()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "the code above won't run.", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "print value", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "UnboundLocalError.", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The reason is that Python has noticed that, elsewhere in the function, you define the name value and value is not declared global.", "That makes it a local variable.", "But when you try to print it, the local name hasn't been defined yet.", "Python in this case does not fall back to looking for the name as a global variable, as some other languages do.", "Essentially, you cannot access a global variable if you have defined a local variable of the same name anywhere in the function."], "childNum": 5, "tag": "p", "senID": 4, "childList": [{"text": "value", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "value", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "global", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "does not fall back", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "anywhere", "childNum": 0, "tag": "em", "pos": 4, "childList": []}]}, {"text": ["This tripped me up many times, and I hope to avoid you tripping over the same thing."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]