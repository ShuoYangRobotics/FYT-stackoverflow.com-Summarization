[[{"text": ["You may use the signal package"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "signal", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/signal.html"}]}, {"code": "<pre>\n<code>\n In [1]: import signal\n\n# Register an handler for the timeout\nIn [2]: def handler(signum, frame):\n   ...:     print \"Forever is over!\"\n   ...:     raise Exception(\"end of time\")\n   ...: \n\n# This function *may* run for an indetermined time...\nIn [3]: def loop_forever():\n   ...:     import time\n   ...:     while 1:\n   ...:         print \"sec\"\n   ...:         time.sleep(1)\n   ...:         \n   ...:         \n\n# Register the signal function handler\nIn [4]: signal.signal(signal.SIGALRM, handler)\nOut[4]: 0\n\n# Define a timeout for your function\nIn [5]: signal.alarm(10)\nOut[5]: 0\n\nIn [6]: try:\n   ...:     loop_forever()\n   ...: except Exception, exc: \n   ...:     print exc\n   ....: \nsec\nsec\nsec\nsec\nsec\nsec\nsec\nsec\nForever is over!\nend of time\n\n# Cancel the timer if the function returned before timeout\n# (ok, mine won't but yours maybe will :)\nIn [7]: signal.alarm(0)\nOut[7]: 0\n</code>\n</pre>\n", "senID": 1}, {"text": ["10 seconds after the call alarm.alarm(10), the handler is called.", "This raises an exception that you can intercept from the regular Python code."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "alarm.alarm(10)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This module doesn't play well with threads (but then, who does?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I'm making some local xmlrpc calls with a timeout using the following code, borrowed from an ActiveState Cookbook recipe:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "recipe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/473878/"}]}, {"code": "<pre>\n<code>\n def timeout(func, args=(), kwargs={}, timeout_duration=10, default=None):\n    \"\"\"This function will spawn a thread and run the given function\n    using the args, kwargs and return the given default value if the\n    timeout_duration is exceeded.\n    \"\"\" \n    import threading\n    class InterruptableThread(threading.Thread):\n        def __init__(self):\n            threading.Thread.__init__(self)\n            self.result = default\n        def run(self):\n            self.result = func(*args, **kwargs)\n    it = InterruptableThread()\n    it.start()\n    it.join(timeout_duration)\n    if it.isAlive():\n        return it.result\n    else:\n        return it.result\n</code>\n</pre>\n", "senID": 1}, {"text": ["Invoking it with a 5 second timeout:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n result = timeout(remote_calculate, (myarg,), timeout_duration=5)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If this is some kind of network or file operation, you might also consider using nonblocking IO.", "This can be a better option if you're doing a lot of these types of operations at once (otherwise, you can bog your system down fairly quickly with a lot of threads).", "Here's a socket howto that covers nonblocking IO (in the context of network operations)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/sockets/sockets.html#SECTION000600000000000000000"}]}, {"text": ["The downside?", "Well, it can be a pain to program.", "Sometimes even moreso than just using a thread."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Maybe try to call it from other thread, which You could easily terminate."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What yabcok said - start a new thread to call the function.", "In the original thread, sleep for 5 seconds, then terminate the function thread if it hasn't already ended."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Maybe there is a better approach to your problem?", "Why might the function take longer than 5 seconds?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I would use the time() method from time to compare the time while you're running your function, but clearly this only works if you'd be hitting an infinite loop, not a function hanging."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def meth():\n    start_time = time()\n    while(whatever):\n        do_something\n        if time() - smart_time &gt; 5:\n            return\n</code>\n</pre>\n", "senID": 1}, {"text": ["But I'm just a small fry."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]