[[{"text": ["The \"\\b\" simply inserts the ASCII backspace character; it does not remove the just-written character from the output file.", "This is why your code doesn't behave as you expect."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "\"\\b\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ASCII", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/ASCII"}]}, {"text": ["Now, to fix it you could replace"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for ii1 in network.keys():\n    output.write(repr(ii1)+\":[\")\n    for n in network[ii1]:\n        output.write(' %s,'%(repr(n)))\n    output.write('\\b'+']\\n')\n</code>\n</pre>\n", "senID": 2}, {"text": ["with"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for ii1 in network.keys():\n    output.write(repr(ii1)+\":[ \")\n    output.write(\", \".join(map(repr, network[ii1])))\n    output.write(']\\n')\n</code>\n</pre>\n", "senID": 4}, {"text": ["or, to improve it further, with"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n for k, v in network.items():\n    print &gt;&gt;output, \"%s:[ %s]\" % (repr(k), \", \".join(map(repr, v)))\n</code>\n</pre>\n", "senID": 6}, {"text": ["Lastly, if the keys are simple integers as your example indicates, then the repr(k) can be simplified to just k. Also, if the values in the dictionary are lists of integers or somesuch, then the entire \", \".join(map(repr, v)) dance might be unnecessary."], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "repr(k)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "k", "childNum": 0, "tag": "code", "childList": []}, {"text": "\", \".join(map(repr, v))", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Use str.join to generate Comma-Separated-Values, to avoid the need for backspace:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str.join", "tag": "a", "pos": 0, "childList": [{"text": "str.join", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#str.join"}, {"text": "str.join", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["A simpler approach is, for example, list comprehensions iterating over dictionary items:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "list comprehensions", "tag": "a", "pos": 0, "childList": [{"text": "list comprehensions", "tag": "em"}], "childNum": 1, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}, {"text": "list comprehensions", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [output.write(\"%s:%s\\n\" % item) for item in network.items()]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Why not to use str(dict)?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "str(dict)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for k, v in network.iteritems():\n    output.write(str({k: v})[1:-1] + '\\n')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can't delete characters written in a file in general. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, with a little redesigning of your code, you can get this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n network={1:[2,3,4],2:[1,3,4], 3:[1,2], 4:[1,3,5], 5:[6,7,8], 6:[5,8],7:[5,6], 8:[5,6,7]}\nstr1='network.csv'\noutput = open(str1,'w')\nfor ii1 in network.keys():\n    output.write(repr(ii1)+\":[\")\n    first=false\n    for n in network[ii1]:\n        if first: \n             first=false\n        else:\n             output.write(',')\n        output.write('%s'%(repr(n)))\n    output.write('\\b'+']\\n')\noutput.close()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n network={1:[2,3,4],2:[1,3,4], 3:[1,2], 4:[1,3,5], 5:[6,7,8], 6:[5,8],7:[5,6], 8:[5,6,7]}\nstr1='network.csv'\nwith open(str1, 'w') as output:\n    for ii1 in network.keys():\n        output.write(repr(ii1)+\":[\")\n        output.write(','.join(repr(n) for n in network[ii1]))\n        output.write(']\\n')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output in network.csv:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "network.csv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n 1:[2,3,4]\n2:[1,3,4]\n3:[1,2]\n4:[1,3,5]\n5:[6,7,8]\n6:[5,8]\n7:[5,6]\n8:[5,6,7]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Some points:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["I'm using with ... as ...:.", "This guarantees that the file will be closed properly."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "with ... as ...:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I'm using ','.join to create the comma-separated list.", "This is the 'pythonic' way to merge lists (or, more precisely, iterables) of strings."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "','.join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]}], [{"text": ["Whether or not the backspace character actually 'backspaces' is probably dependent on the shell you're using."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It is much simpler and easier (and proper) to just output the data yourself as you want it formatted."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n network={1:[2,3,4],2:[1,3,4], 3:[1,2], 4:[1,3,5], 5:[6,7,8], 6:[5,8],7:[5,6], 8:[5,6,7]}\noutput = open('network.csv','w')\nfor key,values in network.items():\n    str_values = [str(x) for x in values]\n    output.write('%s:[%s]' % (key,','.join(str_values))\noutput.close()\n</code>\n</pre>\n", "senID": 2}]]