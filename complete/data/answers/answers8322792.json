[[{"text": ["Strings are iterable: the elements are the string's characters.", "When you add an iterable to a list, the iterable's elements get appended to the list."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "elements", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Either of the following will do what you're expecting (i.e.", "append the string, not extend the list with the string's characters):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n b += [c]\n</code>\n</pre>\n", "senID": 2}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n b.append(c)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["The += operator extends a list instead of appending to it:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "+=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "extends", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; b = []\n&gt;&gt;&gt; c = \"1234\"\n&gt;&gt;&gt; b.append(c)\n&gt;&gt;&gt; b\n['1234']\n&gt;&gt;&gt; b.extend(c)\n&gt;&gt;&gt; b\n['1234', '1', '2', '3', '4']\n&gt;&gt;&gt; b += c\n&gt;&gt;&gt; b\n['1234', '1', '2', '3', '4', '1', '2', '3', '4']\n&gt;&gt;&gt; b += [c]\n&gt;&gt;&gt; b\n['1234', '1', '2', '3', '4', '1', '2', '3', '4', '1234']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is an answer not to the original question (which I think has been adequately answered), but to the numerous questions that have been asked in the comments about the semantics of augmented assignment (+= and similar operations)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "+=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In a nutshell: Augmented assignment works differently for mutable types than for immutable ones."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["str, tuple, and the numeric types, among others, are immutable.", "The contents of a tuple cannot be changed once it has been created, so you get this behavior:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tuple", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = (1, 2)\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; a += (3, 4)\n&gt;&gt;&gt; a\n(1, 2, 3, 4)\n&gt;&gt;&gt; b\n(1, 2)\n</code>\n</pre>\n", "senID": 3}, {"text": ["str has the same semantics.", "Basically, a += b is equivalent to a = a + b if a is immutable."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a += b", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "a = a + b", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Most other types, including list, are mutable.", "A list's contents can be changed in place, and augmented assignment does exactly that.", "Hence:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "can", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1, 2]\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; a += [3, 4]\n&gt;&gt;&gt; a\n[1, 2, 3, 4]\n&gt;&gt;&gt; b\n[1, 2, 3, 4]\n</code>\n</pre>\n", "senID": 6}, {"text": ["Whereas if the third line were replaced with a = a + [3, 4], a new list would be created and b would be [1, 2]."], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "a = a + [3, 4]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "[1, 2]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For a user-defined class, the semantics depend on how it was implemented, but this is how it's supposed to be done per PEP 203."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["A string is a sequence of characters.", "The list operation += takes any sequence and appends each of the sequence's elements to the list."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "+=", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["(Actually += takes any iterable."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "+=", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["+= is syntactic sugar for extend, but + is just list concatenation.", "If you extend, you'll iterate over the argument, which in this case is a string.", "But you can't concatenate a string to a list, hence + fails."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["What did you expect?", "If you want to add c as string you must to do:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "c", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n b.append(c)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Cheers!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["In essence, the += operator on the list will retrieve c's iterator, which will yield the individual characters in order.", "If you intended to add the actual string to the list, yielding the result ['1234'], you can use b.append('1234') instead."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]