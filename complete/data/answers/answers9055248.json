[[{"text": ["To calculate 2^1000 in Python use 2**1000.", "Using floating point functions like math.log and math.pow you are likely to get inaccurate results."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "2**1000", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "math.log", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "math.pow", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Now, here is how to do it:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n l = str(2**1000)\ndigits = [int(digit) for digit in l]\nprint sum(digits)\n</code>\n</pre>\n", "senID": 2}, {"text": ["The first line converts the number to a string in base 10 representation.The second line iterates on the characters and transforms the string to a list of digits.", "And the third prints their sum."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["To work this problem, use integer math and convert the result to a string:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; digits = str(2 ** 1000)\n&gt;&gt;&gt; len(digits)              # count the digits\n302\n&gt;&gt;&gt; sum(map(int, digits))    # sum the digits\n1366\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The other answers address how to sum the digits in a large number, but if your question is indeed on how to get the number of digits then just do"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "number", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n largenumber=2*1000\nint(math.log(largenumber,10)+1)\n</code>\n</pre>\n", "senID": 1}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n len(str(largenumber))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["What about using long()?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import math\n\ndef power(x):\n    y_p = 1000 * math.log(x, 10.0)\n    y = math.pow(10, y_p)\n    return long(y)  # convert to long since we know it is an integral value\n\nif __name__ == \"__main__\":\n    ans = power(2)\n    a = str(ans)\n    print a\n    print len(a)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use integer arithmetic, ints in python does not overflow, so no need to do the floating point calculations.", "Calculate the power yourself:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def pow(a, b):\n    n = 1\n    for i in range(b):\n        n *= a\n    return a\n</code>\n</pre>\n", "senID": 1}, {"text": ["which is O(n).", "You can also try the O(lg n) method:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def pow(a, b):\n    if b == 0:\n        return 1\n    temp = pow(a, b/2)\n    if b % 2 == 0:\n        return temp * temp\n    return temp * temp * a\n</code>\n</pre>\n", "senID": 3}, {"text": ["Calculate the sum of digits as you are doing now."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Avoid using double precision and use arbitrary length integers instead:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sum([ int(i) for i in str(2 ** 1000) ])\n</code>\n</pre>\n", "senID": 1}]]