[[{"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nimport sys\n\nFileList = sys.argv[1: ]\nPathwayList = []\nfor InFileName in FileList:\n    sys.stderr.write(\"Processing file %s\\n\" % (i))\n    InFile = open(InFileName, 'r')\n    PathwayList.append(InFile.readlines())\n    InFile.close()\n</code>\n</pre>\n", "senID": 0}, {"text": ["Assuming you read in two files, the following will do a line by line comparison (it won't pick up any extra lines in the longer file, but then they'd not be the same if one had more lines than the other ;)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for i, s in enumerate(zip(PathwayList[0], PathwayList[1]), 1):\n    if s[0] == s[1]:\n        print i, 'match', s[0]\n    else:\n        print i, 'non-match', s[0], '!=', s[1]\n</code>\n</pre>\n", "senID": 2}, {"text": ["For what you're wanting to do, you might want to take a look at the difflib module in Python.", "For sorting, look at Mutable Sequence Types, someListVar.sort() will sort the contents of someListVar in place."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "difflib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/difflib.html#module-difflib"}, {"text": "Mutable Sequence Types", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#index-640"}, {"text": "someListVar.sort()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You could do it like that if you don't need to remeber where the contents come from :  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n PathwayList = []\nfor InFileName in FileList:\n    sys.stderr.write(\"Processing file %s\\n\" % InFileName)\n    InFile = open(InFileName, 'r')\n    PathwayList.append(InFile.readlines())\n    InFile.close()  \n\nfor contents in PathwayList:\n    # do something with contents which is a list of strings\n    print contents\n</code>\n</pre>\n", "senID": 1}, {"text": ["or, if you want to keep track of the files names, you could use a dictionary :  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n PathwayList = {}\nfor InFileName in FileList:\n    sys.stderr.write(\"Processing file %s\\n\" % InFileName)\n    InFile = open(InFileName, 'r')\n    PathwayList[InFile] = InFile.readlines()\n    InFile.close()\n\nfor filename, contents in PathwayList.items():\n    # do something with contents which is a list of strings\n    print filename, contents\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Essentially, you have a list of files and you want to change to list of lines of these files..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Several ways:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n result = [ list(open(n)) for n in sys.argv[1:] ]\n</code>\n</pre>\n", "senID": 2}, {"text": ["This would get you a result like -> [ ['alg1', 'alg2', 'alg3'], ['csr1', 'csr2'...]] Accessing would be like 'result[0]' which would result in ['alg1', 'alg2', 'alg3']..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Somewhat better might be dictionary:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n result = dict( (n, list(open(n))) for n in sys.argv[1:] )\n</code>\n</pre>\n", "senID": 5}, {"text": ["If you want to just concatenate, you would just need to chain it:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n import itertools\nresult = list(itertools.chain.from_iterable(open(n) for n in sys.argv[1:]))\n# -&gt; ['alg1', 'alg2', 'alg3', 'csr1', 'csr2'...\n</code>\n</pre>\n", "senID": 7}, {"text": ["Not one-liners for a beginner...however now it would be a good exercies to try to comprehend what's going on :) "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["You need to dynamically create the variable name for each file 'number' that you're reading.", "(I'm being deliberately vague on purpose, knowing how to build variables like this is quite valuable and more readily remembered if you discover it yourself)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["something like this will give you a start"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2564140/dynamic-variable-name-in-python"}]}], [{"text": ["You need a list which holds your PathwayList lists, that is a list of lists."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One remark: it is quite uncommon to use capitalized variable names.", "There is no strict rule for that, but by convention most people only use capitalized names for classes."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You might want to check out Python's fileinput module, which is a part of the standard library and allows you to process multiple files at once."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "fileinput", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/fileinput.html"}]}]]