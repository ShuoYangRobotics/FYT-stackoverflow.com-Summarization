[[{"text": ["Two easy ways to accomplish just the filtering are:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Note that both cases keep the values for which the predicate function evaluates to True, so you have to reverse the logic (i.e.", "you say \"keep the people who do not have the last name Smith\" instead of \"remove the people who have the last name smith\")."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit Funny... two people individually posted both of the answers I suggested as I was posting mine."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["You can also iterate backwards over the list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for name in reversed(names):\n    if name[-5:] == 'Smith':\n        names.remove(name)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This has the advantage that it does not create a new list (like filter or a list comprehension) and uses an iterator instead of a list copy (like [:])."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "filter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[:]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Note that although removing elements while iterating backwards is safe, inserting them is somewhat trickier."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Using a list comprehension"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a list comprehension", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tut/node7.html#SECTION007140000000000000000"}]}, {"code": "<pre>\n<code>\n list = [x for x in list if x[-5:] != \"smith\"]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The obvious answer is the one that John and a couple other people gave, namely:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; names = [name for name in names if name[-5:] != \"Smith\"]       # &lt;-- slower\n</code>\n</pre>\n", "senID": 1}, {"text": ["But that has the disadvantage that it creates a new list object, rather than reusing the original object.", "I did some profiling and experimentation, and the most efficient method I came up with is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; names[:] = (name for name in names if name[-5:] != \"Smith\")    # &lt;-- faster\n</code>\n</pre>\n", "senID": 3}, {"text": ["Assigning to \"names[:]\" basically means \"replace the contents of the names list with the following value\".", "It's different from just assigning to names, in that it doesn't create a new list object.", "The right hand side of the assignment is a generator expression (note the use of parentheses rather than square brackets).", "This will cause Python to iterate across the list."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Some quick profiling suggests that this is about 30% faster than the list comprehension approach, and about 40% faster than the filter approach."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Caveat: while this solution is faster than the obvious solution, it is more obscure, and relies on more advanced Python techniques.", "If you do use it, I recommend accompanying it with a comment.", "It's probably only worth using in cases where you really care about the performance of this particular operation (which is pretty fast no matter what).", "(In the case where I used this, I was doing A* beam search, and used this to remove search points from the search beam."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Caveat", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["There are times when filtering (either using filter or a list comprehension) doesn't work.", "This happens when some other object is holding a reference to the list you're modifying and you need to modify the list in place."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for name in names[:]:\n    if name[-5:] == 'Smith':\n        names.remove(name)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The only difference from the original code is the use of names[:] instead of names in the for loop.", "That way the code iterates over a (shallow) copy of the list and the removals work as expected.", "Since the list copying is shallow, it's fairly quick."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "names[:]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "names", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Both solutions, filter and comprehension requires building a new list.", "I don't know enough of the Python internals to be sure, but I think that a more traditional (but less elegant) approach could be more efficient:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "filter", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "comprehension", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "think", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n names = ['Jones', 'Vai', 'Smith', 'Perez']\n\nitem = 0\nwhile item &lt;&gt; len(names):\n    name = names [item]\n    if name=='Smith':\n        names.remove(name)\n    else:\n        item += 1\n\nprint names\n</code>\n</pre>\n", "senID": 1}, {"text": ["Anyway, for short lists, I stick with either of the two solutions proposed earlier."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["To answer your question about working with dictionaries, you should note that Python 3.0 will include dict comprehensions:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict comprehensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0274/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; {i : chr(65+i) for i in range(4)}\n</code>\n</pre>\n", "senID": 1}, {"text": ["In the mean time, you can do a quasi-dict comprehension this way:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dict([(i, chr(65+i)) for i in range(4)])\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or as a more direct answer:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n dict([(key, name) for key, name in some_dictionary.iteritems if name[-5:] != 'Smith'])\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n names = filter(lambda x: x[-5:] != \"Smith\", names);\n</code>\n</pre>\n", "senID": 0}], [{"text": ["filter would be awesome for this.", "Simple example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n names = ['mike', 'dave', 'jim']\nfilter(lambda x: x != 'mike', names)\n['dave', 'jim']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: Corey's list comprehension is awesome too."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["The filter and list comprehensions are ok for your example, but they have a couple of problems:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "They make a copy of your list and return the new one, and that will be inefficient when the original list is really big", "tag": "none", "senID": 1}, {"text": "They can be really cumbersome when the criteria to pick items (in your case, if name[-5:] == 'Smith') is more complicated, or has several conditions.", "tag": "none", "senID": 2}]}, {"text": ["Your original solution is actually more efficient for very big lists, even if we can agree it's uglier.", "But if you worry that you can have multiple 'John Smith', it can be fixed by deleting based on position and not on value:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n names = ['Jones', 'Vai', 'Smith', 'Perez', 'Smith']\n\ntoremove = []\nfor pos, name in enumerate(names):\n    if name[-5:] == 'Smith':\n        toremove.append(pos)\nfor pos in sorted(toremove, reverse=True):\n    del(names[pos])\n\nprint names\n</code>\n</pre>\n", "senID": 4}, {"text": ["We can't pick a solution without considering the size of the list, but for big lists I would prefer your 2-pass solution instead of the filter or lists comprehensions "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["In the case of a set.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n toRemove = set([])  \nfor item in mySet:  \n    if item is unwelcome:  \n        toRemove.add(item)  \nmySets = mySet - toRemove\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Well, this is clearly an issue with the data structure you are using.", "Use a hashtable for example.", "Some implementations support multiple entries per key, so one can either pop the newest element off, or remove all of them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But this is, and what you're going to find the solution is, elegance through a different data structure, not algorithm.", "Maybe you can do better if it's sorted, or something, but iteration on a list is your only method here."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["edit: one does realize he asked for 'efficiency'... all these suggested methods just iterate over the list, which is the same as what he suggested. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "edit:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]]