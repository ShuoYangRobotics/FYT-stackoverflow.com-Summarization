[[{"code": "<pre>\n<code>\n print(\"Concat\", \"String\")\n</code>\n</pre>\n", "senID": 0}, {"text": ["This is a tuple.", "When you put the , it becomes a tuple and hence Python outputs it the same way."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "tuple", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ",", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"href": "http://docs.python.org/tutorial/datastructures.html#tuples-and-sequences", "text": "tuple", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; t = ('Let', 'Us', 'Test')\n&gt;&gt;&gt; type(t)\n&lt;type 'tuple'&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["A tuple consists of a number of values separated by commas."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Not an answer to the OP's original question, which I think sukhbir answered quite well, but to the follow up question."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Not an answer to the OP's original question, which I think sukhbir answered quite well, but to the follow up question.", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["I believe the quickest way to upgrade would be to go to the Python website and download v3."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python website", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/download/"}]}], [{"text": ["If you are using Python 2.x you can just use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print \"Single\", \"String\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Python 3.x changes the way print works, previously it was a statement and now it is a function."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The reason is that you are running a Python 3 tutorial with Python 2."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["To get the behaviour you want, you need to print a string representation of the tuple.", "You can get this by using the join method on strings:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n print ' '.join(('a', 'b'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["The reason the behaviour is not as expected is that in Python 2, print is a keyword.", "In Python 3, it has been replaced by a function (also print), so the latter syntax calls the function instead of printing a tuple.", "You can replicate the behaviour you have see in Python 3 with"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n print(('a', 'b'))\n</code>\n</pre>\n", "senID": 3}, {"text": ["One set of parentheses for the function call, and one for the tuple."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["In Python 2.6 you can also say"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import print_statement\n</code>\n</pre>\n", "senID": 1}, {"text": ["to get the 3.x syntax."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]