[[{"text": ["Base64 encoding is in the standard library and will do to stop shoulder surfers:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Base64 encoding", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-base64.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import base64\n&gt;&gt;&gt; print base64.b64encode(\"password\")\ncGFzc3dvcmQ=\n&gt;&gt;&gt; print base64.b64decode(\"cGFzc3dvcmQ=\")\npassword\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Douglas F Shearer's is the generally approved solution in Unix when you need to specify a password for a remote login.", "You add a --password-from-file option to specify the path and read plaintext from a file.", "The file can then be in the user's own area protected by the operating system.", "It also allows different users to automatically pick up their own own file."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "--password-from-file", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}]}, {"text": ["For passwords that the user of the script isn't allowed to know - you can run the script with elavated permission and have the password file owned by that root/admin user."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The best solution, assuming the username and password can't be given at runtime by the user, is probably a separate source file containing only variable initialization for the username and password that is imported into your main code.", "This file would only need editing when the credentials change.", "Otherwise, if you're only worried about shoulder surfers with average memories, base 64 encoding is probably the easiest solution.", "ROT13 is just too easy to decode manually, isn't case sensitive and retains too much meaning in it's encrypted state.", "Encode your password and user id outside the python script.", "Have he script decode at runtime for use."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Giving scripts credentials for automated tasks is always a risky proposal.", "Your script should have its own credentials and the account it uses should have no access other than exactly what is necessary.", "At least the password should be long and rather random."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["How about importing the username and password from a file external to the script?", "That way even if someone got hold of the script, they wouldn't automatically get the password."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This is a pretty common problem.", "Typically the best you can do is to either "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A) create some kind of ceasar cipher function to encode/decode (just not rot13)\nor \nB) the preferred method is to use an encryption key, within reach of your program, encode/decode the password.", "In which you can use file protection to protect access the key.", "Along those lines if your app runs as a service/daemon (like a webserver) you can put your key into a password protected keystore with the password input as part of the service startup.", "It'll take an admin to restart your app, but you will have really good pretection for your configuration passwords."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["base64 is the way to go for your simple needs.", "There is no need to import anything:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 'your string'.encode('base64')\n'eW91ciBzdHJpbmc=\\n'\n&gt;&gt;&gt; _.decode('base64')\n'your string'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Your operating system probably provides facilities for encrypting data securely.", "For instance, on Windows there is DPAPI (data protection API).", "Why not ask the user for their credentials the first time you run then squirrel them away encrypted for subsequent runs?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Place the configuration information in a encrypted config file.", "Query this info in your code using an key.", "Place this key in a separate file per environment, and don't store it with your code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you are working on a Unix system, take advantage of the netrc module in the standard Python library.", "It reads passwords from a separate text file (.netrc), which has the format decribed here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.mavetju.org/unix/netrc.php"}]}, {"text": ["Here is a small usage example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import netrc\n\n# Define which host in the .netrc file to use\nHOST = 'mailcluster.loopia.se'\n\n# Read from the .netrc file in your home directory\nsecrets = netrc.netrc()\nusername, account, password = secrets.authenticators( HOST )\n\nprint username, password\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Try ROT13"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ROT13", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://de.wikipedia.org/wiki/ROT13"}]}], [{"text": ["There are several ROT13 utilities written in Python on the 'Net -- just google for them.", "ROT13 encode the string offline, copy it into the source, decode at point of transmission.But this is really weak protection..."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "really", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["I made a web utility here to do the base64 encoding method.", "(For whatever that method is worth)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "web utility here to do the base64 encoding metho", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://utilitymill.com/utility/obfuscate_password_for_a_python_script"}]}]]