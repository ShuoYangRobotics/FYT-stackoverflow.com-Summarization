[[{"text": ["Python is an excellent choice.", "The csv module makes reading and writing CSV files easy (even Microsoft's, uh, \"idiosyncratic\" version) and Python syntax is a breeze to pick up."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I'd actually recommend against Perl, if you're coming to it fresh.", "While Perl is certainly powerful and fast, it's often cryptic to the point of incomprehensible to the uninitiated."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "against", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["What kind of calculation you have to do?", "Maybe R would be an alternative?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "R", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.r-project.org/"}]}, {"text": ["EDIT: just to give a few basic examples"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # Basic usage\ndata &lt;- read.csv(\"myfile.csv\")\n\n# Pipe-separated values\ndata &lt;- read.csv(\"myfile.csv\", sep=\"|\")\n\n# File with header (columns will be named as header) \ndata &lt;- read.csv(\"myfile.csv\", header=TRUE)\n\n# Skip the first 5 lines of the file\ndata &lt;- read.csv(\"myfile.csv\", skip=5)\n\n# Read only 100 lines\ndata &lt;- read.csv(\"myfile.csv\", nrows=100)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Python definitely has a small learning curve, and works with csv files well"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There are many tools for the job, but yes, Python is perhaps the best these days.", "There is a special module for dealing with csv files.", "Check the official docs."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "docs", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}], [{"text": ["You know VBA?", "Why not Visual Basic 2008 / 2010, or perhaps C#?", "I'm sure languages like python and ruby would be relatively easier for the job, but you're already accustomed to the \".NET way\" of doing things, so it makes sense to keep working with them instead of learning a whole new thing just for this job."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Using C#:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n var csvlines = File.ReadAllLines(\"file.csv\");\n\nvar query = from csvline in csvlines\n            let data = csvline.Split(',')\n            select new\n            {\n                ID = data[0],\n                FirstName = data[1],\n                LastName = data[2],\n                Email = data[3]\n            };\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You say you have \"excel files to which i need to make lots of calculations and break them down into other excel/csv files\" but all the answers so far talk about csv only ..."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "excel", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "excel", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Python has a csv read/write module as others have mentioned.", "There are also 3rd party modules xlrd (reads) and xlwt (writes) modules for XLS files.", "See the tutorial on this site. "], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "xlrd", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "xlwt", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "the tutorial on this site", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.python-excel.org"}]}], [{"text": ["I'd give awk a try.", "If you're running windows, you can get awk via the cygwin utilities."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "awk", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/AWK"}, {"text": "cygwin utilities", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.cygwin.com/"}]}], [{"text": ["This may not be anybody's popular language du-jour, but since CSV files are line-oriented and split into fields, dealing with them is just about the perfect application for awk.", "It was built for processing line oriented text data that can be split into fields."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "awk", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "awk", "tag": "a"}]}, {"text": "awk", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.gnu.org/software/gawk/manual/gawk.html"}]}, {"text": ["Most of the other languages folks are going to reccomend will be much more general-purpose, so there's going to be a lot more in them that isn't nessecarily applicable to processing line-oriented text data."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Perl is surprisingly efficient for a scripting language for text.", "cpan.org has a tremendous number of modules for dealing with CSV data.", "I've also both written and wrote data in XLS format with another Perl module.", "If you were able to use VBA, you can certainly learn Perl (the basics of Perl are easy, though it's just as easy for you or others to write terse yet cryptic code)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["That depends on what you want to do with the files."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python's learning curve is less steep than R's.", "However, R has a bunch of built-in functions that make it very well suited for manipulating .csv files easily, particularly for statistical purposes. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit: I'd recommend R over Python for this purpose alone, if only because the basic operations (reading files, dropping rows, dropping columns, etc.", ") are slightly faster to write in R than in Python."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["PowerShell has CSV import built in."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CSV import", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://powershell.wik.is/Cmdlet_Help/Microsoft.PowerShell.Utility/Import-Csv"}]}, {"text": ["The syntax is ugly as death, but it's designed to be useful for administrators more than for programmers -- so who knows, you might like it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It's supposed to be a quick get-up-and-go language, for better and worse."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["PHP has a couple of csv functions that are easy to use:\nhttp://www.php.net/manual-lookup.php?pattern=csv&amp;lang=en"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.php.net/manual-lookup.php?pattern=csv&amp;lang=en", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.php.net/manual-lookup.php?pattern=csv&lang=en"}]}]]