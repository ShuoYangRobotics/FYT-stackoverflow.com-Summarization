[[{"text": ["The convention is to name functions private to your module with an underscore at the beginning."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "with an underscore at the beginning", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html#more-on-modules"}]}, {"text": ["Since Python has first class functions it's fine to pass functions around as parameters."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The use of an equal list seems non-traditional to me.", "Usually items equal to the pivot end up in thegreaterlist."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "equal", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Usually items equal to the pivot end up in thegreaterlist.", "tag": "a", "pos": 1, "childList": [{"text": "greater", "tag": "code"}], "childNum": 1, "href": "http://en.wikipedia.org/wiki/Quicksort"}, {"text": "greater", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The standard Python sort() and sorted() functions have an optional parameter for a comparison function.", "This seems the best way to do it."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "sort()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sorted()", "tag": "a", "pos": -1, "childList": [{"text": "sorted()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#sorted"}, {"text": "sorted()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["In Python you normally don't worry about this.", "Python has the concept of duck-typing, so if an object does what it's supposed to we don't worry about checking its type beforehand.", "This is often expressed as \"It's easier to ask for forgiveness than permission."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "concept of duck-typing", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/glossary.html#term-duck-typing"}]}, {"text": ["So let the user of your module worry about the Exception that will be thrown if they pass in a list of objects to sort which can't be compared to each other."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Some semi-random notes on your code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Why the explicit ", "tag": "none", "senID": 1}, {"text": "Is ", "tag": "none", "senID": 2}, {"text": "Passing a selector as a function is quite Pythonic. You can use the same method to pass a comparison function and use it in ", "tag": "none", "senID": 3}, {"text": "Your question (5) smells non-Pythonic - don't do that. Python is all about duck typing - if your user thinks he wants to compare integers to ", "tag": "none", "senID": 4}]}], [{"text": ["I think it's quite good.", "I like the function argument for the pivot selector."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some comments: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Don't shadow builtins like ", "tag": "none", "senID": 2}, {"text": "Use li[-1] to get the last element from a list", "tag": "none", "senID": 3}, {"text": "The ", "tag": "none", "senID": 4}]}], [], [{"text": ["The only thing I'd like to add is that creating three lists and growing them one element at a time looks rather sub-optimal.", "A typical quicksort implementation (in Python or not) moves elements around in the existing list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [], [{"text": ["The Pythonic way to implement a sorting algorithm is not to.", ";) The built-in sort is there for a reason, which is that there should be only one way to do it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sort", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["That said:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 7, "lis": [{"text": ["No need to import operator for a simple modulus operation.", "Pythonistas understand the % symbol."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "import operator", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "%", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["But we don't even need to make a separate check for the parity of the list length, because Python does integer division."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["There's no point in making median into a function really, at that point, because the work it does is so simple.", "We don't need last, either, because Python allows you to index a list with negative numbers and have it count from the end.", "mylist[-1] is the idiomatic, Pythonic way to get the last element."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "median", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "last", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "mylist[-1]", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["General programming practice: don't baby-step everything - i.e.", "set up a separate variable for every intermediate result in every calculation.", "Variables are for things that are important enough to have names.", "If you can't think of a name more descriptive than 'i', that might be a sign that you don't really need to break things up."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["As others mentioned, don't shadow builtins.", "One common convention for variables that should be lists is to call them a_list.", "(This comes from the Smalltalk world, IIRC."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "a_list", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Use list comprehensions (and/or the builtin functions map and filter, to taste) to process lists into other lists, when possible."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "filter", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I would say that the 'pivot_selector' should actually calculate the threshold value, rather than the position.", "There's no reason, after all, that algorithm correctness requires the 'pivot' to actually be in the array :)"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]}]]