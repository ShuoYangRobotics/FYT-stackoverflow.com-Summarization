[[{"text": ["Enums have been proposed for inclusion into the language before, but were rejected (see http://www.python.org/dev/peps/pep-0354/), though there are existing packages you could use instead of writing your own implementation:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.python.org/dev/peps/pep-0354/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0354/"}]}, {"tag": "ul", "num": 3, "lis": [{"text": "enum: ", "tag": "none", "senID": 1}, {"text": "SymbolType (not quite the same as enums, but still useful): ", "tag": "none", "senID": 2}, {"text": ["Or just do a search"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}], [{"text": ["What I see more often is this, in top-level module context:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n FOO_BAR = 'FOO_BAR'\nFOO_BAZ = 'FOO_BAZ'\nFOO_QUX = 'FOO_QUX'\n</code>\n</pre>\n", "senID": 1}, {"text": ["...and later..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if something is FOO_BAR: pass # do something here\nelif something is FOO_BAZ: pass # do something else\nelif something is FOO_QUX: pass # do something else\nelse: raise Exception('Invalid value for something')\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note that the use of is rather than == is taking a risk here -- it assumes that folks are using your_module.FOO_BAR rather than the string 'FOO_BAR' (which will normally be interned such that is will match, but that certainly can't be counted on), and so may not be appropriate depending on context."], "childNum": 6, "tag": "p", "senID": 4, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "childList": []}, {"text": "your_module.FOO_BAR", "childNum": 0, "tag": "code", "childList": []}, {"text": "'FOO_BAR'", "childNum": 0, "tag": "code", "childList": []}, {"text": "normally", "childNum": 0, "tag": "i", "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["One advantage of doing it this way is that by looking anywhere a reference to that string is being stored, it's immediately obvious where it came from; FOO_BAZ is much less ambiguous than 2."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "FOO_BAZ", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "2", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Besides that, the other thing that offends my Pythonic sensibilities re the class you propose is the use of split().", "Why not just pass in a tuple, list or other enumerable to start with?"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The most common enum case is enumerated values that are part of a State or Strategy design pattern.", "The enums are specific states or specific optional strategies to be used.", "In this case, they're almost always part and parcel of some class definition"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class DoTheNeedful( object ):\n    ONE_CHOICE = 1\n    ANOTHER_CHOICE = 2 \n    YET_ANOTHER = 99\n    def __init__( self, aSelection ):\n        assert aSelection in ( self.ONE_CHOICE, self.ANOTHER_CHOICE, self.YET_ANOTHER )\n        self.selection= aSelection\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then, in a client of this class."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n dtn = DoTheNeeful( DoTheNeeful.ONE_CHOICE )\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The builtin way to do enums is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (FOO, BAR, BAZ) = range(3)\n</code>\n</pre>\n", "senID": 1}, {"text": ["which works fine for small sets, but has some drawbacks:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "you need to count the number of elements by hand", "tag": "none", "senID": 3}, {"text": "you can't skip values ", "tag": "none", "senID": 4}, {"text": "if you add one name, you also need to update the range number", "tag": "none", "senID": 5}]}, {"text": ["For a complete enum implementation in python, see:\nhttp://code.activestate.com/recipes/67107/"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://code.activestate.com/recipes/67107/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/67107/"}]}], [{"text": ["There's a lot of good discussion here. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python"}]}], [{"text": ["I started with something that looks a lot like S.Lott's answer but I only overloaded 'str' and 'eq' (instead of the whole object class) so I could print and compare the enum's value."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class enumSeason():\n    Spring = 0\n    Summer = 1\n    Fall = 2\n    Winter = 3\n    def __init__(self, Type):\n        self.value = Type\n    def __str__(self):\n        if self.value == enumSeason.Spring:\n            return 'Spring'\n        if self.value == enumSeason.Summer:\n            return 'Summer'\n        if self.value == enumSeason.Fall:\n            return 'Fall'\n        if self.value == enumSeason.Winter:\n            return 'Winter'\n    def __eq__(self,y):\n        return self.value==y.value\n</code>\n</pre>\n", "senID": 1}, {"text": ["Print(x) will yield the name instead of the value and two values holding Spring will be equal to one another."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = enumSeason(enumSeason.Spring)\n   &gt;&gt;&gt; print(x)\n   Spring\n   &gt;&gt;&gt; y = enumSeason(enumSeason.Spring)\n   &gt;&gt;&gt; x == y\n   True\n</code>\n</pre>\n", "senID": 3}]]