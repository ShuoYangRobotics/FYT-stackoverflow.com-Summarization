[[{"text": ["strings in python are immutable, so you can't change them in place.", "However:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random\n\ndef insert_space(s):\n    r = random.randint(1, len(s)-1)\n    return s[:r] + ' ' + s[r:]\n\ndef insert_spaces(s):\n    for i in xrange(random.randrange(len(s))):\n        s = insert_space(s)\n    return s\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'm going to arbitrarily decide you never want two spaces inserted adjacently - each insertion point used only once - and that \"insert\" excludes \"append\" and \"prepend\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First, construct a list of insertion points..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n insert_points = range (1, len (mystring))\n</code>\n</pre>\n", "senID": 2}, {"text": ["Pick out a random selection from that list, and sort it..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import random\nselected = random.sample (insert_points, 5)\nselected.sort ()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Make a list of slices of your string..."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n selected.append (len (mystring))  #  include the last slice\ntemp = 0  #  start with first slice\nresult = []\nfor i in selected :\n  result.append (mystring [temp:i])\n  temp = i\n</code>\n</pre>\n", "senID": 6}, {"text": ["Now, built the new string..."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n \" \".join (result)\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Here's a list based solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random\n\ndef insert_spaces(s):\n    s = list(s)\n    for i in xrange(len(s)-1):\n        while random.randrange(2):\n            s[i] = s[i] + ' '\n    return ''.join(s)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Just because no one used map yet:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import random\n''.join(map(lambda x:x+' '*random.randint(0,1), s)).strip()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you want to add more than one space, then go"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s[:r] + ' '*n + s[r:]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here it comes..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def thePythonWay(s,n):\n    n = max(0,min(n,25))\n    where = random.sample(xrange(1,len(s)),n)\n    return ''.join(\"%2s\" if i in where else \"%s\" for i in xrange(len(s))) % tuple(s)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["We will randomly choose the locations where spaces will be added - after char 0, 1, ... n-2 of the string (n-1 is the last character, and we will not place a space after that); and then insert the spaces by replacing the characters in the specified locations with (the original character) + ' '.", "This is along the lines of Steve314's solution (i.e.", "keeping the assumption that you don't want consecutive spaces - which limits the total spaces you can have), but without using lists."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Thus:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import random\ndef insert_random_spaces(original, amount):\n    assert amount &gt; 0 and amount &lt; len(original)\n    insert_positions = sorted(random.sample(xrange(len(original) - 1), amount))\n    return ''.join(\n        x + (' ' if i in insert_positions else '')\n        for (i, x) in enumerate(original)\n    )\n</code>\n</pre>\n", "senID": 2}]]