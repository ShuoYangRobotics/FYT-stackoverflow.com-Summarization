[[{"text": ["To display a value nicely, you can use the pprint module.", "The easiest way to dump all variables with it is to do"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pprint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/pprint.html"}]}, {"code": "<pre>\n<code>\n import pprint\n\npprint.pprint(globals())\npprint.pprint(locals())\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you are running in CGI, a useful debugging feature is the cgitb module, which displays the value of local variables as part of the traceback."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "cgitb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/cgitb.html"}]}], [{"text": ["I think the best equivalent to PHP's var_dump($foo, $bar) is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["PHP's var_export() usually shows a serialized version of the object that can be exec()'d to re-create the object.", "The closest thing to that in Python is repr()"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "var_export()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://php.net/manual/en/function.var-export.php"}, {"text": "repr()", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#repr"}]}, {"text": ["\"For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval() [...]\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["So I have taken the answers from this question and another question and came up below.", "I suspect this is not pythonic enough for most people, but I really wanted something that let me get a deep representation of the values some unknown variable has.", "I would appreciate any suggestions about how I can improve this or achieve the same behavior easier."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "another question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/192109/is-there-a-function-in-python-to-print-all-the-current-properties-and-values-of"}]}, {"code": "<pre>\n<code>\n def dump(obj):\n  '''return a printable representation of an object for debugging'''\n  newobj=obj\n  if '__dict__' in dir(obj):\n    newobj=obj.__dict__\n    if ' object at ' in str(obj) and not newobj.has_key('__type__'):\n      newobj['__type__']=str(obj)\n    for attr in newobj:\n      newobj[attr]=dump(newobj[attr])\n  return newobj\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here is the usage"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class stdClass(object): pass\nobj=stdClass()\nobj.int=1\nobj.tup=(1,2,3,4)\nobj.dict={'a':1,'b':2, 'c':3, 'more':{'z':26,'y':25}}\nobj.list=[1,2,3,'a','b','c',[1,2,3,4]]\nobj.subObj=stdClass()\nobj.subObj.value='foobar'\n\nfrom pprint import pprint\npprint(dump(obj))\n</code>\n</pre>\n", "senID": 3}, {"text": ["and the results."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n {'__type__': '&lt;__main__.stdClass object at 0x2b126000b890&gt;',\n 'dict': {'a': 1, 'c': 3, 'b': 2, 'more': {'y': 25, 'z': 26}},\n 'int': 1,\n 'list': [1, 2, 3, 'a', 'b', 'c', [1, 2, 3, 4]],\n 'subObj': {'__type__': '&lt;__main__.stdClass object at 0x2b126000b8d0&gt;',\n            'value': 'foobar'},\n 'tup': (1, 2, 3, 4)}\n</code>\n</pre>\n", "senID": 5}], [{"text": ["print"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For your own classes, just def a __str__ method"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "__str__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I use self-written Printer class, but dir() is also good for outputting the instance fields/values."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Printer:\n\n       def __init__ (self, PrintableClass):\n           for name in dir(PrintableClass):\n               value = getattr(PrintableClass,name)\n               if  '_' not in str(name).join(str(value)):\n                    print '  .%s: %r' % (name, value)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The sample of usage:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Printer(MyClass)\n</code>\n</pre>\n", "senID": 3}]]