[[{"text": ["Some Python limits :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["- Python is slow.", "It can be improved in many ways (see other answers) but the bare bone cPython is 100 slower that C/C++. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "- Python is slow.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["- Python is opened to anything.", "It's really hard to protect / obfuscate / limit Python code. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "- Python is opened to anything.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["- Python is not hype.", "Unlike Ruby, there is no \"cool wave\" around Python, and it's still much harder to find a experienced Python coder, than, let's say, a Java or a PHP pro."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "- Python is not hype.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["- After using Python, a lot of languages seems to be a pain to use.", "You'd think it's good, but believe me, not always.", "When you have to go Javascript after a Python project, your eyes are in tears for at least 3 days.", "Really hard to get started."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "- After using Python, a lot of languages seems to be a pain to use.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["- It's harder to find web hosting than for popular solutions, such as PHP."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "- It's harder to find web hosting than for popular solutions", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["- As a dynamic language, you don't have the very handy refactoring tools you could get with Java and Eclipse or C# and VS."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "- As a dynamic language, you don't have the very handy refactoring tools", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["- For the same reason, you can't rely on type checking as a safety net.", "This is why pythonistas tend to follow best practice and write unit tests more often than others."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "- For the same reason, you can't rely on type checking as a safety net.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["- It seems I just can't find an IDE with a decent code completion.", "PyDev, Gedit, Komodo, SPE, etc.", "just don't do it as good as it could be."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "- It seems I just can't find an IDE with a decent code completion. PyDev, Gedit, Komodo, SPE, etc. just don't do it as good as it could be.", "childNum": 1, "tag": "strike", "pos": -1, "childList": [{"text": "- It seems I just can't find an IDE with a decent code completion", "tag": "strong"}]}, {"text": "- It seems I just can't find an IDE with a decent code completion", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I just ran intoulipadthis morning : works great under Ubuntu and Windows, includes debuger, shell integration, autoindent, code folding, automatic syntax checking, unit test integration, TextMate-like snippets anda decent code completion.", "And it's sooooo fast.", "It's a young and perfectible (sometimes buggy) project and I know this is not the place to write this, but I've but searching that for years, so screw it :-)"], "childNum": 3, "tag": "p", "senID": 9, "childList": [{"text": "I just ran intoulipadthis morning : works great under Ubuntu and Windows, includes debuger, shell integration, autoindent, code folding, automatic syntax checking, unit test integration, TextMate-like snippets anda decent code completion. And it's sooooo fast.\nIt's a young and perfectible (sometimes buggy) project and I know this is not the place to write this, but I've but searching that for years, so screw it :-)", "childNum": 2, "tag": "em", "pos": -1, "childList": [{"text": "ulipad", "tag": "a"}, {"text": "a decent code completion", "tag": "strong"}]}, {"text": "ulipad", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/ulipad/"}, {"text": "a decent code completion", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["- The best docs are still in English only.", "Some people don't deal well with it."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "- The best docs are still in English only.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["- You have to get use to the syntax.", "Not only you get spaces and line breaks instead of bracets, but you can forget about long lambdas, --i, and ternary operation (before 2.5)."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "- You have to get use to the syntax.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Now, to me, these are not reasons to not learn a tool that will make you produce more while having more fun.", "But maybe it's just me :-)"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Honestly, given that :"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "C++ much harder to learn;", "tag": "none", "senID": 14}, {"text": "You can do pretty much any thing you want with Python;", "tag": "none", "senID": 15}, {"text": "You will get quicker result with Python in your projects.", "tag": "none", "senID": 16}]}, {"text": ["Unless you have professional issues involving C++, you'd better learn Python first, it's more motivating.", "You still can learn C++ later, it's a useful language for system programming, embedded devices and such."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"text": ["Don't try to learn both at the same times, multitasking rarely ends well."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}], [{"text": ["Here's why it's worth learning Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A comparatively small number of problems are constrained by the speed of the algorithm.", "A comparatively large number of problems are bounded by the speed of the developer."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Why don't you ask the converse question?", "Unlike C++, Python can give you antigravity and summon souls via its import command.", "On the other hand, C++'s 'equivalent' -- #include -- only allows you to get some boring I/O and math libraries."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "antigravity", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://xkcd.com/353/"}, {"text": "souls", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://xkcd.com/413/"}, {"text": "import", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "#include", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Seriously though.. C++ allows you to do more low-level stuff e.g.", "kernel programming, and allows you to write programs that run much faster (approximately ~20x).", "You can use it to create real threads that can take advantage of multiple-cored processors, while Python (due to its design) can generally only run its simulated threads on a single core."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "approximately", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "You can use it to create real threads that can take advantage of multiple-cored processors, while Python (due to its design) can generally only run its simulated threads on a single core.", "childNum": 1, "tag": "strike", "pos": 2, "childList": [{"text": "due to its design", "tag": "a"}]}, {"href": "http://jessenoller.com/2009/02/01/python-threads-and-the-global-interpreter-lock/", "text": "due to its design", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["IMHO you should learn both; Python for web development and quick-and-dirty scripts, C++ to write systems code, desktop applications, as well as to have a better low-level understanding of the computer.", "If you're just starting out, then Python; it's much easier to begin with."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["More concrete measurements on the speed difference can be found here."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "here.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://shootout.alioth.debian.org/u32q/benchmark.php?test=all&lang=python3&lang2=gpp&box=1"}]}, {"text": ["Edit: Seems like my information on multi-threading is out of date; see John Paulett's  comment."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit:", "childNum": 0, "tag": "b", "pos": 0, "childList": []}]}], [{"text": ["They're not used for the same kinds of things, in general.", "Python is very useful for prototyping since it is so simple, but isn't always the best choice when speed is an important factor, since it is an interpreted language.", "C++ can be heavily optimized, but as you said might be much more difficult to write and understand."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want to do systems or applications programming, you should learn C++.", "If you are programming for fun and leisure, or to solve problems like at http://projecteuler.net/ then Python is a good choice too."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://projecteuler.net/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://projecteuler.net/"}]}, {"text": ["I personally also recommend learning C/C++ first if you want to get very serious about programming, because it teaches you the important concept of memory management, which might be overlooked in managed languages."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["if you are trying to find out whether you are still going to be employed some\ntime later using C++ or Python, don't concern yourself with a single language's longevity.", "Learn to program.", "Don't learn to program in &lt;insert a language here&gt;."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "&lt;insert a language here&gt;.", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Here is an analogy: If your car is running fine (gets you where you're\ngoing, has good mileage, cheap to maintain, relatively safe), there is\nno logical reason to trade it in for another one.", "None.", "Whatsoever.", "Drive it to the ground before you even consider what make or model to\nget next.", "But if you are already looking around thinking what car to\nget, just go get it, stop asking everybody you know whether you should\ndo it.", "If you need to ask, you need to change it.", "It's as simple as\nthat. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["From what I've been told, 1% of learning C++ is learning C. 1% is learning the extra basic features.", "98% is learning to use the features in a safe, maintainable way, and coping with the dark hairy corners of the language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Learning python will teach you to write code that is safe, and maintainable.", "I think that if you learn python then go back to C++, then you will be able to write good C++ code.", "Of course, that won't mean you will understand bad C++, or C++ code that was written in a non-pythonic way."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Limits to python?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "It's interpreted, so you have to ship the source and the interpreter; and processes will take much longer to start up. ", "tag": "none", "senID": 3}, {"text": "It's not C++, so it won't play with existing C++ code. ", "tag": "none", "senID": 4}, {"text": "It's a bit slower (even if you wrap the hot loops in C).*", "tag": "none", "senID": 5}, {"text": "It encourages you to be \"pythonic\", and some problems are easier if you are not \"pythonic\".", "tag": "none", "senID": 6}]}, {"text": ["*Python might be faster:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "Automatic GC. C++ is only faster if it doesn't leak too much.", "tag": "none", "senID": 8}, {"text": "Dictionaries. Lots of code runs in O(N plus a bit), rather than O(N^2) if you use a dictionary. Sure, you can use a hash table in C++, but not everbody does.", "tag": "none", "senID": 9}, {"text": "Memory management - the python interpreter caches some of the basic data structures' memory, then reallocates them, rather than hitting the system for new memory. This reduces system calls, which is  a very good thing.", "tag": "none", "senID": 10}, {"text": "Profiling new algorithms is waaaay easier on python. In lots of problems, a better algorithm is more important than a linear speedup (which is what C++ gives you).", "tag": "none", "senID": 11}, {"text": "If you are making a program that \"only runs once\" (scientific analysis, data migration, etc), then the compile-build-test cycle should be faster in python. That's what really counts ;)", "tag": "none", "senID": 12}]}], [{"text": ["Learn a statically typed language and a scripting language.", "You can do whatever you want in either language.", "A well-written C++ code base is easier to maintain/debug than a Python code base written with the same level of competency."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["If your goal is to do web stuff or scripting, Python is for you.", "Anything more advanced will require C++."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["That being said, go for Python."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["As others have suggested: learn Python to study algorithms and higher level concepts and use it for prototyping and for places where you can.", "Learn C/C++ and/or Java for the job market and for cases where you must use it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python's vastly easier syntax and high level libraries allow you to focus on interfaces and abstractions while still having a functional prototype."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["One significant difference not so far mentioned is the difference between a language like C++ that builds to native code, and a language like Python which by default puts a VM between you and the hardware.", "For doing low-level work, like coding against the OS kernel, the native language will be the preferred option."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In practise, though, when you're working in that context it usually means dropping all the way down C (in its role as portable assembler) rather than being able to use C++ (and its runtime libraries), for much if not all of the code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]