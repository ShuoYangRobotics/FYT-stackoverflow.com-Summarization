[[{"code": "<pre>\n<code>\n backname[-1] #the last item in the sequence\n\n #To reverse backname (the long way):\naList = [c for c in backname]  #will give you ['1', '2', ..., 'n']\naList.reverse()                #aList will be ['n', ..., '2', '1] \nbackname = \"\".join(aList)      #backname reversed\n\n #To reverse backname, as other answers replied:\n backname[::-1]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["To access the last item in a sequence, use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print name[-1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is the same as:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print name[len(name) - 1]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Reversing a sequence has a common idiom in Python:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n backname = name[::-1]\n</code>\n</pre>\n", "senID": 5}, {"text": ["The Good primer for Python slice notation question has more complete information."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Good primer for Python slice notation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation"}]}], [{"text": ["You want name[::-1].", "The -1 is the \"step\" of the slice-- if you wanted every other letter, for example, you would use name[::2]."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "name[::-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "name[::2]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You can use negative indices to access items counting from the end of a list, so name[-1] will give you the last character.", "However, the third slice argument is a step, which can also be negative, so this will give you the whole string in reverse:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "name[-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n name[::-1]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["With slice syntax, you would use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n backname = name[::-1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["The two colons show that the first two parameters to the slice are left at their defaults, so start at the beginning, process to the end, but step backwards (the -1)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You probably want to read the docs:\nhttp://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-buffer-xrange"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-buffer-xrange", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-buffer-xrange"}]}, {"text": ["There's a method to reverse the string for you, if you want.", "For the specific question you asked, to access the last item of a sequence you use \"seq[-1]\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It does look sound.", "And your second line should be"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n backname = name[::-1]\n</code>\n</pre>\n", "senID": 1}]]