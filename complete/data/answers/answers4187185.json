[[{"text": ["In mor recent Python version (2.6+; in older versions you're pretty much limited to checking for a few hardcoded types), the correct way is"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import numbers\n&gt;&gt;&gt; import decimal\n&gt;&gt;&gt; [isinstance(x, numbers.Number) for x in (0, 0.0, 0j, decimal.Decimal(0))]\n[True, True, True, True]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This uses ABCs and will work for all build-in number-like classes, and also for all third-party classes if they are worth their salt (registered as subclasses of the Number ABC).", "However, in many cases you shouldn't worry about checking typed manually - Python is duck-typed and mixing somewhat compatible types usually works, yet it will barf an error message when some operation doesn't make sense (4 - \"1\"), so manually checking this is rarely really needed.", "It's just bonus, you can add it when finishing this module to avoid pestering others with implementation details."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "ABCs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/glossary.html#term-abstract-base-class"}, {"text": "Number", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "4 - \"1\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["That's not really how python works.", "Just use it like you would a number, and if someone passes you something that's not a number, fail.", "It's the programmer's responsibility to pass in the correct types."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I think this would work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["isinstance(x, (int, long, float, complex))"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Sure you can use isinstance, but be aware that this is not how Python works.", "Python is a duck typed language.", "You should not explicitly check your types.", "A TypeError will be raised if the incorrect type was passed. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "isinstance", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "TypeError", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["So just assume it is an int.", "Don't bother checking."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Use python's isinstance function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a =2\n&gt;&gt;&gt; isinstance(a,int)\nTrue\n</code>\n</pre>\n", "senID": 1}], [{"text": ["isinstance(1, int) # works for ints."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["not sure about all different types of numbers in one single test."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Use Number from the numbers module to test isinstance(n, Number) (available since 2.6)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Number", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "numbers", "childNum": 0, "tag": "code", "childList": []}, {"text": "isinstance(n, Number)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from numbers import Number\n... from decimal import Decimal\n... from fractions import Fraction\n... for n in [2, 2.0, Decimal('2.0'), complex(2,0), Fraction(2,1), '2']:\n...     print '%15s %s' % (n.__repr__(), isinstance(n, Number))\n              2 True\n            2.0 True\n Decimal('2.0') True\n         (2+0j) True\n Fraction(2, 1) True\n            '2' False\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is, of course, contrary to duck typing.", "If you are more concerned about how an object acts rather than what it is, perform your operations as if you have a number and use exceptions to tell you otherwise."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]