[[{"text": ["There's so much wrong with this, it's hard to know where to start (but don't get discouraged)... "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First of all, it looks like (mostly from your use of input vs. raw_input and your parens with your print statements) you're using Python 3, which already is going to limit the amount of help you get.", "Most people are still using Python 2.6 or 2.7.", "But with that out of the way..."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "input", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "raw_input", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["The main remaining issues addressing your question are:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["First: you're using strings for player input (e.g.", "'1', '2', '3'), and numbers for computer choice (e.g.", "1, 2, 3).", "So you need to compare them as such.", "In other words, instead of:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if computer == 1 and play == 2:\n</code>\n</pre>\n", "senID": 4}, {"text": ["You would need to say:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if computer == 1 and play == '2':\n</code>\n</pre>\n", "senID": 6}, {"text": ["Second: you're trying to reference one function's variables in another one, and that won't work.", "If you want your computer_wins, etc.", "variables to be global, you need to initialize them at the global scope, e.g.", "right after your \"#constants\" are declared and before you get into main.", "Then in any function that uses them, you must say e.g.", "global computer_wins to indicate they are global and not local."], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "computer_wins", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "main", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "global computer_wins", "childNum": 0, "tag": "code", "pos": 5, "childList": []}]}, {"text": ["Once you get these issues addressed, it should work a bit better, but you'll still need to do a lot of cleanup and keep working on it!  "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Keep at it, and soon it will be natural for you."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["I answered your question separately, but just for fun here's a little working Rock, Paper, Scissors game to look at.", "This one is for Python 2.x and probably won't work in Python 3, but it might be helpful for you or somebody in the future searching for this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # \"Rock, Paper, Scissors\" demo for Python 2.x\n# by Dan Kamins\n\nimport random\n\nROCK = 1\nPAPER = 2\nSCISSORS = 3\n\nNAMES = { ROCK: 'Rock', PAPER: 'Paper', SCISSORS: 'Scissors' }\nWHAT_BEATS_WHAT = { ROCK: SCISSORS, PAPER: ROCK, SCISSORS: PAPER }\nWIN_ACTIONS = { ROCK: 'crushes', PAPER: 'smothers', SCISSORS: 'cuts' }\n\nscore_player = 0\nscore_computer = 0\nscore_ties = 0\n\ndef main():\n    intro()\n    while main_loop():\n        pass\n    summary()\n\ndef intro():\n    print \"Welcome to Rock, Paper, Scissors!\"\n\ndef main_loop():\n    player = get_player_input()\n    computer = random.randint(1, 3)\n    check_result(player, computer)\n    return ask_play_again()\n\ndef check_result(player, computer):\n    global score_player, score_computer, score_ties\n    if player == computer:\n        print \"Tie!  Computer also chose {0}.\".format(NAMES[computer])\n        score_ties += 1\n    else:\n        if WHAT_BEATS_WHAT[player] == computer:\n            print \"Your massive {0} {1} the computer's {2}!\".format(\n                NAMES[player], WIN_ACTIONS[player], NAMES[computer])\n            score_player += 1\n        else:\n            print \"The computer's {0} {1} your pathetic {2}!\".format(\n                NAMES[computer], WIN_ACTIONS[computer], NAMES[player])\n            score_computer += 1\n\ndef ask_play_again():\n    again = raw_input(\"Enter Y to play again: \")\n    return again in ('y', 'Y')\n\ndef get_player_input():\n    while True:\n        print\n        player = raw_input(\"Enter 1 for Rock 2 for paper or 3 for Scissors: \")\n        try:\n            player = int(player)\n            if player in (1,2,3):\n                return player\n        except ValueError:\n            pass\n        print \"Please enter a number from 1 to 3.\"\n\ndef summary():\n    global score_player, score_computer, score_ties\n    print \"Thanks for playing.\"\n    print \"Player won: \", score_player\n    print \"Computer won: \", score_computer\n    print \"Ties: \", score_ties\n\nif __name__ == '__main__':\n    main()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A couple quick notes from quickly skimming the code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In get_score() you could add an else clause to handle any ties that happen and you wouldn't have to check for it explicitly in play_game()"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "get_score()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "play_game()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Move the import random to the top of the file.", "imports are generally always found at the top of the file.", "Also, there's no need to re-import every time you want a random number."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "import random", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Not sure if this is a typo, cause play seems to always hold an integer, but you have play == True and play == False inside play_game().", "If you want to make play contain either True or False, you need to be using a single equals sign, eg, play = True.", "But this doesn't seem to make sense because you're comparing play to computer as if they're integers."], "childNum": 10, "tag": "p", "senID": 3, "childList": [{"text": "play", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "play == True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "play == False", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "play_game()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "play", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "play = True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "play", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "computer", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also, what are you trying to accomplish with the score variable in the get_score() method?"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "score", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "get_score()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Ah, if you made the get_score() method return something so you know who won the match it would be helpful.", "You can't access computer_wins or player_wins inside the get_score() method because they were defined inside main().", "A simple way to do this is return an int from get_score().", "here is a rather C-style way of handling it (returning -1/0/1).", "something like (pseudo code):"], "childNum": 6, "tag": "p", "senID": 5, "childList": [{"text": "get_score()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "computer_wins", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "player_wins", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "get_score()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "main()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "get_score()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def get_score():\n  score = 0\n  if computer wins:\n      score = -1\n  elif player wins:\n      score = 1\n\n  return score\n\n\nwinner = get_score()\nif winner == 0:\n    print 'tie game'\nelif winner == 1\n    print 'the player won'\nelse:\n    print 'the computer won'\n</code>\n</pre>\n", "senID": 6}], [{"text": ["This code might be a good reference for you.", ":)\nGood Luck !", "Note that this is Py2.x code"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n # Author: Niklas Rosenstein\n# Created: 2011/10/23\n\nimport sys\nimport random\n\nPAPER = 0\nROCK = 1\nSCISSOR = 2\n\nWIN = 10\nLOSS = 11\nTIE = 12\n\nTABLE = {\n    PAPER: 'Paper',\n    ROCK: 'Rock',\n    SCISSOR: 'Scissor',\n}\nif 'expand TABLE':\n    # just for overvieability\n    # expands the TABLE conveniently\n\n    tableExpand = [\n        (PAPER,('paper', 'p', '0')),\n        (ROCK, ('rock', 'r', 'stone', '1')),\n        (SCISSOR, ('scissor', 's', '2'))\n    ]\n    exp = None\n    key = None\n    for exp in tableExpand:\n        for key in exp[1]:\n            TABLE[key] = exp[0]\n    del tableExpand, exp, key\n\nclass Game(object):\n\n    wins = 0\n    losses = 0\n    ties = 0\n\n    def evaluateInput(self, inp):\n        # evaluate the input\n        # raises ValueError if input is invalid\n\n        # lowercase the string\n        inp = inp.strip()\n        inp = inp.lower()\n\n        # comparison table\n        try:\n            return TABLE[inp]\n        except KeyError:\n            raise ValueError, 'Input is invalid.'\n\n    def choose(self, choice):\n        # make a choice and compare it with\n        # the computers choice\n\n        # check if the choice is correct\n        if choice not in [ROCK, PAPER, SCISSOR]:\n            raise ValueError, 'Expected Id of either ROCK, PAPER or SCISSOR'\n\n        # generate a choice for the computer\n        com = random.choice([ROCK, PAPER, SCISSOR])\n\n        result = choice - com\n        if result == 0:\n            self.ties += 1\n            return TIE, com\n        elif result &lt; 0:\n            self.wins += 1\n            return WIN, com\n        else:\n            self.losses += 1\n            return LOSS, com\n\nTEXT_CHOOSE             = 'Choose (or \"quit\" to quit):   '\nTEXT_PLAYER_CHOOSE      = \"You've choosen:              \"\nTEXT_COMPUTER_CHOOSE    = 'The computer choosed:        '\nTEXT_CHOICE_INVALID     = 'You choice is invalid.\\n'\nTEXT_WIN                = \"You've won this match.\"\nTEXT_LOSS               = \"You've lost this match.\"\nTEXT_TIE                = \"This match was tie.\"\nTEXT_GOODBYE            = \"Thanks for playing.\"\nTEXT_WELCOME            = \"Welcome to Rock-Paper-Scissor !\\n\" \\\n                          \"This game is all about guessing. Try to choose the\\n\" \\\n                          \"thing that beats the computers choice. Thereby, the\\n\" \\\n                          \"following rules are importan:\\n\" \\\n                          \"    Paper beats Rock.\\n\" \\\n                          \"    Rock beats Scissor.\\n\" \\\n                          \"    Scissor beats Paper.\\n\" \\\n                          \"\\n\" \\\n                          \"Valid inputs are:\\n\\n\" \\\n                          \"   | for Paper:          | p | paper   |   -   | 0 |\\n\" \\\n                          \"   | for Rock:           | r | rock    | stone | 1 |\\n\" \\\n                          \"   | for Scissor:        | s | scissor |   -   | 2 |\\n\" \\\n                          \"   | To quit the game:   | q | quit    |   -   | - |\\n\" \\\n                          \"\\n\" \\\n                          \"Much fun whishes you: Niklas Rosenstein (2011)\\n\" \\\n                       + (\"-\" * 50) + \"\\n\"\n\ndef printScores(g):\n    print \"Scores:\"\n    print \"    Wins:     %s\" % g.wins\n    print \"    Losses:   %s\" % g.losses\n    print \"    Ties:     %s\" % g.ties\n\ndef main():\n\n    g = Game()\n\n    # play the game ;-)\n    print TEXT_WELCOME\n    while True:\n        inp = raw_input(TEXT_CHOOSE)\n\n        if inp.lower() in ('q', 'quit'):\n            break\n\n        try:\n            inp = g.evaluateInput(inp)\n        except ValueError:\n            print TEXT_CHOICE_INVALID\n            continue\n\n        t, com = g.choose(inp)\n\n        inp = TABLE[inp]\n        com = TABLE[com]\n\n        print TEXT_PLAYER_CHOOSE, inp\n        print TEXT_COMPUTER_CHOOSE, com\n        print \n        if t == WIN:\n            print inp, \"beats\", com + \".\",\n            print TEXT_WIN\n        elif t == LOSS:\n            print com, \"beats\", inp + \".\",\n            print TEXT_LOSS\n        else:\n            print inp, \"euqals\", com + \".\",\n            print TEXT_TIE\n        print\n        printScores(g)\n        print \"-\" * 50\n        print\n\n    print TEXT_GOODBYE\n    printScores(g)\n    print\n\n    print \"Press any key to exit.\"\n    sys.stdin.read(1)\n\nmain()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is another way to do it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import random;\n\nprint ('Game of chance 1=Rock,2=Paper,3=Scissor');\nprint ('Type 9 to exit');\nwhile 1:\n    z=random.randint(1,3);\n    a=int(input('1=Rock,2=Paper,3=Scissor:---&gt;'));\n    if a==z:\n        print ('Tie!!!');\n\n    if a==1 and z==2:\n        print ('Rock covers paper So You Win!!!');\n\n    if a==2 and z==3:\n        print ('Scissor cuts paper so you loose :(');\n\n    if a==2 and z==1:\n        print ('Rock covers paper so you loose :(');\n\n    if a==3 and z==2:\n        print ('Scissor cuts paper So You Win!!!');\n\n    if a==9:\n        break\n\nprint ('Thanks for playing the game')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's another variant that works both in Python 2.x and 3.x:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try: input = raw_input\nexcept NameError: input = input # py3k\n\nimport random\nimport sys\nimport textwrap\nfrom collections import namedtuple\n\nROCK, PAPER, SCISSORS = ROCK_PAPER_SCISSORS = range(1, 4)\nNAME = dict(zip(ROCK_PAPER_SCISSORS, \"Rock Paper Scissors\".split()))\n\nScore = namedtuple('Score', 'win verb')\nGAME_MATRIX = { # who wins and who does what\n    (PAPER, ROCK):     Score(win=True, verb='covers'),\n    (SCISSORS, PAPER): Score(win=True, verb='cut'),\n    (ROCK, SCISSORS):  Score(win=True, verb='smashes'),\n}\nGAME_MATRIX.update(dict(((second, first), Score(not win, verb))\n                   for (first,second), (win,verb) in GAME_MATRIX.items()))\n\ndef main():\n    # keep scores: how many times computer, player win and number of ties\n    scores = dict(zip(\"computer player tie\".split(), [0]*3))\n\n    display_welcome_message()\n\n    # set control loop\n    keep_going = 'Y'\n    while keep_going.upper() == 'Y':\n        try: play_game(scores)\n        except Exception as e:\n            print(\"Error: %s\" % (e,))\n            sys.exit(1)\n\n        # prompt player to keep going\n        keep_going = input('Would you like to play again? (Y for Yes): ')\n\n    print('\\nThe computer won {computer} times\\n'\n          'The player won {player} times\\n'\n          'There were {tie} tie scores'.format(**scores))\n\ndef play_game(scores):\n    # get players choices for this round\n    computer_choice = random.choice(ROCK_PAPER_SCISSORS)\n    player_choice = get_player_input()\n\n    # print choices\n    for player, choice in [('computer', computer_choice),\n                           ('player', player_choice)]:\n        print('The {0} chose: {1} ({2})'.format(player, NAME[choice], choice))\n\n    # update scores; print who wins\n    if player_choice == computer_choice:\n        scores['tie'] += 1\n        print('Tie Score, Please try again')\n    else:\n        score = GAME_MATRIX[computer_choice, player_choice]\n        if score.win: # computer wins\n            scores['computer'] += 1\n            template = '{first} {verb} {second}, Computer wins'\n        else: # player wins\n            scores['player'] += 1\n            template = '{second} {verb} {first}, Player wins'\n        print(template.format(first=NAME[computer_choice], \n                              second=NAME[player_choice], verb=score.verb))\n\ndef display_welcome_message():\n    print(textwrap.fill(textwrap.dedent(\"\"\"\n        Welcome to Rock Paper Scissors, a game of chance to see who\n        will outsmart the other. This game is Man VS Computer.  The\n        program will select a random integer and then ask you to input\n        %s for Rock %s for Paper or %s for Scissors. The program will\n        then tell you who won the game. GOOD LUCK!\n    \"\"\" % tuple(ROCK_PAPER_SCISSORS))))\n\ndef get_player_input(ntries=10):\n    for _ in range(ntries):\n        try: \n            choice = int(input('\\nSelect %s for Rock, %s for Paper, or '\n                '%s for Scissors: ' % tuple(ROCK_PAPER_SCISSORS)))\n        except ValueError:\n            pass\n        else: \n            if choice in ROCK_PAPER_SCISSORS:\n                return choice # success\n        print('Error: your choice must be one of: %s' % (\n                ', '.join(map(str, ROCK_PAPER_SCISSORS))))\n    raise RuntimeError('failed to get player choice in %d tries' % ntries)\n\nif __name__==\"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 1}]]