[[{"text": ["If you don't need a too terribly complicated data structure, might I recommend simplejson?", "It's available as a built-in module (called json) in Python 2.6 and later."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "simplejson", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/simplejson/"}, {"text": "json", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Have you looked at the pickle module to pass the data over stdout/stdin? "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pickle", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/pickle.html#module-pickle"}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["knights.py:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import pickle\nimport sys\n\ndesires = {'say': 'ni', 'obtain': 'shrubbery'}\npickle.dump(desires, sys.stdout)\n</code>\n</pre>\n", "senID": 3}, {"text": ["roundtable.py:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import pickle\nimport sys\n\nknightsRequest = pickle.load(sys.stdin)\nfor req in knightsRequest:\n    print \"The knights %s %s.\" % (req, knightsRequest[req])\n</code>\n</pre>\n", "senID": 5}, {"text": ["Usage and output:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n $ python knights.py | python roundtable.py\nThe knights say ni.\nThe knights obtain shrubbery.\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Aside from pickle, another option is ast.literal_eval, if your dictionaries only contain Python primitives."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "pickle", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ast.literal_eval", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {3: 9, 'apple': 'orange'}\n&gt;&gt;&gt; s = str(d)\n&gt;&gt;&gt; s\n\"{3: 9, 'apple': 'orange'}\"\n&gt;&gt;&gt; import ast\n&gt;&gt;&gt; x = ast.literal_eval(s)\n&gt;&gt;&gt; x\n{3: 9, 'apple': 'orange'}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If what's in the dictionary (both keys and values) can be represented as strings, you should be able to pass it as a string argument to the second script which can recreate it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = {'a':1,'b':2}\n\nd == eval(repr(d), None)\n\n&gt;&gt;&gt;True\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: Here's a slightly more involved example showing its use with a simple custom class:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class MyClass:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n    def __repr__(self):\n        return 'MyClass(%r, %r)' % (self.a, self.b)\n    def __eq__(self, other):\n        return (self.a == other.a) and (self.b == other.b)\n\nd = {'foo':42, 'bar': MyClass(17,'astring') }\n\nprint 'd:', d\nprint 'repr(d):', repr(d)\nprint \"d == eval(repr(d), {'MyClass':MyClass})?:\", \\\n      d == eval(repr(d), {'MyClass':MyClass})\n\n# outputs:\n# d: {'foo': 42, 'bar': MyClass(17, 'astring')}\n# repr(d): {'foo': 42, 'bar': MyClass(17, 'astring')}\n# d == eval(repr(d), {'MyClass':MyClass})?: True\n</code>\n</pre>\n", "senID": 3}], [{"text": ["How about xmlrpc?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Client \nhttp://docs.python.org/library/xmlrpclib.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/xmlrpclib.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/xmlrpclib.html"}]}, {"text": ["Server \nhttp://docs.python.org/library/simplexmlrpcserver.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/library/simplexmlrpcserver.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/simplexmlrpcserver.html"}]}, {"text": ["Both are in python core."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Just print the dictionary in one python script"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print( \"dict=\" + str(dict) )\n</code>\n</pre>\n", "senID": 1}, {"text": ["and use it as"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n (python script1.py; cat script2.py) | python -\n</code>\n</pre>\n", "senID": 3}, {"text": ["and now you should be able access the dictionary through global variable 'dict' in the second python script."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]