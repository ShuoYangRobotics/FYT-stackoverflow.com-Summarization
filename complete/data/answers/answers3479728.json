[[{"text": ["First of all, your example uses mv, which is a program in coreutils, not bash."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "mv", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "coreutils", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Using os.system() calls to external programs is considered poor style because:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": "You are creating platform-specific dependencies", "tag": "none", "senID": 2}, {"text": "You are creating version-specific dependencies (Yes, even coreutils change sometimes!)", "tag": "none", "senID": 3}, {"text": "You need to check for the existence of external commands (and that they are in $PATH, and executable by the user etc.)", "tag": "none", "senID": 4}, {"text": "You have to wrap the commands with error checking using their return code. It is much nicer to use in-language error-codes or exceptions. (os.system() does not let you parse stdout/stderr)", "tag": "none", "senID": 5}, {"text": "You have to deal with quoting variables with spaces yourself (or escaping them)", "tag": "none", "senID": 6}, {"text": "Python has already done the work for you by supplying the libraries!", "tag": "none", "senID": 7}]}, {"text": ["Look up glob, for shell-like pattern matching (globbing), and shutil, as others have already mentioned.", "Otherwise, everything you need is already in the standard libraries. "], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "glob", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "shutil", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n import glob\nimport shutil\n\nfor extfile in glob.glob('*.ext'):\n    shutil.move(extfile,dest)\n</code>\n</pre>\n", "senID": 9}, {"text": ["In addition, os.system() should not be used - take a look at the subprocess module instead. "], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "os.system()", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "subprocess", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["Check out Python's shutil module.", "It offers file system operations such as moving files.", "Between that and the os module, you should have all the tools you need.", "This is preferable to the bash commands for the reasons others said."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "shutil", "tag": "a", "pos": 0, "childList": [{"text": "shutil", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/shutil.html"}, {"text": "shutil", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "os", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["It always better and better style to use Python functions to do this kind of stuff.", "With Python it's not that hard to write a script in an OS-independent way instead of using bash."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Some reasons why you should use pure Python,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In this case, I would use ..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import os\nfor filename in os.listdir('.'):\n  if filename.endswith('.ext'):\n    os.rename(filename, os.path.join('path', 'to', 'new', 'destination', filename))\n</code>\n</pre>\n", "senID": 2}, {"text": ["There may be better ways though "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["It's not idea, since it makes your script a lot less portable.", "A native python script can run on any unix or windows machine that has the proper python libraries installed.", "When you add shell commands into the mix, you break that, and suddenly are locked down to a much narrower subset."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lot", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Sometimes you don't have a choice, but if it's something as simple as that, writing the code natively in python would make a lot more sense, and also be faster to boot (since the python process won't have to spawn a new shell just to execute the one command)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The quoting issues alone suggest that a pure Python solution is preferable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["More generally, Python provides the 'subprocess' module that will allow you to run commands and exercise extensive control over their output.", "It lets you \"spawn new processes, connect to their input/output/error pipes, and obtain their return codes\":"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/subprocess.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/subprocess.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess.html"}]}]]