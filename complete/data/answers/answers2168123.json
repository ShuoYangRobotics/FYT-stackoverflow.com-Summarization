[[{"text": ["Use the split method.", "Example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "split", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"0,1,2\".split(\",\")\n['0', '1', '2']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or even,"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [int(x) for x in \"0,1,2\".split(\",\")]\n[0, 1, 2]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This question was originally tagged Django, so I'll proceed with that in mind."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Inside your view function, the request object has a GET attribute that is an instance of a QueryDict.", "If you always know that you are going to get a comma separated list of integers for the key \"users\", you could do something like this in your view function:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "request", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "QueryDict", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/request-response/#querydict-objects"}]}, {"code": "<pre>\n<code>\n users_list = request.GET('users', \"\").split(',')\n</code>\n</pre>\n", "senID": 2}, {"text": ["That will give you a list of strings, or an empty list if \"users\" wasn't supplied in GET.", "If you wanted a list of integers you could process it further with a list comprehension:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n users_list = [int(x) for x in users_list]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["To go from \"0,1,2\" to ['0','1','2'] its just \"0,1,2\".split(\",\")"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"0,1,2\".split(\",\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So if you have it in a variable users, then users.split(\",\") will give you the list."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "users", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "users.split(\",\")", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you need them as ints instead of strings, it would be [int(x) for x in users.split(',')]."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[int(x) for x in users.split(',')]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["To convert the string to a list, use split."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "split", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["To convert the list of strings to a list of integers, use a list comprehension with int."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So putting it all together, it looks something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n s = '0,1,2'\nl = [int(x) for x in s.split(',')]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Results:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n [1, 2, 3]\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n import ast\nx=ast.literal_eval('0,1,2')\nprint(x)\n# (0, 1, 2)\n</code>\n</pre>\n", "senID": 0}, {"text": ["ast.literal_eval is like eval, but completely safe since it restricts the string to literals such as strings, numbers, tuples, lists, dicts, booleans and None."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "ast.literal_eval", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "eval", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Another alternative, not yet mentioned, is to use map:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n x=map(int,'0,1,2'.split(','))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can use following code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = 'user.com/?users=0,1,2'\ns.rpartition('?users=')[2].split(',')\n</code>\n</pre>\n", "senID": 1}]]