[[{"text": ["You could try the Microsoft Windows MultiPoint Software Development Kit 1.1"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Microsoft Windows MultiPoint Software Development Kit 1.1", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.microsoft.com/downloads/details.aspx?familyid=F851122A-4925-4788-BC39-409644CE0F9B&displaylang=en"}]}, {"text": ["or the new\nMicrosoft Windows MultiPoint Software Development Kit 1.5"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Microsoft Windows MultiPoint Software Development Kit 1.5", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.microsoft.com/downloads/details.aspx?FamilyID=0eb18c26-5e02-4c90-ae46-06662818f817&displaylang=en"}]}, {"text": ["and the main Microsoft Multipoint site"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Microsoft Multipoint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.microsoft.com/multipoint/mouse-sdk/"}]}], [{"text": ["Yes.", "I know of at least one program that does this, KidPad.", "I think it's written in Java and was developed by Juan Pablo Hourcade, now at the University of Iowa.", "You'd have to ask him how it was implemented."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "KidPad", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.cs.umd.edu/hcil/kiddesign/introduction.shtml"}, {"text": "Juan Pablo Hourcade", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.cs.uiowa.edu/~hourcade/"}]}], [{"text": ["http://code.google.com/p/pymultimouse/ is a library using windows raw input, it worked in a test with 2 mice. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/pymultimouse/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pymultimouse/"}]}], [{"text": ["You could use DirectInput with C/C++ (there's probably also bindings in other languages).", "You use IDirectInput8::EnumDevices() (using DX8; same function, different interface in other versions of DirectX) to get a list of all attached devices.", "Then, you create the devices and poll them IDirectInputDevice8::Poll().", "This should almost definitely work with any number of mice, keyboards, and other input devices.", "MSDN has really good documentation on this."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "IDirectInput8::EnumDevices()", "tag": "a", "pos": 1, "childList": [{"text": "IDirectInput8::EnumDevices()", "tag": "code"}], "childNum": 1, "href": "http://msdn.microsoft.com/en-us/library/bb205950(VS.85).aspx"}, {"text": "IDirectInput8::EnumDevices()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "IDirectInputDevice8::Poll()", "tag": "a", "pos": 2, "childList": [{"text": "IDirectInputDevice8::Poll()", "tag": "code"}], "childNum": 1, "href": "http://msdn.microsoft.com/en-us/library/bb205975(VS.85).aspx"}, {"text": "IDirectInputDevice8::Poll()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["I have this vague feeling that BeOS used to let one pair a mouse and keyboard and have separate active windows and inputs.", "Wow... that was a long time ago.", "I thought that it would be very interesting for \"paired\" programming."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["See my answer here (avoid the JNI stuff): http://stackoverflow.com/questions/262125/java-multiple-mouse-inputs#263886"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/262125/java-multiple-mouse-inputs#263886", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/262125/java-multiple-mouse-inputs#263886"}]}]]