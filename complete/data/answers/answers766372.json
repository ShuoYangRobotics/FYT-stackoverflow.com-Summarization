[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; x = \"a (b) c (d) e\"\n&gt;&gt;&gt; re.search(r\"\\(.*\\)\", x).group()\n'(b) c (d)'\n&gt;&gt;&gt; re.search(r\"\\(.*?\\)\", x).group()\n'(b)'\n</code>\n</pre>\n", "senID": 0}, {"text": ["According to the docs:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "According to the docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#regular-expression-syntax"}]}], [{"text": ["You seek the all-powerful '?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.amk.ca/python/howto/regex/regex.html#SECTION000730000000000000000"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.amk.ca/python/howto/regex/regex.html#SECTION000730000000000000000", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/regex/regex.html#SECTION000730000000000000000"}]}], [{"text": ["Would not \"\\(.", "*?\\)\" work ?", "That is the non-greedy syntax. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Do you want it to match \"(b)\"?", "Do as Zitrax and Paolo have suggested.", "Do you want it to match \"b\"?", "Do"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = \"a (b) c (d) e\"\n&gt;&gt;&gt; re.search(r\"\\((.*?)\\)\", x).group(1)\n'b'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As the others have said using the ?", "modifier on the * quantifier will solve your immediate problem, but be careful, you are starting to stray into areas where regexes stop working and you need a parser instead.", "For instance, the string \"(foo (bar)) baz\" will cause you problems."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Using an ungreedy match is a good start, but I'd also suggest that you reconsider any use of .", "* -- what about this?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".*", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n groups = re.search(r\"\\([^)]*\\)\", x)\n</code>\n</pre>\n", "senID": 1}]]