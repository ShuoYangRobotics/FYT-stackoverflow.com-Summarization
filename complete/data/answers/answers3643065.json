[[{"code": "<pre>\n<code>\n ''.join(c for c in S if c.isdigit())\n</code>\n</pre>\n", "senID": 0}], [{"text": ["It is possible with regex."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\n...\n\nreturn re.sub(r'\\D', '', theString)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["filter(str.isdigit, s) is faster and IMO clearer than anything else listed here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filter(str.isdigit, s)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It will also throw a TypeError if s is a unicode type.", "Depending on what definition of \"digits\" you want, this can be more or less useful than the alternative filter(type(s).isdigit, s), slightly slower but still faster than the re and comprehension versions for me."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "filter(type(s).isdigit, s)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Edit: Although if you are a poor sucker stuck with Python 3, you will need to use \"\".join(filter(str.isdigit, s)) which puts you firmly in the realm of equivalently bad performance.", "Such progress."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "\"\".join(filter(str.isdigit, s))", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Let's time the join and the re versions:    "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "re", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n In [3]: import re\n\nIn [4]: def withRe(theString): return re.sub('\\D', '', theString)\n   ...:\n\nIn [5]:\n\nIn [6]: def withJoin(S): return ''.join(c for c in S if c.isdigit())\n   ...:\n\n\nIn [11]: s = \"8-4545-225-144\"\n\nIn [12]: %timeit withJoin(s)\n100000 loops, best of 3: 6.89 us per loop\n\nIn [13]: %timeit withRe(s)\n100000 loops, best of 3: 4.77 us per loop\n</code>\n</pre>\n", "senID": 1}, {"text": ["The join version is much nicer, compared to the re one, but unfortunately is 50% slower.", "So if the performance is an issue, the elegance might need to be sacrificed. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "re", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["EDIT"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n In [16]: def withFilter(s): return filter(str.isdigit, s)\n   ....:\nIn [19]: %timeit withFilter(s)\n100000 loops, best of 3: 2.75 us per loop\n</code>\n</pre>\n", "senID": 4}, {"text": ["It looks like filter is the performance and readability winner"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "filter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Although a little more complicated to set up, using the translate() string method to delete the characters as shown below can as much as 4-6 times faster than using join() or re.sub() according to timing tests I performed -- so if it is something done many times, you might want to consider using this instead."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "translate()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "join()", "childNum": 0, "tag": "code", "childList": []}, {"text": "re.sub()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n nonnumerics = ''.join(c for c in ''.join(chr(i) for i in range(256)) if not c.isdigit())\n\nastring = '123-$ab #6789'\nprint astring.translate(None, nonnumerics)\n# 1236789\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I prefer regular expressions, so here's a way if you like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nmyStr = '$334fdf890==-'\ndigts = re.sub('[^0-9]','',myStr)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This should replace all nonnumeric occurences with '' i.e.", "with nothing.", "So digts variable should be '334890'"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]