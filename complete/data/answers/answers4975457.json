[[{"text": ["in python,and short circuits.", "If the left side of the expression is false, the right side is not evaluated at all. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n foo = dict()\n\nif 'bar' in foo and foo['bar']:\n    doSomething()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Fail fast:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if not foo:\n    return\n\nif not foobar:\n    return\n</code>\n</pre>\n", "senID": 1}, {"text": ["and so forth."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["See if you can't break some of that out into a function that includes some of the conditionals (assuming some are in common with your various cases)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Forgive me if I'm stating the obvious -- but if you're checking for many different conditions in advance of one or two operations, you might be better off using try/except -- especially for those conditions (if any) that are clear error conditions. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "try/except", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["There's also"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if all((foo, bar, foobar, barfoo, foobarfoo, barfoobar)):\n    print \"oh yeah\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["all will also shortcircuit"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Break it up into several sub-components where appropriate.", "As for where to draw the dividing lines, that's really up to you.", "While a huge staircase of conditional statements isn't great, neither is a massive if-statement with so many predicates that they wrap several lines.", "Instead, try to group your conditions into logical bunches."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You might write it as:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if foo and bar and foobar:\n    ...\n    if barfoo and foobarfoo and barfoobar:\n        ...\n</code>\n</pre>\n", "senID": 2}, {"text": ["I also suggest introducing helper methods along the way.", "Even if those helper methods are called only from this code, that's fine."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def handle_bar():\n    if barfoo and foobarfoo and barfoobar:\n        ...\n\nif foo and bar and foobar:\n    ...\n    handle_bar()\n</code>\n</pre>\n", "senID": 4}, {"text": ["If scopes get confusing or you find yourself passing around too much state as function arguments, wrap it in a class and use member variables where its conceptually appropriate."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Overall, my advice is to separate concepts into individual pieces of code at an appropriate granularity.", "If you don't do it at all, you get a long piece of code that requires lots of scrolling to see the big picture.", "If you over-do it, you force the reader to jump around your code too much."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["If you have more than 3 to 5 tests (or more), consider keeping your conditions in a dictionary, list or tuple.", "Then test that data structure.", "Much cleaner than many individual named data. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you are testing \"truth\" against a named list of variables of unknown length or a sequence data structure (like a list or tuple) you can do this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def all_true(*args):\n    for test in args:\n        if bool(test) is False: return False \n\n    return True    \n\nfoo=bar=foobar=barfoo=foobarfoo=barfoobar=1\n\nif foo:\n  if bar:\n    if foobar:\n      if barfoo:\n        if foobarfoo:\n          if barfoobar:\n             print \"True by Stairs!\"\n\nif all_true(foo,bar,foobar,barfoo,foobarfoo,barfoobar):\n    print \"True by function!\"\n\nt=(foo,bar,foobar,barfoo,foobarfoo,barfoobar)\n\nif all_true(*t): print \"The tuple is true!\"\n\nl=[foo,bar,foobar,barfoo,foobarfoo,barfoobar]\n\nif all_true(*l): print \"list is true!\"\n\nbar=0\n# run the same tests...\n</code>\n</pre>\n", "senID": 2}, {"text": ["The all_true() function will short-circuit against the first false it finds. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "all_true()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]