[[{"text": ["You seem to have gotten your encodings muddled up.", "It seems likely that what you really want is u'Andr\\xe9' which is equivalent to 'Andr\u00e9'."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "u'Andr\\xe9'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "'Andr\u00e9'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["But what you have seems to be a UTF-8 encoding that has been incorrectly decoded.", "You can fix it by converting the unicode string to an ordinary string.", "I'm not sure what the best way is, but this seems to work:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ''.join(chr(ord(c)) for c in u'Andr\\xc3\\xa9')\n'Andr\\xc3\\xa9'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then decode it correctly:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ''.join(chr(ord(c)) for c in u'Andr\\xc3\\xa9').decode('utf8')\nu'Andr\\xe9'\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now it is in the correct format."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["However instead of doing this, if possible you should try to work out why the data has been incorrectly encoded in the first place, and fix that problem there."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["value_uni.encode('utf8') or whatever encoding you need."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "value_uni.encode('utf8')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["See http://docs.python.org/library/stdtypes.html#str.encode"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#str.encode", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#str.encode"}]}], [{"text": ["The OP is not converting to ascii nor utf-8.", "That's why the suggested encode methods won't work.", "Try this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "encode", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n v = u'Andr\\xc3\\xa9'\ns = ''.join(map(lambda x: chr(ord(x)),v))\n</code>\n</pre>\n", "senID": 1}, {"text": ["The chr(ord(x)) business gets the numeric value of the unicode character (which better fit in one byte for your application), and the ''.join call is an idiom that  converts a list of ints back to an ordinary string.", "No doubt there is a more elegant way."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "chr(ord(x))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "''.join", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["You asked (in a comment) \"\"\"That is what's puzzling me.", "How did it go from it original accented to what it is now?", "When you say double encoding with utf8 and latin1, is that a total of 3 encodings(2 utf8 + 1 latin1)?", "What's the order of the encode from the original state to the current one?", "\"\"\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In the answer by Mark Byers, he says \"\"\"what you have seems to be a UTF-8 encoding that has been incorrectly decoded\"\"\".", "You have accepted his answer.", "But you are still puzzled?", "OK, here's the blow-by-blow description:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Note: All strings will be displayed using (implicitly) repr().", "unicodedata.name() will be used to verify the contents.", "That way, variations in console encoding cannot confuse interpretation of the strings."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "repr()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "unicodedata.name()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Initial state: you have a unicode object that you have named u1.", "It contains e-acute:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; u1 = u'\\xe9'\n&gt;&gt;&gt; import unicodedata as ucd\n&gt;&gt;&gt; ucd.name(u1)\n'LATIN SMALL LETTER E WITH ACUTE'\n</code>\n</pre>\n", "senID": 4}, {"text": ["You encode u1 as UTF-8 and name the result s:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = u1.encode('utf8')\n&gt;&gt;&gt; s\n'\\xc3\\xa9'\n</code>\n</pre>\n", "senID": 6}, {"text": ["You decode s using latin1 -- INCORRECTLY; s was encoded using utf8, NOT latin1.", "The result is meaningless rubbish."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; u2 = s.decode('latin1')\n&gt;&gt;&gt; u2\nu'\\xc3\\xa9'\n&gt;&gt;&gt; ucd.name(u2[0]); ucd.name(u2[1])\n'LATIN CAPITAL LETTER A WITH TILDE'\n'COPYRIGHT SIGN'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 8}, {"text": ["Please understand: unicode_object.encode('x').decode('y) when x != y is normally [see note below] a nonsense; it will raise an exception if you are lucky; if you are unlucky it will silently create gibberish.", "Also please understand that silently creating gibberish is not a bug -- there is no general way that Python (or any other language) can detect that a nonsense has been committed.", "This applies particularly when latin1 is involved, because all 256 codepoints map 1 to 1 with the first 256 Unicode codepoints, so it is impossible to get a UnicodeDecodeError from str_object.decode('latin1')."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "unicode_object.encode('x').decode('y)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Of course, abnormally (one hopes that it's abnormal) you may need to reverse out such a nonsense by doing gibberish_unicode_object.encode('y').decode('x') as suggested in various answers to your question."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "gibberish_unicode_object.encode('y').decode('x')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Simplified explanation.", "The str type is able to hold only characters from 0-255 range.", "If you want to store unicode (which can contain characters from much wider range) in str you first have to encode unicode to format suitable for str, for example UTF-8."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To do this call method encode on your str object and as an argument give desired encoding, for example this_is_str = value_uni.encode('utf-8')."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this_is_str = value_uni.encode('utf-8')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You can read longer and more in-depth (and language agnostic) article on Unicode handling here: The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!", ")."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.joelonsoftware.com/articles/Unicode.html"}]}, {"text": ["Another excellent article (this time Python-specific): Unicode HOWTO"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Unicode HOWTO", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/unicode"}]}], [{"text": ["If you have u'Andr\\xc3\\xa9', it was likely originally UTF-8 from whatever source this was obtained from.", "If possible, read the source again decoding with 'utf-8' instead.", "Otherwise just reverse the mistake:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "u'Andr\\xc3\\xa9'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print u'Andr\\xc3\\xa9'.encode('latin-1').decode('utf-8')\nAndr\u00e9\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It seems like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n str(value_uni)\n</code>\n</pre>\n", "senID": 1}, {"text": ["should work... at least, it did when I tried it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT: Turns out that this only works because my system's default encoding is, as far as I can tell, ISO-8859-1 (Latin-1).", "So for a platform-independent version of this, try"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n value_uni.encode('latin1')\n</code>\n</pre>\n", "senID": 4}]]