[[{"code": "<pre>\n<code>\n def front_back(a, b):\n    ad = (len(a) + 1) // 2\n    bd = (len(b) + 1) // 2\n    return a[:ad] + b[:bd] + a[ad:] + b[bd:]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Using // for division makes this code work in both Python 2.x and 3.x."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "//", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Well, put it in a separate function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def front_back(string):\n    offset = len(string) / 2\n    if len(string) % 2 != 0:\n        offset += 1\n    return string[:offset], string[offset:]\n\ndef solution(a, b):\n    front_a, back_a = front_back(a)\n    front_b, back_b = front_back(b)\n    return front_a + back_a + front_b + back_b\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Since you're adding 1 to the length if it's odd, and 'odd' means that len(a)%2 == 1..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "len(a)%2 == 1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def front_back2(a, b):\n    ad = (len(a) + len(a)%2) / 2\n    bd = (len(b) + len(b)%2) / 2\n    return a[:ad]+b[:bd]+a[ad:]+b[bd:]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, you could even condense it to one line just for kicks (although, it's significantly less readable):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def front_back2(a, b):\n    return a[:(len(a)+len(a)%2)/2]+b[:(len(b)+len(b)%2)/2]+a[(len(a)+len(a)%2)/2:]+b[(len(b)+len(b)%2)/2:]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can get the maximum index by using ceil"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ceil", "tag": "a", "pos": 0, "childList": [{"text": "ceil", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/math.html#math.ceil"}, {"text": "ceil", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n In [1]: l = [1,2,3]\nIn [2]: import math\nIn [4]: math.ceil(len(l)/2.0)\nOut[4]: 2.0\nIn [5]: l.append(4)\nIn [6]: math.ceil(len(l)/2.0)\nOut[6]: 2.0\nIn [7]: l.append(5)\nIn [8]: math.ceil(len(l)/2.0)\nOut[8]: 3.0\nIn [9]: l[0:3]\nOut[9]: [1, 2, 3]\nIn [10]: l[3:]\nOut[10]: [4, 5]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Mhh trying to understand @Sven answer I got this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "@Sven", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/6947214/help-me-simplify-this-code-python/6947313#6947313"}]}, {"code": "<pre>\n<code>\n len( s ) + 1 / 2\n</code>\n</pre>\n", "senID": 1}, {"text": ["Will always give you the correct index. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So if we put that in a function: "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def d( s ):\n   return ( len(s) + 1 ) / 2\n</code>\n</pre>\n", "senID": 4}, {"text": ["We can use it in the solution:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def front_back( a, b ): \n    return a[:d(a)] + b[:d(b)] + a[d(a):] + b[d(b):]\n</code>\n</pre>\n", "senID": 6}, {"text": ["Ok, I got it now."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I'm not quite sure what's the difference between / and // though "], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "/", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "//", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n from math import ceil\n\ndef front_back(a, b):\n    divide = lambda s: int(ceil(len(s) / 2.0)) # or lambda s: (len(s) + 1) // 2\n    a_divide, b_divide = divide(a), divide(b)\n    return a[:a_divide] + b[:b_divide] + a[a_divide:] + b[b_divide:]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here's mine: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def front_back( a, b ) :\n    return of(a)[0] + of(b)[0] + of(a)[1] + of(b)[1]\n\ndef of( s ):\n   index = len( s ) / 2 + ( 1 if len( s ) % 2 == 1 else 0 )\n   return ( s[ : index ] , s[ index : ] )\n\n\nprint front_back('abcde','hola')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Prints: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n abchodela\n</code>\n</pre>\n", "senID": 3}]]