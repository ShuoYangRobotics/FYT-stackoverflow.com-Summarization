[[{"text": ["I believe there are two problems at work here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1) Your parent script calls p.stdout.read(), which will read all data until end-of-file.", "However, your child script runs in an infinite loop so end-of-file will never happen.", "Probably you want p.stdout.readline()?"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "p.stdout.read()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "p.stdout.readline()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["2) In interactive mode, most programs do buffer only one line at a time.", "When run from another program, they buffer much more.", "The buffering improves efficiency in many cases, but causes problems when two programs need to communicate interactively."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["After p.stdin.write('abc\\n') add:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "p.stdin.write('abc\\n')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n p.stdin.flush()\n</code>\n</pre>\n", "senID": 4}, {"text": ["In your subprocess script, after print x[::-1] add the following within the loop:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "print x[::-1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n sys.stdout.flush()\n</code>\n</pre>\n", "senID": 6}, {"text": ["(and import sys at the top)"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "import sys", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You're probably tripping over Python's output buffering.", "Here's what python --help has to say about it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python --help", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n -u     : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x\n         see man page for details on internal buffering relating to '-u'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["When you are through writing to p.stdin, close it: p.stdin.close()"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "p.stdin.close()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The subprocess method check_output can be useful for this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "check_output", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/library/subprocess.html#subprocess.check_output"}]}, {"text": ["output = subprocess.check_output('./script.py')"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "output = subprocess.check_output('./script.py')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["And output will be the stdout from the process.", "If you need stderr, too:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["output = subprocess.check_output('./script.py', stderr=subprocess.STDOUT)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "output = subprocess.check_output('./script.py', stderr=subprocess.STDOUT)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Because you avoid managing pipes directly, it may circumvent your issue."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["If you'd like to pass several lines to script.py then you need to read/write simultaneously:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "script.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\nimport sys\nfrom subprocess import PIPE, Popen\nfrom threading  import Thread\n\ndef print_output(out, ntrim=80):\n    for line in out:\n        print len(line)\n        if len(line) &gt; ntrim: # truncate long output\n            line = line[:ntrim-2]+'..'\n        print line.rstrip() \n\n\nif __name__==\"__main__\":\n    p = Popen(['python', 'script.py'], stdin=PIPE, stdout=PIPE)\n    Thread(target=print_output, args=(p.stdout,)).start()\n    for s in ['abc', 'def', 'ab'*10**7, 'ghi']:\n        print &gt;&gt;p.stdin, s\n    p.stdin.close()\n    sys.exit(p.wait()) #NOTE: read http://docs.python.org/library/subprocess.html#subprocess.Popen.wait\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n4\ncba\n4\nfed\n20000001\nbababababababababababababababababababababababababababababababababababababababa..\n4\nihg\n</pre>\n", "senID": 2}, {"text": ["Where script.py:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "script.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\"\"\"Print reverse lines.\"\"\"\nwhile True:\n    try: x = raw_input()\n    except EOFError:\n        break # no more input\n    else:\n        print x[::-1]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Or"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\"\"\"Print reverse lines.\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    print line.rstrip()[::-1]\n</code>\n</pre>\n", "senID": 6}, {"text": ["Or"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\"\"\"Print reverse lines.\"\"\"\nimport fileinput\n\nfor line in fileinput.input(): # accept files specified as command line arguments\n    print line.rstrip()[::-1]\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Use communicate() instead of .stdout.read()."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "communicate()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".stdout.read()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from subprocess import Popen, PIPE\np = Popen('./script.py', stdin=PIPE, stdout=PIPE, stderr=PIPE)\ninput = 'abc\\n'\nstdout, stderr = p.communicate(input)\n</code>\n</pre>\n", "senID": 2}, {"text": ["This recommendation comes from the Popen objects section in the subprocess documentation:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Popen objects", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/subprocess#popen-objects"}, {"href": "http://docs.python.org/library/subprocess", "text": "subprocess documentation", "childNum": 0, "tag": "a", "childList": []}]}]]