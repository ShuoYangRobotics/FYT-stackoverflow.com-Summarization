[[{"text": ["autonose created by gfxmonk:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "autonose", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/gfxmonk/autonose/tree/master"}, {"href": "http://gfxmonk.net/", "text": "gfxmonk", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I just found this: http://www.metareal.org/p/modipyd/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.metareal.org/p/modipyd/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.metareal.org/p/modipyd/"}]}, {"text": ["I'm currently using thumb.py, but as my current project transitions from a small project to a medium sized one, I've been looking for something that can do a bit more thorough dependency analysis, and with a few tweaks, I got modipyd up and running pretty quickly."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Django's development server has a file change monitor that watches for modifications and automatically reloads itself.", "You could re-use this code to launch unit tests on file modification."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Maybe buildbot would be useful http://buildbot.net/trac "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://buildbot.net/trac", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://buildbot.net/trac"}]}], [{"text": ["For your third question, maybe the trace module is what you need:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "trace", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def y(a): return a*a\n&gt;&gt;&gt; def x(a): return y(a)\n&gt;&gt;&gt; import trace\n&gt;&gt;&gt; tracer = trace.Trace(countfuncs = 1)\n&gt;&gt;&gt; tracer.runfunc(x, 2)\n4\n&gt;&gt;&gt; res = tracer.results()\n&gt;&gt;&gt; res.calledfuncs\n{('&lt;stdin&gt;', '&lt;stdin&gt;', 'y'): 1, ('&lt;stdin&gt;', '&lt;stdin&gt;', 'x'): 1}\n</code>\n</pre>\n", "senID": 1}, {"text": ["res.calledfuncs contains the functions that were called.", "If you specify countcallers = 1 when creating the tracer, you can get caller/callee relationships.", "See the docs of thetracemodule for more information."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "res.calledfuncs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "countcallers = 1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "docs of thetracemodule", "tag": "a", "pos": 2, "childList": [{"text": "trace", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/lib/trace-api.html"}, {"text": "trace", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can also try to get the calls via static analysis, but this can be dangerous due to the dynamic nature of Python. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Maybe Nose http://somethingaboutorange.com/mrl/projects/nose/ has a plugin http://somethingaboutorange.com/mrl/projects/nose/doc/writing_plugins.html"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://somethingaboutorange.com/mrl/projects/nose/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://somethingaboutorange.com/mrl/projects/nose/"}, {"href": "http://somethingaboutorange.com/mrl/projects/nose/doc/writing_plugins.html", "text": "http://somethingaboutorange.com/mrl/projects/nose/doc/writing_plugins.html", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Found this: http://jeffwinkler.net/2006/04/27/keeping-your-nose-green/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://jeffwinkler.net/2006/04/27/keeping-your-nose-green/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jeffwinkler.net/2006/04/27/keeping-your-nose-green/"}]}]]