[[{"text": ["The best tool I found for helping with init.d scripts is \"start-stop-daemon\".", "It will run any application, monitor run/pid files, create them when necessary, provide ways to stop the daemon, set process user/group ids, and can even background your process."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, this is a script which can start/stop a wsgi server:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #! /bin/bash\n\ncase \"$1\" in\n  start)\n    echo \"Starting server\"\n\n    # Activate the virtual environment\n    . /home/ali/wer-gcms/g-env/bin/activate\n\n    # Run start-stop-daemon, the $DAEMON variable contains the path to the\n    # application to run\n    start-stop-daemon --start --pidfile $WSGI_PIDFILE \\\n        --user www-data --group www-data \\\n        --chuid www-data \\\n        --exec \"$DAEMON\"\n    ;;\n  stop)\n    echo \"Stopping WSGI Application\"\n\n    # Start-stop daemon can also stop the application by sending sig 15\n    # (configurable) to the process id contained in the run/pid file\n    start-stop-daemon --stop --pidfile $WSGI_PIDFILE --verbose\n    ;;\n  *)\n    # Refuse to do other stuff\n    echo \"Usage: /etc/init.d/wsgi-application.sh {start|stop}\"\n    exit 1\n    ;;\nesac\n\nexit 0\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can also see there an example of how to use it with a virtualenv, which I would always recommend."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["To answer one part of your question, there are no tools I know of that will do daemon setup portably even across Linux systems let alone Windows or Mac OS X."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Most Linux distributions seem to be using start-stop-daemon within init scripts now, but you're still going to have minor difference in filesystem layout and big differences in packaging.", "Using autotools/configure, or distutils/easy_install if your project is all Python, will go a long way to making it easier to build packages for different Linux/BSD distributions."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "start-stop-daemon", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Windows is a whole different game and will require Mark Hammond's win32 extensions and maybe Tim Golden's WMI extensions."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Mark Hammond's win32", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://starship.python.net/crew/mhammond/"}, {"href": "http://timgolden.me.uk/python/wmi.html", "text": "Tim Golden's WMI", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["I don't know Launchd except that \"none of the above\" are relevant."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["For tips on daemonizing Python scripts, I would look to Python apps that are actually doing it in the real world, for example inside Twisted."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["There are many snippets on the internet offering to write a daemon in pure python (no bash scripts)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/\nlooks clean..."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/"}]}, {"text": ["If you want to write your own,\nthe principle is the same as with the bash daemon function."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["Basically:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["On start:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "On start:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "you fork to another process", "tag": "none", "senID": 5}, {"text": "open a logfile to redirect your\nstdout and stderr ", "tag": "none", "senID": 6}, {"text": "Save the pid somewhere.", "tag": "none", "senID": 7}]}, {"text": ["On stop:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "On stop:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "You send SIGTERM to the process with pid stored in your pidfile.", "tag": "none", "senID": 9}, {"text": "With signal.signal(signal.SIGTERM, sigtermhandler) you can bind a stopping\nprocedure to the SIGTERM signal.", "tag": "none", "senID": 10}]}, {"text": ["I don't know any widely used package doing this though."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["I can't remember where I downloaded it... but this is the best daemonizing script that I've found.", "It works beautifully (on Mac and Linux.", ")  (save it as daemonize.py)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys, os\ndef daemonize (stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):\n    # Perform first fork.\n    try:\n        pid = os.fork( )\n        if pid &gt; 0:\n            sys.exit(0) # Exit first parent.\n    except OSError, e:\n        sys.stderr.write(\"fork #1 failed: (%d) %sn\" % (e.errno, e.strerror))\n        sys.exit(1)\n    # Decouple from parent environment.\n    os.chdir(\"/\")\n    os.umask(0)\n    os.setsid( )\n    # Perform second fork.\n    try:\n        pid = os.fork( )\n        if pid &gt; 0:\n            sys.exit(0) # Exit second parent.\n    except OSError, e:\n        sys.stderr.write(\"fork #2 failed: (%d) %sn\" % (e.errno, e.strerror))\n        sys.exit(1)\n    # The process is now daemonized, redirect standard file descriptors.\n    for f in sys.stdout, sys.stderr: f.flush( )\n    si = file(stdin, 'r')\n    so = file(stdout, 'a+')\n    se = file(stderr, 'a+', 0)\n    os.dup2(si.fileno( ), sys.stdin.fileno( ))\n    os.dup2(so.fileno( ), sys.stdout.fileno( ))\n    os.dup2(se.fileno( ), sys.stderr.fileno( ))\n</code>\n</pre>\n", "senID": 1}, {"text": ["In your script, you would simply:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from daemonize import daemonize\ndaemonize()\n</code>\n</pre>\n", "senID": 3}, {"text": ["And you can also specify places to redirect the stdio, err, etc..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Check the Ben Finney's daemon module.", "He has started to write a PEP targeting python 3.X:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.python.org/dev/peps/pep-3143/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.python.org/dev/peps/pep-3143/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3143/"}]}, {"text": ["But an implementation is already available here :"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://pypi.python.org/pypi/python-daemon/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://pypi.python.org/pypi/python-daemon/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/python-daemon/"}]}], [{"text": ["Not a silver bullet for what you're asking, but check out supervisord.", "It handles all the fun bits of managing processes.", "I use it heavily in a large production environment.", "Also, it's written in Python!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "supervisord", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://supervisord.org/"}]}], [{"text": ["On Linux systems, the system's package manager (Portage for Gentoo, Aptitude for Ubuntu/Debian, yum for Fedora, etc.", ") usually takes care of installing the program including placing init scripts in the right places.", "If you want to distribute your program for Linux, you might want to look into bundling it up into the proper format for various distributions' package managers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This advice is obviously irrelevant on systems which don't have package managers (Windows, and Mac I think)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This blog entry made it clear for me  that there are actually two common ways to have your Python program run as a deamon (I hadn't figured that out so clearly from the existing answers):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "blog entry", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jimmyg.org/blog/2010/python-daemon-init-script.html"}]}, {"text": ["Poeljapon's answer is an example of this 1st  approach, although it doesn't use the python-daemon package, but links to a custom but very clean python script."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Poeljapon's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/a/588891/50899"}, {"text": "python-daemon", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Ali Afshar's  answer is a shell script example of the 2nd approach, using the start-stop-daemon."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Ali Afshar's  answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/a/588780/50899"}, {"text": "start-stop-daemon", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The blog entry I quoted has a shell script example, and some additional details on things such as starting your daemon at system startup and restarting your daemon automatically when it stopped for any reason."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["\"generally should be run as a daemon?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Doesn't -- on surface -- make a lot of sense.", "\"Generally\" isn't sensible.", "It's either a a daemon or not.", "You might want to update your question."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For examples of daemons, read up on daemons like Apache's httpd or any database server (they're daemons) or the SMTPD mail daemon."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Or, perhaps, read up on something simpler, like the FTP daemon, SSH daemon, Telnet daemon."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In Linux world, you'll have your application installation directory, some working directory, plus the configuration file directories."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["We use /opt/ourapp for the application (it's Python, but we don't install in Python's lib/site-packages)"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "/opt/ourapp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "lib/site-packages", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["We use /var/ourapp for working files and our configuration files.  "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "/var/ourapp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["We could use /etc/ourapp for configuration files -- it would be consistent -- but we don't."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "/etc/ourapp", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["We don't -- yet -- use the init.d scripts for startup.", "But that's the final piece, automated startup.", "For now, we have sys admins start the daemons."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "init.d", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This is based, partly, on http://www.pathname.com/fhs/ and http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/Linux-Filesystem-Hierarchy.html."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "http://www.pathname.com/fhs/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pathname.com/fhs/"}, {"href": "http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/Linux-Filesystem-Hierarchy.html", "text": "http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/Linux-Filesystem-Hierarchy.html", "childNum": 0, "tag": "a", "childList": []}]}]]