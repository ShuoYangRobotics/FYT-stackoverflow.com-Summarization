[[{"text": ["For the conditional statement, I would probably go with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if filecmp.cmp(local, config_file):\n    shutil.copyfile(remote, config_file)\nelse:\n    shutil.copyfile(local, config_file)\n</code>\n</pre>\n", "senID": 1}, {"text": ["There's little need to use the inline y if x else z in this case, since the surrounding code is simple enough."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "y if x else z", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["From the Python Style Guide:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Style Guide", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"text": ["With regard to listing out a compound expression:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "With regard to listing out a compound expression:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Compound statements (multiple statements on the same line) are generally discouraged."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Yes:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if foo == 'blah':\n    do_blah_thing()\ndo_one()\ndo_two()\ndo_three()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Or for the code you supplied, Greg's example is a good one:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if filecmp.cmp(local, config_file):\n    shutil.copyfile(remote, config_file)\nelse:\n    shutil.copyfile(local, config_file)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Rather not:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n if foo == 'blah': do_blah_thing()\ndo_one(); do_two(); do_three()\n</code>\n</pre>\n", "senID": 8}, {"text": ["Method Names and Instance Variables"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Method Names and Instance Variables", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Update: Per Oscar's request, also listed how his code would look in this fashion."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["The third option looks the most natural to me, although your use of spaces in side parentheses and superfluous parentheses contradict the Python style guide."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python style guide", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"text": ["That guide also answers the to_copy question, but I would probably use clearer names altogether."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I would write it as:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import filecmp\nimport shutil\n\nlocal = \"local.txt\"\nremote = \"remote.txt\"\n\ndestination = r\"C:\\some\\path\\file.txt\"\nsource = remote if filecmp.cmp(local, destination) else local\n\nshutil.copyfile(source, destination)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The most common naming I've seen is underscode separated words, to_copy."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As for the format style, I've seen no such agreement.", "I find "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n source = remote if filecmp.cmp(local, config_file) else local\n\nshutil.copyfile(source, config_file)\n</code>\n</pre>\n", "senID": 2}, {"text": ["to be the clearest among your options."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["And seeing that everyone prefers to split the if I'd, at the very least, encapsulate the copyfile call in case you someday wish to change it:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def copy_to(source, destination):\n    shutil.copyfile(source,destination)\n\nif filecmp.cmp(local, config_file):\n    copy_to(remote, config_file)\nelse:\n    copy_to(local, config_file)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You might find this useful; PEP 8 -- Style Guide for Python Code"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 8 -- Style Guide for Python Code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["What about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import filecmp\nimport shutil\n\nlocal = \"local.txt\"\nremote = \"remote.txt\"\nconfig_file = \"C:\\some\\path\\file.txt\"\n\n\nif filecmp.cmp( local, config_file):\n    to_copy = remote\nelse:\n    to_copy = local\n\n\nshutil.copyfile( to_copy, config_file  )\n</code>\n</pre>\n", "senID": 1}, {"text": ["yikes, this open id screen name looks terrible."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]