[[{"text": ["Did you mean urllib2.urlopen?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "urllib2.urlopen", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-urllib2.html#l2h-3928"}]}, {"text": ["You could potentially lift the intended filename if the server was sending a Content-Disposition header by checking remotefile.info()['Content-Disposition'], but as it is I think you'll just have to parse the url."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "intended", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "if", "childNum": 0, "tag": "em", "childList": []}, {"text": "remotefile.info()['Content-Disposition']", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You could use urlparse.urlsplit, but if you have any URLs like at the second example, you'll end up having to pull the file name out yourself anyway:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "urlparse.urlsplit", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; urlparse.urlsplit('http://example.com/somefile.zip')\n('http', 'example.com', '/somefile.zip', '', '')\n&gt;&gt;&gt; urlparse.urlsplit('http://example.com/somedir/somefile.zip')\n('http', 'example.com', '/somedir/somefile.zip', '', '')\n</code>\n</pre>\n", "senID": 3}, {"text": ["Might as well just do this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 'http://example.com/somefile.zip'.split('/')[-1]\n'somefile.zip'\n&gt;&gt;&gt; 'http://example.com/somedir/somefile.zip'.split('/')[-1]\n'somefile.zip'\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I think that \"the file name\" isn't a very well defined concept when it comes to http transfers.", "The server might (but is not required to) provide one as \"content-disposition\" header, you can try to get that with remotefile.headers['Content-Disposition'].", "If this fails, you probably have to parse the URI yourself."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "remotefile.headers['Content-Disposition']", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["If you only want the file name itself, assuming that there's no query variables at the end like http://example.com/somedir/somefile.zip?foo=bar then you can use os.path.basename for this: "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://example.com/somedir/somefile.zip?foo=bar", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://example.com/somedir/somefile.zip?foo=bar"}]}, {"code": "<pre>\n<code>\n [user@host]$ python\nPython 2.5.1 (r251:54869, Apr 18 2007, 22:08:04) \nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.path.basename(\"http://example.com/somefile.zip\")\n'somefile.zip'\n&gt;&gt;&gt; os.path.basename(\"http://example.com/somedir/somefile.zip\")\n'somefile.zip'\n&gt;&gt;&gt; os.path.basename(\"http://example.com/somedir/somefile.zip?foo=bar\")\n'somefile.zip?foo=bar'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Some other posters mentioned using urlparse, which will work, but you'd still need to strip the leading directory from the file name.", "If you use os.path.basename() then you don't have to worry about that, since it returns only the final part of the URL or file path."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Do you mean urllib2.urlopen?", "There is no function called openfile in the urllib2 module."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "urllib2.urlopen", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "openfile", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "urllib2", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Anyway, use the urllib2.urlparse functions:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "urllib2.urlparse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from urllib2 import urlparse\n&gt;&gt;&gt; print urlparse.urlsplit('http://example.com/somefile.zip')\n('http', 'example.com', '/somefile.zip', '', '')\n</code>\n</pre>\n", "senID": 2}, {"text": ["Voila."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I guess it depends what you mean by parsing.", "There is no way to get the filename without parsing the URL, i.e.", "the remote server doesn't give you a filename.", "However, you don't have to do much yourself, there's the urlparse module:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "urlparse", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"code": "<pre>\n<code>\n In [9]: urlparse.urlparse('http://example.com/somefile.zip')\nOut[9]: ('http', 'example.com', '/somefile.zip', '', '', '')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["\n&gt;&gt;&gt; import os,urllib2\n\n&gt;&gt;&gt; resp=urllib2.urlopen('http://www.example.com/index.html')\n\n&gt;&gt;&gt; my_url=resp.geturl()\n\n&gt;&gt;&gt; os.path.split(my_url)[1]\n\n'index.html'\n\n\nThis is not openfile, but maybe still helps :)"], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://www.example.com/index.html", "text": "http://www.example.com/index.html", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}], [{"text": ["not that I know of."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["but you can parse it easy enough like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["url = 'http://example.com/somefile.zip'print url.split('/')[-1]"], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "url = 'http://example.com/somefile.zip'print url.split('/')[-1]", "childNum": 2, "tag": "pre", "childList": [{"text": "url = 'http://example.com/somefile.zip'", "tag": "code"}, {"text": "http://example.com/somefile.zip", "tag": "a"}]}, {"text": "url = 'http://example.com/somefile.zip'", "childNum": 1, "tag": "code", "childList": [{"text": "http://example.com/somefile.zip", "tag": "a"}]}, {"href": "http://example.com/somefile.zip", "text": "http://example.com/somefile.zip", "childNum": 0, "tag": "a", "childList": []}]}]]