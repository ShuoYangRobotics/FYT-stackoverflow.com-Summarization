[[{"text": ["A partial type (it doesn't have to be a class; structs and interfaces can be partial too) is basically a single type which has its code spread across multiple files."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "partial type", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/wa80x488.aspx"}]}, {"text": ["The main use for this is to allow a code generator (e.g.", "a Visual Studio designer) to \"own\" one file, while hand-written code is put in another."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I've no idea whether Python/Perl have the same capabilities, I'm afraid."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The c# partial class has been already explained here so I'll just cover the python part.", "You can use multiple inheritance to elegantly distribute the definition of a class."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class A_part1:\n    def m1(self):\n        print \"m1\"\n\nclass A_part2:\n    def m2(self):\n        print \"m2\"\n\nclass A(A_part1, A_part2):\n    pass\n\na = A()\na.m1()\na.m2()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A partial class is simply a class that's contained in more than one file.", "Sometimes it's so that one part can be machine-generated, and another part user-edited."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I use them in C# when I'm making a class that's getting a bit too large.", "I'll put the accessors and constructors in one file, and all of the interesting methods in a different file."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In Perl, you'd simply have two (or more) files that each declare themselves to be in a package:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["(main program)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n use MyClass;\n</code>\n</pre>\n", "senID": 4}, {"text": ["(in MyClass.pm)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n use MyClassOtherStuff;\n    package MyClass;\n    # [..class code here...]\n</code>\n</pre>\n", "senID": 6}, {"text": ["(in MyClassOtherStuff.pm)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n package MyClass;\n    # [...rest of code here...]\n</code>\n</pre>\n", "senID": 8}], [{"text": ["The concept of partial types have already been explained."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This can be done in python.", "As an example, do the following in a python shell."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class A(object):\n    pass\n\nobj = A()\n\ndef _some_method(self):\n    print self.__class__\nA.identify = _some_method\n\nobj.identify()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Because python is a dynamic language you don't need a concept like partial class.", "In python is possible to extend object with functionality in runtime so it possible to break class declaration into different files"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["A Partial type is a type whose declaration is separated across multiple files.", "It makes sense to use them if you have a big class, which is hard to handle and read for a typical developer, to separate that class definition in separate files and to put in each file a logically separated section of code (for instance all public methods and proprieties in one file, private in other, db handling code in third and so on..)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["No you don't have the same syntactical element in Python. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Python also has meta classes but that is more like a template class than a partial class.", "A good example of meta class usage is the Django ORM.", "All of your table models inherit from a base model class which also gets functionality included from a meta class.", "It is a pretty cool concept that enables an active record like pattern (is it full active record?", ")."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]