[[{"text": ["Maybe you could catch the exception raised by the CSV reader.", "Something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n filename = \"my.csv\"\nreader = csv.reader(open(filename))\ntry:\n    for row in reader:\n        print 'Row read with success!', row\nexcept csv.Error, e:\n    sys.exit('file %s, line %d: %s' % (filename, reader.line_num, e))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or you could use next():"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "next()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n while True:\n    try: \n        print reader.next()\n    except csv.Error:\n        print \"Error\"\n    except StopIteration:\n        print \"Iteration End\"\n        break\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The Django community has addressed Python CSV import issues, so it might be worth searching for CSV import there, or posting a question.", "Also, you could edit the offending line directly in the CSV file before trying the import."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "searching for CSV import", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groups.google.co.uk/group/django-users/search?group=django-users&q=csv+import&qt_g=Search+this+group"}]}], [{"text": ["You need (always) to say EXACTLY what is the error message that you got.", "Please edit your question."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Probably this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import csv; csv.reader(\"\\x00\").next()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n_csv.Error: line contains NULL byte\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["The csv module is not 8-bit clean; see the docs: \"\"\"Also, there are currently some issues regarding ASCII NUL characters.", "\"\"\""], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "the docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}, {"text": ["The error message is itself in error: it should be \"NUL\", not \"NULL\" :-("], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If the last line in the file is empty, you won't get an exception, you'll merely get row == []."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "row == []", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Assuming the problem is one or more NULs in your file(s), you'll need to (1) speak earnestly to the creator(s) of your file(s) (2) failing that, read the whole file in (mode=\"rb\"), strip out the NUL(s), and feed fixed_text.splitlines() to the csv reader."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "fixed_text.splitlines()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["not really sure what you mean, but you can always check for existence with if"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; reader = csv.reader(\"file\")\n&gt;&gt;&gt; for r  in reader:\n...   if r: print r\n...\n</code>\n</pre>\n", "senID": 1}, {"text": ["if this is not what you want, you should describe your problem more clearly by showing examples of things that doesn't work for you, including sample file format and desired output you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If your problem is specific to the last line being empty, you can use numpy.genfromtxt (or the old matplotlib.mlab.csv2rec)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $: cat &gt;csv_file.txt\nfoo,bar,baz\nyes,no,0\nx,y,z\n\n\n\n$:\n$: ipython\n&gt;&gt;&gt; from numpy import genfromtxt\n&gt;&gt;&gt; genfromtxt(\"csv_file.txt\", dtype=None, delimiter=',')\narray([['foo', 'bar', 'baz'],\n       ['yes', 'no', '0'],\n       ['x', 'y', 'z']], \n      dtype='|S3')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I don't have an answer, but I can confirm the problem, and that most answers posted don't work.", "You cannot catch this exception.", "You cannot test for if line.", "Maybe you could check for the NULL byte directly, but I'm not swift enough to do that...", "If it is always on the last line, you could of course skip that."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "if line", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n import csv\nFH = open('data.csv','wb')\nline1 = [97,44,98,44,99,10]\nline2 = [100,44,101,44,102,10]\nfor n in line1 + line2:\n    FH.write(chr(n))\nFH.write(chr(0))\nFH.close()\nFH = open('data.csv')\nreader = csv.reader(FH)\nfor line in reader:\n    if '\\0' in line:  continue\n    if not line:  continue\n    print line\n\n$ python script.py \n['a', 'b', 'c']\n['d', 'e', 'f']\nTraceback (most recent call last):\n  File \"script.py\", line 11, in &lt;module&gt;\n    for line in reader:\n_csv.Error: line contains NULL byte\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could try cleaning the file as you read it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def nonull(stream):\n    for line in stream:\n        yield line.replace('\\x00', '')\n\nf = open(filename)\nreader = csv.reader(nonull(f))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Assuming, of course, that simply ignoring NULL characters will work for you!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]