[[{"text": ["Isn't that what Anders' second example does?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Anders' second example", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "#13844"}]}, {"text": ["In 2.5 there's also a string-escape encoding you can apply:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "string-escape", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mystring = r\"This is \\n a test \\r\"\n&gt;&gt;&gt; mystring.decode('string-escape')\n'This is \\n a test \\r'\n&gt;&gt;&gt; print mystring.decode('string-escape')\nThis is \n a test \n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Well, I think you might have missed the r or miscounted the backslashes..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"\\\\n\" == r\"\\n\"\n\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; mystring = r\"This is \\\\n a test \\\\r\"\n&gt;&gt;&gt; p = re.compile( r\"[\\\\][\\\\](.)\" )\n&gt;&gt;&gt; print p.sub( r\"\\\\\\1\", mystring )\nThis is \\n a test \\r\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which, if I understood is what was requested."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I suspect the more common request is this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {'n':'\\n', 'r':'\\r', 'f':'\\f'}\n&gt;&gt;&gt; p = re.compile(r\"[\\\\]([nrfv])\")\n&gt;&gt;&gt; print p.sub(lambda mo: d[mo.group(1)], mystring)\nThis is \\\n a test \\\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["The interested student should also read Ken Thompson's Reflections on Trusting Trust\", wherein our hero uses a similar example to explain the perils of trusting compilers you haven't bootstrapped from machine code yourself."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Reflections on Trusting Trust\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cm.bell-labs.com/who/ken/trust.html"}]}], [{"text": ["Your example doesn't solve the problem.", "It takes:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n This is \\\\n a test \\\\r\n</code>\n</pre>\n", "senID": 1}, {"text": ["and outputs"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n This is \\\\n a test \\\\r\n</code>\n</pre>\n", "senID": 3}, {"text": ["I would like to output, instead,"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n This is \\n a test \\r\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You are being tricked by Python's representation of the result string.", "The Python expression:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 'This is \\\\n a test \\\\r'\n</code>\n</pre>\n", "senID": 1}, {"text": ["represents the string"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n This is \\n a test \\r\n</code>\n</pre>\n", "senID": 3}, {"text": ["which is I think what you wanted.", "Try adding 'print' in front of each of your p.sub() calls to print the actual string returned instead of a Python representation of the string."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mystring = r\"This is \\n a test \\r\"\n&gt;&gt;&gt; mystring\n'This is \\\\n a test \\\\r'\n&gt;&gt;&gt; print mystring\nThis is \\n a test \\r\n</code>\n</pre>\n", "senID": 5}], [{"text": ["The idea is that I'll read in an escaped string, and unescape it (a feature notably lacking from Python, which you shouldn't need to resort to regular expressions for in the first place).", "Unfortunately I'm not being tricked by the backslashes..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Another illustrative example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mystring = r\"This is \\n ridiculous\"\n&gt;&gt;&gt; print mystring\nThis is \\n ridiculous\n&gt;&gt;&gt; p = re.compile( r\"\\\\(\\S)\" )\n&gt;&gt;&gt; print p.sub( 'bloody', mystring )\nThis is bloody ridiculous\n&gt;&gt;&gt; print p.sub( r'\\1', mystring )\nThis is n ridiculous\n&gt;&gt;&gt; print p.sub( r'\\\\1', mystring )\nThis is \\1 ridiculous\n&gt;&gt;&gt; print p.sub( r'\\\\\\1', mystring )\nThis is \\n ridiculous\n</code>\n</pre>\n", "senID": 2}, {"text": ["What I'd like it to print is"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n This is \nridiculous\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Mark; his second example requires every escaped character thrown into an array initially, which generates a KeyError if the escape sequence happens not to be in the array.", "It will die on anything but the three characters provided (give \\v a try), and enumerating every possible escape sequence every time you want to unescape a string (or keeping a global array) is a really bad solution.", "Analogous to PHP, that's using preg_replace_callback() with a lambda instead of preg_replace(), which is utterly unnecessary in this situation."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "preg_replace_callback()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "preg_replace()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I'm sorry if I'm coming off as a dick about it, I'm just utterly frustrated with Python.", "This is supported by every other regular expression engine I've ever used, and I can't understand why this wouldn't work."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Thank you for responding; the string.decode('string-escape') function is precisely what i was looking for initially.", "If someone has a general solution to the regex backreference problem, feel free to post it and I'll accept that as an answer as well."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "string.decode('string-escape')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]