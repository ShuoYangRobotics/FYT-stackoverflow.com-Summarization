[[{"text": ["For a \"sparse list\" you could use a dict instead:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n mylist = {}\nmylist[12] = 'a'\n</code>\n</pre>\n", "senID": 1}, {"text": ["etc.", "If you want an actual list (initialize it with [], not (), of course!-) you need to fill the un-set slots to _some_thing, e.g.", "None, by a little auxiliary function or by subclassing list."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "[]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "not", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You'll have to pre-fill it with something (e.g.", "0 or None) before you can index it:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "0", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n myList = [None] * 100  # Create list of 100 'None's\nmyList[12] = 'a'  # etc.\n</code>\n</pre>\n", "senID": 1}, {"text": ["Alternatively, use a dict instead of a list, as Alex Martelli suggested."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Alex Martelli suggested", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/869778/populating-a-list-array-by-index-in-python/869805#869805"}]}], [{"text": ["Not without populating the other locations in the list with something (like None or an empty string).", "Trying to insert an element into a list using the code you wrote would result in an IndexError."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "IndexError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["There's also mylist.insert, but this code:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "mylist.insert", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n myList.insert(12,'a')\n</code>\n</pre>\n", "senID": 2}, {"text": ["would just insert 'a' at the first unoccupied location in the list (which would be 0 using your example)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["So, as I said, there has to be something in the list at indexes 0-11 before you can insert something at myList[12]."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "myList[12]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you don't know the size of the list ahead of time, you could use try/except and then Extend the list in the except:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n L = []\ndef add(i, s):\n    try:\n        L[i] = s\n    except IndexError:\n        L.extend([None]*(i-len(L)+1))\n        L[i] = s\n\nadd(12, 'a')\nadd(22, 'b')\n</code>\n</pre>\n", "senID": 1}, {"text": ["----- Update ---------------------------------------------\nPer tgray's comment: If it is likely that your code will throw an Exception most of the time, you should check the length of the List every time, and avoid the Exceptions:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "----- Update ---------------------------------------------", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "most of the time", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n L = []\ndef add(i, s):\n    size = len(L)\n    if i &gt;= size:\n        L.extend([None]*(i-size+1))\n        L[i] = s\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here's a quick list wrapper that will auto-expand your list with zeros if you attempt to assign a value to a index past it's length."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class defaultlist(list):\n\n   def __setitem__(self, index, value):\n      l = len(self)\n      if index &gt;= l:\n         self.extend(0 for _ in range(l, index+1))\n\n      list.__setitem__(self, index, value)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now you can do this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = defaultlist([1,2,3])\n&gt;&gt;&gt; a[1] = 5\n[1,5,3]\n&gt;&gt;&gt; a[5] = 10\n[1,5,3,0,0,10]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n #programmer\n#thabethe nkosinathi\nfrom math import*\n#mark=[]\n\nmark=[20][3]\n\nstud=[20]\n\ntesttol=[3]\n\nstudave=[20]\n\ntestave=[3]\n\nfor j in range(3):\n\n        for i in range(20):\n\n                mrk[i][j]=int(raw_input(\"please enter mark for student\"))\n\nfor  i in range(20):\n\n        studtot[i]=0\n\nfor j in range(3):\n\n        tsttot[j]=0\n\nfor i in range(20):\n\n        for j in range(3):\n\n                studtot[i]=studtot[i]+mrk[i][j]\n\n                tsttot[j]= tsttot[j]+mrk[i][j]\n\nfor j in range(3):\n\n        testave[i]=testave[i]/20\n\nfor i in range(20):\n\n        studave[i]=studave[i]/3\n\nprint \"studave[i]\",studave[i] ,\"\u00e4nd\" ,testave[i]\n\nfor i in range(20):\n\n        for j in range(3):\n\n                print mark[i][j]\n\n        print \"studave[i]\",studave[i]\n\nprint \"the haedings of tje test average\"\n\nfor j in range(3):\n\n        print testave[i]\n\n\n\n#now i am sorting the marks of the student\n\nn=20\n\nfor tst in range(3):\n\n        for i in range(n-1):\n\n                for j in range(n):\n\n                        if mark[i][tst]&lt;mark[j][tst]:\n\n                                for k in range(3):\n\n                                        tmp=mrk[i][k]\n\n                                        mark[i][k]=mark[j][k]\n\n                                        mark[j][k]=tmp\n\n                                        #change name i and j\n\n                                tmp1=name[i]\n\n                                name[i]=name[j]\n\n                                name[j]=tmp1\n\n                                #swap student average\n\n                                tmp=studave[i]\n\n                                studave[i]=studave[j]\n\n                                studave[j]=tmp\n\n                print \"the headinns for test\"\n\n                for i in range(20):\n\n                        print name[i],name[i] and mark[i][tst]\n\n\n\n              #the erro list out of range\n</code>\n</pre>\n", "senID": 0}]]