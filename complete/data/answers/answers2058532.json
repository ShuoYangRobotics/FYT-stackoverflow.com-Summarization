[[{"text": ["Too much logic in views. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I used to write views that would struggle to fit in 40 lines.", "Now I consider more than 2-3 indentation levels, 10 or so LOC or a handful of inline comments in a view to be code smells."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The temptation is to write minimal models, figure out your url routing, then do everything else in the view.", "In reality, you should be using model methods, managers, template tags, context processors, class-based views with abstract base views... anything to keep the view code simple and readable.", "Logic around saving forms should go in Form.save().", "Logic repeated at the start or end of multiple views should go in decorators.", "Reused display logic should go in included templates, template tags, and filters."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "include", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"text": ["Long views are hard to read, understand, and debug.", "Learn to use the other tools in you toolkit any you'll save yourself and your team a lot of pain."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I tried to append items to my session without copying them out, appending the items, and then adding the list back to the session."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This mistake is on a NewbieMistakes page, so hopefully I'm in good company."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "NewbieMistakes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.djangoproject.com/wiki/NewbieMistakes"}]}, {"text": ["This is the correct way to do it, in case anyone is curious."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "correct", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n sessionlist = request.session['my_list']\nsessionlist.append(new_object)\nrequest.session['my_list'] = sessionlist\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Not splitting stuff up into multiple applications.", "It's not so much about reusability as it is about having a dozen models, and over 100 views in one app, it's damned unreadable.", "Plus I like to be able to scan my urls.py file easily to see where a URL points, when I have 100 URLs that gets harder."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I think the biggest problem is that people try to code as if this were Java/C: They try to create overly generic applications that need never be changed when future requirements change (which is necessary for Java/C because those apps aren't so easy to change/redesign).", "What results is a hideously complicated application, which is inflexible and impossible to maintain."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's just not necessary in Django: just write for today's requirements, build reusable apps with defined, specific tasks and make changes when needed.", "More and more often I find myself trying to write things as simply as possible, avoiding overly complicated designs at all costs."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Not using raw_id fields for a key to 10000+ objects, then wondering why visiting the Admin brings a server to its knees"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [], [{"text": ["Worst facepalm moment...returning an unlimited query, which happened to be several hundred thousand rows long.", "It was in a rarely used bit of code, so didn't happen often, but when it did it brought down the server. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Always make sure your query results are limited, i.e."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n results = MyModel.query.all()[:100]\n</code>\n</pre>\n", "senID": 2}, {"text": ["not:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n results = MyModel.query.all()\n</code>\n</pre>\n", "senID": 4}, {"text": ["or use an iterator:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n for result in MyModel.query.iterator():\n</code>\n</pre>\n", "senID": 6}], [{"text": ["My worst mistake was using absolute imports like &lt;project_name&gt;.&lt;app_name&gt;.models rather than &lt;app_name&gt;.models.", "This way when I made a branch and wanted to check it out in different directory (like having  and -stable of my project), it wouldn't run.", "I managed to revert in one project and use only relative imports in one project, but in another, larger one, we have to stick with it (we have there both absolute and relative).", "I won't make this mistake again."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "&lt;project_name&gt;.&lt;app_name&gt;.models", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "&lt;app_name&gt;.models", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["I've experienced a worst practice : use something else that the default id as primary key of model. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It looked as a good idea but it caused some problems in the administration web site and it was difficult to restore the id as primary key on an existing database."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I think that there is no specific case that are specific enough to cause these problems.", "I recommend to keep the id of your model as it is by default."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["See http://stackoverflow.com/questions/2055784/what-is-the-best-approach-to-change-primary-keys-in-an-existing-django-app for details"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://stackoverflow.com/questions/2055784/what-is-the-best-approach-to-change-primary-keys-in-an-existing-django-app", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2055784/what-is-the-best-approach-to-change-primary-keys-in-an-existing-django-app"}]}], [{"text": ["I first and fore most mistake start writing python code without reading PEP.", "The worst thing i would quote are "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["NOTE: Things I am quoting here are DONT'S"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "DONT'S", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": [], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n foo       =  bar\n\nfoobar    =  bar\n\nfoobarbuz =  bar\n</code>\n</pre>\n", "senID": 3}, {"text": [], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n foo = \"foo\"\nbar = \"bar\"\nfoobar = foo + bar //string concat\n</code>\n</pre>\n", "senID": 5}, {"text": ["3 "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n foo = [1,2,3,4,5,6]\nfoo_ = []\nfor bar in foo:\n  foo_.append(bar)\n</code>\n</pre>\n", "senID": 7}, {"text": [], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["writing import statements with project name"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n from projectname.appname.models import model\n</code>\n</pre>\n", "senID": 10}, {"text": [], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Trying to use view like normal python functions"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Update: or having too much logic in the view rather moving something to the helper(utils), I dint mean here its a bad practice to make a redirect, There are people who write helper functions in the view. "], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": [], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Function/method without a docstring and using namespace no way connected to the context. "], "childNum": 0, "tag": "p", "senID": 15, "childList": []}]]