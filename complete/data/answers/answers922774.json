[[{"text": ["You can check if a variable is a string or unicode string with"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n isinstance(some_object, basestring)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will return True for both strings and unicode strings"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You could do something like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if isinstance(some_object, basestring):\n    ...\nelif all(isinstance(item, basestring) for item in some_object): # check iterable for stringness of all items. Will raise TypeError if some_object is not iterable\n    ...\nelse:\n    raise TypeError # or something along that line\n</code>\n</pre>\n", "senID": 5}, {"text": ["Stringness is probably not a word, but I hope you get the idea"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["You can use type function"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; type('/dev/null')\n&lt;type 'str'&gt;\n&gt;&gt;&gt; type(['/dev', '/null'])\n&lt;type 'list'&gt;\n&gt;&gt;&gt; type('/dev/null') is str\nTrue\n&gt;&gt;&gt; type(['/dev', '/null']) is str\nFalse\n&gt;&gt;&gt; type('/dev/null') is list\nFalse\n&gt;&gt;&gt; type(['/dev', '/null']) is list\nTrue\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Check the type with isinstance(arg, basestring)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Type checking:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def func(arg):\n    if not isinstance(arg, (list, tuple)):\n        arg = [arg]\n    # process\n\nfunc('abc')\nfunc(['abc', '123'])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Varargs:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def func(*arg):\n    # process\n\nfunc('abc')\nfunc('abc', '123')\nfunc(*['abc', '123'])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Have you considered varargs syntax?", "I'm not really sure if this is what you're asking, but would something like this question be along your lines?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "varargs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "this question", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/836387/how-can-i-tell-if-a-python-variable-is-a-string-or-a-list/836406#836406"}]}], [{"text": ["isinstance is an option:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [2]: isinstance(\"a\", str)\nOut[2]: True\n\nIn [3]: isinstance([], str)\nOut[3]: False\n\nIn [4]: isinstance([], list)\nOut[4]: True\n\nIn [5]: isinstance(\"\", list)\nOut[5]: False\n</code>\n</pre>\n", "senID": 1}]]