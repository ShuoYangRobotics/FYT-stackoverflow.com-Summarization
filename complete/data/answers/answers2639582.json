[[{"text": ["Intead of \\w+ use below.", "Word character (\\w) doesn't include a dash.", "It only includes [a-zA-Z_0-9]."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [\\w-]+\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; re.search('(?&lt;=v=)[\\w-]+', 'http://www.youtube.com/watch?v=AIiMa2Fe-ZQ').group()\n'AIiMa2Fe-ZQ'\n</code>\n</pre>\n", "senID": 0}, {"text": ["\\w is a short-hand for [a-zA-Z0-9_] in python2.x, you'll have to use re.A flag in py3k.", "You quite clearly have additional character in that videoid, i.e., hyphen.", "I've also removed redundant escape backslashes from the lookbehind."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "\\w", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[a-zA-Z0-9_]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "re.A", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["/(?", ":/v/|/watch\\?v=|/watch#!v=)([A-Za-z0-9_-]+)/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "/(?:/v/|/watch\\?v=|/watch#!v=)([A-Za-z0-9_-]+)/", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Explain the RE"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Explain the RE", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rick.measham.id.au/paste/explain.pl?regex=%28%3F%3A%2Fv%2F%7C%2Fwatch%5C%3Fv%3D%7C%2Fwatch%23%21v%3D%29%28%5BA-Za-z0-9_-%5D%2B%29"}]}, {"text": ["There are three alternate YouTube formats: /v/[ID] and watch?v= and the new AJAX watch#!v= This RE captures all three.", "There is also new YouTube URL for user pages that is of the form /user/[user]?content={complex URI} This is not captured here by any regex... "], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "/v/[ID]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "watch?v=", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "watch#!v=", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["I don't know the pattern for youtube hashes, but just include the \"-\" in the possibilities as it is not considered an alpha:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nid = re.search('(?&lt;=\\?v\\=)[\\w-]+', 'http://www.youtube.com/watch?v=AIiMa2Fe-ZQ')\nprint id.group(0)\n</code>\n</pre>\n", "senID": 1}, {"text": ["I have edited the above because as it turns out:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.search(\"[\\w|-]\", \"|\").group(0)\n'|'\n</code>\n</pre>\n", "senID": 3}, {"text": ["The \"|\" in the character definition does not act as a special character but does indeed match the \"|\" pipe.", "My apologies."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Use the urlparse module instead of regex for such kind of things."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import urlparse\n\nparsed_url = urlparse.urlparse(url)\nif parsed_url.netloc.find('youtube.com') != -1 and parsed_url.path == '/watch':\n    video = urlparse.parse_qs(parsed_url.query).get('v', None)\n\n    if video is None:\n        video = urlparse.parse_qs(parsed_url.fragment.strip('!')).get('v', None)\n\n    if video is not None:\n        print video[0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: Updated for the upcoming new youtube url format."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["I'd try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; a = re.compile(r'.*(\\-\\w+)$')\n&gt;&gt;&gt; a.search('http://www.youtube.com/watch?v=AIiMa2Fe-ZQ').group(1)\n'-ZQ'\n</code>\n</pre>\n", "senID": 1}]]