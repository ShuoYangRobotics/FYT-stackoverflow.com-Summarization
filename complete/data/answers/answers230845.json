[[{"text": ["Have a look at the pexpect module.", "It is designed to deal with interactive programs, which seems to be your case."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pexpect", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.noah.org/wiki/Pexpect"}]}, {"text": ["Oh, and remember that hard-encoding root's password in a shell or python script is potentially a security hole :D"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Use subprocess.", "Call Popen() to create your process and use communicate() to send it text.", "Sorry, forgot to include the PIPE.."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "subprocess", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-subprocess.html"}]}, {"code": "<pre>\n<code>\n from subprocess import Popen, PIPE\n\nproc = Popen(['server', 'stop'], stdin=PIPE)\n\nproc.communicate('password')\n</code>\n</pre>\n", "senID": 1}, {"text": ["You would do better do avoid the password and try a scheme like sudo and sudoers.", "Pexpect, mentioned elsewhere, is not part of the standard library."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n import pexpect\nchild = pexpect.spawn('server stop')\nchild.expect_exact('Password:')\n\nchild.sendline('password')\n\nprint \"Stopping the servers...\"\n\nindex = child.expect_exact(['Server processes successfully stopped.', 'Server is not running...'], 60)\nchild.expect(pexpect.EOF)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Did the trick!", "Pexpect rules!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Should be able to pass it as a parameter.", "something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n commands.getoutput('server stop -p password')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This seems to work better:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import popen2\n\n(stdout, stdin) = popen2.popen2('server stop')\n\nstdin.write(\"password\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["But it's not 100% yet.", "Even though \"password\" is the correct password I'm still getting su: Sorry back from the csh script when it's trying to su to root."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["To avoid having to answer the Password question in the python script I'm just going to run the script as root.", "This question is still unanswered but I guess I'll just do it this way for now."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["add input= in proc.communicate() make it run, for guys who like to use standard lib"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["from subprocess import Popen, PIPE"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["proc = Popen(['server', 'stop'], stdin=PIPE)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["proc.communicate(input='password')"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "input=", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]