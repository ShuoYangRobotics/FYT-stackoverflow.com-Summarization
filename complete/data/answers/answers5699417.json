[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall(r'\\d+|[a-z]+', 'xyz123')\n['xyz', '123']\n</code>\n</pre>\n", "senID": 0}], [{"text": ["For example, using the re module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; a = ['xyz123','ABCDE345','pqRst678']\n&gt;&gt;&gt; regex = '(\\D+)(\\d+)'\n&gt;&gt;&gt; for item in a:\n...    m = re.match(regex, item)\n...    (a, b) = m.groups()\n...    print a, b\n\nxyz 123\nABCDE 345\npqRst 678\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you don't want to use regex, then you can do something like this.", "Note that I have not tested this so there could be a bug or typo somewhere."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list = [\"xyz123\", \"abcde345\", \"pqrst678\"]\nnewlist = []\nfor item in list:\n    for char in range(0, len(item)):\n        if item[char].isnumeric():\n            newlist.append([item[:char], item[char:]])\n            break\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use the regular expression module re:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}, {"code": "<pre>\n<code>\n import re\ndef splitEntry(entry):\n    firstDecMatch = re.match(r\"\\d+$\", entry)\n    alpha, numeric = \"\",\"\"\n    if firstDecMatch:\n        pos = firstDecMatch.start(0)\n        alpha, numeric = entry[:pos], entry[pos:]\n    else # no decimals found at end of string\n        alpha = entry\n    return (alpha, numeric)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that the regular expression is `\\d+$', which should match all decimals at the end of the string.", "If the string has decimals in the first part, it will not count those, e.g: xy3zzz134 -> \"xy3zzz\",\"134\".", "I opted for that because you say you are expecting filenames, and filenames can include numbers.", "Of course it's still a problem if the filename ends with numbers."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Another non-re answer:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [''.join(x[1]) for x in itertools.groupby('xyz123', lambda x: x.isalpha())]\n['xyz', '123']\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; [re.findall(r'(.*?)(\\d+$)',x)[0] for x in ['xyz123','ABCDE345','pqRst678']]\n[('xyz', '123'), ('ABCDE', '345'), ('pqRst', '678')]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I don't think its that difficult without re"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s=\"xyz123\"\n&gt;&gt;&gt; for n,i in enumerate(s):\n...   if i.isdigit(): x=n ; break\n...\n&gt;&gt;&gt; [ s[:x], s[x:] ]\n['xyz', '123']\n\n&gt;&gt;&gt; s=\"abcde345\"\n&gt;&gt;&gt; for n,i in enumerate(s):\n...   if i.isdigit(): x=n ; break\n...\n&gt;&gt;&gt; [ s[:x], s[x:] ]\n['abcde', '345']\n</code>\n</pre>\n", "senID": 1}]]