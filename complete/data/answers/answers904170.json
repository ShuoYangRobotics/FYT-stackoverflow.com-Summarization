[[{"text": ["According to the first line of the script, #!/usr/bin/python, you are calling the Python interpreter at /usr/bin/python (which is most likely the one that ships with Mac OS X).", "You have to change that path to the path where you installed your Python 3 interpreter (likely /usr/local/bin/python or /opt/local/bin/python); or you can just change that line to read #!/usr/bin/env python, which will call the python listed first in your PATH variable (which seems to be the newer version you installed)."], "childNum": 8, "tag": "p", "senID": 0, "childList": [{"text": "#!/usr/bin/python", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "/usr/bin/python", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "/usr/local/bin/python", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "/opt/local/bin/python", "childNum": 0, "tag": "code", "childList": []}, {"text": "or", "childNum": 0, "tag": "em", "childList": []}, {"text": "#!/usr/bin/env python", "childNum": 0, "tag": "code", "childList": []}, {"text": "python", "childNum": 0, "tag": "code", "childList": []}, {"text": "PATH", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Firstly, the recommended shebang line is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will make sure the python interpreter that is invoked when you ./foo.py is the same interpreter that is invoked when you invoke python from the command line."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "./foo.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["From your description, I suspect that if you did:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n which python\n</code>\n</pre>\n", "senID": 4}, {"text": ["It would not give you /usr/bin/python.", "It would give you something else, which is where the python 3 interpreter lives.", "You can either modify your shebang line to the above, or replace the path to the python interpreter with the path returned by which."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "/usr/bin/python", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "which", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Try which python.", "I will tell you which python interpreter is used in your environment.", "If it is not /usr/bin/python like in the script, then your suspicion is confirmed."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "which python", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "/usr/bin/python", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["run 'which python' - if this gives a different answer than /usr/bin/python, change #!/usr/bin/python to have that path instead."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It's very possibly what you suspect, that the shebang line is calling the older version.", "Two things you might want to check:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1) what version is the interpreter at /usr/bin/python:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n /usr/bin/python -V\n</code>\n</pre>\n", "senID": 2}, {"text": ["2) where is the python 3 interpreter you installed:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n which python\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you get the correct one from the command line, then replace your shebang line with this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n</code>\n</pre>\n", "senID": 6}, {"text": ["Addendum: You could also replace the older version of python with a symlink to python 3, but beware that any major OS X updates (ie: 10.5.6 to 10.5.7) will likely break this:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Addendum:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n sudo mv /usr/bin/python /usr/bin/python25\nsudo ln -s /path/to/python/3/python /usr/bin/python\n</code>\n</pre>\n", "senID": 8}], [{"text": ["It may be a bit odd providing a Perl script to answer a Python question, but it works for Python just as well as it does for Perl.", "This is a script called 'fixin', meaning 'fix interpreter'.", "It changes the shebang line to the correct string for your current PATH."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "fixin", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n #!/Users/jleffler/perl/v5.10.0/bin/perl\n#\n#   @(#)$Id: fixin.pl,v 1.3 2003/03/11 21:20:08 jleffler Exp $\n#\n#   FIXIN: from Programming Perl\n#   Usage: fixin [-s] [file ...]\n\n# Configuration\n$does_hashbang = 1; \t# Kernel recognises #!\n$verbose = 1;   \t\t# Verbose by default\n\n# Construct list of directories to search.\n@absdirs = reverse grep(m!^/!, split(/:/, $ENV{'PATH'}, 999));\n\n# Process command line arguments\nif ($ARGV[0] eq '-s')\n{\n    shift;\n    $verbose = 0;\n}\ndie \"Usage: $0 [-s] [file ...]\\n\" unless @ARGV || !-t;\n\n@ARGV = '-' unless @ARGV;\n\n# Process each file.\nFILE: foreach $filename (@ARGV)\n{\n    open(IN, $filename) || ((warn \"Can't process $filename: $!\\n\"), next);\n    $_ = &lt;IN&gt;;\n    next FILE unless /^#!/;\t\t# Not a hash/bang file\n\n    chop($cmd = $_);\n    $cmd =~ s/^#! *//;\n    ($cmd, $arg) = split(' ', $cmd, 2);\n    $cmd =~ s!^.*/!!;\n\n    # Now look (in reverse) for interpreter in absolute path\n    $found = '';\n    foreach $dir (@absdirs)\n    {\n    \tif (-x \"$dir/$cmd\")\n    \t{\n    \t\twarn \"Ignoring $found\\n\" if $verbose &amp;&amp; $found;\n    \t\t$found = \"$dir/$cmd\";\n    \t}\n    }\n\n    # Figure out how to invoke interpreter on this machine\n    if ($found)\n    {\n    \twarn \"Changing $filename to $found\\n\" if $verbose;\n    \tif ($does_hashbang)\n    \t{\n    \t\t$_ = \"#!$found\";\n    \t\t$_ .= ' ' . $arg if $arg ne '';\n    \t\t$_ .= \"\\n\";\n    \t}\n    \telse\n    \t{\n    \t\t$_ = &lt;&lt;EOF;\n:\neval 'exec $found $arg -S \\$0 \\${1+\"\\$@\"}'\n    if \\$running_under_some_shell;\nEOF\n    \t}\n    }\n    else\n    {\n    \twarn \"Can't find $cmd in PATH, $filename unchanged\\n\" if $verbose;\n    \tnext FILE;\n    }\n\n    # Make new file if necessary\n    if ($filename eq '-') { select(STDOUT); }\n    else\n    {\n    \trename($filename, \"$filename.bak\") ||\n    \t\t((warn \"Can't modify $filename\"), next FILE);\n    \topen(OUT, \"&gt;$filename\") ||\n    \t\tdie \"Can't create new $filename: $!\\n\";\n    \t($def, $ino, $mode) = stat IN;\n    \t$mode = 0755 unless $dev;\n    \tchmod $mode, $filename;\n    \tselect(OUT);\n    }\n\n    # Print the new #! line (or the equivalent) and copy the rest of the file.\n    print;\n    while (&lt;IN&gt;)\n    {\n    \tprint;\n    }\n    close IN;\n    close OUT;\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["The code is derived from a script of the same name in the original Camel Book ('Programming Perl', first edition).", "This copy has been hacked a bit since then - and should be hacked some more.", "But I use it routinely -- indeed, I just copied it from one Mac to another, and since I've not installed Perl 5.10.0 on the second, I ran:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ perl fixin fixin\nChanging fixin to /usr/bin/perl\n$\n</code>\n</pre>\n", "senID": 3}, {"text": ["Thereby changing from the private install Perl to the standard one."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Exercise for the reader - rewrite the script in Python."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]