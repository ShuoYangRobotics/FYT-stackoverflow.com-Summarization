[[{"text": ["The overloading of the constructor (or any other function) is not allowed in python.", "So you cannot define two __init__ functions for your class."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You can have a look to this post or this one"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "this post", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/312695/python-problem-with-overloaded-constructors"}, {"href": "http://stackoverflow.com/questions/141545/overloading-init-in-python", "text": "this one", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["The main ideas are to use default values or to create 'alternate constructors' or to check the number and the type of your args in order to choose which method to apply."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "or", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "or", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n def __init__(self, **args):\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then args will be a dictionary containing all the parameters.", "So you will be able to make the difference between"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "args", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n connection = fileDetails(host='localhost',usr=\"root\",pwd=\"\",database='bulsorbit')\n</code>\n</pre>\n", "senID": 5}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n connection = fileDetails(connection=\"...\",sql=\"...\",path=\"...\")\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Define a single constructor with optional arguments."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self,host='host',usr='user',pwd='pwd',database='db',connection=None,sql=None,path=None):\n  if connection:\n    # however you want to store your connection\n    self.sql=sql\n    self.path=path\n  else:\n    self.host=host\n    self.usr.usr\n    self.pwd=pwd\n    self.database=database\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or something of the sort."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["In Python the functions in a class are stored internally in a dictionary (remember that constructors are just regular functions), and so only one function of the same name can exist.", "Therefore, when defining more than one functions with the same name the last one will overwrite all the previously defined ones and you'll end up with only one function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I suggest you look into keyword and default arguments to see the proper way of achieving what you want."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "keyword and default arguments", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html#more-on-defining-functions"}]}], [{"text": ["maybe you can use len() to choose the right branch:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n    def __init__(self, *args):\n        if len(args) == 4: # network\n            self.host = args[0]\n            self.user = args[1]\n            self.pwd = args[2]\n            self.database = args[3]\n        elif len(args) == 3: # database\n            self.connection = mysql_connection() # maybe it's args[0]?\n            self.sql = args[1]\n            self.path = args[2]\n\ndef main():\n\n    foo = Foo('localhost',\"root\",\"\",'bulsorbit')\n    print foo.host\nif __name__ == \"__main__\":\n    main()\n# output\n# localhost\n</code>\n</pre>\n", "senID": 1}, {"text": ["but, sine Explicit is better than implicit.", "maybe this is workable too:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n    def __init__(self, initdata):\n        if initdata['style'] == 'network':\n            self.host = initdata['host']\n            self.usr = initdata['usr']\n            self.pwd = initdata['pwd']\n            self.database = initdata['database']\n        elif initdata[style] == 'database':\n            self.connection = mysql_connection()\n            self.sql = initdata['sql']\n            self.path = initdata['path']\ndef main():\n    data = dict({'style': 'network',\n                 'host': 'localhost',\n                 'usr': 'root',\n                 'pwd': '',\n                 'database': 'database'})\n    foo = Foo(data)\n    print foo.host\nif __name__ == \"__main__\":\n    main()\n# output\n# localhost\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here's one way to achieve this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class FileDetails:\n    def __init__(self, *args, **kwargs):\n        if len(args) == 3:\n            self.conn, self.sql, self.path = args\n        elif len(args) == 4:\n            self.host, self.usr, self.pw, self.db = args\n        else:\n            # handle appropriately\n\nfd1 = FileDetail('connstring', 'select * from foo', '/some/path')\nprint fd1.conn, fd1.sql, fd1.path\n\nfd2 = FileDetail('host', 'user', 'pass', 'somedb')\nprint fd2.conn, fd2.usr, fd2.pw, fd2.db\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, you should do the appropriate type checking and error handling in the constructor."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["On the side note: if you really, really, reallllllyyy must do JiP (Java in Python) then multiple dispatch methods are possible with some additional code eg.", "here and even beter: here byBDFL."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "are", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks/library/l-pydisp.html"}, {"href": "http://www.artima.com/weblogs/viewpost.jsp?thread=101605", "text": "here byBDFL", "childNum": 1, "tag": "a", "childList": [{"text": "BDFL", "tag": "em"}]}, {"text": "BDFL", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Personally I try to avoid using them. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]