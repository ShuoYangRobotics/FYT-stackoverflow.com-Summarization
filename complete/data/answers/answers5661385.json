[[{"text": ["This is not a complete answer but just a bunch of ideas.", "I wrote an installer for a client that incorporated some ideas that might be useful to you. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It was Linux only so I focussed on just that.", "We needed to ship specific custom versions of mySQL, lighttpd, python, memcached, a few 3rd party Python modules and some custom scripts.", "We needed to launch all these services without any problems and let the user control them using regular initscripts.", "It should work fine on a bunch of popular distros and therefore shouldn't rely on distro specific stuff. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["What I did was as follows. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The initscripts would simply chroot into the partition and start supervisord.", "It would then take care of launching all the services we cared about.", "Shutting down the application was simply a matter of connecting to running supervisord and running a command.", "We wrapped this in the initscript so that the user experience was UNIX like. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Now, we'd give clients the self extracting .run file.", "They'd run it, get asked a few questions and it would create a directory under /opt which contained our app and all it's dependencies.", "The init scripts would be modified to start our app on bootup and things would work as expected."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "run", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "/opt", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["I think step 4 gives you the freedom to install whatever you want, however you want so that things would work fine. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You could use Makeself which is just like a tar.gz, but produces a .sh which self-extracts and allows for execution of a custom install script (don't ask me about Windows).", "This avoids bundling an installed Python which almost certainly won't work - you can include an installer instead."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Makeself", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://megastep.org/makeself/"}]}, {"text": ["Your code and the dependencies developed by you should be included as packages created by sdist, which can be installed by PIP and easyinstall into a virtualenv based on your python.", "In your Manifest.in you can easily include only pyc files and everything else that is necessary and exclude py files so nobody sees your sources.", "Dependencies will be installed automatically by downloading them, but you can avoid that by including them in your archive, like your dependencies.", "Just put them into a directory and add \"-f file:path_to_your_directory\" to you PIP call."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I don't quite understand how your users end up using the program, so apologies if this isn't useful."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Have you looked at py2exe and py2app?", "They'll let you create a much more obfuscated executable on Windows and OS X that might be even easier.", "Fewer dependencies and things to go wrong."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "py2exe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.py2exe.org/"}, {"text": "py2app", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://svn.pythonmac.org/py2app/py2app/trunk/doc/index.html"}]}, {"text": ["We deployed an internal, company wide app with py2exe, and it was trivial.", "Regardless of what other pythons the user had or didn't have our script was an easy wizard installer, and worked reliably.", "It included a number of Python and C libraries we had to bundle up, along with a python interpreter.", "However we weren't trying to hide the contents, just make it easy."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I am having the same issue, however most information i could find was only about python packages.", "I do not have a complete solution yet but, I have a few suggestions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This will vary depending on your target market.", "In specialized niche industries there is more variety in how stuff is distributed.", "In heavily commoditized areas I would expect native OS package (at least if I were a customer).", "I tend to take the quality of the deployment package as indicative of the quality of the software in general.", "I associate native OS packages as higher quality than other formats largely because the dependency information can be complete.", "This makes it easier to do some compliance testing and change management."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Native OS Packages"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Native OS Packages", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "For Unices consider creating native OS packages. They provide better integration and visibility with processes like compliance, change management, dependency management, etc. ", "tag": "none", "senID": 2}, {"text": "For OSX others have already suggested py2app.  You may also be able to leverage MacPorts package format or the Fink package format.", "tag": "none", "senID": 3}, {"text": "For Windows others have already suggested py2exe. ", "tag": "none", "senID": 4}]}, {"text": ["Relocation and Config Requirements"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Relocation and Config Requirements", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "Put your Python executable under ", "tag": "none", "senID": 6}, {"text": "Change the name of the Python executable to prevent confusion.  ie. ", "tag": "none", "senID": 7}, {"text": "Distribute the ", "tag": "none", "senID": 8}, {"text": "Install your libs in the correct location under ", "tag": "none", "senID": 9}]}, {"text": ["Shared Libraries"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "Shared Libraries", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "If I remember correctly you'll want to make sure you strip any ", "tag": "none", "senID": 11}, {"text": "The native OS packaging should help with any dependencies the shared libs require.", "tag": "none", "senID": 12}]}], [{"text": ["The proper way to do this (w/o shipping own Python) is to create Python Eggs, which then can be installed by Python package manager like easy_install or pip.", "The setup and install is performed by setup.py, which is just a Python script, so you can include all kinds of non-standard setup procedures if needed."], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "Python Eggs", "tag": "a", "pos": 0, "childList": [{"text": "Python Eggs", "tag": "strong"}], "childNum": 1, "href": "http://peak.telecommunity.com/DevCenter/PythonEggs"}, {"text": "Python Eggs", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "easy_install", "tag": "a", "pos": -1, "childList": [{"text": "easy_install", "tag": "code"}], "childNum": 1, "href": "http://pypi.python.org/pypi/setuptools"}, {"text": "easy_install", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "pip", "tag": "a", "pos": -1, "childList": [{"text": "pip", "tag": "code"}], "childNum": 1, "href": "http://pypi.python.org/pypi/pip"}, {"text": "pip", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "setup.py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["When using pip, it's easy to install eggs in virtualenv, which would make it isolated from user's Python installation (apart of the interpreter binary itself). "], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "pip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://pypi.python.org/pypi/virtualenv", "text": "virtualenv", "childNum": 1, "tag": "a", "childList": [{"text": "virtualenv", "tag": "strong"}]}, {"text": "virtualenv", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["For windows I am doing this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Actually, it is very easy to do, I am not sure what to add."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Edit: You can also use Portable Python for your bundled environment on Windows."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "http://www.portablepython.com/", "text": "Portable Python", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["As far as I can see Python is distributed via a msi file.", "It seems natural to me that you create a msi installer as well.", "To create msi files you can use e.g.", "the Windows Installer Extensions toolkit.", "If you create your own msi and include the other msi into yours then you will get into trouble to install the pyhthon package during your own msi installation routine since Windows does only allow one installation at a time.", "The easiest way would be to repackage the python msi into your own msi and distribute this one.", "You can decompile a msi into a xml file which can be used to create a new msi with dark which is part of the Windows Installer Extensions toolkit. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Windows Installer Extensions", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://www.tramontana.co.hu/wix/"}, {"text": "dark", "tag": "a", "pos": 6, "childList": [], "childNum": 0, "href": "http://wix.sourceforge.net/manual-wix3/dark.htm"}]}, {"text": ["If you did manage it to deploy the your whole suite via a tar file it should be possible to use a zip file on Windows as well if the pyhthon and your other stuff is xcopy deployable.", "When you must do some actions like setting registry keys, environment variables, creating shortcuts you should use msi since it was designed for this task.", "But be warned: Msi is a difficult topic.", "If you need to get something quick you should check how far you can get with a zip file and some scripts.", "A msi based installation will make servicing and patching much easier but to appreciate these advanced features you will need to invest some weeks to learn it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]