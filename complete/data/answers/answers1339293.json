[[{"text": ["Is DEBUG=False in settings.py?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If not Django will happily store all the SQL queries you make which adds up."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["See http://blog.mfabrik.com/2008/03/07/debugging-django-memory-leak-with-trackrefs-and-guppy/ .", "Short answer: if you're running django but not in a web-request-based format, you need to manually run db.reset_queries() (and of course have DEBUG=False, as others have mentioned).", "Django automatically does reset_queries() after a web request, but in your format, that never happens."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://blog.mfabrik.com/2008/03/07/debugging-django-memory-leak-with-trackrefs-and-guppy/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blog.mfabrik.com/2008/03/07/debugging-django-memory-leak-with-trackrefs-and-guppy/"}]}], [{"text": ["Have you tried gc.set_debug() ?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "gc.set_debug()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/gc.html#gc.set%5Fdebug"}]}, {"text": ["You need to ask yourself simple questions:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Am I using objects with ", "tag": "none", "senID": 2}, {"text": "Can I get reference cycles in my code? Can't we break these circles before getting rid of the objects?", "tag": "none", "senID": 3}]}, {"text": ["See, the main issue would be a cycle of objects containing __del__ methods:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "__del__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import gc\n\nclass A(object):\n    def __del__(self):\n        print 'a deleted'\n        if hasattr(self, 'b'):\n            delattr(self, 'b')\n\nclass B(object):\n    def __init__(self, a):\n        self.a = a\n    def __del__(self):\n        print 'b deleted'\n        del self.a\n\n\ndef createcycle():\n    a = A()\n    b = B(a)\n    a.b = b\n    return a, b\n\ngc.set_debug(gc.DEBUG_LEAK)\n\na, b = createcycle()\n\n# remove references\ndel a, b\n\n# prints:\n## gc: uncollectable &lt;A 0x...&gt;\n## gc: uncollectable &lt;B 0x...&gt;\n## gc: uncollectable &lt;dict 0x...&gt;\n## gc: uncollectable &lt;dict 0x...&gt;\ngc.collect()\n\n# to solve this we break explicitely the cycles:\na, b = createcycle()\ndel a.b\n\ndel a, b\n\n# objects are removed correctly:\n## a deleted\n## b deleted\ngc.collect()\n</code>\n</pre>\n", "senID": 5}, {"text": ["I would really encourage you to flag objects / concepts that are cycling in your application and focus on their lifetime: when you don't need them anymore, do we have anything referencing it?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Even for cycles without __del__ methods, we can have an issue:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "__del__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import gc\n\n# class without destructor\nclass A(object): pass\n\ndef createcycle():\n    # a -&gt; b -&gt; c \n    # ^         |\n    # ^&lt;--&lt;--&lt;--|\n    a = A()\n    b = A()\n    a.next = b\n    c = A()\n    b.next = c\n    c.next = a\n    return a, b, b\n\ngc.set_debug(gc.DEBUG_LEAK)\n\na, b, c = createcycle()\n# since we have no __del__ methods, gc is able to collect the cycle:\n\ndel a, b, c\n# no panic message, everything is collectable:\n##gc: collectable &lt;A 0x...&gt;\n##gc: collectable &lt;A 0x...&gt;\n##gc: collectable &lt;dict 0x...&gt;\n##gc: collectable &lt;A 0x...&gt;\n##gc: collectable &lt;dict 0x...&gt;\n##gc: collectable &lt;dict 0x...&gt;\ngc.collect()\n\na, b, c = createcycle()\n\n# but as long as we keep an exterior ref to the cycle...:\nseen = dict()\nseen[a] = True\n\n# delete the cycle\ndel a, b, c\n# nothing is collected\ngc.collect()\n</code>\n</pre>\n", "senID": 8}, {"text": ["If you have to use \"seen\"-like dictionaries, or history, be careful that you keep only the actual data you need, and no external references to it."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["I'm a bit disappointed now by set_debug, I wish it could be configured to output data somewhere else than to stderr, but hopefully that should change soon."], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "set_debug", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://bugs.python.org/issue5851", "text": "that should change soon", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["See this excellent blog post from Ned Batchelder on how they traced down real memory leak in HP's Tabblo.", "A classic and worth reading."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this excellent blog post from Ned Batchelder", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nedbatchelder.com/blog/200809/a%5Fserver%5Fmemory%5Fleak.html"}]}], [{"text": ["I think you should use different tools.", "Apparently, the statistics you got is only about GC objects (i.e.", "objects which may participate in cycles); most notably, it lacks strings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I recommend to use Pympler; this should provide you with more detailed statistics."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Pympler", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pympler/"}]}], [{"text": ["Try Guppy."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Guppy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://guppy-pe.sourceforge.net/"}]}, {"text": ["Basicly, you need more information or be able to extract some.", "Guppy even provides graphical representation of data."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Do you use any extension?", "They are a wonderful place for memory leaks, and will not be tracked by python tools."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]