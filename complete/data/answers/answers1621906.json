[[{"text": ["Here\u2019s another solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n span = 2\nwords = \"this-is-a-string\".split(\"-\")\nprint [\"-\".join(words[i:i+span]) for i in range(0, len(words), span)]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s=\"a-b-c-d-e-f-g-h-i-j-k-l\"         # use zip(*[i]*n)\n&gt;&gt;&gt; i=iter(s.split('-'))                # for the nth case    \n&gt;&gt;&gt; map(\"-\".join,zip(i,i))    \n['a-b', 'c-d', 'e-f', 'g-h', 'i-j', 'k-l']\n\n&gt;&gt;&gt; i=iter(s.split('-'))\n&gt;&gt;&gt; map(\"-\".join,zip(*[i]*3))\n['a-b-c', 'd-e-f', 'g-h-i', 'j-k-l']\n&gt;&gt;&gt; i=iter(s.split('-'))\n&gt;&gt;&gt; map(\"-\".join,zip(*[i]*4))\n['a-b-c-d', 'e-f-g-h', 'i-j-k-l']\n</code>\n</pre>\n", "senID": 0}, {"text": ["Sometimes itertools.izip is faster as you can see in the results"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import izip\n&gt;&gt;&gt; s=\"a-b-c-d-e-f-g-h-i-j-k-l\"\n&gt;&gt;&gt; i=iter(s.split(\"-\"))\n&gt;&gt;&gt; [\"-\".join(x) for x in izip(i,i)]\n['a-b', 'c-d', 'e-f', 'g-h', 'i-j', 'k-l']\n</code>\n</pre>\n", "senID": 2}, {"text": ["Here is a version that sort of works with an odd number of parts depending what output you desire in that case.", "You might prefer to trim the '-' off the end of the last element with .rstrip('-') for example."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "sort of", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "'-'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ".rstrip('-')", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import izip_longest\n&gt;&gt;&gt; s=\"a-b-c-d-e-f-g-h-i-j-k-l-m\"\n&gt;&gt;&gt; i=iter(s.split('-'))\n&gt;&gt;&gt; map(\"-\".join,izip_longest(i,i,fillvalue=\"\"))\n['a-b', 'c-d', 'e-f', 'g-h', 'i-j', 'k-l', 'm-']\n</code>\n</pre>\n", "senID": 4}, {"text": ["Here are some timings"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n $ python -m timeit -s 'import re;r=re.compile(\"[^-]+-[^-]+\");s=\"a-b-c-d-e-f-g-h-i-j-k-l\"' 'r.findall(s)'\n100000 loops, best of 3: 4.31 usec per loop\n\n$ python -m timeit -s 'from itertools import izip;s=\"a-b-c-d-e-f-g-h-i-j-k-l\"' 'i=iter(s.split(\"-\"));[\"-\".join(x) for x in izip(i,i)]'\n100000 loops, best of 3: 5.41 usec per loop\n\n$ python -m timeit -s 's=\"a-b-c-d-e-f-g-h-i-j-k-l\"' 'i=iter(s.split(\"-\"));[\"-\".join(x) for x in zip(i,i)]'\n100000 loops, best of 3: 7.3 usec per loop\n\n$ python -m timeit -s 's=\"a-b-c-d-e-f-g-h-i-j-k-l\"' 't=s.split(\"-\");[\"-\".join(t[i:i+2]) for i in range(0, len(t), 2)]'\n100000 loops, best of 3: 7.49 usec per loop\n\n$ python -m timeit -s 's=\"a-b-c-d-e-f-g-h-i-j-k-l\"' '[\"-\".join([x,y]) for x,y in zip(s.split(\"-\")[::2], s.split(\"-\")[1::2])]'\n100000 loops, best of 3: 9.51 usec per loop\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Regular expressions handle this easily:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\ns = \"aaaa-aa-bbbb-bb-c-ccccc-d-ddddd\"\nprint re.findall(\"[^-]+-[^-]+\", s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['aaaa-aa', 'bbbb-bb', 'c-ccccc', 'd-ddddd']\n</code>\n</pre>\n", "senID": 3}, {"text": ["Update for Nick D:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n n = 3\nprint re.findall(\"-\".join([\"[^-]+\"] * n), s)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n ['aaaa-aa-bbbb', 'bb-c-ccccc']\n</code>\n</pre>\n", "senID": 7}], [{"text": ["EDIT: The original code I posted didn't work.", "This version does:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I don't think you can split on every other one, but you could split on every - and join every pair."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n chunks = []\ncontent = \"this-is-a-string\"\nsplit_string = content.split('-')\n\nfor i in range(0, len(split_string) - 1,2) :\n    if i &lt; len(split_string) - 1:\n        chunks.append(\"-\".join([split_string[i], split_string[i+1]]))\n    else:\n        chunks.append(split_string[i])\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I think several of the already given solutions are good enough, but just for fun, I did this version:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def twosplit(s,sep):\n  first=s.find(sep)\n  if first&gt;=0:\n    second=s.find(sep,first+1)\n      if second&gt;=0:\n        return [s[0:second]] + twosplit(s[second+1:],sep)\n      else:\n        return [s]\n    else:\n      return [s]\n  print twosplit(\"this-is-a-string\",\"-\")\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n l = 'this-is-a-string'.split()\nnl = []\nss = \"\"\nc = 0\nfor s in l:\n   c += 1\n   if c%2 == 0:\n       ss = s\n   else:\n       ss = \"%s-%s\"%(ss,s)\n       nl.insert(ss)\n\nprint nl\n</code>\n</pre>\n", "senID": 0}]]