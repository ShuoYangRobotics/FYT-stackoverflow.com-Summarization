[[{"text": ["You could do something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class ValidationRule:\n   def __init__(self, **kwargs):\n      for (k, v) in kwargs.items():\n         setattr(self, k, v)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think somewhere on the stackoverflow I've seen such solution\nAnyway it can look like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class ValidationRule:\n    __allowed = (\"other\", \"same\", \"different\")\n    def __init__(self, **kwargs):\n        for k, v in kwargs.iteritems():\n            assert( k in self.__class__.__allowed )\n            setattr(self, k, v)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This may not be the cleanest way, but it works:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class ValidationRule: \n    def __init__(self, **kwargs): \n        self.__dict__.update(kwargs)\n</code>\n</pre>\n", "senID": 1}, {"text": ["I think I prefer ony's solution because it restricts available properties to keep you out of trouble when your input comes from external sources."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "ony's solution", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2535917/copy-kwargs-to-self/2535952#2535952"}]}], [{"code": "<pre>\n<code>\n class ValidationRule:\n   def __init__(self, **kwargs):\n      self.__dict__.update(kwargs)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can set your kwargs arguments by updating __dict__ attribute of the instance."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "kwargs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class ValidationRule:\n   def __init__(self, **kwargs):\n       self.__dict__.update(kwargs)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I found the above answers helpful and then refined:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyObj(object):\n    def __init__(self, key1=1, key2=2, key3=3):\n        for (k, v) in locals().iteritems():\n            if k != 'self':\n                setattr(self, k, v)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Test:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; myobj = MyObj(key1=0)\n&gt;&gt;&gt; print myobj.key1\n0\n</code>\n</pre>\n", "senID": 3}, {"text": ["And validation is also there:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; myobj = MyObj(key4=4)\nTypeError: __init__() got an unexpected keyword argument 'key4'\n</code>\n</pre>\n", "senID": 5}]]