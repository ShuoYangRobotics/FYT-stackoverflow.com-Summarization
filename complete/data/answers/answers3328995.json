[[{"text": ["'\\xe2' is one character, \\x is an escape sequence that's followed by a hex number and used to specify a byte literally.", "That means you have to specify the whole expression:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "'\\xe2'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\\x", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = '\\xe2hello'\n&gt;&gt;&gt; print s\n'\\xe2hello'\n&gt;&gt;&gt; s.replace('\\xe2', '')\n'hello'\n</code>\n</pre>\n", "senID": 1}, {"text": ["More information can be found in the Python docs."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Python docs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/lexical_analysis.html#string-literals"}]}], [{"text": ["You can use unicode(a, 'ascii', 'ignore') to remove all non-ascii characters in the string at once."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "unicode(a, 'ascii', 'ignore')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It helps here to understand the difference between a string literal and a string."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A string literal is a sequence of characters in your source code.", "When parsed and compiled by the Python interpreter, it produces a string, which is a sequence of characters in memory."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "string literal", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "source code", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "string", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "memory", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["For example, the string literal \" a \" produces the string a."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}, {"text": "\"", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["String literals can take a number of forms.", "All of these produce the same string a:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n \"a\"\n'a'\nr\"a\"\n\"\"\"a\"\"\"\nr'''a'''\n</code>\n</pre>\n", "senID": 4}, {"text": ["Source code is traditionally ASCII-only, but we'd like it to contain string literals that can produce characters beyond ASCII.", "To do this escapes can be used.", "For example, the string literal \"\\xe2\" produces a single-character string, with a character with integer value E2 hexadecimal, or 226 decimal."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "escapes", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "\"\\xe2\"", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["This explains the error about \"\\x\" being an invalid escape: the parser is expecting you to specify the hexadecimal value of a character."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "\"\\x\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["To detect if a string has any characters in a certain range, you can use a regex with a character class specifying the lower and upper bounds of the characters you don't want:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n if re.search(r\"[\\x90-\\xff]\", a):\n</code>\n</pre>\n", "senID": 8}], [{"text": ["I see other answers have done a good job in explaining your confusion with respect to '\\x', but while suggesting that you may not want to completely remove non-ASCII characters, have not provided a specific way to do other normalization beyond such removing."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "'\\x'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you want to obtain some \"reasonably close ASCII character\" (e.g., strip accents from letters but leave the underlying letter, &amp;c), this SO answer may help -- the code in the accepted answer, using only the standard Python library, is:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this SO answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/517923/what-is-the-best-way-to-remove-accents-in-a-python-unicode-string"}]}, {"code": "<pre>\n<code>\n import unicodedata\n\ndef strip_accents(s):\n   return ''.join(c for c in unicodedata.normalize('NFD', s)\n                  if unicodedata.category(c) != 'Mn')\n</code>\n</pre>\n", "senID": 2}, {"text": ["Of course, you'll need to apply this function to each string item in the list you mention in the title, e.g"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n cleanedlist = [strip_accents(s) for s in mylist]\n</code>\n</pre>\n", "senID": 4}, {"text": ["if all items in mylist are strings."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "mylist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Let's stand back and think about this a little bit ..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You're using nltk (natural language toolkit) to parse (presumably) natural language."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Your '\\xe2' is highly likely to represent U+00E2 LATIN SMALL LETTER A WITH CIRCUMFLEX (\u00e2).", "Your '\\xe3' is highly likely to represent U+00E3 LATIN SMALL LETTER A WITH TILDE (\u00e3)."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "'\\xe2'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "'\\xe3'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["They look like natural language letters to me.", "Are you SURE that you don't need them?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you want only to enter this pattern and avoid the error,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["you can try insert a + between \\ and x like here:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "+ between \\ and x", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n re.search('\\+x[0123456789abcdef]*',a)\n</code>\n</pre>\n", "senID": 2}]]