[[{"text": ["With performance issues it's always best to measure.", "Here are some timings:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = {}\n for i in xrange(4000000):\n     d[i] = None\n # 722ms\n\n d = dict(itertools.izip(xrange(4000000), itertools.repeat(None)))\n # 634ms\n\n dict.fromkeys(xrange(4000000))\n # 558ms\n\n s = set(xrange(4000000))\n dict.fromkeys(s)\n # Not including set construction 353ms\n</code>\n</pre>\n", "senID": 1}, {"text": ["The last option doesn't do any resizing, it just copies the hashes from the set and increments references.", "As you can see, the resizing isn't taking a lot of time.", "It's probably your object creation that is slow. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I tried :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = dict.fromkeys((range(4000000)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["It creates a dictionary with 4 000 000 entries in about 3 seconds.", "After that, setting values are really fast.", "So I guess dict.fromkey is definitly the way to go."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can try to separate key hashing from the content filling with dict.fromkeys classmethod.", "It'll create a dict of a known size with all values defaulting to either None or a value of your choice.", "After that you could iterate over it to fill with the values.", "It'll help you to time the actual hashing of all keys.", "Not sure if you'd be able significantly increase the speed though."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "dict.fromkeys", "tag": "a", "pos": 0, "childList": [{"text": "dict.fromkeys", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#dict.fromkeys"}, {"text": "dict.fromkeys", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["If your datas need/can be stored on disc perhaps you can store your datas in a BSDDB database or use Cpickle to load/store your dictionnary"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "BSDDB database", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/bsddb.html"}, {"href": "http://docs.python.org/library/pickle.html#module-cPickle", "text": "Cpickle", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["If you know C, you can take a look at dictobject.c and the Notes on Optimizing Dictionaries.", "There you'll notice the parameter PyDict_MINSIZE:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "dictobject.c", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/view/python/trunk/Objects/dictobject.c?revision=74197&view=markup"}, {"text": "the Notes on Optimizing Dictionaries", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://svn.python.org/view/python/trunk/Objects/dictnotes.txt?revision=53782&view=markup"}]}, {"text": ["This parameter is defined in dictobject.h.", "So you could change it when compiling Python but this probably is a bad idea."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "dictobject.h", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/view/python/trunk/Include/dictobject.h?revision=70546&view=markup"}, {"text": "could", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["Do you initialize all keys with new \"empty\" instances of the same type?", "Is it not possible to write a defaultdict or something that will create the object when it is accessed?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]