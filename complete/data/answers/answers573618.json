[[{"text": ["One solution that I have employed is to do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1) Create a custom management command, e.g. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "custom management command", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands"}]}, {"code": "<pre>\n<code>\n python manage.py my_cool_command\n</code>\n</pre>\n", "senID": 2}, {"text": ["2) Use cron to run my command at the required times."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["This is a simple solution that doesn't require installing a heavy AMQP stack.", "However there are nice advantages to using something like Celery, mentioned in the other answers.", "In particular, with Celery it is nice to not have to spread your application logic out into crontab files.", "However the cron solution works quite nicely for a small to medium sized application and where you don't want a lot of external dependencies."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Celery is a distributed task queue, built on AMQP (RabbitMQ).", "It also handles periodic tasks in a cron-like fashion.", "Depending on your app, it might be worth a gander."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Celery", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ask.github.com/celery/"}]}], [{"text": ["If you're using a standard OS, you use cron."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "cron", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://linux.die.net/man/8/cron"}]}, {"text": ["If you're using Windows, you use at."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "at", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://technet.microsoft.com/en-us/library/cc755618.aspx"}]}, {"text": ["Write a Django management command to "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Look at Django Poor Man's Cron which is a Django app that makes use of spambots, search engine indexing robots and alike to run scheduled tasks in approximately regular intervals"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See: http://code.google.com/p/django-poormanscron/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/django-poormanscron/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-poormanscron/"}]}], [{"text": ["Interesting new pluggable Django app: django-chronograph"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "django-chronograph", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-chronograph/"}]}, {"text": ["You only have to add one cron entry which acts as a timer, and you have a very nice Django admin interface into the scripts to run."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I personally use cron, but the Jobs Scheduling parts of django-commands-extension looks interesting."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Jobs Scheduling", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/django-command-extensions/wiki/JobsScheduling"}, {"href": "http://code.google.com/p/django-command-extensions/", "text": "django-commands-extension", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["If I understand right you need to schedule some tasks in django.", "best thing I fould these daysis this one:\nhttp://ask.github.com/celery/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://ask.github.com/celery/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://ask.github.com/celery/"}]}], [{"text": ["what do you think of this?", "https://github.com/reavis/django-cron"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "https://github.com/reavis/django-cron", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "https://github.com/reavis/django-cron"}]}], [{"text": ["Put the following at the top of your cron.py file:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\nimport os, sys\nsys.path.append('/path/to/') # the parent directory of the project\nsys.path.append('/path/to/project') # these lines only needed if not on path\nos.environ['DJANGO_SETTINGS_MODULE'] = 'myproj.settings'\n\n# imports and code below\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I just thought about this rather simple solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can add parameters but just adding parameters to the URL."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Tell me what you guys think."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["[Update] I'm now using runjob command from django-extensions instead of curl."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "[Update]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"href": "https://github.com/django-extensions/django-extensions", "text": "django-extensions", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["My cron looks something like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n @hourly python /path/to/project/manage.py runjobs hourly\n</code>\n</pre>\n", "senID": 5}, {"text": ["... and so on for daily, monthly, etc'.", "You can also set it up to run a specific job."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I find it more managable and a cleaner.", "Doesn't require mapping a URL to a view.", "Just define your job class and crontab and you're set."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Brian Neal's suggestion of running management commands via cron works well, but if you're looking for something a little more robust (yet not as elaborate as Celery) I'd look into a library like Kronos:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Kronos", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/jgorset/django-kronos"}]}, {"code": "<pre>\n<code>\n # app/cron.py\n\nimport kronos\n\n@kronos.register('0 * * * *')\ndef task():\n    pass\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you are a high-performance site and already using RabbitMQ here's a trick to get around cron:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Using AMQP to do cron-like scheduling"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Using AMQP to do cron-like scheduling", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.lshift.net/blog/2008/02/08/using-amqp-to-do-cron-like-scheduling"}]}], [{"text": ["after the part of code,I can write anything just like my views.py :)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #######################################\nimport os,sys\nsys.path.append('/home/administrator/development/store')\nos.environ['DJANGO_SETTINGS_MODULE']='store.settings'\nfrom django.core.management impor setup_environ\nfrom store import settings\nsetup_environ(settings)\n#######################################\n</code>\n</pre>\n", "senID": 1}, {"text": ["from\nhttp://www.cotellese.net/2007/09/27/running-external-scripts-against-django-models/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.cotellese.net/2007/09/27/running-external-scripts-against-django-models/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cotellese.net/2007/09/27/running-external-scripts-against-django-models/"}]}], [{"text": ["I had something similar with your problem today."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I didn't wanted to have it handled by the server trhough cron (and most of the libs were just cron helpers in the end)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So i've created a scheduling module and attached it to the init ."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "init", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["It's not the best approach, but it helps me to have all the code in a single place and with its execution related to the main app."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["We've open-sourced what I think is a structured app.", "that Brian's solution above alludes too.", "Would love any / all feedback!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["https://github.com/tivix/django-cron"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "https://github.com/tivix/django-cron", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/tivix/django-cron"}]}, {"text": ["It comes with one management command:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ./manage.py runcrons\n</code>\n</pre>\n", "senID": 3}, {"text": ["That does the job.", "Each cron is modeled as a class (so its all OO) and each cron runs at a different frequency and we make sure same cron type doesn't run in parallel (in case crons themselves take longer time to run than their frequency!"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Thanks!"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]