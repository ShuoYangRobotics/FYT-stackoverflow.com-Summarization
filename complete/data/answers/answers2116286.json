[[{"text": ["The same way as you'd do it by hand:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n seen = set()\nrepeated = set()\nfor l in list_of_lists:\n  for i in set(l):\n    if i in seen:\n      repeated.add(i)\n    else:\n      seen.add(i)\n</code>\n</pre>\n", "senID": 1}, {"text": ["By the way, here's the one liner (without counting the import) that some people were seeking (should be less efficient than the other approach)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from itertools import *\nreduce(set.union, (starmap(set.intersection, combinations(map(set, ll), 2))))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Cleanest way would probably be to use reduce:    "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def findCommon(L):\n    def R(a, b, seen=set()):\n        a.update(b &amp; seen)\n        seen.update(b)\n        return a\n    return reduce(R, map(set, L), set())\n\nresult = findCommon([[1,2,3], [3,4,5], [5,6,7], [7,8,9]])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Result is a set, but just do list(result) if you really need a list."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "list(result)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["reference: http://docs.python.org/library/stdtypes.html#set"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#set", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#set"}]}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\nll = [[1,2,3], [3,4,5], [5,6,7], [7,8,9]]\nls = [set(l) for l in ll]\n\nsu = ls[0]  #union\nssd = ls[0] #symmetric_difference\nfor s in ls[1:]:\n  su = su.union(s)\n  ssd = ssd.symmetric_difference(s)\n\nresult = su.difference(ssd)\nprint list(result)\n</code>\n</pre>\n", "senID": 1}, {"text": ["=>"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [3, 5, 7]\n</code>\n</pre>\n", "senID": 3}, {"text": ["revise and adopt FP,"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n ll = [[1,2,3], [3,4,5], [5,6,7], [7,8,9]]\n\nu = reduce(set.union, map(set, ll))\nsd = reduce(set.symmetric_difference, map(set, ll))\nprint u - sd\n</code>\n</pre>\n", "senID": 5}, {"text": ["=>"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n [3, 5, 7]\n</code>\n</pre>\n", "senID": 7}], [{"text": ["You can use a dictionary to get the count of each"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\n\ninit_list = [[1,2,3], [3,4,5], [5,6,7], [7,8,9]]\n#defaultdict, every new key will have a int(0) as default value\nd = defaultdict(int)\nfor values in init_list:\n  #Transform each list in a set to avoid false positives like [[1,1],[2,2]]\n  for v in set(values):\n    d[v] += 1\n\n#Get only the ones that are more than once\nfinal_list = [ value for value,number in d.items() if number &gt; 1 ]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; sets = [[1,2,3], [3,4,5], [5,6,7], [7,8,9]]\n&gt;&gt;&gt; seen = set()\n&gt;&gt;&gt; duplicates = set()\n&gt;&gt;&gt; \n&gt;&gt;&gt; for subset in map(set, sets) :\n...     duplicates |= (subset &amp; seen)\n...     seen |= subset\n... \n&gt;&gt;&gt; print(duplicates)\nset([3, 5, 7])\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}, {"text": ["I tried for a one-line answer with map/reduce, but can't quite get it yet."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can use a set see http://docs.python.org/library/stdtypes.html#set"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#set", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#set"}]}], [{"code": "<pre>\n<code>\n l=[[1,2,3], [3,4,5], [5,6,7], [7,8,9]]\nd={}\nfor x in l:\n    for y in x:\n        if not d.has_key(y):\n            d[y]=0\n        d[y]+=1\n[x for x,y in d.iteritems() if y&gt;1]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data = [[1,2,3], [3,4,5], [5,6,7], [7,8,9], [1,2,3]]\n\nres = set()\n\nfor i in data:\n    for j in data:\n        if i is not j:\n            res |= set(i) &amp; set(j)\n\nprint res\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is my go:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n seen = set()\nresult = set()\nfor s in map(set, [[1,2,3], [3,4,5], [5,6,7], [7,8,9]]):\n    result.update(s &amp; seen)\n    seen.update(s)\nprint result\n</code>\n</pre>\n", "senID": 1}, {"text": ["This prints:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n set([3, 5, 7])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["flatten, sort, 1 for loop comparing numbers before and after"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]