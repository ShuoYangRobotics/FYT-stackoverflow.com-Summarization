[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; u'a\u3042\u00e4'.encode('ascii', 'ignore')\n'a'\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Decode the string you get back, using either the charset in the the appropriate meta tag in the response or in the Content-Type header, then encode."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "meta", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Content-Type", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Can we get the actual value used for link?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "link", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In addition, we usually encounter this problem here when we are trying to .encode() an already encoded byte string.", "So you might try to decode it first as in"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": ".encode()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n html = urllib.urlopen(link).read()\nunicode_str = html.decode(&lt;source encoding&gt;)\nencoded_str = unicode_str.encode(\"utf8\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["As an example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n html = '\\xa0'\nencoded_str = html.encode(\"utf8\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["Fails with"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n UnicodeDecodeError: 'ascii' codec can't decode byte 0xa0 in position 0: ordinal not in range(128)\n</code>\n</pre>\n", "senID": 6}, {"text": ["While:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n html = '\\xa0'\ndecoded_str = html.decode(\"windows-1252\")\nencoded_str = html.encode(\"utf8\")\n</code>\n</pre>\n", "senID": 8}, {"text": ["Succeeds without error.", "Do note that \"windows-1252\" is something I used as an example.", "I got this from chardet and it had 0.5 confidence that it is right!", "(well, as given with a 1-character-length string, what do you expect) You should change that to the encoding of the byte string returned from .urlopen().read() to what applies to the content you retrieved."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "example", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": ".urlopen().read()", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["Another problem I see there is that the .encode() string method returns the modified string and does not modify the source in place.", "So it's kind of useless to have self.response.out.write(html) as html is not the encoded string from html.encode (if that is what you were originally aiming for)."], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": ".encode()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self.response.out.write(html)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["As Ignacio suggested, check the source webpage for the actual encoding of the returned string from read().", "It's either in one of the Meta tags or in the ContentType header in the response.", "Use that then as the parameter for .decode()."], "childNum": 2, "tag": "p", "senID": 11, "childList": [{"text": "read()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".decode()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Do note however that it should not be assumed that other developers are responsible enough to make sure the header and/or meta character set declarations match the actual content.", "(Which is a PITA, yeah, I should know, I was one of those before)."], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "was", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["You wrote \"\"\"I assume that means the HTML contains some wrongly-formed attempt at unicode somewhere.", "\"\"\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The HTML is NOT expected to contain any kind of \"attempt at unicode\", well-formed or not.", "It must of necessity contain Unicode characters encoded in some encoding, which is usually supplied up front ... look for \"charset\". "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You appear to be assuming that the charset is UTF-8 ... on what grounds?", "The \"\\xA0\" byte that is shown in your error message indicates that you may have a single-byte charset e.g.", "cp1252."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you can't get any sense out of the declaration at the start of the HTML, try using chardet to find out what the likely encoding is."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "chardet", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://chardet.feedparser.org/"}]}, {"text": ["Why have you tagged your question with \"regex\"?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Update after you replaced your whole question with a non-question:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n html = urllib.urlopen(link).read()\n# html refers to a str object. To get unicode, you need to find out\n# how it is encoded, and decode it.\n\nhtml.encode(\"utf8\",\"ignore\")\n# problem 1: will fail because html is a str object;\n# encode works on unicode objects so Python tries to decode it using \n# 'ascii' and fails\n# problem 2: even if it worked, the result will be ignored; it doesn't \n# update html in situ, it returns a function result.\n# problem 3: \"ignore\" with UTF-n: any valid unicode object \n# should be encodable in UTF-n; error implies end of the world,\n# don't try to ignore it. Don't just whack in \"ignore\" willy-nilly,\n# put it in only with a comment explaining your very cogent reasons for doing so.\n# \"ignore\" with most other encodings: error implies that you are mistaken\n# in your choice of encoding -- same advice as for UTF-n :-)\n# \"ignore\" with decode latin1 aka iso-8859-1: error implies end of the world.\n# Irrespective of error or not, you are probably mistaken\n# (needing e.g. cp1252 or even cp850 instead) ;-)\n</code>\n</pre>\n", "senID": 6}], [{"text": ["I use this helper function throughout all of my projects.", "If it can't convert the unicode, it ignores it.", "This ties into a django library, but with a little research you could bypass it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.utils import encoding\n\ndef convert_unicode_to_string(x):\n    \"\"\"\n    &gt;&gt;&gt; convert_unicode_to_string(u'ni\\xf1era')\n    'niera'\n    \"\"\"\n    return encoding.smart_str(x, encoding='ascii', errors='ignore')\n</code>\n</pre>\n", "senID": 1}, {"text": ["I no longer get any unicode errors after using this."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you have a string line, you can use the .encode([encoding], [errors='strict']) method for strings to convert encoding types."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "line", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".encode([encoding], [errors='strict'])", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["line = 'my big string'"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "line = 'my big string'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["line.encode('ascii', 'ignore')"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "line.encode('ascii', 'ignore')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For more information about handling ASCII and unicode in Python, this is a really useful site: http://www.amk.ca/python/howto/unicode"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://www.amk.ca/python/howto/unicode", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.amk.ca/python/howto/unicode"}]}], [{"text": ["As an extension to Ignacio Vazquez-Abrams' answer"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; u'a\u3042\u00e4'.encode('ascii', 'ignore')\n'a'\n</code>\n</pre>\n", "senID": 1}, {"text": ["It is sometimes desirable to remove accents from characters and print the base form.", "This can be accomplished with"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import unicodedata\n&gt;&gt;&gt; unicodedata.normalize('NFKD', u'a\u3042\u00e4').encode('ascii', 'ignore')\n'aa'\n</code>\n</pre>\n", "senID": 3}, {"text": ["You may also want to translate other characters (such as punctuation) to their nearest equivalents, for instance the RIGHT SINGLE QUOTATION MARK unicode character does not get converted to an ascii APOSTROPHE when encoding."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print u'\\u2019'\n\u2019\n&gt;&gt;&gt; unicodedata.name(u'\\u2019')\n'RIGHT SINGLE QUOTATION MARK'\n&gt;&gt;&gt; u'\\u2019'.encode('ascii', 'ignore')\n''\n# Note we get an empty string back\n&gt;&gt;&gt; u'\\u2019'.replace(u'\\u2019', u'\\'').encode('ascii', 'ignore')\n\"'\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["Although there are more efficient ways to accomplish this.", "See this question for more details Where is Python&#39;s &quot;best ASCII for this Unicode&quot; database?"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Where is Python&#39;s &quot;best ASCII for this Unicode&quot; database?", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/816285/where-is-pythons-best-ascii-for-this-unicode-database"}]}], [{"text": ["For broken consoles like cmd.exe and HTML output you can always use:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "cmd.exe", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n my_unicode_string.encode('ascii','xmlcharrefreplace')\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will preserve all the non-ascii chars while making them printable in pure ASCII and in HTML."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]]