[[{"text": ["#FFFFFF, so simple"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "#FFFFFF", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["every single char has 0..F range.", "That is 0..15.", "So two chars is 0..(16*16-1) -&gt; 0-255"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "0..F", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "0..15", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "0..(16*16-1) -&gt; 0-255", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["To convert between formats just think about:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["#AABBCC are three values AA BB CC.", "Every single value represents a channel (red, green, blue) that can span from 0 to 255 or from 0 to FF or from 0.0 to 1.0"], "childNum": 8, "tag": "p", "senID": 3, "childList": [{"text": "#AABBCC", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "AA BB CC", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "255", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}, {"text": "FF", "childNum": 0, "tag": "code", "childList": []}, {"text": "0.0", "childNum": 0, "tag": "code", "childList": []}, {"text": "1.0", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["if you have for example #123456 you can do"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n 12 -&gt; 1*16 + 2 = .. (result in range 0-255)\n34 -&gt; 3*16 + 4 = ..\n56 -&gt; 5*16 + 6 = ..\n</code>\n</pre>\n", "senID": 5}, {"text": ["in general a two digits hex number composed by XY can be converted to an decimal value by multiplying X by 16 and adding Y, taking care of converting digits that are over 9 (A, B, C, D, E, F) to their counterparts (10, 11, 12, 13, 14, 15).", "So for example AC would be A*16 + C = 10*16 + 12."], "childNum": 5, "tag": "p", "senID": 6, "childList": [{"text": "XY", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "X", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Y", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "AC", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "A*16 + C = 10*16 + 12", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["(To be really precise a n digit hex number is converted by multiplying the i-th digit from right by 16^i and adding all of them together)"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["From 00 to FF.", "It is hexacecimal for 0 to 255."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n RRGGBB    RRGGBB\n#000000 - #FFFFFF\n Black  -  White\n\nRR = 00 - FF or 0 - 255\nGG = 00 - FF or 0 - 255\nBB = 00 - FF or 0 - 255\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Those are hexidecimal representations of 16 bit numbers for the Red Green and Blue channels.", "So 0 to 255 for each channel.", "FF (hex) is equal to 255 decimal."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["As others have said, 00-FF."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "00", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "FF", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Here's an overview of HTML colors in hex notation:\nhttp://www.w3schools.com/Html/html_colors.asp"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://www.w3schools.com/Html/html_colors.asp", "text": "http://www.w3schools.com/Html/html_colors.asp", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["You can find out how to convert from hex to decimal here:\nhttp://en.wikipedia.org/wiki/Hexadecimal"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://en.wikipedia.org/wiki/Hexadecimal", "text": "http://en.wikipedia.org/wiki/Hexadecimal", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["And, for Python:\nhttp://stackoverflow.com/questions/214359/converting-hex-to-rgb-and-vice-versa/214657#214657"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/214359/converting-hex-to-rgb-and-vice-versa/214657#214657", "text": "http://stackoverflow.com/questions/214359/converting-hex-to-rgb-and-vice-versa/214657#214657", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Or search for \"convert hex decimal\""], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "convert hex decimal", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["This is hexadecimal (base 16) notation, where each digit goes from 0 to 15 (F)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The range of 0 to FF in hexadecimal is 0 to 255 in decimal."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you want to convert from one to another, there are plenty of sites that will do that for you - like this one."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this one", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.yellowpipe.com/yis/tools/hex-to-rgb/color-converter.php"}]}], [{"text": ["Using Python?", "Try this: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n c = (0., 1., 0.)\nrgb = '#%02X%02X%02X' % (c[0] * 255, c[1] * 255, c[2] * 255)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The min and max values for colors in the #AABBCC format is #000000...#FFFFFF, or 0...16777215 in decimal.", "Each individual color component ranges from #00..#FF, which is 0..255 in decimal and requires 8-bits or 1 byte of storage.", "For #AAABBBCCC the range of components is #000-#FFF or 0..4095 each and they require 12-bits or 1\u00bd bytes of storage."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Not sure what the range of values is for N in (N, N, N), but if it's 0..1 then these two functions will convert from it to either 8-bit component #AABBCC or 12-bit component #AAABBBCCC color values (without rounding).", "Note that the output of each function is a string with the value shown after each print statement below.", "ITOH8 and ITOH12 are constant lookup tables used by the corresponding function."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "ITOH8", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "ITOH12", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n ITOH8 = [('%02X' % i) for i in range(0x100)]\n\nrgbconv8 = lambda c: ''.join( ['#'] + [ITOH8[int(v*0xFF)] for v in c] )\n\nprint rgbconv8((0., 1., 0.)) #00FF00\nprint rgbconv8((.2, .6, .75)) #3399BF\n\nITOH12 = [('%03X' % i) for i in range(0x1000)]\n\nrgbconv12 = lambda c: ''.join( ['#'] + [ITOH12[int(v*0xFFF)] for v in c] )\n\nprint rgbconv12((0., 1., 0.)) #000FFF000\nprint rgbconv12((.2, .6, .75)) #333999BFF\n</code>\n</pre>\n", "senID": 2}]]