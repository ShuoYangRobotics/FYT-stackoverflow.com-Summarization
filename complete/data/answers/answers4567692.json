[[{"text": ["Multiple-inheritance ain't frowned upon.", "What is frowned upon is \"implementation inheritance\" (also known as \"code reuse\"), because it leads to the unsolvable \"diamond problem\".", "And because, well, code-reuse really hasn't much to do with OO."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What you want to do can be solved using multiple inheritance (and, say, delegation if you need to do \"code reuse\")."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n interface A {\n\n    void move();\n\n}\n\ninterface B {\n\n    void eat();\n\n}\n\ninterface C {\n\n    void think();\n\n}\n\nclass One implements A { ... }\n\nclass Two implements B { ... }\n\nclass Three implements B, C { ... }\n</code>\n</pre>\n", "senID": 2}, {"text": ["Any OOA/OOD using multiple inheritance can be trivially translated to Java.", "The part where you say that you need to change the \"ability\" all the time is a bit scary: if, say, a Car can move(), why would it suddenly need to be able to think()?"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "Car", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "move()", "childNum": 0, "tag": "code", "childList": []}, {"text": "think()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["It depends on your actual use case, but have you already considered decorators?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://en.wikipedia.org/wiki/Decorator_pattern"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://en.wikipedia.org/wiki/Decorator_pattern", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Decorator_pattern"}]}], [{"text": ["You can use AspectJ's mixin syntax fairly easily to emulate multiple inheritance (and at compile time too).", "First, declare an interface for the functionality you want to mixin:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n public interface A{\n    String getSomethingForA();\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["then define an annotation which you can use to signify that you want the mixin applied to a given class:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n public @interface WithA {}\n</code>\n</pre>\n", "senID": 3}, {"text": ["then add the annotation to the class you want to use:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n @WithA\npublic class MyClass {}\n</code>\n</pre>\n", "senID": 5}, {"text": ["then, to actually add some functionality:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n @Aspect\npublic class MixinA {\n    public static class AImpl implements A{\n        public String getSomethingForA() {\n            return \"it worked!\";\n        } \n    }\n\n    @DeclareMixin(\"@WithA *\")\n    public static A get() {\n        return new AImpl();\n    }\n}\n</code>\n</pre>\n", "senID": 7}, {"text": ["You'll need to use the aspectj jars and run the aspects as part of your compile process, but this lets you create truly modularized functionality and then forcibly merge it into your classes later.", "To access your class with the new functionality, do the following:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n MyClass obj = new MyClass();\n((A)obj).getSomethingForA();\n</code>\n</pre>\n", "senID": 9}, {"text": ["You can apply the same annotation to another class and cast it as well:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n @WithA\n@WithB //let's pretend we created this with some other functionality\npublic class AnotherClass {}\n\nAnotherClass anotherObj = new AnotherClass();\n((A)anotherObj).getSomethingForA();\n((B)anotherObj).andSetSomethingElseForB(\"something else\");\n</code>\n</pre>\n", "senID": 11}], [{"text": ["Multiple inheritance is almost always a bad idea, as its effects can usually be achieved through other mechanisms.", "Based upon your description of the problem, it sounds like you want to"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If 2 behaviors are tightly coupled (say A &amp; B), define an interface that implements those two atomic interfaces (public interface CombinedAandB extends A, B) "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can define the abilities in interfaces and implement them in your classes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In java you don't have multiple inheritance, instead you can implement multiple interfaces."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So your class 1 will implement interface A and B.", "Class 2 will implement interface A, B and C. Class 3 will implement B and C."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["If what you need is interface inheritance, then as mentioned before, you can always implement multiple interfaces."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "interface", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["If you're looking for implementation inheritance, you're somewhat out of luck.", "The best solution is probably to use delegation \u2014 replace the extra superclasses with fields, and implement methods that just delegate to those fields.", "It does require writing a lot of repetitive delegation methods, but it's rather unavoidable in Java (without resorting to AspectJ or other bytecode-munging tricks; careful, this way madness lies \u2026)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "implementation", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["This is a bit tangential, but you can have python code running in Java via Jython (http://www.jython.org/).", "This addresses the porting to Java part, not the solving multiple inheritance part (I think you need to determine which is relevant)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]