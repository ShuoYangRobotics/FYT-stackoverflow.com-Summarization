[[{"text": ["I like to name it with the plural of whatever's in it.", "So, for example, if I have a list of names, I call it names, and then I can write:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "names", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n for name in names:\n</code>\n</pre>\n", "senID": 1}, {"text": ["which I think looks pretty nice.", "But generally for your own sanity you should name your variables so that you can know what they are just from the name.", "This convention has the added benefit of being type-agnostic, just like Python itself, because names can be any iterable object such as a tuple, a dict, or your very own custom (iterable) object.", "You can use for name in names on any of those, and if you had a tuple called names_list that would just be weird."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "names", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "for name in names", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "names_list", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["(Added from a comment below:) There are a few situations where you don't have to do this.", "Using a canonical variable like i to index a short loop is OK because i is usually used that way.", "If your variable is used on more than one page worth of code, so that you can't see its entire lifetime at once, you should give it a sensible name."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n goats\n</code>\n</pre>\n", "senID": 0}, {"text": ["Variable names should refer what they are not just what type they are. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Python stands for readability.", "So basically you should name variables that promote readability.", "See PEP20.You should only have a general rule of consistency and should break this consistency in the following situations:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PEP20", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020"}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["Also, use the function naming rules: lowercase with words separated by underscores as necessary to improve readability.", "All this is taken from PEP 8"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "PEP 8", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["Why not just use unsorted?", "I prefer to have names, which communicate ideas, not data types.", "There are special cases, where the type of a variable is important.", "But in most cases, it's obvious from the context - like in your case.", "Quick sort is obviously working on a list."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "unsorted", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["What about L?\n"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "L", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I use a naming convention based on descriptive name and type.", "(I think I learned this from a Jeff Atwood blog post but I can't find it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n goats_list\nfor goat in goats_list : \n    goat.bleat()\n\ncow_hash = {}\n</code>\n</pre>\n", "senID": 1}, {"text": ["etc."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Anything more complicated (list_list_hash_list) I make a class."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Just use lst, or seq (for sequence)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "lst", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "seq", "childNum": 0, "tag": "code", "childList": []}]}]]