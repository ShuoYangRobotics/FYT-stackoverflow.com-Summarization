[[{"text": ["The most concise way to make \"a generic object to which you can assign/fetch attributes\" is probably:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b = lambda:0\n</code>\n</pre>\n", "senID": 1}, {"text": ["As most other answers point out, there are many other ways, but it's hard to beat this one for conciseness (lambda:0 is exactly the same number of characters as object()...;-)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "lambda:0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "object()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["From the Python Official Documentation:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Official Documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#odds-and-ends"}]}, {"code": "<pre>\n<code>\n class Employee:\n    pass\n\njohn = Employee() # Create an empty employee record\n\n# Fill the fields of the record \njohn.name = 'John Doe' \njohn.dept = 'computer lab' \njohn.salary = 1000\n</code>\n</pre>\n", "senID": 1}, {"text": ["This seems natural and simple: Pythonic.", "Remember the Zen!", "\"Simple is better than complex\" (number 3) and \"If the implementation is easy to explain, it may be a good idea\" (number 11)"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Remember the Zen!", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}, {"text": ["In addition, a struct is nothing but a class with public members (i.e., struct{}; and class{public:}; are the exact same thing (in, say, C++)).", "Shouldn't you consider this and avoid artificial constructs in your Python program?", "Python is supposed to be readable, maintainable, and easy to understand."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "struct", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "class", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "struct{};", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "class{public:};", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Try this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; status=type('status',(object,),{})()\n&gt;&gt;&gt; status.foo=3\n&gt;&gt;&gt; status.foo\n3\n</code>\n</pre>\n", "senID": 1}, {"text": ["You don't have to give the class a name if you don't want to"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; status=type('',(object,),{})()\n&gt;&gt;&gt; status.__class__.__name__\n''\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I had the same question once.", "I asked it in a mailing list, and Alex Martelli pointed out that object is the basis of all inheritance in Python; if object() created a class instance with its own dictionary, then every object in Python would have to have its own dictionary, and that would waste memory.", "For example, True and False are objects; clearly they don't have any need for their own dictionaries!"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "object()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I would be happy if there was some sort of built-in Python feature where I could just say:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x = struct()\nx.foo = 1\nx.bar = 2\n</code>\n</pre>\n", "senID": 2}, {"text": ["But it is trivial to write struct():"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "struct()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class struct(object):\n    pass\n</code>\n</pre>\n", "senID": 4}, {"text": ["Or you could do a slightly more complex one:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n class struct(object):\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n</code>\n</pre>\n", "senID": 6}, {"text": ["The more complex one lets you do this:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n x = struct(foo=1, bar=2)\nprint(x.foo) # prints 1\nprint(x.bar) # prints 2\nx.baz = 3\nprint(x.baz) # prints 3\n</code>\n</pre>\n", "senID": 8}, {"text": ["But it is so trivial to write struct() that I guess it wasn't deemed worth adding to the language.", "Maybe we should push to have a standard feature added to collections module or something."], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "struct()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "collections", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I personally think that the cleanest solution is what you already guessed:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Scratch(object):\n    pass\n\ns = Scratch()\ns.whatever = 'you want'\n</code>\n</pre>\n", "senID": 1}, {"text": ["I know you said that you don't want a __dict__, but that confuses me as I can't see a reason to care about that.", "You don't have to reference __dict__, that is an internal Python implementation detail.", "Anyway, any instance in Python that allows dynamically adding attributes will have a __dict__ because that's how Python does dynamic attributes.", "Even if the instance is created in a really clever way, it will have a __dict__."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "__dict__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "__dict__", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["If you have not already done so, I recommend reading PEP 20 and PEP 8 (no reputation, so only one link for me.", ")  Not that the PEPs directly relate to your question, but I think it's useful in starting to use Python in a Pythonic manner."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "PEP 20", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}, {"text": "Pythonic", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["The mystery here is the difference between objects and class instances. "], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "objects", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "objects", "tag": "em"}]}, {"text": "objects", "childNum": 0, "tag": "em", "childList": []}, {"text": "class instances", "childNum": 1, "tag": "strong", "childList": [{"text": "class instances", "tag": "em"}]}, {"text": "class instances", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["In Python, everything is an object.", "Classes are objects, integers are objects, types are objects, and class instances are objects.", "When you say object() you're getting a plain base-level object.", "It's nothing.", "Completely useless.", "Lower level than anything else you can reference in Python."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "object()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["You probably thought calling object() gives you a class instance.", "Which is understandable, because you probably thought object is a class.", "It's not.", "Even though you might think so since it's the base \"class\" used for new-style class definitions like:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "object()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "object", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class MyClass(object):\n    pass\n</code>\n</pre>\n", "senID": 3}, {"text": ["object is in fact a type (like how str and int are types).", "When you call object() you're not constructing a class instance, your instantiating a special type of object.", "But in object's case, it's special in how completely blah it is."], "childNum": 8, "tag": "p", "senID": 4, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "type", "childNum": 1, "tag": "strong", "pos": 1, "childList": [{"text": "type", "tag": "em"}]}, {"text": "type", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "object()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "object", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "blah", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Only class instances have the special ability to tack things on with dot notation.", "That's not a general property of all objects.", "Imagine if that were the case!", "You could do crazy stuff like adding properties to strings:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n s = \"cat\"\ns.language = \"english\"\n</code>\n</pre>\n", "senID": 6}, {"text": ["Obviously you can't do that."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}]]