[[{"text": ["The easiest way to do this is to just have settings be a module."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(settings.py)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n CONSTANT1 = \"value1\"\nCONSTANT2 = \"value2\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["(consumer.py)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import settings\n\nprint settings.CONSTANT1\nprint settings.CONSTANT2\n</code>\n</pre>\n", "senID": 4}, {"text": ["When you import a python module, you have to prefix the the variables that you pull from it with the module name.", "If you know exactly what values you want to use from it in a given file and you are not worried about them changing during execution, then you can do"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "and", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n from settings import CONSTANT1, CONSTANT2\n\nprint CONSTANT1\nprint CONSTANT2\n</code>\n</pre>\n", "senID": 6}, {"text": ["but I wouldn't get carried away with that last one.", "It makes it difficult for people reading your code to tell where values are coming from.", "and precludes those values being updated if another client module changes them.", "One final way to do it is"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n import settings as s\n\nprint s.CONSTANT1\nprint s.CONSTANT2\n</code>\n</pre>\n", "senID": 8}, {"text": ["This saves you typing, will propagate updates and only requires readers to remember that anything after s is from the settings module."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["When you import settings, a module object called settings is placed in the global namespace - and this object carries has that was in settings.py as attributes.", "I.e.", "outside of settings.py, you refer to CONSTANT as settings.CONSTANT."], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "import settings", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "module", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "settings", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "settings.py", "childNum": 0, "tag": "code", "childList": []}, {"text": "settings.py", "childNum": 0, "tag": "code", "childList": []}, {"text": "CONSTANT", "childNum": 0, "tag": "code", "childList": []}, {"text": "settings.CONSTANT", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["See the answer I posted to Can I prevent modifying an object in Python?", "which does what you want (as well as force the use of UPPERCASE identifiers).", "It might actually be a better answer for this question than it was for the the other."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Can I prevent modifying an object in Python?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3711657/can-i-prevent-modifying-an-object-in-python/3712574#3712574"}]}], [{"text": ["Leave your settings.py exactly as it is, then you can use it dust as Django does:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import settings\n\ndef func():\n    var = settings.CONSTANT\n</code>\n</pre>\n", "senID": 1}], [{"text": ["...Or, if you really want all the constants from settings.py to be imported into the global namespace, you can run"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from settings import *\n</code>\n</pre>\n", "senID": 1}, {"text": ["...but otherwise using settings.CONSTANT, as everyone else has mentioned here, is quite right."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "settings.CONSTANT", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In settings.py:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n CONSTANT = 5\n</code>\n</pre>\n", "senID": 2}, {"text": ["In your main file:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from settings import CONSTANT\n\nclass A:\n    b = CONSTANT\n\n    def printb(self):\n         print self.b\n</code>\n</pre>\n", "senID": 4}, {"text": ["I think your above error is coming from the settings file being imported too late.", "Make sure it's at the top of the file. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]