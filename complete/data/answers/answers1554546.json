[[{"text": ["In languages that rely on getters and setters, like Java, they're not supposed nor expected to do anything but what they say -- it would be astonishing if x.getB() did anything but return the current value of logical attribute b, or if x.setB(2) did anything but whatever small amount of internal work is needed to make x.getB() return 2."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "x.getB()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "x.setB(2)", "childNum": 0, "tag": "code", "childList": []}, {"text": "x.getB()", "childNum": 0, "tag": "code", "childList": []}, {"text": "2", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["However, there are no language-imposed guarantees about this expected behavior, i.e., compiler-enforced constraints on the body of methods whose names start with get or set: rather, it's left up to common sense, social convention, \"style guides\", and testing."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "guarantees", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "get", "childNum": 0, "tag": "code", "childList": []}, {"text": "set", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The behavior of x.b accesses, and assignments such as x.b = 2, in languages which do have properties (a set of languages which includes but is not limited to Python) is exactly the same as for getter and setter methods in, e.g., Java: the same expectations, the same lack of language-enforced guarantees."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "x.b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x.b = 2", "childNum": 0, "tag": "code", "childList": []}, {"text": "exactly", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["The first win for properties is syntax and readability.", "Having to write, e.g.,"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n x.setB(x.getB() + 1)\n</code>\n</pre>\n", "senID": 4}, {"text": ["instead of the obvious"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n x.b += 1\n</code>\n</pre>\n", "senID": 6}, {"text": ["cries out for vengeance to the gods.", "In languages which support properties, there is absolutely no good reason to force users of the class to go through the gyrations of such Byzantine boilerplate, impacting their code's readability with no upside whatsoever."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["In Python specifically, there's one more great upside to using properties (or other descriptors) in lieu of getters and setters: if and when you reorganize your class so that the underlying setter and getter are not needed anymore, you can (without breaking the class's published API) simply eliminate those methods and the property that relies on them, making b a normal \"stored\" attribute of x's class rather than a \"logical\" one obtained and set computationally."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In Python, doing things directly (when feasible) instead of via methods is an important optimization, and systematically using properties enables you to perform this optimization whenever feasible (always exposing \"normal stored attributes\" directly, and only ones which do need computation upon access and/or setting via methods and properties)."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["So, if you use getters and setters instead of properties, beyond impacting the readability of your users' code, you are also gratuitously wasting machine cycles (and the energy that goes to their computer during those cycles;-), again for no good reason whatsoever."], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "also", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "again", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Your only argument against properties is e.g.", "that \"an outside user wouldn't expect any side effects as a result of an assignment, usually\"; but you miss the fact that the same user (in a language such as Java where getters and setters are pervasive) wouldn't expect (observable) \"side effects\" as a result of calling a setter, either (and even less for a getter;-).", "They're reasonable expectations and it's up to you, as the class author, to try and accommodate them -- whether your setter and getter are used directly or through a property, makes no difference.", "If you have methods with important observable side effects, do not name them getThis, setThat, and do not use them via properties."], "childNum": 3, "tag": "p", "senID": 11, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}, {"text": "getThis", "childNum": 0, "tag": "code", "childList": []}, {"text": "setThat", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The complaint that properties \"hide the implementation\" is wholly unjustified: most all of OOP is about implementing information hiding -- making a class responsible for presenting a logical interface to the outside world and implementing it internally as best it can.", "Getters and setters, exactly like properties, are tools towards this goal.", "Properties just do a better job at it (in languages that support them;-)."], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "all", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["The idea is to allow you to avoid having to write getters and setters until you actually need them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, to start off you write:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class MyClass(object):\n    def __init__(self):\n        self.myval = 4\n</code>\n</pre>\n", "senID": 2}, {"text": ["Obviously you can now write myobj.myval = 5."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "myobj.myval = 5", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["But later on, you decide that you do need a setter, as you want to do something clever at the same time.", "But you don't want to have to change all the code that uses your class - so you wrap the setter in the @property decorator, and it all just works."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "@property", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["A basic reason is really simply that it looks better.", "It is more pythonic.", "Especially for libraries.", "something.getValue() looks less nice than something.value"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In plone (a pretty big CMS), you used to have document.setTitle() which does a lot of things like storing the value, indexing it again and so.", "Just doing document.title = 'something' is nicer.", "You know that a lot is happening behind the scenes anyway."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You're not hiding that fact though; that fact was never there to begin with.", "This is python -- a high-level language; not assembly.", "Few of the \"simple\" statements in it boil down to single CPU instructions.", "To read simplicity into an assignment is to read things that aren't there."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When you say x.b = c, probably all you should think is that \"whatever just happened, x.b should now be c\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Here's an old example of mine.", "I wrapped a C library which had functions like \"void dt_setcharge(int atom_handle, int new_charge)\" and \"int dt_getcharge(int atom_handle)\".", "I wanted at the Python level to do \"atom.charge = atom.charge + 1\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The \"property\" decorator makes that easy.", "Something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Atom(object):\n    def __init__(self, handle):\n        self.handle = handle\n    def _get_charge(self):\n        return dt_getcharge(self.handle)\n    def _set_charge(self, charge):\n        dt_setcharge(self.handle, charge)\n    charge = property(_get_charge, _set_charge)\n</code>\n</pre>\n", "senID": 2}, {"text": ["10 years ago, when I wrote this package, I had to use __getattr__ and __setattr__ which made it possible, but the implementation was a lot more error prone."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Atom:\n    def __init__(self, handle):\n        self.handle = handle\n    def __getattr__(self, name):\n        if name == \"charge\":\n            return dt_getcharge(self.handle)\n        raise AttributeError(name)\n    def __setattr__(self, name, value):\n        if name == \"charge\":\n            dt_setcharge(self.handle, value)\n        else:\n            self.__dict__[name] = value\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You are correct, it is just syntactic sugar.", "It may be that there are no good uses of it depending on your definition of problematic code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Consider that you have a class Foo that is widely used in your application.", "Now this application has got quite large and further lets say it's a webapp that has become very popular."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You identify that Foo is causing a bottleneck.", "Perhaps it is possible to add some caching to Foo to speed it up.", "Using properties will let you do that without changing any code or tests outside of Foo."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Yes of course this is problematic code, but you just saved a lot of $$ fixing it quickly."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["What if Foo is in a library that you have hundreds or thousands of users for?", "Well you saved yourself having to tell them to do an expensive refactor when they upgrade to the newest version of Foo."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["The release notes have a lineitem about Foo instead of a paragraph porting guide."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Experienced Python programmers don't expect much from a.b=2 other than a.b==2, but they know even that may not be true.", "What happens inside the class is it's own business."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "a.b=2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a.b==2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]]