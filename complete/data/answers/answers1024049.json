[[{"text": ["There are two occasions where I violate PEP 8 in this regard:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Circular imports: module A imports module B, but something in module B needs module A (though this is often a sign that I need to refactor the modules to eliminate the circular dependency)", "tag": "none", "senID": 1}, {"text": "Inserting a pdb breakpoint: ", "tag": "none", "senID": 2}]}, {"text": ["Outside of these two cases, it's a good idea to put everything at the top.", "It makes the dependencies clearer."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Here are the four import use cases that we use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "hr", "senID": 1}, {"text": ["Here's what we do to make the code clearer:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["Keep the modules short."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If I have all my imports at the top of the module, I have to go look there to determine what a name is.", "If the module is short, that's easy to do."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["In some cases having that extra information close to where a name is used can make the function easier to understand.", "If the module is short, that's easy to do."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]}], [{"text": ["In the long run I think you'll appreciate having most of your imports at the top of the file, that way you can tell at a glance how complicated your module is by what it needs to import."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If I'm adding new code to an existing file I'll usually do the import where it's needed and then if the code stays I'll makes things more permanent by moving the import line up to the top of the file."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["One other point, I prefer to get an ImportError exception before any code is run -- as a sanity check, so that's another reason to import at the top. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I use pyChecker to check for unused modules."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["As long as it's import and not from x import *, you should put them at the top.", "It adds just one name to the global namespace, and you stick to PEP 8.", "Plus, if you later need it somewhere else, you don't have to move anything around."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "from x import *", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["It's no big deal, but since there's almost no difference I'd suggest doing what PEP 8 says."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["One thing to bear in mind:  needless imports can cause performance problems.", "So if this is a function that will be called frequently, you're better off just putting the import at the top.", "Of course this is an optimization, so if there's a valid case to be made that importing inside a function is more clear than importing at the top of a file, that trumps performance in most cases."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["If you're doing IronPython, I'm told that it's better to import inside functions (since compiling code in IronPython can be slow).", "Thus, you may be able to get a way with importing inside functions then.", "But other than that, I'd argue that it's just not worth it to fight convention."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Another point I'd like to make is that this may be a potential maintenence problem.", "What happens if you add a function that uses a module that was previously used by only one function?", "Are you going to remember to add the import to the top of the file?", "Or are you going to scan each and every function for imports?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["FWIW, there are cases where it makes sense to import inside a function.", "For example, if you want to set the language in cx_Oracle, you need to set an NLS_LANG environment variable before it is imported.", "Thus, you may see code like this:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "_", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "before", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n import os\n\noracle = None\n\ndef InitializeOracle(lang):\n    global oracle\n    os.environ['NLS_LANG'] = lang\n    import cx_Oracle\n    oracle = cx_Oracle\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I've broken this rule before for modules that are self-testing.", "That is, they are normally just used for support,  but I define a main for them so that if you run them by themselves you can test their functionality.", "In that case I sometimes import getopt and cmd just in main, because I want it to be clear to someone reading the code that these modules have nothing to do with the normal operation of the module and are only being included for testing."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "getopt", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "cmd", "childNum": 0, "tag": "code", "childList": []}]}]]