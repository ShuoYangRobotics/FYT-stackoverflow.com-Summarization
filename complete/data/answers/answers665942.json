[[{"text": ["Here's a one line answer"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sortedLetters = sorted(d.iteritems(), key=lambda (k,v): (v,k))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This should do it nicely."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def frequency_analysis(string):\n    d = dict()\n    for key in string:\n        d[key] = d.get(key, 0) + 1\n    return d\n\ndef letters_in_order_of_frequency(string):\n    frequencies = frequency_analysis(string)\n    # frequencies is of bounded size because number of letters is bounded by the dictionary, not the input size \n    frequency_list = [(freq, letter) for (letter, freq) in frequencies.iteritems()]\n    frequency_list.sort(reverse=True)\n    return [letter for freq, letter in frequency_list]\n\nstring = 'aabbbc'\nprint letters_in_order_of_frequency(string)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is something that returns a list of tuples rather than a dictionary:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import operator\n\nif __name__ == '__main__':\n\n    test_string = 'cnaa'\n\n    string_dict = dict()\n    for letter in test_string:\n        if letter not in string_dict:\n            string_dict[letter] = test_string.count(letter)\n\n    # Sort dictionary by values, credits go here http://stackoverflow.com/questions/613183/sort-a-dictionary-in-python-by-the-value/613218#613218\n    ordered_answer = sorted(string_dict.items(), key=operator.itemgetter(1), reverse=True)\n    print ordered_answer\n</code>\n</pre>\n", "senID": 1}], [{"text": ["EDIT This will do what you want.", "I'm stealing chills42 line and adding another:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "chills42", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n sortedLetters = sorted(d.iteritems(), key=lambda (k,v): (v,k))\nsortedString = ''.join([c[0] for c in reversed(sortedLetters)])\n</code>\n</pre>\n", "senID": 1}, {"text": ["------------original answer------------"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "original answer", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["To print out the sorted string add another line to chills42 one-liner:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "chills42", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ''.join(map(lambda c: str(c[0]*c[1]), reversed(sortedLetters)))\n</code>\n</pre>\n", "senID": 4}, {"text": ["This prints out 'bbbaac'"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["If you want single letters, 'bac' use this:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n ''.join([c[0] for c in reversed(sortedLetters)])\n</code>\n</pre>\n", "senID": 7}], [{"code": "<pre>\n<code>\n from collections import defaultdict\n\ndef most_frequent(s):\n    d = defaultdict(int)\n    for c in s:\n        d[c] += 1\n\n    return \"\".join([\n        k for k, v in sorted(\n        d.iteritems(), reverse=True, key=lambda (k, v): v)\n    ])\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["here is my one liner:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def most_frequent(s):\n    return \"\".join([\n        c for frequency, c in sorted(\n            [(s.count(c), c) for c in set(s)], reverse=True\n        )\n    ])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Python 2.7 supports this use case directly:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; Counter('abracadabra').most_common()\n[('a', 5), ('r', 2), ('b', 2), ('c', 1), ('d', 1)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["chills42 lambda function wins, I think but as an alternative, how about generating the dictionary with the counts as the keys instead?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def count_chars(string):\n    distinct = set(string)\n    dictionary = {}\n    for s in distinct:\n        num = len(string.split(s)) - 1\n        dictionary[num] = s\n    return dictionary\n\ndef print_dict_in_reverse_order(d):\n    _list = d.keys()\n    _list.sort()\n    _list.reverse()\n    for s in _list:\n        print d[s]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def reversedSortedFrequency(string)\n   from collections import defaultdict\n   d = defaultdict(int)\n   for c in string:\n     d[c]+=1\n   return sorted([(v,k) for k,v in d.items()], key=lambda (k,v): -k)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here is the fixed version (thank you for pointing out bugs)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "fixed version", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def frequency(s):\n    return ''.join(\n        [k for k, v in\n        sorted(\n            reduce(\n                lambda d, c: d.update([[c, d.get(c, 0) + 1]]) or d, \n                list(s), \n                dict()).items(),\n            lambda a, b: cmp(a[1], b[1]),\n            reverse=True)])\n</code>\n</pre>\n", "senID": 1}, {"text": ["I think the use of reduce makes the difference in this sollution compared to the others..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "reduce", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In action:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from frequency import frequency\n&gt;&gt;&gt; frequency('abbbccddddxxxyyyyyz')\n'ydbxcaz'\n</code>\n</pre>\n", "senID": 4}, {"text": ["This includes extracting the keys (and counting them) as well!!!", "Another nice property is the initialization of the dictionary on the same line :)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "includes extracting the keys (and counting them)", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Also: no includes, just builtins."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "no includes", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The reduce function is kinda hard to wrap my head around, and setting dictionary values in a lambda is also a bit cumbersome in python, but, ah well, it works!"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "reduce", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "lambda", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Here's the code for your most_frequent function:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "most_frequent", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 'aabbbc'\n&gt;&gt;&gt; {i: a.count(i) for i in set(a)}\n{'a': 2, 'c': 1, 'b': 3}\n</code>\n</pre>\n", "senID": 1}, {"text": ["this particular syntax is for py3k, but it's easy to write something similar using syntax of previous versions.", "it seems to me a bit more readable than yours."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]