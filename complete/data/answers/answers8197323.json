[[{"text": ["If you don't care where the matching element is, then use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n found = x in somelist\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you do care, then use a LBYL style with a conditional expression:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "LBYL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/glossary.html#term-lbyl"}, {"href": "http://docs.python.org/reference/expressions.html#conditional-expressions", "text": "conditional expression", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n i = somelist.index(x) if x in somelist else None\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Write a function that does what you need:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def find_in_iterable(x, iterable):\n    for i, item in enumerate(iterable):\n        if item == x:\n            return i\n    return None\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you only need to know whether the item exists, but not the index, you can use in:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n x in yourlist\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you don't care where it is in the sequence, only its presence, then use the in operator.", "Otherwise, write a function that refactors out the exception handling."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def inlist(needle, haystack):\n  try:\n    return haystack.index(needle)\n  except ...:\n    return -1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["implement your own index for list?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class mylist(list):\n  def index_withoutexception(self,i):\n    try:\n        return self.index(i)\n    except:\n        return -1\n</code>\n</pre>\n", "senID": 1}, {"text": ["So, you can use list, and with your index2, return what you want in case of error."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You can use it like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n l = mylist([1,2,3,4,5]) # This is the only difference with a real list\n  l.append(4) # l is a list.\n  l.index_withoutexception(19) # return -1 or what you want\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Yes, there is.", "You can eg.", "do something similar to this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n test = lambda l, e: l.index(e) if e in l else None\n</code>\n</pre>\n", "senID": 1}, {"text": ["which works like that:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = ['a', 'b', 'c', 'g', 'c']\n&gt;&gt;&gt; test(a, 'b')\n1\n&gt;&gt;&gt; test(a, 'c')\n2\n&gt;&gt;&gt; test(a, 't')\nNone\n</code>\n</pre>\n", "senID": 3}, {"text": ["So, basically, test() will return index of the element (second parameter) within given list (first parameter), unless it has not been found (in this case it will return None, but it can be anything you find suitable)."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "test()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "will return index of the element", "childNum": 0, "tag": "strong", "childList": []}, {"text": "unless it has not been found", "childNum": 0, "tag": "strong", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["There is no built-in way to do what you want to do."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is a good post that may help you: Why list doesn&#39;t have safe &quot;get&quot; method like dictionary?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Why list doesn&#39;t have safe &quot;get&quot; method like dictionary?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/5125619/why-list-doesnt-have-safe-get-method-like-dictionary"}]}], [{"text": ["hope this helps"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n lst= ','.join('qwerty').split(',') # create list\ni='a'  #srch string\nlst.index(i) if i in lst else None\n</code>\n</pre>\n", "senID": 1}]]