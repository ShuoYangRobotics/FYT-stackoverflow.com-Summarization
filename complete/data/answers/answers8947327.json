[[{"text": ["We're going to mix three important concepts to make this code really small and beautiful.", "First, a list comprehension, then, the zip method, and finally, the dict method, to build a dictionary out of a list of tuples:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "list comprehension", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}, {"href": "http://docs.python.org/library/functions.html#zip", "text": "zip", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://docs.python.org/library/stdtypes.html#dict", "text": "dict", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n my_list = [('a1', 'b1', 'c1', 'd1', 'e1'), ('a2', 'b2', 'c2', 'd2', 'e2')]\nkeys = ('key1', 'key2', 'key3', 'key4', 'key5')\nfinal = [dict(zip(keys, elems)) for elems in my_list]\n</code>\n</pre>\n", "senID": 1}, {"text": ["After that, the value of the final variable is:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "final", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; final\n[{'key3': 'c1', 'key2': 'b1', 'key1': 'a1', 'key5': 'e1', 'key4': 'd1'},\n{'key3': 'c2', 'key2': 'b2', 'key1': 'a2', 'key5': 'e2', 'key4': 'd2'}]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Also, you can get elements of a certain dictionary using the position of the dictionary in the list and the key you're looking for, i.e."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; final[0]['key1']\n'a1'\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Use zip to combine a pre-defined list of key names with each tuple in your input list, then pass the results to dict to make them into dicts.", "Wrap the whole thing in a list comprehension to process them all in one batch:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "zip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n keys = ('key1', 'key2', 'key3', 'key4', 'key5')\nfinalDictList = [dict(zip(keys, values)) for values in tupleList\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'm not sure I see why you need to convert everything to a dictionary, when you've already got a list of tuples."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; tupleList = [('a1', 'b1', 'c1', 'd1', 'e1'),\n...              ('a2', 'b2', 'c2', 'd2', 'e2'),\n...              ('a10000', 'b10000', 'c10000', 'd10000', 'e100000')]\n&gt;&gt;&gt; [x[1] for x in tupleList]\n['b1', 'b2', 'b10000']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Using Python's list comprehension syntax, you can get a list of all the n-th elements of each tuple."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "list comprehension", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["If the fields are fix you can do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fields = ['key1', 'key2', 'key3', 'key4', 'key5']\n\nnewList = [dict(zip(fields, vals)) for vals in oldList]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If as you say you have a lot of entries, remember that python has namedtuples:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "namedtuples", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; tupleList = [('a1', 'b1', 'c1', 'd1', 'e1'),\n...              ('a2', 'b2', 'c2', 'd2', 'e2'),\n...              ('a10000', 'b10000', 'c10000', 'd10000', 'e100000')]\n&gt;&gt;&gt;\n&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; fv = namedtuple('fivevals', ('key1', 'key2', 'key3', 'key4', 'key5'))\n&gt;&gt;&gt; tuplelist = [fv(*item) for item in tupleList]\n&gt;&gt;&gt; \n&gt;&gt;&gt; tuplelist[0].key1\n'a1'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Namedtuples can be accesed by key but at the same time they are lightweight and require no more memory than regular tuples."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n finalDictList = []\nfor t in tupleList:\n    finalDictList.append({\n        'key1': t[0],\n        'key2': t[1],\n        'key3': t[2],\n        'key4': t[3],\n        'key5': t[4],\n    })\n</code>\n</pre>\n", "senID": 0}, {"text": ["Absolutely, that is exactly how you would do it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n from itertools import izip\n\nkeys = ['key1', 'key2', 'key3', 'key4', 'key5']\nfinalDictList = [dict(izip(names, x)) for x in tupleList]\n</code>\n</pre>\n", "senID": 0}]]