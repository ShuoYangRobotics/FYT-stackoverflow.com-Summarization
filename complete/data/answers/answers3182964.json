[[{"text": ["Take a look at the Fisher-Yates shuffle.", "It's extremely space and time-efficient, and easy to implement."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Fisher-Yates shuffle", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"}]}], [{"code": "<pre>\n<code>\n import random\nword = \"cat\"\nshuffled = list(word)\nrandom.shuffle(shuffled)\nshuffled = ''.join(shuffled)\nprint shuffled\n</code>\n</pre>\n", "senID": 0}, {"text": ["...or done in a different way, inspired by Dominic's answer..."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Dominic's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3182964/3182983#3182983"}]}, {"code": "<pre>\n<code>\n import random\nshuffled = ''.join(random.sample(word, len(word)))\n</code>\n</pre>\n", "senID": 2}], [{"text": ["This cookbook recipe has a simple implementation of Fisher-Yates shuffling in Python.", "Of course, since you have a string argument and must return a string, you'll need a first statement (say the argument name is s) like ary = list(s), and in the return statement you'll use ''.join to put the array of characters ary back into a single string."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "This cookbook recipe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/360461-fisher-yates-shuffle/"}, {"text": "s", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "ary = list(s)", "childNum": 0, "tag": "code", "childList": []}, {"text": "return", "childNum": 0, "tag": "code", "childList": []}, {"text": "''.join", "childNum": 0, "tag": "code", "childList": []}, {"text": "ary", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n return \"\".join(random.sample(word, len(word)))\n</code>\n</pre>\n", "senID": 0}, {"text": ["Used like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n word = \"Pocketknife\"\nprint \"\".join(random.sample(word, len(word)))\n\n&gt;&gt;&gt; teenockpkfi\n</code>\n</pre>\n", "senID": 2}], [{"text": ["To be very slightly more low level, this just swaps the current letter with a random letter which comes after it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from random import randint\nword = \"helloworld\"\n\ndef shuffle(word):\n    wordlen = len(word)\n    word = list(word)\n    for i in range(0,wordlen-1):\n        pos = randint(i+1,wordlen-1)\n        word[i], word[pos] = word[pos], word[i]\n    word = \"\".join(word)\n    return word\n\nprint shuffle(word)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This won't create all possible permutations with equal probability, but still might be alright for what you want"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here is a way that doesn't use random.shuffle.", "Hopefully random.choice is ok. You should add any restrictions to the question"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "random.shuffle", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "random.choice", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from random import choice\n&gt;&gt;&gt; from itertools import permutations\n&gt;&gt;&gt; \"\".join(choice(list(permutations(\"cat\"))))\n'atc'\n</code>\n</pre>\n", "senID": 1}, {"text": ["This method is not as efficient as random.shuffle, so will be slow for long words"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n from random import random\ndef shuffle(x):\n    for i in reversed(xrange(1, len(x))):\n        j = int(random() * (i+1))\n        x[i], x[j] = x[j], x[i]\n</code>\n</pre>\n", "senID": 0}]]