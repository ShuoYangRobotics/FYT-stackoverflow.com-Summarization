[[{"text": ["This should be simple enough:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for character in range(ord('a'), ord('z')):\n    if \"(++info++)\" not in decoded_str:\n        break\n    decoded_str = decoded_str.replace(\"(++info++)\", \"(++info {0}++)\".format(chr(character)), 1)\n\nprint decoded_str\n</code>\n</pre>\n", "senID": 1}, {"text": ["It has the added benefit of stopping at 'z'.", "If you want to wrap around:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import itertools\n\nfor character in itertools.cycle(range(ord('a'), ord('z'))):\n    if \"(++info++)\" not in decoded_str:\n        break\n    decoded_str = decoded_str.replace(\"(++info++)\", \"(++info {0}++)\".format(chr(character)), 1)\n\nprint decoded_str\n</code>\n</pre>\n", "senID": 3}, {"text": ["And just for fun, a one-liner, and O(n):"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n dstr = \"\".join(x + \"(++info {0}++)\".format(chr(y)) for x, y in zip(dstr.split(\"(++info++)\"), range(ord('a'), ord('z'))))[:-len(\"(++info a++)\")]\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Here is a rather ugly yet pragmatic solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n\ndecoded_str = \" Name(++info++)Age(++info++)Adress of the emp(++info++)\"\nletters = list(string.lowercase)\ntoken = \"(++info++)\"\nrep_token = \"(++info %s++)\"\n\ni = 0\nwhile (token in decoded_str):\n    decoded_str = decoded_str.replace(token, rep_token % letters[i], 1)\n    i += 1\n\nprint decoded_str\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import string\n\ndecoded_str = \" Name(++info++)Age(++info++)Adress of the emp(++info++)\"\ns = decoded_str.replace('++info++', '++info %s++')\ns % tuple(i for i in string.ascii_lowercase[:s.count('%s')])\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here's a quick hack to do it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string=\" Name(++info++)Age(++info++)Adress of the emp(++info++)\"\n\ndef doit(s):\n    import string\n    allTheLetters = list(string.lowercase)\n    i=0\n    s2 = s.replace(\"++info++\",\"++info \"+allTheLetters[i]+\"++\",1)\n    while (s2!=s):\n        s=s2\n        i=i+1\n        s2 = s.replace(\"++info++\",\"++info \"+allTheLetters[i]+\"++\",1)\n    return s\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that performance is probably not very great."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n import re, string\n\ndecoded_str=\" Name(++info++)Age(++info++)Adress of the emp(++info++)\"\n\nsub_func=('(++info %s++)'%c for c in '.'+string.ascii_lowercase).send\nsub_func(None)\nprint re.sub('\\(\\+\\+info\\+\\+\\)', sub_func, decoded_str)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n from itertools import izip\nimport string\ndecoded_str=\" Name(++info++)Age(++info++)Adress of the emp(++info++)\"\nparts = iter(decoded_str.split(\"(++info++)\"))\nfirst_part = next(parts)\ntags = iter(string.ascii_lowercase)\nencoded_str=first_part+\"\".join(\"(++info %s++)%s\"%x for x in izip(tags, parts))\nprint encoded_str\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; rx = re.compile(r'\\(\\+\\+info\\+\\+\\)')\n&gt;&gt;&gt; s = \"Name(++info++)Age(++info++)Adress of the emp(++info++)\"\n&gt;&gt;&gt; atoz = iter(\"abcdefghijklmnopqrstuvwxyz\")\n&gt;&gt;&gt; rx.sub(lambda m: '(++info ' + next(atoz) + '++)', s)\n'Name(++info a++)Age(++info b++)Adress of the emp(++info c++)'\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n decoded_str=\" Name(++info++)Age(++info++)Adress of the emp(++info++)\"\n\nimport re\nfor i, f in enumerate(re.findall(r\"\\(\\+\\+info\\+\\+\\)\",decoded_str)):\n    decoded_str = re.sub(r\"\\(\\+\\+info\\+\\+\\)\",\"(++info %s++)\"%chr(97+i),decoded_str,1)\nprint decoded_str\n</code>\n</pre>\n", "senID": 0}]]