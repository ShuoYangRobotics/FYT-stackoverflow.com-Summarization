[[{"text": ["I would use filter:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "filter", "tag": "a", "pos": 0, "childList": [{"text": "filter", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#filter"}, {"text": "filter", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n str_list = filter(None, str_list) # fastest\nstr_list = filter(bool, str_list) # fastest\nstr_list = filter(len, str_list)  # a bit of slower\nstr_list = filter(lambda item: item, str_list) # slower than list comprehension\n</code>\n</pre>\n", "senID": 1}, {"text": ["Tests:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; timeit('filter(None, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n2.4797441959381104\n&gt;&gt;&gt; timeit('filter(bool, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n2.4788150787353516\n&gt;&gt;&gt; timeit('filter(len, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n5.2126238346099854\n&gt;&gt;&gt; timeit('[x for x in str_list if x]', 'str_list=[\"a\"]*1000', number=100000)\n13.354584932327271\n&gt;&gt;&gt; timeit('filter(lambda item: item, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n17.427681922912598\n</code>\n</pre>\n", "senID": 3}], [{"text": ["List comprehensions"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "List comprehensions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}, {"code": "<pre>\n<code>\n list = [\"first\", \"\", \"second\"]\n[x for x in list if x]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output: ['first', 'second']"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edit: Shortened as suggested"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["filter actually has a special option for this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n filter(None, sequence)\n</code>\n</pre>\n", "senID": 1}, {"text": ["It will filter out all elements that evaluate to False.", "No need to use an actual callable here such as bool, len and so on."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It's equally fast as map(bool, ...)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Loop through the existing string list and then check for a empty string, if it's not empty populate a new string list with the non-empty values and then replace the old string list with the new string list"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Depending on the size of your list, it may be most efficient if you use list.remove() rather than create a new list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = [\"1\", \"\", \"3\", \"\"]\n\nwhile True:\n  try:\n    l.remove(\"\")\n  except ValueError:\n    break\n</code>\n</pre>\n", "senID": 1}, {"text": ["This has the advantage of not creating a new list, but the disadvantage of having to search from the beginning each time, although unlike using while '' in l as proposed above, it only requires searching once per occurrence of '' (there is certainly a way to keep the best of both methods, but it is more complicated)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "while '' in l", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "''", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["use filter"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filter", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n newlist=filter(lambda x: len(x)&gt;0, oldlist)\n</code>\n</pre>\n", "senID": 1}, {"text": ["drawbacks of using filter as pointed out is that it is slower than alternatives.", "also lambda are usually costly. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Or you can go for the simplest and the most iterative of all : "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for item in listtext:             ;i am assuming listtext is the list containing empty items\n    if item:\n        newlist.append(str(item)) ; you can remove str based on your original list\n</code>\n</pre>\n", "senID": 4}, {"text": ["this is the most intuitive of the methods and does it in decent time."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]