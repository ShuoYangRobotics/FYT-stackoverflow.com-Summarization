[[{"text": ["All of those methods that consist of just a comment."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To fix it, for example, do this"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def twoPointCrossover(self, partner):\n        #at two random(?) points, crossover.\n        pass\n</code>\n</pre>\n", "senID": 2}, {"text": ["The comments don't count as compilable statements, so you have a bunch of empty blocks.", "That is why it gives you the indent error."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you use something that ends in : expecting an indented block and you don't have anything that you want to put there (other than a comment) then you need to use pass."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": ":", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "pass", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["E.g."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def doNothing(self):\n    pass\n</code>\n</pre>\n", "senID": 2}], [{"text": ["When you're just outlining your classes and have a bunch of methods which do nothing, you need to insert the pass statement to indicate that nothing is happening. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pass", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Like so: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Individual:\n    alleles = (0,1)\n    length = 5\n    string = \"\"\n\n    def __init__(self):\n        #some constructor work, here.\n        pass\n\n    def evaluate(self):\n        #some stuff here.\n        pass\n    ...\n</code>\n</pre>\n", "senID": 2}, {"text": ["The unexpected indent message is because python is looking for an indented statement to follow the method definition. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Change:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class World:\n    def __init__(self):\n       #stuff.\n</code>\n</pre>\n", "senID": 1}, {"text": ["To:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class World:\n    def __init__(self):\n        #stuff\n        pass\n</code>\n</pre>\n", "senID": 3}, {"text": ["and so on for all the methods."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Unless you're abbreviating your code for this post, you'll need pass after all of those functions that don't have any code."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pass", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n def __init__(self):\n    #stuff.\n</code>\n</pre>\n", "senID": 0}, {"text": ["That looks wrong at first glance.", "Try changing it to this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self):\n    #stuff.\n    pass\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Double check the tabs and spaces in all the code, make sure you are not mixing them.", "A line with several spaces may the same as a line with a single tab."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Others have covered pass, so I will just add that for beginning python programmers, it can take some getting used to the importance of whitespace."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pass", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Until you get used to it you might want to get in the habit of converting tabs to spaces or spaces to tabs when you save a file.", "Personally I prefer tabs because it is easier to tell the difference if it is off by one (especially at the beginning/end of a nested block)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]