[[{"text": ["Use ==.", "Only integers from -1 to 256 will work with is."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "==", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Others have answered your question, but I'll go into a little bit more detail:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python's is compares identity - it asks the question \"is this one thing exactly identical to this other thing\" (similar to === in JavaScript/PHP and == in Java).", "So, there are some times when using is makes sense - the most common one being checking for None.", "Eg, foo is None.", "But, in general, it isn't what you want."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "===", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "foo is None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["==, on the other hand, asks the question \"is this one thing logically equivalent to this other thing\".", "For example:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "==", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [1, 2, 3] == [1, 2, 3]\nTrue\n&gt;&gt;&gt; [1, 2, 3] is [1, 2, 3]\nFalse\n</code>\n</pre>\n", "senID": 3}, {"text": ["And this is true because classes can define the method they use to test for equality:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class AlwaysEqual(object):\n...     def __eq__(self, other):\n...         return True\n...\n&gt;&gt;&gt; always_equal = AlwaysEqual()\n&gt;&gt;&gt; always_equal == 42\nTrue\n&gt;&gt;&gt; always_equal == None\nTrue\n</code>\n</pre>\n", "senID": 5}, {"text": ["But they cannot define the method used for testing identity (ie, they can't override is)."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "cannot", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 255556\n&gt;&gt;&gt; a == 255556\nTrue\n&gt;&gt;&gt; a is 255556\nFalse\n</code>\n</pre>\n", "senID": 0}, {"text": ["I think that should answer it ;-)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The reason is that some often-used objects, such as the booleans True and False, all 1-letter strings and short numbers are allocated once by the interpreter, and each variable containing that object refers to it.", "Other numbers and larger strings are allocated on demand.", "The 255556 for instance is allocated three times, every time a different object is created.", "And therefore, according to is, they are not the same."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "not", "childNum": 0, "tag": "strong", "pos": 3, "childList": []}]}], [{"text": ["That will only work for small numbers and I'm guessing it's also implementation-dependent.", "Python uses the same object instance for small numbers (iirc &lt;256), but this changes for bigger numbers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 2104214124\n&gt;&gt;&gt; b = 2104214124\n&gt;&gt;&gt; a == b\nTrue\n&gt;&gt;&gt; a is b\nFalse\n</code>\n</pre>\n", "senID": 1}, {"text": ["So you should always use == to compare numbers."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "==", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["== is what you want, \"is\" just happens to work on your examples."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; 2 == 2.0\nTrue\n&gt;&gt;&gt; 2 is 2.0\nFalse\n</code>\n</pre>\n", "senID": 0}, {"text": ["Use =="], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]