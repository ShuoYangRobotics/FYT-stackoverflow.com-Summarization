[[{"text": ["lst = [[] for _ in xrange(2)] (or just [[], []]).", "Don't use multiplication with mutable objects \u2014 you get the same one X times, not X different ones."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "lst = [[] for _ in xrange(2)]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[[], []]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"code": "<pre>\n<code>\n list_list = [[] for Null in range(2)]\n</code>\n</pre>\n", "senID": 0}, {"text": ["dont call it list, that will prevent you from calling the built-in function list()."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The reason that your problem happens is that Python creates one list then repeats it twice.", "So, whether you append to it by accessing it either with list_list[0] or with list_list[1], you're doing the same thing so your changes will appear at both indexes."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "one list", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "list_list[0]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "list_list[1]", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n list = [[]]\nlist.append([2.5])\n</code>\n</pre>\n", "senID": 0}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n list = [[],[]]\nlist[1].append(2.5)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["[] is a list constructor, and in [[]] a list and a sublist is constructed.", "The *2 duplicates the reference to the inner list, but no new list is constructed:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "[]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[[]]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "*2", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; list[0] is list[1]\n... True\n&gt;&gt;&gt; list[0] is []\n... False\n</code>\n</pre>\n", "senID": 1}, {"text": ["The solution is to have 2 inner lists, list = [[], []]"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "list = [[], []]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As per @Cat Plus Plus dont use multiplication.I tried without it.with same your code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt; list = [[],[]]\n&gt;&gt; list[1].append(2.5)\n&gt;&gt; list\n&gt;&gt; [[],[2.5]]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can do in simplest way...."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; list = [[]]*2\n&gt;&gt;&gt; list[1] = [2.5]\n&gt;&gt;&gt; list\n[[], [2.5]]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["you should write something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [[] for _ in xrange(2)]\n&gt;&gt;&gt; l[1].append(2.5)\n&gt;&gt;&gt; l\n[[], [2.5]]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Your outter list contains another list and multiplying the outter list will have the resulting list's items all have the same pointer to the inner list.", "You can create a multidimensional list recursively like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def MultiDimensionalList(instance, *dimensions):\n\u00a0\u00a0 \u00a0if len(dimensions) == 1:\n\u00a0\u00a0 \u00a0 \u00a0return list(\n \u00a0\u00a0 \u00a0 \u00a0 \u00a0instance() for i in xrange(\n\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0dimensions[0]\n\u00a0\u00a0 \u00a0 \u00a0 \u00a0)\n\u00a0\u00a0 \u00a0 \u00a0)\n\u00a0\u00a0 \u00a0else:\n\u00a0\u00a0 \u00a0 \u00a0return list(\n\u00a0\u00a0 \u00a0 \u00a0 \u00a0MultiDimensionalList(instance, *dimensions[1:]) for i\n\u00a0\u00a0 \u00a0 \u00a0 \u00a0in xrange(dimensions[0])\n\u00a0\u00a0 \u00a0 \u00a0)\n\nprint\u00a0MultiDimensionalList(lambda: None, 1, 1, 0)\n</code>\n</pre>\n", "senID": 1}]]