[[{"text": ["Dictionaries in Python are unordered by definition.", "Use OrderedDict if you need the order in which values were inserted (it's available in Python 2.7 and 3.x)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "unordered by definition", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "OrderedDict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["dictionary sort order is undefined!", "Do not rely on it for anything.", "Look for a sorted dictionary if you really want a sorted dictionary, but usually you don't need one."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Examples:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "python 2.7, it's built in to the collections module", "tag": "none", "senID": 2}, {"text": "Django has a SortedDict shipped with it", "tag": "none", "senID": 3}, {"text": "2.4-2.7 you can use the ordereddict module, you can pip install or easy_install it", "tag": "none", "senID": 4}]}], [{"text": ["Before you get so angry and frustrated, perhaps you should read about what a dictionary actually is and how it works:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/stdtypes.html#mapping-types-dict"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#mapping-types-dict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#mapping-types-dict"}]}, {"text": ["Python dicts use a hash table as the underlying storage mechanism.", "That means that a hash key is generated from the key that you provide.", "There are no guarantees about ordering with these hash keys.", "The entries in a dictionary are fetched in sequential order of their location in the underlying hash table when you request values(), keys(), or items()."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The advantage of using a hash table is that it is extremely fast.", "Unlike the map class from c++ which uses a red-black tree storage mechanism ( which is sorted by the raw keys ), a hash table doesn't constantly need to be restructured to keep it efficient.", "For more on hash tables, see:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "is", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["http://en.wikipedia.org/wiki/Hash_table"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://en.wikipedia.org/wiki/Hash_table", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Hash_table"}]}, {"text": ["Like the other posters have said, look up OrderedDict if you need to have a key-sorted dictionary."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Good Luck!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Clearly you know about lists.", "You can ask for the element at the ith index of a list.", "This is because lists are ordered."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [1,2,3,4] == [1,4,3,2]\nFalse\n</code>\n</pre>\n", "senID": 1}, {"text": ["In this context, you can think of dictionaries, but where the index is the key.", "Therefore, two dictionaries are equal if the corresponding values of all keys in both dictionaries are the same (if one dictionary has keys that the other doesn't, then the two are not equal).", "Thus:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; {1:'a', 2:'b'} == {2:'b', 1:'a'}\nTrue\n</code>\n</pre>\n", "senID": 3}, {"text": ["Further Trivia"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Further Trivia", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["A dictionary does something called hashing on the keys of the dictionary so that when you ask for the value at a particular key (index), it can retrieve this value faster."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "hashing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Hash_function"}]}, {"text": ["Hope this helps"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Dictionaries are unsorted.", "This is well-documented.", "Do not rely on the ordering of dictionaries."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you want to see the entries in order.", "something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n test2 = {\"c\":3,\"a\":1,\"b\":2,\"d\":4}\nks = test2.keys()\nks.sort()\nfor key in ks:\n   print key + ':' + str(test2[key])\n</code>\n</pre>\n", "senID": 1}, {"text": ["(cut,paste, season to taste)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]