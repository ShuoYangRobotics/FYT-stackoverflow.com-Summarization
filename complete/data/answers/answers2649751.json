[[{"text": ["This can be done easily and reliably using an HTML parser like BeautifulSoup:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from BeautifulSoup import BeautifulSoup\n&gt;&gt;&gt; soup = BeautifulSoup('&lt;body&gt;&lt;div&gt;1&lt;/div&gt;&lt;div class=\"comment\"&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/div&gt;&lt;/body&gt;')\n&gt;&gt;&gt; for div in soup.findAll('div', 'comment'):\n...   div.extract()\n... \n&lt;div class=\"comment\"&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/div&gt;\n&gt;&gt;&gt; soup\n&lt;body&gt;&lt;div&gt;1&lt;/div&gt;&lt;/body&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["See this question for examples on why parsing HTML using regular expressions is a bad idea."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "why parsing HTML using regular expressions is a bad idea", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/701166/can-you-provide-some-examples-of-why-it-is-hard-to-parse-xml-and-html-with-a-rege"}]}], [{"text": ["You cannot properly parse HTML with regular expressions.", "Use a HTML parser such as lxml or BeautifulSoup."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "lxml", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/"}, {"href": "http://www.crummy.com/software/BeautifulSoup/", "text": "BeautifulSoup", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["With lxml.html:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lxml.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/lxmlhtml.html"}]}, {"code": "<pre>\n<code>\n from lxml import html\ndoc = html.fromstring(input)\nfor el in doc.cssselect('div.comment'):\n    el.drop_tree()\nresult = html.tostring(doc)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For the record, it is usually a bad idea to process XML with regular expressions.", "Nevertheless:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.sub('&gt;[^&lt;]*', '&gt;', '&lt;div class=\"comment&gt; .. any\u2026 &lt;/div&gt;')\n'&lt;div class=\"comment&gt;&lt;/div&gt;'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["non regex way"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n pat='&lt;div class=\"comment\"&gt;'\nfor chunks in htmlstring.split(\"&lt;/div&gt;\"):\n    m=chunks.find(pat)\n    if m!=-1:\n       chunks=chunks[:m]\n    print chunks\n</code>\n</pre>\n", "senID": 1}, {"text": ["output"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ cat file\none two &lt;tag&gt; ....&lt;/tag&gt;\n adsfh asdf &lt;div class=\"comment\"&gt; ....remove\nall ....&lt;/div&gt;s sdfds\n&lt;div class=\"blah\" .......\n.....\nblah &lt;/div&gt;\n\n$ ./python.py\none two &lt;tag&gt; ....&lt;/tag&gt;\n adsfh asdf\ns sdfds\n&lt;div class=\"blah\" .......\n.....\nblah\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Use Beautiful soup and do something like this to get all of those elements, and then just replace inside"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n tomatosoup = BeautifulSoup(myhtml)\n\ntomatochunks = tomatosoup.findall(\"div\", {\"class\":\"comment\"} )\n\nfor chunk in tomatochunks:\n   #remove the stuff\n</code>\n</pre>\n", "senID": 1}]]