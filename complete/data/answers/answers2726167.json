[[{"text": ["Python has some pretty powerful language constructs builtin.", "You can read lines from a file like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nwith open(name_of_file,\"r\") as file:\n    for line in file:\n         # process the line\n</pre>\n", "senID": 1}, {"text": ["You can use the string.split function to separate the line along commas, and you can use string.strip to eliminate intervening whitespace.", "Python has very powerful lists and dictionaries."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "string.split", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#string.split"}, {"text": "string.strip", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#string.strip"}, {"text": "lists", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#more-on-lists"}, {"href": "http://docs.python.org/tutorial/datastructures.html#dictionaries", "text": "dictionaries", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["To create a list, you simply use empty brackets like [], while to create an empty dictionary you use {}:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\nmylist = []; # Creates an empty list\nmydict = {}; # Creates an empty dictionary\n</pre>\n", "senID": 4}, {"text": ["You can insert into the list using the .append() function, while you can use indexing subscripts to insert into the dictionary.", "For example, you can use mylist.append(5) to add 5 to the list, while you can use mydict[key]=value to associate the key key with the value value.", "To test whether a key is present in the dictionary, you can use the in keyword.", "For example:"], "childNum": 5, "tag": "p", "senID": 5, "childList": [{"text": "mylist.append(5)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "mydict[key]=value", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "key", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "value", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "in", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\nif key in mydict:\n   print \"Present\"\nelse:\n   print \"Absent\"\n</pre>\n", "senID": 6}, {"text": ["To iterate over the contents of a list or dictionary, you can simply use a for-loop as in:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\nfor val in mylist:\n    # do something with val\n\nfor key in mydict:\n    # do something with key or with mydict[key]\n</pre>\n", "senID": 8}, {"text": ["Since, in many cases, it is necessary to have both the value and index when iterating over a list, there is also a builtin function called enumerate that saves you the trouble of counting indices yourself:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\nfor idx, val in enumerate(mylist):\n    # do something with val or with idx. Note that val=mylist[idx]\n</pre>\n", "senID": 10}, {"text": ["The code above is identical in function to:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\nidx=0\nfor val in mylist:\n   # process val, idx\n   idx += 1\n</pre>\n", "senID": 12}, {"text": ["You could also iterate over the indices if you so chose:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\nfor idx in xrange(len(mylist)):\n    # Do something with idx and possibly mylist[idx]\n</pre>\n", "senID": 14}, {"text": ["Also, you can get the number of elements in a list or the number of keys in a dictionary using len."], "childNum": 1, "tag": "p", "senID": 15, "childList": [{"text": "len", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#len"}]}, {"text": ["It is possible to perform an operation on each element of a dictionary or list via the use of list comprehension; however, I would recommend that you simply use for-loops to accomplish that task.", "But, as an example:"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"code": "<pre>\n>>> list1 = range(10)\n>>> list1\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> list2 = [2*x for x in list1]\n>>> list2\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n</pre>\n", "senID": 17}, {"text": ["When you have the time, I suggest you read the Python tutorial to get some more in-depth knowledge."], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "Python tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/"}]}], [{"text": ["Example using the csv module from docs.python.org:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "csv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/csv.html#examples", "text": "docs.python.org", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import csv\nreader = csv.reader(open(\"some.csv\", \"rb\"))\nfor row in reader:\n    print row\n</code>\n</pre>\n", "senID": 1}, {"text": ["Instead of printing the rows, you could just save each row into a list, and then process it in the ID3 later."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n database.append(row)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Short answer: don't waste time and mental energy (1) reimplementing the built-in csv module (2) reading the csv module's source (it's written in C) -- just USE it!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "just USE it!", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Look at csv.DictReader."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import csv\nreader = csvDictReader(open('my_file.csv','rb') # 'rb' = read binary\nfor d in reader:\n    print d # this will print out a dictionary with keys equal to the first row of the file.\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Take a look at the built-in CSV module.", "Though you probably can't just use it, you can take a sneak peek at the code..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CSV module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}, {"text": ["If that's a no-no, your (pseudo)code looks perfectly fine, though you should make use of the str.split() function and use that, reading the file line-by-line."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "str.split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I'd avoid using str.split() to parse the fields because str.split() will not recognize quoted values.", "And many real-world CSV files use quotes.", "http://en.wikipedia.org/wiki/Comma-separated_values"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://en.wikipedia.org/wiki/Comma-separated_values", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Comma-separated_values"}]}, {"text": ["Example record using quoted values:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 1997,Ford,E350,\"Super, luxurious truck\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you use str.split(), you'll get a record like this with 5 fields:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n ('1997', 'Ford', 'E350', '\"Super', ' luxurious truck\"')\n</code>\n</pre>\n", "senID": 4}, {"text": ["But what you really want are records like this with 4 fields:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n ('1997', 'Ford', 'E350', 'Super, luxurious truck')\n</code>\n</pre>\n", "senID": 6}, {"text": ["Also, besides commas being in the data, you may have to deal with newlines \"\\r\\n\" or just \"\\n\" in the data.", "For example:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n 1997,Ford,E350,\"Super\nluxurious truck\"\n1997,Ford,E250,\"Ok? Truck\"\n</code>\n</pre>\n", "senID": 8}, {"text": ["So be careful using:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n file = open('filename.csv', 'r')\nfor line in file:\n    # problem here, \"line\" may contain partial data\n</code>\n</pre>\n", "senID": 10}, {"text": ["Also, like John mentioned, the CSV standard is, that in quotes, if you get a double-double quote, then it turns into one quote."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n 1997,Ford,E350,\"Super \"\"luxurious\"\" truck\"\n\n('1997', 'Ford', 'E350', 'Super \"luxurious\" truck')\n</code>\n</pre>\n", "senID": 12}, {"text": ["So I'd suggest to modify your finite state machine like this:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Parse each character at a time.\n", "tag": "none", "senID": 14}, {"text": "If \"in quote\", store all the characters in the current field until there's another quote.\n", "tag": "none", "senID": 15}, {"text": "If not \"in quote\", store the characters until you find a comma or newline.\n", "tag": "none", "senID": 16}, {"text": "If newline, save field, save record, start a new record and a new field.\n", "tag": "none", "senID": 17}]}, {"text": ["On a side note, interestingly, I've never seen a header commented out using # in a CSV.", "So to me, that would imply that you may have to look for commented lines in the data too.", "Using # to comment out a line in a CSV file is not standard."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"text": ["Depending on memory requirements, if the CSV is small enough (maybe 10k to 100k records), using a dictionary is fine.", "Just store a list of all the column names so you can access the column name by index (or number).", "Then in the finite state machine, increment the column index when you find a comma, and reset to 0 when you find a newline."], "childNum": 1, "tag": "p", "senID": 19, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["So if your header is header = ['Column1', 'Column2']  Then when you find a data character, add it like this:"], "childNum": 1, "tag": "p", "senID": 20, "childList": [{"text": "header = ['Column1', 'Column2']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n record[header[column_index]] += character\n</code>\n</pre>\n", "senID": 21}], [{"text": ["I don't know too much about the builtin csv module that @Kaloyan Todorov talks about, but, if you're reading comma separated lines, then you can easily do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for line in file:\n    columns = line.split(',')\n    for column in columns:\n        print column.strip()\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will print all the entries of each line without the leading a tailing whitespaces."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]