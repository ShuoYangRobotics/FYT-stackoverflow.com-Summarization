[[{"text": ["A good solution involves uploading into Google Docs and exporting the html version from it.", "(There must be an api for that?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It does so many \"clean ups\"; Beautiful Soup down the road can be used to make any further changes, as appropriate.", "It is the most powerful and elegant html parsing library on the planet."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Beautiful Soup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}, {"text": ["This is a known standard for Journalist companies."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It depends how much formatting and images you're dealing with.", "I do one of a couple things:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Google Docs"], "childNum": 0, "tag": "strong", "senID": 1, "childList": []}, {"text": ["Markdown"], "childNum": 0, "tag": "strong", "senID": 2, "childList": []}]}], [{"text": ["You can also use Abiword/wvWare to convert word document to XHTML and then parse it with BeautifulSoup/ElementTree/etc.", "to preprocess it if you need.", "In my experience, Abiword does a pretty good job at converting Word files and produce relatively clean XHTML files."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "Abiword", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.abisource.com/"}, {"text": "wvWare", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://wvware.sourceforge.net/"}, {"text": "BeautifulSoup", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}, {"text": "ElementTree", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/element-index.htm"}]}, {"text": ["I should mention that Abiword can be run on the command line, so it's easy to integrate it in an automated process."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["My super-simple app WordOff has an API for cleaning up cruft from Word-exported HTML.", "You could override the save method of your flatpages model to pipe your HTML through the API the first time it gets saved.", "Something like this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "WordOff", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wordoff.org/"}, {"text": "API", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://wordoff.org/api"}]}, {"code": "<pre>\n<code>\n import urllib\nimport urllib2\n\ndef decruft(html):\n    data = urllib.urlencode({'html' : html})\n    req = urllib2.Request('http://wordoff.org/api/clean', data)\n    response = urllib2.urlopen(req)\n    return response.read()\n\ndef save(self, **kwargs):\n    if not self.pk: # only de-cruft when content is first added\n        self.content = decruft(self.content)\n    super(FlatPage, self).save(**kwargs)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There are many other approaches, depending on your specific circumstances, beyond the good ones already suggested -- see this SO question and its answers for a good survey!"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this SO question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/910730/python-ms-word"}]}], [{"text": ["Word 2010 has the ability to \"save as filtered web page\".", "This will eliminate the overwhelming majority of the HTML that Word inserts."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Greg Burdett"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I found this web page: http://www.textfixer.com/html/convert-word-to-html.php"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.textfixer.com/html/convert-word-to-html.php", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.textfixer.com/html/convert-word-to-html.php"}]}, {"text": ["It converts a formated text to simple HTML markup, preserving bold, italic, links and paragraphs, but not adding tags for font-sizes and faces.", "Exactly what I needed to save some time."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "simple", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]