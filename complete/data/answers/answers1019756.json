[[{"text": ["Use the csv module as it is a real parser.", "Regular expressions are nonoptimal (or completely unsuited) for most things involving matching delimiters in which the rules change (I'm unsure as to whether this particular grammar is regular or not).", "You might be able to create a regex that would work in this case, but it would be rather complex (especially dealing with cases like \"He said, \\\"How are you\\\"\")."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n re.split(',(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)', str)\n</code>\n</pre>\n", "senID": 0}, {"text": ["After matching a comma, if there's an odd number of quotation marks up ahead ahead, the comma must be inside a pair of quotation marks, so it doesn't count as a delimiter.", "Obviously this doesn't take the possibility of escaped quotation marks into account, but that can handled if need be--it just makes the regex about twice as ugly as it already is.", ":D"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Writing a state machine for this would, on the other hand, seem to be quite straightforward.", "DFAs and regexes have the same power, but usually one of them is better suited to the problem at hand, and is usually very dependent on the additional logic you might need to implement."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Page 271 of Friedl's Mastering Regular Expressions has a regular expression for extracting possibly quoted CSV fields, but it requires a bit of postprocessing:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Page 271", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://books.google.com/books?id=GX3w%5F18-JegC&lpg=PA401&ots=PHojQnfpRY&dq=comma-separated%20%22mastering%20regular%20expressions%22&pg=PA271"}, {"text": "Mastering Regular Expressions", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall('(?:^|,)(?:\"((?:[^\"]|\"\")*)\"|([^\",]*))',str)\n[('a,b,c', ''), ('', 'd'), ('', 'e'), ('', 'f')]\n&gt;&gt;&gt; re.findall('(?:^|,)(?:\"((?:[^\"]|\"\")*)\"|([^\",]*))','\"a,b,c\",d,,f')\n[('a,b,c', ''), ('', 'd'), ('', ''), ('', 'f')]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Same pattern with the verbose flag:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n csv = re.compile(r\"\"\"\n    (?:^|,)\n    (?: # now match either a double-quoted field\n        # (inside, paired double quotes are allowed)...\n        \" # (double-quoted field's opening quote)\n          (    (?: [^\"] | \"\" )*    )\n        \" # (double-quoted field's closing quote)\n    |\n      # ...or some non-quote/non-comma text...\n        ( [^\",]* )\n    )\"\"\", re.X)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can get close using non-greedy specifiers.", "The closest I've got is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall('(\".*?\"|.*?)(?:,|$)',  '\"a,b,c\",d,e,f')\n['\"a,,b,c\"', 'd', '', 'f', '']\n</code>\n</pre>\n", "senID": 1}, {"text": ["But as you see, you end up with a redundant empty string at the end, which is indistinguishable from the result you get when the string ends with a comma:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall('(\".*?\"|.*?)(?:,|$)', '\"a,b,c\",d,e,f,')\n['\"a,,b,c\"', 'd', '', 'f', '']\n</code>\n</pre>\n", "senID": 3}, {"text": ["so you'd need to do some manual tweaking at the end - something like:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n matches = regex,findall(s)\nif not s.endswith(\",\"): matches.pop()\n</code>\n</pre>\n", "senID": 5}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n matches = regex.findall(s+\",\")[:-1]\n</code>\n</pre>\n", "senID": 7}, {"text": ["There's probably a better way."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["Here's a function that'll accomplish the task:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Here's a function that'll accomplish the task:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def smart_split(data, delimiter=\",\"):\n    \"\"\" Performs splitting with string preservation. This reads both single and\n        double quoted strings.\n    \"\"\"\n    result = []\n    quote_type = None\n    buffer = \"\"\n    position = 0\n    while position &lt; len(data):\n        if data[position] in [\"\\\"\", \"'\"]:\n            quote_type = data[position]\n            while quote_type is not None:\n                position += 1\n                if data[position] == quote_type:\n                    quote_type = None\n                    position += 1\n                else:\n                    buffer += data[position]\n        if data[position] == delimiter:\n            result.append(buffer)\n            buffer = \"\"\n        else:\n            buffer += data[position]\n        position += 1\n    result.append(buffer)\n    return result\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example of use:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Example of use:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n str = '\"a,b,c\",d,e,f'\nprint smart_split(str)\n# Prints: ['a,b,c', 'd', 'e', 'f']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Here's a really short function that will do the same thing:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def split (aString):\n    splitByQuotes = (\",%s,\"%aString).split('\"')\n    splitByQuotes[0::2] = [x.split(\",\")[1:-1] for x in splitByQuotes[0::2]]\n    return [a.strip() \\\n        for b in splitByQuotes \\\n        for a in (b if type(b)==list else [b])]\n</code>\n</pre>\n", "senID": 1}, {"text": ["It splits the string where the quotes are, creating a list where every even element is the stuff outside the quotes and every odd element is the stuff that was encapsulated within quotes.", "The stuff in quotes it leaves alone, the stuff outside it splits where the commas are.", "Now we have a list of alternating lists and strings, which we then unwrap with the last line.", "The reason for wrapping the string in commas at the beginning and removing commas in the middle is to prevent spare empty elements in the list.", "It should be able to handle whitespace - I added a strip() function at the end to make it produce clean output, but that's not necessary."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["usage:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print split('c, , \"a,,b,c\",d,\"moo\",\"f\"')\n['c', '', 'a,,b,c', 'd', 'moo', 'f']\n</code>\n</pre>\n", "senID": 4}]]