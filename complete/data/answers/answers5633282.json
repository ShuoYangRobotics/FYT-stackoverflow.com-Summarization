[[{"text": ["after:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n numwords = map(wordcount, lines)\n</code>\n</pre>\n", "senID": 1}, {"text": ["numwords is a list of None the same length as lines as wordcount returns None"], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "numwords", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}, {"text": "lines", "childNum": 0, "tag": "code", "childList": []}, {"text": "wordcount", "childNum": 0, "tag": "code", "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for line in lines:\n    words = line.split()\n    numwords += len(words)\n</code>\n</pre>\n", "senID": 3}, {"text": ["would be better and more pythonic"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["In Python 3, map is an iterator: (akin: itertools.imap)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "itertools.imap", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class map(object)\n |  map(func, *iterables) --&gt; map object\n |  \n |  Make an iterator that computes the function using arguments from\n |  each of the iterables.  Stops when the shortest iterable is exhausted.\n</code>\n</pre>\n", "senID": 1}, {"text": ["While in Python 2:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n map(...)\n    map(function, sequence[, sequence, ...]) -&gt; list\n</code>\n</pre>\n", "senID": 3}, {"text": ["It returns a list by default."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So in your case, you need to do:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["numwords = list(map(wordcount, lines))"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "numwords = list(map(wordcount, lines))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["There are other problems also with your code, but others have pointed that out well enough."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["You should avoid to use a global variable like 'numwords'.", "You have to return numwords in your wordcount() function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This code works :"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "This code works :", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def wordcount(l):\n    numwords = 0\n    words = l.split()\n    numwords += len(words)\n    return numwords\n\nf = open('testfile.txt')\nlines = f.readlines()\nnumlines = len(lines)\nprint('Number of lines =', numlines)\n\nnumwords = 0\nnumwords = map(wordcount, lines)\nprint ('Number of words =', numwords)\n</code>\n</pre>\n", "senID": 2}, {"text": ["My testfile.txt contains :"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "My testfile.txt contains :", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n Hello world\nmy name is\njames bond\n</code>\n</pre>\n", "senID": 4}, {"text": ["Ouput :"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Ouput", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ('Number of lines =', 3)\n('Number of words =', [2, 3, 2])\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Read paragraphs to lines and ..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print 'Num of words =', reduce(lambda x,y: x+y ,[len(line.split()) for line in lines])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["function wordcount doesn't return anything, write return numwords  Now your function calcualates numwords and then return None by default, and you erase this global variable"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "return numwords", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Here you go, map either returns a list or iterator, so this modification will work in either case.", "(python2 vs python3) "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def wordcount(l):\n    global numwords\n    words = l.split()\n    numwords += len(words)\n\nf=open('testfile.txt')\nlines = f.readlines()\nnumlines = len(lines)\nprint ('Number of lines =', numlines)\n\nnumwords=0\n\nnumwords = map(wordcount, lines)\nprint ('Number of words =', len(list(numwords)))\n</code>\n</pre>\n", "senID": 1}]]