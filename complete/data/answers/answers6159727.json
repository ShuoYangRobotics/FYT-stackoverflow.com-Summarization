[[{"text": ["Something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list_of_x = [x1, x2, x3]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you have code like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x1 = \"foo\"\nx2 = \"bar\"\nx3 = \"goat\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["then you should replace it with:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x = [\"foo\", \"bar\", \"goat\"]\n</code>\n</pre>\n", "senID": 3}, {"text": ["You could do:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n x = [x1, x2, x3]\n</code>\n</pre>\n", "senID": 5}, {"text": ["But that will copy the values from x1,x2, x3 into x.", "Changes made to x will not change x1, x2, x3."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["If this strategy doesn't work for you, you need to show us more of what you are doing so we can help you."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I think you first need to understand that there are no variables in Python.", "There are only references to objects.", "So it is a mistake to even think about \"creating variables\".", "They don't exist."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You can use vars(), locals(), or globals() to create new variables, although needing to do this is pretty unusual:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "vars()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "locals()", "childNum": 0, "tag": "code", "childList": []}, {"text": "globals()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for n in range(1, 4):\n    vars()['x%s' % n] = n\n\n&gt;&gt;&gt; x1, x2, x3\n&lt;&lt;&lt; (1, 2, 3)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Ok, so part of the mystery seems to be capturing your variables x1, x2, ... when they spring into existence.", "If you manage to do that it should be easy to collect them in a list, right?!", "So you have to hunt for the place where you actually assign them a value, x1 = ..., x2 = ... ..."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "x1 = ...", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "x2 = ...", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Maybe you are reading those values from a file, or from user input?!", "- Let's elaborate one case that Eevee mentioned in a comment, where x1, x2, ... are actually instances of a user-defined class.", "Then, rather than appending manually to a list after the assignment of one of your xN, you can let the class do the recording for you:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class C(object):\n    instances = []\n    def __init__(self):\n        C.instances.append(self)\n\nx1=C()\nx2=C()\nx3=C()\n\nC.instances # &lt;= [&lt;__main__.C object at 0x01293230&gt;, ...]\n</code>\n</pre>\n", "senID": 2}, {"text": ["So you captured the values of x1, x2, ... in a nice list.", "Does that help?"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "values", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["you can convert a variable to its value by using eval(var)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, in your case you could do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n map(eval,List_Of_X)\n</code>\n</pre>\n", "senID": 2}, {"text": ["if you wanted to convert your list of strings ['x1','x2',...] into their values, say [1,2,...] if x1=1 and x2=2"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]