[[{"text": ["Spring Python is an offshoot of the Java-based Spring Framework and Spring Security, targeted for Python.", "This project currently contains the following features:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Spring Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://springpython.webfactional.com"}]}, {"tag": "ul", "num": 7, "lis": [{"text": ["Inversion Of Control (dependency injection)"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Aspect-oriented Programming"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": "DatabaseTemplate - Reading from the database requires a monotonous cycle of opening cursors, reading rows, and closing cursors, along with exception handlers. With this template class, all you need is the SQL query and row-handling function. Spring Python does the rest.", "tag": "none", "senID": 3}, {"text": "Database Transactions - Wrapping multiple database calls with transactions can make your code hard to read. This module provides multiple ways to define transactions without making things complicated.", "tag": "none", "senID": 4}, {"text": "Security - Plugin security interceptors to lock down access to your methods, utilizing both authentication and domain authorization.", "tag": "none", "senID": 5}, {"text": "Remoting - It is easy to convert your local application into a distributed one. If you have already built your client and server pieces using the IoC container, then going from local to distributed is just a configuration change.", "tag": "none", "senID": 6}, {"text": "Samples - to help demonstrate various features of Spring Python, some sample applications have been created:\n", "tag": "none", "senID": 7}]}], [{"text": ["As an alternative to monkeypatching, I like DI.", "A nascent project such as http://code.google.com/p/snake-guice/ may fit the bill."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/snake-guice/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/snake-guice/"}]}, {"text": ["Or see the blog post Dependency Injection in Python by Dennis Kempin (Aug '08)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Dependency Injection in Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://planet.open4free.org/tag/dependency%20injection/"}]}], [{"text": ["Besides that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I haven't used it, but the Spring Python framework is based on Spring and implements Inversion of Control."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Spring Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://springpython.webfactional.com/"}, {"href": "http://springpython.webfactional.com/reference/html/components.html", "text": "Inversion of Control", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["There also appears to be a Guice in Python project: snake-guice"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "snake-guice", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/snake-guice/"}]}], [{"text": ["If you just want to do dependency injection in Python, you don't need a framework.", "Have a look at Dependency Injection the Python Way.", "It's really quick and easy, and only c. 50 lines of code."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Dependency Injection the Python Way", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/413268-dependency-injection-the-python-way/"}]}], [{"text": ["There is a somewhat Guicey python-inject project.", "It's quite active, and a LOT less code then Spring-python, but then again, I haven't found a reason to use it yet."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python-inject", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/python-inject/"}]}], [{"text": ["If you prefer a really tiny solution there's a little function, it is just a dependency setter. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["https://github.com/liuggio/Ultra-Lightweight-Dependency-Injector-Python"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "https://github.com/liuggio/Ultra-Lightweight-Dependency-Injector-Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/liuggio/Ultra-Lightweight-Dependency-Injector-Python"}]}], [{"text": ["Here is a small example for a dependency injection container that does constructor injection based on the constructor argument names:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.activestate.com/recipes/576609-non-invasive-dependency-injection/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.activestate.com/recipes/576609-non-invasive-dependency-injection/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/576609-non-invasive-dependency-injection/"}]}]]