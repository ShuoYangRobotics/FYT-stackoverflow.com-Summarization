[[{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; code = {'a': 'c', 'd': 'a', 'p': 'r', 'k': 'e', 'm': 'd'}\n&gt;&gt;&gt; trans = string.maketrans(*[\"\".join(x) for x in zip(*code.items())])\n&gt;&gt;&gt; str = \"pkm adp\"\n&gt;&gt;&gt; str.translate(trans)\n'red car'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Explanation: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; help(str.translate)\nHelp on built-in function translate:\n\ntranslate(...)\n    S.translate(table [,deletechars]) -&gt; string\n\n    Return a copy of the string S, where all characters occurring\n    in the optional argument deletechars are removed, and the\n    remaining characters have been mapped through the given\n    translation table, which must be a string of length 256.\n\n&gt;&gt;&gt; help(string.maketrans)\nHelp on built-in function maketrans in module strop:\n\nmaketrans(...)\n    maketrans(frm, to) -&gt; string\n\n    Return a translation table (a string of 256 bytes long)\n    suitable for use in string.translate.  The strings frm and to\n    must be of the same length.\n</code>\n</pre>\n", "senID": 3}, {"text": ["The maketrans line turns the dictionary into two separate strings suitable for input into maketrans:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "maketrans", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "maketrans", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; code = {'a': 'c', 'd': 'a', 'p': 'r', 'k': 'e', 'm': 'd'}\n&gt;&gt;&gt; code.items()\n[('a', 'c'), ('p', 'r'), ('k', 'e'), ('m', 'd'), ('d', 'a')]\n&gt;&gt;&gt; zip(*code.items())\n[('a', 'p', 'k', 'm', 'd'), ('c', 'r', 'e', 'd', 'a')]\n&gt;&gt;&gt; [\"\".join(x) for x in zip(*code.items())]\n['apkmd', 'creda']\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"pkm adp\"\n&gt;&gt;&gt; code = {'a': 'c', 'd': 'a', 'p': 'r', 'k': 'e', 'm': 'd'}\n&gt;&gt;&gt; from string import maketrans\n&gt;&gt;&gt; s.translate(maketrans(''.join(code.keys()), ''.join(code.values())))\n'red car'\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n \"\".join(code.get(k, k) for k in str)\n</code>\n</pre>\n", "senID": 0}, {"text": ["would also work in your case."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["code.get(k, k) returns code[k] if k is a valid key in code; if it isn't, it returns k itself."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "code.get(k, k)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "code[k]", "childNum": 0, "tag": "code", "childList": []}, {"text": "k", "childNum": 0, "tag": "code", "childList": []}, {"text": "code", "childNum": 0, "tag": "code", "childList": []}, {"text": "k", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["though it would be tedious but a quick fix is str.replace(\"old\", \"new\").", "Here is the documentation for your help too http://www.tutorialspoint.com/python/string_replace.htm"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.tutorialspoint.com/python/string_replace.htm", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.tutorialspoint.com/python/string_replace.htm"}]}], [{"text": ["Assuming you are using Python 2.x:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from string import translate, maketrans\n&gt;&gt;&gt; data = \"pkm adp\"\n&gt;&gt;&gt; code = {'a': 'c', 'd': 'a', 'p': 'r', 'k': 'e', 'm': 'd'}\n&gt;&gt;&gt; table = maketrans(''.join(code.keys()), ''.join(code.values()))\n&gt;&gt;&gt; translate(data, table)\n'red car'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt;print ''.join([code.get(s,s) for s in str])\n'red car'\n</code>\n</pre>\n", "senID": 0}]]