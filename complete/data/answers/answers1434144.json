[[{"text": ["python yourfile.py"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python yourfile.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You have to have python installed first.", "It will automatically compile your file into a .pyc binary, and then run it for you.", "It will automatically recompile any time your file changes."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://www.python.org/download/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.python.org/download/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/download/"}]}], [{"text": ["Python compiles its files to bytecode before executing them.", "That means you have to have a Python interpreter installed on the target machine."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you don't want to install Python on the target machine use py2exe, py2app or something similar."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "py2exe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.py2exe.org/"}, {"href": "http://svn.pythonmac.org/py2app/py2app/trunk/doc/index.html", "text": "py2app", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["To add to Paul McMillan's answer, if you are on Windows and you have Python installed, then any files ending with the extension \".py\" should be associated with the python executable, allowing you to run it like so:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Paul McMillan's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1434144/pyhton-programming/1434155#1434155"}, {"text": "python", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt; myfile.py\n</code>\n</pre>\n", "senID": 1}, {"text": ["In *nix, you can begin the file with #!/usr/bin/python and run it like so:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "#!/usr/bin/python", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ ./myfile.py\n</code>\n</pre>\n", "senID": 3}, {"text": ["In *nix systems, if the first two characters of a file are #!", "then it will execute the file with the specified executable, which I set here to be /usr/bin/python."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "#!", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "/usr/bin/python", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Python is an interpreted language, so you don't need to compile it; just to run it.", "As it happens, the standard version of python will compile this to \"bytecode\", just like Java etc.", "does, and will save that (in .pyc files) and run it next time around, saving time, if you haven't updated the file since.", "If you've updated the file, it will be recompiled automatically."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can also run python with a -O flag, which will generate .pyo files instead of .pyc.", "I'm not sure it makes much difference.", "If speed is important, use psyco."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["And yes, on Unix (including Linux, BSD, and Mac OS X, or in a unix shell on windows) you can use a shebang line at the top of the file to make the file automatically run using python.", "On windows, the equivalent is to associate .py files with python.exe, and then make sure your PATHEXT environment variable includes \".PY\" extensions."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["However, for windows, you more likely want to write a gui program in python (possibly using PyQT4 and ERIC4) which has a .pyw file as its main script, and has .pyw associated with pythonw (which comes with python on windows).", "This will let you run python scripts on windows just like other GUI programs.", "For publishing and distribution, you probably want to compile to an executable file using something like py2exe, as others mentioned."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you want to transform a python source file into a double-clickable .exe on windows, you can use py2exe, which can help you build an easy to distribute package."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": ".exe", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://www.py2exe.org/", "text": "py2exe", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["On most Unix-like systems, you can use the shebang to tell the operating system which interpreter should be called.", "You simply put"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/path/to/python\n</code>\n</pre>\n", "senID": 1}, {"text": ["in the first line of your file, where of course you have to replace \"/path/to/\" with the path you have on your system.", "In most cases this would be \"/usr/bin/python\" or \"/usr/local/bin/python\".", "On unix systems you could also look for the path with "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n \"#!usr/bin/env python\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["or invoke the command"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n which python\n</code>\n</pre>\n", "senID": 5}, {"text": ["to find the path.", "You can then run your program with the command"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n ./yourprogram.py\n</code>\n</pre>\n", "senID": 7}, {"text": ["If it tells you that you do not have permission to do so, you have to use the command"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n chmod a+x yourprogram.py\n</code>\n</pre>\n", "senID": 9}], [{"text": ["If you just want to compile sources, without running them, you can do this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n compileall.py &lt;directory&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["this command will compile python code in that directory recursively"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["compileall script is usually located in directory like"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "compileall", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n /usr/local/lib/python2.6\n</code>\n</pre>\n", "senID": 4}, {"text": ["i.e.", "&lt;prefix&gt;/lib/python2.6 (or similar, depending on prefixes set a python configuration)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "&lt;prefix&gt;/lib/python2.6", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["As Lulu suggests, you should make sure that resulting .pyc and .pyo files are executable by the users you care about."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["compileall can also be used as a module"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "compileall", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/compileall.html"}]}, {"code": "<pre>\n<code>\n import compileall\ncompileall.compile_dir(path)\n</code>\n</pre>\n", "senID": 8}]]