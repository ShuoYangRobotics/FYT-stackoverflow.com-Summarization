[[{"text": ["You say you want an object representation, which I would interpret to mean that nodes become objects, and the attributes and children of the node are represented as attributes of the object (possibly according to some Schema).", "This is what XMLObject does, I believe."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "object", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["There are some packages that I know of.", "4Suite includes some tools to do this, and I believe Amara specifically implements this (built on top of 4Suite).", "You can also use lxml.objectify, which was inspired by Amara and gnosis.xml.objectify."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "4Suite", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://4suite.org/index.xhtml"}, {"text": "Amara", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://uche.ogbuji.net/tech/4suite/amara/"}, {"href": "http://codespeak.net/lxml/objectify.html", "text": "lxml.objectify", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://gnosis.cx/download/", "text": "gnosis.xml.objectify", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Of course a third option is, given a concrete representation of the XML (using ElementTree or lxml) you can build your own custom model around that.", "lxml.html is an example of that, extending the base interface of lxml with some HTML-specific functionality."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "lxml.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/lxmlhtml.html"}]}], [{"text": ["I second the suggestion of xml.etree.ElementTree, mostly because it's now in the stdlib.", "There is also a faster implementation, xml.etree.cElementTree available too."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you really need performance, I would suggest lxml"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://www.ibm.com/developerworks//xml/library/x-hiperfparse/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.ibm.com/developerworks//xml/library/x-hiperfparse/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks//xml/library/x-hiperfparse/"}]}], [{"text": ["Python has pickle and cPickle modules for Python object serialization.", "Both of these modules provide functionality to serialize/deserialize Python object hierarchy to convert to/from a byte stream:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://www.python.org/doc/2.5.2/lib/module-pickle.html"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}]}, {"text": ["The following provides similar interface: pickle(), unpickle() for serialization to/from XML"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": ["http://code.activestate.com/recipes/355487/"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}], [{"text": ["There's also the excellent 3rd party library pyxser for Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pyxser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://coder.cl/products/pyxser/"}]}], [{"text": ["I've heard the easiest is ElementTree, though I rarely work with XML and I can't say anything from experience."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ElementTree", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/xml.etree.elementtree.html"}]}], [{"text": ["I use (and like) PyRXP, which creates a tuple built from the XML document."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The main issue with a straight XML -> python object structure is that there is no python analog for a attributed list - that is, a list with elements, that also happens to have attributes.", "If you like, it is both a list and a dictionary at the same time."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I parse the result from PyRXP, and create the list/dictionary depending upon the structure - the XML I am dealing with is either list or attribute-based, never both.", "(I am consuming data from a known source)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I've had pretty good luck with Wai Yip Tung's xml2obj function available here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.activestate.com/recipes/534109-xml-to-python-data-structure/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.activestate.com/recipes/534109-xml-to-python-data-structure/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/534109-xml-to-python-data-structure/"}]}, {"text": ["It's ~84 lines of code.", "It's native and pure python; using xml.sax and re (regular expression) libraries.", "You just pass it XML and get back your object."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]