[[{"code": "<pre>\n<code>\n for i in ('apple', 'banana', 'carrot'):\n    fruitdict[i] = locals()[i]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["The globals() function returns a dictionary containing all your global variables."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "globals()", "tag": "a", "pos": 0, "childList": [{"text": "globals()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#globals"}, {"text": "globals()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; apple = 1\n&gt;&gt;&gt; banana = 'f'\n&gt;&gt;&gt; carrot = 3\n&gt;&gt;&gt; globals()\n{'carrot': 3, 'apple': 1, '__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', '__doc__': None, 'banana': 'f'}\n</code>\n</pre>\n", "senID": 1}, {"text": ["There is also a similar function called locals()."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "locals()", "tag": "a", "pos": 0, "childList": [{"text": "locals()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#locals"}, {"text": "locals()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I realise this is probably not exactly what you want, but it may provide some insight into how Python provides access to your variables."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Edit: It sounds like your problem may be better solved by simply using a dictionary in the first place:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n fruitdict = {}\nfruitdict['apple'] = 1\nfruitdict['banana'] = 'f'\nfruitdict['carrot'] = 3\n</code>\n</pre>\n", "senID": 5}], [{"text": ["locals() and globals()?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["A one-liner is:-"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fruitdict = dict(zip(('apple','banana','carrot'), (1,'f', '3'))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you want to bind the locations of the variables themselves, there's this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; apple = 1\n&gt;&gt;&gt; banana = 'f'\n&gt;&gt;&gt; carrot = 3\n&gt;&gt;&gt; fruitdict = {}\n&gt;&gt;&gt; fruitdict['apple'] = lambda : apple\n&gt;&gt;&gt; fruitdict['banana'] = lambda : banana\n&gt;&gt;&gt; fruitdict['carrot'] = lambda : carrot\n&gt;&gt;&gt; for k in fruitdict.keys():\n...     print k, fruitdict[k]()\n... \ncarrot 3\napple 1\nbanana f\n&gt;&gt;&gt; apple = 7\n&gt;&gt;&gt; for k in fruitdict.keys():\n...     print k, fruitdict[k]()\n... \ncarrot 3\napple 7\nbanana f\n</code>\n</pre>\n", "senID": 1}], [{"text": ["why you don't do the opposite :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fruitdict = { \n      'apple':1,\n      'banana':'f',\n      'carrot':3,\n}\n\nlocals().update(fruitdict)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Update :"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Update :", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["don't use the code above check the comment."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["by the way why you don't mark the vars that you want to get i don't know \nmaybe like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n # All the vars that i want to get are followed by _fruit\napple_fruit = 1\ncarrot_fruit = 'f'\n\nfor var in locals():\n    if var.endswith('fruit'):\n       you_dict.update({var:locals()[var])\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Well this is a bit, umm ... non-Pythonic ... ugly ... hackish ... "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's a snippet of code assuming you want to create a dictionary of all the local variables you\ncreate after a specific checkpoint is taken:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n checkpoint = [ 'checkpoint' ] + locals().keys()[:]\n## Various local assigments here ...\nvar_keys_since_checkpoint = set(locals().keys()) - set(checkpoint)\nnew_vars = dict()\nfor each in var_keys_since_checkpoint:\n   new_vars[each] = locals()[each]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note that we explicitly add the 'checkpoint' key into our capture of the locals().keys()  I'm also explicitly taking a slice of that though it shouldn't be necessary in this case since the reference has to be flattened to add it to the [ 'checkpoint' ] list.", "However, if you were using a variant of this code and tried to shortcut out the ['checkpoint'] + portion (because that key was already inlocals(), for example) ... then, without the [:] slice you could end up with a reference to thelocals().keys()` whose values would change as you added variables."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "locals().keys()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "['checkpoint'] + portion (because that key was already in", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ", for example) ... then, without the [:] slice you could end up with a reference to the", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Offhand I can't think of a way to call something like new_vars.update() with a list of keys to be added/updated.", "So thefor loop is most portable.", "I suppose a dictionary comprehension could be used in more recent versions of Python.", "However that woudl seem to be nothing more than a round of code golf."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "new_vars.update()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["This question has practically been answered, but I just wanted to say it was funny that you said"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Because it is actually \"fancier\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["what you want is:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n apple = 1\nbanana = 'f'\ncarrot = 3\nfruitdict = {}\n\n# I want to set the key equal to variable name, and value equal to variable value\n# is there a more Pythonic way to get {'apple': 1, 'banana': 'f', 'carrot': 3}?\n\nnames= 'apple banana carrot'.split() # I'm just being lazy for this post\nitems = globals()                    # or locals()\n\nfor name in names:\n    fruitdict[name] = items[name]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Honestly, what you are doing is just copying items from one dictionary to another."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["(Greg Hewgill practically gave the whole answer, I just made it complete)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["...and like people suggested, you should probably be putting these in the dictionary in the first place, but I'll assume that for some reason you can't"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]