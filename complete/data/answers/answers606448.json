[[{"text": ["Some overlap in these"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Intermediate and Advanced Software Carpentry in Python"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Intermediate and Advanced Software Carpentry in Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ivory.idyll.org/articles/advanced-swc/"}]}, {"text": ["Code Like a Pythonista: Idiomatic Python"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Code Like a Pythonista: Idiomatic Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"}]}, {"text": ["Python Idioms and Efficiency"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Python Idioms and Efficiency", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jaynes.colorado.edu/PythonIdioms.html"}]}, {"text": ["Google Developers Day US - Python Design Patterns"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Google Developers Day US - Python Design Patterns", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.youtube.com/watch?v=0vJJlVBVTFg"}]}, {"text": ["Another resource is by example at the Python Recipes.", "A good number do not follow best practices but you can find some patterns in there that are useful"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Python Recipes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/langs/python/"}]}], [{"text": ["Type"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import this\n</code>\n</pre>\n", "senID": 1}, {"text": ["in a Python console."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Although this is usually treated as a (fine!", ") joke, it contains a couple of valid python-specific axioms."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Bruce Eckel's \"Thinking in Python\" leans heavily on Design Patterns "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Thinking in Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.mindview.net/Books/TIPython"}]}], [{"text": ["You can get started here and here.  "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/workshops/1997-10/proceedings/savikko.html"}, {"href": "http://www.suttoncourtenay.org.uk/duncan/accu/pythonpatterns.html", "text": "here", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["For a more in depth look at design pattners you should look at Design Patterns: Elements of Reusable Object-Oriented Software.", "The source code is not in Python, but it doesn't need to be for you to understand the patterns. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Design Patterns: Elements of Reusable Object-Oriented Software", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0201633612"}]}], [{"text": ["Good video on the subject."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "video", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.youtube.com/watch?v=0vJJlVBVTFg"}]}], [{"text": ["You may also wish to read this article (select the .pdf file), which discusses Design Patterns in dynamic object oriented languages (i.e.", "Python).", "To quote the page:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "article", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://people.csail.mit.edu/gregs/ref-dyn-patterns.html"}]}], [{"text": ["Exper Python Programming\nhttp://books.google.com/books?id=vgPpOAAACAAJ&amp;dq=exper+python+programming&amp;hl=pl"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://books.google.com/books?id=vgPpOAAACAAJ&amp;dq=exper+python+programming&amp;hl=pl", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://books.google.com/books?id=vgPpOAAACAAJ&dq=exper+python+programming&hl=pl"}]}], [{"text": ["Something you can use to simplify your code when calling attributes on objects that might or might not exist is to use the Null Object Design Pattern (to which I was introduced in Python Cookbook)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Null Object Design Pattern", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/68205-null-object-design-pattern/"}, {"href": "http://books.google.com.ar/books?id=Q0s6Vgb98CQC&pg=PT311&lpg=PT311&dq=Null+object+python+cookbook&source=bl&ots=hc3368UkpC&sig=qRrDqvZwg4FIoMuKo3JJhI7Bu_g&hl=es&ei=TiqpS5jZEMuVtgf08YGnAQ&sa=X&oi=book_result&ct=result&resnum=4&ved=0CBYQ6AEwAw#v=onepage&q=&f=false", "text": "Python Cookbook", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["This object just eats the lack of attribute error, and you can avoid checking for their existence."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It's nothing more than"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Null(object):\n\n    def __init__(self, *args, **kwargs):\n        \"Ignore parameters.\"\n        return None\n\n    def __call__(self, *args, **kwargs):\n        \"Ignore method calls.\"\n        return self\n\n    def __getattr__(self, mname):\n        \"Ignore attribute requests.\"\n        return self\n\n    def __setattr__(self, name, value):\n        \"Ignore attribute setting.\"\n        return self\n\n    def __delattr__(self, name):\n        \"Ignore deleting attributes.\"\n        return self\n\n    def __repr__(self):\n        \"Return a string representation.\"\n        return \"&lt;Null&gt;\"\n\n    def __str__(self):\n        \"Convert to a string and return it.\"\n        return \"Null\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["With this, if you do Null(\"any\", \"params\", \"you\", \"want\").attribute_that_doesnt_exists() it won't explode, but just silently become the equivalent of pass."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "Null(\"any\", \"params\", \"you\", \"want\").attribute_that_doesnt_exists()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "pass", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Normally you'd do something like"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if obj.attr:\n    obj.attr()\n</code>\n</pre>\n", "senID": 6}, {"text": ["With this, you just do:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n obj.attr()\n</code>\n</pre>\n", "senID": 8}, {"text": ["and forget about it.", "Beware that extensive use of the Null object can potentially hide bugs in your code."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Null", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Since I am also interested about the same subject, I just found out that Design Patterns In Python (work in progress) might be a good start."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Design Patterns In Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dpip.testingperspective.com/"}]}]]