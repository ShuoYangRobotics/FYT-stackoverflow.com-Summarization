[[{"text": ["You can also use the operator module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import operator as op\n#Create a mapping between the string and the operator:\nops = {'+': op.add, '-': op.sub, '*': op.mul}\n\na = [0,1,2]\nb = ['+','-','*']\n\n#use the mapping\nc = ops[b[0]](a[0], a[1])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["i thin you're looking for eval(), but i advice to use something else...\nhowever, "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; eval('-1*2')\n-2\n</code>\n</pre>\n", "senID": 1}, {"text": ["eval 'executes' the string you pass to it, like code.", "so it's quite dangerous for security, especially if the parameters are user input..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["in this case i suggest to use parsing library, such as ply http://www.dabeaz.com/ply/\nthat for such thing is really simple to use and very effective :)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://www.dabeaz.com/ply/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/ply/"}]}], [{"text": ["If your math expressions will fit Python syntax but you are skeered of eval (you should be) you can look into python's ast module (docs).", "It will parse the expression into an abstract syntax tree you can iterate over.", "You can evaluate a limited subset of Python and throw errors if you encounter anything outside your expression grammar."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ast", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "docs", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/ast.html#module-ast"}]}], [{"text": ["Use eval like everyone else is saying but filter it first."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = '1 + 12 / 2 - 12*31'\n&gt;&gt;&gt; allowed = set(' 1234567890()+-/*\\\\')\n&gt;&gt;&gt; if allowed.issuperset(s):\n...     eval(s)\n... \n-365\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can read about http://en.wikipedia.org/wiki/Reverse_Polish_notation"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://en.wikipedia.org/wiki/Reverse_Polish_notation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Reverse_Polish_notation"}]}], [{"text": ["Use eval:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt; eval(str('-1*2'))\n&gt; -2\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Dett,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A Simple eval on the whole string...", "However be aware that if the user inputs the string, eval is risky, unless you do some parsing first"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x = '-1*2'\ny = eval(x)\n</code>\n</pre>\n", "senID": 2}, {"text": ["y will then be the integer value."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]