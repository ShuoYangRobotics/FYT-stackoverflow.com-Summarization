[[{"text": ["Your code has two problems"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The first problem you have is at these lines:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "first problem", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if actor in movie_dict:\n    movie_dict[actor].append(key)\nelse:\n    movie_dict[actor] = (key)\n</code>\n</pre>\n", "senID": 2}, {"text": ["When you write movie_dict[actor] = (key), you are not creating a tuple - the parenthesis are just for precedence.", "To create a tuple, you would have to add a comma at the end:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "movie_dict[actor] = (key)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n movie_dict[actor] = (key,)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Anyway, this will not work as well, because tuples are immutable.", "You should either use a list:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if actor in movie_dict:\n    movie_dict[actor].append(key)\nelse:\n    movie_dict[actor] = [key] # Square brackets\n</code>\n</pre>\n", "senID": 6}, {"text": ["or create new tuples:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n if actor in movie_dict:\n    movie_dict[actor] = movie_dict[actor] + (key,)\nelse:\n    movie_dict[actor] = (key,)\n</code>\n</pre>\n", "senID": 8}, {"text": ["I strongly suggest you to use the first option.", "If you really need to use tuples, convert the lists to tuples after the processing."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["The second problem is that you seem to expect"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "second problem", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n 'rush hour 2'\n</code>\n</pre>\n", "senID": 11}, {"text": ["to be equal to "], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n 'rush    hour 2'\n</code>\n</pre>\n", "senID": 13}, {"text": ["as seen in the dictionary:"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n {'jackie chan': \n    ('rush hour', 'rush hour 2'), \n 'crish tucker': \n    ('rush hour', 'rush    hour 2')}\n</code>\n</pre>\n", "senID": 15}, {"text": ["But this is not true:"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 'rush hour 2' == 'rush    hour 2'\nFalse\n</code>\n</pre>\n", "senID": 17}, {"text": ["How could you solve it?", "Well, the simplest solution I devise is to split the string at spaces and then rejoin it with only one space:"], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"code": "<pre>\n<code>\n def invert_actor_dict(actor_dict):\n    movie_dict = {}\n    for key,value in actor_dict.iteritems():\n        for actor in value:\n            split_movie_name = key.split()\n            # 'rush     hour 2'.split() == ['rush', 'hour', '2']\n            movie_name = \" \".join(split_movie_name)\n            # \" \".join(['rush', 'hour', '2']) == 'rush hour 2'\n            if actor in movie_dict:\n                movie_dict[actor].append(movie_name)\n            else:\n                movie_dict[actor] = [movie_name]\n    return movie_dict\n</code>\n</pre>\n", "senID": 19}], [{"text": ["You can easily do this with collections.defaultdict:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "collections.defaultdict", "tag": "a", "pos": 0, "childList": [{"text": "collections.defaultdict", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/collections.html#collections.defaultdict"}, {"text": "collections.defaultdict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def invert_dict(d):\n    inverted_dict = collections.defaultdict(set)\n    for actor, movies in d.iteritems():\n        for movie in movies:\n            inverted_dict.add(actor)\n    return inverted_dict\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def invert_actor_dict(actor_dict):\n   movie_dict = {}\n   for actor,movies in actor_dict.iteritems(): \n\n       for movie in movies:\n           if not movie_dict.has(movie):\n               movie_dict[movie]=[]\n           movie_dict[movie].append(actor)\n   return movie_dict\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n d = {'jackie chan': ('rush hour', 'rush hour 2'), 'crish tucker': ('rush hour', 'rush hour 2')}\nh = dict()\n\nfor actor, films in d.items():\n    for film in films:\n        if not film in h:\n            h[film] = list()\n        h[film].append(actor)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n d = {'rush hour': ('jackie chan', 'crish tucker'), 'rush hour 2': ('jackie chan', 'crish tucker')}\n\nresult = {}\n\nfor film, names in d.items():\n    for name in names:\n        if not name in result:\n            result[name] = set([film])\n        else:\n            result[name].add(film)\n\nprint result\n</code>\n</pre>\n", "senID": 0}, {"text": ["Result:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Result:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n {'crish tucker': set(['rush hour', 'rush hour 2']), 'jackie chan': set(['rush hour', 'rush hour 2'])}\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The only problem you have is you're using (key) to represent a list, which should be [key]."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def invert_actor_dict(actor_dict):\n    movie_dict = {}\n    for key,value in actor_dict.iteritems():\n\n        for actor in value:\n            if actor in movie_dict:\n                movie_dict[actor].append(key)\n            else:\n                movie_dict[actor] = (key)\n    return movie_dict\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There is a very convenient setdefault method in a dict object.", "With using it, the code simplifies to the following:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "setdefault", "tag": "a", "pos": 0, "childList": [{"text": "setdefault", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#dict.setdefault"}, {"text": "setdefault", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n d = {'rush hour': ('jackie chan', 'crish tucker'), 'rush hour 2': ('jackie chan', 'crish tucker')}\n\nresult = {}\n\nfor film, names in d.items():\n    for name in names:\n        result.setdefault(name,set([])).add(film)\n\nprint result\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A dictionary is by default not not sortable, so you can not sort it.", "You can look into the structure ordered dictionary if the order matters"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ordered dictionary", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/library/collections.html"}]}]]