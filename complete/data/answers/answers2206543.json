[[{"text": ["That's a weird data structure... A list of one item dictionaries."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n key = 'id'\nl = [{'id':44}, {'name':'alexa'},{'color':'blue'}]\n\nprint [ x[key] for x in l if key in x ][0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Assuming you can rely on key being present precisely once..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Maybe you should just convert the list into a dictionary first:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n key = 'id'\nl = [{'id':44}, {'name':'alexa'},{'color':'blue'}]\n\nd = {}\nfor x in l:\n    d.update(x)\nprint d[key]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["All the other answers solve your problem, I am just suggesting an alternative way of going about doing this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Instead of having a list of dicts where you query on the key and have to iterate over all list items to get values, just use a dict of lists.", "Each key would map to a list of values (or just one value if all your dicts had distinct sets of keys)."], "childNum": 7, "tag": "p", "senID": 1, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So,"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n data=[{'id':44}, {'name':'alexa'},{'color':'blue'}]\n</code>\n</pre>\n", "senID": 3}, {"text": ["becomes"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n data={'id':[44], 'name':['alexa'], 'color':['blue']}\n</code>\n</pre>\n", "senID": 5}, {"text": ["and you can neatly access the value for 'id' using data['id'] (or data['id'][0] if you only need one value)."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "'id'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "data['id']", "childNum": 0, "tag": "code", "childList": []}, {"text": "data['id'][0]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If all your keys are distinct across the dicts (as in your example) you don't even have to have lists of values."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n data={'id':44, 'name':'alexa', 'color':'blue'}\n</code>\n</pre>\n", "senID": 8}, {"text": ["Not only does this make your code cleaner, it also speeds up your queries which no longer have to iterate over a list. "], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You could do something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; KEY = 'id'\n&gt;&gt;&gt;\n&gt;&gt;&gt; my_list = [{'id':44}, {'name':'alexa'},{'color':'blue'}]\n&gt;&gt;&gt; my_ids = [x[KEY] for x in my_list if KEY in x]\n&gt;&gt;&gt; print my_ids\n[44]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which is obviously a list of the values you want.", "You can then print them as required."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Probably this is the best solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; L = [{'id':44}, {'name':'alexa'},{'color':'blue'}]\n\n&gt;&gt;&gt; newd = {}\n&gt;&gt;&gt; for d in L:\n...    newd.update(d)\n&gt;&gt;&gt; newd['id']\n44\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import dropwhile\n &gt;&gt;&gt; def find_value(l, key):\n ...    return dropwhile(lambda x: key not in x, l).next()[key]\n &gt;&gt;&gt; find_value([{'id':44}, {'name':'alexa'},{'color':'blue'}], \"id\")\n</code>\n</pre>\n", "senID": 0}, {"text": ["This will do a linear search, but only until the element is found."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you want to have proper error handling, use:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def find_value(l, key):\n    try:\n        return dropwhile(lambda x: key not in x, l).next()[key]\n    except StopIteration:\n        raise ValueError(key)\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; L = [{'id':44}, {'name':'alexa'},{'color':'blue'}]\n&gt;&gt;&gt; newd=dict(d.items()[0] for d in L)\n&gt;&gt;&gt; newd['id']\n44\n</code>\n</pre>\n", "senID": 0}]]