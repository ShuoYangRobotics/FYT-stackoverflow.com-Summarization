[[{"text": ["Do a while True inside your for loop, put your try code inside, and break from that while loop only when your code succeeds."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "while True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "try", "childNum": 0, "tag": "code", "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for i in range(0,100):\n    while True:\n        try:\n            // do stuff\n        except:\n            continue\n        break\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The clearest way would be to explicitly set i.", "For example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n i = 0\nwhile i &lt; 100:\n    try:\n        # do stuff\n        i += 1\n    except MyException:\n        continue\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This question may be helpful: is there a pythonic way to try something up to a maximum number of times?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "is there a pythonic way to try something up to a maximum number of times?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/567622/is-there-a-pythonic-way-to-try-something-up-to-a-maximum-number-of-times"}]}], [{"text": ["The more \"functional\" approach without using those ugly while loops:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def tryAgain(retries=0):\n    if retries &gt; 10: return\n    try:\n        # Do stuff\n    except:\n        retries+=1\n        tryAgain(retries)\n\ntryAgain()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["increment your loop variable only when the try clause succeeds"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There is something similar in the Python Decorator Library."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python Decorator Library", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/PythonDecoratorLibrary#Retry"}]}, {"text": ["Please bear in mind that it does not test for exceptions, but the return value.", "It retries until the decorated function returns True."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["A slightly modified version should do the trick."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I prefer to limit the number of retries, so that if there's a problem with that specific item you will eventually continue onto the next one, thus:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range(100):\n  for attempt in range(10):\n    try:\n      # do thing\n    except:\n      # perhaps reconnect, etc.\n    else:\n      break\n  else:\n    # we failed all the attempts - deal with the consequences.\n</code>\n</pre>\n", "senID": 1}]]