[[{"text": ["Explaining \"persistent\" data structures is much, much easier if you use the word the Python community uses: \"immutable\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Everyone understands immutable numbers.", "2+2 can't update 2, it has to create a new value."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "2+2", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Everyone understand mutable lists.", "[2, 3].append(4) actually updates the [2,3] list.", "The list is mutable, the individual numbers are not.", "See above."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "[2, 3].append(4)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "[2,3]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["The cool step is explaining immutable tuples.", "(2,3).append(4) can't exist because a tuple is an immutable (\"persistent\") data structure.", "In this case, neither the tuple nor the numbers are mutable."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "(2,3).append(4)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Immutable strings, similarly, makes perfect sense.", "\"hello\" + \"there\" cannot update the string \"hello\", but can create a new string.  "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "\"hello\" + \"there\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Immutable fractions and decimal numbers are good examples of immutable (\"persistent\") data structures."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "fractions", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "decimal", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Persistent data structures are data structures which, unlike arrays or lists, always preserve their original structure and contents."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["They are effectively immutable - instead of changing such a structure, any computation will yield a new copy leaving the original structure unchanged.", "Whereas conventional data structures follow an imperative (change-based) philosophy, persistent ones are commonly used in functional programming where, in extreme cases, no change is allowed at all.", "The advantage of this paradigm is that persistent data are much safer, often easier to handle and even preventing bugs connected to unintended change and multithreading issues.", "Many problems can be formulated functionally in a much more concise way."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "copy", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Example for a non-persistent data structure: The list (vector-list)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n list = [1, 2, 3]\n# List is [1, 2, 3]\n\nlist += [4]\n# Added an element at the end\n\nlist[0] = 42\n# We changed the first element to 42\n# List is [42, 2, 3, 4]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Persistence example: Linked lists (Haskell)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n list = [1, 2, 3]\n# List is [1, 2, 3]\n\nlist2 = 0 : list\n# List2 combines [0] and [1, 2, 3] to [0, 1, 2, 3]\n# List is still [1, 2, 3]\n\nlist3 = updateAt 0 42 list\n# List3 contains the elements of list2 with the first one set to 42\n# List and List2 still hold their original values\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Other useful concept words to describe persistent data structures are \"Snapshot\" or \"Version\", which you may precede by \"virtual\" because an efficient implementation of a persistent structure would not merely make multiple copies.", "Persistent Data Structure libraries strive to store and process the structures in efficient fashion."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Snapshot", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "Version", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["Partial persistence allows modifications to the current structure but allows previous versions of that structure to be queried.", "Full persistence allow any version of the structure to be modified and queried.", "In both cases, any modification does not impact the integrity of previous versions which can still be shown/queried as they were prior to the changes."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I think that for the presentation page of your project, you can use much of the wording from Dario and S.Lott, trying to address the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": "Brief description of what Persistent Data Structures are", "tag": "none", "senID": 3}, {"text": "possibly a link or two to basic introduction articles of the concept", "tag": "none", "senID": 4}, {"text": "Quick exit point about this project not being about data persistence (to disk and such)", "tag": "none", "senID": 5}, {"text": "Where this is used", "tag": "none", "senID": 6}, {"text": "What it can do for you", "tag": "none", "senID": 7}, {"text": "Brief code snippets and their output", "tag": "none", "senID": 8}]}, {"text": ["Also, do remove [from the home page] details about the data type / isinstance and all that.", "This is valuable info, but only of use for in a user manual or some other in-depth resource."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["The sort of phrasing I would suggest is that the value of the given structure is persistent across function calls, and that any function calls that result in a change to the structure result in a new structure being created based on copy-on-change semantics."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, given a cons type structure L defined as cons(1,cons(2, cons(3, None))), prepending the value 0 to this list results in a new list L' defined as cons(0, L), which expands to cons(0, cons(1,cons(2, cons(3, None)))).", "However in order to append the value 4 to this list, this requires a change to a value, which results in a copy being created which contains the change: cons(0, cons(1,cons(2, cons(3, cons(4, None)))))"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Obviously you can have more efficient implementations that this, but this is one logical representation of what can occur. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Personally prefer the term immutable list, which you can say differs from an ordinary python (ordered) tuple in that it defines appending, prepending, and concatenation, since that's probably clearer to the average developer :-)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I think the key point to make is that persistent data structures are an optimization for handling immutable values. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But they are an important optimization, even with fast cpu and big memory."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For example, Java strings are immutable but they do NOT have a persistent data structure behind the scenes.", "That means you have to use things like StringBuilder.", "If they had a persistent data structure then you could just concatenate and not worry about it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Immutability is becoming important because it helps deal with concurrency.", "But to make immutability efficient requires persistent data structures."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Clojure has some good explanations of persistent data structures."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["When you alter a mutable data structure (e.g.", "insert into a hash table) it changes in-place and the previous version is lost.", "When you alter a persistent data structure (e.g.", "insert into a Map) you get a new data structure and the previous version remains valid."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Map", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}]]