[[{"text": ["Redirect stdout and capture its output in an object?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "stdout", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\n\n# a simple class with a write method\nclass WritableObject:\n    def __init__(self):\n        self.content = []\n    def write(self, string):\n        self.content.append(string)\n\n# example with redirection of sys.stdout\nfoo = WritableObject()                   # a writable object\nsys.stdout = foo                         # redirection\n\nprint \"one, two, three, four\"            # some writing\n</code>\n</pre>\n", "senID": 1}, {"text": ["And then just take the \"output\" from foo.content and do what you want with it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "foo.content", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Please disregard if I have misunderstood your requirement."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You can call __str__ and __repr__ on python objects to get their string representations (there's a tiny difference between them, so consult the docs).", "That's actually done by print internally."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "__str__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__repr__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I believe one of these two things will accomplish what you're looking for:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The Python exec statement: http://docs.python.org/reference/simple_stmts.html#exec\nor the Python eval function: http://docs.python.org/library/functions.html#eval"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/reference/simple_stmts.html#exec", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/simple_stmts.html#exec"}, {"href": "http://docs.python.org/library/functions.html#eval", "text": "http://docs.python.org/library/functions.html#eval", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Both of them let you dynamically evaluate strings as Python code."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["UPDATE:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["What about:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def calltest(keywordstr):\n    return eval(\"test(\" + keywordstr + \")\")\n</code>\n</pre>\n", "senID": 5}, {"text": ["I think that will do what you're looking for."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["for more of an explanation:\ni have a list of strings i got from a a comment line of a data file.", "it looks like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"a='0.015in' lPrime='0.292' offX='45um' offY='75um' sPrime='0.393' twistLength='0'\",\n \"a='0.015in' lPrime='0.292' offX='60um' offY='75um' sPrime='0.393' twistLength='0'\",\n \"a='0.015in' lPrime='0.292' offX='75um' offY='75um' sPrime='0.393' twistLength='0'\",\n '']\n</code>\n</pre>\n", "senID": 1}, {"text": ["i want to put the values into some structure so i can plot the various things versus any variabls \nso the list is a legend basically, and i want to plot functions of the traces versus variables given in teh legend. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["so if for each entry i have a trace, then i may want to plot max(trace) vs offX for a series of a values."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you have a string 'my_string' like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a=123 b=456 c='hello'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you can pass it to a function 'my_fun' like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n my_fun(**eval('{' + my_string.replace(' ', ',') + '}'))\n</code>\n</pre>\n", "senID": 3}, {"text": ["Depending on the precise formatting of my_string, you may have to vary this a little, but this should get you 90% of the way there."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I wouldn't do it that way, personally.", "A far less hackish solution is to build a dictionary from your data first, and then pass it whole to a function as **kwargs.", "For example (this isn't the most elegant way to do it, but it is illustrative):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "**kwargs", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import re\n\nremove_non_digits = re.compile(r'[^\\d.]+')\n\ninputList = [\"a='0.015in' lPrime='0.292' offX='45um' offY='75um' sPrime='0.393' twistLength='0'\",\n \"a='0.015in' lPrime='0.292' offX='60um' offY='75um' sPrime='0.393' twistLength='0'\",\n \"a='0.015in' lPrime='0.292' offX='75um' offY='75um' sPrime='0.393' twistLength='0'\", '']\n\n#remove empty strings\nflag = True\nwhile flag:\n    try:\n        inputList.remove('')\n    except ValueError:\n        flag=False\n\noutputList = []\n\nfor varString in inputList:\n    varStringList = varString.split()\n    varDict = {}\n    for aVar in varStringList:\n        varList = aVar.split('=')\n        varDict[varList[0]] = varList[1]\n    outputList.append(varDict)\n\nfor aDict in outputList:\n    for aKey in aDict:\n        aDict[aKey] = float(remove_non_digits.sub('', aDict[aKey]))\n\nprint outputList\n</code>\n</pre>\n", "senID": 1}, {"text": ["This prints:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [{'a': 0.014999999999999999, 'offY': 75.0, 'offX': 45.0, 'twistLength': 0.0, 'lPrime': 0.29199999999999998, 'sPrime': 0.39300000000000002}, {'a': 0.014999999999999999, 'offY': 75.0, 'offX': 60.0, 'twistLength': 0.0, 'lPrime': 0.29199999999999998, 'sPrime': 0.39300000000000002}, {'a': 0.014999999999999999, 'offY': 75.0, 'offX': 75.0, 'twistLength': 0.0, 'lPrime': 0.29199999999999998, 'sPrime': 0.39300000000000002}]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Which appears to be exactly what you want. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]