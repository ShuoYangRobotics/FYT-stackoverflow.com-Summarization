[[{"text": ["If you want a crash-course in CS, it would be best to start with an Introduction to Algorithms.", "This is the associated classic textbook"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Introduction to Algorithms", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dspace.mit.edu/bitstream/handle/1721.1/37150/6-046JFall-2004/OcwWeb/Electrical-Engineering-and-Computer-Science/6-046JFall-2004/CourseHome/index.htm"}, {"text": "This", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0262032937"}]}, {"src": "http://dspace.mit.edu/bitstream/handle/1721.1/37150/6-046JFall-2004/NR/rdonlyres/Electrical-Engineering-and-Computer-Science/6-046JFall-2004/6E84AF18-F63F-4423-87FB-DDD34704E706/0/chp%5F6046textcove.jpg", "tag": "img", "senID": 1}], [{"text": ["I believe a good programmer is the guy who knows algorithms better than any language he knows.", "That is because if he knows algorithm very well, he will program in any language he decides do learn, any.", "Simply because algorithms can be applied in any language, that's why they transcend the language and are given in pseudocode.", "Although, I do recommend reading a language book while you read an algorithms book, because you will want to implement what you are learning, but don't overstimate a language.", "That's a mistake."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I recommend you to read Structure and Interpretation of Computer Programs.", "You will understand how every language works and you will therefore program better in any language.", "I'd recommend reading C How to Program by Deitel meanwhile.", "After you are done with SICP, read an algorithm book, like Introduction to Algorithms."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Structure and Interpretation of Computer Programs", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0262011530"}, {"text": "C How to Program", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0132404168"}, {"text": "Introduction to Algorithms", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0262032937"}]}, {"text": ["I usually recommend learning a low-level language before you learn high-level like Python or Java, but it's never too late to catch up...", "I think you can't be a good programmer if you do not understand what your code is doing.", "You need to understand memory allocation, pointers, registers and everything.", "Buy a C book, I recommend the Deitel's one in the last paragraph, and have fun!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you want to implement something for fun once in a while, which I recommend, go to UVa Online Judge, pick a problem you think you can solve, and try it.", "Then, submit to the judge.", "The interesting here is that the judge will not accept any solution you send.", "If you send a solution that will get to the correct answer, but there is a solution that would get there too in one-tenth of the time, the judge will not accept the first.", "You can train thinking on optimization, or test an algorithm you learned in the book you are reading."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "UVa Online Judge", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://uva.onlinejudge.org/"}]}, {"text": ["If you are willing to really learn Computer Science, though, really learn it, I'd say you should read The Art of Computer Programming.", "It's not an easy ride, you will need to come back to read again eventually, but once you are done, you will have a very complete idea of almost everything there is to know."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "really", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "The Art of Computer Programming", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0201485419"}]}], [{"text": ["It's Scheme, not Python, but SICP is oriented around exercises and will expand your knowledge in a whole new direction.", "You could get a fair amount of mileage out of translating the exercises in it to Python, but ultimately, you'll get the most benefit out of it by working through it in a Lisp of some sort, if not Scheme.", "It was written as an introduction to programming for MIT freshmen so it should be at about the right level for you now that you have a little bit of CS and Python under your belt.", "There are also a complete set of videos of the classroom lectures corresponding to the book online for free. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "SICP", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mitpress.mit.edu/sicp/"}, {"text": "classroom lectures", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/"}]}], [{"text": ["I'm going to list two books that, while old, are really great.", "These are the two books that had the most impact on my development as a software developer."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Software Tools in Pascal teaches you how to write small, simple code that works well with other code to solve problems.", "It teaches you to start with a simple part of the problem, solve that, then extend the solution into a full working program.", "(And this book was written years before the whole \"agile\"/\"extreme programming\" movement.", ")  It also discusses what is good and bad about the Pascal language; it will be interesting for you to compare Pascal with C and C++."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Software Tools in Pascal", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0201103427"}]}, {"text": ["The Elements of Programming Style is so old its examples are all FORTRAN and PL/I.", "That doesn't matter because the lessons are timeless.", "This book takes examples of code from programming textbooks of its day, rips them apart, and puts them back together again; and in so doing it teaches you important lessons.", "This is a small book, deliberately modeled on the classic The Elements of Style, and you can get it used for cheap.", "In the early 1990s, Microsoft used to give out this book to newly hired software developers!"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "The Elements of Programming Style", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0070342075"}, {"text": "The Elements of Style", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/The_Elements_of_Style"}]}, {"text": ["I'll also second the idea of you working your way through a data structures book.", "Having the example code written in pseudocode is actually a good idea; you can then write, test, and debug actual working code based on the examples in the book.", "That's a great way to learn the data structures.", "You need to learn how linked lists, hash tables, and trees work, in order to understand the basic underpinnings of the high-level libraries and tools you use.", "You will learn more if you do your data structures work in C or C++ than Python, I think, because Python is too powerful.", "(You will appreciate the power of Python more after trying to get along without it!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you want to advance yourself and learn C, one way to do both at the same time would be to get The C Programming Language and work your way through that.", "It does contain exercises and they are useful."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "The C Programming Language", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/The_C_Programming_Language_(book)"}]}, {"text": ["So, in summary, my suggested plan for you now is:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["0) Read The C Programming Language book and do its exercises."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "The C Programming Language", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["1) Read Software Tools in Pascal."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Software Tools in Pascal", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["2) Read The Elements of Programming Style."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "The Elements of Programming Style", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["3) Read a data structures book, and code up all data structures in C."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["At that point, decide whether you want to tackle C++, or LISP/Scheme, or just more advanced Python, or what."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Good luck and I hope you have fun!"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["I've found these two books to be a great introduction."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Learning to Program and\nPractical Programming: An Introduction to Computer Science Using Python"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Learning to Program", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pragprog.com/titles/ltp2/learn-to-program-2nd-edition"}, {"href": "http://www.pragprog.com/titles/gwpy/practical-programming", "text": "Practical Programming: An Introduction to Computer Science Using Python", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["They might be \"too basic\" after the first book you've read, but I found the Learning to Program great because of the exercises at the end of each chapter.", "It might be nice for you to do a comparison of Python and Ruby, too (Learning to Program uses Ruby).", "With Django and Ruby on Rails so popular, it's not a bad idea."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If what you primarily want is to learn C++, Accelerated C++ would be a good choice.", "If you really want to learn computer science, it's hard to beat Structure and Interpretation of Computer Programs (but be aware that it uses Scheme as its teaching language).", "Introduction to Algorithms is a fine book, but based on what you've said, I suspect that at the moment you'd find it more intimidating than helpful."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Accelerated C++", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "Structure and Interpretation of Computer Programs", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "Introduction to Algorithms", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}], [{"text": ["A lot of good books have been mentioned already on algorithms so I won't touch that (you should definitely get introduction to algorithms, it weighs a tonne but should be in every developers library).", "The only thing really missing from the algorithms book is a solid definition of Big-O notation and what it means.", "You may need to read up on this first as it is pretty fundamental to evaluating algorithms and the book seems to assume you know it already."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I really recommend Object Thinking by David West.", "This book covers object oriented programming but does it from a historical perspective.", "It is very rare to find a book that provides a context of how we arrived with object oriented practices.", "The book introduces the major contributors and changes in approaches over the years from functional Abstract Data Type thinking useful in C, to more modern languages.", "It also gives the sense that OO programming is not the end of the line which is nice, as many object books are very dogmatic.", "In addition to a historical perspective it gives some pragmatic ways of problem solving using objects.", "It's useful for a computer scientist to understand the evolution of the craft."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Object Thinking", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0735619654"}]}, {"text": ["I'm surprised it hasn't been mentioned because I do not know a software engineer who doesn't own  Design Patterns.", "I have heard these patterns referenced in just about every job I've ever worked.", "It's good to know them."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Design Patterns", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0201633612"}]}, {"text": ["Another classic book (which is much more difficult) is the dragon book Compilers Principles and Design.", "This covers how a compiler converts your code into machine language.", "Although you will unlikely write a compiler yourself (although i recommend it, very fun) it is a worthy read as perhaps your 3rd book (maybe even later, this stuff is tough).", "This book shows how the data structures you learned from the algorithms book can be applied to solve a common problem. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Compilers Principles and Design", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0201100886"}]}]]