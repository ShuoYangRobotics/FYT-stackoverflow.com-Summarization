[[{"text": ["Any non empty string in Python (and most other languages) is true as are all non-zero numbers and non-empty lists, dictionaries, sets and tuples.1"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "1", "childNum": 0, "tag": "sup", "pos": 0, "childList": []}]}, {"text": ["A nicer way to do what you want is:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n name = input(\"what is your name?\")\nif name in (\"Kamran\", \"Samaneh\"):\n    print(\"That is a nice name\")\nelse:\n    print(\"You have a boring name ;)\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["This creates a tuple containing the names that you want and performs a membership test."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["1 As delnan points out in the comments, this applies to allwell writtencollections.", "That is, if you implement a custom collection class, make sure that it is false when it's empty."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "1 As delnan points out in the comments, this applies to allwell writtencollections. That is, if you implement a custom collection class, make sure that it is false when it's empty.", "childNum": 1, "tag": "sup", "pos": -1, "childList": [{"text": "well written", "tag": "em"}]}, {"text": "well written", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["http://docs.python.org/library/stdtypes.html#truth-value-testing"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#truth-value-testing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#truth-value-testing"}]}, {"text": ["\"....All other values are considered true \u2014 so objects of many types are always true."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["In Python an empty string is considered False, True otherwise."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "False", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You could use the in operator:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if name in (\"Kamran\",\"Samaneh\"):\n    print(\"That is a nice name\")\nelse:\n    print(\"You have a boring name ;)\")\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Besides the empty string '', strings will all evaluate to True (see this page for a full list of values of all types that evaluate toFalse.", "This follows the logic of many other programming languages (except some which also evaluate strings like '0', 'false', etc.", "to False).", "The exact decision of what to do is somewhat arbitrary, but the choice made can be explained as allowing the cast to be used as a simple way to test for empty (default, or unpopulated) strings."], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "''", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "this page for a full list of values of all types that evaluate toFalse", "tag": "a", "pos": -1, "childList": [{"text": "False", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#truth-value-testing"}, {"text": "False", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "'0'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "'false'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["You can always force a cast of any type to bool using the bool() function."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "bool", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "bool()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; bool('')\nFalse\n&gt;&gt;&gt; bool('non-empty string')\nTrue\n&gt;&gt;&gt; bool('0')\nTrue\n&gt;&gt;&gt; bool('False')\nTrue\n&gt;&gt;&gt; bool('false')\nTrue\n</code>\n</pre>\n", "senID": 2}], [{"text": ["A non-empty string is True, yes.", "An empty one is False.", "This is super-handy."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Evidently, it must be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n name = raw_input(\"what is your name?\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["not"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n name = input(\"what is your name?\")\n</code>\n</pre>\n", "senID": 3}, {"text": [], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["What you wrote is like:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if (name == \"Kamran\" or \"Samaneh\")\n</code>\n</pre>\n", "senID": 6}, {"text": ["Another good expression is:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n if name == (\"Kamran\" or \"Samaneh\")\n</code>\n</pre>\n", "senID": 8}, {"text": ["But I also prefer if name in (\"Kamran\" or \"Samaneh\") as already shown"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": [], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["By the way, it can be written:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n print(\"That is a nice name\" if raw_input(\"what is your name?\") in (\"Kamran\",\"Samaneh\")\n      else \"You have a boring name ;)\")\n</code>\n</pre>\n", "senID": 12}]]