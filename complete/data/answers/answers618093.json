[[{"text": ["No, you can't do that.", "range() expects integer arguments.", "If you want to know if x is inside this range try some form of this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "range()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n print 0.0 &lt;= x &lt;= 0.5\n</code>\n</pre>\n", "senID": 1}, {"text": ["Be careful with your upper limit.", "If you use range() it is excluded (range(0, 5) does not include 5!"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "range()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "range(0, 5)", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n print 'yes' if 0 &lt; x &lt; 0.5 else 'no'\n</code>\n</pre>\n", "senID": 0}, {"text": ["range() is for generating arrays of consecutive integers"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "range()", "tag": "a", "pos": 0, "childList": [{"text": "range()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#range"}, {"text": "range()", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 1.1\n&gt;&gt;&gt; 0&lt;= s &lt;=0.2\nFalse\n&gt;&gt;&gt; 0&lt;= s &lt;=1.2\nTrue\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I would use the numpy library, which would allow you to do this for a list of numbers as well:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from numpy import array\na = array([1, 2, 3, 4, 5, 6,])\na[a &lt; 2]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Old faithful:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if n &gt;= a and n &lt;= b:\n</code>\n</pre>\n", "senID": 1}, {"text": ["And it doesn't look like Perl (joke)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["To check whether some number n is in the inclusive range denoted by the two number a and b you do either "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if   a &lt;= n &lt;= b:\n    print \"yes\"\nelse:\n    print \"no\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["use the replace '>=' and '&lt;=' withe '>' and '&lt;' to check whether n is in the exclusive range denoted by a and b (i.e.", "a and b are not themselves members of the range)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Alternatively, you can also check for"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if (b - n) &gt;= a :\n    print \"yes\"\n    ...\n</code>\n</pre>\n", "senID": 4}, {"text": ["Range will produce an arithmetic progression defined by the two (or three) arguments converted to integers.", "See the documentation.", "This is not what you want I guess."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "documentation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html?#range"}]}], [{"code": "<pre>\n<code>\n def belongsTo(value, rangeStart, rangeEnd):\n        if value &gt;= rangeStart and value &lt;= rangeEnd:\n                return True\n        return False\n</code>\n</pre>\n", "senID": 0}, {"text": ["Now you can:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print \"1.1 belongs to &lt;0, 0.5&gt;:\", belongsTo(1.1, 0, 0.5)\n</code>\n</pre>\n", "senID": 2}]]