[[{"text": ["i is not an integer.", "I guess i is already an entry of the feed but better rename it:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "i", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Try: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for entry in d.entries:\n  print entry.summary\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want the first 10 entries you have to do:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n try:\n  for i in range(10):\n    print d.entries[i].summary\nexcept IndexError:\n  pass\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n for i in range(10):\n    print d.entries[i].summary\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You first assign a list of integers to i (i = range(10)) and then just lose the reference to this list.", "Are you sure you didn't mean:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "i = range(10)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n r = range(10)\n\nfor i in r:\n</code>\n</pre>\n", "senID": 1}, {"text": ["or simply:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for i in range(10):\n</code>\n</pre>\n", "senID": 3}], [{"text": ["for all entries make:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import feedparser\nd = feedparser.parse(\"some URL\")\n\nprint \"Information of user\" \n\nfor i in range(len(d['entries'])):\n    print d.entries[i].summary \n\nprint \" \"\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import feedparser\nfrom StringIO import StringIO\nd = feedparser.parse(\"some URL\")\nbuff = StringIO()\nprint &gt;&gt;buff, \"Information of user\" \n\nfor i,e in enumerate(d.entries):\n    print &gt;&gt;buff, i, e.summary \n\nprint &gt;&gt;buff,\" \"\nprint buff\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you need the index, I suggest also to use a String Buffer to do I/O operations on big string."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Say you want to print the 10 first elements of the list if there is 10 or more, or what it contains otherwise.", "Felix allready proposed a working solution with exception management.", "You could also use itertools like below. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import feedparser\nd = feedparser.parse('http://feedparser.org/docs/examples/atom10.xml')\n\nfrom itertools import islice\n\nfor elt in islice(d.entries, 1, 10):\n    print elt.summary\n</code>\n</pre>\n", "senID": 1}, {"text": ["What is nice with islice is that if you want to access to elements from say 3 to 10 (a slice) it also works as easily.", "Just have to replace 1 with 3.", "It also works with step if you want say only even elements, etc."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]