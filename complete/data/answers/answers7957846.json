[[{"text": ["It seems like a failed attempt to match a Python function signature:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python function signature", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/compound_stmts.html#function-definitions"}]}, {"code": "<pre>\n<code>\n import re\n\nregex = re.compile(r\"\"\" # r'' means that \\n and the like is two chars\n                        # '\\\\','n' and not a single newline character\n\n    ( # begin capturing group #1; you can get it: regex.match(text).group(1)\n      ^   # match begining of the string or a new line if re.MULTILINE is set\n      .*  # match zero or more characters except newline (unless\n          # re.DOTALL is set)\n      def # match string 'def'\n      \\W* # match zero or more non-\\w chars i.e., [^a-zA-Z0-9_] if no\n          # re.LOCALE or re.UNICODE\n    ) # end capturing group #1\n\n    (\\w+) # second capturing group [a-zA-Z0-9_] one or more times if\n          # no above flags\n\n    \\W*   # see above\n\n    \\(    # match literal paren '('\n      (.*)  # 3rd capturing group NOTE: `*` is greedy `.` matches even ')'\n            # therefore re.match(r'\\((.*)\\)', '(a)(b)').group(1) == 'a)(b'\n    \\)    # match literal paren ')'\n     :    # match literal ':'\n    \"\"\", re.VERBOSE|re.DEBUG)\n</code>\n</pre>\n", "senID": 1}, {"text": ["re.DEBUG flag causes the output:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "re.DEBUG", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n subpattern 1\n  at at_beginning\n  max_repeat 0 65535\n    any None\n  literal 100\n  literal 101\n  literal 102\n  max_repeat 0 65535\n    in\n      category category_not_word\nsubpattern 2\n  max_repeat 1 65535\n    in\n      category category_word\nmax_repeat 0 65535\n  in\n    category category_not_word\nliteral 40\nsubpattern 3\n  max_repeat 0 65535\n    any None\nliteral 41\nliteral 58\n</code>\n</pre>\n", "senID": 3}, {"text": ["more"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "more", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re"}]}], [{"text": ["PS: I like the effort that you made to try to understand the regex.", "It will serve you well, much better than people asking what doesr'(^.*def\\W*)(\\w+)\\W*\\((.", "*)\\):'mean."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PS: I like the effort that you made to try to understand the regex. It will serve you well, much better than people asking what doesr'(^.*def\\W*)(\\w+)\\W*\\((.*)\\):'mean.", "childNum": 1, "tag": "em", "pos": -1, "childList": [{"text": "r'(^.*def\\W*)(\\w+)\\W*\\((.*)\\):'", "tag": "code"}]}, {"text": "r'(^.*def\\W*)(\\w+)\\W*\\((.*)\\):'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["The r'' syntax has nothing to with regular expressions (or at least, not directly).", "The r stands for raw and is simply an indicator to Python that no string interpolation should be performed on the string."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "r''", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "r", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "raw", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["This is often used with regular expressions so that you don't have to escape backslash (\\) characters, which would otherwise be eaten by the normal string interpolation mechanism."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "\\", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I'm not sure what \"beginning of any character\" means.", "The ^ character matches the beginning of a line."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "^", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["def matches the characters def.", "For \\W, take a look at pydoc re, which describes the regular expression language."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "def", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "def", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "\\W", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "pydoc re", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["As above."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Other than the above, your interpretation seems largely correct."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["r'(^.*def\\W\\*)(\\w+)\\W*((.", "*)):'"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "r'(^.*def\\W\\*)(\\w+)\\W*((.*)):'", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://rubular.com/r/qiz39bPf7F"}]}, {"code": "<pre>\n<code>\n ==================================\n\nr' tells python this is a raw string so you don't have to double escape all the \\\n\n^ match start of string\n\n() in each case this means group this match where each () is a different group\n\n.* match zero or more of any characters\n\ndef match the literal 'def'\n\n\\W* match zero or more of any non word character\n\n() more grouping of the contained expression\n\n\\w+ match one or more of word character\n\n\\W* zero or more of any non word character\n\n\\( escape the left paren\n\n() more grouping of the contained expression\n\n.* zero of more of any character\n\n\\) escape the right paren\n\n: match a single colon literal\n</code>\n</pre>\n", "senID": 1}, {"text": ["This looks like it is trying to match a python method definition.", "Here is a link to play with this regular expression.", "Yes it is powered by Ruby, but the syntax is pretty much the same across all languages, I use this site to test regexes for Python, Java and Ruby."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Here is a link to play with this regular expression.", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://rubular.com/r/qiz39bPf7F"}]}], [{"tag": "ul", "num": 3, "lis": [{"text": "r'...' \u2192 the preferred way to define the string of a regular expression in Python", "tag": "none", "senID": 0}, {"text": "(...) \u2192 regex term", "tag": "none", "senID": 1}, {"text": "^ \u2192 matches only with the beginning of the string", "tag": "none", "senID": 2}]}, {"text": ["So, in the first pair of parenthesis (^.def\\W), firstly it matches with the string."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "def\\W", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": ". \u2192 matches any character", "tag": "none", "senID": 4}, {"text": "* \u2192 repeat the previous match 0 or more times", "tag": "none", "senID": 5}]}, {"text": ["Then .", "* will match anything any number of times.", "The following 'def' is an exact match, that only matches with itself."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "\\W \u2192 matches anything that is NOT a letter, nor a number, nor the underscore character.", "tag": "none", "senID": 7}]}, {"text": ["Then \\W* will match zero or more of these non-letter-number-underscore characters.", "The next pair of parenthesis (\\w+) you got it right.", "In the last part \\W*\\((.", "*)\\): the initial \\W* means the same thing as the previous \\W* .", "Next, \\( matches with ( , then there is the group (.", "*) which means, as previously, anything any number of times, followed by \\): that matches ): ."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["An example of string that is matched by this regular expression is:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n thing_def = function_name (123 anything in here):\n</code>\n</pre>\n", "senID": 10}], [{"text": ["7.\\W*, we know that one already."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The whole thing seems to be matching a definition of a function in python i.e.", "\"def foo(x):\" will be matched.", "Dealing with regular expressions is hard - using tools such as http://www.pythonregex.com/ helps me to try out different things.", "And since RE are slightly different in different languages, it's nice to have tools for those too."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.pythonregex.com/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.pythonregex.com/"}]}]]