[[{"code": "<pre>\n<code>\n reduce(int.__mul__,range(n,0,-2))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Isn't that just the same as the factorial with a different ending condition and a different parameter to the recursion call?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def doublefactorial(n):\n     if n &lt;= 0:\n         return 1\n     else:\n         return n * doublefactorial(n-2)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If n is even, then it will halt when n == 0.", "If n is odd, then it will halt when n == -1."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "n == 0", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "n", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "n == -1", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n def double_fact(number):\n    if number==0 or number==1:\n        return 1\n    else:\n        return number*double_fact(number-2)\n</code>\n</pre>\n", "senID": 0}, {"text": ["I think this should work for you."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n def doublefactorial(n):\n     if n &lt;= 0:\n         return 1\n     else:\n         return n * doublefactorial(n-2)\n</code>\n</pre>\n", "senID": 0}, {"text": ["That should do it.", "Unless I'm misunderstanding"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n def doublefactorial(n):\n     if n in (0, 1):\n         return 1\n     else:\n         return n * doublefactorial(n-2)\n</code>\n</pre>\n", "senID": 0}, {"text": ["should do it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I hope I understand it correctly, but will this work"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def factorial(n):\n if n == 0 or n == 1:\n     return 1\n else:\n     return n * factorial(n-2)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["reduce(lambda x,y: y*x, range(n,1,-2))"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "reduce(lambda x,y: y*x, range(n,1,-2))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Which is basically the same as the simple iterative version:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n x = n\nfor y in range(n-2, 1, -2):\n    x*=y\n</code>\n</pre>\n", "senID": 2}, {"text": ["Obviously you can also do it recursively, but what's the point ?", "This kind of example implemented using recursivity are fine when using all recursive languages, but with imperative language it's always making simple tools like recursivity looking more complex than necessary, while recursivity can be a real simplifier when dealing with fundamentally recursive structures like trees."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]