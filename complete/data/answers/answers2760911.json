[[{"text": ["You can't.", "That's the point - a hash is one-way, it's not the same as an encryption."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You cannot decode an md5 hash, as hashing is a process that is best thought of as one-way encoding (that is to say what is hashed cannot be de-hashed; one can only determine what was hashed, either by examining a list of known hashes, or by hashing a set of inputs and matching the resulting hashes with the hash you are trying to \"decode\"). "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "one-way encoding", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Cryptographic_hash_function"}]}, {"text": ["Quoting Wikipedia, the key features of such a hashing algorithm are:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The most common uses of such algorithms today are: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Storing passwords ", "tag": "none", "senID": 3}, {"text": "Verifying the contents of files.", "tag": "none", "senID": 4}]}, {"text": ["If you want to two-way encrypt the data, you need to look at other cryptographic libraries for Python (As usual, Stackoverflow has a recommendation)."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "recommendation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2532983/free-cryptography-libraries"}]}], [{"text": ["I don't know about Python - but hash function are irreversible.", "First of all, note that hash functions provide a constant length output - meaning that information will be thrown away (you can hash a file of 3 MB and still only get a result of less than 1 kB).", "Additionally, hash functions are made for the fact that they aren't reversible, if you need encryption, don't use hashing but encryption - a major application of hashing is when the database info has leaked (which contained hashes) that the passwords have not been compromised (there are more examples, but this is the most obvious one)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you want to break a hash,  such as a password hash.", "Then you need a very large lookup table.", "John the Ripper is commonly used to break passwords using a dictionary,  this is a very good method espeically if its a salted password hash. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "John the Ripper", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.openwall.com/john/"}]}, {"text": ["Another approch is using a Rainbow Table,  however these take long time to generate.", "There are free rainbow tables accessible online. "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Rainbow Table", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://project-rainbowcrack.com/"}, {"text": "free rainbow tables accessible online", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.freerainbowtables.com/"}]}, {"text": ["Here is a python script to perform an md5() brute force attack. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/502296-md5-hash-crackersolver/"}]}], [{"text": ["In general, the answers from BlueRaja and Sean are correct.", "MD5 (and other hash functions) are one-way, you can't reverse the process."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, if you have a small size of data, you can try to search for a hash collision (another, or the same, piece of data) having the same hash."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["To add to everyone else's point, MD5 is a one-way hash.", "The common usage is to hash two input values and if the hashed values match, then the input should be the same.", "Going from an MD5 hashed value to the hash input is nonsensical.", "What you are probably after is a symmetric encryption algorithm - see http://stackoverflow.com/questions/1330612/two-way-keyed-encryption-hash-algorithm for a good discussion on the subject."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "should", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "symmetric encryption algorithm", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Symmetric-key_algorithm"}, {"href": "http://stackoverflow.com/questions/1330612/two-way-keyed-encryption-hash-algorithm", "text": "http://stackoverflow.com/questions/1330612/two-way-keyed-encryption-hash-algorithm", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Hashes map a bunch of data to a finite (albeit large) set of numeric values/strings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It is a many-to-one mapping, so that decoding a hash is not only \"difficult\" in the cryptographic sense, but also conceptually impossible in that even if you could, you would get an infinite set of possible input strings."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Here's a function to decrypt an MD5 hash.", "It's not very fast."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import hashlib\nimport sys\n\ndef decryptMD5(testHash):\n        s = []\n        while True:\n                m = hashlib.md5()\n                for c in s:\n                        m.update(chr(c))\n                hash = m.hexdigest()\n                if hash == testHash:\n                        return ''.join([chr(c) for c in s])\n                wrapped = True\n                for i in range(0, len(s)):\n                        s[i] = (s[i] + 1) % 256\n                        if s[i] != 0:\n                                wrapped = False\n                                break\n                if wrapped:\n                        s.append(0)\n\nprint decryptMD5(sys.argv[1])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ python md5.py 47bce5c74f589f4867dbd57e9ca9f808\naaa\n</code>\n</pre>\n", "senID": 3}]]