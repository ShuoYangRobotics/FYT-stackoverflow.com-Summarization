[[{"text": ["What you likely want is this..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; set(\"3 3 6 1 3 6\".split())\nset(['1', '3', '6'])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There are a couple approaches:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mydict = {}\nfor x in myfile.read().split():\n    mydict[x] = None\nprint mydict\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class VarContainer(object):\n    pass\nv = VarContainer()\nfor x in myfile.read().split():\n    setattr(v, 'var' + x, None)\nprint v.var3\n</code>\n</pre>\n", "senID": 3}, {"text": ["But what you're trying to do is a bit unclear."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You can use the exec builtin to create variables. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "exec", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n Python 2.5.1 (r251:54863, May 18 2007, 16:56:43)\n[GCC 3.4.4 (cygming special, gdc 0.12, using dmd 0.125)] on cygwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; a = [3,3,6,1,3,6]\n&gt;&gt;&gt; for e in a:\n...     exec 'var%s = %e' % (e,e)\n...\n...\n&gt;&gt;&gt; var3\n3.0\n&gt;&gt;&gt; var6\n6.0\n&gt;&gt;&gt; var1\n1.0\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT\nThis is a bad solution and should never be used.", "It is, however, important to know that something like this IS possible."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["You can store the values in an array:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(Assuming python 2.7)\nhttp://docs.python.org/library/array.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/array.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/array.html"}]}, {"text": ["You can then use array.index(x) to search if that value is already in the array, and array.append(x) to add it to the array"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "array.index(x)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "array.append(x)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Assuming text_file is some iterable,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def get_unique_numbers(text_file):\n   temp = []\n   for number in text_file:\n      if number not in temp:\n         temp.append(number)\n   return temp\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This code should do what you have asked for. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys \nfrom string import ascii_letters \n\n# Task 1, remove duplicate elements. \ndef nodup(fn): \n    f = open(fn) \n    data = f.read().split() \n\n    res = [] \n    res.extend((i for i in data if i not in res)) \n    return res \n\n# Task 2, create the new variables on the fly \nmodule = sys.modules[__name__] \nfilename = \"data\" \nfor idx, value in enumerate(nodup(filename)): \n    setattr(module, ascii_letters[idx], value) \n\nprint (a, b, c) \n# ('3', '6', '1')\n</code>\n</pre>\n", "senID": 1}]]