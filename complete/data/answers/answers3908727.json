[[{"text": ["the standard library is better ;) "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; os.path.splitext('hello.py')\n('hello', '.py')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You need:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (.)\\.(avi|rar|zip|txt)$\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note the backslash to escape the dot.", "This will make it look for a literal dot rather than any character."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["To make it case insensitive, use the RE.I flag in your search call."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "search", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#re.search"}]}, {"code": "<pre>\n<code>\n re.search(r'(.)\\.(avi|rar|zip|txt)$', string, re.I)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Short interactive run:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; pat=\"(.+)\\.(avi|rar|zip|txt)\"\n&gt;&gt;&gt; re.search(pat, \"abcdefg.zip\", re.IGNORECASE).groups()\n('abcdefg', 'zip')\n&gt;&gt;&gt; re.search(pat, \"abcdefg.ZIP\", re.IGNORECASE).groups()\n('abcdefg', 'ZIP')\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n (.+)[.](avi|rar|zip|txt)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Then the group 2 will be extension."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I have just written a blog about Regular Expression\nhttp://blogs.appframe.com/erikv/2010-09-23-Regular-Expression \nif you want to read more about this."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://blogs.appframe.com/erikv/2010-09-23-Regular-Expression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blogs.appframe.com/erikv/2010-09-23-Regular-Expression"}]}], [{"text": ["Since I think regex is evil..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def return_extension(filename):\n    '''(This functions assumes that filenames such as `.foo` have extension\n    `foo`.)\n    '''\n    tokens = filename.split('.')\n\n    return '' if len(tokens) == 1 else tokens[-1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["...I advocate simply parsing the filename."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you know that the extension is at the very end of the string, this should work well:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n .\\.(avi|rar|zip|txt)$\n</code>\n</pre>\n", "senID": 1}, {"tag": "ul", "num": 2, "lis": [{"text": ["The first bit will ensure that there's some character before the dot."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The $ specifies that the file extension is at the end of the string, i.e.", "the $ means \"the string ends here\".", "For gory details on this, including some edge cases with newlines that you should be aware of see the comment discussion for JoshD's answer, as well as the entry for $ in the docs."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "$", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "JoshD's answer", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3908727/python-regex-question/3908733#3908733"}, {"text": "$", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/re.html#regular-expression-syntax", "text": "docs", "childNum": 0, "tag": "a", "childList": []}]}]}, {"text": ["So then the only entry in the match.groups() tuple, i.e.", "match.groups()[0], will be the extension itself."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "match.groups()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "match.groups()[0]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]