[[{"text": ["Always use double quotes around variable names when you are using them as an argument to a command or executable when:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "the variable contains a filename", "tag": "none", "senID": 1}, {"text": "you want to preserve whitespace in the value as-is", "tag": "none", "senID": 2}, {"text": "any time (you can use double quotes even if they're not needed for the first two reasons)", "tag": "none", "senID": 3}]}, {"text": ["Example (the initial $ represents the shell prompt):"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "$", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ a=$'abc     def\\nghi  jkl'    # a way to get a newline in the value in a readable way\n$ echo $a                       # without quotes, whitespace is collapsed\nabc def ghi jkl\n$ echo \"$a\"                     # with quotes it's preserved\nabc     def\nghi  jkl\n</code>\n</pre>\n", "senID": 5}, {"text": ["My top general-purpose tip for anyone writing Bash scripts is to read, understand and periodically refer to Greg Wooledge's BashFAQ."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Greg Wooledge's BashFAQ", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mywiki.wooledge.org/BashFAQ/"}]}, {"text": ["At least equal to that is to understand the Unix (and by extension, Linux) philosophy of one tool, one job and that knowing the tools is like knowing the standard library of a language like C, Python or Perl.", "In shell programming, you'll often do some simple glue logic to combine the external tools in loops and pipelines.", "Understanding these tools will save you a lot of work.", "They aren't specific to Bash, the Bourne Shell or others and can be used with any of them.", "Examples: grep, find, join, paste, pr, sed, bc and many more."], "childNum": 7, "tag": "p", "senID": 7, "childList": [{"text": "grep", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "find", "childNum": 0, "tag": "code", "childList": []}, {"text": "join", "childNum": 0, "tag": "code", "childList": []}, {"text": "paste", "childNum": 0, "tag": "code", "childList": []}, {"text": "pr", "childNum": 0, "tag": "code", "childList": []}, {"text": "sed", "childNum": 0, "tag": "code", "childList": []}, {"text": "bc", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The main one that I've encountered is that whitespace around assignment does not work."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This works:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a=1\n</code>\n</pre>\n", "senID": 2}, {"text": ["This does not:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a = 1\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If you're a perl person, this will bite you over and over:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $A=1  # doesn't mean what you think it means\nA=1   # what you want\n</code>\n</pre>\n", "senID": 1}, {"text": ["The set command doesn't do assignment in bash: See The Set Builtin.", "But it does a whole lot of other cool stuff."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "The Set Builtin", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin"}]}], [{"text": ["Bash makes it really painful to work with multi-dimensional arrays.", "Bash is clunky enough just working with one-dimensional arrays.", "In fact, modern support for arrays is why I moved from bash to perl and python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Variable assignments in a subshell are not visible (i.e.", "take no effect) in the parent shell."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One way to solve this is to use Bash process substitution."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["See: http://wiki.bash-hackers.org/syntax/expansion/proc_subst"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://wiki.bash-hackers.org/syntax/expansion/proc_subst", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.bash-hackers.org/syntax/expansion/proc_subst"}]}], [{"text": ["perl was original written as a shell script.", "So a lot of the useful shell globbing things like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in /home/*/public_html/logs/access*.log; do echo \"$i\" &gt;&gt;/tmp/loglist.txt;done\n</code>\n</pre>\n", "senID": 1}, {"text": ["are available.", "Getting your head around head, tail, ifconfig, ping, whois, cut, sort, uniq, find -exec, xargs, sed, awk, and even perl, php, ruby, and python one liners will go a long way to making your life easier when scriping."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here are some cool networking tricks in bash:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n # Check for open TCP ports on localhost\nfor p in {1..1023};do (echo &gt;/dev/tcp/localhost/$p) &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo $p open;done\n\n# Download an atom XML feed\nexec 5&lt;&gt;/dev/tcp/feeds.feedburner.com/80;echo -ne \"GET /freegnu HTTP/1.0\\r\\nHost: feeds.feedburner.com\\r\\n\\r\\n\" &gt;&amp;5;cat &lt;&amp;5\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Yes, there are some \"common gotchas\" you need to get familiar with when it comes to shell scripting, but there are also some \"common goodies\", especially when you know you can use Bash only."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, using Bash you may modify every array item without using a for-loop (which can lead to a noticeable speed-up)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # example taken from: \n# http://floyd-n-milan.blogspot.com/2007/09/messing-with-arrays-in-bash.html\n# further information:\n# http://www.tldp.org/LDP/abs/html/arrays.html#ARRAYSTROPS\n\narray=( foo bar baz )\necho \"${array[@]}\"      # foo bar baz\n\narray=( \"${array[@]/%/foo}\" )\necho \"${array[@]}\"     #  foofoo barfoo bazfoo\n</code>\n</pre>\n", "senID": 2}], [{"text": ["If you (one day) intend to use the Bourne shell instead of Bash for maximum portability, first make sure your /bin/sh actually is a true Bourne shell implementation (on Mac OS X, for example, it is not)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["from: http://www.in-ulm.de/~mascheck/bourne/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.in-ulm.de/~mascheck/bourne/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.in-ulm.de/~mascheck/bourne/"}]}], [{"text": ["Any shell variable assignment you make will not be visible to programs you start from your script unless you say \"export\".", "They are visible to the shell builtins and subshells created with (), though."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n MY_CONTROLING_ENV_VAR=true\necho $MY_CONTROLING_ENV_VAR # prints \"true\"\n\nbash -c 'echo $MY_CONTROLING_ENV_VAR' # prints nothing\n\nexport MY_CONTROLING_ENV_VAR\n\nbash -c 'echo $MY_CONTROLING_ENV_VAR' # prints true now\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Yes, follow the bourne shell scripting conventions.", "Alot of useful information can be found here.", "I fully agree with this part,"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikibooks.org/wiki/Bourne_Shell_Scripting"}]}, {"text": ["\"If you write your scripts for the Bourne Shell and nothing but the Bourne Shell, chances are far better than equal that your script will run straight out of the mail attachment ... on any command shell out there."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "\"If you write your scripts for the Bourne Shell and nothing but the Bourne Shell, chances are far better than equal that your script will run straight out of the mail attachment ... on any command shell out there.\"", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["Going from Linux to Solaris with Bourne shell only was a painful but extremely good learning experience."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For example, using variables in bash vs bourne shell."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n VARIABLE=\"`cat /dev/null`\" # Works everywhere.\nVARIABLE=$(cat /dev/null) # Does _not_ work everywhere.\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If you are talking about programming in Bash together with the usual Linux/Unix tools, I would say it can cater to what programming languages like Perl/Python does for you for most of your sysadmin tasks, with the exception of things like programming a GUI (although you can also do that with shell scripting using GUI tools catered for shell programmin), network programming (and depending on what you are doing, networking tools like nc, ftp, ssh/telnet comes with scripting features as well).", "If you need regular expressions, awk/sed does the job.", "If you need data structures like arrays(single or multidimensional), awk caters for that.", "(and a modern bash comes with associative arrays as well).", "Like Python/Perl, Bash has no lack of looping, control flow structures etc either.", "The only thing you need is to learn the syntax, that you can pick up by reading about bash through a book or the internet."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["For processing XML on the command line I would recommend xmlstarlet or xml-coreutils."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some more options here: http://stackoverflow.com/questions/893585/how-to-parse-xml-in-bash"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/893585/how-to-parse-xml-in-bash", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/893585/how-to-parse-xml-in-bash"}]}], [{"text": ["If you're passing multiple arguments from the shell script's command line to an invoked command (which can happen when dealing with user filenames with spaces in; users produce these things no matter how much you'd rather they didn't) you should not use $* or $@, but rather this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "$*", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "$@", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n \"$@\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or, if you're really ultra careful and can't assume the use of bash, this (derived from the above):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ${1+\"$@\"}\n</code>\n</pre>\n", "senID": 3}, {"text": ["Which works around some ancient misfeatures in the handling of empty argument lists that bash has corrected."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["How it works"], "childNum": 0, "tag": "h2", "senID": 5, "childList": []}, {"text": ["While $@ refers to all arguments, \"$@\" is magical syntax that substitutes the arguments as individual arguments with appropriate quoting.", "(If you want them all as one, use \"$*\" but that's pretty rare.", ") Thus if the arguments are:"], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "$@", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"$@\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "\"$*\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n a 'b c' d /home/foo/My\\ Tricky\\ File\\ Name\n</code>\n</pre>\n", "senID": 7}, {"text": ["Then you'll end up with foobar \"$@\" being expanded like:"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "foobar \"$@\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n foobar \"a\" \"b c\" \"d\" \"/home/foo/My Tricky File Name\"\n</code>\n</pre>\n", "senID": 9}, {"text": ["(Be careful when testing with echo; it concatenates the arguments anyway."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "echo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The other form builds on top of this.", "The shell's general syntax ${foo+bar} substitutes bar (whatever it is) if $foo is defined at all; the sequence I used above just uses $1 (the first argument) as the test variable and \"$@\" as the substitution so it's all only done when necessary, and completely elided otherwise (avoiding the old bug which tended to produce \"\" instead; not what you want as it created an extra empty argument)."], "childNum": 6, "tag": "p", "senID": 11, "childList": [{"text": "${foo+bar}", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "bar", "childNum": 0, "tag": "code", "childList": []}, {"text": "$foo", "childNum": 0, "tag": "code", "childList": []}, {"text": "$1", "childNum": 0, "tag": "code", "childList": []}, {"text": "\"$@\"", "childNum": 0, "tag": "code", "childList": []}, {"text": "\"\"", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Looks like there have been a lot of good answers to your question, but I would definitly check out the series of articles by Daniel Robbins at IBM's developerWorks site:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.ibm.com/developerworks/library/l-bash.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.ibm.com/developerworks/library/l-bash.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks/library/l-bash.html"}]}, {"text": ["He gives a really good overview of BASH and some of the pitfalls associated with it.", "I have found it to be very useful."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Good Luck!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The source code of a quite up-to-date Bourne shell version can be downloaded from:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://freshmeat.net/projects/bournesh/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://freshmeat.net/projects/bournesh/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://freshmeat.net/projects/bournesh/"}]}]]