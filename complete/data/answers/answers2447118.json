[[{"text": ["You might consider immersing yourself in the Python paradigms.", "The best way is to first know what they are then explore the best practices by reading some literature and reviewing some code samples.", "I recommend Learning Python by Mark Lutz; great for beginners and advanced users."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Learning Python", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0596158068"}]}, {"text": ["You'll do yourself a great injustice if you program with Python and fail to leverage all of the built-in, developer-friendly, Pythonic syntax."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As my French teacher used to say, \"French isn't just English with different words."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You could start by reading The Zen of Python.", "It'll give you some insight into how Python code is supposed to be written, provided you understand the language enough to understand what it's talking about.", ":-)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "The Zen of Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}], [{"text": ["Some of the major ways in which Python differs from C/Java-like languages are:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There are others, but these are the main ones that bugged me when I first started Python (and I had come from years of Java like you)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Before using any of these, it is helpful to understand why you should go for pythonic code rather than the usual C/Java way in Python, although both give you the same output."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pythonic", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["For starters, Python provides some powerful features not available in C/Java that makes your code much clearer and simpler (although this is subjective, and might not look any better to someone coming from Java at first).", "The first two points fall into this category.", "For example, support for functions as first class objects and closures makes it easy to do things that would need all kinds of weird acrobatics with inner classes in Java."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["But a major reason is that Python is an interpreted language, and certain constructs are much faster than the equivalent C/Java-like code.", "For example, list comprehensions are usually a lot faster than an equivalent for-loop that iterates over the indices of a list and accesses each item by index.", "This is a very objective benefit, and IMHO a lot of the \"Python in way too slow\" way of thinking comes from using Java-style code shoe-horned into Python. "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "much", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["One of the best ways to learn about pythonic code is to read other people's code.", "I actually learnt a lot by looking at Python code posted in answers to SO questions.", "These often come with explanations and it is usually obvious why it is better than non-pythonic code (speed, clarity, etc.", ")."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Of course, there are other ways of getting other people's code.", "You can also download and look through the code of any good open source Python project.", "Books are also a good resource, I would recommend O'Reilly Python Cookbook.", "It has lots of useful code examples and very detailed explanations."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "O'Reilly Python Cookbook", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://oreilly.com/catalog/9780596007973"}]}], [{"text": ["If you are new to Python and coming from Java (or C#, or other similar statically typed OO language), these classic articles from PJ Eby and Ryan Tomayko are necessary reading:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": ["Python Is Not Java"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Java is not Python, either"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["Python Interfaces are not Java Interfaces"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["The Static Method Thing"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["Getters/Setters/Fuxors"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}], [{"text": ["If you want to see some fairly idiomatic Python that does non-trivial stuff, there's Dive Into Python, although Dive Into Python 3 is newer and might be a better source of style tips.", "If you're looking more for some points to review, there's Code Like a Pythonista."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Dive Into Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/toc/index.html"}, {"text": "Dive Into Python 3", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://diveintopython3.org/"}, {"text": "Code Like a Pythonista", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html"}]}], [{"text": ["You could post your code at Refactor my code to see if someone can show you a more Pythonic way to do it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Refactor my code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://refactormycode.com/"}]}], [{"text": ["Definitely not a panacea but I think you should try some code golf in Python.", "Obviously nobody should write \"golfed\" code IRL, but finding the most terse way to express something really forces you to exploit the built in functionality of the language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Someone provided me with this list of how \"Python is not Java\" when I started Python after Java, and it was very helpful."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"Python is not Java\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dirtsimple.org/2004/12/python-is-not-java.html"}]}, {"text": ["Also, check out this similar SO question that I posted a short time ago when in a similar position."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this similar SO question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2339371/as-a-java-programmer-learning-python-what-should-i-look-out-for"}]}], [{"text": ["Try to find algorithms that you understand well and see how they are implemented in python standard libraries."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Persist.", ":)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Learn a few other languages.", "It will help you make the difference between algorithms (the structure of processing, unchanged between languages) and the local syntaxic features of the language.", "Then you can \"write Foo in Bar\" for any combination of languages \"Foo\" and \"Bar\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Eat Python, Sleep Python and Drink Python.", "That is the only way........"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This is useful if you want to understand how to code to python in a more pythonic or correct way: http://www.python.org/dev/peps/pep-0008/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.python.org/dev/peps/pep-0008/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}]]