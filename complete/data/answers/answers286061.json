[[{"text": ["IEEE floating point is binary, not decimal.", "There is no fixed length binary fraction that is exactly 0.1, or any multiple thereof.", "It is a repeating fraction, like 1/3 in decimal."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Please read What Every Computer Scientist Should Know About Floating-Point Arithmetic"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "What Every Computer Scientist Should Know About Floating-Point Arithmetic", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.sun.com/source/806-3568/ncg_goldberg.html"}]}, {"text": ["Other options besides a Decimal class are "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["using Common Lisp or Python 2.6 or another language with exact rationals"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Python 2.6", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/whatsnew/2.6.html#the-fractions-module"}]}, {"text": ["converting the doubles to close rationals using, e.g., frap"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "frap", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ics.uci.edu/~eppstein/numth/frap.c"}]}]}], [{"text": ["I'm not familiar enough with the Decimal class to help you out, but your problem is due to the fact that decimal fractions can often not be accurate represented in binary, so what you're seeing is the closest possible approximation; there's no way to avoid this problem without using a special class (like Decimal, probably)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EDIT: What about the decimal class isn't working properly for you?", "As long as I start with a string, rather than a float, powers seem to work fine."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import decimal\n&gt;&gt;&gt; print(decimal.Decimal(\"1.2\") ** 2)\n1.44\n</code>\n</pre>\n", "senID": 2}, {"text": ["The module documentation explains the need for and usage of decimal.Decimal pretty clearly, you should check it out if you haven't yet."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "module documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/decimal.html"}, {"text": "decimal.Decimal", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["First, your input can be simplified a lot.", "You don't need to read and parse a file.", "You can just declare your objects in Python notation.", "Eval the file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b = [\n    [4.0, -2.0,  1.0],\n    [1.0, +5.0, -3.0],\n    [2.0, +2.0, +5.0],\n]\ny = [ 11.0, -6.0, 7.0 ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Second, y=-1.2-0.20000000000000001x+0.59999999999999998z isn't unusual.", "There's no exact representation in binary notation for 0.2 or 0.6.", "Consequently, the values displayed are the decimal approximations of the original not exact representations.", "Those are true for just about every kind of floating-point processor there is."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You can try the Python 2.6 fractions module.", "There's an older rational package that might help."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "fractions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/fractions.html"}, {"text": "rational", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://infohost.nmt.edu/tcc/help/lang/python/examples/rational/"}]}, {"text": ["Yes, raising floating-point numbers to powers increases the errors.", "Consequently, you have to be sure to avoid using the right-most positions of the floating-point number, since those bits are mostly noise."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["When displaying floating-point numbers, you have to appropriately round them to avoid seeing the noise bits."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a\n0.20000000000000001\n&gt;&gt;&gt; \"%.4f\" % (a,)\n'0.2000'\n</code>\n</pre>\n", "senID": 6}], [{"text": ["I'd caution against the decimal module for tasks like this.", "Its purpose is really more dealing with real-world decimal numbers (eg.", "matching human bookkeeping practices), with finite precision, not performing exact precision math.", "There are numbers not exactly representable in decimal just as there are in binary, and performing arithmetic in decimal is also much slower than alternatives."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Instead, if you want exact results you should use rational arithmetic.", "These will represent numbers as a numerator/denomentator pair, so can exactly represent all rational numbers.", "If you're only using multiplication and division (rather than operations like square roots that can result in irrational numbers), you will never lose precision."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As others have mentioned, python 2.6 will have a built-in rational type, though note that this isn't really a high-performing implementation - for speed you're better using libraries like gmpy.", "Just replace your calls to float() to gmpy.mpq() and your code should now give exact results (though you may want to format the results as floats for display purposes)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "gmpy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://gmpy.sourceforge.net/"}]}, {"text": ["Here's a slightly tidied version of your code to load a matrix that will use gmpy rationals instead:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def read_matrix(f):\n    b,y = [], []\n    for line in f:\n        bits = line.split(\",\")\n        b.append( map(gmpy.mpq, bits[:-1]) )\n        y.append(gmpy.mpq(bits[-1]))\n    return b,y\n</code>\n</pre>\n", "senID": 4}], [{"text": ["It is not an answer to your question, but related:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\nfrom numpy import abs, dot, loadtxt, max\nfrom numpy.linalg import solve\n\ndata = loadtxt('gauss.dat', delimiter=',')\na, b = data[:,:-1], data[:,-1:]\nx = solve(a, b) # here you may use any method you like instead of `solve`\nprint(x)\nprint(max(abs((dot(a, x) - b) / b))) # check solution\n</code>\n</pre>\n", "senID": 1}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ cat gauss.dat\n4.0, 2.0, 1.0, 11.0\n1.0, 5.0, 3.0, 6.0 \n2.0, 2.0, 5.0, 7.0\n\n$ python loadtxt_example.py\n[[ 2.4]\n [ 0.6]\n [ 0.2]]\n0.0\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Also see What is a simple example of floating point error, here on SO, which has some answers.", "The one I give actually uses python as the example language..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "What is a simple example of floating point error", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/249467/what-is-a-simple-example-of-floating-pointrounding-error"}]}], [{"text": ["Just a suggestion (I don't know what constraints you're working under): "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Why not use straightforward Gaussian elimination, rather than Gauss-Seidel iteration?", "If you choose the coefficient with the largest value as the pivot for each elimination step, you'll minimise the FP rounding errors. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This may actually what numpy.linalg.solve, mentioned by J.F.", "Sebastian (!!", "), does.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["instead of decimal, you might want to look at mpmath."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "mpmath", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/mpmath/"}]}]]