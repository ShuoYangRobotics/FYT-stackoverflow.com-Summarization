[[{"code": "<pre>\n<code>\n def calculate_age(born):\n    today = date.today()\n    try: # raised when birth date is February 29 and the current year is not a leap year\n        birthday = born.replace(year=today.year)\n    except ValueError:\n        birthday = born.replace(year=today.year, day=born.day-1)\n    if birthday &gt; today:\n        return today.year - born.year - 1\n    else:\n        return today.year - born.year\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n from datetime import date\ndays_in_year = 365.25\n\nage = int((date.today() - birth_date).days/days_in_year)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Unfortunately, you cannot just use timedelata as the largest unit it uses is day and leap years will render you calculations invalid.", "Therefore, let's find number of years then adjust by one if the last year isn't full:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from datetime import date\nbirth_date = date(1980, 5, 26)\nyears = date.today().year - birth_date.year\nif (datetime.now() - birth_date.replace(year=datetime.now().year)).days &gt;= 0:\n    age = years\nelse:\n    age = years - 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["Upd:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Upd:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["This solution really causes an exception when Feb, 29 comes into play.", "Here's correct check:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from datetime import date\nbirth_date = date(1980, 5, 26)\ntoday = date.today()\nyears = today.year - birth_date.year\nif all((x &gt;= y) for x,y in zip(today.timetuple(), birth_date.timetuple()):\n   age = years\nelse:\n   age = years - 1\n</code>\n</pre>\n", "senID": 4}, {"text": ["Upd2:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Upd2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Calling multiple calls to now() a performance hit is ridiculous, it does not matter in all but extremely special cases.", "The real reason to use a variable is the risk of data incosistency."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "now()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The classic gotcha in this scenario is what to do with people born on the 29th day of February.", "Example: you need to be aged 18 to vote, drive a car, buy alcohol, etc ... if you are born on 2004-02-29, what is the first day that you are permitted to do such things: 2022-02-28, or 2022-03-01?", "AFAICT, mostly the first, but a few killjoys might say the latter."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's code that caters for the 0.068% (approx) of the population born on that day:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def age_in_years(from_date, to_date, leap_day_anniversary_Feb28=True):\n    age = to_date.year - from_date.year\n    try:\n        anniversary = from_date.replace(year=to_date.year)\n    except ValueError:\n        assert from_date.day == 29 and from_date.month == 2\n        if leap_day_anniversary_Feb28:\n            anniversary = datetime.date(to_date.year, 2, 28)\n        else:\n            anniversary = datetime.date(to_date.year, 3, 1)\n    if to_date &lt; anniversary:\n        age -= 1\n    return age\n\nif __name__ == \"__main__\":\n    import datetime\n\n    tests = \"\"\"\n\n    2004  2 28 2010  2 27  5 1\n    2004  2 28 2010  2 28  6 1\n    2004  2 28 2010  3  1  6 1\n\n    2004  2 29 2010  2 27  5 1\n    2004  2 29 2010  2 28  6 1\n    2004  2 29 2010  3  1  6 1\n\n    2004  2 29 2012  2 27  7 1\n    2004  2 29 2012  2 28  7 1\n    2004  2 29 2012  2 29  8 1\n    2004  2 29 2012  3  1  8 1\n\n    2004  2 28 2010  2 27  5 0\n    2004  2 28 2010  2 28  6 0\n    2004  2 28 2010  3  1  6 0\n\n    2004  2 29 2010  2 27  5 0\n    2004  2 29 2010  2 28  5 0\n    2004  2 29 2010  3  1  6 0\n\n    2004  2 29 2012  2 27  7 0\n    2004  2 29 2012  2 28  7 0\n    2004  2 29 2012  2 29  8 0\n    2004  2 29 2012  3  1  8 0\n\n    \"\"\"\n\n    for line in tests.splitlines():\n        nums = [int(x) for x in line.split()]\n        if not nums:\n            print\n            continue\n        datea = datetime.date(*nums[0:3])\n        dateb = datetime.date(*nums[3:6])\n        expected, anniv = nums[6:8]\n        age = age_in_years(datea, dateb, anniv)\n        print datea, dateb, anniv, age, expected, age == expected\n</code>\n</pre>\n", "senID": 2}, {"text": ["Here's the output:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n 2004-02-28 2010-02-27 1 5 5 True\n2004-02-28 2010-02-28 1 6 6 True\n2004-02-28 2010-03-01 1 6 6 True\n\n2004-02-29 2010-02-27 1 5 5 True\n2004-02-29 2010-02-28 1 6 6 True\n2004-02-29 2010-03-01 1 6 6 True\n\n2004-02-29 2012-02-27 1 7 7 True\n2004-02-29 2012-02-28 1 7 7 True\n2004-02-29 2012-02-29 1 8 8 True\n2004-02-29 2012-03-01 1 8 8 True\n\n2004-02-28 2010-02-27 0 5 5 True\n2004-02-28 2010-02-28 0 6 6 True\n2004-02-28 2010-03-01 0 6 6 True\n\n2004-02-29 2010-02-27 0 5 5 True\n2004-02-29 2010-02-28 0 5 5 True\n2004-02-29 2010-03-01 0 6 6 True\n\n2004-02-29 2012-02-27 0 7 7 True\n2004-02-29 2012-02-28 0 7 7 True\n2004-02-29 2012-02-29 0 8 8 True\n2004-02-29 2012-03-01 0 8 8 True\n</code>\n</pre>\n", "senID": 4}], [{"text": ["As I did not see the correct implementation, I recoded mine this way..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def age_in_years(from_date, to_date=datetime.date.today()):\n  if (DEBUG):\n    logger.debug(\"def age_in_years(from_date='%s', to_date='%s')\" % (from_date, to_date))\n\n  if (from_date&gt;to_date): # swap when the lower bound is not the lower bound\n    logger.debug('Swapping dates ...')\n    tmp = from_date\n    from_date = to_date\n    to_date = tmp\n\n  age_delta = to_date.year - from_date.year\n  month_delta = to_date.month - from_date.month\n  day_delta = to_date.day - from_date.day\n\n  if (DEBUG):\n    logger.debug(\"Delta's are : %i  / %i / %i \" % (age_delta, month_delta, day_delta))\n\n  if (month_delta&gt;0  or (month_delta==0 and day_delta&gt;=0)): \n    return age_delta \n\n  return (age_delta-1)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Assumption of being \"18\" on the 28th of Feb when born on the 29th is just wrong.", "Swapping the bounds can be left out ... it is just a personal convenience for my code :)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["import datetime"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def age(date_of_birth):\n    if date_of_birth &gt; datetime.date.today().replace(year = date_of_birth.year):\n        return datetime.date.today().year - date_of_birth.year - 1\n    else:\n        return datetime.date.today().year - date_of_birth.year\n</code>\n</pre>\n", "senID": 1}, {"text": ["In your case:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import datetime\n\n# your model\ndef age(self):\n    if self.birthdate &gt; datetime.date.today().replace(year = self.birthdate.year):\n        return datetime.date.today().year - self.birthdate.year - 1\n    else:\n        return datetime.date.today().year - self.birthdate.year\n</code>\n</pre>\n", "senID": 3}]]