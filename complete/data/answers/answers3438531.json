[[{"text": ["When I'm working with python, I usually have two terminal windows open - one with IPython, and the other with a fairly customized Vim."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Two good resources: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["http://dancingpenguinsoflight.com/2009/02/python-and-vim-make-your-own-ide/"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}, {"text": ["Though it sounds like what you want is IPython's magic function %ed/%edit:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "%ed", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "%edit", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["An example of what you can do:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n In [72]: %ed\nIPython will make a temporary file named: c:\\docume~1\\wjwe312\\locals~1\\temp\\ipython_edit_ar8veu.py\n</code>\n</pre>\n", "senID": 6}, {"text": ["In the file I put:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n x = \"Hello World\"\nprint 3\n</code>\n</pre>\n", "senID": 8}, {"text": ["After saving and quitting the file:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n Editing... done. Executing edited code...\n3\nOut[72]: \"x = 'Hello world'\\nprint 3\\n\"\n\nIn [73]: x\nOut[73]: 'Hello world'\n</code>\n</pre>\n", "senID": 10}, {"text": ["You can define functions or anything else - just remember that the contents of the file will be executed when you close it."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["Another similar workflow is to cd to the directory containing your Python script that you're editing with your favorite editor.", "Then you can %run the script from within IPython and you'll have access to everything defined in the file.", "For instance, if you have the following in the file test.py in your /home/myself directory:"], "childNum": 4, "tag": "p", "senID": 12, "childList": [{"text": "cd", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "%run", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "test.py", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "/home/myself", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class Tester(object):\n        def __init__(self):\n            print \"hi\"\n\n    def knightme(name):\n        print \"Hello, Sir \", name\n</code>\n</pre>\n", "senID": 13}, {"text": ["Then you can do the following:"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n In [42]: cd /home/myself\n/home/myself\n\nIn [43]: %run test.py # &lt;Tab&gt; autocomplete also works\n\nIn [44]: knightme('John')\nHello, Sir  John\n\nIn [45]: t = Tester()\nHi\n</code>\n</pre>\n", "senID": 15}, {"text": ["Either a mix or one of those workflows should give you something very similar to the way you're used to working in IDLE."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}], [{"text": ["SPyderlib a.k.a Spyder2"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SPyderlib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/spyderlib/"}]}, {"text": ["Pretty lightweight, fast and support almost all features you will ever need to work with a python project."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Take a look at DreamPie.", "Might be what you are looking for."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "DreamPie", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://dreampie.sourceforge.net/"}]}], [{"text": ["1, Try the combination of Spyder and Vim."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I edit python files in Vim, then run them in Spyder (in the same interpreter, which is important for me)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Spyder can reload the file automatically.", "Use F9 to run the current file and Ctrl+F9 to run the selected block."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["2, Recently I come across a Vim plugin, conque-shell.", "If you'd like to work in a manner like Matlab, then probably you should try it. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Just open your preferred Python interpreter using \"ConqueTerm\", then visual select the some code, press  to paste it in the Python interpreter. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Personally, I like PyScripter.", "Unfortunately, it only works on Windows, but also runs perfectly in Wine. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyScripter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pyscripter/"}]}], [{"text": ["Personally, I use what @Wayne suggested, a combination of vim and ipython..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, if you'd prefer a different approach, take a look at spyder. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "spyder", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/spyderlib/"}]}, {"text": ["As of the latest version (1.1) ipython should be fully integrated.", "If you download an earlier version, things will work fine with ipython as an external shell, but you won't get a few of spyder's nifty features (like viewing all of the currently defined variables in the workspace window). "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Spyder is definitely a bit heavyweight, but it's an interesting project."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Another (very, very, new) similar project to take a look at is iep.", "It will (sort-of) work with ipython as shell, and I'd be willing to be bet that nicer ipython integration will be along before too long.", "At any rate, iep is essentially a more lightweight alternative to spyder."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "iep", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/iep/"}]}, {"text": ["Both of these are oriented towards scientific computing, and so have nice integration with things like matplotlib (and thus can automatically run gui main loops in a seperate thread).", "They're not quite like \"normal\" IDE's but they may fill the niche you're looking for quite nicely.  "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You might like PySlices..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PySlices", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/wxpysuite/"}]}, {"text": ["It's kind of a shell/editor hybrid that lets you save your session as special (barely) modified python files called .pyslice files."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It's now part of wxPython, so just install that (v2.8.11 or later) and run \"python -m wx.py.PySlices\" on the command line to launch it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "wxPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.wxpython.org/download.php"}]}, {"text": ["That said, I still end up using an external editor for scripts (geany)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]