[[{"text": ["I typically use function attributes as storage for annotations.", "Suppose I want to write, in the style of C# (indicating that a certain method should be part of the web service interface)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Foo(WebService):\n    @webmethod\n    def bar(self, arg1, arg2):\n         ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["then I can define"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def webmethod(func):\n    func.is_webmethod = True\n    return func\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then, when a webservice call arrives, I look up the method, check whether the underlying function has the is_webmethod attribute (the actual value is irrelevant), and refuse the service if the method is absent or not meant to be called over the web."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I've used them as static variables for a function.", "For example, given the following C code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n int fn(int i)\n{\n    static f = 1;\n    f += i;\n    return f;\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["I can implement the function similarly in Python:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def fn(i):\n    fn.f += i\n    return fn.f\nfn.f = 1\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can do objects the JavaScript way...", "It makes no sense but it works ;)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def FakeObject():\n...   def test():\n...     print \"foo\"\n...   FakeObject.test = test\n...   return FakeObject\n&gt;&gt;&gt; x = FakeObject()\n&gt;&gt;&gt; x.test()\nfoo\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I use them sparingly, but they can be pretty convenient:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def log(msg):\n   log.logfile.write(msg)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now I can use log throughout my module, and redirect output simply by setting log.logfile.", "There are lots and lots of other ways to accomplish that, but this one's lightweight and dirt simple.", "And while it smelled funny the first time I did it, I've come to believe that it smells better than having a global logfile variable."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "log", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "log.logfile", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "logfile", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["Check out PEP 232."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 232", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0232/"}]}], [{"text": ["Function attributes can be used to write light-weight closures that wrap code and associated data together:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nSW_DELTA = 0\nSW_MARK  = 1\nSW_BASE  = 2\n\ndef stopwatch():\n   import time\n\n   def _sw( action = SW_DELTA ):\n\n      if action == SW_DELTA:\n         return time.time() - _sw._time\n\n      elif action == SW_MARK:\n         _sw._time = time.time()\n         return _sw._time\n\n      elif action == SW_BASE:\n         return _sw._time\n\n      else:\n         raise NotImplementedError\n\n   _sw._time = time.time() # time of creation\n\n   return _sw\n\n# test code\nsw=stopwatch()\nsw2=stopwatch()\nimport os\nos.system(\"sleep 1\")\nprint sw() # defaults to \"SW_DELTA\"\nsw( SW_MARK )\nos.system(\"sleep 2\")\nprint sw()\nprint sw2()\n</code>\n</pre>\n", "senID": 1}, {"text": ["1.00934004784"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["2.00644397736"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["3.01593494415"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Sometimes I use an attribute of a function for caching already computed values.", "You can also have a generic decorator that generalizes this approach.", "Be aware of concurrency issues and side effects of such functions!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I was always of the assumption that the only reason this was possible was so there was a logical place to put a doc-string or other such stuff.", "I know if I used it for any production code it'd confuse most who read it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]