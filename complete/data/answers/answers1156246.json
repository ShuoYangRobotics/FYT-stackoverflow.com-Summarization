[[{"text": ["For the \"best of both worlds\" you could combine S.Lott's solution with the xsendfile module: django generates the path to the file (or the file itself), but the actual file serving is handled by Apache/Lighttpd.", "Once you've set up mod_xsendfile, integrating with your view takes a few lines of code:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "xsendfile module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com.ng/search?q=mod%5Fxsendfile&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a"}]}, {"code": "<pre>\n<code>\n response = HttpResponse(mimetype='application/force-download')\nresponse['Content-Disposition'] = 'attachment; filename=%s' % smart_str(file_name)\nresponse['X-Sendfile'] = smart_str(path_to_file)\n# It's usually a good idea to set the 'Content-Length' header too.\n# You can also set any other required headers: Cache-Control, etc.\nreturn response\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, this will only work if you have control over your server, or your hosting company has mod_xsendfile already set up."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["A \"download\" is simply an HTTP header change."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See http://docs.djangoproject.com/en/dev/ref/request-response/#telling-the-browser-to-treat-the-response-as-a-file-attachment for how to respond with a download."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.djangoproject.com/en/dev/ref/request-response/#telling-the-browser-to-treat-the-response-as-a-file-attachment", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/request-response/#telling-the-browser-to-treat-the-response-as-a-file-attachment"}]}, {"text": ["You only need one URL definition for \"/download\"."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\"/download\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The request's GET or POST dictionary will have the \"f=somefile.txt\" information."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "GET", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "POST", "childNum": 0, "tag": "code", "childList": []}, {"text": "\"f=somefile.txt\"", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Your view function will simply merge the base path with the \"f\" value, open the file, create and return a response object.", "It should be less than 12 lines of code."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "f", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["S.Lott has the \"good\"/simple solution, and elo80ka has the \"best\"/efficient solution.", "Here is a middle \"better\"/middle solution - no server setup, but more efficient for large files than the naive fix."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://djangosnippets.org/snippets/365/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://djangosnippets.org/snippets/365/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://djangosnippets.org/snippets/365/"}]}, {"text": ["Basically django still handles serving the file, but does not load the whole thing into memory at once.", "This allows your server to (slowly) server a big file without ramping up the memory usage."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Again, S.Lott's X-SendFile is still better for larger files.", "But if you can't or don't want to bother with that, then this middle solution will gain you better efficiency without the hassle."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["It was mentioned above that the mod_xsendfile method does not allow for non-ASCII characters in filenames."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For this reason, I have a patch available for mod_xsendfile that will allow any file to be sent, as long as the name is url encoded, and the additional header:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n X-SendFile-Encoding: url\n</code>\n</pre>\n", "senID": 2}, {"text": ["Is sent as well."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["http://ben.timby.com/?p=149"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://ben.timby.com/?p=149", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ben.timby.com/?p=149"}]}], [{"text": ["Try: https://github.com/rosarior/django-sendfile"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "https://github.com/rosarior/django-sendfile", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/rosarior/django-sendfile"}]}], [{"text": ["Django recommend that you use another server to serve static media (another server running on the same machine is fine.", ") They recommend the use of such servers as lighttp. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lighttp", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.lighttpd.net/"}]}, {"text": ["This is very simple to set up.", "However.", "if 'somefile.txt' is generated on request (content is dynamic) then you may want django to serve it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Django Docs - Static Files"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Django Docs - Static Files", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/howto/static-files/"}]}], [{"text": ["Another project to have a look at: http://readthedocs.org/docs/django-private-files/en/latest/usage.html\nLooks promissing, haven't tested it myself yet tho."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://readthedocs.org/docs/django-private-files/en/latest/usage.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://readthedocs.org/docs/django-private-files/en/latest/usage.html"}]}, {"text": ["Basically the project abstracts the mod_xsendfile configuration and allows you to do things like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from django.db import models\nfrom django.contrib.auth.models import User\nfrom private_files import PrivateFileField\n\ndef is_owner(request, instance):\n    return (not request.user.is_anonymous()) and request.user.is_authenticated and\n                   instance.owner.pk = request.user.pk\n\nclass FileSubmission(models.Model):\n    description = models.CharField(\"description\", max_length = 200)\n        owner = models.ForeignKey(User)\n    uploaded_file = PrivateFileField(\"file\", upload_to = 'uploads', condition = is_owner)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Is there any way to return a file and a redirect?  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Ideally:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["1) The user would click a link"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["2) A dynamically generated file would download"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["3) The user would be redirected to another page"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Thanks"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]