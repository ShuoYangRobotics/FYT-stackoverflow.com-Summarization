[[{"text": ["A simpler solution is to use tuple unpacking.", "This will already do everything you want, including checking that it contains exactly one item."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Single item:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; name, = (name for name in ('bob','fred') if name=='bob')\n &gt;&gt;&gt; name\n 'bob'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Too many items:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; name, = (name for name in ('bob','bob') if name=='bob')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: too many values to unpack\n</code>\n</pre>\n", "senID": 4}, {"text": ["No items:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; name, = (name for name in ('fred','joe') if name=='bob')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: need more than 0 values to unpack\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Do you mean?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def one( someGenerator ):\n    if len(list(someGenerator)) != 1: raise Exception( \"Not a Singleton\" )\n</code>\n</pre>\n", "senID": 1}, {"text": ["What are you trying to accomplish with all the extra code?  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Simple approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print (name for name in ('bob', 'fred') if name == 'bob').next()\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you really want an error when there is more than one value, then you need a function.", "The most simple I can think of is (EDITED to work with lists too):"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDITED", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def one(iterable):\n    it = iter(iterable)\n    val = it.next()\n    try:\n        it.next()\n    except StopIteration:\n        return val\n    else:\n        raise Exception('More than one value')\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Have a look into the itertools.islice() method."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools.islice()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#itertools.islice"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; i2=itertools.islice((name for name in ('bob','fred') if name=='bob'),0,1,1)\n&gt;&gt;&gt; i2.next()\n'bob'\n&gt;&gt;&gt; i2.next()\nTraceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nStopIteration\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is my try  at the one() function.", "I would avoid the explicit .next() call and use a for loop instead."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "one()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".next()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def one(seq):\n    counter = 0\n    for elem in seq:\n        result = elem\n        counter += 1\n        if counter &gt; 1:\n            break\n    if counter == 0:\n        raise Exception('No values')\n    elif counter &gt; 1:\n        raise Exception('Too many values')\n    return result\n</code>\n</pre>\n", "senID": 1}], [{"text": ["First, (to answer the actual question!", ") your solution will work fine as will the other variants proposed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would add that in this case, IMO, generators are overly complicated.", "If you expect to have one value, you'll probably never have enough for memory usage to be a concern, so I would have just used the obvious and much clearer:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n children = [name for name in ('bob','fred') if name=='bob']\nif len(children) == 0:\n    raise Exception('No values')\nelif len(children) &gt; 1:\n    raise Exception('Too many values')\nelse:\n    child = children[0]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["How about using Python's for .. in syntax with a counter?", "Similar to unbeknown's answer."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def one(items):\n    count = 0\n    value = None\n\n    for item in items:\n        if count:\n            raise Exception('Too many values')\n\n        count += 1\n        value = item\n\n    if not count:\n        raise Exception('No values')\n\n    return value\n</code>\n</pre>\n", "senID": 1}]]