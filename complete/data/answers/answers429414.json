[[{"text": ["Use defaultdict"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import defaultdict\nkvmap= defaultdict(int)\nfor k in a_list:\n    kvmap[k] += 1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Single element:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a_list.count(k)\n</code>\n</pre>\n", "senID": 1}, {"text": ["All elements:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n counts = dict((k, a_list.count(k)) for k in set(a_list))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I dunno, it basically looks fine to me.", "Your code is simple and easy to read which is an important part of what I consider pythonic.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You could trim it up a bit like so:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for k in a_list:\n     kvMap[k] = 1 + kvMap.get(k,0)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Another solution exploits setdefault():"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for k in a_list:\n    kvMap[k] = kvMap.setdefault(k, 0) + 1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If your list is sorted, an alternative way would be to use itertools.groupby.", "This might not be the most effective way, but it's interesting nonetheless.", "It retuns a dict of item > count :"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools.groupby", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html?highlight=groupby#itertools.groupby"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import itertools\n&gt;&gt;&gt; l = [1,1,2,3,4,4,4,5,5,6,6,6,7]\n&gt;&gt;&gt; dict([(key, len([e for e in group]))\n          for (key, group)\n          in itertools.groupby(l)])\n{1: 2, 2: 1, 3: 1, 4: 3, 5: 2, 6: 3, 7: 1}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Such an old question, but considering that adding to a defaultdict(int) is such a common use, It should come as no surprise that collections has a special name for that (since Python 2.7)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "defaultdict(int)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "collections", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; Counter([1, 2, 1, 1, 3, 2, 3, 4])\nCounter({1: 3, 2: 2, 3: 2, 4: 1})\n&gt;&gt;&gt; Counter(\"banana\")\nCounter({'a': 3, 'n': 2, 'b': 1})\n</code>\n</pre>\n", "senID": 1}]]