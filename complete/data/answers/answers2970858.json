[[{"text": ["A lambda is a single expression.", "In Python 2.x, print is a statement.", "However, in Python 3, print is a function.", "You can (and should, for forward compatibility :) use the back-ported print function if you are using the latest Python 2.x:"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "lambda", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "single expression", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "function", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}, {"code": "<pre>\n<code>\n In [1324]: from __future__ import print_function\n\nIn [1325]: f = lambda x: print(x)\n\nIn [1326]: f(\"HI\")\nHI\n</code>\n</pre>\n", "senID": 1}], [{"text": ["what you've written is equivalent to"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def anon():\n    return print \"x\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["which also results in a SyntaxError, python doesn't let you assign a value to print in 2.xx; in python3 you could say"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n lambda: print('hi')\n</code>\n</pre>\n", "senID": 3}, {"text": ["and it would work because they've changed print to be a function instead of a statement."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The body of a lambda has to be an expression that returns a value.", "print, being a statement, doesn't return anything, not even None.", "Similarly, you can't assign the result of print to a variable:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = print \"hello\"\n  File \"&lt;stdin&gt;\", line 1\n    x = print \"hello\"\n            ^\nSyntaxError: invalid syntax\n</code>\n</pre>\n", "senID": 1}, {"text": ["You also can't put a variable assignment in a lambda, since assignments are statements:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lambda y: (x = y)\n  File \"&lt;stdin&gt;\", line 1\n    lambda y: (x = y)\n                 ^\nSyntaxError: invalid syntax\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The body of a lambda has to be a single expression.", "print is a statement, so it's out, unfortunately. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "expression", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Here, you see an answer for your question.", "print is not expression in Python, it says."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/tutor/2007-July/055260.html"}, {"text": "print", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["In cases where I am using this for simple stubbing out I use this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["which works perfectly."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]