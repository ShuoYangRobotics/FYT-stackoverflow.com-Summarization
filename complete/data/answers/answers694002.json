[[{"text": ["You can store the results in a list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n rolls = [Die(n).roll_die() for n in (6, 4, 12)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["then you can show the individual results"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print rolls\n[5, 2, 6]\n</code>\n</pre>\n", "senID": 3}, {"text": ["or sum them"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print sum(rolls)\n13\n</code>\n</pre>\n", "senID": 5}, {"text": ["Or, instead, you could keep a running total:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n total = 0\nfor n in (6, 4, 12):\n    value = Die(n).roll_die()\n    print \"Rolled a\", value\n    total += value\nprint \"Total is\", total\n</code>\n</pre>\n", "senID": 7}, {"text": ["(edited to reflect the changes/clarifications to the question)"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["It may also be useful to just store the last roll so you can get it whenever you want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self, s = 6):\n    self.sides = s\n    self.last_roll = None\n\ndef roll_die(self):\n    self.last_roll = random.randint(1,self.sides)\n    return self.last_roll\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'm not sure exactly where you're confused.", "The simplest thing you need to do is separate the concept of a specific die you're going to roll (the object) with the action (rolling it).", "I would start here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d6 = Die() #create die 1 with the default side of 6\nd4 = Die(4) #create die 2 with 4 sides\nd12 = Die(12) #create die 3 with 12 sides\n\nroll1 = d6.roll_die()\nroll2 = d4.roll_die()\nroll3 = d12.roll_die()\n\nprint \"%d\\n%d\\n%d\\nsum = %d\" % (roll1, roll2, roll3, roll1 + roll2 + roll3)\n</code>\n</pre>\n", "senID": 1}, {"text": ["... and then get fancier with lists, etc."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Since roll_die returns a value, you can add those values."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "roll_die", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Try this."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n roll1.roll_die() + roll2.roll_die()\n</code>\n</pre>\n", "senID": 2}, {"text": ["What happens?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You can just sum the numbers.", "In case you want to sum the outcome of n rolls, consider adding this function to the class:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "n", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def sum_of_n_rolls(self, n)\n    return sum(self.roll_die() for _ in range(n))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, consider renaming *roll_die* to just roll.", "It's obvious that it's not about rolling a rock, since the method is part of the class Die."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "roll", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "Die", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"tag": "hr", "senID": 3}, {"text": ["Edit: I now read you need to print intermediate rolls.", "Consider:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def n_rolls(self, n):\n    return [self.roll_die() for _ in range(n)]\n</code>\n</pre>\n", "senID": 5}, {"text": ["Now you can roll a 7-sided die 10 times:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n rolls = Die(7).n_rolls(10)\nprint(rolls, sum(rolls))\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Guess I'd do something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # Create dice\nsides = [6,4,12]\ndice = [Die(s) for s in sides]\n\n# Roll dice\nrolls = [die.roll_die() for die in dice]\n\n# Print rolls\nfor roll in rolls:\n    print roll\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can also combine a few of these steps if you like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for num_sides in [6,4,12]:\n    print Die(num_sides).roll_die()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If I understood you correctly you want a class attribute."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["UPDATE: Added a way for automatically reseting the total"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import random\n\nclass Die():\n    _total = 0\n\n    @classmethod\n    def total(cls):\n        t = cls._total\n        cls._total = 0\n        return t\n\n    def __init__(self, s=6):\n        self.sides = s\n\n    def roll_die(self):\n        x = random.randint(1,self.sides)\n        self.__class__._total += x\n        return x\n\nroll1 = Die()   #Rolling die 1 with the default side of 6\nroll2 = Die(4)  #Rolling die 2 with 4 sides\nroll3 = Die(12) #Rolling die 3 with 12 sides\n\nprint roll1.roll_die()  \nprint roll2.roll_die()\nprint roll3.roll_die()\nprint Die.total()\nprint \"--\"\nprint roll1.roll_die()  \nprint roll2.roll_die()\nprint roll3.roll_die()\nprint Die.total()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Let's get crazy :) (combined with my last answer as well)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Die():\n    def __init__(self, s = 6):\n        self.sides = s\n        self.last_roll = None\n\n    def roll_die(self):\n        self.last_roll = random.randint(1,self.sides)\n        return self.last_roll\n\ndice = map(Die, (6, 4, 12))\nrolls = map(Die.roll_die, dice)\n\nprint rolls\nprint sum(rolls)\n</code>\n</pre>\n", "senID": 1}]]