[[{"text": ["Yes, that's how PEP 8 shows it in examples:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Rectangle(Blob):\n\n    def __init__(self, width, height,\n                 color='black', emphasis=None, highlight=0):\n        if width == 0 and height == 0 and \\\n           color == 'red' and emphasis == 'strong' or \\\n           highlight &gt; 100:\n            raise ValueError(\"sorry, you lose\")\n        if width == 0 and height == 0 and (color == 'red' or\n                                           emphasis is None):\n            raise ValueError(\"I don't think so -- values are %s, %s\" %\n                             (width, height))\n        Blob.__init__(self, width, height,\n                      color, emphasis, highlight)\n</code>\n</pre>\n", "senID": 1}, {"text": ["But when the opening parenthesis/brace is already close to the 79th column, I usually just exploit this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Two good reasons to break a particular rule:\n\n(1) When applying the rule would make the code less readable, even for\n    someone who is used to reading code that follows the rules.\n[...]\n</code>\n</pre>\n", "senID": 3}, {"text": ["And do something like"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n self.some_long_attribute_name = {\n    'someLongKeyName': 'someLongValueName',\n    'anotherLongKeyName': 'anotherLongValueName'\n}\n</code>\n</pre>\n", "senID": 5}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n long_object_name.do_something_with_long_name(\n    long_expression_returning_is_first_arg,\n    long_expression_returning_is_second_arg\n)\n</code>\n</pre>\n", "senID": 7}], [{"text": ["http://www.python.org/dev/peps/pep-0008/\nSee Maximum Line Length"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://www.python.org/dev/peps/pep-0008/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}, {"text": "Maximum Line Length", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class Rectangle(Blob):\n\n    def __init__(self, width, height,\n                 color='black', emphasis=None, highlight=0):\n        if width == 0 and height == 0 and \\\n           color == 'red' and emphasis == 'strong' or \\\n           highlight &gt; 100:\n            raise ValueError(\"sorry, you lose\")\n        if width == 0 and height == 0 and (color == 'red' or\n                                           emphasis is None):\n            raise ValueError(\"I don't think so -- values are %s, %s\" %\n                             (width, height))\n        Blob.__init__(self, width, height,\n                      color, emphasis, highlight)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Even beyond Python, I do this all the time for my C code so I can (as the PEP says) have 2-3 files open on a monitor side-by-side and see them all."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The backslash operator \\ works as a line continuation operator in Python as well as C, but I prefer to try to group lines with parenthesis () or braces {} (or brackets [] for Python lists), whatever is most convenient.", "If I decide I want to add another line in the middle of a long continuing block, I don't want to worry about any stupid 'gotchas': missing a \\ or worse, some errant space after the \\ invalidating the continuation."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "\\", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "{}", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "\\", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "\\", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For long conditionals, I like to double-indent so it's more obvious that that code isn't part of the new block."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if (somethingLong == x or\n        somethingElse == y or\n        somethingOld == z or\n        x &lt; y &lt; z or\n        doIt.now()):\n    pass\n</code>\n</pre>\n", "senID": 3}], [{"text": ["In PEP 8 there is an example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"code": "<pre>\n<code>\n class Rectangle(Blob):\n\n    def __init__(self, width, height,\n        # more code\n        Blob.__init__(self, width, height,\n                      color, emphasis, highlight)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which, to my eye, suggests that your example is correct.", "I think you should break first line of the example after opening bracket ( { ) like so:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "{", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n self.someLongAttributeName = {\n                 'someLongKeyName':'someLongValueName',\n                 'anotherLongKeyName':'anotherLongValueName'\n    }\n</code>\n</pre>\n", "senID": 3}, {"text": ["if it is too long.", "I don't know if it is 'pythonic', but should be familiar and readable."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [], [{"text": ["I was pretty sure this was answered here before, but I can't find it now so.."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The short answer is that PEP8 does not cover how to format object literals, other than that colons should have zero spaces before and one space after. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I do them like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n obj = {\n     'foo': 1,\n     'bar': 2,\n     'bas': 3,\n}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Good trick is also to do like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n my_long_string=\"\"\"\nThis are\nmany lines of text\n\"\"\"\n\na = [a in my_long_string.split() if a]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Some people prefer to use \\ after opening triple quote and not filter empty lines, but I really hate those beasts."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For your particular example I agree with cji."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]