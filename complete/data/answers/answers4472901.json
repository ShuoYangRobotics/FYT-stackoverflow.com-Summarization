[[{"text": ["Well, here is what you asked for:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyEnum:\n  VAL1, VAL2, VAL3 = range(3)\n  @classmethod\n  def tostring(cls, val):\n    for k,v in vars(cls).iteritems():\n        if v==val:\n            return k\n\n  @classmethod\n  def fromstring(cls, str):\n      return getattr(cls, str.upper(), None)\n\nprint MyEnum.fromstring('Val1')\nprint MyEnum.tostring(2)\n</code>\n</pre>\n", "senID": 1}, {"text": ["But I really don't get the point of Enums in Python.", "It has such a rich type system as well as generators and coroutines to manage states. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I know I've not been using Enums in Python for more than 12 years, maybe you can get rid of them too ;-)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Use a dict:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n MyEnum = {'VAL1': 1, 'VAL2':2, 'VAL3':3}\n</code>\n</pre>\n", "senID": 1}, {"text": ["No classes necessary.", "Dicts have your class beat because 1.", ") they're incredibly efficient, 2.", ") have a bunch of incredible methods baked in, and 3.", ") are a universal language construct.", "They're also extensible:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n MyEnum['VAL4'] = 4\n</code>\n</pre>\n", "senID": 3}, {"text": ["It's not wise to implement C++ (or another language's) functionality in Python.", "If you find yourself \"hacking up an enum\" or something of that nature, you can bet the farm you're not doing it the Python way."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If you want to go the opposite way, build another dict.", "(e.g.", "{'1':'VAL1', ...}"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "{'1':'VAL1', ...}", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["See:\nWhat's the best way to implement an 'enum' in Python?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "What's the best way to implement an 'enum' in Python?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python"}]}, {"text": ["This one is interesting:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class EnumMeta(type):\n  def __getattr__(self, name):\n    return self.values.index(name)\n\n  def __setattr__(self, name, value):  # this makes it read-only\n    raise NotImplementedError\n\n  def __str__(self):\n    args = {'name':self.__name__, 'values':', '.join(self.values)}\n    return '{name}({values})'.format(**args)\n\n  def to_str(self, index):\n    return self.values[index]\n\nclass Animal(object):\n  __metaclass__ = EnumMeta\n  values = ['Horse','Dog','Cat']\n</code>\n</pre>\n", "senID": 2}, {"text": ["Use:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n In [1]: Animal.to_str(Animal.Dog)\nOut[1]: 'Dog'\nIn [2]: Animal.Dog\nOut[2]: 1\nIn [3]: str(Animal)\nOut[3]: 'Animal(Horse, Dog, Cat)'\n</code>\n</pre>\n", "senID": 4}, {"text": ["It's simple and lightweight.", "Are they any disadvantages of this approach? "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["EDIT:\nAFAIK enums are not very pythonic as a concept, thats why they were not implemented in the first place.", "I never used them, and can't see any usecase for them in Python.", "Enums are useful in static typed languages, because they are not dynamic ;)"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["You could use dictionaries:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyEnum:\n    VAL1, VAL2, VAL3 = range(3)\n    __toString = { VAL1 : \"VAL1\", VAL2 : \"VAL2\", VAL3 : \"VAL3\" }\n\n    @classmethod\n    def tostring(cls, val):\n        return cls.__toString.get(val)\n\n    @classmethod\n    def fromstring(cls, str):\n        i = str.upper()\n        for k,v in cls.__toString.iteritems():\n            if v == i:\n                return k\n        return None\n\n\nprint MyEnum.tostring(MyEnum.VAL1)\nprint MyEnum.fromstring(\"VAL1\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit : THC4k answers is definitely better.", "But left mine as an example of naive implementation."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You should not have to hardcode your values inside the class - you better have an enumerator factory.", "WHile at that, just add some nicetirs provided by Python, for example, override the represntation method, or attribute getting:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Enumerator(object):\n    def __init__(self, *names):\n        self._values = dict((value, index) for index, value in enumerate (names))\n    def __getattribute__(self, attr):\n        try:\n            return object.__getattribute__(self,\"_values\")[attr]\n        except KeyError:\n            return object.__getattribute__(self, attr)\n    def __getitem__(self, item):\n        if isinstance (item, int):\n            return self._values.keys()[self._values.values().index(item)]\n        return self._values[item]\n    def __repr__(self):\n        return repr(self._values.keys())\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now just use that:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; enum = Enumerator(\"val1\", \"val2\", \"val3\")\n&gt;&gt;&gt; enum\n['val3', 'val2', 'val1']\n&gt;&gt;&gt; enum.val2\n1\n&gt;&gt;&gt; enum[\"val1\"]\n0\n&gt;&gt;&gt; enum[2]\n'val3'\n</code>\n</pre>\n", "senID": 3}, {"text": ["(btw, people in the Python developers list are talking about this,most likely we will \nhave a more complete, and with enough features, implementation of this natively by Python 3.3)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["This will do what you want and generalizes your implementation slightly reducing boiler-plate code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class EnumBase: # base class of all Enums\n    @classmethod\n    def tostring(cls, value):\n        return dict((v,k) for k,v in cls.__dict__.iteritems())[value]\n\n    @classmethod\n    def fromstring(cls, name):\n        return cls.__dict__[name]\n\nclass MyEnum(EnumBase): VAL1, VAL2, VAL3 = range(3)\n\nprint MyEnum.fromstring('VAL1')\n# 0\nprint MyEnum.tostring(1)\n# VAL2\n</code>\n</pre>\n", "senID": 1}]]