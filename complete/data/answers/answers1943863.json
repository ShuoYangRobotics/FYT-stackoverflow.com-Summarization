[[{"text": ["Prefixing a variable or function name with an underscore is a convention in Python to indicate that the variable is private.", "From the docs:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the docs", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#private-variables"}]}], [{"text": ["Per pep8 (http://www.python.org/dev/peps/pep-0008/), a single underscore is intended to denote a \"generally private\" method or attribute.", "The interpreter itself has no interaction with the single underscore, its more of a convention.", "The double underscore OTOH has significance within the interpreter."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.python.org/dev/peps/pep-0008/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}], [{"text": ["Basically, the idea is that in Python convention, there are three levels of encapsulation/hiding."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In your case, the '_b' method is a private method.", "The author of this code wants to let you know that this is not meant for public use, rather if you are writing a wrapper around this class or something of that nature (basically if you are developer using this class), then you may use that method.", "Otherwise, it is better that you don't."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Also, a single underscore in front of a variable(or method) ties it to that class.", "So when a._b is called, the interpreter looks for it in the definition of the class a."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "a._b", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Difference between single and double underscore:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Foo(object):\n\n    def regular_method(self):\n        print 'ok'\n\n    def _soft_private(self):\n        print 'ok'\n\n    def __mangled_private(self):\n        print 'ok'\n\nf = Foo()\nf.regular_method()\n# prints ok\nf._soft_private()\n# print ok\nf.__mangled_private()\n# error! no such attribute. BUT:\nf._Foo__mangled_private()\n# prints ok\n</code>\n</pre>\n", "senID": 1}, {"text": ["So in essence there is no real \"privacy\" in python, but convention of using single underscore to warn developer using your API that he's doing so at his own risk."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You'll notice that b isn't defined anywhere.", "While _b is."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "_b", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Unless you're asking why that naming convention is being used, in which case, you should ask the author of that code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The underscore is simply used to denote that the variable is private."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The class object a has an attribute _b which is found when asking for self._b.", "The same class object a has no attribute b."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "_b", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "self._b", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["_b and b are as different as beehive and zulu.  "], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "_b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "beehive", "childNum": 0, "tag": "code", "childList": []}, {"text": "zulu", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You will get a parameter error when calling self._b because Python will implicitly pass self as the first argument to a bound method.", "The signature should be:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "self._b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def _b(self):\n    print('bbbb')\n</code>\n</pre>\n", "senID": 3}]]