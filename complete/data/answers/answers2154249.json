[[{"text": ["EDIT 2: To answer the OP new requirement"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "EDIT 2: To answer the OP new requirement", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ranges = []\nfor key, group in groupby(enumerate(data), lambda (index, item): index - item):\n    group = map(itemgetter(1), group)\n    if len(group) &gt; 1:\n        ranges.append(xrange(group[0], group[-1]))\n    else:\n        ranges.append(group[0])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [xrange(2, 5), xrange(12, 17), 20]\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can replace xrange with range or any other custom class."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Python docs have a very neat recipe for this:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "recipe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#examples"}]}, {"code": "<pre>\n<code>\n from operator import itemgetter\nfrom itertools import groupby\ndata = [2, 3, 4, 5, 12, 13, 14, 15, 16, 17]\nfor k, g in groupby(enumerate(data), lambda (i,x):i-x):\n    print map(itemgetter(1), g)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n [2, 3, 4, 5]\n[12, 13, 14, 15, 16, 17]\n</code>\n</pre>\n", "senID": 8}, {"text": ["If you want to get the exact same output, you can do this:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n ranges = []\nfor k, g in groupby(enumerate(data), lambda (i,x):i-x):\n    group = map(itemgetter(1), g)\n    ranges.append((group[0], group[-1]))\n</code>\n</pre>\n", "senID": 10}, {"text": ["output:"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n [(2, 5), (12, 17)]\n</code>\n</pre>\n", "senID": 12}, {"text": ["EDIT: The example is already explained in the documentation but maybe I should explain it more:"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["If the data was: [2, 3, 4, 5, 12, 13, 14, 15, 16, 17]\nThen groupby(enumerate(data), lambda (i,x):i-x) is equivalent of the following:"], "childNum": 2, "tag": "p", "senID": 14, "childList": [{"text": "[2, 3, 4, 5, 12, 13, 14, 15, 16, 17]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "groupby(enumerate(data), lambda (i,x):i-x)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n groupby(\n    [(0, 2), (1, 3), (2, 4), (3, 5), (4, 12),\n    (5, 13), (6, 14), (7, 15), (8, 16), (9, 17)],\n    lambda (i,x):i-x\n)\n</code>\n</pre>\n", "senID": 15}, {"text": ["The lambda function subtracts the element index from the element value.", "So when you apply the lambda on each item.", "You'll get the following keys for groupby:"], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"code": "<pre>\n<code>\n [-2, -2, -2, -2, -8, -8, -8, -8, -8, -8]\n</code>\n</pre>\n", "senID": 17}, {"text": ["groupby groups elements by equal key value, so the first 4 elements will be grouped together and so forth."], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"text": ["I hope this makes it more readable. "], "childNum": 0, "tag": "p", "senID": 19, "childList": []}], [{"text": ["Assuming your list is sorted:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import groupby\n&gt;&gt;&gt; def ranges(lst):\n    pos = (j - i for i, j in enumerate(lst))\n    t = 0\n    for i, els in groupby(pos):\n        l = len(list(els))\n        el = lst[t]\n        t += l\n        yield range(el, el+l)\n\n\n&gt;&gt;&gt; lst = [2, 3, 4, 5, 12, 13, 14, 15, 16, 17]\n&gt;&gt;&gt; list(ranges(lst))\n[range(2, 6), range(12, 18)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The \"naive\" solution which I find somewhat readable atleast."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = [2, 3, 4, 5, 12, 13, 14, 15, 16, 17, 22, 25, 26, 28, 51, 52, 57]\n\ndef group(L):\n    first = last = L[0]\n    for n in L[1:]:\n        if n - 1 == last: # Part of the group, bump the end\n            last = n\n        else: # Not part of the group, yield current group and start a new\n            yield first, last\n            first = last = n\n    yield first, last # Yield the last group\n\n\n&gt;&gt;&gt;print list(group(x))\n[(2, 5), (12, 17), (22, 22), (25, 26), (28, 28), (51, 52), (57, 57)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This doesn't use a standard function - it just iiterates over the input, but it should work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def myfunc(l):\n    r = []\n    p = q = None\n    for x in l + [-1]:\n        if x - 1 == q:\n            q += 1\n        else:\n            if p:\n               if q &gt; p:\n                   r.append('%s-%s' % (p, q))\n               else:\n                   r.append(str(p))\n            p = q = x\n    return '(%s)' % ', '.join(r)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that it requires that the input contains only positive numbers in ascending order.", "You should validate the input, but this code is omitted for clarity."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Here it is something that should work, without any import needed:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def myfunc(lst):\n    ret = []\n    a = b = lst[0]                           # a and b are range's bounds\n\n    for el in lst[1:]:\n        if el == b+1: b = el                 # range grows\n        else:                                # range ended\n            ret.append(a if a==b else (a,b)) # is a single or a range?\n            a = b = el                       # let's start again with a single\n    ret.append(a if a==b else (a,b))         # corner case for last single/range\n    return ret\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's the answer I came up with.", "I'm writing the code for other people to understand, so I'm fairly verbose with variable names and comments."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First a quick helper function:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def getpreviousitem(mylist,myitem):\n    '''Given a list and an item, return previous item in list'''\n    for position, item in enumerate(mylist):\n        if item == myitem:\n            # First item has no previous item\n            if position == 0:\n                return None\n            # Return previous item    \n            return mylist[position-1]\n</code>\n</pre>\n", "senID": 2}, {"text": ["And then the actual code: "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def getranges(cpulist):\n    '''Given a sorted list of numbers, return a list of ranges'''\n    rangelist = []\n    inrange = False\n    for item in cpulist:\n        previousitem = getpreviousitem(cpulist,item)\n        if previousitem == item - 1:\n            # We're in a range\n            if inrange == True:\n                # It's an existing range - change the end to the current item\n                newrange[1] = item\n            else:    \n                # We've found a new range.\n                newrange = [item-1,item]\n            # Update to show we are now in a range    \n            inrange = True    \n        else:   \n            # We were in a range but now it just ended\n            if inrange == True:\n                # Save the old range\n                rangelist.append(newrange)\n            # Update to show we're no longer in a range    \n            inrange = False \n    # Add the final range found to our list\n    if inrange == True:\n        rangelist.append(newrange)\n    return rangelist\n</code>\n</pre>\n", "senID": 4}, {"text": ["Example run:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n getranges([2, 3, 4, 5, 12, 13, 14, 15, 16, 17])\n</code>\n</pre>\n", "senID": 6}, {"text": ["returns:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n [[2, 5], [12, 17]]\n</code>\n</pre>\n", "senID": 8}]]