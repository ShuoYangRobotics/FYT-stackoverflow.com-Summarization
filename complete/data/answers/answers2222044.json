[[{"text": ["This does what you're after:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from inspect import currentframe, getframeinfo\n\nclass MyClass:\n    def foo(self):\n        print \"My name is %s\" % getframeinfo(currentframe())[2]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Names always refer to local variables or (if one doesn't exist) then global variables.", "There is a a global __name__ that has the module's name."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyClass:\n  def foo(self):\n    print \"My name is %s\" % MyClass.foo.__name__\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, that's redundant and almost entirely pointless.", "Just type out the method name:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class MyClass:\n  def foo(self):\n    print \"My name is %s\" % \"foo\"\n    print \"My name is foo\"\n</code>\n</pre>\n", "senID": 3}], [{"text": ["__name__ refers to the module because that's what it's supposed to do.", "The only way to get at the currently running function would be to introspect the stack."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__name__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "that's what it's supposed to do", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html"}]}], [{"text": ["The other answers explain it quite well so I contribute with a more concrete example."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["name.py"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "name.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def foo():\n    print \"name in foo\",__name__\n\nfoo()\nprint \"foo's name\",foo.__name__\nprint \"name at top\",__name__\n</code>\n</pre>\n", "senID": 2}, {"text": ["Output"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Output", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n name in foo __main__\nfoo's name foo\nname at top __main__\n</code>\n</pre>\n", "senID": 4}, {"text": ["name2.py"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "name2.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import name\n</code>\n</pre>\n", "senID": 6}, {"text": ["Output"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Output", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n name in foo name\nfoo's name foo\nname at top name\n</code>\n</pre>\n", "senID": 8}, {"text": ["Notice how the __name__ refers to built-in property of the module?", "Which is __main__ if the module is run directly, or the name of the module if its imported. "], "childNum": 2, "tag": "p", "senID": 9, "childList": [{"text": "__name__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__main__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["You should have run across the if __name__==\"__main__\": snippet."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "if __name__==\"__main__\":", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You can find the relevant docs here, go check them out.", "Good luck!", ":)"], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "relevant docs here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/inspect.html"}]}], [{"text": ["Use introspection with the inspect module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "inspect", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/inspect.html"}]}, {"code": "<pre>\n<code>\n import inspect\n\nclass MyClass:\n    def foo(self):\n        print \"My name is %s\" % inspect.stack()[0][3]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Have a look at the theinspectmodule."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "theinspectmodule", "tag": "a", "pos": 0, "childList": [{"text": "inspect", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/inspect.html"}, {"text": "inspect", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Try:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import inspect\n&gt;&gt;&gt; def foo():\n...     print inspect.getframeinfo(inspect.currentframe())[2]\n...\n&gt;&gt;&gt; foo()\nfoo\n</code>\n</pre>\n", "senID": 2}, {"text": ["or:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def foo2():\n...     print inspect.stack()[0][3]\n...\n&gt;&gt;&gt; foo2()\nfoo2\n</code>\n</pre>\n", "senID": 4}], [{"text": ["This will do it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(You need to refer to self.__class__._name__."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "self.__class__._name__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class MyClass:\n    def foo(self):\n        print \"My name is %s\" % self.__class__.__name__\n</code>\n</pre>\n", "senID": 2}]]