[[{"text": ["As you suspected, this is a perfect situation for threading.", "Here is a short guide I found immensely helpful when doing my own first bit of threading in python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.wellho.net/solutions/python-python-threads-a-first-example.html"}]}], [{"text": ["As you rightly indicated, you could create a number of threads, each of which is responsible for performing urlretrieve operations.", "This allows the main thread to continue uninterrupted. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is a tutorial on threading in python:\nhttp://heather.cs.ucdavis.edu/~matloff/Python/PyThreads.pdf"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://heather.cs.ucdavis.edu/~matloff/Python/PyThreads.pdf", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://heather.cs.ucdavis.edu/~matloff/Python/PyThreads.pdf"}]}], [{"text": ["Here's an example of how to use threading.Thread.", "Just replace the class name with your own and the run function with your own.", "Note that threading is great for IO restricted applications like your's and can really speed it up.", "Using pythong threading strictly for computation in standard python doesn't help because only one thread can compute at a time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import threading, time\nclass Ping(threading.Thread):\n    def __init__(self, multiple):\n    \tthreading.Thread.__init__(self)\n    \tself.multiple = multiple\n    def run(self):\n    \t#sleeps 3 seconds then prints 'pong' x times\n    \ttime.sleep(3)\n    \tprintString = 'pong' * self.multiple\n\npingInstance = Ping(3)\npingInstance.start() #your run function will be called with the start function\nprint \"pingInstance is alive? : %d\" % pingInstance.isAlive() #will return True, or 1\nprint \"Number of threads alive: %d\" % threading.activeCount()\n#main thread + class instance\ntime.sleep(3.5)\nprint \"Number of threads alive: %d\" % threading.activeCount()\nprint \"pingInstance is alive?: %d\" % pingInstance.isAlive()\n#isAlive returns false when your thread reaches the end of it's run function.\n#only main thread now\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You'll probably benefit from threading or multiprocessing modules.", "You don't actually need to create all those Thread-based classes by yourself, there is a simpler method using Pool.map:"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "threading", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "multiprocessing", "tag": "a", "pos": -1, "childList": [{"text": "multiprocessing", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/multiprocessing.html#using-a-pool-of-workers"}, {"text": "multiprocessing", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Thread", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Pool.map", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from multiprocessing import Pool\n\ndef fetch_url(url):\n    # Fetch the URL contents and save it anywhere you need and\n    # return something meaningful (like filename or error code),\n    # if you wish.\n    ...\n\npool = Pool(processes=4)\nresult = pool.map(f, image_url_list)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You have these choices:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Threads: easiest but doesn't scale well", "tag": "none", "senID": 1}, {"text": "Twisted: medium difficulty, scales well but shares CPU due to GIL and being single threaded.", "tag": "none", "senID": 2}, {"text": "Multiprocessing: hardest. Scales well if you know how to write your own event loop.", "tag": "none", "senID": 3}]}, {"text": ["I recommend just using threads unless you need an industrial scale fetcher."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You either need to use threads, or an asynchronous networking library such as Twisted.", "I suspect that using threads might be simpler in your particular use case."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Twisted", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com"}]}]]