[[{"text": ["Look into Jython - you can run Python programs directly from Java code, and interact seamlessly back and forth."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Jython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.jython.org/"}]}], [{"text": ["I don't know nothing about Jython and the like.", "I guess it's the best solution if you can execute two programs without executing a new process each time the Java app needs to transform text.", "Anyway a simple proof of concept is to execute a separate process from the Java App to make it work.", "Next you can enhance the execution with all that tools."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Executing a separate process from Java"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Executing a separate process from Java", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n String[] envprops = new String[] {\"PROP1=VAL1\", \"PROP2=VAL2\" };\nProcess pythonProc = Runtime.getRuntime().exec(\n   \"the command to execute the python app\", \n    envprops, \n    new File(\"/workingdirectory\"));\n\n// get an outputstream to write into the standard input of python\nOutputStream toPython = pythonProc.getOutputStream();\n\n// get an inputstream to read from the standard output of python\nInputStream fromPython = pythonProc.getInputStream();\n\n// send something\ntoPython.write(.....);\n// receive something\nfromPython.read(....);\n</code>\n</pre>\n", "senID": 2}, {"text": ["Important: chars are NOT bytes"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Important: chars are NOT bytes", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["A lot of people understimate this."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Be careful with char to byte conversions (remember Writers/Readers are for chars, Input/OutputStreams are for bytes, encoding is necesary for convertir one to another, you can use OuputStreamWriter to convert string to bytes and send, InputStreamReader to convert bytes to chars and read them)."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "OuputStreamWriter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "InputStreamReader", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Use ProcessBuilder to  execute your Python code as a filter:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ProcessBuilder", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://java.sun.com/javase/6/docs/api/java/lang/ProcessBuilder.html"}, {"href": "http://docs.python.org/", "text": "Python", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class PBTest {\n\n    public static void main(String[] args) {\n        ProcessBuilder pb = new ProcessBuilder(\"python\", \"-c\", \"print 42\");\n        pb.redirectErrorStream(true);\n        try {\n            Process p = pb.start();\n            String s;\n            BufferedReader stdout = new BufferedReader (\n                new InputStreamReader(p.getInputStream()));\n            while ((s = stdout.readLine()) != null) {\n                System.out.println(s);\n            }\n            System.out.println(\"Exit value: \" + p.waitFor());\n            p.getInputStream().close();\n            p.getOutputStream().close();\n            p.getErrorStream().close();\n         } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Expose one of the two as a service of some kind, web service maybe.", "Another option is to port the python code to Jython"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["One possible solution is jpype.", "This allows you to launch a JVM from Python and pass data back and forth between them."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "jpype", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jpype.sourceforge.net/"}]}, {"text": ["Another solution may be to write the Python program as a filter (reading data from stdin and writing result to stdout) then run it as a pipe.", "However I do not know how well Java supports this - according to the Sun docs their concept of pipes only supports communication between threads on the same JVM.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["An option is making the python application work as a server, listens for request via sockets (TCP)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]