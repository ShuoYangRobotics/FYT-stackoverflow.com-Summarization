[[{"text": ["Do you want to have: aList[0] ?  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "aList[0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["EDIT::\nOh, you have a tuple with the list in it!", "Now I see:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "EDIT::", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n al = [\"camilla_farnestam@hotmail.com : martin00\", \"\"],\n#type(al) == tuple\n#len(al) == 1\naList = al[0]\n#type(aList) == list\n#len(aList) == 2\n#Now you can type:\naList[0]\n#and you get:\n\"camilla_farnestam@hotmail.com : martin00\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can use aList[0].replace(' : ', ':') if you wish to remove spaces before and after colon, suit your needs.", "I think that the most confusing thing here is the coma ending the first line.", "It creates a new tuple, that contains your list."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "aList[0].replace(' : ', ':')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n al = [\"camilla_farnestam@hotmail.com : martin00\", \"\"],\nprint al[0][0].replace(\" : \", \":\")\n</code>\n</pre>\n", "senID": 0}], [{"text": ["comma at the end means that list is first member of a tuple, but to your question:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n in_list = [\"camilla_farnestam@hotmail.com : martin00\", \"\"]\nresult = ''.join(in_list[0].split(' '))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Exactly. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n$ python\n    Python 2.6 (r26:66714, Dec  4 2008, 11:34:15) \n    [GCC 4.0.1 (Apple Inc. build 5488)] on darwin\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> al = [\"camilla_farnestam@hotmail.com : martin00\", \"\"]\n    >>> print al[0]\n    camilla_farnestam@hotmail.com : martin00\n    >>>\n</pre>\n", "senID": 1}], [{"text": ["Abgan, is probably correct, although if you still want a list, ie., "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [\"camilla_farnestam@hotmail.com : martin00\"]\n</code>\n</pre>\n", "senID": 1}, {"text": ["you'd want:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n the_list[:1]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["lists can be accessed by index or sliced into smaller lists.", "http://diveintopython.org/native_data_types/lists.html#d0e5623"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "http://diveintopython.org/native_data_types/lists.html#d0e5623", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://diveintopython.org/native_data_types/lists.html#d0e5623"}]}]]