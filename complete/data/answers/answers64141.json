[[{"text": ["A class is a template, it allows you to create a blueprint, you can then have multiple instances of a class each with different numbers, like so."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class dog(object):\n\tdef __init__(self, height, width, lenght):\n\t\tself.height = height\n\t\tself.width = width\n\t\tself.length = length\n\n\tdef revert(self):\n\t\tself.height = 1\n\t\tself.width = 2\n\t\tself.length = 3\n\ndog1 = dog(5, 6, 7)\ndog2 = dog(2, 3, 4)\n\ndog1.revert()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Classes don't have values.", "Objects do.", "Is what you want basically a class that can reset an instance (object) to a set of default values? "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["How about just providing a reset method, that resets the properties of your object to whatever is the default?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I think you should simplify your question, or tell us what you really want to do.", "It's not at all clear."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I think you are confused.", "You should re-check the meaning of \"class\" and \"instance\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think you are trying to first declare a Instance of a certain Class, and then declare a instance of other Class, use the data from the first one, and then find a way to convert the data in the second instance and use it on the first instance..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I recommend that you use operator overloading to assign the data."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n class ABC(self):\n   numbers = [0,1,2,3]\n\nclass DEF(ABC):\n   def __init__(self):\n      self.new_numbers = super(ABC,self).numbers\n\n   def setnums(self, numbers):\n      self.new_numbers = numbers\n\n   def getnums(self):\n     return self.new_numbers\n\n   def reset(self):\n     __init__()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Just FYI, here's an alternate implementation...", "Probably violates about 15 million pythonic rules, but I publish it per information/observation:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Resettable(object):\n    base_dict = {}\n    def reset(self):\n            self.__dict__ = self.__class__.base_dict\n\n    def __init__(self):\n            self.__dict__ = self.__class__.base_dict.copy()\n\nclass SomeClass(Resettable):\n    base_dict = {\n            'number_one': 1,\n            'number_two': 2,\n            'number_three': 3,\n            'number_four': 4,\n            'number_five': 5,\n    }\n    def __init__(self):\n            Resettable.__init__(self)\n\n\np = SomeClass()\np.number_one = 100\nprint p.number_one\np.reset()\nprint p.number_one\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's another answer kind of like pobk's; it uses the instance's dict to do the work of saving/resetting variables, but doesn't require you to specify the names of them in your code.", "You can call save() at any time to save the state of the instance and reset() to reset to that state."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyReset:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.save()\n\n    def save(self):\n        self.saved = self.__dict__.copy()\n\n    def reset(self):\n        self.__dict__ = self.saved.copy()\n\na = MyReset(20, 30)\na.x = 50\nprint a.x\na.reset()\nprint a.x\n</code>\n</pre>\n", "senID": 1}, {"text": ["Why do you want to do this?", "It might not be the best/only way."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]