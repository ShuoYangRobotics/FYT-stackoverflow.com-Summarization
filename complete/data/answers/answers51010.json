[[{"text": ["Also a little silly, but you could try picking an arbitrary day and embedding each time in it, using datetime.datetime.combine, then subtracting:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "datetime.datetime.combine", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import datetime\n&gt;&gt;&gt; t1 = datetime.time(2,3,4)\n&gt;&gt;&gt; t2 = datetime.time(18,20,59)\n&gt;&gt;&gt; dummydate = datetime.date(2000,1,1)\n&gt;&gt;&gt; datetime.datetime.combine(dummydate,t2) - datetime.datetime.combine(dummydate,t1)\ndatetime.timedelta(0, 58675)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Python has pytz (http://pytz.sourceforge.net) module which can be used for arithmetic of 'time' objects.", "It takes care of DST offsets as well.", "The above page has a number of examples that illustrate the usage of pytz."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pytz.sourceforge.net", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pytz.sourceforge.net"}]}], [{"text": ["You could transform both into timedelta objects and subtract these from each other, taking care to handle carry-overs correctly (from sec to min etc)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "timedelta objects", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/datetime-timedelta.html"}]}], [{"text": ["It seems that this isn't supported, since there wouldn't be a good way to deal with overflows in datetime.time.", "I know this isn't an answer directly, but maybe someone with more python experience than me can take this a little further.", "For more info, see this: http://bugs.python.org/issue3250"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://bugs.python.org/issue3250", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://bugs.python.org/issue3250"}]}], [{"text": ["Firstly, note that a datetime.time is a time of day, independent of a given day, and so the different between any two datetime.time values is going to be less than 24 hours."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One approach is to convert both datetime.time values into comparable values (such as milliseconds), and find the difference."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n t1, t2 = datetime.time(...), datetime.time(...)\n\nt1_ms = (t1.hour*60*60 + t1.minute*60 + t1.second)*1000 + t1.microsecond\nt2_ms = (t2.hour*60*60 + t2.minute*60 + t2.second)*1000 + t2.microsecond\n\ndelta_ms = max([t1_ms, t2_ms]) - min([t1_ms, t2_ms])\n</code>\n</pre>\n", "senID": 2}, {"text": ["It's a little lame, but it works."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Retrieve the times in milliseconds and then do the subtraction."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Environment.TickCount seems to work well if you need something quick."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["int start = Environment.TickCount"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["...DoSomething()"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["int elapsedtime = Environment.TickCount - start"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Jon"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]