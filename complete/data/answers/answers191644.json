[[{"text": ["I'm not a python expert but after a brief perusing of the DB-API 2.0 I believe you should use the \"callproc\" method of the cursor like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "DB-API 2.0", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0249/"}]}, {"code": "<pre>\n<code>\n cur.callproc('my_stored_proc', (first_param, second_param, an_out_param))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you'll have the result in the returned value (of the out param) in the \"an_out_param\" variable."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you make your procedure produce a table, you can use that result as a substitute for out params."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So instead of:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n CREATE PROCEDURE Foo (@Bar INT OUT, @Baz INT OUT) AS\nBEGIN\n   /* Stuff happens here */\n   RETURN 0\nEND\n</code>\n</pre>\n", "senID": 2}, {"text": ["do"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n CREATE PROCEDURE Foo (@Bar INT, @Baz INT) AS\nBEGIN\n   /* Stuff happens here */\n   SELECT @Bar Bar, @Baz Baz\n   RETURN 0\nEND\n</code>\n</pre>\n", "senID": 4}], [{"text": ["It looks like every python dbapi library implemented on top of freetds (pymssql, pyodbc, etc) will not be able to access output parameters when connecting to Microsoft SQL Server 7 SP3 and higher."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.freetds.org/faq.html#ms.output.parameters"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.freetds.org/faq.html#ms.output.parameters", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.freetds.org/faq.html#ms.output.parameters"}]}], [{"text": ["If you cannot or don't want to modify the original procedure and have access to the database you can write a simple wrapper procedure that is callable from python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, if you have a stored procedure like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n CREATE PROC GetNextNumber\n   @NextNumber int OUTPUT\nAS\n...\n</code>\n</pre>\n", "senID": 2}, {"text": ["You could write a wrapper like so which is easily callable from python:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n CREATE PROC GetNextNumberWrap\nAS\n    DECLARE @RNextNumber int\n    EXEC GetNextNumber @RNextNumber\n    SELECT @RNextNumber\nGO\n</code>\n</pre>\n", "senID": 4}, {"text": ["Then you could call it from python like so:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n import pymssql\ncon = pymssql.connect(...)\ncur = con.cursor()\ncur.execute(\"EXEC GetNextNumberWrap\")\nnext_num = cur.fetchone()[0]\n</code>\n</pre>\n", "senID": 6}], [{"text": ["I was able to get an output value from a SQL stored procedure using Python.", "I could not find good help getting the output values in Python.", "I figured out the Python syntax myself, so I suspect this is worth posting here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys, string, os, shutil, arcgisscripting\nfrom win32com.client import Dispatch\nfrom adoconstants import *\n\n#skip ahead to the important stuff\n\nconn = Dispatch('ADODB.Connection')\nconn.ConnectionString = \"Provider=sqloledb.1; Data Source=NT38; Integrated Security = SSPI;database=UtilityTicket\"\nconn.Open()\n\n#Target Procedure Example: EXEC TicketNumExists @ticketNum = 8386998, @exists output\n\nCmd = Dispatch('ADODB.Command')\nCmd.ActiveConnection = conn\n\nCmd.CommandType = adCmdStoredProc\nCmd.CommandText = \"TicketNumExists\"\n\nParam1 = Cmd.CreateParameter('@ticketNum', adInteger, adParamInput)\nParam1.Value = str(TicketNumber)\nParam2 = Cmd.CreateParameter('@exists', adInteger, adParamOutput)\n\nCmd.Parameters.Append(Param1)\nCmd.Parameters.Append(Param2)\n\nCmd.Execute()\n\nAnswer = Cmd.Parameters('@exists').Value\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You might also look at using SELECT rather than EXECUTE.", "EXECUTE is (iirc) basically a SELECT that doesn't actually fetch anything (, just makes side-effects happen)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]