[[{"text": ["Python provides an exec() statement which should do what you want.", "You will want to pass in the variables that you want available as the second and/or third arguments to the function (globals and locals respectively) as those control the environment that the exec is run in."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "exec()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "exec", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n env = {'somevar': 'somevalue'}\nexec(code, env)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Alternatively, execfile() can be used in a similar way, if the code that you want executed is stored in its own file."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "execfile()", "tag": "a", "pos": 0, "childList": [{"text": "execfile()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#execfile"}, {"text": "execfile()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you only have a single expression that you want to execute, you can also use eval."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "eval", "tag": "a", "pos": 0, "childList": [{"text": "eval", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#eval"}, {"text": "eval", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["2 choices:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "You take his input and put it in a file, then you execute it.", "tag": "none", "senID": 1}, {"text": "You use exec()", "tag": "none", "senID": 2}]}], [{"text": ["If it doesn't involve time travel, anti-gravity or perpetual motion the answer to this question is always \"YES\".", "You don't need to ask that."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "If it doesn't involve time travel, anti-gravity or perpetual motion the answer to this question is always \"YES\".  You don't need to ask that.", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["The right way to proceed is as follows."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You build a framework with some handy libraries and packages."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You build a few sample applications that implement this requirement: \"The data may need some preprocessing before the system can work with it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You write documentation about how that application imports and uses modules from your framework."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["You turn the framework, the sample applications and the documentation over to users to let them build these applications."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Don't waste time on \"take a string (the user entered), compile it to Python (after adding code to provide the input data) and get the output\"."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["The user should write applications like this."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n from your_framework import the_file_loop\ndef their_function( one_line_as_dict ):\n    one_line_as_dict['field']= some stuff\nthe_file_loop( their_function )\n</code>\n</pre>\n", "senID": 8}, {"text": ["That can actually be the entire program."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["You'll have to write the_file_loop, which will look something like this."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "the_file_loop", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def the_file_loop( some_function ):\n    with open('input') as source:\n        with open('output') as target:\n            for some_line in source:\n                the_data = make_a_dictionary( some_line )\n                some_function( the_data )\n                target.write( make_a_line( the_data ) )\n</code>\n</pre>\n", "senID": 11}, {"text": ["By creating a framework, and allowing users to write their own programs, you'll be a lot happier with the results.", "Less magic."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}], [{"text": ["If you just want to set some local values and then provide a python shell, check out the codemodule. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "codemodule", "tag": "a", "pos": 0, "childList": [{"text": "code", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/code.html"}, {"text": "code", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can start an instance of a shell that is similar to the python shell, as well as initialize it with whatever local variables you want.", "This would assume that whatever functionality you want to use the resulting values is built into the classes you are passing in as locals."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n shell = code.InteractiveConsole({'foo': myVar1, 'bar': myVar2})\n</code>\n</pre>\n", "senID": 3}], [{"text": ["What you actually want is exec, since eval is limited to taking an expression and returning a value.", "With exec, you can have code blocks (statements) and work on arbitrarily complex data, passed in as the globals and locals of the code."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "exec", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The result is then returned by the code via some convention (like binding it to result)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "result", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["well, you're describing compile()"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "compile()", "tag": "a", "pos": 0, "childList": [{"text": "compile()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#compile"}, {"text": "compile()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["But...", "I think I'd still implement this using regular python source files.", "Add a special location to the path, say '~/.myapp/plugins', and just __import__ everything there.", "Probably you'll want to provide some convenient base classes that expose the interface you're trying to offer, so that your users can inherit from them."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "__import__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}]]