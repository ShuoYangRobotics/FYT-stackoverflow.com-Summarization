[[{"text": ["Yes, I think the answers here show your problem.", "Just to try and clarify a little bit."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You're referencing a list, so when the list changes any reference to that list will reflect that change.", "To demonstrate:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x_present = [4,5,6]\n&gt;&gt;&gt;\n&gt;&gt;&gt; x_past = x_present\n&gt;&gt;&gt;\n&gt;&gt;&gt; x_past\n[4, 5, 6]\n&gt;&gt;&gt;\n&gt;&gt;&gt; x_present.append(7)\n&gt;&gt;&gt;\n&gt;&gt;&gt; x_past\n[4, 5, 6, 7]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want a copy of the list you have to do do this, listcopy = mylist[:]."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "listcopy = mylist[:]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x_past = x_present[:]\n&gt;&gt;&gt; x_past\n[4, 5, 6, 7]\n&gt;&gt;&gt;\n&gt;&gt;&gt; x_present.append(8)\n&gt;&gt;&gt;\n&gt;&gt;&gt; x_past\n[4, 5, 6, 7]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["What are x_past and x_present?", "I don't know much Python, but from a .NET/Java perspective, if they're references to some data structure (a map or whatever) then making them references to the same object (as you do at the start) will mean that any changes made through one variable will be visible through the other.", "It sounds like you need to take a copy of the data structure instead of just doing a reference assignment.", "Does the data structure you're working with have any kind of \"clone\" functionality available?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As I say though, I don't know much Python so this could be totally wrong..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["As others pointed out the answer is to replace: x_past = x_present by x_past = x_present[:].", "In general you could use a copy module to copy an object in Python."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "x_past = x_present", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x_past = x_present[:]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "copy", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import copy\n&gt;&gt;&gt; a = range(10)\n&gt;&gt;&gt; a\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; a += 10, 11\n&gt;&gt;&gt; a\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n&gt;&gt;&gt; b\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n&gt;&gt;&gt; c = copy.copy(a) # shallow copy\n&gt;&gt;&gt; c\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n&gt;&gt;&gt; del a[3:]\n&gt;&gt;&gt; a\n[0, 1, 2]\n&gt;&gt;&gt; b\n[0, 1, 2]\n&gt;&gt;&gt; c\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Your code is unpythonic to say the least."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It could be replaced by something like the following code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import copy\n# assert(len(x_present) &gt;= len(eqn))\n\nfirst = True\nwhile True:\n    x_past = copy.copy(x_present) # copy\n\n    for j, eqj in enumerate(eqn):\n        x_present[j] = sum(x_present[k] * eqj[k] \n                           for k in range(j if first else len(eqj)) \n                           if k != j)\n        x_present[j] += eqj[j] \n\n    print \"X_PAST\\n%s\\nX_PRESENT\\n%s\" % (x_past, x_present)\n    if allequal(x_past, x_present, tolerance=10**-2):\n        break\n    first = False\n</code>\n</pre>\n", "senID": 4}, {"text": ["Here's a definition of allequal() (using an absolute error.", "It might or might not be a good idea in your case (you could use a relative error instead)):"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "allequal()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def allequal(x, y, tolerance):\n    return (len(x) == len(y) and \n            all(-tolerance &lt; (xx - yy) &lt; tolerance\n                for xx, yy in zip(x, y)))\n</code>\n</pre>\n", "senID": 6}], [{"text": ["It looks as if x_present is a list.", "I suspect that this means that the assignment x_last = x_present makes x_last into an alias, i.e.", "they reference the same variable.", "Might this be the case?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["try changing the x_past = x_present line to x_past = [x for x in x_present] and see if it helps."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "x_past = x_present", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x_past = [x for x in x_present]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["the list copy shorthand is my favorite python feature since i can do one-liners that are not possible in other languages:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["greaterthan100 = [x for x in number if x &gt; 100]"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "greaterthan100 = [x for x in number if x &gt; 100]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["notinblacklist = [x for x in mylist if x not in blacklist]"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "notinblacklist = [x for x in mylist if x not in blacklist]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["firstchildofbigfamily = [x.child[0] for x in familylist if len(x.child) &gt; 10]"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "firstchildofbigfamily = [x.child[0] for x in familylist if len(x.child) &gt; 10]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I would go with monkut and Jon Skeet answer."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["And I have a question and advice :)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I tried pydev for Eclipse and it's doing a nice job."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "pydev", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pydev.sourceforge.net/"}, {"href": "http://www.eclipse.org/", "text": "Eclipse", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["hf"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["In Python, everything is an object.", "So the statement x_past = x_present point to the same reference."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]