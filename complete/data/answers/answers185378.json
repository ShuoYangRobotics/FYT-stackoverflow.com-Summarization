[[{"text": ["For a regular expression, you would use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.match(r'Run.*\\.py$')\n</code>\n</pre>\n", "senID": 1}, {"text": ["A quick explanation:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ". means match any character.", "tag": "none", "senID": 3}, {"text": "* means match any repetition of the previous character (hence .* means any sequence of chars)", "tag": "none", "senID": 4}, {"text": "\\ is an escape to escape the explicit dot", "tag": "none", "senID": 5}, {"text": "$ indicates \"end of the string\", so we don't match \"Run_foo.py.txt\"", "tag": "none", "senID": 6}]}, {"text": ["However, for this task, you're probably better off using simple string methods.", "ie."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n filename.startswith(\"Run\") and filename.endswith(\".py\")\n</code>\n</pre>\n", "senID": 8}, {"text": ["Note: if you want case insensitivity (ie.", "matching \"run.PY\" as well as \"Run.py\", use the re.I option to the regular expression, or convert to a specific case (eg filename.lower()) before using string methods."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["I don't really understand why you're after a regular expression to solve this 'problem'.", "You're just after a way to find all .py files that start with 'Run'.", "So this is a simple solution that will work, without resorting to compiling an running a regular expression:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nfor filename in os.listdir(dirname):\n    root, ext = os.path.splitext(filename)\n    if root.startswith('Run') and ext == '.py':\n        print filename\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n /^Run.*\\.py$/\n</code>\n</pre>\n", "senID": 0}, {"text": ["Or, in python specifically:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import re\nre.match(r\"^Run.*\\.py$\", stringtocheck)\n</code>\n</pre>\n", "senID": 2}, {"text": ["This will match \"Runfoobar.py\", but not \"runfoobar.PY\".", "To make it case insensitive, instead use:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n re.match(r\"^Run.*\\.py$\", stringtocheck, re.I)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Warning:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "jobscry's answer (\"^Run.?.py$\") is incorrect (will not match \"Run123.py\", for example).", "tag": "none", "senID": 1}, {"text": "orlandu63's answer (\"/^Run[\\w]*?.py$/\") will not match \"RunFoo.Bar.py\".", "tag": "none", "senID": 2}]}, {"text": ["(I don't have enough reputation to comment, sorry."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You don't need a regular expression, you can use glob, which takes wildcards e.g.", "Run*.py"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, to get those files in your current directory..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import os, glob\nfiles = glob.glob( \"\".join([ os.getcwd(), \"\\\\Run*.py\"]) )\n</code>\n</pre>\n", "senID": 2}], [{"text": ["If you write a slightly more complex regular expression, you can get an extra feature: extract the bit between \"Run\" and \".py\":"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; regex = '^Run(?P&lt;name&gt;.*)\\.py$'\n&gt;&gt;&gt; m = re.match(regex, 'RunFoo.py')\n&gt;&gt;&gt; m.group('name')\n'Foo'\n</code>\n</pre>\n", "senID": 1}, {"text": ["(the extra bit is the parentheses and everything between them, except for '.", "*' which is as in Rob Howard's answer)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This probably doesn't fully comply with file-naming standards, but here it goes:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n /^Run[\\w]*?\\.py$/\n</code>\n</pre>\n", "senID": 1}], [{"text": ["mabye:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ^Run.*\\.py$\n</code>\n</pre>\n", "senID": 1}, {"text": ["just a quick try"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]