[[{"text": ["If I understand your question correctly, you want something like this ?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Vector(object):\n\n    def __init__(self, x=0, y=0, z=0):\n        self._x, self._y, self._z = x, y, z\n\n    def setx(self, x): self._x = float(x)\n    def sety(self, y): self._y = float(y)        \n    def setz(self, z): self._z = float(z)     \n\n    x = property(lambda self: float(self._x), setx)\n    y = property(lambda self: float(self._y), sety)\n    z = property(lambda self: float(self._z), setz)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This uses _x, _y and _z to (internally) store the incoming values and exposes them via the use of property (with getters, setters); I abbreviated the 'getters' using a lambda statement."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "property", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#property"}]}, {"text": ["Note that in Python it would be very common to manipulate these values (say: x, y, z) on the object itself directly (I guess you want ensure the explicit float casts?"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "very common", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["I may be misreading your question, but I think what you want is already made for you incollections.namedtuple:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "I may be misreading your question, but I think what you want is already made for you incollections.namedtuple:", "childNum": 2, "tag": "s", "pos": 0, "childList": [{"text": "collections.namedtuple", "tag": "a"}, {"text": "collections.namedtuple", "tag": "code"}]}, {"href": "http://docs.python.org/library/collections.html#collections.namedtuple", "text": "collections.namedtuple", "childNum": 1, "tag": "a", "childList": [{"text": "collections.namedtuple", "tag": "code"}]}, {"text": "collections.namedtuple", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Vector = namedtuple('Vector', 'x y z')\n&gt;&gt;&gt; v = Vector(0, 0, 0)\n&gt;&gt;&gt; v\nVector(x=0, y=0, z=0)\n&gt;&gt;&gt; v.x = 10\n&gt;&gt;&gt; v\nVector(x=10, y=0, z=0)\n&gt;&gt;&gt; tuple(v)\n(10, 0, 0)\n&gt;&gt;&gt; v._asdict()\n{'x': 10, 'y': 0, 'z': 0}\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Does that look about right?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For shame, I forgot that tuples are immutable.", "Curse me for not upgrading from Python 2.5 so I could have actually tested the code I wrote.", "Anyway, you may want something quite similar to collections.namedtuple, except more like a hypothetical namedlist.", "Or you may want to discard that idea entirely and use something different.", "The point is that this answer was wrong, and I would delete it, except I feel obligated to the people who upvoted me to correct my mistake."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "collections.namedtuple", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "namedlist", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Edit: I've modified the code with my answer a bit more from @unutbu's original to simplify it and make what is being done clearer.", "In the latest version, the @staticmethod's have been eliminated altogether and replaced with nested one-liners.", "The outer function and nested class have been renamed AutoFloatProperties and _AutoFloatProperties to reflect their specialized behavior of converting and storing the values assigned as floats.", "Despite all this, @unutbu's own revised answer using a class decorator instead of a metaclass is a slightly simpler solution, although the internals and usage are very similar."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "@staticmethod", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "AutoFloatProperties", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "_AutoFloatProperties", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def AutoFloatProperties(*props):\n    '''metaclass'''\n    class _AutoFloatProperties(type):\n        # Inspired by autoprop (http://www.python.org/download/releases/2.2.3/descrintro)\n        def __init__(cls, name, bases, cdict):\n            super(_AutoFloatProperties, cls).__init__(name, bases, cdict)\n            for attr in props:\n                def fget(self, _attr='_'+attr): return getattr(self, _attr)\n                def fset(self, value, _attr='_'+attr): setattr(self, _attr, float(value))\n                setattr(cls, attr, property(fget, fset))\n    return _AutoFloatProperties\n\nclass Vector(object):\n    '''Creates a Maya vector/triple, having x, y and z coordinates as float values'''\n    __metaclass__ = AutoFloatProperties('x','y','z')\n    def __init__(self, x=0, y=0, z=0):\n        self.x, self.y, self.z = x, y, z # values converted to float via properties\n\nif __name__=='__main__':\n    v=Vector(1,2,3)\n    print(v.x)\n    # 1.0\n    v.x=4\n    print(v.x)\n    # 4.0\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Edit: My previous answer tried to make a generalized AutoProperties metaclass which I hoped could be of general use.", "As @martineau's answer shows a solution specialized to the Vector class can make things simpler. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Vector", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Here's another idea along those lines (specialized simplicity over generalized complexity).", "It uses a class decorator (which I think is slightly simpler to understand than a metaclass) and @martineau's idea of simplifying the getters and setters with default values: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def AutoProperties(*props):\n    def _AutoProperties(cls):\n        for attr in props:\n            def getter(self,_attr='_'+attr):\n                return getattr(self, _attr)\n            def setter(self, value, _attr='_'+attr):\n                setattr(self, _attr, float(value))\n            setattr(cls,attr,property(getter,setter))\n        return cls\n    return _AutoProperties\n\n@AutoProperties('x','y','z')\nclass Vector(object):\n    '''Creates a Maya vector/triple, having x, y and z coordinates as float values'''\n    def __init__(self, x=0, y=0, z=0):\n        self._x, self._y, self._z = map(float,(x, y, z))\n</code>\n</pre>\n", "senID": 2}, {"text": ["Original answer:\nHere is a way to avoid repeating boiler-plate code when defining many similar properties. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Original answer:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I've tried to make the solution reasonably general, so it might be of use to people in other situations beside this particular one."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["To use it you need to do 2 things:\nPut"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Put", "childNum": 1, "tag": "ol", "pos": 0, "childList": [{"text": "Put", "tag": "li"}]}, {"text": "Put", "childNum": 0, "tag": "li", "childList": []}]}, {"code": "<pre>\n<code>\n __metaclass__=AutoProperties(('x','y','z'))\n</code>\n</pre>\n", "senID": 6}, {"text": ["at the beginning of the definition of your class.", "You can list (as strings) as many attributes (e.g.", "x,y,z) as you wish.", "AutoProperties will turn them into properties."], "childNum": 4, "tag": "p", "senID": 7, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "z", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "AutoProperties", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["Your class, e.g.Vector, needs to define staticmethods_auto_setterand_auto_getter.", "They take one argument, the attribute name as a string, and return the setter or getter function, respectively, for that attribute."], "childNum": 4, "tag": "p", "senID": 8, "childList": [{"text": "Your class, e.g.Vector, needs to define staticmethods_auto_setterand_auto_getter. They take one argument, the attribute name as a string, and return the setter or getter function, respectively, for that attribute.", "childNum": 3, "tag": "li", "pos": -1, "childList": [{"text": "Vector", "tag": "code"}, {"text": "_auto_setter", "tag": "code"}, {"text": "_auto_getter", "tag": "code"}]}, {"text": "Vector", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "_auto_setter", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "_auto_getter", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["The idea of using metaclasses to automatically set up properties comes from Guido Rossum's essay on properties and metaclasses.", "There he defines an autoprop metaclass similar to what I use below.", "The main difference is that AutoProperties expects the user to define getter and setter factories instead of manually defined getters and setters."], "childNum": 4, "tag": "p", "senID": 9, "childList": [{"text": "properties and metaclasses", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/download/releases/2.2.3/descrintro/#metaclasses"}, {"text": "autoprop", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "AutoProperties", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "factories", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n def AutoProperties(props):\n    class _AutoProperties(type):\n        # Inspired by autoprop (http://www.python.org/download/releases/2.2.3/descrintro/)\n        def __init__(cls, name, bases, cdict):\n            super(_AutoProperties, cls).__init__(name, bases, cdict)\n            for attr in props:\n                fget=cls._auto_getter(attr)\n                fset=cls._auto_setter(attr)\n                setattr(cls,attr,property(fget,fset))\n    return _AutoProperties\n\nclass Vector(object):\n    '''Creates a Maya vector/triple, having x, y and z coordinates as float values'''\n    __metaclass__=AutoProperties(('x','y','z'))\n    def __init__(self, x=0, y=0, z=0):\n        # I assume you want the initial values to be converted to floats too.\n        self._x, self._y, self._z = map(float,(x, y, z))\n    @staticmethod\n    def _auto_setter(attr):\n        def set_float(self, value):\n            setattr(self, '_'+attr, float(value))\n        return set_float\n    @staticmethod   \n    def _auto_getter(attr):\n        def get_float(self):\n            return getattr(self, '_'+attr)\n        return get_float\n\nif __name__=='__main__':\n    v=Vector(1,2,3)\n    print(v.x)\n    # 1.0\n    v.x=4\n    print(v.x)\n    # 4.0\n</code>\n</pre>\n", "senID": 10}], [{"text": ["I don't really understand the question.", "You have a Vector which describes a point in space with 3 coordinates.", "Your implementation already allows you to change the values:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n v = Vector()\nv.x = 10 # now x is 10\n</code>\n</pre>\n", "senID": 1}, {"text": ["why should it return a tuple?", "What would you use it for?", "That said, a tuple is immutable so can't be modified, but you could use a list.", "Changing the numbers in that list will not reflect in Vector though."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you do need to ensure the type is a float, consider property setters:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "property setters", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#property"}]}, {"code": "<pre>\n<code>\n class C(object):\n    def __init__(self):\n        self._x = None\n\n    @property\n    def x(self):\n        \"\"\"I'm the 'x' property.\"\"\"\n        return self._x\n\n    @x.setter\n    def x(self, value):\n        print \"x set to \", value\n        self._x = value\n\nc = C()\nc.x = 10\n\nprint c.x, c._x\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Is this what you're looking for?   "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class vector(object):\n    def __init__(self, x,y,z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    # overload []\n    def __getitem__(self, index):\n        data = [self.x,self.y,self.z]\n        return data[index]\n\n    # overload set []\n    def __setitem__(self, key, item):\n        if (key == 0):\n            self.x = item\n        elif (key == 1):\n            self.y = item\n        elif (key == 2):\n            self.z = item\n        #TODO: Default should throw excetion\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is the most naive way of doing it.", "I'm sure some Python guru will come along sneer at my code and replace it with a one-liner."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Examples of this code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n v = vector(1,2,3)\nv[1] = 4\nv[2] = 5\n\nv.x = 1\nv.z= 66\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I understand that"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You could use the following code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Vector(object):\n    def __init__(self, x,y,z):\n         self._x = x\n\ndef mangle(name):\nreturn '_'+name\n\nfor name in ['x','y','z']:\n    def set_xyz(self, value):\n        self.__setattr__(mangle(name), float(value))\n    def get_xyz(self):\n        return self.__getattribute__(mangle(name))\n    prop = property(get_xyz, set_xyz)\n    setattr(Vector,name, prop)\n</code>\n</pre>\n", "senID": 2}]]