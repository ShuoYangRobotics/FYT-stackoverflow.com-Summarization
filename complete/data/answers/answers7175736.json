[[{"text": ["Why don't you use the built-in filter:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "filter", "tag": "a", "pos": 0, "childList": [{"text": "filter", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#filter"}, {"text": "filter", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; filter(lambda x: x[2] == '1.3', repo)\n&lt;&lt;&lt; (('framework', 'django', '1.3'), ('cms', 'fein', '1.3'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["...or a list comprehension:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "list comprehension", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [x for x in repo if x[2] == '1.3']\n&lt;&lt;&lt; [('framework', 'django', '1.3'), ('cms', 'fein', '1.3')]\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you wanted to wrap it up into a function:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n types = {'desc': 0, 'name': 1, 'version': 2}\ndef repo_filter(type, critera, repo=repo, types=types):\n    return [x for x in repo if x[types[type]] == critera]\n\n&gt;&gt;&gt; repo_filter('version', '1.3')\n&lt;&lt;&lt; [('framework', 'django', '1.3'), ('cms', 'fein', '1.3')]\n</code>\n</pre>\n", "senID": 5}], [{"text": ["You can use a closure to bind the pattern into the function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def matcher(pattern):\n    def f(repo):\n        return all(p is None or r == p for r, p in zip(repo, pattern))\n    return f\n\n&gt;&gt;&gt; repo = (('framework', 'django', '1.3'), ('cms', 'fein', '1.3'), ('cms', 'django-cms', '2.2'))\n&gt;&gt;&gt; pattern = (None, None, '1.3')\n&gt;&gt;&gt; filter(matcher(pattern), repo)\n(('framework', 'django', '1.3'), ('cms', 'fein', '1.3'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["I've also provided a different expression for comparing the tuples."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n In [43]: [r for r in repo if all((p is None or q==p) for q,p in zip(r,pattern))]\nOut[43]: [('framework', 'django', '1.3'), ('cms', 'fein', '1.3')]\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n def my_filter(pattern, repo):\n    def f\n        pattern = (None, None, '1.3')\n        for idx, item in enumerate(pattern):\n            if item != None and item != repo[idx]:\n                return False\n        return True\n    return filter(f, repo)\n\n\n my_filter((None, None, '1.3'), repo)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["What about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def f(repo, pattern=None):\n    if not pattern:\n        pattern = (None, None, '1.3')\n    for idx, item in enumerate(pattern):\n        if item and item != repo[idx]:\n            return False\n    return True\n\nrepo = (('framework', 'django', '1.3'), ('cms', 'fein', '1.3'), ('cms', 'django-cms', '2.2'))\n\n[x for x in repo if f(x)]\n&gt;&gt;&gt;[('framework', 'django', '1.3'), ('cms', 'fein', '1.3')]    \n\n[x for x in repo if f(x, ('cms',None, None))]\n&gt;&gt;&gt; [('cms', 'fein', '1.3'), ('cms', 'django-cms', '2.2')]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use the following expression:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n repo = (('framework', 'django', '1.3'), ('cms', 'fein', '1.3'), ('cms', 'django-cms', '2.2'))\np = (None, None, '1.3')\nmatches = [i for i in repo if i[0]==p[0] or i[1]==p[1] or i[2]==p[2]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["or use closure, such as this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def matcher(pattern):\n    def pattern_matcher(repo):\n        for idx, item in enumerate(pattern):\n            if item != None and item != repo[idx]:\n                return False\n            else:\n                return True\n    return pattern_matcher\n</code>\n</pre>\n", "senID": 3}, {"text": ["and then can be invoked like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n filter(matcher(pattern), repo)\n</code>\n</pre>\n", "senID": 5}]]