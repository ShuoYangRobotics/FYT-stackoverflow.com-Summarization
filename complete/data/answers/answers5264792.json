[[{"text": ["Your while statement is evaluating on the conditionals or, which is always true for the strings you provided."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n while AB != \"A\" or \"a\" or \"B\" or \"b\":\n</code>\n</pre>\n", "senID": 1}, {"text": ["means:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n while (AB != \"A\") or \"a\" or \"B\" or \"b\":\n</code>\n</pre>\n", "senID": 3}, {"text": ["Non-empty strings are always True, so writing or \"B\" will always be true, and will always ask for input.", "Better to write:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "or \"B\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n while AB.lower() not in ('a','b'):\n</code>\n</pre>\n", "senID": 5}], [{"text": ["AB != \"A\" or \"a\" or \"B\" or \"b\"\nshould be\nAB.upper() not in ('A','B')"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "AB != \"A\" or \"a\" or \"B\" or \"b\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "AB.upper() not in ('A','B')", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n AB != \"A\" or \"a\" or \"B\" or \"b\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["is interpreted as "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n (AB != \"A\") or (\"a\") or (\"B\") or (\"b\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["and since \"a\" is always true, the result of this check will always be true."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "\"a\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "true", "childNum": 0, "tag": "code", "childList": []}, {"text": "true", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["It would be better to use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n AB = raw_input(\"A or B?\").upper()\n</code>\n</pre>\n", "senID": 1}, {"text": ["and then the not in construct as others have suggested."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "not in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Use the raw_input() function, instead, like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "raw_input()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ab = raw_input('Choose either A or B &gt; ')\nwhile ab.lower() not in ('a', 'b'):\n    ab = raw_input('Choose either A or B &gt; ')\n</code>\n</pre>\n", "senID": 1}, {"text": ["input() expects a Python expression as input; according to the Python documentation, it is equivalent to eval(raw_input(prompt)).", "Just use raw_input(), along with the other suggestions posted here."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "input()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "eval(raw_input(prompt))", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "raw_input()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n try:\n    inp = raw_input    # Python 2.x\nexcept NameError:\n    inp = input        # Python 3.x\n\ndef chooseOneOf(msg, options, prompt=': '):\n    if prompt:\n        msg += prompt\n    options = set([str(opt).lower() for opt in options])\n    while True:\n        i = inp(msg).strip().lower()\n        if i in options:\n            return i\n\nab = chooseOneOf('Choose either A or B', \"ab\")\n\nlr = chooseOneOf('Left or right', ('left','right'))\n</code>\n</pre>\n", "senID": 0}]]