[[{"text": ["I think efficient way if dict is too large would be"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n countMap = {}\nfor v in a.itervalues():\n    countMap[v] = countMap.get(v,0) + 1\nuni = [ k for k, v in a.iteritems() if countMap[v] == 1]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Note that this actually is a bruteforce:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = a.values()\nb = [x for x in a if l.count(a[x]) == 1]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; b = []\n&gt;&gt;&gt; import collections\n&gt;&gt;&gt; bag = collections.defaultdict(lambda: 0)\n&gt;&gt;&gt; for v in a.itervalues():\n...     bag[v] += 1\n...\n&gt;&gt;&gt; b = [k for (k, v) in a.iteritems() if bag[v] == 1]\n&gt;&gt;&gt; b.sort() # optional\n&gt;&gt;&gt; print b\n['dog', 'snake']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here is a solution that only requires traversing the dict once:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def unique_values(d):\n    seen = {} # dict (value, key)\n    result = set() # keys with unique values\n    for k,v in d.iteritems():\n        if v in seen:\n            result.discard(seen[v])\n        else:\n            seen[v] = k\n            result.add(k)\n    return list(result)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A little more verbose, but does need only one pass over a:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n revDict = {}\nfor k, v in a.iteritems():\n  if v in revDict:\n     revDict[v] = None\n  else:\n     revDict[v] = k\n\n[ x for x in revDict.itervalues() if x != None ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["( I hope it works, since I can't test it here )"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["What about subclassing? "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class UniqueValuesDict(dict):\n\n    def __init__(self, *args):\n        dict.__init__(self, *args)\n        self._inverse = {}\n\n    def __setitem__(self, key, value):\n        if value in self.values():\n            if value in self._inverse:\n                del self._inverse[value]\n        else:\n            self._inverse[value] = key\n        dict.__setitem__(self, key, value)\n\n    def unique_values(self):\n        return self._inverse.values()\n\na = UniqueValuesDict()\n\na['cat'] =      1\na['fish'] =     1\na[None] =       1\na['duck'] =     1\na['dog'] =      2  # &lt;-- unique\na['bat'] =      3\na['aardvark'] = 3\na['snake'] =    4  # &lt;-- unique\na['wallaby'] =  5\na['badger'] =   5\n\nassert a.unique_values() == ['dog', 'snake']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's another variation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import collections\n&gt;&gt;&gt; inverse= collections.defaultdict(list)\n&gt;&gt;&gt; for k,v in a.items():\n...     inverse[v].append(k)\n... \n&gt;&gt;&gt; [ v[0] for v in inverse.values() if len(v) == 1 ]\n['dog', 'snake']\n</code>\n</pre>\n", "senID": 1}, {"text": ["I'm partial to this because the inverted dictionary is such a common design pattern."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You could do something like this (just count the number of occurrences for each value):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def unique(a):\n    from collections import defaultdict\n    count = defaultdict(lambda: 0)\n    for k, v in a.iteritems():\n        count[v] += 1\n    for v, c in count.iteritems():\n        if c &lt;= 1:\n            yield v\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use nested list comprehensions!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print [v[0] for v in \n           dict([(v, [k for k in a.keys() if a[k] == v])\n                     for v in set(a.values())]).values()\n       if len(v) == 1]\n</code>\n</pre>\n", "senID": 1}]]