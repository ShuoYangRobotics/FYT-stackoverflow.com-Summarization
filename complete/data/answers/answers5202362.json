[[{"text": ["A pseudocode.", "Works for cases like abac too."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "abac", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n max = 'a' - 1  // character immediately before 'a'\n\nfor char in string\n  if char &gt; max + 1\n    // bad string, stop algorithm\n  end\n\n  if char &gt; max\n    max = char\n  end\nend\n</code>\n</pre>\n", "senID": 1}, {"text": ["The idea is that we need to check only that the character preceding the current one alphabetically has occurred before.", "If we have character e now and d has occurred before, then c, b and a did too."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "e", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "d", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Consider this as a bad answer"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n\nfoo = string.printable[10:36]\na = 'aac'\n\n\nfor i in a:\n    if i =='a':continue\n    if a.rfind(foo[foo.rfind(i)-1])!=-1:continue\n    else:print 'check_not cleared';break\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n ALPHA = 'abcdefghijklmnopqrstuvwxyz'\n\ntests = [\n         'aab','abac','aabaacaabade', # First 3 tests should eval True\n         'ba','aac','aabbccddf'       # Last 3 test should eval False\n         ]\n\ndef CheckString(test):\n    alpha_counter = 0\n    while test:\n        if test[0] == ALPHA[alpha_counter]:\n            test = test.replace(ALPHA[alpha_counter],'')\n            alpha_counter+=1\n        else:\n            return False\n    return True\n\nfor test in tests:\n    print CheckString(test)\n\n\nTrue\nTrue\nTrue\nFalse\nFalse\nFalse\n</code>\n</pre>\n", "senID": 0}, {"text": ["Given your criteria... "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["All you need to do is check the first letter to see if it passes your criteria... if it does, remove all occurrences of that letter from the string.", "And move onto the next letter.", "Your given criteria makes it easy because you just need to check alphabetically."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["aabaacaabade"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["take the string above for example. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n first letter 'a' passes criteria    [there are no letters before 'a']\nremove all 'a's from string         remaining string: bcbde\n\nfirst letter 'b' passes criteria    [there was an 'a' before the 'b']\nremove all 'b's from string         remaining string: cde\n\nfirst letter 'c' passes criteria    [there was an 'a' and a 'b' before the 'c']\nremove all 'c's from string         remaining string: de\n\n...\n</code>\n</pre>\n", "senID": 5}, {"text": ["That should work if I understood your criteria correctly."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["You might want to use the ascii encoding of the character."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mystr = \"aab\"\ncurr = ord(mystr[0])\nfor char in mystr[1:]:\n    if ord(char) &lt; curr:\n        print \"This character should not be here\"\n    if ord(char) &gt; curr:\n        curr = ord(char)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Changes made to reflect user470379's suggestion:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Changes made to reflect user470379's suggestion:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n mystr = \"aab\"\ncurr = mystr[0]\nfor char in mystr[1:]:\n    if char &lt; curr:\n        print \"This character should not be here\"\n    if char &gt; curr:\n        curr = char\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I believe to understand your question correctly, and here is my attempt at answering it, if I have mis-understood please correct me."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The standard comparisons (&lt;, &lt;=, >, >=, ==, !=) apply to strings.", "These comparisons use the standard character-by-character comparison rules for ASCII or Unicode.", "That being said, the greater and less than operators will compare strings using alphabetical order."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The idea is very simple, for each char in the string, it should not less than its preceding, and it shouldn't larger than its preceding + 1."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["How about this?", "It simplifies the problem by first removing duplicate characters, then you only need to check the string is a prefix of the string containing all lowercase (ascii) letters."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n\ndef uniq(s):\n    last = None\n    for c in s:\n        if c != last: yield c\n        last = c\n\ndef is_gapless_ascending(s):\n    s = ''.join(uniq(s))\n    return string.ascii_lowercase.startswith(s)\n</code>\n</pre>\n", "senID": 1}]]