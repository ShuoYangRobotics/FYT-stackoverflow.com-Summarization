[[{"text": ["I am having trouble following your pseudo-code, but you might be able to accomplish what you're looking for via:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["Inheritance"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Friend functions"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["Dependency Injection"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}, {"text": ["Edit:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["After your edits, it is pretty clear that you want the Observer Design Pattern.", "This allows you to decouple the code that responds to a state change from the code that signals the state change."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "the Observer Design Pattern", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Observer_pattern"}]}, {"text": ["That pattern is less about access to variables (as my first links were about), than it is about responding to events (or \"state transitions\", if you think about your class as a Finite State Machine)."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Finite State Machine", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Finite-state_machine"}]}], [{"text": ["Given the edit you made; It may be practical to implement a sig/slot mechanism using boost::signals, or the threadsafe signals2 (also in boost).", "This is implying that you are looking for a behaviour similar to Qt's sigslot mechanism.", "There are also many alternatives, look at the SO question here."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "boost::signals", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1_47_0/doc/html/signals.html"}, {"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/359928/which-c-signals-slots-library-should-i-choose"}]}], [{"text": ["In C++, there is a concept of friend classes: a class A can declare another class B to be its friend, something which gives B access to the private variables of A.", "Simply write friend class B; inside of A.", "(As @delnan reminds us, you still need to manually give B a reference to A."], "childNum": 9, "tag": "p", "senID": 0, "childList": [{"text": "friend classes", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "B", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "B", "childNum": 0, "tag": "code", "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "childList": []}, {"text": "friend class B;", "childNum": 0, "tag": "code", "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "childList": []}, {"text": "B", "childNum": 0, "tag": "code", "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In Java, if you declare B inside of A, B will become an inner class.", "Inner classes can only be instantiated from an instance of the outer class, and the instance of the inner class will be tied to the corresponding instance of the outer class, and may access its private variables."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "B", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "B", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "inner class", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["(I agree with @mellamokb, though: This is probably a bad idea, as it creates very tight coupling between the two classes.", "You might want to rethink your class structure.", "What exactly are you trying to use this for?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Explicitly passing this (or perhaps a proxy around this) is pretty much the only (sane, anyway) way to do it, assuming they need to be seperate objects.", "An object can't and shouldn't need to know number and location of its references.", "And even if you could get a list of all references to itself, that list could easily contain local variables, items in collections, potentially several instances of A, etc.", "- how is it supposed to know which one to chose as its parent?"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "this", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "this", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["If a B actually \"is an\" A, you should just make it a subclass."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "B", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://en.wikipedia.org/wiki/Is-a", "text": "\"is an\"", "childNum": 0, "tag": "a", "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Since your variables are not static, they are instance variables, so variable1 and variable2 are only meaningful in the context of a specific instance of A - so there needs to be a reference to that instance, not matter how you shape it."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "static", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "instance", "childNum": 0, "tag": "em", "childList": []}, {"text": "variable1", "childNum": 0, "tag": "code", "childList": []}, {"text": "variable2", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For example, inner classes in Java can use variables of the enclosing outer class directly, but in reality this is just an illusion maintained by the compiler, and in the bytecode, the inner class actually keeps a reference to the outer class instance."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["To reduce coupling between the objects, you shouldn't let B have a reference to A - you should give it a reference to an interface implemented by A.", "The difference is subtle, but it really makes you think about what actions or data really need to be shared across the interface boundary."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]