[[{"text": ["You can load the CSV files using the csv module in Python.", "Please refer to the documentation of this module for the loading code, I cannot remember it but it is really easy.", "Something like:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "csv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "documentation", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}, {"code": "<pre>\n<code>\n import csv\nreader = csv.reader(open(\"some.csv\", \"rb\"))\ncsvContent = list(reader)\n</code>\n</pre>\n", "senID": 1}, {"text": ["After that, when you have the CSV files loaded in such form (a list of tuples):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [ (\"header1\", \"header2\", \"header3\", \"header4\"),\n  (\"value01\", \"value12\", \"value13\", \"value14\"),\n  (\"value11\", \"value12\", \"value13\", \"value14\"),\n  ... \n]\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can merge two such lists line-by-line:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n result = [a+b for (a,b) in zip(csvList1, csvList2)]\n</code>\n</pre>\n", "senID": 5}, {"text": ["To save such a result, you can use:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n writer = csv.writer(open(\"some.csv\", \"wb\"))\nwriter.writerows(result)\n</code>\n</pre>\n", "senID": 7}], [{"text": ["The csv module is you friend."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}], [{"text": ["You dont need to use csv module for this.", "You can just use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n file1 = open(file1)\n</code>\n</pre>\n", "senID": 1}, {"text": ["After opening all your files you can do this"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from itertools import izip_longest\n\nfoo=[]\nfor new_line in izip_longest(file1,fil2,file3....,fillvalue=''):\n    foo.append(new_line)\n</code>\n</pre>\n", "senID": 3}, {"text": ["This will give you this structure (which kon has already told you)..It will also work if you have different number of lines in each file"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n [ (\"line10\", \"line20\", \"line30\", \"line40\"),\n  (\"line11\", \"line21\", \"line31\", \"line41\"),\n  ... \n]\n</code>\n</pre>\n", "senID": 5}, {"text": ["After this you can just write it to a new file taking 1 list at a time"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n for listx in foo:\n    new_file.write(','.join(j for j in listx))\n</code>\n</pre>\n", "senID": 7}, {"text": ["PS: more about izip_longest here"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#itertools.izip_longest"}]}], [{"text": ["You learn by doing (and trying, even).", "So, I'll just give you a few hints.", "Use the following functions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "To open a file: ", "tag": "none", "senID": 1}, {"text": "To read all the lines in a file: ", "tag": "none", "senID": 2}, {"text": "To split a string according to a series of splitting tokents: ", "tag": "none", "senID": 3}]}, {"text": ["If you really don't know what to do, I recommend you read the tutorial and Dive Into Python 3.", "(Depending on how much Python you know, you'll either have to read through the first few chapters or cut straight to the file IO chapters."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "the tutorial", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/py3k/tutorial/"}, {"text": "Dive Into Python 3", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://diveintopython3.org/"}]}], [{"text": ["If you don't necessarily have to use Python, you can use shell tools like paste/gawk etc"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "paste/gawk", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ paste file1 file2 file3 file4 .. | awk 'NR&gt;4'\n</code>\n</pre>\n", "senID": 1}, {"text": ["The above will put them horizontally without the headers.", "If you want the headers, just get them from file1"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "file1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n $  ( head -4 file ; paste file[1-4] | awk 'NR&gt;4' ) &gt; output\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Purely for learning purposes"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Purely for learning purposes", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["A simple approach that does not take advantage of csv module:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # open file to write\nfile_to_write = open(filename, 'w')\n# your list of csv files\ncsv_files = [file1, file2, ...] \n\nheaders = True\n# iterate through your list\nfor filex in csv_files:\n    # mark the lines that are header lines\n    header_count = 0\n    # open the csv file and read line by line\n    filex_f = open(filex, 'r')\n    for line in filex_f:\n        # write header only once\n        if headers:\n            file_to_write.write(line+\"\\n\")\n            if header_count &gt; 3: headers = False\n        # Write all other lines to the file\n        if header_count &gt; 3:\n            file_to_write.write(line+\"\\n\")\n        # count lines\n        header_count = header_count + 1\n    # close file\n    filex_f.close()\nfile_to_write.close()\n</code>\n</pre>\n", "senID": 2}]]