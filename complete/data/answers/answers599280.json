[[{"text": ["This is a built-in feature of Django, called \"messages\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See http://docs.djangoproject.com/en/dev/topics/auth/#messages"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.djangoproject.com/en/dev/topics/auth/#messages", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/auth/#messages"}]}, {"text": ["From the documentation:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can use django-flashcookie app \nhttp://bitbucket.org/offline/django-flashcookie/wiki/Home"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://bitbucket.org/offline/django-flashcookie/wiki/Home", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bitbucket.org/offline/django-flashcookie/wiki/Home"}]}, {"text": ["it can send multiple messages and have unlimited types of messages.", "Lets say you want one message type for warning and one for error messages, you can write"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def simple_action(request):\n    ...\n    request.flash['notice'] = 'Hello World'\n    return HttpResponseRedirect(\"/\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def simple_action(request):\n    ...\n    request.flash['error'] = 'something wrong'\n    return HttpResponseRedirect(\"/\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def simple_action(request):\n    ...\n    request.flash['notice'] = 'Hello World'\n    request.flash['error'] = 'something wrong'\n    return HttpResponseRedirect(\"/\")\n</code>\n</pre>\n", "senID": 6}, {"text": ["or even"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def simple_action(request):\n    ...\n    request.flash['notice'] = 'Hello World'\n    request.flash['notice'] = 'Hello World 2'\n    request.flash['error'] = 'something wrong'\n    request.flash['error'] = 'something wrong 2'\n    return HttpResponseRedirect(\"/\")\n</code>\n</pre>\n", "senID": 8}, {"text": ["and then in you template show it with"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n {% for message in flash.notice %}\n    {{ message }}\n{% endfor }}\n</code>\n</pre>\n", "senID": 10}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n {% for message in flash.notice %}\n    {{ message }}\n{% endfor }}\n{% for message in flash.error %}\n    {{ message }}\n{% endfor }}\n</code>\n</pre>\n", "senID": 12}], [{"text": ["I liked the idea of using the message framework, but the example in the django documentation doesn't work for me in the context of the question above. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["What really annoys me, is the line in the django docs:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you're using the context processor, your template should be rendered with a RequestContext.", "Otherwise, ensure messages is available to the template context."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "If you're using the context processor, your template should be rendered with a RequestContext. Otherwise, ensure messages is available to the template context.", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["which is incomprehensible to a newbie (like me) and needs to expanded upon, preferably with what those 2 options look like. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I was only able to find solutions that required rendering with RequestContext... which doesn't answer the question above."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I believe I've created a solution for the 2nd option below:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Hopefully this will help someone else."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["== urls.py =="], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n from django.conf.urls.defaults import *\nfrom views import *\n\nurlpatterns = patterns('',\n    (r'^$', main_page, { 'template_name': 'main_page.html', }, 'main_page'),\n    (r'^test/$', test ),\n</code>\n</pre>\n", "senID": 8}, {"text": ["== viewtest.py =="], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n from django.contrib import messages\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\n\ndef test(request):\n    messages.success( request, 'Test successful' )\n    return HttpResponseRedirect( reverse('main_page') )\n</code>\n</pre>\n", "senID": 10}, {"text": ["== viewmain.py =="], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n from django.contrib.messages import get_messages\nfrom django.shortcuts import render_to_response\n\ndef main_page(request, template_name ):\n    # create dictionary of items to be passed to the template\n    c = { messages': get_messages( request ) }\n\n    # render page\n    return render_to_response( template_name, c, )\n</code>\n</pre>\n", "senID": 12}, {"text": ["== main_page.html =="], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n {% block content %}\n    {% if messages %}\n    &lt;div&gt;\n        {% for message in messages %}\n            &lt;h2 class=\"{{message.tag}}\"&gt;{{ message.message }}&lt;/h2&gt;\n        {% endfor %}\n    &lt;/div&gt;\n    {% endif %}\n{% endblock %}\n</code>\n</pre>\n", "senID": 14}], [{"text": ["while all suggestions above work, I would suggest going with Ry4an's (pass it in the request URL) - just change the actual text to a coded text within a predefined set of text messages. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Two advantages here:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The other cookie related methods.. well, they don't work if the browser doesn't support cookies, and are slightly more expensive.. but only slightly.", "They're indeed cleaner to the eye."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["There is a lot of solutions"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1 Use Django-trunk version - it support sending messages to Anonymous Users"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["2 Sessions"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def view1(request):\n    request.session['message'] = 'Hello view2!'\n    return HttpResponseRedirect('/view2/')\n\n\ndef view2(request):\n    return HttpResponse(request.session['message'])\n</code>\n</pre>\n", "senID": 3}, {"text": ["3 redirect with param"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n return HttpResponseRedirect('/view2/?message=Hello+view2')\n</code>\n</pre>\n", "senID": 5}, {"text": ["4 Cookies"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Can you just pass the message as a query param oon the URL to which you're redirecting?", "It's not terribly RESTy, but it ought to work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n return HttpResponseRedirect('/polls/%s/results/?message=Updated\" % p.id)\n</code>\n</pre>\n", "senID": 1}, {"text": ["and have that view check for a message param, scrub it for nasties, and display it at the top."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Take a look at Django's messages framework.", "http://docs.djangoproject.com/en/dev/ref/contrib/messages/#ref-contrib-messages"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.djangoproject.com/en/dev/ref/contrib/messages/#ref-contrib-messages", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/contrib/messages/#ref-contrib-messages"}]}], [{"text": ["You could also have the redirect url be the path to an already parameterized view."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["urls.py:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n (r'^some/path/(?P&lt;field_name&gt;\\w+)/$', direct_to_template,\n    {'template': 'field_updated_message.html',\n    },\n    'url-name'\n),\n</code>\n</pre>\n", "senID": 2}, {"text": ["views.py:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n HttpResponseRedirect( reverse('url-name', args=(myfieldname,)) )\n</code>\n</pre>\n", "senID": 4}, {"text": ["Note that args= needs to take a tuple."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["The solution used by Pydev UA is the less intrusive and can be used without modifying almost nothing in your code.", "When you pass the message, you can update your context in the view that handles the message and in your template you can show it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I used the same approach, but instead passing a simple text, passed a dict with the information in useful fields for me.", "Then in the view, updated context as well and then returned the rendered template with the updated context."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Simple, effective and very unobstrusive."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I think this code should works for you"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n request.user.message_set.create(message=\"Some Message\")\nreturn http.HttpResponseRedirect('/url')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I have read and checked all answers and it seems to me that the way to go now is using the messaging framework.", "some of the relies are fairly old and have probably been the right way at the time of the posting."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["https://docs.djangoproject.com/en/1.3/ref/contrib/messages/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "https://docs.djangoproject.com/en/1.3/ref/contrib/messages/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://docs.djangoproject.com/en/1.3/ref/contrib/messages/"}]}]]