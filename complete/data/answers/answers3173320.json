[[{"text": ["Writing '\\r' will move the cursor back to the beginning of the line."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This displays a percentage counter:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i in range(100):\n...    time.sleep(1)\n...    sys.stdout.write(\"\\r%d%%\" %i)    # or print &gt;&gt; sys.stdout, \"\\r%d%%\" %i,\n...    sys.stdout.flush()\n...\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Write a \\r to the console.", "That is a \"carriage return\" which causes all text after it to be echoed at the beginning of the line.", "Something like:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "\\r", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"carriage return\"", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Carriage_return"}]}, {"code": "<pre>\n<code>\n def update_progress(progress):\n    print '\\r[{0}] {1}%'.format('#'*(progress/10), progress)\n</code>\n</pre>\n", "senID": 1}, {"text": ["which will give you something like: [ ########## ] 100%"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "[ ########## ] 100%", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Here's a nice example of a progressbar written in Python: http://nadiana.com/animated-terminal-progress-bar-in-python"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://nadiana.com/animated-terminal-progress-bar-in-python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nadiana.com/animated-terminal-progress-bar-in-python"}]}, {"text": ["But if you want to write it yourself.", "You could use the curses module to make things easier :)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "curses", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["[edit]\nPerhaps easier is not the word for curses.", "But if you want to create a full-blown cui than curses takes care of a lot of stuff for you."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["http://code.activestate.com/recipes/168639-progress-bar-class/ (2002)\nhttp://code.activestate.com/recipes/299207-console-text-progress-indicator-class/ (2004)\nhttp://pypi.python.org/pypi/progressbar (2006)"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "http://code.activestate.com/recipes/168639-progress-bar-class/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/168639-progress-bar-class/"}, {"href": "http://code.activestate.com/recipes/299207-console-text-progress-indicator-class/", "text": "http://code.activestate.com/recipes/299207-console-text-progress-indicator-class/", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://pypi.python.org/pypi/progressbar", "text": "http://pypi.python.org/pypi/progressbar", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["And a lot of tutorials waiting to be googled."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Run this at the Python command line (not in any IDE or development environment):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "at the Python command line", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "not", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import threading\n&gt;&gt;&gt; for i in range(50+1):\n...   threading._sleep(0.5)\n...   print \"\\r%3d\" % i, ('='*i)+('-'*(50-i)),\n</code>\n</pre>\n", "senID": 1}, {"text": ["Works fine on my Windows system."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n import sys\ndef progresssbar():\n         for i in range(100):\n            time.sleep(1)\n            sys.stdout.write(\"%i\\r\" % i)\n\nprogressbar()\n</code>\n</pre>\n", "senID": 0}, {"text": ["If the code is not in the function then stdout prints the data and \nthe length of the data.Don't know why stdout doesn't in a function."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I am using this one from reddit I like it because it can print progress for every item in one line, and it shouldn't erase printouts from program."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "from reddit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.reddit.com/browser/r2/r2/lib/utils/utils.py?rev=1d9b9fe72cfa0468d6ed4f6d4eee3955a53a9dba#L1260"}]}], [{"text": ["Check this library: clint"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "clint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/kennethreitz/clint"}]}, {"text": ["it has a lot of features including a progress bar:  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from time import sleep  \nfrom random import random  \nfrom clint.textui import progress  \nif __name__ == '__main__':\n    for i in progress.bar(range(100)):\n        sleep(random() * 0.2)\n\n    for i in progress.dots(range(100)):\n        sleep(random() * 0.2)\n</code>\n</pre>\n", "senID": 2}, {"text": ["this link provides a quick overview of its features"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "link", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.nicosphere.net/clint-command-line-library-for-python/"}]}]]