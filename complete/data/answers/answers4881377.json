[[{"text": ["You could check out GccXML and OpenC++, as well as doxygen."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I'll simply recommend Clang."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Clang", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://clang.llvm.org/"}]}, {"text": ["It's a C++ library-based compiler designed with ease of reuse in mind.", "It notably means that you can use it solely for parsing and generating an Abstract Syntax Tree.", "It takes care of all the tedious operator overloading resolution, template instantiation and so on."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Clang exports a C-based interface, which is extended with Python Bindings.", "The interface is normally quite rich, but I haven't use it.", "Anyway, contributions are welcome if you wish to help extending it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Can you run a preprocessing step?", "Doxygen parses most C++ syntax and creates xml with all the relationships.", "Compilers also create debug databases (typically dwarf format from gcc and codeview format from MSC)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["From what you say of our requirements, Tony's answer of GccXML will probably be the best option.", "If that doesn't work, you could try to generate an outline of your program with cscope or ctags, and then work your way to the info you want from it's output."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You asked for tools that can extract information from C++."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Our DMS Software Reengineering Toolkit is configurable compiler technology for building custom analyzers.", "It has a full C++ Front End with a preprocesser, full C++ parsing with AST construction (including capture of comments), and full symbol table.", "These could be used to extract such structural information, and export it to whatever you want to process it."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "DMS Software Reengineering Toolkit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.semanticdesigns.com/Products/DMS/DMSToolkit.html"}, {"text": "C++ Front End", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.semanticdesigns.com/Products/FrontEnds/CppFrontEnd.html"}]}, {"text": ["EDIT: One of the comments is that there are only 3 full C++ parsers in the world.", "I suspect more; surely IBM has one that works.", "DMS's C++ front end has been used in anger on large applications in both MS Visual Studio and on GNU C++ source codes, so it might reasonably qualify, too :-}"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I've had good experience with PLY: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.dabeaz.com/ply/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.dabeaz.com/ply/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/ply/"}]}, {"text": ["But this requires some experience with lex and yacc"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you can bring yourself to run this analysis using a Windows-platform application, save yourself a lot of time and trouble, and spend $200 on Enterprise Architect by Sparx Systems (I have no affiliation with this company, just a satisfied customer).", "(Note: this should not be confused with Microsoft's own \"Enterprise Architect\" bundle for Visual Studio."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EA can reverse-engineer a number of languages, including C++, C, Java, and Python, generating some very nice UML class diagrams.", "(EA comes in a number of different packages, Desktop is the cheapest but you have to by Professional, the 2nd cheapest, to get the code engineering feature included.", ")  I also like the integration between the generated class diagrams and sequence diagramming, where you can drag a line between object lifelines and a menu of defined methods is presented to you based on the class definition of the target object.", "At my former consulting business, we used this tool quite a bit to develop system architectural proposals which we then included as part of our project bid (just copy/paste the diagram into a Word doc).", "It wont take long to make back your $200."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]