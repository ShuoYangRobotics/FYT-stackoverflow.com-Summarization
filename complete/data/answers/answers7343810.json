[[{"text": ["You can use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"xxx@yyy.com@zzz.com\".replace(\"@zzz.com\", \"\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you know it will always be \"@zzz.com\"."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Otherwise, you could try:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n data = \"xxx@yyy.com@zzz.com\"\nif data.count(\"@\") == 2:\n    data = data.rsplit('@', 1)[0]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Or, more generally:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n data = \"xxx@yyy.com@zzz.com@___.com\"\nif data.count(\"@\") &gt; 1:\n    data = data.rsplit('@', data.count(\"@\")-1)[0]\n</code>\n</pre>\n", "senID": 6}, {"text": ["You can learn more about the string methods I have used at Python : String Methods"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "Python : String Methods", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#string-methods"}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; 'xxx@yyy.com@zzz.com'.rpartition('@')[0]\n'xxx@yyy.com'\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n string = \"xxx@yyy.com@zzz.com\"\nstring = \"@\".join(string.split(\"@\")[:2])\n</code>\n</pre>\n", "senID": 0}, {"text": ["Simple way to do the job.", "I don't think it's very safe though."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n $ python\nPython 2.6.6 (r266:84292, Nov 19 2010, 21:55:12) \n[GCC 4.2.1 (Apple Inc. build 5664)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.sub('@[^@.]*\\.com$', '', 'xxx@yyy.com@zzz.com')\n'xxx@yyy.com'\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n string = \"xxx@yyy.com@zzz.com\"\n\nprint string[0:string.rfind('@')]\n</code>\n</pre>\n", "senID": 0}, {"text": ["can help you"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This would work.", "Please check it.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n st='xxx@yyy.com@zzz.com'  \nprint st  \nnewstr=st[0:st.rfind('@')]  \nprint newstr\n</code>\n</pre>\n", "senID": 1}, {"text": ["Idea is to use rfind and strip find the @ symbol from the end. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Not sure if this code is too much for the task, but here ya go."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data = \"xxx@yyy.com@zzz.com\"\n\ndef cleaner(email):\n   counter = 0\n   result = ''\n   for i in data:\n      if i == \"@\":\n        counter += 1\n      if counter == 2:\n        break\n      result += i\n   return result\n\ndata = cleaner(data)\n\ndata = 'xxx@yyy.com'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Just pass the data to the cleaner function.", "For example:  cleaner(data) will return the correct answer."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["edit:  what gribbler posted is 1000x better than this...lol  I am still learning :)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n data.rpartition('@')[0]\n</code>\n</pre>\n", "senID": 4}]]