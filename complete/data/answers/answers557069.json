[[{"text": ["I haven't use it myself, but perhaps Cairo Plot is worth taking a look at."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Cairo Plot", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://linil.wordpress.com/2008/06/14/cairoplot-plotting-graphics-using-python-and-cairo/"}]}], [{"text": ["Matplotlib might work.", "Take a look at this strip chart demo."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Matplotlib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://matplotlib.sourceforge.net"}, {"text": "strip chart demo", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://matplotlib.sourceforge.net/examples/animation/strip_chart_demo.html"}]}], [{"text": ["you may try using CairoPlot:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import CairoPlot\n\n#the data list stands for your low-to-high (1) and high-to-low (0) data\ndata = lambda x : [0,0,1,1,0,0,1][x]\nCairoPlot.function_plot( 'Up_and_Down', data, 500, 300, discrete = True, x_bounds=( 0,len(data) - 1 ), step = 1 )\n</code>\n</pre>\n", "senID": 1}, {"text": ["For more information, check CairoPlot"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "CairoPlot", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://linil.wordpress.com/2008/09/16/cairoplot-11/"}]}, {"text": ["Edit:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I didn't understand your function fn(t) here.", "The idea of the function_plot is to plot a function not a vector."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["To plot those points, you could use function_plot on this way:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n #notice I have split your data into two different vectors,\n#one for x axis and the other one for y axis\nx_data = [10, 11, 12.5, 15]\ny_data = [0, 1, 0, 1]\n\ndef get_data( i ):\n    if i in x_data :\n        return y_data[x_data.index(i)]\n    else :\n        return 0\n\nCairoPlot.function_plot( 'Up_and_Down', get_data, 500, 300, discrete = True, x_bounds=( 0,20 ), step = 0.5 )\n</code>\n</pre>\n", "senID": 6}, {"text": ["I guess that will work"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["For the 100% pinning CPU, that shouldn't happen...", "I'll take a look at it later today.", "Thanks for pointing it\n\\o_"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["http://bitworking.org/projects/sparklines/ provides a tiny graph for you."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://bitworking.org/projects/sparklines/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bitworking.org/projects/sparklines/"}]}], [{"text": ["GnuPlot is a the old reliable answer here, easy graphing with lots of options.", "I believe there are python bindings but it's probably easier to export your data and run it through regular gnuplot.", "Here's an ancient quick start doc for it."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "GnuPlot", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.gnuplot.info/"}, {"text": "quick start doc", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://parand.com/docs/gnuplot.html"}]}, {"text": ["I'm also using matplotlib with great success for larger data sizes."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "matplotlib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://matplotlib.sourceforge.net/"}]}], [{"text": ["For a realtime stripchart application using only tkinter (no external packages required), see What is the best real time plotting widget for wxPython?."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "What is the best real time plotting widget for wxPython?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/457246/what-is-the-best-real-time-plotting-widget-for-wxpython/7605072#7605072"}]}, {"text": ["If I understand your question, you are receiving messages in realtime with nanosecond resolution timestamps, but you don't expect to see 10^9 messages per second.", "If the average message rate is low (100 messages per second or fewer), I'd just ignore the timestamp and plot the transitions one message at a time.", "If the graph timescale is 10ms per pixel, 4 transitions would be drawn over 40ms, but at least you wouldn't miss seeing that something happened."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]