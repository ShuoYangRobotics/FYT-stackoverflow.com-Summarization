[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; s=\"four digits 1234 five digits 56789 six digits 012345\"\n&gt;&gt;&gt; re.findall(r\"\\D(\\d{5})\\D\", s)\n['56789']\n</code>\n</pre>\n", "senID": 0}, {"text": ["if they can occur at the very beginning or the very end, it's easier to pad the string than mess with special cases"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall(r\"\\D(\\d{5})\\D\", \" \"+s+\" \")\n</code>\n</pre>\n", "senID": 2}], [{"text": ["full string: ^[0-9]{5}$"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "^[0-9]{5}$", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["within a string: [^0-9][0-9]{5}[^0-9]"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "[^0-9][0-9]{5}[^0-9]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["try this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ^[0-9]{5}$\n</code>\n</pre>\n", "senID": 1}, {"text": ["^ indicate the beginning of the string and $ the end"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["A very simple way would be to match all groups of digits, like with r'\\d+', and then skip every match that isn't five characters long when you process the results."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "r'\\d+'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You probably want to match a non-digit before and after your string of 5 digits, like [^0-9]([0-9]{5})[^0-9].", "Then you can capture the inner group (the actual string you want)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[^0-9]([0-9]{5})[^0-9]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You could try "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \\D\\d{5}\\D\n</code>\n</pre>\n", "senID": 1}, {"text": ["or maybe "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n \\b\\d{5}\\b\n</code>\n</pre>\n", "senID": 3}, {"text": ["I'm not sure how python treats line-endings and whitespace there though."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I believe ^\\d{5}$ would not work for you, as you likely want to get numbers that are somewhere within other text."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "^\\d{5}$", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]