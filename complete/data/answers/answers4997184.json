[[{"text": ["Modification is a bad idea because the documentation (which you link) explicitly says not to:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You don't need any more reason than that."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you are using it in a way that doesn't modify any variables, then you'll be fine, but I'd question the design and see if there's a better way to do what you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In the specific example you link, locals is actually globals(), as you use it in the global scope of a module.", "This very specific use works now and, though I expect it to continue to work just as with globals, you might as well just use globals instead."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["An even cleaner solution is probably, without knowing the rest of your design, to use a regular ol' dictionary for your variables; then use data[\"x\"] = value instead of globals()[\"x\"] = value."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["From Dive into Python"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Dive into Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/html_processing/locals_and_globals.html"}]}], [{"text": ["What documentation says is that when you have a local x variable and do locals()['x'] = 42, then x may still point to the old object."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "locals()['x'] = 42", "childNum": 0, "tag": "code", "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def foo():\n    x = 0xABCD\n    locals()['x'] = 42\n    print x\n\nfoo()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In certain cases, the call to locals() returns values collected from multiple sources, rather than a pointer to the local scope."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Example: When inside a function call, locals() returns a combination of the global scope and the scope local to the function.", "In this case, modifying the locals() output won't make any changes to the local scope because it's essentially using an island.", "It seems like the only cases where it does work are cases where its output is the same as the output of globals()."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "does", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["So, in other words, you either want to use globals(), or find a different way to achieve the same goal."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["In the CPython interpreter, local variables can come from a number of places (the details of this are not important, but it has to do with how variables are stored for closures).", "The locals() function gathers up the names and values from all these places, to give you convenient access to them all in one place, but since it doesn't know where a given variable came from, it can't put it back.", "In other words, it's a bad idea because it doesn't work."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "locals()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Modifying them is Undefined Behavior in relation to the actual variables par the documentation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]