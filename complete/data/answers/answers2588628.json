[[{"text": ["In short, it sets free magical ponies."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In long, Python 2.2 and earlier used \"old style classes\".", "They were a particular implementation of classes, and they had a few limitations (for example, you couldn't subclass builtin types).", "The fix for this was to create a new style of class.", "But, doing this would involve some backwards-incompatible changes.", "So, to make sure that code which is written for old style classes will still work, the object class was created to act as a superclass for all new-style classes.", "So, in Python 2.X, class Foo: pass will create an old-style class and class Foo(object): pass will create a new style class."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 4, "childList": []}, {"text": "class Foo: pass", "childNum": 0, "tag": "code", "pos": 5, "childList": []}, {"text": "class Foo(object): pass", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In longer, see Guido's Unifying types and classes in Python 2.2."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Unifying types and classes in Python 2.2", "tag": "a", "pos": 0, "childList": [{"text": "Unifying types and classes in Python 2.2", "tag": "em"}], "childNum": 1, "href": "http://www.python.org/download/releases/2.2.3/descrintro/"}, {"text": "Unifying types and classes in Python 2.2", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["And, in general, it's a good idea to get into the habit of making all your classes new-style, because some things (the @property decorator is one that comes to mind) won't work with old-style classes."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "@property", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It has to do with the \"new-style\" of classes.", "You can read more about it here: http://docs.python.org/tutorial/classes.html#multiple-inheritance and also here: http://docs.python.org/reference/datamodel.html#new-style-and-classic-classes"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/tutorial/classes.html#multiple-inheritance", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#multiple-inheritance"}, {"href": "http://docs.python.org/reference/datamodel.html#new-style-and-classic-classes", "text": "http://docs.python.org/reference/datamodel.html#new-style-and-classic-classes", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Using new-style classes will allow you to use \"Python's newer, versatile features like _slots_, descriptors, properties, and _getattribute_()."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "slots", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "getattribute", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["Right, but it marks the class as a new-style class.", "Newly developed classes should use the object base because it costs little and future-proofs your code."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "new-style", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/newstyle/"}, {"text": "object", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Short answer: subclassing object effectively makes it a new-style class (note that this is unnecessary since automatic in Python 3.x)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "new-style", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["For the difference between new style classes and old style classes: see this stackoverflow question.", "For the complete story: see this nice writeup on Python Types and Objects."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "new style", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "old style", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "this stackoverflow question", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python"}, {"text": "this nice writeup on Python Types and Objects", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html"}]}], [{"text": ["The short version is that classic classes, which didn't need a superclass, had limitations that couldn't be worked around without breaking a lot of old code.", "So they created the concept of new-style classes which subclass from object, and now you can do cool things like define properties, and subclassing dict is no longer an exercise in pain and strange bugs."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The details are in section 3.3 of the Python docs: New-style and classic classes."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "New-style and classic classes.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/2.5.2/ref/node33.html"}]}], [{"text": ["Python 2.2 introduced \"new style classes\" which had a number of additional features relative to the old style classes which did not subclass object.", "Subclasses object was the chosen way to indicate that your class should be a new style class, not an old style one."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python 2.2 introduced \"new style classes\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/whatsnew/2.2.html#old-and-new-classes"}]}]]