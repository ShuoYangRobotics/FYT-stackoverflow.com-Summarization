[[{"text": ["Blatant self-promotion:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["check out my poster module for python.", "It handles the multipart/form-data encoding, as well as supporting streaming uploads (so you don't have to load the entire file into memory before submitting the HTTP POST request)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "poster", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://atlee.ca/software/poster/"}]}], [{"text": ["Yes.", "You'd use the urllib2 module, and encode using the multipart/form-data content type.", "Here is some sample code to get you started -- it's a bit more than just file uploading, but you should be able to read through it and see how it works:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "urllib2", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "multipart/form-data", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n user_agent = \"image uploader\"\ndefault_message = \"Image $current of $total\"\n\nimport logging\nimport os\nfrom os.path import abspath, isabs, isdir, isfile, join\nimport random\nimport string\nimport sys\nimport mimetypes\nimport urllib2\nimport httplib\nimport time\nimport re\n\ndef random_string (length):\n    return ''.join (random.choice (string.letters) for ii in range (length + 1))\n\ndef encode_multipart_data (data, files):\n    boundary = random_string (30)\n\n    def get_content_type (filename):\n    \treturn mimetypes.guess_type (filename)[0] or 'application/octet-stream'\n\n    def encode_field (field_name):\n    \treturn ('--' + boundary,\n    \t        'Content-Disposition: form-data; name=\"%s\"' % field_name,\n    \t        '', str (data [field_name]))\n\n    def encode_file (field_name):\n    \tfilename = files [field_name]\n    \treturn ('--' + boundary,\n    \t        'Content-Disposition: form-data; name=\"%s\"; filename=\"%s\"' % (field_name, filename),\n    \t        'Content-Type: %s' % get_content_type(filename),\n    \t        '', open (filename, 'rb').read ())\n\n    lines = []\n    for name in data:\n    \tlines.extend (encode_field (name))\n    for name in files:\n    \tlines.extend (encode_file (name))\n    lines.extend (('--%s--' % boundary, ''))\n    body = '\\r\\n'.join (lines)\n\n    headers = {'content-type': 'multipart/form-data; boundary=' + boundary,\n               'content-length': str (len (body))}\n\n    return body, headers\n\ndef send_post (url, data, files):\n    req = urllib2.Request (url)\n    connection = httplib.HTTPConnection (req.get_host ())\n    connection.request ('POST', req.get_selector (),\n                        *encode_multipart_data (data, files))\n    response = connection.getresponse ()\n    logging.debug ('response = %s', response.read ())\n    logging.debug ('Code: %s %s', response.status, response.reason)\n\ndef make_upload_file (server, thread, delay = 15, message = None,\n                      username = None, email = None, password = None):\n\n    delay = max (int (delay or '0'), 15)\n\n    def upload_file (path, current, total):\n    \tassert isabs (path)\n    \tassert isfile (path)\n\n    \tlogging.debug ('Uploading %r to %r', path, server)\n    \tmessage_template = string.Template (message or default_message)\n\n    \tdata = {'MAX_FILE_SIZE': '3145728',\n    \t        'sub': '',\n    \t        'mode': 'regist',\n    \t        'com': message_template.safe_substitute (current = current, total = total),\n    \t        'resto': thread,\n    \t        'name': username or '',\n    \t        'email': email or '',\n    \t        'pwd': password or random_string (20),}\n    \tfiles = {'upfile': path}\n\n    \tsend_post (server, data, files)\n\n    \tlogging.info ('Uploaded %r', path)\n    \trand_delay = random.randint (delay, delay + 5)\n    \tlogging.debug ('Sleeping for %.2f seconds------------------------------\\n\\n', rand_delay)\n    \ttime.sleep (rand_delay)\n\n    return upload_file\n\ndef upload_directory (path, upload_file):\n    assert isabs (path)\n    assert isdir (path)\n\n    matching_filenames = []\n    file_matcher = re.compile (r'\\.(?:jpe?g|gif|png)$', re.IGNORECASE)\n\n    for dirpath, dirnames, filenames in os.walk (path):\n    \tfor name in filenames:\n    \t\tfile_path = join (dirpath, name)\n    \t\tlogging.debug ('Testing file_path %r', file_path)\n    \t\tif file_matcher.search (file_path):\n    \t\t\tmatching_filenames.append (file_path)\n    \t\telse:\n    \t\t\tlogging.info ('Ignoring non-image file %r', path)\n\n    total_count = len (matching_filenames)\n    for index, file_path in enumerate (matching_filenames):\n    \tupload_file (file_path, index + 1, total_count)\n\ndef run_upload (options, paths):\n    upload_file = make_upload_file (**options)\n\n    for arg in paths:\n    \tpath = abspath (arg)\n    \tif isdir (path):\n    \t\tupload_directory (path, upload_file)\n    \telif isfile (path):\n    \t\tupload_file (path)\n    \telse:\n    \t\tlogging.error ('No such path: %r' % path)\n\n    logging.info ('Done!')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This code might be of use to you"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/146306/"}]}], [{"text": ["Chris Atlee's poster library works really well for this (particularly the convenience function poster.encode.multipart_encode()).", "As a bonus, it supports streaming of large files without loading an entire file into memory.", "See also Python issue 3244."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "poster", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://atlee.ca/software/poster/"}, {"text": "poster.encode.multipart_encode()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Python issue 3244", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://bugs.python.org/issue3244"}]}], [{"text": ["You may also want to have a look at httplib2, with examples.", "I find using httplib2 is more concise than using the built-in HTTP modules."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "httplib2", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/httplib2/"}, {"text": "examples", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://bitworking.org/projects/httplib2/doc/html/libhttplib2.html#examples"}]}], [{"text": ["The only thing that stops you from using urlopen directly on a file object is the fact that the builtin file object lacks a len definition.", "A simple way is to create a subclass, which provides urlopen with the correct file.", "I have also modified the Content-Type header in the file below."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "len", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import urllib2\nclass EnhancedFile(file):\n    def __init__(self, *args, **keyws):\n        file.__init__(self, *args, **keyws)\n\n    def __len__(self):\n        return int(os.fstat(self.fileno())[6])\n\ntheFile = EnhancedFile('a.xml', 'r')\ntheUrl = \"http://example.com/abcde\"\ntheHeaders= {'Content-Type': 'text/xml'}\n\ntheRequest = urllib2.Request(theUrl, theFile, theHeaders)\n\nresponse = urllib2.urlopen(theRequest)\n\ntheFile.close()\n\n\nfor line in response:\n    print line\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This post:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.nerdwho.com/blog/57/enviando-arquivos-e-dados-ao-mesmo-tempo-via-http-post-usando-utf-8/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.nerdwho.com/blog/57/enviando-arquivos-e-dados-ao-mesmo-tempo-via-http-post-usando-utf-8/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.nerdwho.com/blog/57/enviando-arquivos-e-dados-ao-mesmo-tempo-via-http-post-usando-utf-8/"}]}, {"text": ["Resolves a problem with special characters in the file or in the parameter.", "The code is based on an ActiveState recipe."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n import urllib2\n\nif __name__ == \"__main__\":\n    conn = urllib2.urlopen(u\"http://localhost/someurl.cgi\", \n                           u\"This is your POST data\")\n\n    # Do something with the response.\n</code>\n</pre>\n", "senID": 0}]]