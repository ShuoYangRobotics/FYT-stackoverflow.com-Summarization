[[{"text": ["Unless you really need the features of an integer (that is, the ability to do arithmetic), then it is probably better for you to store the product IDs as strings.", "You will never need to do anything like add two product IDs together, or compute the average of a group of product IDs, so there is no need for an actual numeric type."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It is unlikely that storing product IDs as strings will cause a measurable difference in performance.", "While there will be a slight increase in storage size, the size of a product ID string is likely to be much smaller than the data in the rest of your database row anyway."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Storing product IDs as strings today will save you much pain in the future if the data provider decides to start using alphabetic or symbol characters.", "There is no real downside."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Do NOT consider performance.", "Consider meaning."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["ID \"numbers\" are not numeric except that they are written with an alphabet of all digits."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If I have part number 12 and part number 14, what is the difference between the two?", "Is part  number 2 or -2 meaningful?", "No."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Part numbers (and anything that doesn't have units of measure) are not \"numeric\".", "They're just strings of digits."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Zip codes in the US, for example.", "Phone numbers.", "Social security numbers.", "These are not numbers.", "In my town the difference between zip code 12345 and 12309 isn't the distance from my house to downtown. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Do not conflate numbers -- with units -- where sums and differences mean something with strings of digits without sums or differences."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "mean", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Part ID numbers are -- properly -- strings.", "Not integers.", "They'll never be integers because they don't have sums, differences or averages."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["It really depends on what kind of id you are talking about.", "If it's a code like a phone number it would actually be better to use a varchar for the id and then have your own id to be a serial for the db and use for primary key.", "In a case where the integer have no numerical value, varchars are generally prefered.   "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I'm not sure how good databases are at comparing whether one string is greater than another, like it can with integers.", "Try a query like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n SELECT * FROM my_table WHERE integer_as_string &gt; '100';\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The space an integer would take up would me much less than a string.", "For example 2^32-1 = 4,294,967,295.", "This would take 10 bytes to store, where as the integer would take 4 bytes to store.", "For a single entry this is not very much space, but when you start in the millions...  As many other posts suggest there are several other issues to consider, but this is one drawback of the string representation. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I've just spent the last year dealing with a database that has almost all IDs as strings, some with digits only, and others mixed.", "These are the problems:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Of course, if you run out of IDs, or don't know how to create new IDs, your app is dead.", "I suggest that if you can't control the format of your incoming IDs then you need to create your own (numeric) IDs and relate the user provided ID to that.", "You can then ensure that your own ID is reliable and unique (and numeric) but provide a user-viewable ID that can have whatever format your users want, and doesn't even have to be unique across the whole app.", "This is more work, but if you'd been through what I have you'd know which way to go."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Anil G"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["On the other hand it really depends upon your situation.", "If you intend to store something like phone numbers or student enrollment numbers, then it makes perfect sense to use strings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Integers are more efficient from a storage and performance perspective.", "However, if there is a remote chance that alpha characters may be introduced, then you should use a string.", "In my opinion, the efficiency and performance benefits are likely to be negligible, whereas the time it takes to modify your code may not be."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["As answered in Integer vs String in database"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Integer vs String in database", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/747802/integer-vs-string-in-database"}]}, {"text": ["In my country, post-codes are also always 4 digits.", "But the first digit can be zero."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If the ID would ever start with zero, store it as in interger. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Better use independent ID and add string ID if necessary: if there's a business indicator you need to include, why make it system ID?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Main drawbacks:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]