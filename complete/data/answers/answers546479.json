[[{"text": ["The biggest differences are that Python is duck typed, meaning that you won't need to plan out class hierarchies in as much detail as in Java, and has first class functions.", "The strategy pattern, for example, becomes much simpler and more obvious when you can just pass a function in, rather than having to make interfaces, etc.", "just to simulate higher order functions.", "More generally, Python has syntactic sugar for a lot of common design patterns, such as the iterator and the aforementioned strategy.", "It might be useful to understand these patterns (I've read Head First and found it pretty useful), but think about Pythonic ways to implement them rather than just doing things the same way you would in Java."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Python has it's own design idioms.", "Some of the standard patterns apply, others don't.", "Something like strategy or factories have in-language support that make them transparent. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For instance, with first-class types anything can be a factory.", "There's no need for a factory type, you can use the class directly to construct any object you want."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Basically, Python has its own design idioms that are somewhat different largely because it's so dynamic and has incredible introspection capabilities."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n x = list\nmy_list = x(range(0,5)) #creates a new list by invoking list's constructor\n</code>\n</pre>\n", "senID": 4}, {"text": ["By assigning the class-type to a callable object you can essentially remove any 'factory' types in your code.", "You are only left with callables that produce objects that should conform to some given conventions."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Furthermore, there are design patterns in Python that just can't be represented in other statically-typed languages efficiently.", "Metaclasses and function decorators are good examples of this."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["It depends on the pattern.", "Some things are difficult to do in Python: Singleton is an example.", "You replace this pattern with another, such as, in the case of Singleton, Borg.", "It's not insane to use design patterns in Python-- the Iterator pattern, for instance, is integrated into the syntax.", "However, many things simply aren't done as OO- or pattern-heavy stuff.", "Python is made to be procedural or functional when it best suits the task, and OO too.", "Overall, I'd just say to use your best judgment.", "If it seems like using Design Pattern Alpha-Gamma is overkill and overcomplication, then it probably is.", "If it seems like the pattern is perfect for what you want, it probably is."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}], [{"text": ["Design patterns are little more than duct-tape to fix a languages deficiencies."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["On further thought, some patterns, such as Borg, may be more specific to Python (though similar things can be said about other patterns and languages)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The iterator pattern is also used in Python, albeit in a slightly different form."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Duncan Booth has written an article on patterns in python."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "an article on patterns in python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.suttoncourtenay.org.uk/duncan/accu/pythonpatterns.html"}]}], [{"text": ["Short answer: Yes; Python is an OO language."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Short answer:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Slightly longer answer: Yes; you can design using OO principles and then implement in any language (even assembler)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Slightly longer answer:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "design", "childNum": 0, "tag": "em", "childList": []}, {"text": "implement", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Long, verbose, boring answer: (The development of programming languages isn't a simple linear progression, but let me oversimplify and ignore that fact to make an observation that spans about 40 years' of programming experience."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Long, verbose, boring answer:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "isn't", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["I'd say they apply to Python once you're already doing object-oriented programming with Python.", "Keep in mind that Python can do a lot more than OOP, and you should use common sense in choosing the appropriate paradigm for the job.", "If you decide that your program is best represented as a collection of objects, then sure, go ahead and use the design patterns, but don't be afraid to do something completely different if it's called for."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["yes, of course they apply.", "But as noted above, many patterns are built into the language, or made irrelevant by higher level features of the language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The use of Java or C# is probably due to the mainstream popularity of the language. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But design principle and/or design patterns apply irrespective of the language you use.", "The implementation of the same design pattern in Python would obviously be different than in Java or C#. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Yes, you can use plenty of design patterns in Python.", "A design pattern is just a repeatable implementation of a higher level task.", "The reason why Python &amp; design patterns don't work the same as other languages is because Python includes most of the basic patterns built in.", "This means that patterns that emerge in Python are likely to be higher level design patterns instead of the menial tasks for which patterns are usually needed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]