[[{"text": ["How about using subprocess to invoke ssh-keygen?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "subprocess", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ssh-keygen", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from subprocess import Popen, PIPE\nimport shlex\n\ndef get_pub_key(path):\n    args = shlex.split('ssh-keygen -y -f')\n    args.append(path)\n    p = Popen(args, stdout=PIPE)\n    stdout = p.communicate()[0]\n    if p.returncode != 0:\n        raise Exception(\"Error handling would be nice, eh?\")\n    return stdout.strip()\n\nprint get_pub_key('/tmp/my.key')\n</code>\n</pre>\n", "senID": 1}, {"text": ["The above little program will produce an output like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA ... 9Jbn6D74JOKpaOU050ltyNRw==\n</pre>\n", "senID": 3}], [{"text": ["The key used by ssh is just base64 encoded, i don't know M2Crypto very much, but after a quick overview it seems you could do what you want this way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nfrom base64 import b64encode\nfrom M2Crypto import RSA            \n\nkey = RSA.gen_key(1024, 65537)\nraw_key = key.pub()[1]\nb64key = b64encode(raw_key)\n\nusername = os.getlogin()\nhostname = os.uname()[1]\nkeystring = 'ssh-rsa %s %s@%s' % (b64key, username, hostname)\n\nwith open(os.getenv('HOME')+'/.ssh/id_rsa.pub') as keyfile:\n    keyfile.write(keystring)\n</code>\n</pre>\n", "senID": 1}, {"text": ["I didn't test the generated key with SSH, so please let me know if it works (it should i think)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I don't know the specifics of the SSH pubkey file, but comparing the base64 decoded version of ssh-keygen output to the contents of key.pub() the format of the keyfile is"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b64encode('\\x00\\x00\\x00\\x07ssh-rsa%s%s' % (key.pub()[0], key.pub()[1]))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Can you get the AAAA...Dfg== string out of it while it's an object?", "If so, you could simply open a file yourself and save that instead of using the built in save_pub_key function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Just guessing... but have you tried something like this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print \"ssh-rsa \" + \"\".join([ l.strip() for l in open('/tmp/my.key.pub') if not l.startswith('-----')])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I don't know of such a library in Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You might find the paramiko library useful (also available from PyPI).", "It implements the SSH protocol, and has functionality for handling existing keys, but not generating them."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "paramiko", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.lag.net/paramiko/"}, {"text": "available from PyPI", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/paramiko"}]}, {"text": ["Generation of keys might be a useful addition to that library (you could work with the developers to incorporate it into the library), and an easier start than doing it from scratch."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "work with the developers", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/robey/paramiko/"}]}], [{"text": ["This code works for me:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nfrom Crypto.PublicKey import RSA\n\nkey = RSA.generate(2048, os.urandom)\n\n# Create public key.                                                                                                                                               \nssh_rsa = '00000007' + base64.b16encode('ssh-rsa')\n\n# Exponent.                                                                                                                                                        \nexponent = '%x' % (key.e, )\nif len(exponent) % 2:\n    exponent = '0' + exponent\n\nssh_rsa += '%08x' % (len(exponent) / 2, )\nssh_rsa += exponent\n\nmodulus = '%x' % (key.n, )\nif len(modulus) % 2:\n    modulus = '0' + modulus\n\nif modulus[0] in '89abcdef':\n    modulus = '00' + modulus\n\nssh_rsa += '%08x' % (len(modulus) / 2, )\nssh_rsa += modulus\n\npublic_key = 'ssh-rsa %s' % (\n    base64.b64encode(base64.b16decode(ssh_rsa.upper())), )\n</code>\n</pre>\n", "senID": 1}]]