[[{"text": ["So if I understand you correctly, you use a programming language that by default does not do just-in-time compiling and now you are looking for a regex library that does precisely that?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think you should compile all of your python code to binary using e.g.", "Psyco"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://www.devshed.com/c/a/Python/How-Python-Runs-Programs/4/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.devshed.com/c/a/Python/How-Python-Runs-Programs/4/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.devshed.com/c/a/Python/How-Python-Runs-Programs/4/"}]}, {"text": ["also discussed here:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["http://stackoverflow.com/questions/138521/is-it-feasible-to-compile-python-to-machine-code"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://stackoverflow.com/questions/138521/is-it-feasible-to-compile-python-to-machine-code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/138521/is-it-feasible-to-compile-python-to-machine-code"}]}, {"text": ["and here:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["http://stackoverflow.com/questions/205062/is-it-possible-to-compile-python-natively-beyond-pyc-byte-code"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://stackoverflow.com/questions/205062/is-it-possible-to-compile-python-natively-beyond-pyc-byte-code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/205062/is-it-possible-to-compile-python-natively-beyond-pyc-byte-code"}]}, {"text": ["If these solutions either don't work or are still not fast enough and if you absolutely want to write the rest of your application in python, there is the boost python c++ library:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["http://www.boost.org/doc/libs/1_41_0/libs/python/doc/index.html"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "http://www.boost.org/doc/libs/1_41_0/libs/python/doc/index.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1%5F41%5F0/libs/python/doc/index.html"}]}, {"text": ["The boost.python library allows full interoperability between python and c++.", "Then, you could use the boost.regex c++ regex matcher:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["http://www.boost.org/doc/libs/1_41_0/libs/regex/doc/html/index.html"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "http://www.boost.org/doc/libs/1_41_0/libs/regex/doc/html/index.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1%5F41%5F0/libs/regex/doc/html/index.html"}]}], [{"text": ["I don't see it in your question, so I ask: Did you test with precompiled regular expressions e.g.", "\"re.compile(pattern)\" ?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Since compiled regexes should be faster.", "OK, it is not JIT, but most of the time you are fine with simply precompiled ones!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["See here:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["re.compile"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "re.compile", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#re.compile"}]}], [{"text": ["Another idea: When you have a library (in C) that is more optimal than the Python regex module or that does just-in-time compilation of Regexes, then you could write your own regex module for python that does just wrap your C-Library."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That of course is somewhat more work and only recommended when you really, really need the speed."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You could also try Cython (personally I did not use it yet, but it sounds rather good) to do the job of wrapping."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Cython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cython.org/"}]}, {"text": ["As much as I understand your problem now, the Python surrounding is not your problem (so I doubt whether psyco will help) -- also the preparation of the regex-run is not your problem, but the run itself must be top-speed.", "That of course depends on the library you use and how good it can handle large strings.", "I would think, that the standard python regex-lib is not optimized for such long strings and top-of-the-notch speed."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The only regex engine that I know that can compile regular expressions into executable code is the one in .NET when you pass RegexOptions.Compiled.", "That causes the Regex class to emit MSIL which can then be JITted like any other .NET code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Whether than makes the .NET regex engine faster than others is a totally different matter.", "When searching and replacing using relatively simple regular expressions on large data sets, string handling becomes far more important.", ".NET strings are immutable, so much will depend on how many times the string needs to be reallocated."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Hand-coding the operation will always be faster, because the code isn't equivalent.", "The regex code maintains certain information about the regex match and the capturing groups which your code does not.", "In most situations, the extra time you spend hand-coding the search-and-replace instead of using a regex isn't worth the effort, particularly if you factor in that switching to a different regex is trivial when your requirements change, while rewriting the search-and-replace using procedural code takes much more time."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In my experience, PCRE is one of the fastest regex engines around.", "It doesn't include a ready-made search-and-replace, however."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I'm no Python expert, but you could give Psycho a try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.ibm.com/developerworks/library/l-psyco.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.ibm.com/developerworks/library/l-psyco.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks/library/l-psyco.html"}]}, {"text": ["http://psyco.sourceforge.net/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://psyco.sourceforge.net/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://psyco.sourceforge.net/"}]}], [{"text": ["The regular expression engine in Firefox compiles some (not all!", ") regular expressions to machine code.", "I believe Safari and Chrome do too."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I may be wrong, but I believe that Python's regex module is in C, so any suggestion to compile Python (like using Psycho) would not make much difference---what you're actually comparing is the performance of one C regex library (Python's) with another (whatever library you are using)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["PCRE has a JIT compiler since 8.20.", "You can read about here: http://sljit.sourceforge.net/pcre.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://sljit.sourceforge.net/pcre.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://sljit.sourceforge.net/pcre.html"}]}], [{"text": ["Thompson had a paper published in the communications of the ACM in 1968 that described a working JIT compiler for regular expressions into IBM 7094 code.", "I don't know what language(s) he used; Fortran or LISP would be the obvious suspects, with LISP being especially suspect since it already had JIT compiling."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]