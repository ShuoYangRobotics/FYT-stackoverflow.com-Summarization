[[{"text": ["Edit, since i misunderstood the question:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Just put the Helper class in __init__.py.", "Thats perfectly pythonic.", "It just feels strange coming from languages like Java."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Helper", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__init__.py", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["You just put them in __init__.py."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So with test/classes.py being:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class A(object): pass\nclass B(object): pass\n</code>\n</pre>\n", "senID": 2}, {"text": ["... and test/__init__.py being:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from classes import *\n\nclass Helper(object): pass\n</code>\n</pre>\n", "senID": 4}, {"text": ["You can import test and have access to A, B and Helper"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import test\n&gt;&gt;&gt; test.A\n&lt;class 'test.classes.A'&gt;\n&gt;&gt;&gt; test.B\n&lt;class 'test.classes.B'&gt;\n&gt;&gt;&gt; test.Helper\n&lt;class 'test.Helper'&gt;\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Then the following example should work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from lib.settings import Values\nfrom lib import Helper\n</code>\n</pre>\n", "senID": 1}, {"text": ["__init__.py defines how your package looks from outside.", "If you need to use Helper in settings.py then define Helper in a different file e.g., 'lib/helper.py'."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Helper", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "settings.py", "childNum": 0, "tag": "code", "childList": []}, {"text": "Helper", "childNum": 0, "tag": "code", "childList": []}, {"text": "lib/helper.py", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n.\n|   `-- import_submodule.py\n    `-- lib\n    |-- __init__.py\n    |-- foo\n    |   |-- __init__.py\n    |   `-- someobject.py\n    |-- helper.py\n    `-- settings.py\n\n2 directories, 6 files\n</pre>\n", "senID": 3}, {"text": ["The command:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n $ python import_submodule.py\n</code>\n</pre>\n", "senID": 5}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n settings\nhelper\nHelper in lib.settings\nsomeobject\nHelper in lib.foo.someobject\n\n# ./import_submodule.py\nimport fnmatch, os\nfrom lib.settings import Values\nfrom lib import Helper\n\nprint\nfor root, dirs, files in os.walk('.'):\n    for f in fnmatch.filter(files, '*.py'):\n        print \"# %s/%s\" % (os.path.basename(root), f)\n        print open(os.path.join(root, f)).read()\n        print\n\n\n# lib/helper.py\nprint 'helper'\nclass Helper(object):\n    def __init__(self, module_name):\n        print \"Helper in\", module_name\n\n\n# lib/settings.py\nprint \"settings\"\nimport helper\n\nclass Values(object):\n    pass\n\nhelper.Helper(__name__)\n\n\n# lib/__init__.py\n#from __future__ import absolute_import\nimport settings, foo.someobject, helper\n\nHelper = helper.Helper\n\n\n# foo/someobject.py\nprint \"someobject\"\nfrom .. import helper\n\nhelper.Helper(__name__)\n\n\n# foo/__init__.py\nimport someobject\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Richard is right.", "Stack Overflow markup messed up his answer.", "He meant import the class into lib/__init__.py.", "(I can't edit his answer or I would...)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lib/__init__.py", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["Yes, it is possible.", "You might also want to define __all__ in __init__.py files.", "It's a list of modules that will be imported when you do "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__all__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__init__.py", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n from lib import *\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Maybe this could work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import __init__ as lib\n</code>\n</pre>\n", "senID": 1}]]