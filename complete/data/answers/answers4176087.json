[[{"text": ["Serialization is just a fancy way of describing what you do when you want a certain data structure, class, etc to be transmitted."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, say I have a structure:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n struct Color\n{\n    int R, G, B;\n};\n</code>\n</pre>\n", "senID": 2}, {"text": ["When you transmit this over a network you don't say send Color.", "You create a line of bits and send it.", "I could create an unsigned char* and concatenate R, G, and B and then send these.", "I just did serialization"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Serialization of some kind is required, but this can take many forms.", "It can be something like dotNET serialization, that is handled by the language, or it can be a custom built format.", "Maybe a series of bytes where each byte represents some \"magic value\" that only you and your application understand."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, in dotNET I can can create a class with a single string property, mark it as serializable and the dotNET framework takes care of most everything else."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I can also build my own custom format where the first 4 bytes represent the length of the data being sent and all subsequent bytes are characters in a string.", "But then of course you need to worry about byte ordering, unicode vs ansi encoding, etc etc."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Typically it is easier to make use of whatever framework your language/OS/dev framework uses, but it is not required."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Yes, serialization is the only way to transmit data over the wire.", "Consider what the purpose of serialization is.", "You define the way that the class is stored.", "In memory tho, you have no way to know exactly where each portion of the class is.", "Especially if you have, for instance, a list, if it's been allocated early but then reallocated, it's likely to be fragmented all over the place, so it's not one contiguous block of memory.", "How do you send that fragmented class over the line?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For that matter, if you send a List&lt;ComplexType&gt; over the wire, how does it know where each ComplexType begins and ends."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "List&lt;ComplexType&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ComplexType", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Literally no."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It is conceivable that you can move data from one address space to another without serializing it.", "For example, a hypothetical system using distributed virtual memory could move data / objects from one machine to another by sending pages ... without any specific serialization step."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["And within a machine, the objects could be transferred by switch pages from one virtual address space to another."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["But in practice, the answer is yes.", "I'm not aware of any mainstream technology that works that way."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The real problem here is not getting over the wire, the problem is ending up with the same semantic object on the other side of the wire.", "For properly transporting data between dissimilar systems -- whether via TCP/IP, floppy, or punch card -- the data must be encoded (serialized) into a platform independent representation."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Because of alignment and type-size issues, if you attempted to do a straight binary transfer of your object it would cause Undefined Behavior (to borrow the definition from the C/C++ standards)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For example the size and alignment of the long datatype can differ between architectures, platforms, languages, and even different builds of the same compiler."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "long datatype", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Long_integer"}]}], [{"text": ["For anything more complex than a primitive or a homogeneous run of primitives, yes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Binary serialization is not the only option.", "You can also serialize an object as an XML file, for example.", "Or as a JSON."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I think you're asking the wrong question.", "Serialization is a concept in computer programming and there are certain requirements which must be satisfied for something to be considered a serialization mechanism."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Any means of preparing data such that it can be transmitted or stored in such a way that another program (including but not limited to another instance of the same program on another system or at another time) can read the data and re-instantiate whatever objects the data represents."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Note I slipped the term \"objects\" in there.", "If I write a program that stores a bunch of text in a file; and I later use some other program, or some instance of that first program to read that data ...", "I haven't really used a \"serialization\" mechanism.", "If I write it in such a way that the text is also stored with some state about how it was being manipulated ... that might entail serialization."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The term is used mostly to convey the concept that active combinations of behavior and state are being rendered into a form which can be read by another program/instance and instantiated.", "Most serialization mechanism are bound to a particular programming language, or virtual machine system (in the sense of a Java VM, a C# VM etc; not in the sense of \"VMware\" virtual machines).", "JSON (and YAML) are a notable exception to this.", "They represents data for which there are reasonably close object classes with reasonably similar semantics such that they can be instantiated in multiple different programming languages in a meaningful way."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["It's not that all data transmission or storage entails \"serialization\" ... is that certain ways of storing and transmitting data can be used for serialization.", "At very list it must be possible to disambiguated among the types of data that the programming language supports.", "If it reads: 1 is has to know whether that's text or an integer or a real (equivalent to 1.0) or a bit."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Strictly speaking it isn't the only option; you could put an argument that \"remoting\" meets the meaning inthe text; here a fake object is created at the receiver that contains no state.", "All calls (methods, properties etc) are intercepted and only the call and result are transferred.", "This avoids the need to transfer the object itself, but can get very expensive if overly \"chatty\" usage is involved (I.e.", "Lots of calls)as each has the latency of the speed of light (which adds up)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "only", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "no state", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "call", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "result", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["However, \"remoting\" is now rather out of fashion.", "Most often, yes: the object will need to be serialised and deserialized in some way (there are lots of options here).", "The paragraph is then pretty-much correct."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "lots", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["Having a messages as objects and serializing into bytes is a better way of understanding and managing what is transmitted over wire.", "In the old days protocols and data was much simpler, often, programmers just put bytes into output stream.", "Common understanding was shared by having well-known and simple specifications."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I would say serialization is needed to store the objects in file for persistence, but dynamically allocated pointers in objects need to be build again when we de-serialize, But the serialization for transfer depends on the physical protocol and the mechanism used, for example if i use UART to transfer data then its serialized bit by bit but if i use parallel port then 8 bits together gets transferred , which is not serialized"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]