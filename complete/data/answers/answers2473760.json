[[{"text": ["It looks like you just want the time right?", "The datetime.strptime method returns a 'datetime' object and as such the following attributes contain the time: datetime.day, datetime.hour, datetime.year, etc."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Robert, try replacing"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict_start = datetime(*start_time[:6])\n</code>\n</pre>\n", "senID": 1}, {"text": ["with"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n dict_start = start_time\n</code>\n</pre>\n", "senID": 3}, {"text": ["and "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n dict_end = datetime(*end_time[:6])\n</code>\n</pre>\n", "senID": 5}, {"text": ["with "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n dict_end = end_time\n</code>\n</pre>\n", "senID": 7}, {"text": ["It looks silly, but perhaps try it anyway.", "My reason is this: datetime.strptime returns a datetime.datetime object.", "Since the code originally says"], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "datetime.strptime", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "datetime.datetime", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n dict_start = datetime(*start_time[:6])\n</code>\n</pre>\n", "senID": 9}, {"text": ["it appears that dict_start is intended to also be a datetime.datetime, with the same 6 fields (year,month,day,hour,minutes,seconds).", "So try"], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "dict_start", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "datetime.datetime", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n dict_start = start_time\n</code>\n</pre>\n", "senID": 11}, {"text": ["If that doesn't work, you might have to show us more of the code so we can form a better guess as to what was intended."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Edit: The easiest way to get at the individual fields (year,month,day,hour,minutes,seconds) is to use the dot notation to access the attributes.", "For example,"], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n (start_time.year,start_time.month,start_time.day)\n</code>\n</pre>\n", "senID": 14}, {"text": ["gives a 3-tuple with the year, month, and day as integers."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"text": ["PS.", "For more info about datetime objects, see http://docs.python.org/library/datetime.html.", "It may contain useful examples for you."], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "http://docs.python.org/library/datetime.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/datetime.html"}]}], [{"text": ["Looks like the datetime.strptime call was actually meant to be a call to time.strptime (with a separate import time at the start of the module) -- the latter call would indeed return a subscriptable, tuple-like object, and the idiom"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "datetime.strptime", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "time.strptime", "childNum": 0, "tag": "code", "childList": []}, {"text": "import time", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n xx = time.strptime(...)\nyy = datetime.datetime(x[:6])\n</code>\n</pre>\n", "senID": 1}, {"text": ["(with import time and import datetime at the start of the module, of course) was indeed the canonical way to parse a string into a datetime.datetime instance before the datetime.datetime type added its own strptime function which basically does just this job.", "So, it looks like \"imperfectly migrated\" code."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "import time", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "import datetime", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "datetime.datetime", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "datetime.datetime", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "strptime", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["To extract just the date (as a datetime.date object, with just year, month and day -- no hours, minutes, seconds and fractions) from a datetime.datetime instance x, call x.date() which will return the desired date object (not modify x itself of course: datetime objects are immutable -- you always make new ones, not change existing ones)."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "datetime.date", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "datetime.datetime", "childNum": 0, "tag": "code", "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "childList": []}, {"text": "x.date()", "childNum": 0, "tag": "code", "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Observations:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Whoever wrote the code didn't test it; it never could have run properly."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Whoever wrote it was confusing datetime.datetime.strptime with time.strptime."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Once upon a time (pun intended) datetime.datetime.strptime didn't exist.", "One had to do something like the following: "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; import time\n&gt;&gt;&gt; time_tuple = time.strptime(\"2010-03-19 13:22:45\",\"%Y-%m-%d %H:%M:%S\")\n&gt;&gt;&gt; time_tuple\n(2010, 3, 19, 13, 22, 45, 4, 78, -1)\n&gt;&gt;&gt; datetime(*time_tuple[:6])\ndatetime.datetime(2010, 3, 19, 13, 22, 45)\n</code>\n</pre>\n", "senID": 4}, {"text": ["(The [:6] was a dead give-away)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "[:6]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Now one can do this:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; datetime.strptime(\"2010-03-19 13:22:45\",\"%Y-%m-%d %H:%M:%S\")\ndatetime.datetime(2010, 3, 19, 13, 22, 45)\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Its not the import fault.", "Its the *start_time[:6]  *end_time[:6] that Python doesn't like.", "Replace it"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The following code doesn't make sense to me:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n start_time = datetime.strptime(str(paf.Start),\"%Y-%m-%d %H:%M:%S\")\ndict_start = datetime(*start_time[:6])\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you need a tuple mapping in dict_start, then use something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n start_time = datetime.strptime(str(paf.Start),\"%Y-%m-%d %H:%M:%S\")\ndict_start = start_time.timetuple()[:6]\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you need dict, then:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n start_time = datetime.strptime(str(paf.Start),\"%Y-%m-%d %H:%M:%S\")\ndict_start = dict(zip(('year', 'month' ,'day', 'hour', 'minute', 'second'), start_time.timetuple()[:6]))\n</code>\n</pre>\n", "senID": 5}, {"text": ["-- or use paf.Start, if possible.", "Also, I'm not sure but it could be that ('year', 'month' ,'day', 'hour', 'minute', 'second') tuple is predefined somewhere in Python std lib or it can be easily replaced with some other construct, but it's midnight here and I don't see any other obvious solution."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "('year', 'month' ,'day', 'hour', 'minute', 'second')", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}]]