[[{"text": ["See this pure Python implementation by Matthew Dixon Cowles and [Jens Diemer])"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pure Python implementation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/jedie/python-ping/blob/master/ping.py"}]}, {"code": "<pre>\n<code>\n import ping, socket\ntry:\n    ping.verbose_ping('www.google.com', run=3)\n    delay = ping.Ping('www.wikipedia.org', timeout=2000).do()\nexcept socket.error, e:\n    print \"Ping Error:\", e\n</code>\n</pre>\n", "senID": 1}, {"text": ["The source code itself is easy to read, see the implementations of verbose_ping and of Ping.do for inspiration."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "verbose_ping", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Ping.do", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You may find Noah Gift's presentation  Creating Agile Commandline Tools With Python.", "In it he combines subprocess, Queue and threading to develop solution that is capable of pinging hosts concurrently and speeding up the process.", "Below is a basic version before he adds command line parsing and some other features.", "The code to this version and others can be found here"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Noah Gift's", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://noahgift.com/"}, {"text": "Creating Agile Commandline Tools With Python", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://code.noahgift.com/pycon2008/pycon2008_cli_noahgift.pdf"}, {"text": "here", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://code.noahgift.com/pycon2008/pycon2008_cli_noahgift.zip"}]}, {"code": "<pre>\n<code>\n #!/usr/bin/env python2.5\nfrom threading import Thread\nimport subprocess\nfrom Queue import Queue\n\nnum_threads = 4\nqueue = Queue()\nips = [\"10.0.1.1\", \"10.0.1.3\", \"10.0.1.11\", \"10.0.1.51\"]\n#wraps system ping command\ndef pinger(i, q):\n    \"\"\"Pings subnet\"\"\"\n    while True:\n\tip = q.get()\n\tprint \"Thread %s: Pinging %s\" % (i, ip)\n\tret = subprocess.call(\"ping -c 1 %s\" % ip,\n\t\t\tshell=True,\n\t\t\tstdout=open('/dev/null', 'w'),\n\t\t\tstderr=subprocess.STDOUT)\n\tif ret == 0:\n\t    print \"%s: is alive\" % ip\n\telse:\n\t    print \"%s: did not respond\" % ip\n\tq.task_done()\n#Spawn thread pool\nfor i in range(num_threads):\n\n    worker = Thread(target=pinger, args=(i, queue))\n    worker.setDaemon(True)\n    worker.start()\n#Place work in queue\nfor ip in ips:\n    queue.put(ip)\n#Wait until worker threads are done to exit    \nqueue.join()\n</code>\n</pre>\n", "senID": 1}, {"text": ["He is also author of: Python for Unix and Linux System Administration"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Python for Unix and Linux System Administration", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rads.stackoverflow.com/amzn/click/0596515820"}]}, {"senID": 3}], [{"text": ["Depending on what you want to achive, you are probably easiest calling the system ping command.."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Using the subprocess module is the best way of doing this, although you have to remember the ping command is different on different operating systems!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import subprocess\n\nhost = \"www.google.com\"\n\nping = subprocess.Popen(\n    [\"ping\", \"-c\", \"4\", host],\n    stdout = subprocess.PIPE,\n    stderr = subprocess.PIPE\n)\n\nout, error = ping.communicate()\nprint out\n</code>\n</pre>\n", "senID": 2}, {"text": ["You don't need to worry about shell-escape characters.", "For example.."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n host = \"google.com; `echo test`\n</code>\n</pre>\n", "senID": 4}, {"text": ["..will not execute the echo command."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Now, to actually get the ping results, you could parse the out variable.", "Example output:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "out", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n round-trip min/avg/max/stddev = 248.139/249.474/250.530/0.896 ms\n</code>\n</pre>\n", "senID": 7}, {"text": ["Example regex:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n import re\nmatcher = re.compile(\"round-trip min/avg/max/stddev = (\\d+.\\d+)/(\\d+.\\d+)/(\\d+.\\d+)/(\\d+.\\d+)\")\nprint matcher.match(out).groups()\n\n# ('248.139', '249.474', '250.530', '0.896')\n</code>\n</pre>\n", "senID": 9}, {"text": ["Again, remember the output will vary depending on operating system (and even the version of ping).", "This isn't ideal, but it will work fine in many situations (where you know the machines the script will be running on)"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "ping", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It's hard to say what your question is, but there are some alternatives."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you mean to literally execute a request using the ICMP ping protocol, you can get an  ICMP library and execute the ping request directly.", "Google \"Python ICMP\" to find things like this icmplib.", "You might want to look at scapy, also."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "icmplib", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/409689/"}, {"text": "scapy", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.secdev.org/projects/scapy/"}]}, {"text": ["This will be much faster than using os.system(\"ping \" + ip ).  "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "os.system(\"ping \" + ip )", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you mean to generically \"ping\" a box to see if it's up, you can use the echo protocol on port 7."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["For echo, you use the socket library to open the IP address and port 7.", "You write something on that port, send a carriage return (\"\\r\\n\") and then read the reply."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "socket", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-socket.html"}, {"text": "\"\\r\\n\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["If you mean to \"ping\" a web site to see if the site is running, you have to use the http protocol on port 80."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["For or properly checking a web server, you use urllib2 to open a specific URL.", "(/index.html is always popular) and read the response. "], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "urllib2", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-urllib2.html"}, {"text": "/index.html", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["There are still more potential meaning of \"ping\" including \"traceroute\" and \"finger\"."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I did something similar this way, as an inspiration:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import urllib\n\ndef pinger_urllib(host):\n  \"\"\"\n  helper function timing the retrival of index.html \n  TODO: should there be a 1MB bogus file?\n  \"\"\"\n  t1 = time.time()\n  urllib.urlopen(host + '/index.html').read()\n  return (time.time() - t1) * 1000.0\n\n\ndef task(m):\n  \"\"\"\n  the actual task\n  \"\"\"\n  delay = float(pinger_urllib(m))\n  print '%-30s %5.0f [ms]' % (m, delay)\n\n# parallelization\ntasks = []\nfor m in URLs:\n  t = threading.Thread(target=task, args=(m,))\n  t.start()\n  tasks.append(t)\n\n# synchronization point\nfor t in tasks:\n  t.join()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can find an updated version of the mentioned script that works on both Windows and Linux at http://www.g-loaded.eu/2009/10/30/python-ping/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.g-loaded.eu/2009/10/30/python-ping/", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Take a look at Jeremy Hylton's code, if you need to do a more complex, detailed implementation in Python rather than just calling ping."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Jeremy Hylton's code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/~jeremy/python.html"}, {"text": "ping", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I use the ping module by Lars Strand.", "Google for \"Lars Strand python ping\" and you will find a lot of references."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["using system ping command to ping a list of hosts:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nfrom subprocess import Popen, PIPE\nfrom threading import Thread\n\n\nclass Pinger(object):\n    def __init__(self, hosts):\n        for host in hosts:\n            pa = PingAgent(host)\n            pa.start()\n\nclass PingAgent(Thread):\n    def __init__(self, host):\n        Thread.__init__(self)        \n        self.host = host\n\n    def run(self):\n        p = Popen('ping -n 1 ' + self.host, stdout=PIPE)\n        m = re.search('Average = (.*)ms', p.stdout.read())\n        if m: print 'Round Trip Time: %s ms -' % m.group(1), self.host\n        else: print 'Error: Invalid Response -', self.host\n\n\nif __name__ == '__main__':\n    hosts = [\n        'www.pylot.org',\n        'www.goldb.org',\n        'www.google.com',\n        'www.yahoo.com',\n        'www.techcrunch.com',\n        'www.this_one_wont_work.com'\n       ]\n    Pinger(hosts)\n</code>\n</pre>\n", "senID": 1}]]