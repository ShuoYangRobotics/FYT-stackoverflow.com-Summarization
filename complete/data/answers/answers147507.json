[[{"text": ["Please reconsider.", "The only thing worse than import * is magic import *."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "import *", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "magic", "childNum": 0, "tag": "em", "childList": []}, {"text": "import *", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you really want to:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n m = __import__ (S)\ntry:\n    attrlist = m.__all__\nexcept AttributeError:\n    attrlist = dir (m)\nfor attr in attrlist:\n    globals()[attr] = getattr (m, attr)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Here's my solution for dynamic naming of local settings files for Django.", "Note the addition below of a check to not include attributes containing '__' from the imported file.", "The __name__ global was being overwritten with the module name of the local settings file, which caused setup_environ(), used in manage.py, to have problems."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__name__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "setup_environ()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n try:\n    import socket\n    HOSTNAME = socket.gethostname().replace('.','_')\n    # See http://docs.python.org/library/functions.html#__import__\n    m = __import__(name=\"settings_%s\" % HOSTNAME, globals=globals(), locals=locals(), fromlist=\"*\")\n    try:\n        attrlist = m.__all__\n    except AttributeError:\n        attrlist = dir(m)        \n    for attr in [a for a in attrlist if '__' not in a]:\n        globals()[attr] = getattr(m, attr)\n\nexcept ImportError, e:\n    sys.stderr.write('Unable to read settings_%s.py\\n' % HOSTNAME)\n    sys.exit(1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It appears that you can also use dict.update() on module's dictionaries in your case:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict.update()", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n config = [__import__(name) for name in names_list]\n\noptions = {}\nfor conf in config:\n    options.update(conf.__dict__)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Update: I think there's a short \"functional\" version of it:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n options = reduce(dict.update, map(__import__, names_list))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The underlying problem is that I am developing some Django, but on more than one host (with colleagues), all with different settings.", "I was hoping to do something like this in the project/settings.py file:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from platform import node\n\nsettings_files = { 'BMH.lan': 'settings_bmh.py\", ... } \n\n__import__( settings_files[ node() ] )\n</code>\n</pre>\n", "senID": 1}, {"text": ["It seemed a simple solution (thus elegant), but I would agree that it has a smell to it and the simplicity goes out the loop when you have to use logic like what John Millikin posted (thanks).", "Here's essentially the solution I went with:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from platform import node\n\nfrom settings_global import *\n\nn = node()\n\nif n == 'BMH.lan':\n  from settings_bmh import *\n# add your own, here...\nelse:\n  raise Exception(\"No host settings for '%s'. See settings.py.\" % node())\n</code>\n</pre>\n", "senID": 3}, {"text": ["Which works fine for our purposes."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I didn't find a good way to do it so I took a simpler but ugly way from http://www.djangosnippets.org/snippets/600/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.djangosnippets.org/snippets/600/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangosnippets.org/snippets/600/"}]}, {"code": "<pre>\n<code>\n try:\n    import socket\n    hostname = socket.gethostname().replace('.','_')\n    exec \"from host_settings.%s import *\" % hostname\nexcept ImportError, e:\n    raise e\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You don't, that's a very silly idea and entirely unpythonic."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]