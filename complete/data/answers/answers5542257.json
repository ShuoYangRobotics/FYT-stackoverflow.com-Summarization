[[{"code": "<pre>\n<code>\n import re\nline = 'Specified, if char, else 10 (default).'\nwords = re.split(r'\\)?[, .]\\(?', line)\n# words = ['Specified', '', 'if', 'char', '', 'else', '10', 'default', '']\nseparators = re.findall(r'\\)?[, .]\\(?', line)\n# separators = [',', ' ', ' ', ',', ' ', ' ', ' (', ').']\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you really want tuples pass the results in tuple(), if you do not want words to have the empty entries (from between the commas and spaces), use the following:"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "tuple()", "tag": "a", "pos": 0, "childList": [{"text": "tuple()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#tuple"}, {"text": "tuple()", "childNum": 0, "tag": "code", "childList": []}, {"text": "words", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n words = [x for x in re.split(r'\\)?[, .]\\(?', line) if x]\n</code>\n</pre>\n", "senID": 2}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n words = tuple(x for x in re.split(r'\\)?[, .]\\(?', line) if x)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You can use regex for that."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a='Specified, if char, else 10 (default).'\n&gt;&gt;&gt; from re import split\n&gt;&gt;&gt; split(\",? ?\\(?\\)?\\.?\",a)\n['Specified', 'if', 'char', 'else', '10', 'default', '']\n</code>\n</pre>\n", "senID": 1}, {"text": ["But in this solution you should write that pattern yourself.", "If you want to use that tuple, you should convert it contents to regex pattern for that in this solution. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Regex to find all separators (assumed anything that's not alpha numeric"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nre.findall('[^\\w]', string)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I probably would first .split() on spaces into a list, then iterate through the list, using a regex to check for a character after the word boundary."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import re\ns = 'Specified, if char, else 10 (default).'\nw = s.split()\nseperators = []\nfinalwords = []\nfor word in words:\n    match = re.search(r'(\\w+)\\b(.*)', word)\n    sep = '' if match is None else match.group(2)\n    finalwords.append(match.group(1))\n    seperators.append(sep)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In pass to get both separators and words you could use findall as follows:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nline = 'Specified, if char, else 10 (default).'\nwords = []\nseps = []\nfor w,s in re.findall(\"(\\w*)([), .(]+)\", line):\n   words.append(w)\n   seps.append(s)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's my crack at it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; p = re.compile(r'(\\)? *[,.]? *\\(?)')\n&gt;&gt;&gt; tmp = p.split('Specified, char, else 10 (default).')\n&gt;&gt;&gt; words = tmp[::2]\n&gt;&gt;&gt; separators = tmp[1::2]\n&gt;&gt;&gt; print words\n['Specified', 'char', 'else', '10', 'default', '']\n&gt;&gt;&gt; print separators\n[', ', ', ', ' ', ' (', ').']\n</code>\n</pre>\n", "senID": 1}, {"text": ["The only problem is you can have a '' at the end or the beginning of words if there is a separator at the beginning/end of the sentence without anything before/after it.", "However, that is easily checked for and eliminated."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "''", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "words", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]]