[[{"text": ["Marijus, I'd recommend you to re-think the algorithm, that's a very weird way of solving the problem.", "It's much simpler, use the function max, a single iteration (a generator expression, for example), and try to do it without temporal variables.", "It can be elegantly solved in just 2/3 lines (in fact, you could do it with a single line, but the abstraction of the product function, for example, would be advisable, as you will use it in other Euler problems)"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "max", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "generator expression", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.network-theory.co.uk/docs/pytut/GeneratorExpressions.html"}, {"text": "product", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Multiplication#Capital_Pi_notation"}]}], [{"text": ["One thing that looks wrong: range(n, m) gives you the numbers from n inclusive to m exclusive, i.e.", "range(N, N+4) gives you the four next indices (the problem wants five consecutive digits)."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "range(n, m)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "to m exclusive", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "range(N, N+4)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "four", "childNum": 0, "tag": "em", "childList": []}, {"text": "five", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["I think you've misunderstood the problem.", "Where it says \"5 consecutive digits\", that only means 5 digits that come one right after another - you're not supposed to check that the values of the digits are consecutive (i.e.", "each one greater than the last).", "So throw away all the is_cons logic and just check the product of each 5-digit chunk."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "values of the digits", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "is_cons", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}], [{"text": ["I had worked out a solution that is inline with @tokland's post."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import islice\nfrom operator import mul\n\ndef max_product(num, length=5):\n    num_list = map(int, str(num))\n    num_slices = (islice(num_list, x, x+length) for x in xrange(0, len(num_list)-length))\n    return max(reduce(mul, y) for y in num_slices)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Itertool madness. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from itertools import izip, islice, imap, tee\nfrom operator import mul\n\ndef max_product(num, length=5):\n    num_lists = enumerate(tee(imap(int, str(num)), length))\n    digit_slices = izip(*[islice(num_list, ord, None) for ord, num_list in num_lists])\n    return max(reduce(mul, y) for y in digit_slices)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I agree with @tokeland, you probably need to rethink the algo.", "Also, as @delnan said, range(i,i+4) will give only 4 values.", "Here's a code that ought to do it "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n n = str([whatever number])\n maximum = 0\n for i in range(0,len(n)):\n     substr = n[i:i+5]\n     product = 1\n     for digit in substr:\n         product *= int(digit)\n         if product &gt; maximum:\n              maximum = product\n return maximum\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is my solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n number = '\\\n73167176531330624919225119674426574742355349194934\\\n96983520312774506326239578318016984801869478851843\\\n85861560789112949495459501737958331952853208805511\\\n12540698747158523863050715693290963295227443043557\\\n66896648950445244523161731856403098711121722383113\\\n62229893423380308135336276614282806444486645238749\\\n30358907296290491560440772390713810515859307960866\\\n70172427121883998797908792274921901699720888093776\\\n65727333001053367881220235421809751254540594752243\\\n52584907711670556013604839586446706324415722155397\\\n53697817977846174064955149290862569321978468622482\\\n83972241375657056057490261407972968652414535100474\\\n82166370484403199890008895243450658541227588666881\\\n16427171479924442928230863465674813919123162824586\\\n17866458359124566529476545682848912883142607690042\\\n24219022671055626321111109370544217506941658960408\\\n07198403850962455444362981230987879927244284909188\\\n84580156166097919133875499200524063689912560717606\\\n05886116467109405077541002256983155200055935729725\\\n71636269561882670428252483600823257530420752963450'\n\nprint max([reduce(lambda accum, x : accum * x, [int(x) for x in number[i:i+5]]) for i in range(len(number) - 5)])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["10&amp;#.", "5 {.", "(}.~ I.", "@(= >./)@(5&amp;(*/))) 10#.^:_1 number"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["is a J solution where number is the very long number as an extended integer."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It executes more or less from right to left, and parenthesis are used for two things - they pass along right arguments so that they can be used in more than one place, so that you don't have to create named intermediate variables, and to prioritize execution (of course, when an argument is passed in, it is clear that what is inside the parenthesis has to execute last, as opposed to first.", "J is a very interesting language, parenthesis mean both execute first and execute later.", "But in general, execution is right to left.", "The number is cracked into digits, and the sum product of each overlapping group of five digits is taken.", "The greatest sum-product is found and compared back against that vector to create a boolean vector, where the index of the comparison is found.", "The head of the original vector is then dropped, up to the index that was found.", "Then a five digit hunk of that is extracted, and those five digits are glued back together."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I think that problems as low as 8 are really designed just go get you going in Euler - they are simple, most of them are one liners in J."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I am not sure whether I did this as a one liner first time around  I may have with an intermediate named variable - but since I have done a few of these problems, I believe I know J a lot better than I did, and I can put a phrase together like this without much problem, I know where to put the parenthesis.", "In that, doing the euler exercises has been successful."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]