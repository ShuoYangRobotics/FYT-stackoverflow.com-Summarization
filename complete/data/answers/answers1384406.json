[[{"text": ["I can't believe any of the many answers gives what I'd consider the \"one obvious way to do it\" (and I'm not even Dutch...!-) -- up to just below 24 hours' worth of seconds (86399 seconds, specifically):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import time\n&gt;&gt;&gt; time.strftime('%H:%M:%S', time.gmtime(12345))\n'03:25:45'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Doing it in a Django template's more finicky, since the time filter supports a funky time-formatting syntax (inspired, I believe, from PHP), and also needs the datetime module, and a timezone implementation such as pytz, to prep the data.", "For example:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "time", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from django import template as tt\n&gt;&gt;&gt; import pytz\n&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; tt.Template('{{ x|time:\"H:i:s\" }}').render(\n...     tt.Context({'x': datetime.datetime.fromtimestamp(12345, pytz.utc)}))\nu'03:25:45'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Depending on your exact needs, it might be more convenient to define a custom filter for this formatting task in your app."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = datetime.timedelta(seconds=65)\ndatetime.timedelta(0, 65)\n&gt;&gt;&gt; str(a)\n'0:01:05'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Code that does what was requested, with examples, and showing how cases he didn't specify are handled:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def format_seconds_to_hhmmss(seconds):\n    hours = seconds // (60*60)\n    seconds %= (60*60)\n    minutes = seconds // 60\n    seconds %= 60\n    return \"%02i:%02i:%02i\" % (hours, minutes, seconds)\n\ndef format_seconds_to_mmss(seconds):\n    minutes = seconds // 60\n    seconds %= 60\n    return \"%02i:%02i\" % (minutes, seconds)\n\nminutes = 60\nhours = 60*60\nassert format_seconds_to_mmss(7*minutes + 30) == \"07:30\"\nassert format_seconds_to_mmss(15*minutes + 30) == \"15:30\"\nassert format_seconds_to_mmss(1000*minutes + 30) == \"1000:30\"\n\nassert format_seconds_to_hhmmss(2*hours + 15*minutes + 30) == \"02:15:30\"\nassert format_seconds_to_hhmmss(11*hours + 15*minutes + 30) == \"11:15:30\"\nassert format_seconds_to_hhmmss(99*hours + 15*minutes + 30) == \"99:15:30\"\nassert format_seconds_to_hhmmss(500*hours + 15*minutes + 30) == \"500:15:30\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can--and probably should--store this as a timedelta rather than an int, but that's a separate issue and timedelta doesn't actually make this particular task any easier."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can calculate the number of minutes and hours from the number of seconds by simple division:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n seconds = 12345\nminutes = seconds // 60\nhours = minutes // 60\n\nprint \"%02d:%02d:%02d\" % (hours, minutes % 60, seconds % 60)\nprint \"%02d:%02d\" % (minutes, seconds % 60)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here // is pythons integer division."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "//", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Have you read up on the datetime module?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "datetime", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/datetime.html"}]}, {"text": ["Edit/update: SilentGhost's answer has the details my answer leaves out.", "If you like this answer, +1 his as well (or instead).", "Reposted here:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edit/update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = datetime.timedelta(seconds=65)\ndatetime.timedelta(0, 65)\n&gt;&gt;&gt; str(a)\n'0:01:05'\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Besides the fact that Python has built in support for dates and times (see bigmattyh's response), finding minutes or hours from seconds is easy:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n minutes = seconds / 60\nhours = minutes / 60\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now, when you want to display minutes or seconds, MOD them by 60 so that they will not be larger than 59"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Not being a python person but easiest without any libraries just:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n total   = 3800\nseconds = total % 60\ntotal   = total - seconds\nhours   = total / 3600\ntotal   = total - (hours * 3600)\nmins    = total / 60\n</code>\n</pre>\n", "senID": 1}, {"text": ["Updated code, thanks sth"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Just be careful when dividing by 60: division between integers returns an integer ->\n12/60 = 0 unless you import division from future.", "The following is copy and pasted from Python 2.6.2:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n IDLE 2.6.2      \n&gt;&gt;&gt; 12/60\n0\n&gt;&gt;&gt; from __future__ import division\n&gt;&gt;&gt; 12/60\n0.20000000000000001\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you use divmod, you are immune to different flavors of integer division:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # show time strings for 3800 seconds\n\n# easy way to get mm:ss\nprint \"%02d:%02d\" % divmod(3800, 60)\n\n# easy way to get hh:mm:ss\nprint \"%02d:%02d:%02d\" % \\\n    reduce(lambda ll,b : divmod(ll[0],b) + ll[1:],\n        [(3800,),60,60])\n\n\n# function to convert floating point number of seconds to \n# hh:mm:ss.sss\ndef secondsToStr(t):\n    return \"%02d:%02d:%02d.%03d\" % \\\n        reduce(lambda ll,b : divmod(ll[0],b) + ll[1:],\n            [(t*1000,),1000,60,60])\n\nprint secondsToStr(3800.123)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Prints:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 63:20\n01:03:20\n01:03:20.123\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you need to do this a lot, you can precalculate all possible strings for number of seconds in a day:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    from itertools import product\nexcept ImportError:\n    def product(*seqs):\n        if len(seqs) == 2:\n            for s1 in seqs[0]:\n                for s2 in seqs[1]:\n                    yield (s1,s2)\n        else:\n            for s in seqs[0]:\n                for p in product(*seqs[1:]):\n                    yield (s,) + p\n\nhhmmss = {}\ni = 0\nfor (h,m,s) in product(range(24),range(60),range(60)):\n    hhmmss[i] = \"%02d:%02d:%02d\" % (h,m,s)\n    i += 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now conversion of seconds to format string is a fast dict lookup:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print hhmmss[12345]\n</code>\n</pre>\n", "senID": 3}, {"text": ["prints"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n '03:25:45'\n</code>\n</pre>\n", "senID": 5}]]