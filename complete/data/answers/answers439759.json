[[{"text": ["Look at Django."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com"}]}, {"text": ["Python code.", "A template language that permits some of the same features as PHP -- slightly different syntax."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Model is divorced from view functions (\"business rules\") and divorced from presentation.", "This is enforced throughout Django.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["One of the common questions is \"why can't I do -- some crazy PHP-like thing -- in the Django template?", "\"  The answer is that presentation is not processing.", "Do your processing in the Django view functions.", "Render the results as HTML in the template."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Also, Django has an ORM layer to divorce you from petty SQL considerations.", "MySQL or PostgreSQL are more-or-less equivalent from within Django."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "hr", "senID": 5}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["\"Maturity\" means a lot of things.", "You specifically mentioned skilled people as a sign of maturity."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Django is pure Python.", "If you can find Python people, they can learn Django in a few days.", "They just have to do the tutorials.  "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "ul", "num": 7, "lis": [{"text": ["A Django-powered site is usually Apache + some glue + Django.", "The glue can be mod_wsgi or mod_python or mod_fastcgi.", "You have to manage this configuration with some care because there are several moving parts.", "This, however, is the same Apache config problem you have with PHP -- nothing new here."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["A Django site has one or more Django server instances, each with a settings file, a URL mapping and any number of applications.", "Pure Python at this point."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["A Django application has URL mappings, model and views.", "All pure Python.", "Unit tested with the Django extensions to Python's own internal unittest framework."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["The model uses an ORM layer.", "This may, perhaps, be the single most confusing thing in Django.", "People sometimes design very odd models because they think either too high-level-uber-generic or they think too much in SQL.", "Django is a middle ground of mostly object-orientation with some SQL consideration.", "Get this, and you're unstoppable."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["A Django application may have templates, which are in their own template language.", "This would be about the only non-Python thing that's of much interest.", "You may want to add custom tags -- pure Python."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["You'll probably have JavaScript (also true for PHP and every other web application framework).", "Nothing new here."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"text": ["Since Django's admin application automatically handles basic CRUD processing, you don't have to write this.", "You are free to write all the transactional stuff you want.", "But you don't have to.", "This leads you to a very, very powerful hybrid."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}]}, {"text": ["Bottom line.", "Most of the skill set is Python.", "The ORM is -- syntactically -- Python, but requires some care in doing things simply and cleanly.", "The template is it's own language, but considerably simpler than PHP.", "The rest is SQL, Javascript, HTML, CSS, Apache and what-not."], "childNum": 0, "tag": "p", "senID": 16, "childList": []}, {"tag": "hr", "senID": 17}, {"text": ["Edit"], "childNum": 1, "tag": "p", "senID": 18, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Django Maturity"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["See http://www.djangoproject.com/community/ for the number of active projects.  "], "childNum": 1, "tag": "p", "senID": 20, "childList": [{"text": "http://www.djangoproject.com/community/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/community/"}]}, {"text": ["Join http://groups.google.com/group/django-users for daily flood of emails from users."], "childNum": 1, "tag": "p", "senID": 21, "childList": [{"text": "http://groups.google.com/group/django-users", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groups.google.com/group/django-users"}]}]}, {"text": ["The Django blog stretches back to '05, meaning they had years of solid experience before finally releasing 1.0 in September of '08.", "Development apparently began in '03."], "childNum": 0, "tag": "p", "senID": 22, "childList": []}], [{"text": ["I'm going to assume that by \"business application\" you mean a web application hosted in an intranet environment as opposed to some sort of SaaS application on the internet."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["While you're in the process of architecting your application you need to consider the existing infrastructure and infrastructure support people of your employer/customer.", "Also, if the company is large enough to have things such as \"approved software/hardware lists,\" you should be aware of those.", "Keep in mind that some elements of the list may be downright retarded.", "Don't let past mistakes dictate the architecture of your app, but in cases where they are reasonably sensible I would pick my battles and stick with your enterprise standard.", "This can be a real pain when you pick a development stack that really works best on Unix/Linux, and then someone tries to force onto a Windows server admined by someone who's never touched anything but ASP.NET applications."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Unless there is a particular PHP module that you intend to use that has no Python equivalent, I would drop PHP and use Django.", "If there is a compelling reason to use PHP, then I'd drop Python.", "I'm having difficulty imagining a scenario where you would want to use both at the same time."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["As for PG versus MySQL, either works.", "Look at what you customer already has deployed, and if they have a bunch of one and little of another, pick that.", "If they have existing Oracle infrastructure you should consider using it.", "If they are an SQL Server shop...reconsider your stack and remember to pick your battles."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I can only repeat what other peoples here already said : if you choose Python for the domain layer, you won't gain anything (quite on the contrary) using PHP for the presentation layer.", "Others already advised Django, and that might be a pretty good choice, but there's no shortage of good Python web frameworks."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I personally agree with the second and the third points in your post.", "Speaking about PHP, in my opinion you can use Python also for presentation, there are many solutions (Zope, Plone ...) based on Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Just skip PHP and use Python (with Django, as already noticed while I typed).", "Django already separates the layers as you mentioned."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I have never used PgSQL myself, but I think it's mostly a matter of taste whether you prefer it over MySQL.", "It used to support more enterprise features than MySQL but I'm not sure if that's still true with MySQL 5.0 and 5.1.", "Transactions are supported in MySQL, anyway (you have to use the InnoDB table engine, however)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Just to address the MySQL vs PgSQL issues - it shouldn't matter.", "They're both more than capable of the task, and any reasonable framework should isolate you from the differences relatively well.", "I think it's down to what you use already, what people have most experience in, and if there's a feature in one or the other you think you'd benefit from."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you have no preference, you might want to go with MySQL purely because it's more popular for web work.", "This translates to more examples, easier to find help, etc.", "I actually prefer the philosophy of PgSQL, but this isn't a good enough reason to blow against the wind."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Just to throw it out there... there are PHP frameworks utilizing MVC."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Codeigniter does simple and yet powerful things.", "You can definitely separate the template layer from the logic layer."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]