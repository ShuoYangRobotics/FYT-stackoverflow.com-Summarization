[[{"text": ["Python is whitespace sensitive, with regards to the leading whitespace."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["your code probably should be indented like"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import sys\nfrom sys import exit\nprint (\"MathCheats Times-Ed by jtl999\")\nnumbermodechoice = raw_input (\"Are you using a number with a decimal? yes/no \")\nif numbermodechoice == \"yes\":\n    try:\n        numberx1 = float(raw_input('Enter first number: '))\n        numberx2 = float(raw_input('Enter second number: '))\n    except ValueError:\n        print (\"Oops you typed it wrong\")\n        exit()\nelif numbermodechoice == \"no\":\n    print (\"Remember only numbers are allowed\")  \n    try:\n        numberx1 = (int)(raw_input('Enter first number: '))\n        numberx2 = (int)(raw_input('Enter second number: '))\n    except ValueError:\n        print (\"Oops you typed it wrong\")        \n        exit()\nelse:\n    print (\"Oops you typed it wrong\")\n    exit()\nprint (\"The answer was\") \nprint numberx1*numberx2\nostype = sys.platform\nif ostype == 'win32':\n    raw_input (\"Press enter to exit\")\nelif ostype == 'win64':\n    raw_input (\"Press enter to exit\")\n</code>\n</pre>\n", "senID": 2}], [{"text": ["In python, the indentation of your code is very important.", "The error you've shown us points here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if numbermodechoice == \"yes\":\n    try:\n    numberx1 = float(raw_input('Enter first number: '))\nexcept ValueError:\n    print (\"Oops you typed it wrong\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["All code that is part of a block must be indented.", "By starting a try block, the following line is part of that block and must be indented.", "To fix it, indent it!"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "try", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n if numbermodechoice == \"yes\":\n    try:\n        numberx1 = float(raw_input('Enter first number: '))\n    except ValueError:\n        print (\"Oops you typed it wrong\")\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You had a wrong syntax.", "It should be except ValueError: and not except: ValueError.", "Correct it for you in the question too."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "except ValueError:", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "except: ValueError", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["You need to indent the second print statement."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Indentation is important in Python.", "It's how you delimit blocks in that language."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The conversion to float is using an incorrect syntax.", "That syntax is valid for C/C++/Java, but not in Python.", "It should be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n numberx1 = float(raw_input('Enter first number: '))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which will be interpreted like float(\"2.3\"), which is a constructor for the float type being called with a string parameter.", "And, yes, the syntax is exactly the same for the function call, so you might even think the constructor is a function that returns an object."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "float(\"2.3\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"code": "<pre>\n<code>\n import sys\n\nclass YesOrNo(object):\n    NO_VALUES  = set(['n', 'no', 'f', 'fa', 'fal', 'fals', 'false', '0'])\n    YES_VALUES = set(['y', 'ye', 'yes', 't', 'tr', 'tru', 'true', '1'])\n\n    def __init__(self, val):\n        super(YesOrNo,self).__init__()\n        self.val = str(val).strip().lower()\n\n        if self.val in self.__class__.YES_VALUES:\n            self.val = True\n        elif val in self.__class__.NO_VALUES:\n            self.val = False\n        else:\n            raise ValueError('unrecognized YesOrNo value \"{0}\"'.format(self.val))\n\n    def __int__(self):\n        return int(self.val)\n\ndef typeGetter(dataType):\n    try:\n        inp = raw_input\n    except NameError:\n        inp = input\n\n    def getType(msg):\n        while True:\n            try:\n                return dataType(inp(msg))\n            except ValueError:\n                pass\n    return getType\n\ngetStr     = typeGetter(str)\ngetInt     = typeGetter(int)\ngetFloat   = typeGetter(float)\ngetYesOrNo = typeGetter(YesOrNo)\n\ndef main():\n    print(\"MathCheats Times-Ed by jtl999\")\n\n    isFloat = getYesOrNo(\"Are you using a number with a decimal? (yes/no) \")\n    get = (getInt, getFloat)[int(isFloat)]\n\n    firstNum = get('Enter first number: ')\n    secondNum = get('Enter second number: ')\n\n    print(\"The answer is {0}\".format(firstNum*secondNum))\n\nif __name__==\"__main__\":\n    main()\n    if sys.platform in ('win32','win64'):\n        getStr('Press enter to exit')\n</code>\n</pre>\n", "senID": 0}]]