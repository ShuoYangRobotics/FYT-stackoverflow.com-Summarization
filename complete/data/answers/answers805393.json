[[{"text": ["You have to use the connection utility in Django:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.db import connection\n\ncursor = connection.cursor()\ncursor.execute(\"SQL STATEMENT CAN BE ANYTHING\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["then you can fetch the data:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n cursor.fetchone()\n</code>\n</pre>\n", "senID": 3}, {"text": ["or:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n cursor.fetchall()\n</code>\n</pre>\n", "senID": 5}, {"text": ["More info here: http://docs.djangoproject.com/en/dev/topics/db/sql/"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://docs.djangoproject.com/en/dev/topics/db/sql/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/db/sql/"}]}], [{"text": ["Don't."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Seriously."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Move the stored procedure logic into your model where it belongs.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Putting some code in Django and some code in the database is a maintenance nightmare.", "I've spent too many of my 30+ years in IT trying to clean up this kind of mess.    "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["We (musicpictures.com / eviscape.com) wrote that django snippet but its not the whole story (actually that code was only tested on Oracle at that time)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Stored procedures make sense when you want to reuse tried and tested SP code or where one SP call will be faster than multiple calls to the database - or where security requires moderated access to the database - or where the queries are very complicated / multistep.", "We're using a hybrid model/SP approach against both Oracle and Postgres databases."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The trick is to make it easy to use and keep it \"django\" like.", "We use a make_instance function which takes the result of cursor and creates instances of a model populated from the cursor.", "This is nice because the cursor might return additional fields.", "Then you can use those instances in your code / templates much like normal django model objects."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def make_instance(instance, values):\n    '''\n    Copied from eviscape.com\n\n    generates an instance for dict data coming from an sp\n\n    expects:\n        instance - empty instance of the model to generate\n        values - dictionary from a stored procedure with keys that are named like the\n            model's attributes\n    use like:\n        evis = InstanceGenerator(Evis(), evis_dict_from_SP)\n\n    &gt;&gt;&gt; make_instance(Evis(), {'evi_id': '007', 'evi_subject': 'J. Bond, Architect'})\n    &lt;Evis: J. Bond, Architect&gt;\n\n    '''\n    attributes = filter(lambda x: not x.startswith('_'), instance.__dict__.keys())\n\n    for a in attributes:\n        try:\n            # field names from oracle sp are UPPER CASE\n            # we want to put PIC_ID in pic_id etc.\n            setattr(instance, a, values[a.upper()])\n            del values[a.upper()]\n        except:\n            pass\n\n    #add any values that are not in the model as well\n    for v in values.keys():\n        setattr(instance, v, values[v])\n        #print 'setting %s to %s' % (v, values[v])\n\n    return instance\n</code>\n</pre>\n", "senID": 3}, {"text": ["#  Use it like this:\n    pictures = [make_instance(Pictures(), item) for item in picture_dict]"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["#  And here are some helper functions:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def call_an_sp(self, var):\n    cursor = connection.cursor()\n    cursor.callproc(\"fn_sp_name\", (var,))\n    return self.fn_generic(cursor)\n\n\ndef fn_generic(self, cursor):\n    msg = cursor.fetchone()[0]\n    cursor.execute('FETCH ALL IN \"%s\"' % msg)\n    thing = create_dict_from_cursor(cursor)\n    cursor.close()\n    return thing\n\ndef create_dict_from_cursor(cursor):\n    rows = cursor.fetchall()\n    # DEBUG settings (used to) affect what gets returned. \n    if DEBUG:\n        desc = [item[0] for item in cursor.cursor.description]\n    else:\n        desc = [item[0] for item in cursor.description]\n    return [dict(zip(desc, item)) for item in rows]\n</code>\n</pre>\n", "senID": 6}, {"text": ["cheers, Simon."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Django Using Stored Procedure - will give some idea. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Django Using Stored Procedure", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangosnippets.org/snippets/118"}]}], [{"text": ["If you want to look at an actual running project that uses SP, check out minibooks.", "A good deal of custom SQL and uses Postgres pl/pgsql for SP.", "I think they're going to remove the SP eventually though (justification in trac ticket 92)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "minibooks", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://secure.caktusgroup.com/projects/minibooks/wiki"}, {"text": "trac ticket 92", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "https://secure.caktusgroup.com/projects/minibooks/ticket/92"}]}], [{"text": ["I guess the improved raw sql queryset support in Django 1.2 can make this easier as you wouldn't have to roll your own make_instance type code. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]