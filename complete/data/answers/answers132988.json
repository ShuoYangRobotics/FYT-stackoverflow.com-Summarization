[[{"text": ["is will return True if two variables point to the same object, == if the objects referred to by the variables are equal."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; b is a \nTrue\n&gt;&gt;&gt; b == a\nTrue\n&gt;&gt;&gt; b = a[:]\n&gt;&gt;&gt; b is a\nFalse\n&gt;&gt;&gt; b == a\nTrue\n</code>\n</pre>\n", "senID": 1}, {"text": ["In your case, the second test only works because Python caches small integer objects, which is an implementation detail.", "For larger integers, this does not work:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 1000 is 10**3\nFalse\n&gt;&gt;&gt; 1000 == 10**3\nTrue\n</code>\n</pre>\n", "senID": 3}, {"text": ["The same holds true for string literals:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"a\" is \"a\"\nTrue\n&gt;&gt;&gt; \"aa\" is \"a\" * 2\nTrue\n&gt;&gt;&gt; x = \"a\"\n&gt;&gt;&gt; \"aa\" is x * 2\nFalse\n&gt;&gt;&gt; \"aa\" is intern(x*2)\nTrue\n</code>\n</pre>\n", "senID": 5}, {"text": ["Please see this question as well."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "this question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none"}]}], [{"text": ["There is a simple rule of thumb to tell you when to use == or is."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "==", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": ["=="], "childNum": 0, "tag": "code", "senID": 1, "childList": []}, {"text": ["is"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}]}, {"text": ["In general, when you are comparing something to a simple type, you are usually checking for value equality, so you should use ==.", "For example, the intention of your example is probably to check whether x has a value equal to 2 (==), not whether x is literally referring to the same object as 2."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "value equality", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Something else to note: because of the way the CPython reference implementation works, you'll get unexpected and inconsistent results if you mistakenly use is to compare for reference equality on integers:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 500\n&gt;&gt;&gt; b = 500\n&gt;&gt;&gt; a == b\nTrue\n&gt;&gt;&gt; a is b\nFalse\n</code>\n</pre>\n", "senID": 5}, {"text": ["That's pretty much what we expected: a and b have the same value, but are distinct entities.", "But what about this?"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; c = 200\n&gt;&gt;&gt; d = 200\n&gt;&gt;&gt; c == d\nTrue\n&gt;&gt;&gt; c is d\nTrue\n</code>\n</pre>\n", "senID": 7}, {"text": ["This is inconsistent with the earlier result.", "What's going on here?", "It turns out the reference implementation of Python caches integer objects in the range -5..256 as singleton instances for performance reasons.", "Here's an example demonstrating this:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i in range(250, 260): a = i; print \"%i: %s\" % (i, a is int(str(i)));\n... \n250: True\n251: True\n252: True\n253: True\n254: True\n255: True\n256: True\n257: False\n258: False\n259: False\n</code>\n</pre>\n", "senID": 9}, {"text": ["This is another obvious reason not to use is: the behavior is left up to implementations when you're erroneously using it for value equality."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["== determines if the values are equivalent, while \"is\" determines if they are the exact same object. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Note that this is why if foo is None: is the preferred null comparison for python.", "All null objects are really pointers to the same value, which python sets aside to mean \"None\""], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "if foo is None:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["if x is True: and if x is False: also work in a similar manner.", "False and True are two special objects, all true boolean values are True and all false boolean values are False "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "if x is True:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if x is False:", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["http://docs.python.org/lib/comparisons.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/lib/comparisons.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/comparisons.html"}]}, {"text": ["is tests for identity\n== tests for equality"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Each (small) integer value is mapped to a single value, so every 3 is identical and equal.", "This is an implementation detail, not part of the language spec though"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Your answer is correct.", "The is operator compares the identity of two objects.", "The == operator compares the values of two objects."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["An object's identity never changes once it has been created; you may think of it as the object's address in memory."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You can control comparison behaviour of object values by defining a __cmp__ method or a rich comparison method like __eq__."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "__cmp__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/ref/customization.html", "text": "rich comparison", "childNum": 0, "tag": "a", "childList": []}, {"text": "__eq__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I believe this similar question might answer your question; http://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python"}]}], [{"text": ["They are completely different.", "is checks for object identity, while == checks for equality (a notion that depends on the two operands' types)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "completely different", "childNum": 0, "tag": "b", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["It is only a lucky coincidence that \"is\" seems to work correctly with small integers (e.g.", "5 == 4+1).", "That is because CPython optimizes the storage of integers in the range (-5 to 256) by making them singletons: http://www.python.org/doc/2.5/api/intObjects.html#l2h-381"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "http://www.python.org/doc/2.5/api/intObjects.html#l2h-381", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5/api/intObjects.html#l2h-381"}]}], [{"text": ["http://drj11.wordpress.com/2007/06/11/python-perils-of-\u00abx-is-1\u00bb/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://drj11.wordpress.com/2007/06/11/python-perils-of-", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://drj11.wordpress.com/2007/06/11/python-perils-of-"}]}], [{"text": ["have a look at http://stackoverflow.com/questions/306313/python-is-operator-behaves-unexpectedly-with-integers"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/306313/python-is-operator-behaves-unexpectedly-with-integers", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/306313/python-is-operator-behaves-unexpectedly-with-integers"}]}, {"text": ["what it mostly boils down to is that \"is\" checks to see if they are the same object, not just equal to each other (the numbers &lt;256 are a special case)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As John Feminella said, most of the time you will use == and != because your objective is to  compare values.", "I'd just like to categorise what you would do the rest of the time:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["There is one and only one instance of NoneType i.e.", "None is a singleton.", "Consequently foo == None and foo is None mean the same.", "However the is test is faster and the Pythonic convention is to use foo is None."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "foo == None", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "foo is None", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "childList": []}, {"text": "foo is None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you are doing some introspection or mucking about with garbage collection or checking whether your custom-built string interning gadget is working or suchlike, then you probably have a use-case for foo is bar."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "foo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "bar", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["True and False are also (now) singletons, but there is no use-case for foo == True and no use case for foo is True. "], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "foo == True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "foo is True", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["@Ryan, @John Machin: \"foo is None , foo is True, foo is False\" maybe faster and even popular idioms, but I would never rely on such a hidden implementation detail such as singletons/value caching.", "This is a useful optimization though, but binding your code to it can be a pain when using a language implementation that does not have the same implementation detail, and that could be reasonably possible.", "Torsten and John Fermilla pointed to this detail as a CPython detail indeed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["@John Machin: \"Consequently foo == None and foo is None mean the same.", "\" : I would have said \"they mean different but they behave the same\".", "As you know a computer is very \"pedantic\" so I would say precise wording can be a proper attribute of a programmer.", "Please take this has an hint, as I would, and not \"personally\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]