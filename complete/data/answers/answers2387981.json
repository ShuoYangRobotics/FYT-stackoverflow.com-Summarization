[[{"code": "<pre>\n<code>\n list1=[1,2,3,4]\nlist2=[1,5,3,4]\nprint [(i,j) for i,j in zip(list1,list2) if i!=j]\n</code>\n</pre>\n", "senID": 0}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [(2, 5)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Edit: Easily extended to skip n first items (same output):"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "n", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n list1=[1,2,3,4]\nlist2=[2,5,3,4]\nprint [(i,j) for i,j in zip(list1,list2)[1:] if i!=j]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["edit: oops, didn't see the \"ignore first item\" part"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import islice,izip\n\nfor a,b in islice(izip(list1,list2),1,None):\n    if a != b:\n       print a, b\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There's a nice class called difflib.SequenceMatcher in the standard library for that."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "difflib.SequenceMatcher", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You could use sets:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; list1=[1,2,3,4]\n&gt;&gt;&gt; list2=[1,5,3,4]\n&gt;&gt;&gt; set(list1[1:]).symmetric_difference(list2[1:])\nset([2, 5])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Noting the requirement to skip the first line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import izip\nboth = izip(list1,list2)\nboth.next()  #skip the first\nfor p in (p for p in both if p[0]!=p[1]):\n   print pair\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Nobody's mentioned filter:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = [1, 2, 3]\nb = [42, 3, 4]\n\naToCompare = a[1:]\nbToCompare = b[1:]\n\nc = filter( lambda x: (not(x in aToCompare)), bToCompare)\nprint c\n</code>\n</pre>\n", "senID": 1}]]