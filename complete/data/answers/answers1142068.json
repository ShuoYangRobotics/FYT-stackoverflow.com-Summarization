[[{"text": ["You've a couple of options.", "First, note that g in your example isn't actually a local to the function (ie.", "not assigned within it), it's a global (ie hasn't been assigned to a local variable).", "This means that it will be looked up in the module the function is defined in.", "This is fortunate, as there's no way of altering locals externally (short of patching the bytecode), as they get assigned when the function runs, not before."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One option is simply to inject your function into the function's module's namespace.", "This will work, but will affect every function in that module that accesses the variable, rather than just the one function."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To affect just the one function, you need to instead point that func_globals somewhere else.", "Unfortunately, this is a read-only property, but you can do what you want by recreating the function with the same body, but a different global namespace:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import new\nf = new.function(f.func_code, {'g': my_g_function}, f.func_name, f.func_defaults, f.func_closure)\n</code>\n</pre>\n", "senID": 3}, {"text": ["f will now be indentical, except that it will look for globals in the provided dict.", "Note that this rebinds the whole global namespace - if there are variables there that f does look up, make sure you provide them too.", "This is also fairly hacky though, and may not work on versions of python other than cpython."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "does", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["Why don't you just add an argument to f() and pass a reference to g()?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "f()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "g()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def g():\n    pass\n\ndef f(func):\n    func()\n\nf(g)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Since the function isn't invoked, it has no \"local\" stack frame, yet.", "The most simple solution is to use a global context:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n handler = None\ndef f():\n    handler()\n\ndef g(): pass\n\nhandler = g\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or you could set g on the function object:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n f.g = g\n</code>\n</pre>\n", "senID": 3}, {"text": ["But I'm not sure how you can get the function object from within the function itself.", "If it was a method, you would use self."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["A function that's not executing doesn't have any locals; the local context is created when you run the function, and destroyed when it exits, so there's no \"local namespace\" to modify from outside the function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can do something like this, though:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def f():\n    g = [1]\n    def func():\n        print g[0]\n    return func, g\n\nf, val = f()\nf()\nval[0] = 2\nf()\n</code>\n</pre>\n", "senID": 2}, {"text": ["This uses an array to simulate a reference."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I assume you want to do this, because the function f is defined not by you, but by some other module.", "So you want to change how f() works.", "In particular, you want to change what is called when g is called."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So I'll suggest this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import thirdpartypackage\n\ndef mynewg():\n   pass\n\nthirdpartypackage.g = mynewg\n</code>\n</pre>\n", "senID": 2}, {"text": ["This will change the global g for the module thirdpartypackage.", "So when thirdpartypackage.f() now is called, it will call mynewg() instead of g()."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If this doesn't solve it, maybe g() is in fact imported from withing f(), or somthing.", "Then the solution is this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import thirdpartypackage\n\ndef mynewg():\n   pass\n\ndeg mynewf():\n   mynewg()\n\nthirdpartypackage.f = mynewf\n</code>\n</pre>\n", "senID": 5}, {"text": ["That is, you override f() completely with a modified version that does what you want it to."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["I think you could solve the problem tackling it from a completely different point.", "Functions are object, with their dictionaries; therefore, you can add g to f, and use it:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def g():\n   print \"g\"\n\ndef f():\n    f.g()\n\nf.g = g\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This seems to work"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def add_to_locals(l):\n    l['newlocal'] = 1\n\nadd_to_locals(locals())\nassert newlocal\n</code>\n</pre>\n", "senID": 1}]]