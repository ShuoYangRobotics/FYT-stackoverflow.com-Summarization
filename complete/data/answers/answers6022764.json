[[{"text": ["You could always iterate over a copy of the list, leaving you free to modify the original:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for item in list(somelist):\n  ...\n  somelist.remove(item)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Alternatively:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n toremove = []\nfor n, item in enumerate(somelist):\n  ..\n  toremove.append(n)\nmap(somelist.pop, toremove)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can still use filter, moving to an outside function the element modification (iterating just once)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def do_the_magic(x):\n    do_action(x)\n    return check(x)\n\n# you can get a different filtered list\nfilter(do_the_magic,yourList)\n\n# or have it modified in place (as suggested by Steven Rumbalski, see comment)\nyourList[:] = itertools.ifilter(do_the_magic, yourList)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["List comp:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n results = [x for x in (do_action(element) for element in somelist) if check(element)]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n for element in somelist:\n    do_action(element)\nsomelist[:] = (x for x in somelist if not check(x))\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you really need to do it in one pass without copying the list"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n i=0\nwhile i &lt; len(somelist):\n    element = somelist[i] \n    do_action(element)\n    if check(element):\n        del somelist[i]\n    else:\n        i+=1\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You can make a generator that returns everything that isn't removed:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def newlist(somelist):\n    for element in somelist:\n        do_action(element)\n        if not check(element):\n            yield element\n</code>\n</pre>\n", "senID": 1}], [{"text": ["To meet these criteria: modify original list in situ, no list copies, only one pass, works, a traditional solution is to iterate backwards:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "works", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "backwards", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n for i in xrange(len(somelist) - 1, -1, -1):\n    element = somelist[i]\n    do_action(element)\n    if check(element):\n        del somelist[i]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Bonus: Doesn't do len(somelist) on each iteration.", "Works on any version of Python (at least as far back as 1.5.2) ... s/xrange/range/ for 3.X."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "len(somelist)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Update: If you want to iterate forwards, it's possible, just trickier and uglier:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "forwards", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n i = 0\nn = len(somelist)\nwhile i &lt; n:\n    element = somelist[i]\n    do_action(element)\n    if check(element):\n        del somelist[i]\n        n = n - 1\n    else:\n        i = i + 1\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Why not rewrite it to be "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for element in somelist: \n   do_action(element)  \n\nif check(element): \n    remove_element_from_list\n</code>\n</pre>\n", "senID": 1}, {"text": ["See this question for how to remove from the list, though it looks like you've already seen that\nRemove items from a list while iterating in Python"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Remove items from a list while iterating in Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1207406/remove-items-from-a-list-while-iterating-in-python"}]}, {"text": ["Another option is to do this if you really want to keep this the same"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n newlist = [] \nfor element in somelist: \n   do_action(element)  \n\n   if not check(element): \n      newlst.append(element)\n</code>\n</pre>\n", "senID": 4}]]