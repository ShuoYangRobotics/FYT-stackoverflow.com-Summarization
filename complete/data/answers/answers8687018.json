[[{"code": "<pre>\n<code>\n import string\n\"abaababb\".translate(string.maketrans(\"ab\", \"ba\"))\n# result: 'babbabaa'\n</code>\n</pre>\n", "senID": 0}, {"text": ["Note that this only works for one-character substitutions."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For longer substrings or substitutions, this is a bit complex, but might work:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import re\n\ndef replace_all(repls, str):\n    # return re.sub('|'.join(repls.keys()), lambda k: repls[k.group(0)], str)                                     \n    return re.sub('|'.join(re.escape(key) for key in repls.keys()),\n                  lambda k: repls[k.group(0)], str)                                     \n\n\ntext =  \"i like apples, but pears scare me\"\nprint replace_all({\"apple\": \"pear\", \"pear\": \"apple\"}, text)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Unfortunately this won't work if you include any regexp special characters you can't use regexps this way :("], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "this won't work if you include any regexp special characters", "childNum": 0, "tag": "s", "pos": 0, "childList": []}]}, {"text": ["(Thanks @TimPietzcker)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["When you need to swap variables, say x and y, a common pattern is to introduce a temporary variable t to help with the swap:  t = x; x = y; y = t."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "x", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "y", "childNum": 0, "tag": "em", "childList": []}, {"text": "t", "childNum": 0, "tag": "em", "childList": []}, {"text": "t = x; x = y; y = t", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The same pattern can also be used with strings:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; # swap a with b\n&gt;&gt;&gt; 'obama'.replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')\n'oabmb'\n</code>\n</pre>\n", "senID": 2}, {"text": ["This technique isn't new.", "It is described in PEP 378 as a way to convert between American and European style decimal separators and thousands separators (for example from 1,234,567.89 to 1.234.567,89.", "Guido has endorsed this as a reasonable technique."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "1,234,567.89", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "1.234.567,89", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["If you are OK with two lines, this is more elegant."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d={'a':'b','b':'a'}\n''.join(d[s] for s in \"abaababbd\" if s in d.keys())\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n the_string=\"ab\"\nnew_string=\"\"\n\nfor x in range(len(the_string)):\n    if the_string[x]=='a':\n        new_string+='b'\n        continue\n    if the_string[x]=='b':\n        new_string+='a'\n        continue\n    new_string+=the_string[x]\n\nthe_string=new_string\n\nprint the_string\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Your example is a little bit abstract but in the past I've used this recipe which builds a regular expression to do single-pass multiple replace.", "Here's my tweaked version of it:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this recipe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/81330-single-pass-multiple-replace/"}]}, {"code": "<pre>\n<code>\n import re \n\ndef multiple_replace(dict, text): \n  regex = re.compile(\"|\".join(map(re.escape, dict.keys())))\n  return regex.sub(lambda mo: dict[mo.group(0)], text)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that the keys (searchstrings) are re.escaped."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In your case it would be:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from utils import multiple_replace\n\nprint multiple_replace({\n    \"a\": \"b\",\n    \"b\": \"a\"\n}, \"ab\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["UPDATE:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["By now this is basically the same as Amadan's answer"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Amadan's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/a/8687035/63736"}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.sub('.', lambda m: {'a':'b', 'b':'a'}.get(m.group(), m.group()), 'abc')\n'bac'\n</code>\n</pre>\n", "senID": 0}]]