[[{"text": ["If no matter what you use as a delimiter, there is a chance that the item itself contains the delimiter character, then use the csv module:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html#module-csv"}]}, {"code": "<pre>\n<code>\n import csv\n\nclass PseudoFile(object):\n    # http://stackoverflow.com/a/8712426/190597\n    def write(self, string):\n        return string\nwriter = csv.writer(PseudoFile())\n</code>\n</pre>\n", "senID": 1}, {"text": ["This concatenates the items in a using commas:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n a = ['1',\",2\",\"3,\"]\nline = writer.writerow(a)\nprint(line)\n# 1,\",2\",\"3,\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["This recovers a from line:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "line", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n print(next(csv.reader([line])))\n# ['1', ',2', '3,']\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Do you have to use comas to separate the items?", "Else you could also use another symbol that is not used in the items of the list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [1]: '|'.join(['1', ',2', '3,']).split('|')\nOut[1]: ['1', ',2', '3,']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: The string may apparently contain any character.", "Is it an option to use the json module?", "You could just dump and load the list."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "any", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "json", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n In [3]: json.dumps(['1', ',2', '3,'])\nOut[3]: '[\"1\", \",2\", \"3,\"]'\n\nIn [4]: json.loads('[\"1\", \",2\", \"3,\"]')\nOut[4]: [u'1', u',2', u'3,']\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit #2: If you may not use it, you could use str.encode('string-encode') to escape the characters in your string and then enclose the encoded version into single quotes and separate those with comas:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "str.encode('string-encode')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n In [10]: print \"'example'\".encode('string-escape')\n\\'example\\' #' (have to close the opened string for stackoverflow\n\nIn [11]: print r\"\\'example\\'\".decode('string-escape')\n'example'\n</code>\n</pre>\n", "senID": 5}, {"text": ["Edit #3: Running example of str.encode('string-encode'):"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "str.encode('string-encode')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import re\n\ndef list_to_str(list):\n    return ','.join(\"'{}'\".format(s.encode('string-escape')) for s in list)\n\ndef str_to_list(str):\n    return re.findall(r\"'([^']*)'\", str)\n\nif __name__ == '__main__':\n    a = ['1', ',2', '3,']\n    b = list_to_str(a)\n    print 'It is {} that this works.'.format(str_to_list(b) == a)\n</code>\n</pre>\n", "senID": 7}], [{"text": ["When you are serializing a list to a String, then you need to choose as a separator a character that doesn't appear in the list items.", "Can't you just replace the comma with another character?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b = \";\".join(a)\nb.split(';')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Does the delimiter need to be only a single character?", "If not then you can use a delimiter made up of a sequence of characters that definitley wont appear in your string, like |#| or something similar."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You need to escape the comma and probably also escape the escape sequence.", "Here's one way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = ['1',\",2\",\"3,\"]\n&gt;&gt;&gt; b = ','.join(s.replace('%', '%%').replace(',', '%2c') for s in a)\n&gt;&gt;&gt; [s.replace('%2c', ',').replace('%%', '%') for s in b.split(',')]\n['1', ',2', '3,']\n&gt;&gt;&gt; b\n'1,%2c2,3%2c'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I would join and split using another character than \",\", e.g.", "\";\":"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "\",\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\";\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; b = \";\".join(a)\n&gt;&gt;&gt; b.split(';')\n['1', ',2', '3,']\n</code>\n</pre>\n", "senID": 1}]]