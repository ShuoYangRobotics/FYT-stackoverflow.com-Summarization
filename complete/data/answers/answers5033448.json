[[{"text": ["The expression, \"y\" or \"yes\" will evaluate to \"y\".", "What you want is:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "\"y\" or \"yes\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"y\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n if answer in ('y', 'yes'):\n    return True\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'm not a Python expert, but I suspect in answer2 it should be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if answer == \"y\" or answer == \"yes\":  # &lt;- notice the extra: or \"yes\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["In other words, I suspect it's currently parsing it as:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if (answer == \"y\") or (\"yes\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["and just converting \"yes\" into True, effectively... which is why it's always returning True."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You want"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if answer == \"y\" or answer == \"yes\":\n</code>\n</pre>\n", "senID": 1}, {"text": ["you have to test it that way."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Or better still, have a list of affirmative responses and test inclusion;"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n affirmatives = [\"yes\",\"y\",\"ja\",\"oui\"]\nif answer in affirmatives:\n</code>\n</pre>\n", "senID": 4}, {"text": ["It's all to do with boolean (True/False) operators.", "Check out the following:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"yes\" == \"yes\" or \"fnord\"\nTrue\n&gt;&gt;&gt; \"no\" == \"yes\" or \"fnord\"\n'fnord'\n</code>\n</pre>\n", "senID": 6}, {"text": ["If the first part is True, you get True - if the first part is False, you get the right-hand side of the 'or'.", "Now, by having:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n answer == \"y\" or answer == \"yes\"\n</code>\n</pre>\n", "senID": 8}, {"text": ["you can see how if the first == returns False it returns the second == test..."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["you need to say:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if answer == \"y\" or answer == \"yes\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["how you did it evaluates as:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if (answer == \"y\") or \"yes\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["which will always be true as \"yes\" is a non-empty string."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n if answer == \"y\" or \"yes\":\n</code>\n</pre>\n", "senID": 0}, {"text": ["Note that this is different that:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if answer == \"y\" or answer == \"yes\":\n</code>\n</pre>\n", "senID": 2}, {"text": ["Because \"yes\" is a non-zero value, the first one will always return True."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Here's the issue:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n answer == 'y' or 'yes'\n</code>\n</pre>\n", "senID": 1}, {"text": ["is always going to return True or 'yes' (effectively True since it is not 0 or None),because it's being evaluated as:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if (answer == 'y') or 'yes'\n</code>\n</pre>\n", "senID": 3}, {"text": ["so you are always going to trigger the 'if' block and return True. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Lots of people have explained the problem, so I won't repeat their explanation; but note that this is the (IMO) best way to test for multiple equivalent phrases:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def answer(response):\n    return response.upper() in [\"Y\", \"YES\", \"TRUE\", \"T\"] # and so on\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: or even better:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def answer2(response):\n    return any(s.startswith(response.upper()) for s in [\"YES\", \"TRUE\"])\n</code>\n</pre>\n", "senID": 3}]]