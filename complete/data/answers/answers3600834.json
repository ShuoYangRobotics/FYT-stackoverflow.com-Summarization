[[{"text": ["This is one way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n words = ['string_1', 'string_2', ...]\n\nif any(word in var_string for word in words):\n    do_something()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Reference: any()"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "any()", "tag": "a", "pos": 0, "childList": [{"text": "any()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#any"}, {"text": "any()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Update:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["For completeness, if you want to execute the function only if all words are contained in the string, you can use all() instead of any()."], "childNum": 5, "tag": "p", "senID": 4, "childList": [{"text": "all", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/functions.html#all", "text": "all()", "childNum": 2, "tag": "a", "childList": [{"text": "all()", "tag": "strong"}, {"text": "all()", "tag": "code"}]}, {"text": "all()", "childNum": 1, "tag": "strong", "childList": [{"text": "all()", "tag": "code"}]}, {"text": "all()", "childNum": 0, "tag": "code", "childList": []}, {"text": "any()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also note that this construct won't do any unnecessary computations as any will return if it encounters a true value and a generator expression is used to create the Boolean values.", "So you also have some kind of short-circuit evaluation that is normally used when evaluating Boolean expressions."], "childNum": 5, "tag": "p", "senID": 5, "childList": [{"text": "any", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "true", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "generator expression", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0289/"}, {"text": "short-circuit evaluation", "childNum": 1, "tag": "em", "pos": 1, "childList": [{"text": "short-circuit evaluation", "tag": "a"}]}, {"href": "http://en.wikipedia.org/wiki/Short-circuit_evaluation", "text": "short-circuit evaluation", "childNum": 0, "tag": "a", "childList": []}]}], [{"code": "<pre>\n<code>\n import re\nif re.search(\"string_1|string_2|string_n\", var_strings): print True\n</code>\n</pre>\n", "senID": 0}, {"text": ["The beauty of python regex it that it returns either a regex object (that gives informations on what matched) or None, that can be used as a \"false\" value in a test."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["With regex that would be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nwords = ['string_1', 'string_2', ...]\n\nif re.search('|'.join([re.escape(w) for w in words]), var_string):\n    blahblah\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Have you looked at filter?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n filter( lambda x: x in var_string, [\"myString\", \"nextString\"])\n</code>\n</pre>\n", "senID": 1}, {"text": ["which then can be combined with map to get this"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n map( doSomething(), filter(lambda x: x in var_string, [\"myString\", \"nextString\"] ) )\n</code>\n</pre>\n", "senID": 3}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["of course that doesn't do what you want.", "Go with the any solution.", "For some reason I thought you wanted it done every time instead of just once."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "any", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["one more way to achieve this\ncheck = lambda a: any(y for y in ['string_%s'%x for x in xrange(0,10)] if y in a)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "check = lambda a: any(y for y in ['string_%s'%x for x in xrange(0,10)] if y in a)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["print check('hello string_1')"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "print check('hello string_1')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; string=\"word1testword2andword3last\"\n&gt;&gt;&gt; c=re.compile(\"word1|word2|word3\")\n&gt;&gt;&gt; c.search(string)\n&lt;_sre.SRE_Match object at 0xb7715d40&gt;\n&gt;&gt;&gt; string=\"blahblah\"\n&gt;&gt;&gt; c.search(string)\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}]]