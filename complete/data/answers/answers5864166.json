[[{"text": ["I'm only answering this again, because I notice that your subject already states the problem, and nobody's given a.. theoretical explanation, here.. theoretical being too big a word in this case, but whatever."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Your problem is, precisely, that you're putting the return statement inside the for-loop.", "The for-loop runs each statement in it for however so many times.. if one of your statements is a return, then the function will return when it hits it.", "This makes sense in, for example, the following case:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def get_index(needle, haystack):\n    for x in range(len(haystack)):\n        if haystack[x] == needle:\n            return x\n</code>\n</pre>\n", "senID": 2}, {"text": ["Here, the function iterates until it finds where the needle is in the haystack, and then returns that index (there's a builtin function to do this, anyways).", "If you want the function to run for however many times you tell it to, you have to put the return AFTER the for-loop, not inside it, that way, the function will return after the control gets off the loop"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def add(numbers):\n    ret = 0\n    for x in numbers:\n        ret = ret + x\n\n    return ret\n</code>\n</pre>\n", "senID": 4}, {"text": ["(once again, there's a builtin function to do this as well)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You just need to return the pet_list outside of the for loop, so it will happen after the loop has finished running."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pet_list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def make_list():\n    pet_list = []\n\n    print 'Enter data for three pets.'\n    for count in range (1, 4):\n        print 'Pet number ' + str(count) + ':'\n        name = raw_input('Enter the pet name:')\n        animal=raw_input('Enter the pet animal type:')\n        age=raw_input('Enter the pet age:')\n        print\n\n        pet = pet_class.PetName(name,animal,age)\n        pet_list.append(pet)\n\n    return pet_list\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Remove one indent before the return."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You have the return statement at the incorrect level of indentation.", "It should be at the same depth as the for statement.", "Having the return within the loop causes it to break out of the loop. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Your return is in your for loop.", "-1 tab. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Your spacing is off.", "return pet_list is in the scope of the for loop."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]