[[{"text": ["defaultdict makes this easy:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "defaultdict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html#defaultdict-examples"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import defaultdict\n\n&gt;&gt;&gt; seq = [2,4,5,2,4,6,3,8,9,3,7,2,47,2]\n\n&gt;&gt;&gt; seqDic = defaultdict(int)\n\n&gt;&gt;&gt; for v in seq:\n...     seqDic[v] += 1\n\n&gt;&gt;&gt; print seqDic\ndefaultdict(&lt;type 'int'&gt;, {2: 4, 3: 2, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 47: 1})\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'm not really sure what you try to do .. count how often each number appears?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #arbitrary sequence of numbers\nseq = [2,4,5,2,4,6,3,8,9,3,7,2,47,2]\n\n#dictionary counting number of occurances\nseqDic = {}\n\n### what you want to do, spelled out\nfor number in seq:\n    if number in seqDic: # we had the number before\n        seqDic[number] += 1\n    else: # first time we see it\n        seqDic[number] = 1\n\n#### or:\nfor number in seq:\n    current = seqDic.get(number, 0) # current count in the dict, or 0\n    seqDic[number] = current + 1\n\n### or, to show you how setdefault works\nfor number in seq:\n    seqDic.setdefault(number, 0) # set to 0 if it doesnt exist\n    seqDic[number] += 1 # increase by one\n\nprint \"orig:\", seq\nprint seqDic\n</code>\n</pre>\n", "senID": 1}], [{"text": ["defaultdict is not dict (it's a subclass, and may do too much of the work for you to help you learn via this exercise), so here's a simple way to do it with plain dict:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "defaultdict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n dv = list()\n# arbitrary sequence of numbers\nseq = [2,4,5,2,4,6,3,8,9,3,7,2,47,2]\n\n# dictionary counting number of occurances\nseqDic = { }\n\nfor i in seq:\n  if i in seqDic:\n    seqDic[i] += 1\n  else:\n    dv.append(i)\n    seqDic[i] = 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["this simple approach works particularly well here because you need the if i in seqDic test anyway for the purpose of building dv as well as seqDic.", "Otherwise, simpler would be:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "if i in seqDic", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dv", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "seqDic", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n for i in seq:\n  seqDic[i] = 1 + seqDic.get(i, 0)\n</code>\n</pre>\n", "senID": 3}, {"text": ["using the handy method get of dict, which returns the second argument if the first is not a key in the dictionary.", "If you like this idea, here's a solution that also builds dv:"], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "get", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "also", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "dv", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for i in seq:\n  seqDic[i] = 1 + seqDic.get(i, 0)\n  if seqDic[i] == 1: dv.append(i)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Edit: If you don't case about the order of items in dv (rather than wanting dv to be in the same order as the first occurrence of item in seq), then just using (after the simple version of the loop)"], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "dv", "childNum": 0, "tag": "code", "childList": []}, {"text": "dv", "childNum": 0, "tag": "code", "childList": []}, {"text": "seq", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n dv = seqDic.keys()\n</code>\n</pre>\n", "senID": 7}, {"text": ["also works (in Python 2, where .keys returns a list), and so does"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": ".keys", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n dv = list(seqDic)\n</code>\n</pre>\n", "senID": 9}, {"text": ["which is fine in both Python 2 and Python 3.", "Under the same hypothesis (that you don't care about the order of items in dv) there are also other good solutions, such as"], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "and", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "dv", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n seqDic = dict.fromkeys(seq, 0)\nfor i in seq: seqDic[i] += 1\ndv = list(seqDic)\n</code>\n</pre>\n", "senID": 11}, {"text": ["here, we first use the fromkeys class method of dictionaries to build a new dict which already has 0 as the value corresponding to each key, so we can then just increment each entry without such precautions as .get or membership checks."], "childNum": 3, "tag": "p", "senID": 12, "childList": [{"text": "fromkeys", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}, {"text": ".get", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["How about this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #arbitrary sequence of numbers\nseq = [2,4,5,2,4,6,3,8,9,3,7,2,47,2]\n\n#dictionary counting number of occurances\nseqDic = { }\n\nfor v in seq:\n    if v in seqDic:\n        seqDic[v] += 1\n    else:\n        seqDic[v] = 1\n\ndv = seqDic.keys()\n\nprint \"orig:\", seq\nprint \"new: \", dv\nprint seqDic\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's clean and I think it demonstrates what you are trying to learn how to do in a simple manner.", "It is possible to do this using defaultdict as others have pointed out, but knowing how to do it this way is instructive too."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Or, if you use Python3, you can use collections.Counter, which is essentially a dict, albeit subclassed."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "collections.Counter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; seq = [2,4,5,2,4,6,3,8,9,3,7,2,47,2]\n&gt;&gt;&gt; Counter(seq)\nCounter({2: 4, 3: 2, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 47: 1}\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n for v in seq:\n    try:\n        seqDic[v] += 1\n    except KeyError:\n        seqDic[v] = 1\n</code>\n</pre>\n", "senID": 0}, {"text": ["That's the way I've always done the inner loop of things like this."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Apart from anything else, it's significantly faster than testing membership before working on the element, so if you have a few hundred thousand elements it saves a lot of time."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]