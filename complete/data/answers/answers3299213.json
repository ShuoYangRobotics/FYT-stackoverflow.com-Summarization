[[{"text": ["You can manage the position in the file thanks to the seek and tell methods of the file class see http://docs.python.org/library/stdtypes.html#file-objects"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "seek", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tell", "childNum": 0, "tag": "code", "childList": []}, {"text": "file", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/stdtypes.html#file-objects", "text": "http://docs.python.org/library/stdtypes.html#file-objects", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["The tell method will tell you where to seek next time you open"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "tell", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n log = open('myfile.log')\npos = open('pos.dat','w')\nprint log.readline()\npos.write(str(f.tell())\nlog.close()\npos.close()\n\nlog = open('myfile.log')\npos = open('pos.dat')\nlog.seek(int(pos.readline()))\nprint log.readline()\n</code>\n</pre>\n", "senID": 0}, {"text": ["Of course you shouldn't use it like that - you should wrap the operations up in functions like save_position(myfile) and load_position(myfile), but the functionality is all there."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "save_position(myfile)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "load_position(myfile)", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If your logfiles fit easily in memory (this is, you have a reasonable rotation policy) you can easily do something like:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "If your logfiles fit easily in memory", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n log_lines = open('logfile','r').readlines()\nlast_line = get_last_lineprocessed() #From some persistent storage\nlast_line = parse_log(log_lines[last_line:])\nstore_last_lineprocessed(last_line)\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you cannot do this, you can use something like (see accepted answer's use of seek and tell, in case you need to do it with them) http://stackoverflow.com/questions/136168/get-last-n-lines-of-a-file-with-python-similar-to-tail"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://stackoverflow.com/questions/136168/get-last-n-lines-of-a-file-with-python-similar-to-tail", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/136168/get-last-n-lines-of-a-file-with-python-similar-to-tail"}]}], [{"text": ["If you're parsing your log line per line, you could juste save line number from the last parsing.", "You would juste have then to start read it from the good line the next time."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Seeking is more usefull when you have to be in a very specific place in the file."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Easy but not recommended :):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n last_line_processed = get_last_line_processed()    \nwith open('file.log') as log\n    for record_number, record in enumerate(log):\n        if record_number &gt;= last_line_processed:\n            parse_log(record)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Note that you can seek() in python from the end of the file: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f.seek(-3, os.SEEK_END)\n</code>\n</pre>\n", "senID": 1}, {"text": ["puts the read position 3 lines from the EOF."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["However, why not use diff, either from the shell or with difflib?"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "difflib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/difflib.html"}]}], [{"text": ["Here is code proving using the length sugestion of yours and the tell methond:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n beginning=\"\"\"line1\nline2\nline3\"\"\"\n\nend=\"\"\"- The log will open from this point\nline4\nline5\"\"\"\n\nopenfile= open('log.txt','w')\nopenfile.write(beginning)\nendstarts=openfile.tell()\nopenfile.close()\n\nopen('log.txt','a').write(end)\nprint open('log.txt').read()\n\nprint(\"\\nAgain:\")\nend2 = open('log.txt','r')\nend2.seek(len(beginning))\n\nprint end2.read()  ## wrong by two too little because of magic newlines in Windows\nend2.seek(endstarts)\n\nprint \"\\nOk in Windows also\"\nprint end2.read()\nend2.close()\n</code>\n</pre>\n", "senID": 1}]]