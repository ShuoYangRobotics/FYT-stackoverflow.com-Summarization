[[{"text": ["Use a list comprehension:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [ a*a for a in xrange(1, n + 1) ]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is something you can be helped with.", "For the other part, post your algorithm."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Use range to generate a list:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; range(10)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Use list comprehension to get list of x^2 "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [x**2 for x in range(10)]\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["A more elegant answer is provided by Novikov"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n n = int(raw_input(\"How many squares? \"))\nmap((2).__rpow__, range(1, n+1))\n</code>\n</pre>\n", "senID": 0}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from operator import mul\nn = int(raw_input(\"How many squares? \"))\nmap(mul, *[range(1, n+1)]*2)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Somebody mentioned generators - this is how you use them in this case:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def sq(n):\n    i=0\n    while i&lt;n:\n        i+=1\n        yield i*i\n\nif __name__==\"__main__\":\n    n = int(raw_input(\"How many squares? \"))\n    print list(sq(n))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Or with map and a lambda function"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n n = int(raw_input(\"How many squares? \"))\nmap(lambda x: x*x, range(n))\n</code>\n</pre>\n", "senID": 1}, {"text": ["if you want it starting at 1"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n map(lambda x: x*x, range(1, n+1))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list_squares=[]\nfor a in xrange(1, n+1):\n list_squares.append(a*a)\nprint list_squares\n</code>\n</pre>\n", "senID": 1}, {"text": ["where n is user input for number of squares he wants."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If n=5 then the output looks like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["[1, 4, 9, 16, 25]"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]