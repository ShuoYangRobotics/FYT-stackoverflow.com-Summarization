[[{"code": "<pre>\n<code>\n python -c \"import os; print os.listdir('.')\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["If you want to apply some formatting like you have in your question,"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n python -c \"import os; print '\\n'.join(['&gt;&gt;%s' % x for x in os.listdir('.')])\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want to use a pipe, use xargs:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "xargs", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ls | xargs python -c \"import sys; print '&gt;&gt;', sys.argv[1:]\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["or backticks:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n python -c \"import sys; print '&gt;&gt;', sys.argv[1:]\" `ls`\n</code>\n</pre>\n", "senID": 6}], [{"text": ["You can read data piped into a Python script by reading sys.stdin.", "For example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "into", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ls -al | python -c \"import sys; print sys.stdin.readlines()\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["It is not entirely clear what you want to do (maybe I am stupid).", "The confusion comes from your example which is piping data out of a python script."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you want to print all files:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "all", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n find . -type f\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to print only the current directory's files"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n find . -type f -maxdepth 1\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want to include the \">>\" before each line"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n find . -type f -maxdepth 1 | xargs -L 1 echo \"&gt;&gt;\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["If you don't want the space between \">>\" and $path from echo"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n find . -type f -maxdepth 1 | xargs -L 1 printf \"&gt;&gt;%s\\n\"\n</code>\n</pre>\n", "senID": 7}, {"text": ["This is all using cygwin, of course."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"code": "<pre>\n<code>\n ls | python -c \"import sys; print sys.stdin.read()\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["just read stdin as normal for pipes"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You had the pipe the wrong way round, if you wanted to feed the output of \u2018dir\u2019 into Python, \u2018dir\u2019 would have to be on the left.", "eg."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dir \"*.*\" | python -c \"import sys;[sys.stdout.write('&gt;&gt;%s\\n' % line) for line in sys.stdin]\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["(The hack with the list comprehension is because you aren't allowed a block-introducing \u2018for\u2019 statement on one line after a semicolon."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Clearly the Python-native solution (\u2018os.listdir\u2019) is much better in practice."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["see cobbal's answer"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "cobbal's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/613007/613134#613134"}]}, {"text": ["piping through a program is transparent from the program's point of view, all the program knows is that it's getting input from the standard input stream"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Generally speaking, a shell command of the form "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n A | B\n</code>\n</pre>\n", "senID": 3}, {"text": ["redirects the output of A to be the input of B"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["so if A spits \"asdf\" to standard output, then B gets \"asdf\" into its standard input"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["the standard input stream in python is sys.stdin"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "sys.stdin", "tag": "a", "pos": 0, "childList": [{"text": "sys.stdin", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/sys.html#sys.stdin"}, {"text": "sys.stdin", "childNum": 0, "tag": "code", "childList": []}]}]]