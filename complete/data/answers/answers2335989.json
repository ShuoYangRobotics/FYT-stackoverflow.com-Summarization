[[{"text": ["have a look at the getopt and optparse modules from the standard lib, many good things could be also said about more advanced argparse module."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "getopt", "tag": "a", "pos": 0, "childList": [{"text": "getopt", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/getopt.html"}, {"text": "getopt", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/optparse.html", "text": "optparse", "childNum": 1, "tag": "a", "childList": [{"text": "optparse", "tag": "code"}]}, {"text": "optparse", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://code.google.com/p/argparse/", "text": "argparse", "childNum": 1, "tag": "a", "childList": [{"text": "argparse", "tag": "code"}]}, {"text": "argparse", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Generally you just need to access sys.argv."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sys.argv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I sense that you also want to generate an 'executable' that you can run standalone.... For that you use py2exe"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "py2exe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.py2exe.org/"}]}, {"text": ["Here is a complete example.py:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "example.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import optparse\n\nparser = optparse.OptionParser()\n\nparser.add_option(\"-s\", \"--safemode\",\n                  default = False,\n                  action = \"store_true\",\n                  help = \"Should program run in safe mode?\")\n\nparser.add_option(\"-w\", \"--width\",\n                  type = \"int\",\n                  default = 1024,\n                  help = \"Desired screen width in pixels\")\n\noptions, arguments = parser.parse_args()\n\nif options.safemode:\n    print \"Proceeding safely\"\nelse:\n    print \"Proceeding dangerously\"\n\nif options.width == 1024:\n    print \"running in 1024-pixel mode\"\nelif options.width == 1920:\n    print \"running in 1920-pixel mode\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["And here is a complete setup.py that will turn the above example.py into example.exe (in the dist subdirectory):"], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "setup.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "example.py", "childNum": 0, "tag": "code", "childList": []}, {"text": "example.exe", "childNum": 0, "tag": "code", "childList": []}, {"text": "dist", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from distutils.core import setup\nimport py2exe\nimport sys\n\nsys.argv.append('py2exe')\n\nsetup(\n    options = {'py2exe': dict(bundle_files=1, optimize=2)},\n    console = [\"example.py\"],\n    zipfile = None,\n    )\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Are you speaking about parameter passed to a python script?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["'couse you can access them by"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import sys\nprint sys.argv\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or can use a more sophisticated getopt module."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "getopt", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/2.5.2/lib/module-getopt.html"}]}], [{"text": ["Not a python guy (yet anyway) but my Google-fu found this assuming you meant \"handling command line arguments\":\nhttp://www.faqs.org/docs/diveintopython/kgp_commandline.html"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://www.faqs.org/docs/diveintopython/kgp_commandline.html", "text": "http://www.faqs.org/docs/diveintopython/kgp_commandline.html", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Use optparse.OptionParser."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "optparse.OptionParser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/optparse.html"}]}, {"code": "<pre>\n<code>\n from optparse import OptionParser\nimport sys\n\ndef make_cli_parser():\n    \"\"\"Makes the parser for the command line interface.\"\"\"\n    usage = \"python %prog [OPTIONS]\"\n    cli_parser = OptionParser(usage)\n    cli_parser.add_option('-s', '--safemode', action='store_true',\n            help=\"Run in safe mode\")\n    return cli_parser\n\ndef main(argv):\n    cli_parser = make_cli_parser()\n    opts, args = cli_parser.parse_args(argv)\n    if opts.safemode:\n        print \"Running in safe mode.\"\n    else:\n        print \"Running with the devil.\"\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n</code>\n</pre>\n", "senID": 1}, {"text": ["In use:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ python opt.py\nRunning with the devil.\n$ python opt.py -s\nRunning in safe mode.\n$ python opt.py -h\n\nUsage: python opt.py [OPTIONS]\nOptions:\n  -h, --help      show this help message and exit\n  -s, --safemode  Run in safe mode\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Or are you just asking how to open a command line?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["go to the start menu, click \"run\" (or just type, in Windows 7), type \"cmd\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This will open up a command shell.", "Given that your question is tagged python, I'm not sure it's going to be compiled into an exe, you might have to type \"python (your source here).py -safemode\"."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The other comments addressed how to handle parameters.", "If you want to make your python program an exe you might want to look at py2exe. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "py2exe", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.py2exe.org/"}]}, {"text": ["This is not required but you mentioned App.exe and not App.py"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You are asking a question that has several levels of answers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First, command line is passed into the array sys.argv.", "argv is a historic name from C and Unix languages.", "So:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ~/p$ cat &gt; args.py\nimport sys\nprint \"You have \", len(sys.argv), \"arguments.\"\nfor i in range(len(sys.argv)):\nprint \"argv[\", i, \"] = \", sys.argv[i]\n\n~/p$ python args.py 34 2 2 2\nYou have  5 arguments.\nargv[ 0 ] =  args.py\nargv[ 1 ] =  34\nargv[ 2 ] =  2\nargv[ 3 ] =  2\nargv[ 4 ] =  2\n</code>\n</pre>\n", "senID": 2}, {"text": ["This works both in MS Windows and Unix."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Second, you might be asking \"How do I get nice arguments?", "Have it handle /help in \nMS Windows or --help in Linux?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Well, there are three choices which try to do what you want.", "Two, optparse and getopt are already in the standard library, while argparse is on its way.", "All three of these are libraries that start with the sys.argv array of strings, a description of you command line arguments, and return some sort of data structure or class from which\nyou can get the options you mean.  "], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "optparse", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/optparse.html"}, {"text": "getopt", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/getopt.html"}, {"text": "argparse", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/argparse/"}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["getopt"], "childNum": 0, "tag": "a", "senID": 6, "childList": []}, {"text": ["optparse"], "childNum": 0, "tag": "a", "senID": 7, "childList": []}, {"text": ["argparse"], "childNum": 0, "tag": "a", "senID": 8, "childList": []}]}, {"text": ["As you move to the richer parsing, you need to give the parser more details about what you want the command line arguments to be.", "For example, you need to pass a long written\ndescription of the argument if you want the --help argument to print it."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Third, you might be asking for a tool that just deals with the options from the command \nline, environment variables and configuration files.", "Python currently has separate tools\nfor each of these.", "Perhaps I'll write a unified one, You will need:\n  - Command line arguments parsed by argparse, or getopt, etc.", "- Environment variables, from os.environ[]\n  - Configuration files from ConfigFile or plistlib, etc.", "and build your own answer to \"what are the settings\"?"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Hope this fully answers your questions"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["One of the many ways:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nprint sys.argv\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n >>>python arg.py arg1 arg2\n['arg.py', 'arg1', 'arg2']\n</code>\n</pre>\n", "senID": 2}, {"text": ["\nsys.argv is a list containing all the arguments (also the name of script/program) as string."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}]]