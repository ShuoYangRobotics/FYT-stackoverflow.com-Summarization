[[{"text": ["Use a double-underscore prefix:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(Double-underscore solution deleted after Emma's clarification)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["OK, you can do it like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class A:\n    SIZE = 5\n    def __init__(self):\n        if self.__class__ != A:\n            del self.SIZE\n\n    def getsize(self):\n        return self.SIZE\n\nclass B(A):\n    pass\n\na = A()\nprint a.getsize()\n# Prints 5\n\nb = B()\nprint b.getsize()\n# AttributeError: B instance has no attribute 'SIZE'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you want to make absolutely sure that subclasses of A override SIZE, you could use a metaclass for A that will raise an error when a subclass does not override it (note that A is a new-style class here):"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "absolutely", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "childList": []}, {"text": "SIZE", "childNum": 0, "tag": "code", "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "childList": []}, {"text": "A", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class ClassWithSize(type):\n    def __init__(cls, name, bases, attrs):\n        if 'SIZE' not in attrs:\n            raise NotImplementedError('The \"%s\" class does not implement a \"SIZE\" attribute' % name)\n        super(ClassWithSize, cls).__init__(name, bases, attrs)\n\nclass A(object):\n    __metaclass__ = ClassWithSize\n\n    SIZE = 5\n    def getsize(self):\n        return self.SIZE\n\nclass B(A):\n    SIZE = 6\n\nclass C(A):\n    pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["When you put the above in a module and attempt to import it, an exception will be raised when the import reaches the C class implementation."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "C", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If metaclasses scare you (and I sympathize with that attitude!-), a descriptor could work -- you don't even have to make your custom descriptor (though that's easy enough), a plain good old property could work fine too:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "easy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://users.rcn.com/python/download/Descriptor.htm"}]}, {"code": "<pre>\n<code>\n class A(object):\n\n  @property\n  def SIZE(self):\n    if type(self) is not A:\n      raise AttributeError(\"Class %s MUST explicitly define SIZE!\" % \n                            type(self).__name__)\n\n  def getsize(self):\n    return self.SIZE\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, this way you'll get the error only when an instance of a subclass of A which doesn't override SIZE actually tries to use self.SIZE (the metaclass approach has the advantage of giving the error earlier, when an errant subclass of A is created)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "use", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "self.SIZE", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The only approach that I can add is to use hasattr(self.__class__, 'SIZE') in the implementation of getsize() and toss an exception if the attribute is not found.", "Something like:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "hasattr(self.__class__, 'SIZE')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "getsize()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class A:\n   SIZE = 5\n   def getsize(self):\n     klass = self.__class__\n     if hasattr(klass, 'SIZE') and 'SIZE' in klass.__dict__:\n       return self.SIZE\n     raise NotImplementedError('SIZE is not defined in ' + klass.__name__)\n</code>\n</pre>\n", "senID": 1}, {"text": ["There is some magic still missing since the derived class could define a method named SIZE and getsize wouldn't detect it.", "You can probably do some type(klass.SIZE) magic to filter this out if you want to."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "SIZE", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "getsize", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "type(klass.SIZE)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You can always just override it like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class B(A):  \n  SIZE = 6\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It sounds like what you want is a private variable.", "In which case this is what you need to do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class A:\n    __SIZE = 5\n    def getsize(self): \n        return self.__SIZE\n\n    def setsize(self,newsize):\n        self.__SIZE=newsize\n\nclass B(A): \n    pass\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Another approach might be to get classes A and B to inherit from a third class instead of one from the other:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class X:\n    def getsize(self):\n        return self.SIZE\nclass A(X):\n    SIZE = 5\n\nclass B(X): pass\n\na = A()\nprint a.getsize()\n# Prints 5\n\nb = B()\nprint b.getsize()\n# AttributeError: B instance has no attribute 'SIZE'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Another common idiom is to use NotImplemented.", "Think of it as the middle ground between metaclass enforcement and mere documentation."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "NotImplemented", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/constants.html?highlight=notimplemented#NotImplemented"}]}, {"code": "<pre>\n<code>\n class A:\n   SIZE = NotImplemented\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now if a subclass forgets to override SIZE, the runtime errors will be immediate and obvious."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]