[[{"text": ["Here is an article about how one person created human readable UIDs for speaking them phonetically. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Here is an article about how one person created human readable UIDs for speaking them phonetically.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://thedailywtf.com/Articles/The-Automated-Curse-Generator.aspx"}]}, {"text": ["What you want to do is stitch together syllables to create pronounceable pseudo words.", "You can create syllables in any language you like to make up words that can be pronounced and communicated but don't actually mean anything."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Read the above link for some of the pitfalls you should consider when taking an approach like this."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["How about something like Amazon's payphrases?", "Convert the binary ID to a sequence of english words."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want something with the same range as a UUID, you need to represent 16 bytes.", "To keep it reasonable, restrict the phrase to 4 words, so each word represents 4 bytes, or 65536 possibilities, so you'll need a dictionary of 262,144 words."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["EDIT:\nActually on reflection what might be better is a sort of mad lib sentence - it will restrict the number of needed words and may make it easier to remember since it has a grammatical structure.", "It will need to be longer, of course, perhaps something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["(a/an/the/#) (adj) (noun) (verb)(tense) (adverb) while (a/an/the/#) (adj) (noun) (verb) (adverb)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Here's a uuid-based example.", "Adjust the 1000000 to increase or decrease the range of your ids.", "Since you're reducing the range of the id, you'll probably have to check to see if the ID already exists."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import uuid\n&gt;&gt;&gt; hash(str(uuid.uuid1())) % 1000000\n380539\n&gt;&gt;&gt; hash(str(uuid.uuid1())) % 1000000\n411563\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Sure, but it requires a few more restrictions on your problem space, namely:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then you'd do something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n _UID_INTERNALS = set()\n\ndef getID(obj):\n    if hasattr(obj, 'UID'):\n        return obj.UID\n    title = obj.title.encode(\"ascii\", errors=\"ignore\")\n    title = title.lower()\n    title = \"-\".join(title.split())\n    if not title:\n        title = \"unnamed-object\"\n    UID = title\n    num = 1\n    while UID in _UID_INTERNALS:\n        UID = title + str(num)\n        num += 1\n    _UID_INTERNALS.add(UID)\n    obj.UID = UID\n    return UID\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You can use hash(str(your_id)) or strip the hex value of a hash function from hashlib like pointed out above."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "hash(str(your_id))", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "hashlib", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["For emails, what I use is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from base64 import b64encode\nfrom os import urandom\nkey = b64encode(urandom(9))\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can increase/decrease the length by changing the number.", "Sometimes you will get + and / characters and you can strip them out if you like."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edit:\nSince you also want to pass them over the phone maybe b32encode(urandom(5)) would be a better choice since it wont give you any lowercase or unusual characters."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "b32encode(urandom(5))", "childNum": 0, "tag": "code", "childList": []}]}]]