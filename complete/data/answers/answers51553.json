[[{"text": ["I would say your test scheme is not really useful.", "To fulfill the db query, the db server goes through several steps:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, creating an array in Python and getting the average basically skips all these steps save the last one.", "As disk I/O is among the most expensive operations a program has to perform, this is a major flaw in the test (see also the answers to this question I asked here before).", "Even if you read the data from disk in your other test, the process is completely different and it's hard to tell how relevant the results are."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this question", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/26021/how-is-data-compression-more-effective-than-indexing-for-search-performance"}]}, {"text": ["To obtain more information about where Postgres spends its time, I would suggest the following tests:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Compare the execution time of your query to a SELECT without the aggregating functions (i. e. cut step 5)", "tag": "none", "senID": 3}, {"text": "If you find that the aggregation leads to a significant slowdown, try if Python does it faster, obtaining the raw data through the plain SELECT from the comparison.", "tag": "none", "senID": 4}]}, {"text": ["To speed up your query, reduce disk access first.", "I doubt very much that it's the aggregation that takes the time."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["There's several ways to do that:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "Cache data (in memory!) for subsequent access, either via the db engine's own capabilities or with tools like memcached", "tag": "none", "senID": 7}, {"text": "Reduce the size of your stored data", "tag": "none", "senID": 8}, {"text": "Optimize the use of indices. Sometimes this can mean to skip index use altogether (after all, it's disk access, too). For MySQL, I seem to remember that it's recommended to skip indices if you assume that the query fetches more than 10% of all the data in the table.", "tag": "none", "senID": 9}, {"text": "If your query makes good use of indices, I know that for MySQL databases it helps to put indices and data on separate physical disks. However, I don't know whether that's applicable for Postgres.", "tag": "none", "senID": 10}, {"text": "There also might be more sophisticated problems such as swapping rows to disk if for some reason the result set can't be completely processed in memory. But I would leave that kind of research until I run into serious performance problems that I can't find another way to fix, as it requires knowledge about a lot of little under-the-hood details in your process.", "tag": "none", "senID": 11}]}, {"text": ["Update:"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "Update:", "childNum": 0, "tag": "b", "pos": 0, "childList": []}]}, {"text": ["I just realized that you seem to have no use for indices for the above query and most likely aren't using any, too, so my advice on indices probably wasn't helpful.", "Sorry.", "Still, I'd say that the aggregation is not the problem but disk access is.", "I'll leave the index stuff in, anyway, it might still have some use."], "childNum": 1, "tag": "p", "senID": 13, "childList": [{"text": "I just realized that you seem to have no use for indices for the above query and most likely aren't using any, too, so my advice on indices probably wasn't helpful. Sorry. Still, I'd say that the aggregation is not the problem but disk access is. I'll leave the index stuff in, anyway, it might still have some use.", "childNum": 0, "tag": "i", "pos": -1, "childList": []}]}], [{"text": ["Postgres is doing a lot more than it looks like (maintaining data consistency for a start!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If the values don't have to be 100% spot on, or if the table is updated rarely, but you are running this calculation often, you might want to look into Materialized Views to speed it up."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["(Note, I have not used materialized views in Postgres, they look at little hacky, but might suite your situation)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Materialized Views"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Materialized Views", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jonathangardner.net/tech/w/PostgreSQL/Materialized_Views"}]}, {"text": ["Also consider the overhead of actually connecting to the server and the round trip required to send the request to the server and back."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I'd consider 200ms for something like this to be pretty good, A quick test on my oracle server, the same table structure with about 500k rows and no indexes, takes about 1 - 1.5 seconds, which is almost all just oracle sucking the data off disk."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["The real question is, is 200ms fast enough?"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["-------------- More --------------------"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["I was interested in solving this using materialized views, since I've never really played with them.", "This is in oracle."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["First I created a MV which refreshes every minute."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n create materialized view mv_so_x \nbuild immediate \nrefresh complete \nSTART WITH SYSDATE NEXT SYSDATE + 1/24/60\n as select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;\n</code>\n</pre>\n", "senID": 10}, {"text": ["While its refreshing, there is no rows returned"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"code": "<pre>\n<code>\n SQL&gt; select * from mv_so_x;\n\nno rows selected\n\nElapsed: 00:00:00.00\n</code>\n</pre>\n", "senID": 12}, {"text": ["Once it refreshes, its MUCH faster than doing the raw query"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n SQL&gt; select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899459 7495.38839 22.2905454 5.00276131 2.13432836\n\nElapsed: 00:00:05.74\nSQL&gt; select * from mv_so_x;\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899459 7495.38839 22.2905454 5.00276131 2.13432836\n\nElapsed: 00:00:00.00\nSQL&gt;\n</code>\n</pre>\n", "senID": 14}, {"text": ["If we insert into the base table, the result is not immediately viewable view the MV."], "childNum": 0, "tag": "p", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n SQL&gt; insert into so_x values (1,2,3,4,5);\n\n1 row created.\n\nElapsed: 00:00:00.00\nSQL&gt; commit;\n\nCommit complete.\n\nElapsed: 00:00:00.00\nSQL&gt; select * from mv_so_x;\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899459 7495.38839 22.2905454 5.00276131 2.13432836\n\nElapsed: 00:00:00.00\nSQL&gt;\n</code>\n</pre>\n", "senID": 16}, {"text": ["But wait a minute or so, and the MV will update behind the scenes, and the result is returned fast as you could want."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n SQL&gt; /\n\n  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)\n---------- ---------- ---------- ---------- ----------\n   1899460 7495.35823 22.2905352 5.00276078 2.17647059\n\nElapsed: 00:00:00.00\nSQL&gt;\n</code>\n</pre>\n", "senID": 18}, {"text": ["This isn't ideal.", "for a start, its not realtime, inserts/updates will not be immediately visible.", "Also, you've got a query running to update the MV whether you need it or not (this can be tune to whatever time frame, or on demand).", "But, this does show how much faster an MV can make it seem to the end user, if you can live with values which aren't quite upto the second accurate."], "childNum": 0, "tag": "p", "senID": 19, "childList": []}], [{"text": ["I retested with MySQL specifying ENGINE = MEMORY and it doesn't change a thing (still 200 ms).", "Sqlite3 using an in-memory db gives similar timings as well (250 ms)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The math here looks correct (at least the size, as that's how big the sqlite db is :-)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/51553/why-are-sql-aggregate-functions-so-much-slower-than-python-and-java-or-poor-man#53303"}]}, {"text": ["I'm just not buying the disk-causes-slowness argument as there is every indication the tables are in memory (the postgres guys all warn against trying too hard to pin tables to memory as they swear the OS will do it better than the programmer)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["To clarify the timings, the Java code is not reading from disk, making it a totally unfair comparison if Postgres is reading from the disk and calculating a complicated query, but that's really besides the point, the DB should be smart enough to bring a small table into memory and precompile a stored procedure IMHO."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["UPDATE (in response to the first comment below):"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I'm not sure how I'd test the query without using an aggregation function in a way that would be fair, since if i select all of the rows it'll spend tons of time serializing and formatting everything.", "I'm not saying that the slowness is due to the aggregation function, it could still be just overhead from concurrency, integrity, and friends.", "I just don't know how to isolate the aggregation as the sole independent variable."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "I'm not sure how I'd test the query without using an aggregation function in a way that would be fair, since if i select all of the rows it'll spend tons of time serializing and formatting everything.  I'm not saying that the slowness is due to the aggregation function, it could still be just overhead from concurrency, integrity, and friends.  I just don't know how to isolate the aggregation as the sole independent variable.", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["Those are very detailed answers, but they mostly beg the question, how do I get these benefits without leaving Postgres given that the data easily fits into memory, requires concurrent reads but no writes and is queried with the same query over and over again."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Is it possible to precompile the query and optimization plan?", "I would have thought the stored procedure would do this, but it doesn't really help."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To avoid disk access it's necessary to cache the whole table in memory, can I force Postgres to do that?", "I think it's already doing this though, since the query executes in just 200 ms after repeated runs."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Can I tell Postgres that the table is read only, so it can optimize any locking code?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I think it's possible to estimate the query construction costs with an empty table (timings range from 20-60 ms) "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I still can't see why the Java/Python tests are invalid.", "Postgres just isn't doing that much more work (though I still haven't addressed the concurrency aspect, just the caching and query construction)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["UPDATE: \nI don't think it's fair to compare the SELECTS as suggested by pulling 350,000 through the driver and serialization steps into Python to run the aggregation, nor even to omit the aggregation as the overhead in formatting and displaying is hard to separate from the timing.", "If both engines are operating on in memory data, it should be an apples to apples comparison, I'm not sure how to guarantee that's already happening though."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I can't figure out how to add comments, maybe i don't have enough reputation?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I'm a MS-SQL guy myself, and we'd use DBCC PINTABLE to keep a table cached, and SET STATISTICS IO to see that it's reading from cache, and not disk. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "DBCC PINTABLE", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/ms178015.aspx"}, {"href": "http://msdn.microsoft.com/en-us/library/ms184361.aspx", "text": "SET STATISTICS IO", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["I can't find anything on Postgres to mimic PINTABLE, but pg_buffercache seems to give details on what is in the cache - you may want to check that, and see if your table is actually being cached."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "pg_buffercache", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.postgresql.org/docs/current/static/pgbuffercache.html"}]}, {"text": ["A quick back of the envelope calculation makes me suspect that you're paging from disk.", "Assuming Postgres uses 4-byte integers, you have (6 * 4) bytes per row, so your table is a minimum of (24 * 350,000) bytes ~ 8.4MB.", "Assuming 40 MB/s sustained throughput on your HDD, you're looking at right around 200ms to read the data (which, as pointed out, should be where almost all of the time is being spent). "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "as pointed out", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/51553/why-are-sql-aggregate-functions-so-much-slower-than-python-and-java-or-poor-man#51668"}]}, {"text": ["Unless I screwed up my math somewhere, I don't see how it's possible that you are able to read 8MB into your Java app and process it in the times you're showing - unless that file is already cached by either the drive or your OS."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Are you using TCP to access the Postgres?", "In that case Nagle is messing with your timing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I don't think that your results are all that surprising -- if anything it is that Postgres is so fast."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Does the Postgres query run faster a second time once it has had a chance to cache the data?", "To be a little fairer your test for Java and Python should cover the cost of acquiring the data in the first place (ideally loading it off disk)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If this performance level is a problem for your application in practice but you need a RDBMS for other reasons then you could look at memcached.", "You would then have faster cached access to raw data and could do the calculations in code."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "memcached", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.danga.com/memcached/"}]}], [{"text": ["One other thing that an RDBMS generally does for you is to provide concurrency by protecting you from simultaneous access by another process.", "This is done by placing locks, and there's some overhead from that."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you're dealing with entirely static data that never changes, and especially if you're in a basically \"single user\" scenario, then using a relational database doesn't necessarily gain you much benefit."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You need to increase postgres' caches to the point where the whole working set fits into memory before you can expect to see perfomance comparable to doing it in-memory with a program."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Thanks for the Oracle timings, that's the kind of stuff I'm looking for (disappointing though :-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Materialized views are probably worth considering as I think I can precompute the most interesting forms of this query for most users."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I don't think query round trip time should be very high as i'm running the the queries on the same machine that runs Postgres, so it can't add much latency?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I've also done some checking into the cache sizes, and it seems Postgres relies on the OS to handle caching, they specifically mention BSD as the ideal OS for this, so I thinking Mac OS ought to be pretty smart about bringing the table into memory.", "Unless someone has more specific params in mind I think more specific caching is out of my control."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In the end I can probably put up with 200 ms response times, but knowing that 7 ms is a possible target makes me feel unsatisfied, as even 20-50 ms times would enable more users to have more up to date queries and get rid of a lots of caching and precomputed hacks."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I just checked the timings using MySQL 5 and they are slightly worse than Postgres.", "So barring some major caching breakthroughs, I guess this is what I can expect going the relational db route."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I wish I could up vote some of your answers, but I don't have enough points yet."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]