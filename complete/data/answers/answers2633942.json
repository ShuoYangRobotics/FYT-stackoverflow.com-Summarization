[[{"text": ["Why not just iterate through the string?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a_string=\"abcd\"\nfor letter in a_string:\n    print letter\n</code>\n</pre>\n", "senID": 1}, {"text": ["returns"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a\nb\nc\nd\n</code>\n</pre>\n", "senID": 3}, {"text": ["So, in pseudo-ish code, I would do this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n user_string = raw_input()\nlist_of_output = []\nfor letter in user_string:\n   list_of_output.append(morse_code_ify(letter))\n\noutput_string = \"\".join(list_of_output)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Note: the morse_code_ify function is pseudo-code."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "morse_code_ify", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You definitely want to make a list of the characters you want to output rather than just concatenating on them on the end of some string.", "As stated above, it's O(n^2): bad.", "Just append them onto a list, and then use \"\".join(the_list)."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "definitely", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "\"\".join(the_list)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["As a side note: why are you removing the spaces?", "Why not just have morse_code_ify(\" \") return a \"\\n\"?"], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "morse_code_ify(\" \")", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "\"\\n\"", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["A couple of things for ya:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The loading would be \"better\" like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n with file('morsecodes.txt', 'rt') as f:\n   for line in f:\n      line = line.strip()\n      if len(line) &gt; 0:\n         # do your stuff to parse the file\n</code>\n</pre>\n", "senID": 2}, {"text": ["That way you don't need to close, and you don't need to manually load each line, etc., etc."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for letter in userInput:\n   if ValidateLetter(letter):  # you need to define this\n      code = GetMorseCode(letter)  # from my other answer\n      # do whatever you want\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n # Retain a map of the Morse code\nconversion = {}\n\n# Read map from file, add it to the datastructure\nmorseCodeFile = file('morseCode.txt')\nfor line in moreCodeFile:\n    conversion[line[0]] = line[2:]\nmorseCodeFile.close()\n\n# Ask for input from the user\ns = raw_input(\"Please enter string to translate\")\n# Go over each character, and print it the translation.\n# Defensive programming: do something sane if the user \n# inputs non-Morse compatible strings.    \nfor c in s:\n    print conversion.get(c, \"No translation for \"+c)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Use 'index'."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def GetMorseCode(letter):\n   index = letterList.index(letter)\n   code = codeList[index]\n   return code\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, you'll want to validate your input letter (convert its case as necessary, make sure it's in the list in the first place by checking that index != -1), but that should get you down the path."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n # Open the file\nf = open('morseCode.txt', 'r')\n\n# Read the morse code data into \"letters\" [(lowercased letter, morse code), ...]\nletters = []\nfor Line in f:\n    if not Line.strip(): break\n    letter, code = Line.strip().split() # Assuming the format is &lt;letter&gt;&lt;whitespace&gt;&lt;morse code&gt;&lt;newline&gt;\n    letters.append((letter.lower(), code))\nf.close()\n\n# Get the input from the user\n# (Don't use input() - it calls eval(raw_input())!)\ni = raw_input(\"Enter a string to be converted to morse code or press &lt;enter&gt; to quit \") \n\n# Convert the codes to morse code\nout = []\nfor c in i:\n    found = False\n    for letter, code in letters:\n        if letter == c.lower():\n            found = True\n            out.append(code)\n            break\n\n    if not found: \n        raise Exception('invalid character: %s' % c)\n\n# Print the output\nprint ' '.join(out)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["For the actual processing I'd keep a string of finished product, and loop through each letter in the string they have entered.", "I'd call a function to convert a letter to morse code, then add it to the string of existing morse code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n finishedProduct = []\nuserInput = input(\"Enter text\")\nfor letter in userInput:\n    finishedProduct.append( letterToMorseCode(letter) )\ntheString = ''.join(finishedProduct)\nprint(theString)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You could either check for space in the loop, or in the function that is called."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n morse = [None] * (ord('z') - ord('a') + 1)\nfor line in moreCodeFile:\n    morse[ord(line[0].lower()) - ord('a')] = line[2:]\n</code>\n</pre>\n", "senID": 0}, {"code": "<pre>\n<code>\n for ch in userInput:\n    print morse[ord(ch.lower()) - ord('a')]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I can't leave this question in this state with that final code in the question hanging over me..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["dan: here's a much neater and shorter version of your code.", "It would be a good idea to look at how this is done and code more this way in future.", "I realise you probably have no further need of this code, but learning how you should do it is a good idea.", "Some things to note:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 7, "lis": [{"text": ["There are only two comments - and even the second is not really necessary for someone familiar with Python, they'll realise NL is being stripped.", "Only write comments where it adds value."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The with statement (recommended in another answer) removes the bother of closing the file through the context handler."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Use a dictionary instead of two lists."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["A generator comprehension ((x for y in z)) is used to do the translation in one line."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "(x for y in z)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Wrap as little code as you can in a try/except block to reduce the probability of catching an exception you didn't mean to."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "try", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "except", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Use the input() argument rather than print()ing first - Use '\\n' to get the new line you want."], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "input()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print()", "childNum": 0, "tag": "code", "childList": []}, {"text": "'\\n'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Don't write code across multiple lines or with intermediate variables like this just for the sake of it:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}]}, {"text": ["&#32;"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n code = {}\nwith open('morseCode.txt', 'r') as morse_code_file:\n    # line format is &lt;letter&gt;:&lt;morse code translation&gt;\n    for line in morse_code_file:\n        line = line.rstrip()  # Remove NL\n        code[line[0]] = line[2:]\n\nuser_input = input(\"Enter a string to convert to morse code or press &lt;enter&gt; to quit\\n\")\nwhile user_input:\n    try:\n        print(''.join(code[x] for x in user_input.replace(' ', '').upper()))\n    except KeyError:\n        print(\"Error in input. Only alphanumeric characters, a comma, and period allowed\")\n\n    user_input = input(\"Try again or press &lt;enter&gt; to quit\\n\")\n</code>\n</pre>\n", "senID": 10}]]