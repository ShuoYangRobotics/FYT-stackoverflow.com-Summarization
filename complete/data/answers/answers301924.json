[[{"text": ["Focus on urllib2 for this, it works quite well.", "Don't mess with httplib, it's not the top-level API."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "urllib2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "httplib", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["What you're noting is that urllib2 doesn't follow the redirect."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "urllib2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You need to fold in an instance of HTTPRedirectHandler that will catch and follow the redirects."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "HTTPRedirectHandler", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Further, you may want to subclass the default HTTPRedirectHandler to capture information that you'll then check as part of your unit testing."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "HTTPRedirectHandler", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n cookie_handler= urllib2.HTTPCookieProcessor( self.cookies )\nredirect_handler= HTTPRedirectHandler()\nopener = urllib2.build_opener(redirect_handler,cookie_handler)\n</code>\n</pre>\n", "senID": 4}, {"text": ["You can then use this opener object to POST and GET, handling redirects and cookies properly."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "opener", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You may want to add your own subclass of HTTPHandler to capture and log various error codes, also."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "HTTPHandler", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I had to do this exact thing myself recently.", "I only needed classes from the standard library.", "Here's an excerpt from my code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from urllib import urlencode\nfrom urllib2 import urlopen, Request\n\n# encode my POST parameters for the login page\nlogin_qs = urlencode( [(\"username\",USERNAME), (\"password\",PASSWORD)] )\n\n# extract my session id by loading a page from the site\nset_cookie = urlopen(URL_BASE).headers.getheader(\"Set-Cookie\")\nsess_id = set_cookie[set_cookie.index(\"=\")+1:set_cookie.index(\";\")]\n\n# construct headers dictionary using the session id\nheaders = {\"Cookie\": \"session_id=\"+sess_id}\n\n# perform login and make sure it worked\nif \"Announcements:\" not in urlopen(Request(URL_BASE+\"login\",headers=headers), login_qs).read():\n    print \"Didn't log in properly\"\n    exit(1)\n\n# here's the function I used after this for loading pages\ndef download(page=\"\"):\n    return urlopen(Request(URL_BASE+page, headers=headers)).read()\n\n# for example:\nprint download(URL_BASE + \"config\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["@S.Lott, thank you.", "Your suggestion worked for me, with some modification.", "Here's how I did it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data = urllib.urlencode(params)\nurl = host+page\nrequest = urllib2.Request(url, data, headers)\nresponse = urllib2.urlopen(request)\n\ncookies = CookieJar()\ncookies.extract_cookies(response,request)\n\ncookie_handler= urllib2.HTTPCookieProcessor( cookies )\nredirect_handler= HTTPRedirectHandler()\nopener = urllib2.build_opener(redirect_handler,cookie_handler)\n\nresponse = opener.open(request)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'd give Mechanize (http://wwwsearch.sourceforge.net/mechanize/) a shot.", "It may well handle your cookie/headers transparently."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://wwwsearch.sourceforge.net/mechanize/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wwwsearch.sourceforge.net/mechanize/"}]}], [{"text": ["Try twill - a simple language that allows users to browse the Web from a command-line interface.", "With twill, you can navigate through Web sites that use forms, cookies, and most standard Web features.", "More to the point, twill is written in Python and has a python API, e.g:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "twill", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twill.idyll.org/"}, {"text": "twill", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "Python", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"href": "http://twill.idyll.org/python-api.html", "text": "python API", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n from twill import get_browser\nb = get_browser()\n\nb.go(\"http://www.python.org/\")\nb.showforms()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's my take on this issue."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\nimport urllib\nimport urllib2\n\n\nclass HttpBot:\n    \"\"\"an HttpBot represents one browser session, with cookies.\"\"\"\n    def __init__(self):\n        cookie_handler= urllib2.HTTPCookieProcessor()\n        redirect_handler= urllib2.HTTPRedirectHandler()\n        self._opener = urllib2.build_opener(redirect_handler, cookie_handler)\n\n    def GET(self, url):\n        return self._opener.open(url).read()\n\n    def POST(self, url, parameters):\n        return self._opener.open(url, urllib.urlencode(parameters)).read()\n\n\nif __name__ == \"__main__\":\n    bot = HttpBot()\n    ignored_html = bot.POST('https://example.com/authenticator', {'passwd':'foo'})\n    print bot.GET('https://example.com/interesting/content')\n    ignored_html = bot.POST('https://example.com/deauthenticator',{})\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Besides the fact that you may be missing a cookie, there might be some field(s) in the form that you are not POSTing to the webserver.", "The best way would be to capture the actual POST from a web browser.", "You can use LiveHTTPHeaders  or WireShark to snoop the traffic and mimic the same behaviour in your script."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "LiveHTTPHeaders", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "https://addons.mozilla.org/en-US/firefox/addon/3829"}, {"href": "http://www.wireshark.org/", "text": "WireShark", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Funkload is a great web app testing tool also.", "It wraps webunit to handle the browser emulation, then gives you both functional and load testing features on top."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Funkload", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://funkload.nuxeo.org/"}]}]]