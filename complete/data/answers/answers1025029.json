[[{"text": ["PyWin32 is the way to go - but how to use it?", "One approach is to begin with a concrete problem you're having and attempting to solve it.", "PyWin32 provides bindings for the Win32 API functions for which there are many, and you really have to pick a specific goal first."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In my Python 2.5 installation (ActiveState on Windows) the win32 package has a Demos folder packed with sample code of various parts of the library. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For example, here's CopyFileEx.py:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import win32file, win32api\nimport os\n\n\ndef ProgressRoutine(TotalFileSize, TotalBytesTransferred, StreamSize, StreamBytesTransferred,\n    StreamNumber, CallbackReason, SourceFile, DestinationFile, Data):\n    print Data\n    print TotalFileSize, TotalBytesTransferred, StreamSize, StreamBytesTransferred, StreamNumber, CallbackReason, SourceFile, DestinationFile\n    ##if TotalBytesTransferred &gt; 100000:\n    ##    return win32file.PROGRESS_STOP\n    return win32file.PROGRESS_CONTINUE\n\ntemp_dir=win32api.GetTempPath()\nfsrc=win32api.GetTempFileName(temp_dir,'cfe')[0]\nfdst=win32api.GetTempFileName(temp_dir,'cfe')[0]\nprint fsrc, fdst\n\nf=open(fsrc,'w')\nf.write('xxxxxxxxxxxxxxxx\\n'*32768)\nf.close()\n## add a couple of extra data streams\nf=open(fsrc+':stream_y','w')\nf.write('yyyyyyyyyyyyyyyy\\n'*32768)\nf.close()\nf=open(fsrc+':stream_z','w')\nf.write('zzzzzzzzzzzzzzzz\\n'*32768)\nf.close()\n\noperation_desc='Copying '+fsrc+' to '+fdst\nwin32file.CopyFileEx(fsrc, fdst, ProgressRoutine, operation_desc, False,   win32file.COPY_FILE_RESTARTABLE)\n</code>\n</pre>\n", "senID": 3}, {"text": ["It shows how to use the CopyFileEx function with a few others (such as GetTempPath and GetTempFileName).", "From this example you can get a \"general feel\" of how to work with this library. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["PyWin32, as mentioned by @chaos, is probably the most popular choice; the alternative is ctypes which is part of Python's standard library.", "For example, print ctypes.windll.kernel32.GetModuleHandleA(None) will show the module-handle of the current module (EXE or DLL).", "A more extensive example of using ctypes to get at win32 APIs is here."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "ctypes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/ctypes.html"}, {"text": "print ctypes.windll.kernel32.GetModuleHandleA(None)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2005-March/314328.html"}]}], [{"text": ["I imagine you'll want to use PyWin32."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyWin32", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.net/crew/mhammond/win32/"}]}], [{"text": ["You may also want to check Python for Windows extension at SourceForge."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python for Windows extension at SourceForge", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/pywin32/"}]}], [{"text": ["IronPython is a python meant for windows APIs.", "I've used it for many projects and LOVE it.", "It unleashes the full .NET framework, usable with python syntax."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "IronPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ironpython.net/"}]}], [{"text": ["PyWin32 doesn't have half the API."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]