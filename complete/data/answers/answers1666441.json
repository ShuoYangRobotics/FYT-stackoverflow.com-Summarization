[[{"text": ["The Python standard library Queue module is already thread-safe and aware and should work for your requirements."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Queue", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/queue.html"}]}, {"text": ["Here's a nice paper Task Queue Implementation Pattern that discusses how to use Queue for task queues."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Task Queue Implementation Pattern", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.google.com/gview?a=v&q=cache%3AXuLJl1ktTh0J%3Aparlab.eecs.berkeley.edu/wiki/%5Fmedia/patterns/taskqueue.pdf+put+python+functions+in+a+task+queue&hl=en&gl=us&pid=bl&srcid=ADGEESiFT6GUiPAU2MplgzfGtW0kazd9ocsnWb59CNpQ5LkfXL%5FdA-Ft%5FY%5FE4sjv-yq8Syhoh5kiInRFMCBvSfwEKCJ30pW-8J9v2zzvt-70Rs%5FsRzly8V4gYmLuqXgq38OfzdYM0U1d&sig=AFQjCNEsHXnniXPxUEQtlNuiWOPfvAQYsg"}]}], [{"text": ["You just need your elements to extend threading.Thread and use Conditions() to implement the producer,consumer system."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "producer,consumer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Producer-consumer%5Fproblem"}]}, {"text": ["I would maintain a thread pool with it's own concurrency control and an add() method, allowing some other code to add threads into the pool."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here is the documentation for Python threading which pretty much follows the conventions of other thread implementations ... nothing scary."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Here is the documentation for Python threading", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/threading.html"}]}], [{"text": ["kamaelia provides tools for abstracting concurrency to threads or process etc."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "kamaelia", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.kamaelia.org/Home"}]}], [{"text": ["I'd don't know much about python, but what you're describing sounds like a thread pool - this is from a quick google"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://pypi.python.org/pypi/threadpool/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pypi.python.org/pypi/threadpool/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/threadpool/"}]}], [{"text": ["I'd recommend you look at beanstalkd or gearman."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "beanstalkd", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://kr.github.com/beanstalkd/"}, {"href": "http://gearman.org/", "text": "gearman", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Let your web server be a web server, and scale your long-running jobs independently and more safely by moving them through a queue to an external worker."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I would recommend using process pools from the multithreading library.", "This is a built in library and abstracts most of the implementaion you need anyway, especially since pools work on lists and your data is already in the form of a list.", "You can use it with the map_async member function of the pool and assign a callback to notify the user whenever you have finished a particular task. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "process pools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/multiprocessing.html#module-multiprocessing.pool"}]}], [{"text": ["I made a tiny and dead-simple module that allows you to very quickly implement producer-consumer concurrency pattern in Python.", "You can have a look here: Quick concurrent programming in Python"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Quick concurrent programming in Python", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.trungh.com/2011/03/quick-concurrent-programming-in-python/"}]}]]