[[{"text": ["You can convert the number to a string, then iterate over the string and convert each character back to an integer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [int(char) for char in str(634)]\n[6, 3, 4]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or, as @eph rightfully points out below, use map():"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "map()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#map"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; map(int, str(634))        # Python 2\n[6, 3, 4]\n\n&gt;&gt;&gt; list(map(int, str(634)))  # Python 3\n[6, 3, 4]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Convert to string, treat string as a list and convert back to int:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [5]: input = 634\nIn [6]: digits =[int(i) for i in str(input)]\nIn [7]: print digits\n[6, 3, 4]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Alternatively you can do this with the decimal module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; Decimal(123).as_tuple()\nDecimalTuple(sign=0, digits=(1, 2, 3), exponent=0)\n&gt;&gt;&gt; Decimal(123).as_tuple().digits\n(1, 2, 3)\n</code>\n</pre>\n", "senID": 1}, {"text": ["...which also works with real numbers..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; Decimal(1.1).as_tuple()\nDecimalTuple(sign=0, digits=(1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 1, 7, 8, 4, 1, 9, 7, 0, 0, 1, 2, 5, 2, 3, 2, 3, 3, 8, 9, 0, 5, 3, 3, 4, 4, 7, 2, 6, 5, 6, 2, 5), exponent=-51)\n&gt;&gt;&gt; Decimal('1.1').as_tuple()\nDecimalTuple(sign=0, digits=(1, 1), exponent=-1)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Using str() is a bit lazy.", "Quite a lot slower than using math.", "Using a while loop would be faster still"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n In [1]: n=634\n\nIn [2]: timeit [int(i) for i in str(n)]\n100000 loops, best of 3: 5.3 us per loop\n\nIn [3]: timeit map(int, str(n))\n100000 loops, best of 3: 5.32 us per loop\n\nIn [4]: import math\n\nIn [5]: timeit [n/10**i%10 for i in range(int(math.log(n,10)),-1,-1)]\n100000 loops, best of 3: 3.69 us per loop\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you know it's exactly 3 digits, you can do it much faster"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n In [6]: timeit [n/100,n/10%10,n%10]\n1000000 loops, best of 3: 672 ns per loop\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Python2&gt; i = 634\nPython2&gt; digits = [int(d) for d in list(str(i))]\nPython2&gt; digits\n[6, 3, 4]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This turns the int into a string, breaks the characters into a list, and maps the list back into ints (using a list comprehension)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["To do this without conversion to a string (and without cheating by using log to see how many digits there will be), use repeated calls to divmod:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; digits = []\n&gt;&gt;&gt; value = 634\n&gt;&gt;&gt; while value: value,b = divmod(value,10); digits.insert(0,b)\n...\n&gt;&gt;&gt; digits\n[6, 3, 4]\n</code>\n</pre>\n", "senID": 1}]]