[[{"text": ["Use split() to split at the commas, use int() to convert to integer:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "int()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n user_lst = map(int, user.split(\",\"))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There's no ' to remove in the list.", "When you print a list, since it has no direct string representation, Python shows you its repr\u2014a string that shows its structure.", "You have a list with one item, the string 12,33,223; that's what [user] does."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "repr", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "12,33,223", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "[user]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You probably want to split the string by commas, like so:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "split", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#string-methods"}]}, {"code": "<pre>\n<code>\n user_list = user_input.split(',')\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want those to be ints, you can use a list comprehension:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions", "text": "list comprehension", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n user_list = [int(number) for number in user_input.split(',')]\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n [int(s) for s in user.split(\",\")]\n</code>\n</pre>\n", "senID": 0}, {"text": ["I have no idea why you've defined the separate userLst variable, which is a one-element list. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "userLst", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; result = ['12,33,223']\n&gt;&gt;&gt; int(result[0].replace(\",\", \"\"))\n1233233\n&gt;&gt;&gt; [int(i) for i in result[0].split(',')]\n[12, 33, 233]\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; ast.literal_eval('12,33,223')\n(12, 33, 223)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Think that it would be good to add a simple check(it is better to check that user eneter numeric value at least) on the values entered:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n inputData = ['12,33,223']\n[int(i) for i in inputData.split(',') if i.isnumeric()]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use the join method and convert that to an integer:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n int(''.join(userLst))\n</code>\n</pre>\n", "senID": 1}]]