[[{"text": ["Use all().", "It takes an iterable as an argument and return True if all entries evaluate to True.", "Example:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "all()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n if all((3, True, \"abc\")):\n    print \"Yes!\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["You will probably need some kind of generator expression, like"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if all(x &gt; 3 for x in lst):\n    do_stuff()\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; x = [True, False, True, False]\n&gt;&gt;&gt; all(x)\nFalse\n</code>\n</pre>\n", "senID": 0}, {"text": ["all() returns True if all the elements in the list are True"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "all()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#all"}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Similarly, any() will return True if any element is true."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "any()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#any"}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "any", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["Example (test all elements are greater than 0)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if all(x &gt; 0 for x in list_of_xs):\n    do_something()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Above originally used a list comprehension (if all([x &gt; 0 for x in list_of_xs]): ) which as pointed out by delnan (Thanks) a generator expression would be faster as the generator expression terminates at the first False, while this expression applies the comparison to all elements of the list."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "if all([x &gt; 0 for x in list_of_xs]):", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["However, be careful with generator expression like:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n all(x &gt; 0 for x in list_of_xs)\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you are using pylab (launch ipython as 'ipython -pylab'), the all function is replaced with numpy.all which doesn't process generator expressions properly.  "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n all([x&gt;0 for x in [3,-1,5]]) ## False\nnumpy.all([x&gt;0 for x in [3,-1,5]]) ## False\nall(x&gt;0 for x in [3,-1,5]) ## False\nnumpy.all(x&gt;0 for x in [3,-1,5]) ## True\n</code>\n</pre>\n", "senID": 6}], [{"code": "<pre>\n<code>\n if reduce(lambda x, y: x and involve(y), yourlist, True):\n   certain_action()\n</code>\n</pre>\n", "senID": 0}, {"text": ["involve is the action you want to involve for each element in the list, yourlist is your original list, certain_action is the action you want to perform if all the statements are true."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "involve", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "yourlist", "childNum": 0, "tag": "code", "childList": []}, {"text": "certain_action", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I believe you want the all() method:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "all()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $ python\n&gt;&gt;&gt; help(all)\nHelp on built-in function all in module __builtin__:\n\nall(...)\n    all(iterable) -&gt; bool\n\n    Return True if bool(x) is True for all values x in the iterable.\n</code>\n</pre>\n", "senID": 1}], [{"text": ["all() alone doesn't work well if you need an extra map() phase."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["see below:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["all((x==0 for x in xrange(1000))"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["all([x==0 for x in xrange(1000)])"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["the 2nd example will perform 1000 compare even the 2nd compare render the whole result false."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]