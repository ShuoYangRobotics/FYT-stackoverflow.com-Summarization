[[{"text": ["Why not use the argument parsing modules?", "optparse in Python 2.6 (and 3.1) and argparse in Python 2.7 (and 3.2)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EDIT: On second thought, that's not as simple as it sounds, because you may have to define all the arguments you are likely to see (not sure if these modules have a catchall mechanism).", "I'll leave the answer here because might work, but take it with a grain of salt."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Regex: (?&lt;=-arch )[^ ]+"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "(?&lt;=-arch )[^ ]+", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall( r\"(?&lt;=-arch )([^ ]+)\", r\"'-foo 23 -bar -arch ppc -arch i386 -isysroot -fno-strict-aliasing -fPIC'\" )\n['ppc', 'i386']\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; foo = re.compile( r\"(?&lt;=-arch)\\s+[^\\s]+\" )\n&gt;&gt;&gt; [ str.strip() for str in re.findall( foo, r\"'-foo 23 -bar -arch ppc -arch i386 -isysroot -fno-strict-aliasing -fPIC'\" ) ]\n['ppc', 'i386']\n</code>\n</pre>\n", "senID": 2}, {"text": ["P.S.", "There's no x86_64 in that string, and are you trying to differentiate between -arch ppc and -arch i386?"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "x86_64", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "-arch ppc", "childNum": 0, "tag": "code", "childList": []}, {"text": "-arch i386", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Would you consider a non-regex solution?", "Simpler:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def my_arch_parse_function(s):\n...     args = s.split()\n...     idxs = (i+1 for i,v in enumerate(args) if v == '-arch')\n...     return [args[i] for i in idxs]\n...     \n... \n&gt;&gt;&gt; s='-foo 23 -bar -arch ppc -arch i386 -isysroot / -fno-strict-aliasing -fPIC'\n&gt;&gt;&gt; my_arch_parse_function(s)\n['ppc', 'i386']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Answering my own question, I found a regex via this tool:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this tool", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.pythonregex.com/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; regex = re.compile(\"(?P&lt;key&gt;\\-arch\\s?)(?P&lt;value&gt;[^\\s]+?)\\s|$\")\n&gt;&gt;&gt; r = regex.search(string)\n&gt;&gt;&gt; r\n&lt;_sre.SRE_Match object at 0x8aa59232ae397b10&gt;\n&gt;&gt;&gt; regex.match(string)\nNone\n\n# List the groups found\n&gt;&gt;&gt; r.groups()\n(u'-arch ', u'ppc')\n\n# List the named dictionary objects found\n&gt;&gt;&gt; r.groupdict()\n{u'key': u'-arch ', u'value': u'ppc'}\n\n# Run findall\n&gt;&gt;&gt; regex.findall(string)\n[(u'-arch ', u'ppc'), (u'-arch ', u'i386'), (u'', u'')]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try this if you want regex:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n arch_regex = re.compile('\\s+('+'|'.join(arch_list)+')\\s+',re.I)\nresults = arch_regex.findall(arg_string)\n</code>\n</pre>\n", "senID": 1}, {"text": ["A little too much regex for my taste, but it works.", "For future reference, it is better to use optparse for command line option parsing."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "optparse", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/optparse.html"}]}], [{"text": ["Hand-made with Python2.6\nI am sure that you or a library can do a better job."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n inp = '-foo 23 -bar -arch ppc -arch i386 -isysroot / -fno-strict-aliasing -fPIC'.split()\ndct = {}\nnoneSet = set([None])\n\nflagName = None\nvalues = []\nfor param in inp:\n    if param.startswith('-'):\n        flagName = param\n        if flagName not in dct:\n            dct[flagName] = set()\n        dct[flagName].add(None)\n        continue\n    # Else found a value\n    dct[flagName].add(param)\n\nprint(dct)\n\nresult = sorted(dct['-arch'] - noneSet)\nprint(result)\n\n&gt;&gt;&gt; ================================ RESTART ================================\n&gt;&gt;&gt; \n{'-arch': set(['ppc', 'i386', None]), '-isysroot': set([None, '/']), '-fno-strict-aliasing': set([None]), '-fPIC': set([None]), '-foo': set([None, '23']), '-bar': set([None])}\n['i386', 'ppc']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}]]