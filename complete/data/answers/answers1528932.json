[[{"code": "<pre>\n<code>\n obj = type('obj', (object,), {'propertyName' : 'propertyValue'})\n</code>\n</pre>\n", "senID": 0}, {"text": ["there are two kinds oftypefunction uses."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "two kinds oftypefunction uses", "tag": "a", "pos": 0, "childList": [{"text": "type", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org//library/functions.html#type"}, {"text": "type", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I don't know if there's a built-in way to do it, but you can always define a class like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class InlineClass(object):\n    def __init__(self, dict):\n\tself.__dict__ = dict\n\nobj = InlineClass({'propertyName' : 'propertyValue'})\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I like Smashery's idea, but Python seems content to let you modify classes on your own:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Smashery's", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1528932/how-to-create-inline-objects-with-properties-in-python/1528939#1528939"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Inline(object):\n...     pass\n...\n&gt;&gt;&gt; obj = Inline()\n&gt;&gt;&gt; obj.test = 1\n&gt;&gt;&gt; obj.test\n1\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Works just fine in Python 2.5 for me.", "Note that you do have to do this to a class derived from object - it won't work if you change the line to obj = object."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "object", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "obj = object", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Peter's answer"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n obj = lambda: None\nobj.propertyName = 'propertyValue'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n class test:\n    def __setattr__(self,key,value):\n        return value\n\n\nmyObj = test()\nmyObj.mykey = 'abc' # set your property and value\n</code>\n</pre>\n", "senID": 0}], [{"text": ["It is easy in Python to declare a class with an __init__() function that can set up the instance for you, with optional arguments.", "If you don't specify the arguments you get a blank instance, and if you specify some or all of the arguments you initialize the instance."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__init__()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I explained it here (my highest-rated answer to date) so I won't retype the explanation.", "But, if you have questions, ask and I'll answer."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1495666/how-to-define-a-class-in-python/1495740#1495740"}]}, {"text": ["If you just want a generic object whose class doesn't really matter, you can do this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Generic(object):\n    pass\n\nx = Generic()\nx.foo = 1\nx.bar = 2\nx.baz = 3\n</code>\n</pre>\n", "senID": 3}, {"text": ["An obvious extension would be to add an __str__() function that prints something useful."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "__str__()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["This trick is nice sometimes when you want a more-convenient dictionary.", "I find it easier to type x.foo than x[\"foo\"]."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "x.foo", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "x[\"foo\"]", "childNum": 0, "tag": "code", "childList": []}]}]]