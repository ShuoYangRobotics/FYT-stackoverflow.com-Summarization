[[{"text": ["Use a single underscore prefix:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class _Internal:\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is the official Python convention for 'internal' symbols; \"from module import *\" does not import underscore-prefixed objects."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["In short:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Python is like perl in this respect.", "To paraphrase a famous line about privacy from the Perl book, the philosophy is that you should stay of the living room because you weren't invited, not because it is defended with a shotgun."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For more information:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["Private variables"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["Private functions"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["Why are Python\u2019s \u2018private\u2019 methods not actually private?"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}], [{"text": ["Define __all__, a list of names that you want to be exported (see documentation)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__all__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/tutorial/modules.html#importing-from-a-package", "text": "see documentation", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n __all__ = ['public_class'] # don't add here the 'implementation_class'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The convention is prepend \"_\" to internal classes, functions, and variables."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["A pattern that I sometimes use is this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Define a class:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class x(object):\n    def doThis(self):\n        ...\n    def doThat(self):\n        ...\n</code>\n</pre>\n", "senID": 2}, {"text": ["Create an instance of the class, overwriting the class name:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n x = x()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Define symbols that expose the functionality:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n doThis = x.doThis\ndoThat = x.doThat\n</code>\n</pre>\n", "senID": 6}, {"text": ["Delete the instance itself:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n del x\n</code>\n</pre>\n", "senID": 8}, {"text": ["Now you have a module that only exposes your public functions."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["To address the issue of design conventions, and as Christopher said, there's really no such thing as \"private\" in Python.", "This may sound twisted for someone coming from C/C++ background (like me a while back), but eventually, you'll probably realize following conventions is plenty enough. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Seeing something having an underscore in front should be a good enough hint not to use it directly.", "If you're concerned with cluttering help(MyClass) output (which is what everyone looks at when searching on how to use a class), the underscored attributes/classes are not included there, so you'll end up just having your \"public\" interface described."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "help(MyClass)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Plus, having everything public has its own awesome perks, like for instance, you can unit test pretty much anything from outside (which you can't really do with C/C++ private constructs)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Use two underscores to prefix names of \"private\" identifiers.", "For classes in a module, use a single leading underscore and they will not be imported using \"from module import *\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class _MyInternalClass:\n    def __my_private_method:\n        pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["(There is no such thing as true \"private\" in Python.", "For example, Python just automatically mangles the names of class members with double underscores to be __clssname_mymember.", "So really, if you know the mangled name you can use the \"private\" entity anyway.", "See here.", "And of course you can choose to manually import \"internal\" classes if you wanted to)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "__clssname_mymember", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "See here.", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#private-variables"}]}]]