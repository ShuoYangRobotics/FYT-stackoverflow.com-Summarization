[[{"text": ["The initial problem I see is that none is not a built-in value in Python.", "None is though."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "none", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Also, the tower of nested if statements in the first function is unnecessary.", "Flatten that!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def defineType(riskCode):\n    if riskCode == 1:\n        riskType = High\n    elif riskCode == 2:\n        riskType = Moderate\n    elif riskCode == 3:\n        riskType = Low\n    elif RiskCode == 4:\n        riskType = No\n</code>\n</pre>\n", "senID": 2}, {"text": ["It's not an error, but it's much more readable, no?", "(Easier to type too :)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Also, I take it that High, Moderate, Low, and No are defined elsewhere in your code?", "If you're using them as enumerated constants (i.e.", "as a set of unique integers whose values do not change), HIGH, MODERATE, LOW, and NO would be more idiomatic."], "childNum": 8, "tag": "p", "senID": 4, "childList": [{"text": "High", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Moderate", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Low", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "No", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "HIGH", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "MODERATE", "childNum": 0, "tag": "code", "childList": []}, {"text": "LOW", "childNum": 0, "tag": "code", "childList": []}, {"text": "NO", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["And in fact, if you did that, the whole function could be done away with like so:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n HIGH = 1\nMODERATE = 2\nLOW = 3\nNO = 4\n</code>\n</pre>\n", "senID": 6}, {"text": ["Now you don't need to map them at all; and you can just assign riskCode to riskType, although that may be a bit redundant now!"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "riskCode", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "riskType", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n riskType = riskCode\n</code>\n</pre>\n", "senID": 8}, {"text": ["If you want to get strings from risk codes, try the second dictionary from Artsiom Rudzenka's answer."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "from Artsiom Rudzenka's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/6387839/keep-getting-a-global-name-not-defined-error/6388039#6388039"}]}, {"text": ["Finally...", "I would suggest putting these codes in their own namespace:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n class Risk(object):\n    HIGH = 1\n    MODERATE = 2\n    LOW = 3\n    NO = 4\n</code>\n</pre>\n", "senID": 11}, {"text": ["You can then reference them like so:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n if riskCode == Risk.HIGH: do_something()\n</code>\n</pre>\n", "senID": 13}, {"text": ["Now you are free to use short words like NO for other things."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "NO", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It's None not none.", "Python is case sensitive."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "none", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["No need to use function to use function for risks mapping you can simply use the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n riskmapping = {1:High, 2:Moderate, 3:Low, 4:No}\n</code>\n</pre>\n", "senID": 1}, {"text": ["But in case if High, ...No is not a instances or variables, but just a strings than:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n riskmapping = {1:'High', 2:'Moderate', 3:'Low', 4:'No'}\n</code>\n</pre>\n", "senID": 3}, {"text": ["Usage:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n highRisk = riskmapping[1]\n</code>\n</pre>\n", "senID": 5}, {"text": ["Or "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n if riskmapping[currentRiskCode]:\n    #do smth\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Apart from none, my contribution to simplicity:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n riskCodes = {1: 'High', 2: 'Moderate', 3: 'Low', 4: 'No'}\n\ndef defineType(riskCode):\n    riskType = riskCodes[riskCode]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you are modifying global variables in a function other than were it is declared don't\nyou have to use the global keyword."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def defineType(riskCode):\n    global riskType\n\n    if riskCode == 1:\n        riskType = High\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Setting riskType inside your function is local to that function and will not affect the value in the global.", "You need to tell your function to use the global by putting global riskType before code that tries to modify it.  "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "riskType", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "global riskType", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["None should be capitalized.  "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I believe you meant to set riskType to a string and therefore those values should be quoted."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Python has an elif for else if."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "elif", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "else if", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The corrected code:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n # Global Variables\nriskCode = 0\nestimatePrice = 0\nriskType = None\n\ndef defineType(riskCode):\n    global riskType\n    if riskCode == 1:\n        riskType = \"High\"\n    elif riskCode == 2:\n        riskType = \"Moderate\"\n    elif riskCode == 3:\n        riskType = \"Low\"\n    elif RiskCode == 4:\n        riskType = \"No\"\n</code>\n</pre>\n", "senID": 5}]]