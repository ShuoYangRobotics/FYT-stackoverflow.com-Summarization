[[{"text": ["You aren't appending to self.records; you are always overwriting it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self.records", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Use:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["self.records.append(r) "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "self.records.append(r)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["instead."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Edit: Never mind.", "See Ignacio Vasquez-Abrams's comment.", "I would delete this answer if not for that."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Does it still happen if you replace it with the following:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n self.record = [Record(l) for l in self.lines]\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Something must be wrong in Record since the code there does work, even if it makes experienced coders weep when they read it."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "must", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "Record", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Ahue, you have mutable objects in the shared class namespace -- a very common misconception when starting out with python.", "Move the initialization of records = [] in CsvSet into its __init__ function, and move record = {} into Record __init__ function.", "Should look like the following:"], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "shared", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "records = []", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "CsvSet", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "record = {}", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Record", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__init__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class Record:\n    def __init__(self,lines):\n        self.record = {}\n        self.__parse()\n\nclass CsvSet:\n    def __init__(self,lines):\n        self.records = []\n        self.__parse()\n</code>\n</pre>\n", "senID": 1}, {"text": ["When you declare a mutable variable in the class area, it is shared among all instances of those classses, not created for each instance.", "By moving the initialization into an instance method (__init__ in this case), you are creating new mutable stores for each instance, which is what you intended."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Record class is broken.", "You use a class variable (Record.record) instead of an instance attribute.", "Class variable is one for all instances and you want different self.record for each instance."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self.record", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Move the:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n record = {}\nline = \"\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["lines into the constructor (indented under def __init__(self,line):)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "def __init__(self,line):", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The Record class is broken, you are always returning the same object."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Without seeing the code for Record it's impossible to guess"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Perhaps you are using a list or a dict as default parameter to __init__ and returning that with getValue()."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "getValue()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Another possibility is that getValue() is returning a class attribute rather than an instance attribute"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "getValue()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Ok, so I'll post the code for the Record class for clarification, too."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The __parse method in CsvSet is now how it was in the beginning.", "I changed if for debugging reasons but the result is the same.", "And Ignacio you're right, I startet with Python only 2 weeks ago..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]