[[{"text": ["For CPAN offerings have a look at the following (in alphabetical order)..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CPAN", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org"}]}, {"tag": "ul", "num": 6, "lis": [{"text": ["Builder"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["HTML::AsSubs"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["HTML::Tiny"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["Markapl"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["Template::Declare"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}, {"text": ["XML::Generator"], "childNum": 0, "tag": "a", "senID": 6, "childList": []}]}, {"text": ["Using the table part of the CL-WHO example provided (minus Roman numerals and s/background-color/color/ to squeeze code into screen width here!", ")...."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "br", "senID": 8}, {"text": ["Builder"], "childNum": 0, "tag": "h2", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n use Builder;\nmy $builder = Builder-&gt;new;\nmy $h = $builder-&gt;block( 'Builder::XML' );\n\n$h-&gt;table( { border =&gt; 0, cellpadding =&gt; 4 }, sub {\n   for ( my $i = 1; $i &lt; 25; $i += 5 ) {\n       $h-&gt;tr( { align =&gt; 'right' }, sub {\n           for my $j (0..4) {\n               $h-&gt;td( { color =&gt; $j % 2 ? 'pink' : 'green' }, $i + $j );\n           }\n       });\n   } \n});\n\nsay $builder-&gt;render;\n</code>\n</pre>\n", "senID": 10}, {"tag": "br", "senID": 11}, {"text": ["HTML::AsSubs"], "childNum": 0, "tag": "h2", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n use HTML::AsSubs;\n\nmy $td = sub {\n    my $i = shift;\n    return map { \n        td( { color =&gt; $_ % 2 ? 'pink' : 'green' }, $i + $_ )\n    } 0..4;\n};\n\nsay table( { border =&gt; 0, cellpadding =&gt; 4 },\n    map { \n        &amp;tr( { align =&gt; 'right' }, $td-&gt;( $_ ) ) \n    } loop( below =&gt; 25, by =&gt; 5 )\n)-&gt;as_HTML;\n</code>\n</pre>\n", "senID": 13}, {"tag": "br", "senID": 14}, {"text": ["HTML::Tiny"], "childNum": 0, "tag": "h2", "senID": 15, "childList": []}, {"code": "<pre>\n<code>\n use HTML::Tiny;\nmy $h = HTML::Tiny-&gt;new;\n\nmy $td = sub {\n    my $i = shift;\n    return map { \n        $h-&gt;td( { 'color' =&gt; $_ % 2 ? 'pink' : 'green' }, $i + $_ )\n    } 0..4;\n};\n\nsay $h-&gt;table(\n    { border =&gt; 0, cellpadding =&gt; 4 },\n    [\n        map { \n            $h-&gt;tr( { align =&gt; 'right' }, [ $td-&gt;( $_ ) ] )  \n        } loop( below =&gt; 25, by =&gt; 5 )    \n    ]\n);\n</code>\n</pre>\n", "senID": 16}, {"tag": "br", "senID": 17}, {"text": ["Markapl"], "childNum": 0, "tag": "h2", "senID": 18, "childList": []}, {"code": "<pre>\n<code>\n use Markapl;\n\ntemplate 'MyTable' =&gt; sub {\n    table ( border =&gt; 0, cellpadding =&gt; 4 ) {\n       for ( my $i = 1; $i &lt; 25; $i += 5 ) {\n           row ( align =&gt; 'right' ) {\n               for my $j ( 0.. 4 ) {\n                   td ( color =&gt; $j % 2 ? 'pink' : 'green' ) { $i + $j }\n               }\n           }\n       } \n    }\n};\n\nprint main-&gt;render( 'MyTable' );\n</code>\n</pre>\n", "senID": 19}, {"tag": "br", "senID": 20}, {"text": ["Template::Declare"], "childNum": 0, "tag": "h2", "senID": 21, "childList": []}, {"code": "<pre>\n<code>\n package MyTemplates;\nuse Template::Declare::Tags;\nuse base 'Template::Declare';\n\ntemplate 'MyTable' =&gt; sub {\n    table {\n        attr { border =&gt; 0, cellpadding =&gt; 4 };\n        for ( my $i = 1; $i &lt; 25; $i += 5 ) {\n            row  {\n                attr { align =&gt; 'right' };\n                    for my $j ( 0..4 ) {\n                        cell {\n                            attr { color =&gt; $j % 2 ? 'pink' : 'green' } \n                            outs $i + $j;\n                        }\n                    }\n            }\n        } \n    }\n};\n\npackage main;\nuse Template::Declare;\nTemplate::Declare-&gt;init( roots =&gt; ['MyTemplates'] );\nprint Template::Declare-&gt;show( 'MyTable' );\n</code>\n</pre>\n", "senID": 22}, {"tag": "br", "senID": 23}, {"text": ["XML::Generator"], "childNum": 0, "tag": "h2", "senID": 24, "childList": []}, {"code": "<pre>\n<code>\n use XML::Generator;\nmy $x = XML::Generator-&gt;new( pretty =&gt; 2 );\n\nmy $td = sub {\n    my $i = shift;\n    return map { \n        $x-&gt;td( { 'color' =&gt; $_ % 2 ? 'pink' : 'green' }, $i + $_ )\n    } 0..4;\n};\n\nsay $x-&gt;table(\n    { border =&gt; 0, cellpadding =&gt; 4 },\n    map { \n        $x-&gt;tr( { align =&gt; 'right' }, $td-&gt;( $_ ) )  \n    } loop( below =&gt; 25, by =&gt; 5 )    \n);\n</code>\n</pre>\n", "senID": 25}, {"text": ["\nAnd the following can be used to produce the \"loop\" in HTML::AsSubs / HTML::Tiny / XML::Generator examples...."], "childNum": 2, "tag": "p", "senID": 26, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "And the following can be used to produce the \"loop\" in HTML::AsSubs / HTML::Tiny / XML::Generator examples....", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n sub loop {\n    my ( %p ) = @_;\n    my @list;\n\n    for ( my $i = $p{start} || 1; $i &lt; $p{below}; $i += $p{by} ) {\n        push @list, $i;\n    }\n\n    return @list;\n}\n</code>\n</pre>\n", "senID": 27}, {"text": ["/I3az/"], "childNum": 0, "tag": "p", "senID": 28, "childList": []}], [{"text": ["One of The Perl Foundation's current grant-sponsored projects (a lightweight web framework for Perl 6) has working Perl6 code that provides a similar interface:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "The Perl Foundation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.perlfoundation.org/"}, {"href": "http://www.perlfoundation.org/ilya%5Fcarl%5Fand%5Fstephen%5Fa%5Flightweight%5Fweb%5Fframework%5Ffor%5Fperl%5F6", "text": "lightweight web framework for Perl 6", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://blogs.gurulabs.com/stephen/2009/03/tagspm-for-the-perl-6-web-proj.html", "text": "provides a similar interface", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n use Tags;\nsay show {\n    html {\n        head { title { 'Tags Demo' } }\n        body {\n            outs \"hi\";\n            ul :id&lt;numberlist&gt; {\n                outs \"A list from one to ten:\";\n                for 1..10 {\n                    li :class&lt;number&gt;, { $_ }\n                }\n            }\n        }\n    }\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Browse or clone the current code on github."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "github", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/masak/web/tree/master"}]}], [{"text": ["Perl's CGI module has support for something like this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n use CGI ':standard';\nuse Lisp::Fmt \n\nprint header();\n\nprint table( { -border =&gt; 1, -cellpading =&gt; 4},\n    loop({ below =&gt; 25, by=&gt; 5}, sub {\n        my $i = shift;\n        tr( {-align =&gt; 'right'} ,\n            loop({ from =&gt; $i, below $i + 5}, sub {\n                my $j = shift;\n                td({-bgcolor =&gt; ($oddp eq $j ? 'pink' : 'green')}\n                    fmt(\"~@R\", 1+$j);\n            })\n        )\n    });\n</code>\n</pre>\n", "senID": 1}, {"text": ["I tried to keep it lispy, so you'll have to implement a lispy loop function yourself.", "I don't really program Common List, so I hope I understood your code correctly."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "loop", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["There is stan: An s-expression-like syntax for expressing xml in pure python, from Divmod's Nevow.", "I think it's kind of what you want.", "An example from the tutorial linked:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "stan", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.kieranholland.com/code/documentation/nevow-stan/"}, {"text": "An s-expression-like syntax for expressing xml in pure python", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "Divmod's Nevow", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://divmod.org/trac/wiki/DivmodNevow"}]}, {"code": "<pre>\n<code>\n t = T.table[\n           T.tr[\n               T.td[ \"Name:\" ],\n               T.td[ original.name ]\n           ],\n           T.tr[\n               T.td[ \"Email:\" ],\n               T.td[T.a(href='mailto:%s' % original.email)[ original.email ] ]\n           ],\n           T.tr[\n               T.td[ \"Password:\" ],\n               T.td[ \"******\" ]\n           ],\n       ]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Perl's standard CGI module can do something similar:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CGI", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/dist/CGI.pm/CGI.pm"}]}, {"code": "<pre>\n<code>\n #!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse CGI qw/:standard/;\n\nprint \n    start_html(\"An example\"),\n    h1(\n    \t{\n    \t\t-align =&gt; \"left\",\n    \t\t-class =&gt; \"headerinfo\",\n    \t},\n    \t'this is an example'\n    ),\n    \"The CGI module has functions that add HTML:\",\n    ul( map li($_),\n    \t(\"start_html\",\n    \t\"h1, h2, h3, etc.\",\n    \t\"ol, ul, li\",\n    \t\"ol, ul, li\",\n    \t\"table, tr, th, td\")\n    ),\n    \"and many more.\",\n    end_html();\n</code>\n</pre>\n", "senID": 1}, {"text": ["That produces:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &lt;!DOCTYPE html\n        PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n         \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\" xml:lang=\"en-US\"&gt;\n&lt;head&gt;\n&lt;title&gt;An example&lt;/title&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1 class=\"headerinfo\" align=\"left\"&gt;this is an example&lt;/h1&gt;The CGI module has functions that add HTML:&lt;ul&gt;&lt;li&gt;start_html&lt;/li&gt; &lt;li&gt;h1, h2, h3, etc.&lt;/li&gt; &lt;li&gt;ol, ul, li&lt;/li&gt; &lt;li&gt;ol, ul, li&lt;/li&gt; &lt;li&gt;table, tr, th, td&lt;/li&gt;&lt;/ul&gt;and many more.\n&lt;/body&gt;\n&lt;/html&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["The li section could be rewritten like this"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print ol(map li($_), @list);\n</code>\n</pre>\n", "senID": 5}, {"text": ["if you had a list or an array."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Clojure"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["There are a bunch of CL-WHO-inspired HTML-generating libraries available in Clojure (as one would expect, Clojure being a Lisp).", "Here's how you could do it using the HTML library that comes with Compojure, and cl-format:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Compojure", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://github.com/weavejester/compojure/tree/master"}, {"href": "http://github.com/tomfaulhaber/cl-format/tree/master", "text": "cl-format", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n (use 'compojure.html\n     'com.infolace.format)\n\n(html\n [:table {:border 0 :cellpadding 4}\n  (map (fn [tds] [:tr {:align \"right\"} tds])\n       (partition 5 (map (fn [num color]\n                           [:td {:bgcolor color}\n                            (cl-format nil \"~@R\" (inc num))])\n                         (range 25)\n                         (cycle [\"green\" \"pink\"]))))])\n</code>\n</pre>\n", "senID": 2}, {"text": ["Compojure's HTML library makes good use of Clojure's literal hash-maps as attribute/value pairs, and using literal vectors for tags instead of lists for everything helps the tags stand out a bit and avoids some of the need for macro magic."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["partition breaks up a collection into groups of some number of elements.", "cycle generates an infinitely repeating list of the elements of a collection.", "These plus range and map help you avoid explicit loops and counter variables."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "partition", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "cycle", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "range", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "map", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Here is such thing for JavaScript.", "It looks like the following:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://elzr.com/posts/hyperscript"}]}, {"code": "<pre>\n<code>\n T.div({ className: \"content\"},\n      T.p(\"Some \", T.u(\"paragraph\")),\n      T.p(\"Another paragraph\"))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Haskell"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["Haskell has an HTML combinator library that is not all that different from CL-WHO.", "The lazy functional approach to programming, though, does result in a much different idiomatic iteration structure than the loop facilities in Common Lisp:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import Data.Char\nimport Data.List\nimport Text.Html\n-- from http://fawcett.blogspot.com/2007/08/roman-numerals-in-haskell.html\nimport RomanNumerals\n\n-- Simple roman numeral conversion; returns \"\" if it cannot convert.\nrom :: Int -&gt; String\nrom r = let m = toRoman r\n        in (map toUpper . maybe \"\" id) m\n\n-- Group a list N elements at a time.\n-- groupN 2 [1,2,3,4,5] == [[1,2],[3,4],[5]]\ngroupN n [] = []\ngroupN n xs = let (a, b) = splitAt n xs in a : (groupN n b)\n\npink = \"pink\" -- for convenience below; green is already covered by Text.Html\n\nrom_table = table ! [border 0, cellpadding 4] &lt;&lt; trs\n    where\n      -- a list of &lt;tr&gt; entries\n      trs = map (rom_tr . map rom_td) rom_array\n\n      -- generates a &lt;tr&gt; from a list of &lt;td&gt;s\n      rom_tr tds = tr ! [align \"right\"] &lt;&lt; tds\n\n      -- generates a &lt;td&gt; given a numeral and a color\n      rom_td (r, c) = td ! [bgcolor c] &lt;&lt; r\n\n      -- our 5 x 5 array (list x list) of numerals and colors\n      rom_array = (groupN 5 . take 25) rom_colors\n\n      -- a theoretically infinite list of pairs of roman numerals and colors\n      -- (practically, though, the roman numeral library has limits!)\n      rom_colors = zip (map rom [1..]) colors\n\n      -- an infinite list of alternating green and pink colors\n      colors = cycle [green, pink]\n\nmain = let s = prettyHtml rom_table \n       in putStrLn s\n</code>\n</pre>\n", "senID": 2}, {"text": ["I should note there's also a little combinator library in Text.Html for composing tables using \"above\" and \"beside\" operators to calculate row/column spanning, but it's a little too simplistic in terms of applying attributes to duplicate this example exactly, and we don't need the fancy splitting of rows and columns."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["There's html-tags, a Chicken Scheme extension.", "html-tags generates either [X]HTML or SXML."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "html-tags", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.call-cc.org/egg/html-tags"}, {"text": "Chicken Scheme", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://call-cc.org"}]}, {"text": ["Here's an example (using the loop extension and considering string output):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n (&lt;table&gt; border: 0 cellpadding: 4\n  (string-intersperse\n   (loop for i below 25 by 5\n         collect\n         (&lt;tr&gt; align: \"right\"\n               (string-intersperse\n                (loop for j from i below (+ i 5)\n                      collect\n                      (&lt;td&gt; bgcolor: (if (odd? j)\n                                         \"pink\"\n                                         \"green\")\n                            (+ 1 j))))))))\n</code>\n</pre>\n", "senID": 2}, {"text": ["I'd add links to the loop and html-utils extensions (which is built on top of html-tags), but stackoverflow is considering I'm a spammer and only allows me to post a maximum of two links."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]