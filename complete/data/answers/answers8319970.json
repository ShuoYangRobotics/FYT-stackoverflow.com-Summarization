[[{"text": ["You can do this in O(n + n*log(n)) by sorting both files first and then iterate over both simultaneously."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # sort file1 and file2 on disk or in memory\nwhile len(file1) &gt; 0 and len(file2) &gt; 0:\n    while file1[0] &lt; file2[0]:\n        diff.append(file1[0])\n        file1 = file1[1:]\n    while file1[0] &gt; file2[0]:\n        diff.append(file2[0])\n        file2 = file2[1:]\n    while file1[0] == file2[0]:\n        file1 = file1[1:]\n        file2 = file2[1:]\ndiff = diff + file1 + file2 # add the rest to the diff\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You need to go back to the beginning of file_old at the beginning of each iteration of your loop.", "Something like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "file_old", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for each_line in file_new:\n    file_old.seek(0)\n    for every_line in file_old:\n        ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, the logic of your innermost loop seems wrong.", "I think you want something like"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for each_line in file_new:\n    file_old.seek(0)\n    found = False\n    for every_line in file_old:\n        if each_line == every_line:\n            found = True\n            break\n\n    if not found:\n        file_diff.write(each_line)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["FWIW, the difflib module was designed for this kind of use case."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "difflib module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/difflib.html#module-difflib"}]}, {"text": ["If you need to do it manually, Python's sets can make it easier:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n file_diff = open(r'C:\\Users\\test\\Desktop\\file_diff.txt', 'w')\noldlines = set(open(r'C:\\Users\\test\\Desktop\\file_old.txt', 'r'))\nfor line in open(r'C:\\Users\\test\\Desktop\\file1.txt', 'r'):\n    if line not in oldlines:\n        file_diff.write(line)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["srgerg's answer will work."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, reading through files multiple times will have a very large runtime complexity.", "Therefore, if the files (though large) are small enough to fit into memory, then you might consider putting all the lines in file_old into a data structure for comparison:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "file_old", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n old_lines = set((line.strip() for line in open(r'C:\\Users\\test\\Desktop\\file_old.txt', 'r+')))\nfile_new = open(r'C:\\Users\\test\\Desktop\\file1.txt', 'r+')\nfile_diff = open(r'C:\\Users\\test\\Desktop\\file_diff.txt', 'w')\n\nfor line in file_new:\n    if line.strip() not in old_lines:\n        file_diff.write(line)\nfile_new.close()\nfile_diff.close()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Hope this helps"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I suspect you want missing lines in any order?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "in any order", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["This is a quick and dirty implementation based on set():"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "set()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def readfile(name):\n    afile = open(name, 'r+')\n    lines = set([l.strip() for l in afile])\n    afile.close()\n    return lines\n\ndef main():\n    oldset = readfile(r'file_old.txt')\n    newset = readfile(r'file1.txt')\n\n    file_diff = open(r'file_diff.txt', 'w')\n\n    for diff in (newset - oldset):\n        file_diff.write(diff)\n\n    file_diff.close()\n\nmain()\n</code>\n</pre>\n", "senID": 2}, {"text": ["This may not scale too well for very large input files."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you can't assume the files are sorted, then I'd do something like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def diffUnsorted(fn1, fn2) :\n    return set([l.strip() for l in open(fn1) if l.strip() != \"\"]) - \\\n           set([l.strip() for l in open(fn2) if l.strip() != \"\"])\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you're going to be dealing with large files though, I'd go with a solution that sorts the files first, which gets you O(n) time and O(1) space (not counting the sorting..)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]