[[{"text": ["print adds an extra newline after the input and you already have one newline there.", "You should either strip the existing newline (line.rstrip(\"\\n\")) or use sys.stdout.write() instead."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "line.rstrip(\"\\n\")", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "sys.stdout.write()", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n import fileinput\nimport re\np = re.compile(r'^0,')\nfor line in fileinput.FileInput(\"sample.txt\",inplace=1):\n    print p.sub('1,', line.strip())\n</code>\n</pre>\n", "senID": 0}, {"text": ["The existing code you have doesn't actually change the lines like you want; print a doesn't do anything if a isn't actually defined!", "So you end up just printing a blank line (the print a bit) and then printing the existing line, hence why you get a file that's unaltered except for the addition of some blank lines."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "print a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "print a", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Either use rstrip to remove the trailing new lines before printing or use sys.stdout.write instead of print."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "rstrip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sys.stdout.write", "childNum": 0, "tag": "code", "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also, if you only need to modify the first element, there is no need to split the entire line and join it again.", "You only need to split on the first comma:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n line.split(',', 1)\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want even better performance you could also just test the value of line[0] directly."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "line[0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n fixed = []\nfor l in file('sample.txt'):\n    parts = l.split(',',1)\n    if(parts[0] == '0'):\n        # not sure what you want to do here, but you want to \"change this\" number to 1?\n        parts[0] = 1\n    fixed.append(parts.join(','))\noutp = file('sample.txt','w')\nfor f in fixed:\n    outp.write(f)\noutp.close()\n</code>\n</pre>\n", "senID": 0}, {"text": ["This is untested, but it should get you most of the way there.", "Good luck"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n import fileinput\nfor line in fileinput.FileInput(\"sample.txt\",inplace=1):\n    s=line.rstrip().split(\",\")\n    print a\n    print ','.join(s)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You have to use a comma at the end of your print so that it doesn't add a newline.", "Like so:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "print", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.rexx.com/~dkuhlman/python_101/python_101.html#SECTION004310000000000000000"}]}, {"code": "<pre>\n<code>\n print \"Hello\",\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is what I came up with:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n input = open('file.txt', 'r')\noutput = open('output.txt', 'w')\nfor line in input:\n    values = line.split(',')\n    if (values[0] == '0'):\n        values[0] = '1'\n    output.write(','.join(values))\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want a better csv handling library you might want to use this instead of split."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}], [{"text": ["The cleanest way to do it is to use the CSV parser :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import fileinput\nimport csv \n\nf = fileinput.FileInput(\"test.txt\",inplace=1)\nfichiercsv = csv.reader(f, delimiter=',')\n\nfor line in fichiercsv:\n    line[0] = \"1\"\n    print \",\".join(line)\n</code>\n</pre>\n", "senID": 1}]]