[[{"code": "<pre>\n<code>\n print (bool(mydict.get('key')))\n</code>\n</pre>\n", "senID": 0}, {"text": ["or, in an if statement:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print ('True' if mydict.get('key') else 'False')\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you the value not being present is an error case (i.e.", "you expect it to be there), you should choose solution #2, i.e."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n print ('True' if mydict['key'] else 'False')\n</code>\n</pre>\n", "senID": 4}, {"text": ["That allows mydict['key'] to choose the most efficient definition for being empty.", "For some objects (such as ones in clusters), determining the actual length is a fairly complicated operation, whereas it's simple to determine whether the object is empty or not."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "mydict['key']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You could also compare to '', i.e.", "mydict['key'] == '', to make your expression abundantly clear.", "Using len works, but is not as intuitive."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "''", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "mydict['key'] == ''", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "len", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["In summary, leave it to the tested object to define whether it's empty or not and just cast it to bool."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "leave it to the tested object to define whether it's empty or not", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["If you know the key is in the dictionary, use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if mydict[\"key\"]:\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["It is simple, easy to read, and says, \"if the value tied to 'key' evaluates to True, do something\".", "The important tidbit to know is that container types (dict, list, tuple, str, etc) only evaluate to True if their len is greater than 0."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "len", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["It will also raise a KeyError if your premise that a key is in mydict is violated."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "KeyError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "mydict", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["All this makes it Pythonic."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["From here:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/expressions.html#boolean-operations"}]}, {"text": ["I think it's safe to say that directly evaluating it is your best option - although, as @phihag said, it's safer to use get instead, as it will protect you from a KeyError."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "get", "tag": "a", "pos": 0, "childList": [{"text": "get", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#dict.get"}, {"text": "get", "childNum": 0, "tag": "code", "childList": []}, {"text": "KeyError", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I'd use a variation of the first option:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; mydict = {\"key\" : \"value\", \"emptykey\" : \"\"}\n&gt;&gt;&gt; print bool(mydict[\"key\"])\nTrue\n&gt;&gt;&gt; print bool(mydict[\"emptykey\"])\nFalse\n</code>\n</pre>\n", "senID": 1}, {"text": ["Any class that provides __len__ can be converted into a boolean directly (see Truth Value Testing), so bool(container) is the equivalent of bool(len(container)).", "A length of 0 will become the boolean False while all other lengths will be True.", "You'll never have a negative length object.", "Also, the booleans True and False can be printed directly via print, so you don't need the conditional."], "childNum": 9, "tag": "p", "senID": 2, "childList": [{"text": "__len__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Truth Value Testing", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#truth-value-testing"}, {"text": "bool(container)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "bool(len(container))", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The most Pythonic way would be to not define the undefined value (although whether this is usable depends on what you're using it for) and use in:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n mydict = {\"key\" : \"value\"}\nprint \"True\" if \"key\" in mydict else \"False\"  # prints true\nprint \"True\" if \"emptykey\" in mydict else \"False\"  # prints false\n</code>\n</pre>\n", "senID": 1}, {"text": ["Otherwise, you have three options:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The title and the first sentence actually express two slightly different questions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For the title question "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'd go with  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n \"key\" in mydict\n</code>\n</pre>\n", "senID": 3}, {"text": ["and for the second question"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I'd go with "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n \"key\" in mydict and bool(mydict[\"key\"])\n</code>\n</pre>\n", "senID": 6}, {"text": ["The first part of which checks to see whether \"key\" is present in mydict and the second part returns true for all values of \"key\" other then False, None, the empty string, the empty dictionary, the empty list and 0."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Of your two examples I prefer the second."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, I advise against storing the empty keys.", "Also a defaultdict would work well here:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import defaultdict\n&gt;&gt;&gt; d = defaultdict(list)\n&gt;&gt;&gt; d[1].append(1)\n&gt;&gt;&gt; 1 in d\nTrue\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you must store empty keys you don't need the string values \"True\" and \"False\".", "Just do this:"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "\"True\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"False\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n print bool(mydict[key])\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Your initial conditions are not Pythonic.", "Why are you storing a key with an empty value?", "Can you delete the key instead of setting it to None?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The Pythonic way is to check key existence with if key in dictionary, not checking for a non-empty value."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if key in dictionary", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]