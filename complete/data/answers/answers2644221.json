[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; import json\n&gt;&gt;&gt; json.loads('[[0,0,0], [0,0,1], [1,1,0]]')\n[[0, 0, 0], [0, 0, 1], [1, 1, 0]]\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import ast\n&gt;&gt;&gt; ast.literal_eval('[[0,0,0], [0,0,1], [1,1,0]]')\n[[0, 0, 0], [0, 0, 1], [1, 1, 0]]\n</code>\n</pre>\n", "senID": 0}, {"text": ["For tuples"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ast.literal_eval('[(0,0,0), (0,0,1), (1,1,0)]')\n[(0, 0, 0), (0, 0, 1), (1, 1, 0)]\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re    \n&gt;&gt;&gt; list_strs = re.findall(r'\\[\\d+\\,\\d+\\,\\d+\\]', s)\n&gt;&gt;&gt; [[[int(i)] for i in l[1:-1].split(',')] for l in list_str]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This is a little more flexible than Satoru's, and doesn't use any libraries.", "Still, it won't work with more deeply nested lists.", "For that, I think you would need a recursive function (or loop), or eval."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n str = \"[[0,0,0],[0,0,1],[1,1,0]]\"\nstrs = str.replace('[','').split('],')\nlists = [map(int, s.replace(']','').split(',')) for s in strs]\n</code>\n</pre>\n", "senID": 1}, {"text": ["lists now contains the list of lists you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["[[int(i) for i in x.strip(\" []\").split(\",\")] for x in s.strip('[]').split(\"],\")]"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[[int(i) for i in x.strip(\" []\").split(\",\")] for x in s.strip('[]').split(\"],\")]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["a list comprehension in a list comprehension...\nbut that will melt your brain"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; string='[[0,0,0], [0,0,1], [1,1,0]]'\n&gt;&gt;&gt; eval(string)\n[[0, 0, 0], [0, 0, 1], [1, 1, 0]]\n&gt;&gt;&gt; a=eval(string)\n&gt;&gt;&gt; a\n[[0, 0, 0], [0, 0, 1], [1, 1, 0]]\n</code>\n</pre>\n", "senID": 0}, {"text": ["before passing your string to eval(), do the necessary sanitization first."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "eval()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]