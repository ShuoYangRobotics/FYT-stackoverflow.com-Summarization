[[{"text": ["I'm going to quote the PyGTK FAQ:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyGTK FAQ", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://faq.pygtk.org/index.py?req=show&file=faq23.020.htp"}]}, {"code": "<pre>\n<code>\n while work_left:\n    ...do something...\n    progressbar.set_fraction(...)\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n while work_left:\n    ...do something...\n    progressbar.set_fraction(...)\n    while gtk.events_pending():\n        gtk.main_iteration()\n</code>\n</pre>\n", "senID": 2}, {"code": "<pre>\n<code>\n def my_task(data):\n    ...some work...\n    while heavy_work_needed:\n        ...do heavy work here...\n        progress_label.set_text(data) # here we update parts of UI\n        # there's more work, return True\n        yield True\n    # no more work, return False\n    yield False\n\ndef on_start_my_task_button_click(data):\n    task = my_task(data)\n    gobject.idle_add(task.next)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["More than likely the issue is that in your progress callback, which is where I presume you're updating the progress bar, you're not making a call to manually update the display i.e.", "run through the GUI's event loop.", "This is just speculation though, if you can provide more code, it might be easier to narrow it down further."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The reason you need to manually update the display is because your main thread is also performing the upload, which is where it's blocking."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["here is the code im using to set the progress bar fraction.", "what do i need to do, to update the display manually?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(mainwin is the module with the window, mainw is the actual window and prog_bar is the progress bar component of the window.", ") "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n #Callback function invoked when download/upload has progress\ndef progress(download_t, download_d, upload_t, upload_d):\n    print 'in fileupload progress'\n    mainwin.mainw.prog_bar.set_fraction(upload_d/upload_t)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["In python 2.x integer operands result in integer division.", "Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #Callback function invoked when download/upload has progress\ndef progress(download_t, download_d, upload_t, upload_d):\n    print 'in fileupload progress'\n    mainwin.mainw.prog_bar.set_fraction(float(upload_d) / upload_t)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Yes, you probably need concurrency, and yes threads are one approach, but if you do use threads, please use an method like this one: http://unpythonic.blogspot.com/2007/08/using-threads-in-pygtk.html which will abstract away the pain, and allow you to focus on the important aspects."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://unpythonic.blogspot.com/2007/08/using-threads-in-pygtk.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://unpythonic.blogspot.com/2007/08/using-threads-in-pygtk.html"}]}, {"text": ["(I have not repeated everything in that blog post through laziness, hence community wiki)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["One option, if you are not married to pycurl, is to use GObject's IO watchers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://pygtk.org/pygtk2reference/gobject-functions.html#function-gobject--io-add-watch"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pygtk.org/pygtk2reference/gobject-functions.html#function-gobject--io-add-watch", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pygtk.org/pygtk2reference/gobject-functions.html#function-gobject--io-add-watch"}]}, {"text": ["Using this you can interleave the file upload with the normal PyGTK event loop, and even do the set_progress call in your IO watch callback.", "If you are offloading all the work for uploading onto pycurl this is not really feasible, but if you're just uploading a file over HTTP, io_add_watch will make using a socket for this much less painful as well."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]