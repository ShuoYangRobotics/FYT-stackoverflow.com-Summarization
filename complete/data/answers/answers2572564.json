[[{"text": ["use the if else construct"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f = lambda x:'' if x is None else x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The problem in your case that '' is considered as boolean False.", "bool('') == False.", "You can use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f =lambda x:x if x is not None else ''\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It's not lambdas that are the problem here.", "It's the pythonic if/else expressiong you are using there."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(condition) and (expression1) or (expression2) most of the times means the (condition) ?", "(expression1) : (expression2) you'd expect, except when expression1 evaluates to False."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "(condition) and (expression1) or (expression2)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(condition) ? (expression1) : (expression2)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "expression1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["This is because the whole thing is evaluated in order.", "If condition fails, expression1 is evaluated.", "If it is True, it is returned, due to short circuit evaluation, hence the expected behaviour.", "If not, expression2 is returned.", "'' evaluates to False."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "condition", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "expression1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "expression2", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "''", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}], [{"text": ["Try short-circuit evaluation:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "short-circuit evaluation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Short-circuit_evaluation"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; g = lambda x: x or ''\n &gt;&gt;&gt; g(3)\n 3\n &gt;&gt;&gt; g(None)\n ''\n &gt;&gt;&gt; # beware that ...\n &gt;&gt;&gt; g(0)\n ''\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Python gives and a higher precedence than or, so the parentheses fall here:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n lambda x: (x == None and '') or x\n</code>\n</pre>\n", "senID": 1}, {"text": ["When passed None, this becomes (True and '') or None.", "Python\u2019s boolean operators work by returning one argument or another (whence this little trick), so this reduces to '' or None, and finally None."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(True and '') or None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "'' or None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["This little trick stems from back before Python 2.5, which didn't have the conditional operator.", "The caveat, which you just ran into, is that it doesn\u2019t behave as expected when True branch has a False value.", "Unless you\u2019re concerned with Python \u2264 2.4, just use the conditional operator."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "conditional operator", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0308/"}, {"text": "True", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["The problem is that Python treats the empty string as False.", "When you pass None to your function, it evaluates to:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n None == None and '' or None\n</code>\n</pre>\n", "senID": 1}, {"text": ["which (effectively) becomes:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n True and False or None\n</code>\n</pre>\n", "senID": 3}, {"text": ["then:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n False or None\n</code>\n</pre>\n", "senID": 5}, {"text": ["and finally:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n None\n</code>\n</pre>\n", "senID": 7}, {"text": ["One solution would be: "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n lambda x: x if x is not None else ''\n</code>\n</pre>\n", "senID": 9}, {"text": ["If you know x will be either a string or None, then you can leverage the fact that None is also a False value in Python:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n lambda x: x or ''\n</code>\n</pre>\n", "senID": 11}]]