[[{"text": ["get matplotlib"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "matplotlib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://matplotlib.sourceforge.net"}]}], [{"text": ["The easiest option is matplotlib.", "Two particular solutions that might work for you are:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1) You can generate a series of plots, each a snapshot at a given time.", "These can either be displayed as a dynamic plot in matplotlib, where the axes stay the same and the data moves around; or you can save the series of plots to separate files and later combine them to make a movie (using a separate application).", "There a number of examples in the official examples for doing these things."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["2) A simple scatter plot, where the colors of the circles changes with time might work well for your data.", "This is super easy.", "See this, for example, which produces this figure\n"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "this", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://matplotlib.sourceforge.net/examples/pylab_examples/ellipse_collection.html"}, {"text": "", "childNum": 0, "tag": "img", "childList": []}]}], [{"text": ["I'd try rpy.", "All the power of R, from within python.", "http://rpy.sourceforge.net/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://rpy.sourceforge.net/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://rpy.sourceforge.net/"}]}, {"text": ["rpy is awesome."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Check out the CRAN library for animations,\nhttp://cran.r-project.org/web/packages/animation/index.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://cran.r-project.org/web/packages/animation/index.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cran.r-project.org/web/packages/animation/index.html"}]}, {"text": ["Of course, you have to learn a bit about R to do this, but if you're planning to do this kind of thing routinely in future it will be well worth your while to learn."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you are interested in scientific plotting using Python then have a look at Mlab: http://code.enthought.com/projects/mayavi/docs/development/html/mayavi/mlab.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.enthought.com/projects/mayavi/docs/development/html/mayavi/mlab.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.enthought.com/projects/mayavi/docs/development/html/mayavi/mlab.html"}]}, {"text": ["It allows you to plot 2d / 3d and animate your data and the quality of the charts is really high. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Enthought's Chaco is designed for interactive/updating plots.", "the api and such takes a little while to get use to, but once you're there it's a fantastic framework to work with."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Chaco", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.enthought.com/chaco/"}]}], [{"text": ["I have had reasonable success with Python applications generating SVG with animation features embedded, but this was with a smaller set of elements than what you probably have.", "For example, if your data is about a seismic event, show a circle that shows up when the event happened and grows in size matching the magnitude of the event.", "A moving indicator over a timeline is really simple to add."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Kaleidoscope (Opera, others maybe, Safari not) shows lots of pieces moving around and I found inspirational.", "Lots of other good SVG tutorial content on the site too."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Kaleidoscope", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.kevlindev.com/samples/kaleidoscope/kaleidoscope.svg"}]}], [{"text": ["You might want to look at PyQwt.", "It's a plotting library which works with Qt/PyQt. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyQwt", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyqwt.sourceforge.net/"}]}, {"text": ["Several of the PyQwt examples (in the qt4examples directory) show how to create \"moving\" / dynamically changing plots -- look at CPUplot.py, MapDemo.py, DataDemo.py.  "], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "CPUplot.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "MapDemo.py", "childNum": 0, "tag": "code", "childList": []}, {"text": "DataDemo.py", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Jython (i.e.", "Python in Java) is a perfect OO approach for scientific computing.", "You can look at the jHepWork project http://jwork.org/jhepwork/ \nPerhaps you will need to look at the tutorial and examples here:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://jwork.org/jhepwork/", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://jwork.org/jhepwork/"}]}, {"text": ["http://jwork.org/jhepwork/examples/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://jwork.org/jhepwork/examples/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jwork.org/jhepwork/examples/"}]}, {"text": ["Note that the syntax is in Python, but you can call the Java classes and numerical libraries"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]