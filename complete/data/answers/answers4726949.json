[[{"text": ["You can think of a, b, and c as three bits that when put together form a number between 0 and 7.", "Then, you can have an array of the values ['first', 'second', ... 'eighth'] and use the bit value as an offset into the array.", "This would just be two lines of code (one to assemble the bits into a value from 0-7, and one to lookup the value in the array)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's the code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n nth = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']\nnth[(a and 4 or 0) | (b and 2 or 0) | (c and 1 or 0)]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["How about using a dict?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n name = {(True, True, True): \"first\", (True, True, False): \"second\",\n        (True, False, True): \"third\", (True, False, False): \"fourth\",\n        (False, True, True): \"fifth\", (False, True, False): \"sixth\",\n        (False, False, True): \"seventh\", (False, False, False): \"eighth\"}\n\nprint name[a,b,c] # prints \"fifth\" if a==False, b==True, c==True etc.\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Maybe not much better, but how about"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n results = ['first', 'second', 'third', 'fourth', \n           'fifth', 'sixth', 'seventh', 'eighth']\nname = results[((not a) &lt;&lt; 2) + ((not b) &lt;&lt; 1) + (not c)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["if a,b,c are really booleans:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n li = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']\nname = li[a*4 + b*2 + c]\n</code>\n</pre>\n", "senID": 1}, {"text": ["if they are not booleans:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n li = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']\na,b,c = map(bool,(a,b,c))\nname = li[a*4 + b*2 + c]\n</code>\n</pre>\n", "senID": 3}, {"text": ["idea from Clint Miller"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Since your getting all the combinations, you could create an index based on the values like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def value(a,b,c ): \n   values = ['8th','7th','6th','5th','4th','3rd','2nd','1st']\n   index = ( 4 if a else 0 ) + ( 2 if b else 0 ) + ( 1 if c else 0 )\n   return values[index]\n\nif __name__ == \"__main__\":\n   print value(True,  True,  True )\n   print value(True,  True,  False )\n   print value(True,  False, True )\n   print value(True,  False, False )\n   print value(False, True,  True )\n   print value(False, True,  False)\n   print value(False, False, True )\n   print value(False, False, False)\n</code>\n</pre>\n", "senID": 1}, {"text": ["output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n</code>\n</pre>\n", "senID": 3}], [{"text": ["What about nested ifs - it means you don't have to check everything several times and reads clearer to me (although maybe not quite as clever as some of the other answers):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if a:\n    if b:\n        if c:\n            name=\"first\"\n        else:\n            name=\"second\"\n    else:\n        if c:\n            name=\"third\"\n        else:\n            name=\"fourth\"\nelse:\n    if b:\n        if c:\n            name=\"fifth\"\n        else:\n            name=\"sixth\"\n    else:\n        if c:\n            name=\"seventh\"\n        else:\n            name=\"eighth\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["To measure speeds:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from time import clock\na,b,c = True,False,False\n\nA,B,C,D,E,F,G,H = [],[],[],[],[],[],[],[]\n\n\nfor j in xrange(30):\n\n\n    te = clock()\n    for i in xrange(10000):\n        name = (a and b and c and 'first' or\n                a and b and not c and 'second' or\n                a and not b and c and 'third' or\n                a and not b and not c and 'fourth' or\n                not a and b and c and 'fifth' or\n                not a and b and not c and 'sixth' or\n                not a and not b and c and 'seventh' or\n                not a and not b and not c and 'eighth')\n    A.append(clock()-te)\n\n\n\n    te = clock()\n    for i in xrange(10000):\n        if a and b and c:\n            name = 'first'\n        elif a and b and not c:\n            name = 'second'\n        elif a and not b and c:\n            name = 'third'\n        elif a and not b and not c:\n            name = 'fourth'\n        elif not a and b and c:\n            name = 'fifth'\n        elif not a and b and not c:\n            name = 'sixth'\n        elif not a and not b and c:\n            name = 'seventh'\n        elif not a and not b and not c:\n            name = 'eighth'\n    B.append(clock()-te)\n\n    #=====================================================================================\n\n    li = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']\n    te = clock()\n    for i in xrange(10000):\n        name = li[a*4 + b*2 + c]\n    C.append(clock()-te)\n\n    #=====================================================================================\n\n    nth = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']\n    te = clock()\n    for i in xrange(10000):\n        name = nth[(a and 4 or 0) | (b and 2 or 0) | (c and 1 or 0)]\n    D.append(clock()-te)\n\n\n    nth = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']\n    te = clock()\n    for i in xrange(10000):\n        name = nth[(a and 4 or 0) + (b and 2 or 0) + (c and 1 or 0)]\n    E.append(clock()-te)\n\n    #=====================================================================================\n\n    values = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']\n    te = clock()\n    for i in xrange(10000):\n        name = values[( 4 if a else 0 )| ( 2 if b else 0 ) | ( 1 if c else 0 )]\n    F.append(clock()-te)\n\n\n    values = ['eighth', 'seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first']\n    te = clock()\n    for i in xrange(10000):\n        name = values[( 4 if a else 0 ) + ( 2 if b else 0 ) + ( 1 if c else 0 )]\n    G.append(clock()-te)\n\n    #=====================================================================================\n\n    dic = {(True, True, True): \"first\",\n           (True, True, False): \"second\",\n           (True, False, True): \"third\",\n           (True, False, False): \"fourth\",\n           (False, True, True): \"fifth\",\n           (False, True, False): \"sixth\",\n           (False, False, True): \"seventh\",\n           (False, False, False): \"eighth\"}\n    te = clock()\n    for i in xrange(10000):\n        name = dic[a,b,c]\n    H.append(clock()-te)\n\n\n\n\nprint min(A),'\\n', min(B),'\\n\\n', min(C),'\\n\\n', min(D),'\\n',min(E),'\\n\\n',min(F),'\\n', min(G),'\\n\\n', min(H)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Result"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 0.0480533140385 \n0.0450973517584 \n\n0.0309056039245 \n\n0.0295291720037 \n0.0286550385594 \n\n0.0280122194301 \n0.0266760160858 \n\n0.0249769174574\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I'd go for the list/bits solution of @OscarRyz, @Clint and @Sven, but here's another one:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["S1 = frozenset(['first', 'second', 'third', 'fourth'])\nS2 = frozenset(['first', 'second', 'fifth', 'sixth'])\nS3 = frozenset(['first', 'third', 'fifth', 'seventh'])\nlast = 'eighth'\nempty = frozenset([])"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "S1 = frozenset(['first', 'second', 'third', 'fourth'])\nS2 = frozenset(['first', 'second', 'fifth', 'sixth'])\nS3 = frozenset(['first', 'third', 'fifth', 'seventh'])\nlast = 'eighth'\nempty = frozenset([])", "childNum": 1, "tag": "pre", "pos": 0, "childList": [{"text": "S1 = frozenset(['first', 'second', 'third', 'fourth'])\nS2 = frozenset(['first', 'second', 'fifth', 'sixth'])\nS3 = frozenset(['first', 'third', 'fifth', 'seventh'])\nlast = 'eighth'\nempty = frozenset([])", "tag": "code"}]}, {"text": "S1 = frozenset(['first', 'second', 'third', 'fourth'])\nS2 = frozenset(['first', 'second', 'fifth', 'sixth'])\nS3 = frozenset(['first', 'third', 'fifth', 'seventh'])\nlast = 'eighth'\nempty = frozenset([])", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["def value(a, b, c):\n    for r in (a and S1 or empty) &amp; (b and S2 or empty) &amp; (c and S3 or empty):\n        return r\n    return last"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"senID": 3}], [{"text": ["Another option would be to create a helper function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def first_true(*args):\n    true_vals = (arg for arg in args if arg[0])\n    return next(true_vals)[1]\n\nname = first_true((a and b and c, 'first'),\n                  (a and b and not c, 'second'),\n                  (a and not b and c, 'third'),\n                  (a and not b and not c, 'fourth'),\n                  (not a and b and c, 'fifth'),\n                  (not a and b and not c, 'sixth'),\n                  (not a and not b and c, 'seventh'),\n                  (not a and not b and not c, 'eighth'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["This method assumes that one of the tests passed in will be true.", "It could also be made lazier with lambdas."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]