[[{"text": ["' '.join([str(a)+\"@\"+str(b) for (a,b) in [(1,1),(2,2),(3,3)]])"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "' '.join([str(a)+\"@\"+str(b) for (a,b) in [(1,1),(2,2),(3,3)]])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["or for arbitrary tuples in the list,"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["' '.join(['@'.join([str(v) for v in k]) for k in [(1,1),(2,2),(3,3)]])"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "' '.join(['@'.join([str(v) for v in k]) for k in [(1,1),(2,2),(3,3)]])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You could convert the tuples to strings by using the % operator with a list comprehension or generator expression, e.g. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ll = [(1,1), (2,2), (3,3)]\n['%d@%d' % aa for aa in ll]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This would return a list of strings like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['1@1', '2@2', '3@3']\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can concatenate the resulting list of strings together for output.", "This article describes half a dozen different approaches with benchmarks and analysis of their relative merits."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "This article", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://skymind.com/~ocrow/python_string/"}]}], [{"code": "<pre>\n<code>\n In [1]: ' '.join('%d@%d' % (el[0], el[1]) for el in [(1,1),(2,2),(3,3)])\nOut[1]: '1@1 2@2 3@3'\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n [ str(e[0]) + ',' + str(e[1]) for e in [(1,1), (2,2), (3,3)] ]\n</code>\n</pre>\n", "senID": 0}, {"text": ["This is if you want them in a collection of string, I didn't understand it if you want a single output string or a collection."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n [str(item).replace(',','@') for item in [(1,1),(2,2),(3,3)]]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["This looks like a list of tuples, where each tuple has two elements."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "tuple", "childNum": 0, "tag": "code", "childList": []}, {"text": "tuple", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n ' '.join('%d@%d' % (t[0],t[1]) for t in l)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which can of course be simplified to:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ' '.join('%d@%d' % t for t in l)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Where l is your original list.", "This generates 'number@number' pairs for each tuple in the list.", "These pairs are then joined with spaces (' ')."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "l", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "' '", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["The join syntax looked a little weird to me when I first started woking with Python, but the documentation was a huge help."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "join", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://www.python.org/doc//current/library/string.html#string.join", "text": "the documentation", "childNum": 0, "tag": "a", "childList": []}]}], [{"code": "<pre>\n<code>\n \" \".join(map(lambda el:\"%d@%d\" % el, [(1,1), (2,2), (3,3)]))\n</code>\n</pre>\n", "senID": 0}]]