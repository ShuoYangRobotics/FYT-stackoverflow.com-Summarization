[[{"text": ["Use can use json as file format, it supports (in python lingo) dictionaries and lists.", "Since json support is native only for python 2.6 and higher, you'll need this library: http://pypi.python.org/pypi/simplejson/2.0.9"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "json", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.json.org/"}, {"text": "http://pypi.python.org/pypi/simplejson/2.0.9", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/simplejson/2.0.9"}]}, {"code": "<pre>\n<code>\n { \"struct1\" \n    [\n        {\"field\" : \"name\", \"type\" : \"string\", \"ignore\" : false },\n        {\"field\" : \"id\", \"type\" : \"int\", \"0\" : \"val1\", \"1\" : \"val2\" }\n        {\"field\" : \"id\", \"type\" : \"int\", \"enums\" : { \"0\": \"val1\", \"1\": \"val2\"}}\n    ]\n  \"struct2\"\n    [ ... ]\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["python part (sketched, not tested):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import simplejson as json\n&gt;&gt;&gt; d = json.loads(yourjsonstring)\n&gt;&gt;&gt; d['struct1'][0]['field']\nname\n&gt;&gt;&gt; d['struct1'][2]['enums']['0']\nval1\n...\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Use YAML instead.", "There is PyYAML library for python.", "It is heavily used by Google AppEngine. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "YAML", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.yaml.org/"}, {"text": "PyYAML", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pyyaml.org/"}]}, {"text": ["This is just a friendly suggestion :-)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Example ( Mapping Scalars to Sequences ):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n american:\n  - Boston Red Sox\n  - Detroit Tigers\n  - New York Yankees\nnational:\n  - New York Mets\n  - Chicago Cubs\n  - Atlanta Braves\n</code>\n</pre>\n", "senID": 3}, {"text": ["There is also JSON of course which has ample support on Python (but tends to hurt my fingers a bit more ;-)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Might I recommend YAML?", "IMHO the syntax is more readable for data entry, and then you don't have to write and maintain a parser.", "Eschew XML -- it is good for marking up text, but not good for data entry since the text isn't human readable with all the duplicate tags everywhere."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "YAML", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.yaml.org/"}]}], [{"text": ["I would simply use Python for the message definition file format."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Let your message definition file be a plain Python file:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # file messages.py\nmessages = dict(\n    struct1=[\n        dict(field=\"name\", type=\"string\", ignore=False),\n        dict(field=\"id\", type=\"int\", enums={0: \"val1\", 1: \"val2\"}),\n        ],\n    struct2=[\n        dict(field=\"object\", type=\"struct1\"),\n        ]\n    )\n</code>\n</pre>\n", "senID": 2}, {"text": ["Your program can then import and use that data structure directly:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n # in your program\nfrom messages import messages\nprint messages['struct1'][0][\"type\"]\nprint messages['struct1'][1]['type']\nprint messages['struct1'][1]['enums'][0]\nprint messages['struct2'][0]['type']\n</code>\n</pre>\n", "senID": 4}, {"text": ["Using this approach, you let Python do the parsing for you. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["And you also gain a lot of possibilities.", "For instance, imagine you (for some strange reason) have a message structure with 1000 fields named \"field_N\".", "Using a conventional file format you would have to add 1000 lines of field definitions (unless you build some looping into your config file parser - you are then on your way to creating a programming language anyway).", "Using Python for this purpose, you could do something like:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n messages = dict(\n    ...\n    strange_msg=[dict(field=\"field_%d\" % i) for i in range(1000)],\n    ...\n    )\n</code>\n</pre>\n", "senID": 7}, {"text": ["BTW, on Python 2.6, using named tuples instead of dict is an option.", "Or use on of the numerous \"Bunch\" classes available (see the Python cookbook for a namedtuple for 2.5)."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["EDIT:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Below is code that reads message definition files as specified on the command line.", "It uses execfile instead of import."], "childNum": 2, "tag": "p", "senID": 10, "childList": [{"text": "execfile", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "import", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n # file mainprogram.py\n\ndef read_messages_from_file(filename):\n    module_dict = {}\n    execfile(filename, module_dict)\n    return module_dict['messages']\n\nif __name__ == \"__main__\":\n    from pprint import pprint\n    import sys\n\n    for arg in sys.argv[1:]:\n        messages = read_messages_from_file(arg)\n        pprint(messages)\n</code>\n</pre>\n", "senID": 11}, {"text": ["Executing:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n $ python mainprogram.py messages1 messages2 messages3\n</code>\n</pre>\n", "senID": 13}, {"text": ["will read and print the messages defined in each file."], "childNum": 0, "tag": "p", "senID": 14, "childList": []}], [{"text": ["Pyparsing is a nice easy to use library.", "That what I would use. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://pyparsing.wikispaces.com/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pyparsing.wikispaces.com/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyparsing.wikispaces.com/"}]}], [{"text": ["Since you are at liberty to change the file format, you could change it to any of several formats that have Python libraries to read and write.", "For example, JSON, YAML, XML, or even the built-in ConfigParser."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ConfigParser", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/configparser.html"}]}, {"code": "<pre>\n<code>\n [struct1]\nfield: name\ntype: string\nignore: false\n# etc.\n</code>\n</pre>\n", "senID": 1}]]