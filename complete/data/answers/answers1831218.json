[[{"text": ["Python tutorial on data structutres see section 5.3 \"Tuples and sequences\""], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python tutorial on data structutres", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html"}]}, {"text": ["however, if you want to use \"name\" to index the data, you probably want to use a dictionary that has the string name as key and values are tuple of (tag, [list, of, values]) e.g."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n d = \n    { \"foo\" : (\"dog\", [1,2,3,4]),\n      \"bar\" : (\"cat\", [4,5,6,7,8,9]),\n      \"moo\" : (\"cow\", [4,5,7,8,9,1,3,4,65])\n    }\n\n  for name,(tag,values) in d.items():\n    do_something()\n</code>\n</pre>\n", "senID": 2}, {"text": ["this way alsod[\"foo\"] will work, just like for any other dictionary."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "d[\"foo\"]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["why not just use a list of tuples (yes, this is a data type in python, like lists, but immutable):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mylistoftuples = [(1, 2, 3), (2, \"three\", 4), (3, 4, [1, 2, 3, 4, 5])]\nfor k, v, x in mylistoftuples:\n    print k, v, x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Maybe you should take a look here: Python data structures"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python data structures", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html"}]}], [{"text": ["You can consider the collections.namedtuple type to create tuple-like objects that have fields accessible by attribute lookup."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "collections.namedtuple", "tag": "a", "pos": 0, "childList": [{"text": "collections.namedtuple", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/collections.html#collections.namedtuple"}, {"text": "collections.namedtuple", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import collections\n&gt;&gt;&gt; mytup = collections.namedtuple('mytup', ['tag','name', 'values'])\n&gt;&gt;&gt; e1 = mytup('tag1','great',[1,'two',3])\n&gt;&gt;&gt; e1\nmytup(tag='tag1', name='great', values=[1, 'two', 3])\n&gt;&gt;&gt; e1.values\n[1, 'two', 3]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Building on other answers, an example of filtering a list of mytup objects:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "mytup", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; tlist = [mytup(\"foo\", \"dog\", [1,2,3,4]),\n    mytup(\"bar\",\"cat\", [4,5,6,7,8,9]), mytup(\"moo\",\"cow\", [4,5,7,8,9,1,3,4,65])]\n&gt;&gt;&gt; tlist\n[mytup(tag='foo', name='dog', values=[1, 2, 3, 4]),\nmytup(tag='bar', name='cat', values=[4, 5, 6, 7, 8, 9]),\nmytup(tag='moo', name='cow', values=[4, 5, 7, 8, 9, 1, 3, 4, 65])]\n&gt;&gt;&gt; [t for t in tlist if t.tag == 'bar']\n[mytup(tag='bar', name='cat', values=[4, 5, 6, 7, 8, 9])]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["Namedtuple objects can, of course, be used in other structures (e.g a dict), as mentioned in other answers.", "The advantage is, obviously, that the fields are named, and code using them is clearer."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "Namedtuple", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "named", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["Here's a comment to @gimel's answer:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "@gimel's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1831218/is-there-a-tuple-data-structure-in-python/1831334#1831334"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import collections\n&gt;&gt;&gt; T = collections.namedtuple(\"T\", 'tag name values')\n&gt;&gt;&gt; from itertools import starmap\n&gt;&gt;&gt; list(starmap(T, [(\"a\", \"b\", [1,2]), (\"c\", \"d\",[3,4])]))\n[T(tag='a', name='b', values=[1, 2]), T(tag='c', name='d', values=[3, 4])]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can have an array of 3-item tuples."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n arr = [ (1,2,3), (4,5,6), (7,8,9)]\nfor (k, v, x) in arr:\n  # do stuff\n</code>\n</pre>\n", "senID": 1}]]