[[{"text": ["If you need compatibility with ancient versions of Python, you can either use gmpy (which does include a fast, completely general int-to-string conversion fuction, and can be built for such ancient versions -- you may need to try older releases since the recent ones have not been tested for venerable Python and GMP releases, only somewhat recent ones), or, for less speed but more convenience, use Python code -- e.g., most simply:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "gmpy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/gmpy/"}]}, {"code": "<pre>\n<code>\n import string\ndigs = string.digits + string.lowercase\n\ndef int2base(x, base):\n  if x &lt; 0: sign = -1\n  elif x==0: return '0'\n  else: sign = 1\n  x *= sign\n  digits = []\n  while x:\n    digits.append(digs[x % base])\n    x /= base\n  if sign &lt; 0:\n    digits.append('-')\n  digits.reverse()\n  return ''.join(digits)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def baseN(num,b,numerals=\"0123456789abcdefghijklmnopqrstuvwxyz\"):\n    return ((num == 0) and numerals[0]) or (baseN(num // b, b, numerals).lstrip(numerals[0]) + numerals[num % b])\n</code>\n</pre>\n", "senID": 0}, {"text": ["ref:\nhttp://code.activestate.com/recipes/65212/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.activestate.com/recipes/65212/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/65212/"}]}], [{"text": ["Python doesn't have a built-in function for printing an integer in an arbitrary base.", "You'll have to write your own if you want to."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Great answers!", "I guess the answer to my question was \"no\" I was not missing some obvious solution.", "Here is the function I will use that condenses the good ideas expressed in the answers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "allow caller-supplied mapping of characters (allows base64 encode)", "tag": "none", "senID": 1}, {"text": "checks for negative and zero", "tag": "none", "senID": 2}, {"text": "maps complex numbers into tuples of strings", "tag": "none", "senID": 3}]}, {"text": ["def int2base(x,b,alphabet='0123456789abcdefghijklmnopqrstuvwxyz'):\n    'convert an integer to its string representation in a given base'\n    if b&lt;2 or b>len(alphabet):\n        if b==64: # assume base64 rather than raise error\n            alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n        else:\n            raise AssertionError(\"int2base base out of range\")\n    if type(x) == complex: # return a tuple\n        return ( int2base(x.real,b,alphabet) , int2base(x.imag,b,alphabet) )\n    if x&lt;=0:\n        if x==0:\n            return alphabet[0]\n        else:\n            return  '-' + int2base(-x,b,alphabet)\n    # else x is non-negative real\n    rets=''\n    while x>0:\n        x,idx = divmod(x,b)\n        rets = alphabet[idx] + rets\n    return rets"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "def int2base(x,b,alphabet='0123456789abcdefghijklmnopqrstuvwxyz'):\n    'convert an integer to its string representation in a given base'\n    if b&lt;2 or b>len(alphabet):\n        if b==64: # assume base64 rather than raise error\n            alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n        else:\n            raise AssertionError(\"int2base base out of range\")\n    if type(x) == complex: # return a tuple\n        return ( int2base(x.real,b,alphabet) , int2base(x.imag,b,alphabet) )\n    if x&lt;=0:\n        if x==0:\n            return alphabet[0]\n        else:\n            return  '-' + int2base(-x,b,alphabet)\n    # else x is non-negative real\n    rets=''\n    while x>0:\n        x,idx = divmod(x,b)\n        rets = alphabet[idx] + rets\n    return rets", "childNum": 1, "tag": "pre", "pos": 0, "childList": [{"text": "def int2base(x,b,alphabet='0123456789abcdefghijklmnopqrstuvwxyz'):\n    'convert an integer to its string representation in a given base'\n    if b&lt;2 or b>len(alphabet):\n        if b==64: # assume base64 rather than raise error\n            alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n        else:\n            raise AssertionError(\"int2base base out of range\")\n    if type(x) == complex: # return a tuple\n        return ( int2base(x.real,b,alphabet) , int2base(x.imag,b,alphabet) )\n    if x&lt;=0:\n        if x==0:\n            return alphabet[0]\n        else:\n            return  '-' + int2base(-x,b,alphabet)\n    # else x is non-negative real\n    rets=''\n    while x>0:\n        x,idx = divmod(x,b)\n        rets = alphabet[idx] + rets\n    return rets", "tag": "code"}]}, {"text": "def int2base(x,b,alphabet='0123456789abcdefghijklmnopqrstuvwxyz'):\n    'convert an integer to its string representation in a given base'\n    if b&lt;2 or b>len(alphabet):\n        if b==64: # assume base64 rather than raise error\n            alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n        else:\n            raise AssertionError(\"int2base base out of range\")\n    if type(x) == complex: # return a tuple\n        return ( int2base(x.real,b,alphabet) , int2base(x.imag,b,alphabet) )\n    if x&lt;=0:\n        if x==0:\n            return alphabet[0]\n        else:\n            return  '-' + int2base(-x,b,alphabet)\n    # else x is non-negative real\n    rets=''\n    while x>0:\n        x,idx = divmod(x,b)\n        rets = alphabet[idx] + rets\n    return rets", "childNum": 0, "tag": "code", "childList": []}]}, {"senID": 5}], [{"code": "<pre>\n<code>\n \"{0:b}\".format(100) # bin: 1100100\n\"{0:x}\".format(100) # hex: 64\n\"{0:o}\".format(100) # oct: 144\n</code>\n</pre>\n", "senID": 0}], [{"text": ["http://code.activestate.com/recipes/65212/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.activestate.com/recipes/65212/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/65212/"}]}, {"code": "<pre>\n<code>\n def base10toN(num,n):\n    \"\"\"Change a  to a base-n number.\n    Up to base-36 is supported without special notation.\"\"\"\n    num_rep={10:'a',\n         11:'b',\n         12:'c',\n         13:'d',\n         14:'e',\n         15:'f',\n         16:'g',\n         17:'h',\n         18:'i',\n         19:'j',\n         20:'k',\n         21:'l',\n         22:'m',\n         23:'n',\n         24:'o',\n         25:'p',\n         26:'q',\n         27:'r',\n         28:'s',\n         29:'t',\n         30:'u',\n         31:'v',\n         32:'w',\n         33:'x',\n         34:'y',\n         35:'z'}\n    new_num_string=''\n    current=num\n    while current!=0:\n        remainder=current%n\n        if 36&gt;remainder&gt;9:\n            remainder_string=num_rep[remainder]\n        elif remainder&gt;=36:\n            remainder_string='('+str(remainder)+')'\n        else:\n            remainder_string=str(remainder)\n        new_num_string=remainder_string+new_num_string\n        current=current/n\n    return new_num_string\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here's another one from the same link"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def baseconvert(n, base):\n    \"\"\"convert positive decimal integer n to equivalent in another base (2-36)\"\"\"\n\n    digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n\n    try:\n        n = int(n)\n        base = int(base)\n    except:\n        return \"\"\n\n    if n &lt; 0 or base &lt; 2 or base &gt; 36:\n        return \"\"\n\n    s = \"\"\n    while 1:\n        r = n % base\n        s = digits[r] + s\n        n = n / base\n        if n == 0:\n            break\n\n    return s\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; def int2base(integer, base):\n        if not integer: return '0'\n        sign = 1 if integer &gt; 0 else -1\n        alphanum = string.digits + string.ascii_lowercase\n        nums = alphanum[:base]\n        res = ''\n        integer *= sign\n        while integer:\n                integer, mod = divmod(integer, base)\n                res += nums[mod]\n        return ('' if sign == 1 else '-') + res[::-1]\n\n\n&gt;&gt;&gt; int2base(-15645, 23)\n'-16d5'\n&gt;&gt;&gt; int2base(213, 21)\n'a3'\n</code>\n</pre>\n", "senID": 0}]]