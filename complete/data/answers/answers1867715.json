[[{"text": ["like this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range(nIterations): y = f(y)\n</code>\n</pre>\n", "senID": 1}, {"text": ["A for loop with one command can be written as a single line."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Or maybe slightly cleaner:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n for _ in xrange(nIterations): y = f(y)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Since you don't want to have a something that can be split into two separate statements (i think), here's another one:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n reduce(lambda y, _: f(y), xrange(nIterations), initValue)\n</code>\n</pre>\n", "senID": 7}, {"text": ["Still, I would recommend to just use your original code, which is much more intuitive and readable.", "Also note what Guido van Rossum has to say on loops versus repeat.", "Note by the way that (in python 2.x) xrange is more efficient than range for large nIterations as it returns an actual iterator and not an allocated list."], "childNum": 5, "tag": "p", "senID": 8, "childList": [{"text": "just use your original code", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Guido van Rossum", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.artima.com/weblogs/viewpost.jsp?thread=211200"}, {"text": "repeat", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "xrange", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "range", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["So like this you mean?  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range(nIterations): y = f(y)\n</code>\n</pre>\n", "senID": 1}, {"text": ["While this might seem nice and pretty, I'd argue (as has been done in the comments below your post) that this doesn't improve readability, and is best off left as 2 lines."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "doesn't", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Just stick it all on one line like this: for i in range(nIterations): y = f(y)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "for i in range(nIterations): y = f(y)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The decision to have code on one line or multiple has been an argument for years - there is no performance increase - just lay it out how you like it and how you can read it best."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "you", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["Your question lacks context, but this could be rewritten using map function or list comprehension (both one-liners)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Not exactly one line, but once you define the power operation for functions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def f_pow(f, n):\n  if n == 1:\n    return f\n  else:\n    return lambda x: f_pow(f, n-1)(f(x))\n</code>\n</pre>\n", "senID": 1}, {"text": ["you can write this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n f_pow(f, nIterations)(y)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["reduce(lambda y,_: f(y),xrange(niterations),y)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "reduce(lambda y,_: f(y),xrange(niterations),y)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Ok this is probably a very weird an incomprehensible use of the reduce function, so for real code I'd stick with what you have.", "But just for the fun of it, here goes:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "reduce", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n reduce(lambda a, b: f(a), range(nIterations), y)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you make y mutable, then you can use list comprehension.", "But this isn't something I'd use in real code, unless really necessary."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "y", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "really", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def f(y):\n    y[0] += 5\n\ny = [0]\n[f(y) for _ in xrange(10)]\nprint y[0] # =&gt; 50\n</code>\n</pre>\n", "senID": 1}], [{"text": ["While I'd suggest you keep the original code snippet as it is much clearer, you can accomplish this with a single line of code using the reduce function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n reduce(lambda a,b: f(a), xrange(nIterations), y)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can create such snippets using semicolons ; if you need to execute more than one instruction inside the loop, here is an example:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ";", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in xrange(nIterations): x=f(i); y=f(x); z=f(y)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["y=[f(y) for i in range(niteration)]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["hope that helps ;)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]