[[{"text": ["No, there isn't a direct way to do this in Python.", "The reason is that both scalar values (numbers) and tuples are immutable.", "Once you have established a binding from a name to an immutable value (such as the name c with the tuple (1, 2)), nothing you do except reassigning c can change the value it's bound to."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "immutable", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "(1, 2)", "childNum": 0, "tag": "code", "childList": []}, {"text": "c", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Note that in your second example, although the tuple is itself immutable, it contains references to mutable values.", "So it appears as though the tuple changes, but the identity of the tuple remains constant and only the mutable parts are changing."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "appears", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["Whatever possible solution you come up with the second last line will always destroy it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = 3\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will assign a completely new content to the variable.", "Unless a stands for a property of an object or something (or a key in a list, as you did in your own example), you won't be able to have a relation between the first and last a."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["If you just need the current values to be placed in a tuple on the fly you could use a lambda.", "You'll have to call c, not just return it or use it, but that may be acceptable in your situation.", "Something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 1\n&gt;&gt;&gt; b = 2\n&gt;&gt;&gt; c = lambda: (a, b)\n&gt;&gt;&gt; c()\n(1, 2)\n&gt;&gt;&gt; a = 3\n&gt;&gt;&gt; c()\n(3, 2)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There isn't a way in Python, not only because numbers are immutable, but also because you don't have pointers.", "Wrapping the value in a list simulates that you have pointers, so that's the best you can do."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n class ByRefValue(object):\n    def __init__(self, value):\n        self.value = value\n</code>\n</pre>\n", "senID": 0}, {"text": ["Pass it around wherever you like, remembering that you need to access the value member rather than the entire object."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "value", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Alternatively, globals().get('a', 0) will return the value of a if it is in the global namespace (or zero if it isn't)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "globals().get('a', 0)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Finally:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import threading\ntls = threading.local()\n\ntls.a = 1\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you import tls into every module where you need it, you will access the same value for a on each thread.", "Depending on how your program is set up, this may be acceptable, ideal or useless."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "tls", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "on each thread", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["You can try creating your own pointer class and your own pointer storage object to emulate the system's internal stack."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]