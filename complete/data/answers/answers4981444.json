[[{"text": ["Just write to standard out using print.", "If the user wants to redirect the output to a file they can do that:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n python foo.py &gt; output.txt\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Write to a file object, and when the program starts either have that object point to sys.stdout or to a file specified by the user.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Mark Byers' answer is more unix-like, where most command line tools just use stdin and stdout and let the user do redirection as they see fit."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["No, you don't need to create separate print function.", "In Python 2.6 you have this syntax:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # suppose f is an open file\nprint &gt;&gt; f, \"hello\"\n\n# now sys.stdout is file too\nprint &gt;&gt; sys.stdout, \"hello\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["In Python 3.x:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print(\"hello\", file=f)\n# or\nprint(\"hello\", file=sys.stdout)\n</code>\n</pre>\n", "senID": 3}, {"text": ["So you really don't have to differentiate files and stdout.", "They are the same."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["A toy example, which outputs \"hello\" the way you want:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python3\nimport sys\n\ndef produce_output(fobj):\n    print(\"hello\", file=fobj)\n    # this can also be\n    # fobj.write(\"hello\\n\")\n\nif __name__==\"__main__\":\n    if len(sys.argv) &gt; 2:\n        print(\"Too many arguments\", file=sys.stderr)\n        exit(1)\n\n    f = open(argv[1], \"a\") if len(argv)==2 else sys.stdout\n    produce_output(f)\n</code>\n</pre>\n", "senID": 6}, {"text": ["Note that the printing procedure is abstracted of whether it is working with stdout or a file."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["I recommend you using the logging module and logging.handlers... stream, output files, etc.."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you using subprocess module, then based on an option you take from your command line, you can have the stdout option to an open file object.", "This way,  from within the program you can redirect to a file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import subprocess\nwith open('somefile','w') as f:\n    proc = subprocess.Popen(['myprog'],stdout=f,stderr=subprocess.PIPE)\n    out,err = proc.communicate()\n    print 'output redirected to somefile'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["My reaction would be to output to a temp file, then either dump that to stdio, or move it to where they requested. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]