[[{"text": ["Without conversion to string"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import math\ndigits = int(math.log10(n))+1\n</code>\n</pre>\n", "senID": 1}, {"text": ["To also handle zero and negative numbers"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import math\nif n &gt; 0:\n    digits = int(math.log10(n))+1\nelif n == 0:\n    digits = 1\nelse:\n    digits = int(math.log10(-n))+2 # +1 if you don't count the '-'\n</code>\n</pre>\n", "senID": 3}, {"text": ["You'd probably want to put that in a function :)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Here are some benchmarks.", "The len(str()) is already behind for even quite small numbers "], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "len(str())", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n timeit math.log10(2**8)\n1000000 loops, best of 3: 746 ns per loop\ntimeit len(str(2**8))\n1000000 loops, best of 3: 1.1 \u00b5s per loop\n\ntimeit math.log10(2**100)\n1000000 loops, best of 3: 775 ns per loop\n timeit len(str(2**100))\n100000 loops, best of 3: 3.2 \u00b5s per loop\n\ntimeit math.log10(2**10000)\n1000000 loops, best of 3: 844 ns per loop\ntimeit len(str(2**10000))\n100 loops, best of 3: 10.3 ms per loop\n</code>\n</pre>\n", "senID": 6}], [{"text": ["If you want the length of an integer as in the number of digits in the integer you can always typecast it to string like str(133) and find its len like len(str(123)). "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Python 2.", "* ints take either 4 or 8 bytes (32 or 64 bits), depending on your Python build.", "sys.maxint (2**31-1 for 32-bit ints, 2**63-1 for 64-bit ints) will tell you which of the two possibilities obtains."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "2.*", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "sys.maxint", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "2**31-1", "childNum": 0, "tag": "code", "childList": []}, {"text": "2**63-1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In Python 3, ints (like longs in Python 2) can take arbitrary sizes up to the amount of available memory; sys.getsizeof gives you a good indication for any given value, although it does also count some fixed overhead:"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "long", "childNum": 0, "tag": "code", "childList": []}, {"text": "sys.getsizeof", "childNum": 0, "tag": "code", "childList": []}, {"text": "does", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.getsizeof(0)\n12\n&gt;&gt;&gt; sys.getsizeof(2**99)\n28\n</code>\n</pre>\n", "senID": 2}, {"text": ["If, as other answers suggests, you're thinking about some string representation of the integer value, then just take the len of that representation, be it in base 10 or otherwise!"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "len", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n from math import log10\ndigits = lambda n: ((n==0) and 1) or int(log10(abs(n)))+1\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Assuming you are asking for the largest number you can store in an integer, the value is implementation dependent.", "I suggest that you don't think in that way when using python.", "In any case, quite a large value can be stored in a python 'integer'.", "Remember, Python uses duck typing!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Edit:\nI gave my answer before the clarification that the asker wanted the number of digits.", "For that, I agree with the method suggested by the accepted answer.", "Nothing more to add!"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edit:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n def length(i):\n  return len(str(i))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Let the number be n then the number of digits in n is given by:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n math.floor(math.log10(n))+1\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that this will give correct answers for integers only."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a=12345\n&gt;&gt;&gt; a.__str__().__len__()\n5\n</code>\n</pre>\n", "senID": 0}]]