[[{"text": ["I'm not really an old hand at Python, but here's an XPath solution using libxml2."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import libxml2\n\nDOC = \"\"\"&lt;elements&gt;\n    &lt;parent name=\"CategoryA\"&gt;\n        &lt;child value=\"a1\"/&gt;\n        &lt;child value=\"a2\"/&gt;\n        &lt;child value=\"a3\"/&gt;\n    &lt;/parent&gt;\n    &lt;parent name=\"CategoryB\"&gt;\n        &lt;child value=\"b1\"/&gt;\n        &lt;child value=\"b2\"/&gt;\n        &lt;child value=\"b3\"/&gt;\n    &lt;/parent&gt;\n&lt;/elements&gt;\"\"\"\n\ndoc = libxml2.parseDoc(DOC)\n\ndef getValues(cat):\n    return [attr.content for attr in doc.xpathEval(\"/elements/parent[@name='%s']/child/@value\" % (cat))]\n\nprint getValues(\"CategoryA\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["With result..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['a1', 'a2', 'a3']\n</code>\n</pre>\n", "senID": 3}], [{"text": ["ElementTree 1.3 (unfortunately not 1.2 which is the one included with Python) supports XPath like this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ElementTree 1.3", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/elementtree-13-intro.htm"}, {"href": "http://effbot.org/zone/element-xpath.htm", "text": "supports XPath", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import elementtree.ElementTree as xml\n\ndef getValues(tree, category):\n    parent = tree.find(\".//parent[@name='%s']\" % category)\n    return [child.get('value') for child in parent]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you can do "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; tree = xml.parse('data.xml')\n&gt;&gt;&gt; getValues(tree, 'CategoryA')\n['a1', 'a2', 'a3']\n&gt;&gt;&gt; getValues(tree, 'CategoryB')\n['b1', 'b2', 'b3']\n</code>\n</pre>\n", "senID": 3}, {"text": ["lxml.etree (which also provides the ElementTree interface) will also work in the same way."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "lxml.etree", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I must admit I'm a fan of xmltramp due to its ease of use."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "xmltramp", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.aaronsw.com/2002/xmltramp/"}]}, {"text": ["Accessing the above becomes:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import xmltramp\n\n  values = xmltramp.parse('''...''')\n\n  def getValues( values, category ):\n    cat = [ parent for parent in values['parent':] if parent(name) == category ]\n    cat_values = [ child(value) for child in parent['child':] for parent in cat ]\n    return cat_values\n\n  getValues( values, \"CategoryA\" )\n  getValues( values, \"CategoryB\" )\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You can do this with BeautifulSoup"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from BeautifulSoup import BeautifulStoneSoup\n&gt;&gt;&gt; soup = BeautifulStoneSoup(xml)\n&gt;&gt;&gt; def getValues(name):\n. . .      return [child['value'] for child in soup.find('parent', attrs={'name': name}).findAll('child')]\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you're doing work with HTML/XML I would recommend you take a look at BeautifulSoup.", "It's similar to the DOM tree but contains more functionality."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Using a standard W3 DOM such as the stdlib's minidom, or pxdom:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def getValues(category):\n    for parent in document.getElementsByTagName('parent'):\n        if parent.getAttribute('name')==category:\n            return [\n                el.getAttribute('value')\n                for el in parent.getElementsByTagName('child')\n            ]\n    raise ValueError('parent not found')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["My preferred python xml library is lxml , which wraps libxml2.", "Xpath does seem the way to go here, so I'd write this as something like:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "lxml", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml"}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n from lxml import etree\n\ndef getValues(xml, category):\n    return [x.attrib['value'] for x in \n            xml.findall('/parent[@name=\"%s\"]/*' % category)]\n\nxml = etree.parse(open('filename.xml'))\n\n&gt;&gt;&gt; print getValues(xml, 'CategoryA')\n['a1', 'a2', 'a3']\n&gt;&gt;&gt; print getValues(xml, 'CategoryB')\n['b1', 'b2', 'b3]\n</code>\n</pre>\n", "senID": 1}]]