[[{"text": ["Python works as a great, all-purpose tool if you're looking to replace CMD and BAT scripts on your Windows boxes, and can also be written to run scripts on your (L)inux boxes, too.", "It's a great, flexible language and can handle many tasks you throw at it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That being said, Powershell is an amazingly versatile tool for admining all manner of Windows boxes; it has all the power of .NET, with many more interfaces into MS products such as Exchange and Active Directory, which are a timesaver.", "Depending on your situation, you may get more use of of PS than other scripting languages just because of the interfaces available to MS products, and I know MS seems to have made a commitment to providing those APIs in a lot of products.", "Powershell comes installed on Windows 7 and Server 2008 and R2, and is fairly easily installed on old versions of Windows. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To address your edit that your scripts will be used to launch other processes, I think in that case either of the tools fit the bill.", "I would recommend PS if you plan on adding any admin-ish tasks to the scripts rather than just service calls, but if you stick to what you described, Python is good."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["IronPython has access to all of the same .NET assemblies as any other .NET language for writing system dependent scripts on Windows.", "But the same knowledge of Python can be used to write similar scripts on Linux, Solaris, BSD, or OS/X.", "If you use the standard C Python on Windows, then you can access any COM objects and it is straightforward to translate VBA examples into Python code.", "The SPAMBayes Outlook plugin is a good example of how far you can go with that.", "http://spambayes.sourceforge.net/ "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://spambayes.sourceforge.net/", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://spambayes.sourceforge.net/"}]}, {"text": ["Python's best feature is the \"batteries included\" standard library, and even though this is not distributed with IronPython, much of it will work if you just point IronPython to the installed library folder from CPython.", "In fact, most pure Python libraries, i.e.", "no compiled C or C++ modules, will work fine with IronPython.", "On Windows, you also have the choice of installing Python through Cygwin.com which then allows you to use a lot of modules that are normally considered UNIX-only.", "This can be of use if you have to maintain cross-platform scripts and you prefer consistency rather than special case coding for each OS."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["And if you should need to leverage some Java classes, then Jython allows you to use the same Python language that you know to leverage this.", "Combine this with a nice message queuing system like RabbitMQ, and you can have Python, Jython and IronPython scripts on multiple machines all cooperating in getting the job done."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["There is also a huge selection of 3rd party Python modules out there and you could spend several months trawling through delicious.com before you run out of new discoveries.", "This means that when you need something not part of standard Python libraries, a bit of Googling often comes up with a solution. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Some useful Python modules for scripting to replace bash, CMD and BAT files are PEXPECT http://www.noah.org/wiki/Pexpect and Python WMI http://timgolden.me.uk/python/wmi/index.html"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "http://www.noah.org/wiki/Pexpect", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.noah.org/wiki/Pexpect"}, {"href": "http://timgolden.me.uk/python/wmi/index.html", "text": "http://timgolden.me.uk/python/wmi/index.html", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["But, in the end, Python also works just fine for simple straightforward scripts that don't need any special features... yet!"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["The questions is kind of vague, but Python is much more portable than PowerShell; however, Python isn't that prevalent on Windows.", "But on the other hand, I don't believe PowerShell scripts will work on a Windows machine that doesn't have PowerShell.", "Meaning they may not work in the old fashioned cmd shell.", "I think you'll find more documentation and libraries for Python as well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Powershell is more like Bash than it is a programming language like Python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Maybe you could explain what you want to do with your scripts and you'll probably get better answers."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["One advantage to Python is the availability of third-party libraries and an extensive built-in standard library.", "You can do a lot of powerful operations quickly and easily with Python on a variety of operating systems and environments.", "That's one reason we use Python here at the office not only as a scripting language but for all of our database backend applications as well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["We also use it for XML and HTML scraping, using ElementTree and BeautifulSoup, which are very powerful and flexible Python-specific libraries for this sort of work."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It sounds like Windows is your predominate environment."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If so, PowerShell would be much better than Python.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "PowerShell is included with Windows\nServer 2008. No need to\ndeploy/install Python runtime on\nevery new server that rolls in.", "tag": "none", "senID": 2}, {"text": "The entire Microsoft server related software (Exchange, Systems Center, etc) is transitioning to PowerShell cmdlets for functionality and extensions", "tag": "none", "senID": 3}, {"text": "3rd party vendors (e.g. SCOM plugins) will also use PowerShell scripts/cmdlets to expose functionality", "tag": "none", "senID": 4}]}, {"text": ["I have more experience with Python than PowerShell but the writing is on the wall as far as the Microsoft ecosystem is concerned:  go with PowerShell.", "Otherwise, you'll just be going against the grain and constantly interop-ing between Python and everyone else's cmdlets."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Just because you can code import win32com.client in Python does not put it on equal footing with PowerShell in the Windows environment."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "import win32com.client", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you are working with web based scripting, then ActiveState's ActivePython seems to have a lot of support for Windows specific API's that would suit you and it has tons of great portable libraries for doing web based work."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Windows specific API's", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.activestate.com/activepython/2.6/pywin32/PyWin32.HTML"}]}], [{"text": ["If all you do is spawning a lot of system specific programs with no or little programming logic behind then OS specific shell might be a better choice than a full general purpose programming language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I find it sad no one yet mentioend good ol' Perl. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]