[[{"text": ["The psutil library will give you some system information (CPU / Memory usage) on a variety of platforms:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "The psutil library", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/psutil/"}]}], [{"text": ["Here's a class for memory usage on UNIX machines:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"\"\"Simple module for getting amount of memory used by a specified user's\nprocesses on a UNIX system.\nIt uses UNIX ps utility to get the memory usage for a specified username and\npipe it to awk for summing up per application memory usage and return the total.\nPython's Popen() from subprocess module is used for spawning ps and awk.\n\n\"\"\"\n\nimport subprocess\n\nclass MemoryMonitor(object):\n\n    def __init__(self, username):\n        \"\"\"Create new MemoryMonitor instance.\"\"\"\n        self.username = username\n\n    def usage(self):\n        \"\"\"Return int containing memory used by user's processes.\"\"\"\n        self.process = subprocess.Popen(\"ps -u %s -o rss | awk '{sum+=$1} END {print sum}'\" % self.username,\n                                        shell=True,\n                                        stdout=subprocess.PIPE,\n                                        )\n        self.stdout_list = self.process.communicate()[0].split('\\n')\n        return int(self.stdout_list[0])\n</code>\n</pre>\n", "senID": 1}, {"text": ["And here's an example of usage:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from memorymonitor import MemoryMonitor\n\nmemory_mon = MemoryMonitor('username')\nused_memory = memory_mon.usage()\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want to get memory usage for all users you can easily modify this."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Here's something I put together a while ago, it's windows only but may help you get part of what you need done."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Derived from:\n\"for sys available mem\"\nhttp://msdn2.microsoft.com/en-us/library/aa455130.aspx"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://msdn2.microsoft.com/en-us/library/aa455130.aspx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn2.microsoft.com/en-us/library/aa455130.aspx"}]}, {"text": ["\"individual process information and python script examples\"\nhttp://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true"}]}, {"text": ["NOTE: the WMI interface/process is also available for performing similar tasks\n        I'm not using it here because the current method covers my needs, but if someday it's needed to extend or improve this, then may want to investigate the WMI tools a vailable."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["WMI for python:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["http://tgolden.sc.sabren.com/python/wmi.html"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://tgolden.sc.sabren.com/python/wmi.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://tgolden.sc.sabren.com/python/wmi.html"}]}, {"text": ["The code:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n '''\nMonitor window processes\n\nderived from:\n&gt;for sys available mem\nhttp://msdn2.microsoft.com/en-us/library/aa455130.aspx\n\n&gt; individual process information and python script examples\nhttp://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true\n\nNOTE: the WMI interface/process is also available for performing similar tasks\n        I'm not using it here because the current method covers my needs, but if someday it's needed\n        to extend or improve this module, then may want to investigate the WMI tools available.\n        WMI for python:\n        http://tgolden.sc.sabren.com/python/wmi.html\n'''\n\n__revision__ = 3\n\nimport win32com.client\nfrom ctypes import *\nfrom ctypes.wintypes import *\nimport pythoncom\nimport pywintypes\nimport datetime\n\n\nclass MEMORYSTATUS(Structure):\n    _fields_ = [\n                ('dwLength', DWORD),\n                ('dwMemoryLoad', DWORD),\n                ('dwTotalPhys', DWORD),\n                ('dwAvailPhys', DWORD),\n                ('dwTotalPageFile', DWORD),\n                ('dwAvailPageFile', DWORD),\n                ('dwTotalVirtual', DWORD),\n                ('dwAvailVirtual', DWORD),\n                ]\n\n\ndef winmem():\n    x = MEMORYSTATUS() # create the structure\n    windll.kernel32.GlobalMemoryStatus(byref(x)) # from cytypes.wintypes\n    return x    \n\n\nclass process_stats:\n    '''process_stats is able to provide counters of (all?) the items available in perfmon.\n    Refer to the self.supported_types keys for the currently supported 'Performance Objects'\n\n    To add logging support for other data you can derive the necessary data from perfmon:\n    ---------\n    perfmon can be run from windows 'run' menu by entering 'perfmon' and enter.\n    Clicking on the '+' will open the 'add counters' menu,\n    From the 'Add Counters' dialog, the 'Performance object' is the self.support_types key.\n    --&gt; Where spaces are removed and symbols are entered as text (Ex. # == Number, % == Percent)\n    For the items you wish to log add the proper attribute name in the list in the self.supported_types dictionary,\n    keyed by the 'Performance Object' name as mentioned above.\n    ---------\n\n    NOTE: The 'NETFramework_NETCLRMemory' key does not seem to log dotnet 2.0 properly.\n\n    Initially the python implementation was derived from:\n    http://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=true\n    '''\n    def __init__(self,process_name_list=[],perf_object_list=[],filter_list=[]):\n        '''process_names_list == the list of all processes to log (if empty log all)\n        perf_object_list == list of process counters to log\n        filter_list == list of text to filter\n        print_results == boolean, output to stdout\n        '''\n        pythoncom.CoInitialize() # Needed when run by the same process in a thread\n\n        self.process_name_list = process_name_list\n        self.perf_object_list = perf_object_list\n        self.filter_list = filter_list\n\n        self.win32_perf_base = 'Win32_PerfFormattedData_'\n\n        # Define new datatypes here!\n        self.supported_types = {\n                                    'NETFramework_NETCLRMemory':    [\n                                                                        'Name',\n                                                                        'NumberTotalCommittedBytes',\n                                                                        'NumberTotalReservedBytes',\n                                                                        'NumberInducedGC',    \n                                                                        'NumberGen0Collections',\n                                                                        'NumberGen1Collections',\n                                                                        'NumberGen2Collections',\n                                                                        'PromotedMemoryFromGen0',\n                                                                        'PromotedMemoryFromGen1',\n                                                                        'PercentTimeInGC',\n                                                                        'LargeObjectHeapSize'\n                                                                     ],\n\n                                    'PerfProc_Process':              [\n                                                                          'Name',\n                                                                          'PrivateBytes',\n                                                                          'ElapsedTime',\n                                                                          'IDProcess',# pid\n                                                                          'Caption',\n                                                                          'CreatingProcessID',\n                                                                          'Description',\n                                                                          'IODataBytesPersec',\n                                                                          'IODataOperationsPersec',\n                                                                          'IOOtherBytesPersec',\n                                                                          'IOOtherOperationsPersec',\n                                                                          'IOReadBytesPersec',\n                                                                          'IOReadOperationsPersec',\n                                                                          'IOWriteBytesPersec',\n                                                                          'IOWriteOperationsPersec'     \n                                                                      ]\n                                }\n\n    def get_pid_stats(self, pid):\n        this_proc_dict = {}\n\n        pythoncom.CoInitialize() # Needed when run by the same process in a thread\n        if not self.perf_object_list:\n            perf_object_list = self.supported_types.keys()\n\n        for counter_type in perf_object_list:\n            strComputer = \".\"\n            objWMIService = win32com.client.Dispatch(\"WbemScripting.SWbemLocator\")\n            objSWbemServices = objWMIService.ConnectServer(strComputer,\"root\\cimv2\")\n\n            query_str = '''Select * from %s%s''' % (self.win32_perf_base,counter_type)\n            colItems = objSWbemServices.ExecQuery(query_str) # \"Select * from Win32_PerfFormattedData_PerfProc_Process\")# changed from Win32_Thread        \n\n            if len(colItems) &gt; 0:        \n                for objItem in colItems:\n                    if hasattr(objItem, 'IDProcess') and pid == objItem.IDProcess:\n\n                            for attribute in self.supported_types[counter_type]:\n                                eval_str = 'objItem.%s' % (attribute)\n                                this_proc_dict[attribute] = eval(eval_str)\n\n                            this_proc_dict['TimeStamp'] = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.') + str(datetime.datetime.now().microsecond)[:3]\n                            break\n\n        return this_proc_dict      \n\n\n    def get_stats(self):\n        '''\n        Show process stats for all processes in given list, if none given return all processes   \n        If filter list is defined return only the items that match or contained in the list\n        Returns a list of result dictionaries\n        '''    \n        pythoncom.CoInitialize() # Needed when run by the same process in a thread\n        proc_results_list = []\n        if not self.perf_object_list:\n            perf_object_list = self.supported_types.keys()\n\n        for counter_type in perf_object_list:\n            strComputer = \".\"\n            objWMIService = win32com.client.Dispatch(\"WbemScripting.SWbemLocator\")\n            objSWbemServices = objWMIService.ConnectServer(strComputer,\"root\\cimv2\")\n\n            query_str = '''Select * from %s%s''' % (self.win32_perf_base,counter_type)\n            colItems = objSWbemServices.ExecQuery(query_str) # \"Select * from Win32_PerfFormattedData_PerfProc_Process\")# changed from Win32_Thread\n\n            try:  \n                if len(colItems) &gt; 0:\n                    for objItem in colItems:\n                        found_flag = False\n                        this_proc_dict = {}\n\n                        if not self.process_name_list:\n                            found_flag = True\n                        else:\n                            # Check if process name is in the process name list, allow print if it is\n                            for proc_name in self.process_name_list:\n                                obj_name = objItem.Name\n                                if proc_name.lower() in obj_name.lower(): # will log if contains name\n                                    found_flag = True\n                                    break\n\n                        if found_flag:\n                            for attribute in self.supported_types[counter_type]:\n                                eval_str = 'objItem.%s' % (attribute)\n                                this_proc_dict[attribute] = eval(eval_str)\n\n                            this_proc_dict['TimeStamp'] = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.') + str(datetime.datetime.now().microsecond)[:3]\n                            proc_results_list.append(this_proc_dict)\n\n            except pywintypes.com_error, err_msg:\n                # Ignore and continue (proc_mem_logger calls this function once per second)\n                continue\n        return proc_results_list     \n\n\ndef get_sys_stats():\n    ''' Returns a dictionary of the system stats'''\n    pythoncom.CoInitialize() # Needed when run by the same process in a thread\n    x = winmem()\n\n    sys_dict = { \n                    'dwAvailPhys': x.dwAvailPhys,\n                    'dwAvailVirtual':x.dwAvailVirtual\n                }\n    return sys_dict\n\n\nif __name__ == '__main__':\n    # This area used for testing only\n    sys_dict = get_sys_stats()\n\n    stats_processor = process_stats(process_name_list=['process2watch'],perf_object_list=[],filter_list=[])\n    proc_results = stats_processor.get_stats()\n\n    for result_dict in proc_results:\n        print result_dict\n\n    import os\n    this_pid = os.getpid()\n    this_proc_results = stats_processor.get_pid_stats(this_pid)\n\n    print 'this proc results:'\n    print this_proc_results\n</code>\n</pre>\n", "senID": 7}, {"text": ["http://monkut.webfactional.com/blog/archive/2009/1/21/windows-process-memory-logging-python"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "http://monkut.webfactional.com/blog/archive/2009/1/21/windows-process-memory-logging-python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://monkut.webfactional.com/blog/archive/2009/1/21/windows-process-memory-logging-python"}]}], [{"text": ["I tried psutil from http://code.google.com/p/psutil/ and found it really helpful."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/psutil/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/psutil/"}]}], [{"text": ["All things about logical disks you can get using win32com module, code example here.", "I'm sure that this module can give you all info about machine."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.microsoft.com/technet/scriptcenter/scripts/python/storage/disks/drives/default.mspx?mfr=true"}]}], [{"text": ["I don't believe that there is a well-supported multi-platform library available.", "Remember that Python itself is written in C so any library is simply going to make a smart decision about which OS-specific code snippet to run, as you suggested above. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["\"... current system status (current CPU, RAM, free disk space, etc.", ")\"  And \"*nix and Windows platforms\" can be a difficult combination to achieve."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The operating systems are fundamentally different in the way they manage these resources.", "Indeed, they differ in core concepts like defining what counts as system and what counts as application time."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["\"Free disk space\"?", "What counts as \"disk space?", "\"  All partitions of all devices?", "What about foreign partitions in a multi-boot environment?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I don't think there's a clear enough consensus between Windows and *nix that makes this possible.", "Indeed, there may not even be any consensus between the various operating systems called Windows.", "Is there a single Windows API that works for both XP and Vista?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]