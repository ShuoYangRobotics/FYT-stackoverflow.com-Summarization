[[{"text": ["SWIG generates (rather ugly) C or C++ code.", "It is straightforward to use for simple functions (things that can be translated directly) and reasonably easy to use for more complex functions (such as functions with output parameters that need an extra translation step to represent in Python.", ") For more powerful interfacing you often need to write bits of C as part of the interface file.", "For anything but simple use you will need to know about CPython and how it represents objects -- not hard, but something to keep in mind."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["ctypes allows you to directly access C functions, structures and other data, and load arbitrary shared libraries.", "You do not need to write any C for this, but you do need to understand how C works.", "It is, you could argue, the flip side of SWIG: it doesn't generate code and it doesn't require a compiler at runtime, but for anything but simple use it does require that you understand how things like C datatypes, casting, memory management and alignment work.", "You also need to manually or automatically translate C structs, unions and arrays into the equivalent ctypes datastructure, including the right memory layout."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It is likely that in pure execution, SWIG is faster than ctypes -- because the management around the actual work is done in C at compiletime rather than in Python at runtime.", "However, unless you interface a lot of different C functions but each only a few times, it's unlikely the overhead will be really noticeable."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In development time, ctypes has a much lower startup cost: you don't have to learn about interface files, you don't have to generate .c files and compile them, you don't have to check out and silence warnings.", "You can just jump in and start using a single C function with minimal effort, then expand it to more.", "And you get to test and try things out directly in the Python interpreter.", "Wrapping lots of code is somewhat tedious, although there are attempts to make that simpler (like ctypes-configure."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["SWIG, on the other hand, can be used to generate wrappers for multiple languages (barring language-specific details that need filling in, like the custom C code I mentioned above.", ") When wrapping lots and lots of code that SWIG can handle with little help, the code generation can also be a lot simpler to set up than the ctypes equivalents."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["CTypes is very cool and much easier than SWIG, but it has the drawback that poorly or malevolently-written python code can actually crash the python process.", "You should also consider boost python.", "IMHO it's actually easier than swig while giving you more control over the final python interface.", "If you are using C++ anyway, you also don't add any other languages to your mix."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "boost", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/release/libs/python/doc/"}]}], [{"text": ["You can also use Pyrex, which can act as glue between high-level Python code and low-level C code.", "lxml is written in Pyrex, for instance."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Pyrex", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/"}, {"text": "lxml", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/"}]}], [{"text": ["ctypes is great, but does not handle C++ classes.", "I've also found ctypes is about 10% slower than a direct C binding, but that will highly depend on what you are calling."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you are going to go with ctypes, definitely check out the Pyglet and Pyopengl projects, that have massive examples of ctype bindings."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["In my experience, ctypes does have a big disadvantage: when something goes wrong (and it invariably will for any complex interfaces), it's a hell to debug."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The problem is that a big part of your stack is obscured by ctypes/ffi magic and there is no easy way to determine how did you get to a particular point and why parameter values are what they are.."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["We have experience of using SWIG to wrap C++ library to produce python library for users.", "SWIG claims that it is rapid solution for wrapping things.", "But it real life it have the next "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1) Code style inconsistancy.", "C++ and python have very different code styles (that is obvious, certainly), the possibilities of swig of making target code more pythonish is very limited.", "In example it is butt-heart to create properties from getters and setters.", "See Python Properties &amp; Swig"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Code style inconsistancy", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Python Properties &amp; Swig", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1183716/python-properties-swig"}]}, {"text": ["2) Lack of documentation.", "Swig have some amount of documentation.", "But if one caught something that is not in this documentation there is no information at all.", "No blogs nor googling helps.", "So one have to heavily dig SWIG code in such cases... which is terrible. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Lack of documentation", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["So there were several moments where we have to dig and completely review swig generated code - dirty job.", "And finally all rapidness of SWIG did disappear. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["But !!!", "If one produced swig interface files, one could wrap his C++ code to any of other 19 languages (!!!", "). "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "But", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["So I concluded for myself two cases when the swig is good to use:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["2) If one needs to wrap C++ library for several languages.", "If you know that potentially there could be a time when you would distribute your library for several languages, using SWIG is reliable. "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "for several languages", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["1) If one needs to rapidly wrap just several functions from some C++ library for own use.", "(And not i.e.", "for creating wrapped library for public using). "], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "rapidly", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "just several", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["Update: \nIt is a year passed as we did a conversion of our library by using SWIG."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["First we made a python version.There were several moments when we experienced troubles with SWIG - it is true.", "But right now we expanded our library to Java and .NET.", "So we have 3 languages with 1 SWIG.", "And I could say that SWIG rocks in terms of saving a LOT of time. "], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["Just wanted to add a few more considerations that I didn't see mentioned yet.", "[EDIT: Ooops, didn't see Mike Steder's answer]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you want to try using a non Cpython implementation (like PyPy, IronPython or Jython), then ctypes is about the only way to go.", "PyPy doesn't allow writing C-extensions, so that rules out pyrex/cython and Boost.python.", "For the same reason, ctypes is the only mechanism that will work for IronPython and (eventually, once they get it all working) jython."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As someone else mentioned, no compilation is required.", "This means that if a new version of the .dll or .so comes out, you can just drop it in, and load that new version.", "As long as the none of the interfaces changed, it's a drop in replacement.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'm going to be contrarian and suggest that, if you can, you should write your extension library using the standard Python API.", "It's really well-integrated from both a C and Python perspective... if you have any experience with the Perl API, you will find it a very pleasant surprise."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "standard Python API", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/api/api.html"}, {"text": "very", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Ctypes is nice too, but as others have said, it doesn't do C++."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["How big is the library you're trying to wrap?", "How quickly does the codebase change?", "Any other maintenance issues?", "These will all probably affect the choice of the best way to write the Python bindings."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Something to keep in mind is that SWIG targets only the CPython implementation.", "Since ctypes  is also supported by the PyPy and IronPython implementations it may be worth writing your modules with ctypes for compatibility with the wider Python ecosystem."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]