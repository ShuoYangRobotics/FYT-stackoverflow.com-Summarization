[[{"text": ["Cython doesn't offer automatic performance gains, you have to know its internals and check the generated C code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In particular if you want to improve loops performances, you have to avoid calling Python functions in them, which you happen to do a lot in this case (all the np.", "calls are Python calls, slicing, and probably other things)."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "np.", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["See this page for general guidelines about performance optimization with Cython (the -a switch really is handy when optimizing) and this one for specificities when optimizing numpy code."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "this page", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.cython.org/src/quickstart/cythonize.html"}, {"href": "http://wiki.cython.org/tutorials/numpy", "text": "this one", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Cython can produce an html file to help with this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n cython -a MODULE.py\n</code>\n</pre>\n", "senID": 1}, {"text": ["This shows each line of source code colored white through various shades of yellow.", "The darker the yellow color, the more dynamic Python behaviour is still being performed on that line.", "For each line that contains some yellow, you need to add more static typing declarations."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["When I'm doing this, I like to split parts of my source code that I'm having trouble with onto many separate lines, one for each expression or operator, to get the most granular view."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Without this, it's easy to overlook some static type declarations of variables, function calls or operators.", "(e.g.", "the indexing operator x[y] is still a fully-dynamic Python operation unless you declare otherwise)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You could definitely speed up your code by using more of Numpy's capabilities."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For instance:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n cdef np.ndarray[double, ndim=1] S = np.zeros(dtype = \"d\", shape = J)\ncdef int j\nfor j in xrange(ns):\n    S += P_i[:,j]\n</code>\n</pre>\n", "senID": 2}, {"text": ["would be much faster and legible as"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n S = P_i.sum(axis=1)\n</code>\n</pre>\n", "senID": 4}, {"text": ["You also repeat some calculations, which thus take twice more time than necessary.", "For instance"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n np.where(data[:,1]== (yr + 72))\n</code>\n</pre>\n", "senID": 6}, {"text": ["could be calculated only once and stored in a variable that you could reuse."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["You also perform a lot of reshaping and slicing: it could help to have your variables be in a simpler format from the beginning on.", "If possible, your code would be much clearer, and optimizations could be much more obvious."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["Will a profiler help you figure out which part is slow?", "I like to run programs using the standard library profiler:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n python -O -m cProfile -o profile.out MYAPP.py\n</code>\n</pre>\n", "senID": 1}, {"text": ["and then view the output from that in the 'RunSnakeRun' GUI:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n runsnake profile.out\n</code>\n</pre>\n", "senID": 3}, {"text": ["A RunSnakeRun can be installed from here:\nhttp://www.vrplumber.com/programming/runsnakerun/"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://www.vrplumber.com/programming/runsnakerun/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.vrplumber.com/programming/runsnakerun/"}]}, {"src": "http://i.stack.imgur.com/vAvGe.png", "tag": "img", "senID": 5}], [{"text": ["Taking the advice given here, I have spent more time profiling the above code.", "To hopefully clean things up a bit I defined "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I have profiled the code a bit more and have a better idea of which pieces are the slowest.", "I additionally defined"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n X = data[:, 2:7]\nm_y = data[:, 21].reshape(J,1)\nsigma_y = 1.0\nprice = data[:, 7].reshape(J, 1)\nshares_data = data[:,8]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then it is the following lines that are eating up most of the total time."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n mu_ij = np.dot((X*np.array([s1, s2, s3, s4, s5])), nu[1:K+1,:])\nmu_y  = a * np.log(np.exp(m_y + sigma_y*nu[0,:].reshape(1,ns)) - price)\nV = delta.reshape(J,1) + mu_ij + mu_y\nexp_vi = np.exp(V)\nP_i = (1.0 / np.sum(exp_vi[np.where(data[:,1]==71)], 0)) *  exp_vi[np.where(data[:,1]==71)] \nfor yr in xarange(19):\n    P_yr = (1.0 / np.sum(exp_vi[np.where(data[:,1]==yr)], 0)) * exp_vi[np.where(data[:,1]==yr)]\nP_i  = np.concatenate((P_i, P_yr))\n</code>\n</pre>\n", "senID": 4}, {"text": ["I get the impression this is an overly cumbersome way to achieve my goal.", "I was hoping somebody might be able to provide some advice on how to speed these lines up.", "Maybe there are Numpy capabilities I am missing?", "If this problem is not sufficiently well specified for you to be helpful, I would be happy to provide more details on the context of my problem.", "Thanks!"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Splitting data only, after your comment on 28 Nov:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "only", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import sys\nimport time\nimport numpy as np\n\ndef splitdata( data, n, start=1971 ):\n    \"\"\" split data into n pieces, where col 1 == start .. start + n \"\"\"\n        # not fancy, fast enough for small n\n    split = n * [None]\n    for j in range(n):\n        split[j] = data[ data[:,1] == start + j ]\n    return split  # [ arrays: col1 0, col1 1 ... ]\n\n#...........................................................................\nN = 2237\nncol = 21\nstart = 1971\nn = 20\nseed = 1\nexec \"\\n\".join( sys.argv[1:] )  # run this.py N= ...\nnp.set_printoptions( 2, threshold=100, suppress=True )  # .2f\nnp.random.seed(seed)\n\nprint \"N=%d  ncol=%d  n=%d\" % (N, ncol, n)\ndata = np.random.uniform( start, start + n, (N,ncol) )\ndata[:,1] = data[:,1].round()\nt0 = time.time()\n\nsplit = splitdata( data, n, start )  # n pieces\n\nprint \"time: %.0f us splitdata\" % ((time.time() - t0) * 1e6)\nfor y, yeardata in enumerate(split):\n    print \"%d  %d  %g\" % (start + y, len(yeardata), yeardata[:,0].sum())\n</code>\n</pre>\n", "senID": 1}, {"text": ["-->"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n time: 27632 us splitdata  # old mac ppc\n1971  69  136638\n1972  138  273292\n...\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The \"fundamental mistake\" is that you expect good performance in long loops from Python.", "It's an interpreted language, and switching between implementations and ctyping does nothing to this.", "There are a few numeric Python libraries for fast computing, mosly written in C. For example, if you already use numpy for arrays, why not you go further and use scipy for your advanced math?", "It will increase both readability and speed."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "numpy", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "scipy", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "and", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}]]