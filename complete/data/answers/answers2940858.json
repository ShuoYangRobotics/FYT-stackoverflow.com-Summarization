[[{"text": ["If you have killall:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n os.system(\"killall -9 iChat\");\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n os.system(\"ps -C iChat -o pid=|xargs kill -9\")\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Assuming you're on a Unix-like platform (so that ps -A exists),"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ps -A", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import subprocess, signal\n&gt;&gt;&gt; p = subprocess.Popen(['ps', '-A'], stdout=subprocess.PIPE)\n&gt;&gt;&gt; out, err = p.communicate()\n</code>\n</pre>\n", "senID": 1}, {"text": ["gives you ps -A's output in the out variable (a string).", "You can break it down into lines and loop on them...:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "ps -A", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "out", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for line in out.splitlines():\n...   if 'iChat' in line:\n...     pid = int(line.split(None, 1)[0])\n...     os.kill(pid, signal.SIGKILL)\n...\n</code>\n</pre>\n", "senID": 3}, {"text": ["(you could avoid importing signal, and use 9 instead of signal.SIGKILL, but I just don't particularly like that style, so I'd rather used the named constant this way)."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "signal", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "9", "childNum": 0, "tag": "code", "childList": []}, {"text": "signal.SIGKILL", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Of course you could do much more sophisticated processing on these lines, but this mimics what you're doing in shell."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["If what you're after is avoiding ps, that's hard to do across different Unix-like systems (ps is their common API to get a process list, in a sense).", "But if you have a specific Unix-like system in mind, only (not requiring any cross-platform portability), it may be possible; in particular, on Linux, the /proc pseudo-filesystem is very helpful.", "But you'll need to clarify your exact requirements before we can help on this latter part."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "ps", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ps", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "/proc", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["By using psutil ( http://code.google.com/p/psutil/ ):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/psutil/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/psutil/"}]}, {"code": "<pre>\n<code>\n import psutil\n\nPROCNAME = \"python.exe\"\n\nfor proc in psutil.process_iter():\n    if proc.name == PROCNAME:\n        proc.kill()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["you can those exact commands from python like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os \nprint os.system('kill -9 ' + pid)\n</code>\n</pre>\n", "senID": 1}, {"text": ["But your command on getting the pid needs a bit of work though (can't just assume just because it has iChat that it really is iChat) you should use killall instead as suggested by Matthew Flaschen"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can use pkill &lt;process_name&gt; in a unix system to kill process by name."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pkill &lt;process_name&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Then the python code will be:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import os\n&gt;&gt;&gt; process_name=iChat\n&gt;&gt;&gt; os.system('pkill '+process_name)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["you can use WMI module to do this on windows, though it's a lot clunkier than you unix folks are used to; import WMI takes a long time and there's intermediate pain to get at the process."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "import WMI", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The below code will kill all iChat oriented programs:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n p = subprocess.Popen(['pgrep', '-l' , 'iChat'], stdout=subprocess.PIPE)\nout, err = p.communicate()\n\nfor line in out.splitlines():        \n    line = bytes.decode(line)\n    pid = int(line.split(None, 1)[0])\n    os.kill(pid, signal.SIGKILL)\n</code>\n</pre>\n", "senID": 1}]]