[[{"text": ["Use the regex (\\d+)([a-zA-Z]+)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "(\\d+)([a-zA-Z]+)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import re\na = [\"10people\", \"5cars\"]\n[re.match('^(\\\\d+)([a-zA-Z]+)$', x).groups() for x in a]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Result: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [('10', 'people'), ('5', 'cars')]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall('(\\d+|[a-zA-Z]+)', '12fgsdfg234jhfq35rjg')\n['12', 'fgsdfg', '234', 'jhfq', '35', 'rjg']\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall(\"\\d+|[a-zA-Z]+\",\"10people\")\n['10', 'people']\n\n&gt;&gt;&gt; re.findall(\"\\d+|[a-zA-Z]+\",\"10people5cars\")\n['10', 'people', '5', 'cars']\n</code>\n</pre>\n", "senID": 0}], [{"text": ["In general, a split on /(?&lt;=[0-9])(?=[a-z])|(?&lt;=[a-z])(?=[0-9])/i separates a string that way."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "/(?&lt;=[0-9])(?=[a-z])|(?&lt;=[a-z])(?=[0-9])/i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; s = '10cars'\n&gt;&gt;&gt; m = re.match(r'(\\d+)([a-z]+)', s)\n&gt;&gt;&gt; print m.group(1)\n10\n&gt;&gt;&gt; print m.group(2)\ncars\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you are like me and goes long loops around to avoid regexpes justbecause they are ugly, here is a non-regex approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data = \"5people10cars\"\n\nnumbers = \"\".join(ch if ch.isdigit() else \"\\n\" for ch in data).split()\nnames = \"\".join(ch if not ch.isdigit() else \"\\n\" for ch in data).split()\n\nfinal = zip (numbers, names)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Piggybacking on jsbueno's idea, using str.translate, followed by split:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n\nallchars = ''.join(chr(i) for i in range(32,256))\ndigExtractTrans = string.maketrans(allchars, ''.join(ch if ch.isdigit() else ' ' for ch in allchars))\nalpExtractTrans = string.maketrans(allchars, ''.join(ch if ch.isalpha() else ' ' for ch in allchars))\n\ndata = \"5people10cars\"\nnumbers = data.translate(digExtractTrans).split()\nnames = data.translate(alpExtractTrans).split()\n</code>\n</pre>\n", "senID": 1}, {"text": ["You only need to create the translation tables once, then call translate and split as often as you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]