[[{"text": ["Perl \"one-liner\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n perl -MText::CSV_XS -e'$c=Text::CSV_XS-&gt;new({binary=&gt;1,eol=&gt;\"\\n\"});%a=map{$i++;/^L\\d+$/?($_=&gt;$i):()}@{$c-&gt;getline(*ARGV)};open$b{$_},\"&gt;$_\"for keys%a;while($f=$c-&gt;getline(*ARGV)){$c-&gt;print($b{$_},[@$f[0,1,$a{$_}]])for keys%a}'\n</code>\n</pre>\n", "senID": 1}, {"text": ["For ones which have problem with reading:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ echo '$c=Te...' | perltidy\n$c = Text::CSV_XS-&gt;new( { binary =&gt; 1, eol =&gt; \"\\n\" } );\n%a = map { $i++; /^L\\d+$/ ? ( $_ =&gt; $i ) : () } @{ $c-&gt;getline(*ARGV) };\nopen $b{$_}, \"&gt;$_\" for keys %a;\nwhile ( $f = $c-&gt;getline(*ARGV) ) {\n    $c-&gt;print( $b{$_}, [ @$f[ 0, 1, $a{$_} ] ] )\n      for keys %a;\n}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Using only AWK:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n awk -F, -vOFS=, -vc=1 '\n    NR == 1 {\n        for (i=1; i&lt;NF; i++) {\n            if ($i != \"\") {\n                g[c]=i;\n                f[c++]=$i\n            }\n        }\n    }\n    NR&gt;2 {\n        for (i=1; i &lt; c; i++) {\n            print $1,$2, $g[i] &gt; \"output_\"f[i]\".csv\"\n        }\n    }' data.csv\n</code>\n</pre>\n", "senID": 1}, {"text": ["As a one-liner:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n awk -F, -vOFS=, -vc=1 'NR == 1 {for (i=1; i&lt;NF; i++) {if ($i != \"\") {g[c]=i; f[c++]=$i}}} NR&gt;2 { for (i=1; i &lt; c; i++) {print $1,$2, $g[i] &gt; \"file_\"f[i]\".csv\" }}' data.csv\n</code>\n</pre>\n", "senID": 3}, {"text": ["Example output:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n $ cat file_L1.csv\nEXAMPLEfoo,60,6\nEXAMPLEbar,30,6\nEXAMPLE1,60,3\nEXAMPLE2,120,6\nEXAMPLE3,60,6\nEXAMPLE4,30,6\n$ cat file_L2.csv\nEXAMPLEfoo,60,0\nEXAMPLEbar,30,6\nEXAMPLE1,60,3\nEXAMPLE2,120,0\nEXAMPLE3,60,6\nEXAMPLE4,30,6\n$ cat file_L11.csv\nEXAMPLEfoo,60,0\nEXAMPLEbar,30,6\nEXAMPLE1,60,3\nEXAMPLE2,120,0\nEXAMPLE3,60,0\nEXAMPLE4,30,6\n</code>\n</pre>\n", "senID": 5}], [{"text": ["try this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/bin/bash\nawk 'BEGIN{ OFS=FS=\",\" }\nNR==1{\n for(i=1;i&lt;=NF;i++){\n   if($i){ f[i]=$i }\n }\n}\nNR&gt;2{ for(o in f){ print $1,$2, $o &gt; \"file_\"f[o]\".csv\" } } ' file\n</code>\n</pre>\n", "senID": 1}, {"text": ["output"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ cat file_L1.csv\nEXAMPLEfoo,60,6\nEXAMPLEbar,30,6\nEXAMPLE1,60,3\nEXAMPLE2,120,6\nEXAMPLE3,60,6\nEXAMPLE4,30,6\n\n$ cat file_L2.csv\nEXAMPLEfoo,60,0\nEXAMPLEbar,30,6\nEXAMPLE1,60,3\nEXAMPLE2,120,0\nEXAMPLE3,60,6\nEXAMPLE4,30,6\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n use strict;\nuse warnings;\n\nuse Text::CSV;\nmy $csv = Text::CSV-&gt;new;\n\nsub parse_line {\n    $csv-&gt;parse(shift) or die $!;\n    return $csv-&gt;fields;\n}\n\nmy @metadata;\nmy @files  = parse_line(scalar &lt;&gt;);\nmy @header = parse_line(scalar &lt;&gt;); # Ignore.\nfor my $i (0 .. $#files){\n    next unless length $files[$i];\n    open(my $h, '&gt;', \"$files[$i].csv\") or die $!;\n    push @metadata, {column =&gt; $i, handle =&gt; $h};\n}\n\nwhile (my $line = &lt;&gt;){\n    my @fields = parse_line($line);\n    for my $m (@metadata){\n        $csv-&gt;print($m-&gt;{handle}, [ @fields[0, 1, $m-&gt;{column}] ]);\n        print {$m-&gt;{handle}} \"\\n\";\n    }\n}\n</code>\n</pre>\n", "senID": 0}], [{"text": ["In Python, slightly hacky and untested, but should do the job:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import csv\nr = csv.reader(open(r'file.csv'), dialect='excel')\ntopline = r.next()\nheaderline = r.next()\n\nlastcell = ''\nfor i, cell in enumerate(topline): #Copy cells forwards in the top line, so L1 for example goes across all cells\n    if cell == '':\n        topline[i] = lastcell\n    else:\n        lastcell = cell\n\nfor i in range(len(headerline)): #Copy the topline cells into the header line, so the headerline cells should be unique\n    headerline[i] = '-'.join((topline[i], headerline[i]))\n\nrows = [dict(zip(headerline, line)) for line in r]\n\n# Rows should now consist of dicts of the form {'Title': 'EXAMPLEfoo', 'r/t': '60', 'L1-needed': '6' ...}\n\nfor lval in frozenset(topline): #Use frozenset to ensure we only have unique values.\n    if lval != '': #Make sure we don't look at the blank value\n        w = csv.writer(open(r'%s.csv' % lval, 'w'), dialect='excel')\n        for row in rows:\n            line = [row['Title'], row['r/t'], row['-'.join((lval, 'needed'))]]\n            w.writerow(line)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Have a look at perl module Text::CSV_XS - comma-separated values manipulation routines.", "I found this module very helpful while manipulating with CSV files."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Text::CSV_XS", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/~hmbrand/Text-CSV_XS-0.72/CSV_XS.pm"}]}]]