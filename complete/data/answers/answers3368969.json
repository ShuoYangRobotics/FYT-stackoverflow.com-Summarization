[[{"code": "<pre>\n<code>\n s[len(start):-len(end)]\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n import re\n\ns = 'asdf=5;iwantthis123jasd'\nresult = re.search('asdf=5;(.*)123jasd', s)\nprint result.group(1)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["My method will be to do something like,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n find index of start string in s =&gt; i\nfind index of end string in s =&gt; j\n\nsubstring = substring(i+len(start) to j-1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is one way to do it"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n _,_,rest = s.partition(start)\nresult,_,_ = rest.partition(end)\nprint result\n</code>\n</pre>\n", "senID": 1}, {"text": ["Another way using regexp"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import re\nprint re.findall(re.escape(start)+\"(.*)\"+re.escape(end),s)[0]\n</code>\n</pre>\n", "senID": 3}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n print re.search(re.escape(start)+\"(.*)\"+re.escape(end),s).group(1)\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n s = \"123123STRINGabcabc\"\n\ndef find_between( s, first, last ):\n    try:\n        start = s.index( first ) + len( first )\n        end = s.index( last, start )\n        return s[start:end]\n    except ValueError:\n        return \"\"\n\ndef find_between_r( s, first, last ):\n    try:\n        start = s.rindex( first ) + len( first )\n        end = s.rindex( last, start )\n        return s[start:end]\n    except ValueError:\n        return \"\"\n\n\nprint find_between( s, \"123\", \"abc\" )\nprint find_between_r( s, \"123\", \"abc\" )\n</code>\n</pre>\n", "senID": 0}, {"text": ["gives:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 123STRING\nSTRINGabc\n</code>\n</pre>\n", "senID": 2}, {"text": ["I thought it should be noted - depending on what behavior you need, you can mix index and rindex calls or go with one of the above versions (it's equivalent of regex (.", "*) and (.*?", ") groups)."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "index", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "rindex", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "(.*)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "(.*?)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["This I posted before as code snippet in Daniweb:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "code snippet in Daniweb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.daniweb.com/code/snippet289548.html"}]}, {"code": "<pre>\n<code>\n # picking up piece of string between separators\n# function using partition, like partition, but drops the separators\ndef between(left,right,s):\n    before,_,a = s.partition(left)\n    a,_,after = a.partition(right)\n    return before,a,after\n\ns = \"bla bla blaa &lt;a&gt;data&lt;/a&gt; lsdjfasdj\u00f6f (important notice) 'Daniweb forum' tcha tcha tchaa\"\nprint between('&lt;a&gt;','&lt;/a&gt;',s)\nprint between('(',')',s)\nprint between(\"'\",\"'\",s)\n\n\"\"\" Output:\n('bla bla blaa ', 'data', \" lsdjfasdj\\xc3\\xb6f (important notice) 'Daniweb forum' tcha tcha tchaa\")\n('bla bla blaa &lt;a&gt;data&lt;/a&gt; lsdjfasdj\\xc3\\xb6f ', 'important notice', \" 'Daniweb forum' tcha tcha tchaa\")\n('bla bla blaa &lt;a&gt;data&lt;/a&gt; lsdjfasdj\\xc3\\xb6f (important notice) ', 'Daniweb forum', ' tcha tcha tchaa')\n\"\"\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["String formatting adds some flexibility to what NG suggested.", "start and end can now be amended as desired."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "start", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "end", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import re\n\ns = 'asdf=5;iwantthis123jasd'\nstart = 'asdf=5;'\nend = '123jasd'\n\nresult = re.search('%s(.*)%s' % (start, end), s).group(1)\nprint(result)\n</code>\n</pre>\n", "senID": 1}]]