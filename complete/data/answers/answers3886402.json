[[{"code": "<pre>\n<code>\n 5.55 % 1\n</code>\n</pre>\n", "senID": 0}, {"text": ["Keep in mind this won't help you with floating point rounding problems.", "I.e., you may get:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 0.550000000001\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or otherwise a little off the 0.55 you are expecting."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["What about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = 1.3927278749291\nb = a - int(a)\n\nb\n&gt;&gt; 0.39272787492910011\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or, using numpy:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import numpy\na = 1.3927278749291\nb = a - numpy.fix(a)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Using the decimal module from the standard library, you can retain the original precision and avoid floating point rounding issues:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "decimal", "tag": "a", "pos": 0, "childList": [{"text": "decimal", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/decimal.html"}, {"text": "decimal", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; Decimal('4.20') % 1\nDecimal('0.20')\n</code>\n</pre>\n", "senID": 1}, {"text": ["As kindall notes in the comments, you'll have to convert native floats to strings first."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "kindall", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/416467/kindall"}, {"href": "http://stackoverflow.com/questions/3886402/python-how-to-get-numbers-after-decimal-point/3886439#comment-4138283", "text": "notes", "childNum": 0, "tag": "a", "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n import math\norig = 5.55\nwhole = math.floor(orig)    # whole = 5.0\nfrac = orig - whole         # frac = 0.55\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Try Modulo:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 5.55%1 = 0.54999999999999982\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use floor and subtract the result from the original number:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt; import math #gives you floor.\n&gt;&gt; t = 5.55 #Give a variable 5.55\n&gt;&gt; x = math.floor(t) #floor returns t rounded down to 5..\n&gt;&gt; z = t - x #z = 5.55 - 5 = 0.55\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; n=5.55\n&gt;&gt;&gt; if \".\" in str(n):\n...     print \".\"+str(n).split(\".\")[-1]\n...\n.55\n</code>\n</pre>\n", "senID": 0}]]