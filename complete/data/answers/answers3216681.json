[[{"text": ["The construct: if x: is generally used to check against boolean values."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "if x:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For ints the use of the explicit x != 0 is preferred - along the lines of explicit is better than implicit (PEP 20 - Zen of Python)."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x != 0", "childNum": 0, "tag": "code", "childList": []}, {"text": "explicit is better than implicit", "childNum": 0, "tag": "em", "childList": []}, {"href": "http://www.python.org/dev/peps/pep-0020/", "text": "PEP 20 - Zen of Python", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["There's no hard and fast rule here.", "Here are some examples where I would use each:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Suppose that I'm interfacing to some function that returns -1 on error and 0 on success.", "Such functions are pretty common in C, and they crop up in Python frequently when using a library that wraps C functions.", "In that case, I'd use if x:."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if x:", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["On the other hand, if I'm about to divide by x and I want to make sure that x isn't 0, then I'm going to be explicit and write if x != 0."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}, {"text": "if x != 0", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["As a rough rule of thumb, if I treat x as a bool throughout a function, then I'm likely to use if x: -- even if I can prove that x will be an int.", "If in the future I decide I want to pass a bool (or some other type!", ") to the function, I wouldn't need to modify it."], "childNum": 6, "tag": "p", "senID": 3, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "bool", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if x:", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "x", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "bool", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["On the other hand, if I'm genuinely using x like an int, then I'm likely to spell out the 0."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Typically, I read: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["if(x) to be a question about existence. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if(x)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["if( x != 0) to be a question about a number."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "if( x != 0)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["It depends on what you want; if x is an integer, they're equivalent, but you should write the code that matches your exact intention."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if x:\n    # x is anything that evaluates to a True value\nif x != 0:\n    # x is anything that is not equal to 0\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Might I suggest that the amount of bickering over this question is enough to answer it?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some argue that it \"if x\" should only be used for Z, others for Y, others for X."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If such a simple statement is able to create such a fuss, to me it is clear that the statement is not clear enough.", "Write what you mean."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you want to check that x is equal to 0, then write \"if x == 0\".", "If you want to check if x exists, write \"if x is not None\"."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Then there is no confusion, no arguing, no debate."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["If you want to test x in a boolean context:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "x", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if x:\n</code>\n</pre>\n", "senID": 1}, {"text": ["More explicit, for x validity (doesn't match empty containers):"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "x", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if x is not None:\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you want to test strictly in integer context:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if x != 0:\n</code>\n</pre>\n", "senID": 5}, {"text": ["This last one is actually implicitly comparing types."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Wouldn't if x is not 0: be the preferred method in Python, compared to if x != 0:?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "if x is not 0:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if x != 0:", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Yes, the former is a bit longer to write, but I was under the impression that is and is not are preferred over == and !=.", "This makes Python easier to read as a natural language than as a programming language."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is not", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "!=", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}]]