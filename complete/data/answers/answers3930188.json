[[{"text": ["In one of the comments, you say:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Well, if it's your code, figure out how you're getting None when you expect a number and stop that from happening."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "that", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["If it's someone else's code, find out the conditions under which it gives None and determine a sensible value to use for that."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["That TypeError only appears when you try to pass int() None (which is the only NoneType value, as far as I know).", "I would say that your real goal should not be to convert NoneType to int, but to figure out where/why you're getting None instead of a number as expected, and either fix it or handle the None properly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n int(value or 0)\n</code>\n</pre>\n", "senID": 0}, {"text": ["This will use 0 in the case when you provide any value that Python considers False, such as None, 0, [], \"\", etc.", "Since 0 is False, you should only use 0 as the alternative value (otherwise you will find your 0s turning into that value)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "False", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n int(0 if value is None else value)\n</code>\n</pre>\n", "senID": 2}, {"text": ["This replaces only None with 0.", "Since we are testing for None specifically, you can use some other value as the replacement."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["This can happen if you forget to return a value from a function: it then returns None.", "Look at all places where you are assigning to that variable, and see if one of them is a function call where the function lacks a return statement."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["A common \"Pythonic\" way to handle this kind of situation is known as EAFP for \"It's easier to ask forgiveness than permission\".", "Which usually means writing code that assumes everything is fine, but then wrapping it with a try..except block just in case to handle things when it's not. "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "EAFP", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "It's easier to ask forgiveness than permission", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "try..except", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Here's that coding style applied to your problem:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try:\n    my_value = int(my_value)\nexcept TypeError:\n    my_value = 0  # or whatever you want to do\n\nanswer = my_value / divisor\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or perhaps the even simpler and slightly faster:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n try:\n    answer = my_value / divisor\nexcept TypeError:\n    answer = 0\n</code>\n</pre>\n", "senID": 4}, {"text": ["The inverse and more traditional approach is known as LBYL which stands for \"Look before you leap\" is what @Soviut and some of the others have suggested.", "For additional coverage of this topic see my answer and associated comments to the question \"Determine whether a key is present in a Python dict\" elsewhere on this site."], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "LBYL", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Look before you leap", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "answer", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3733992/determine-whether-a-key-is-present-in-a-python-dict/3734681#3734681"}, {"href": "http://stackoverflow.com/questions/3733992/determine-whether-a-key-is-present-in-a-python-dict-closed", "text": "Determine whether a key is present in a Python dict", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["One potential problem with EAFP is that it can hide the fact that something is wrong with some other part of your code or third-party module you're using, especially when the exceptions frequently occur (and therefore aren't really \"exceptional\" cases at all)."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "EAFP", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["You should check to make sure the value is not None before trying to perform any calculations on it:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n my_value = None\nif my_value is not None:\n    print int(my_value) / 2\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note: my_value was intentionally set to None to prove the code works and that the check is being performed."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Note:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "my_value", "childNum": 0, "tag": "code", "childList": []}]}]]