[[{"text": ["For such a simple task, you probably don't need more than CGI.", "Luckily Python has a built-in cgi module which should do what you want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "cgi", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Or you could look into some of the minimal web frameworks, such as web.py."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "web.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://webpy.org/"}]}], [{"text": ["Sounds like you just need to enable CGI on apache, which pretty much will redirect your output to the webserver output."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "CGI on apache", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.modpython.org/"}]}, {"text": ["Python does have CGI library you may take a look at it."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "CGI library", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/cgi.html"}]}, {"text": ["Here's an essay by Guido ( a bit dated ) "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "essay by Guido", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/essays/ppt/sd99east/index.htm"}]}, {"text": ["And an interactive instruction  that looks promising."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "interactive instruction", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cs.virginia.edu/~lab2q/"}]}, {"text": ["p.s. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Perhaps you may also want to see Google's offering for this Google app engine ( it may not be what you want though ) "], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Google app engine", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/appengine/docs/python/gettingstarted/"}]}], [{"text": ["Whose web server?", "If it is a web server provided by a web hosting company or someone else and you don't have control over it, you need to ascertain in what way they support the use of Python for writing web applications.", "It isn't enough to know just that they have Python available."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As pointed out by others, is likely that at least CGI scripts which use Python will be supported.", "CGI however is not really practical for running large Python web frameworks such as Django."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It is possible though that the web server might also support FASTCGI.", "If that is the case it becomes possible to use such larger Python web frameworks as FASTCGI uses persistent processes where as CGI creates a process for each request, where the overhead of large Python web frameworks generally makes the use of CGI impractical as a result."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If the Apache server is controlled by others using a standalone Python web server such as wsgiref and proxying to it from Apache isn't going to be doable either as you can't setup Apache to do it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["So, find out how use of Python for web applications is supported and work out whether you are just a user of the Apache instance, or whether you have some measure of control of changing its global configuration files and restarting it.", "This will dictate what you can do and use."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Sorry to say it, but HTTP web services are what you're looking for.", "Think of it this way - you put a form on a webpage, and a submit button.", "That goes to a web service that accepts the request and it chews on that request, and returns a response - which is a page of html.", "You never have to actually save the html, it is always dynamically generated, but it's a valid page of html nonetheless."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "are", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "request", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "response", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "save", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}, {"text": ["Look at django http://www.djangoproject.com/ for a high quality python based web service toolkit."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.djangoproject.com/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangoproject.com/"}]}, {"text": ["The first step to understanding the request / response idiom is to think of the request as a specifically-formatted (defined by CGI - that is, it's a GET or POST HTML action) set of command line parameters, and the response as specifically-formatted output (HTML) that gets sent, not to stdout, but across \"the wire\" to some browser.", "Sending the request reaches out across the wire and executes the script with some parameters, and you recieve back the output - your formatted HTML page."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I agree completely with Matt -- Django is what you want.", "Django provides a complete solution, and really wonderful documentation that will help you get something going.", "If your application grows and becomes more complicated, Django can still work; Django works even for very large and very complicated web sites."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Take a look at the free book, The Django Book."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "The Django Book", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.djangobook.com/"}]}, {"text": ["Another plus with Django: if you do your web app in Django, you can port it to Google App Engine."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I've not read DIVE INTO PYTHON, so maybe what I'm saying is redundant.", "As Daniel said, CGI may work for you.", "These days this would only the case for simple stuff with a fairly low number of hits.", "The Python CGI module is documented here.", "I have always used that module for form processing and just done prints for the output.", "As best as I've been able to figure out, that's the usual way of doing things, but I have not done a lot of CGI with Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/cgi.html"}]}, {"text": ["You don't say what you're doing, so I'll state what may be obvious:  Make sure you're telling the server that you're outputting a web page with your very first output being the content type followed by a blank line.", "Typically this is done with:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print \"Content-Type: text/html\"\nprint\n</code>\n</pre>\n", "senID": 2}, {"text": ["(For Python 2, for 3 you'll need to make your prints into function calls.", ")  After this, you print your html, header, body, etc.", "tags and the actual content."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I think Django is overkill.", "If you are wanting to learn about this stuff, start from something very simple like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.islascruz.org/html/index.php/blog/show/Python:-Simple-HTTP-Server-on-python..html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.islascruz.org/html/index.php/blog/show/Python:-Simple-HTTP-Server-on-python..html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.islascruz.org/html/index.php/blog/show/Python:-Simple-HTTP-Server-on-python..html"}]}, {"text": ["You can put your code where the do_GET is."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["A current method of creating simple  (one-of )Python web page server is the wsgirefmodule."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "current", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "Python", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/wsgiref.html#module-wsgiref", "text": "wsgirefmodule", "childNum": 1, "tag": "a", "childList": [{"text": "wsgiref", "tag": "code"}]}, {"text": "wsgiref", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["See some SO qusetions (http://stackoverflow.com/search?q=%5Bpython%5D+wsgiref) for some code examples and more suggestions."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "SO qusetions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/search?q=%5Bpython%5D+wsgiref"}, {"href": "http://stackoverflow.com/search?q=%5Bpython%5D+wsgiref", "text": "http://stackoverflow.com/search?q=%5Bpython%5D+wsgiref", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["The wsgirefexample is a good place to start:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "wsgirefexample", "tag": "a", "pos": 0, "childList": [{"text": "wsgiref", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/wsgiref.html#examples"}, {"text": "wsgiref", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from wsgiref.simple_server import make_server\n\ndef hello_world_app(environ, start_response):\n    status = '200 OK' # HTTP Status\n    headers = [('Content-type', 'text/plain')] # HTTP Headers\n    start_response(status, headers)\n\n    # The returned object is going to be printed\n    return [\"Hello World\"]\n\nhttpd = make_server('', 8000, hello_world_app)\nprint \"Serving on port 8000...\"\n\n# Serve until process is killed\nhttpd.serve_forever()\n</code>\n</pre>\n", "senID": 3}]]