[[{"text": ["os.rename(\"c:/a\", \"c:/b/a\") is equivalent to \"move c:\\a c:\\b\" under windows commandline"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You can try using the Shutil module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Shutil", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/shutil.html#module-shutil"}]}], [{"text": ["When i need many file system operations I prefer using 'path' module:\nhttp://pypi.python.org/pypi/path.py/2.2"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "http://pypi.python.org/pypi/path.py/2.2", "childNum": 1, "tag": "strong", "childList": [{"text": "http://pypi.python.org/pypi/path.py/2.2", "tag": "a"}]}, {"href": "http://pypi.python.org/pypi/path.py/2.2", "text": "http://pypi.python.org/pypi/path.py/2.2", "childNum": 0, "tag": "a", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["It's quite a good and lightweight wrapper around built-in 'os.path' module."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Also code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n last_part = os.path.split(src)[1]\n</code>\n</pre>\n", "senID": 3}, {"text": ["is a bit strange, cause there is special function for this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n last_part = os.path.basename(src)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["os.rename(\"c:/a/\", \"c:/b\"/) --> Changes the name of folder a in folder b"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["os.rename(\"c:/a/\", \"c:/b/a\") --> Put folder b into folder a"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You will need to state the full path it's being moved to:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n src = 'C:\\a'\ndst_dir = 'C:\\b'\nlast_part = os.path.split(src)[1]\nos.rename(src, os.path.join(dst_dir, last_part))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Actually, it looks like shutil.move will do what you want by looking at its documentation:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "shutil.move", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(And its source."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "source", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/view/python/trunk/Lib/shutil.py?view=markup"}]}], [{"text": ["Using Twisted's FilePath:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "FilePath", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://twistedmatrix.com/documents/8.2.0/api/twisted.python.filepath.FilePath.html"}]}, {"code": "<pre>\n<code>\n from twisted.python.filepath import FilePath\nFilePath(\"c:/a\").moveTo(FilePath(\"c:/b/a\"))\n</code>\n</pre>\n", "senID": 1}, {"text": ["or, more generally:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from twisted.python.filepath import FilePath\ndef moveToExistingDir(fileOrDir, existingDir):\n    fileOrDir.moveTo(existingDir.child(fileOrDir.basename()))\nmoveToExistingDir(FilePath(\"c:/a\"), FilePath(\"c:/b\"))\n</code>\n</pre>\n", "senID": 3}]]