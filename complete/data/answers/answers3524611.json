[[{"text": ["If you want to check each entry separately:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for entry in PhoneDirectory:\n    if 'John' in entry: ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you just want to know if any entry satisfies the condition and don't care which one:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "any", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if any('John' in entry for entry in PhoneDirectory):\n    ...\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note that any will do no \"wasted\" work -- it will return True as soon as it finds any one entry meeting the condition (if no entries meet the condition, it does have to check every single one of them to confirm that, of course, and then returns False)."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "any", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "one", "childNum": 0, "tag": "em", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Since no one has recommended this yet, I would do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n all_johns = [p for p in PhoneDirectory if 'Joh' in p]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can do a split on \":\" and look for occurrences of what you are looking for in the first element of the resulting array."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dir = ['John:009878788677' , 'Jefrey:67654654645' , 'Maria:8787677766'];\nfor a in dir:\n    values = a.split(\":\")\n    if values[0] == \"John\":\n        print(\"John's number is %s\" % (values[1]))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use a list comprehension, like [p for p in PhoneDirectory if p.find('Joh') != -1].", "This will give you a list of all matching items."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[p for p in PhoneDirectory if p.find('Joh') != -1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If performance counts for this task use some SuffixTree implementation.", "Or just make any DBMS engine do the indexing job."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SuffixTree", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://hkn.eecs.berkeley.edu/~dyoo/python/suffix_trees/"}]}], [{"code": "<pre>\n<code>\n if any(entry.startswith('John:') in entry for entry in PhoneDirectory)\n</code>\n</pre>\n", "senID": 0}, {"text": ["But I would prepare something with two elements as you list of strings is not well suited to task:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n PhoneList = ['John:009878788677' , 'Jefrey:67654654645' , 'Maria:8787677766']\n\nnumbers = { a:b \n            for item in PhoneList\n            for a,_,b in (item.partition(':'),)\n            }\n\nprint numbers\nprint \"%s's number is %s.\" % ( 'John', numbers['John'] )\n</code>\n</pre>\n", "senID": 2}]]