[[{"text": ["The answer to both question is to use a loop. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Print the \"{\" and then loop through all the elements printing them."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["But the input inside a loop and keep looping until you get what you want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The only datatype im aware of that 'natively' outputs with { } is a dictionary, which doesnt seem to apply here.", "I would just write a small function to output your lists in the desired fashion"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "{ }", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def curlyBracketOutput(l):\n        x = ''\n        for i in l: x += i\n        return '{' + x + '}'\n\n&gt;&gt;&gt; curlyBracketOutput(['a','b','c'])\n'{abc}'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Curly brackets refers to a dict?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#mapping-types-dict"}]}, {"text": ["I think a "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n list(set(the_input))\n</code>\n</pre>\n", "senID": 2}, {"text": ["should give you a list of unique letters.", "to check if they occur more than once \nand"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n theinput.count(one_letter) &gt; 1\n</code>\n</pre>\n", "senID": 4}, {"text": ["should tell you if there is mor than one."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; chars = ['a','b','c']\n&gt;&gt;&gt; def Output(chars):\n...     return \"{%s}\" % ''.join(chars)\n... \n&gt;&gt;&gt; print Output(chars)\n{abc}\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["ok, for one thing, as everyone here has said, print '{'.", "other than that, you can use the following code in your script to check for repeated words,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n letterlist = []\n\n def takeInput(string):\n    for x in string:\n        if x not in letterlist:\n            letterlist.append(x)\n        else:\n            return 0\n    return 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["then as for your asking for input and checking for errors, you can do that by,"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n while(True): #or any other condition\n    string = input(\"Enter 3 letter string\")\n    if len(string)!=3:\n        print(\"String size inadequate\")\n        continue\n    if takeInput(string):\n        arraylist = permutation(string) #--call permutation method here\n        #then iterate the permutations and print them in {}\n        for x in arraylist: print(\"{\" + x + \"}\")\n    else:\n        print(\"At least one of the letters already used\")\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Or just do something tremendously kludgy:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print repr(YourExistingOutput).replace(\"[\", \"{\").replace(\"]\", \"}\")\n</code>\n</pre>\n", "senID": 1}]]