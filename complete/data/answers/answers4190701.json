[[{"text": ["The problem is that the or operator does not do what you want here.", "What you're really saying is if the value of \"good\" is True or \"fine\" is in talk.", "The value of \"good\" is always True, since it's a non-empty string, which is why that branch always gets executed."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "or", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if the value of \"good\" is True or \"fine\" is in talk", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["if \"good\" in talk or \"fine\" in talk is what you meant.", "What you wrote is equivalent to if \"good\" or (\"fine\" in talk)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "if \"good\" in talk or \"fine\" in talk", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if \"good\" or (\"fine\" in talk)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n talk = raw_input(\"How are you?\")\nif any(x in talk for x in (\"good\", \"fine\")):\n     print \"Glad to here it...\"\nelif any(x in talk for x in (\"bad\", \"sad\", \"terrible\")):\n     print \"I'm sorry to hear that!\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["Note:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n In [46]: \"good\" or \"fine\" in \"I'm feeling blue\"\nOut[46]: 'good'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Python is grouping the condition like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n (\"good\") or (\"fine\" in \"I'm feeling blue\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["In terms of boolean values, that's equivalent to:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n True or False\n</code>\n</pre>\n", "senID": 6}, {"text": ["which is equal to "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n True\n</code>\n</pre>\n", "senID": 8}, {"text": ["That's why the if-block is always getting executed."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["Use a regular expression.", "What if the input is \"I'm good.", "Well, i'm more fine.", "Sorry, i feel terrible, my bad.", "\"\nThen you'll have all conditions fulfilled and the output won't be what you expect."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You have to test each string separately, or test for inclusion in a list or tuple."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In your code, Python will take the value of your strings and test them for truth (\"good\"',\"bad\"' and \"sad\"' will returnTrue' as they're not empty), and then it will check if `\"fine\"' is in the characters of talk (because of the way the in operator works with strings)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "\"good\"',", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"sad\"' will return", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You should do something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n talk = raw_input(\"How are you?\")\nif talk in (\"good\", \"fine\"):\n     print \"Glad to here it...\"\nelif talk in (\"bad\", \"sad\", \"terrible\"):\n     print \"I'm sorry to hear that!\"\n</code>\n</pre>\n", "senID": 3}], [{"text": ["This worked for me: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n talk = raw_input(\"How are you? \")\nwords = re.split(\"\\\\s+\", talk)\nif 'fine' in words:\n    print \"Glad to hear it...\"\nelif 'terrible' in words:\n    print \"I'm sorry to hear that!\"\nelse:\n    print \"Huh?\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["From reading the other answers, we'd have to expand the predicates for other words."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]