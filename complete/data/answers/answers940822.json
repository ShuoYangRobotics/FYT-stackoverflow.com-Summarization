[[{"text": ["This shouldn't match anything:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.compile('$^')\n</code>\n</pre>\n", "senID": 1}, {"text": ["So if you replace regexp1, regexp2 and regexp3 with '$^' it will be impossible to find a match.", "Unless you are using the multi line mode."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "hr", "senID": 3}, {"text": ["After some tests I found a better solution"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n re.compile('a^')\n</code>\n</pre>\n", "senID": 5}, {"text": ["It is impossible to match and will fail earlier than the previous solution.", "You can replace a with any other character and it will always be impossible to match"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["To match an empty string - even in multiline mode - you can use \\A\\Z, so:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\\A\\Z", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n re.compile('\\A\\Z|\\A\\Z*|\\A\\Z+')\n</code>\n</pre>\n", "senID": 1}, {"text": ["The difference is that \\A and \\Z are start and end of string, whilst ^ and $ these can match start/end of lines, so $^|$^*|$^+ could potentially match a string containing newlines (if the flag is enabled)."], "childNum": 7, "tag": "p", "senID": 2, "childList": [{"text": "\\A", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\\Z", "childNum": 0, "tag": "code", "childList": []}, {"text": "string", "childNum": 0, "tag": "em", "childList": []}, {"text": "^", "childNum": 0, "tag": "code", "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "childList": []}, {"text": "lines", "childNum": 0, "tag": "em", "childList": []}, {"text": "$^|$^*|$^+", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["And to fail to match anything (even an empty string), simply attempt to find content before the start of the string, e.g:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n re.compile('.\\A|.\\A*|.\\A+')\n</code>\n</pre>\n", "senID": 4}, {"text": ["Since no characters can come before \\A (by definition), this will always fail to match."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["(?!", ") should always fail to match.", "It is the zero-width negative look-ahead.", "If what is in the parentheses matches then the whole match fails.", "Given that it has nothing in it, it will fail the match for anything (including nothing)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "(?!)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"code": "<pre>\n<code>\n \"()\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["matches nothing and nothing only."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Maybe '.", "{0}'?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "'.{0}'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["You could use\n\\z..", "This is the absolute end of string, followed by two of anything"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "\\z..", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["If + or * is tacked on the end this still works refusing to match anything  "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "+", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "*", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Or, use some list comprehension to remove the useless regexp entries and join to put them all together.", "Something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n re.compile('|'.join([x for x in [regexp1, regexp2, ...] if x != None]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Be sure to add some comments next to that line of code though :-)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]