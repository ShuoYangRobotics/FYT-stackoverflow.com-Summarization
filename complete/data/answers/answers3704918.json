[[{"text": ["I'm not sure what you mean by \"restarting\".", "Do you want to start iterating over from the beginning, or simply skip the current iteration?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If it's the latter, then for loops support continue just like while loops do:"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "continue", "childNum": 0, "tag": "code", "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for i in xrange(10):\n  if i == 5:\n    continue\n  print i\n</code>\n</pre>\n", "senID": 2}, {"text": ["The above will print the numbers from 0 to 9, except for 5."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you're talking about starting over from the beginning of the for loop, there's no way to do that except \"manually\", for example by wrapping it in a while loop:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n should_restart = True\nwhile should_restart:\n  should_restart = False\n  for i in xrange(10):\n    print i\n    if i == 5:\n      should_restart = True\n      break\n</code>\n</pre>\n", "senID": 5}, {"text": ["The above will print the numbers from 0 to 5, then start over from 0 again, and so on indefinitely (not really a great example, I know)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"code": "<pre>\n<code>\n while True:\n    for i in xrange(10):\n        if condition(i):\n            break\n    else:\n        break\n</code>\n</pre>\n", "senID": 0}, {"text": ["That will do what you seem to want.", "Why you would want to do it is a different matter.", "Maybe you should take a look at your code and make sure you're not missing an obvious and easier way to do it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["A poor way to think of an algorithm.   "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You're just filtering, i.e., removing duplicates.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["And -- in Python -- you're happiest making copies, not trying to do del.", "In general, there's very little call to use del.  "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "del", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "del", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def unique( some_list ):\n    list_iter= iter(some_list)\n    prev= list_iter.next()\n    for item in list_iter:\n        if item != prev:\n            yield prev\n            prev= item\n    yield prev\n\nlist( unique( ['berry','||','||','||','pancake'] ) )\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Continue will work for any loop."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Continue", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["continue works in for loops also."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "continue", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for i in range(3):\n...     print 'Before', i\n...     if i == 1:\n...             continue\n...     print 'After', i\n... \nBefore 0\nAfter 0\nBefore 1\n# After 1 is missing\nBefore 2\nAfter 2\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The inevitable itertools version, because it just came to me:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import groupby\n\ndef uniq(seq):\n    for key, items in groupby(seq):\n        yield key\n\nprint list(uniq(['berry','||','||','||','pancake'])) # ['berry','||', 'pancake']\n# or simply:\nprint [key for key, items in groupby(['berry','||','||','||','pancake'])]\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def remove_adjacent(nums):\n     return [a for a,b in zip(nums, nums[1:]+[not nums[-1]]) if a != b]\n\nexample = ['berry','||','||','||','pancake']\n\nexample = remove_adjacent(example)\nprint example\n\"\"\" Output:\n['berry', '||', 'pancake']\n\"\"\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["And by the way this is repeating of http://stackoverflow.com/questions/3460161/remove-adjacent-duplicate-elements-from-a-list/3463143#3463143"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/3460161/remove-adjacent-duplicate-elements-from-a-list/3463143#3463143", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3460161/remove-adjacent-duplicate-elements-from-a-list/3463143#3463143"}]}], [{"text": ["As you can see answering your question leads to some rather convoluted code.", "Usually a better way can be found, which is why such constructs aren't built into the language"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you are not comfortable using itertools, consider using this loop instead.", "Not only is it easier to follow than your restarting for loop, it is also more efficient because it doesn't waste time rechecking items that have already been passed over."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n L = ['berry','||','||','||','pancake']\nidx=1\nwhile idx&lt;len(L):\n    if L[idx-1]==L[idx]:\n        del L[idx]\n    else:\n        idx+=1\n</code>\n</pre>\n", "senID": 2}]]