[[{"text": ["Interestingly there's an undocumented Scanner class in the re module:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Scanner", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/457664/"}, {"href": "http://docs.python.org/library/re.html", "text": "re", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n import re\n\ndef s_ident(scanner, token): return token\ndef s_operator(scanner, token): return \"op%s\" % token\ndef s_float(scanner, token): return float(token)\ndef s_int(scanner, token): return int(token)\n\nscanner = re.Scanner([\n    (r\"[a-zA-Z_]\\w*\", s_ident),\n    (r\"\\d+\\.\\d*\", s_float),\n    (r\"\\d+\", s_int),\n    (r\"=|\\+|-|\\*|/\", s_operator),\n    (r\"\\s+\", None),\n    ])\n\nprint scanner.scan(\"sum = 3*foo + 312.50 + bar\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Following the discussion it looks like it was left in as experimental code/a starting point for others."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "discussion", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-dev/2003-April/035070.html"}]}], [{"text": ["There is nothing exactly like Ruby's StringScanner in Python.", "It is of course easy to put something together:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\nclass Scanner(object):\n    def __init__(self, s):\n        self.s = s\n        self.offset = 0\n    def eos(self):\n        return self.offset == len(self.s)\n    def scan(self, pattern, flags=0):\n        if isinstance(pattern, basestring):\n            pattern = re.compile(pattern, flags)\n        match = pattern.match(self.s, self.offset)\n        if match is not None:\n            self.offset = match.end()\n            return match.group(0)\n        return None\n</code>\n</pre>\n", "senID": 1}, {"text": ["along with an example of using it interactively"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = Scanner(\"Hello there!\")\n&gt;&gt;&gt; s.scan(r\"\\w+\") \n'Hello'\n&gt;&gt;&gt; s.scan(r\"\\s+\") \n' '\n&gt;&gt;&gt; s.scan(r\"\\w+\")\n'there'\n&gt;&gt;&gt; s.eos()\nFalse\n&gt;&gt;&gt; s.scan(r\".*\")\n'!'\n&gt;&gt;&gt; s.eos()\nTrue\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["However, for the work I do I tend to just write those regular expressions in one go and use groups to extract the needed fields.", "Or for something more complicated I would write a one-off tokenizer or look to PyParsing or PLY to tokenize for me.", "I don't see myself using something like StringScanner."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Looks like a variant on re.split( pattern, string )."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re.split( pattern, string )", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["http://docs.python.org/library/re.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/re.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}, {"text": ["http://docs.python.org/library/re.html#re.split"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/library/re.html#re.split", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#re.split"}]}], [{"text": ["Are you looking for regular expressions in Python?", "Check this link from official docs:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/re.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/re.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html"}]}], [{"text": ["Today there is a project by Mark Watkinson that implements StringScanner in Python:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://asgaard.co.uk/p/Python-StringScanner"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://asgaard.co.uk/p/Python-StringScanner", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://asgaard.co.uk/p/Python-StringScanner"}]}, {"text": ["https://github.com/markwatkinson/python-string-scanner"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "https://github.com/markwatkinson/python-string-scanner", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/markwatkinson/python-string-scanner"}]}, {"text": ["http://code.google.com/p/python-string-scanner/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://code.google.com/p/python-string-scanner/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/python-string-scanner/"}]}], [{"text": ["Maybe look into the built in module tokenize.", "It looks like you can pass a string into it using the StringIO module."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "tokenize", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/tokenize.html"}, {"text": "StringIO module", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stringio.html"}]}]]