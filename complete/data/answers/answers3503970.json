[[{"text": ["It's not exactly what you asked for, but would removing the existing .pyc files and then not creating any more work for you?", "In that case, you could use the -B option:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;python --help\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-B     : don't write .py[co] files on import; also PYTHONDONTWRITEBYTECODE=x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use the standard Python library's imp module to reimplement __builtins__.__import__, which is the hook function called by import and from statement.", "In particular, the imp.load_module function can be used to load a .py even when the corresponding .pyc is present.", "Be sure to study carefully all the docs in the page I've pointed to, plus those for import, as it's kind of a delicate job.", "The docs themselves suggest using import hooks instead (per PEP 302) but for this particular task I suspect that would be even harder."], "childNum": 9, "tag": "p", "senID": 0, "childList": [{"text": "could", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "__builtins__.__import__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "import", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "from", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "imp.load_module", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/imp.html#imp.load_module"}, {"text": ".py", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": ".pyc", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "import", "tag": "a", "pos": 3, "childList": [{"text": "import", "tag": "strong"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html?highlight=__import__#__import__"}, {"text": "import", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["BTW, likely causes for your observed problems include race conditions between different computers trying to write .pyc files at the same time -- NFS locking is notoriously flaky and has always been;-).", "As long as every Python compiler you're using is at the same version (if not, you're in big trouble anyway;-), I'd rather precompile all of those .py files into .pyc and make their directories read-only; the latter seems the simplest approach anyway (rather than hacking __import__), even if for some reason you can't precompile."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": ".pyc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".py", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ".pyc", "childNum": 0, "tag": "code", "childList": []}, {"text": "__import__", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Can you make the script directories read/execute-only so that the .pyc files can't be created?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Perhaps you could work around this by, for example, scheduling a job to periodically shut down the scripts and delete the .pyc files."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Well, I don't think Python ever interprets code directly if you're loading the code from a file.", "Even when using the interactive shell, Python will compile the imported module into a .pyc.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That said, you could write a shell script to go ahead and delete all the .pyc files before launching your scripts.", "That would certainly force a full rebuild before every execution."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You may find PEP 3147 - PYC Repository Directories to be of great interest from Python 3.2 onwards."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PEP 3147 - PYC Repository Directories", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-3147/"}]}]]