[[{"code": "<pre>\n<code>\n import re\nthenum = re.compile('^file-(\\d+)\\.png$')\n\ndef bynumber(fn):\n  mo = thenum.match(fn)\n  if mo: return int(mo.group(1))\n\nallnames = os.listdir('.')\nallnames.sort(key=bynumber)\n</code>\n</pre>\n", "senID": 0}, {"text": ["Now you have the files in the order you want them and can loop"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for i, fn in enumerate(allnames):\n  ...\n</code>\n</pre>\n", "senID": 2}, {"text": ["using the progressive number i (which will be 0, 1, 2, ...) padded as you wish in the destination-name."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["There are three steps.", "The first is getting all the filenames.", "The second is converting the filenames.", "The third is renaming them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If all the files are in the same folder, then glob should work."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import glob\nfilenames = glob.glob(\"/path/to/folder/*.txt\")\n</code>\n</pre>\n", "senID": 2}, {"text": ["Next, you want to change the name of the file.", "You can print with padding to do this."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; filename = \"file-338.txt\"\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; fnpart = os.path.splitext(filename)[0]\n&gt;&gt;&gt; fnpart\n'file-338'\n&gt;&gt;&gt; _, num = fnpart.split(\"-\")\n&gt;&gt;&gt; num.rjust(5, \"0\")\n'00338'\n&gt;&gt;&gt; newname = \"file-%s.txt\" % num.rjust(5, \"0\")\n&gt;&gt;&gt; newname\n'file-00338.txt'\n</code>\n</pre>\n", "senID": 4}, {"text": ["Now, you need to rename them all.", "os.rename does just that."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "os.rename", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n os.rename(filename, newname)\n</code>\n</pre>\n", "senID": 6}, {"text": ["To put it together:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n for filename in glob.glob(\"/path/to/folder/*.txt\"): # loop through each file\n    newname = make_new_filename(filename) # create a function that does step 2, above\n    os.rename(filename, newname)\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Thank you all for your suggestions, I will try them all to learn the different approaches.", "The solution I went for is based on using a natural sort on my filelist, and then iterating that to rename.", "This was one of the suggested answers but for some reason it has disappeared now so I cannot mark it as accepted!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nfiles = os.listdir('.')\nnatsort(files)\nindex = 0\nfor filename in files:\n    os.rename(filename, str(index).zfill(7)+'.png')\n    index += 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["where natsort is defined in http://code.activestate.com/recipes/285264-natural-string-sorting/"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://code.activestate.com/recipes/285264-natural-string-sorting/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/285264-natural-string-sorting/"}]}], [{"text": ["Why don't you do it in a two step process.", "Parse all the files and rename with padded numbers and then run another script that takes those files, which are sorted correctly now, and renames them so they're contiguous?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["1) Take the number in the filename.", "2) Left-pad it with zeros\n3) Save name."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n def renamer():\n    for iname in os.listdir('.'):\n        first, second = iname.replace(\" \", \"\").split(\"-\")\n        number, ext = second.split('.')\n        first, number, ext = first.strip(), number.strip(), ext.strip()\n        number = '0'*(6-len(number)) + number  # pad the number to be 7 digits long\n        oname = first + \"-\" + number + '.' + ext\n        os.rename(iname, oname)\n    print \"Done\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["Hope this helps"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]