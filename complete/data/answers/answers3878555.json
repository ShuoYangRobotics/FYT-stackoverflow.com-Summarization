[[{"text": ["The naive way to do this kind of thing with re is"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n re.sub('\\*+', '*', text)\n</code>\n</pre>\n", "senID": 1}, {"text": ["That replaces runs of 1 or more asterisks with one asterisk.", "For runs of exactly one asterisk, that is running very hard just to stay still.", "Much better is to replace runs of TWO or more asterisks by a single asterisk:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "TWO or more", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n re.sub('\\*\\*+', '*', text)\n</code>\n</pre>\n", "senID": 3}, {"text": ["This can be well worth doing:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n \\python27\\python -mtimeit -s\"t='a*'*100;import re\" \"re.sub('\\*+', '*', t)\"\n10000 loops, best of 3: 73.2 usec per loop\n\n\\python27\\python -mtimeit -s\"t='a*'*100;import re\" \"re.sub('\\*\\*+', '*', t)\"\n100000 loops, best of 3: 8.9 usec per loop\n</code>\n</pre>\n", "senID": 5}, {"text": ["Note that re.sub will return a reference to the input string if it has found no matches, saving more wear and tear on your computer, instead of a whole new string."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["I'd suggest using the re module sub function:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#re.sub"}]}, {"code": "<pre>\n<code>\n import re\n\nresult = re.sub(\"\\*+\", \"*\", \"***abc**de*fg******h\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["I highly recommend reading through the article about RE and good practices.", "They can be tricky if you're not familiar with them.", "In practice, using raw strings is a good idea."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["how about a non regex way"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def squeeze(char,s):\n    while char*2 in s:\n        s=s.replace(char*2,char)\n    return s\nprint squeeze(\"*\" , \"AB***abc**def**AA***k\")\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n re.sub('\\*+', '*', pattern)\n</code>\n</pre>\n", "senID": 0}, {"text": ["That will do."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Well regular expressions wise I would do exactly as JoshD has suggested.", "But one improvement here. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Use - "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n regex  = re.compile('\\*+')\nresult = re.sub(regex, \"*\", string)\n</code>\n</pre>\n", "senID": 2}, {"text": ["This would essentially cache your regex.", "So subsequent usage of this in a loop would make your regex operations fast. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["without regexp you can use general repeating element removal with checking of '*':"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n source = \"***abc**dee*fg******h\"\ntarget = ''.join(c for c,n in zip(source, source[1:]+' ') if  c+n != '**')\nprint target\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You wrote:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n pattern.replace(\"*\"\\*, \"*\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["You meant:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n pattern.replace(\"\\**\", \"*\")\n#                ^^^^\n</code>\n</pre>\n", "senID": 3}, {"text": ["You really meant:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n pattern_after_substitution= re.sub(r\"\\*+\", \"*\", pattern)\n</code>\n</pre>\n", "senID": 5}, {"text": ["which does what you wanted."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]