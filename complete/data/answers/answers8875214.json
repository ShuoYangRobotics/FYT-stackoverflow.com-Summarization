[[{"text": ["If it prints None it is probably because you're printing the result of the function, as well as letting the function print expressions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["e.g."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def print_stuff():\n    print \"Hello, World\"\n\nprint print_stuff()\n&gt; Hello, World\n&gt; None\n\n# But print_stuff prints stuff, so you don't need to print it too:\n\nprint_stuff()\n&gt; Hello, World\n</code>\n</pre>\n", "senID": 2}], [{"text": ["A function works - "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A function does not \"print None\" - a function, without an explicit return statement returns \"None\" implicitly - and if you call it on the interactive shell, the __repr__ of the returned None is printed to the console."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "__repr__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If youc all a function in a  running program, the value returned, which is the result of of evaluating the expression that is the function call, does not print anything, just as inserting a line like 2 + 2 in th emidle of the code won't print anything."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "2 + 2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["So, for your lines above, you can just do:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def printer(name, house):\n    print \"hello,\"\n    print name\n    print house\n    print \"is where you are\"\n\nprinter(\"Bob\", \"Home\")\n</code>\n</pre>\n", "senID": 4}, {"text": ["And re-use it with as may calls to \"printer\" as you want."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Yes, it's called a function."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def foo(name, house):\n    print 'hello,', name, house, 'is where you are'\n\nfoo('bob', 'home')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Function doesn't print anything that you don't print inside it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I think you can do that with a function (would be the obvious way to do), and I don't usually see None being printed after execution of functions containing print.", "In this case, probably you don't need a  return statement:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "return", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def printblock(name, house):\n    print \"hello,\"\n    print name\n    print house\n    print \"is where you are\"\n\nprintblock(\"Bob\", \"HOME\")\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def hello(name, house):\n    print \"hello,\"\n    print name\n    print house\n    print \"is where you are\"\n    return\n\nhello(\"Bob\", \"Home\")\n</code>\n</pre>\n", "senID": 0}, {"text": ["This is a standard python function.", "It shouldn't print anything unless you explicitly tell it to."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; from string import Template\n&gt;&gt;&gt; x=Template('Hello \\n$name \\n$house \\nis where you are')\n&gt;&gt;&gt; name='bob'\n&gt;&gt;&gt; house='here'\n&gt;&gt;&gt; print x.safe_substitute(name=name,house=house)\nHello\nbob\nhere\nis where you are\n</code>\n</pre>\n", "senID": 0}, {"text": ["Hi there, as i recall from your question that you would need to use it several times, you may use the Template functionality of Python.", "you may kep all your variable in a list or dictionary and call the above given print statement using the for loop."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["hope this helps, also explore the the template function.", "thank you :)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]