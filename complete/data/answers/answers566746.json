[[{"code": "<pre>\n<code>\n import os\nrows, columns = os.popen('stty size', 'r').read().split()\n</code>\n</pre>\n", "senID": 0}, {"text": ["uses the 'stty size' command which according to a thread on the python mailing list is reasonably universal on linux.", "It opens the 'stty size' command as a file, 'reads' from it, and uses a simple string split to separate the coordinates."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "a thread on the python mailing list", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2000-May/033312.html"}]}, {"text": ["Unlike the os.environ[\"COLUMNS\"] value (which I can't access in spite of using bash as my standard shell) the data will also be up-to-date whereas I believe the os.environ[\"COLUMNS\"] value would only be valid for the time of the launch of the python interpreter (suppose the user resized the window since then)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import console\n(width, height) = console.getTerminalSize()\n\nprint \"Your terminal's width is: %d\" % width\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: oh, I'm sorry.", "That's not a python standard lib one, here's the source of console.py (I don't know where it's from)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["The module seems to work like that: It checks if termcap is available, when yes.", "It uses that; if no it checks whether the terminal supports a special ioctl call and that does not work, too, it checks for the environment variables some shells export for that.", "This will probably work on UNIX only."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "termcap", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ioctl", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def getTerminalSize():\n    def ioctl_GWINSZ(fd):\n        try:\n            import fcntl, termios, struct, os\n            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ,\n        '1234'))\n        except:\n            return None\n        return cr\n    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)\n    if not cr:\n        try:\n            fd = os.open(os.ctermid(), os.O_RDONLY)\n            cr = ioctl_GWINSZ(fd)\n            os.close(fd)\n        except:\n            pass\n    if not cr:\n        try:\n            cr = (env['LINES'], env['COLUMNS'])\n        except:\n            cr = (25, 80)\n    return int(cr[1]), int(cr[0])\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I searched around and found a solution for windows at :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://code.activestate.com/recipes/440694-determine-size-of-console-window-on-windows/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.activestate.com/recipes/440694-determine-size-of-console-window-on-windows/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/440694-determine-size-of-console-window-on-windows/"}]}, {"text": ["and a solution for linux here."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So here is a version which works both on linux, os x and windows/cygwin :"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n \"\"\" getTerminalSize()\n - get width and height of console\n - works on linux,os x,windows,cygwin(windows)\n\"\"\"\n\n__all__=['getTerminalSize']\n\n\ndef getTerminalSize():\n   import platform\n   current_os = platform.system()\n   tuple_xy=None\n   if current_os == 'Windows':\n       tuple_xy = _getTerminalSize_windows()\n       if tuple_xy is None:\n          tuple_xy = _getTerminalSize_tput()\n          # needed for window's python in cygwin's xterm!\n   if current_os == 'Linux' or current_os == 'Darwin' or  current_os.startswith('CYGWIN'):\n       tuple_xy = _getTerminalSize_linux()\n   if tuple_xy is None:\n       print \"default\"\n       tuple_xy = (80, 25)      # default value\n   return tuple_xy\n\ndef _getTerminalSize_windows():\n    res=None\n    try:\n        from ctypes import windll, create_string_buffer\n\n        # stdin handle is -10\n        # stdout handle is -11\n        # stderr handle is -12\n\n        h = windll.kernel32.GetStdHandle(-12)\n        csbi = create_string_buffer(22)\n        res = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)\n    except:\n        return None\n    if res:\n        import struct\n        (bufx, bufy, curx, cury, wattr,\n         left, top, right, bottom, maxx, maxy) = struct.unpack(\"hhhhHhhhhhh\", csbi.raw)\n        sizex = right - left + 1\n        sizey = bottom - top + 1\n        return sizex, sizey\n    else:\n        return None\n\ndef _getTerminalSize_tput():\n    # get terminal width\n    # src: http://stackoverflow.com/questions/263890/how-do-i-find-the-width-height-of-a-terminal-window\n    try:\n       import subprocess\n       proc=subprocess.Popen([\"tput\", \"cols\"],stdin=subprocess.PIPE,stdout=subprocess.PIPE)\n       output=proc.communicate(input=None)\n       cols=int(output[0])\n       proc=subprocess.Popen([\"tput\", \"lines\"],stdin=subprocess.PIPE,stdout=subprocess.PIPE)\n       output=proc.communicate(input=None)\n       rows=int(output[0])\n       return (cols,rows)\n    except:\n       return None\n\n\ndef _getTerminalSize_linux():\n    def ioctl_GWINSZ(fd):\n        try:\n            import fcntl, termios, struct, os\n            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ,'1234'))\n        except:\n            return None\n        return cr\n    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)\n    if not cr:\n        try:\n            fd = os.open(os.ctermid(), os.O_RDONLY)\n            cr = ioctl_GWINSZ(fd)\n            os.close(fd)\n        except:\n            pass\n    if not cr:\n        try:\n            cr = (env['LINES'], env['COLUMNS'])\n        except:\n            return None\n    return int(cr[1]), int(cr[0])\n\nif __name__ == \"__main__\":\n    sizex,sizey=getTerminalSize()\n    print  'width =',sizex,'height =',sizey\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Code above didn't return correct result on my linux because winsize-struct has 4 unsigned shorts, not 2 signed shorts:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def terminal_size():\n    import fcntl, termios, struct\n    h, w, hp, wp = struct.unpack('HHHH',\n        fcntl.ioctl(0, termios.TIOCGWINSZ,\n        struct.pack('HHHH', 0, 0, 0, 0)))\n    return w, h\n</code>\n</pre>\n", "senID": 1}, {"text": ["hp and hp should contain pixel width and height, but don't."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It looks like there are some problems with that code, Johannes:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["getTerminalSize"], "childNum": 0, "tag": "code", "senID": 1, "childList": []}, {"text": "what is ", "tag": "none", "senID": 2}]}, {"text": ["Also, why switch lines and cols before returning?", "If TIOCGWINSZ and stty both say lines then cols, I say leave it that way.", "This confused me for a good 10 minutes before I noticed the inconsistency."], "childNum": 6, "tag": "p", "senID": 3, "childList": [{"text": "lines", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "cols", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "TIOCGWINSZ", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "stty", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "lines", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "cols", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Sridhar, I didn't get that error when I piped output.", "I'm pretty sure it's being caught properly in the try-except."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["pascal, \"HHHH\" doesn't work on my machine, but \"hh\" does.", "I had trouble finding documentation for that function.", "It looks like it's platform dependent."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "\"HHHH\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"hh\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["chochem, incorporated."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Here's my version:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def getTerminalSize():\n    \"\"\"\n    returns (lines:int, cols:int)\n    \"\"\"\n    import os, struct\n    def ioctl_GWINSZ(fd):\n        import fcntl, termios\n        return struct.unpack(\"hh\", fcntl.ioctl(fd, termios.TIOCGWINSZ, \"1234\"))\n    # try stdin, stdout, stderr\n    for fd in (0, 1, 2):\n        try:\n            return ioctl_GWINSZ(fd)\n        except:\n            pass\n    # try os.ctermid()\n    try:\n        fd = os.open(os.ctermid(), os.O_RDONLY)\n        try:\n            return ioctl_GWINSZ(fd)\n        finally:\n            os.close(fd)\n    except:\n        pass\n    # try `stty size`\n    try:\n        return tuple(int(x) for x in os.popen(\"stty size\", \"r\").read().split())\n    except:\n        pass\n    # try environment variables\n    try:\n        return tuple(int(os.getenv(var)) for var in (\"LINES\", \"COLUMNS\"))\n    except:\n        pass\n    # i give up. return default.\n    return (25, 80)\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Depending on your shell (I know that bash, at least, does this), you can access the terminal size using the ROWS and COLUMNS environment variables.", "I don't know of a Windows equivalent."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ROWS", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "COLUMNS", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n import os\nprint os.environ[\"COLUMNS\"]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is an version that should be Linux and Solaris compatible.", "Based on the posts and commments from madchine.", "Requires the subprocess module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "madchine", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/users/68595/madchine"}]}, {"code": "<pre>\ndef termsize():\n    import shlex, subprocess, re\n    output = subprocess.check_output(shlex.split('/bin/stty -a'))\n    m = re.search('rows\\D+(?P\\d+); columns\\D+(?P\\d+);', output)\n    if m:\n        return m.group('rows'), m.group('columns')\n    raise OSError('Bad response: %s' % (output))\n</pre>\n", "senID": 1}, {"code": "<pre>\n>>> termsize()\n('40', '100')\n</pre>\n", "senID": 2}]]