[[{"text": ["You can use generator expressions like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "generator expressions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0289/"}]}, {"code": "<pre>\n<code>\n gen = (x for x in xyz if x not in a)\n\nfor x in gen:\n    print x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["As per The Zen of Python (if you are wondering whether your code is \"Pythonic\", that's the place to go):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "The Zen of Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}, {"tag": "ul", "num": 5, "lis": [{"text": "Beautiful is better than ugly.", "tag": "none", "senID": 1}, {"text": "Explicit is better than implicit.", "tag": "none", "senID": 2}, {"text": "Simple is better than complex.", "tag": "none", "senID": 3}, {"text": "Flat is better than nested.", "tag": "none", "senID": 4}, {"text": "Readability counts.", "tag": "none", "senID": 5}]}, {"text": ["The Pythonic way of getting the sorted intersection of two sets is:"], "childNum": 6, "tag": "p", "senID": 6, "childList": [{"text": "sorted", "tag": "a", "pos": 0, "childList": [{"text": "sorted", "tag": "code"}], "childNum": 1, "href": "http://www.python.org/doc//current/library/functions.html#sorted"}, {"text": "sorted", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://www.python.org/doc//current/library/stdtypes.html#set.intersection", "text": "intersection", "childNum": 1, "tag": "a", "childList": [{"text": "intersection", "tag": "code"}]}, {"text": "intersection", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://www.python.org/doc//current/library/stdtypes.html#set", "text": "set", "childNum": 1, "tag": "a", "childList": [{"text": "set", "tag": "code"}]}, {"text": "set", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sorted(set(a).intersection(xyz))\n[0, 4, 6, 7, 9]\n</code>\n</pre>\n", "senID": 7}, {"text": ["Or those elements that are xyz but not in a:"], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "xyz", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sorted(set(xyz).difference(a))\n[12, 242]\n</code>\n</pre>\n", "senID": 9}, {"text": ["But for a more complicated loop you may want to flatten it by iterating over a well-named generator expression and/or calling out to a well-named function.", "Trying to fit everything on one line is rarely \"Pythonic\"."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "generator expression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc//current/tutorial/classes.html#generator-expressions"}]}, {"text": ["Update following additional comments on your question and the accepted answer"], "childNum": 0, "tag": "h2", "senID": 11, "childList": []}, {"text": ["I'm not sure what you are trying to do with enumerate, but if a is a dictionary, you probably want to use the keys, like this:"], "childNum": 3, "tag": "p", "senID": 12, "childList": [{"text": "enumerate", "tag": "a", "pos": 0, "childList": [{"text": "enumerate", "tag": "code"}], "childNum": 1, "href": "http://www.python.org/doc//current/library/functions.html#enumerate"}, {"text": "enumerate", "childNum": 0, "tag": "code", "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = {\n...     2: 'Turtle Doves',\n...     3: 'French Hens',\n...     4: 'Colly Birds',\n...     5: 'Gold Rings',\n...     6: 'Geese-a-Laying',\n...     7: 'Swans-a-Swimming',\n...     8: 'Maids-a-Milking',\n...     9: 'Ladies Dancing',\n...     0: 'Camel Books',\n... }\n&gt;&gt;&gt;\n&gt;&gt;&gt; xyz = [0, 12, 4, 6, 242, 7, 9]\n&gt;&gt;&gt;\n&gt;&gt;&gt; known_things = sorted(set(a.iterkeys()).intersection(xyz))\n&gt;&gt;&gt; unknown_things = sorted(set(xyz).difference(a.iterkeys()))\n&gt;&gt;&gt;\n&gt;&gt;&gt; for thing in known_things:\n...     print 'I know about', a[thing]\n...\nI know about Camel Books\nI know about Colly Birds\nI know about Geese-a-Laying\nI know about Swans-a-Swimming\nI know about Ladies Dancing\n&gt;&gt;&gt; print '...but...'\n...but...\n&gt;&gt;&gt;\n&gt;&gt;&gt; for thing in unknown_things:\n...     print \"I don't know what happened on the {0}th day of Christmas\".format(thing)\n...\nI don't know what happened on the 12th day of Christmas\nI don't know what happened on the 242th day of Christmas\n</code>\n</pre>\n", "senID": 13}], [{"text": ["How about building a string and printing it at once?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n res = ','.join(n for n in xyz \n                 if n in a)\nprint(res)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["a = [2,3,4,5,6,7,8,9,0]\nxyz = [0,12,4,6,242,7,9]set(a) &amp; set(xyz)set([0, 9, 4, 6, 7])"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "a = [2,3,4,5,6,7,8,9,0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "xyz = [0,12,4,6,242,7,9]set(a) &amp; set(xyz)set([0, 9, 4, 6, 7])", "childNum": 2, "tag": "code", "childList": [{"text": "", "tag": "br"}, {"text": "", "tag": "br"}]}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}], [{"text": ["You can use generators too, if generator expressions become too involved or complex:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "generators", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/Generators"}]}, {"code": "<pre>\n<code>\n def gen():\n    for x in xyz:\n        if x in a:\n            yield x\n\nfor x in gen():\n    print x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I personally think this is the prettiest version: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = [2,3,4,5,6,7,8,9,0]\nxyz = [0,12,4,6,242,7,9]\nfor x in filter(lambda w: w in a, xyz):\n  print x\n</code>\n</pre>\n", "senID": 1}]]