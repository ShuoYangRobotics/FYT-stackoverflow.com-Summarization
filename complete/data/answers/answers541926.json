[[{"text": ["In Python, scoping is of three types : global, local and class.", "You can create specialized 'scope' dictionaries to pass to exec / eval().", "In addition you can use nested scopes\n (defining a function within another).", "I found these to be sufficient in all my code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As Douglas Leeder said already, the main reason to use it in other languages is variable scoping and that doesn't really happen in Python.", "In addition, Python is the most readable language I have ever used.", "It would go against the grain of readability to do something like if true tricks (Which you say you want to avoid).", "In that case, I think the best bet is to refactor your code into multiple functions, or use a single scope.", "I think that the available scopes in Python are sufficient to cover every eventuality, so local scoping shouldn't really be necessary."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I hope this helps."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Why do you want to create new scopes in python anyway?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The normal reason for doing it in other languages is variable scoping, but that doesn't happen in python."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if True:\n    a = 10\n\nprint a\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I would see this as a clear sign that it's time to create a new function and refactor the code.", "I can see no reason to create a new scope like that.", "Any reason in mind?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you just want to create temp variables and let them be garbage collected right after using them, you can use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n del varname\n</code>\n</pre>\n", "senID": 1}, {"text": ["when you don't want them anymore. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If its just for aesthetics, you could use comments or extra newlines, no extra indentation, though."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["variables in list comprehension (Python 3+) and generators are local:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; i = 0\n&gt;&gt;&gt; [i+1 for i in range(10)]\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n&gt;&gt;&gt; i\n0\n</code>\n</pre>\n", "senID": 1}, {"text": ["but why exactly do you need this?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n def a():\n    def b():\n        pass\n    b()\n</code>\n</pre>\n", "senID": 0}, {"text": ["If I just want some extra indentation or am debugging, I'll use if True:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if True:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Please, read the documentation and clarify your question."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#python-scopes-and-name-spaces"}]}, {"text": ["btw, you don't need if(TRUE){} in C, a simple {} is sufficient. "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "if(TRUE){}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "{}", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Python has exactly two scopes, local and global.", "Variables that are used in a function are in local scope no matter what indentation level they were created at.", "Calling a nested function will have the effect that you're looking for."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def foo():\n  a = 1\n\n  def bar():\n    b = 2\n    print a, b #will print \"1 2\"\n\n  bar()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Still like everyone else, I have to ask you why you want to create a limited scope inside a function."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]