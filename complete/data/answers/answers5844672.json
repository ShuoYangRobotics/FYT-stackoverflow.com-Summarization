[[{"text": ["The delstatement removes an element:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "delstatement", "tag": "a", "pos": 0, "childList": [{"text": "del", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/reference/simple_stmts.html#grammar-token-del_stmt"}, {"text": "del", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n del d[key]\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, this mutates the existing dictionary so the contents of the dictionary changes for anybody else who has a reference to the same instance.", "To return a new dictionary, make a copy of the dictionary:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "new", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def removekey(d, key):\n    r = dict(d)\n    del r[key]\n    return r\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; def delete_key(dict, key):\n...     del dict[key]\n...     return dict\n... \n&gt;&gt;&gt; test_dict = {'one': 1, 'two' : 2}\n&gt;&gt;&gt; print delete_key(test_dict, 'two')\n{'one': 1}\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}, {"text": ["this doesn't do any error handling, it assumes the key is in the dict, you might want to check that first and raise if its not"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "raise", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I think your solution is best way to do it.", "But if you want another solution, you can create a new dictionary with using the keys from old dictionary without including your specified key, like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a\n{0: 'zero', 1: 'one', 2: 'two', 3: 'three'}\n&gt;&gt;&gt; {i:a[i] for i in a if i!=0}\n{1: 'one', 2: 'two', 3: 'three'}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The del statement is what you're looking for.", "If you have a dictionary named foo with a key called 'bar', you can delete 'bar' from foo like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "del statement", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#the-del-statement"}]}, {"code": "<pre>\n<code>\n del foo['bar']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that this permanently modifies the dictionary being operated on.", "If you want to keep the original dictionary, you'll have to create a copy beforehand:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; foo = {'bar': 'baz'}\n&gt;&gt;&gt; fu = dict(foo)\n&gt;&gt;&gt; del foo['bar']\n&gt;&gt;&gt; print foo\n{}\n&gt;&gt;&gt; print fu\n{'bar': 'baz'}\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n d = {1: 2, '2': 3, 5: 7}\ndel d[5]\nprint 'd = ', d\n</code>\n</pre>\n", "senID": 0}, {"text": ["Result: d = {1: 2, '2': 3}"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["No, there is no other way than"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def dictMinus(dct, val):\n   copy = dct.copy()\n   del copy[val]\n   return copy\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, often creating copies of only slightly altered dictionaries is probably not a good idea because it will result in comparatively large memory demands.", "It is usually better to log the old dictionary(if even necessary) and then modify it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]