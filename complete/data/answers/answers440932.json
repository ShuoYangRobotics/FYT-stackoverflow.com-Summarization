[[{"text": ["To answer my own question, I finally found a CodeProject solution that does exactly what I'm looking for: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.codeproject.com/KB/threads/GetNtProcessInfo.aspx "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.codeproject.com/KB/threads/GetNtProcessInfo.aspx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.codeproject.com/KB/threads/GetNtProcessInfo.aspx"}]}, {"text": ["As @Reuben already pointed out, you can use NtQueryProcessInformation to retrieve this information.", "Unfortuantely it's not a recommended approach, but given the only other solution seems to be to incur the overhead of a WMI query, I think we'll take this approach for now. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "NtQueryProcessInformation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/ms684280(VS.85).aspx"}]}, {"text": ["Note that this seems to not work if using code compiled from 32bit Windows on a 64bit Windows OS, but since our modules are compiled from source on the target that should be OK for our purposes.", "I'd rather use this existing code and should it break in Windows 7 or a later date, we can look again at using WMI.", "Thanks for the responses!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["UPDATE: A more concise and C only (as opposed to C++) version of the same technique is illustrated here:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "UPDATE", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["http://wj32.wordpress.com/2009/01/24/howto-get-the-command-line-of-processes/"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://wj32.wordpress.com/2009/01/24/howto-get-the-command-line-of-processes/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wj32.wordpress.com/2009/01/24/howto-get-the-command-line-of-processes/"}]}], [{"text": ["The cached solution:\nhttp://74.125.45.132/search?q=cache:-wPkE2PbsGwJ:windowsxp.mvps.org/listproc.htm+running+process+command+line&amp;hl=es&amp;ct=clnk&amp;cd=1&amp;gl=ar&amp;client=firefox-a"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://74.125.45.132/search?q=cache:-wPkE2PbsGwJ:windowsxp.mvps.org/listproc.htm+running+process+command+line&amp;hl=es&amp;ct=clnk&amp;cd=1&amp;gl=ar&amp;client=firefox-a", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://74.125.45.132/search?q=cache:-wPkE2PbsGwJ:windowsxp.mvps.org/listproc.htm+running+process+command+line&hl=es&ct=clnk&cd=1&gl=ar&client=firefox-a"}]}, {"code": "<pre>\n<code>\n in CMD\nWMIC /OUTPUT:C:\\ProcessList.txt PROCESS get Caption,Commandline,Processid\n\nor\n\nWMIC /OUTPUT:C:\\ProcessList.txt path win32_process get Caption,Processid,Commandline\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also:\nhttp://mail.python.org/pipermail/python-win32/2007-December/006498.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://mail.python.org/pipermail/python-win32/2007-December/006498.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-win32/2007-December/006498.html"}]}, {"code": "<pre>\n<code>\n http://tgolden.sc.sabren.com/python/wmi_cookbook.html#running_processes \nseems to do the trick:\n\nimport wmi\nc = wmi.WMI ()\nfor process in c.Win32_Process ():\n  print process.CommandLine\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I expect to get voted up for my answer!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The WMI approach mentioned in another response is probably the most reliable way of doing this.", "Looking through MSDN, I spotted what looks like another possible approach; it's documented, but its not clear whether it's fully supported.", "In MSDN's language, it--"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "reliable", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["In any case, provided that your process has the right permissions, you should be able to call NtQueryProcessInformation with a ProcessInformationClass of ProcessBasicInformation.", "In the returned PROCESS_BASIC_INFORMATION structure, you should get back a pointer to the target process's process execution block (as field PebBaseAddress).", "The ProcessParameters field of the PEB will give you a pointer to an RTL_USER_PROCESS_PARAMETERS structure.", "The CommandLine field of that structure will be a UNICODE_STRING structure.", "(Be careful not too make too many assumptions about the string; there are no guarantees that it will be NULL-terminated, and it's not clear whether or not you'll need to strip off the name of the executed application from the beginning of the command line."], "childNum": 13, "tag": "p", "senID": 1, "childList": [{"text": "NtQueryProcessInformation", "tag": "a", "pos": 0, "childList": [{"text": "NtQueryProcessInformation", "tag": "code"}], "childNum": 1, "href": "http://msdn.microsoft.com/en-us/library/ms684280%28VS.85%29.aspx"}, {"text": "NtQueryProcessInformation", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "ProcessInformationClass", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "ProcessBasicInformation", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "PROCESS_BASIC_INFORMATION", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "process execution block", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://msdn.microsoft.com/en-us/library/aa813706%28VS.85%29.aspx"}, {"text": "PebBaseAddress", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "ProcessParameters", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "RTL_USER_PROCESS_PARAMETERS", "tag": "a", "pos": -1, "childList": [{"text": "RTL_USER_PROCESS_PARAMETERS", "tag": "code"}], "childNum": 1, "href": "http://msdn.microsoft.com/en-us/library/aa813741%28VS.85%29.aspx"}, {"text": "RTL_USER_PROCESS_PARAMETERS", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "CommandLine", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "UNICODE_STRING", "tag": "a", "pos": -1, "childList": [{"text": "UNICODE_STRING", "tag": "code"}], "childNum": 1, "href": "http://msdn.microsoft.com/en-us/library/aa492030.aspx"}, {"text": "UNICODE_STRING", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["I haven't tried this approach--and as I mentioned above, it seems a bit... iffy (read: non-portable)--but it might be worth a try.", "Best of luck..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["By using psutil ( http://code.google.com/p/psutil/ ):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.google.com/p/psutil/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/psutil/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import psutil, os\n&gt;&gt;&gt; psutil.Process(os.getpid()).cmdline\n['C:\\\\Python26\\\\python.exe', '-O']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you aren't the parent of these processes, then this is not possible using documented functions :(  Now, if you're the parent, you can do your CreateRemoteThread trick, but otherwise you will almost certainly get Access Denied unless your app has admin rights."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]