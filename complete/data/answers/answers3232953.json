[[{"text": ["Strings in Python are immutable (meaning that their data cannot be modified) so the replace method doesn't modify the string - it returns a new string.", "You could fix your code as follows:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in hello:\n    j = i.replace(' ','')\n    k.append(j)\n</code>\n</pre>\n", "senID": 1}, {"text": ["However a better way to achieve your aim is to use a list comprehension.", "For example the following code removes leading and  trailing spaces from every string in the list using strip:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "strip", "tag": "a", "pos": 1, "childList": [{"text": "strip", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#str.strip"}, {"text": "strip", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n hello = [x.strip(' ') for x in hello]\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n hello = ['999 ', '666 ']\nresult = map(lambda x: x.strip(), hello)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["String methods return the modified string."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n k = [x.replace(' ', '') for x in hello]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["List comprehension [num.strip() for num in hello] is the fastest."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[num.strip() for num in hello]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import timeit\n&gt;&gt;&gt; hello = ['999 ',' 666 ']\n\n&gt;&gt;&gt; t1 = lambda: map(str.strip, hello)\n&gt;&gt;&gt; timeit.timeit(t1)\n1.825870468015296\n\n&gt;&gt;&gt; t2 = lambda: list(map(str.strip, hello))\n&gt;&gt;&gt; timeit.timeit(t2)\n2.2825958750515269\n\n&gt;&gt;&gt; t3 = lambda: [num.strip() for num in hello]\n&gt;&gt;&gt; timeit.timeit(t3)\n1.4320335103944899\n\n&gt;&gt;&gt; t4 = lambda: [num.replace(' ', '') for num in hello]\n&gt;&gt;&gt; timeit.timeit(t4)\n1.7670568718943969\n</code>\n</pre>\n", "senID": 1}], [{"text": ["replace() does not operate in-place, you need to assign its result to something.", "Also, for a more concise syntax, you could supplant your for loop with a one-liner: hello_no_spaces = map(lambda x: x.replace(' ', ''), hello)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "hello_no_spaces = map(lambda x: x.replace(' ', ''), hello)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Presuming that you don't want to remove internal spaces:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def normalize_space(s):\n    \"\"\"Return s stripped of leading/trailing whitespace\n    and with internal runs of whitespace replaced by a single SPACE\"\"\"\n    # This should be a str method :-(\n    return ' '.join(s.split())\n\nreplacement = [normalize_space(i) for i in hello]\n</code>\n</pre>\n", "senID": 1}]]