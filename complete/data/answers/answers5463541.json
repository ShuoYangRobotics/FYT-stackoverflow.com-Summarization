[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; str(60.27).translate(None, '.')\n'6027'\n</code>\n</pre>\n", "senID": 0}, {"text": ["Use lstrip('0') to guard against decimals below 1."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "lstrip('0')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["From the docs:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "From the docs:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Floating point representations have that issue."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Are you looking to change:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n 1.2345\n12.345\n123.45\n1234.5\n</code>\n</pre>\n", "senID": 2}, {"text": ["all to 12345?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["For floats which have no exact representation (you mention 6024.70), do you expect to get 6024700000000001, since that's the output of the closest thing to 6024.70 which can be stored in float?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["It would be more reliable an algorithm to just parse the number as a string and do a string manipulation.", "Any numerical calculation involving floating-point numbers are bound to inaccuracy, as you've witnessed.", "There's no going around that."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Since you can't (reliably) use floating point to do what you want, an easy hack is to convert the number to a string then rip out the decimal point:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n int(str(num).replace('.',''))\n</code>\n</pre>\n", "senID": 1}, {"text": ["That will work with any number that isn't represented in scientific notation.", "If your numbers are big (or small) enough that they do end up represented in scientific notation, have a look at this."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/658763/how-do-i-suppress-scientific-notation-in-python"}]}], [{"text": ["You could try something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n x = 60.27\nnewx = int(str(x).replace('.',''))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: as a side note, the string .replace and .translate have similar performance for various sized floats"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": ".replace", "childNum": 0, "tag": "code", "childList": []}, {"text": ".translate", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n %timeit int(str(4.73285).replace('.',''))\n100000 loops, best of 3: 2.65 us per loop\n\n%timeit int(str(4.73285).translate(None, '.'))\n100000 loops, best of 3: 3.02 us per loop\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Just taking a wild stab in the dark here, but do your numbers represent amounts of money that you're trying to convert between (say) dollars and cents?", "If so, you need to stop what you are doing and convert everything to cents, and only use \"dollar\" values when actually presenting things to the user.", "Using floating point numbers for money values is a very, very bad idea."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "everything", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["If not, ignore me :-)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]