[[{"text": ["The problem is that the conversion is ambiguous, because + means both string concatenation and numeric addition.", "The following question would be equally valid:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "+", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "string concatenation", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "numeric addition", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["This is exactly the loose-typing problem that unfortunately afflicts Javascript."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["There's a very large degree of ambiguity with such operations.", "Suppose that case instead:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = '4'\nb = 1\nprint(a + b)\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's not clear if a should be coerced to an integer (resulting in 5), or if b should be coerced to a string (resulting in '41').", "Since type juggling rules are transitive, passing a numeric string to a function expecting numbers could get you in trouble, especially since almost all arithmetic operators have overloaded operations for strings too."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "5", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "'41'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For instance, in Javascript, to make sure you deal with integers and not strings, a common practice is to multiply a variable by one; in Python, the multiplication operator repeats strings, so '41' * 1 is a no-op.", "It's probably better to just ask the developer to clarify."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "'41' * 1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Python would have to know what's in the string to do it correctly.", "There's an ambiguous case: what should '5' + 5 generate?", "A number or a string?", "That should certainly throw an error.", "Now to determine whether that situation holds, python would have to examine the string to tell.", "Should it do that every time you try to concatenate or add two things?", "Better to just let the programmer convert the string explicitly."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "'5' + 5", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["More generally, implicit conversions like that are just plain confusing!", "They're hard to predict, hard to read, and hard to debug."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The other answers have provided pretty good explanations, but have failed to mention that this feature is known a Strong Typing.", "Languages that perform implicit conversions are Weakly Typed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The short answer would be because Python is a strongly typed language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This was a design decision made by Guido.", "It could have been one way or another really, concatenating str and int to str or int."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "str", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "int", "childNum": 0, "tag": "em", "childList": []}, {"text": "str", "childNum": 0, "tag": "em", "childList": []}, {"text": "int", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["The best explanation, is still the one given by guido, you can check it here"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.artima.com/intv/strongweakP.html"}]}], [{"text": ["Because Python does not perform type conversion when concatenating strings.", "This behavior is by design, and you should get in the habit of performing explicit type conversions when you need to coerce objects into strings or numbers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Change your code to:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a = 'abc'\nb = 1\nprint(a + str(b))\n</code>\n</pre>\n", "senID": 2}, {"text": ["And you'll see the desired result."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["That's just how they decided to design the language.", "Probably the rationale is that requiring explicit conversions to string reduces the likelihood of unintended behavior (e.g.", "integer addition if both operands happen to be ints instead of strings)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]