[[{"text": ["No, you just can't reassign some_var in a local scope.", "Consider the following:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "some_var", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n some_var = {}\ndef some_func():\n    # some_var[5] = 6\n    some_var = {1:2}\n    some_var[3] = 4\nsome_func()\nprint (repr(some_var)) # {}\n</code>\n</pre>\n", "senID": 1}, {"text": ["You'll see the assignment in some_func actually creates a local variable which shadows the global one.", "Therefore, uncommenting the line would result in an UnboundLocalError - you can't access variables before they're defined."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "some_func", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "UnboundLocalError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["There's a difference between using (e.g.", "calling or using in an expression) a name from an outer scope and assigning it (and there's a difference between assigning a bare variable and assigning a member of an object pointed to by a variable - x.y = ... and x[...] = ... count as method calls!", ")."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "x.y = ...", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "x[...] = ...", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["You only need to declare that a variable is from an outer scope if you're re-assigning it.", "In Python 2, you can only do that with global variables (via global var), in Python 3 you can do it for abritarily nested scopes (e.g.", "closures) using nonlocal var."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "global var", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "nonlocal var", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Using a nonlocal variable as in you example doesn't require global.", "It does, however, as soon as you assign the variable (with the aforementioned definition of assignment) anywhere within that scope - so add a line some_var = ... after the line where you're using it and you'll get an UnboundLocalError.", "Refer to the documentation for the nitty gritty details."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "some_var = ...", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "UnboundLocalError", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["You only have to use global if you want to assign a new value to that variable."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "global", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Nested scopewas introduced in Python 2.1 (and enabled by default in Python 2.2) (emphasis mine):"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "Nested scopewas introduced in Python 2.1", "tag": "a", "pos": 0, "childList": [{"text": "Nested scope", "tag": "em"}], "childNum": 1, "href": "http://www.amk.ca/python/2.1/index.html#SECTION000300000000000000000"}, {"text": "Nested scope", "childNum": 0, "tag": "em", "childList": []}, {"href": "http://docs.python.org/release/2.2.3/whatsnew/node9.html", "text": "enabled by default in Python 2.2", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["It depends on the usage of the variable in the function\nPython variable scope question"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python variable scope question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/370357/python-variable-scope-question"}]}], [{"text": ["You only need to useglobalif you intend to assign to the variable, for reading the variable this is not necessary.", "This difference is not arbitrary, though it may seem like it at first glance."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "You only need to useglobalif you intend to assign to the variable, for reading the variable this is not necessary", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "global", "tag": "code"}]}, {"text": "global", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["When reading a value the interpreter can just look for a local variable named some_var, if it cannot find it then it looks for a global variable of that name.", "These are simple and straight forward semantics."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "some_var", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["When assigning values to a variable the interpreter needs to know whether you intend to assign to a local variable some_var or a global variable.", "The interpreter assumes thatsome_var = 2when called within a function is assigning to a local variable, this makes sense since this is the most common case.", "For the relatively rare times when you want to assign to a global variable from within a function then you use the global modifier global some_var = 2."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "some_var", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "The interpreter assumes thatsome_var = 2when called within a function is assigning to a local variable, this makes sense since this is the most common case", "childNum": 1, "tag": "strong", "pos": 1, "childList": [{"text": "some_var = 2", "tag": "code"}]}, {"text": "some_var = 2", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "global some_var = 2", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Assigning a value to a name makes the name local, unless the name is explicitly declared global."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = 12\n\ndef foo():\n   a = 42\n   print a   # uses local\n\nfoo()\n&gt;&gt;&gt; 42\n\ndef foo():\n   global a\n   a = 42\n\nfoo()\nprint a\n&gt;&gt;&gt; 42\n</code>\n</pre>\n", "senID": 1}, {"text": ["If a name is not assigned to, it is global."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n a = 12\n\ndef foo():\n   print a   # uses global\n\nfoo()\n&gt;&gt;&gt; 12\n</code>\n</pre>\n", "senID": 3}, {"text": ["In short, you only have to explicitly declare a name global if you will be assigning to it.", "If you are just reading from it, you can use it at will.", "However, if you ever assign to the variable, it will be considered local in that function unless you declared it global."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n b = 5\n\ndef foo():\n   print b\n   b = 7\n\nfoo()\n&gt;&gt;&gt; ???\n</code>\n</pre>\n", "senID": 5}, {"text": ["Since b is assigned to in foo() and not declared global, Python decides at compile time that b is a local name.", "Therefore b is a local name throughout the whole function, including at the print statement before the assignment."], "childNum": 9, "tag": "p", "senID": 6, "childList": [{"text": "b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "foo()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "at compile time", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "throughout the whole function,", "childNum": 0, "tag": "em", "childList": []}, {"text": "including", "childNum": 0, "tag": "strong", "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "childList": []}, {"text": "before the assignment.", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Therefore the print statement gives you an error, because the local name b has not been defined!"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}]}]]