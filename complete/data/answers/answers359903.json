[[{"text": ["Use list.count to get the number of items in a list that match a value.", "If that number doesn't match the number of items, you know they aren't all the same."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if a.count( \"foo\" ) != len(a)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which would look like..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if a.count( a[0] ) != len(a)\n</code>\n</pre>\n", "senID": 3}, {"text": ["...in production code."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Perhaps"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n all(a[0] == x for x in a)\n</code>\n</pre>\n", "senID": 1}, {"text": ["is the most readable way."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["FYI.", "5000 iterations of both matching and unmatching versions of a test on different sizes of the input list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n List Size 10\n0.00530 aList.count(aList[0] ) == len(aList)\n0.00699 for with return False if no match found.\n0.00892 aList == [aList[0]] * len(aList)\n0.00974 len(set(aList)) == 1\n0.02334 all(aList[0] == x for x in aList)\n0.02693 reduce(lambda x,y:x==y and x,aList)\n\nList Size 100\n0.01547 aList.count(aList[0] ) == len(aList)\n0.01623 aList == [aList[0]] * len(aList)\n0.03525 for with return False if no match found.\n0.05122 len(set(aList)) == 1\n0.08079 all(aList[0] == x for x in aList)\n0.22797 reduce(lambda x,y:x==y and x,aList)\n\nList Size 1000\n0.09198 aList == [aList[0]] * len(aList)\n0.11862 aList.count(aList[0] ) == len(aList)\n0.31874 for with return False if no match found.\n0.36145 len(set(aList)) == 1\n0.65861 all(aList[0] == x for x in aList)\n2.24386 reduce(lambda x,y:x==y and x,aList)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Clear winners and losers.", "count rules."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Here's the quickExit version that runs pretty quickly, but isn't a one-liner."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def quickExit( aList ):\n    \"\"\"for with return False if no match found.\"\"\"\n    value= aList[0]\n    for x in aList:\n        if x != value: return False\n    return True\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Try creating a set from that list:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if len(set(my_list)) != 1:\n    return False\n</code>\n</pre>\n", "senID": 1}, {"text": ["Sets can't have duplicate items."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT: S.Lott's suggestion is cleaner:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n all_items_are_same = len(set(my_list)) == 1\n</code>\n</pre>\n", "senID": 4}, {"text": ["Think of it like this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n # Equality returns True or False\nall_items_are_same = (len(set(my_list)) == 1)\n</code>\n</pre>\n", "senID": 6}], [{"text": ["No matter what function you use you have to iterate over the entire array at least once.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So just use a for loop and compare the first value to each subsequent value.", "Nothing else could be faster, and it'll be three lines.", "Anything that does it in less lines will probably be more computationally complex actually."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["try (if the lists are not too long):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n b == [b[0]] * len(b) #valid\na == [a[0]] * len(a) #not valid\n</code>\n</pre>\n", "senID": 1}, {"text": ["this lets you compare the list to a list of the same size that is all of the same first element"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I think that this should be something you do with a reduce function..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = ['foo', 'foo', 'boo'] #not valid\n&gt;&gt;&gt; b = ['foo', 'foo', 'foo'] #valid\n&gt;&gt;&gt; reduce(lambda x,y:x==y and x,a)\nFalse\n&gt;&gt;&gt; reduce(lambda x,y:x==y and x,b)\n'foo'\n</code>\n</pre>\n", "senID": 1}, {"text": ["I'm not sure if this has any advantages over the turning it into a set solution, though.", "It fails if you want to test if every value in the array is False."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]