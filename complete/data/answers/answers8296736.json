[[{"text": ["Use itertools.cycle:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools.cycle", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import itertools\nimport string\nletters = itertools.cycle(string.lowercase)\n</code>\n</pre>\n", "senID": 1}, {"text": ["With this, letters is an infinite sequence of letters, running from a to z repeatedly.", "You can use this in a while loop by calling letters.next() or in a for loop by imposing a termination condition in some fashion, e.g., itertools.islice."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "letters", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "letters.next()", "childNum": 0, "tag": "code", "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}, {"text": "itertools.islice", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can put this together into a function:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def cyclic_letters(start='a'):\n    i = string.lowercase.index(start)\n    letts = string.lowercase[i:] + string.lowercase[:i]\n    return itertools.cycle(letts)\n</code>\n</pre>\n", "senID": 4}, {"text": ["The cyclic_letters function also allows the initial letter in the sequence to be selected, defaulting to 'a'. "], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "cyclic_letters", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'a'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Alternatively, you could use a dictionary that shows the next letter for any given letter.", "You can create a dictionary for that, such as by:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n letter_map = dict(zip(string.lowercase, string.lowercase[1:] + string.lowercase[0]))\n</code>\n</pre>\n", "senID": 7}, {"text": ["This is just a dictionary, so using, e.g., letter_map['c'] will produce 'd'. "], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "letter_map['c']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'d'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["In the above, string.lowercase is just a string containing the lowercase letters.", "The value will depend on your locale.", "If you only want 'abcdefghijklmnopqrstuvwxyz', regardless of locale, you can substitute string.ascii_lowercase or just give the explicit string. "], "childNum": 3, "tag": "p", "senID": 9, "childList": [{"text": "string.lowercase", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'abcdefghijklmnopqrstuvwxyz'", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "string.ascii_lowercase", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Try something like"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n chr(x + ord(\"a\"))\n</code>\n</pre>\n", "senID": 1}, {"text": ["where x is an integer in the range 0 to 25."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["ord() returns the ASCII code of a character, and chr() turns an ASCII code into a character again.", "In ASCII, the lower case letters all appear consecutively (in contrast to EBCDIC for those who still remember)."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "ord()", "tag": "a", "pos": 0, "childList": [{"text": "ord()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#ord"}, {"text": "ord()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "chr()", "tag": "a", "pos": -1, "childList": [{"text": "chr()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#chr"}, {"text": "chr()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"code": "<pre>\n<code>\n idx = 0\nwhile condition:\n    lett = chr(idx + ord('a'))\n    idx += 1\n    if idx == 26:\n        idx = 0\n</code>\n</pre>\n", "senID": 0}, {"text": ["See ord, chr"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "ord", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#ord"}, {"href": "http://docs.python.org/library/functions.html#chr", "text": "chr", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Depending on what you're doing, you might be interested in string.lowercase and it's cousins."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "string.lowercase", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; for let in string.lowercase:\n...    print let\n...\na\nb\nc\n(etc)\n</code>\n</pre>\n", "senID": 1}, {"text": ["See the documentation for more details."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "the documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#string-constants"}]}], [{"text": ["The ASCII codes for letters are consecutive.", "So 65 = 'A', 66 = 'B' and so on - ASCII table you could use a normal loop."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ASCII table", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.asciitable.com/"}]}, {"text": ["Start at 97 (lower case 'a') and loop using normal incrementing and then convert the loop counter to it's equivalent character for output."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Another way to do it, "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def NextLett(l,h):\n    letters=[chr(i) for i in xrange(ord(l),ord(h)+1)]\n    nextLet=1\n    while True:\n        yield letters[nextLet]\n        nextLet=(nextLet+1)%(ord(h)-ord(l)+1)\n\nn=NextLett('a','z')\n</code>\n</pre>\n", "senID": 1}, {"text": ["so every-time you call n.next(), it will give you the next Letter in sequence in a cyclic manner"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The concept is"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]