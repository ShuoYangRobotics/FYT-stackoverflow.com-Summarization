[[{"text": ["Antlr is what you should look at http://www.antlr.org "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.antlr.org", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.antlr.org"}]}, {"text": ["Take a look at this http://www.antlr.org/wiki/display/ANTLR3/Antlr3PythonTarget"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.antlr.org/wiki/display/ANTLR3/Antlr3PythonTarget", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.antlr.org/wiki/display/ANTLR3/Antlr3PythonTarget"}]}], [{"text": ["I really like pyPEG.", "It's error reporting isn't very friendly, but it can add source code locations to the AST."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pyPEG", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://fdik.org/pyPEG/"}]}, {"text": ["pyPEG doesn't have a separate lexer, which would make parsing Python itself hard (I think CPython recognises indent and dedent in the lexer), but I've used pyPEG to build a parser for subset of C# with surprisingly little work."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["An example adapted from fdik.org/pyPEG/: A simple language like this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "fdik.org/pyPEG/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://fdik.org/pyPEG/"}]}, {"code": "<pre>\n<code>\n function fak(n) {\n    if (n==0) { // 0! is 1 by definition\n        return 1;\n    } else {\n        return n * fak(n - 1);\n    };\n}\n</code>\n</pre>\n", "senID": 3}, {"text": ["A pyPEG parser for that language:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def comment():          return [re.compile(r\"//.*\"),\n                                re.compile(\"/\\*.*?\\*/\", re.S)]\ndef literal():          return re.compile(r'\\d*\\.\\d*|\\d+|\".*?\"')\ndef symbol():           return re.compile(r\"\\w+\")\ndef operator():         return re.compile(r\"\\+|\\-|\\*|\\/|\\=\\=\")\ndef operation():        return symbol, operator, [literal, functioncall]\ndef expression():       return [literal, operation, functioncall]\ndef expressionlist():   return expression, -1, (\",\", expression)\ndef returnstatement():  return keyword(\"return\"), expression\ndef ifstatement():      return (keyword(\"if\"), \"(\", expression, \")\", block,\n                                keyword(\"else\"), block)\ndef statement():        return [ifstatement, returnstatement], \";\"\ndef block():            return \"{\", -2, statement, \"}\"\ndef parameterlist():    return \"(\", symbol, -1, (\",\", symbol), \")\"\ndef functioncall():     return symbol, \"(\", expressionlist, \")\"\ndef function():         return keyword(\"function\"), symbol, parameterlist, block\ndef simpleLanguage():   return function\n</code>\n</pre>\n", "senID": 5}], [{"text": ["If you're evaluating PyParsing, I think you should look at funcparserlib: http://pypi.python.org/pypi/funcparserlib"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://pypi.python.org/pypi/funcparserlib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/funcparserlib"}]}, {"text": ["It's a bit similar, but in my experience resulting code is much cleaner."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["For a more complicated parser I would use pyparsing.", "Pyparsing"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Pyparsing", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://pyparsing.wikispaces.com/"}]}, {"text": ["Here is the parsed example from there home page"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from pyparsing import Word, alphas\ngreet = Word( alphas ) + \",\" + Word( alphas ) + \"!\" # &lt;-- grammar defined here\nhello = \"Hello, World!\"\nprint hello, \"-&gt;\", greet.parseString( hello )\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Antlr generates LL(*) parsers.", "That can be good, but sometimes removing all left recursion can be cumbersome."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you are LALR(1)-savvy, you can use PyBison.", "It has similar syntax to Yacc, if you know what it is.", "Plus, there are a lot of people out there that know how yacc works."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "PyBison", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.freenet.org.nz/python/pybison/"}]}], [{"text": ["Ned Batchelder did a survey of python parsing tools, which apparently he keeps updated (last updated July 2010):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://nedbatchelder.com/text/python-parsers.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://nedbatchelder.com/text/python-parsers.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nedbatchelder.com/text/python-parsers.html"}]}, {"text": ["If I was going to need a parser today, I would either roll my own recursive descent parser, or possibly use PLY or LEPL -- depending on my needs and whether or not I was willing to introduce an external dependency.", "I wouldn't personally use PyParsing for anything very complicated."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "PLY", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/ply/"}, {"text": "LEPL", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.acooke.org/lepl/"}]}], [{"text": ["for the error reporting: did you detect, that pyPEG has a tracing facility?", "Just set pyPEG.print_trace = True, and pyPEG will give you a full trace of what's happening inside."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Yours,\nVolker Birk\n(author of pyPEG)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["For simple task I tend to use the shlex module."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "simple", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/shlex.html?highlight=shlex#module-shlex", "text": "shlex", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["See http://wiki.python.org/moin/LanguageParsing for evaluation of language parsing in python."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://wiki.python.org/moin/LanguageParsing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/LanguageParsing"}]}]]