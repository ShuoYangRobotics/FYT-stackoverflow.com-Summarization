[[{"text": ["You can grab code for the Lua compiler from lua.org, they distribute full source, and you could also get GCC's source code, which is both C and C++ compiling."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There is a bunch of simple and comprehendable compilers:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": ["http://spivey.oriel.ox.ac.uk/corner/Oxford_Oberon-2_compiler"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["http://caml.inria.fr/caml-light/index.en.html"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["http://bellard.org/tcc/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://bellard.org/tcc/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bellard.org/tcc/"}]}, {"text": ["http://cil.sourceforge.net/"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["http://scottmcpeak.com/elkhound/"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}, {"text": ["UPDATE:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "UPDATE:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Probably the most impressive one:\n - http://community.schemewiki.org/?90min-scheme2c"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "http://community.schemewiki.org/?90min-scheme2c", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://community.schemewiki.org/?90min-scheme2c"}]}], [{"text": ["The Python parser documentation.", "The source is part of your Python distribution.", "Install Python and you'll have the module's source."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/library/parser.html#module-parser"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/parser.html#module-parser", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/parser.html#module-parser"}]}, {"text": ["The older Compiler package."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://docs.python.org/library/compiler.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://docs.python.org/library/compiler.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/compiler.html"}]}], [{"tag": "ul", "num": 3, "lis": [{"text": "C/C++: ", "tag": "none", "senID": 0}, {"text": "Python: ", "tag": "none", "senID": 1}, {"text": "Java: If you just care about the bytecode compiler, look at e.g., ", "tag": "none", "senID": 2}]}, {"text": ["That said, real compilers can be quite complex; building a toy compiler may be easier to understand.", "That said, TCC would likely be the best starting point out of this group, as it's small enough to easily understand."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Your course on compilers should be giving you the pieces that will eventually lead to a full blown compiler.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, the section on lexical analysis can lead to a component called the Lexer.", "If you keep an eye open to generics and re-usability, you can turn this into a component that can be used later in your compiler."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I highly suggest you take the approach of having at least two components in every homework project:  main and the library component.", "In the example of lexical analysis, the main component would handle input and testing.", "The library component would be the lexer.", "This technique will help greatly after you graduate and develop huge applications in the real world. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "main", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "main", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I would definitely look into The LLVM Compiler Infrastructure.", "It is not a compiler by itself, but rather core tools for writing compilers, interpreters and virtual machines.", "Clang is a C/C++ compiler built on this framework."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "The LLVM Compiler Infrastructure", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://llvm.org/"}]}, {"text": ["Just note that implementing compiler theory directly will yield a very naive compiler.", "Most compilers extend that theory with many years of advanced research on parsing techniques, optimizations and code generation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you can, look into smaller projects, limited to a single architecture (i.e.", "some RISC computer) and a single language.", "Once you've progressed through that, look into bigger compiler suites which support multiple languages on the front-end and multiple architectures on the back-end."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]