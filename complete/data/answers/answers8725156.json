[[{"text": ["At first, I thought you could just use in:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if \"0\" in myString:\n  print \"%s contains 0\" % myString\n</code>\n</pre>\n", "senID": 1}, {"text": ["However, this doesn't seem to be what you want to do, when re-reading your question.", "This will detect the 0 in a row such as:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "0", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n abc: 200\n</code>\n</pre>\n", "senID": 3}, {"text": ["Which I guess you don't want to do.", "You need to use something a bit more sophisticated.", "I would probably go with some simple manual code, rather than using regular expressions as suggested in a different answer.", "Here's how:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def is_row_zero(row):\n  parts = row.split(\":\")\n  value = parts[1].strip()\n  if value == \"0\":\n    print \"%s is 0, not allowed\" % parts[0]\n    return True\n  return False\n</code>\n</pre>\n", "senID": 5}, {"text": ["It's possible the regular expression approach is faster, so that might be worth investigating depending on your workload and performance goals."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Use regular expressions to find a pattern:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall('\\W(0)\\W', 'alsdkjf 0 asdkfs0asdf   0   ')\n['0', '0']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Where \\W(0)\\W matches zero surrounded by non-alphanumeric characters ('\\W')."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\\W(0)\\W", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Your example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall('\\W(0)\\W', 'abc : 1234 def : 1230 ')\n[]\n&gt;&gt;&gt; re.findall('\\W(0)\\W', 'abc : 1234 def : 0 ')\n['0']\n</code>\n</pre>\n", "senID": 4}], [{"text": ["There are many ways to find this in Python..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if \" 0 \" in [string variable]:\n    do something...\n</code>\n</pre>\n", "senID": 1}, {"text": ["is one option, You could turn the \" 0 \" into a variable to make it more generic."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Regular expressions might be preferable, perhaps.", "But is overkill really."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If I read your question correctly, the input is a text file like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n label : value\nlabel : value\n...\n</code>\n</pre>\n", "senID": 1}, {"text": ["I suggest you read the file line by line and use either regular expressions:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n for line in open(\"filename.txt\"):\n    if re.match(r\"\\S+ : 0$\", line):\n        print \"The row's value is zero\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or use .endswith:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": ".endswith", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for line in open(\"filename.txt\"):\n    if line.endswith(\" 0\"):\n         print \"The row's value is zero\"\n</code>\n</pre>\n", "senID": 5}], [{"text": ["If what you're looking for is just \"0\", then:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string == '0'\n</code>\n</pre>\n", "senID": 1}, {"text": ["If there may be whitespace around:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "may", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n string.strip() == '0'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Your question isn't exactly clear, did you want a zero only if it's not part of a number?", "You could check all 0's in the string, and see if its adjacent characters are digits."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["something such as:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def has_zero(s):\n    if \"0\" not in s:\n        return False\n    if s==\"0\":\n        return True\n    if s[0]==\"0\" and not s[1].isdigit():\n        return True\n    if s[-1]==\"0\" and not s[-2].isdigit():\n        return True\n    return any(s[i]==\"0\" and not (s[i-1].isdigit() or s[i+1].isdigit()) for i in range(1,len(s)-1))\n\nprint has_zero(\"hell0 w0rld\")\n#True\nprint has_zero(\"my number is 2560\")\n#False\nprint has_zero(\"try put a zer0 in here with number 100\")\n#True\nprint has_zero(\"0\")\nprint has_zero(\"10\")\nprint has_zero(\"01\")\nprint has_zero(\"a0\")\nprint has_zero(\"0a\")\nprint has_zero(\"00\")\n</code>\n</pre>\n", "senID": 2}]]