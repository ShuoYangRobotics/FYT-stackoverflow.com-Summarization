[[{"text": ["There isn't one, since Python is strongly typed."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "strongly typed", "tag": "a", "pos": 0, "childList": [{"text": "strongly typed", "tag": "strong"}], "childNum": 1, "href": "http://en.wikipedia.org/wiki/Strong_typing"}, {"text": "strongly typed", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n print '%d + 1 = %d' % (cnt, cnt + 1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["For Python 2.6+, the format method is the preferred way to build up strings containing other values:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "format", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n '{0} + 1 = {1}'.format(cnt, cnt + 1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You had it nearly right; you just need to tell Python exactly when to make something a string."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; cnt = 0\n&gt;&gt;&gt; while cnt &lt; 10:\n...     cnt += 1\n...     print str(cnt) + \" + 1 = \" + str(cnt + 1)\n... \n1 + 1 = 2\n2 + 1 = 3\n3 + 1 = 4\n4 + 1 = 5\n5 + 1 = 6\n6 + 1 = 7\n7 + 1 = 8\n8 + 1 = 9\n9 + 1 = 10\n10 + 1 = 11\n</code>\n</pre>\n", "senID": 1}, {"text": ["Strictly speaking, you aren't treating cnt as both an integer and a string here -- it's always an integer."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "cnt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n print str(cnt) + \" + 1 = \" + str(cnt + 1)\n</code>\n</pre>\n", "senID": 0}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print \"%d + 1 = %d\" % (cnt, cnt+1)\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n cnt = 0\n\nwhile cnt &lt; 10:\n    print str(cnt) + \" + 1 = \" + str(cnt + 1)\n    cnt = cnt + 1\n</code>\n</pre>\n", "senID": 0}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for cnt in range(10):\n    print str(cnt) + \" + 1 = \" + str(cnt + 1)\n</code>\n</pre>\n", "senID": 2}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n for cnt in range(10):\n    print \"%d + 1 = %d\".format(cnt, cnt + 1)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You can print ints as well as strings.", "You may be confused by some of the answers if you know that it is quite possible to write print cnt on its own, without explicitly putting it into a string."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "print cnt", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The string formatting language is useful and powerful and something you do need to know about.", "But it's perfectly fine to write"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print cnt, \"+ 1 =\", cnt + 1\n</code>\n</pre>\n", "senID": 2}, {"text": ["which is closer in spirit to what you asked.", "Python automatically adds spaces between the arguments, and a newline character at the end of the line (to suppress this, add another comma at the end)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]