[[{"text": ["I think when you are beginning programming, it's useful to see some examples; and I assume you've tried this problem on your own first!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is a break-down of how you could approach this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n contents='0.259515E+03 0.235095E+03 0.208262E+03 0.230223E+03 0.267333E+03 0.217889E+03 0.156233E+03 0.144876E+03 0.136187E+03 0.137865E+00'\n</code>\n</pre>\n", "senID": 2}, {"text": ["The split method works on strings.", "It returns a list of strings.", "By default, it splits on whitespace:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "split method", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#str.split"}]}, {"code": "<pre>\n<code>\n string_numbers=contents.split()\nprint(string_numbers)\n# ['0.259515E+03', '0.235095E+03', '0.208262E+03', '0.230223E+03', '0.267333E+03', '0.217889E+03', '0.156233E+03', '0.144876E+03', '0.136187E+03', '0.137865E+00']\n</code>\n</pre>\n", "senID": 4}, {"text": ["The map command applies its first argument (the function float) to each of the elements of its second argument (the list string_numbers).", "The float function converts each string into a floating-point object."], "childNum": 4, "tag": "p", "senID": 5, "childList": [{"text": "map command", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#map"}, {"text": "float", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "string_numbers", "childNum": 0, "tag": "code", "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n float_numbers=map(float,string_numbers)\nprint(float_numbers)\n# [259.51499999999999, 235.095, 208.262, 230.22300000000001, 267.33300000000003, 217.88900000000001, 156.233, 144.876, 136.18700000000001, 0.13786499999999999]\n</code>\n</pre>\n", "senID": 6}, {"text": ["You can use a list comprehension to process the list, converting numbers less than 1 into the number 1.", "The conditional expression (1 if num&lt;1 else num) equals 1 when num is less than 1, otherwise, it equals num."], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "list comprehension", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}, {"text": "conditional expression", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0308/"}, {"text": "(1 if num&lt;1 else num)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n processed_numbers=[(1 if num&lt;1 else num) for num in float_numbers]\nprint(processed_numbers)\n# [259.51499999999999, 235.095, 208.262, 230.22300000000001, 267.33300000000003, 217.88900000000001, 156.233, 144.876, 136.18700000000001, 1]\n</code>\n</pre>\n", "senID": 8}, {"text": ["This is the same thing, all in one line:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n processed_numbers=[(1 if num&lt;1 else num) for num in map(float,contents.split())]\n</code>\n</pre>\n", "senID": 10}, {"text": ["To generate a string out of the elements of processed_numbers, you could use the str.joinmethod:"], "childNum": 3, "tag": "p", "senID": 11, "childList": [{"text": "processed_numbers", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/stdtypes.html#str.join", "text": "str.joinmethod", "childNum": 1, "tag": "a", "childList": [{"text": "str.join", "tag": "code"}]}, {"text": "str.join", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n comma_separated_string=', '.join(map(str,processed_numbers))\n# '259.515, 235.095, 208.262, 230.223, 267.333, 217.889, 156.233, 144.876, 136.187, 1'\n</code>\n</pre>\n", "senID": 12}], [{"text": ["typical technique would be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 6, "lis": [{"text": "read file line by line", "tag": "none", "senID": 1}, {"text": "split each line into a list of strings", "tag": "none", "senID": 2}, {"text": "convert each string to the float", "tag": "none", "senID": 3}, {"text": "compare converted value with 1", "tag": "none", "senID": 4}, {"text": "replace when needed", "tag": "none", "senID": 5}, {"text": "write back to the new file", "tag": "none", "senID": 6}]}, {"text": ["As I don't see you having any code yet, I hope that this would be a good start"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"code": "<pre>\n<code>\n def float_filter(input):\n    for number in input.split():\n        if float(number) &lt; 1.0:\n            yield \"0.100000E+01\"\n        else:\n            yield number\n\ninput = \"0.259515E+03 0.235095E+03 0.208262E+03 0.230223E+03 0.267333E+03 0.217889E+03 0.156233E+03 0.144876E+03 0.136187E+03 0.137865E+00\"\nprint \" \".join(float_filter(input))\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n import numpy as np\n\na = np.genfromtxt('file.txt')  # read file\na[a&lt;1] = 0.1                   # replace\nnp.savetxt('converted.txt', a) # save to file\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You could use regular expressions for parsing the string.", "I'm assuming here that the mantissa is never larger than 1 (ie, begins with 0).", "This means that for the number to be less than 1, the exponent must be either 0 or negative.", "The following regular expression matches '0', '.", "', unlimited number of decimal digits (at least 1), 'E' and either '+00' or '-' and two decimal digits."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n 0\\.\\d+E(-\\d\\d|\\+00)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Assuming that you have the file read into variable 'text', you can use the regexp with the following python code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n result = re.sub(r\"0\\.\\d*E(-\\d\\d|\\+00)\", \"0.100000E+01\", text)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit: Just realized that the description doesn't limit the valid range of input numbers to positive numbers.", "Negative numbers can be matched with the following regexp:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n -0\\.\\d+E[-+]\\d\\d\n</code>\n</pre>\n", "senID": 5}, {"text": ["This can be alternated with the first one using the (pattern1|pattern2) syntax which results in the following Python code:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n result = re.sub(r\"(0\\.\\d+E(-\\d\\d|\\+00)|-0\\.\\d+E[-+]\\d\\d)\", \"0.100000E+00\", subject)\n</code>\n</pre>\n", "senID": 7}, {"text": ["Also if there's a chance that the exponent goes past 99, the regexp can be further modified by adding a '+' sign after the '\\d\\d' patterns.", "This allows matching digits ending in two OR MORE digits."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["I've got the script working as I want now...thanks people.", "When writing the list to a new file I used the replace method to get rid of the brackets and commas - is there a simpler way?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ftext = open(\"C:\\\\Users\\\\hhp06\\\\Desktop\\\\out.grd\", \"r\")\notext = open(\"C:\\\\Users\\\\hhp06\\\\Desktop\\\\out2.grd\", \"w+\")\n\nfor line in ftext:\n    stringnum = line.split()\n    floatnum = map(float, stringnum)\n    procnum = [(1.0 if num&lt;1 else num) for num in floatnum]\n    stringproc = str(procnum)\n    s = (stringproc).replace(\",\", \" \").replace(\"[\", \"  \").replace(\"]\", \"\")\n    otext.writelines(s + \"\\n\")\notext.close()\n</code>\n</pre>\n", "senID": 1}]]