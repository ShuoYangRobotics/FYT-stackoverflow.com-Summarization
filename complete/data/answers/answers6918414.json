[[{"text": ["A very underappreciated gem in the standard lib is difflib..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "difflib", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import difflib\n&gt;&gt;&gt; s = difflib.SequenceMatcher(None, \"GHSKWITNIFSI\", \"GHSKWAGDITNIFSI\")\n&gt;&gt;&gt; s.get_matching_blocks()[:-1]\n[(0, 0, 5), (5, 8, 7)]\n&gt;&gt;&gt; s = difflib.SequenceMatcher(None, \"GHSKWITNIFSI\", \"GHSKWITNIFSI\")\n&gt;&gt;&gt; s.get_matching_blocks()[:-1]\n[(0, 0, 12)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This ... feels kludgy to a degree, and it's only probably half-way there, but it seems like it found the substring in your example and could probably be expanded a bit.", "I can revise it some in a minute with some more time to test, but it's an approach concept:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s1 = 'GHSKWITNIFSI'\ns2 = 'GHSKWAGDITNIFSI'\n\nl = len(s2) - len(s1)\n\nfor i in range(len(s1)):\n if s2[0:i] + s2[i + l:] == s1:\n  print i\n  break\n</code>\n</pre>\n", "senID": 1}, {"text": ["I don't like the use of range(len()), but in this particular use scenario I think it's appropriate.", "It will print the index where an insertion took place if a single insertion will turn s1 into s2."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "range(len())", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I don't know, but you are trying to find the \"edit distance\".", "Checking Wikipedia:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://en.wikipedia.org/wiki/Edit_distance"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://en.wikipedia.org/wiki/Edit_distance", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Edit_distance"}]}, {"text": ["You might also look at Peter Norvig's spelling corrector:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://norvig.com/spell-correct.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://norvig.com/spell-correct.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://norvig.com/spell-correct.html"}]}, {"text": ["I think you could adapt code from the spelling corrector to do what you need."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Good luck."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n def GetInsertedString(StringA, StringB):\n    lenA = len(StringA)\n    lenB = len(StringB)\n    if lenA &gt; lenB:\n        return None, None\n    begincount = 0\n    while begincount &lt; lenA and StringA[begincount] == StringB[begincount]:\n        begincount += 1\n    endcount = 0\n    while endcount &lt; (lenA - begincount) and StringA[lenA-endcount-1] == StringB[lenB-endcount-1]:\n        endcount += 1\n    if begincount + endcount != lenA:\n        return None, None\n    return begincount, StringB[begincount:begincount+lenB-lenA]\n\n&gt;&gt;&gt; GetInsertedString('GHSKWITNIFSI', 'GHSKWAGDITNIFSI')\n(5, 'AGD')\n&gt;&gt;&gt; GetInsertedString('GHSKWITNIFSI', 'GHSKWAGDTNIFSI')\n(None, None)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n from itertools import dropwhile\n\ndef get_inserted_substring(s1, s2):\n    try:\n        # diff is the first index at which the strings differ\n        diff = dropwhile(lambda i: s1[i] == s2[i], xrange(len(s2))).next()\n        if s2[diff:].endswith(s1[diff:]):\n            return (diff, s2[diff:diff-len(s1)])\n    except (StopIteration, IndexError):\n        # the strings are the same or only differ at the end\n        if len(s1) &lt;= len(s2):\n            return (len(s1), s2[len(s1):])\n    return (None, None)\n</code>\n</pre>\n", "senID": 0}, {"text": ["And examples..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; get_inserted_substring('abcdef', 'abcXYZdef')\n(3, 'XYZ')\n&gt;&gt;&gt; get_inserted_substring('abcdef', 'abRSTcdXYZef')\n(None, None)\n&gt;&gt;&gt; get_inserted_substring('abcdef', 'abcdefXYZ')\n(6, 'XYZ')\n&gt;&gt;&gt; get_inserted_substring('abcdef', 'XYZabcdef')\n(0, 'XYZ')\n&gt;&gt;&gt; get_inserted_substring('abcdefXYZ', 'abcdef')\n(None, None)\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n strA='foor'\nstrB='foobar'\nstrC='ba'\n\nif strB.replace(strC,'') == strA:\n    print strC,' at index ',len(strB.split(strC)[0])\n</code>\n</pre>\n", "senID": 0}, {"text": ["Possibly?", "Testing right now..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]