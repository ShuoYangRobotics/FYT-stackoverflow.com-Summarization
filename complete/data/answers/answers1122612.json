[[{"text": ["I believe you are writing the hailstone sequence, although I could be wrong since I am not fluent in Lisp."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As far as I know, you can't do this in only a list comprehension, since each element depends on the last."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["How I would do it would be this"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def hailstone(n):\n    yield n\n    while n!=1\n        if n%2 == 0: # even\n            n = n / 2\n        else: # odd\n            n = 3 * n + 1\n        yield n\n\nlist = [ x for x in hailstone(input) ]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Of course, input would hold whatever your input was."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["My hailstone function could probably be more concise.", "My goal was clarity."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["A list comprehension is used to take an existing sequence and perform some function and/or filter to it, resulting in a new list.", "So, in this case a list comprehension is not appropriate since you don't have a starting sequence.", "An example with a while loop:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n numbers = []\nx=input()\nwhile x != 1:\n  numbers.append(x)\n  if x % 2 == 0: x /= 2\n  else: x = 3 * x + 1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Python doesn't have this kind of control structure built in, but you can generalize this into a function like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def unfold(evolve, initial, until):\n    state = initial\n    yield state\n    while not until(state):\n        state = evolve(state)\n        yield state\n</code>\n</pre>\n", "senID": 1}, {"text": ["After this your expression can be written as:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def is_even(n): return not n % 2\nunfold(lambda x: x/2 if is_even(x) else 3*x + 1,\n       initial=input, until=lambda x: x == 1)\n</code>\n</pre>\n", "senID": 3}, {"text": ["But the  Pythonic way to do it is using a generator function:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def produce(x):\n    yield x\n    while x != 1:\n        x = x / 2 if is_even(x) else 3*x + 1\n        yield x\n</code>\n</pre>\n", "senID": 5}], [{"text": ["The hackery referred to by Laurence:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can do it in one list comprehension, it just ends up being AWFUL python.", "Unreadable python.", "Terrible python.", "I only present the following as a curiosity, not as an actual answer.", "Don't do this in code you actually want to use, only if you fancy having a play with the inner workings on python. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["So, 3 approaches: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "hr", "senID": 3}, {"text": ["Helping List 1"], "childNum": 0, "tag": "h2", "senID": 4, "childList": []}, {"text": ["1: Using a helping list, answer ends up in the helping list.", "This appends values to the list being iterated over until you've reached the value you want to stop at."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n A = [10]\nprint [None if A[-1] == 1\n    else A.append(A[-1]/2) if (A[-1]%2==0) \n    else A.append(3*A[-1]+1) \n        for i in A]\nprint A\n</code>\n</pre>\n", "senID": 6}, {"text": ["result:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n [None, None, None, None, None, None, None]\n[10, 5, 16, 8, 4, 2, 1]\n</code>\n</pre>\n", "senID": 8}, {"tag": "hr", "senID": 9}, {"text": ["Helping List 2"], "childNum": 0, "tag": "h2", "senID": 10, "childList": []}, {"text": ["2: Using a helping list, but with the result being the output of the list comprehension.", "This mostly relies on list.append(...) returning None, not None evaluating as True and True being considered 1 for the purposes of arithmetic.", "Sigh."], "childNum": 6, "tag": "p", "senID": 11, "childList": [{"text": "list.append(...)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "not None", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n A=[10]\nprint [A[0]*(not A.append(A[0])) if len(A) == 1 \n    else 1 if A[-1] == 2 else (A[-1]/2)*(not A.append(A[-1]/2)) if (A[-1]%2==0) \n    else (3*A[-1]+1)*(not A.append(3*A[-1]+1)) \n        for i in A]\n</code>\n</pre>\n", "senID": 12}, {"text": ["result:"], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"code": "<pre>\n<code>\n [10, 5, 16, 8, 4, 2, 1]\n</code>\n</pre>\n", "senID": 14}, {"tag": "hr", "senID": 15}, {"text": ["Referencing the List Comprehension from within"], "childNum": 0, "tag": "h2", "senID": 16, "childList": []}, {"text": ["3: Not using a helping list, but referring back to the list comprehension as it's being built.", "This is a bit fragile, and probably wont work in all environments.", "If it doesn't work, try running the code on its own:"], "childNum": 0, "tag": "p", "senID": 17, "childList": []}, {"code": "<pre>\n<code>\n from itertools import chain, takewhile\ninitialValue = 10\nprint [i if len(locals()['_[1]']) == 0\n    else (locals()['_[1]'][-1]/2) if (locals()['_[1]'][-1]%2==0)\n    else (3*locals()['_[1]'][-1]+1) \n        for i in takewhile(lambda x:x&gt;1, chain([initialValue],locals()['_[1]']))]\n</code>\n</pre>\n", "senID": 18}, {"text": ["result:"], "childNum": 0, "tag": "p", "senID": 19, "childList": []}, {"code": "<pre>\n<code>\n [10, 5, 16, 8, 4, 2, 1]\n</code>\n</pre>\n", "senID": 20}, {"tag": "hr", "senID": 21}, {"text": ["So, now forget that you read this.", "This is dark, dark and dingy python.", "Evil python.", "And we all know python isn't evil.", "Python is lovely and nice.", "So you can't have read this, because this sort of thing can't exist.", "Good good. "], "childNum": 0, "tag": "p", "senID": 22, "childList": []}], [{"text": ["As Kiv said, a list comprehension requires a known sequence to iterate over."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Having said that, if you had a sequence and were fixated on using a list comprehension, your solution would probably include something like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [not (x % 2) and (x / 2) or (3 * x + 1) for x in sequence]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Mike Cooper's answer is a better solution because it both retains the x != 1 termination, and this line doesn't read cleanly."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "x != 1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": [], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I have discovered a truly marvelous proof of this, which this margin is too narrow to contain."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In all seriousness though, I don't believe you can do this with Python list comprehensions.", "They have basically the same power as map and filter, so you can't break out or look at previous values without resorting to hackery."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]