[[{"text": ["ABBA"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ABBA", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.abbasite.com/"}]}], [{"text": ["The easiest way to check for a palindrome is to simply compare the string against it's reverse:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def ispalindrome(s):\n   return s == s[::-1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["This uses extended slices with a negative step to walk backwards through s and get the reverse."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["baab = palindrome and has length of 4 which is even"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n is_palindrome = lambda s : all(s1==s2 for s1,s2 in zip(s[:len(s)/2],s[-1:-(len(s)+1)/2:-1]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["only checks the front half with the back half, and short-circuits as soon as a mismatch is found."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Simple case: aa."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["More complicated case: aaaa."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["And so on."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Even length strings can be palindromes too.", "Wikipedia doesn't say anything about this restriction."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Wikipedia", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Palindrome"}]}], [{"text": ["*n=raw_input(\"Enter a string==>\")"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["n=int(n)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["start=0"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["term=n"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["while n>0:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n result=n%10\n\nstart=start*10+result\n\nn=n/10\n</code>\n</pre>\n", "senID": 5}, {"text": ["print start"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["if term==start:\n[link text][1]\n    print \"True\""], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["else:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n print \"False\"\n</code>\n</pre>\n", "senID": 9}, {"text": ["[1]: http://rahimanpolindrom for srrings.com"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "http://rahimanpolindrom", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rahimanpolindrom"}]}]]