[[{"text": ["anding strings does not do what you think it does - use any to check if any of the strings are in the list:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n while not any(word in list_of_words for word in ['AND', 'OR', 'NOT']):\n    print 'No boolean'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, if you want a simple check, an if might be better suited than a while..."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The expression ('AND' and 'OR' and 'NOT') evaluates to 'NOT', so you are testing whether the list has NOT or not."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "('AND' and 'OR' and 'NOT')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'NOT'", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n while not any( x in ('AND','OR','NOT') for x in list)\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["thank you for the upvotes , but etarion's solution is better since it tests if the words AND, OR, NOT are in the list, that is to say 3 tests."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Mine does as many tests as there are words in list."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["EDIT2:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Also there is"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n while not ('AND' in list,'OR' in list,'NOT' in list)==(False,False,False)\n</code>\n</pre>\n", "senID": 6}], [{"text": ["The expression 'AND' and 'OR' and 'NOT' always evaluates to 'NOT', so you are effectively doing"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "'AND' and 'OR' and 'NOT'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'NOT'", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n while 'NOT' not in some_list:\n    print 'No boolean operator'\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can either check separately for all of them"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n while ('AND' not in some_list and \n       'OR' not in some_list and \n       'NOT' not in some_list):\n    # whatever\n</code>\n</pre>\n", "senID": 3}, {"text": ["or use sets"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n s = set([\"AND\", \"OR\", \"NOT\"])\nwhile not s.intersection(some_list):\n    # whatever\n</code>\n</pre>\n", "senID": 5}], [{"text": ["In your case, ('AND' and 'OR' and 'NOT') evaluates to \"NOT\", which may or may not be in your list..."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "('AND' and 'OR' and 'NOT')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"NOT\"", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n while 'AND' not in MyList and 'OR' not in MyList and 'NOT' not in MyList:\n    print 'No Boolean Operator'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If I understand the question correctly you are looking for something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = \"a1 c2 OR c3 AND\"\n&gt;&gt;&gt; boolops = [\"AND\", \"OR\", \"NOT\"]\n&gt;&gt;&gt; if not any(boolop in s for boolop in boolops):\n...     print \"no boolean operator\"\n... \n&gt;&gt;&gt; s = \"test\"\n&gt;&gt;&gt; if not any(boolop in s for boolop in boolops):\n...     print \"no boolean operator\"\n... \nno boolean operator\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["That's not how it works."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This bit ('AND' and 'OR' and 'NOT') will evaluate as 'NOT'.", "So your code is equivalent to::"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "('AND' and 'OR' and 'NOT')", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'NOT'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["while not 'NOT' in list:\n  print 'No boolean operator'"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["You could try this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["while not set('AND' and 'OR' and 'NOT').union(list):\n   print 'No boolean operator'"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Usingsetswill be screaming fast if you have any volume of data"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Usingsetswill be screaming fast if you have any volume of data", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "sets", "tag": "code"}]}, {"text": "sets", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you are willing to use sets, you have the isdisjoint() method which will check to see if the intersection between your operator list and your other list is empty."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "isdisjoint()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n MyOper = set(['AND', 'OR', 'NOT'])\nMyList = set(['c1', 'c2', 'NOT', 'c3'])\n\nwhile not MyList.isdisjoint(MyOper):\n    print \"No boolean Operator\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["http://docs.python.org/library/stdtypes.html#set.isdisjoint"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://docs.python.org/library/stdtypes.html#set.isdisjoint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#set.isdisjoint"}]}]]