[[{"text": ["A dictionary is the wrong structure for this.", "The bisectexamples show an example of this sort of range test."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "bisectexamples", "tag": "a", "pos": 1, "childList": [{"text": "bisect", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/bisect.html#examples"}, {"text": "bisect", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Whilst the dictionary approach works well for single values, if you want ranges, if ... else if ... else if is probably the simplest approach."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "if ... else if ... else if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you're looking for a single value this a good match to a dictionary - since this is what dictionaries are for - but if you're looking for a range it doesn't work.", "You could do it with a dict using something like:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n values = {\n    lambda x: x &lt; 4: foo,\n    lambda x: x &gt; 4: bar\n}\n</code>\n</pre>\n", "senID": 2}, {"text": ["and then loop through all the key-value pairs in the dictionary, passing your value key and running the value as a function if the key function returns true."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["However, this wouldn't give you any benefit over a number of if statements and would be harder to maintain and debug.", "So don't do it, and just use if instead."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["In that case you would use an if/then/else.", "You cannot do this with a switch, either. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The idea of a switch statement is that you have a value V that you test for identity against N possible outcomes.", "You can do this with an if-construct - however that would take O(N) runtime on average.", "The switch gives you constant O(1) every time. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This is obviously not possible for ranges (since they are not easily hashable) and thus you use if-constructs for these cases."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Example"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if value1 &lt;val: do_some_stuff1()\nelif value2 &gt;val: do_some_stuff2()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Note that this is actually smaller than trying to use a dictionary."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["dict is not for doing this (nor is switch!", "). "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["A couple posters have suggested a dict with containment functions, but this is not the solution you want at all.", "It is O(n) (like an if statement), it doesn't really work (because you could have overlapping conditions), is unpredictable (because you do not know what order you will do the loop), and is much less clear than the equivalent if statement.", "The if statement is probably the way you want to go if you have a short, static-length list of conditions to apply."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you have tons of conditions or if they could change as a result of your program, you want a different data structure.", "You could implement a binary tree  or keep a sorted list and use the bisect module to find a value associated with the given range."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "bisect", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I don't know of any practicable solution.", "If you want to go with the guess what it does approach though you could do something like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "guess what it does", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n obsure_switch = {\n     lambda x: 1&lt;x&lt;6 : some_function,\n     ...\n}\n\n[action() for condition,action in obscure_switch.iteritems() if condition(var)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Finally figured out what to do!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So instead of using a bunch of elif statements I did this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n range=[10,100]\noptions='abc' \ndef func(val)\n     choose=str(options[bisect(range,val)])\n     exec choose+\"()\"\ndef a():\n      do_stuff\ndef b():\n      do_other_stuff\ndef c():\n      do_other_other stuff\n</code>\n</pre>\n", "senID": 2}, {"text": ["Not only does it work but it goes almost as fast as my original 4 line code where I'm not changing any values of things!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]