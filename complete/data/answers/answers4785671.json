[[{"code": "<pre>\n<code>\n import sys\nfor line in open('file.txt'):\n  if '1947' in line: # or some complex regular expressions test\n    sys.stdout.write(line)\n</code>\n</pre>\n", "senID": 0}, {"text": ["You can also parse each line in the body of the for loop and then decide whether to accept it.", "If you want to get fancy, have a look at map and filter."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "map", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#map"}, {"href": "http://docs.python.org/library/itertools.html#itertools.ifilter", "text": "filter", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["One thing you can do is to use generators to filter out members of the list dynamically using a similar method to what you have done already:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "use generators", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dabeaz.com/generators/Generators.pdf"}]}, {"code": "<pre>\n<code>\n data = open(\"file.txt\")\nfortysevens = (line for line in data if contains_47(line))\nfor line in fortysevens:\n    # do something here\n\ndef contains_47(line):\n    # your existing code here to detect if a line contains 47\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Is your keyword always going to be the year?", "If so, I would store them in a dictionary like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mydata[year][quarter] = value\n</code>\n</pre>\n", "senID": 1}, {"text": ["So you could get to your example data via mydata['1947']."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["To read the file, you might want to use csv.reader, then split the first column on 'q' to get the year and quarter individually."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I'd write code that took all of the lines in the function returned a sequence of tuples like (1947, 3, -7.0).", "Then its a simple iteration over the result to figure out which ones I really want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If the data in the lines of the input file are fixed -- as they appear to be -- then something as simple as this would work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n with open('data.txt') as data:\n    for line in data:\n        if line[4:8] == '1947':\n            print line,\n\n# output:\n#     1947q2        -0.6\n#     1947q3        -0.3\n#     1947q4         6.2\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that the reason I used print line, is because each line string ends with a newline."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "print line,", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["As far as I know, regexes have been invented for this kind of job."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A regex will search directly the \"lines containing the keyword\" .", "A regex's search can also be based on more complex conditions that will be expressed in a more condensed code than with use of a clumsy \"for line in f\" loop."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["My motto is : \"There are no lines\" in a text file.", "It's only a sequence of characters."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["What a \"for line in f\" loop do is to analyse a stream of data to detect the newlines and stop at them: that is a first detection.", "Then on each line found, one (or more) simple (or complex) condition(s) must be tested on each line detected : that is a second research."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["On the other hand, a regex finds directly what is searched, without preliminary searching the newlines.", "Condition of a line and condition of a keyword in the line are tested at the same time."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import re\n\nkeyw = '1947'\npat = re.compile('.*?' + keyw + '.*')\n\nwith open('thefile.txt','r') as f:\n    keyworded_lines = pat.findall(f.read())\n\n# do what you need with keyworded_lines\n</code>\n</pre>\n", "senID": 5}, {"text": ["Note that in 'r' mode Python transforms all the newlines in '\\n'.", "Since the point in a RE  doesn't match '\\n', the RE needs only '.", "*' after the keyw."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]