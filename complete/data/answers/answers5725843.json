[[{"text": ["For monoalphabetic substitution, use maketrans and translate from the string module.", "They operate like the unix tr command.", "Joining with an empty separator is the correct answer for that last step, but not necessary for this exact task."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "maketrans", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#string.maketrans"}, {"text": "translate", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#string.translate"}, {"text": "tr", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Tr_%28Unix%29"}]}], [{"code": "<pre>\n<code>\n the_list = ['z', 'y', 'x', 'w', 'v', 'w', 'x', 'y', 'z']\nprint \"\".join(the_list)\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n ''.join(translate)\n</code>\n</pre>\n", "senID": 0}, {"text": ["I'm not sure this is what you want?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["an example of using maketrans and translate:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; table = string.maketrans('abcdef', 'zyxwvu')\n&gt;&gt;&gt; 'abdedddfdffdabe'.translate(table)\n'zywvwwwuwuuwzyv'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Assuming you want to substitute all letters in the ASCII alphabet: "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import string\nreversed_ascii_letters = string.ascii_letters[::-1]\n# reorder lowercase and uppercase\nreversed_ascii_letters = reversed_ascii_letters[26:] + reversed_ascii_letters[:26]\ntable = string.maketrans(string.ascii_letters, reversed_ascii_letters)\ndata = 'The Quick Brown Fox Jumped Over the Lazy Dog'\nprint data.translate(table)\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; table = string.maketrans(string.lowercase, string.lowercase[::-1])\n&gt;&gt;&gt; 'abcdedcba'.translate(table)\n'zyxwvwxyz'\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import string\n&gt;&gt;&gt; letters = string.lowercase\n&gt;&gt;&gt; letters\n'abcdefghijklmnopqrstuvwxyz'\n&gt;&gt;&gt; def revert_string(s):\n    s_rev = ''\n    for c in s:\n        s_rev += letters[len(letters) - 1 - letters.find(c)]\n    return s_rev\n\n&gt;&gt;&gt; s = 'zearoizuetlkzjetkl'\n&gt;&gt;&gt; revert_string(s)\n'avzilrafvgopaqvgpo'\n</code>\n</pre>\n", "senID": 0}]]