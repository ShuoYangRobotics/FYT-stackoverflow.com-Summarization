[[{"text": ["In the for-loop "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for numbers in x:\n</code>\n</pre>\n", "senID": 1}, {"text": ["\"numbers\" steps through the elements in x one at a time, for each pass through the loop.", "It would be perhaps better to name the variable \"number\" because you are only getting\none number at a time.", "\"numbers\" equals an integer each time through the loop."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n sum(numbers)\n</code>\n</pre>\n", "senID": 3}, {"text": ["throws a TypeError because the function sum() expects an iterable object (like a list of numbers), not just one integer."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["So perhaps try:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def numcheck(x):\n    s=0\n    for number in x:\n        if number%3==0 and number%5==0:\n            s+=number\n    print(s)\nnumcheck(range(1000))\n</code>\n</pre>\n", "senID": 6}], [{"text": ["numbers needs to be a list or similar when it is passed to sum().", "In the code example above, it is an integer - one of the integers from x."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Try something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n numbers = [num for num in x if num%3==0 and num%5 ==0]\nprint sum(numbers)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The sum function expects a list, not a single number."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sum", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["When you do for numbers in, then the variable numbers has a single integer object.", "Add a print statement, you'll see that numbers is a single number."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "for numbers in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "numbers", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "childList": []}, {"text": "numbers", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You might want to accumulate all the multiples of 3 and 5 in a list.", "Once you have the list, you can then use the sum function on that list."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "sum", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I think you want something like what follows."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def numcheck(x):\n    total = 0\n    for number in x:\n        if number % 3 == 0 or and number % 5 == 0:\n            total += number\n    print total\n</code>\n</pre>\n", "senID": 1}, {"text": ["Alternatively, you could append each of the divisible numbers to a list, and then call sum() on that list."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["help(sum)\nHelp on built-in function sum in module builtin:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "builtin", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["sum(...)\n    sum(sequence[, start]) -> value"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Returns the sum of a sequence of numbers (NOT strings) plus the value\nof parameter 'start' (which defaults to 0).  When the sequence is\nempty, returns start.\n</code>\n</pre>\n", "senID": 2}, {"text": ["(END) "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["You are passing numbers which is of type int to sum(), but sum takes a sequence."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Here is how I would do this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n n = 100\n\n# the next 4 lines are just to confirm that xrange is n numbers starting at 0\njunk = xrange(n)\nprint junk[0]  # print first number in sequence\nprint junk[-1] # print last number in sequence\nprint \"================\"\n\n# check to see if numbers are divisable by 3 or 5\ndef numcheck(x): \n   for numbers in x:\n      if numbers%3==0 and numbers%5==0:\n          print numbers\n\nnumcheck(xrange(n))\n</code>\n</pre>\n", "senID": 1}, {"text": ["You may find it strange that I pass xrange(n) as a parameter.", "This is an iterator that\nwill eventually produce the list of n numbers as you go through the loop in numcheck.", "It's a bit like passing a pointer to a function in C. The key thing is that by using xrange, you do not need to allocate any memory for the list of numbers, so you can more easily run a check on the first billion integers, for instance."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]