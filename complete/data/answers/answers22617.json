[[{"text": ["Formatting in Python is done via the string formatting (%) operator:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "string formatting (%) operator", "tag": "a", "pos": 0, "childList": [{"text": "%", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#string-formatting-operations"}, {"text": "%", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n \"%02d:%02d:%02d\" % (hours, minutes, seconds)\n</code>\n</pre>\n", "senID": 1}, {"text": ["/Edit: There's also strftime."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "strftime", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-time.html#l2h-2826"}]}], [{"text": ["Starting in Python 2.6, there is an alternative: the str.format() method.", "Here are some examples using the existing string format operator (%):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"Name: %s, age: %d\" % ('John', 35) \n'Name: John, age: 35' \n&gt;&gt;&gt; i = 45 \n&gt;&gt;&gt; 'dec: %d/oct: %#o/hex: %#X' % (i, i, i) \n'dec: 45/oct: 055/hex: 0X2D' \n&gt;&gt;&gt; \"MM/DD/YY = %02d/%02d/%02d\" % (12, 7, 41) \n'MM/DD/YY = 12/07/41' \n&gt;&gt;&gt; 'Total with tax: $%.2f' % (13.00 * 1.0825) \n'Total with tax: $14.07' \n&gt;&gt;&gt; d = {'web': 'user', 'page': 42} \n&gt;&gt;&gt; 'http://xxx.yyy.zzz/%(web)s/%(page)d.html' % d \n'http://xxx.yyy.zzz/user/42.html'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here are the equivalent using str.format():"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"Name: {0}, age: {1}\".format('John', 35) \n'Name: John, age: 35' \n&gt;&gt;&gt; i = 45 \n&gt;&gt;&gt; 'dec: {0}/oct: {0:#o}/hex: {0:#X}'.format(i) \n'dec: 45/oct: 0o55/hex: 0X2D' \n&gt;&gt;&gt; \"MM/DD/YY = {0:02d}/{1:02d}/{2:02d}\".format(12, 7, 41) \n'MM/DD/YY = 12/07/41' \n&gt;&gt;&gt; 'Total with tax: ${0:.2f}'.format(13.00 * 1.0825) \n'Total with tax: $14.07' \n&gt;&gt;&gt; d = {'web': 'user', 'page': 42} \n&gt;&gt;&gt; 'http://xxx.yyy.zzz/{web}/{page}.html'.format(**d) \n'http://xxx.yyy.zzz/user/42.html'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Like Python 2.6+, all Python 3 releases (so far) understand how to do both."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["This is the Python documentation page on string formatting, I think it would be a good place to start: http://docs.python.org/lib/typesseq-strings.html"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/typesseq-strings.html"}, {"href": "http://docs.python.org/lib/typesseq-strings.html", "text": "http://docs.python.org/lib/typesseq-strings.html", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["You can use C style string formatting:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"%d:%d:d\" % (hours, minutes, seconds)\n</code>\n</pre>\n", "senID": 1}, {"text": ["See here, especially: http://diveintopython.org/native_data_types/formatting_strings.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://diveintopython.org/native_data_types/formatting_strings.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/native_data_types/formatting_strings.html"}]}], [{"text": ["See here: http://docs.python.org/lib/typesseq-strings.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/lib/typesseq-strings.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/typesseq-strings.html"}]}], [{"text": ["str() in python on an integer will not print any decimal places."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str()", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "not", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["If you have a float that you want to ignore the decimal part, then you can use str(int(floatValue))."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Perhaps the following code will demonstrate:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; str(5)\n'5'\n&gt;&gt;&gt; int(8.7)\n8\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you have a value that includes a decimal, but the decimal value is negligible (ie: 100.0) and try to int that, you will get an error.", "It seems silly, but calling float first fixes this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["str(int(float([variable])))"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]