[[{"text": ["You could use the remodule like this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "remodule", "tag": "a", "pos": 0, "childList": [{"text": "re", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/re.html"}, {"text": "re", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import re\nstr = re.sub(r'[^a-zA-Z]+', '', str)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Of course!", "You can use a loop:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n toBeReplaced = [',',' ', ... some more chars ...]\nfor c in toBeReplaced:\n    yourString = yourString.replace(c,'')\n</code>\n</pre>\n", "senID": 1}, {"text": ["You might also have a look at regular expressions, which would make your job simpler and more stable.", "But that's probably not what your teacher want's to see."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["It's easier to find letters than non-letters:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "letters", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/string.html#string.letters"}]}, {"code": "<pre>\n<code>\n import string\n\ndef clean_string(input_string):\n    result = \"\"\n    for char in input_string:\n        if char in string.letters: # string.letters contains a...zA...Z\n            result += char\n    return result\n</code>\n</pre>\n", "senID": 1}, {"text": ["There are also fancier ways of doing this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def clean_string2(input_string):\n    return \"\".join([char for char in input_string if char in string.letters])\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I will not give you any code as this is a homework assignment, and it'll be better for you if you try coding it yourself.", "But I'll try to give you some hints to nudge you in the right direction."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As a homework assignment, your teacher expects you to write code that is extensible and manageable.", "When you duplicate code, it loses both those properties. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For this assignment, the first thing you'd want to do is carefully look at the requirements.", "There are too many non-alpha characters, so instead of removing each of them, you can consider only including the alpha characters.", "This can be done using a for loop."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "too many", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "including", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Once you learn more advanced techniques, you can start researching regex patterns, and using those.", "In python, those can be found in the re module."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["one line with out regular expressions and without imports:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ''.join( [ x for x in str if x.isalpha() ] )\n</code>\n</pre>\n", "senID": 1}, {"text": ["sample:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; ''.join( [ x for x in 'pepito;.:123jdjd' if x.isalpha() ] )\n'pepitojdjd'\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'pepito;.:123jdjd'\n&gt;&gt;&gt; import string\n&gt;&gt;&gt; s.translate(string.maketrans('',''), string.punctuation)\n'pepito123jdjd'\n</code>\n</pre>\n", "senID": 0}]]