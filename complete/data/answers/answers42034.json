[[{"tag": "ul", "num": 2, "lis": [{"text": "Tuples are used whenever you want to return multiple results from a function.", "tag": "none", "senID": 0}, {"text": "Since they're immutable, they can be used as keys for a dictionary (lists can't).", "tag": "none", "senID": 1}]}], [{"text": ["Tuples make good dictionary keys when you need to combine more than one piece of data into your key and don't feel like making a class for it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = {}\na[(1,2,\"bob\")] = \"hello!\"\na[(\"Hello\",\"en-US\")] = \"Hi There!\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["I've used this feature primarily to create a dictionary with keys that are coordinates of the vertices of a mesh.", "However, in my particular case, the exact comparison of the floats involved worked fine which might not always be true for your purposes [in which case I'd probably convert your incoming floats to some kind of fixed-point integer]"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I like this explanation."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this explanation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://jtauber.com/blog/2006/04/15/python_tuples_are_not_just_constant_lists/"}]}, {"text": ["Basically, you should use tuples when there's a constant structure (the 1st position always holds one type of value and the second another, and so forth), and lists should be used for lists of homogeneous values."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Of course there's always exceptions, but this is a good general guideline."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I find them useful when you always deal with two or more objects as a set."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Tuples and lists have the same uses in general.", "Immutable data types in general have many benefits, mostly about concurrency issues."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, when you have lists that are not volatile in nature and you need to guarantee that no consumer is altering it, you may use a tuple."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Typical examples are fixed data in an application like company divisions, categories, etc.", "If this data change, typically a single producer rebuilts the tuple."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["A list can always replace a tuple, with respect to functionality (except, apparently, as keys in a dict).", "However, a tuple can make things go faster.", "The same is true for, for example, immutable strings in Java -- when will you ever need to be unable to alter your strings?", "Never!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I just read a decent discussion on limiting what you can do in order to make better programs; Why Why Functional Programming Matters Matters"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Why Why Functional Programming Matters Matters", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://weblog.raganwald.com/2007/03/why-why-functional-programming-matters.html"}]}], [{"text": ["A tuple is useful for storing multiple values.. As you note a tuple is just like a list that is immutable - e.g.", "once created you cannot add/remove/swap elements."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One benefit of being immutable is that because the tuple is fixed size it allows the run-time to perform certain optimizations.", "This is particularly beneficial when a tupple is used in the context of a return value or a parameter to a function."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["In addition to the places where they're syntactically required like the string % operation and for multiple return values, I use tuples as a form of lightweight classes.", "For example, suppose you have an object that passes out an opaque cookie to a caller from one method which is then passed into another method.", "A tuple is a good way to pack multiple values into that cookie without having to define a separate class to contain them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I try to be judicious about this particular use, though.", "If the cookies are used liberally throughout the code, it's better to create a class because it helps document their use.", "If they are only used in one place (e.g.", "one pair of methods) then I might use a tuple.", "In any case, because it's Python you can start with a tuple and then change it to an instance of a custom class without having to change any code in the caller."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]