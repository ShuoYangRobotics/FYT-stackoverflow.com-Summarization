[[{"text": ["You're confusing Python with... Perl or something..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if not ('A' &lt;= number[i] &lt;= 'Z'):\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Isn't int(x, base) what you need?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "int(x, base)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n int('20',5) # returns the integer 10\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There are many errors in your code.", "To begin with,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["number[i] != [A-Z]"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "number[i] != [A-Z]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["is not Python syntax at all.", "What you probably want is"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n number[i].isdigit()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Furthermore, the"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if number == 0:\n    return '0'\n</code>\n</pre>\n", "senID": 5}, {"text": ["part should probably be"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n if number == '0':\n    return 0\n</code>\n</pre>\n", "senID": 7}, {"text": ["but actually, there is no need to special-case this at all.", "Another problem is that you interpreting the first character as \"ones\", i.e.", "lowest significant.", "There are a few more problems, but maybe this will get you going..."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["That said, you could simply use"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n int('20',5)\n</code>\n</pre>\n", "senID": 10}], [{"text": ["Other bugs in the code:\n1.", "You didn't initialize variable num that you used to store results.", "2. you need to convert number[i] from char to int before you can apply multiplication/addition."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n num = num + int(number[i]) * pow(i,base)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A more comprehensive solution to this problem may look like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\n\n# Possible digits from the lowest to the highest\nDIGITS = '%s%s' % (string.digits, string.lowercase)\n\ndef baseencode(num, base):\n    result = 0\n    positive = True\n    # If a number is negative let's remove the minus sign\n    if num[0] == '-':\n        positive = False\n        num = num[1:]\n\n    for i, n in enumerate(num[::-1]):\n        # Since 0xff == 0xFF\n        n = n.lower()\n        result += DIGITS.index(n) * base ** i\n\n    if not positive:\n        result = -1 * result\n\n    return result\n</code>\n</pre>\n", "senID": 1}, {"text": ["Basically whilst converting a number to base 10 it's easiest to start from the last digit, multiply it by the base raised to the current position (DIGITS.index(n) * base ** i)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["BTW, in my understanding it's a Python exercise, but if it's not there's a builtin function for that - int:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You probably want"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if number[i] not in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import string\n# ...\nif number[i] not in string.ascii_uppercase:\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n import math\n\ndef base_encode(number, base):\n    \"\"\"Convert number in given base to equivalent in base10\n\n    @param number: string, value to convert (case-insensitive)\n    @param base:   integer, numeric base of strNumber\n\n    @retval: integer, x base(10) == number base(base)\n    \"\"\"\n    # sanitize inputs\n    number = str(number).lower()\n    base = int(base)\n\n    # legal characters\n    known_digits = '0123456789abcdefghijklmnopqrstuvwxyz'\n    value  = { ch:val for val,ch in enumerate(known_digits) if val&lt;base }\n\n    # handle negative values    \n    if number[0]=='-':\n        sign = -1\n        number = number[1:]\n    else:\n        sign = 1\n\n    # do conversion\n    total = 0\n    for d in number:\n        try:\n            total = total*base + value[d]\n        except KeyError:\n            if d in known_digits:\n                raise ValueError(\"invalid digit '{0}' in base {1}\".format(d, base))\n            else:\n                raise ValueError(\"value of digit {0} is unknown\".format(d))\n\n    return sign*total\n\nbase_encode('20', 5)     -&gt;  10\nbase_encode('-zzz', 36)  -&gt; -46655\n</code>\n</pre>\n", "senID": 0}]]