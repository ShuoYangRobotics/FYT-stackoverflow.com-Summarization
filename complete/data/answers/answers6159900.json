[[{"text": ["I do not think there is a \"correct\" way."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I would use:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n with open ('myfile', 'a') as f: f.write ('hi there\\n')\n</code>\n</pre>\n", "senID": 2}, {"text": ["In memoriam Tim Toady."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Tim Toady", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it"}]}], [{"text": ["You should use the new print() statement, available with Python 2.6+"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import print_function\nprint(\"hi there\", file=f)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The alternative would be to use:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n f = open('myfile','w')\nf.write('hi there\\n') # python will convert \\n to os.linesep\n</code>\n</pre>\n", "senID": 3}, {"text": ["Quoting from Python documentation regarding newlines:\nOn output, if newline is None, any '\\n' characters written are translated to the system default line separator, os.linesep.", "If newline is '', no translation takes place.", "If newline is any of the other legal values, any '\\n' characters written are translated to the given string."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "On output, if newline is None, any '\\n' characters written are translated to the system default line separator, os.linesep. If newline is '', no translation takes place. If newline is any of the other legal values, any '\\n' characters written are translated to the given string.", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["Since nobody else has addressed the OS-specific line endings, here is my take:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; with open('somefile.txt', 'a') as the_file:\n...     the_file.write('Hello\\n')\n</code>\n</pre>\n", "senID": 1}, {"text": ["From The Documentation:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Some useful reading:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["The with statement"], "childNum": 1, "tag": "a", "senID": 4, "childList": [{"text": "with", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["open()"], "childNum": 1, "tag": "a", "senID": 5, "childList": [{"text": "open()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["os.linesep"], "childNum": 1, "tag": "a", "senID": 6, "childList": [{"text": "os.linesep", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]}], [{"text": ["In Python 3 it is a function, but in Python 2 you can add this to the top of the source file:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from __future__ import print_function\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you do "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print(\"hi there\", file=f)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can use write instead of print:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "write", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n fsock = open('myFile', 'w')\nfsock.write('hi there')\n</code>\n</pre>\n", "senID": 1}, {"text": ["See printing to a file in Python: redirect vs print&#39;s file argument vs write for details."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "printing to a file in Python: redirect vs print&#39;s file argument vs write", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/4090997/printing-to-a-file-in-python-redirect-vs-prints-file-argument-vs-write"}]}], [{"text": ["Regarding os.linesep:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Regarding os.linesep:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Here is an exact unedited Python 2.7.1 interpreter session on Windows:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on\nwin32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.linesep\n'\\r\\n'\n&gt;&gt;&gt; f = open('myfile','w')\n&gt;&gt;&gt; f.write('hi there\\n')\n&gt;&gt;&gt; f.write('hi there' + os.linesep) # same result as previous line ?????????\n&gt;&gt;&gt; f.close()\n&gt;&gt;&gt; open('myfile', 'rb').read()\n'hi there\\r\\nhi there\\r\\r\\n'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["On Windows:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "On Windows:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["As expected, os.linesep does NOT produce the same outcome as '\\n'.", "There is no way that it could produce the same outcome.", "'hi there' + os.linesep is equivalent to 'hi there\\r\\n', which is NOT equivalent to 'hi there\\n'."], "childNum": 6, "tag": "p", "senID": 4, "childList": [{"text": "NOT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "'\\n'", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "'hi there' + os.linesep", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "'hi there\\r\\n'", "childNum": 0, "tag": "code", "childList": []}, {"text": "NOT", "childNum": 0, "tag": "strong", "childList": []}, {"text": "'hi there\\n'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["It's this simple: use\\nwhich will be translated automatically to os.linesep.", "And it's been that simple ever since the first port of Python to Windows."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "It's this simple: use\\nwhich will be translated automatically to os.linesep.", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "\\n", "tag": "code"}]}, {"text": "\\n", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["There is no point in using os.linesep on non-Windows systems, and it produces wrong results on Windows."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["DO NOT USE os.linesep!"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "DO NOT USE os.linesep!", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}]]