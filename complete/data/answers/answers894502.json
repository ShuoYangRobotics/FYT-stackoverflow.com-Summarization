[[{"text": ["Jian Lin \u2014 the answer is \"Yes\", Python is more object-oriented than when Matz decided he wanted to create Ruby, and both languages now feature \"everything is an object\".", "Back when Python was younger, \"types\" like strings and numbers lacked methods, whereas \"objects\" were built with the \"class\" statement (or by deliberately building a class in a C extension module) and were a bit less efficient but did support methods and inheritance.", "For the very early 1990s, when a fast 386 was a pretty nice machine, this compromise made sense.", "But types and classes were unified in Python 2.2 (released in 2001), and strings got methods and, in more recent Python versions, users can even subclass from them."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So: Python was certainly less object oriented at one time; but, so far as I know, every one of those old barriers is now gone."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's the guide to the unification that took place:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://www.python.org/download/releases/2.2/descrintro/"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://www.python.org/download/releases/2.2/descrintro/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/download/releases/2.2/descrintro/"}]}, {"text": ["Clarification: perhaps I can put it even more simply: in Python, everything has always been an object; but some basic kinds of object (ints, strings) once played by \"different rules\" that prevent OO programming methods (like inheritance) from being used with them.", "That has now been fixed.", "The len() method, described in another response here, is probably the only thing left that I wish Guido had changed in the upgrade to Python 3.0.", "But at least he gave me dictionary comprehensions, so I won't complain too loudly.", ":-)"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "Clarification:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "always", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["I'm not sure that I buy the argument that Ruby is more object-oriented than Python.", "There's more to being object-oriented than just using objects and dot syntax.", "A common argument that I see is that in Python to get the length of a list, you do something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n len(some_list)\n</code>\n</pre>\n", "senID": 1}, {"text": ["I see this as a bikeshed argument.", "What this really translates to (almost directly) is this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "bikeshed argument", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Color%5Fof%5Fthe%5Fbikeshed"}]}, {"code": "<pre>\n<code>\n some_list.__len__()\n</code>\n</pre>\n", "senID": 3}, {"text": ["which is perfectly object oriented.", "I think Rubyists may get a bit confused because typically being object-oriented involves using the dot syntax (for example object.method()).", "However, if I misunderstand Rubyists' arguments, feel free to let me know."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "object.method()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Regardless of the object-orientation of this, there is one advantage to using len this way.", "One thing that's always annoyed me about some languages is having to remember whether to use some_list.size() or some_list.length() or some_list.len for a particular object.", "Python's way means just one function to remember"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "some_list.size()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "some_list.length()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "some_list.len", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Although this is not properly an answer... Why do you care about Python being more or less OO?", "The cool thing about Python is that it's pythonic, not object oriented or funcitonal or whichever paradigm that is fashionable at the moment!", ":-)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pythonic", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["I learnt to program with Java and Object Orientation, but now I don't give a sh.t about it because I know that OOP is not the solution to all the problems (indeed, no single paradigm is)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["see:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["The Zen of Python"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["What is Pythonic"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["Be Pythonic"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}], [{"text": ["Hold on, both Ruby and Python are object oriented.", "Objects are objects.", "There isn't more object oriented 'comparison function' that will lead you to the better one.", "Syntax is not only thing which makes some language to look like object oriented one, but also data model."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Syntax", "childNum": 0, "tag": "em", "pos": 3, "childList": []}, {"text": "data model", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["This is an incorrect belief."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See my previous answer here for more in-depth explanation:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["http://stackoverflow.com/questions/865911/is-everything-an-object-in-python-like-ruby/865963#865963"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://stackoverflow.com/questions/865911/is-everything-an-object-in-python-like-ruby/865963#865963", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/865911/is-everything-an-object-in-python-like-ruby/865963#865963"}]}, {"text": [".len() is available directly off the list.", "It is available as __len__().", "len() is a function object.", "You can see all its methods with dir(len).", "While I do not know why Guido decided to make the __len__() method longer, it does not change the fact that all of those are still objects."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I have the same \"perception\" perhaps derived from this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"perception\"", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Why was python created in the first place:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Why was python created in the first place:", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/doc/faq/general/#why-was-python-created-in-the-first-place"}]}, {"text": ["An Interview with the Creator of Ruby:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "An Interview with the Creator of Ruby:", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html"}]}, {"text": ["I know that perception is not the same as reality.", "Both Python and Ruby are great programming languages and both are very OO. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]