[[{"text": ["The Python manual has this to say about id():"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Python manual", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/built-in-funcs.html"}]}, {"text": ["So in CPython, this will be the address of the object.", "No such guarantee for any other Python interpreter, though."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Note that if you're writing a C extension, you have full access to the internals of the Python interpreter, including access to the addresses of objects directly."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["With ctypes, you can achieve the same thing with"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ctypes", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-ctypes.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import ctypes\n&gt;&gt;&gt; a = (1,2,3)\n&gt;&gt;&gt; ctypes.addressof(a)\n3077760748L\n</code>\n</pre>\n", "senID": 1}, {"text": ["Documentation:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Note that in CPython, currently id(a) == ctypes.addressof(a), but ctypes.addressof should return the real address for each Python implementation, if"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "id(a) == ctypes.addressof(a)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ctypes.addressof", "childNum": 0, "tag": "code", "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "ctypes is supported", "tag": "none", "senID": 4}, {"text": "memory pointers are a valid notion.", "tag": "none", "senID": 5}]}, {"text": ["Edit: added information about interpreter-independence of ctypes"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["You could reimplement the default repr this way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __repr__(self):\n    return '&lt;%s.%s object at %s&gt;' % (\n        self.__class__.__module__,\n        self.__class__.__name__,\n        hex(id(self))\n    )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Just use "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n id(object)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Just in response to Torsten, I wasn't able to call addressof() on a regular python object.", "Furthermore, id(a) != addressof(a).", "This is in CPython, don't know about anything else."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "addressof()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "id(a) != addressof(a)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from ctypes import c_int, addressof\n&gt;&gt;&gt; a = 69\n&gt;&gt;&gt; addressof(a)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: invalid type\n&gt;&gt;&gt; b = c_int(69)\n&gt;&gt;&gt; addressof(b)\n4300673472\n&gt;&gt;&gt; id(b)\n4300673392\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can get something suitable for that purpose with:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n id(self)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["While it's true that id(object) gets the object's address in the default CPython implementation, this is generally useless... you can't do anything with the address from pure Python code."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "id(object)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "do", "childNum": 0, "tag": "i", "childList": []}]}, {"text": ["The only time you would actually be able to use the address is from a C extension library... in which case it is trivial to get the object's address since Python objects are always passed around as C pointers."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]