[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; import platform\n&gt;&gt;&gt; platform.system()\n'Windows'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["On my Windows box, platform.system() returns 'Windows'."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "platform.system()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'Windows'", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["However, I'm not sure why you'd bother.", "If you want to limit the platform it runs on technologically, I'd use a white-list rather than a black-list."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In fact, I wouldn't do it technologically at all since perhaps the next release of Python may have Win32/Win64 instead of Windows (for black-listing) and *nix instead of Linux (for white-listing)."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "Win32/Win64", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Windows", "childNum": 0, "tag": "code", "childList": []}, {"text": "*nix", "childNum": 0, "tag": "code", "childList": []}, {"text": "Linux", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["My advice is to simply state what the requirements are and, if the user chooses to ignore that, that's their problem.", "If they ring up saying they got an error message stating \"Cannot find FHS\" and they admit they're running on Windows, gently point out to them that it's not a supported configuration."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Maybe your customers are smart enough to get FHS running under Windows so that your code will work.", "They're unlikely to appreciate what they would then consider an arbitrary limitation of your software."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["This is a problem faced by software developers every day.", "Even huge organizations can't support every single platform and configuration out there."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "every", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import platform\n\nif platform.system() == \"Darwin\":\n    # Don't have Windows handy, but I'd expect \"Win32\" or \"Windows\" for it\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: Just saw that you tried platform.platform()...platform.system() will work better for this case.", "Trust me, use it.", "Dark corners lie in platform detection."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "platform.platform()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "platform.system()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["distutils will do this too, if you ask it nicely."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "distutils", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You could always do something bad like os.path.exists() on a Windows file...but platform is as reliable as it gets in the Python standard library."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "os.path.exists()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "platform", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Edit 2: Another helpful answerer pointed out platform.system() is exactly equal to \"Windows\" on his Windows machine."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "Edit 2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "platform.system()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["For those that came here looking for a way to detect Cygwin from Python (as opposed to just detecting Windows), here are some example return values from os.name and platform.system on different platforms"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "os.name", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "platform.system", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n OS/build     | os.name | platform.system() \n-------------+---------+-----------------------\nWin32 native | nt      | Windows\nWin32 cygwin | posix   | CYGWIN_NT-5.1*\nWin64 native | nt      | Windows\nWin64 cygwin | posix   | CYGWIN_NT-6.1-WOW64*\nLinux        | posix   | Linux\n</code>\n</pre>\n", "senID": 1}, {"text": ["From this point, how to distinguish between Windows native and Cygwin should be obvious although I'm not convinced this is future proof."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["* version numbers are for XP and Win7 respectively, do not rely on them"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["From help(platform)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n system()\n    Returns the system/OS name, e.g. 'Linux', 'Windows' or 'Java'.\n\n    An empty string is returned if the value cannot be determined.\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import os\n&gt;&gt;&gt; os.name\n'nt'\n</code>\n</pre>\n", "senID": 0}, {"text": ["\"The name of the operating system dependent module imported.", "The following names have currently been registered: 'posix', 'nt', 'mac', 'os2', 'ce', 'java', 'riscos'.", "\" (c) http://docs.python.org/library/os.html#os.name"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/os.html#os.name", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/os.html#os.name"}]}, {"code": "<pre>\n<code>\n import os\nif os.name == 'nt':\n    #yourcodehere\n</code>\n</pre>\n", "senID": 2}]]