[[{"text": ["I think you'll find XMLGenerator from xml.sax.saxutils is the closest thing to what you want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\nimport time\nfrom xml.sax.saxutils import XMLGenerator\nfrom xml.sax.xmlreader import AttributesNSImpl\n\nLOG_LEVELS = ['DEBUG', 'WARNING', 'ERROR']\n\n\nclass xml_logger:\n    def __init__(self, output, encoding):\n        \"\"\"\n        Set up a logger object, which takes SAX events and outputs\n        an XML log file\n        \"\"\"\n        logger = XMLGenerator(output, encoding)\n        logger.startDocument()\n        attrs = AttributesNSImpl({}, {})\n        logger.startElementNS((None, u'log'), u'log', attrs)\n        self._logger = logger\n        self._output = output\n        self._encoding = encoding\n        return\n\n    def write_entry(self, level, msg):\n        \"\"\"\n        Write a log entry to the logger\n        level - the level of the entry\n        msg   - the text of the entry.  Must be a Unicode object\n        \"\"\"\n        #Note: in a real application, I would use ISO 8601 for the date\n        #asctime used here for simplicity\n        now = time.asctime(time.localtime())\n        attr_vals = {\n            (None, u'date'): now,\n            (None, u'level'): LOG_LEVELS[level],\n            }\n        attr_qnames = {\n            (None, u'date'): u'date',\n            (None, u'level'): u'level',\n            }\n        attrs = AttributesNSImpl(attr_vals, attr_qnames)\n        self._logger.startElementNS((None, u'entry'), u'entry', attrs)\n        self._logger.characters(msg)\n        self._logger.endElementNS((None, u'entry'), u'entry')\n        return\n\n    def close(self):\n        \"\"\"\n        Clean up the logger object\n        \"\"\"\n        self._logger.endElementNS((None, u'log'), u'log')\n        self._logger.endDocument()\n        return\n\nif __name__ == \"__main__\":\n    #Test it out\n    import sys\n    xl = xml_logger(sys.stdout, 'utf-8')\n    xl.write_entry(2, u\"Vanilla log entry\")\n    xl.close()\n</pre>\n", "senID": 1}, {"text": ["You'll probably want to look at the rest of the article I got that from at http://www.xml.com/pub/a/2003/03/12/py-xml.html."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.xml.com/pub/a/2003/03/12/py-xml.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.xml.com/pub/a/2003/03/12/py-xml.html"}]}], [{"text": ["xml.etree.cElementTree, included in the default distribution of CPython since 2.5.", "Lightning fast for both reading and writing XML."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "xml.etree.cElementTree", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["I think I have your poison :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://sourceforge.net/projects/xmlite"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://sourceforge.net/projects/xmlite", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/xmlite"}]}, {"text": ["Cheers"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I've always had good results with lxml.", "It's a pain to install, as it's mostly a wrapper around libxml2, but lxml.etree  tree objects have a .write() method that takes a file-like object to stream to."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "lxml", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/"}, {"text": "libxml2", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://xmlsoft.org/"}, {"text": "lxml.etree", "childNum": 0, "tag": "code", "childList": []}, {"text": ".write()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from lxml.etree import XML\n\ntree = XML('&lt;root&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/root&gt;')\ntree.write(your_file_object)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Some years ago I used MarkupWriter from 4suite"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "MarkupWriter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://4suite.org/index.xhtml", "text": "4suite", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Recently i hear a lot about how lxml is great, but I don't have first-hand experience, and I had some fun working with gnosis."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "lxml", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/"}, {"href": "http://freshmeat.net/projects/gnosisxml/", "text": "gnosis", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Second vote for ElementTree (cElementTree is a C implementation that is a little faster, like cPickle vs pickle).", "There's some short example code here that you can look at to give you an idea of how it works: http://effbot.org/zone/element-index.htm\n(this is Fredrik Lundh, who wrote the module in the first place.", "It's so good it got drafted into the standard library with 2.5 :-) )"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://effbot.org/zone/element-index.htm", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/element-index.htm"}]}]]