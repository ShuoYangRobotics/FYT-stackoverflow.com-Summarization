[[{"text": ["key is just a variable name.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["for key in d: will simply loop over the keys in the dictionary, rather than the keys and values.", "To loop over both key and value you can use for key, value in d.iteritems():"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "for key in d:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for key, value in d.iteritems():", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Test for yourself, change the word key to poop"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "key", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "poop", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["When you iterate through dictionaries using the for .. in ..-syntax, it always iterates over the keys (the values are accessible using dictionary[key])."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "for .. in ..", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dictionary[key]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["To iterate over key-value pairs, use for k,v in s.iteritems(). "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "for k,v in s.iteritems()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["This is a very common looping idiom.", "in is an operator.", "For when to use for key in dict and when it must be for key in dict.keys() see David Goodger's Idiomatic Python article."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "for key in dict", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "for key in dict.keys()", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#use-in-where-possible-1", "text": "David Goodger's Idiomatic Python article", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["It's not that key is a special word, but that dictionaries implement the iterator protocol.", "You could do this in your class, e.g.", "see this question for how to build class iterators.", "In the case of dictionaries, it's implemented at the C level.", "The details are available in PEP 234.", "In particular, the section titled \"Dictionary Iterators\":"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "question", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/19151/build-a-basic-python-iterator/24377#24377"}, {"text": "PEP 234", "tag": "a", "pos": 4, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0234/"}]}], [{"text": ["key is simple a variable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can do this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n d = {'x': 1, 'y': 2, 'z': 3} \nfor poop in d:\n    print poop, 'corresponds to', d[poop]\n</code>\n</pre>\n", "senID": 2}, {"text": ["... or better,"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n d = {'x': 1, 'y': 2, 'z': 3} \nfor the_key, the_value in d.iteritems():\n    print the_key, 'corresponds to', the_value\n</code>\n</pre>\n", "senID": 4}], [{"text": ["as others have pointed out, iterating over a dict iterates through it's keys in no particular order."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["As you can see here"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {'x': 1, 'y': 2, 'z': 3} \n&gt;&gt;&gt; list(d)\n['y', 'x', 'z']\n&gt;&gt;&gt; d.keys()\n['y', 'x', 'z']\n</code>\n</pre>\n", "senID": 2}, {"text": ["For your example it is a better idea to use dict.items()"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "dict.items()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d.items()\n[('y', 2), ('x', 1), ('z', 3)]\n</code>\n</pre>\n", "senID": 4}, {"text": ["This gives you a list of tuples.", "When you loop over them like this, each tuple is unpacked into k and v automatically"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "k", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "v", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for k,v in d.items():\n    print k, 'corresponds to', v\n</code>\n</pre>\n", "senID": 6}, {"text": ["Using k and v as variable names when looping over a dict is quite common if the body of the loop is only a few lines.", "For more complicated loops it may be a  good idea to use more descriptive names"], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "k", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "v", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n for letter, number in d.items():\n    print letter, 'corresponds to', number\n</code>\n</pre>\n", "senID": 8}, {"text": ["It's a good idea going forward to get into the habit of using format strings"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n for letter, number in d.items():\n    print '{0} corresponds to {1}'.format(letter, number)\n</code>\n</pre>\n", "senID": 10}]]