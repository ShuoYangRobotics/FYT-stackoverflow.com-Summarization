[[{"text": ["The sorted function returns a new list so you will need to assign the results of the function like this:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "sorted", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "new", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n new_list = sorted(statlist, key=lambda x: int(x[1]))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use the .sort method for in place sorting:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".sort", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n statlist = [('abc',5,1), ('bzs',66,1), ... ]\nstatlist.sort(key=lambda x: int(x[1]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you do want to use sorted, then reassign the variable:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "sorted", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n statlist = [('abc',5,1), ('bzs',66,1), ... ]\nstatlist = sorted(statlist, key=lambda x: int(x[1]))\n</code>\n</pre>\n", "senID": 3}, {"text": ["For descending sort, use reverse:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "reverse", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n statlist = [('abc',5,1), ('bzs',66,1), ... ]\nstatlist = sorted(statlist, key=lambda x: int(x[1]), reverse=True)\n</code>\n</pre>\n", "senID": 5}, {"text": ["Then, you'd better use itemgetter instead of a lambda :"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "itemgetter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "lambda", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import operator\nstatlist = [('abc',5,1), ('bzs',66,1), ... ]\nstatlist = sorted(statlist, key=operator.itemgetter(1), reverse=True)\n</code>\n</pre>\n", "senID": 7}], [{"text": ["You can pass, key, and reverse to .sort function"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x.sort(key=lambda x:x[1],reverse=True)\n&gt;&gt;&gt; x\n[('bzs', 66, 1), ('abc', 5, 1)]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["for inplace sorting use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n statlist.sort(key=lambda x: x[1])\n</code>\n</pre>\n", "senID": 1}, {"text": ["for creating other list, with sorted data use"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n otherlist = sorted( statlist, key=lambda x: x[1] )\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n from operator import itemgetter\nstatlist = [('abc',5,1), ('bzs',66,1), ... ]\n\n# statlist.sort modifiest the statlist, sorted returns a new one\n# reverse puts the largest items to the front\nstatlist.sort(key=itemgetter(1), reverse=True)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["In response to alex's comment that he thought that sorted() worked \"like the sort function\":"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If it worked \"like the sort function\", it is unlikely to have been put in the library."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In any case, there is no sort function ... you refer to the sort method of list objects."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "function", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "method", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Simple demonstration using the interactive interpreter:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; alist = [3, 2, 1]; x = alist.sort(); print x; print alist\nNone\n[1, 2, 3]\n&gt;&gt;&gt; alist = [3, 2, 1]; x = sorted(alist); print x; print alist\n[1, 2, 3]\n[3, 2, 1]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Here's a tip: look for patterns and similarities, but always verify your intuitive extrapolations.", "You might like to apply those ideas to reverse and reversed."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "reverse", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "reversed", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s = [('xyz', 8, 1), ('abc',5,1), ('bzs',66,1) ]\n&gt;&gt;&gt; s = sorted(s, key=lambda x: int(x[1]))\n&gt;&gt;&gt; s.reverse()\n&gt;&gt;&gt; print s\n[('bzs', 66, 1), ('xyz', 8, 1), ('abc', 5, 1)]\n</code>\n</pre>\n", "senID": 0}]]