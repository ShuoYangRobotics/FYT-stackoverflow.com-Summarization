[[{"text": ["There's sqlite3, included into python.", "With it you can create a database (on memory) and add rows to it, and perform SQL queries."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "sqlite3", "tag": "a", "pos": 0, "childList": [{"text": "sqlite3", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/sqlite3"}, {"text": "sqlite3", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "on memory", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["If you want neat ActiveRecord-like functionality you should add an external ORM, like sqlalchemy.", "That's a separate download though"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "sqlalchemy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sqlalchemy.org"}]}, {"text": ["Quick example using sqlalchemy:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from sqlalchemy import create_engine, Column, String, Integer, MetaData, Table\nfrom sqlalchemy.orm import mapper, create_session\nimport csv\nCSV_FILE = 'foo.csv'\nengine = create_engine('sqlite://') # memory-only database\n\ntable = None\nmetadata = MetaData(bind=engine)\nwith open(CSV_FILE) as f:\n    # assume first line is header\n    cf = csv.DictReader(f, delimiter=',')\n    for row in cf:\n        if table is None:\n            # create the table\n            table = Table('foo', metadata, \n                Column('id', Integer, primary_key=True),\n                *(Column(rowname, String()) for rowname in row.keys()))\n            table.create()\n        # insert data into the table\n        table.insert().values(**row).execute()\n\nclass CsvTable(object): pass\nmapper(CsvTable, table)\nsession = create_session(bind=engine, autocommit=False, autoflush=True)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now you can query the database, filtering by any field, etc."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Suppose you run the code above on this csv:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n name,age,nickname\nnosklo,32,nosklo\nAfila Tun,32,afilatun\nFoo Bar,33,baz\n</code>\n</pre>\n", "senID": 6}, {"text": ["That will create and populate a table in memory with fields name, age, nickname.", "You can then query the table:"], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "name", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "age", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "nickname", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n for r in session.query(CsvTable).filter(CsvTable.age == '32'):\n    print r.name, r.age, r.nickname\n</code>\n</pre>\n", "senID": 8}, {"text": ["That will automatically create and run a SELECT query and return the correct rows."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "SELECT", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Another advantage of using sqlalchemy is that, if you decide to use another, more powerful database in the future, you can do so pratically without changing the code."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["Use a DB in a library like SQLite.", "There are Python and Ruby versions ."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "SQLite", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sqlite.org/"}, {"text": "Python", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sqlite3.html"}, {"href": "http://sqlite-ruby.rubyforge.org/", "text": "Ruby", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Load your CSV into table, there might be modules/libraries to help you here too.", "Then SQL away."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Looked at Perl and and Text::CSV and DBI?", "There are many modules on CPAN to do exactly this.", "Here is an example (from HERE):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "HERE", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://perlmeme.org/tutorials/parsing_csv.html"}]}, {"code": "<pre>\n<code>\n #!/usr/bin/perl\nuse strict;\nuse warnings;\nuse DBI;\n\n# Connect to the database, (the directory containing our csv file(s))\n\nmy $dbh = DBI-&gt;connect(\"DBI:CSV:f_dir=.;csv_eol=\\n;\");\n\n# Associate our csv file with the table name 'prospects'\n\n$dbh-&gt;{'csv_tables'}-&gt;{'prospects'} = { 'file' =&gt; 'prospects.csv'};\n\n# Output the name and contact field from each row\n\nmy $sth = $dbh-&gt;prepare(\"SELECT * FROM prospects WHERE name LIKE 'G%'\");\n$sth-&gt;execute();\nwhile (my $row = $sth-&gt;fetchrow_hashref) {\n     print(\"name = \", $row-&gt;{'Name'}, \"  contact = \", $row-&gt;{'Contact'}. \"\\n\");\n}\n$sth-&gt;finish();\n\nname = Glenhuntly Pharmacy  contact = Paul\nname = Gilmour's Shoes  contact = Ringo\n</code>\n</pre>\n", "senID": 1}, {"text": ["Just type perldoc DBI   and perldoc Text::CSV at the command prompt for more."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["CSV files are not databases--they have no indices--and any SQL simulation you imposed upon them would amount to little more than searching through the entire thing over and over again. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You could use either scripting language to parse the CSV file and store the data into SQLite, which just uses a single file for storage.", "From there you have it in a database and can run queries against it."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SQLite", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sqlite.org/"}]}, {"text": ["Alternatively, on windows you can setup an ODBC data source as a CSV file.", "But it may be difficult to automate this."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["PHP FlatfileDB available here is a very good option if you are building a web app"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/flatfiledb/"}]}], [{"text": ["I used nosklo's solution (thanks!", ") but I already had a primary key (passed in as pk_col) within the column line (first line of csv).", "So I thought I'd share my modification.", "I used a ternary. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n table = Table(tablename, metadata,\n    *((Column(pk_col, Integer, primary_key=True)) if rowname == pk_col else (Column(rowname, String())) for rowname in row.keys()))\ntable.create()\n</code>\n</pre>\n", "senID": 1}]]