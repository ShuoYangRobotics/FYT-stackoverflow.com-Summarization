[[{"text": ["The data-structure you are looking for is called a \"hash table\" (or \"hash map\").", "You can find the source code for one here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.cl.cam.ac.uk/~cwc22/hashtable/"}]}, {"text": ["A hash table is a mutable mapping of an integer (usually derived from a string) to another value, just like the dict from Python, which your sample code instantiates."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It's called a \"hash table\" because it performs a hash function on the string to return an integer result, and then directly uses that integer to point to the address of your desired data."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "hash function", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Hash_function"}]}, {"text": ["This system makes it extremely extremely quick to access and change your information, even if you have tons of it.", "It also means that the data is unordered because a hash function returns a uniformly random result and puts your data unpredictable all over the map (in a perfect world)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Also note that if you're doing a quick one-off hash, like a two or three static hash for some lookup: look at gperf, which generates a perfect hash function and generates simple code for that hash."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "gperf", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.gnu.org/software/gperf/"}]}], [{"text": ["The above data structure is a dict type."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In C/C++ paralance, a hashmap should be equivalent, Google for hashmap implementation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["There's nothing built into the language or standard library itself but, depending on your requirements, there are a number of ways to do it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If the data set will remain relatively small, the easiest solution is to probably just have an array of structures along the lines of:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n typedef struct {\n    char *key;\n    int  val;\n} tElement;\n</code>\n</pre>\n", "senID": 2}, {"text": ["then use a sequential search to look them up.", "Have functions which insert keys, delete keys and look up keys so that, if you need to change it in future, the API itself won't change.", "Pseudo-code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def init:\n    create g.key[100] as string\n    create g.val[100] as integer\n    set g.size to 0\ndef add (key,val):\n    if lookup(key) != not_found:\n        return already_exists\n    if g.size == 100:\n        return no_space\n    g.key[g.size] = key\n    g.val[g.size] = val\n    g.size = g.size + 1\n    return okay\ndef del (key):\n    pos = lookup (key)\n    if pos == not_found:\n        return no_such_key\n    if pos &lt; g.size - 1:\n        g.key[pos] = g.key[g.size-1]\n        g.val[pos] = g.val[g.size-1]\n    g.size = g.size - 1\ndef find (key):\n    for pos goes from 0 to g.size-1:\n        if g.key[pos] == key:\n            return pos\n    return not_found\n</code>\n</pre>\n", "senID": 4}, {"text": ["Insertion means ensuring it doesn't already exist then just tacking an element on to the end (you'll maintain a separate size variable for the structure).", "Deletion means finding the element then simply overwriting it with the last used element and decrementing the size variable."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Now this isn't the most efficient method in the world but you need to keep in mind that it usually only makes a difference as your dataset gets much larger.", "The difference between a binary tree or hash and a sequential search is irrelevant for, say, 20 entries.", "I've even used bubble sort for small data sets where a more efficient one wasn't available.", "That's because it massively quick to code up and the performance is irrelevant."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Stepping up from there, you can remove the fixed upper size by using a linked list.", "The search is still relatively inefficient since you're doing it sequentially but the same caveats apply as for the array solution above.", "The cost of removing the upper bound is a slight penalty for insertion and deletion."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["If you want a little more performance and a non-fixed upper limit, you can use a binary tree to store the elements.", "This gets rid of the sequential search when looking for keys and is suited to somewhat larger data sets."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["If you don't know how big your data set will be getting, I would consider this the absolute minimum."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "know", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["A hash is probably the next step up from there.", "This performs a function on the string to get a bucket number (usually treated as an array index of some sort).", "This is O(1) lookup but the aim is to have a hash function that only allocates one item per bucket, so that no further processing is required to get the value."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["A degenerate case of \"all items in the same bucket\" is no different to an array or linked list."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["For maximum performance, and assuming the keys are fixed and known in advance, you can actually create your own hashing function based on the keys themselves."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["Knowing the keys up front, you have extra information that allows you to fully optimise a hashing function to generate the actual value so you don't even involve buckets - the value generated by the hashing function can be the desired value itself rather than a bucket to get the value from."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["I had to put one of these together recently for converting textual months (\"January\", etc) in to month numbers.", "You can see the process here."], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/3421881/is-there-a-way-to-make-this-hash-lookup-any-faster"}]}, {"text": ["I mention this possibility because of your \"pre-defined string\" comment.", "If your keys are limited to \"X\" and \"Y\" (as in your example) and you're using a character set with contiguous {W,X,Y} characters (which even covers EBCDIC as well as ASCII though not necessarily every esoteric character set allowed by ISO), the simplest hashing function would be:"], "childNum": 3, "tag": "p", "senID": 15, "childList": [{"text": "\"X\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "\"Y\"", "childNum": 0, "tag": "code", "childList": []}, {"text": "{W,X,Y}", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n char *s = \"X\";\nint val = *s - 'W';\n</code>\n</pre>\n", "senID": 16}, {"text": ["Note that this doesn't work well if you feed it bad data.", "These are ideal for when the data is known to be restricted to certain values.", "The cost of checking data can often swamp the saving given by a pre-optimised hash function like this."], "childNum": 0, "tag": "p", "senID": 17, "childList": []}], [{"text": ["C doesn't have any collection classes.", "C++ has std::map."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You might try searching for C implementations of maps, e.g.", "http://elliottback.com/wp/hashmap-implementation-in-c/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://elliottback.com/wp/hashmap-implementation-in-c/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://elliottback.com/wp/hashmap-implementation-in-c/"}]}], [{"text": ["A 'trie' or a 'hasmap' should do.", "The simplest implementation is an array of struct { char *s; int i }; pairs."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Check out 'trie' in 'include/nscript.h' and 'src/trie.c' here: http://github.com/nikki93/nscript .", "Change the 'trie_info' type to 'int'."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://github.com/nikki93/nscript", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/nikki93/nscript"}]}], [{"text": ["Try a Trie for strings, or a Tree of some sort for integer/pointer types (or anything that can be compared as \"less than\" or \"greater than\" another key).", "Wikipedia has reasonably good articles on both, and they can be implemented in C."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]