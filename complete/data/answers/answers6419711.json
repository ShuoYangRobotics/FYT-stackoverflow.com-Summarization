[[{"text": ["I renamed str to content see senderle's comment"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "content", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def findLine(self, content, search_str):\n    for line in content.splitlines()\n        if search_str in line:\n            return line\n    #or something else because the search_str was not found\n    return None\n</code>\n</pre>\n", "senID": 1}, {"text": ["or if you want a list of all the lines containing sarah"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def findLine(self, str, search_str):\n    return [x for x in str.splitlines() if search_str in x]\n</code>\n</pre>\n", "senID": 3}, {"text": ["search_str being the string you would like to find."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "search_str", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n def findline(filename, search_string):\n    with open(filename, 'r') as infile:\n        for line in infile:\n            if search_string in line:\n                return line\n        else:\n            return None\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You don't need RegEx to do this.", "You could use file.readline() and check if the line contains \"Sara\".", "Return the line if it does.", "Use a for-each loop to check each line in a file."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["EDIT: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def findlines(filename, searchterm):\n    lines = []\n    line = filename.readline()\n\n    while line:\n        if searchterm in line:\n            lines.append(line)\n\n        line = filename.readline()\n\n    return lines\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n def find(name)\n    for line in open('file.txt'):\n        if name in line:\n            return line\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Well, you don't need regular expressions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def findline(search_string, file_name, offset=0):\n    with open(file_name, 'r') as infile:\n        infile.seek(offset)\n        for line in infile\n            if search_string in line:\n               return line\n</code>\n</pre>\n", "senID": 1}, {"text": ["(The above is actually just a combination of others' with the addition of file_name as a function param, and offset, meaning you can now traverse the file and get multiple incidences of your sought string)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n In [6]: lines=\"\"\"1. Tom is a guy\n2. Sara is a woman\n3. Alex is a guy too\"\"\"\n\nIn [10]: lines=lines.splitlines()\n\nIn [11]: def findLine(word):\n   ....:     return filter(lambda x: word in x,lines)\n   ....: \n\nIn [12]: findLine(\"Alex\")\nOut[12]: ['3. Alex is a guy too']\n</code>\n</pre>\n", "senID": 0}]]