[[{"text": ["sqlsoup in sqlalchemy gives you the quickest solution in python I think if you want a clear(ish) one liner .", "Look at the page to see."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sqlsoup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/trac/wiki/SqlSoup"}]}, {"text": ["It should be something like..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n result = [n.Number for n in db.Numbers.filter(db.Numbers.Number &lt; 5).all()]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["LINQ is a language feature of C# and VB.NET.", "It is a special syntax recognized by the compiler and treated specially.", "It is also dependent on another language feature called expression trees."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Expression trees are a little different in that they are not special syntax.", "They are written just like any other class instantiation, but the compiler does treat them specially under the covers by turning a lambda into an instantiation of a run-time abstract syntax tree.", "These can be manipulated at run-time to produce a command in another language (i.e.", "SQL)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "little", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "abstract syntax tree", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Abstract_syntax_tree"}]}, {"text": ["The C# and VB.NET compilers take LINQ syntax, and turn it into lambdas, then pass those into expression tree instantiations.", "Then there are a bunch of framework classes that manipulate these trees to produce SQL.", "You can also find other libraries, both MS-produced and third party, that offer \"LINQ providers\", which basically pop a different AST processer in to produce something from the LINQ other than SQL."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So one obstacle to doing these things in another language is the question whether they support run-time AST building/manipulation.", "I don't know whether any implementations of Python or Boo do, but I haven't heard of any such features."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Look closely at SQLAlchemy.", "This can probably do much of what you want.", "It gives you Python syntax for plain-old SQL that runs on the server."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SQLAlchemy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.sqlalchemy.org/"}]}], [{"text": ["I believe that when IronPython 2.0 is complete, it will have LINQ support (see this thread for some example discussion).", "Right now you should be able to write something like:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this thread", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groups.google.com/group/ironpy/browse_thread/thread/eb6b9eb2241cc68e"}]}, {"code": "<pre>\n<code>\n Queryable.Select(Queryable.Where(someInputSequence, somePredicate), someFuncThatReturnsTheSequenceElement)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Something better might have made it into IronPython 2.0b4 - there's a lot of current discussion about how naming conflicts were handled."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "current discussion", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ironpython-urls.blogspot.com/2008/09/dlr-namespace-change-fire-drill.html"}]}], [{"text": ["A key factor for LINQ is the ability of the compiler to generate expression trees.", "I am using a macro in Nemerle that converts a given Nemerle expression into an Expression tree object.", "I can then pass this to the Where/Select/etc extension methods on IQueryables.", "It's not quite the syntax of C# and VB, but it's close enough for me. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I got the Nemerle macro via a link on this post: \nhttp://groups.google.com/group/nemerle-dev/browse_thread/thread/99b9dcfe204a578e"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://groups.google.com/group/nemerle-dev/browse_thread/thread/99b9dcfe204a578e", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groups.google.com/group/nemerle-dev/browse_thread/thread/99b9dcfe204a578e"}]}, {"text": ["It should be possible to create a similar macro for Boo.", "It's quite a bit of work however, given the large set of possible expressions you need to support.", "Ayende has given a proof of concept here:\nhttp://ayende.com/Blog/archive/2008/08/05/Ugly-Linq.aspx"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://ayende.com/Blog/archive/2008/08/05/Ugly-Linq.aspx", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://ayende.com/Blog/archive/2008/08/05/Ugly-Linq.aspx"}]}], [{"text": ["Boo supports list generator expressions using the same syntax as python.", "For more information on that, check out the Boo documentation on Generator expressions and List comprehensions."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Generator expressions", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://boo.codehaus.org/Generator+Expressions"}, {"href": "http://boo.codehaus.org/List+Generators", "text": "List comprehensions", "childNum": 0, "tag": "a", "childList": []}]}]]