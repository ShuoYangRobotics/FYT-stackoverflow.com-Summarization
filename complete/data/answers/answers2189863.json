[[{"text": ["The double slash is simply string escaping - you need to escape slashes in string literals.", "Printing lst[0] before the loop will print it without the slash.", "If you want to really include a double slash in your literal, use the raw string syntax:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "lst[0]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lst = ['C:\\\\', 'C:\\\\Windows', 'C:\\\\Program Files']\n&gt;&gt;&gt; lst[0]\n'C:\\\\'\n&gt;&gt;&gt; print lst[0]\nC:\\\n&gt;&gt;&gt; lst2 = [r'C:\\\\', r'C:\\\\Windows', r'C:\\\\Program Files']\n&gt;&gt;&gt; lst2[0]\n'C:\\\\\\\\'\n&gt;&gt;&gt; print lst2[0]\nC:\\\\\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: If you want to double the slashes, you can do a simple string replace:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "want", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 'C:\\\\Windows'\n&gt;&gt;&gt; print x\nC:\\Windows\n&gt;&gt;&gt; x = x.replace('\\\\', '\\\\\\\\')\n&gt;&gt;&gt; print x\nC:\\\\Windows\n</code>\n</pre>\n", "senID": 3}], [{"text": ["In Python, when you say"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'C:\\\\'\n</code>\n</pre>\n", "senID": 1}, {"text": ["s contains three characters: C, : and \\.", "This can be easily seen by:"], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "C", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": ":", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "\\", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; len(s)\n3\n</code>\n</pre>\n", "senID": 3}, {"text": ["In Python, as in many other languages, a backslash is used to escape certain characters.", "For example, a newline is \\n, a character with value 0 is \\x00, etc.", "A \"real\" backslash is \\\\.", "So, to actually get two backslashes, you need to escape both, giving:"], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "\\n", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "\\x00", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "\\\\", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'C:\\\\\\\\'\n</code>\n</pre>\n", "senID": 5}, {"text": ["But, Windows is perfectly happy with / as the separator, so you can do:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "/", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'C:/'\n</code>\n</pre>\n", "senID": 7}], [{"text": ["\\\\ is an escape sequence which prints \\ as the output.", "If you want to print C:\\\\, you'll have to use C:\\\\\\\\ as the input string(or use raw strings ...).", "I can't see why you would want that.", "Although if you particularly want to, there are different options available."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "\\\\", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\\", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "C:\\\\", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "C:\\\\\\\\", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["you need \\\\?", "you can use print repr(pth)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "\\\\", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "print repr(pth)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["If possible, try to use os.path.join() for creating your windows path.", "You don't have to meddle with slashes as much."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.path.join()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/os.path.html"}]}, {"text": ["eg"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from os.path import join\nrootdir=\"C:\\\\\"\npath1 = join(rootdir,\"windows\")\npath2 = join(rootdir,\"Program Files\")\nlst = [ rootdir , path1, path2 ]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Use / for sanity on windows (most programs work with both forms of slashes), but failing that, use r'' whenever you are dealing with backslashed path names."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n r'C:\\My\\Windows\\Path'\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you really want double backslashes, then that works too:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n r'C:\\\\My\\\\Escaped\\\\Path'\n</code>\n</pre>\n", "senID": 3}]]