[[{"text": ["On stripping assert statements: this is a standard option in the C world, where many people believe part of the definition of ASSERT is that it doesn't run in production code.", "Whether stripping them out or not makes a difference depends less on how many asserts there are than on how much work those asserts do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def foo(x):\n    assert x in huge_global_computation_to_check_all_possible_x_values()\n    # ok, go ahead and use x...\n</code>\n</pre>\n", "senID": 1}, {"text": ["Most asserts are not like that, of course, but it's important to remember that you can do stuff like that."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["As for stripping docstrings, it does seem like a quaint holdover from a simpler time, though I guess there are memory-constrained environments where it could make a difference."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Another use for the -O flag is that the value of the __debug__ builtin variable is set to False."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "-O", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__debug__", "childNum": 0, "tag": "code", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So, basically, your code can have a lot of \"debugging\" paths like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if __debug__:\n     # output all your favourite debugging information\n     # and then more\n</code>\n</pre>\n", "senID": 2}, {"text": ["which, when running under -O, won't even be included as bytecode in the .pyo file; a poor man's C-ish #ifdef."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "-O", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ".pyo", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Remember that docstrings are being dropped only when the flag is -OO."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "only", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "-OO", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You've pretty much figured it out: It does practically nothing at all.", "You're almost never going to see speed or memory gains, unless you're severely hurting for RAM."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I have never encountered a good reason to use -O. I have always assumed its main purpose is in case at some point in the future some meaningful optimization is added."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "-O", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I imagine that the heaviest users of -O are py2exe py2app and similar."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "-O", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://www.py2exe.org/", "text": "py2exe", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://pypi.python.org/pypi/py2app/", "text": "py2app", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["I've personally never found a use for -O directly."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "-O", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you have assertions in frequently called code (e.g.", "in an inner loop), stripping them can certainly make a difference.", "Extreme example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ python    -c 'import timeit;print timeit.repeat(\"assert True\")'\n[0.088717937469482422, 0.088625192642211914, 0.088654994964599609]\n$ python -O -c 'import timeit;print timeit.repeat(\"assert True\")'\n[0.029736995697021484, 0.029587030410766602, 0.029623985290527344]\n</code>\n</pre>\n", "senID": 1}, {"text": ["In real scenarios, savings will usually be much less."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Stripping the docstrings might reduce the size of your code, and hence your working set."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In many cases, the performance impact will be negligible, but as always with optimizations, the only way to be sure is to measure. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]