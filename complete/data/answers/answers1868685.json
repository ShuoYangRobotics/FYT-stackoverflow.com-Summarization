[[{"text": ["The first argument for a python class method is the self variable.", "If you call classInstance.method(parameter), the method is invoked as method(self, parameter)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "classInstance.method(parameter)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "method(self, parameter)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So, when you're defining your class, do something like this: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class MyClass(Object): \n    def my_method(self, parameter): \n        print parameter\n</code>\n</pre>\n", "senID": 2}, {"text": ["You might want to read through the Python tutorial."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Python tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html"}]}], [{"text": ["Because you're not passing the object (generally referred to as self) as the first parameter to your methods.", "In Python, a call like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n my_obj.do_something(my_other_obj)\n</code>\n</pre>\n", "senID": 1}, {"text": ["is essentially desugared into a call like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n MyClass.do_something(my_obj, my_other_obj)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Thus, Python is looking for a method signature like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class MyClass(object):\n    def do_something(self, my_other_obj):\n        self.my_var = my_other_obj\n</code>\n</pre>\n", "senID": 5}, {"text": ["So you should pass the object (generally called self) as the first parameter to a method."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "method", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["You need to explicitly pass self variable, which represents an instance of a class, e.g."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def set(self, file):\n    filepermission = os.stat(file)\n    self.user_read()\n    self.user_write()\n    self.user_exec()\n</code>\n</pre>\n", "senID": 1}, {"text": ["It doesn't have to be called self but it's a good convention to follow, and your code will be understood by other programmers."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["self is an implicit first argument to all class member functions.", "So the i.set(place) call actually calls set(i, place).", "You need to take this into account when defining your class, and write def set(self, file) instead."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "i.set(place)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "set(i, place)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "def set(self, file)", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["set() is a method of class chkup.", "When you call i.set(place), python keeps track of the instance i using the first argument to the method.", "Generally, every instance method will receive at least one argument, called self, and subsequent arguments follow.", "You should redefine your class:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "set()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "chkup", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "i.set(place)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n class chkup:\n    def set(self, file):\n        \"etc...\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["You might look up \"self\" and python on stackoverflow:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://stackoverflow.com/questions/625083/python-init-and-self-what-do-they-do"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://stackoverflow.com/questions/625083/python-init-and-self-what-do-they-do", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/625083/python-init-and-self-what-do-they-do"}]}, {"text": ["etc. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["In a class, you need to take into account the self parameter for method members."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Since you're treating set as a bound (instance) method of a class, you must explicitly receive the instance as your first argument.", "It's called \"self\" by convention."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def set(self, file):\n    filepermission = os.stat(file)\n    user_read()\n    user_write()\n    user_exec()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["in order to define a non-static method you must provide \"self\" as a first argument like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["class chkup:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def set(self,file):\n            filepermission = os.stat(file)\n</code>\n</pre>\n", "senID": 2}, {"text": ["#this is done to make non static methods,"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["#the call of set() here done by"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["chk=chkup()"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["chk.set(fileName) # note that you dont provide \"self\" when calling"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Thats because python automatically passes the current object as an argument to all the methods in the class,so when you pass 2 arguments to a function,python appends the third argument which is the current object,the method prototype should consider this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]