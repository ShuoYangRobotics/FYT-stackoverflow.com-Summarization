[[{"text": ["Use break and continue to do this.", "Breaking nested loops can be done in Python using the following:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "break", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "continue", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n for a in range(...):\n   for b in range(..):\n      if some condition:\n         # break the inner loop\n         break\n   else:\n      # will be called if the previous loop did not end with a `break` \n      continue\n   # but here we end up right after breaking the inner loop, so we can\n   # simply break the outer loop as well\n   break\n</code>\n</pre>\n", "senID": 1}, {"text": ["Another way is to wrap everything in a function and use return to escape from the loop."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "return", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["There are several ways to do it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n n = L[0][0]\nm = len(A)\nfound = False\nfor i in range(m):\n   if found:\n      break\n   for j in range(m):\n     if L[i][j] != n: \n       found = True\n       break\n</code>\n</pre>\n", "senID": 1}, {"text": ["Pros: easy to understand\nCons: additional conditional statement for every loop"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n n = L[0][0]\nm = len(A)\n\ntry:\n  for x in range(3):\n    for z in range(3):\n     if L[i][j] != n: \n       raise StopIteration\nexcept StopIteration:\n   pass\n</code>\n</pre>\n", "senID": 3}, {"text": ["Pros: very straightforward\nCons: you use Exception outside of their semantic"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def is_different_value(l, elem, size):\n  for x in range(size):\n    for z in range(size):\n     if l[i][j] != elem: \n       return True\n  return False\n\nif is_different_value(L, L[0][0], len(A)):\n  print \"Doh\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["pros: much cleaner and still efficient\ncons: yet feels like C"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def is_different_value(iterable):\n  first = iterable[0][0]\n  for l in iterable:\n    for elem in l:\n       if l[i][j] != first: \n          return True\n  return False\n\nif is_different_value(L):\n  print \"Doh\"\n</code>\n</pre>\n", "senID": 7}, {"text": ["pros: still clean and efficient\ncons: you reinvdent the wheel"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n def is_different_value(iterable):\n  first = iterable[0][0]\n  return  any(any((cell != first for cell in col)) for elem in iterable)):\n\nif is_different_value(L):\n  print \"Doh\"\n</code>\n</pre>\n", "senID": 9}, {"text": ["pros: you'll feel empowered with dark powers\ncons: people that will read you code may start to dislike you"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["Try to simply use break statement."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "break", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops"}]}, {"text": ["Also you can use the following code as an example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a = [[0,1,0], [1,0,0], [1,1,1]]\nb = [[0,0,0], [0,0,0], [0,0,0]]\n\ndef check_matr(matr, expVal):    \n    for row in matr:\n        if len(set(row)) &gt; 1 or set(row).pop() != expVal:\n            print 'Wrong'\n            break# or return\n        else:\n            print 'ok'\n    else:\n        print 'empty'\ncheck_matr(a, 0)\ncheck_matr(b, 0)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Use the break statement: http://docs.python.org/reference/simple_stmts.html#break"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/reference/simple_stmts.html#break", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/simple_stmts.html#break"}]}], [{"text": ["Others ways to do the same is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n el = L[0][0]\nm=len(L)\n\nprint L == [[el]*m]*m\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n first_el = L[0][0]\nprint all(el == first_el for inner_list in L for el in inner_list)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["In order to jump out of a loop, you need to use the break statement."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n n=L[0][0]\nm=len(A)\nfor i in range(m):\n for j in range(m):\n   if L[i][j]!=n:\n       break;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here you have the official Python manual with the explanation about break and continue, and other flow control statements:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://docs.python.org/tutorial/controlflow.html"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://docs.python.org/tutorial/controlflow.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html"}]}, {"text": ["EDITED: As a commenter pointed out, this does only end the inner loop.", "If you need to terminate both loops, there is no \"easy\" way (others have given you a few solutions).", "One possiblity would be to raise an exception:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def f(L, A):\n    try:\n        n=L[0][0]\n        m=len(A)\n        for i in range(m):\n             for j in range(m):\n                 if L[i][j]!=n:\n                     raise RuntimeError( \"Not equal\" )\n        return True\n    except:\n        return False\n</code>\n</pre>\n", "senID": 5}], [{"text": ["To achieve this you would do something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n n=L[0][0]\nm=len(A)\nfor i in range(m):\n    for j in range(m):\n        if L[i][j]==n:\n            //do some processing\n        else:\n            break;\n</code>\n</pre>\n", "senID": 1}]]