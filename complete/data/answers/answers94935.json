[[{"text": ["range creates a list, so if you do range(1, 10000000) it creates a list in memory with 10000000 elements."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["xrange is a generator, so it evaluates lazily.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This is true, but in Python 3, range will be replaced with xrange().", "If you need to actually generate the list, you will need to do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list(range(1,100))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["xrange only stores the range params and generates the numbers on demand.", "However the C implementation of Python currently restricts its args to C longs:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "xrange", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n xrange(2**32-1, 2**32+1)  # OverflowError: cannot convert to int\nrange(2**32-1, 2**32+1)   # OK --&gt; [4294967295L, 4294967296L]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that in Python 3.0 there is only range and it behaves exactly like the 2.x xrange."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "range", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "xrange", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["xrange returns an iterator and only keeps one number in memory at a time.", "range keeps the entire list of numbers in memory."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Remember, use the timeit module to test which of small snipps of code is faster!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ python -m timeit 'for i in range(1000000):' ' pass'\n10 loops, best of 3: 90.5 msec per loop\n$ python -m timeit 'for i in xrange(1000000):' ' pass'\n10 loops, best of 3: 51.1 msec per loop\n</code>\n</pre>\n", "senID": 1}, {"text": ["Personally, I always use range(), unless I were dealing with really huge lists -- as you can see, time-wise, for a list of a million entries, the extra overhead is only 0.04 seconds.", "And as Corey points out, in Python 3.0 xrange will go away and range will give you nice iterator behaviour anyway."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Do spend some time with the Library Reference.", "The more familiar you are with it, the faster you can find answers to questions like this.", "Especially important are the first few chapters about builtin objects and types."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Library Reference", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/typesseq-xrange.html"}]}, {"text": ["Another way to find quick information about a Python construct is the docstring and the help-function:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print xrange.__doc__ # def doc(x): print x.__doc__ is super useful\nhelp(xrange)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["see here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://avinashv.net/2008/05/pythons-range-and-xrange/"}]}], [{"text": ["range generates the entire list and returns it.", "xrange does not -- it generates the numbers in the list on demand."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["xrange uses an iterator (generates values on the fly), range returns a list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It is for optimization reasons."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["range() will create a list of values from start to end (0 .. 20 in your example).", "This will become an expensive operation on very large ranges."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["xrange() on the other hand is much more optimised.", "it will only compute the next value when needed (via an xrange sequence object) and does not create a list of all values like range() does."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["This brings you two advantages:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["When testing range against xrange in a loop (I know I should use timeit, but this was swiftly hacked up from memory using a simple list comprehension example) I found the following:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "timeit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/timeit.html"}]}, {"code": "<pre>\n<code>\n import time\n\nfor x in range(1, 10):\n\n    t = time.time()\n    [v*10 for v in range(1, 10000)]\n    print \"range:  %.4f\" % ((time.time()-t)*100)\n\n    t = time.time()\n    [v*10 for v in xrange(1, 10000)]\n    print \"xrange: %.4f\" % ((time.time()-t)*100)\n</code>\n</pre>\n", "senID": 1}, {"text": ["which gives:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $python range_tests.py\nrange:  0.4273\nxrange: 0.3733\nrange:  0.3881\nxrange: 0.3507\nrange:  0.3712\nxrange: 0.3565\nrange:  0.4031\nxrange: 0.3558\nrange:  0.3714\nxrange: 0.3520\nrange:  0.3834\nxrange: 0.3546\nrange:  0.3717\nxrange: 0.3511\nrange:  0.3745\nxrange: 0.3523\nrange:  0.3858\nxrange: 0.3997 &lt;- garbage collection?\n</code>\n</pre>\n", "senID": 3}, {"text": ["Or, using xrange in the for loop:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n range:  0.4172\nxrange: 0.3701\nrange:  0.3840\nxrange: 0.3547\nrange:  0.3830\nxrange: 0.3862 &lt;- garbage collection?\nrange:  0.4019\nxrange: 0.3532\nrange:  0.3738\nxrange: 0.3726\nrange:  0.3762\nxrange: 0.3533\nrange:  0.3710\nxrange: 0.3509\nrange:  0.3738\nxrange: 0.3512\nrange:  0.3703\nxrange: 0.3509\n</code>\n</pre>\n", "senID": 5}, {"text": ["Is my snippet testing properly?", "Any comments on the slower instance of xrange?", "Or a better example :-)"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]