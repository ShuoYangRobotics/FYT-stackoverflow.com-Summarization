[[{"text": ["You need to add the path to the currently executing module to the sys.path variable.", "Since you called it on the command line, the path to the script will always be in sys.argv[0]."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nimport os\nsys.path.append(os.path.split(sys.argv[0])[0])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now when import searches for the module, it will also look in the folder that hosts the agent.py file."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Actually your example works because checks.py is in the same directory as agent.py, but say checks.py was in the preceeding directory, eg;"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n agent/agent.py\nchecks.py\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you could do the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nif not path in sys.path:\n    sys.path.insert(1, path)\ndel path\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note the use of __file__."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "__file__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You should NOT need to fiddle with sys.path.", "To quote from the Python 2.6 docs for sys.path:\n\"\"\"\nAs initialized upon program startup, the first item of this list, path[0], is the directory containing the script that was used to invoke the Python interpreter.", "If the script directory is not available (e.g.", "if the interpreter is invoked interactively or if the script is read from standard input), path[0] is the empty string, which directs Python to search modules in the current directory first.", "Notice that the script directory is inserted before the entries inserted as a result of PYTHONPATH.", "\"\"\""], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "You should NOT need to fiddle with sys.path.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n === amod.py ===\ndef whoami():\n    return __file__\n\n=== ascript.py ===\nimport sys\nprint \"sys.argv\", sys.argv\nprint \"sys.path\", sys.path\nimport amod\nprint \"amod __file__\", amod.whoami()\n\n=== result of running ascript.py from afar ===\nC:\\somewhere_else&gt;\\python26\\python \\junk\\timport\\ascript.py\nsys.argv ['\\\\junk\\\\timport\\\\ascript.py']\nsys.path ['C:\\\\junk\\\\timport', 'C:\\\\WINDOWS\\\\system32\\\\python26.zip', SNIP]\namod __file__ C:\\junk\\timport\\amod.py\n</code>\n</pre>\n", "senID": 1}, {"text": ["and if it's re-run, the last line changes of course to ...amod.pyc.", "This appears not to be a novelty, it works with Python 2.1 and 1.5.2."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Debug hints for you: Try two simple files like I have.", "Try running Python with -v and -vv.", "Show us the results of your failing tests, including full traceback and error message, and your two files.", "Tell us what platform you are running on, and what version of Python.", "Check the permissions on the checks.py file.", "Is there a checks.something_else that's causing interference?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["There are several ways to add things to the PYTHONPATH."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PYTHONPATH", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Read http://docs.python.org/library/site.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/site.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/site.html"}]}], [{"text": ["If you know full path to check.py use this recipe (http://code.activestate.com/recipes/159571/)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://code.activestate.com/recipes/159571/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/159571/"}]}, {"text": ["If you want to add directory to system path -- this recipe (http://code.activestate.com/recipes/52662/).", "In this case I have to determine application directory (sys.argv[0]) an pass this value to AddSysPath function.", "If you want to look at production sample please leave a comment on this thread so I post it later."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.activestate.com/recipes/52662/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/52662/"}]}, {"text": ["Regards."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I think you should consider making the agent directory into a proper Python package.", "Then you place this package anywhere on the python path, and you can import checks as "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from agent import checks\n</code>\n</pre>\n", "senID": 1}, {"text": ["See http://docs.python.org/tutorial/modules.html"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/tutorial/modules.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html"}]}]]