[[{"text": ["Your example can be written in Python as"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import combinations\nprint list(combinations([\"hel\", \"lo\", \"bye\"], 2))\n</code>\n</pre>\n", "senID": 1}, {"text": ["To combine the output to strings again:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print [\"\".join(a) for a in combinations([\"hel\", \"lo\", \"bye\"], 2)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you interested in the actual implementation of this function, have a look at the documentation."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#itertools.combinations"}]}], [{"text": ["itertools.permutations can do that for you."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "itertools.permutations", "tag": "a", "pos": 0, "childList": [{"text": "itertools.permutations", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html#itertools.permutations"}, {"text": "itertools.permutations", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = ['hel', 'lo', 'bye']\n&gt;&gt;&gt; list(itertools.permutations(l, 2))\n[('hel', 'lo'), ('hel', 'bye'), ('lo', 'hel'), ('lo', 'bye'), ('bye', 'hel'), ('bye', 'lo')]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or if you want combinations, you can use itertools.combinations."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "itertools.combinations", "tag": "a", "pos": 0, "childList": [{"text": "itertools.combinations", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/itertools.html#itertools.combinations"}, {"text": "itertools.combinations", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = ['hel', 'lo', 'bye']\n&gt;&gt;&gt; list(itertools.combinations(l, 2))\n[('hel', 'lo'), ('hel', 'bye'), ('lo', 'bye')]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Given that other languages are acceptable:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/perl\n\nuse strict; use warnings;\nuse Algorithm::Combinatorics qw(permutations);\n\nmy $data = [ qw( hel lo bye ) ];\nmy $it = permutations($data);\n\nwhile ( my $p = $it-&gt;next ) {\n    print @$p, \"\\n\";\n}\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\nhellobye\nhelbyelo\nlohelbye\nlobyehel\nbyehello\nbyelohel\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n a = ['hel', 'lo', 'bye']\nprint '\\n'.join(''.join(x) for x in itertools.permutations(a, 2))\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Easy in python with itertools."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here is the token permutation example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import itertools\n\ntokens = [\"hel\", \"lo\", \"bye\"]\n\nfor i in range(1, len(tokens) + 1):\n    for p in itertools.permutations(tokens, i):\n        print \"\".join(p)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Alternatively, this treats each character as a token:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import itertools\n\ntokens = [\"hel\", \"lo\", \"bye\"]\n\nchars = \"\".join(tokens)\nfor i in range(1, len(chars) + 1):\n    for p in itertools.permutations(chars, i):\n        print \"\".join(p)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Python has a permutations too.", ":)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "permutations", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html#itertools.permutations"}]}], [{"text": ["Update: I see I wasn't explicit enough."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Haskell has a permutations function that would help:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "permutations", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://haskell.org/ghc/docs/6.12.2/html/libraries/base-4.2.0.1/Data-List.html#v%3Apermutations"}]}, {"code": "<pre>\n<code>\n import Data.List\npermutations [\"hel\",\"lo\",\"bye\"] ==\n[[\"hel\",\"lo\",\"bye\"],[\"lo\",\"hel\",\"bye\"],[\"bye\",\"lo\",\"hel\"],\n [\"lo\",\"bye\",\"hel\"],[\"bye\",\"hel\",\"lo\"],[\"hel\",\"bye\",\"lo\"]]\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you want each permutation concatenated, use"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n map concat (permutations [\"hel\",\"lo\",\"bye\"]) ==\n[\"hellobye\",\"lohelbye\",\"byelohel\",\"lobyehel\",\"byehello\",\"helbyelo\"]\n</code>\n</pre>\n", "senID": 4}, {"text": ["If you actually want combinations of two substrings (like your example output) instead of all permutations of substrings, as @Sven noticed, use the Math.Combinatorics.Graph module and:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "combinations", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "permutations", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n map concat (combinationsOf 2 [\"hel\",\"lo\",\"bye\"])\n</code>\n</pre>\n", "senID": 6}, {"text": ["That matches your example data in some respects but not others.", "I could go on to speculate that you want \"all possible strings\" as the title says, or all permutations of two-token subsets, or what have you, but it's kind of pointless to speculate since you've already accepted an answer."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["Looks like you want permutations:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "permutations", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from itertools import permutations\n\n# easy way to make a list for words\nwords = 'hel lo bye'.split()\n\n# fetch two-word permutations, joined into a string\nfor word in [''.join(s) for s in permutations(words,2)]:\n    print word\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n hello\nhelbye\nlohel\nlobye\nbyehel\nbyelo\n</code>\n</pre>\n", "senID": 2}]]