[[{"text": ["Personally, one of the things I love about python is the tuple-dict combination.", "What you have here is effectively a 2d array (where x = fruit name and y = color), and I am a big booster of the dict of tuples for implementing 2d arrays.", "So in short, I think you've got a good approach."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Note that you can't use dicts as keys in a dict without doing some extra work, so that's not a very good solution. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["That said, you should also consider namedtuple().", "That way you could do this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "namedtuple()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/library/collections.html#collections.namedtuple"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Fruit = namedtuple(\"Fruit\", [\"name\", \"color\"])\n&gt;&gt;&gt; f = Fruit(name=\"banana\", color=\"red\")\n&gt;&gt;&gt; print f\nFruit(name='banana', color='red')\n&gt;&gt;&gt; f.name\n'banana'\n&gt;&gt;&gt; f.color\n'red'\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now you can use your fruitcount dict:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; fruitcount = {Fruit(\"banana\", \"red\"):5}\n&gt;&gt;&gt; fruitcount[f]\n5\n</code>\n</pre>\n", "senID": 5}, {"text": ["Other tricks:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; fruits = fruitcount.keys()\n&gt;&gt;&gt; fruits.sort()\n&gt;&gt;&gt; print fruits\n[Fruit(name='apple', color='green'), \n Fruit(name='apple', color='red'), \n Fruit(name='banana', color='blue'), \n Fruit(name='strawberry', color='blue')]\n&gt;&gt;&gt; fruits.sort(key=lambda x:x.color)\n&gt;&gt;&gt; print fruits\n[Fruit(name='banana', color='blue'), \n Fruit(name='strawberry', color='blue'), \n Fruit(name='apple', color='green'), \n Fruit(name='apple', color='red')]\n</code>\n</pre>\n", "senID": 7}, {"text": ["Echoing chmullig, to get a list of all colors of one fruit, you would have to filter the keys, i.e. "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n bananas = [fruit for fruit in fruits if fruit.name=='banana']\n</code>\n</pre>\n", "senID": 9}], [{"text": ["A dictionary probably isn't what you should be using in this case.", "A more full featured library would be a better alternative.", "Probably a real database.", "The easiest would be sqlite.", "You can keep the whole thing in memory by passing in the string ':memory:' instead of a filename."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sqlite", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sqlite3.html#module-sqlite3"}]}, {"text": ["If you do want to continue down this path, you can do it with the extra attributes in the key or the value.", "However a dictionary can't be the key to a another dictionary, but a tuple can.", "The docs explain what's allowable.", "It must be an immutable object, which includes strings, numbers and tuples that contain only strings and numbers (and more tuples containing only those types recursively...). "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "The docs", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#dictionaries"}]}, {"text": ["You could do your first example with d = {('apple', 'red') : 4}, but it'll be very hard to query for what you want.", "You'd need to do something like this:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "d = {('apple', 'red') : 4}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #find all apples\napples = [d[key] for key in d.keys() if key[0] == 'apple']\n\n#find all red items\nred = [d[key] for key in d.keys() if key[1] == 'red']\n\n#the red apple\nredapples = d[('apple', 'red')]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You could have a dictionary where the entries are a list of other dictionaries:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n fruit_dict = dict()\nfruit_dict['banana'] = [{'yellow': 24}]\nfruit_dict['apple'] = [{'red': 12}, {'green': 14}]\nprint fruit_dict\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Edit:  As eumiro pointed out, you could use a dictionary of dictionaries:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n fruit_dict = dict()\nfruit_dict['banana'] = {'yellow': 24}\nfruit_dict['apple'] = {'red': 12, 'green': 14}\nprint fruit_dict\n</code>\n</pre>\n", "senID": 4}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You want to use two keys independently, so you have two choices:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["With keys as tuples, you just filter the keys with given second component and sort it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n blue_fruit = sorted([k for k in data.keys() if k[1] == 'blue'])\nfor k in blue_fruit:\n  print k[0], data[k] # prints 'banana 24', etc\n</code>\n</pre>\n", "senID": 1}, {"text": ["Sorting works because tuples have natural ordering if their components have natural ordering."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["With keys as rather full-fledged objects, you just filter by k.color == 'blue'. "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "k.color == 'blue'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You can't really use dicts as keys, but you can create a simplest class like class Foo(object): pass and add any attributes to it on the fly:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "class Foo(object): pass", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n k = Foo()\nk.color = 'blue'\n</code>\n</pre>\n", "senID": 5}, {"text": ["These instances can serve as dict keys, but beware their mutability!"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Your best option will be to create a simple data structure to model what you have.", "Then you can store these objects in a simple list and sort/retrieve them any way you wish."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For this case, I'd use the following class:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Fruit:\n    def __init__(self, name, color, quantity): \n        self.name = name\n        self.color = color\n        self.quantity = quantity\n\n    def __str__(self):\n        return \"Name: %s, Color: %s, Quantity: %s\" % \\\n     (self.name, self.color, self.quantity)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Then you can simply construct \"Fruit\" instances and add them to a list, as shown in the following manner:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n fruit1 = Fruit(\"apple\", \"red\", 12)\nfruit2 = Fruit(\"pear\", \"green\", 22)\nfruit3 = Fruit(\"banana\", \"yellow\", 32)\nfruits = [fruit3, fruit2, fruit1]\n</code>\n</pre>\n", "senID": 4}, {"text": ["The simple list fruits will be much easier, less confusing, and better-maintained.  "], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "fruits", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Some examples of use:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Some examples of use:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["All outputs below is the result after running the given code snippet followed by:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n for fruit in fruits:\n    print fruit\n</code>\n</pre>\n", "senID": 8}, {"text": ["Unsorted list:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "Unsorted list:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Displays:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n Name: banana, Color: yellow, Quantity: 32\nName: pear, Color: green, Quantity: 22\nName: apple, Color: red, Quantity: 12\n</code>\n</pre>\n", "senID": 11}, {"text": ["Sorted alphabetically by name:"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "Sorted alphabetically by name:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n fruits.sort(key=lambda x: x.name.lower())\n</code>\n</pre>\n", "senID": 13}, {"text": ["Displays:"], "childNum": 0, "tag": "p", "senID": 14, "childList": []}, {"code": "<pre>\n<code>\n Name: apple, Color: red, Quantity: 12\nName: banana, Color: yellow, Quantity: 32\nName: pear, Color: green, Quantity: 22\n</code>\n</pre>\n", "senID": 15}, {"text": ["Sorted by quantity:"], "childNum": 1, "tag": "p", "senID": 16, "childList": [{"text": "Sorted by quantity:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n fruits.sort(key=lambda x: x.quantity)\n</code>\n</pre>\n", "senID": 17}, {"text": ["Displays:"], "childNum": 0, "tag": "p", "senID": 18, "childList": []}, {"code": "<pre>\n<code>\n Name: apple, Color: red, Quantity: 12\nName: pear, Color: green, Quantity: 22\nName: banana, Color: yellow, Quantity: 32\n</code>\n</pre>\n", "senID": 19}, {"text": ["Where color == red:"], "childNum": 1, "tag": "p", "senID": 20, "childList": [{"text": "Where color == red:", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n red_fruit = filter(lambda f: f.color == \"red\", fruits)\n</code>\n</pre>\n", "senID": 21}, {"text": ["Displays:"], "childNum": 0, "tag": "p", "senID": 22, "childList": []}, {"code": "<pre>\n<code>\n Name: apple, Color: red, Quantity: 12\n</code>\n</pre>\n", "senID": 23}], [{"text": ["database, dict of dicts, dictionary of list of dictionaries, named tuple (it's a subclass), sqlite, redundancy...", "I didn't believe my eyes.", "What else ?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["\"It might well be that dictionaries with tuples as keys are not the proper way to handle this situation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["\"my gut feeling is that a database is overkill for the OP's needs; \""], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["yeah !", "I thought"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["So,  in my opinion, a list of tuples is plenty enough :"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from operator import itemgetter\n\nli = [  ('banana',     'blue'   , 24) ,\n        ('apple',      'green'  , 12) ,\n        ('strawberry', 'blue'   , 16 ) ,\n        ('banana',     'yellow' , 13) ,\n        ('apple',      'gold'   , 3 ) ,\n        ('pear',       'yellow' , 10) ,\n        ('strawberry', 'orange' , 27) ,\n        ('apple',      'blue'   , 21) ,\n        ('apple',      'silver' , 0 ) ,\n        ('strawberry', 'green'  , 4 ) ,\n        ('banana',     'brown'  , 14) ,\n        ('strawberry', 'yellow' , 31) ,\n        ('apple',      'pink'   , 9 ) ,\n        ('strawberry', 'gold'   , 0 ) ,\n        ('pear',       'gold'   , 66) ,\n        ('apple',      'yellow' , 9 ) ,\n        ('pear',       'brown'  , 5 ) ,\n        ('strawberry', 'pink'   , 8 ) ,\n        ('apple',      'purple' , 7 ) ,\n        ('pear',       'blue'   , 51) ,\n        ('chesnut',    'yellow',  0 )   ]\n\n\nprint set( u[1] for u in li ),': all potential colors'\nprint set( c for f,c,n in li if n!=0),': all effective colors'\nprint [ c for f,c,n in li if f=='banana' ],': all potential colors of bananas'\nprint [ c for f,c,n in li if f=='banana' and n!=0],': all effective colors of bananas'\nprint\n\nprint set( u[0] for u in li ),': all potential fruits'\nprint set( f for f,c,n in li if n!=0),': all effective fruits'\nprint [ f for f,c,n in li if c=='yellow' ],': all potential fruits being yellow'\nprint [ f for f,c,n in li if c=='yellow' and n!=0],': all effective fruits being yellow'\nprint\n\nprint len(set( u[1] for u in li )),': number of all potential colors'\nprint len(set(c for f,c,n in li if n!=0)),': number of all effective colors'\nprint len( [c for f,c,n in li if f=='strawberry']),': number of potential colors of strawberry'\nprint len( [c for f,c,n in li if f=='strawberry' and n!=0]),': number of effective colors of strawberry'\nprint\n\n# sorting li by name of fruit\nprint sorted(li),'  sorted li by name of fruit'\nprint\n\n# sorting li by number \nprint sorted(li, key = itemgetter(2)),'  sorted li by number'\nprint\n\n# sorting li first by name of color and secondly by name of fruit\nprint sorted(li, key = itemgetter(1,0)),'  sorted li first by name of color and secondly by name of fruit'\nprint\n</code>\n</pre>\n", "senID": 5}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n set(['blue', 'brown', 'gold', 'purple', 'yellow', 'pink', 'green', 'orange', 'silver']) : all potential colors\nset(['blue', 'brown', 'gold', 'purple', 'yellow', 'pink', 'green', 'orange']) : all effective colors\n['blue', 'yellow', 'brown'] : all potential colors of bananas\n['blue', 'yellow', 'brown'] : all effective colors of bananas\n\nset(['strawberry', 'chesnut', 'pear', 'banana', 'apple']) : all potential fruits\nset(['strawberry', 'pear', 'banana', 'apple']) : all effective fruits\n['banana', 'pear', 'strawberry', 'apple', 'chesnut'] : all potential fruits being yellow\n['banana', 'pear', 'strawberry', 'apple'] : all effective fruits being yellow\n\n9 : number of all potential colors\n8 : number of all effective colors\n6 : number of potential colors of strawberry\n5 : number of effective colors of strawberry\n\n[('apple', 'blue', 21), ('apple', 'gold', 3), ('apple', 'green', 12), ('apple', 'pink', 9), ('apple', 'purple', 7), ('apple', 'silver', 0), ('apple', 'yellow', 9), ('banana', 'blue', 24), ('banana', 'brown', 14), ('banana', 'yellow', 13), ('chesnut', 'yellow', 0), ('pear', 'blue', 51), ('pear', 'brown', 5), ('pear', 'gold', 66), ('pear', 'yellow', 10), ('strawberry', 'blue', 16), ('strawberry', 'gold', 0), ('strawberry', 'green', 4), ('strawberry', 'orange', 27), ('strawberry', 'pink', 8), ('strawberry', 'yellow', 31)]   sorted li by name of fruit\n\n[('apple', 'silver', 0), ('strawberry', 'gold', 0), ('chesnut', 'yellow', 0), ('apple', 'gold', 3), ('strawberry', 'green', 4), ('pear', 'brown', 5), ('apple', 'purple', 7), ('strawberry', 'pink', 8), ('apple', 'pink', 9), ('apple', 'yellow', 9), ('pear', 'yellow', 10), ('apple', 'green', 12), ('banana', 'yellow', 13), ('banana', 'brown', 14), ('strawberry', 'blue', 16), ('apple', 'blue', 21), ('banana', 'blue', 24), ('strawberry', 'orange', 27), ('strawberry', 'yellow', 31), ('pear', 'blue', 51), ('pear', 'gold', 66)]   sorted li by number\n\n[('apple', 'blue', 21), ('banana', 'blue', 24), ('pear', 'blue', 51), ('strawberry', 'blue', 16), ('banana', 'brown', 14), ('pear', 'brown', 5), ('apple', 'gold', 3), ('pear', 'gold', 66), ('strawberry', 'gold', 0), ('apple', 'green', 12), ('strawberry', 'green', 4), ('strawberry', 'orange', 27), ('apple', 'pink', 9), ('strawberry', 'pink', 8), ('apple', 'purple', 7), ('apple', 'silver', 0), ('apple', 'yellow', 9), ('banana', 'yellow', 13), ('chesnut', 'yellow', 0), ('pear', 'yellow', 10), ('strawberry', 'yellow', 31)]   sorted li first by name of color and secondly by name of fruit\n</code>\n</pre>\n", "senID": 7}, {"text": ["What else ?"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["PS : I downvoted nobody"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]]