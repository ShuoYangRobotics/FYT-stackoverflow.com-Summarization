[[{"text": ["Don't make this more complex than it needs to be.", "The big, independent databases have complex setup and configuration requirements.", "SQLite is just a file you access with SQL, it's much simpler."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Do the following."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["AFAIK an SQLITE database is just a file.", "To check if the database exists, check for file existence."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["When you open a SQLITE database it will automatically create one if the file that backs it up is not in place."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you try and open a file as a sqlite3 database that is NOT a database, you will get this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["\"sqlite3.DatabaseError: file is encrypted or is not a database\""], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["so check to see if the file exists and also make sure to try and catch the exception in case the file is not a sqlite3 database"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["SQLite automatically creates the database file the first time you try to use it.", "The SQL statements for creating tables can use IF NOT EXISTS to make the commands only take effect if the table has not been created This way you don't need to check for the database's existence beforehand: SQLite can take care of that for you."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "IF NOT EXISTS", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["The main thing I would still be worried about is that executing CREATE TABLE IF EXISTS for every web transaction (say) would be inefficient; you can avoid that by having the program keep an (in-memory) variable saying whether it has created the database today, so it runs the CREATE TABLE script once per run.", "This would still allow for you to delete the database and start over during debugging."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "CREATE TABLE IF EXISTS", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "CREATE TABLE", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["As @diciu pointed out, the database file will be created by sqlite3.connect.", "If you want to take a special action when the file is not there, you'll have to explicitly check for existance:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "sqlite3.connect", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sqlite3.html#module-sqlite3"}]}, {"code": "<pre>\n<code>\n import os\nimport sqlite3\nif not os.path.exists(mydb_path):\n    #create new DB, create table stocks\n    con = sqlite3.connect(mydb_path)\n    con.execute('''create table stocks\n      (date text, trans text, symbol text, qty real, price real)''')\nelse:\n    #use existing DB\n    con = sqlite3.connect(mydb_path)\n...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Doing SQL in overall is horrible in any language I've picked up.", "SQLalchemy has shown to be easiest from them to use because actual query and committing with it is so clean and absent from troubles."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's some basic steps on actually using sqlalchemy in your app, better details can be found from the documentation."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "provide table definitions and create ORM-mappings", "tag": "none", "senID": 2}, {"text": "load database", "tag": "none", "senID": 3}, {"text": "ask it to create tables from the definitions (won't do so if they exist)", "tag": "none", "senID": 4}, {"text": "create session maker (optional)", "tag": "none", "senID": 5}, {"text": "create session", "tag": "none", "senID": 6}]}, {"text": ["After creating a session, you can commit and query from the database."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"tag": "ul", "num": 2, "lis": [{"text": "Sqlite doesn't throw an exception if you create a new database with the same name, it will just connect to it. Since sqlite is a file based database, I suggest you just check for the existence of the file. ", "tag": "none", "senID": 0}, {"text": "About your second problem, to check if a table has been already created, just catch the exception. An exception \"sqlite3.OperationalError: table TEST already exists\" is thrown if the table already exist.", "tag": "none", "senID": 1}]}, {"text": ["print(\"code sample\");"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import sqlite3\nimport os\nprint(\"code sample\");\ndatabase_name = \"newdb.db\"\nif not os.path.isfile(database_name):\n    print \"the database already exist\"\ndb_connection = sqlite3.connect(database_name)\ndb_cursor = db_connection.cursor()\ntry:\n    db_cursor.execute('CREATE TABLE TEST (a INTEGER);')\nexcept sqlite3.OperationalError, msg:\n    print msg\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Yes, I was nuking out the problem.", "All I needed to do was check for the file and catch the IOError if it didn't exist."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Thanks for all the other answers.", "They may come in handy in the future."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["See this solution at SourceForge which covers your question in a tutorial manner, with instructive source code :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["y_serial.py module :: warehouse Python objects with SQLite"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["\"Serialization + persistance :: in a few lines of code, compress and annotate Python objects into SQLite; then later retrieve them chronologically by keywords without any SQL.", "Most useful \"standard\" module for a database to store schema-less data."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["http://yserial.sourceforge.net"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://yserial.sourceforge.net", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://yserial.sourceforge.net"}]}]]