[[{"text": ["You're not hugely clear about what you want, so some alternatives.", "Given the following two lists:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = [1,2,3,4,5,6,7,8,9,10]\nb = [1,2,3,4,5,6,7,8]\n</code>\n</pre>\n", "senID": 1}, {"text": ["To print the shortest list, you can just do.."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print(min(a, b))\n[1, 2, 3, 4, 5, 6, 7, 8]\n</code>\n</pre>\n", "senID": 3}, {"text": ["To get the shortest length as an number, you can either min the len() of each list, or do len(min()) (both are identical, choose which ever you find most readable).."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "min", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "len()", "childNum": 0, "tag": "code", "childList": []}, {"text": "len(min())", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print(min( len(a), len(b) ))\n# or..\n&gt;&gt;&gt; print(len( min(a, b) ))\n8\n</code>\n</pre>\n", "senID": 5}, {"text": ["To print the lowest value in either list, you can supply the list as a single argument to min()"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "min()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a.extend(b) # Appends b to a\n&gt;&gt;&gt; print a\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; print(min(a))\n1\n</code>\n</pre>\n", "senID": 7}, {"text": ["Finally, another possibility, the list that has the lowest values in total:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; max( sum(a), sum(b) )\n55\n</code>\n</pre>\n", "senID": 9}, {"text": ["To print the actual list with the highest sum(), you could either use the ternary operator, like.."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "sum()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print a if sum(a) &gt; sum(b) else b\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code>\n</pre>\n", "senID": 11}, {"text": ["..although I never really liked (or use) it, instead using the slight longer, regular if/else statements.."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; if sum(a) &gt; sum(b):\n...     print a\n... else:\n...     print b\n... \n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code>\n</pre>\n", "senID": 13}], [{"code": "<pre>\nprint(min(a, b))\n</pre>\n", "senID": 0}], [{"text": ["min() should accomplish what you need"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print(min(a,b))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If the length of the list is what makes it lower (not its values), then you actually want:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n min(a, b, key=len)\n</code>\n</pre>\n", "senID": 1}, {"text": ["which is only incidentally equivalent to"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n min(a, b)\n</code>\n</pre>\n", "senID": 3}, {"text": ["in the given example."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Is the following what you want?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if len(a) &lt; len(b):\n    print a\nelse:\n    print b\n</code>\n</pre>\n", "senID": 1}, {"text": ["Alternatively, if you want to use the ternary operator like @Andrew G. Johnson:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "@Andrew G. Johnson", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "#432241"}]}, {"code": "<pre>\n<code>\n print a if len(a) &lt; len(b) else b\n</code>\n</pre>\n", "senID": 3}, {"text": ["PS.", "Remember that Python does not use braces for its blocks, and that its ternary operator is different from C-like languages."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["heads up, min(a, b, key=len) only works in python 2.5 and up I think."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "min(a, b, key=len)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(it's not working on my macbook with python 2.4, but my linux server with 2.5 is fine)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I don't know Python but for something like this I'd use a ternary operator."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print(length(a) &lt; length(b) ? length(a) : length(b))\n</code>\n</pre>\n", "senID": 1}, {"text": ["One thing to note about this that if they are equal it will print length(b)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]