[[{"text": ["cloc, a free Perl script, can do this."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "cloc", "tag": "a", "pos": 0, "childList": [{"text": "cloc", "tag": "code"}], "childNum": 1, "href": "http://cloc.sourceforge.net/#strip_comments"}, {"text": "cloc", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["It supports a lotof languages."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "a lotof languages", "tag": "a", "pos": 0, "childList": [{"text": "a lot", "tag": "strong"}], "childNum": 1, "href": "http://cloc.sourceforge.net/#Languages"}, {"text": "a lot", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["What you want can be done with emacs scripting."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I wrote this script for you which does exactly what you want and can be easily extended to any language."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Filename: kill-comments"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Filename: kill-comments", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/python                                                         \n\nimport subprocess                                                         \nimport sys                                                                \nimport os                                                                 \n\ntarget_file = sys.argv[1]                                                 \n\ncommand =   \"emacs -batch -l ~/.emacs-batch \" + \\                         \n    target_file + \\                                                       \n    \" --eval '(kill-comment (count-lines (point-min) (point-max)))'\" + \\  \n    \" -f save-buffer\"                                                     \n\n#to load a custom .emacs script (for more syntax support),                \n#use -l &lt;file&gt; in the above command                                       \n\n#print command                                                            \n\nfnull = open(os.devnull, 'w')                                             \nsubprocess.call(command, shell = True, stdout = fnull, stderr = fnull)    \nfnull.close()\n</code>\n</pre>\n", "senID": 3}, {"text": ["to use it just call:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n kill-comments &lt;file-name&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["To add any language to it edit ~/.emacs-batch and add that language's major mode.", "You can find syntax aware modes for basically everything you could want at http://www.emacswiki.org."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://www.emacswiki.org", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.emacswiki.org"}]}, {"text": ["As an example, here is my ~/.emacs-batch file.", "It extends the above script to remove comments from javascript files.", "(I have javascript.el in my ~/.el directory)"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "javascript.el", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.emacswiki.org/emacs/JavaScriptMode"}]}, {"code": "<pre>\n<code>\n (setq load-path (append (list (concat (getenv \"HOME\") \"/.el\")) load-path))    \n(load \"javascript\")                                               \n(setq auto-mode-alist (cons '(\"\\\\.js$\" . javascript-mode) auto-mode-alist))\n</code>\n</pre>\n", "senID": 8}, {"text": ["With the javascript addition this will remove comments from all the filetypes you mentioned as well as many more."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Good Luck and happy coding!"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}], [{"text": ["Paul Dixon's response to this question on stripping comments from a script might be worth looking at."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "response to this question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/503871/best-way-to-automatically-remove-comments-from-php-code"}]}], [{"text": ["I don't know of such a tool - which isn't the same as saying there isn't one."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I once started to design one, but it quickly gets insane - not helped by the comment rules in C and C++."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n /\\\n*  Comment? *\\\n/\n</code>\n</pre>\n", "senID": 2}, {"text": ["(Answer: yes!"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n \"/\\\n* Comment? *\\\n/\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["(Answer: no!"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["To do the job reasonably, you have to be aware of:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Language comment conventions", "tag": "none", "senID": 7}, {"text": "Language quoted string conventions (Python and Perl are enough to drive you insane here)", "tag": "none", "senID": 8}, {"text": "Escape conventions (Shell gets you here - along with the quotes)", "tag": "none", "senID": 9}]}, {"text": ["These combine to make the job tolerably close to impossible."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["I ended up with a program, scc, to strip C and C++ comments.", "Its torture test includes worse examples than the comments shown above - and it does a decent job.", "But extending that to do shell or Perl or Python or (take your pick) was sufficiently non-trivial that I did not do it."], "childNum": 1, "tag": "p", "senID": 11, "childList": [{"text": "scc", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["You might coax GNU Source-highlight into doing this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "GNU Source-highlight", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.gnu.org/software/src-highlite/"}]}], [{"text": ["No such tool exists yet."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]