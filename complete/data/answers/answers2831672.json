[[{"text": ["In Python2.7+ you can write it like this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; t = (5,6,7)\n&gt;&gt;&gt; d = {x:i for i,x in enumerate(t)}\n&gt;&gt;&gt; print d\n{5: 0, 6: 1, 7: 2}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use a list comprehension (or a generator, depending on your python version) to perform a simple in-place swap for your second example."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Using a list comprehension:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n d = dict([(y,x) for x,y in enumerate(t)])\n</code>\n</pre>\n", "senID": 2}, {"text": ["Using a generator expression (Python 2.4 and up):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n d = dict((y,x) for x,y in enumerate(t))\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; dict((x,i) for i,x in enumerate(t))\n{5: 0, 6: 1, 7: 2}\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Are all your elements unique (i.e.", "your list would never be 5,6,7,7)?", "The dict solution will only work if all your elements are unique."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["By storing the index, you're essentially duplicating information, since you could simply query the current index of the item in the list.", "Duplicating information is usually not the best idea, because it allows the possibility for one set of data to get out of sync with the other."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If the list is being modified, there's also nothing preventing you from accidentally assigning the same index to more than one item."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Why are you trying to store the index value, when you could simply get the index from the list?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["As everybody has already written, in Python 2.6 I would consider the following as the most pythonic:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dict((x, i) for i, x in enumerate(t))\n{5: 0, 6: 1, 7: 2}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Still, in a moment of functional frenzy I would write:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dict(map(reversed, enumerate(t)))\n{5: 0, 6: 1, 7: 2}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I like the dict(zip(t, range(len(t)))) best."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]