[[{"code": "<pre>\n<code>\n def first_dup( seq ):\n    # keep track of the positions\n    seen = {}\n    for pos,item in enumerate(seq):\n        if item in seen:\n            # saw it before, so its a duplicate\n            return seen[item]\n        else:\n            # first time we see it, store the pos\n            seen[item] = pos\n</code>\n</pre>\n", "senID": 0}], [{"text": ["A little bit ambiguous question."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you just want to find index of first occurrence of specific element, you should use list.index() method:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "list.index()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#more-on-lists"}]}, {"code": "<pre>\n<code>\n index = s.index(3)\n</code>\n</pre>\n", "senID": 2}, {"text": ["But if you "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["in general (without element value given), seems you can"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "either do simple O(N^2) search in array (check all elements of the list for each element, till duplication is found)", "tag": "none", "senID": 5}, {"text": "or do sort, find duplicated element in sorted list and then find index of duplicated element in the original array with list.index() method - this will take O(N*log(N)) because of sort.", "tag": "none", "senID": 6}]}], [{"text": ["Unless I'm misunderstanding your question, this should do the trick:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 3]\nfor i in range(len(s)):\n    if s.count(s[i]) &gt; 1:\n        return i\n</code>\n</pre>\n", "senID": 1}, {"text": ["This should give you the index of the first occurrence of the first element that appears multiple times in the list"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If this is not what you're after, please leave a comment and I'll edit the code."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The function below returns the index of the first appearance of a duplicate"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def find_first_duplicate(num_list):\n        track_list =[]\n        index = 0\n        for e in num_list:\n            if(e not in track_list):\n                track_list += [e]\n            else: ## found!\n                return index\n            index += 1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is another way of doing it.."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If present, it will return the first index..", "If there are no duplicates available, it will raise IndexError."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [s.index(_) for _ in s if s.count(_) &gt; 1][0]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Yet another way of doing it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from operator import countOf\n\ndef multindex(seq):\n    \"\"\" find index of first value occurring more than once\n        in a sequence, else raise ValueError if there aren't any\n    \"\"\"\n    for i,v in enumerate(seq):\n        if countOf(seq, v) &gt; 1:\n            return i\n    else:\n        raise ValueError\n\nprint 's[{}] is first value in the list occurring more than once'.format(multindex(s))\n# s[2] is first value in the list occurring more than once\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n s.index(3)\n</code>\n</pre>\n", "senID": 0}, {"text": ["will return 2, as you desire."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["index will raise ValueError if the specified item is not in the list."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "index", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ValueError", "childNum": 0, "tag": "code", "childList": []}]}]]