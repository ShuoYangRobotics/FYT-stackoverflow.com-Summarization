[[{"text": ["You can use the following approach:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [lower + x*(upper-lower)/length for x in range(length)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["lower and/or upper must be assigned as floats for this approach to work."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Given numpy, you could use linspace:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "linspace", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html#numpy-linspace"}]}, {"text": ["Including the right endpoint (5):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n In [46]: import numpy as np\nIn [47]: np.linspace(0,5,10)\nOut[47]: \narray([ 0.        ,  0.55555556,  1.11111111,  1.66666667,  2.22222222,\n        2.77777778,  3.33333333,  3.88888889,  4.44444444,  5.        ])\n</code>\n</pre>\n", "senID": 2}, {"text": ["Excluding the right endpoint:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n In [48]: np.linspace(0,5,10,endpoint=False)\nOut[48]: array([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5])\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n f = 0.5\na = 0\nb = 9\nd = [x * f for x in range(a, b)]\n</code>\n</pre>\n", "senID": 0}, {"text": ["would be a way to do it. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Similar to Howard's answer but a bit more efficient:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def my_func(low, up, leng):\n    step = ((up-low) * 1.0 / leng)\n    return [low+i*step for i in xrange(leng)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Similar to unutbu's answer, you can use numpy's arange function, which is analog to python's intrinsic function range.", "Notice that the end point is not included, as in range:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import numpy as N\n&gt;&gt;&gt; a=N.arange(0,5,0.5)\n&gt;&gt;&gt; a\narray([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5])\n&gt;&gt;&gt; import numpy as N\n&gt;&gt;&gt; a=N.arange(0,5,0.5) # returns a numpy array\n&gt;&gt;&gt; a\narray([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5])\n&gt;&gt;&gt; a.tolist() # if you prefer it as a list\n[0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use the folowing code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def float_range(initVal, itemCount, step):\n    for x in xrange(itemCount):\n        yield initVal\n        initVal += step\n\n[x for x in float_range(1, 3, 0.1)]\n</code>\n</pre>\n", "senID": 1}]]