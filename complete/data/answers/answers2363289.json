[[{"code": "<pre>\n<code>\n /(?:(?:@\\S+\\s+)+|^)@\\S+/g\n</code>\n</pre>\n", "senID": 0}, {"text": ["It first matches either an \"@\" followed by many non-space characters, or the start of line, and then matches another \"@\" followed by many non-space characters."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Note that it's common in Twitter that @name is preceded by RT, appears in the middle or end of the tweet e.g.", "http://twitter.com/ceetee/statuses/9874073403.", "Basically you can't distinguish whether a @name is really a name just using RegEx or even a parser.", "The best bet is to check if http://twitter.com/name 404 or not."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "@name", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "RT", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "http://twitter.com/ceetee/statuses/9874073403", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://twitter.com/ceetee/statuses/9874073403"}, {"text": "http://twitter.com/name", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}], [{"text": ["Well, at first I thought this failed because I looked at the groups that are returned:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; tw = re.compile(r\"^((@\\w*)\\s+)*\")\n&gt;&gt;&gt; tw.findall(tweet)\n[('@michelle ', '@michelle')]\n&gt;&gt;&gt; tw.match(tweet).groups()\n('@michelle ', '@michelle')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that the groups only keep the last value for any group in the re.", "But if you just grab group(), then you get the whole matched string:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; tw.match(tweet).group()\n'@patrick  @michelle '\n</code>\n</pre>\n", "senID": 3}, {"text": ["For grins, I'll try pyparsing:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from pyparsing import Word, printables, OneOrMore\n&gt;&gt;&gt; atName = Word(\"@\",printables)\n&gt;&gt;&gt; OneOrMore(atName).parseString(tweet).asList()\n['@patrick', '@michelle']\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Try this regular expression:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n /^\\s*@(\\w+)\\s+@(\\w+)/\n</code>\n</pre>\n", "senID": 1}, {"text": ["\\s denotes whitespace characters and \\w word characters."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "\\s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\\w", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["As long as it starts with an @ and continues with those this will do it I tested it in poweshell so some regex engines are a bit different.", "This should also catch n names at the beginning of the line"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["\"^((@\\w+)\\s)+\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Perhaps something like this, though you'll have to split on whitespace anything in the matching group to extract multiple ids."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n /^\\s*(@\\w+\\s+)*\\s+.*$/\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You have tagged your post c#, so I assume you can use the .NET Regex imnplementation.", "Using .NET, the following Regex will do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n (?&lt;![^@]\\w+\\s+)(@\\w+)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This will match any words starting with @, that do not have a word without @ before them.", "Note that \"dinner @home @8pm\" will still break it, though."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["See here for more details."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.regular-expressions.info/lookaround.html"}]}], [{"text": ["for PHP "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n /^\\s*@(\\w+)\\s+@(\\w+)/\n</code>\n</pre>\n", "senID": 1}, {"text": ["Thanks KennyM"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["in python"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n msg = '@patrick  @michelle we having diner @home tonight do you want to join?'\nimport re\nre.findall('(?:(?:@\\S+\\s+)+|^)@\\S+', msg)\n</code>\n</pre>\n", "senID": 4}, {"text": ["This works with 1 or n @name at the beginning of the sentence."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Thank you all for the quick replies."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["In Perl, you can exploit the /g match-more-than-once modifier combined with the \\G zero-width where-we-left-off assertion and list context, thus:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "/g", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\\G", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n my $str = '@patrick  @michelle we having diner @home tonight do you want to join?';\nmy @matches = ($str =~ m/\\G(\\@\\w+)\\s*/g);\n\nprint join(', ', @matches) . \"\\n\";\n</code>\n</pre>\n", "senID": 1}, {"text": ["This should be robust across any number of initial @-strings."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["For Python check out: http://github.com/BonsaiDen/AtarashiiFormat\nIt will also give you the links and the tags."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://github.com/BonsaiDen/AtarashiiFormat", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/BonsaiDen/AtarashiiFormat"}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["And beware of using a simple regex, you will end up with a big mess, as I did before I converted the Twitter Text Java Library."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]