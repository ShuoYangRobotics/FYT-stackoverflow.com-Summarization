[[{"text": ["When a string must contain the same quote character with with it's started, escaping that character is the only available workaround -- so the design alternative was either to make raw-string literals physically unable to contain their leading quote character, or keep the \"backlash escapes\" convention, even in string literals, just for quote characters."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Since raw-string literals were designed for handy representation of regular expression patterns (not for DOS / Windows paths!-), and in RE patterns a trailing backslash is never necessary, the design decision was easy (based on the real use case for raw-string literals)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["From the documentation"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/lexical%5Fanalysis.html"}]}], [{"text": ["Use \"c:/\" or \"c:\\\\\".", "Raw string literals are for escaping escape-sequences, not for including literal backslashes, though they do work that way, except in this exact case."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "\"c:/\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"c:\\\\\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Its a known case I think, better use \"c:\\\\\" for that case."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Even with raw strings, \\\" causes the \" not to be interpreted as the end of the string (though the backslash gets into your string), so r\"foo\\\"bar\" would be a legal string.", "This is convenient enough when writing regex but not great for writing paths. "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "\\\"", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "r\"foo\\\"bar\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["This is not a big deal as most of the time you should be using os.path and other modules to deal with your paths."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "os.path", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["found in  Design and History FAQ http://docs.python.org/faq/design.html#why-can-t-raw-strings-r-strings-end-with-a-backslash"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/faq/design.html#why-can-t-raw-strings-r-strings-end-with-a-backslash", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/faq/design.html#why-can-t-raw-strings-r-strings-end-with-a-backslash"}]}]]