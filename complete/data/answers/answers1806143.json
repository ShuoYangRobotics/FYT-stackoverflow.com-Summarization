[[{"text": ["Why not do it randomly.", "For each transaction, pick a random number between 0 and 100.", "If that number is less than your \"percent\", then audit the transaction.", "If the number is greater than your \"percent\", then don't.", "I don't know if this satisfies your requirements, but over an extended period of time, you will have the right percentage audited."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you need an exact \"skip 2, audit one, skip 2 audit one\" type of algorithm, you'll likely have luck adapting a line-drawing algorithm.  "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "line-drawing algorithm", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Bresenham%27s%5Fline%5Falgorithm"}]}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1) Keep your audit percentage as a decimal.", "2) For every transaction, associate a random number (between 0 and 1) with it\n3) If the random number is less than the percentage, audit the transaction."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n if percent &gt; random.randint(1,100):\n        print(\"audit\")\n    else:\n        print(\"skip\")\n</code>\n</pre>\n", "senID": 0}], [{"text": ["To follow your own algorithm: just keep adding that 1.333333 (or other quotient) to a counter."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Have two counters: an integer one and a real one.", "If the truncated part of the real counter = the integer counter, the audit is carried out, otherwise it isn't, like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n Integer counter   Real counter\n\n1                 1.333333: audit transaction\n2                 2.666666: audit transaction\n3                 3.999999: audit transaction\n4                 truncated(5.333333) = 5 &gt; 4 =&gt; do NOT audit transaction\n5                 5.333333: audit transaction\n</code>\n</pre>\n", "senID": 2}, {"text": ["Only increment the real counter when its truncated version = the integer counter.", "Always increment the integer counter."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In code:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n var p, pc: double;\n    c: integer;\nbegin\n  p := 100 / Percentage;\n  pc := p;\n  for c := 1 to NrOfTransactions do begin\n    if trunc(pc) = c then begin\n      pc := pc + p;\n      Do audit on transaction c\n    end  \n  end;\nend;\n</code>\n</pre>\n", "senID": 5}], [{"text": ["If you need to audit these transactions in real time (as they are received) perhaps you could use a random number generator to check if you need to audit the transaction."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So if for example you want to audit 50% of transactions, for every transaction received you would generate a random number between 0 and 1, and if the number was greater than 0.5, audit that transaction."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["While for low numbers this would not work, for large numbers of transactions this would give you very close to the required percentage."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This is better than your initial suggestion because if does not allow a method to 'game' the audit process - if you are auditing every second transaction this allows bad transactions to slip through."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Another possibility is to keep a running total of the total transactions and as this changes the total number of transactions that need to be audited (according to your percentage) you can pipe transactions into the auditing process.", "This however still opens the slight possibility of someone detecting the pattern and circumventing the audit."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["For a high throughput system the random method is best, but if you don't want randomness, the this algorithm will do the job.", "Don't forget to test it in a unit test!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n // setup\nint transactionCount = 0;\nint auditCount = 0;\ndouble targetAuditRatio = auditPercent/100.0;\n\n// start of processing\ntransactionCount++;\ndouble actualAuditRatio = auditCount/transactionCount;\n\nif (actualAuditRatio &lt; targetAuditRatio) {\n    auditCount++;\n    // do audit\n}\n// do processing\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can constantly \"query\" each audit using counter.", "For example"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ctr = 0;\npercent = 50\nwhile(1) {\n   ctr += percent;\n   if (ctr &gt;= 100) {\n      audit;\n      ctr = ctr - 100;\n   } else\n      skip\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can use floats (however this will bring some unpredictability) or multiply 100 percent by sth to get better resolution."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["There is really no need to use random number generator."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Not tested, but in the random module there is a function sample.", "If transactions was a list of transactions, you would do something like:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "random", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sample", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "transactions", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import random\n\nto_be_audited = random.sample(transactions,len(transactions*100/percentage))\n</code>\n</pre>\n", "senID": 1}, {"text": ["This would generate a list to_be_audited which would be a random, non-duplicating sample of the transactions."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "to_be_audited", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["See documentation on random"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "documentation on random", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/random.html#random.sample"}]}]]