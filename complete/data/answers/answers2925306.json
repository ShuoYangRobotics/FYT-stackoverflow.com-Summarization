[[{"text": ["You could also use split in this case (instead of regex):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "split", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#str.split"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; str = \"/xubuntu/daily/current/lucid-alternate-i386.iso\"\n&gt;&gt;&gt; str.split(\".iso\")[0].split(\"-\")[-1]\n'i386'\n</code>\n</pre>\n", "senID": 1}, {"text": ["split gives you a list of elements on which your string got 'split'.", "Then using Python's slicing syntax you can get to the appropriate parts."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "split", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "slicing syntax", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation/509295#509295"}]}], [{"code": "<pre>\n<code>\n r\"/([^-]*)\\.iso/\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["The bit you want will be in the first capture group."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["First off, let's make our life simpler and only get the file name."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; os.path.split(\"/xubuntu/daily/current/lucid-alternate-i386.iso\")\n('/xubuntu/daily/current', 'lucid-alternate-i386.iso')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now it's just a matter of catching all the letters between the last dash and the '.iso'."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["If you will be matching several of these lines using re.compile() and saving the resulting regular expression object for reuse is more efficient."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "is more efficient", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/re.html#re.compile"}]}, {"code": "<pre>\n<code>\n s1 = \"/xubuntu/daily/current/lucid-alternate-i386.iso\"\ns2 = \"/xubuntu/daily/current/lucid-alternate-amd64.iso\"\n\npattern = re.compile(r'^.+-(.+)\\..+$')\n\nm = pattern.match(s1)\nm.group(1)\n'i386'\n\nm = pattern.match(s2)\nm.group(1)\n'amd64'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The expression should be without the leading trailing slashes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\n\nline = '/xubuntu/daily/current/lucid-alternate-i386.iso'\nrex = re.compile(r\"([^-]*)\\.iso\")\nm = rex.search(line)\nprint m.group(1)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Yields 'i386'"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n reobj = re.compile(r\"(\\w+)\\.iso$\")\nmatch = reobj.search(subject)\nif match:\n    result = match.group(1)\nelse:\n    result = \"\"\n</code>\n</pre>\n", "senID": 0}, {"text": ["Subject contains the filename and path."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; import os\n&gt;&gt;&gt; path = \"/xubuntu/daily/current/lucid-alternate-i386.iso\"\n&gt;&gt;&gt; file, ext = os.path.splitext(os.path.split(path)[1])\n&gt;&gt;&gt; processor = file[file.rfind(\"-\") + 1:]\n&gt;&gt;&gt; processor\n'i386'\n</code>\n</pre>\n", "senID": 0}]]