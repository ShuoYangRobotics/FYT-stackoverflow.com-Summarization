[[{"text": ["What I've found in everyday practice is that it is best to simply focus on the OVERLAPPED result, as that will be unchanged.", "One way that you can use it effectively is to have something like the following:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "OVERLAPPED", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n struct CompletionHandler\n{\n    OVERLAPPED dummy_ovl;\n    /* Stuff that actually means something to you here */\n};\n</code>\n</pre>\n", "senID": 1}, {"text": ["When you post something to the IOCP (whether via I/O call or just a post via Win32 API), you first create a CompletionHandler object that you will use to track the call, and cast the address of that object to OVERLAPPED*."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "CompletionHandler", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "OVERLAPPED*", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n CompletionHander my_handler;\n// Fill in whatever you need to in my_handler\n// Don't forget to keep the original my_handler!\n\n// I/O call goes here, and for OVERLAPPED* give: (OVERLAPPED*)&amp;my_handler\n</code>\n</pre>\n", "senID": 3}, {"text": ["This way, when you get the OVERLAPPED result all you have to do is cast it back to CompletionHandler and voila!", "You have the original context of your call."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "OVERLAPPED", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "CompletionHandler", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n OVERLAPPED* from_queued_completion_status;\n// Actually get a value into from_queued_completion_status\n\nCompletionHandler* handler_for_this_completion = (CompletionHandler*)from_queued_completion_status;\n// Have fun!\n</code>\n</pre>\n", "senID": 5}, {"text": ["For more details in a real-world setting, check out Boost's implementation of ASIO for Windows (ver 1.42 header here).", "There are some details like validation the OVERLAPPED pointer you get from GetQueuedCompletionStatus, but again, see the link for a good way to implement."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "ver 1.42 header here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1_42_0/boost/asio/detail/win_iocp_io_service.hpp"}, {"text": "OVERLAPPED", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "GetQueuedCompletionStatus", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["GetQueuedCompletionStatus returns two things, an OVERLAPPED structure and a completion key.", "The completion key represents per-device information, and the OVERLAPPED structure represents per-call information.", "The completion key should match what was given in the call to CreateIoCompletionPort.", "Typically, you would use a pointer to a structure containing information about the connection as the completion key."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "GetQueuedCompletionStatus", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "OVERLAPPED", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "OVERLAPPED", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "CreateIoCompletionPort", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["It looks like you're not doing anything with completionKey as returned by GetQueuedCompletionStatus."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "completionKey", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "GetQueuedCompletionStatus", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I'm guessing you want:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if completionKey != acceptKey:\n    Cleanup()\n    ...\n</code>\n</pre>\n", "senID": 3}, {"text": ["edit:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Does Python somehow know that the OVERLAPPED structure created in CreateAcceptSocket is being used asynchronously by the Win32 API and prevent it from being GC'd?"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "OVERLAPPED", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "CreateAcceptSocket", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The problem is in how I am passing the completion keys.", "The completion key argument is a pointer, yet it passes back the pointer not the value pointed to - a little confusing to me at least."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also the completion key passed for the accepted connection overlapped packet is that of the listening socket - not the accepted socket."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Completion key is not a pointer - it is a number of type ULONG_PTR, which just means \"an integer the size of a pointer\" so it is 32-bits on x86 and 64-bits on x64.", "The typename is confusing, but when win32 typenames refer to a pointer they do it by having a P at the front of the name, not the end."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If your application is multithreading, make sure that the CompletionKey you're passing is either constant or a pointer value to object on heap rather than on stack.", "In your example where 100 is passed as constant, you must be wrong to say any change.", "But as to the problem it could be that you pass a socket handle in CreateIoCompletionPort but not a reference to handle in GetQueuedCompletionStatus in order to retrive it.", "You can do"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n HANDLE socket;\nCreateIoCompletionPort((HANDLE)socket, existed_io_completion_port, (ULONG_PTR)socket, 0);\n/*some I/Os*/\n...\n</code>\n</pre>\n", "senID": 1}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n HANDLE socket;\nGetQueuedCompletionStatus(existed_io_completion_port, &amp;io_bytes_done, (PULONG_PTR)&amp;socket, &amp;overlapped);\n</code>\n</pre>\n", "senID": 3}, {"text": ["and pay attention to the type in bracket."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You should think about the completion key as 'per connection' data and the (extended) overlapped structure as 'per i/o' operation. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Some people use an extended overlapped structure for BOTH and store all the information that they need in the extended overlapped structure.", "I have always stored a reference counted object that wraps my socket in the completion key and a reference counted data buffer as an extended overlapped structure.", "If you're interested you can see some example IOCP code in C++ here."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "some example IOCP code in C++ here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.serverframework.com/products---the-free-framework.html"}]}, {"text": ["The completion key is, effectively, just an opaque handle to data that the I/O completion system will give back to you when a completion occurs on the socket."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]