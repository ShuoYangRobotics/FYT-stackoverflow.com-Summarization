[[{"text": ["i contains the value from the array, not the index.", "So if you want to concatenate the value, try this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "i", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in numberArray:\n  print text + str(i)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n text = 'product_price'\nnumberArray = [1,2,3,4,5,6,7,8,9,10]\n\nfor num in numberArray:\n    print '_'.join((text, str(num)))\n</code>\n</pre>\n", "senID": 0}, {"text": ["You should not confuse the index with the value.", "You're example \"kind of worked\" because you stored numbers in you array (which by the way is a list), but since the index numeration start with 0 you skipped the first element and found your list index out of range after the last one."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}, {"text": "list index out of range", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["This is a fix for your example"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n text = 'product_price_'\nnumberArray = [1,2,3,4,5,6,7,8,9,10]\n\nfor i in numberArray:\n    print text + str(i)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Try storing string in your list and maybe something will be more clear:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "string", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; text = 'product_price '\n&gt;&gt;&gt; my_list = ['one', 'two', 'three']\n&gt;&gt;&gt; for price in my_list:\n...     print text + price\nproduct_price one\nproduct_price two\nproduct_price three\n</code>\n</pre>\n", "senID": 5}, {"text": ["In python it's really not necessary to get the value from its index, so you should not be doing:"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "should not be doing", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; text = 'product_price '\n&gt;&gt;&gt; my_list = ['one', 'two', 'three']\n&gt;&gt;&gt; for i in range(len(my_list)):\n...     print text + my_list[i]\nproduct_price one\nproduct_price two\nproduct_price three\n</code>\n</pre>\n", "senID": 7}, {"text": ["The last step is to concatenate strings using str.join(), in most of the case this will be more efficent:"], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "str.join()", "tag": "a", "pos": 0, "childList": [{"text": "str.join()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#str.join"}, {"text": "str.join()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; text = 'product_price'   # without the underscore at the end\n&gt;&gt;&gt; numberArray = [1,2,3,4,5,6,7,8,9,10]\n&gt;&gt;&gt; for num in numberArray:\n...     print '_'.join((text, str(num)))\nproduct_price_1\nproduct_price_2\nproduct_price_3\n[...]\n</code>\n</pre>\n", "senID": 9}], [{"text": ["You may want this code"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range(len(numberArray)):\n    print text + str( numberArray[i] )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use a list comprehension:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [text + str(i) for i in numberArray]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or even shorter:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [text + str(i) for i in range(11)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["to get rid of the number list (it's a list, not an array)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Another way is to use map:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "map", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n map(lambda i: b + str(i), a)\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Maybe what you want is"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in numberArray:\n\n    print text + str(i)\n</code>\n</pre>\n", "senID": 1}, {"text": ["When using 'in' operator, array elements are cycled through and not indexes.", "And array indexes start with 0 and not 1.\neg "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n numberArray[0] = 1\n\nnumberArray[1] = 2\n\nnumberArray[9] = 10\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you insist on using indexes for this example,\nYour array should change to"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["numberArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "numberArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You want to loop on the indeces of numberArray: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in xrange(len(numberArray)):\n    print text + str(numberArray[i])\n</code>\n</pre>\n", "senID": 1}, {"text": ["then i takes values 0 to 9, and your list-index will not be out of range. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The function xrange gives you an itearator on the range 0,...,len(numberArray) - 1.", "Since the length of numberArray is 10 you have an iterator from 0 to 9."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]