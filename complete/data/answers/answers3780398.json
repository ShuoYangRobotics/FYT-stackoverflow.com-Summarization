[[{"text": ["The Python documentation has a page on embedding Python in a C or C++ application."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "embedding Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/extending/embedding.html"}]}], [{"text": ["Why not use Boost.Python?", "You can expose your data classes to Python and execute a script/function as described here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.boost.org/doc/libs/1_44_0/libs/python/doc/tutorial/doc/html/python/embedding.html"}]}], [{"text": ["If you want to simply run Python scripts from C/C++, then use the Python C API.", "In your C/C++ code:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the Python C API", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/c-api/index.html"}]}, {"code": "<pre>\n<code>\n PyRun_SimpleString(\"import math; x = math.sqrt(2 * 2)\");\n</code>\n</pre>\n", "senID": 1}, {"text": ["For more complicated things, you will have to look at the API docs, but it's pretty straightforward."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["How about embedding a JavaScript engine, such as V8?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "V8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/apis/v8/intro.html"}]}], [{"text": ["dont forget the grand-daddy of embedded scripting language - tcl."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["tcl has v nice c++ wrapper (modelled on boost.python) that makes it trivial to invoke and to wire up callbacks to your code"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Lua works pretty well too, especially since its small, is ansi c compliant, has a low memory foot print along with a great wiki and messaging list.", "If you need even more speed there is a x86 32 and 64 bit jit version(luajit).", "Binding can be done with an array of tools/libraries, like swig or lunar(the wiki lists them all).", "The only problem that i can see is binding the struct members so they can be referenced directly(ie: struct.member = 4), though its possible to set this up with metatables that have get and set methods bound to variable names "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You say that you're not looking for something to wrap your C++ functions / classes in a Python interface, but if you want Python code to be able to refer to members of your C++ my_integers structure, that is wrapping C++ classes in a Python interface.", "Of course, you're free to wrap as many or as few classes as you want - in this example, you'd wrap my_integers, then you'd embed a Python interpreter to do stuff with my_integers."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "my_integers", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "my_integers", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/extending/embedding.html", "text": "embed a Python interpreter", "childNum": 0, "tag": "a", "childList": []}, {"text": "my_integers", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["For something as simple as you describe, you could implement an interpreter for your own 'little language'.", "You could even call it the \"Robin\" language.", ";-)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I advice using Lua as internal scripting engine.", "Implementation is just a few lines, and though light, the language has sufficient power.", "So no need for TCL.", "You might as well look at python, integration in C++ is rather easy, as there exists a Boost.Python implementation facilitating integration."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "Lua", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "Lua", "tag": "a"}]}, {"text": "Lua", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.lua.org/"}, {"text": "Boost.Python", "childNum": 1, "tag": "strong", "pos": 3, "childList": [{"text": "Boost.Python", "tag": "a"}]}, {"href": "http://www.boost.org/doc/libs/1_44_0/libs/python/doc/index.html", "text": "Boost.Python", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["But depending on the application, I'd still recommend Lua."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]