[[{"text": ["Don't over-engineer it.", "It's a 2-D array or maybe a Board class that represents a 2-D array at best.", "Have functions that calculate a given row/column and functions that let you access each square.", "Additional methods can be used validate that each sub-3x3 and row/column don't violate the required constraints."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you're stuck and are interested in a walkthrough of a solution,  Peter Norvig wrote an article on a Sudoku solver implemented in Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Sudoku solver", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://norvig.com/sudoku.html"}]}], [{"text": ["Well, I would use one class for the sudoku itself, with a 9 x 9 array and all the functionality to add numbers and detect errors in the pattern."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Another class will be used to solve the puzzle."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["The simplest way to do it is to represent the board by a 2D 9x9 array.", "You'll want to have references to each row, column and 3x3 box as a separate object, so storing each cell in a String makes more sense (in Java) than using a primitive.", "With a String you can keep references to the same object in multiple containers."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Maybe a design that had a box per square, and another class to represent the puzzle itself that would have a collection of boxes, contain all the rules for box interactions, and control the overall game would be a good design."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Do you need to do it in Python or Java?", "I do a lot of programming in Python, but this can be done much more concisely with integer program using a language like AMPL or GLPK, which I find more elegant (and generally more efficient) for problems like this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here it is in AMPL, although I haven't verified how this works:\nhttp://taha.ineg.uark.edu/Sudoku.txt"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://taha.ineg.uark.edu/Sudoku.txt", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://taha.ineg.uark.edu/Sudoku.txt"}]}], [{"text": ["First, it looks like there are two kinds of cells."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Known calls; those with a fixed value, no choices."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Unknown cells; those with a set of candidate values that reduces down to a single final value."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]}, {"text": ["Second, there are several groups of cells."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Horizontal rows and Vertical columns which must have one cell of each value.", "That constraint is used to remove values from various cells in the row or column."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["3x3 blocks which must have one cell of each value.", "That constraint is used to remove values from various cells in the block."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]}, {"text": ["Finally, there's the overall grid.", "This has several complementary views."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["It's 81 cells."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["The cells are also collected into a 3x3 grid of 3x3 blocks."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["The cells are also collected into 9 columns."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["The cells are also collected into 9 rows."], "childNum": 0, "tag": "p", "senID": 10, "childList": []}]}, {"text": ["And you have a solver strategy object.  "], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["The above must be iterated until no changes are found."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["At this point, you either have it solved (all cells report a definite value), or, you have some cells with multiple values.", "Now you have to engage in a sophisticated back-tracking solver to find a combination of the remaining values that \"works\"."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}], [{"text": ["A class containing a 1d array of 81 ints (0 is empty) is sufficient for the rule class.", "The rule class enforces the rules (no duplicate numbers in each row, column or 3x3 square).", "It also has an array of 81 bools so it knows which cells are fixed and which need to be solved.", "The public interface to this class has all the methods you need to manipulate the board:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n int getCell(int x, int y);\nbool setCell(int x, int y, int value);\nbool clearCell(int x, int y);\nint[] getRow(int x);\nint[] getCol(int y);\nint[] getSubBox(int x, int y);\nvoid resetPuzzle();\nvoid loadPuzzle(InputStream stream);\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then your solver uses the public interface to this class to solve the puzzle.", "The class structure of the solver I presume is the purpose of writing the 5 millionth Sudoku solver.", "If you are looking for hints, I'll edit this post later."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["just for fun, here is what is supposed to be the shortest program, in python, that can solve a sudoku grid:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def r(a):i=a.find('0') if i&lt;0:print a [m in[(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3)or a[j]for j in range(81)]or r(a[:i]+m+a[i+1:])for m in`14**7*9`]r(raw_input())\n</code>\n</pre>\n", "senID": 1}, {"text": ["hmm ok it's quite cryptic and I don't think it matchs your question so I apologize for this noise :) "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Anyway you'll find some explanation of these 173 characters here (sorry it's in french)"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://drgoulu.com/2008/10/12/python/"}]}]]