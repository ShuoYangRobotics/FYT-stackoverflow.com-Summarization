[[{"text": ["Unfortunately, no.", "Objective-C doesn't have argument unpacking like you get in a lot of modern languages.", "There isn't even a good way to work around it that I've ever found."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Part of the problem is that Objective-C is essentially just C. It does multiple argument passing with C varargs, and there's no simple way to do this with varargs.", "A relevant SO discussion."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "A relevant SO discussion", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/280940/calling-a-c-function-with-a-varargs-argument-dynamically"}]}], [{"text": ["I wanted to do the same thing.", "I came up with the following, which works fine, given some constraints on the input variables."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n NSArray* VarArgs(va_list ap)\n{\n  id obj;\n  NSMutableArray* array = [NSMutableArray array];\n\n  while ((obj = va_arg(ap, id))) {\n    [array addObject:obj];\n  }\n  return array;\n}\n\n#define VarArgs2(_last_) ({ \\\n  va_list ap; \\\n  va_start(ap, _last_); \\\n  NSArray* __args = VarArgs(ap); \\\n  va_end(ap); \\\n  if (([__args count] == 1) &amp;&amp; ([[__args objectAtIndex:0] isKindOfClass:[NSArray class]])) { \\\n    __args = [__args objectAtIndex:0]; \\\n  } \\\n__args; })\n</code>\n</pre>\n", "senID": 1}, {"text": ["Using the above, I can call the following with either an NSArray or with varargs."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n // '...' must be objc objects with nil sentinel OR an NSArray with nil sentinel\n- (void)someMethod:(NSString *)sql, ...\n{\n   NSArray *args = VarArgs2(sql);\n\n   // Do stuff with args\n}\n</code>\n</pre>\n", "senID": 3}, {"text": ["One more tip is to use the following in the prototype to have the compiler check for the nil sentinel to avoid potential bad things.", "I got this out of the apple headers..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n - (void)someMethod:(NSString *)sql, ... NS_REQUIRES_NIL_TERMINATION;\n</code>\n</pre>\n", "senID": 5}], [{"text": ["To accomplish what you want, you have to use \"varargs\", as your method uses, or you can pass in an array of values, something like [db executeUpdate:sql withValues:vals];, and then pull out the values in the method.", "But there's no way to do something more \"Pythonic\", such as automatically unpacking a tuple of values, \u00e1 la def executeUpdate(sql, *args)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "[db executeUpdate:sql withValues:vals];", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "def executeUpdate(sql, *args)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Unfortunately (Objective-)C doesn't provide a way to do that.", "The executeUpdate method would need to accept an NSArray instead of variable argument list in this case."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, if you do know the amount of entries in the array (you have the amount in the string in the example anyway), you can of course do something like"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [db executeUpdate:@\"insert into test (a, b) values (?, ?)\", [values objectAtIndex:0], [values objectAtIndex:1]]\n</code>\n</pre>\n", "senID": 2}, {"text": ["If executeUpdate is an external library method and that library does not offer a version of the method accepting an NSArray, you could come up with your own wrapper function.", "The function would take the query string and an array as argument.", "This function would then call the executeUpdate method with correct amount of arguments based on the length of the array, something along the lines of"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if ([values count] == 1) {\n  [db executeUpdate:query, [values objectAtIndex:0]];\n}\nelse if ([values count] == 2) {\n  [db executeUpdate:query, [values objectAtIndex:0], [values objectAtIndex:1]];\n}\n</code>\n</pre>\n", "senID": 4}, {"text": ["you could then call this new function as"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n executeUpdateWrapper(@\"insert into test (a, b) values (?, ?)\", values);\n</code>\n</pre>\n", "senID": 6}, {"text": ["The obvious drawback in this solution is that you need to handle all possible lengths of the array separately in the function and it has a lot of copy-paste code."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["There is a nice example how you can go from NSArray to va_list here (see \"va_list in Cocoa\" and \"Creating a fake va_list\" sections towards the bottom): "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://cocoawithlove.com/2009/05/variable-argument-lists-in-cocoa.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://cocoawithlove.com/2009/05/variable-argument-lists-in-cocoa.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cocoawithlove.com/2009/05/variable-argument-lists-in-cocoa.html"}]}, {"text": ["Here is a teaser (\"arguments\" is NSArray):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n char *argList = (char *)malloc(sizeof(NSString *) * [arguments count]);\n[arguments getObjects:(id *)argList];\ncontents = [[NSString alloc] initWithFormat:formatString arguments:argList];\nfree(argList);\n</code>\n</pre>\n", "senID": 3}, {"text": ["Not quite python or ruby, but hey..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You should use new FMDB version http://github.com/ccgus/fmdb.", "It has the method you need:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://github.com/ccgus/fmdb", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/ccgus/fmdb"}]}, {"code": "<pre>\n<code>\n - (BOOL) executeUpdate:(NSString*)sql withArgumentsInArray:(NSArray *)arguments;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["additionally to robottobor's solution:\nif you add the following macro:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #define splitAlternatingArray(args,arg1,arg2) \\\nNSMutableArray *arg1 = [NSMutableArray array];\\\nNSMutableArray *arg2 = [NSMutableArray array];\\\n{\\\n  BOOL isFirst = YES;\\\n  for (id arg in args) {\\\n    if (isFirst) {\\\n        [arg1 addObject:arg];\\\n    } else {\\\n        [arg2 addObject:arg];\\\n    }\\\n    isFirst = !isFirst;\\\n  }\\\n}\n</code>\n</pre>\n", "senID": 1}, {"text": ["you can then do tricky things like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n - (id)initWithObjectsAndKeys:(id)firstObject, ...{\n    NSArray *objKeyArray = VarArgs2(firstObject);\n    splitAlternatingArray(objKeyArray,objs,keys);\n    return [self initWithObjects:objs forKeys:keys];\n}\n</code>\n</pre>\n", "senID": 3}]]