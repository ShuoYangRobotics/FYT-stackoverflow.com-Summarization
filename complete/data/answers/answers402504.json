[[{"text": ["Python doesn't have the same types as C/C++, which appears to be your question."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; i = 123\n&gt;&gt;&gt; type(i)\n&lt;type 'int'&gt;\n&gt;&gt;&gt; type(i) is int\nTrue\n&gt;&gt;&gt; i = 123456789L\n&gt;&gt;&gt; type(i)\n&lt;type 'long'&gt;\n&gt;&gt;&gt; type(i) is long\nTrue\n&gt;&gt;&gt; i = 123.456\n&gt;&gt;&gt; type(i)\n&lt;type 'float'&gt;\n&gt;&gt;&gt; type(i) is float\nTrue\n</code>\n</pre>\n", "senID": 2}, {"text": ["The distinction between int and long goes away in Python 3.0, though."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The question is somewhat ambiguous -- I'm not sure what you mean by \"view\".", "If you are trying to query the type of a native Python object, @atzz's answer will steer you in the right direction."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "query", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"href": "http://stackoverflow.com/questions/402504/how-to-determine-the-variable-type-in-python#402516", "text": "@atzz", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["However, if you are trying to generate Python objects that have the semantics of primitive C-types, (such as uint32_t, int16_t), use the struct module.", "You can determine the number of bits in a given C-type primitive thusly:"], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "generate", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "uint32_t", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "int16_t", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "struct", "tag": "a", "pos": -1, "childList": [{"text": "struct", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/struct.html#struct.calcsize"}, {"text": "struct", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; struct.calcsize('c') # char\n1\n&gt;&gt;&gt; struct.calcsize('h') # short\n2\n&gt;&gt;&gt; struct.calcsize('i') # int\n4\n&gt;&gt;&gt; struct.calcsize('l') # long\n4\n</code>\n</pre>\n", "senID": 2}, {"text": ["This is also reflected in the array module, which can make arrays of these lower-level types:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "array", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; array.array('c').itemsize # char\n1\n</code>\n</pre>\n", "senID": 4}, {"text": ["The maximum integer supported (Python 2's int) is given by sys.maxint."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/sys.html#sys.maxsize", "text": "sys.maxint", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import sys, math\n&gt;&gt;&gt; math.ceil(math.log(sys.maxint, 2)) + 1 # Signedness\n32.0\n</code>\n</pre>\n", "senID": 6}, {"text": ["There is also sys.getsizeof, which returns the actual size of the Python object in residual memory:"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "sys.getsizeof", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sys.html#sys.getsizeof"}, {"text": "Python", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = 5\n&gt;&gt;&gt; sys.getsizeof(a) # Residual memory.\n12\n</code>\n</pre>\n", "senID": 8}, {"text": ["For float data and precision data, use sys.float_info:"], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "sys.float_info", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/sys.html#sys.float_info"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sys.float_info\nsys.floatinfo(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.2204460492503131e-16, radix=2, rounds=1)\n</code>\n</pre>\n", "senID": 10}], [{"text": ["Python doesn't have such types as you describe.", "There are two types used to represent integral values: int, which corresponds to platform's int type in C, and long, which is an arbitrary precision integer (i.e.", "it grows as needed and doesn't have an upper limit).", "ints are silently converted to long if an expression produces result which cannot be stored in int."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "long", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}, {"text": "long", "childNum": 0, "tag": "code", "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You may be looking for the type() function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "type()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["See the examples below, but there's no \"unsigned\" type in Python just like Java."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Positive integer:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; v = 10\n&gt;&gt;&gt; type(v)\n&lt;type 'int'&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["Large positive integer:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Large", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; v = 100000000000000\n&gt;&gt;&gt; type(v)\n&lt;type 'long'&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["Negative integer:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; v = -10\n&gt;&gt;&gt; type(v)\n&lt;type 'int'&gt;\n</code>\n</pre>\n", "senID": 7}, {"text": ["Literal sequence of characters:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; v = 'hi'\n&gt;&gt;&gt; type(v)\n&lt;type 'str'&gt;\n</code>\n</pre>\n", "senID": 9}], [{"text": ["It really depends on what level you mean.", "In Python 2.x, there are two integer types, int (constrained to sys.maxint) and long (unlimited precision), for historical reasons.", "In Python code, this shouldn't make a bit of difference because the interpreter automatically converts to long when a number is too large.", "If you want to know about the actual data types used in the underlying interpreter, that's implementation dependent.", "(CPython's are located in Objects/intobject.c and Objects/longobject.c.", ") To find out about the systems types look at cdleary answer for using the struct module."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "sys.maxint", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "long", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"code": "<pre>\n<code>\n print type(variable_name)\n</code>\n</pre>\n", "senID": 0}, {"text": ["I also highly recommend the IPython interactive interpreter when dealing with questions like this.", "It lets you type variable_name?", "and will return a whole list of information about the object including the type and the doc string for the type."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "IPython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/"}, {"text": "variable_name?", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["e.g."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n In [9]: var = 123\n\nIn [10]: var?\nType:   \tint\nBase Class: &lt;type 'int'&gt;\nString Form:    123\nNamespace:  Interactive\nDocstring:\n    int(x[, base]) -&gt; integer\n\n    Convert a string or number to an integer, if possible.  A floating point\n    argument will be truncated towards zero (this does not include a string\n    representation of a floating point number!)  When converting a string, use\n    the optional base.  It is an error to supply a base when converting a\n    non-string. If the argument is outside the integer range a long object\n    will be returned instead.\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Do you mean in python or using ctypes?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In the first case, you simply cannot - because python does not have signed/unsigned, 16/32 bit integers."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In the second case, you can use type():"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import ctypes\n&gt;&gt;&gt; a = ctypes.c_uint() # unsigned int\n&gt;&gt;&gt; type(a)\n&lt;class 'ctypes.c_ulong'&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["For more reference on ctypes, an its type, see official documentation."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "official documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/ctypes.html"}]}]]