[[{"text": ["You can have a look at scipy: http://www.scipy.org/doc/api_docs/SciPy.stats.stats.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.scipy.org/doc/api_docs/SciPy.stats.stats.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.scipy.org/doc/api_docs/SciPy.stats.stats.html"}]}, {"code": "<pre>\n<code>\n from pydoc import help\nfrom scipy.stats.stats import pearsonr\nhelp(pearsonr)\n\n&gt;&gt;&gt;\nHelp on function pearsonr in module scipy.stats.stats:\n\npearsonr(x, y)\n Calculates a Pearson correlation coefficient and the p-value for testing\n non-correlation.\n\n The Pearson correlation coefficient measures the linear relationship\n between two datasets. Strictly speaking, Pearson's correlation requires\n that each dataset be normally distributed. Like other correlation\n coefficients, this one varies between -1 and +1 with 0 implying no\n correlation. Correlations of -1 or +1 imply an exact linear\n relationship. Positive correlations imply that as x increases, so does\n y. Negative correlations imply that as x increases, y decreases.\n\n The p-value roughly indicates the probability of an uncorrelated system\n producing datasets that have a Pearson correlation at least as extreme\n as the one computed from these datasets. The p-values are not entirely\n reliable but are probably reasonable for datasets larger than 500 or so.\n\n Parameters\n ----------\n x : 1D array\n y : 1D array the same length as x\n\n Returns\n -------\n (Pearson's correlation coefficient,\n  2-tailed p-value)\n\n References\n ----------\n http://www.statsoft.com/textbook/glosp.html#Pearson%20Correlation\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you don't feel like installing scipy, I've used this quick hack, slightly modified from Programming Collective Intelligence:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Programming Collective Intelligence", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://oreilly.com/catalog/9780596529321"}]}, {"text": ["(Edited for correctness."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from itertools import imap\n\ndef pearsonr(x, y):\n  # Assume len(x) == len(y)\n  n = len(x)\n  sum_x = float(sum(x))\n  sum_y = float(sum(y))\n  sum_x_sq = sum(map(lambda x: pow(x, 2), x))\n  sum_y_sq = sum(map(lambda x: pow(x, 2), y))\n  psum = sum(imap(lambda x, y: x * y, x, y))\n  num = psum - (sum_x * sum_y/n)\n  den = pow((sum_x_sq - pow(sum_x, 2) / n) * (sum_y_sq - pow(sum_y, 2) / n), 0.5)\n  if den == 0: return 0\n  return num / den\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The following code is a straight-up interpretation of the definition:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the definition", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient#Definition"}]}, {"code": "<pre>\n<code>\n import math\n\ndef average(x):\n    assert len(x) &gt; 0\n    return float(sum(x)) / len(x)\n\ndef pearson_def(x, y):\n    assert len(x) == len(y)\n    n = len(x)\n    assert n &gt; 0\n    avg_x = average(x)\n    avg_y = average(y)\n    diffprod = 0\n    xdiff2 = 0\n    ydiff2 = 0\n    for idx in range(n):\n        xdiff = x[idx] - avg_x\n        ydiff = y[idx] - avg_y\n        diffprod += xdiff * ydiff\n        xdiff2 += xdiff * xdiff\n        ydiff2 += ydiff * ydiff\n\n    return diffprod / math.sqrt(xdiff2 * ydiff2)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Test:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n print pearson_def([1,2,3], [1,5,7])\n</code>\n</pre>\n", "senID": 3}, {"text": ["returns"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n 0.981980506062\n</code>\n</pre>\n", "senID": 5}, {"text": ["This agrees with Excel, this calculator, NumPy, which return 0.981980506 and 0.9819805060619657, and 0.98198050606196574, respectively."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "this calculator", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://easycalculation.com/statistics/correlation.php"}, {"href": "http://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html", "text": "NumPy", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["R:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "R", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.r-project.org/R/trunk/src/library/stats/R/cor.R"}]}, {"code": "<pre>\n<code>\n &gt; cor( c(1,2,3), c(1,5,7))\n[1] 0.9819805\n</code>\n</pre>\n", "senID": 8}, {"text": ["EDIT: Fixed a bug pointed out by a commenter."], "childNum": 1, "tag": "p", "senID": 9, "childList": [{"text": "EDIT", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["I'd recommend SciPy as mentioned in the other answers.", "But if you want stand-alone code, see How to compute correlation accurately."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "How to compute correlation accurately", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.johndcook.com/blog/2008/11/05/how-to-calculate-pearson-correlation-accurately/"}]}], [{"text": ["Just for completeness, you can call R's statistical functions from Python using the rpy Python package.", "Probably overkill if all you want is the Pearson stat, but if you then want to go on and do lots of stats things that you can't find in the Python packages in other answers here, rpy might be the way to go."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["www.r-project.org"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["rpy.sourceforge.net"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I don't know anything about statistics, but this looks like a page you'll like: Statistics for Python"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Statistics for Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bonsai.hgc.jp/~mdehoon/software/python/Statistics/manual/index.xhtml"}]}]]