[[{"text": ["This seems to do the trick, at least comparing two windows, one running a straight ngrep (e.g.", "ngrep whatever) and one being piped into the following program (with ngrep whatever | ngrephl target-string)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #! /usr/bin/perl\n\nuse strict;\nuse warnings;\n\n$| = 1; # autoflush on\n\nmy $keyword = shift or die \"No pattern specified\\n\";\nmy $cache   = '';\n\nwhile (read STDIN, my $ch, 1) {\n    if ($ch eq '#') {\n        $cache =~ s/($keyword)/\\e[31m$1\\e[0m/g;\n        syswrite STDOUT, \"$cache$ch\";\n        $cache = '';\n    }\n    else {\n        $cache .= $ch;\n    }\n}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could also pipe the output through ack.", "The --passthru flag will help."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ack", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://petdance.com/ack/"}]}], [{"text": ["Ah, forget it.", "This is too much of a pain.", "It was a lot easier to get the source to ngrep and make it print the hash marks to stderr:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n --- ngrep.c     2006-11-28 05:38:43.000000000 -0800\n+++ ngrep.c.new 2008-10-17 16:28:29.000000000 -0700\n@@ -687,8 +687,7 @@\n     }\n\n     if (quiet &lt; 1) {\n-        printf(\"#\");\n-        fflush(stdout);\n+      fprintf (stderr, \"#\");\n     }\n\n     switch (ip_proto) {\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then, filtering is a piece of cake:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n while (&lt;CMD&gt;) {\n  s/($keyword)/\\e[93m$1\\e[0m/g;\n  print;\n}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["It shouldn't be too hard if you have the answer this question."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/213901/in-perl-how-do-i-process-input-as-soon-as-it-arrives-instead-of-waiting-for-new"}]}, {"text": ["(Essentially, read one character at a time and if it's a hash, print it.", "If it isn't a hash, save the character to print out later."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This is easy in python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\nimport sys, re\n\nkeyword = 'RED'\n\nwhile 1:\n    c = sys.stdin.read(1)\n    if not c:\n        break\n    if c in '#\\n':\n        sys.stdout.write(c)\n    else:\n        sys.stdout.write(\n            (c+sys.stdin.readline()).replace(\n            keyword, '\\x1b[31m%s\\x1b[0m\\r' % keyword))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["why not just call ngrep with the -q parameter to eliminate the hash marks?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["See the script at this post to Linux-IL where someone asked a similar question.", "It's written in Perl and uses the CPAN Term::ANSIColor module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this post to Linux-IL where someone asked a similar question", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.mail-archive.com/linux-il@cs.huji.ac.il/msg52876.html"}]}]]