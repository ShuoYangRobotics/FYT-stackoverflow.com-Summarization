[[{"text": ["int() is the Python function to convert a string into an integer value."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "int()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you know the structure of your list (that it simply contains lists, only one level), you could do this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n T2 = [map(int, x) for x in T1]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You can do this with a list comprehension:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n T2 = [[int(column) for column in row] for row in T1]\n</code>\n</pre>\n", "senID": 1}, {"text": ["The inner list comprehension ([int(column) for column in row]) builds a list of ints from a sequence of int-able objects, like decimal strings, in row.", "The outer list comprehension ([... for row in T1])) builds a list of the results of the inner list comprehension applied to each item in T1."], "childNum": 7, "tag": "p", "senID": 2, "childList": [{"text": "[int(column) for column in row]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}, {"text": "row", "childNum": 0, "tag": "code", "childList": []}, {"text": "[... for row in T1])", "childNum": 0, "tag": "code", "childList": []}, {"text": "T1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The code snippet will fail if any of the rows contain objects that can't be converted by int.", "You'll need a smarter function if you want to process rows containing non-decimal strings."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you know the structure of the rows, you can replace the inner list comprehension with a call to a function of the row.", "Eg."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n T2 = [parse_a_row_of_T1(row) for row in T1]\n</code>\n</pre>\n", "senID": 5}], [{"text": ["use int() to convert string to int"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I would agree with everyones answers so far but the problem is is that if you do not have all integers they will crash."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you wanted to exclude non-integers then"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n T1 = (('13', '17', '18', '21', '32'),\n      ('07', '11', '13', '14', '28'),\n      ('01', '05', '06', '08', '15', '16'))\nnew_list = list(list(int(a) for a in b) for b in T1 if a.isdigit())\n</code>\n</pre>\n", "senID": 2}, {"text": ["This yields only actual digits.", "The reason I don't use direct list comprehensions is because list comprehension leaks their internal variables."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I would rather prefer using only comprehension lists:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [[int(y) for y in x] for x in T1]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If it's only a tuple of tuples, something like rows=[map(int, row) for row in rows] will do the trick.", "(There's a list comprehension and a call to map(f, lst), which is equal to [f(a) for a in lst], in there."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "rows=[map(int, row) for row in rows]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Eval is not what you want to do, in case there's something like __import__(\"os\").unlink(\"importantsystemfile\") in your database for some reason.", "Always validate your input (if with nothing else, the exception int() will raise if you have bad input)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "__import__(\"os\").unlink(\"importantsystemfile\")", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Using list comprehensions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n t2 = [map(int, list(l)) for l in t1]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["T3=[]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range(0,len(T1)):\n    T3.append([])\n    for j in range(0,len(T1[i])):\n        b=int(T1[i][j])\n        T3[i].append(b)\n\nprint T3\n</code>\n</pre>\n", "senID": 1}]]