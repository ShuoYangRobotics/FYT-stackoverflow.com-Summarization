[[{"text": ["With awk you can try this"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n {   a[$1] = a[$1] \";\" $2 }\nEND { for (item in a ) print item, a[item] }\n</code>\n</pre>\n", "senID": 1}, {"text": ["So if you save this awk script in a file called awkf.awk and if your input file is ifile.txt, run the script "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n awk -f awkf.awk ifile.txt | sed 's/ ;/ /'\n</code>\n</pre>\n", "senID": 3}, {"text": ["The sed script is to remove out the leading ; "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Hope this helps"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"code": "<pre>\n<code>\n from collections import defaultdict\n\nitems = defaultdict(list)\nfor line in open('sourcefile'):\n    key, val = line.split('\\t')\n    items[key].append(val)\n\nresult = open('result', 'w')\nfor k in sorted(items):\n    result.write('%s\\t%s\\n' % (k, ';'.join(items[k])))\nresult.close()\n</code>\n</pre>\n", "senID": 0}, {"text": ["not tested"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Tested with Python 2.7:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import csv\n\ndata = {}\n\nreader = csv.DictReader(open('infile','r'),fieldnames=['key','value'],delimiter='\\t')\nfor row in reader:\n    if row['key'] in data:\n        data[row['key']].append(row['value'])\n    else:\n        data[row['key']] = [row['value']]\n\nwriter = open('outfile','w')\nfor key in data:\n    writer.write(key + '\\t' + ';'.join(data[key]) + '\\n')\nwriter.close()\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def compress(infilepath, outfilepath):\n    input = open(infilepath, 'r')\n    output = open(outfilepath, 'w')\n    prev_index = None\n\n    for line in input:\n        index, val = line.split('\\t')\n        if index == prev_index:\n            output.write(\";%s\" %val)\n        else:\n            output.write(\"\\n%s %s\" %(index, val))\n    input.close()\n    output.close()\n</code>\n</pre>\n", "senID": 0}, {"text": ["Untested, but should work.", "Please leave a comment if there are any concerns"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["A Perl way to do it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/perl \nuse strict;\nuse warnings;\nuse Data::Dumper;\n\nopen my $fh, '&lt;', 'path/to/file' or die \"unable to open file:$!\";\nmy %res;\nwhile(&lt;$fh&gt;) {\n    my ($k, $v) = split;\n    push @{$res{$k}}, $v;\n}\nprint Dumper \\%res;\n</code>\n</pre>\n", "senID": 1}, {"text": ["output:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "output:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n $VAR1 = {\n      'c' =&gt; [\n               'bar2'\n             ],\n      'a' =&gt; [\n               'foo',\n               'bar',\n               'foo2'\n             ],\n      'b' =&gt; [\n               'bar'\n             ]\n    };\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n #! /usr/bin/env perl\n\nuse strict;\nuse warnings;\n\n# for demo only\n*ARGV = *DATA;\n\nmy %record;\nmy @order;\nwhile (&lt;&gt;) {\n  chomp;\n  my($key,$combine) = split;\n\n  push @order, $key unless exists $record{$key};\n  push @{ $record{$key} }, $combine;\n}\n\nprint $_, \"\\t\", join(\";\", @{ $record{$_} }), \"\\n\" for @order;\n\n__DATA__\na foo\na bar\na foo2\nb bar\nc bar2\n</code>\n</pre>\n", "senID": 0}, {"text": ["Output (with tabs converted to spaces because Stack Overflow breaks the output):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\na       foo;bar;foo2\nb       bar\nc       bar2\n</pre>\n", "senID": 2}]]