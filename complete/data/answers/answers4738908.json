[[{"text": ["The reason reason why your original code does not work is the following: You just check (c%b) == 0) aka (a/b) is divisible by b, which is much weaker than the a/b is a power of b part of the definition."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "(c%b) == 0)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "(a/b) is divisible by b", "childNum": 0, "tag": "code", "childList": []}, {"text": "a/b is a power of b", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["When you want to solve a problem such as this you should always start with the trivial cases.", "In this case there are two such cases: is_power(x,x) and is_power(1,x) - in both the answer is True, because x**1==x and x**0==1. "], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "is_power(x,x)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "is_power(1,x)", "childNum": 0, "tag": "code", "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "x**1==x", "childNum": 0, "tag": "code", "childList": []}, {"text": "x**0==1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Once you have these cases covered you just need to write down the rest of the definition.", "Write code for (a is divisible by b) and (a/b is a power of b) and put it all together."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "(a is divisible by b) and (a/b is a power of b)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["The final function will look like this: "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def is_power(a,b):\n    if &lt;trivial case 1&gt; or &lt;trivial case 2&gt;:\n        return True\n    # its a recursive definition so you have to use `is_power` here\n    return &lt;a is divisible by b&gt; and &lt;a/b is a power of b&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["The only question left is how to answer &lt;a/b is a power of b&gt;.", "The easiest way to do this is using the function is_power itself - this is called recursion."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "&lt;a/b is a power of b&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is_power", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You are only checking the first two powers: a divides b and a/b divides b.", "It could be that a = b ** 3 or b ** 4 (or b ** n in general), so the actual solution will have to involve recursion or a loop."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I wouldn't say to generalize it.", "I would say to correct it as it's incorrect.", "Using your solution is_power(12,2) returns True as does is_power(18,3)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think that the reason that the system says to generalize it is that it's probably working correctly for some of their test cases, but not others.", "It's likely that the test cases for which it is working are coincidentally those for which it would work if it were hard-coded in a certain way (only checking powers of 2, for example)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You're checking whether a/b is divisible by b (in the expression (c%b) == 0), rather than whether a/b is a power of b.", "Hint: What function would you call to see whether something is a power of b?"], "childNum": 9, "tag": "p", "senID": 0, "childList": [{"text": "a/b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "divisible by", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "(c%b) == 0", "childNum": 0, "tag": "code", "childList": []}, {"text": "a/b", "childNum": 0, "tag": "code", "childList": []}, {"text": "power of", "childNum": 0, "tag": "em", "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}, {"text": "Hint:", "childNum": 0, "tag": "strong", "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["To understand recursion, you need first to understand recursion."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def is_power(a, b):\n     if a &lt; b: # 3 is never a power of 10, right?\n         return False # prevent recursion\n     if a == b:  # a is always a**1, right?\n         return True  # prevent recursion\n     else:\n         return is_power(a / b, b) # recursion!\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that for integers a / b will give you rounding errors.", "Make sure you pass floats."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "a / b", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I don't think you have the right implementation.", "Based on the problem, the is_power function should look something like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "is_power", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def is_power(a,b):\n    if a%b == 0 and is_power(float(a)/float(b), b):\n        return True\n    else:\n        return False\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can cheat and use log."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import math\n\ndef is_power(a, b):\n    return math.log(a, b) % 1 == 0\n</code>\n</pre>\n", "senID": 1}], [{"text": ["def is_power(a,b):\n    if(a==b):\n        return True\n    if(a%b==0):\n        if is_power(a/b,b):\n            return True\n        else:\n            return False\n    else:\n        return False"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]