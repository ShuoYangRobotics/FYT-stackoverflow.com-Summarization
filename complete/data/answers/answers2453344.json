[[{"text": ["Hexadecimal web colour values are just a form of RGB.", "Convert your RGB values to HSL, and then partition the Hue space into the different colours."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "HSL", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/HSL_and_HSV"}]}, {"text": ["For example, a Hue value of about 0-19 would be \"red\", 20-39 \"orange\", 40-59 \"yellow\", etc.", "(These numbers are not exact, I just had a quick glance at the Hue chart on the Wikipedia page."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For a more complex analysis of the colour name, use the Lightness value also.", "For example, \"brown\" is just a darker yellow."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["There is a program distributed with the Python source called pynche which can do this"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pynche", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["The functionality you need is in the method ColorDB.nearest() in ColorDB.py"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "ColorDB.nearest()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ColorDB.py", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["From Python/Tools/README"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The Wikipedia page for web colors has quite a lot of them listed, as does w3schools and the temptingly-named html-color-names.com.", ":-) And this guy has a seriously thorough page about color generally, and color on computers and the web specifically.", "You could visit them, search for your color code, and see if it's listed (and if not, look for close ones)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "Wikipedia page for web colors", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Web_colors"}, {"text": "w3schools", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.w3schools.com/html/html_colornames.asp"}, {"text": "html-color-names.com", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.html-color-names.com/color-chart.php"}, {"text": "this guy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.wilsonmar.com/1colors.htm"}]}, {"text": ["Edit I missed the Python tag.", "If you want to do this from code, the above may not be 100% useful.", "You could build a pretty good associative lookup based on information from sites like that, but even with color names being somewhat subjective, it seems like there's probably a good algorithmic approach out there."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "could", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}], [{"text": ["This page on Wikipedia provides an example of lookup from name to hex codes.", "It would be fairly easy to lookup in the other direction.", "Whether there is a relationship between codes and names that suits you is up to you.", "You'll probably find other color-name code tables too."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "This page", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/X11_color_names"}]}], [{"text": ["You can build dict of hex codes as keys and human readable color names as values."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Here is a heuristic/fuzzy function for guessing  what a color might look like ;)"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "heuristic/fuzzy", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "what a color might look like", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n colorof = {'f0f8ff':\"Alice Blue\",\n           'faebd7':\"Antique White\",\n           '000000':\"Black\"}\n\ndef get_color_name(hx):\n    # if color is found in dict\n    if colorof.has_key(hx):return colorof[hx]\n\n    # else return its closest available color\n    m = 16777215\n    k = '000000'\n    for key in colorof.keys():\n        a = int(hx[:2],16)-int(key[:2],16)\n        b = int(hx[2:4],16)-int(key[2:4],16)\n        c = int(hx[4:],16)-int(key[4:],16)\n\n        v = a*a+b*b+c*c # simple measure for distance between colors\n\n        # v = (r1 - r2)^2 + (g1 - g2)^2 + (b1 - b2)^2\n\n        if v &lt;= m:\n            m = v\n            k = key\n\n    return colorof[k]\n\nprint get_color_name('f0f8ff') # found in dict\nprint get_color_name('faeb11') # closest to Antique white\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Here is a small example I have written, which uses the pearson coefficient to compare two colors and chooses the most similar color from a dict.", "This solution is probably not the most efficient one, but the results should be quite good:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nre_color = re.compile('#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})')\nfrom math import sqrt\n\ndef color_to_rgb(color):\n    return tuple(int(x, 16) / 255.0 for x in re_color.match(color).groups())\n\ndef similarity(color1, color2):\n    \"\"\"Computes the pearson correlation coefficient for two colors. The result\n    will be between 1.0 (very similar) and -1.0 (no similarity).\"\"\"\n    c1 = color_to_rgb(color1)\n    c2 = color_to_rgb(color2)\n\n    s1 = sum(c1)\n    s2 = sum(c2)\n    sp1 = sum(map(lambda c: pow(c, 2), c1))\n    sp2 = sum(map(lambda c: pow(c, 2), c2))\n    sp = sum(map(lambda x: x[0] * x[1], zip(c1, c2)))\n\n    return (sp - (s1 * s2 / 3.0)) / sqrt((sp1 - pow(s1, 2) / 3.0) * (sp2 - pow(s2, 2) / 3.0))\n\ncolor_names = {\n    '#ff0000': 'red',\n    '#00ff00': 'green',\n    '#0000ff': 'blue'\n    # add more color definitions here\n}\n\ndef find_name(color):\n    sim = [(similarity(color, c), name) for c, name in color_names.items()]\n    return max(sim, key=lambda x: x[0])[1]\n\nprint find_name('#cc0000') # returns \"red\"\n</code>\n</pre>\n", "senID": 1}]]