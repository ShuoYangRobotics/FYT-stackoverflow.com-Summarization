[[{"text": ["A generator will solve your problem nicely."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def imerge(a, b):\n    for i, j in itertools.izip(a,b):\n        yield i\n        yield j\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can do something that is almost exaclty what @Pramod first suggested."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def izipmerge(a, b):\n  for i, j in itertools.izip(a,b):\n    yield i\n    yield j\n</code>\n</pre>\n", "senID": 1}, {"text": ["The advantage of this approach is that you won't run out of memory if both a and b are infinite."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'd do something like this.", "This will be most time and space efficient, since you won't have the overhead of zipping objects together.", "This will also work if both a and b are infinite."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "b", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n def imerge(a, b):\n    i1 = iter(a)\n    i2 = iter(b)\n    while True:\n        try:\n            yield i1.next()\n            yield i2.next()\n        except StopIteration:\n            return\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use zip as well as itertools.chain.", "This will only work if the first list is finite:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "zip", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "itertools.chain", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "only work", "childNum": 0, "tag": "b", "pos": 1, "childList": []}, {"text": "finite", "childNum": 0, "tag": "b", "childList": []}]}, {"code": "<pre>\n<code>\n merge=itertools.chain(*[iter(i) for i in zip(['foo', 'bar'], itertools.count(1))])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I also agree that itertools is not needed."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But why stop at 2?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def tmerge(*iterators):\n    for values in zip(*iterators):\n      for value in values:\n        yield value\n</code>\n</pre>\n", "senID": 2}, {"text": ["handles any number of iterators from 0 on upwards."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I'm not sure what your application is, but you might find the enumerate() function more useful."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; items = ['foo', 'bar', 'baz']\n&gt;&gt;&gt; for i, item in enumerate(items):\n...  print item\n...  print i\n... \nfoo\n0\nbar\n1\nbaz\n2\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One of the less well known features of Python is that you can have more for clauses in a generator expression.", "Very useful for flattening nested lists, like those you get from zip()/izip()."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def imerge(*iterators):\n    return (value for row in itertools.izip(*iterators) for value in row)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Why is itertools needed?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def imerge(a,b):\n    for i,j in zip(a,b):\n    \tyield i\n    \tyield j\n</code>\n</pre>\n", "senID": 1}, {"text": ["In this case at least one of a or b must be of finite length, cause zip will return a list, not an iterator.", "If you need an iterator as output then you can go for the Claudiu solution."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Using itertools.izip(), instead of zip() as in some of the other answers, will improve performance:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As \"pydoc itertools.izip\" shows:  \"Works like the zip() function but consumes less memory by returning an iterator instead of a list."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Itertools.izip will also work properly even if one of the iterators is infinite."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Use izip and chain together:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; list(itertools.chain.from_iterable(itertools.izip(items, c))) # 2.6 only\n['foo', 1, 'bar', 2]\n\n&gt;&gt;&gt; list(itertools.chain(*itertools.izip(items, c)))\n['foo', 1, 'bar', 2]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A concise method is to use a generator expression with itertools.cycle().", "It avoids creating a long chain() of tuples."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n generator = (it.next() for it in itertools.cycle([i1, i2]))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I prefer this other way which is much more concise:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n iter = reduce(lambda x,y: itertools.chain(x,y), iters)\n</code>\n</pre>\n", "senID": 1}]]