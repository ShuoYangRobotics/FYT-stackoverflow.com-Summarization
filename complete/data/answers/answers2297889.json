[[{"text": ["It sounds like you might need to create some sort of Domain Specific Language (DSL) for your users that could be built loosely on top of the target language.", "Ruby, Python and Lua all have their various quirks regarding syntax, and to a degree some of these can be massaged with clever function definitions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["An example of a fairly robust DSL is Cucumber which implements a an interesting strategy of converting user-specified verbiage to actual executable code through a series of regular expressions applied to the input data."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Cucumber", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cukes.info/"}]}, {"text": ["Another candidate might be JavaScript, or some kind of DSL to JavaScript bridge, as that would allow the strategy to run either client-side or server-side.", "That might help scale your application since client machines often have surplus computing power compared to a heavily loaded server."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Mark-Jason Dominus, the author of Perl's Text::Template module, has some insights that might be relevant:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Text::Template", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/perldoc?Text%3a%3aTemplate"}]}, {"text": ["If you write your own mini-language, you could end up in the same predicament -- maintaining a grammar and a parser for a tool that's crippled by design."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If a real programming language seems a bit too low-level, the solution may not be to abandon the language but instead to provide your end users with higher-level utility functions, so that they can operate with familiar concepts without getting bogged down in the weeds of the underlying language."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["That allows beginning users to operate at a high level; however, you and any end users with a knack for it -- your super-users -- can still leverage the full power of Ruby or Python or whatever."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Custom-made modules are going to be needed, no matter what you choose, that define your firm's high level constructs.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here are some of the needs I envision -- you may have some of these covered already: a way to get current positions, current and historical quotes, previous performance data, etc... into the application.", "Define/backtest/send various kinds of orders (limit/market/stop, what exchange, triggers) or parameters of options, etc...  You probably are going to need multiple sandboxes for testing as well as the real thing.     "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Quants want to be able to do matrix operations, stochastic calculus, PDEs.", "If you wanted to do it in python, loading NumPy would be a start.  "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["You could also start with a proprietary system designed to do mathematical financial research such as something built on top of Mathematica or Matlab."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["This might be a bit simplistic, but a lot of quant users are used to working with Excel &amp; VBA macros.", "Would something like VBSCript be usable, as they may have some experience in this area."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Existing languages are \"a little \"low level\" for my target users."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Yet, all you need is \"a minimum of support for looping, simple arithmatic, logical expression evaluation\""], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I don't get the problem.", "You only want a few features.", "What's wrong with the list of languages you provided?", "They actually offer those features?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["What's the disconnect?", "Feel free to update your question to expand on what the problem is."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I would use Common Lisp, which supports rapid development (you have a running image and can compile/recompile individual functions) and tailoring the language to your domain.", "You would provide functions and macros as building blocks to express strategies, and the whole language would be available to the user for combining these."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Define the language first -- if possible, use the pseudo-language called EBN, it's very simple (see the Wikipedia entry)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then once you have that, pick the language.", "Almost certainly you will want to use a DSL.", "Ruby and Lua are both really good at that, IMO."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Once you start working on it, you may find that you go back to your definition and tweak it.", "But that's the right order to do things, I think."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Is something along the lines of Processing the complexity level that you're shooting for?", "Processing is a good example of taking a full-blown language (Java) and reducing/simplifying the available syntax into only a subset applicable to the problem domain (problem domain = visualization in the case of Processing)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Processing", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://processing.org/"}]}, {"text": ["Here's a little side-by-side comparison from the Processing docs."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Java:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n g.setColor(Color.black)\nfillRect(0, 0, size.width, size.height);\n</code>\n</pre>\n", "senID": 3}, {"text": ["Processing:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n background(0);\n</code>\n</pre>\n", "senID": 5}, {"text": ["As others have suggested, you may be able to simply write enough high-level functions such that most of the complexity is hidden from the user but you still retain the ability to do more low-level things when necessary.", "The Wiring language for Arduino follows this strategy  of using a thin layer of high-level functions on top of C in order to make it more accessible to non-programmers and hobbyists. "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Arduino", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.arduino.cc/"}]}]]