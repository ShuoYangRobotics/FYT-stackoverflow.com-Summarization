[[{"text": ["It is possible to do this as one expression i.e.", "without needing semicolons:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "expression", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n __import__('shutil').copy(__import__('sys').argv[1], __import__('sys').argv[2])\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n open(__import__('sys').argv[2], \"w\").write(open(__import__('sys').argv[1]).read())\n</code>\n</pre>\n", "senID": 3}, {"text": ["Of course, nobody in their right mind would prefer this to your sample code.", "The only change I would make is that there's no reason to assign the file names to temporary variables:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from sys import argv\nopen(argv[1],'w').write(open(argv[2]).read())\n</code>\n</pre>\n", "senID": 5}, {"text": ["A more Pythonic way of writing this would be:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n import sys\nwith open(sys.argv[1]) as src, open(sys.argv[2]) as dest:\n    for line in src:\n        dest.write(line)\n</code>\n</pre>\n", "senID": 7}, {"text": ["and then you could start using argparse to make the command-line reading more robust..."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "argparse", "tag": "a", "pos": 0, "childList": [{"text": "argparse", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/dev/library/argparse.html"}, {"text": "argparse", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can use semicolon to keep the import statement on the same line.", "And reference the items in argv directly instead of using variables."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from sys import argv; open(argv[2],'w').write(open(argv[1]).read())\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Two things that you need to know:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["1) You can include multiple python statements on the same line by separating them with semicolons"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["2) You don't need to move the command line parameters into separate variables in order to use them."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["To avoid the multiple __import__of @katrielalex you could do:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__import__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(lambda a:open(a[2],\"w\").write(open(a[1]).read()))(__import__('sys').argv)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "(lambda a:open(a[2],\"w\").write(open(a[1]).read()))(__import__('sys').argv)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It's shorter, but it's ugly.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can get rid of the second line and reference argv directly in the third.", "To combine the remaining lines, you could use a semicolon.", "It's kind of cheating, but I don't see any better solution as you must import sys."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "argv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from sys import argv; open(argv[2],'w').write(open(argv[1]).read())\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n open(argv[2], 'w').write(open(argv[1]).read())\n</code>\n</pre>\n", "senID": 0}, {"text": ["i guess the import line is not counted..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["i hope the import line is not counted, because it means your manual encourage to use semicolons with import statement, that's horrible... you should avoid this in python..you must ;)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["PEP8 also discourage to use lines like"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import os, sys\n</code>\n</pre>\n", "senID": 5}, {"text": ["instead of the right way:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n import os\nimport sys\n</code>\n</pre>\n", "senID": 7}, {"text": ["so, don't use semicolons"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"code": "<pre>\n<code>\n import sys\n\nopen(sys.argv[3], 'w').write(open(sys.argv[2]).read())\n</code>\n</pre>\n", "senID": 0}, {"text": ["is probably the best you can do."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]