[[{"text": ["By \"shallow copying\" it means the content of the dictionary is not copied by value, but just creating a new reference."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "content", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = {1: [1,2,3]}\n&gt;&gt;&gt; b = a.copy()\n&gt;&gt;&gt; a, b\n({1: [1, 2, 3]}, {1: [1, 2, 3]})\n&gt;&gt;&gt; a[1].append(4)\n&gt;&gt;&gt; a, b\n({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})\n</code>\n</pre>\n", "senID": 1}, {"text": ["In contrast, a deep copy will copy all contents by value."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; c = copy.deepcopy(a)\n&gt;&gt;&gt; a, c\n({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})\n&gt;&gt;&gt; a[1].append(5)\n&gt;&gt;&gt; a, c\n({1: [1, 2, 3, 4, 5]}, {1: [1, 2, 3, 4]})\n</code>\n</pre>\n", "senID": 3}, {"text": ["So:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["\"new\" and \"original\" are different dicts, that's why you can update just one of them..", "The items are shallow-copied, not the dict itself."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "items", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["Take this example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n original = dict(a=1, b=2, c=dict(d=4, e=5))\nnew = original.copy()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Now let's change a value in the 'shallow' (first) level:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n new['a'] = 10\n# new = {'a': 10, 'b': 2, 'c': {'d': 4, 'e': 5}}\n# original = {'a': 1, 'b': 2, 'c': {'d': 4, 'e': 5}}\n# no change in original, since ['a'] is an immutable integer\n</code>\n</pre>\n", "senID": 3}, {"text": ["Now let's change a value one level deeper:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n new['c']['d'] = 40\n# new = {'a': 10, 'b': 2, 'c': {'d': 40, 'e': 5}}\n# original = {'a': 1, 'b': 2, 'c': {'d': 40, 'e': 5}}\n# new['c'] points to the same original['d'] mutable dictionary, so it will be changed\n</code>\n</pre>\n", "senID": 5}], [{"text": ["So the dict does get deepcopied, but the items in it don't.", "Since the items in the dict are integers, they get 'deep'copied, since there is no such thing as shallow copying small integers."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "does", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "in", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Edit: Never mind, see below."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Edit: Never mind, see below.", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Contents are shallow copied."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Contents", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["So if the original dict contains a list or another dictionary, modifying one them in the original or its shallow copy will modify them (the list or the dict) in the other."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}, {"text": "dictionary", "childNum": 0, "tag": "code", "childList": []}, {"text": "list", "childNum": 0, "tag": "code", "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["It's not a matter of deep copy or shallow copy, none of what you're doing is deep copy."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; new = original\n</code>\n</pre>\n", "senID": 2}, {"text": ["you're creating a new reference to the the list/dict referenced by original."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["while here:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; new = original.copy()\n&gt;&gt;&gt; # or\n&gt;&gt;&gt; new = list(original) # dict(original)\n</code>\n</pre>\n", "senID": 5}, {"text": ["you're creating a new list/dict which is filled with a copy of the references of objects contained in the original container."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}]]