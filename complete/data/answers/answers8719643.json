[[{"text": ["'spring' is the literal string passed as a parameter into function both_ends(), and 's' is the formal parameter to the function.", "Replacing a formal parameter with an actual parameter is performed when the function is called.", "The 'test()' function is just there to confirm that the function behaves as expected."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["When you call a function, the values you give the function are assigned to the corresponding arguments in the function header.", "In code:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def my_func(a): #function header; first argument is called a. \n                #a is not a string, but a variable.\n    print a     #do something with the argument\n\nmy_func(20)     #calling my_func with a value of 20. 20 is assigned to a in the\n                #body of the function.\n</code>\n</pre>\n", "senID": 1}], [{"text": ["s is a variable that we presume to hold a string.", "We pass 'spring' in through as a parameter."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "'spring'", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["s in def both_ends(s) is the parameter for the input string.", "The length of this string is checked with the call to len(s) &lt; 2, and various characters in the string are accessed by position with s[0:2] and s[-2:]"], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "def both_ends(s)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "len(s) &lt; 2", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "s[0:2]", "childNum": 0, "tag": "code", "childList": []}, {"text": "s[-2:]", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["See http://docs.python.org/tutorial/controlflow.html#defining-functions for specifics.", "Also the tutorial at http://docs.python.org/tutorial/index.html is pretty good - I mostly learnt from it."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "http://docs.python.org/tutorial/controlflow.html#defining-functions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/controlflow.html#defining-functions"}, {"text": "http://docs.python.org/tutorial/index.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/index.html"}]}], [{"text": ["s is the parameter to the function, but you plug in real strings like hello or world into the function instead of just the letter s. Think of it like a math function: you have f(x) = x + 5.", "When you plug in a number, say 2, you get f(2) = 2 + 5.", "That's exactly what happens with the both_ends function.", "To make it simpler, here's some code:"], "childNum": 7, "tag": "p", "senID": 0, "childList": [{"text": "s", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "hello", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "world", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "s", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "f(x) = x + 5", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "f(2) = 2 + 5", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def f(x):\n    return x + 5\n\nf(2)\n</code>\n</pre>\n", "senID": 1}, {"text": ["The way you plug into the function in the code here is the same way you plug a string into your original function."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]