[[{"text": ["If the code in the except block runs it is because an exception was raised.", "You swallow the exception which makes it hard to know what's going wrong."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "except", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Your error message suggests that you are attempting to trap errors raised in the file open.", "But since your try block surrounds the entire processing of the file, exceptions raised in the processing, as opposed to the file open, will be mis-reported as \"Could not open file\".", "If you really must handle the exception then you need to move the for loop to be after the except block."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "try", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "except", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Personally I'd be inclined to simply ignore the exception and let the default handling of the exception halt execution:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n with open('sample.txt','r') as file:\n    for line in file:\n        (some action here)\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you must handle the exception then be discerning about the class exception that you handle.", "For example, handle just IOError since that is what open raises in case of failure."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "IOError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "open", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n try:   \n    with open('sample.txt','r') as file:\n        for line in file:\n            (some action here)\nexcept IOError:\n    except IOError as (errno, strerror):\n        print \"I/O error({0}): {1}\".format(errno, strerror)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["It's not failing on the open line, then.", "What's the exception?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "open", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n    file=open('sample.txt','r')\n    for line in file:\n          (some action here)\nexcept:\n    print \"Exception:\"\n    import traceback; traceback.print_exc()\n\nfile.close()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["That bare except catches all exceptions, including ones in the (some action here) part.", "Restructure that as:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "except", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "all", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "(some action here)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n try:\n    inputfile = open('sample.txt', 'r')\nexcept:\n    print \"Couldn't open file\"\nelse:\n    for line in inputfile: pass\n    inputfile.close()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or even better:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n with open('sample.txt', 'r') as inputfile:\n    for line in inputfile: pass\n</code>\n</pre>\n", "senID": 3}, {"text": ["In general, only wrap the bare minimum amount of code possible inside a try block so that you're not accidentally handling exceptions you're not really prepared to deal with."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "try", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["your code risks raising another assertion trying to close file if for some reason the open() call fails.", "This is because the file variable won't be set if open() raises an exception, and so your call further down will reference a variable that doesn't exist."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If possible, try using the with statement:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n with open('sample.txt', 'r') as file:\n    try:\n        for line in file:\n            (some action)\n    except:\n        print \"Exception\"\n        import traceback; traceback.print_exc()\n</code>\n</pre>\n", "senID": 2}, {"text": ["This will make sure that file is closed afterwards regardless of what happens inside the with statement."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Try using readlines to generate a list of all lines in the file.", "And you also shouldnt be catching general errors without at least printing the error code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    file=open('sample.txt','r')\n    for line in file.readlines():\n          (some action here)\nexcept Exception, e:\n    print str(e)\nfile.close()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Yes, this is the case.", "But this only occurs as long as the file exists."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "as long as the file exists", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["As for the error falling through to the except clause (assuming the file exists), that implies that there is an issue with the parsing logic you've implemented.", "We can't be sure what it is since the except catches everything, and unless it's re-raised (may as well not catch it then...), or you print the stack trace from theexceptionobject, you can't tell what is going wrong or where.", "In general, this is why catching everything is frowned upon; it makes debugging unnecessarily difficult."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "except", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "except", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "print the stack trace from theexceptionobject", "tag": "a", "pos": -1, "childList": [{"text": "exception", "tag": "code"}], "childNum": 1, "href": "http://stackoverflow.com/questions/4564559/get-exception-description-and-stack-trace-which-caused-an-exception-all-as-a-st"}, {"text": "exception", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["I also noticed that you are closing the file at the very end.", "This is probably another source of errors, since the file only exists within the scope of try.", "You have two options:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "try", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]