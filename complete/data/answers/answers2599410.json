[[{"text": ["Not that it \"has one way of doing things\" as more \"There should be one-- and preferably only one --obvious way to do it.", "\" (from Zen of Python)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This doesn't exclude possibility of having more than one way of doing things.", "We're talking about programming where creativity is one of the most important skills and finding new ways of solving problems is a must."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In your example you're doing two different things:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["it happens that in this particular case result is exactly the same."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Those are two different things.", "max() gives you the largest element of the list (using regular number comparison by default), while [-1] gives you the last element &ndash; in your example, this happens to be the same thing.", "But consider this:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "max()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "largest", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "[-1]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "last", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; seq = [2, 7, 5, 4]\n&gt;&gt;&gt; max(seq)\n7\n&gt;&gt;&gt; seq[-1]\n4\n</code>\n</pre>\n", "senID": 1}, {"text": ["BTW, seq[:1] gives you something different again &ndash; namely [1] (or [2] in my example), a one-element list.", "What you probably meant was seq[0], which is the first element of the list, compared to min(seq), the smallest one."], "childNum": 7, "tag": "p", "senID": 2, "childList": [{"text": "seq[:1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "[1]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "[2]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "seq[0]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "first", "childNum": 0, "tag": "em", "childList": []}, {"text": "min(seq)", "childNum": 0, "tag": "code", "childList": []}, {"text": "smallest", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["One obvious way."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "obvious", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import this\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In your example, you actually do two different things -- they just happen to give the same result, because your input list is sorted.", "However, there's always multiple ways of doing things.", "Python's approach isn't really to avoid or forbid multiple ways of doing the same thing, but have one - and preferably only one - obvious way of doing things."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "result", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["max(), min() and index slicing they all do different things.", "In your list, the order may not be sorted like your example, so using slicing will not get the max/min for you in those cases.", "if you want to get max/min values, just use max()/min() functions"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "max()/min()", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["There is always more than one way to solve a problem, but the python developers try not to add language features that offer redundant functionality, which is very unlike perl."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]