[[{"text": ["It's cultural.", "In Python, you don't write to other classes' instance or class variables.", "In Java, nothing prevents you from doing the same if you really want to - after all, you can always edit the source of the class itself to achieve the same effect.", "Python drops that pretense of security and encourages programmers to be responsible.", "In practice, this works very nicely."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "really", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["If you want to emulate private variables for some reason, you can always use the \"__\" prefix from PEP 8.", "Python mangles the names of variables like __foo so that they're not easily visible to code outside the class that contains them (although you can get around it if you're determined enough, just like you can get around Java's protections if you work at it)."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "PEP 8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}, {"text": "can", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "can", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["By the same convention, the \"_\" prefix means \"stay away even if you're not technically prevented from doing so.", "\"  You don't play around with another class's variables that look like __foo or _bar."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["\"In java, we have been taught about public/private/protected variables\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["\"Why is that not required in python?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For the same reason it's not required in Java."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "required", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You're free to use -- or not use private and protected."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "private", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "protected", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["As a Python and Java programmer, I've found that private and protected are very, very important design concepts.", "But as a practical matter, in tens of thousands of lines of Java and Python, I've never actually used private or protected."], "childNum": 5, "tag": "p", "senID": 4, "childList": [{"text": "private", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "protected", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "actually", "childNum": 0, "tag": "em", "childList": []}, {"text": "private", "childNum": 0, "tag": "code", "childList": []}, {"text": "protected", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Why not?"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Here's my question \"protected from whom?", "\"  "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Other programmers on my team?", "They have the source.", "What does protected mean when they can change it?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["Other programmers on other teams?", "They work for the same company.", "They can -- with a phone call -- get the source."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Clients?", "It's work-for-hire programming (generally).", "The clients (generally) own the code."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["So, who -- precisely -- am I protecting it from?"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"text": ["Right.", "The schizophrenic sociopath who refused to read the API comment blocks."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}], [{"text": ["Python has limited support for private identifiers, through a feature that automatically prepends the class name to any identifiers starting with two underscores.", "This is transparent to the programmer, for the most part, but the net effect is that any variables named this way can be used as private variables."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See here for more on that."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/classes.html#private-variables"}]}, {"text": ["In general, Python's implementation of object orientation is a bit primitive compared to other languages.", "But I enjoy this, actually.", "It's a very conceptually simple implementation and fits well with the dynamic style of the language."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["My method is to use 512 bit variable name generate by Whirlpool and a random number generator.", "When variables names look like this \"_P_3CCF8252D8BBB258460D9AA999C06EE38E67CB546CFFCF48E91F700F6FC7C183AC8CC3D3096DD30A35B01F4620A1E3A20D79CD5168544D9E1B7CDF49970E87F1\".", "And this variable names change from one release version to another by automated script.", "It will not actually prevent or make the variables privat but it will make life difficult for anyone not using the provided API."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Python does not need to protect anyone from assigning a value to a member variable, because:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A) In Python you cannot accidentally make a typo such that a comparison turns into an assignment.", "B) Python developers do not make mistakes.", "C) All of the above.", "D) What was the question again?"], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}]}], [{"text": ["private and protected concepts are very important.", "But python - just a tool for prototyping and rapid development with restricted resources available for development, that is why some of protection levels are not so strict followed in python.", "You can use \"__\" in class member, it works properly, but looks not good enough - each access to such field contains these characters. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also, you can noticed that python OOP concept is not perfect, smaltalk or ruby much closer to pure OOP concept.", "Even C# or Java are closer. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Python is very good tool.", "But it is simplified OOP language.", "Syntactically and conceptually simplified.", "The main goal of python existence is to bring to developers possibility to write easy readable code with high abstraction level in a very fast manner.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]