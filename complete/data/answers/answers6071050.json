[[{"text": ["Python already has a very nice construct for doing just this and it doesn't use continue:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "continue", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in range(10):\n    try:\n        r = 1.0 / (i % 2)\n    except Exception, e:\n        print(e)\n    else:\n        print(r)\n</code>\n</pre>\n", "senID": 1}, {"text": ["I wouldn't nest any more than this, though, or your code will soon get very ugly."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In your case I would probably do something more like this as it is far easier to unit test the individual functions and flat is better than nested:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "flat is better than nested", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\ndef something_that_may_raise(i):\n    return 1.0 / (i % 2)\n\ndef handle(e):\n    print(\"Exception: \" + str(e))\n\ndef do_something_with(result):\n    print(\"No exception: \" + str(result))\n\ndef wrap_process(i):\n    try:\n        result = something_that_may_raise(i)\n    except ZeroDivisionError, e:\n        handle(e)\n    except OverflowError, e:\n        handle(e) # Realistically, this will be a different handler...\n    else:\n        do_something_with(result)\n\nfor i in range(10):\n    wrap_process(i)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Remember to always catchspecificexceptions.", "If you were not expecting a specific exception to be thrown, it is probably not safe to continue with your processing loop."], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "catchspecificexceptions", "tag": "a", "pos": 0, "childList": [{"text": "specific", "tag": "em"}], "childNum": 1, "href": "http://wiki.python.org/moin/HandlingExceptions"}, {"text": "specific", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "specific", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Edit following comments:"], "childNum": 0, "tag": "h2", "senID": 6, "childList": []}, {"text": ["If you really don't want to handle the exceptions, which I still think is a bad idea, then catch all exceptions (except:) and instead of handle(e), just pass.", "At this point wrap_process() will end, skipping the else:-block where the real work is done, and you'll go to the next iteration of your for-loop."], "childNum": 6, "tag": "p", "senID": 7, "childList": [{"text": "except:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "handle(e)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "pass", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "wrap_process()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "else:", "childNum": 0, "tag": "code", "childList": []}, {"text": "for", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Bear in mind, Errors should never pass silently."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "Errors should never pass silently", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0020/"}]}], [{"text": ["Maybe you want to do continuations?", "You could go and look at how Eric Lippert explains them (if you are ready to have your mind blown, but in Python it could look a bit like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Eric Lippert explains them", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://blogs.msdn.com/b/ericlippert/archive/2010/10/21/continuation-passing-style-revisited-part-one.aspx"}]}, {"code": "<pre>\n<code>\n def attempt(operation, continuation):\n    try:\n        operation()\n    except:\n        log('operation failed!')\n    continuation()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Inside your loop you could do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n attempt(attempt_something, lambda: foo(bar)) # attempt_something is a function\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Think that you are mapping foo on all items where attempt worked.", "So attempt is a filter and it's easy to write this as a generator:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "foo", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "attempt", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "attempt", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def attempted( items ):\n    for item in items:\n        try:\n            yield attempt( item )\n        except Exception, e:\n            log(e)\n\nprint [foo(bar) for bar in attempted( items )]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for l in loop:\n  attempt() and foo(bar)\n</code>\n</pre>\n", "senID": 1}, {"text": ["but you should make sure attempt() returns True or False."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Really, though, Johnsyweb's answer is probably better."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["The whole idea of exceptions is that they work across multiple levels of indirection, i.e., if you have an error (or any other exceptional state) deep inside your call hierarchy, you can still catch it on a higher level and handle it properly."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "exceptional", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["In your case, say you have a function attempt() which calls the functions attempt2() and attempt3() down the call hierarchy, and attempt3() may encounter an exceptional state which should cause the main loop to terminate:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class JustContinueException(Exception):\n    pass\n\nfor i in range(0,99):\n    try:\n        var = attempt() # calls attempt2() and attempt3() in turn\n    except JustContinueException:\n        continue # we don't need to log anything here\n    except Exception, e:\n        log(e)\n        continue\n\n    foo(bar)\n\ndef attempt3():\n    try:\n        # do something\n    except Exception, e:\n        # do something with e, if needed\n        raise # reraise exception, so we catch it downstream\n</code>\n</pre>\n", "senID": 2}, {"text": ["You can even throw a dummy exception yourself, that would just cause the loop to terminate, and wouldn't even be logged."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def attempt3():\n    raise JustContinueException()\n</code>\n</pre>\n", "senID": 4}], [{"text": ["I wouldn't normally post a second answer, but this is an alternative approach if you really don't like my first answer."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "my first answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/6071050/python-how-to-tell-the-for-loop-to-continue-from-a-function/6071174#6071174"}]}, {"text": ["Remember that a function can return a tuple."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "tuple", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n #!/usr/bin/env python\n\ndef something_that_mail_fail(i):\n    failed = False\n    result = None\n    try:\n        result = 1.0 / (i % 4)\n    except:\n        failed = True # But we don't care\n    return failed, result\n\nfor i in range(20):\n    failed, result = something_that_mail_fail(i)\n    if failed:\n        continue\n    for rah in ['rah'] * 3:\n        print(rah)\n    print(result)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I maintain that try ... except ... else is the way to go, and you shouldn't silently ignore errors though.", "Caveat emptor and all that."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "try ... except ... else", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Caveat emptor", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}]]