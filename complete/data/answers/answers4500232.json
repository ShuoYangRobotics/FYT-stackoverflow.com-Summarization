[[{"text": ["Python is a dynamic language."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "dynamic language", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Dynamic_programming_language"}]}, {"text": ["This means that much of the work that other static languages (like C# and Java) do at compile time, is done at runtime and this reduces performances."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["EDIT:\nFurthermore, JIT compiler for a dynamic language like python, can perform much less optimisations on the code because it can't do many assumptions due to the dynamicity of the code."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["e.g.", "Dynamic typing prevents assumptions about type of fields/variables/parameters... , thus any optimisation involving that is almost impossible."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "e.g.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["EDIT2:\njust a clarification:\nwhen I say compile time, I mean also JIT compile time, because actually JIT is a compiler.", "Applying this to my first sentence, yields that Python can perform much less work at JIT time than C# or Java..."], "childNum": 4, "tag": "p", "senID": 4, "childList": [{"text": "EDIT2:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}], [{"text": ["People have already pointed out the technical details, so I'll add another factor: money."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In the last few years, Javascript VMs (Google's V8, Mozilla's Tracemonkey &amp; Jaegermonkey, Apple's Nitro) have delivered a huge speed increase for another dynamic language.", "That's been driven in large part by Google's desire to make web apps more powerful.", "Python just doesn't have a big company standing to gain by making it 50x faster."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Oh, and the integration with C extensions like numpy means that speed is rarely critical for Python code, anyway."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The simplest possible answer is that PyPy is simply not yet as fast as hotspot and Psyco never will."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Writing a reasonable JIT is a long and tedious process and it took for example many years for hotspot to get where it is (with a lot of funding as well).", "The more complex and dynamic the language is, the longer it takes.", "On the bright side, we have good examples how JITs for dynamic languages can be very fast, take LuaJIT for one, which can beat C or JVM on many examples."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["There are good news however: According to speed center PyPy got 27% faster on average in the past 100 revisions, so it'll happen eventually."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "speed center", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://speed.pypy.org/changes/?tre=100&rev=40170%3ac407c9dc5382&exe=1&env=tannit"}]}], [{"text": ["A really good question.", "I can't give you a complete answer, but I think one of the reasons is the \"everything is objects and an object could be anything\" concept.", "In Java, if you try \"1.getClass()\", it won't work unless you box it first, either explicitly or implicitly.", "In Python, it works out of the box.", "But objects are definitely more heavyweight than primitive types, which Python just doesn't seem to have."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The \"an object can be anything\" part is even more important.", "If you write \"someobject.somefield\" in Java, it knows at compile time what exactly is \"somefield\" and generates code that accesses it directly.", "Well, there are probably some tricks to give better binary compatibility, but that's nothing like Python, where it actually performs some sort of dictionary look-up at run time to figure out what exactly is \"somefield\" at that particular moment, as fields can be added and deleted dynamically."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To put it short, Python is more powerful, but that power has its cost."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can't really compare dynamic languages to enterprise-level static languages.", "Sun spent a lot of money  optimizing the language, VM and JIT.", "Microsoft also did a fair job with their VM."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a lot", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["It is more interesting to compare jit'ed dynamic languages.", "Is it something about JavaScript that let google make their V8 faster than both PyPy and ruby 1.9 or it is just amount of money one invests?"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "PyPy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://shootout.alioth.debian.org/u32/benchmark.php?test=all&lang=v8&lang2=pypy"}, {"href": "http://shootout.alioth.debian.org/u32/benchmark.php?test=all&lang=v8&lang2=yarv", "text": "ruby 1.9", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Compare those Python implementations to non-JITinterpreted-mode Java and think about your question again."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "to non-JITinterpreted-mode Java", "tag": "a", "pos": 0, "childList": [{"text": "interpreted-mode Java", "tag": "strong"}], "childNum": 1, "href": "http://shootout.alioth.debian.org/u32/benchmark.php?test=all&lang=javaxint&lang2=pypy"}, {"text": "interpreted-mode Java", "childNum": 0, "tag": "strong", "childList": []}]}]]