[[{"text": ["You can do it this way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list.sort(key=lambda item:item['date'], reverse=True)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n from operator import itemgetter\n\nyour_list.sort(key=itemgetter('date'), reverse=True)\n</code>\n</pre>\n", "senID": 0}, {"tag": "ul", "num": 2, "lis": [{"text": ["don't use list, dict as variable names, they are builtin names in Python.", "It makes your code hard to read."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "list", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["you might need to replace dictionary by tuple or collections.namedtuple or custom struct-like class depending on the context"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "tuple", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/collections.html#collections.namedtuple", "text": "collections.namedtuple", "childNum": 1, "tag": "a", "childList": [{"text": "collections.namedtuple", "tag": "code"}]}, {"text": "collections.namedtuple", "childNum": 0, "tag": "code", "childList": []}]}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; lst = [Row('a', 1), Row('b', 2)]\n&gt;&gt;&gt; lst.sort(key=itemgetter(1), reverse=True)\n&gt;&gt;&gt; lst\n[Row(title='b', date=2), Row(title='a', date=1)]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Or "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from operator import attrgetter\n&gt;&gt;&gt; lst = [Row('a', 1), Row('b', 2)]\n&gt;&gt;&gt; lst.sort(key=attrgetter('date'), reverse=True)\n&gt;&gt;&gt; lst\n[Row(title='b', date=2), Row(title='a', date=1)]\n</code>\n</pre>\n", "senID": 6}, {"text": ["Here's how namedtuple looks inside:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "namedtuple", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; Row = namedtuple('Row', 'title date', verbose=True)\n\nclass Row(tuple):\n        'Row(title, date)'\n\n        __slots__ = ()\n\n        _fields = ('title', 'date')\n\n        def __new__(cls, title, date):\n            return tuple.__new__(cls, (title, date))\n\n        @classmethod\n        def _make(cls, iterable, new=tuple.__new__, len=len):\n            'Make a new Row object from a sequence or iterable'\n            result = new(cls, iterable)\n            if len(result) != 2:\n                raise TypeError('Expected 2 arguments, got %d' % len(result))\n            return result\n\n        def __repr__(self):\n            return 'Row(title=%r, date=%r)' % self\n\n        def _asdict(t):\n            'Return a new dict which maps field names to their values'\n            return {'title': t[0], 'date': t[1]}\n\n        def _replace(self, **kwds):\n            'Return a new Row object replacing specified fields with new values'\n\n            result = self._make(map(kwds.pop, ('title', 'date'), self))\n            if kwds:\n                raise ValueError('Got unexpected field names: %r' % kwds.keys())\n\n            return result\n\n        def __getnewargs__(self):\n            return tuple(self)\n\n        title = property(itemgetter(0))\n        date = property(itemgetter(1))\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Sort the data (or a copy of the data) directly and build the list of dicts afterwards.", "Sort using the function sorted with an appropiate key function (operator.attrgetter probably)"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you're into the whole brevity thing:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data = \"data from database\"\nsorted_data = sorted(\n    [{'title': x.title, 'date': x.created_on} for x in data], \n    key=operator.itemgetter('date'),\n    reverse=True)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I actually had this almost exact question yesterday and solved it using search.", "The best answer applied to your question is this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "solved it using search", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/72899/in-python-how-do-i-sort-a-list-of-dictionaries-by-values-of-the-dictionary"}]}, {"code": "<pre>\n<code>\n from operator import itemgetter\nlist.sort(key=itemgetter('date'), reverse=True)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Thanks for all the great responses."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list.sort(key=lambda item:item['date'], reverse=True)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Worked like a charm!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Also,"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["@J.F.", "Sebastian I wasn't using those as variable names, just examples for this post, but thanks for the info."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["@Tetha, sorry I should have been more clear, I was doing this proccess multiple times with multiple query's, so I couldn't sort it correctly from the get go. "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}]]