[[{"text": ["(?:\\d{1,3}\\.){3}\\d{1,3}(?:/\\d\\d?", ")?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "(?:\\d{1,3}\\.){3}\\d{1,3}(?:/\\d\\d?)?", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["I had problems using a regex similar to yours.", "It was matching 1.2.3.4.5 (as 1.2.3.4) and 1111.2.3.4 (as 111.2.3.4).", "To avoid matching these, I added look ahead/behind assertions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n IP_RE      = re.compile(r\"(?&lt;!\\d\\.)(?&lt;!\\d)(?:\\d{1,3}\\.){3}\\d{1,3}(?!\\d|(?:\\.\\d))\")\nIP_CIDR_RE = re.compile(r\"(?&lt;!\\d\\.)(?&lt;!\\d)(?:\\d{1,3}\\.){3}\\d{1,3}/\\d{1,2}(?!\\d|(?:\\.\\d))\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["The (?&lt;!\\d\\.", ")(?&lt;!\\d) checks that there isn't a number or octet before your first octet (ie: no 1 before 111.2.3.4).", "And (?!\\d|(?", ":\\.\\d)) checks that there isn't a number/octet after your last (ie: no .5 after 1.2.3.4)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "(?&lt;!\\d\\.)(?&lt;!\\d)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "(?!\\d|(?:\\.\\d))", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Then, to check that the strings these match are valid IPs (eg: not 277.1.1.1), you can use"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["socket.inet_aton(ip) #raises exception if IP is invalid"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "socket.inet_aton(ip) #raises exception if IP is invalid", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Append \"(?:/\\d{1,2})?", "\"."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"(?:/\\d{1,2})?\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["That gets you r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(?:/\\d{1,2})?", "\" for a pattern."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(?:/\\d{1,2})?\"", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["this extends your existing expression"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\\\\\d{1,2}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This page seems to have a solution http://hse-at-work.blogspot.com/2006/11/regular-expression-to-match-ipv4.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://hse-at-work.blogspot.com/2006/11/regular-expression-to-match-ipv4.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://hse-at-work.blogspot.com/2006/11/regular-expression-to-match-ipv4.html"}]}], [{"text": ["\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(?", ":/\\d{1,2}|)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(?:/\\d{1,2}|)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Tested in Expresso"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Expresso", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ultrapico.com/Expresso.htm"}]}, {"text": ["Matched:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 64.33.232.212\n64.33.232.212/30\n</code>\n</pre>\n", "senID": 3}]]