[[{"text": ["for your edited question, you want"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [i * j for j, i in enumerate(S)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["python doesn't have ++ because it keeps a clear distinction between statements and expressions.", "use"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "++", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n [(i + 40) * i for i in xrange(60)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["another way to do this is"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n [i * j for i, j in enumerate(xrange(60), start=40)]\n</code>\n</pre>\n", "senID": 5}, {"text": ["and yet another way is "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n [i * j for i, j in zip(xrange(40, 100), xrange(60))]\n</code>\n</pre>\n", "senID": 7}, {"text": ["I think that the first is the best way to do it because it reduces function calls and is the most readable."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["Also, if you don't know that you absolutely need a list, use a generator expression"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n ((i + 40) * i for i in xrange(60))\n</code>\n</pre>\n", "senID": 10}, {"text": ["This will allow you to process the results one at a time and never store a whole list in memory.", "You can pass a generator expression to stuff like sum, max, min and most other builtins."], "childNum": 3, "tag": "p", "senID": 11, "childList": [{"text": "sum", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "max", "childNum": 0, "tag": "code", "childList": []}, {"text": "min", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n S = range(40,100)\n[i*j for i,j in enumerate(S)]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["One way to do this would be to use enumerate in conjunction with range:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "enumerate", "tag": "a", "pos": 0, "childList": [{"text": "enumerate", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#enumerate"}, {"text": "enumerate", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/functions.html#range", "text": "range", "childNum": 1, "tag": "a", "childList": [{"text": "range", "tag": "code"}]}, {"text": "range", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n [x * (count + 1) for count, x in enumerate(range(40, 100))]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Look at other answers for (a lot of) other ways to do this :) :)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'd do it in a generator:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def fooGen(S):\n    j = 1\n    for i in S:\n        yield i * j\n        J += 1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["\"\"\"\ntask: {x*y such that x belongs to S &amp; y is iteration count } where S is some other set\n[snip unfortunate introduction of i and j]\n[s1*1, s2*2, s3*3...]\n\"\"\""], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["a very simple translation:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [x * y for y, x in enumerate(S, start=1)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n [x * (y + 1) for y, x in enumerate(S)]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["you can use the current element index as an incrementor "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; S=[2,4,6,8]\n&gt;&gt;&gt; [i*(S.index(i)+1) for i in S]\n[2, 8, 18, 32]\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["so your c-ish \"j++\" is S.index(i)+1"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]