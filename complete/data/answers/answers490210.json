[[{"text": ["Right now the hottest \"low level\" framework is werkzeug and would be a very good place to start.", "It's minimal and WSGI compliant so you can easily plug-in a lot of the WSGI components out there like dozer for debugging memory leaks, etc."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "werkzeug", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://werkzeug.pocoo.org/"}, {"text": "dozer", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://bitbucket.org/bbangert/dozer/src/"}]}, {"text": ["If you need higher level try Pylons, which is still WSGI compliant, but gives you more stuff."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Pylons", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pylonshq.com/"}]}, {"text": ["WSGI compliance is important for a few reasons, but most importantly so your app can run under mod_wsgi which totally rocks."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "mod_wsgi", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/modwsgi/"}]}, {"text": ["EDIT: I should note that almost all python frameworks, including Django, are WSGI compliant these days."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["It sounds like web.py might suit you.", "Pylons and TurboGears aren't \"application frameworks\" at quite the same level of say Django, but they're certainly \"full stack\" frameworks, most useful for developing yes, web applications.", "But then, that's what mostly gets written."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "web.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://webpy.org/"}]}, {"text": ["Knowing what sort of things you're planning on doing might help people to guide you to the right sort of library."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I somewhat answered your question here.", "But for a more complete list of HTTP frameworks:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/7170/recommendation-for-straight-forward-python-frameworks#7223"}]}, {"tag": "ul", "num": 4, "lis": [{"text": ["CherryPy"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["web.py"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["Paste"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["WebOb"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}]}], [{"text": ["Have you considered just hacking one of your own?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A simple action framework (that's basically what you're talking about here) is actually pretty simple, and with a dynamic language like Python it should be even simpler."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It will require perhaps a bit of \"advanced\" python knowledge (I don't know how comfortable you are with Python), reflection mostly, perhaps, but it's really not a great leap."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["As a benefit, you will have a better understanding of your request cycle."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The other thing to look for is some kind of \"Python Server Pages\", specifically something that lets you render Python data in to an HTML page.", "There are several of these (also look at Python templating tools, same thing really). "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["The goal here is that you can off the shelf the \"view\" layer, and then use your little mini framework for actual control and dispatch."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["At a minimum it is an interesting project, and I think you'd amazed how much you can do quickly and with little code.", "This may well be why such frameworks aren't really \"obvious\" for Python, unlike, say, Java."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["Also, once you're done you'll have a better understanding of what to look for in another framework."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["\"Django, Grok, Pylons and all these frameworks seem more like Application Frameworks, or CMS Frameworks\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["First, I can't see what makes an \"Application Framework\" so unappealing.", "Perhaps you could update your question with some definitions that clarify your position."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Second, I can't see what makes Django or Pylons a \"CMS Framework\".", "Perhaps you could update your question with some definitions that clarify your position."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Django does pretty much everything you want."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Getting started with Django can be pretty easy too.", "Here's a 10-line single-file Django webapp:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\nfrom django.conf.urls.defaults import patterns\nfrom django.http import HttpResponse\nfilepath, extension = os.path.splitext(__file__)\nROOT_URLCONF = os.path.basename(filepath)\n\ndef yoohoo(request):\n    return HttpResponse('Yoohoo!')\n\nurlpatterns = patterns('', (r'^hello/$', yoohoo))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Check out my blog post Minimal Django for details."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Minimal Django", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://olifante.blogs.com/covil/2010/04/minimal-django.html"}]}]]