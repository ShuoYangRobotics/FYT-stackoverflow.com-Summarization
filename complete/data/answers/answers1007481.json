[[{"text": ["You don't need regular expressions, Python has a string method that does what you need:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n mystring.replace (\" \", \"_\")\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Django has a 'slugify' function which does this, as well as other URL-friendly optimisations.", "It's hidden away in the defaultfilters module."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from django.template.defaultfilters import slugify\n&gt;&gt;&gt; slugify(\"This should be connected\")\n\nthis-should-be-connected\n</code>\n</pre>\n", "senID": 1}, {"text": ["This isn't exactly the output you asked for, but IMO it's better for use in URLs."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Replacing spaces is fine, but I might suggest going a little further to handle other URL-hostile characters like question marks, apostrophes, exclamation points, etc.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Also note that the general consensus among SEO experts is that dashes are preferred to underscores in URLs."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "dashes are preferred to underscores in URLs.", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com/search?q=dashes%2Bunderscores%2Bseo"}]}, {"code": "<pre>\n<code>\n def urlify(s):\n\n     # Remove all non-word characters (everything except numbers and letters)\n     s = re.sub(r\"\\W\", '', s)\n\n     # Replace all runs of whitespace with a single dash\n     s = re.sub(r\"\\s+\", '-', s)\n\n     return s\n\n\n\n# Prints: I-cant-get-no-satisfaction\"\nprint urlify(\"I can't get no satisfaction!\")\n</code>\n</pre>\n", "senID": 2}], [{"text": ["use string's replace method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["\"this should be connected\".replace(\" \", \"_\")"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "\"this should be connected\".replace(\" \", \"_\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["\"this_should_be_disconnected\".replace(\"_\", \" \")"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\"this_should_be_disconnected\".replace(\"_\", \" \")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Using the re module:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import re\nre.sub('\\s+', '_', \"This should be connected\") # This_should_be_connected\nre.sub('\\s+', '_', 'And     so\\tshould this')  # And_so_should_this\n</code>\n</pre>\n", "senID": 1}, {"text": ["Unless you have multiple spaces or other whitespace possibilities as above, you may just wish to use string.replace as others have suggested."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "string.replace", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I'm using the following piece of code for my friendly urls:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from unicodedata import normalize\nfrom re import sub\n\ndef slugify(title):\n    name = normalize('NFKD', title).encode('ascii', 'ignore').replace(' ', '-').lower()\n    #remove `other` characters\n    name = sub('[^a-zA-Z0-9_-]', '', name)\n    #nomalize dashes\n    name = sub('-+', '-', name)\n\n    return name\n</code>\n</pre>\n", "senID": 1}, {"text": ["It works fine with unicode characters as well."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Python has a built in method on strings called replace which is used as so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n string.replace(old, new)\n</code>\n</pre>\n", "senID": 1}, {"text": ["So you would use:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n string.replace(\" \", \"_\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["I had this problem a while ago and I wrote code to replace characters in a string.", "I have to start remembering to check the python documentation because they've got built in functions for everything."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n perl -e 'map { $on=$_; s/ /_/; rename($on, $_) or warn $!; } &lt;*&gt;;'\n</code>\n</pre>\n", "senID": 0}, {"text": ["Match et replace space > underscore of all files in current directory"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n string.replace(' ', '_'); //only replaces the first instance of ' ' with '_'. this is wrong.\nstring.replace(/\\s/g, '_'); //this is correct, replaces all instances of ' ' with '_'.\n</code>\n</pre>\n", "senID": 0}]]