[[{"text": ["A try... except... block catches one exception.", "That's what it's for.", "It executes the code inside the try, and if an exception is raised, handles it in the except.", "You can't raise multiple exceptions inside the try."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "try... except...", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "one", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["This is deliberate: the point of the construction is that you need explicitly to handle the exceptions that occur.", "Returning to the end of the try violates this, because then the except statement handles more than one thing."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "explicitly", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "try", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "except", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You should do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n try:\n    do.this()\nexcept FailError:\n    clean.up()\n\ntry:\n    do.that()\nexcept FailError:\n    clean.up()\n</code>\n</pre>\n", "senID": 3}, {"text": ["so that any exception you raise is handled explicitly."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Use a finally block?", "Am I missing something?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [...] \n    try: \n     do.this() \n    except: \n     foo.bar() \n    [...] \n    finally:\n     do.that()\n     [...]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you always need to execute foo.bar() why not just move it after the try/except block?", "Or maybe even to a finally: block."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "foo.bar()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "finally:", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["You need two try blocks, one for each statement in your current try block."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["One possibility is to write a code in such a way that you can re-execute it all when the error condition has been solved, e.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n while 1:\n   try:\n      complex_operation()\n   except X:\n      solve_problem()\n      continue\n   break\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This doesn't scale up well, but for smaller blocks of code you could use a classic finite-state-machine:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n states = [do.this, do.that]\nstate = 0\nwhile state &lt; len(states):\n    try:\n        states[state]()\n    except:\n        foo.bar()\n    state += 1\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n fcts = [do.this, do.that]\nfor fct in fcts:\n    try:\n        fct()\n    except:\n        foo.bar()\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here's another alternative.", "Handle the error condition with a callback, so that after fixing the problem you can continue.", "The callback would basically contain exactly the same code you would put in the except block."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "except", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["As a silly example, let's say that the exception you want to handle is a missing file, and that you have a way to deal with that problem (a default file or whatever).", "fileRetriever is the callback that knows how to deal with the problem.", "Then you would write:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "fileRetriever", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def myOp(fileRetriever):\n\n    f = acquireFile()\n    if not f:\n        f = fileRetriever()\n\n    # continue with your stuff...\n\n    f2 = acquireAnotherFile()\n    if not f2:\n        f2 = fileRetriever()\n\n    # more stuff...\n\n\nmyOp(magicalCallback)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note: I've never seen this design used in practice, but in specific situations I guess it might be usable."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]