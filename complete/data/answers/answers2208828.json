[[{"text": ["I guess you should look in os.environ['PROGRAMFILES'] for the program files folder."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "os.environ['PROGRAMFILES']", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["platformmodule  --  Access to underlying platform\u2019s identifying data"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "platformmodule", "tag": "a", "pos": 0, "childList": [{"text": "platform", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/platform.html"}, {"text": "platform", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import platform\n&gt;&gt;&gt; platform.architecture()\n('32bit', 'WindowsPE')\n</code>\n</pre>\n", "senID": 1}, {"text": ["Can anyone running 64-bit Windows tell us what 32-bit python running on 64-bit Windows returns?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Came here searching for properly detecting if running on 64bit windows, compiling all the above into something more concise. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Below you will find a function to test if running on 64bit windows, a function to get the 32bit Program Files folder, and a function to get the 64bit Program Files folder; all regardless of running 32bit or 64bit python.", "When running 32bit python, most things report as if 32bit when running on 64bit, even os.environ['PROGRAMFILES']. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "os.environ['PROGRAMFILES']", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n import os\n\ndef Is64Windows():\n    return 'PROGRAMFILES(X86)' in os.environ\n\ndef GetProgramFiles32():\n    if Is64Windows():\n        return os.environ['PROGRAMFILES(X86)']\n    else:\n        return os.environ['PROGRAMFILES']\n\ndef GetProgramFiles64():\n    if Is64Windows():\n        return os.environ['PROGRAMW6432']\n    else:\n        return None\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note: Yes, this is a bit hackish.", "All other methods that \"should just work\", do not work when running 32bit Python on 64bit Windows (at least for the various 2.x and 3.x versions I have tried)."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Note", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Edits:\n2011-09-07 - Added a note about why only this hackish method works properly."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"text": ["You should be using environment variables to access this.", "The program files directory is stored in the environment variable PROGRAMFILES on x86 Windows, the 32-bit program files is directory is stored in the PROGRAMFILES(X86) environment variable, these can be accessed by using os.environ('PROGRAMFILES')."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "PROGRAMFILES", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "PROGRAMFILES(X86)", "childNum": 0, "tag": "code", "childList": []}, {"text": "os.environ('PROGRAMFILES')", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Use sys.getwindowsversion() or the existence of PROGRAMFILES(X86) (if 'PROGRAMFILES(X86)' in os.environ) to determine what version of Windows you are using."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "sys.getwindowsversion()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "PROGRAMFILES(X86)", "childNum": 0, "tag": "code", "childList": []}, {"text": "if 'PROGRAMFILES(X86)' in os.environ", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The subject lines asks about detecting 64 or 32bit OS, while the body talks about determining the location of ProgramFiles.", "The latter has a couple of workable answers here.", "I'd like to add another solution generalized to handle StartMenu, Desktop, etc.", "as well as ProgramFiles: http://stackoverflow.com/questions/2216173/how-to-get-path-of-start-menus-programs-directory"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://stackoverflow.com/questions/2216173/how-to-get-path-of-start-menus-programs-directory", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2216173/how-to-get-path-of-start-menus-programs-directory"}]}], [{"text": ["Many of these proposed solutions, such as platform.architecture(), fail because their results depend on whether you are running 32-bit or 64-bit Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The only reliable method I have found is to check for the existence of os.environ['PROGRAMFILES(X86)'], which is unfortunately hackish."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n def os_platform():\n    true_platform = os.environ['PROCESSOR_ARCHITECTURE']\n    try:\n            true_platform = os.environ[\"PROCESSOR_ARCHITEW6432\"]\n    except KeyError:\n            pass\n            #true_platform not assigned to if this does not exist\n    return true_platform\n</code>\n</pre>\n", "senID": 0}, {"text": ["http://blogs.msdn.com/b/david.wang/archive/2006/03/26/howto-detect-process-bitness.aspx"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://blogs.msdn.com/b/david.wang/archive/2006/03/26/howto-detect-process-bitness.aspx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blogs.msdn.com/b/david.wang/archive/2006/03/26/howto-detect-process-bitness.aspx"}]}], [{"text": ["64-bit versions of Windows use something called registry redirection and reflection keys.", "There is a compatibility layer called WoW64 which enables compatibility of 32-bit applications.", "Starting from Windows 7 and Windows Server 2008 R2 WoW64 registry keys are not longer reflected but shared.", "You can read about it here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["registry-reflection: msdn.microsoft.com/en-us/library/aa384235(v=vs.85).aspx"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["affected-keys: msdn.microsoft.com/en-us/library/aa384253(v=vs.85).aspx"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["wikipedia: en.wikipedia.org/wiki/WoW64"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["All you need to do is detect existence of those keys.", "You can use _winreg for that.", "Use try: and try opening key, example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n try:\naReg = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE,\"SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\")\n</code>\n</pre>\n", "senID": 5}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; 2**63-1 == sys.maxint\nTrue\n</code>\n</pre>\n", "senID": 0}, {"text": ["For 64 bit, and"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 2**31-1 == sys.maxint\nTrue\n</code>\n</pre>\n", "senID": 2}, {"text": ["For 32 bit."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["There should be a directory under Windows 64bit, a Folder called \\Windows\\WinSxS64 for 64 bit, under Windows 32bit, it's WinSxS."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\\Windows\\WinSxS64", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Hope this helps,\nBest regards,\nTom."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]