[[{"text": ["I'm not sure what you do want to get.", "Is it this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print sum(element[1]-element[0]+1 for element in [(2,7), (9,11)])\n9\n</code>\n</pre>\n", "senID": 1}, {"text": ["This generator expression is equivalent to"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "generator expression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/expressions.html#generator-expressions"}]}, {"code": "<pre>\n<code>\n temp = []\nfor element in [(2,7), (9,11)]:\n    temp.append(element[1]-element[0]+1)\nprint sum(temp)\n</code>\n</pre>\n", "senID": 3}, {"text": ["but it avoids building a list in memory and is therefore more efficient."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You could replace this with a generator expression:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "generator expression", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/release/2.5.2/ref/genexpr.html"}]}, {"code": "<pre>\n<code>\n In [20]: sum(element[1] - element[0] + 1 for element in [(2, 7), (9, 11)])\nOut[20]: 9\n</code>\n</pre>\n", "senID": 1}, {"text": ["This could be simplified to:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n In [21]: sum(y - x + 1 for x,y in [(2, 7), (9, 11)])\nOut[21]: 9\n</code>\n</pre>\n", "senID": 3}, {"text": ["...which I find easier to read and guarantees that each element in the list has exactly two elements.", "And it doesn't use unnecessary lambdas."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; sum(right-left+1 for left,right in [(2,7),(9,11)])\n9\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can use a lambda function to map your list into a list of sums, something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list_of_tuples = [(2,4),(5,7)]\nlist_of_sums = map(lambda x: x[0]+x[1], list_of_tuples)\n</code>\n</pre>\n", "senID": 1}, {"text": ["There are many other ways of doing the same thing, but if you have never used map or lambda functions, it's a good opportunity to learn them ;)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Is this what you refer?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n g = 0\nfor element in [(2,7),(9,11)] :\n         g= g + (element[1]-element[0]+1)\n         print g\n</code>\n</pre>\n", "senID": 1}, {"text": ["sum only accepts iterable object"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "sum", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://www.learningpython.com/2009/02/23/iterators-iterables-and-generators-oh-my/", "text": "iterable", "childNum": 1, "tag": "a", "childList": [{"text": "iterable", "tag": "code"}]}, {"text": "iterable", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Update"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n g = 0\nfor element in [(2,7),(9,11)] :\n         g += (element[1]-element[0]+1)\nprint g # moved indention to show the sum\n</code>\n</pre>\n", "senID": 4}], [{"text": ["The simplest way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sum(map(lambda (x,y): y-x+1 , [(2,7),(9,11)]))\n</code>\n</pre>\n", "senID": 1}]]