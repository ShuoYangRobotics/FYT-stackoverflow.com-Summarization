[[{"text": ["For the case of Python, source files are compiled before being executed (the .pyc files), and the comments are stripped in the process.", "So comments could slow down the compilation time if you have gazillions of them, but they won't impact the execution time."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": ".pyc", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "could", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["Comments are usually stripped out in or before the parsing stage, and parsing is very fast, so effectively comments will not slow down the initialization time. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["The effect is negligable for everyday usage.", "It's easy to test, but if you consider a simple loop such as:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n For N = 1 To 100000: Next\n</code>\n</pre>\n", "senID": 1}, {"text": ["Your computer can process that (count to 100,000) quicker than you can blink.", "Ignoring a line of text that starts with a certain character will be more than 10,000 times faster."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Don't worry about it."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Did up a script like Rich's with some comments (only about 500kb text):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # -*- coding: iso-8859-15 -*-\nimport timeit\n\nno_comments = \"\"\"\na = 30\nb = 40\nfor i in range(10):\n    c = a**i * b**i\n\"\"\"\nyes_comment = \"\"\"\na = 30\nb = 40\n\n# full HTML from http://en.wikipedia.org/\n# wiki/Line_of_succession_to_the_British_throne\n\nfor i in range(10):\n    c = a**i * b**i\n\"\"\"\nloopcomment = \"\"\"\na = 30\nb = 40\n\nfor i in range(10):\n    # full HTML from http://en.wikipedia.org/\n    # wiki/Line_of_succession_to_the_British_throne\n\n    c = a**i * b**i\n\"\"\"\n\nt_n = timeit.Timer(stmt=no_comments)\nt_y = timeit.Timer(stmt=yes_comment)\nt_l = timeit.Timer(stmt=loopcomment)\n\nprint \"Uncommented block takes %.2f usec/pass\" % (\n    1e6 * t_n.timeit(number=100000)/1e5)\nprint \"Commented block takes %.2f usec/pass\" % (\n    1e6 * t_y.timeit(number=100000)/1e5)\nprint \"Commented block (in loop) takes %.2f usec/pass\" % (\n    1e6 * t_l.timeit(number=100000)/1e5)\n</code>\n</pre>\n", "senID": 1}, {"tag": "br", "senID": 2}, {"code": "<pre>\n<code>\n C:\\Scripts&gt;timecomment.py\nUncommented block takes 15.44 usec/pass\nCommented block takes 15.38 usec/pass\nCommented block (in loop) takes 15.57 usec/pass\n\nC:\\Scripts&gt;timecomment.py\nUncommented block takes 15.10 usec/pass\nCommented block takes 14.99 usec/pass\nCommented block (in loop) takes 14.95 usec/pass\n\nC:\\Scripts&gt;timecomment.py\nUncommented block takes 15.52 usec/pass\nCommented block takes 15.42 usec/pass\nCommented block (in loop) takes 15.45 usec/pass\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit as per David's comment:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Edit as per David's comment:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n -*- coding: iso-8859-15 -*-\nimport timeit\n\ninit = \"a = 30\\nb = 40\\n\"\nfor_ = \"for i in range(10):\"\nloop = \"%sc = a**%s * b**%s\"\nhistorylesson = \"\"\"\n# &lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n# blah blah...\n# --&gt;&lt;/body&gt;&lt;/html&gt; \n\"\"\"\ntabhistorylesson = \"\"\"\n    # &lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n    # blah blah...\n    # --&gt;&lt;/body&gt;&lt;/html&gt; \n\"\"\"\n\ns_looped = init + \"\\n\" + for_ + \"\\n\" + tabhistorylesson + loop % ('   ','i','i')\ns_unroll = init + \"\\n\"\nfor i in range(10):\n    s_unroll += historylesson + \"\\n\" + loop % ('',i,i) + \"\\n\"\nt_looped = timeit.Timer(stmt=s_looped)\nt_unroll = timeit.Timer(stmt=s_unroll)\n\nprint \"Looped length: %i, unrolled: %i.\" % (len(s_looped), len(s_unroll))\n\nprint \"For block takes %.2f usec/pass\" % (\n    1e6 * t_looped.timeit(number=100000)/1e5)\nprint \"Unrolled it takes %.2f usec/pass\" % (\n    1e6 * t_unroll.timeit(number=100000)/1e5)\n</code>\n</pre>\n", "senID": 5}, {"tag": "br", "senID": 6}, {"code": "<pre>\n<code>\n C:\\Scripts&gt;timecomment_unroll.py\nLooped length: 623604, unrolled: 5881926.\nFor block takes 15.12 usec/pass\nUnrolled it takes 14.21 usec/pass\n\nC:\\Scripts&gt;timecomment_unroll.py\nLooped length: 623604, unrolled: 5881926.\nFor block takes 15.43 usec/pass\nUnrolled it takes 14.63 usec/pass\n\nC:\\Scripts&gt;timecomment_unroll.py\nLooped length: 623604, unrolled: 5881926.\nFor block takes 15.10 usec/pass\nUnrolled it takes 14.22 usec/pass\n</code>\n</pre>\n", "senID": 7}], [{"text": ["It depends on how the interpreter is implemented.", "Most reasonably modern interpreters do at least a bit of pre-processing on the source code before any actual execution, and that will include stripping out the comments so they make no difference from that point onward."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["At one time, when memory was severely constrained (e.g., 64K total addressable memory, and cassette tapes for storage) you couldn't take things like that for granted.", "Back in the day of the Apple II, Commodore PET, TRS-80, etc., it was fairly routine to strip out comments (and even white-space) to improve execution speed."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Of course, it also helped that those machines had CPUs that could only execute one instruction at a time, had clock speeds around 1 MHz, and had only 8-bit processor registers.", "Even a machine you'd now find only in a dumpster is so much faster than those were that it's not even funny..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Having comments will slow down the startup time, as the scripts will get parsed into an executable form.", "However, in most cases comments don't slow down runtime."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Additionally in python, you can compile the .py files into .pyc, which won't contain the comments (I should hope) - this means that you won't get a startup hit either if the script is already compiled."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Most interpreters read the text (code) and produce an Abstract Syntax Tree data structure.", "That structure contains no code, in text form, and of course no comments either.", "Just that tree is enough for executing programs.", "But interpreters, for efficiency reasons, go one step further and produce byte code.", "And Python does exactly that.  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["We could say that the code and the comments, in the form you wrote them, are simply not present,\nwhen the program is running.", "So no, comments do not slow down the programs at run-time."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "not present", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["(*) Interpreters that do not use some other inner structure to represent the code other than text,\nie a syntax tree, must do exactly what you mentioned.", "Interpret again and again the code at run-time."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"text": ["Well, I wrote a short python program like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in range (1,1000000):\n    a = i*10\n</code>\n</pre>\n", "senID": 1}, {"text": ["The idea is, do a simple calculation loads of times."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["By timing that, it took 0.35\u00b10.01 seconds to run."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I then rewrote it with the whole of the King James Bible inserted like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n for i in range (1,1000000):\n    \"\"\"\nThe Old Testament of the King James Version of the Bible\n\nThe First Book of Moses:  Called Genesis\n\n\n1:1 In the beginning God created the heaven and the earth.\n\n1:2 And the earth was without form, and void; and darkness was upon\nthe face of the deep. And the Spirit of God moved upon the face of the\nwaters.\n\n1:3 And God said, Let there be light: and there was light.\n\n...\n...\n...\n...\n\nEven so, come, Lord Jesus.\n\n22:21 The grace of our Lord Jesus Christ be with you all. Amen.\n    \"\"\"\n    a = i*10\n</code>\n</pre>\n", "senID": 5}, {"text": ["This time it took 0.4\u00b10.05 seconds to run."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["So the answer is yes.", "4MB of comments in a loop make a measurable difference."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "yes", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["As the other answers have already stated, a modern interpreted language like Python first parses and compiles the source into bytecode, and the parser simply ignores the comments.", "This clearly means that any loss of speed would only occur at startup when the source is actually parsed. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Because the parser ignores comments, the compiling phase is basically unaffected by any comments you put in.", "But the bytes in the comments themselves are actually being read in, and then skipped over during parsing.", "This means, if you have a crazy amount of comments (e.g.", "many hundreds of megabytes), this would slow down the interpreter.", "But then again this would slow any compiler as well."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]