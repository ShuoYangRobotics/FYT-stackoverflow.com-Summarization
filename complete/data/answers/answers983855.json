[[{"text": ["Python lists translate to JSON arrays.", "What it is giving you is a perfectly valid JSON string that could be used in a Javascript application.", "To get what you expected, you would need to use a dict:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "lists", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "arrays", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "dict", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; json.dumps({'apple': 'cat', 'banana':'dog', 'pear':'fish'})\n'{\"pear\": \"fish\", \"apple\": \"cat\", \"banana\": \"dog\"}'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In simplejson (or the library json in Python 2.6 and later), loads takes a JSON string and returns a Python data structure, dumps takes a Python data structure and returns a JSON string.", "JSON string can encode Javascript arrays, not just objects, and a Python list corresponds to a JSON string encoding an array.", "To get a JSON string such as"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "simplejson", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "json", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "loads", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "dumps", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n {\"apple\":\"cat\", \"banana\":\"dog\"}\n</code>\n</pre>\n", "senID": 1}, {"text": ["the Python object you pass to json.dumps could be:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "json.dumps", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n dict(apple=\"cat\", banana=\"dog\")\n</code>\n</pre>\n", "senID": 3}, {"text": ["though the JSON string is also valid Python syntax for the same dict.", "I believe the specific string you say you expect is simply invalid JSON syntax, however."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "dict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The data you are encoding is a keyless array, so JSON encodes it with [] brackets.", "See www.json.org for more information about that.", "The curly braces are used for lists with key/value pairs."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["From www.json.org:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["JSON uses square brackets for lists ( [ \"one\", \"two\", \"three\" ] ) and curly brackets for key/value dictionaries (also called objects in JavaScript, {\"one\":1, \"two\":\"b\"})."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "[ \"one\", \"two\", \"three\" ]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "{\"one\":1, \"two\":\"b\"}", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The dump is quite correct, you get a list of three elements, each one is a list of two strings."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["if you wanted a dictionary, maybe something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n x = simplejson.dumps(dict(data))\n&gt;&gt;&gt; {\"pear\": \"fish\", \"apple\": \"cat\", \"banana\": \"dog\"}\n</code>\n</pre>\n", "senID": 3}, {"text": ["your expected string ('{{\"apple\":{\"cat\"},{\"banana\":\"dog\"}}') isn't valid JSON."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "{{\"apple\":{\"cat\"},{\"banana\":\"dog\"}}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["I think you are simply exchanging dumps and loads. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "dumps", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "loads", "childNum": 0, "tag": "em", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import json\n&gt;&gt;&gt; data = [['apple', 'cat'], ['banana', 'dog'], ['pear', 'fish']]\n</code>\n</pre>\n", "senID": 1}, {"text": ["The first returns as a (JSON encoded) string its data argument:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; encoded_str = json.dumps( data )\n&gt;&gt;&gt; encoded_str\n'[[\"apple\", \"cat\"], [\"banana\", \"dog\"], [\"pear\", \"fish\"]]'\n</code>\n</pre>\n", "senID": 3}, {"text": ["The second does the opposite, returning the data corresponding to its (JSON encoded) string argument:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; decoded_data = json.loads( encoded_str )\n&gt;&gt;&gt; decoded_data\n[[u'apple', u'cat'], [u'banana', u'dog'], [u'pear', u'fish']]\n&gt;&gt;&gt; decoded_data == data\nTrue\n</code>\n</pre>\n", "senID": 5}], [{"text": ["So, simplejson.loads takes a json string and returns a data structure, which is why you are getting that type error there."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["simplejson.dumps(data) comes back with "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n '[[\"apple\", \"cat\"], [\"banana\", \"dog\"], [\"pear\", \"fish\"]]'\n</code>\n</pre>\n", "senID": 2}, {"text": ["Which is a json array, which is what you want, since you gave this a python array."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["If you want to get an \"object\" type syntax you would instead do"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; data2 = {'apple':'cat', 'banana':'dog', 'pear':'fish'}\n&gt;&gt;&gt; simplejson.dumps(data2)\n'{\"pear\": \"fish\", \"apple\": \"cat\", \"banana\": \"dog\"}'\n</code>\n</pre>\n", "senID": 5}, {"text": ["which is javascript will come out as an object."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import simplejson\ndata = {'apple': 'cat', 'banana':'dog', 'pear':'fish'}\ndata_json = \"{'apple': 'cat', 'banana':'dog', 'pear':'fish'}\"\n\nsimplejson.loads(data_json) # outputs data\nsimplejson.dumps(data) # outputs data_joon\n</code>\n</pre>\n", "senID": 1}, {"text": ["NB: Based on Paolo's answer."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]