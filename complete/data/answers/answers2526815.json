[[{"text": ["I think you searched on wrong google:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["http://home.att.net/~srschmitt/zenosamples/zs_lunarphasecalc.html"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["http://www.voidware.com/moon_phase.htm"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["http://www.ben-daglish.net/moon.shtml"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}, {"text": ["http://www.faqs.org/faqs/astronomy/faq/part3/section-15.html"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}]}], [{"text": ["I ported some code to Python for this a while back.", "I was going to just link to it, but it turns out that it fell off the web in the meantime, so I had to go dust it off and upload it again.", "See moon.py which is derived from John Walker's moontool."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "moon.py", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://bazaar.launchpad.net/~keturn/py-moon-phase/trunk/annotate/head:/moon.py"}, {"href": "http://www.fourmilab.ch/moontool/", "text": "John Walker's moontool", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["I can't find a reference for this for what time spans it's accurate for either, but seems like the authors were pretty rigorous.", "Which means yes, it does use trig, but I can't imagine what the heck you would be using this for that would make it computationally prohibitive.", "Python function call overhead is probably more than the cost of the trig operations.", "Computers are pretty fast at computing."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Also, pyephem \u2014 scientific-grade astronomy routines [PyPI], which is a Python package but has the computational guts in C, and that does say"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "pyephem \u2014 scientific-grade astronomy routines", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://rhodesmill.org/pyephem/"}, {"href": "http://pypi.python.org/pypi/pyephem/", "text": "PyPI", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://bitbucket.org/brandon/pyephem/src/tip/libastro-3.7.4/moon.c", "text": "computational guts in C", "childNum": 0, "tag": "a", "childList": []}, {"text": "does", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["I know that you're looking for Python but if you can understand C# there's an open source project out there called Chronos XP which does this very well."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Chronos XP", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://chronosxp.sourceforge.net/"}]}], [{"text": ["If you don't need high accuracy, you can always (ab)use a lunar (or lunisolar) calendar class (e.g., HijriCalendar or ChineseLunisolarCalendar in Microsoft .NET) to calculate the (approximate) moon phase of any date, as the calendar's \"day-of-month\" property, being a lunar (or lunisolar) calendar day, always corresponds to the moon phase (e.g., day 1 is the new moon, day 15 is the full moon, etc."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "HijriCalendar", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ChineseLunisolarCalendar", "childNum": 0, "tag": "code", "childList": []}, {"text": "always corresponds to the moon phase", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["I found a Python solution here (untested, no idea if it works; you'd have to verify this yourself)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a Python solution here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.daniweb.com/code/post968407.html#"}]}, {"code": "<pre>\n<code>\n def moon_phase(month, day, year):\n    ages = [18, 0, 11, 22, 3, 14, 25, 6, 17, 28, 9, 20, 1, 12, 23, 4, 15, 26, 7]\n    offsets = [-1, 1, 0, 1, 2, 3, 4, 5, 7, 7, 9, 9]\n    description = [\"new (totally dark)\",\n      \"waxing crescent (increasing to full)\",\n      \"in its first quarter (increasing to full)\",\n      \"waxing gibbous (increasing to full)\",\n      \"full (full light)\",\n      \"waning gibbous (decreasing from full)\",\n      \"in its last quarter (decreasing from full)\",\n      \"waning crescent (decreasing from full)\"]\n    months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\n    if day == 31:\n        day = 1\n    days_into_phase = ((ages[(year + 1) % 19] + ((day + offsets[month-1]) % 30) + (year &lt; 1900)) % 30)\n    index = int((days_into_phase + 2) * 16/59.0)\n    if index &gt; 7:\n        index = 7\n    status = description[index]\n\n    # light should be 100% 15 days into phase\n    light = int(2 * days_into_phase * 100/29)\n    if light &gt; 100:\n        light = abs(light - 200);\n    date = \"%d%s%d\" % (day, months[month-1], year)\n\n    return date, status, light\n\nmonth = 3\nday = 26\nyear = 2010  # use yyyy format\n\ndate, status, light = moon_phase(month, day, year)\nprint \"moon phase on %s is %s, light = %d%s\" % (date, status, light, '%')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A quick google revealed this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.daniweb.com/code/post968407.html"}]}]]