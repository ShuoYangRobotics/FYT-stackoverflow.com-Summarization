[[{"text": ["This point hasn't been made yet, and should be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A VM is the way to go unless you want security issues up the wazoo."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I'd check for eval() first, as you can obfuscate import with it.", "eval() evaluates code, so you can run this code:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "eval()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "import", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "eval()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n eval('imp{0}rt os'.format('o')) # 'imp{0}rt os'.format('o') -&gt; 'import os'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Which imports the os module without explicitly having the import statement within the script.", "But as @MK suggested in his comment, use a sandboxed Python installation.", "If something breaks, it's inside of the \"box\", not your system."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "os", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "without", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "import", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["I'd look into PyPy's sandboxing capabilities here, as I've heard good stuff about it: http://codespeak.net/pypy/dist/pypy/doc/sandbox.html."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "http://codespeak.net/pypy/dist/pypy/doc/sandbox.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/pypy/dist/pypy/doc/sandbox.html"}]}, {"text": ["But to be completely assured that you're not going to have any troubles whatsoever, run a Virtual Machine within your computer.", "A Virtual Machine is a completely isolated operating system installation within your normal operating system: for example, you can run Mac OS X from within Ubuntu Linux, and they are completely isolated from one another."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "within", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Basically, it's just a miniature screen within a window (man, am I going overkill with this VM thing):"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"src": "http://i.stack.imgur.com/rdUsO.jpg", "tag": "img", "senID": 6}, {"text": ["I'd suggest VirtualBox, as it's free and really simple to setup.", "The only downside to virtualizing an OS is that you actually have to install the operating system into the virtual machine, which takes as much time as installing the operating system onto a normal computer."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "VirtualBox", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.virtualbox.org/"}, {"text": "install", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["Either way, it's up to you, but if you're worried about security, virtualizing is the way to go."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["You can still obfuscate import without using eval:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "import", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "eval", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n s = '__imp'\ns += 'ort__'\nf = globals()['__builtins__'].__dict__[s]\n** BOOM **\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Built-in functions."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Built-in functions", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html#built-in-functions"}]}, {"text": ["Keywords."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Keywords", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/lexical_analysis.html#keywords"}]}, {"text": ["Note that you'll need to do things like look for both \"file\" and \"open\", as both can open files."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Also, as others have noted, this isn't 100% certain to stop someone determined to insert malacious code."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Use a Virtual Machine instead of running it on a system that you are concerned about."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["An approach that should work better than string matching us to use module ast, parse the python code, do your whitelist filtering on the tree (e.g.", "allow only basic operations), then compile and run the tree."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "module ast", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/ast.html"}]}, {"text": ["See this nice example by Andrew Dalke on manipulating ASTs."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "this nice example", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.dalkescientific.com/writings/diary/archive/2010/02/22/instrumenting_the_ast.html"}]}], [{"text": ["What's great about Python code is how readable it is.", "It's also probably safe to say you can open the code up in a text editor and read it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think the best way to better your understanding of python, and to catch malicious code from being executed, is to read the code and try to understand what it is doing.", "If there is a strange module you have never heard of check out the python documentation -- it's awesome!"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["@kriegar also suggested running the code in a VM which is a great idea if you're still wary of it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["TIP: if there is a standard lib module that you don't understand, open up the python interpreter and import it, then type help(nameofmodule):"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "help(nameofmodule)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import csv\n&gt;&gt;&gt; help(csv)\nHelp on module csv:\n\nNAME\n    csv - CSV parsing and writing.\n\nFILE\n    c:\\python27\\lib\\csv.py\n\nDESCRIPTION\n    This module provides classes that assist in the reading and writing\n    of Comma Separated Value (CSV) files, and implements the interface\n    described by PEP 305.  Although many CSV files are simple to parse,\n    the format is not formally defined by a stable specification and\n    is subtle enough that parsing lines of a CSV file with something\n    like line.split(\",\") is bound to fail.  The module supports three\n    basic APIs: reading, writing, and registration of dialects...\n</code>\n</pre>\n", "senID": 4}]]