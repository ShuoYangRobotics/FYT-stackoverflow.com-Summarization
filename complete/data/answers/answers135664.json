[[{"text": ["\"It depends.", "\"  Python allocates space for lists in such a way as to achieve amortized constant time for appending elements to the list."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "amortized constant time", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/python-list.htm"}]}, {"text": ["In practice, what this means with the current implementation is... the list always has space allocated for a power-of-two number of elements.", "So range(1000000) will actually allocate a list big enough to hold 2^20 elements (~ 1.045 million)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This is only the space required to store the list structure itself (which is an array of pointers to the Python objects for each element).", "A 32-bit system will require 4 bytes per element, a 64-bit system will use 8 bytes per element."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Furthermore, you need space to store the actual elements.", "This varies widely.", "For small integers (-5 to 256 currently), no additional space is needed, but for larger numbers Python allocates a new object for each integer, which takes 10-100 bytes and tends to fragment memory."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Bottom line: it's complicated and Python lists are not a good way to store large homogeneous data structures.", "For that, use the array module or, if you need to do vectorized math, use NumPy."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "it's complicated", "childNum": 0, "tag": "b", "pos": 0, "childList": []}, {"text": "not", "childNum": 0, "tag": "b", "pos": -1, "childList": []}, {"text": "array", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["PS- Tuples, unlike lists, are not designed to have elements progressively appended to them.", "I don't know how the allocator works, but don't even think about using it for large data structures :-)"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "not designed", "childNum": 0, "tag": "i", "pos": 0, "childList": []}]}], [{"text": ["Useful links:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["How to get memory size/usage of python object"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "How to get memory size/usage of python object", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://bytes.com/forum/thread757255.html"}]}, {"text": ["Memory sizes of python objects?"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Memory sizes of python objects?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-list/2002-March/135223.html"}]}, {"text": ["if you put data into dictionary, how do we calculate the data size? "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "if you put data into dictionary, how do we calculate the data size?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groups.google.com/group/comp.lang.python/msg/b9afcfc2e1de5b05"}]}, {"text": ["However they don't give a definitive answer.", "The way to go:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Update:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Update", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Recipe 546530: Size of Python objects (revised)"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Recipe 546530: Size of Python objects (revised)", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/546530/"}]}, {"code": "<pre>\n<code>\n import asizeof\n\nN = 1000000\nprint asizeof.asizeof(range(N)) / N\n# -&gt; 20 (python 2.5, WinXP, 32-bit Linux)\n# -&gt; 33 (64-bit Linux)\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Addressing \"tuple\" part of the question"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Addressing \"tuple\" part of the question", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Declaration of CPython's PyTuple in a typical build configuration boils down to this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n struct PyTuple {\n  size_t refcount; // tuple's reference count\n  typeobject *type; // tuple type object\n  size_t n_items; // number of items in tuple\n  PyObject *items[1]; // contains space for n_items elements\n};\n</code>\n</pre>\n", "senID": 2}, {"text": ["Size of PyTuple instance is fixed during it's construction and cannot be changed afterwards.", "The number of bytes occupied by PyTuple can be calculated as"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["This gives shallow size of tuple.", "To get full size you also need to add total number of bytes consumed by object graph rooted in PyTuple::items[] array. "], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "shallow", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "full", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "PyTuple::items[]", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["It's worth noting that tuple construction routines make sure that only single instance of empty tuple is ever created (singleton)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["References:\nPython.h,\nobject.h,\ntupleobject.h,\ntupleobject.c"], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "Python.h", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/view/python/tags/r252/Include/Python.h?rev=60915&view=markup"}, {"href": "http://svn.python.org/view/python/tags/r252/Include/object.h?rev=60915&view=markup", "text": "object.h", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://svn.python.org/view/python/tags/r252/Include/tupleobject.h?rev=60915&view=markup", "text": "tupleobject.h", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://svn.python.org/view/python/tags/r252/Objects/tupleobject.c?rev=60915&view=markup", "text": "tupleobject.c", "childNum": 0, "tag": "a", "childList": []}]}], [{"code": "<pre>\n<code>\n kveretennicov@nosignal:~/py/r26rc2$ ./python\nPython 2.6rc2 (r26rc2:66712, Sep  2 2008, 13:11:55) \n[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.getsizeof(range(1000000))\n4000032\n&gt;&gt;&gt; sys.getsizeof(tuple(range(1000000)))\n4000024\n</code>\n</pre>\n", "senID": 0}, {"text": ["Obviously returned numbers don't include memory consumed by contained objects (sys.getsizeof(1) == 12)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This is implementation specific, I'm pretty sure.", "Certainly it depends on the internal representation of integers - you can't assume they'll be stored as 32-bit since Python gives you arbitrarily large integers so perhaps small ints are stored more compactly. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["On my Python (2.5.1 on Fedora 9 on core 2 duo) the VmSize before allocation is 6896kB, after is 22684kB.", "After one more million element assignment, VmSize goes to 38340kB.", "This very grossly indicates around 16000kB for 1000000 integers, which is around 16 bytes per integer.", "That suggests a lot of overhead for the list.", "I'd take these numbers with a large pinch of salt."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "lot", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}], [{"text": ["I'm wary of why you're asking.", "Are you trying to figure out how much memory you'll need for a given implementation?", "Say, you're going to read 10,000,000 widgets and want to know how much RAM it will suck?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If that's the case, rather than trying to figure out how much RAM each widget takes, figure out how much RAM, say, 10,000 widgets takes and multiply up to get your actual size."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]