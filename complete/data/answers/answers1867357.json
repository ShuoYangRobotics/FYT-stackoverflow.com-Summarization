[[{"text": ["Perhaps not what you want, but I'll suggest it anyway."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\na = os.path.getsize(\"C:/TestFolder/Input/1.avi\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Alternatively for an opened file you can use the fstat function, which can be used on an opened file.", "It takes an integer file handle, not a file object, so you have to use the fileno method on the file object:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "fstat", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/os.html#os.fstat"}]}, {"code": "<pre>\n<code>\n a = open(\"C:/TestFolder/Input/1.avi\")\nb = os.fstat(a.fileno()).st_size\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You could start with something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class TrackedFile(file):\n    def __init__(self, filename, mode):\n        self.size = 0\n        super(TrackedFile, self).__init__(filename, mode)\n    def write(self, s):\n        self.size += len(s)\n        super(TrackedFile, self).write(s)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you could use it like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f = TrackedFile('palindrome.txt', 'w')\n&gt;&gt;&gt; f.size\n0\n&gt;&gt;&gt; f.write('A man a plan a canal ')\n&gt;&gt;&gt; f.size\n21\n&gt;&gt;&gt; f.write('Panama')\n27\n</code>\n</pre>\n", "senID": 3}, {"text": ["Obviously, this implementation doesn't work if you aren't writing the file from scratch, but you could adapt your __init__ method to handle initial data.", "You might also need to override some other methods: writelines, for instance."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "__init__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "writelines", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["This works regardless of encoding, as strings are just sequences of bytes."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f2 = TrackedFile('palindrome-latin1.txt', 'w')\n&gt;&gt;&gt; f2.write(u'A man a plan a can\u00e1l '.encode('latin1')\n&gt;&gt;&gt; f3 = TrackedFile('palindrome-utf8.txt', 'w')\n&gt;&gt;&gt; f3.write(u'A man a plan a can\u00e1l '.encode('utf-8'))\n&gt;&gt;&gt; f2.size\n21\n&gt;&gt;&gt; f3.size\n22\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Most reliable would be create a wrapping class which would check file's size when you open it, track write and seek operations, count current size based on those operations and prevent from exceeding size limit."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["os.fstat(file_obj.fileno()).st_size should do the trick.", "I think that it will return the bytes written.", "You can always do a flush before hand if you are concerned about buffering."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "os.fstat(file_obj.fileno()).st_size", "tag": "a", "pos": 0, "childList": [{"text": "os.fstat(file_obj.fileno()).st_size", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/os.html#os.fstat"}, {"text": "os.fstat(file_obj.fileno()).st_size", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Or, if the file is already open:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; fsock = open('/etc/hosts', 'rb').read()\n&gt;&gt;&gt; len(fsock)\n444\n</code>\n</pre>\n", "senID": 1}, {"text": ["That's how many bytes the file is."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I'm not familiar with python, but doesn't the stream object (or whatever you get when opening a file) have a property that contains the current position of the stream? "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Similar to what you get with the ftell() C function, or Stream.Position in .NET."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "ftell()", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.cplusplus.com/reference/clibrary/cstdio/ftell/"}, {"href": "http://msdn.microsoft.com/en-us/library/system.io.stream.position.aspx", "text": "Stream.Position", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Obviously, this only works if you are positioned at the end of the stream, which you are if you are currently writing to it."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["The benefit of this approach is that you don't have to close the file or worry about unflushed data."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]