[[{"text": ["In Python 2.5, there is"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n A if C else B\n</code>\n</pre>\n", "senID": 1}, {"text": ["which behaves a lot like ?", ": in C. However, it's frowned upon for two reasons: readability, and the fact that there's usually a simpler way to approach the problem.", "For instance, in your case:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n stringValue = otherString or defaultString\n</code>\n</pre>\n", "senID": 3}], [{"text": ["@Dan"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Dan", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "#135342"}]}, {"text": ["Well yes, it's longer.", "Not so sure about \u201cmore expressive\u201d and \u201cmore readable\u201d.", "At the very least, your claim is disputable.", "I would even go as far as saying it's downright wrong, for two reasons."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["First, your code emphasizes the decision-making (rather extremely).", "Onthe other hand, the conditional operator emphasizes something else, namely the value (resp.", "the assignment of said value).", "And this is exactly what the writer of this code wants.", "The decision-making is really rather a by-product of the code.", "The important part here is the assignment operation.", "Your code hides this assignment in a lot of syntactic noise: the branching."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "exactly", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}, {"text": ["Your code is less expressive because it shifts the emphasis from the important part."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Even then your code would probably trump some obscure ASCII art like ?:.", "An inline-if would be preferable.", "Personally, I don't like the variant introduced with Python 2.5 because it's backwards.", "I would prefer something that reads in the same flow (direction) as the C ternary operator but uses words instead of ASCII characters:"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "?:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n C = if cond then A else B\n</code>\n</pre>\n", "senID": 5}, {"text": ["This wins hands down."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["C and C# unfortunately don't have such an expressive statement.", "But (and this is the second argument), the ternary conditional operator of C languages is so long established that it has become an idiom in itself.", "The ternary operator is as much part of the language as the \u201cconventional\u201d if statement.", "Because it's an idiom, anybody who knows the language immediately reads this code right.", "Furthermore, it's an extremely short, concise way of expressing these semantics.", "In fact, it's the shortest imaginable way.", "It's extremely expressive because it doesn't obscure the essence with needless noise."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Finally, Jeff Atwood has written the perfect conclusion to this: The best code is no code at all."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "The best code is no code at all", "tag": "a", "pos": 0, "childList": [{"text": "The best code is no code at all", "tag": "strong"}], "childNum": 1, "href": "http://www.codinghorror.com/blog/archives/000878.html"}, {"text": "The best code is no code at all", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["There are a few duplicates of this question, e.g."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["http://stackoverflow.com/questions/394809/python-ternary-operator"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["http://stackoverflow.com/questions/643983/whats-the-best-way-to-replace-the-ternary-operator-in-python"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}]}, {"text": ["In essence, in a general setting pre-2.5 code should use this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n (condExp and [thenExp] or [elseExp])[0]\n</code>\n</pre>\n", "senID": 4}, {"text": ["(given condExp, thenExp and elseExp are arbitrary expressions), as it avoids wrong results if thenExp evaluates to boolean False, while maintaining short-circuit evaluation."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["It's never a bad thing to write readable, expressive code."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if otherString:\n   stringValue = otherString\nelse:\n   stringValue = defaultString\n</code>\n</pre>\n", "senID": 1}, {"text": ["This type of code is longer and more expressive, but also more readable and less likely to get tripped over or mis-edited down the road.", "Don't be afraid to write expressively - readable code should be a goal, not a byproduct."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["By the way, j0rd4n, you don't (please don't!", ") write code like this in C#.", "Apart from the fact that the IsDefaultOrNull is actually called IsNullOrEmpty, this is pure code bloat.", "C# offers the coalesce operator for situations like these:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "please", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "IsDefaultOrNull", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "IsNullOrEmpty", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n string stringValue = otherString ?? defaultString;\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's true that this only works if otherString is null (rather than empty) but if this can be ensured beforehand (and often it can) it makes the code much more readable."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "otherString", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "null", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I also discovered that just using the \"or\" operator does pretty well.", "For instance:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n finalString = get_override() or defaultString\n</code>\n</pre>\n", "senID": 1}, {"text": ["If *get_override()* returns \"\" or None, it will always use defaultString."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "defaultString", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Chapter 4 of diveintopython.net has the answer.", "It's called the and-or trick in Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Chapter 4 of diveintopython.net", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.diveintopython.net/power_of_introspection/and_or.html#d0e9975"}]}], [{"text": ["You can take advantage of the fact that logical expressions return their value, and not just true or false status.", "For example, you can always use:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result = question and firstanswer or secondanswer\n</code>\n</pre>\n", "senID": 1}, {"text": ["With the caveat that it doesn't work like the ternary operator if firstanswer is false.", "This is because question is evaluated first, assuming it's true firstanswer is returned unless firstanswer is false, so this usage fails to act like the ternary operator.", "If you know the values, however, there is usually no problem.", "An example would be:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n result = choice == 7 and \"Seven\" or \"Another Choice\"\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you used ruby, you could write"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n stringValue = otherString.blank? ? defaultString : otherString;\n</code>\n</pre>\n", "senID": 1}, {"text": ["the built in blank?", "method means null or empty.", "Come over to the dark side..."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "blank?", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}]]