[[{"text": ["Try with pycurl:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pycurl", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pycurl.sourceforge.net/"}]}, {"code": "<pre>\n<code>\n import pycurl\nc1 = pycurl.Curl()\nc1.setopt(pycurl.URL, 'http://www.google.com')\nc1.setopt(pycurl.PROXY, 'localhost')\nc1.setopt(pycurl.PROXYPORT, 8080)\nc1.setopt(pycurl.PROXYTYPE, pycurl.PROXYTYPE_SOCKS5)\n\nc2 = pycurl.Curl()\nc2.setopt(pycurl.URL, 'http://www.yahoo.com')\nc2.setopt(pycurl.PROXY, 'localhost')\nc2.setopt(pycurl.PROXYPORT, 8081)\nc2.setopt(pycurl.PROXYTYPE, pycurl.PROXYTYPE_SOCKS5)\n\nc1.perform() \nc2.perform()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Yes, you can.", "I repeat my answer on How can I use a SOCKS 4/5 proxy with urllib2?", "You need to create an opener for every proxy like you do with an http proxy.", "The code for adding this feature to SocksiPy is available in GitHub https://gist.github.com/869791 and is as simple as:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "How can I use a SOCKS 4/5 proxy with urllib2?", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/a/8100870/88231"}, {"text": "https://gist.github.com/869791", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "https://gist.github.com/869791"}]}, {"code": "<pre>\n<code>\n opener = urllib2.build_opener(SocksiPyHandler(socks.PROXY_TYPE_SOCKS4, 'localhost', 9999))\nprint opener.open('http://www.whatismyip.com/automation/n09230945.asp').read()\n</code>\n</pre>\n", "senID": 1}, {"text": ["For more information I've written an example running multiple Tor instances to behave like a rotating proxy: Distributed Scraping With Multiple Tor Circuits"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Distributed Scraping With Multiple Tor Circuits", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blog.databigbang.com/distributed-scraping-with-multiple-tor-circuits/"}]}], [{"text": ["You might be able to use threading locks if there aren't too many connections being made at once, and you need to access from multiple threads:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import socks\nimport socket\nimport thread\nlock = thread.allocate_lock()\nsocket.socket = socks.socksocket\n\ndef GetConn():\n    lock.acquire()\n    import urllib2\n    socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, \"x.x.x.x\", y)\n    conn = urllib2.urlopen(ARGUMENTS HERE)\n    lock.release()\n    return conn\n</code>\n</pre>\n", "senID": 1}, {"text": ["You might also be able to use something like this every time you need to get a connection:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n urllib2 = execfile('urllib2.py')\nurllib2.socket = dummy_class() # dummy_class needs the socket module's methods\n</code>\n</pre>\n", "senID": 3}, {"text": ["These are obviously not fantastic solutions, but I've put in my 2\u00a2 anyway :-)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["== EDIT == (old HTTP-Proxy example was here..)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "== EDIT == (old HTTP-Proxy example was here..)", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["My fault.. urllib2 has no builtin support for SOCKS proxying.. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["There are some 'hacks' adding SOCKS to urllib2 (or the socket object in general) here.", "But I hardly suspect that this will work with multiple proxies like you require it.  "], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "hacks", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://bytes.com/topic/python/answers/478365-i-wanna-use-urllib2-get-page-socks-5-proxy-who-can-give-me-sample-code#post1848118"}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"text": ["As long as you don't wan't to hook / subclass urllib2.ProxyHandler I would suggest to go with pycurl."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["You have only one socket for all openers and implementing socks is in socket level.", "So, you can't.", "I suggest you to use pycurl library, it much more flexible."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"text": ["A cumbersome but working solution for using a SOCKS proxy is to set up provixy with proxy chaining and then set the HTTP_PROXY provided by privoxy via system variable or any other way."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You could do you it by setting evironmental variable HTTP_PROXY in following format:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["user:pass@proxy:port"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["or if you use bat/cmd, add before calling script:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["set HTTP_PROXY=user:pass@proxy:port"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I am using such cmd-file to make easy_install work under proxy."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]