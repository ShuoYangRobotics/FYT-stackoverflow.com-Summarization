[[{"text": ["There is a bunch of material online about this in the context of building online poker bots.", "See, for example: http://www.codingthewheel.com/archives/ocr-online-poker-optical-character-recognition"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.codingthewheel.com/archives/ocr-online-poker-optical-character-recognition", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.codingthewheel.com/archives/ocr-online-poker-optical-character-recognition"}]}], [{"text": ["I don't think there's something already written for what you are trying to accomplish (at least open source and in Python)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As for your second question, it depends on what you are trying to recognize.", "If the inputs can come from different sources -- e.g., different brands of playing cards with distinctive styles --, then you should probably use a machine learning-based algorithm (such as neural network or support vector machine [SVM]), in order to let it learn how to recognize unknown inputs.", "However, if the input is always the same in shape or style, then a simple image comparison algorithm will suffice (e.g., compare the pixels of the sliced upper-left corner with the pixels of each rank)."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "machine learning", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}, {"text": "image comparison algorithm", "childNum": 0, "tag": "strong", "pos": 2, "childList": []}]}, {"text": ["If you do decide to use a machine learning-based algorithm, I also think you don't need very complex features, as the suits and ranks don't really vary that much in shape or style, and you should be fine with using just the pixels of the upper left corner as features."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["There's a toy OCR example here that you may find interesting.", "The lib that is used (LibSVM) also has a Python version, which I have used, and found very simple to work with."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "here", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "here", "tag": "a"}]}, {"text": "here", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/svm-ocr-demo/"}]}, {"text": ["Hope it helps."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Use OpenCV"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "OpenCV", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/opencvlibrary/"}]}], [{"text": ["Check out http://d-touch.org/, you would have to design your own playing cards though."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://d-touch.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://d-touch.org/"}]}, {"text": ["You might also be interested in ocropus."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "ocropus", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/ocropus/"}]}], [{"text": ["It's not as robust, but you can look at the colours of 3 or 4 locations on the card so that if they are white or if they are a color, you can determine which card and suit it is.", "Obviously this won't work if you don't always have the same cards."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Personally I would go the machine learning route with this one."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Given the limited sample size (4 suits, 13 different values) I'd just try to match a reference image of the suit and value with a new input image.", "First find the bounding box of the incoming suit / value (the smallest box enclosing all non-white pixels), scale your reference pictures to match the size of that bounding box, and find the best \"match\" through pixel-wise absolute difference.", "The colour of the picture (i.e.", "red or black) will make this even easier."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]