[[{"text": ["It is already a list"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n type(my_set)\n&gt;&gt;&gt; &lt;type 'list'&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Do you want something like "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n my_set = set([1,2,3,4])\nmy_list = list(my_set)\nprint my_list\n&gt;&gt; [1, 2, 3, 4]\n</code>\n</pre>\n", "senID": 3}, {"text": ["EDIT : \nOutput of your last comment"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; my_list = [1,2,3,4]\n&gt;&gt;&gt; my_set = set(my_list)\n&gt;&gt;&gt; my_new_list = list(my_set)\n&gt;&gt;&gt; print my_new_list\n[1, 2, 3, 4]\n</code>\n</pre>\n", "senID": 5}, {"text": ["I'm wondering if you did something like this : "], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; set=set()\n&gt;&gt;&gt; set([1,2])\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'set' object is not callable\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Review your first line.", "Your stack trace is clearly not from the code you've pasted here, so I don't know precisely what you've done."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; my_set=([1,2,3,4])\n&gt;&gt;&gt; my_set\n[1, 2, 3, 4]\n&gt;&gt;&gt; type(my_set)\n&lt;type 'list'&gt;\n&gt;&gt;&gt; list(my_set)\n[1, 2, 3, 4]\n&gt;&gt;&gt; type(_)\n&lt;type 'list'&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["What you wanted was set([1, 2, 3, 4])."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "set([1, 2, 3, 4])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; my_set = set([1, 2, 3, 4])\n&gt;&gt;&gt; my_set\nset([1, 2, 3, 4])\n&gt;&gt;&gt; type(my_set)\n&lt;type 'set'&gt;\n&gt;&gt;&gt; list(my_set)\n[1, 2, 3, 4]\n&gt;&gt;&gt; type(_)\n&lt;type 'list'&gt;\n</code>\n</pre>\n", "senID": 3}, {"text": ["The \"not callable\" exception means you were doing something like set()() - attempting to call a set instance."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "set()()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "set", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I'm not sure that you're creating a set with this ([1, 2]) syntax, rather a list.", "To create a set, you should use set([1, 2])."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "([1, 2])", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "set([1, 2])", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["These brackets are just envelopping your expression, as if you would have written:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if (condition1\n    and condition2 == 3):\n    print something\n</code>\n</pre>\n", "senID": 2}, {"text": ["There're not really ignored, but do nothing to your expression. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Note: (something, something_else) will create a tuple (but still no list)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "(something, something_else)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["[EDITED]\nIt's seems you earlier have redefined \"list\", using it as a variable name, like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list = set([1,2,3,4]) # oops\n#...\nfirst_list = [1,2,3,4]\nmy_set=set(first_list)\nmy_list = list(my_set)\n</code>\n</pre>\n", "senID": 1}, {"text": ["And you'l get"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n Traceback (most recent call last):\n  File \"&lt;console&gt;\", line 1, in &lt;module&gt;\nTypeError: 'set' object is not callable\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Python is a dynamically typed language, which means that you cannot define the type of the variable as you do in C or C++:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n type variable = value\n</code>\n</pre>\n", "senID": 1}, {"text": ["or "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n type variable(value)\n</code>\n</pre>\n", "senID": 3}, {"text": ["In Python, you use coercing if you change types, or the init functions (constructors) of the types to declare a variable of a type:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n my_set = set([1,2,3])\ntype my_set\n</code>\n</pre>\n", "senID": 5}, {"text": ["will give you &lt;type 'set'&gt; for an answer. "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "&lt;type 'set'&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["If you have a list, do this:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n my_list = [1,2,3]\nmy_set = set(my_list)\n</code>\n</pre>\n", "senID": 8}], [{"text": ["Hmmm I bet that in some previous lines you have something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n list = set(something)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Am I wrong ?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]