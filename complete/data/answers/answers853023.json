[[{"text": ["If you want something that will both "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "find duplicates and ", "tag": "none", "senID": 1}, {"text": "handle nested lists (lists of lists of lists of ...)", "tag": "none", "senID": 2}]}, {"text": ["you can do something like the following:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def get_positions(xs, item):\n    if isinstance(xs, list):\n        for i, it in enumerate(xs):\n            for pos in get_positions(it, item):\n                yield (i,) + pos\n    elif xs == item:\n        yield ()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Testing this:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; xs = [['1', '2', '4', '6'],\n...       ['7', '0', '1', '4'],\n...       [ [ '0', '1', '1'], ['1']]\n...       ]\n&gt;&gt;&gt; print list(get_positions(xs, '1'))\n[(0, 0), (1, 2), (2, 0, 1), (2, 0, 2), (2, 1, 0)]\n</code>\n</pre>\n", "senID": 6}], [{"text": ["It looks likes you want, for a list of sublists and a given item, to return a list of pairs where each pair is (the index of the sublist, the index of the item within the sublist).", "You can do that using list comprehensions and Python's built in enumerate() function:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "list comprehensions", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/datastructures.html#list-comprehensions"}, {"href": "http://docs.python.org/library/functions.html#enumerate", "text": "enumerate()", "childNum": 1, "tag": "a", "childList": [{"text": "enumerate()", "tag": "code"}]}, {"text": "enumerate()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def getPosition(list, item):\n    return [(i, sublist.index(item)) for i, sublist in enumerate(list)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: See @scribble's answer above/below."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n def get_positions(xs, target):\n    return [(i,e.index(target)) for i,e in enumerate(xs)]\n</code>\n</pre>\n", "senID": 0}, {"text": ["That's a good starting point.", "Presumably you have some sort of class such as"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class SomeClass:\n    def __init__(self):\n        self.xs = [['1','2','4','6'], ['7','0','1','4']]\n\n    def get_positions(self, target):\n        return [(i,e.index(target)) for i,e in enumerate(self.xs)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["which in this case would let you say"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n model = SomeClass()\nmodel.get_position(1)    # returns [(0,0), (1,2)]\n</code>\n</pre>\n", "senID": 4}, {"text": ["Note that in both cases you'll get an exception if your target isn't in every one of your sublists.", "The question does not specify whether this is the desired behavior."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["If you don't want a exception if the item is not in the list try this.", "Also as a generator because they are cool and versatile."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n xs = [['1', '2', '4', '6'], ['7', '0', '1', '4']]\ndef get_positions(xs, item):\n    for i, xt in enumerate( xs ):\n        try: # trying beats checking\n            yield (i, xt.index(item))\n        except ValueError: \n            pass\n\nprint list(get_positions(xs, '1'))\nprint list(get_positions(xs, '6'))\n\n# Edit for fun: The one-line version, without try:\n\nget_positions2 = lambda xs,item: ((i,xt.index(item)) for  i, xt in enumerate(xs) if item in xt)\n\nprint list(get_positions2(xs, '1'))\nprint list(get_positions2(xs, '6'))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def getPosition(list, item):\n    return [(i, sublist.index(item)) for i, sublist in enumerate(list) \n                                                      if item in sublist]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["A while ago I wrote a library for python to do list matching that would fit the bill pretty well.", "It used the tokens ?, +, and * as wildcards, where ?", "signifies a single atom, + is a non-greedy one-or-more, and * is greedy one-or-more.", "For example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from matching import match\n\nmatch(['?', 2, 3, '*'], [1, 2, 3, 4, 5])\n=&gt; [1, [4, 5]]\n\nmatch([1, 2, 3], [1, 2, 4])\n=&gt; MatchError: broken at 4\n\nmatch([1, [2, 3, '*']], [1, [2, 3, 4]])\n=&gt; [[4]]\n\nmatch([1, [2, 3, '*']], [1, [2, 3, 4]], True)\n=&gt; [1, 2, 3, [4]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Download it here: http://www.artfulcode.net/wp-content/uploads/2008/12/matching.zip"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.artfulcode.net/wp-content/uploads/2008/12/matching.zip", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.artfulcode.net/wp-content/uploads/2008/12/matching.zip"}]}], [{"text": ["Here is a version without try..except, returning an iterator and that for"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [['1', '1', '1', '1'], ['7', '0', '4']]\n</code>\n</pre>\n", "senID": 1}, {"text": ["returns "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n [(0, 0), (0, 1), (0, 2), (0, 3)] \n\n\ndef getPosition1(l, val):\n  for row_nb, r in enumerate(l):\n      for col_nb in (x for x in xrange(len(r)) if r[x] == val):\n         yield row_nb, col_nb\n</code>\n</pre>\n", "senID": 3}], [{"text": ["The most strainghtforward and probably the slowest way to do it would be:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; value = '1'\n    &gt;&gt;&gt; l = [['1', '2', '3', '4'], ['3', '4', '5', '1']]\n    &gt;&gt;&gt; m = []\n    &gt;&gt;&gt; for i in range(len(l)):\n    ...  for j in range(len(l[i])):\n    ...   if l[i][j] == value:\n    ...    m.append((i,j))\n    ...\n    &gt;&gt;&gt; m\n    [(0, 0), (1, 3)]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here is another straight forward method that doesn't use generators."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def getPosition(lists,item):\n    positions = []\n    for i,li in enumerate(lists):\n        j = -1\n        try:\n            while True:\n                j = li.index(item,j+1)\n                positions.append((i,j))\n        except ValueError:\n            pass\n    return positions\n\nl = [['1', '2', '4', '6'], ['7', '0', '1', '4']]\ngetPosition(l,'1')  #returns [(0, 0), (1, 2)]\ngetPosition(l,'9') # returns []\n\nl = [['1', '1', '1', '1'], ['7', '0', '1', '4']]\ngetPosition(l,'1')  #returns [(0, 0), (0, 1), (0,2), (0,3), (1,2)]\n</code>\n</pre>\n", "senID": 1}]]