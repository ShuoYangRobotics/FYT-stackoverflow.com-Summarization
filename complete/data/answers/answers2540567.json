[[{"text": ["Data::Dumper has two main uses: data persistence and debugging/inspecting objects.", "As far as I know, there isn't anything that's going to work exactly the same as Data::Dumper."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I use pickle for data persistence."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "pickle", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/pickle.html"}]}, {"text": ["I use pprint to visually inspect my objects / debug."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "pprint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/pprint.html"}]}], [{"text": ["Possibly a couple of alternatives: pickle, marshal, shelve."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "pickle", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/pickle.html"}, {"href": "http://docs.python.org/library/marshal.html", "text": "marshal", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://docs.python.org/library/shelve.html#module-shelve", "text": "shelve", "childNum": 0, "tag": "a", "childList": []}]}], [{"tag": "ul", "num": 2, "lis": [{"text": ["For serialization, there are many options. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For debugging, you usually want to look at the object's repr or to use the pprint module."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "repr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "pprint", "childNum": 0, "tag": "code", "childList": []}]}]}], [{"text": ["I think the closest you will find is the pprint module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pprint", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/pprint.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; l = [1, 2, 3, 4]\n&gt;&gt;&gt; l.append(l)\n&gt;&gt;&gt; d = {1: l, 2: 'this is a string'}\n&gt;&gt;&gt; print d\n{1: [1, 2, 3, 4, [...]], 2: 'this is a string'}\n\n&gt;&gt;&gt; pprint.pprint(d)\n{1: [1, 2, 3, 4, &lt;Recursion on list with id=47898714920216&gt;],\n 2: 'this is a string'}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I too have been using Data::Dumper for quite some time and have gotten used to its way of displaying nicely formatted complex data structures.", "pprint as mentioned above does a pretty decent job, but I didn't quite like its formatting style.", "That plus pprint doesn't allow you to inspect objects like Data::Dumper does:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Searched on the net and came across these:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["https://gist.github.com/1071857#file_dumper.pyamazon"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "https://gist.github.com/1071857#file_dumper.pyamazon", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://gist.github.com/1071857#file_dumper.pyamazon"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; y = { 1: [1,2,3], 2: [{'a':1},{'b':2}]}\n\n&gt;&gt;&gt; pp = pprint.PrettyPrinter(indent = 4)\n&gt;&gt;&gt; pp.pprint(y)\n{   1: [1, 2, 3], 2: [{   'a': 1}, {   'b': 2}]}\n\n&gt;&gt;&gt; print(Dumper.dump(y)) # Dumper is the python module in the above link\n</code>\n</pre>\n", "senID": 3}, {"code": "<pre>\n{\n    1: [\n        1 \n        2 \n        3\n    ] \n    2: [\n        {\n            'a': 1\n        } \n        {\n            'b': 2\n        }\n    ]\n}\n</pre>\n", "senID": 4}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print(Dumper.dump(pp))\n</code>\n</pre>\n", "senID": 5}, {"code": "<pre>\ninstance::pprint.PrettyPrinter\n    __dict__ :: {\n        '_depth': None \n        '_stream': file:: > \n        '_width': 80 \n        '_indent_per_level': 4\n    }\n</pre>\n", "senID": 6}, {"text": ["Also worth checking is http://salmon-protocol.googlecode.com/svn-history/r24/trunk/salmon-playground/dumper.py It has its own style and seems useful too."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "http://salmon-protocol.googlecode.com/svn-history/r24/trunk/salmon-playground/dumper.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://salmon-protocol.googlecode.com/svn-history/r24/trunk/salmon-playground/dumper.py"}]}], [{"text": ["Here is a simple solution for dumping nested data made up of dictionaries, lists, or tuples (it works quite well for me):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def printStruct(struc, indent=0):\n  if isinstance(struc, dict):\n    print '  '*indent+'{'\n    for key,val in struc.iteritems():\n      if isinstance(val, (dict, list, tuple)):\n        print '  '*(indent+1) + str(key) + '=&gt; '\n        printStruct(val, indent+2)\n      else:\n        print '  '*(indent+1) + str(key) + '=&gt; ' + str(val)\n    print '  '*indent+'}'\n  elif isinstance(struc, list):\n    print '  '*indent + '['\n    for item in struc:\n      printStruct(item, indent+1)\n    print '  '*indent + ']'\n  elif isinstance(struc, tuple):\n    print '  '*indent + '('\n    for item in struc:\n      printStruct(item, indent+1)\n    print '  '*indent + ')'\n  else: print '  '*indent + str(struc)\n</code>\n</pre>\n", "senID": 1}, {"text": ["See it at work:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = [{'a1':1, 'a2':2, 'a3':3}, [1,2,3], [{'b1':1, 'b2':2}, {'c1':1}], 'd1', 'd2', 'd3']\n&gt;&gt;&gt; printStruct(d)\n[\n  {\n    a1=&gt; 1\n    a3=&gt; 3\n    a2=&gt; 2\n  }\n  [\n    1\n    2\n    3\n  ]\n  [\n    {\n      b1=&gt; 1\n      b2=&gt; 2\n    }\n    {\n      c1=&gt; 1\n    }\n  ]\n  d1\n  d2\n  d3\n]\n</code>\n</pre>\n", "senID": 3}]]