[[{"text": ["Best: min(d, key=d.get) -- no reason to interpose a useless lambda indirection layer or extract items or keys!"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "min(d, key=d.get)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "lambda", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Here's an answer that actually gives the solution the OP asked for:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {320:1, 321:0, 322:3}\n&gt;&gt;&gt; d.items()\n[(320, 1), (321, 0), (322, 3)]\n&gt;&gt;&gt; # find the minimum by comparing the second element of each tuple\n&gt;&gt;&gt; min(d.items(), key=lambda x: x[1]) \n(321, 0)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Using d.iteritems() will be more efficient for larger dictionaries, however."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "d.iteritems()", "tag": "a", "pos": 0, "childList": [{"text": "d.iteritems()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#dict.iteritems"}, {"text": "d.iteritems()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["min(d.items(), key=lambda x: x[1])[0]"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "min(d.items(), key=lambda x: x[1])[0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Edit: this is an answer to the OP's original question about the minimal key, not the minimal answer."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "original", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["You can get the keys of the dict using the keys function, and you're right about using min to find the minimum of that list."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "keys", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "min", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n # python \nd={320:1, 321:0, 322:3}\nreduce(lambda x,y: x if d[x]&lt;=d[y] else y, d.iterkeys())\n  321\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; d = {320:1, 321:0, 322:3}\n&gt;&gt;&gt; min(d, key=lambda k: d[k]) \n321\n</code>\n</pre>\n", "senID": 0}], [{"text": ["If you are not sure that you have not multiple minimum values, I would suggest:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = {320:1, 321:0, 322:3, 323:0}\nprint ', '.join(str(key) for min_value in (min(d.values()),) for key in d if d[key]==min_value)\n\n\"\"\"Output:\n321, 323\n\"\"\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Another approach to addressing the issue of multiple keys with the same min value:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; dd = {320:1, 321:0, 322:3, 323:0}\n&gt;&gt;&gt;\n&gt;&gt;&gt; from itertools import groupby\n&gt;&gt;&gt; from operator import itemgetter\n&gt;&gt;&gt;\n&gt;&gt;&gt; print [v for k,v in groupby(sorted((v,k) for k,v in dd.iteritems()), key=itemgetter(0)).next()[1]]\n[321, 323]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Is this what you are looking for?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n d = dict()\nd[15.0]='fifteen'\nd[14.0]='fourteen'\nd[14.5]='fourteenandhalf'\n\nprint d[min(d.keys())]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Prints 'fourteen'"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]