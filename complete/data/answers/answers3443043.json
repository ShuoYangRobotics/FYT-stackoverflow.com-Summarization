[[{"text": ["When you start a method with two underscores (and no trailing underscores), Python's name mangling rules are applied.", "This is a way to loosely simulate the private keyword from other OO languages such as C++ and Java.", "(Even so, the method is still technically not private in the way that Java and C++ methods are private, but it is \"harder to get at\" from outside the instance."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "name mangling", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/expressions.html#atom-identifiers"}, {"text": "private", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Methods with two leading and two trailing underscores are considered to be \"built-in\" methods, that is, they're used by the interpreter and are generally the concrete implementations of overloaded operators or other built-in functionality."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["You can find some information here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://docs.python.org/reference/lexical_analysis.html#reserved-classes-of-identifiers"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/reference/lexical_analysis.html#reserved-classes-of-identifiers", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/lexical_analysis.html#reserved-classes-of-identifiers"}]}], [{"text": ["Well, power for the programmer is good, so there should be a way to customize behaviour.", "Like operator overloading (__add__, __div__, __ge__, ...), attribute access (__getattribute__, __getattr__ (those two are differnt), __delattr__, ...) etc.", "In many cases, like operators, the usual syntax maps 1:1 to the respective method.", "In other cases, there is a special procedure which at some point involves calling the respective method - for example, __getattr__ is only called if the object doesn't have the requested attribute and __getattribute__ is not implemented or raised AttributeError.", "And some of them are really advanced topics that get you deeeeep into the object system's guts and are rarely needed.", "So no need to learn them all, just consult the reference when you need/want to know.", "Speaking of reference, here it is."], "childNum": 9, "tag": "p", "senID": 0, "childList": [{"text": "__add__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__div__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__ge__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__getattribute__", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "__getattr__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__delattr__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__getattr__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__getattribute__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "here it is", "tag": "a", "pos": 6, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#special-method-names"}]}], [{"text": ["They are used to specify that the Python interpreter should use them in specific situations."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["E.g., the __add__ function allows the + operator to work for custom classes.", "Otherwise you will get some sort of not defined error when attempting to add. "], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "__add__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "+", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Here is the creator of Python explaining it:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "explaining it", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python-history.blogspot.com/2009/02/adding-support-for-user-defined-classes.html"}]}, {"text": ["..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["From an historical perspective, leading underscores have often been used as a method for indicating to the programmer that the names are to be considered internal to the package/module/library that defines them.", "In languages which do not provide good support for private namespaces, using underscores is a convention to emulate that.", "In Python, when you define a method named '&#95;&#95;foo&#95;&#95;' the maintenance programmer knows from the name that something special is going on which is not happening with a method named 'foo'.", "If Python had choosen to use 'add' as the internal method to overload '+', then you could never have a class with a method 'add' without causing much confusion.", "The underscores serve as a cue that some magic will happen. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]