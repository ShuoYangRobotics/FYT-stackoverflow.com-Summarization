[[{"text": ["You don't need fancy things, just see the string methods in the standard library:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "the string methods in the standard library", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/py3k/library/stdtypes.html#str.rsplit"}]}, {"code": "<pre>\n<code>\n url.rsplit('/',1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use os.path.basename():"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from os.path import basename\n&gt;&gt;&gt; basename('http://www.test.com/TEST1')\n'TEST1'\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT:\nYou better use Luke404's solution:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n url.rsplit('/',1)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["rsplit should be up to the task:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "rsplit", "tag": "a", "pos": 0, "childList": [{"text": "rsplit", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/stdtypes.html#str.rsplit"}, {"text": "rsplit", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n In [1]: 'http://www.test.com/page/TEST2'.rsplit('/', 1)[1]\nOut[1]: 'TEST2'\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n extracted_url = url[url.rfind(\"/\")+1:];\n</code>\n</pre>\n", "senID": 0}], [{"text": ["One more (idio(ma)tic) way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n URL.split(\"/\")[-1]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["partition and rpartition are also handy for such things:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "partition", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "rpartition", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n url.rpartition('/')[2]\n</code>\n</pre>\n", "senID": 1}]]