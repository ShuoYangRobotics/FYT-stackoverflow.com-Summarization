[[{"text": ["You can easily use a list to wrap the required object and that's all what django serializers need to correctly serialize it, eg."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # assuming obj is a model instance\nserialized_obj = serializers.serialize('json', [ obj, ])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It sounds like what you're asking about involves serializing the data structure of a Django model instance for interoperability.", "The other posters are correct: if you wanted the serialized form to be used with a python application that can query the database via Django's api, then you would wan to serialize a queryset with one object.", "If, on the other hand, what you need is a way to re-inflate the model instance somewhere else without touching the database or without using Django, then you have a little bit of work to do."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here's what I do:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["First, I use demjson for the conversion.", "It happened to be what I found first, but it might not be the best.", "My implementation depends on one of its features, but there should be similar ways with other converters."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "demjson", "tag": "a", "pos": 0, "childList": [{"text": "demjson", "tag": "code"}], "childNum": 1, "href": "http://deron.meranda.us/python/demjson/"}, {"text": "demjson", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Second, implement a json_equivalent method on all models that you might need serialized.", "This is a magic method for demjson, but it's probably something you're going to want to think about no matter what implementation you choose.", "The idea is that you return an object that is directly convertible to json (i.e.", "an array or dictionary).", "If you really want to do this automatically:"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "json_equivalent", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "demjson", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "json", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n def json_equivalent(self):\n    dictionary = {}\n    for field in self._meta.get_all_field_names()\n        dictionary[field] = self.__getattribute__(field)\n    return dictionary\n</code>\n</pre>\n", "senID": 4}, {"text": ["This will not be helpful to you unless you have a completely flat data structure (no ForeignKeys, only numbers and strings in the database, etc.).", "Otherwise, you should seriously think about the right way to implement this method."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "ForeignKeys", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Third, call demjson.JSON.encode(instance) and you have what you want."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "demjson.JSON.encode(instance)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["What's wrong with serializing a QuerySet that has just a single model instance?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n data = serializers.serialize(\"xml\", SomeModel.objects.get(pk=1))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It doesn't seem you can serialize an instance, you'd have to serialize a QuerySet of one object."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.core import serializers\nfrom models import *\n\ndef getUser(request):\n    return HttpResponse(json(Users.objects.filter(id=88)))\n</code>\n</pre>\n", "senID": 1}, {"text": ["I run out of the svn release of django, so this may not be in earlier versions."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "svn", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n ville = UneVille.objects.get(nom='lihlihlihlih')\n....\nblablablab\n.......\n\nreturn HttpResponse(simplejson.dumps(ville.__dict__))\n</code>\n</pre>\n", "senID": 0}, {"text": ["I return the dict of my instance"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["so it return something like {'field1':value,\"field2\":value,....}"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["how about this way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def ins2dic(obj):\n    SubDic = obj.__dict__\n    del SubDic['id']\n    del SubDic['_state']\nreturn SubDic\n</code>\n</pre>\n", "senID": 1}, {"text": ["or exclude anything you don't want."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I solved this problem by adding a serialization method to my model:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def toJSON(self):\n    import simplejson\n    return simplejson.dumps(dict([(attr, getattr(self, attr)) for attr in [f.name for f in self._meta.fields]]))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Here's the verbose equivalent for those averse to one-liners:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def toJSON(self):\n    fields = []\n    for field in self._meta.fields:\n        fields.append(field.name)\n\n    d = {}\n    for attr in fields:\n        d[attr] = getattr(self, attr)\n\n    import simplejson\n    return simplejson.dumps(d)\n</code>\n</pre>\n", "senID": 3}, {"text": ["_meta.fields is an ordered list of model fields which can be accessed from instances and from the model itself."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "_meta.fields", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]