[[{"text": ["Use an OrderedDict:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import OrderedDict\n\nl = ['a', 'a', 'a', 'b', 'b', 'c', 'd']\nd = OrderedDict()\n\nfor x in l:\n    d[x] = True\n\n# prints a b c d\nfor x in d:\n    print x,\nprint\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I think this is perfectly OK. You get O(n) performance which is the best you could hope for."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If the list were unordered, then you'd need a helper set to contain the items you've already visited, but in your case that's not necessary."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Looks ok to me.", "If you really want to use sets do something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def ordered_set (_list) :\n    result = set()\n    lastitem = None\n    for item in _list :\n        if item != lastitem :\n            result.add(item)\n            lastitem = item\n    return sorted(tuple(result))\n</code>\n</pre>\n", "senID": 1}, {"text": ["I don't know what performance you will get, you should test it; probably the same because of method's overheat!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you really are paranoid, just like me, read here:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["http://wiki.python.org/moin/HowTo/Sorting/"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://wiki.python.org/moin/HowTo/Sorting/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/HowTo/Sorting/"}]}, {"text": ["http://wiki.python.org/moin/PythonSpeed/PerformanceTips"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://wiki.python.org/moin/PythonSpeed/PerformanceTips", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wiki.python.org/moin/PythonSpeed/PerformanceTips"}]}, {"text": ["Just remembered this(it contains the answer):"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["http://www.peterbe.com/plog/uniqifiers-benchmark"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "http://www.peterbe.com/plog/uniqifiers-benchmark", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.peterbe.com/plog/uniqifiers-benchmark"}]}], [{"text": ["if your list isn't sorted then your question doesn't make sense.", "e.g.", "[1,2,1] could become [1,2] or [2,1]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["if your list is large you may want to write your result back into the same list using a SLICE to save on memory:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "if your list is large you may want to write your result back into the same list using a SLICE to save on memory", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x=['a', 'a', 'a', 'b', 'b', 'c', 'd']\n&gt;&gt;&gt; x[:]=[x[i] for i in range(len(x)) if i==0 or x[i]!=x[i-1]]\n&gt;&gt;&gt; x\n['a', 'b', 'c', 'd']\n</code>\n</pre>\n", "senID": 2}, {"text": ["for inline deleting see Remove items from a list while iterating in Python or Python: Remove items from a list while iterating in Python"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "Remove items from a list while iterating in Python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1207406/remove-items-from-a-list-while-iterating-in-python"}, {"href": "http://stackoverflow.com/questions/2629198/python-remove-items-from-a-list-while-iterating-in-python", "text": "Python: Remove items from a list while iterating in Python", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["one trick you can use is that if you know x is sorted, and you know x[i]=x[i+j] then you don't need to check anything between x[i] and x[i+j] (and if you don't need to delete these j values, you can just copy the values you want into a new list)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["So while you can't beat n operations if everything in the set is unique i.e.", "len(set(x))=len(x)\nThere is probably an algorithm that has n comparisons as its worst case but can have n/2 comparisons as its best case (or lower than n/2 as its best case if you know somehow know in advance that len(x)/len(set(x))>2 because of the data you've generated):"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["The optimal algorithm would probably use binary search to find maximum j for each minimum i in a divide and conquer type approach.", "Initial divisions would probably be of length len(x)/approximated(len(set(x))).", "Hopefully it could be carried out such that even if len(x)=len(set(x)) it still uses only n operations."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Another very fast method with set:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def remove_duplicates(lst):\n    dset = set()\n    # relies on the fact that dset.add() always returns None.\n    return [ l for l in lst if \n             l not in dset and not dset.add(l) ]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Assuming the input sequence is unordered, here's O(N) solution (both in space and time).", "It produces a sequence with duplicates removed, while leaving unique items in the same relative order as they appeared in the input sequence."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "O(N)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def remove_dups_stable(s):\n...   seen = set()\n...   for i in s:\n...     if i not in seen:\n...       yield i\n...       seen.add(i)\n\n&gt;&gt;&gt; list(remove_dups_stable(['q', 'w', 'e', 'r', 'q', 'w', 'y', 'u', 'i', 't', 'e', 'p', 't', 'y', 'e']))\n['q', 'w', 'e', 'r', 'y', 'u', 'i', 't', 'p']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I know this has already been answered, but here's a one-liner (plus import):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from collections import OrderedDict\ndef dedupe(_list):\n    return OrderedDict((item,None) for item in _list).keys()\n\n&gt;&gt;&gt; dedupe(['q', 'w', 'e', 'r', 'q', 'w', 'y', 'u', 'i', 't', 'e', 'p', 't', 'y', 'e'])\n['q', 'w', 'e', 'r', 'y', 'u', 'i', 't', 'p']\n</code>\n</pre>\n", "senID": 1}]]