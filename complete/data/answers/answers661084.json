[[{"text": ["eval() will allow malicious data to compromise your entire system, kill your cat, eat your dog and make love to your wife."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["There was recently a thread about how to do this kind of thing safely on the python-dev list, and the conclusions were:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "It's really hard to do this properly.", "tag": "none", "senID": 2}, {"text": "It requires patches to the python interpreter to block many classes of attacks.", "tag": "none", "senID": 3}, {"text": "Don't do it unless you really want to.", "tag": "none", "senID": 4}]}, {"text": ["Start here to read about the challenge: http://tav.espians.com/a-challenge-to-break-python-security.html "], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "http://tav.espians.com/a-challenge-to-break-python-security.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://tav.espians.com/a-challenge-to-break-python-security.html"}]}, {"text": ["What situation do you want to use eval() in?", "Are you wanting a user to be able to execute arbitrary expressions?", "Or are you wanting to transfer data in some way?", "Perhaps it's possible to lock down the input in some way."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["A normal call to eval is unsafe:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; eval(\"open('/tmp/tst', 'w')\", {}, {})\n&lt;open file '/tmp/tst', mode 'w' at 0x7fe8703ce198&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["But you can hide the builtin objects by passing a dict of globals that has __builtins__ explicitly set:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "__builtins__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; eval(\"open('/tmp/tst', 'w')\", {'__builtins__':[]}, {})\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'open' is not defined\n</code>\n</pre>\n", "senID": 3}, {"text": ["I'm not sure if this prohibits all evil things one could do, but it surely is a step in the right direction..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["You can get to os using builtin functions: __import__('os')."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "os", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__import__('os')", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For python 2.6+, the ast module may help; in particular ast.literal_eval, although it depends on exactly what you want to eval."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "ast module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/ast.html#ast-helpers"}, {"text": "ast.literal_eval", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You are probably better off turning the question around: "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For example, if you are wanting to let the user enter an algebraic expression for evaluation, consider limiting them to one letter variable names, numbers, and a specific set of operators and functions.", "Don't eval() strings containing anything else."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Note that even if you pass empty dictionaries to eval(), it's still possible to segfault (C)Python with some syntax tricks.", "For example, try this on your interpreter: eval(\"()\"*8**5)"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "eval(\"()\"*8**5)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["There is a very good article on the un-safety ofeval() in Mark Pilgrim's Dive into Python tutorial."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "article on the un-safety ofeval()", "tag": "a", "pos": 0, "childList": [{"text": "eval()", "tag": "code"}], "childNum": 1, "href": "http://diveintopython3.org/advanced-iterators.html#eval"}, {"text": "eval()", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://diveintopython3.org", "text": "Dive into Python", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Quoted from this article: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]