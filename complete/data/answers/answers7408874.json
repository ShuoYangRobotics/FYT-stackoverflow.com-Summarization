[[{"text": ["try this, simple, only one line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n ' ' * n\n</code>\n</pre>\n", "senID": 1}], [{"text": ["It's as simple as:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = ' ' * N\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could do it as a function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def spaces(n):\n    return ' ' * n\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or just use the expression:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ' ' * n\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Off the top of my head:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n spaces = lambda x: ' ' * x\n</code>\n</pre>\n", "senID": 1}], [{"text": ["All these point mongers are no fun, and their simple answers stink."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The true answer is as follows:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def give_me_spaces(n):\n    return (lambda : ''.join(' ' for _ in xrange(n)))()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Also it's clearly superior because it uses functional programming."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Had to dig through my python helper functions to find this, but here it is.", "It's served me well."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n spaces = (lambda n: \n          (lambda z: z(lambda f: lambda m:'' if m &lt;= 0 else ' ' + f(m - 1))(n))\n          (lambda f:(lambda x:f(lambda*a:x(x)(*a)))(lambda x:f(lambda*a:x(x)(*a)))))\n</code>\n</pre>\n", "senID": 1}]]