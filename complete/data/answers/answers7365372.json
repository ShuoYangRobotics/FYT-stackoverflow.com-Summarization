[[{"text": ["I don't know of anything built-in, but you can easily write a generator to give you the required information:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def firstlast(seq):\n    seq = iter(seq)\n    el = prev = next(seq)\n    is_first = True\n    for el in seq:\n        yield prev, is_first, False\n        is_first = False\n        prev = el\n    yield el, is_first, True\n\n\n&gt;&gt;&gt; list(firstlast(range(4)))\n[(0, True, False), (1, False, False), (2, False, False), (3, False, True)]\n&gt;&gt;&gt; list(firstlast(range(0)))\n[]\n&gt;&gt;&gt; list(firstlast(range(1)))\n[(0, True, True)]\n&gt;&gt;&gt; list(firstlast(range(2)))\n[(0, True, False), (1, False, True)]\n&gt;&gt;&gt; for count, is_first, is_last in firstlast(range(3)):\n    print(count, \"first!\" if is_first else \"\", \"last!\" if is_last else \"\")\n\n\n0 first! \n1  \n2  last!\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You could use enumerate and compare the counter with the length of the list:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "enumerate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i, form_data in enumerate(step.hashes):\n    if i &lt; len(step.hashes):\n        whatever()\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n for form_data in step.hashes[:-1]:\n    # get and fill the current form with data in form_data\nfor form_data in step.hashes[-1:]:\n    # get and fill the current form with data in form_data\n    # click the button that enables the next form\n# submit all filled forms\n</code>\n</pre>\n", "senID": 0}, {"text": ["Don't like the repetition of get and fill the current form with data in form_data?", "Define a function."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "get and fill the current form with data in form_data", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Generator with buffer."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def first_last( iterable ):\n    i= iter(iterable)\n    f= next(i)\n    yield f, \"first\"\n    n= next(i)\n    for another in i:\n        yield n, None\n        n= another\n    yield n, \"last\"\n\nfor item, state in first_list( iterable ):\n    # state is \"first\", None or \"last\".\n</code>\n</pre>\n", "senID": 1}, {"text": ["Zipping two sequences"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n flags = [\"first\"] + (len(iterable)-2)*[None] + [\"last\"]\nfor item, state in zip( iterable, flags ):\n    # state is \"first\", None or \"last\".\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If I am understanding your question correctly, you want a simple test for whether you are at the beginning or end of the list?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If that's the case, this would do it:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for item in list:\n    if item != list[-1]:\n        #Do stuff\n</code>\n</pre>\n", "senID": 2}, {"text": ["For the first item in the list, you would replace \"-1\" with 0."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I think he wants to have a wrapper around the iterator that provides first / last queries,\nalso the parameter could be an iterator so all sort of len() would faild"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Here it is what I came up so far, the trick is to use a double iterator, one that looks ahead\none step of the first:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class FirstLastIter(object):\n\n    def __init__(self, seq):\n        self._seq_iter = iter(seq)\n        self._seq_iter_next = iter(seq)\n        self._idx = -1\n        self._last = None\n        self.next_next()\n\n    @property\n    def first(self):\n        return self._idx == 0\n\n    @property\n    def last(self):\n        return self._last == True\n\n    def __iter__(self):\n        return self\n\n    def next_next(self):\n        try:\n            self._seq_iter_next.next()\n        except StopIteration:\n            self._last = True\n\n    def next(self):\n        val = self._seq_iter.next()\n        self._idx += 1\n        self.next_next()\n        return val\n\nfor x in FirstLastIter([]):\n    print x\n\niterator = FirstLastIter([1])\nfor x in iterator:\n    print x,iterator.first,iterator.last\n\niterator = FirstLastIter([1,2,3])\nfor x in iterator:\n    print x,iterator.first,iterator.last\n</code>\n</pre>\n", "senID": 2}, {"text": ["returns:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n 1 True True\n1 True False\n2 False False\n3 False True\n</code>\n</pre>\n", "senID": 4}]]