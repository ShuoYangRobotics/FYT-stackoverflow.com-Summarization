[[{"text": ["I just discovered Pydev actually has a nice workaround for this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Go to Window > Preferences, then Pydev > Editor > Code Analysis."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "Window", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Preferences", "childNum": 0, "tag": "strong", "childList": []}, {"text": "Pydev", "childNum": 0, "tag": "strong", "childList": []}, {"text": "Editor", "childNum": 0, "tag": "strong", "childList": []}, {"text": "Code Analysis", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Click the Undefined tab and add \"DoesNotExist\" to the text box titled Consider the following names as globals."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "Undefined", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Consider the following names as globals", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["The problem is really with PyDev, not your code.", "What you have done is absolutely correct, but IDEs will always have difficulty resolving attributes in a dynamic language like Python.", "In the case of the DoesNotExist exception, it is added via a __metaclass__ rather than through normal object inheritance, so PyDev is unlikely to be able to find it.", "However, it should definitely work."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__metaclass__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["Pydev has a workaround for such cases (when the members are defined at runtime).", "Just add #@UndefinedVariable at the end of the string which cause the warning (or ctrl+1 on keyboard when the cursor is at \"DoesNotExist\"), and it won't complain."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Can Eclipse resolve attributes created runtime via __metaclass__es?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "__metaclass__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Notice that you never define a DoesNotExist on any of your models and it is not defined on django.db.models.base.Model either."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "DoesNotExist", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "django.db.models.base.Model", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can also solve it in a different way: just go to the User class, and add @DynamicAttrs in the docstring.", "This will tell PyDev that attributes of the class are added dynamically, and will make it not complain any longer for \"issues\" like DoesNotExist."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"text": ["I have same problem on Ubuntu in a VirtualEnv to solve problem I have used this snippets."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In parituclar he make custom User Fields with code: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class UserField(forms.CharField):\n    def clean(self, value):\n        super(UserField, self).clean(value)\n        try:\n            User.objects.get(username=value)\n            raise forms.ValidationError(\"Someone is already using this username. Please pick an other.\")\n        except User.DoesNotExist:\n            return value\n</code>\n</pre>\n", "senID": 2}], [{"text": ["What do you mean by that?", "Do you have python error and stack trace?", "This code have to work (as in documentation).", "Looks like an eclipse issue.", "Just run dev server and see if it works or not:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "documentation", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/1.0/topics/auth/#writing-an-authentication-backend"}]}, {"code": "<pre>\n<code>\n manage.py runserver\n</code>\n</pre>\n", "senID": 1}]]