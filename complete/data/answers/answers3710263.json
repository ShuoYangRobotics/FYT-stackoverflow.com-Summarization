[[{"text": ["Using the csv module is very straight forward and made for this task."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv module", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}, {"code": "<pre>\n<code>\n import csv\nwriter = csv.writer(open(\"out.csv\", 'w'))\nwriter.writerow(['name', 'address', 'phone', 'etc'])\nwriter.writerow(['bob', '2 main st', '703', 'yada'])\nwriter.writerow(['mary', '3 main st', '704', 'yada'])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Creates exactly the format you're expecting."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You can easily create it manually, writing a file with a chosen separator.", "You can also use csv module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "csv module", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/csv.html"}]}, {"text": ["If it's from database you can alo just use a query from your sqlite client :"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n sqlite &lt;db params&gt; &lt; queryfile.sql &gt; output.csv\n</code>\n</pre>\n", "senID": 2}, {"text": ["Which will create a csv file with tab separator."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n import csv\nimport sqlite3\n\nconn = sqlite3.connect(\"Firefox/.../permissions.sqlite\")\ncursor = conn.cursor()\ncursor.execute(\"select * from moz_hosts;\")\n\ncsv_writer = csv.writer(open(\"out.csv\", \"wt\"))\ncsv_writer.writerow([i[0] for i in cursor.description]) # write headers\ncsv_writer.writerows(cursor)\ndel csv_writer # this will close the CSV file\n</code>\n</pre>\n", "senID": 0}, {"text": ["PEP 249 (DB API 2.0) has more information about (cursor).description."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "PEP 249 (DB API 2.0)", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0249/"}, {"text": ".description", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["How to extract the column headings from an existing table:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "How to extract the column headings from an existing table:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["You don't need to parse an SQL \"create table\" statement.", "This is fortunate, as the \"create table\" syntax is neither nice nor clean, it is warthog-ugly."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "You don't need to parse an SQL \"create table\" statement.", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["You can use the table_info pragma, described here.", "It gives you useful information about each column in a table, including the name of the column."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "table_info", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.sqlite.org/pragma.html"}]}, {"text": ["Example:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; #coding: ascii\n... import sqlite3\n&gt;&gt;&gt;\n&gt;&gt;&gt; def get_col_names(cursor, table_name):\n...     results = cursor.execute(\"PRAGMA table_info(%s);\" % table_name)\n...     return [row[1] for row in results]\n...\n&gt;&gt;&gt; def wrong_way(cur, table):\n...     import re\n...     cur.execute(\"SELECT sql FROM sqlite_master WHERE name=?;\", (table, ))\n...     sql = cur.fetchone()[0]\n...     column_defs = re.findall(\"[(](.*)[)]\", sql)[0]\n...     first_words = (line.split()[0].strip() for line in column_defs.split(','))\n...     columns = [word for word in first_words if word.upper() != \"CONSTRAINT\"]\n...     return columns\n...\n&gt;&gt;&gt; conn = sqlite3.connect(\":memory:\")\n&gt;&gt;&gt; curs = conn.cursor()\n&gt;&gt;&gt; _ignored = curs.execute(\n...     \"create table foo (id integer, name text, [haha gotcha] text);\"\n...     )\n&gt;&gt;&gt; print get_col_names(curs, \"foo\")\n[u'id', u'name', u'haha gotcha']\n&gt;&gt;&gt; print wrong_way(curs, \"foo\")\n[u'id', u'name', u'[haha'] &lt;&lt;&lt;&lt;&lt;===== WHOOPS!\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 4}, {"text": ["Other problems with the now-deleted \"parse the create table SQL\" answer:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["(a) Stuffs up with e.g.", "create table test (id1 text, id2 int, msg text, primary key(id1, id2)) ... needs to ignore not only CONSTRAINT but also keywords PRIMARY, UNIQUE, CHECK and FOREIGN (see create table docs)"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "create table test (id1 text, id2 int, msg text, primary key(id1, id2))", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["(b) Needs to specify re.DOTALL in case there are newlines in the SQL."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "re.DOTALL", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["(c) In line.split()[0].strip() the strip is redundant "], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["unless i'm missing something, you just want to do something like so..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f = open(\"somefile.csv\")\nf.writelines(\"header_row\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["logic to write lines to file (you may need to organize values and add comms or pipes etc...)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n f.close()\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You seem to be familiar with excel and want to stay close to it.", "Might I suggest trying PyExcelerator?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyExcelerator", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://sourceforge.net/projects/pyexcelerator/"}]}]]