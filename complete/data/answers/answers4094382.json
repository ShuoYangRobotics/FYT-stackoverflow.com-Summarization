[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; r=re.compile(\"(a?[^a]+)\")\n&gt;&gt;&gt; r.findall(\"fffagggahhh\")\n['fff', 'aggg', 'ahhh']\n</code>\n</pre>\n", "senID": 0}, {"text": ["EDIT:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This won't handle correctly double as in the string:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; r.findall(\"fffagggaahhh\")\n['fff', 'aggg', 'ahhh']\n</code>\n</pre>\n", "senID": 3}, {"text": ["KennyTM's re seems better suited. "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Ok, not exactly the solution you want but I thought it will be a useful addition to problem here."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Without re:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = \"fffagggahhh\"\n&gt;&gt;&gt; k = x.split('a')\n&gt;&gt;&gt; j = [k[0]] + ['a'+l for l in k[1:]]\n&gt;&gt;&gt; j\n['fff', 'aggg', 'ahhh']\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 2}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; rx = re.compile(\"(?:a|^)[^a]*\")\n&gt;&gt;&gt; rx.findall(\"fffagggahhh\")\n['fff', 'aggg', 'ahhh']\n&gt;&gt;&gt; rx.findall(\"aaa\")\n['a', 'a', 'a']\n&gt;&gt;&gt; rx.findall(\"fgh\")\n['fgh']\n&gt;&gt;&gt; rx.findall(\"\")\n['']\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n import re\n\ndef split_before(pattern,text):\n    prev = 0\n    for m in re.finditer(pattern,text):\n        yield text[prev:m.start()]\n        prev = m.start()\n    yield text[prev:]\n\n\nif __name__ == '__main__':\n    print list(split_before(\"a\",\"fffagggahhh\"))\n</code>\n</pre>\n", "senID": 0}, {"text": ["re.split treats the pattern as a delimiter."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print list(split_before(\"a\",\"afffagggahhhaab\"))\n['', 'afff', 'aggg', 'ahhh', 'a', 'ab']\n&gt;&gt;&gt; print list(split_before(\"a\",\"ffaabcaaa\"))\n['ff', 'a', 'abc', 'a', 'a', 'a']\n&gt;&gt;&gt; print list(split_before(\"a\",\"aaaaa\"))\n['', 'a', 'a', 'a', 'a', 'a']\n&gt;&gt;&gt; print list(split_before(\"a\",\"bbbb\"))\n['bbbb']\n&gt;&gt;&gt; print list(split_before(\"a\",\"\"))\n['']\n</code>\n</pre>\n", "senID": 2}], [{"text": ["split() takes an argument for the character to split on:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "split()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"fffagggahhh\".split('a')\n['fff', 'ggg', 'hhh']\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; foo = \"abbcaaaabbbbcaaab\"\n&gt;&gt;&gt; bar = foo.split(\"c\")\n&gt;&gt;&gt; baz = [bar[0]] + [\"c\"+x for x in bar[1:]]\n&gt;&gt;&gt; baz\n['abb', 'caaaabbbb', 'caaab']\n</code>\n</pre>\n", "senID": 0}, {"text": ["Due to how slicing works, this will work properly even if there are no occurrences of c in foo."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "c", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "foo", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["This one works on repeated a's  "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; re.findall(\"a[^a]*|^[^a]*\", \"aaaaa\")\n  ['a', 'a', 'a', 'a', 'a']\n  &gt;&gt;&gt; re.findall(\"a[^a]*|[^a]+\", \"ffaabcaaa\")\n  ['ff', 'a', 'abc', 'a', 'a', 'a']\n</code>\n</pre>\n", "senID": 1}, {"text": ["Approach: the main chunks that you are looking for are an a followed by zero or more not-a.", "That covers all possibilities except for zero or more not-a.", "That can happen only at the start of the input string."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "a", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}]]