[[{"text": ["I find almost all the explanations here unhelpful, so here is another try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The confusion here is based on that testing with \"is\", \"==\" and \"if\" are three different things."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "\"is\" tests identity, that is, if it's the same object. That is obviously not true in this case.", "tag": "none", "senID": 2}, {"text": "\"==\" tests value equality, and obviously the only built in objects with the values of True and False are the object True and False (with the exception of the numbers 0 and 1, of any numeric type).", "tag": "none", "senID": 3}]}, {"text": ["And here comes the important part:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"tag": "ul", "num": 1, "lis": [{"text": "'if' tests on boolean values. That means that whatever expression you give it, it will be converted to either True or False. You can make the same with bool(). And bool((None,)) will return True. The things that will evaluate to False is listed in the docs (linked to by others here)", "tag": "none", "senID": 5}]}, {"text": ["Now maybe this is only more clear in my head, but at least I tried.", ":)"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["a is a one-member tuple, which evaluates to True.", "is test identity of the object, therefore, you get False in all those test.", "== test equality of the objects, therefore, you get False again."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["in if statement a __bool__ (or __nonzero__) used to evaluate the object, for a non-empty tuple it should return True, therefore you get True.", "hope that answers your question."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__bool__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "__nonzero__", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["edit: the reason True and False are equal to 1 and 0 respectively is because  bool type implemented as a subclass of int type."], "childNum": 7, "tag": "p", "senID": 2, "childList": [{"text": "edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}, {"text": "1", "childNum": 0, "tag": "code", "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}, {"text": "bool", "childNum": 0, "tag": "code", "childList": []}, {"text": "int", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Because a=(None,) is a tuple containing a single element None"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "a=(None,)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Try again with a=None and you will see there is a different result."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "a=None", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Also try a=() which is the empty tuple.", "This has a truth value of false "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "a=()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Things in python don't have to be one of True or False. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["When they're used as a text expression for if/while loops, they're converted to booleans.", "You can't use is or == to test what they evaluate to.", "You use bool( thing )"], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "is", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "==", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "bool( thing )", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = (None,)\n&gt;&gt;&gt; bool(a)\nTrue\n</code>\n</pre>\n", "senID": 2}, {"text": ["Also note:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; 10 == True\nFalse\n&gt;&gt;&gt; 10 is True\nFalse\n&gt;&gt;&gt; bool(10)\nTrue\n</code>\n</pre>\n", "senID": 4}], [{"text": ["(None,) is a tuple that contains an element, it's not empty and therefore does not evaluate to False in that context."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In Python every type can be converted to bool by using the bool() function or the __nonzero__method."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "bool", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "bool()", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/reference/datamodel.html#object.%5F%5Fnonzero%5F%5F", "text": "__nonzero__method", "childNum": 1, "tag": "a", "childList": [{"text": "__nonzero__", "tag": "code"}]}, {"text": "__nonzero__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Examples:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Sequences (lists, strings, ...) are converted to ", "tag": "none", "senID": 2}, {"text": "Integers are converted to ", "tag": "none", "senID": 3}, {"text": "You can define this behavior in your own classes by overriding ", "tag": "none", "senID": 4}]}, {"text": ["[Edit]"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["In your code, the tuple (None,) is converted using bool() in the if statements.", "Since it's non-empty, it evaluates to True."], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "(None,)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "bool()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}]]