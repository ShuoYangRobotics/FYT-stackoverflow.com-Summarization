[[{"text": ["I'd offer itertools and functools.", "These modules operate over abstractions that are found everywhere in programming, so I think they are useful to study.", "Among more practical things, xml modules (xml.dom, xml.sax) can be very useful."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "functools", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "xml.dom", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "xml.sax", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Modules to cover in a 1-2 hour slot entirely depend on your audience's interest or focus.", "What other classes are they taking?", "What are they prepared to make use of immediately?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Be sure to mention math, decimal and datetime and time and re."], "childNum": 5, "tag": "p", "senID": 1, "childList": [{"text": "math", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "decimal", "childNum": 0, "tag": "code", "childList": []}, {"text": "datetime", "childNum": 0, "tag": "code", "childList": []}, {"text": "time", "childNum": 0, "tag": "code", "childList": []}, {"text": "re", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["For IT-types who will be doing file-oriented work: glob, fnmatch, os, os.path, tempfile, and shutil."], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "glob", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "fnmatch", "childNum": 0, "tag": "code", "childList": []}, {"text": "os", "childNum": 0, "tag": "code", "childList": []}, {"text": "os.path", "childNum": 0, "tag": "code", "childList": []}, {"text": "tempfile", "childNum": 0, "tag": "code", "childList": []}, {"text": "shutil", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Database folks must hear about sqlite and json."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "sqlite", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "json", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Simulation audience may want to hear about random."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "random", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Web developers must hear about urllib2 from a client point of view.", "Also Beautiful Soup and an XML parser of your choice."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "urllib2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Web developers must hear about logging and wsgiref from a server point of view."], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "logging", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "wsgiref", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Have a look at PyMOTW (Python Module Of The Week).", "Although it is not strictly stdlib, it's a great resource of obvious and not so obvious gems of the python stdlib.", "What's more, it also serves as excellent documentation of the introduced modules."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyMOTW", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.doughellmann.com/PyMOTW/contents.html"}]}], [{"text": ["I'd go for a few modules which make the most sense to a typical computer user/programmer performing typical computer tasks.", "That way, there's the largest chance that they might actually use python on their own time."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "use", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["In my opinion, the operations most people will likely perform are file operations, for example going over every file in a directory and performing some action on it."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Therefore, I'd say the modules: os and os.path are probably the most important, and also mention glob, fnmatch and shutil.", "Also, subprocess might be very useful too, since it tends to get used in the above mentioned context."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "os and os.path", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "glob, fnmatch and shutil", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "subprocess", "childNum": 0, "tag": "strong", "pos": 1, "childList": []}]}, {"text": ["Lastly, I'd go with optparse, since that will get them into very quickly making usable, programmer-friendly programs, which hopefully will also encourage them to actually write programs that other people want to use."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "optparse", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["I would add urllib2 to the list."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["In only a one-two hour slot, I would introduce easy_install and the PyPI repository: even if they are not in the standard lib, they enable you to install many other external modules, and it is the first place where to look when you can't find in the standard lib."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "easy_install", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://peak.telecommunity.com/DevCenter/EasyInstall"}, {"href": "http://pypi.python.org/pypi", "text": "PyPI repository", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["Apart from that, I would introduce numpy, re, doctest/unittest, and maybe pickle."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["It depends a little on what they will be doing and what level they are.", "Some modules I wish someone pointed out to me when I started are:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 5, "lis": [{"text": "StringIO - to stop them from reimplementing it, which they will if they don't discover it.", "tag": "none", "senID": 1}, {"text": "logging - to put them on the right path when it comes to debug printouts", "tag": "none", "senID": 2}, {"text": "pickle - to stop them from trying to use XML everywhere.", "tag": "none", "senID": 3}, {"text": "xml.etree.ElementTree - To save them from the DOM model when they actually need to work with XML.", "tag": "none", "senID": 4}, {"text": "pprint - to make nested structures in python less intimidating.", "tag": "none", "senID": 5}]}], [{"text": ["Don't forget about datetime, weakref, pickle, StringIO, heapq, may be threading."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["And numpy also worths mentioning, although it is not from the standard library."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["operator, next to what's already mentioned."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "operator", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["os and os.path: because those are the core modules which anyone will require to write platform independent code in python and students can switch from shell script to python script after learning os and os.path."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I just remember a very practical module: copy.", "I use the deepcopy() from it quite often."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}], [{"text": ["Aside from those you mentioned, I found subprocess and sqlite3 modules particularly useful.", "But I would certainly advice to students to take a look at the list of standard library modules themselves.", "Also, from modules outside of standard library, I would mention numpy (or numarray) and pyparsing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I'd place some weight on the decimal module.", "If they are beginners at programming, they certainly won't be aware of the implications of floating point accuracy.", "The decimal module is extremely valuable if working with currency or other units that must retain exact decimal precision through several mathematic operations."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "decimal", "tag": "a", "pos": 0, "childList": [{"text": "decimal", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/decimal.html"}, {"text": "decimal", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"href": "http://en.wikipedia.org/wiki/Floating%5Fpoint#Accuracy%5Fproblems", "text": "floating point accuracy", "childNum": 0, "tag": "a", "childList": []}, {"text": "decimal", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Of course, you'd probably want to touch on situations when you  don't need to be that accurate as well."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "don't", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["Definitely add BeautifulSoup.", "One of the best (if not the best) HTML parser."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}, {"text": ["Edit: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Oops, this isn't a \"standard\" module per se, but it should be if you do HTML parsing."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "per se", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "should", "childNum": 0, "tag": "em", "childList": []}]}], [{"text": ["I think everyone here got all the important ones, except for sys.", "If you look at actual Python code, sys is probably one of the most commonly used modules (usually because of sys.version).  "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "sys", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "sys", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "sys.version", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also, it's not really a module, but I would mention __future__."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "__future__", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["And nobody should use Python without doing import this."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "import this", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["For science student, a rarely heard but powerful module 'networkx' will be valuable.", "But they need to install it first.", "This module is well documented: http://networkx.lanl.gov/index.html"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://networkx.lanl.gov/index.html", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://networkx.lanl.gov/index.html"}]}], [{"text": ["It is hard to live without timeit"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "timeit", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/timeit.html"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; # Python shell usage\n... import timeit\n&gt;&gt;&gt; tt = timeit.Timer(\"foo = 'time this'\", \"print 'setup with this arg'\")\n&gt;&gt;&gt; tt.timeit(number=1000)\nsetup with this arg\n0.00021100044250488281\n&gt;&gt;&gt;\n\n[mpenning@Bucksnort ~]$ # Bash shell usage\n[mpenning@Bucksnort ~]$ # 5 runs with 1000 samples each.\n[mpenning@Bucksnort ~]$ python -m timeit -n 1000 -r 5 -s \"print 'setup w/ this arg'\" \\\n    \"foo = 'time this'\"\nsetup w/ this arg\nsetup w/ this arg\nsetup w/ this arg\nsetup w/ this arg\nsetup w/ this arg\n1000 loops, best of 5: 0.173 usec per loop\n[mpenning@Bucksnort ~]$\n</code>\n</pre>\n", "senID": 1}]]