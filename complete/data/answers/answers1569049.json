[[{"text": ["This will work.", "But it's kind of crazy."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    assert False, \"A Message\"\nexcept AssertionError, e:\n    raise Exception( e.args )\n</code>\n</pre>\n", "senID": 1}, {"text": ["Why not the following?", "This is less crazy."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if not someAssertion: raise Exception( \"Some Message\" )\n</code>\n</pre>\n", "senID": 3}, {"text": ["It's only a little wordier than the assert statement, but doesn't violate our expectation that assert failures raise AssertionError."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "assert", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "AssertionError", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Consider this."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n def myAssert( condition, action ):\n    if not condition: raise action\n</code>\n</pre>\n", "senID": 6}, {"text": ["Then you can more-or-less replace your existing assertions with something like this."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n myAssert( {{ the original condition }}, MyException( {{ the original message }} ) )\n</code>\n</pre>\n", "senID": 8}, {"text": ["Once you've done this, you are now free to fuss around with enable or disabling or whatever it is you're trying to do."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"text": ["Also, read up on the warnings module.", "This may be exactly what you're trying to do."], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "warnings", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/warnings.html"}]}], [{"text": ["How about this?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n >>> def myraise(e): raise e\n... \n>>> cond=False\n>>> assert cond or myraise(RuntimeError)\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"\", line 1, in myraise\nRuntimeError\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In Python 2.6.3 at least, this will also work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyAssertionError (Exception):\n    pass\n\nAssertionError = MyAssertionError\n\nassert False, \"False\"\n</code>\n</pre>\n", "senID": 1}, {"tag": "hr", "senID": 2}, {"code": "<pre>\n<code>\n Traceback (most recent call last):\n  File \"assert.py\", line 8, in &lt;module&gt;\n    assert False, \"False\"\n__main__.MyAssertionError: False\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Python also skips if __debug__: blocks when run with -o option.", "The following code is more verbose, but does what you need without hacks:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "if __debug__:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "-o", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n def my_assert(condition, message=None):\n    if not condition:\n        raise MyAssertError(message)\n\nif __debug__: my_assert(condition, message)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can make it shorter by moving if __debug__: condition inside my_assert(), but then it will be called (without any action inside) when optimization is enabled."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "if __debug__:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "my_assert()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Never use an assertion for logic!", "Only for optional testing checks.", "Remember, if Python is running with optimizations turned on, asserts aren't even compiled into the bytecode.", "If you're doing this, you obviously care about the exception being raised and if you care, then you're using asserts wrong in the first place."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["To see if try has any overhead I tried this experiment"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["here is myassert.py\ndef myassert(e):\n    raise e"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "def myassert(e):\n    raise e", "childNum": 1, "tag": "pre", "pos": 0, "childList": [{"text": "def myassert(e):\n    raise e", "tag": "code"}]}, {"text": "def myassert(e):\n    raise e", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["def f1():                       #this is the control for the experiment\n    cond=True"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["def f2():\n    cond=True\n    try:\n        assert cond, \"Message\"\n    except AssertionError, e:\n        raise Exception(e.args)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["def f3():\n    cond=True\n    assert cond or myassert(RuntimeError)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["def f4():\n    cond=True\n    if &#95;&#95;debug&#95;&#95;:\n        raise(RuntimeError)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"senID": 6}, {"text": ["$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f1()'\n100 loops, best of 1000: 0.42 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f2()'\n100 loops, best of 1000: 0.479 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f3()'\n100 loops, best of 1000: 0.42 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f4()'\n100 loops, best of 1000: 0.42 usec per loop"], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f1()'\n100 loops, best of 1000: 0.42 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f2()'\n100 loops, best of 1000: 0.479 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f3()'\n100 loops, best of 1000: 0.42 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f4()'\n100 loops, best of 1000: 0.42 usec per loop", "childNum": 1, "tag": "pre", "pos": 0, "childList": [{"text": "$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f1()'\n100 loops, best of 1000: 0.42 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f2()'\n100 loops, best of 1000: 0.479 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f3()'\n100 loops, best of 1000: 0.42 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f4()'\n100 loops, best of 1000: 0.42 usec per loop", "tag": "code"}]}, {"text": "$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f1()'\n100 loops, best of 1000: 0.42 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f2()'\n100 loops, best of 1000: 0.479 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f3()'\n100 loops, best of 1000: 0.42 usec per loop\n$ python -O -mtimeit -n100 -r1000 -s'import myassert' 'myassert.f4()'\n100 loops, best of 1000: 0.42 usec per loop", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can let a context manager do the conversion for you, inside a with block (which may contain more than one assertion, or more code and function calls or what you want."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "context manager", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/datamodel.html#context-managers"}]}, {"code": "<pre>\n<code>\n from __future__ import with_statement\nimport contextlib\n\n@contextlib.contextmanager\ndef myassert(exctype):\n    try:\n        yield\n    except AssertionError, exc:\n        raise exctype(*exc.args)\n\nwith myassert(ValueError):\n    assert 0, \"Zero is bad for you\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["See a previous version of this answer for substituting constructed exception objects directly (KeyError(\"bad key\")), instead of reusing the assertions' argument(s)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "KeyError(\"bad key\")", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]