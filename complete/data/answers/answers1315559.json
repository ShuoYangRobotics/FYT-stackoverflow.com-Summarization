[[{"text": ["text[0] fails if text is an empty string:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "text[0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "text", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n IronPython 2.6 Alpha (2.6.0.1) on .NET 4.0.20506.1\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; text = \"\"\n&gt;&gt;&gt; print(text.startswith(\"a\"))\nFalse\n&gt;&gt;&gt; print(text[0]=='a')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: index out of range: 0\n</code>\n</pre>\n", "senID": 1}, {"text": ["EDIT: You say you \"know\" that text is not empty... how confident are you of that, and what would you want to happen if it is empty in reality?", "If a failure is appropriate (e.g.", "it means a bug in your code) that would encourage the use of text[0]=='a'."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "text", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "text[0]=='a'", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["Other questions:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["How concerned are you about the performance of this?", "If this is performance critical, then benchmark it on your particular Python runtime.", "I wouldn't be entirely surprised to find that (say) one form was faster on IronPython and a different one faster on CPython."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "on your particular Python runtime", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "entirely", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["Which do you (and your team) find more readable?"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "you", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}]}], [{"text": ["Yes: it\u2019s easier to use and easier to read.", "When you are testing for more than one letter, when using slicing, you\u2019ll have to know how long the target text is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n haystack = 'Hello, World!'\nneedle = 'Hello'\n\n# The easy way\nresult = haystack.startswith(needle)\n\n# The slightly harder way\nresult = haystack[:len(needle)] == needle\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: The question seems to have changed.", "It now says, \u201cknowing text is not empty and we are only interested in the first character of it.\u201d That turns it into a fairly meaningless hypothetical situation."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["I suspect the questioner is trying to \u201coptimize\u201d his/her code for execution speed.", "If that is the case, my answer is: don\u2019t.", "Use whichever form is more readable and, therefore, more maintainable when you have to come back and work on it a year from now.", "Only optimize if profiling shows that line of code to be the bottleneck.", "This is not some O(n\u00b2) algorithm.", "It\u2019s a string comparison."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "readable", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}], [{"text": ["Personally I would say startswith is more readable."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "startswith", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Also, from Python 2.5 startwith can take a tuple of prefixes to look for:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "startwith", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"hello world\".startswith((\"hello\",\"goodbye\"))\nTrue\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The stock phrase for the questiom is: \"Premature optimization is the root of all evil\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I'd agree with the others that startswith is more readable, and you should use that.", "That said, if performance is a big issue for such a special case, benchmark it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n $ python -m timeit -s 'text=\"foo\"' 'text.startswith(\"a\")'\n1000000 loops, best of 3: 0.537 usec per loop\n\n$ python -m timeit -s 'text=\"foo\"' 'text[0]==\"a\"'\n1000000 loops, best of 3: 0.22 usec per loop\n</code>\n</pre>\n", "senID": 1}, {"text": ["So text[0] is amost 2.5 times as fast - but it's a pretty quick operation; you'd save ~0.3 microseconds per compare depending on the system.", "Unless you're doing millions of comparisons in a time critical situation though, I'd still go with the more readable startswith."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "text[0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["text[0] can fail but the equivalent text[:1] is safe if the string is empty."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "text[0]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "text[:1]", "childNum": 0, "tag": "code", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["If you want to compare more than one characters, I believe .startswith() is better."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": ".startswith()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Instead of asking you can just write a quick test and see which one's faster.", "And then let us know.", "Ofcourse you'll have to add to text[0] the check that the string isn't empty."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}], [{"text": ["text[0]=='a' is good considering performance.", "Also you need to add validation when you use this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["PEP 8 explicitly tells to use startswith, because of readability:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "PEP 8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}, {"text": "startswith", "childNum": 0, "tag": "code", "childList": []}]}]]