[[{"text": ["Ok - my python not great so any help would be appreciated - You dont need to write a parser - this is the solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["add this utlity class http://code.google.com/p/google-app-engine-samples/source/browse/trunk/geochat/json.py?r=55 "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://code.google.com/p/google-app-engine-samples/source/browse/trunk/geochat/json.py?r=55", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/google-app-engine-samples/source/browse/trunk/geochat/json.py?r=55"}]}, {"code": "<pre>\n<code>\n import datetime  \n import time \n\n from google.appengine.api import users \n from google.appengine.ext import db \n\n#this is a mod on the orinal file for some reason it includes its own simplejson files i have ref django!\n from django.utils import simplejson  \n\n class GqlEncoder(simplejson.JSONEncoder): \n\n   \"\"\"Extends JSONEncoder to add support for GQL results and properties. \n\n   Adds support to simplejson JSONEncoders for GQL results and properties by \n   overriding JSONEncoder's default method. \n   \"\"\" \n\n   # TODO Improve coverage for all of App Engine's Property types. \n\n   def default(self, obj): \n\n     \"\"\"Tests the input object, obj, to encode as JSON.\"\"\" \n\n     if hasattr(obj, '__json__'): \n       return getattr(obj, '__json__')() \n\n     if isinstance(obj, db.GqlQuery): \n       return list(obj) \n\n     elif isinstance(obj, db.Model): \n       properties = obj.properties().items() \n       output = {} \n       for field, value in properties: \n         output[field] = getattr(obj, field) \n       return output \n\n     elif isinstance(obj, datetime.datetime): \n       output = {} \n       fields = ['day', 'hour', 'microsecond', 'minute', 'month', 'second', \n           'year'] \n       methods = ['ctime', 'isocalendar', 'isoformat', 'isoweekday', \n           'timetuple'] \n       for field in fields: \n         output[field] = getattr(obj, field) \n       for method in methods: \n         output[method] = getattr(obj, method)() \n       output['epoch'] = time.mktime(obj.timetuple()) \n       return output \n\n     elif isinstance(obj, time.struct_time): \n       return list(obj) \n\n     elif isinstance(obj, users.User): \n       output = {} \n       methods = ['nickname', 'email', 'auth_domain'] \n       for method in methods: \n         output[method] = getattr(obj, method)() \n       return output \n\n     return simplejson.JSONEncoder.default(self, obj) \n\n\n def encode(input): \n   \"\"\"Encode an input GQL object as JSON \n\n     Args: \n       input: A GQL object or DB property. \n\n     Returns: \n       A JSON string based on the input object.  \n\n     Raises: \n       TypeError: Typically occurs when an input object contains an unsupported \n         type. \n     \"\"\" \n   return GqlEncoder().encode(input)\n</code>\n</pre>\n", "senID": 2}, {"text": ["save as json.py"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "save as json.py", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["TO USE"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import cgi\nimport os\nimport json \n\nfrom google.appengine.ext.webapp import template\nfrom google.appengine.api import users\nfrom google.appengine.ext import webapp\nfrom google.appengine.ext.webapp.util import run_wsgi_app\nfrom google.appengine.ext import db\n\n\nclass Greeting(db.Model):\n    author = db.UserProperty()\n    content = db.StringProperty(multiline=True)\n    date = db.DateTimeProperty(auto_now_add=True)\n\nclass MainPage(webapp.RequestHandler):\n    def get(self):\n        greetings_query = Greeting.all().order('-date')\n        greetings = greetings_query.fetch(5)\n\n        if users.get_current_user():\n            url = users.create_logout_url(self.request.uri)\n            url_linktext = 'Logout'\n        else:\n            url = users.create_login_url(self.request.uri)\n            url_linktext = 'Login'\n\n        template_values = {\n            'greetings': greetings,\n            'url': url,\n            'url_linktext': url_linktext,\n            }\n\n        path = os.path.join(os.path.dirname(__file__), 'index.html')\n        self.response.out.write(template.render(path, template_values))\n\n\nclass Guestbook(webapp.RequestHandler):\n    def post(self):\n        greeting = Greeting()\n\n        if users.get_current_user():\n            greeting.author = users.get_current_user()\n\n        greeting.content = self.request.get('content')\n        greeting.put()\n        self.redirect('/')\n\n\n\n#here i return my json feed - simple implementaion for example\nclass FeedHandler(webapp.RequestHandler):\n\n  def get(self):\n    \"\"\"Retrieve a feed\"\"\"\n    user = None\n\n    greetings_query = Greeting.all().order('-date')\n    rs= greetings_query.fetch(5)\n#this is the part that calls the encoder - dosnt cause an exception\n    data = json.encode(rs)\n\n\n\n#roll out to browser -might need to check my headers etc\n    self.response.headers['Content-Type'] = 'application/json; charset=utf-8'  \n    self.response.out.write(data)\n\n\n\n\napplication = webapp.WSGIApplication(\n                                       [\n                                       ('/', MainPage),\n                                       ('/sign',Guestbook),\n                                       ('/feed',FeedHandler),\n                                       ], debug=True\n                                    )\n\ndef main():\n    run_wsgi_app(application)\n\nif __name__ == \"__main__\":\n    main()\n</code>\n</pre>\n", "senID": 5}, {"text": ["This is the browser response:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["The example provided by Jader Dias works fine for my concern after some twaeking.", "Remove the encode method as it contains a circular reference.", "The adjusted class should look like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import datetime  \nimport time \n\nfrom google.appengine.api import users \nfrom google.appengine.ext import db \nfrom django.utils import simplejson  \n\n\nclass GqlEncoder(simplejson.JSONEncoder): \n\n    \"\"\"Extends JSONEncoder to add support for GQL results and properties. \n\n    Adds support to simplejson JSONEncoders for GQL results and properties by \n    overriding JSONEncoder's default method. \n    \"\"\" \n\n    # TODO Improve coverage for all of App Engine's Property types. \n\n    def default(self, obj): \n\n        \"\"\"Tests the input object, obj, to encode as JSON.\"\"\" \n\n        if hasattr(obj, '__json__'): \n            return getattr(obj, '__json__')() \n\n        if isinstance(obj, db.GqlQuery): \n            return list(obj) \n\n        elif isinstance(obj, db.Model): \n            properties = obj.properties().items() \n            output = {} \n            for field, value in properties: \n                output[field] = getattr(obj, field) \n            return output \n\n        elif isinstance(obj, datetime.datetime): \n            output = {} \n            fields = ['day', 'hour', 'microsecond', 'minute', 'month', 'second', 'year'] \n            methods = ['ctime', 'isocalendar', 'isoformat', 'isoweekday', 'timetuple'] \n            for field in fields: \n                output[field] = getattr(obj, field) \n            for method in methods: \n                output[method] = getattr(obj, method)() \n            output['epoch'] = time.mktime(obj.timetuple()) \n            return output \n\n        elif isinstance(obj, time.struct_time): \n            return list(obj) \n\n        elif isinstance(obj, users.User): \n            output = {} \n            methods = ['nickname', 'email', 'auth_domain'] \n            for method in methods: \n                output[method] = getattr(obj, method)() \n            return output \n\n        return simplejson.JSONEncoder.default(self, obj)\n</code>\n</pre>\n", "senID": 1}, {"text": ["As I've saved this class in a file called utils.py and when appropriate I import it using"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import utils\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then I just call utils.GqlEncoder().encode(results), for example:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n query = User.all()\nresults = query.fetch(10)\n\nself.response.headers['Content-Type'] = \"text/plain\" # Alt. application/json\nself.response.out.write( utils.GqlEncoder().encode(results) )\n</code>\n</pre>\n", "senID": 5}, {"text": ["The result should look something like this (I've added some line feeds in order to make it a bit easier to read):"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n [\n{\"date\": {\"ctime\": \"Tue Feb 23 10:41:21 2010\", \"hour\": 10, \"isoweekday\": 2, \"month\": 2, \n        \"second\": 21, \"microsecond\": 495535, \"isocalendar\": [2010, 8, 2], \"timetuple\": [2010, 2, 23, 10, 41, 21, 1, 54, -1], \n        \"year\": 2010, \"epoch\": 1266921681.0, \"isoformat\": \"2010-02-23T10:41:21.495535\", \"day\": 23, \"minute\": 41}, \n\"claimed_id\": \"https:\\/\\/www.google.com\\/accounts\\/o8\\/id?id=abcdefghijklmnopqrstuvxyz\", \n\"display_name\": \"Alfred E Neumann\", \n\"email\": null, \n\"full_name\": \"Alfred E Neumann\"\n}, \n{\"date\": {\"ctime\": \"Tue Feb 23 11:00:54 2010\", \"hour\": 11, \"isoweekday\": 2, \"month\": 2, \n        \"second\": 54, \"microsecond\": 805261, \"isocalendar\": [2010, 8, 2], \"timetuple\": [2010, 2, 23, 11, 0, 54, 1, 54, -1], \n        \"year\": 2010, \"epoch\": 1266922854.0, \"isoformat\": \"2010-02-23T11:00:54.805261\", \"day\": 23, \"minute\": 0}, \n\"claimed_id\": \"http:\\/\\/openid.domain.net\\/john\", \n\"display_name\": \"\", \n\"email\": \"jp@domain.net\", \n\"full_name\": \"John Parnefjord\"\n}\n]\n</code>\n</pre>\n", "senID": 7}], [{"text": ["json cannot be used to serialize anything more than basic types such as dicts, lists, ints/longs, and strings (this is not comprehensive).", "For example, even these simple commands do not work:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import json\njson.dumps(object())\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to serialize django objects, you should refer to the django documentation on serialization, which will use their own libraries, but they do do support json."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "django documentation on serialization", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/topics/serialization/"}]}], [{"text": ["Since I could not find an appropriate solution I wrote my own, which is not exactly a JSON serializer, but a Javascript serializer"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from google.appengine.ext import db\nfrom google.appengine.api.datastore_types import *\n\ndef dumpStr(obj):\n    return \"'\" + obj + \"'\"\n\ndef dumps(obj):\n    if isinstance(obj, str):\n        return dumpStr(obj)\n    elif obj == None:\n        return None\n    elif isinstance(obj, list):\n        items = [];\n        for item in obj:\n            items.append(dumps(item))\n        return '[' + ','.join(items) + ']'\n    elif isinstance(obj, datetime.datetime):\n        return \"new Date('%s')\" % obj.ctime()\n    properties = [];\n    for property in dir(obj):\n        if property[0] != '_':\n            value = obj.__getattribute__(property)\n            valueClass = str(value.__class__)\n            if not(('function' in valueClass) or ('built' in valueClass) or ('method' in valueClass)):\n                value = dumps(value)\n                if value != None:\n                    properties.append(\"'\" + property + \"':\" + value)\n    if len(properties) == 0:\n        return str(obj)\n    else:\n        return '{' + ','.join(properties) + '}'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I got demented for a few days trying to do this myself - I want to use jqGrid for jQuery, and I seriously need some method of returning GQL results as JSON without hand-cranking them every time.", "However it looks like I'm not the only one on this journey, and the App Engine blog gave me the answer I need: there's a new project called ProtoRPC, which takes a little effort to learn and apply, but since it's intended to become part of the SDK I suggest that it's the way to go.", "It does what I want anyway."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ProtoRPC", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/google-protorpc/wiki/GettingStarted"}]}], [{"text": ["From what i can understand - and i am new to python - with google app engine the work around is to serialize the model object to a dictioanry python object and then use simple json to dump it as a json string - this makes no sense to me - maybe someone has the know to serialise to a ditionary (pickel?", ")\nAny help on this would be HELP!", "not to impressed that google app engine has no inbuilt solution for this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]