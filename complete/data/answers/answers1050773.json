[[{"text": ["The data structure basically seems to be a dict where they keys are strings and the value is either a string or another dict of the same type, so I'd recommend maybe pulling it into that sort of python structure,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["eg:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n {'group1': {'Entry2': {}, 'Entry1': {'Title1':{'Data4': 'Member4',\n'Data1': 'Member1','Data3': 'Member3', 'Data2': 'Member2'}, \n'Title2': {}}}\n</code>\n</pre>\n", "senID": 2}, {"text": ["At the top level of the file you would create a blank dict, and then for each line you read, you use the identifier as a key, and then when you see a { you create the value for that key as a dict.", "When you see Key:Value, then instead of creating that key as a dict, you just insert the value normally.", "When you see a } you have to 'go back up' to the previous dict you were working on and go back to filling that in."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I'd think this whole parser to put the file into a python structure like this could be done in  one fairly short recursive function that just called itself to fill in each sub-dict when it saw a { and then returned to its caller upon seeing }"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Here is a grammar."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dict_content : NAME ':' NAME [ ',' dict_content ]?\n             | NAME '{' [ dict_content ]? '}' [ dict_content ]?\n             | NAME '[' [ list_content ]? ']' [ dict_content ]?\n             ;\n\nlist_content : NAME [ ',' list_content ]?\n             | '{' [ dict_content ]? '}' [ ',' list_content ]?\n             | '[' [ list_content ]? ']' [ ',' list_content ]?\n             ;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Top level is dict_content."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "dict_content", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["I'm a little unsure about the comma after dicts and lists embedded in a list, as you didn't provide any example of that."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If you have the grammar for the structure of your data file, or you can create it yourself, you could use a parser generator for Python, like YAPPS: link text."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "link text", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://theory.stanford.edu/~amitp/yapps/"}]}], [{"text": ["That depends on how the data is structured, and what kind of changes you need to do."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One option might be to parse that into a Python data structure, it seems similar, except that you don't have quotes around the strings.", "That makes complex manipulation easy."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["On the other hand, if all you need to do is make changes that modify some entries to other entries, you can do it with search and replace. "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So you need to understand the issue better before you can know what the best way is."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["This is a pretty similar problem to XML processing, and there's a lot of Python code to do that.", "So if you could somehow convert the file to XML, you could just run it through a parser from the standard library.", "An XML version of your example would be something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &lt;group id=\"Group1\"&gt;  \n    &lt;entry id=\"Entry1\"&gt;\n        &lt;title id=\"Title1\"&gt;&lt;data id=\"Data1\"&gt;Member1&lt;/data&gt; &lt;data id=\"Data2\"&gt;Member2&lt;/data&gt;&lt;/title&gt;\n        &lt;title id=\"Title2\"&gt;&lt;data id=\"Data3\"&gt;Member3&lt;/data&gt; &lt;data id=\"Data4\"&gt;Member4&lt;/data&gt;&lt;/title&gt;\n    &lt;/entry&gt;  \n    &lt;entry id=\"Entry2\"&gt;  \n        ...\n    &lt;/entry&gt;\n&lt;/group&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, converting to XML probably isn't the most straightforward thing to do.", "But your job is pretty similar to what's already been done with the XML parsers, you just have a different syntax to deal with.", "So you could take a look at some XML parsing code and write a little Python parser for your data file based on that.", "(Depending on how the XML parser is implemented, you might even be able to copy the code, just change a few regular expressions, and run it for your file)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I have something similar but written in java.", "It parses a file with the same basic structure with a little different syntax (no '{' and '}' only indentation like in python).", "It is a  very simple script language."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Basically it works like this: It uses a stack to keep track of the inner most block of instructions (or in your case data) and appends every new instruction to the block on the top.", "If it parses an instruction which expects a new block it is pushed to the stack.", "If a block ends it pops one element from the stack."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I do not want to post the entire source because it is big and it is available on google code (lizzard-entertainment, revision 405).", "There is a few things you need to know."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Instruction is an abstract class and it has a block_expected method to indicate wether the concrete instruction needs a block (like loops, etc) In your case this is unnecessary you only need to check for '{'.", "tag": "none", "senID": 3}, {"text": "Block extends Instruction. It contains a list of instructions and has an add method to add more.", "tag": "none", "senID": 4}, {"text": "indent_level return how many spaces are preceding the instruction text. This is also unneccessary with '{}' singns.", "tag": "none", "senID": 5}]}, {"text": ["placeholder"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n BufferedReader input = null;\ntry {\n    input = new BufferedReader(new FileReader(inputFileName));\n    // Stack of instruction blocks\n    Stack&lt;Block&gt; stack = new Stack&lt;Block&gt;();\n    // Push the root block\n    stack.push(this.topLevelBlock);\n    String line = null;\n    Instruction prev = new Noop();\n    while ((line = input.readLine()) != null) {\n        // Difference between the indentation of the previous and this line\n        // You do not need this you will be using {} to specify block boundaries\n        int level = indent_level(line) - stack.size();\n        // Parse the line (returns an instruction object)\n        Instruction inst = Instruction.parse(line.trim().split(\" +\"));\n        // If the previous instruction expects a block (for example repeat)\n        if (prev.block_expected()) {\n            if (level != 1) {\n                // TODO handle error\n                continue;\n            }\n            // Push the previous instruction and add the current instruction\n            stack.push((Block)(prev));\n            stack.peek().add(inst);\n        } else {\n            if (level &gt; 0) {\n                // TODO handle error\n                continue;\n            } else if (level &lt; 0) {\n                // Pop the stack at the end of blocks\n                for (int i = 0; i &lt; -level; ++i)\n                    stack.pop();\n            }\n            stack.peek().add(inst);\n        }\n        prev = inst;\n    }\n} finally {\n    if (input != null)\n        input.close();\n}\n</code>\n</pre>\n", "senID": 7}]]