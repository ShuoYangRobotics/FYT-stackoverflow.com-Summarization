[[{"text": ["Three suggestions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["If you're using Python, you really shouldn't be worrying about this sort of thing in the first place.", "Just build your data structure the way it best suits your needs, not the computer's."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "your", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["This smacks of premature optimization, not performance improvement.", "Profile your code if something is actually bottlenecking, but until then, just let Python do what it does and focus on the actual programming task, and not the underlying mechanics."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["\"Simple\" is generally better than \"clever\", especially if you have no tested reason to go beyond \"simple\".", "And anyway \"Memory efficient\" is an ambiguous term, and there are tradeoffs, when you consider persisting, serializing, cacheing, swapping, and a whole bunch of other stuff that someone else has already thought through so that in most cases you don't need to."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Think \"Simplest way to handle it properly\" optimize much later."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Premature optimization bla bla, don't do it bla bla."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I think you're mistaken about the power of two extra allocation does.", "I think its just a multiplier of two.", "x*2, not x^2."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "power", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "multiplier", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["I've seen this question a few times on various python mailing lists."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["With regards to memory, here's a paraphrased version of one such discussion (the post in question wanted to store hundreds of millions integers):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["So, the fewer objects you have, the less memory you're going to be using, and the fewer lookups you're going to do (since you'll have to lookup in the index, then a second lookup in the actual value)."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Like others, said, profile to see your bottlenecks.", "Keeping an membership set() and value dict() might be faster, but you'll be using more memory."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["I'd also suggest reposting this to a python specific list, such as comp.lang.python, which is full of much more knowledgeable people than myself who would give you all sorts of useful information."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["If your dictionary is so big that it does not fit into memory, you might want to have a look at ZODB, a very mature object database for Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ZODB", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.ibm.com/developerworks/aix/library/au-zodb/"}]}, {"text": ["The 'root' of the db has the same interface as a dictionary, and you don't need to load the whole data structure into memory at once e.g.", "you can iterate over only a portion of the structure by providing start and end keys."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It also provides transactions and versioning."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Often times, dictionaries of dictionaries are useful for other than performance reasons.", "ie, they allow you to store context information about the data without having extra fields on the objects themselves, and make querying subsets of the data faster."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In terms of memory usage, it would stand to reason that one large dictionary will use less ram than multiple smaller ones.", "Remember, if you're nesting dictionaries, each additional layer of nesting will roughly double the number of dictionaries you need to allocate."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In terms of query speed, multiple dicts will take longer due to the increased number of lookups required."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So I think the only way to answer this question is for you to profile your own code.", "However, my suggestion is to use the method that makes your code the cleanest and easiest to maintain.", "Of all the features of Python, dictionaries are probably the most heavily tweaked for optimal performance."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Honestly, you won't be able to tell the difference either way, in terms of either performance or memory usage.", "Unless you're dealing with tens of millions of items or more, the performance or memory impact is just noise."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["From the way you worded your second sentence, it sounds like the one big dictionary is your first inclination, and matches more closely with the problem you're trying to solve.", "If that's true, go with that.", "What you'll find about Python is that the solutions that everyone considers 'right' nearly always turn out to be those that are as clear and simple as possible."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]