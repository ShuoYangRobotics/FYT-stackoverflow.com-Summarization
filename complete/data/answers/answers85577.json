[[{"text": ["You need ARP.", "Python's standard library doesn't include any code for that, so you either need to call an external program (your OS may have an 'arp' utility) or you need to build the packets yourself (possibly with a tool like Scapy."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "ARP", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Address_Resolution_Protocol"}, {"text": "Scapy", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.secdev.org/projects/scapy/"}]}], [{"text": ["This article, \"Send hand-crafted Ethernet Frames in Python (ARP for example)\", seems to be exactly what you are looking for."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "This article", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.larsen-b.com/Article/206.html"}]}], [{"text": ["If you want a pure Python solution, you can take a look at Scapy to craft packets (you need to send ARP request, and inspect replies).", "Or if you don't mind invoking external program, you can use arping (on Un*x systems, I don't know of a Windows equivalent)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Scapy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.secdev.org/projects/scapy/"}, {"text": "arping", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I don't think there is a built in way to get it from Python itself.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["My question is, how are you getting the IP information from your network?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["To get it from your local machine you could parse ifconfig (unix) or ipconfig (windows) with little difficulty."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Depends on your platform.", "If you're using *nix, you can use the 'arp' command to look up the mac address for a given IP (assuming IPv4) address.", "If that doesn't work, you could ping the address and then look, or if you have access to the raw network (using BPF or some other mechanism), you could send your own ARP packets (but that is probably overkill)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It seems that there is not a native way of doing this with Python.", "Your best bet would be to parse the output of \"ipconfig /all\" on Windows, or \"ifconfig\" on Linux.", "Consider using os.popen() with some regexps."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You would want to parse the output of 'arp', but the kernel ARP cache will only contain those IP address(es) if those hosts have communicated with the host where the Python script is running."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["ifconfig can be used to display the MAC addresses of local interfaces, but not those on the LAN."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Mark Pilgrim describes how to do this on Windows for the current machine with the Netbios module here.", "You can get the Netbios module as part of the Win32 package available at python.org.", "Unfortunately at the moment I cannot find the docs on the module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groups.google.com/group/comp.lang.python/msg/fd2e7437d72c1c21"}]}], [{"text": ["as python was not meant to deal with OS-specific issues (it's supposed to be interpreted and cross platform), I would execute an external command to do so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["in unix the command is ifconfig"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "ifconfig", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["if you execute it as a pipe you get the desired result:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import os;\nmyPipe=os.popen2(\"/sbin/ifconfig\",\"a\");\nprint(myPipe[1].read());\n</code>\n</pre>\n", "senID": 3}]]