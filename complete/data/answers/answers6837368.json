[[{"text": ["Why not just use json.load() if the data is json?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import json\nd = json.load(open('myfile.txt', 'r'))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Where did that structure come from?", "My condolences.", "Anyway, as a start you might try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n cleanedData = re.sub('[\\n\\t]', '', f.read())\n</code>\n</pre>\n", "senID": 1}, {"text": ["That's a brute-force removal of newline and tab characters.", "What it returns might be suitable for feeding into json.loads.", "It'll depend greatly on whether or not the contents of the file are actually valid JSON once you clear out the extra white space and line breaks."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "might", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "json.loads", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["If you want to loop over each line, you can just:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for line in open('path/to/file.txt'):\n  # Remove whitespace from both ends of line\n  line = line.strip()\n\n  # Do whatever you want with line\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A little hack, inefficient I guess:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f = open(\"/path/to/file.txt\")\nlines = f.read().replace(\"\\n\", \"\").replace(\"\\t\", \"\").replace(\" \", \"\")\n\nprint lines\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What about the usage of the json module?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import json\n\ntmp = json.loads(open(\"/path/to/file.txt\", \"r\"))\n\noutput = open(\"/path/to/file2.txt\", \"w\")\noutput.write(json.dumps(tmp, sort_keys=True, indent=4))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n $ cat foo.json | python -mjson.tool\nExpecting property name: line 11 column 41\n</code>\n</pre>\n", "senID": 0}, {"text": ["The comma in \"type\" : \"String\", is causing the JSON decoder to choke.", "If it wasn't for that problem, you could use json.load() to load the file directly."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "\"type\" : \"String\",", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "json.load()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["In other words, you have malformed JSON, meaning you'll need to perform a replacement operation before feeding it to json.loads().", "Since you'll need to read the file into a string completely to do the replacement operation anyway, use json.loads(jsonstr) instead of json.load(jsonfilep):"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "json.loads()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "json.loads(jsonstr)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "json.load(jsonfilep)", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import json, re\n    &gt;&gt;&gt; jsonfilep = open('foo.json')\n    &gt;&gt;&gt; jsonstr = re.sub(r'''([\"'0-9.]\\s*),\\s*}''', r'\\1}', jsonfilep.read())\n    &gt;&gt;&gt; jsonobj = json.loads(jsonstr)\n    &gt;&gt;&gt; jsonstr = json.dumps(jsonobj)\n    &gt;&gt;&gt; print(jsonstr)\n    {\"foo\": [{\"blah\": \"blah blah\", \"id2\": \"5885221122\", \"bar\": [{\"info\":\n    [{\"type\": \"String\", \"custid\": \"SSN\"}], \"name\": \"Joe JJ\"}], \"id1\": \"1\"}]}\n</code>\n</pre>\n", "senID": 3}, {"text": ["I only used the re module because it could happen for any value, number or string."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]