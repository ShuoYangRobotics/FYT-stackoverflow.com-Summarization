[[{"text": ["Hey thanks vikingosegundo! "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I like using decorators too :-).", "But in the meanwhile I've been following the approach suggested by the snippet I was mentioning above.", "Only thing, use instead the snippet n. 942 cause it's an improved version of the original one.", "Here's how it works:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "the snippet n. 942", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.djangosnippets.org/snippets/942/"}]}, {"text": ["Imagine you have a template (e.g., 'subtemplate.html') of whatever size that contains a useful block you can reuse:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ........\n\t&lt;div id=\"results\"&gt;\t\t\t\n\t\t{% block results %}\n\t\t\t{% for el in items %}\n\t\t           &lt;li&gt;{{el|capfirst}}&lt;/li&gt;\n\t\t\t{% endfor %}\n\t\t{% endblock %}\t\t\n\t&lt;/div&gt;&lt;br /&gt;\n     ........\n</code>\n</pre>\n", "senID": 3}, {"text": ["By importing in your view file the snippet above you can easily reference to any block in your templates.", "A cool feature is that the inheritance relations among templates are taken into consideration, so if you reference to a block that includes another block and so on, everything should work just fine.", "So, the ajax-view looks like this: "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from django.template import loader\n# downloaded from djangosnippets.com[942]\nfrom my_project.snippets.template import render_block_to_string\n\ndef ajax_view(request):\n    # some random context\n    context = Context({'items': range(100)})\n    # passing the template_name + block_name + context\n    return_str = render_block_to_string('standard/subtemplate.html', 'results', context)\n    return HttpResponse(return_str)\n</code>\n</pre>\n", "senID": 5}], [{"text": ["There's no reason you can't return a rendered bit of HTML using Ajax, and insert that into the existing page at the point you want.", "Obviously you can use Django's templates to render this HTML, if you want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Here is how I use the same template for traditional rendering and Ajax-response rendering."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Template:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &lt;div  id=\"sortable\"&gt;\n\n{% include \"admin/app/model/subtemplate.html\" %}\n&lt;/div&gt;\n</code>\n</pre>\n", "senID": 2}, {"text": ["Included template (aka: subtemplate):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &lt;div id=\"results_listing\"&gt;\n{% if results %}\n    {% for c in results %}\n        .....\n    {% endfor %}\n{% else %}\n</code>\n</pre>\n", "senID": 4}, {"text": ["The Ajax-view:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n @login_required\n@render_to('admin/app/model/subtemplate.html')#annoying-decorator\ndef ajax_view(request):\n    .....\n\n    return { \n        \"results\":Model.objects.all(),\n    }\n</code>\n</pre>\n", "senID": 6}, {"text": ["Of course you can use render_to_response.", "But I like those annoying decorators :D"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["When you are doing Ajax I don't think you have any use for templates.", "Template is there so that you can generate dynamic HTML on the server side easily and hence it provides few programming hooks inside HTML."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In case of Ajax you are passing JSON data and you can format it as you want in Python.", "and HTML/document elements will be generated on client side using the JSON by some JavaScript library e.g.", "jQuery on client side."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Maybe if you have a very specific case of replacing some inner HTML from server side HTML then maybe you can use templates but in that case why you would need JSON?", "You can just query the HTML page via Ajax and change inner or outer or whatever HTML."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["While templates are indeed just for presentation purposes, it shouldn't matter if you are doing it on the serverside or client side.", "It all comes down to separating the control logic that is performing an action, from the view logic that is just responsible for creating the markup.", "If your javascript control logic is having to handle how you are rendering or displaying the HTML, then you might be doing it wrong, but if you isolate that rendering logic to another object or function, and just passing it the data necessary for the render, then you should be fine; it mirrors how we separate our controllers, models and views on the server side. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Take a look at the github project: http://github.com/comolongo/Yz-Javascript-Django-Template-Compiler"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://github.com/comolongo/Yz-Javascript-Django-Template-Compiler", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://github.com/comolongo/Yz-Javascript-Django-Template-Compiler"}]}, {"text": ["It compiles django templates into optimized javascript functions that will generate your presentation html with data that you pass it.", "The compiled functions are in pure javascript, so there are no dependencies on other libraries.", "Since the templates are compiled instead of being parsed at runtime, the strings and variables are all already placed into javascript strings that just need to be concatenated, so you get a huge speed increase compared to techniques that require you to do dom manipulation or script parsing to get the final presentation.", "Right now only the basic tags and filters are there, but should be enough for most things, and more tags will be added as people start making requests for them or start contributing to the project. "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "huge", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}], [{"text": ["Templates are for the purpose of presentation.", "Responding with data in format X (JSON, JSONP, XML, YAML, *ml, etc.", ") is not presentation, so you don't need templates.", "Just serialize your data into format X and return it in an HttpResponse."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "presentation", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "JSONP", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/JSON#JSONP"}, {"text": "YAML", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/YAML"}]}], [{"text": ["Unfortunately, Django templates are designed to be executed server side only.", "There is at least one project to render Django templates using Javascript, but I haven't used it and so I don't know how fast, well supported or up to date it is.", "Other than this, you have to either use the Django templates on the server or generate dynamic elements on the client without using templates."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "at least one project to render", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://ajaxian.com/archives/django-template-language-in-javascript"}]}], [{"text": ["you can use jquery.load() or similar to good effect, generating the html on the server and loading it into the dom with js.", "I think someone has called this AJAH."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]