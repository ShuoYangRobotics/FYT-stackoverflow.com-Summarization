[[{"text": ["This question has been asked in several forms over the last few days, so I'm going to say this very clearly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Use BeautifulSoup, html5lib or lxml.html.", "Please."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}, {"text": "html5lib", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/html5lib/"}, {"text": "lxml.html", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/lxmlhtml.html"}]}], [{"text": ["Parsing things with regular expressions works for regular languages.", "HTML is not a regular language, and the stuff you find on web pages these days is absolute crap.", "BeautifulSoup deals with tag-soup HTML with browser-like heuristics so you get parsed HTML that resembles what a browser would display."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}, {"text": ["The downside is it's not very fast.", "There's lxml for parsing well-formed html, but you should really use BeautifulSoup if you're not 100% certain that your input will always be well-formed."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "lxml", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/"}]}], [{"text": ["Please, don't manually parse html in python!", "There are many better options available; I'd recommend the wonderful BeautifulSoup"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}], [{"text": ["Because of the braces around the anchor tag, that part is interpreted as a capture group.", "This causes only the capture group to be returned, and not the whole regex match."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Put the entire regex in braces and you'll see the right matches showing up as the first element in the returned tuples."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["But indeed, you should use a real parser."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Building on the answers so far:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's best to use a parsing engine.", "It can cover a lot of cases and in an elegant way.", "I've tried BeautifulSoup and I like it very much.", "Also easy to use, with a great tutorial."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "BeautifulSoup", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://www.crummy.com/software/BeautifulSoup/"}]}, {"text": ["If sometimes it feels like shooting flies with a cannon you can use a regular expression for quick parsing.", "If that's what you need here is the modified code that will catch all the headers (even those over multiple lines):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n p = re.compile(r'&lt;(h[0-9])&gt;(.+?)&lt;/\\1&gt;', re.IGNORECASE | re.DOTALL)\nstories = re.findall(p, html)\nfor i in stories:\n\tprint i\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I have used beautifulsoup to parse your desired HTML.", "I have the above HTML code in\na file called foo.html and later read as a file object."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from BeautifulSoup import BeautifulSoup\n\n\nH_TAGS = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']\n\ndef extract_data():\n   \"\"\"Extract the data from all headers\n   in a HTML page.\"\"\"\n   f = open('foo.html', 'r+')\n   html = f.read()\n   soup = BeautifulSoup(html)\n   headers = [soup.findAll(h) for h in H_TAGS if soup.findAll(h)]\n   lst = []\n   for x in headers:\n      for y in x:\n         if y.string:\n            lst.append(y.string)\n         else:\n            lst.append(y.contents[0].string)\n   return lst\n</code>\n</pre>\n", "senID": 1}, {"text": ["The above function returns:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [u'Dog ', u'Tall cup of lemons', u'Dog thing', u'Cat ', u'Fancy ']\n</code>\n</pre>\n", "senID": 3}, {"text": ["You can add any number of header tags in h_tags list.", "I have assumed all the headers.", "If you can solve things easily using BeautifulSoup then its better to use it.", ":)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["As has been mentioned, you should use a parser instead of a regex."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is how you could do it with a regex though:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import re\n\nhtml = '''\n&lt;body&gt;\n\n&lt;h1&gt;Dog &lt;/h1&gt;\n&lt;h2&gt;Cat &lt;/h2&gt;\n&lt;h3&gt;Fancy &lt;/h3&gt;\n&lt;h1&gt;Tall cup of lemons&lt;/h1&gt;\n&lt;h1&gt;&lt;a href=\"dog.com\"&gt;Dog thing&lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n'''\n\np = re.compile(r'''\n    &lt;(?P&lt;header&gt;h[0-9])&gt;             # store header tag for later use\n    \\s*                              # zero or more whitespace\n    (&lt;a\\shref=\"(?P&lt;href&gt;.*?)\"&gt;)?     # optional link tag. store href portion\n    \\s*\n    (?P&lt;title&gt;.*?)                   # title\n    \\s*\n    (&lt;/a&gt;)?                          # optional closing link tag\n    \\s*\n    &lt;/(?P=header)&gt;                   # must match opening header tag\n''', re.IGNORECASE + re.VERBOSE)\n\nstories = p.finditer(html)\n\nfor match in stories:\n    print '%(title)s [%(href)s]' % match.groupdict()\n</code>\n</pre>\n", "senID": 2}, {"text": ["Here are a couple of good regular expression resources:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Python Regular Expression HOWTO"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": ["Regular-Expressions.info"], "childNum": 0, "tag": "a", "senID": 5, "childList": []}]}]]