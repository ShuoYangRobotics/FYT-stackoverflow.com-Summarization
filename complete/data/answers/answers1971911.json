[[{"text": ["Strings are immutable in python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "immutable", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["So text.replace returns a string, but doesn't change its original string."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "text.replace", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "returns", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Given that, you shouldn't actually use text.replace, since you would have to change the string 24 (or probably 26; see below) times.", "Rather, you can actually create a translation table to do all the changes at once, and use string.translate."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "text.replace", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "string.translate", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["To do that, you should first use string.maketrans to convert from the letters to the second letter following (and what do you want to do with 'y' and 'z'?", "I expect they should probably become 'a' and 'b').", "That will give you a translation table over all possible characters for translate."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "string.maketrans", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "translate", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["Your first error is that strings are immutable so your replace isn't doing anything.", "To replace characters in a string you have to reassign:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n text = text.replace(a, b)\n</code>\n</pre>\n", "senID": 1}, {"text": ["But this is a very inefficient way to do it anyway as you are creating many temporary strings which will just be discarded again shortly afterwards.", "You should try to iterate over the string handling one character at a time and the join the result."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "join", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#str.join"}]}, {"text": ["I won't give away the full solution so that you can have another go."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Ok, I incorporated the suggestions, but this is still not quite there yet ..."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Ok, I incorporated the suggestions, but this is still not quite there yet ...", "childNum": 1, "tag": "em", "pos": 0, "childList": [{"text": "Ok, I incorporated the suggestions, but this is still not quite there yet ...", "tag": "strong"}]}, {"text": "Ok, I incorporated the suggestions, but this is still not quite there yet ...", "childNum": 0, "tag": "strong", "childList": []}]}, {"code": "<pre>\n<code>\n text = \"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. \"\nconvert = lambda t: chr(ord('a') + (ord(t) - ord('a')) % 26)\ntxt_mod = ''.join(convert(chr(ord(t) + 2) if 'a' &lt;= t &lt;= 'z' else t) for t in text)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This should do what you want:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; rot = lambda xs: (xs + [xs[0]])[1:]\n&gt;&gt;&gt; apply = lambda n,f,x: (n == 0) and x or f(apply(n-1,f,x))\n&gt;&gt;&gt; abc = map(chr,range(ord('a'),ord('z')+1))\n&gt;&gt;&gt; d = dict(zip(list(abc),apply(2,rot,(list(abc)))))\n&gt;&gt;&gt; s = \"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. \"\n&gt;&gt;&gt; reduce(lambda a,b:a+b,map(lambda c: d.get(c,' '),list(s)),\"\")\n'i hope you didnt translate it by hand  thats what computers are for  doing it in by hand is inefficient and that s why this text is so long  using string maketrans   is recommended  now apply on the url  '\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Solution closest to yours is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n letters = string.ascii_lowercase\nuletters = string.ascii_uppercase\ntext=(\"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. \")\nfor x in range(0,26):\n    text=text.replace(letters[x-2],uletters[x])\nprint(text.lower())\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n import string    \n\ns = \"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj. \"    \ntrans = string.maketrans('abcdefghijklmnopqrstuvwxyz', 'cdefghijklmnopqrstuvwxyzab')\nstring.translate(s, trans)\n</code>\n</pre>\n", "senID": 0}], [{"text": ["aren't you forgetting forgetting base cases?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["problems that I see are:\n1)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n for x in range(1,24):\n</code>\n</pre>\n", "senID": 2}, {"text": ["-- shouldn't that be your string length?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["2)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n text.replace(letters[x],letters[x+2])\n</code>\n</pre>\n", "senID": 5}, {"text": ["what happens when x == 23?", "I suggest using ((x+2) % len(letters)) or something like that."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["also, are you sure that text is being updated?", "I know python treats strings as arrays, but does that mean that the letters are updated everytime you do replace?"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["try:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n text = text.replace(letters[x],letters[x+2])\n</code>\n</pre>\n", "senID": 9}], [{"text": ["I finished it by a common way.", "Here is my code.", "I didn't use string.translate and I have tried @mangobug's code.", "I don't know why, but it doesn't work."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "didn't use string.translate", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n import string\ndef puzzle(x):\n    y=\" \"\n    for i in x:\n        if ord(\"a\")&lt;= ord(i)&lt;=ord(\"x\"):\n            n=ord(i)+2\n        elif ord(i)==ord(\"y\"):\n            n=ord(\"a\")\n        elif ord(i)==ord(\"z\"):\n            n=ord(\"b\")\n        else:\n            n=ord(i)\n        y=y+chr(n)\n    return y\n\nx=\"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\"\ny=puzzle(x)\nprint y\n</code>\n</pre>\n", "senID": 1}]]