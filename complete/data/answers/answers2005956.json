[[{"text": ["You are basically creating a closure."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "closure", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Closure%5F%28computer%5Fscience%29"}]}, {"text": ["Related reading: http://stackoverflow.com/questions/1305570/closures-why-are-they-so-useful"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://stackoverflow.com/questions/1305570/closures-why-are-they-so-useful", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1305570/closures-why-are-they-so-useful"}]}, {"text": ["From http://docs.python.org/reference/compound_stmts.html:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/reference/compound_stmts.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/compound_stmts.html"}]}], [{"text": ["That is what's called \"closure\".", "Simply put, for most if not all programming languages that treat functions as first-class object, any variables that are used within a function object are enclosed (i.e.", "remembered) so long as the function is still alive.", "It is a powerful concept if you know how to make use of it."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "closure", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Closure_%28computer_science%29"}, {"text": "first-class object", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/First_class_object"}]}, {"text": ["In your example, the nested action function uses variable n so it forms a closure around that variable and remembers it for later function calls."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "action", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "n", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["You can see it as all the variables originating in the parent function being replaced by their actual value inside the child function.", "This way, there is no need to keep track of the scope of the parent function to make the child function run correctly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["See it as \"dynamically creating a function\"."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def maker(n):\n  def action(x):\n    return x ** n\n  return action\n\nf = maker(2)\n--&gt; def action(x):\n--&gt;   return x ** 2\n</code>\n</pre>\n", "senID": 2}, {"text": ["This is basic behavior in python, it does the same with multiple assignments."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a = 1\nb = 2\na, b = b, a\n</code>\n</pre>\n", "senID": 4}, {"text": ["Python reads this as"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n a, b = 2, 1\n</code>\n</pre>\n", "senID": 6}, {"text": ["It basically inserts the values before doing anything with them."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["You are defining TWO functions.", "When you call "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n f = maker(2)\n</code>\n</pre>\n", "senID": 1}, {"text": ["you're defining a function that returns twice the number, so"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n f(2) --&gt; 4\nf(3) --&gt; 6\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then, you define ANOTHER DIFFERENT FUNCTION"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n g = maker(3)\n</code>\n</pre>\n", "senID": 5}, {"text": ["that return three times the number"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n g(3) ---&gt; 9\n</code>\n</pre>\n", "senID": 7}, {"text": ["But they are TWO different functions, it's not the same function referenced, each one it's a independent one.", "Even in the scope inside the function 'maker' are called the same, is't not the same function, each time you call maker() you're defining a different function.", "It's like a local variable, each time you call the function takes the same name, but can contain different values.", "In this case, the variable 'action' contains a function (which can be different)"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "maker()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Because at the time when you create the function, n was 2, so your function is:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "2", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def action(x):\n    return x ** 2\n</code>\n</pre>\n", "senID": 1}, {"text": ["When you call f(3), x is set to 3, so your function will return 3 ** 2"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "3", "childNum": 0, "tag": "code", "childList": []}, {"text": "3 ** 2", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["People answered correctly about the closure, that is: the valid value for \"n\" inside action is the last value it had whenever \"maker\" was called."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["One ease way to overcome this is to make your freevar (n) a variable inside the \"action\" function, which receives a copy of \"n\" in the moment it is run:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The easiest way to do this is to set \"n\"  as a parameter whose default value is \"n\" at themomentof creation.", "This value for \"n\" stays fixed because default parameters for a function are stored in a tuple which is an attribute of the function itself (action.func_defaults in this case):"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def maker(n):\n    def action(x):\n        return x ** n\n    return action\n</code>\n</pre>\n", "senID": 3}], [{"text": ["When you create a function with the def keyword, you are doing exactly that: you are creating a new function object and assigning it to a variable.", "In the code you gave you are assigning that new function object to a local variable called action."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["WHen you call it a second time you are creating a second function object.", "So f points to the first function object (square-the-value) and g points to the second function object (cube-the-value).", "When Python sees \"f(3)\" it takes it to means \"execute the function object pointed to be variable f and pass it the value 3\".", "f and g and different function objects and so return different values."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]