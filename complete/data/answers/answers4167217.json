[[{"text": ["Simplest way would be to do what you posted in a comment -- iterate through the input list to find digits evenly divisible by 2, and add them to the return list if so."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The list.append(x) function will help you add an item to a list."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "list.append(x)", "tag": "a", "pos": 0, "childList": [{"text": "list.append(x)", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/tutorial/datastructures.html"}, {"text": "list.append(x)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Also as mentioned, look at using the modulo operation to determine if a number is divisible by 2..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "modulo", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/reference/expressions.html#binary-arithmetic-operations"}]}], [{"text": ["\"By hand\":"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def even_only(lst):\n    evens = []\n    for number in lst:\n        if is_even(number):\n            evens.append(number)\n    return evens\n</code>\n</pre>\n", "senID": 1}, {"text": ["Pythonic:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def even_only(iter):\n    return [x for x in iter if is_even(x)]\n</code>\n</pre>\n", "senID": 3}, {"text": ["Since it's homework, you can fill in the is_even function."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "is_even", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The best way to do this (as a beginner) is probably a comprehension list.", "Since this is a homework, I won't do it for you, but here is the syntax :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [x for x in your_list if (your condition)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["You just have to replace (your condition) with what fits well (basically, exactly what you described)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["P.S.", "I know some people may say comprehension lists are a bit advanced for a beginner, but I think it is not a concept too hard to catch and extremely useful."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; even_only = lambda seq : [ x for x in seq if str(x)[-1] in \"02468\" ]\n&gt;&gt;&gt; even_only([1, 3, 6, 10, 15, 21, 28])\n[6, 10, 28]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Use the filter function to do this in a functional way:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "filter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; even_filter = lambda x: not x % 2\n&gt;&gt;&gt; result = filter(even_filter, [0, 1, 2, 3, 4])\n&gt;&gt;&gt; assert result == [0, 2, 4]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: updated with the correct parity of zero per Vincent's comment."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [1, 3, 6, 10, 15, 21, 28]\n&gt;&gt;&gt; b = [i for i in a if i%2 ==0 ]\n&gt;&gt;&gt; b\n[6, 10, 28]\n&gt;&gt;&gt; a\n[1, 3, 6, 10, 15, 21, 28]\n</code>\n</pre>\n", "senID": 0}]]