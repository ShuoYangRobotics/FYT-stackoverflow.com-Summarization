[[{"text": ["How about (in pseudo code):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n weekday[] = {\"Mon\" .. \"Sun\"}\nfor(i = wkday_start; (i % 7) != wkday_end; i = (i+1) % 7)\n    printf(\"%s \", weekday[i]);\n</code>\n</pre>\n", "senID": 1}, {"text": ["It works like a circular buffer, wkday_start being the index to start at (0-based), wkday_end being the end index."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Hope this helps"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["George."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; def weekdays_between(s, e):\n...     return [n % 7 for n in range(s, e + (1 if e &gt; s else 8))]\n... \n&gt;&gt;&gt; weekdays_between(2, 4)\n[2, 3, 4]\n&gt;&gt;&gt; weekdays_between(5, 1)\n[5, 6, 0, 1]\n</code>\n</pre>\n", "senID": 0}, {"text": ["It's a bit more complex if you have to convert from/to actual days."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; days = 'Mon Tue Wed Thu Fri Sat Sun'.split()\n&gt;&gt;&gt; days_1 = {d: n for n, d in enumerate(days)}\n&gt;&gt;&gt; def weekdays_between(s, e): \n...     s, e = days_1[s], days_1[e]\n...     return [days[n % 7] for n in range(s, e + (1 if e &gt; s else 8))]\n... \n&gt;&gt;&gt; weekdays_between('Wed', 'Fri')\n['Wed', 'Thu', 'Fri']\n&gt;&gt;&gt; weekdays_between('Sat', 'Tue')\n['Sat', 'Sun', 'Mon', 'Tue']\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Building on the excellent answer from Stephan202, you can generalize the concept of a circular slice."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "excellent answer from Stephan202", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/1577538/how-can-i-get-all-days-between-two-days/1577626#1577626"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def circular_slice(r, s, e):\n... return [r[n % len(r)] for n in range(s, e + (1 if e&gt;s else len(r)+1))]\n...\n&gt;&gt;&gt; circular_slice(range(0,7), 2, 4)\n[2, 3, 4]\n&gt;&gt;&gt; circular_slice(range(0,7), 5, 1)\n[5, 6, 0, 1]\n&gt;&gt;&gt; circular_slice('Mon Tue Wed Thu Fri Sat Sun'.split(), 5, 1)\n['Sat', 'Sun', 'Mon', 'Tue']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The solutions provided already answer the question, but I want to suggest something extra.", "I don't know what you're doing, but maybe you want the actual dates instead?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from datetime import timedelta, date\n&gt;&gt;&gt; from dateutil.rrule import rrule, DAILY\n&gt;&gt;&gt; today = date(2009, 10, 13) # A tuesday\n&gt;&gt;&gt; week = today - timedelta(days=6)\n&gt;&gt;&gt; list(rrule(DAILY, byweekday=xrange(5), dtstart=week, until=today))\n[datetime.datetime(2009, 10, 7, 0, 0),\n datetime.datetime(2009, 10, 8, 0, 0),\n datetime.datetime(2009, 10, 9, 0, 0),\n datetime.datetime(2009, 10, 12, 0, 0),\n datetime.datetime(2009, 10, 13, 0, 0)]\n</code>\n</pre>\n", "senID": 1}, {"text": ["That uses the excellent python-dateutil module."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "python-dateutil", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://labix.org/python-dateutil"}]}], [{"text": ["Use the calendar module for your list of day names:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import calendar\n\ndef intervening_days(day1, day2):\n    weektest = list(calendar.day_name)*2\n    d1 = weektest.index(day1)\n    d2 = weektest.index(day2,d1+1)\n    return weektest[d1:d2+1]\n\nprint intervening_days(\"Monday\",\"Sunday\")\nprint intervening_days(\"Monday\",\"Tuesday\")\nprint intervening_days(\"Thursday\",\"Tuesday\")\nprint intervening_days(\"Monday\",\"Monday\")\n</code>\n</pre>\n", "senID": 1}, {"text": ["Prints:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n['Monday', 'Tuesday']\n['Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday']\n['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday']\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you don't want Monday-to-Monday to return a full week of days, change the determination of d2 to d2 = weektest.index(day2,d1)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "d2 = weektest.index(day2,d1)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["You asked for an algorithm, and I understand that should be language independent; however, following code works using C# and LINQ expressions:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n DayOfWeek start = DayOfWeek.Wednesday;\nDayOfWeek end = DayOfWeek.Friday;\n\nIEnumerable&lt;DayOfWeek&gt; interval = \n    Enum.GetValues(typeof(DayOfWeek)).OfType&lt;DayOfWeek&gt;()\n        .Where(d =&gt; d &gt;= start &amp;&amp; d &lt;= end);\n\nConsole.WriteLine(\n    String.Join(\", \", \n        interval.Select(d =&gt; d.ToString()).ToArray()));\n</code>\n</pre>\n", "senID": 1}, {"text": ["Probably, using any language, your should attribute values to each day (Sunday=0 and so on) and look for all values which matches your desired interval."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Sunday=0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The following code returns 1 for Monday - Monday."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n bool isWeekday(int d) {\n    return d &gt;= 1 &amp;&amp; d &lt;= 5;\n}\n\nint f(int d1, int d2) {\n    int res = isWeekday(d1) ? 1 : 0;\n    return d1 == d2 ?\n           res :\n           res + f(d1 % 7 + 1, d2);\n}\n</code>\n</pre>\n", "senID": 1}]]