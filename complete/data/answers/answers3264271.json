[[{"text": ["Generator version:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from string import ascii_lowercase\nfrom itertools import product\n\ndef letterrange(last):\n    for k in range(len(last)):\n        for x in product(ascii_lowercase, repeat=k+1):\n            result = ''.join(x)\n            yield result\n            if result == last:\n                return\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Use the product call in itertools, and ascii_letters from string."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from string import ascii_letters\nfrom itertools import product\n\nif __name__ == '__main__':\n    values = []\n    for i in xrange(1, 4):\n        values += [''.join(x) for x in product(ascii_letters[:26], repeat=i)]\n\n    print values\n</code>\n</pre>\n", "senID": 1}], [{"text": ["A suggestion purely based on iterators:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import string\nimport itertools\n\ndef string_range(letters=string.ascii_lowercase, start=\"a\", end=\"z\"):\n    return itertools.takewhile(end.__ne__, itertools.dropwhile(start.__ne__, (x for i in itertools.count(1) for x in itertools.imap(\"\".join, itertools.product(letters, repeat=i)))))\n\nprint list(string_range(end=\"azc\"))\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Here's a better way to do it, though you need a conversion function:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for i in xrange(int('a', 36), int('azd', 36)):\n    if base36encode(i).isalpha():\n        print base36encode(i, lower=True)\n</code>\n</pre>\n", "senID": 1}, {"text": ["And here's your function (thank you Wikipedia):"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Wikipedia", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Base_36"}]}, {"code": "<pre>\n<code>\n def base36encode(number, alphabet='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', lower=False):\n    '''\n    Convert positive integer to a base36 string.\n    '''\n    if lower:\n        alphabet = alphabet.lower()\n    if not isinstance(number, (int, long)):\n        raise TypeError('number must be an integer')\n    if number &lt; 0:\n        raise ValueError('number must be positive')\n\n    # Special case for small numbers\n    if number &lt; 36:\n        return alphabet[number]\n\n    base36 = ''\n    while number != 0:\n        number, i = divmod(number, 36)\n        base36 = alphabet[i] + base36\n\n    return base36\n</code>\n</pre>\n", "senID": 3}, {"text": ["I tacked on the lowercase conversion option, just in case you wanted that."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I generalized the accepted answer to be able to start middle and to use other than lowercase:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from string import ascii_lowercase, ascii_uppercase\nfrom itertools import product\n\ndef letter_range(first, last, letters=ascii_lowercase):\n    for k in range(len(first), len(last)):\n        for x in product(letters, repeat=k+1):\n            result = ''.join(x)\n            if len(x) != len(first) or result &gt;= first:\n                yield result\n                if result == last:\n                    return\nprint list(letter_range('a', 'zzz'))\nprint list(letter_range('BA', 'DZA', ascii_uppercase))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def strrange(end):\n    values = []\n    for i in range(1, len(end) + 1):\n        values += [''.join(x) for x in product(ascii_lowercase, repeat=i)]\n    return values[:values.index(end) + 1]\n</code>\n</pre>\n", "senID": 0}]]