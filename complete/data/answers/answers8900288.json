[[{"text": ["Use Numpy."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Numpy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://numpy.scipy.org/"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; \n&gt;&gt;&gt; a = np.array([[1,2,3],[4,5,6]])\n&gt;&gt;&gt; a[:, 2]\narray([3, 6])\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you come from Matlab, this should be of interest: http://www.scipy.org/NumPy_for_Matlab_Users"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://www.scipy.org/NumPy_for_Matlab_Users", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.scipy.org/NumPy_for_Matlab_Users"}]}], [{"text": ["If you use Matlab, you probably will want to install NumPy:\nUsing NumPy, you can do this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "NumPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com/url?sa=t&rct=j&q=numpy&source=web&cd=1&ved=0CCMQFjAA&url=http://numpy.scipy.org/&ei=fMsVT9q-PIbr0gGC5fVR&usg=AFQjCNHc8BZqObo1c9wGn_Z50mJmNAkHiQ"}]}, {"code": "<pre>\n<code>\n In [172]: import numpy as np\n\nIn [173]: arr = np.matrix('1 2 3; 4 5 6')\n\nIn [174]: arr\nOut[174]: \nmatrix([[1, 2, 3],\n        [4, 5, 6]])\n\nIn [175]: arr[:,2]\nOut[175]: \nmatrix([[3],\n        [6]])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Since Python uses 0-based indexing (while Matlab uses 1-based indexing), to get the same slice you posted you would do:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n In [176]: arr[:,1]\nOut[176]: \nmatrix([[2],\n        [5]])\n</code>\n</pre>\n", "senID": 3}, {"text": ["It is easy to build numpy arrays of higher dimension as well.", "You could use np.dstack for instance:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "np.dstack", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n In [199]: B = np.dstack( (np.eye(3), np.ones((3,3)), np.arange(9).reshape(3,3)) )\n\nIn [200]: B.shape\nOut[200]: (3, 3, 3)\n\nIn [201]: B[:,:,0]\nOut[201]: \narray([[ 1.,  0.,  0.],\n       [ 0.,  1.,  0.],\n       [ 0.,  0.,  1.]])\n\nIn [202]: B[:,:,1]\nOut[202]: \narray([[ 1.,  1.,  1.],\n       [ 1.,  1.,  1.],\n       [ 1.,  1.,  1.]])\n\nIn [203]: B[:,:,2]\nOut[203]: \narray([[ 0.,  1.,  2.],\n       [ 3.,  4.,  5.],\n       [ 6.,  7.,  8.]])\n</code>\n</pre>\n", "senID": 5}, {"text": ["And here is the array formed from the second column from each of the 3 arrays above:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n In [204]: B[:,1,:]\nOut[204]: \narray([[ 0.,  1.,  1.],\n       [ 1.,  1.,  4.],\n       [ 0.,  1.,  7.]])\n</code>\n</pre>\n", "senID": 7}, {"text": ["Numpy doesn't have a function to create magic squares, however.", "sniff"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "sniff", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["You can group data in a two-dimensional list by column using the built-in zip() function:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "zip()", "tag": "a", "pos": 0, "childList": [{"text": "zip()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#zip"}, {"text": "zip()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; array=[[1,2,3],[4,5,6]]\n&gt;&gt;&gt; zip(*array)\n[(1, 4), (2, 5), (3, 6)]\n&gt;&gt;&gt; zip(*array)[1]\n(2, 5)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that the index starts at 0, so to get the second column as in your example you use zip(*array)[1] instead of zip(*array)[2].", "zip() returns tuples instead of lists, depending on how you are using it this may not be a problem, but if you need lists you can always do map(list, zip(*array)) or list(zip(*array)[1]) to do the conversion."], "childNum": 5, "tag": "p", "senID": 2, "childList": [{"text": "zip(*array)[1]", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "zip(*array)[2]", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "zip()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "map(list, zip(*array))", "childNum": 0, "tag": "code", "childList": []}, {"text": "list(zip(*array)[1])", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Indexing / slicing with Python using the colon results in things a bit differently than matlab.", "If you have your array, [:] will copy it.", "If you want all values at a specific index of nested arrays, you probably want something like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "[:]", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n array = [[1,2,3],[4,5,6]]\ncol1 = [inner[0] for inner in array] # note column1 is index 0 in Python.\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If using nested lists, you can use a list comprehension:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n array = [ [1, 2, 3], [4, 5, 6] ]\ncol2 = [ row[1] for row in array ]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Keep in mind that since Python doesn't natively know about matrices, col2 is a list, and as such both \"rows\" and \"columns\" are the same type, namely lists.", "Use the numpy package for better support for matrix math."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "col2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "numpy", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"code": "<pre>\n<code>\n def get_column(array, col):\n  result = []\n  for row in array:\n    result.appen(row[col])\n  return result\n</code>\n</pre>\n", "senID": 0}, {"text": ["Use like this (remember that indexes start from 0):"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; a = [[1,2,3], [2,3,4]]\n&gt;&gt;&gt; get_column(a, 1)\n[2, 3]\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Use a list comprehension to build a list of values from that column:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def nthcolumn(n, matrix):\n    return [row[n] for row in matrix]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Optionally use itemgetter if you need a (probably slight) performance boost:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "itemgetter", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from operator import itemgetter\n\ndef nthcolumn(n, matrix):\n    nthvalue = itemgetter(n)\n    return [nthvalue(row) for row in matrix]\n</code>\n</pre>\n", "senID": 3}]]