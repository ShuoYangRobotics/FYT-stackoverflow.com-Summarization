[[{"text": ["One simple use case will be to set a read only instance attribute , as you know leading a variable name with one underscore _x in python usually mean it's private (internal use) but sometimes we want to be able to read the instance attribute and not to write it so we can use property for this:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "_x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "private", "childNum": 0, "tag": "em", "childList": []}, {"text": "property", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class C(object):\n\n        def __init__(self, x):\n            self._x = x\n\n        @property\n        def x(self):\n            return self._x\n\n&gt;&gt;&gt; c = C(1)\n&gt;&gt;&gt; c.x\n1\n&gt;&gt;&gt; c.x = 2\nAttributeError        Traceback (most recent call last)\n\nAttributeError: can't set attribute\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Other examples would be validation/filtering of the set attributes (forcing them to be in bounds or acceptable) and lazy evaluation of complex or rapidly changing terms."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Complex calculation hidden behind an attribute:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class PDB_Calculator(object):\n    ...\n    @property\n    def protein_folding_angle(self):\n        # number crunching, remote server calls, etc\n        # all results in an angle set in 'some_angle'\n        # It could also reference a cache, remote or otherwise,\n        # that holds the latest value for this angle\n        return some_angle\n\n&gt;&gt;&gt; f = PDB_Calculator()\n&gt;&gt;&gt; angle = f.protein_folding_angle\n&gt;&gt;&gt; angle\n44.33276\n</code>\n</pre>\n", "senID": 2}, {"text": ["Validation:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Pedometer(object)\n    ...\n    @property\n    def stride_length(self):\n        return self._stride_length\n\n    @stride_length.setter\n    def stride_length(self, value):\n        if value &gt; 10:\n            raise ValueError(\"This pedometer is based on the human stride - a stride length above 10m is not supported\")\n        else:\n            self._stride_length = value\n</code>\n</pre>\n", "senID": 4}], [{"text": ["\"Recovery from Addiction\" shows a potential real-world use of properties in Python."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"Recovery from Addiction\"", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.archive.org/details/SeanKellyRecoveryfromAddiction"}]}], [{"text": ["One thing I've used it for is caching slow-to-look-up, but unchanging, values stored in a database.", "This generalises to any situation where your attributes require computation or some other long operation (eg.", "database check, network communication) which you only want to do on demand."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Model(object):\n\n  def get_a(self):\n    if not hasattr(self, \"_a\"):\n      self._a = self.db.lookup(\"a\")\n    return self._a\n\n  a = property(get_a)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This was in a web app where any given page view might only need one particular attribute of this kind, but the underlying objects themselves might have several such attributes - initialising them all on construction would be wasteful, and properties allow me to be flexible in which attributes are lazy and which aren't."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Take a look at this article for a very practical use.", "In short, it explains how in Python you can usually ditch explicit getter/setter method, since if you come to need them at some stage you can use property for a seamless implementation."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "this article", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://eli.thegreenplace.net/2009/02/06/getters-and-setters-in-python/"}, {"text": "property", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Property is just an abstraction around a field which give you more control on ways that a  specific field can be manipulated and to do middleware computations.", "Few of the usages that come to mind is validation and prior initialization and access restriction"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n @property\ndef x(self):\n    \"\"\"I'm the 'x' property.\"\"\"\n    if self._x is None:\n        self._x = Foo()\n\n    return self._x\n</code>\n</pre>\n", "senID": 1}]]