[[{"text": ["No, they aren't equal.", "In Python, any nonzero number is treated as being True, so the second statement will be considered true if the expression evaluates to -1, and false if the expression evaluates to 0 (when it should be true)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Use the first statement."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["As others have said, no those statements are not equivalent.", "However, when you only need to find if the substring exists and not where, I prefer the in operator rather than .find(), e.g."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "if", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "where", "childNum": 0, "tag": "em", "childList": []}, {"text": "in", "childNum": 0, "tag": "code", "childList": []}, {"text": ".find()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n if brand in row[1].upper():\n</code>\n</pre>\n", "senID": 1}, {"text": ["This is equivalent to the first statement, but more concise and easy to read."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["No. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The first one will evaluate to false only  if find() returns -1."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "false", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "find()", "childNum": 0, "tag": "code", "childList": []}, {"text": "-1", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The second one will evaluate to false only if find() returns 0.", "This even would give you wrong results as 0 means that the substring was found at the beginning of the string.", "So this statement would evaluate to false if the substring is at the beginning and true if it was not found."], "childNum": 7, "tag": "p", "senID": 2, "childList": [{"text": "false", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "find()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 2, "childList": []}, {"text": "0", "childNum": 0, "tag": "code", "childList": []}, {"text": "false", "childNum": 0, "tag": "code", "childList": []}, {"text": "true", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["To explain what the find() method does:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "find()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"hello\".find(\"l\")\n2\n&gt;&gt;&gt; \"hello\".find(\"he\")\n0\n&gt;&gt;&gt; \"hello\".find(\"x\")\n-1\n</code>\n</pre>\n", "senID": 1}, {"text": ["-1 is a \"magic value\" for \"search string not found\".", "Contrast this with index():"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "-1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "index()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; \"hello\".index(\"l\")\n2\n&gt;&gt;&gt; \"hello\".index(\"he\")\n0\n&gt;&gt;&gt; \"hello\".index(\"x\")\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: substring not found\n</code>\n</pre>\n", "senID": 3}, {"text": ["Personally, I prefer index() because usually, magic values are frowned upon in Python whereas exception handling is the Pythonic way to do it - \"EAFP\" (it's easier to ask forgiveness than permission)."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "index()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["In your case it looks like the \"LBYL\" programming style (look before you leap), although you're not showing much context so I don't know what the if statement is deciding.  "], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["No, of course not."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The first one checks if the result is -1 and the other one checks if the result is anything which Python regards as \"false\".", "-1 is not regarded as false by Python."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "-1", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "-1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["The top answer is correct.", "But I find it easier to read in than to use numeric results.", "I.e.,"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; row\n[[1, 'lysol']]\n&gt;&gt;&gt; brand\n'Lysol'\n&gt;&gt;&gt; brand.upper() in row[0][1].upper()\nTrue\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Although, once the \"Schlysol\" brand shows up, all bets are off.", "Hm."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]