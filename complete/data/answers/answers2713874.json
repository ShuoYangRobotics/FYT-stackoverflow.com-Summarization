[[{"text": ["Python has two \"mantras\" that cover this topic:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["There is a convention for naming of and importing of modules that can be found in The Python Style Guide (PEP 8)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "The Python Style Guide", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0008/"}]}, {"text": ["The biggest reason that there is no such convention to consistently prefix your modules names in a Java style, is because over time you end up with a lot of repetition in your code that doesn't really need to be there."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["One of the problems with Java is it forces you to repeat yourself, constantly.", "There's a lot of boilerplate that goes into Java code that just isn't necessary in Python.", "(Getters/setters being a prime example of that.", ")  "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Namespaces aren't so much of a problem in Python because you are able to give modules an alias upon import.", "Such as:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n import com.company.actualpackage as shortername\n</code>\n</pre>\n", "senID": 6}, {"text": ["So you're not only able to create or manipulate the namespace within your programs, but are able to create your own keystroke-saving aliases as well.  "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["The Java's conventions also has it's own drawbacks.", "Not every opensource package has a stable website behind it.", "What should a maintainer do if his website changes?", "Also, using this scheme package names become long and hard to remember.", "Finally, the name of the package should represent the purpose of the package, not its owner"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["There is no Java-like naming convention for Python packages.", "You can of course adopt one for any package you develop yourself, but you might have to invasively edit any package you may adopt from third parties, and the \"culturally alien\" naming convention will probably sap the changes of your own packages to be widely adopted outside of your organization."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Technically, there would be nothing wrong with Java's convention in Python (it would just make some from statements a tad longer, no big deal), but in practice the cultural aspects make it pretty much unfeasible."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "from", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["The reason there's normally no package hierarchy is because Python packages aren't easily extended that way.", "Packages are actual directories, and though you can make packages look in multiple directories for sub-modules (by adding directories to the __path__ list of the package) it's not convenient, and easily done wrong.", "As for why Python packages aren't easily extended that way, well, that's a design choice.", "Guido didn't like deep hierarchies (and still doesn't) and doesn't think they're necessary."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "__path__", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "why", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["The convention is to pick a toplevel package name that's obvious but unique to your project -- for example, the name of the project itself.", "You can structure everything inside it however you want (because you are in control of it.", ") Splitting the package into separate bits with separate owners is a little more work, but with a few guidelines it's possible.", "It's rarely needed."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["There's nothing stopping you using that convention if you want to, but it's not at all standard in the Python world and you'd probably get funny looks.", "It's not much fun to take care of admin on packages when they're deeply nested in com."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "com", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["It may sound sloppy to someone coming from Java, but in reality it doesn't really seem to have caused any big difficulties, even with packages as poorly-named as web.py."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The place where you often do get namespace conflicts in practice is relative imports: where code in package.module1 tries to import module2 and there's both a package.module2 and a module2 in the standard library (which there commonly is as the stdlib is large and growing).", "Luckily, ambiguous relative imports are going away."], "childNum": 6, "tag": "p", "senID": 2, "childList": [{"text": "do", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "package.module1", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "import module2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "package.module2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "module2", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "are going away", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/peps/pep-0328/"}]}], [{"text": ["I've been using python for years and 99.9% of the collisions I have seen comer from new developers trying to name a file \"xml.py\".", "I can see some advantages to the Java scheme, but most developers are smart enough to pick reasonable package names, so it really is't that big of a problem."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]