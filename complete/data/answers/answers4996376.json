[[{"text": ["Try to do one step after the other.", "And try to break down your task into simple steps.", "In your example it could be something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This you can break down futher"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This way you can see that the validation should not be inside the while loop."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Another tip: test each step separately.", "This way you will find that if integer1 or integer2 &lt; 1 or while i &lt;= integer1 and integer2 will not work the way you think they do."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "if integer1 or integer2 &lt; 1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "while i &lt;= integer1 and integer2", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["This is not how logical operators work in Python or programming in general."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n while i &lt;= integer1 and integer2 :\n</code>\n</pre>\n", "senID": 1}, {"text": ["In Python integer2 is a separate logical statement that is always true.", "Try instead:\n while i &lt;= integer1 and i &lt;= integer2"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "integer2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while i &lt;= integer1 and i &lt;= integer2", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"tag": "ul", "num": 3, "lis": [{"text": "You'll want to move the code that\nvalidates your input outside of the\nloop.  ", "tag": "none", "senID": 0}, {"text": "Your ", "tag": "none", "senID": 1}, {"text": "The syntax in your flow\ncontrol needs a bit of work, for\nexample ", "tag": "none", "senID": 2}]}], [{"text": ["First we should do a simple way to get both integers; noting there could be multiple errors.", "(Even better would be raw_input and checking the number resolves to an int)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n integer1 = -1\ninteger2 = -1\nwhile(integer1 &lt; 1):\n   integer1 = input(\"Enter integer 1: \")\nwhile(integer2 &lt; 1):\n   integer2 = input(\"Enter integer 2: \")\n\nfactor_list1 = [] # store factor list of first number\ndouble_factor_count = 0\n\n# generate the factor list of the first number\nfor i in range(1, integer1+1): # range(1,5+1) is the list [1,2,3,4,5]\n    if integer1 % i == 0:\n        factor_list1.append(i)\nfor j in range(1, integer2+1):\n    if integer2 % j == 0 and j in factor_list1:\n         print j,\n         double_factor_count += 1\nprint \"\\n double count:\", double_factor_count\n</code>\n</pre>\n", "senID": 1}, {"text": ["Possibly you want to change it to range(2, integer1) if you want to skip 1 and the integer typed in as numbers."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Note your original code wasn't indented (so didn't appear as code in the forums, and that and and or combine expressions (e.g., things that are True or False).", "So you meant if integer1 &lt; 1 or integer2 &lt; 1:."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "True", "childNum": 0, "tag": "code", "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}, {"text": "if integer1 &lt; 1 or integer2 &lt; 1:", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Your code is actually very close, but you have a few problems:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can also improve your code in a couple of ways:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Here's how to make sure that what the user typed was an integer:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n integer1 = 0\n\nwhile not integer1:\n    try:\n        # raw_input() ensures the user can't type arbitrary code\n        # int() throws a ValueError if what they typed wasn't an integer\n        integer1 = int(raw_input(\"Enter the first integer:  \"))\n\n        if integer1 &lt; 1:\n            print \"You must enter an integer greater than 0!\"\n            integer1 = 0 # so that our while statement loops again\n    except ValueError:\n        # the user typed something other than an integer\n        print \"You must enter an integer!\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["The while, try, and if statements here ensure that the user will be forced to enter a valid integer before your code continues.", "Here's an example of what the user sees:"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "while", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "try", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n Enter the first integer:  6.6\nYou must enter an integer!\nEnter the first integer:  -5\nYou must enter an integer greater than 0!\nEnter the first integer:  sys.exit(0)\nYou must enter an integer!\nEnter the first integer:  12\nEnter the second integer:\n</code>\n</pre>\n", "senID": 5}, {"text": ["And this is how I'd recommend setting up your loop:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n # min() returns the smallest of its arguments\n# xrange() iterates over a sequence of integers (here, starting with 1 and\n#          stopping at min(integer1, integer2))\nfor i in xrange(1, min(integer1, integer2) + 1):\n    # magic goes here!\n</code>\n</pre>\n", "senID": 7}, {"text": ["Documentation links:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": ["int()"], "childNum": 1, "tag": "a", "senID": 9, "childList": [{"text": "int()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["min()"], "childNum": 1, "tag": "a", "senID": 10, "childList": [{"text": "min()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["raw_input()"], "childNum": 1, "tag": "a", "senID": 11, "childList": [{"text": "raw_input()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["xrange()"], "childNum": 1, "tag": "a", "senID": 12, "childList": [{"text": "xrange()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]}], [{"text": ["Your problem is with your if statements."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Rather than saying: while i &lt;= integer1 and integer2, you need to say while i &lt;= integer1 and i &lt;= integer2"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "while i &lt;= integer1 and integer2", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "while i &lt;= integer1 and i &lt;= integer2", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The same applies for your other if statement.", "if integer1 or integer2 &lt; 1 : should be if integer1 &lt; 1 or integer2 &lt; 1 :"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "if integer1 or integer2 &lt; 1 :", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "if integer1 &lt; 1 or integer2 &lt; 1 :", "childNum": 0, "tag": "code", "childList": []}]}]]