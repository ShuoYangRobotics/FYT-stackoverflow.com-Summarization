[[{"text": ["Did you try to use this sum formula? "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://en.wikipedia.org/wiki/Fibonacci_number#Second_identity (\"Second Identity\")?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://en.wikipedia.org/wiki/Fibonacci_number#Second_identity", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Fibonacci_number#Second_identity"}]}], [{"text": ["f = lambda n,t=5**.5:((1+t)**n-(1-t)**n)/(2**n*t) etc.", "spends 8 characters ,t=5**.5 to gain 12: three lots of 5**.5 -> t. That's a saving of 4 characters, which seems to be what you require."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "f = lambda n,t=5**.5:((1+t)**n-(1-t)**n)/(2**n*t)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": ",t=5**.5", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "5**.5", "childNum": 0, "tag": "code", "childList": []}, {"text": "t", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["[EDITED to correct a typo; I had 2*n instead of 2**n in the denominator."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "2*n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "2**n", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["You can save a few more characters with a different twist on Binet's formula: f=lambda n:round((1+5**.5)**n/5**.5/2**n)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "f=lambda n:round((1+5**.5)**n/5**.5/2**n)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Here is the 110 solution, I had to rewrite the formula though and used @Gareth's suggestion:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n p=5**.5\nf=lambda n:((1+p)**n-(1-p)**n)/(2**n*p)\nexec \"n=input();print int(f(n+11)-f(n+1)+f(n+6)%10);\"*input()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Saving another symbol, 109 now (manipulating with n and getting rid of +11):"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "n", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "+11", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n p=5**.5\nf=lambda n:((1+p)**n-(1-p)**n)/(2**n*p)\nexec \"n=input()+6;print int(f(n+5)-f(n-5)+f(n)%10);\"*input()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit: New way to calculate particular number, saves another 4 symbols and allows to avoid int():"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "int()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def f(n):exec\"a=b=1;\"+\"a,b=b,a+b;\"*(n-1);return a\nexec \"n=input()+6;print f(n+5)-f(n-5)+f(n)%10;\"*input()\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Sorry I did not read your question properly before posting.", "I am glad you at least found some use in it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I don't know Python, but in Mathematica, as generic as possible:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n f[1] = 1;\nf[2] = 1;\nf[x_] := f[x] = f[x - 1] + f[x - 2]\n\nt = 0;\n\nn = 35;\n\nFor[i = 0, i &lt;= 9, i++, t += f[n + i]]\n\nt += f[n + 246] ~Mod~ 10\n</code>\n</pre>\n", "senID": 2}, {"text": ["Or, in terse Mathematica, still without using Fibonacci function:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "Fibonacci", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n f[1|2]=1;a:f@x_:=a=f[x-1]+f[x-2];Sum[f[#+x],{x,0,9}]+f[#+246]~Mod~10&amp;\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n p=5**.5\nf=lambda n:((1+p)**n-(1-p)**n)/(2**n*p)\nexec\"n=input();print 55*f(n)+88*f(n+1)+f(n+6)%10;\"*input()\n</code>\n</pre>\n", "senID": 0}, {"text": ["106 chars as long you don't care about int() function and accept a float"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["This one prints the Fibonacci series up to n."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["def fib(n):    (i dont know why this isnt formatted right here /= )"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n a, b = 0, 1\n\nwhile a &lt; n:\n    print(a, end=' ')\n    a, b = b, a+b\n    print()\n</code>\n</pre>\n", "senID": 2}]]