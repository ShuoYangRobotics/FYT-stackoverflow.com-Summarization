[[{"text": ["Two improvements come to mind:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "40 is spelled \"forty\", not \"fourty\"", "tag": "none", "senID": 1}, {"text": "your program needs unit tests", "tag": "none", "senID": 2}]}, {"text": ["Have a look at the Python doctest and unittest modules."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "doctest", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.org/doc/2.5/lib/module-doctest.html"}, {"href": "http://python.org/doc/2.5/lib/module-unittest.html", "text": "unittest", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["You can't group digits into \"segments\" going from left-to-right.", "The range(0,len(),3) is not going to work out well.", "You'll have to write the same algorithm for inserting digit separators.", "You start from the right, picking off segments of digits."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "range(0,len(),3)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["What's left over (on the left, get it?", ") will be 1, 2 or 3 digits.", "You've got convertTrio and convertDuo, which handle 3 and 2 digits, respectively.", "Somewhere in there is a convert one digit function (can't see it)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If it's not homework, then, here's a proper digit clustering algorithm"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def segment( n ):\n   segList= []\n   while len(n) &gt; 3:\n       segList.insert( 0, n[-3:] )\n       n= n[:-3]\n   segList.insert( 0, n )\n   return segList\n</code>\n</pre>\n", "senID": 3}, {"text": ["Edit"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["To be more Pythonic, package this as a tidy, reusable module.", "The stuff inside the if __name__ == \"__main__\" does two things, which should be separated."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "if __name__ == \"__main__\"", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Your command-line parsing (anything having to do with sys.argv is one thing.", "The actual \"convert a number\" function is something else entirely.", "You want to look more like this."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "sys.argv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if __name__ == \"__main__\":\n    import sys\n    for number in sys.argv[1:]:\n        print number2string( number )\n</code>\n</pre>\n", "senID": 7}, {"text": ["Then, your number2string function becomes an easily reused piece of this module."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "number2string", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Instead of slicing digits, use modular arithmetic to separate the units.", "This function will convert a number less than 100 using the given data structures."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def convert(n):\n    q, r = divmod(n, 10)\n    if q &lt; 2:\n    \treturn words[n]\n    result = tens[q-1] # offset because tens is missing first null value\n    if r:\n    \tresult += '-' + words[r]\n    return result\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then use convert recursively to support larger numbers, e.g., start with divmod(n, 100) and so on."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Maybe Numbers and plural words as spoken English will help a little.", "A little dated though - 4 May 2005."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Numbers and plural words as spoken English", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.activestate.com/recipes/413172/"}]}], [{"text": ["Check out source for Number::Spell Perl module.", "It is short and can be easily ported to Python (if it has not already been done)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Number::Spell", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://search.cpan.org/src/LHOWARD/Number-Spell-0.04/Spell.pm"}]}], [{"text": ["In case anyone reading this is looking for a numbers to words script, have a look at inflect.py"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "inflect.py", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/inflect"}]}, {"code": "<pre>\n<code>\n import inflect\np = inflect.engine()\np.numwords(123456789)\n</code>\n</pre>\n", "senID": 1}, {"text": ["gives"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n 'one hundred and twenty-three million, four hundred and fifty-six thousand, seven hundred and eighty-nine'\n</code>\n</pre>\n", "senID": 3}]]