[[{"text": ["I don't actually think that DI/IoC are that uncommon in Python.", "What is uncommon, however, are DI/IoC frameworks/containers."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "that", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "is", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "frameworks/containers", "childNum": 0, "tag": "em", "childList": []}]}, {"text": ["Think about it: what does a DI container do?", "It allows you to "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["We have names for \"wiring together\" and \"at runtime\":"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["So, a DI container is nothing but an interpreter for a dynamic scripting language.", "Actually, let me rephrase that: a typical Java/.NET DI container is nothing but a crappy interpreter for a really bad dynamic scripting language with butt-ugly, often XML-based, syntax."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["When you program in Python, why would you want to use an ugly, bad scripting language when you have a beautiful, brilliant scripting language at your disposal?", "Actually, that's a more general question: when you program in pretty much any language, why would you want to use an ugly, bad scripting language when you have Jython and IronPython at your disposal?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["So, to recap: the practice of DI/IoC is just as important in Python as it is in Java, for exactly the same reasons.", "The implementation of DI/IoC however, is built into the language and often so lightweight that it completely vanishes.", "(Here's an analogy: in assembly, a subroutine call is a pretty major deal - you have to save your local variables and registers to memory, save your return address somewhere, change the instruction pointer to the subroutine you are calling, arrange for it to somehow jump back into your subroutine when it is finished, put the arguments somewhere where the callee can find them, and so on.", "IOW: in assembly, \"subroutine call\" is a Design Pattern, and before there were languages like Fortran which had subroutine calls built in, people were building their own \"subroutine frameworks\".", "Would you say that subroutine calls are \"uncommon\" in Python, just because you don't use subroutine frameworks?"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "practice", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "implementation", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["BTW: for an example of what it looks like to take DI to its logical conclusion, take a look at Gilad Bracha's Newspeak Programming Language and his writings on the subject:"], "childNum": 2, "tag": "p", "senID": 6, "childList": [{"text": "Gilad Bracha", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://GBracha.BlogSpot.Com/"}, {"href": "http://NewspeakLanguage.Org/", "text": "Newspeak Programming Language", "childNum": 0, "tag": "a", "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["Constructors Considered Harmful"], "childNum": 0, "tag": "a", "senID": 7, "childList": []}, {"text": ["Lethal Injection"], "childNum": 0, "tag": "a", "senID": 8, "childList": []}, {"text": ["A Ban on Imports"], "childNum": 0, "tag": "a", "senID": 9, "childList": []}]}], [{"text": ["Part of it is the way the module system works in Python.", "You can get a sort of \"singleton\" for free, just by importing it from a module.", "Define an actual instance of an object in a module, and then any client code can import it and actually get a working, fully constructed / populated object."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is in contrast to Java, where you don't import actual instances of objects.", "This means you are always having to instantiate them yourself, (or use some sort of IoC/DI style approach).", "You can mitigate the hassle of having to instantiate everything yourself by having static factory methods (or actual factory classes), but then you still incur the resource overhead of actually creating new ones each time."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["In my opinion, things like dependency injection are symptoms of a rigid and over-complex framework.", "When the main body of code becomes much too weighty to change easily, you find yourself having to pick small parts of it, define interfaces for them, and then allowing people to change behaviour via the objects that plug into those interfaces.", "That's all well and good, but it's better to avoid that sort of complexity in the first place."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It's also the symptom of a statically-typed language.", "When the only tool you have to express abstraction is inheritance, then that's pretty much what you use everywhere.", "Having said that, C++ is pretty similar but never picked up the fascination with Builders and Interfaces everywhere that Java developers did.", "It is easy to get over-exuberant with the dream of being flexible and extensible at the cost of writing far too much generic code with little real benefit.", "I think it's a cultural thing."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "far too much generic code with little real benefit", "tag": "a", "pos": 3, "childList": [], "childNum": 0, "href": "http://discuss.joelonsoftware.com/default.asp?joel.3.219431"}]}, {"text": ["Typically I think Python people are used to picking the right tool for the job, which is a coherent and simple whole, rather than the One True Tool (With A Thousand Possible Plugins) that can do anything but offers a bewildering array of possible configuration permutations.", "There are still interchangeable parts where necessary, but with no need for the big formalism of defining fixed interfaces, due to the flexibility of duck-typing and the relative simplicity of the language."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Haven't used Python in several years, but I would say that it has more to do with it being a dynamically typed language than anything else.", "For a simple example, in Java, if I wanted to test that something wrote to standard out appropriately I could use DI and pass in any PrintStream to capture the text being written and verify it.", "When I'm working in Ruby, however, I can dynamically replace the 'puts' method on STDOUT to do the verify, leaving DI completely out of the picture.", "If the only reason I'm creating an abstraction is to test the class that's using it (think File system operations or the clock in Java) then DI/IoC creates unnecessary complexity in the solution."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Django makes great use of inversion of control.", "For instance, the database server is selected by the configuration file, then the framework provides appropriate database wrapper instances to database clients."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The difference is that Python has first-class types.", "Data types, including classes, are themselves objects.", "If you want something to use a particular class, simply name the class.", "For example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if config_dbms_name == 'postgresql':\n    import psycopg\n    self.database_interface = psycopg\nelif config_dbms_name == 'mysql':\n    ...\n</code>\n</pre>\n", "senID": 2}, {"text": ["Later code can then create a database interface by writing:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n my_db_connection = self.database_interface()\n# Do stuff with database.\n</code>\n</pre>\n", "senID": 4}, {"text": ["Instead of the boilerplate factory functions that Java and C++ need, Python does it with one or two lines of ordinary code.", "This is the strength of functional versus imperative programming."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Actually, it is quite easy to write sufficiently clean and compact code with DI (I wonder, will it be/stay pythonic then, but anyway :) ), for example I actually perefer this way of coding:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pythonic", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n def polite(name_str):\n    return \"dear \" + name_str\n\ndef rude(a):\n    return name_str + \", you, moron\"\n\ndef greet(name_str, call=polite):\n    print \"Hello, \" + call(name_str) + \"!\"\n</code>\n</pre>\n", "senID": 1}, {"text": [], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;greet(\"Peter\")\nHello, dear Peter!\n&gt;&gt;greet(\"Jack\", rude)\nHello, Jack, you, moron!\n</code>\n</pre>\n", "senID": 3}, {"text": ["Yes, this can be viewed as just a simple form of parameterizing functions/classes, but it does its work.", "So, maybe Python's default-included batteries are enough here too."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["P.S.", "I have also posted a larger example of this naive approach at Dynamically evaluating simple boolean logic in Python."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "Dynamically evaluating simple boolean logic in Python", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2467590/dynamically-evaluating-simple-boolean-logic-in-python/2472414#2472414"}]}], [{"text": ["I back \"J\u00f6rg W Mittag\" answer: \"The Python implementation of DI/IoC is so lightweight that it completely vanishes\"."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To back up this statement, take a look at the famous Martin Fowler's example ported from Java to Python: Python:Design_Patterns:Inversion_of_Control"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python:Design_Patterns:Inversion_of_Control", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://emilmont.net/doku.php?id=python%3adesign_patterns%3ainversion_of_control"}]}, {"text": ["As you can see from the above link, a \"Container\" in Python can be written in 8 lines of code:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class Container:\n    def __init__(self, system_data):\n        for component_name, component_class, component_args in system_data:\n            if type(component_class) == types.ClassType:\n                args = [self.__dict__[arg] for arg in component_args]\n                self.__dict__[component_name] = component_class(*args)\n            else:\n                self.__dict__[component_name] = component_class\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I use IoC with Ruby, here's my thoughts about why it's not widely spread"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://ruby-lang.info/blog/you-underestimate-the-power-of-ioc-3fh"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://ruby-lang.info/blog/you-underestimate-the-power-of-ioc-3fh", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ruby-lang.info/blog/you-underestimate-the-power-of-ioc-3fh"}]}]]