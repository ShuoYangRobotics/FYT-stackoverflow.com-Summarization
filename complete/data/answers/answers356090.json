[[{"text": ["If it's a REALLY big number.", "You could use a binary search."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def find_invpow(x,n):\n    \"\"\"Finds the integer component of the n'th root of x,\n    an integer such that y ** n &lt;= x &lt; (y + 1) ** n.\n    \"\"\"\n    high = 1\n    while high ** n &lt; x:\n        high *= 2\n    low = high/2\n    while low &lt; high:\n        mid = (low + high) // 2\n        if low &lt; mid and mid**n &lt; x:\n            low = mid\n        elif high &gt; mid and mid**n &gt; x:\n            high = mid\n        else:\n            return mid\n    return mid + 1\n</code>\n</pre>\n", "senID": 1}, {"text": ["For example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 237734537465873465\n&gt;&gt;&gt; n = 5\n&gt;&gt;&gt; y = find_invpow(x,n)\n&gt;&gt;&gt; y\n2986\n&gt;&gt;&gt; y**n &lt;= x &lt;= (y+1)**n\nTrue\n&gt;&gt;&gt;\n&gt;&gt;&gt; x = 119680039660309643568856114803834088331723464504673392511960931441&gt;\n&gt;&gt;&gt; n = 45\n&gt;&gt;&gt; y = find_invpow(x,n)\n&gt;&gt;&gt; y\n227661383982863143360L\n&gt;&gt;&gt; y**n &lt;= x &lt; (y+1)**n\nTrue\n&gt;&gt;&gt; find_invpow(y**n,n) == y\nTrue\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Gmpy is a C-coded Python extension module that wraps the GMP library to provide to Python code fast multiprecision arithmetic (integer, rational, and float), random number generation, advanced number-theoretical functions, and more."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Gmpy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.google.com/p/gmpy/"}]}, {"text": ["Includes a root function:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "root", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For example, 20th root:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import gmpy\n&gt;&gt;&gt; i0=11968003966030964356885611480383408833172346450467339251 \n&gt;&gt;&gt; m0=gmpy.mpz(i0)\n&gt;&gt;&gt; m0\nmpz(11968003966030964356885611480383408833172346450467339251L)\n&gt;&gt;&gt; m0.root(20)\n(mpz(567), 0)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Oh, for numbers that big, you would use the decimal module."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "that", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["ns: your number as a string"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n ns = \"11968003966030964356885611480383408833172346450467339251196093144141045683463085291115677488411620264826942334897996389485046262847265769280883237649461122479734279424416861834396522819159219215308460065265520143082728303864638821979329804885526557893649662037092457130509980883789368448042961108430809620626059287437887495827369474189818588006905358793385574832590121472680866521970802708379837148646191567765584039175249171110593159305029014037881475265618958103073425958633163441030267478942720703134493880117805010891574606323700178176718412858948243785754898788359757528163558061136758276299059029113119763557411729353915848889261125855717014320045292143759177464380434854573300054940683350937992500211758727939459249163046465047204851616590276724564411037216844005877918224201569391107769029955591465502737961776799311859881060956465198859727495735498887960494256488224613682478900505821893815926193600121890632\"\nfrom decimal import Decimal\nd = Decimal(ns)\none_third = Decimal(\"0.3333333333333333\")\nprint d ** one_third\n</code>\n</pre>\n", "senID": 2}, {"text": ["and the answer is: 2.287391878618402702753613056E+305"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["TZ pointed out that this isn't accurate... and he's right.", "Here's my test."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from decimal import Decimal\n\ndef nth_root(num_decimal, n_integer):\n    exponent = Decimal(\"1.0\") / Decimal(n_integer)\n    return num_decimal ** exponent\n\ndef test():\n    ns = \"11968003966030964356885611480383408833172346450467339251196093144141045683463085291115677488411620264826942334897996389485046262847265769280883237649461122479734279424416861834396522819159219215308460065265520143082728303864638821979329804885526557893649662037092457130509980883789368448042961108430809620626059287437887495827369474189818588006905358793385574832590121472680866521970802708379837148646191567765584039175249171110593159305029014037881475265618958103073425958633163441030267478942720703134493880117805010891574606323700178176718412858948243785754898788359757528163558061136758276299059029113119763557411729353915848889261125855717014320045292143759177464380434854573300054940683350937992500211758727939459249163046465047204851616590276724564411037216844005877918224201569391107769029955591465502737961776799311859881060956465198859727495735498887960494256488224613682478900505821893815926193600121890632\"\n    nd = Decimal(ns)\n    cube_root = nth_root(nd, 3)\n    print (cube_root ** Decimal(\"3.0\")) - nd\n\nif __name__ == \"__main__\":\n    test()\n</code>\n</pre>\n", "senID": 5}, {"text": ["It's off by about 10**891"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["You can make it run slightly faster by avoiding the while loops in favor of setting low to 10 ** (len(str(x)) / n) and high to low * 10.", "Probably better is to replace the len(str(x)) with the bitwise length and using a bit shift.", "Based on my tests, I estimate a 5% speedup from the first and a 25% speedup from the second.", "If the ints are big enough, this might matter (and the speedups may vary).", "Don't trust my code without testing it carefully.", "I did some basic testing but may have missed an edge case.", "Also, these speedups vary with the number chosen."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If the actual data you're using is much bigger than what you posted here, this change may be worthwhile."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from timeit import Timer\n\ndef find_invpow(x,n):\n    \"\"\"Finds the integer component of the n'th root of x,\n    an integer such that y ** n &lt;= x &lt; (y + 1) ** n.\n    \"\"\"\n    high = 1\n    while high ** n &lt; x:\n        high *= 2\n    low = high/2\n    while low &lt; high:\n        mid = (low + high) // 2\n        if low &lt; mid and mid**n &lt; x:\n            low = mid\n        elif high &gt; mid and mid**n &gt; x:\n            high = mid\n        else:\n            return mid\n    return mid + 1\n\ndef find_invpowAlt(x,n):\n    \"\"\"Finds the integer component of the n'th root of x,\n    an integer such that y ** n &lt;= x &lt; (y + 1) ** n.\n    \"\"\"\n    low = 10 ** (len(str(x)) / n)\n    high = low * 10\n\n    while low &lt; high:\n        mid = (low + high) // 2\n        if low &lt; mid and mid**n &lt; x:\n            low = mid\n        elif high &gt; mid and mid**n &gt; x:\n            high = mid\n        else:\n            return mid\n    return mid + 1\n\nx = 237734537465873465\nn = 5\ntests = 10000\n\nprint \"Norm\", Timer('find_invpow(x,n)', 'from __main__ import find_invpow, x,n').timeit(number=tests)\nprint \"Alt\", Timer('find_invpowAlt(x,n)', 'from __main__ import find_invpowAlt, x,n').timeit(number=tests)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Norm 0.626754999161"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Alt 0.566340923309"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Try converting the exponent to a floating number, as the default behaviour of / in Python is integer division"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["n**(1/float(3))"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["In older versions of Python, 1/3 is equal to 0.", "In Python 3.0, 1/3 is equal to 0.33333333333 (and 1//3 is equal to 0)."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "1/3", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "1/3", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "1//3", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So, either change your code to use 1/3.0 or switch to Python 3.0 ."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "1/3.0", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Well, if you're not particularly worried about precision, you could convert it to a sting, chop off some digits, use the exponent function, and then multiply the result by the root of how much you chopped off."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["E.g.", "32123 is about equal to 32 * 1000, the cubic root is about equak to cubic root of 32 * cubic root of 1000.", "The latter can be calculated by dividing the number of 0s by 3."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This avoids the need for the use of extension modules."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Possibly for your curiosity:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://en.wikipedia.org/wiki/Hensel_Lifting"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://en.wikipedia.org/wiki/Hensel_Lifting", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Hensel_Lifting"}]}, {"text": ["This could be the technique that Maple would use to actually find the nth root of large numbers."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Pose the fact that x^n - 11968003.... = 0 mod p, and go from there..."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "x^n - 11968003.... = 0 mod p", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If you are looking for something standard, fast to write with high precision.", "I would use decimal and adjust the precision (getcontext().prec) to at least the length of x."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Code (Python 3.0)"], "childNum": 0, "tag": "h2", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from decimal import *\n\nx =   '11968003966030964356885611480383408833172346450467339251\\\n196093144141045683463085291115677488411620264826942334897996389\\\n485046262847265769280883237649461122479734279424416861834396522\\\n819159219215308460065265520143082728303864638821979329804885526\\\n557893649662037092457130509980883789368448042961108430809620626\\\n059287437887495827369474189818588006905358793385574832590121472\\\n680866521970802708379837148646191567765584039175249171110593159\\\n305029014037881475265618958103073425958633163441030267478942720\\\n703134493880117805010891574606323700178176718412858948243785754\\\n898788359757528163558061136758276299059029113119763557411729353\\\n915848889261125855717014320045292143759177464380434854573300054\\\n940683350937992500211758727939459249163046465047204851616590276\\\n724564411037216844005877918224201569391107769029955591465502737\\\n961776799311859881060956465198859727495735498887960494256488224\\\n613682478900505821893815926193600121890632'\n\nminprec = 27\nif len(x) &gt; minprec: getcontext().prec = len(x)\nelse:                getcontext().prec = minprec\n\nx = Decimal(x)\npower = Decimal(1)/Decimal(3)\n\nanswer = x**power\nranswer = answer.quantize(Decimal('1.'), rounding=ROUND_UP)\n\ndiff = x - ranswer**Decimal(3)\nif diff == Decimal(0):\n    print(\"x is the cubic number of\", ranswer)\nelse:\n    print(\"x has a cubic root of \", answer)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Answer"], "childNum": 0, "tag": "h2", "senID": 3, "childList": []}, {"text": ["x is the cubic number of 22873918786185635329056863961725521583023133411\n451452349318109627653540670761962215971994403670045614485973722724603798\n107719978813658857014190047742680490088532895666963698551709978502745901\n704433723567548799463129652706705873694274209728785041817619032774248488\n2965377218610139128882473918261696612098418"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}]]