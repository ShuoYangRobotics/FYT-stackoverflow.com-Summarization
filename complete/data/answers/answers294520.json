[[{"text": ["One technique I've used for code generation is to not worry at all about formatting in the code generator.", "Then, as a next step after generating the code, run it through indent to format it reasonably so you can read (and more importantly, debug) it. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "indent", "tag": "a", "pos": 1, "childList": [{"text": "indent", "tag": "code"}], "childNum": 1, "href": "http://www.gnu.org/software/indent/"}, {"text": "indent", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["I wrote Cog partly to generate C++ code from an XML data schema.", "It lets you use Python code embedded in C++ source files to generate C++ source."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Cog", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://nedbatchelder.com/code/cog/index.html"}]}], [{"text": ["See Tooling to Build Test Cases."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Tooling to Build Test Cases", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://homepage.mac.com/s_lott/iblog/architecture/C20071019092637/E20080830091128/index.html"}]}, {"text": ["It's not clear what your problem is."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you question is \"how do I handle all the special cases in my generating classes?", "\" then here's some advice.", "If your question is something else, then update your question."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I agree with S.Lott, that you should write out an example of what you want to generate."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Solving a problem with code generation should be less complicated than without."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["This is because your total program has to deal with a lot of input information, and if a subset of that information changes very seldom, like once a week, the code generator only has to condition on that subset.", "The generated code conditions on the remaining input that changes more frequently.", "It's a divide-and-conquer strategy.", "Another name for it is \"partial evaluation\"."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Generated code should also run a lot faster because it's less general."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In your specific case, there's no harm in doing the code generation in 2 (or more) passes.", "Like on pass 1 you generate declarations.", "On pass 2 you generate process code.", "Alternatively you could generate two output streams, and concatenate them at the end."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Hope that helps.", "Sorry if I'm just saying what's obvious."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I have a code generation system and one of the best choices I have taken with it is to put much of the resultant program in non generated code, e.g.", "a library/runtime.", "Using templates works well also.", "Complex template systems may be hard to work with by hand, but your not working with them by hand so leverage that. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["It would actually be just recursing straight down, except I need to pull all function declarations out and put them elsewhere, and the fact that for all function calls I need to build a vector of all of the arguments, and then pass that to the function, since C++ doesn't have a syntax for vectors."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]