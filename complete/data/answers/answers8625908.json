[[{"text": ["You can use os.walk() for recuresive walking and glob.glob() or fnmatch.filter() for file matching:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Check this answer"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2186525/use-a-glob-to-find-files-recursively-in-python"}]}], [{"text": ["I'd use os.walk to scan the directory, os.path.splitext to grab the suffix and filter them myself."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n suffixes = set(['.AVI', '.MOV'])\nfor dirpath, dirnames, filenames in os.walk('.'):\n    for f in filenames:\n        if os.path.splitext(f)[1] in suffixes:\n            yield os.path.join(dirpath, f)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Example for a list of files in current directory.", "You can expand this for specific paths."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import glob\nmovlist = glob.glob('*.mov')\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n pattern = re.compile('.*\\.(mov|MOV|avi|mpg)$')\n\ndef fileList(source):\n   matches = []\n   for root, dirnames, filenames in os.walk(source):\n       for filename in filter(lambda name:pattern.match(name),filenames):\n           matches.append(os.path.join(root, filename))\n   return matches\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Python 2.x:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\n\ndef generic_tree_matching(rootdirname, filterfun):\n    return [\n        os.path.join(dirname, filename)\n        for dirname, dirnames, filenames in os.walk(rootdirname)\n        for filename in filenames\n        if filterfun(filename)]\n\ndef matching_ext(rootdirname, extensions):\n    \"Case sensitive extension matching\"\n    return generic_tree_matching(\n        rootdirname,\n        lambda fn: fn.endswith(extensions))\n\ndef matching_ext_ci(rootdirname, extensions):\n    \"Case insensitive extension matching\"\n    try:\n        extensions= extensions.lower()\n    except AttributeError: # assume it's a sequence of extensions\n        extensions= tuple(\n            extension.lower()\n            for extension in extensions)\n    return generic_tree_matching(\n        rootdirname,\n        lambda fn: fn.lower().endswith(extensions))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Use either matching_ext or matching_ext_ci with arguments the root folder and an extension or a tuple of extensions:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "matching_ext", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "matching_ext_ci", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; matching_ext(\".\", (\".mov\", \".avi\"))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I suggest the use of os.walk and a carefully reading of its documentation. "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "os.walk", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/os.html#os.walk", "text": "reading of its documentation", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["This may be a one liner approach:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [f for root,dirs,files in os.walk('/your/path') for f in files if is_video(f)]\n</code>\n</pre>\n", "senID": 2}, {"text": ["Where in is_video you check your extensions."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "is_video", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]