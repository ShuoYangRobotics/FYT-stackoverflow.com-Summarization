[[{"text": ["if key == \"name\" and item: means if (key == \"name\") and (item evaluates to True). "], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "if key == \"name\" and item:", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if (key == \"name\") and (item evaluates to True)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Keep in mind that (item evaluates to True) is possible in several ways.", "For example if (key == \"name\") and [] will evaluate to False. "], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "(item evaluates to True)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if (key == \"name\") and []", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "False", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["No, you have to repeat the expression.", "It evaluates as 2 separate conditions, and checks if both are true -"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Check the Python documentation for a list of what is considered False in Python"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Python documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html"}]}, {"text": ["(However, interesting to note that, as opposed to other languages, the following:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if 3 &lt; x &lt; 6\n</code>\n</pre>\n", "senID": 3}, {"text": ["is equivalent to"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if x &gt; 3 and x &lt; 6\n</code>\n</pre>\n", "senID": 5}, {"text": [], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Others have explained how the expression you're asking about is evaluated.", "An important thing to know is that if the first operand of the \"and\" operator evaluates to false, the second one is never evaluated, because the result of \"and\" is always false if one operand is false, and if you know the first operand is false, then the whole \"and\" is false and you don't have to evaluate the second.", "This is called \"short-circuiting\" and applies to \"or\" as well as \"and\" (except that \"or\" is always true when either operand is true, so the second operand is evaluated only when the first is false)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The other thing you need to know is that the result of the whole \"and\" operation is the value of the last operand evaluated.", "Since things other than the literal constants True and False are considered logically true or false, this fact (combined with short-circuiting) can be used as a substitute for \"if\" statements in some situations, and you will occasionally see it used that way.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["For example, \"x or y\" evaluates to x if x is true, but to y if x is false.", "Sometimes this is used to provide defaults for missing values:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n name = raw_input(\"Enter your name: \") or \"dude\"\nprint \"Hello, %s!\" % name\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you don't enter anything at the prompt, just hit Enter, the return value of raw_input is the empty string, \"\", which is considered false.", "Since the left branch of the \"or\" is false, it doesn't short-circuit, and the right branch is evaluated, so the result of the \"or\" is \"dude.", "\"  If you do enter a value at the prompt, the right branch never gets evaluated, due to short-circuiting, and so the value of the \"or\" is whatever you entered."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["A lot of people consider abusing Boolean operators this way to be poor style now that Python has \"x if y else z,\" but this particular use strikes me as readable enough.", "(But this is about the only one!", ") \"The value is this, or that if it's empty.", "\"  Compare it to the following:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n name = raw_input(\"Enter your name: \")\nname = name if name else \"dude\"\nprint \"Hello, %s!\" % name\n</code>\n</pre>\n", "senID": 6}], [{"text": ["If, hypothetically, you did want"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if key == \"name\" and if key == item:\n</code>\n</pre>\n", "senID": 1}, {"text": ["you could do this"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if key == \"name\" == item:\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you look at the code for example 5.14:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __setitem__(self, key, item):         \n    if key == \"name\" and item:            \n        self.__parse(item)                \n    FileInfo.__setitem__(self, key, item)\n</code>\n</pre>\n", "senID": 1}, {"text": ["item is a variable, similar to how key is."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "item", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["It can be used in the if statement if it evaluates into either true or false."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "true", "childNum": 0, "tag": "code", "childList": []}, {"text": "false", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["eg."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n happy = True\nname = \"Peter\"\nif name == \"Peter\" and happy:\n    print name + \" is happy!\"\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Manoj explained it well.", "Here goes some complementary notes."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The pseudocode"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if key == \"name\" or if key == \"item\":\n</code>\n</pre>\n", "senID": 2}, {"text": ["can be get this way:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n if key == \"name\" or key == \"item\":\n</code>\n</pre>\n", "senID": 4}, {"text": ["An interesting idiom to do it is:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n if key in (\"name\", \"item\"):\n</code>\n</pre>\n", "senID": 6}, {"text": ["but it is more useful for really great conditions where you just want to know if some value is equal to any other value from a list."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}], [{"text": ["@Victor Neo: Also you do not need separate boolean:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for happy in (False, \"Peter\", '', \"Susan\" , []):\n    print(happy + ' is happy.' if happy else 'Everybody is bored.')\n</code>\n</pre>\n", "senID": 1}, {"text": ["If statement is preferred over using or and and with non-booleans, which emulated the effect before value if condition else value became available in Python."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "or", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "and", "childNum": 0, "tag": "code", "childList": []}, {"text": "value if condition else value", "childNum": 0, "tag": "code", "childList": []}]}]]