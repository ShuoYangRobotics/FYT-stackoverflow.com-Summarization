[[{"text": ["Yes you can use the imports from the other file by going a.os."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["However, the pythonic way is to just import the exact modules you need without making a chain out of it (which can lead to circular references)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["When you import a module, the code is compiled and inserted into a dictionary of names -> module objects.", "The dictionary is located at sys.modules."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import sys\nsys.modules\n\n&gt;&gt;&gt; pprint.pprint(sys.modules)\n{'UserDict': &lt;module 'UserDict' from 'C:\\python26\\lib\\UserDict.pyc'&gt;,\n '__builtin__': &lt;module '__builtin__' (built-in)&gt;,\n '__main__': &lt;module '__main__' (built-in)&gt;,\n '_abcoll': &lt;module '_abcoll' from 'C:\\python26\\lib\\_abcoll.pyc'&gt;,\n# the rest omitted for brevity\n</code>\n</pre>\n", "senID": 3}, {"text": ["When you try to import the module again, Python will check the dictionary to see if its already there.", "If it is, it will return the already compiled module object to you.", "Otherwise, it will compile the code, and insert it in sys.modules."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Since dictionaries are implemented as hash tables, this lookup is very quick and takes up negligible time compared to the risk of creating circular references."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["If you only have about 4 or 5 imports like that, its not too cluttery.", "Remember, \"Explicit is better than implicit\".", "However if it really bothers you that much, do this:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &lt;importheaders.py&gt;\nfrom django.utils import simplejson\nfrom google.appengine.ext import webapp\nfrom google.appengine.ext.webapp import template\nfrom google.appengine.ext import db\n\n\n&lt;mycontroller.py&gt;\nfrom importheaders import *\n</code>\n</pre>\n", "senID": 7}], [{"text": ["Just import the modules again."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Importing a module in python is a very lightweight operation.", "The first time you import a module, python will load the module and execute the code in it.", "On any subsequent imports, you will just get a reference to the already-imported module."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You can verify this yourself, if you like:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n # module_a.py\nclass A(object):\n    pass\n\nprint 'A imported'\n\n# module_b.py\nimport module_a\n\nclass B(object):\n    pass\n\nprint 'B imported'\n\n# at the interactive prompt\n&gt;&gt;&gt; import module_a\nA imported\n&gt;&gt;&gt; import module_a     # notice nothing prints out this time\n&gt;&gt;&gt; import module_b     # notice we get the print from B, but not from A\nB imported\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You should import it separately.", "However, if you really need to forward some functionality, you can return a module from a function.", "Just:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\ndef x:\n   return os\n</code>\n</pre>\n", "senID": 1}, {"text": ["But it seems like a plugin functionality - objects + inheritance would solve that case a bit better."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Sounds like you are wanting to use python packages.", "Look into those."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "python packages", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html#packages"}]}], [{"text": ["Yep.", "Once you import a module, that module becomes a property of the current module."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # a.py\nclass A(object):\n    ...\n\n# b.py\nimport a\nclass B(a.A):\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["In Django, for example, many of the packages simply import the contents of other modules.", "Classes and functions are defined in separate files just for the separation:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n # django/db/models/fields/__init__.py\nclass Field(object):\n    ...\nclass TextField(Field):\n    ...\n\n# django/db/models/__init__.py\nfrom django.db.models.fields import *\n\n# mydjangoproject/myapp/models.py\nfrom django.db import models\nclass MyModel(models.Model):\n    myfield = models.TextField(...)\n    ....\n</code>\n</pre>\n", "senID": 3}], [{"text": ["First you can shorten it to:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.utils import simplejson\nfrom google.appengine.ext import webapp, db\nfrom webapp import template\n</code>\n</pre>\n", "senID": 1}, {"text": ["Secondly suppose you have those ^ imports in my_module.py"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["In my_module2.py you can do:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["from my_module2.py import webapp, db, tempate"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["example:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n In [5]: from my_module2 import MyMath2, MyMath\n\nIn [6]: m2 = MyMath2()\n\nIn [7]: m2.my_cos(3)\nOut[7]: 0.94398413915231416\n\nIn [8]: m = MyMath()\n\nIn [9]: m.my_sin(3)\nOut[9]: 0.32999082567378202\n</code>\n</pre>\n", "senID": 6}, {"text": ["where my_module2 is:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n from my_module import math, MyMath\n\nclass MyMath2(object):\n\n    the_meaning_of_life = 42\n\n    def my_cos(self, number):\n        return math.cos(number * 42)\n</code>\n</pre>\n", "senID": 8}, {"text": ["and my_module1 is:"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n import math\n\nclass MyMath(object):\n\n    some_number = 42\n\n    def my_sin(self, num):\n        return math.sin(num * self.some_number)\n</code>\n</pre>\n", "senID": 10}, {"text": ["Cheers,\nHope it helps\nAleP"], "childNum": 0, "tag": "p", "senID": 11, "childList": []}]]