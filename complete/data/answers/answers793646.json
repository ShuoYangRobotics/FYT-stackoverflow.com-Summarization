[[{"text": ["My ad-hoc solution to bypass this problem"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n --- epoll_demo.py.orig  2009-04-28 18:11:32.000000000 +0800\n+++ epoll_demo.py   2009-04-28 18:12:56.000000000 +0800\n@@ -18,6 +18,7 @@\n epoll.register(s.fileno(), select.EPOLLIN) # Level triggerred\n\n cs = {}\n+en = {}\n data = ''\n while True:\n     time.sleep(1)\n@@ -29,10 +30,18 @@\n             sk.setblocking(0)\n             print addr\n             cs[sk.fileno()] = sk\n+            en[sk.fileno()] = 0\n             epoll.register(sk.fileno(), select.EPOLLIN)\n\n         elif event &amp; select.EPOLLIN:\n             data = cs[fileno].recv(4)\n+            if not data:\n+                en[fileno] += 1\n+                if en[fileno] &gt;= 3:\n+                    print 'closed'\n+                    epoll.unregister(fileno)\n+                continue\n+            en[fileno] = 0\n             print 'recv ', data\n             epoll.modify(fileno, select.EPOLLOUT)\n         elif event &amp; select.EPOLLOUT:\n</code>\n</pre>\n", "senID": 1}], [{"text": ["EPOLLERR and EPOLLHUP never happens in the code pasted in the post is because they've always occurred in conjunction with an EPOLLIN or an EPOLLOUT (several of these can be set at once), so the if/then/else have always picked up an EPOLLIN or EPOLLOUT.                            "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Experimenting I've found that EPOLLHUP only happens in conjunction with EPOLLERR, the reason for this may be the way python interfaces with epoll and lowlevel IO, normally recv would return a -1 and set errno to EAGAIN when nothing is available on a non-blocking recv, however python uses '' (nothing returned) to signal EOF."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Closing your telnet-session only closes that end of the tcp-connection, so it's still perfectly valid to call recv on your side, there may  be pending data in the tcp receive buffers which your application hasn't read yet so that won't trigger an error-condition."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["It seems that EPOLLIN and a recv that returns an empty string is indicative of the other end having closed the connection, however, using an older version of python (before epoll were introduced) and plain select on a pipe, I've experienced that a read that returned '' did not indicate EOF just a lack of available data."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Don't you just need to combine the masks together to make use of EPOLLHUP and EPOLLIN at the same time:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n epoll.register(sk.fileno(), select.EPOLLIN | select.EPOLLHUP)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Though to be honest I'm not really familiar with the epoll library, so it's just a suggestion really..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["After I move select.EPOLLHUP handling code to the line before select.EPOLLIN,  hup event still\ncant be got in 'telnet'.", "But by coincidence I found that if I use my own client script, there \nare hup events!", "strange..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["And according to man epoll_ctl"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n EPOLLRDHUP (since Linux 2.6.17)\n          Stream socket peer closed connection, or shut down writing half of connection.  (This flag is especially useful for writing simple code  to\n          detect peer shutdown when using Edge Triggered monitoring.)\n\n   EPOLLERR\n          Error  condition  happened on the associated file descriptor.  epoll_wait(2) will always wait for this event; it is not necessary to set it\n          in events.\n\n   EPOLLHUP\n          Hang up happened on the associated file descriptor.  epoll_wait(2) will always wait for this event; it  is  not  necessary  to  set  it  in\n          events.\n</code>\n</pre>\n", "senID": 2}, {"text": ["Seems there shall be a EPOLLRDHUP event when remote side closed connection, which is not implemented by python, don't know why"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["If the socket is still open but no read/write available epoll.poll will timeout."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If data if available from the peer, you get an EPOLLIN and data will be available."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If the socket is closed by the peer, you will get an EPOLLIN but when you read it it will return \"\"."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["you could then close the socket by shutting it down and picking up the resulting EPOLLHUP event to clean up your internal structures."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["or perform cleanup and unregister the epoll."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["The EPOLLRDHUP flag is not defined in Python for no reason.", "If your Linux kernel is >= 2.6.17, you can define it and register your socket in epoll like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "EPOLLRDHUP", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import select\nif not \"EPOLLRDHUP\" in dir(select):\n    select.EPOLLRDHUP = 0x2000\n...\nepoll.register(socket.fileno(), select.EPOLLIN | select.EPOLLRDHUP)\n</code>\n</pre>\n", "senID": 1}, {"text": ["You can then catch the event you need using the same flag (EPOLLRDHUP):"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "EPOLLRDHUP", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n elif event &amp; select.EPOLLRDHUP:\n     print \"Stream socket peer closed connection\"\n     # try shutdown on both side, then close the socket:\n     socket.close()\n     epoll.unregister(socket.fileno())\n</code>\n</pre>\n", "senID": 3}, {"text": ["For more info you can check selectmodule.c in python's repository: "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "selectmodule.c", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://svn.python.org/view/python/tags/r27/Modules/selectmodule.c?view=markup"}]}], [{"text": ["I have another approach.. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n try:\n    data = s.recv(4096)\nexcept socket.error:\n    if e[0] in (errno.EWOULDBLOCK, errno.EAGAIN): # since this is a non-blocking socket..\n        return # no error\n    else:\n        # error\n        socket.close()\n\nif not data: #closed either\n    socket.close()\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n if event &amp; select.EPOLLHUP:\n    epoll.unregister(fd)\n</code>\n</pre>\n", "senID": 0}]]