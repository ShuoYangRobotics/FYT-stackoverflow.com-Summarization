[[{"text": ["You are looking for the chr function."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "chr", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You seem to be mixing decimal representations of integers and hex representations of integers, so it's not entirely clear what you need.", "Based on the description you gave, I think one of these snippets shows what you want."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; chr(0x65) == '\\x65'\nTrue\n\n\n&gt;&gt;&gt; hex(65)\n'0x41'\n&gt;&gt;&gt; chr(65) == '\\x41'\nTrue\n</code>\n</pre>\n", "senID": 2}, {"text": ["Note that this is quite different from a string containing an integer as hex.", "If that is what you want, use the hex builtin."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "a string containing an integer as hex", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "hex", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["This will convert an integer to a 2 digit hex string with the 0x prefix:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n strHex = \"0x%0.2X\" % 255\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What about hex()?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "hex()", "tag": "a", "pos": 0, "childList": [{"text": "hex()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html"}, {"text": "hex()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n hex(255)  # 0xff\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you really want to have \\ in front you can do:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "\\", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n print '\\\\' + hex(255)[1:]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"0x%x\" % 255 # =&gt; 0xff\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n \"0x%X\" % 255 # =&gt; 0xFF\n</code>\n</pre>\n", "senID": 3}, {"text": ["Python Documentation says: \"keep this under Your pillow: http://docs.python.org/library/index.html\""], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "http://docs.python.org/library/index.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/index.html"}]}], [{"text": ["If you want to pack a struct with a value &lt;255 (one byte unsigned, uint8_t) and end up with a string of one character, you're probably looking for the format B instead of c. C converts a character to a string (not too useful by itself) while B converts an integer."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "format B instead of c", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/struct.html#format-characters"}]}, {"code": "<pre>\n<code>\n struct.pack('B', 65)\n</code>\n</pre>\n", "senID": 1}, {"text": ["(And yes, 65 is \\x41, not \\x65."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I wanted a random integer converted into a six-digit hex string with a # at the beginning.", "To get this I used"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n \"#6x\" % random.randint(0xFFFFFF)\n</code>\n</pre>\n", "senID": 1}]]