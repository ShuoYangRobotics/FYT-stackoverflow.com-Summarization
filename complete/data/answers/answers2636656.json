[[{"text": ["Use the in operator:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if a in (7,8,9):\n    pass\n</code>\n</pre>\n", "senID": 1}], [{"text": ["To test if a falls within a range:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "a", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if 7 &lt;= a &lt;= 9:\n  pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["To test if a is in a given sequence:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "a", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if a in [3, 5, 42]:\n  pass\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n for a in range(10):\n    if a &gt; 6:\n        continue\n    print('yes')\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Based on your original code the direct \"pythonic\" replacement is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if not a in [7, 8, 9]:\n     print 'yes'\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if a not in [7, 8, 9]:\n     print 'yes'\n</code>\n</pre>\n", "senID": 3}, {"text": ["The latter reads a little better, so I guess it's a bit more \"pythonic\"."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"code": "<pre>\n<code>\n if a in [7,8,9]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Depending on what you want to do, the map() function can also be interesting:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "map()", "tag": "a", "pos": 0, "childList": [{"text": "map()", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/functions.html#map"}, {"text": "map()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n def _print(x):\n    print 'yes'\n\nmap(_print, [a for a in range(10) if a not in (7,8,9)])\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What about using lambda."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; f = lambda x: x not in (7, 8, 9) and print('yes')\n&gt;&gt;&gt; f(3)\nyes\n&gt;&gt;&gt; f(7)\nFalse\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Since the question is tagged as beginner, I'm going to add\nsome basic if-statement advice:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["are three independent if statements and the first two have no effect, the else refers only to"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["so if a is 7 or 8, the program prints \"yes\".", "For future use of if-else statement like this, make sure to use elif:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n if a == 7:\n    seven()\nelif a == 8:\n    eight()\nelif a == 9:\n    nine()\nelse:\n    print \"yes\"\n</code>\n</pre>\n", "senID": 3}, {"text": ["or use just one if-statement if they call for the same action:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n if a == 7 or a == 8 or a == 9:\n    seven_eight_or_nine()\nelse:\n    print \"yes\"\n</code>\n</pre>\n", "senID": 5}]]