[[{"text": ["It depends!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If the files and directories are distributed more or less evenly you could show rough process by assuming every toplevel directory is going to take the same amount of time.", "But if they are not distributed evenly you cannot find out about it cheaply.", "You either have to know roughly how populated every directory is in advance, or you have to os.walk the entire thing twice (but that is only useful if your actual processing takes much longer than the os.walk itself does)."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["That is: say you have 4 toplevel directories, and each one contains 4 files.", "If you assume every toplevel dir takes 25% of progress, and each file takes another 25% of the progress for that dir, you can show a nice progress indicator.", "But if the last subdir turns out to contain many more files than the first few your progress indicator will have hit 75% before you find out about it.", "You cannot really fix that if the os.walk itself is the bottleneck (not your processing) and it's an arbitrary directory tree (not one where you know in advance roughly how long every subtree is going to take)."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["And of course that's assuming the cost here is about the same for every file..."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Just show an indeterminate progress bar (i.e.", "the ones that show a blob bouncing back and forth or the barber pole effect).", "That way users know that the program is doing something useful but doesn't mislead them as far as time to complete and such."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I figured this out."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I used os.listdir to get a list of toplevel directories, and then used the .split function on the path that os.walk returned, returning the first level directory that it was currently in."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["That left me with a list of toplevel directories, which I could find the index of the current directory of os.walk, and compare the index returned with the length of the list, giving me a % complete.", ";)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This doesn't give me a smooth progress, because the level of work done in each directory can vary but smoothing out the progress indicator is of no concern for me.", "But it could easily be accomplished by extending the path checking deeper into the directory structure."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "smooth", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Here is the final code from getting my progress:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n def locateGameDirs(filelist, root=os.curdir): #Find a list of files, return directories.\n    toplevel = [folder for folder in os.listdir(root) if os.path.isdir(os.path.join(root, folder))] #List of top-level directories\n    fileset = set(filelist)\n\n    for path, dirs, files in os.walk(os.path.abspath(root)):\n\n        curdir = path.split('\\\\')[1] #The directory os.walk is currently in.\n\n        try: #Thrown here because there's a nonexistant(?) first entry.\n            youarehere = toplevel.index(curdir)\n            progress = int(((youarehere)/len(toplevel))*100)\n        except:\n            pass\n\n        for filename in returnMatches(filelist, [k.lower() for k in files]):\n            yield filename, path + \"\\\\\", progress\n</code>\n</pre>\n", "senID": 5}, {"text": ["And right now for debugging purposes I'm doing this further in the code:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n for wow in locateGameDirs([\"wow.exe\", \"firefox.exe\", \"vlc.exe\"], \"C:\\\\\"):\n    print wow\n</code>\n</pre>\n", "senID": 7}, {"text": ["Is there a nice little way to get rid of that try/except?", "; it seems the first iteration of path gives me nothing..."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["Do it in two passes: first count how many total files/folders are in the tree, and then during the second pass do actual processing."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["You need to know the total number of files to do a meaningful progress indicator.", "You can get the number of files like this"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n len(list(os.walk(os.path.abspath(root))))\n</code>\n</pre>\n", "senID": 1}, {"text": ["but that is going to take some time and you probably need a progress indicator for that..."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["To find the number of files really quickly you'd need a filesystem which keeps track of the number of files for you."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Perhaps you can save the total from a previous run and use that as an estimate"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["I suggest you avoid walking the directory.", "Instead use an indexed-based app for quickly finding files.", "You can use the app's command-line interface via subprocess and find the files almost instantaneously."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["On Windows, see Everything.", "On UNIX, check out locate.", "Not sure about Mac, but I'm sure there's an option there too."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Everything", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.voidtools.com/"}]}], [{"text": ["as I said in the comment, the performance bottle neck likely lies outside of the locate function.", "your returnMatches is a fairly expensive function.", "I think you'd be better off replacing it with the following code:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "locate", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "returnMatches", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n def locate(filelist, root=os.curdir)\n    fileset = set(filelist)            # if possible, pass the set instead of the list as a first argument\n    for path, dirs, files in os.walk(os.path.abspath(root)):\n            if any(file.lower() in fileset for file in files):\n                yield path + '\\\\'\n</code>\n</pre>\n", "senID": 1}, {"text": ["This way you reduce the number of wasteful operations, yield once per file in the directory (which I think is what you actually indented to do) and you can forget about the progress at the same time.", "I don't think that progress would be an expected feature of the interface anyway."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Thinking out of the box here...what if you did it based on size:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "size", "childNum": 1, "tag": "strong", "pos": 0, "childList": [{"text": "size", "tag": "em"}]}, {"text": "size", "childNum": 0, "tag": "em", "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "Use ", "tag": "none", "senID": 1}, {"text": "As you walk, check the size of each file and decrement from your total_size (giving you remaining_size)", "tag": "none", "senID": 2}, {"text": "pct_complete = (total_size - remaining_size)/total_size", "tag": "none", "senID": 3}]}, {"text": ["Thoughts?"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["-aj"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["One optimisation you could do - you are converting filelist into a set on every call to returnMatches, even though it never changes.", "move the conversion to the start of the 'locate' function and pass the set in on every iteration."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Well, this was fun.", "Here is another silly way of doing it, but as everything else, it only calculates the right progress for uniform paths."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os, sys, time\n\ndef calc_progress(progress, root, dirs):\n    prog_start, prog_end, prog_slice = 0.0, 1.0, 1.0\n\n    current_progress = 0.0\n    parent_path, current_name = os.path.split(root)\n    data = progress.get(parent_path)\n    if data:\n        prog_start, prog_end, subdirs = data\n        i = subdirs.index(current_name)\n        prog_slice = (prog_end - prog_start) / len(subdirs)\n        current_progress = prog_slice * i + prog_start\n\n        if i == (len(subdirs) - 1):\n            del progress[parent_path]\n\n    if dirs:\n        progress[root] = (current_progress, current_progress+prog_slice, dirs)\n\n    return current_progress\n\ndef walk(start_root):\n    progress = {}\n    print 'Starting with {start_root}'.format(**locals())\n\n    for root, dirs, files in os.walk(start_root):\n        print '{0}: {1:%}'.format(root[len(start_root)+1:], calc_progress(progress, root, dirs))\n</code>\n</pre>\n", "senID": 1}]]