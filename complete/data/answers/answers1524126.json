[[{"text": ["Simple:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n l = ['exiv2-devel', 'mingw-libs', 'tcltk-demos', 'fcgi', 'netcdf', \n    'pdcurses-devel',     'msvcrt', 'gdal-grass', 'iconv', 'qgis-devel', \n    'qgis1.1', 'php_mapscript']\n\nsplit = len(l)/2\nl1 = l[0:split]\nl2 = l[split:]\nfor key, value in zip(l1,l2):\n    print '%-20s %s' % (key, value)         #python &lt;2.6\n    print \"{0:&lt;20s} {1}\".format(key, value) #python 2.6+\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If the data is in the format you have provided, it is a little more work"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n >>> d = ['exiv2-devel', 'mingw-libs', 'tcltk-demos', 'fcgi', 'netcdf', \n...     'pdcurses-devel',     'msvcrt', 'gdal-grass', 'iconv', 'qgis-devel', \n...     'qgis1.1', 'php_mapscript']\n>>> print \"\\n\".join(\"%-20s %s\"%(d[i],d[i+len(d)/2]) for i in range(len(d)/2))\nexiv2-devel          msvcrt\nmingw-libs           gdal-grass\ntcltk-demos          iconv\nfcgi                 qgis-devel\nnetcdf               qgis1.1\npdcurses-devel       php_mapscript\n</code>\n</pre>\n", "senID": 1}], [{"text": ["See formatting-a-list-of-text-into-columns, "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "formatting-a-list-of-text-into-columns", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/171662/formatting-a-list-of-text-into-columns"}]}, {"text": ["A general solution, handles any number of columns and odd lists.", "Tab characters separate columns, using generator expressions to save space."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def fmtcols(mylist, cols):\n    lines = (\"\\t\".join(mylist[i:i+cols]) for i in xrange(0,len(mylist),cols))\n    return '\\n'.join(lines)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The way Aaron has done it can work with more than two colums"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n >>> l = ['exiv2-devel', 'mingw-libs', 'tcltk-demos', 'fcgi', 'netcdf', \n...     'pdcurses-devel',     'msvcrt', 'gdal-grass', 'iconv', 'qgis-devel', \n...     'qgis1.1', 'php_mapscript']\n>>> cols = 4\n>>> split=[l[i:i+len(l)/cols] for i in range(0,len(l),len(l)/cols)]\n>>> for row in zip(*split):\n...  print \"\".join(str.ljust(i,20) for i in row)\n... \nexiv2-devel         fcgi                msvcrt              qgis-devel          \nmingw-libs          netcdf              gdal-grass          qgis1.1             \ntcltk-demos         pdcurses-devel      iconv               php_mapscript\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I had a problem similar to Matt's, though it has been solved with the code provided by nosklo.", "Unfortunately I do not actually understand how this code works."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In particular I have struggled to figure out the meaning and logic of the values 'pos' and 'pos + size' in the following bit of nosklo's solution:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n slices = [islice(sequence, pos, pos + size) \n          for pos in xrange(0, len(sequence), size)]\nreturn izip_longest(fillvalue='', *slices)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I've looked up the islice iterator on the official python website and realise that it takes the following arguments (seq, [start], stop, [,step]), so I understand that the 'sequence' argument in nosklo's code refers to matt's list, but I am lost as to what 'pos' is.", "In my effot to find out I added in a 'print pos' command to see what value pos took and I generally got a number that was half of the number of items in the array - but I can't figure out why this is so and how this value gets used.", "Also, the '*slices' argument  in izip_longest(fillvalue='', *slices) doesn't make any sense to me either.", "Can anyone enlighten me?"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n from itertools import izip_longest, islice\nL = ['exiv2-devel', 'mingw-libs', 'tcltk-demos', 'fcgi', 'netcdf', \n    'pdcurses-devel',     'msvcrt', 'gdal-grass', 'iconv', 'qgis-devel', \n    'qgis1.1', 'php_mapscript']\n\ndef columnize(sequence, columns=2):\n    size, remainder = divmod(len(sequence), columns)\n    if remainder: \n        size += 1\n    slices = [islice(sequence, pos, pos + size) \n              for pos in xrange(0, len(sequence), size)]\n    return izip_longest(fillvalue='', *slices)\n\nfor values in columnize(L):\n    print ' '.join(value.ljust(20) for value in values)\n</code>\n</pre>\n", "senID": 0}]]