[[{"text": ["Add a set call:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "set", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n cnt = Counter()\nfor word in wordList:\n      for letter in set(word):\n          cnt[letter]+=1\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n cnt = Counter()\nfor words in wordList:\n      for letters in set(words):\n          cnt[letters]+=1\n</code>\n</pre>\n", "senID": 0}], [{"text": ["An alternative approach using the iterator combinators in itertools:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import collections\nimport itertools\n\ncnt = collections.Counter(itertools.chain.from_iterable(itertools.imap(set, wordList)))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n cnt = Counter()\nfor word in wordList:\n    lSet = set(word)\n    for letter in lSet:\n        cnt[letter] +=1\n</code>\n</pre>\n", "senID": 0}], [{"text": ["You can eliminate a for with update, which updates count from an iterable (in this case, a string):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "for", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "update", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n from collections import Counter\nwords = 'happy harpy hasty'.split()\nc=Counter()\nfor word in words:\n    c.update(set(word))\nprint c.most_common()\nprint [a[0] for a in c.most_common()]\n</code>\n</pre>\n", "senID": 1}, {"code": "<pre>\n<code>\n [('a', 3), ('h', 3), ('y', 3), ('p', 2), ('s', 1), ('r', 1), ('t', 1)]\n['a', 'h', 'y', 'p', 's', 'r', 't']\n</code>\n</pre>\n", "senID": 2}], [{"text": ["This creates a set from each word and passes them to the constructor of Counter."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import chain, imap\n&gt;&gt;&gt; from operator import itemgetter\n&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; words = 'happy', 'harpy', 'hasty'\n&gt;&gt;&gt; counter = Counter(chain.from_iterable(imap(set, words)))\n&gt;&gt;&gt; map(itemgetter(0), counter.most_common())\n['a', 'h', 'y', 'p', 's', 'r', 't']\n</code>\n</pre>\n", "senID": 1}]]