[[{"text": ["Asking for the type() of a value in Python is not going to tell you whether it is a round integer or not.", "The resulting type of a calculation doesn't change type depending on the answer.", "(But in Python 2, the type of the answer in division depends on the type of the inputs.", "In Python 3, the type after / is always float, while the type after // depends on the type of the inputs."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "type()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "type", "childNum": 0, "tag": "em", "pos": 1, "childList": []}, {"text": "/", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "childList": []}, {"text": "//", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["To test for an integer divisible by 5, use the modulo operator:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if a % 5 == 0:\n    c = c + 1\n</code>\n</pre>\n", "senID": 2}, {"text": ["Also, avoid using the is operator with integers.", "Use b != 0 to compare with zero, instead of b is not 0 (see Python \u201cis\u201d operator behaves unexpectedly with integers for the gory details)."], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "is", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b != 0", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "b is not 0", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://stackoverflow.com/questions/306313/python-is-operator-behaves-unexpectedly-with-integers", "text": "Python \u201cis\u201d operator behaves unexpectedly with integers", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I suggest you use"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre class=\"lang-py prettyprint-override\">\n<code>\n if x % 5 == 0\n    ...\n</code>\n</pre>\n", "senID": 1}, {"text": ["to find those exactly divisible by 5.", "% is modulo operator, it gives the remainder to the integer division, this remainder is only 0 where the division is exact."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["You need to use the mod '%' operator.", "Example"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["10 % 5 = 0"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["6 % 5 = 1"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Since you're newbie, here's a short snippet as you may need a helping hand."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n count = 0\nfor i in range(1,10):\n    if i % 5 == 0:\n        count += 1\nprint count\n</code>\n</pre>\n", "senID": 4}], [{"text": ["A slightly different way to do this is:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def five():\n    count = 0\n    for i in range(1, 10):\n        if i%5 == 0:\n            count += 1\n    print (count, end='')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["There is a method to tell whether a float is integral (i.e.", "x == int(x)):"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "float", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "x == int(x)", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; (1.0).is_integer()\nTrue\n&gt;&gt;&gt; (1.1).is_integer()\nFalse\n</code>\n</pre>\n", "senID": 1}, {"text": ["So, you can replace type(b) == int with b.is_integer() and your script will work fine."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "type(b) == int", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "b.is_integer()", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["How about a one liner:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sum([0 if x%5 else 1 for x in range(1,10)])\n</code>\n</pre>\n", "senID": 1}]]