[[{"text": ["You can set arbitrary HTML attributes on a widget using its \"attrs\" property."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\"attrs\" property", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs"}]}, {"text": ["You can do this in the Django admin using formfield_for_dbfield:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class MyModelAdmin(admin.ModelAdmin):\n  def formfield_for_dbfield(self, db_field, **kwargs):\n    field = super(ContentAdmin, self).formfield_for_dbfield(db_field, **kwargs)\n    if db_field.name == 'somefield':\n      field.widget.attrs['class'] = 'someclass ' + field.widget.attrs.get('class', '')\n    return field\n</code>\n</pre>\n", "senID": 2}, {"text": ["or with a custom Widget subclass and the formfield_overrides dictionary:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "formfield_overrides dictionary", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.formfield_overrides"}]}, {"code": "<pre>\n<code>\n class DifferentlySizedTextarea(forms.Textarea):\n  def __init__(self, *args, **kwargs):\n    attrs = kwargs.setdefault('attrs', {})\n    attrs.setdefault('cols', 80)\n    attrs.setdefault('rows', 5)\n    super(DifferentlySizedTextarea, self).__init__(*args, **kwargs)\n\nclass MyModelAdmin(admin.ModelAdmin):\n  formfield_overrides = { models.TextField: {'widget': DifferentlySizedTextarea}}\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You should use ModelAdmin.formfield_overrides "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "ModelAdmin.formfield_overrides", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/contrib/admin/"}]}, {"text": ["It's quite easy - in admin.py define:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class YourModelAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.CharField: {'widget': TextInput(attrs={'size':'20'})},\n        models.TextField: {'widget': Textarea(attrs={'rows':4, 'cols':40})},\n    }\n\nadmin.site.register(YourModel, YourModelAdmin)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Don't forget that you should import appropriate widget classes from django.forms, in this case:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n from django.forms import TextInput, Textarea\n</code>\n</pre>\n", "senID": 4}], [{"text": ["A quick and dirty option is to simply provide a custom template for the model in question. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you create a template named admin/&lt;app label&gt;/&lt;class name&gt;/change_form.html then the admin will use that template instead of the default.", "That is, if you've got a model named Person in an app named people, you'd create a template named admin/people/person/change_form.html."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "admin/&lt;app label&gt;/&lt;class name&gt;/change_form.html", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Person", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "people", "childNum": 0, "tag": "code", "childList": []}, {"text": "admin/people/person/change_form.html", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["All the admin templates have an extrahead block you can override to place stuff in the &lt;head&gt;, and the final piece of the puzzle is the fact that every field has an HTML id of id_&lt;field-name&gt;."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "extrahead", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "&lt;head&gt;", "childNum": 0, "tag": "code", "childList": []}, {"text": "id_&lt;field-name&gt;", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["So, you could put something like the following in your template:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n {% extends \"admin/change_form.html\" %}\n\n{% block extrahead %}\n  {{ block.super }}\n  &lt;style type=\"text/css\"&gt;\n    #id_my_field { width: 100px; }\n  &lt;/style&gt;\n{% endblock %}\n</code>\n</pre>\n", "senID": 4}], [{"text": ["If you want to change the attributes on a per-field instance, you can add the \"attrs\" property directly in to your form entries."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["for example:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class BlogPostForm(forms.ModelForm):\n    title = forms.CharField(label='Title:', max_length=128)\n    body = forms.CharField(label='Post:', max_length=2000, \n        widget=forms.Textarea(attrs={'rows':'5', 'cols': '5'}))\n\n    class Meta:\n        model = BlogPost\n        fields = ('title', 'body')\n</code>\n</pre>\n", "senID": 2}, {"text": ["The \"attrs\" property basically passes along the HTML markup that will adjust the form field.", "Each entry is a tuple of the attribute you would like to override and the value you would like to override it with.", "You can enter as many attributes as you like as long as you separate each tuple with a comma."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["It's well described in Django FAQ:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Django FAQ", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://code.djangoproject.com/wiki/NewformsHOWTO#Q%3AHowdoIchangetheattributesforawidgetonafieldinmymodel."}]}, {"text": ["Q: How do I change the attributes for a widget on a field in my model?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Q:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["A: Override the formfield_for_dbfield in the ModelAdmin/StackedInline/TabularInline class "], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "A:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class MyOtherModelInline(admin.StackedInline):\n    model = MyOtherModel\n    extra = 1\n\n    def formfield_for_dbfield(self, db_field, **kwargs):\n        # This method will turn all TextFields into giant TextFields\n        if isinstance(db_field, models.TextField):\n            return forms.CharField(widget=forms.Textarea(attrs={'cols': 130, 'rows':30, 'class': 'docx'}))\n        return super(MyOtherModelInline, self).formfield_for_dbfield(db_field, **kwargs)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I had a similar problem with TextField.", "I'm using Django 1.0.2 and wanted to change the default value for 'rows' in the associated textarea.", "formfield_overrides doesn't exist in this version.", "Overriding formfield_for_dbfield worked but I had to do it for each of my ModelAdmin subclasses or it would result in a recursion error.", "Eventually, I found that adding the code below to models.py works:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.forms import Textarea\n\nclass MyTextField(models.TextField):\n#A more reasonably sized textarea                                                                                                            \n    def formfield(self, **kwargs):\n         kwargs.update(\n            {\"widget\": Textarea(attrs={'rows':2, 'cols':80})}\n         )\n         return super(MyTextField, self).formfield(**kwargs)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then use MyTextField instead of TextField when defining your models.", "I adapted it from this answer to a similar question."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "this answer", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/430592/djang-admin-charfield-as-textarea/430652#430652"}]}], [{"text": ["You can always set your fields sizes in a custom stylesheet and tell Django to use that for your ModelAdmin class:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class MyModelAdmin(ModelAdmin):\n    class Media:\n        css = {\"all\": (\"my_stylesheet.css\",)}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The best way I found is something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class NotificationForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs): \n        super(NotificationForm, self).__init__(*args, **kwargs)\n        self.fields['content'].widget.attrs['cols'] = 80\n        self.fields['content'].widget.attrs['rows'] = 15\n        self.fields['title'].widget.attrs['size'] = 50\n    class Meta:\n        model = Notification\n</code>\n</pre>\n", "senID": 1}, {"text": ["Its much better for ModelForm than overriding fields with different widgets, as it preserves name and help_text attributes and also default values of model fields, so you don't have to copy them to your form. "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "name", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "help_text", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["The Inline example is wrong... see:\nhttp://yuji.wordpress.com/2009/09/14/django-admin-inline-styling-widget-attrs-overriding-widgets/"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://yuji.wordpress.com/2009/09/14/django-admin-inline-styling-widget-attrs-overriding-widgets/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://yuji.wordpress.com/2009/09/14/django-admin-inline-styling-widget-attrs-overriding-widgets/"}]}], [{"text": ["Same answer as msdin but with TextInput instead of TextArea:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.forms import TextInput\n\nclass ShortTextField(models.TextField):\n    def formfield(self, **kwargs):\n         kwargs.update(\n            {\"widget\": TextInput(attrs={'size': 10})}\n         )\n         return super(ShortTextField, self).formfield(**kwargs)\n</code>\n</pre>\n", "senID": 1}]]