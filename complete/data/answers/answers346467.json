[[{"text": ["Django's contributed humanize application does this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "humanize", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/contrib/humanize/#ref-contrib-humanize"}]}, {"code": "<pre>\n<code>\n {% load humanize %}\n{{ my_num|intcomma }}\n</code>\n</pre>\n", "senID": 1}, {"text": ["Be sure to add 'django.contrib.humanize' to your INSTALLED_APPS list in settings.py"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Regarding Ned Batchelder's solution, here it is with 2 decimal points and a dollar sign."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from django.contrib.humanize.templatetags.humanize import intcomma\n\ndef currency(dollars):\n    dollars = float(dollars)\n    return \"$%s%s\" % (intcomma(int(dollars)), (\"%0.2f\" % dollars)[-3:])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then you can"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n {{my_dollars | currency}}\n</code>\n</pre>\n", "senID": 3}], [{"text": ["If you don't want to get involved with locales here is a function that formats numbers:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def int_format(value, decimal_points=3, seperator=u'.'):\n    value = str(value)\n    if len(value) &lt;= decimal_points:\n        return value\n    # say here we have value = '12345' and the default params above\n    parts = []\n    while value:\n        parts.append(value[-decimal_points:])\n        value = value[:-decimal_points]\n    # now we should have parts = ['345', '12']\n    parts.reverse()\n    # and the return value should be u'12.345'\n    return seperator.join(parts)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Creating a custom template filter from this function is trivial."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "custom template filter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#writing-custom-template-filters"}]}], [{"text": ["Be aware that changing locale is process-wide and not thread safe (iow., can have side effects or can affect other code executed within the same process)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["My proposition: check out the Babel package.", "Some means of integrating with Django templates are available."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Babel", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://babel.edgewall.org/"}]}], [{"text": ["As far as I can tell it is not currently possible: Django Users: locale aware number formats"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Django Users: locale aware number formats", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://groups.google.com/group/django-users/browse_thread/thread/780058f724cb96e4"}]}], [{"text": ["The humanize app offers a nice and a quick way of formatting a number but if you need to use a separator different from the comma, it's simple to just reuse the code from the humanize app, replace the separator char, and create a custom filter.", "For example, use space as a separator:"], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "humanize app", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.djangoproject.com/en/dev/ref/contrib/humanize/#ref-contrib-humanize"}, {"text": "the code from the humanize app", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "https://code.djangoproject.com/browser/django/trunk/django/contrib/humanize/templatetags/humanize.py"}, {"text": "create a custom filter", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "https://docs.djangoproject.com/en/dev/howto/custom-template-tags/#writing-custom-template-filters"}, {"text": "space", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n @register.filter('intspace')\ndef intspace(value):\n    \"\"\"\n    Converts an integer to a string containing spaces every three digits.\n    For example, 3000 becomes '3 000' and 45000 becomes '45 000'.\n    See django.contrib.humanize app\n    \"\"\"\n    orig = force_unicode(value)\n    new = re.sub(\"^(-?\\d+)(\\d{3})\", '\\g&lt;1&gt; \\g&lt;2&gt;', orig)\n    if orig == new:\n        return new\n    else:\n        return intspace(new)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Well I couldn't find a Django way, but I did find a python way from inside my model:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def format_price(self):\n    import locale\n    locale.setlocale(locale.LC_ALL, '')\n    return locale.format('%d', self.price, True)\n</code>\n</pre>\n", "senID": 1}]]