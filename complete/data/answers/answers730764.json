[[{"code": "<pre>\n<code>\n try:\n  doSomething()\nexcept: \n  pass\n</code>\n</pre>\n", "senID": 0}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n try:\n  doSomething()\nexcept Exception: \n  pass\n</code>\n</pre>\n", "senID": 2}, {"text": ["The difference is, that the first one will also catch KeyboardInterrupt, SystemExit and stuff like that, which are derived directly from exceptions.BaseException, not exceptions.Exception.", "See documentation for details:"], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "KeyboardInterrupt", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "SystemExit", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "exceptions.BaseException", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "exceptions.Exception", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}]}, {"tag": "ul", "num": 2, "lis": [{"text": "try statement &mdash; ", "tag": "none", "senID": 4}, {"text": "exceptions &mdash; ", "tag": "none", "senID": 5}]}], [{"text": ["It depends on what you mean by \"handling."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If you mean to catch it without taking any action, the code you posted will work."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you mean that you want to take action on an exception without stopping the exception from going up the stack, then you want something like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n try:\n    do_something()\nexcept:\n    handle_exception()\n    raise  #re-raise the exact same exception that was thrown\n</code>\n</pre>\n", "senID": 3}], [{"text": ["It's generally considered best-practice to only catch the errors you are interested in, in the case of shutil.rmtree it's probably OSError:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "shutil.rmtree", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "OSError", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; shutil.rmtree(\"/fake/dir\")\nTraceback (most recent call last):\n    [...]\nOSError: [Errno 2] No such file or directory: '/fake/dir'\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to silently ignore that error, you would do.."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n try:\n    shutil.rmtree(path)\nexcept OSError:\n    pass\n</code>\n</pre>\n", "senID": 3}, {"text": ["Why?", "Say you (somehow) accidently pass the function an integer instead of a string, like.."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n shutil.rmtree(2)\n</code>\n</pre>\n", "senID": 5}, {"text": ["It will give the error \"TypeError: coercing to Unicode: need string or buffer, int found\" - you probably don't want to ignore that, which can be difficult to debug.."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["If you defiantly want to ignore all errors, catch Exception rather than a bare catch: statement.", "Again, why?"], "childNum": 3, "tag": "p", "senID": 7, "childList": [{"text": "defiantly", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "Exception", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "catch:", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["It catches every exception, include the SystemExit exception which sys.exit() uses, for example:"], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "every", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "SystemExit", "childNum": 0, "tag": "code", "childList": []}, {"text": "sys.exit()", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; try:\n...     sys.exit(1)\n... except:\n...     pass\n... \n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 9}, {"text": ["..compared to the following, which correctly exits:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; try:\n...     sys.exit(1)\n... except Exception:\n...     pass\n... \nshell:~$\n</code>\n</pre>\n", "senID": 11}], [{"text": ["For completeness:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; def divide(x, y):\n...     try:\n...         result = x / y\n...     except ZeroDivisionError:\n...         print \"division by zero!\"\n...     else:\n...         print \"result is\", result\n...     finally:\n...         print \"executing finally clause\"\n</code>\n</pre>\n", "senID": 1}, {"text": ["...from the python tutorial."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "python tutorial", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/errors.html"}]}], [{"text": ["@When you just want to do a try catch without handling the exception, how do you do it in Python?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This will help you to print what exception is:( i.e.", "try catch without handling the exception and print the exception."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\nimport sys\n....\ntry:\n    doSomething()\nexcept:\n    print \"Unexpected error:\", sys.exc_info()[0]\n\n...\n</pre>\n", "senID": 2}, {"text": ["reg,\nTilokchan"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"code": "<pre>\n<code>\n try:\n      doSomething()\nexcept Exception: \n    pass\nelse:\n      stuffDoneIf()\n      TryClauseSucceeds()\n</code>\n</pre>\n", "senID": 0}, {"text": ["FYI the else clause can go after all exceptions and will only be run if the code in the try doesn't cause an exception. "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["in python, we handle exceptions similar to other language but the difference is some syntex difference, for example-"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["try:\n    #Your Code in which exception can occur\nexcept :\n    #we can call that exception here also, like ZeroDivisionError()\n    #now your code "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["finally:\n    #YOur Code.."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]