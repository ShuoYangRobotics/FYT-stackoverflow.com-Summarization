[[{"code": "<pre>\n<code>\n sed 's/.*/\"&amp;\",/'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["For the reference, in case someone wants to do the same thing using python.", "There is a handy module fileinput that could be used like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "fileinput", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/fileinput.html"}]}, {"code": "<pre>\n<code>\n import fileinput\nimport sys, os\n\nfor line in fileinput.input(inplace=True):\n    sys.stdout.write('\"%s\",%s' % (line.rstrip(os.linesep), os.linesep))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then run this as a script:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n python myscript.py file1 file2 file3\n</code>\n</pre>\n", "senID": 3}, {"text": ["That will change the files inplace for you."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Be a true unix geek: use sed!"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sed 's/^/\"/; s/$/\",/;' &lt; your_text_file\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you want to escape existing double quotes with backslashes, use 's/\"/\\\\\"/g; s/^/\"/; s/$/\",/;' as the pattern."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "'s/\"/\\\\\"/g; s/^/\"/; s/$/\",/;'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["sed is ideally suited for this type of task.", "Check out a ludicrously long list of examples."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "sed", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Sed"}, {"text": "list of examples", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://sed.sourceforge.net/sed1line.txt"}]}], [{"text": ["there is no need to construct regular expression(with backreferencing) for this task.", "Its an expensive operation since you are not going to change something in the line.", "Easiest way is just to print them out."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n awk '{print \"\\042\"$0\"\\042,\"}' file\n</code>\n</pre>\n", "senID": 1}, {"text": ["Results on operation on a big file:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ head -5 file\nthis is line\nthis is line\nthis is line\nthis is line\nthis is line\n$ wc -l &lt; file\n9545088\n\n$ time  awk '{print \"\\042\"$0\"\\042,\"}' file  &gt;/dev/null\n\nreal    0m15.574s\nuser    0m15.327s\nsys     0m0.172s\n\n$ time sed 's/.*/\"&amp;\",/' file &gt; /dev/null\n\nreal    0m31.717s\nuser    0m31.465s\nsys     0m0.157s\n\n$ time perl -p -e 's/^(.*)$/\\\"$1\\\",/g'  file &gt;/dev/null\n\nreal    0m36.576s\nuser    0m36.006s\nsys     0m0.360s\n</code>\n</pre>\n", "senID": 3}], [{"text": ["A number of easy ways to do it...  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A simple perl oneliner:  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n perl -pi -e 's/^(.*)$/\\\"$1\\\",/g' /path/to/your/file\n</code>\n</pre>\n", "senID": 2}, {"text": ["To explain a bit, the regex ^(.", "*)$ grabs everything (the (.", "*)) between the start of the line (^) and the end of the line ($), then uses the $1 match group variable to reconstruct it with the quotes and comma."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "^(.*)$", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "(.*)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "^", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "$", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "$1", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}], [{"text": ["In Bash:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n while read line\n    do\n    echo \"\\\"${line}\\\",\"\ndone &lt; inputfile\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Python"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n for line in open(\"file\"):\n  line=line.strip()\n  print '\"%s\",'  % line\n</code>\n</pre>\n", "senID": 1}], [{"text": ["sh + awk are nice here too..."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n !/bin/sh\nfor FILE in \"$@\"\ndo\n   awk '{print \"\\\" $0 \"\\\",\"}' &lt; $FILE &gt; $FILE.tmp\n   mv $FILE.tmp $FILE\ndone\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In vi:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n :%s/^\\(.*\\)$/\"\\1\",/g\n</code>\n</pre>\n", "senID": 1}]]