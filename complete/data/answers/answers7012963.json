[[{"text": ["It appears that what you want is"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n line.split(':',4)[4].split()[0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["The numeric parameter to split indicates the maximum number of splits that will occur.", "So you have:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; line='080821_HWI-EAS301_0002_30ALBAAXX:1:8:1649:2027 ...'\n&gt;&gt;&gt; line.split(':',4)\n['080821_HWI-EAS301_0002_30ALBAAXX', '1', '8', '1649', '2027 ...']\n</code>\n</pre>\n", "senID": 3}, {"text": ["If you pull element [1] out of this return value, you get '1'.", "I don't see why you are surprised by this."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Since you are allowing up to 4 splits, and the item you want will be the last one, the subscript you want is [4]:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; line.split(':',4)[4]\n'2027 ...'\n</code>\n</pre>\n", "senID": 6}, {"text": ["Then you can split that on space and get element [0] from it to produce your result."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["You get the same result if you don't pass a split limit value at all:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; line.split(':')[4].split()[0]\n'2027'\n</code>\n</pre>\n", "senID": 9}], [{"text": ["Try this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/python\n\nline = '080821_HWI-EAS301_0002_30ALBAAXX:1:8:1649:2027  83  chr10   42038185    255 36M =   42037995    -225    GCCAGGTTTAATAAATTATTTATAGAATACTGCATC    @?DDEAEFDAD@FBG@CDA?DBCDEECD@D?CBA&gt;A    NM:i:0  MD:Z:36'\n\nprint line.split(':')[4].split()[0]\n</code>\n</pre>\n", "senID": 1}, {"text": ["I'm not sure why you're trying to access the token containing 2027 like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n line.split(':',4)\n</code>\n</pre>\n", "senID": 3}, {"text": ["rather than this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n line.split(':')[4]\n</code>\n</pre>\n", "senID": 5}, {"text": ["I think that you might be confused about how split works.", "The last parameter to the Python split function is the maximum number of splits to perform. "], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Python split function", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html"}]}], [{"text": ["The second argument to split is the maximum number of splits to exercise, so you probably don't want to be using it in this case.", "To access the 5th element after performing the split, do this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "split", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n line.split(\":\")[4]\n</code>\n</pre>\n", "senID": 1}, {"text": ["Anyway, what you probably want is to first split by whitespace (you can do this by using no arguments), and then split by colons.", "This can be done on one line like this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n line.split()[0].split(\":\")[4]\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You can use instead:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s.split()[0].split(':')[4]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Split on the white space first.", "Then split the first element in the resultant list based on the separator (here: ':')."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n line.split()[0].split(':')[4]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Do you must use split?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "must", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "split", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I ask this because I've found regex to be a much better tool to use when I just need to grab a specific substring.", "It's not the easiest thing to learn and does appear very unapproachable at first, but you have to pay the price of learning it only once and it is an investment worth making.", ":)"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Python homepage has a good introduction of it."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Python homepage", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/howto/regex.html"}]}, {"text": ["P.S.", "2027 will be matched by the following regex .*?", ":([0-9]+)\\s+"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "2027", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": ".*?:([0-9]+)\\s+", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["I presume that you will do numerous extractions of information from strings in the future.", "Then, my advice is to learn to use the regex tool, it will be inevitable."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Or you'll have to learn and use specialized library to do treatments of string in the field of genomics."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Simple solution to your present problem with module re  :"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "re", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n line = '''080821_HWI-EAS301_0002_30ALBAAXX:1:8:1649:2027  83  chr10\n42038185    255 36M =   42037995    -225\nGCCAGGTTTAATAAATTATTTATAGAATACTGCATC    @?DDEAEFDAD@FBG@CDA?\nDBCDEECD@D?CBA&gt;A    NM:i:0  MD:Z:36'''\n\nimport re\n\nprint re.search(':(\\d+) ',line).group(1)\n</code>\n</pre>\n", "senID": 3}, {"text": ["If there are blanks before the fourth ':' the regex's pattern will be:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n line = '''080821_HWI-EAS301_0002_30AL BAAXX:1:8     :1649:2027  83  chr10\n42038185    255 36M =   42037995    -225\nGCCAGGTTTAATAAATTATTTATAGAATACTGCATC    @?DDEAEFDAD@FBG@CDA?\nDBCDEECD@D?CBA&gt;A    NM:i:0  MD:Z:36'''\n\nimport re\n\nprint re.search('(:[^:]+){3}:(\\d+)',line).group(2)\n</code>\n</pre>\n", "senID": 5}, {"text": ["(:[^:]+) matches a ':' followed by as many characters different from ':' that may follow"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "(:[^:]+)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["{3} says that this match must be performed 3 times"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "{3}", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["then the fourth ':' must be encountered, followed by the searched number matched by \\d+ ; there is no more need to indicate that there must be a blank after the number, because \\d+ will stop to match in the string as soon as a non-digit character will be encountered"], "childNum": 3, "tag": "p", "senID": 8, "childList": [{"text": "':'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "\\d+", "childNum": 0, "tag": "code", "childList": []}, {"text": "\\d+", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Parentheseses define groups.", "Here the desired number is catched by the second group"], "childNum": 0, "tag": "p", "senID": 9, "childList": []}]]