[[{"text": ["Filter the result using os.path.isdir() (and use os.path.join() to get the real path):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; [ name for name in os.listdir(thedir) if os.path.isdir(os.path.join(thedir, name)) ]\n['ctypes', 'distutils', 'encodings', 'lib-tk', 'config', 'idlelib', 'xml', 'bsddb', 'hotshot', 'logging', 'doc', 'test', 'compiler', 'curses', 'site-packages', 'email', 'sqlite3', 'lib-dynload', 'wsgiref', 'plat-linux2', 'plat-mac']\n</code>\n</pre>\n", "senID": 1}], [{"text": ["directories=[d for d in os.listdir(os.getcwd()) if os.path.isdir(d)]"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n os.walk('.').next()[1]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Note that, instead of doing os.listdir(os.getcwd()), it's preferable to do os.listdir(os.path.curdir).", "One less function call, and it's as portable."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "os.listdir(os.getcwd())", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.listdir(os.path.curdir)", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["So, to complete the answer, to get a list of directories in a folder:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def listdirs(folder):\n    return [d for d in os.listdir(folder) if os.path.isdir(os.path.join(folder, d))]\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you prefer full pathnames, then use this function:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def listdirs(folder):\n    return [\n        d for d in (os.path.join(folder, d1) for d1 in os.listdir(folder))\n        if os.path.isdir(d)\n    ]\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Filter the list using os.path.isdir to detect directories."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; filter (os.path.isdir, os.listdir(os.getcwd()))`\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Like so?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": [">>> [path for path in os.listdir(os.getcwd()) if os.path.isdir(path)]"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"code": "<pre>\n<code>\n [x for x in os.listdir(somedir) if os.path.isdir(os.path.join(somedir, x))]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["being a newbie here i can't yet directly comment but here is a small correction i'd like to add to the following part of \u03a4\u0396\u03a9\u03a4\u0396\u0399\u039f\u03a5's answer :"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "\u03a4\u0396\u03a9\u03a4\u0396\u0399\u039f\u03a5's answer", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/141291/how-to-list-only-top-level-directories-in-python/142368#142368"}]}, {"text": ["i believe that the inner construct needs to be a list instead of a tuple and therefore should read like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def listdirs(folder):  \n  return [\n    d for d in [os.path.join(folder, d1) for d1 in os.listdir(folder)]\n    if os.path.isdir(d)\n]\n</code>\n</pre>\n", "senID": 2}, {"text": ["otherwise i get a syntax error."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]