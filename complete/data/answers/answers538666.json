[[{"text": ["As you know, you can get the seconds from a timedelta object by accessing the .seconds attribute."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".seconds", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["You can convert that to hours and remainder by using a combination of modulo and subtraction:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # arbitrary number of seconds\ns = 13420\n# hours\nhours = s // 3600 \n# remaining seconds\ns = s - (hours * 3600)\n# minutes\nminutes = s // 60\n# remaining seconds\nseconds = s - (minutes * 60)\n# total time\nprint '%s:%s:%s' % (hours, minutes, seconds)\n# result: 3:43:40\n</code>\n</pre>\n", "senID": 2}, {"text": ["However, python provides the builtin function divmod() which allows us to simplify this code:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n s = 13420\nhours, remainder = divmod(s, 3600)\nminutes, seconds = divmod(remainder, 60)\nprint '%s:%s:%s' % (hours, minutes, seconds)\n# result: 3:43:40\n</code>\n</pre>\n", "senID": 4}, {"text": ["Hope this helps!"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["You can just convert the timedelta to a string with str().", "Here's an example:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import datetime\nstart = datetime.datetime(2009,2,10,14,00)\nend = datetime.datetime(2009,2,10,16,00)\ndelta = end-start\nprint str(delta)\n# prints 2:00:00\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; str(datetime.timedelta(hours=10.56))\n10:33:36\n\n&gt;&gt;&gt; td = datetime.timedelta(hours=10.505) # any timedelta object\n&gt;&gt;&gt; ':'.join(str(td).split(':')[:2])\n10:30\n</code>\n</pre>\n", "senID": 0}, {"text": ["Passing the timedelta object to the str() function calls the same formatting code used if we simply type print td.", "Since you don't want the seconds, we can split the string by colons (3 parts) and put it back together with only the first 2 parts."], "childNum": 3, "tag": "p", "senID": 1, "childList": [{"text": "timedelta", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "str()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "print td", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["My datetime.timedelta objects went greater than a day.", "So here is a further problem.", "All the discussion above assumes less than a day.", "A timedelta is actually a tuple of days, seconds and microseconds.", "The above discussion should use td.seconds as joe did, but if you have days it is NOT included in the seconds value. "], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "datetime.timedelta", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "timedelta", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "td.seconds", "childNum": 0, "tag": "code", "pos": 4, "childList": []}]}, {"text": ["I am getting a span of time between 2 datetimes and printing days and hours."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n span = currentdt - previousdt\nprint '%d,%d\\n' % (span.days,span.seconds/3600)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Following Joe's example value above, I'd use the modulus arithmetic operator, thusly:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n td = datetime.timedelta(hours=10.56)\ntd_str = \"%d:%d\" % (td.seconds/3600, td.seconds%3600/60)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that integer division in Python rounds down by default; if you want to be more explicit, use math.floor() or math.ceil() as appropriate."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Thanks everyone for your help.", "I took many of your ideas and put them together, let me know what you think."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I added two methods to the class like this:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def hours(self):\n    retval = \"\"\n    if self.totalTime:\n        hoursfloat = self.totalTime.seconds / 3600\n        retval = round(hoursfloat)\n    return retval\n\ndef minutes(self):\n    retval = \"\"\n    if self.totalTime:\n        minutesfloat = self.totalTime.seconds / 60\n        hoursAsMinutes = self.hours() * 60\n        retval = round(minutesfloat - hoursAsMinutes)\n    return retval\n</code>\n</pre>\n", "senID": 2}, {"text": ["In my django I used this (sum is the object and it is in a dictionary):"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n &lt;td&gt;{{ sum.0 }}&lt;/td&gt;    \n&lt;td&gt;{{ sum.1.hours|stringformat:\"d\" }}:{{ sum.1.minutes|stringformat:\"#02.0d\" }}&lt;/td&gt;\n</code>\n</pre>\n", "senID": 4}]]