[[{"text": ["It may help you to think of the obj.method(arg1, arg2) invocation syntax as purely syntactic sugar for calling method(obj, arg1, arg2) (except that method is looked up via obj's type, and isn't global)."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "obj.method(arg1, arg2)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "method(obj, arg1, arg2)", "childNum": 0, "tag": "code", "childList": []}, {"text": "method", "childNum": 0, "tag": "code", "childList": []}, {"text": "obj", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If you view it that way, obj is the first argument to the function, which traditionally is named self in the parameter list.", "(You can, in fact, name it something else, and your code will work correctly, but other Python coders will frown at you."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "obj", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["I'll try to clear up some confusion about classes and objects for you first.", "\"classes are objects!", "\" is very far from the truth."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Lets look at this block of code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Bank(): # let's create a bank, building ATMs\n...    crisis = False\n...    def create_atm(self) :\n...        while not self.crisis :\n...            yield \"$100\"\n</code>\n</pre>\n", "senID": 2}, {"text": ["The comment there is a bit deceptive.", "The above code does not \"create\" a bank.", "It defines what a bank is.", "A bank is something which has a property called crisis, and a function create_atm.", "That's what the above code says."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "crisis", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "create_atm", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["Now let's actually create a bank:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; x = Bank()\n</code>\n</pre>\n", "senID": 5}, {"text": ["There, x is now a bank.", "x has a property crisis and a function create_atm.", "Calling x.create_atm(); in python is the same as calling Bank.create_atm(x);, so now self refers to x.", "If you have more than one Bank, calling y.create_atm() will know to look at y's value of crisis, not x's since in that function self refers to y."], "childNum": 7, "tag": "p", "senID": 6, "childList": [{"text": "crisis", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "create_atm", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "x.create_atm();", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Bank.create_atm(x);", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "y.create_atm()", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["self is just a naming convention, but it is very good to stick with it.", "It's still worth pointing out that the code above is equivalent to:"], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Bank(): # let's create a bank, building ATMs\n...    crisis = False\n...    def create_atm(thisbank) :\n...        while not thisbank.crisis :\n...            yield \"$100\"\n</code>\n</pre>\n", "senID": 8}], [{"text": ["self refers to an instance of the class."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["self refers to the current instance of Bank.", "When you create a new Bank, and call create_atm on it, self will be implicitly passed by python, and will refer to the bank you created."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Bank", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Bank", "childNum": 0, "tag": "code", "childList": []}, {"text": "create_atm", "childNum": 0, "tag": "code", "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["self is an argument passed in to the function.", "In Python, this first argument is implicitly the object that the method was invoked on.", "In other words:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n class Bar(object):\n    def someMethod(self):\n        return self.field\n\nbar = Bar()\n\nbar.someMethod()\nBar.someMethod(bar)\n</code>\n</pre>\n", "senID": 1}, {"text": ["These last two lines have equivalent behavior.", "(Unless bar refers to an object of a subclass of Bar -- then someMethod() might refer to a different function object."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "bar", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "Bar", "childNum": 0, "tag": "code", "childList": []}, {"text": "someMethod()", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Note that you can name the \"special\" first argument anything you want -- self is just a convention for methods."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "anything you want", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "self", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["The name self does not exist in the context of that function.", "Attempting to use it would raise a NameError."], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "self", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "NameError", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["Example transcript:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Bar(object):\n...     def someMethod(self):\n...         return self.field\n...\n&gt;&gt;&gt; bar = Bar()\n&gt;&gt;&gt; bar.field = \"foo\"\n&gt;&gt;&gt; bar.someMethod()\n'foo'\n&gt;&gt;&gt; Bar.someMethod(bar)\n'foo'\n&gt;&gt;&gt; def fn(i):\n...     return self\n...\n&gt;&gt;&gt; fn(0)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 2, in fn\nNameError: global name 'self' is not defined\n</code>\n</pre>\n", "senID": 6}], [{"text": ["\"self\" is the instance object automatically passed to the class instance's method when called, to identify the instance that called it.", "\"self\" is used to access other attributes or methods of the object from inside the method.", "(methods are basically just functions that belong to a class)"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "self", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "automatically", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "self", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["\"self\" does not need to be used when calling a method when you already have an available instance."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "self", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["Accessing the \"some_attribute\" attribute from inside a method:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n class MyClass(object):\n    some_attribute = \"hello\"\n\n    def some_method(self, some_string):\n        print self.some_attribute + \" \" + some_string\n</code>\n</pre>\n", "senID": 3}, {"text": ["Accessing the \"some_attribute\" attribute from an existing instance:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; # create the instance\n&gt;&gt;&gt; inst = MyClass()\n&gt;&gt;&gt;\n&gt;&gt;&gt; # accessing the attribute\n&gt;&gt;&gt; inst.some_attribute\n\"hello\"\n&gt;&gt;&gt; \n&gt;&gt;&gt; # calling the instance's method\n&gt;&gt;&gt; inst.some_method(\"world\") # In addition to \"world\", inst is *automatically* passed here as the first argument to \"some_method\".\nhello world\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 5}, {"text": ["Here is a little code to demonstrate that self is the same as the instance:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class MyClass(object):\n&gt;&gt;&gt;     def whoami(self, inst):\n&gt;&gt;&gt;         print self is inst\n&gt;&gt;&gt;\n&gt;&gt;&gt; local_instance = MyClass()\n\n&gt;&gt;&gt; local_instance.whoami(local_instance)\nTrue\n</code>\n</pre>\n", "senID": 7}, {"text": ["As mentioned by others, it's named \"self\" by convention, but it could be named anything."], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "self", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}], [{"text": ["The reason \"self\" is there (by convention) is that when the Python runtime sees a call of the form Object.Method(Param1,Param2), it calls Method with parameters (Object,Param1,Param2).", "So if you call that first parameter \"self\", everyone will know what you are talking about.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The reason you have to do this is the subject of another question."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["As far as a metaclass, it's something rarely used.", "You might want to look at:\nhttp://python-history.blogspot.com/2009/04/metaclasses-and-extension-classes-aka.html, the original author and current Benevolent Dictator For Life of Python explains what this is, and how it came to be.", "He also has a nice article on some possible uses, but most people never directly use it at all."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://python-history.blogspot.com/2009/04/metaclasses-and-extension-classes-aka.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://python-history.blogspot.com/2009/04/metaclasses-and-extension-classes-aka.html"}]}]]