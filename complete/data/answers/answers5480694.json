[[{"text": ["I think what you want is a masked array:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dat = np.array([[1,2,3], [4,5,nan], [nan,6,nan], [nan,nan,nan]])\nmdat = np.ma.masked_array(dat,np.isnan(dat))\nmm = np.mean(mdat,axis=1)\nprint mm.filled(np.nan) # the desired answer\n</code>\n</pre>\n", "senID": 1}, {"text": ["Edit: Combining all of the timing data"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from timeit import Timer\n\n    setupstr=\"\"\"\nimport numpy as np\nfrom scipy.stats.stats import nanmean    \ndat = np.random.normal(size=(1000,1000))\nii = np.ix_(np.random.randint(0,99,size=50),np.random.randint(0,99,size=50))\ndat[ii] = np.nan\n\"\"\"  \n\n    method1=\"\"\"\nmdat = np.ma.masked_array(dat,np.isnan(dat))\nmm = np.mean(mdat,axis=1)\nmm.filled(np.nan)    \n\"\"\"\n\n    N = 2\n    t1 = Timer(method1, setupstr).timeit(N)\n    t2 = Timer(\"[np.mean([l for l in d if not np.isnan(l)]) for d in dat]\", setupstr).timeit(N)\n    t3 = Timer(\"np.array([r[np.isfinite(r)].mean() for r in dat])\", setupstr).timeit(N)\n    t4 = Timer(\"np.ma.masked_invalid(dat).mean(axis=1)\", setupstr).timeit(N)\n    t5 = Timer(\"nanmean(dat,axis=1)\", setupstr).timeit(N)\n\n    print 'Time: %f\\tRatio: %f' % (t1,t1/t1 )\n    print 'Time: %f\\tRatio: %f' % (t2,t2/t1 )\n    print 'Time: %f\\tRatio: %f' % (t3,t3/t1 )\n    print 'Time: %f\\tRatio: %f' % (t4,t4/t1 )\n    print 'Time: %f\\tRatio: %f' % (t5,t5/t1 )\n</code>\n</pre>\n", "senID": 3}, {"text": ["Returns:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n Time: 0.045454  Ratio: 1.000000\nTime: 8.179479  Ratio: 179.950595\nTime: 0.060988  Ratio: 1.341755\nTime: 0.070955  Ratio: 1.561029\nTime: 0.065152  Ratio: 1.433364\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Assuming you've also got SciPy installed:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.scipy.org/doc/api_docs/SciPy.stats.stats.html#nanmean"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.scipy.org/doc/api_docs/SciPy.stats.stats.html#nanmean", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.scipy.org/doc/api_docs/SciPy.stats.stats.html#nanmean"}]}], [{"text": ["If performance matters, you should use bottleneck.nanmean() instead:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "bottleneck.nanmean()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["http://pypi.python.org/pypi/Bottleneck"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://pypi.python.org/pypi/Bottleneck", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/Bottleneck"}]}], [{"text": ["A masked array with the nans filtered out can also be created on the fly:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print np.ma.masked_invalid(dat).mean(1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can always find a workaround in something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n numpy.nansum(dat, axis=1) / numpy.sum(numpy.isfinite(dat), axis=1)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Numpy 2.0's numpy.mean has a skipna option which should take care of that."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "numpy.mean", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "skipna", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["This is built upon the solution suggested by JoshAdel."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Define the following function:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def nanmean(data, **args):\n    return numpy.ma.filled(numpy.ma.masked_array(data,numpy.isnan(data)).mean(**args), fill_value=numpy.nan)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Example use:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n data = [[0, 1, numpy.nan], [8, 5, 1]]\ndata = numpy.array(data)\nprint data\nprint nanmean(data)\nprint nanmean(data, axis=0)\nprint nanmean(data, axis=1)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Will print out:"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n [[  0.   1.  nan]\n [  8.   5.   1.]]\n\n3.0\n\n[ 4.  3.  1.]\n\n[ 0.5         4.66666667]\n</code>\n</pre>\n", "senID": 6}]]