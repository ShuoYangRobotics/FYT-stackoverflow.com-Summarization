[[{"text": ["Can I see your urls.py as well?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Similar behaviors stumped me once before..."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["What it turned out to be was the way that my urls.py called the view.", "Python ran the datetime.now() once and stored that for future calls, never really calling it again.", "This is why django devs had to implement the ability to pass a function, not a function call, to a model's default value, because it would take the first call of the function and use that until python is restarted."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Your behavior sounds like the first time is correct because its the first time the view was called.", "It was incorrect at times because it got that same date again.", "Then it was randomly correct again because your apache probably started another worker process for it, and the craziness probably happens when you get bounced in between which process was handling the request."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I found that putting wsgi in daemon mode works.", "Not sure why, but it did.", "Seems like some of the newly created processes gets the time screwed up."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Maybe the server is evaluating the datetime.now() at server start, try making it lazy through a template or use a variable in your view."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Take a look at this blog post."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "blog post", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://paltman.com/2008/may/07/a-default-bug-in-django/"}]}], [{"text": ["you may need to specify the content type like so"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def servertime():\n  return HttpResponse( datetime.now(), content_type=\"text/plain\" )\n</code>\n</pre>\n", "senID": 1}, {"text": ["another idea:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["it may not be working because datetime.now() returns a datetime object.", "Try this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def servertime():\n  return HttpResponse( str(datetime.now()), content_type=\"text/plain\" )\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Django sets the system time zone based on your settings variable TIME_ZONE.", "This may lead to all kinds of confusion when running multiple Django instances with different TIME_ZONE settings."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This is what Django does:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n os.environ['TZ'] = self.TIME_ZONE\n</code>\n</pre>\n", "senID": 2}, {"text": ["The above answer:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["does not work for me..."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["I think I'm going with not using django's built in TIME_ZONE anymore."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["datetime.now() is probably being evaluated once, when your class is instantiated.", "Try removing the parenthesis so that the function datetime.now is returned and THEN evaluated.", "I had a similar issue with setting default values for my DateTimeFields and wrote up my solution here."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://david.feinzeig.com/blog/2011/12/06/how-to-properly-set-a-default-value-for-a-datetimefield-in-django/"}]}]]