[[{"text": ["You would want and instead of &amp;&amp;."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "&amp;&amp;", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Two comments:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "Use ", "tag": "none", "senID": 1}, {"text": "Use 4 spaces to indent instead of 2.  You will thank yourself later because your code will look pretty much the same as everyone else's code.  See ", "tag": "none", "senID": 2}]}], [{"text": ["Python uses and and or conditionals."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["i.e."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if foo == 'abc' and bar == 'bac' or zoo == '123'\n  # do something\n</code>\n</pre>\n", "senID": 2}], [{"text": ["I am a bit of a newbie with Python myself...  You should definitely take a look into http://diveintopython.org/. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://diveintopython.org/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/"}]}, {"text": ["Here is the and-or chapter.  "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Here is the and-or chapter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://diveintopython.org/power_of_introspection/and_or.html"}]}, {"text": ["It's one of the better written \"introduction books\" I've read, doesn't assume you are a master programmer (but doesn't assume you know nothing about programming either)"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Probably this is not best code for this task, but is working -"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def front_back(a, b):\n\n if len(a) % 2 == 0 and len(b) % 2 == 0:\n    print a[:(len(a)/2)] + b[:(len(b)/2)] + a[(len(a)/2):] + b[(len(b)/2):]\n\n elif len(a) % 2 == 1 and len(b) % 2 == 0:\n    print a[:(len(a)/2)+1] + b[:(len(b)/2)] + a[(len(a)/2)+1:] + b[(len(b)/2):] \n\n elif len(a) % 2 == 0 and len(b) % 2 == 1:\n     print a[:(len(a)/2)] + b[:(len(b)/2)+1] + a[(len(a)/2):] + b[(len(b)/2)+1:] \n\n else :\n     print a[:(len(a)/2)+1] + b[:(len(b)/2)+1] + a[(len(a)/2)+1:] + b[(len(b)/2)+1:]\n</code>\n</pre>\n", "senID": 1}], [{"text": ["In python, like in C, boolean and bitwise operations are separate, but the boolean operators are spelled differently."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The boolean ones are spelled and and or.", "They have two advantages: they can work for any type of operands (types/classes that define how to be interpreted in a boolean context, i.e.", "have a __nonzero__ special method), and they take a shortcut if they can.", "For example, 1 or lengthy_operation() will never call the lengthy operation."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "and", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "or", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "__nonzero__", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "1 or lengthy_operation()", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["The bitwise operators (&amp;/and, |/or and ^/xor) have the same meaning as in C, but they work only on integers (or other classes convertable to integer), and they don't short-circuit.", "Although not advisable, should you prefer to use the bitwise operators as boolean, make sure you use parentheses around the boolean terms, and that they are indeed boolean:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "&amp;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "|", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "^", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n if (len(a) % 2 == 0) &amp; (len(b) % 2 == 0):\n</code>\n</pre>\n", "senID": 3}]]