[[{"code": "<pre>\n<code>\n :g/./norm! 2Wi^M\n</code>\n</pre>\n", "senID": 0}, {"text": ["Explanation:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": [":g/./{cmd}"], "childNum": 0, "tag": "code", "senID": 2, "childList": []}, {"text": ["norm!"], "childNum": 0, "tag": "code", "senID": 3, "childList": []}, {"text": ["2Wi^M"], "childNum": 0, "tag": "code", "senID": 4, "childList": []}, {"text": ["^M"], "childNum": 0, "tag": "code", "senID": 5, "childList": []}]}, {"text": ["It is very tempting to do %norm!", "2Wi^M, but this will fail as it messes up the lines that are being worked on."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "%norm! 2Wi^M", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}], [{"text": ["Two approaches"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["My first thought was textwidth:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "textwidth", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n :se tw=50\n:g/./norm! gqq\n:%s/^[^(]/ &amp;/g\n</code>\n</pre>\n", "senID": 2}, {"text": ["This "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Alternatively: make a macro"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n gg\nqq2f,a&lt;CR&gt;&lt;Esc&gt;j0q\n100000@q\n</code>\n</pre>\n", "senID": 5}, {"text": ["Rationale:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Since the entire text to break is in one line initially, one can use a single\nshort substitution command,"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n :s/,.\\{-},\\|), /&amp;\\r/g\n</code>\n</pre>\n", "senID": 1}], [{"text": ["The way I would do this would be something like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n '&lt;,'&gt;s/^[^,]\\+,[^,]\\+,\\zs/\\r\n</code>\n</pre>\n", "senID": 1}, {"text": ["Translated:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n '&lt;,'&gt;     \" Over the visual range\ns/X/Y     \" Substitute X with Y\n^         \" Start of line\n[^,]\\+    \" Anything that isn't a comma, one or more, as many as possible\n,         \" A comma (end of first field)\n[^,]\\+    \" Anything that isn't a comma, one or more again\n,         \" A comma (send of second field)\n\\zs       \" Mark this point as the start of the match so we don't have to bother including all of the above in the result\n\\r        \" We're replacing nothing at the end of the above match with a new-line (\\r)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Another alternative:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n '&lt;,'&gt;s/^\\(.\\{-},\\)\\{2}/&amp;\\r\n</code>\n</pre>\n", "senID": 5}, {"text": ["Translated:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n '&lt;,'&gt;s/X/Y     \" As before\n^              \" Start of line\n\\(...\\)        \" A group containing:\n.\\{-},         \" Everything up to and including the first comma\n\\{2}           \" Match the preceding group twice (so up to and including the second comma)\n&amp;\\r            \" Replace with what was already there followed by a new-line\n</code>\n</pre>\n", "senID": 7}, {"text": ["And another... given that you have equal data widths, navigate to the space before the third column of the first row.", "Hit Ctrl-V and go down so that you've selected the whole column of spaces (6j in your example).", "Press either s or Shift-i (depending on whether you want to keep the space) and then ENTER and then ESC."], "childNum": 6, "tag": "p", "senID": 8, "childList": [{"text": "Ctrl-V", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "6j", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "s", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "Shift-i", "childNum": 0, "tag": "code", "childList": []}, {"text": "ENTER", "childNum": 0, "tag": "kbd", "childList": []}, {"text": "ESC", "childNum": 0, "tag": "kbd", "childList": []}]}], [{"text": ["Use the macros to format a line and go to the begining of the next line.", "Then apply that macro as may times as you need."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So, starting to record a macro is q_ where _ is a register, then edit your line, press q again to save the macro.", "And finally, apply it using @_ which you can prefix with a number of times you want to repeat it."], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "q_", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "_", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "q", "childNum": 0, "tag": "code", "childList": []}, {"text": "@_", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Make a recursive macro (as an alternative to @sehe's macro-for-100000-times answer)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["ggqa2f,a&lt;CR&gt;&lt;Esc&gt;j@aq"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "ggqa2f,a&lt;CR&gt;&lt;Esc&gt;j@aq", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Then @a to run the command on the second line (you shouldn't need to move your cursor)."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "@a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Visualization:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["gg"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "gg", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"src": "http://i.stack.imgur.com/6v6Qe.png", "tag": "img", "senID": 5}, {"text": ["qa"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "qa", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"src": "http://i.stack.imgur.com/Jip4n.png", "tag": "img", "senID": 7}, {"text": ["2f,"], "childNum": 1, "tag": "p", "senID": 8, "childList": [{"text": "2f,", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"src": "http://i.stack.imgur.com/tkAyV.png", "tag": "img", "senID": 9}, {"text": ["a&lt;Cr&gt;&lt;Esc&gt;"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "a&lt;Cr&gt;&lt;Esc&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"src": "http://i.stack.imgur.com/LKlaR.png", "tag": "img", "senID": 11}, {"text": ["j@aq"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "j@aq", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"src": "http://i.stack.imgur.com/kePuv.png", "tag": "img", "senID": 13}, {"text": ["@a"], "childNum": 1, "tag": "p", "senID": 14, "childList": [{"text": "@a", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"src": "http://i.stack.imgur.com/tyjhw.png", "tag": "img", "senID": 15}]]