[[{"text": ["The methods of a nested class cannot directly access the instance attributes of the outer class. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Note that it is not necessarily the case that an instance of the outer class exists even when you have created an instance of the inner class."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In fact, it is often recommended against using nested classes, since the nesting does not imply any particular relationship between the inner and outer classes."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Do you mean to use inheritance, rather than nesting classes like this?", "What you're doing doesn't make a heap of sense in Python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["You can access the Outer's some_method by just referencing Outer.some_method within the inner class's methods, but it's not going to work as you expect it will.", "For example, if you try this:"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "Outer", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Outer.some_method", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n class Outer(object):\n\n    def some_method(self):\n        # do something\n\n    class Inner(object):\n        def __init__(self):\n            Outer.some_method()\n</code>\n</pre>\n", "senID": 2}, {"text": ["...you'll get a TypeError when initialising an Inner object, because Outer.some_method expects to receive an Outer instance as its first argument.", "(In the example above, you're basically trying to call some_method as a class method of Outer."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "Inner", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Outer.some_method", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "Outer", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "some_method", "childNum": 0, "tag": "code", "childList": []}, {"text": "Outer", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["maybe I'm mad but this seems very easy indeed - the thing is to make your inner class inside a method of the outer class... "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def do_sthg( self ):\n    ...\n\ndef messAround( self ):\n\n    outerClassSelf = self\n\n    class mooble():\n        def do_sthg_different( self ):\n            ...\n            outerClassSelf.do_sthg()\n</code>\n</pre>\n", "senID": 1}, {"text": ["Plus... \"self\" is only used by convention, so you could do this:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def do_sthg( self ):\n    ...\n\ndef messAround( outerClassSelf ):\n\n    class mooble():\n        def do_sthg_different( self ):\n            ...\n            outerClassSelf.do_sthg()\n</code>\n</pre>\n", "senID": 3}, {"text": ["It might be objected that you can't then create this inner class from outside the outer class... but this ain't true:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class Bumblebee():\n\n    def do_sthg( self ):\n        print \"sthg\"\n\n    def giveMeAnInnerClass( outerClassSelf ):\n\n        class mooble():\n            def do_sthg_different( self ):\n                print \"something diff\\n\"\n                outerClassSelf.do_sthg()\n        return mooble\n</code>\n</pre>\n", "senID": 5}, {"text": ["then, somewhere miles away:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n blob = Bumblebee().giveMeAnInnerClass()()\nblob.do_sthg_different()\n</code>\n</pre>\n", "senID": 7}, {"text": ["even push the boat out a bit and extend this inner class (NB to get super() to work you have to change the class signature of mooble to \"class mooble( object )\""], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n class InnerBumblebeeWithAddedBounce( Bumblebee().giveMeAnInnerClass() ):\n    def bounce( self ):\n        print \"bounce\"\n\n    def do_sthg_different( self ):\n        super( InnerBumblebeeWithAddedBounce, self ).do_sthg_different()\n        print \"and more different\"\n\n\nibwab = InnerBumblebeeWithAddedBounce()    \nibwab.bounce()\nibwab.do_sthg_different()\n</code>\n</pre>\n", "senID": 9}], [{"text": ["i found this."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "this", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/2278426/inner-classes-how-can-i-get-the-outer-class-object-at-construction-time/2278496#2278496"}]}, {"text": ["Tweaked to suite your question, it is the answer:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class Outer(object):\n    def some_method(self):\n        # do something\n\n    class _Inner(object):\n        def __init__(self, outer):\n            outer.some_method()\n    def Inner(self):\n        return Inner(self)\n</code>\n</pre>\n", "senID": 2}, {"text": ["I\u2019m sure you can somehow write a decorator for this or something :)\n/edit: kinda"], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"href": "http://stackoverflow.com/questions/719705/what-is-the-purpose-of-pythons-inner-classes/722175#722175", "text": "kinda", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["Another possibility:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class _Outer (object):\n    # Define your static methods here, e.g.\n    @staticmethod\n    def subclassRef ():\n        return Outer\n\nclass Outer (_Outer):\n    class Inner (object):\n        def outer (self):\n            return _Outer\n\n        def doSomething (self):\n            outer = self.outer ()\n            # Call your static mehthods.\n            cls = outer.subclassRef ()\n            return cls ()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You're trying to access Outer's class instance, from inner class instance.", "So just use factory-method to build Inner instance and pass Outer instance to it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n class Outer(object):\n\n    def createInner(self):\n        return Outer.Inner(self)\n\n    class Inner(object):\n        def __init__(self, outer_instance):\n            self.outer_instance = outer_instance\n            self.outer_instance.somemethod()\n\n        def inner_method(self):\n            self.outer_instance.anothermethod()\n</code>\n</pre>\n", "senID": 1}]]