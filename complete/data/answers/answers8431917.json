[[{"text": ["NOTE"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "NOTE", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["your example output is NOT correct, since there you have \"Ruby\" but in your file1 example you had \"Rubby\"   Ruby =/= Rubby"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n kent$  awk 'NR==FNR{t[$0]++;next}\n{if(FNR==1){\n        for(i=1;i&lt;=NF;i++)\n                if($i in t){\n                        v[i]++;\n                        printf $i\"\\t\";\n                }\n        print \"\";\n        }else{\n        for(x in v)\n                printf $x\"\\t\"\n        print \"\";\n}\n\n}' file1 file2\n</code>\n</pre>\n", "senID": 2}, {"text": ["output"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "output", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n Paul    Ronny   Suzie\n12      11      12\n23      12      5.1\n</code>\n</pre>\n", "senID": 4}], [{"code": "<pre>\n<code>\n $ awk 'FILENAME~1{a[$0];next};FNR==1{for(i=1;i&lt;=NF;i++)if($i in a)b[i]};{for(j in b)printf(\"%s\\t\",$j);print \"\"}' file{1,2}.txt\nPaul    Ronny   Suzie\n12      11      12\n23      12      5.1\n</code>\n</pre>\n", "senID": 0}, {"text": ["break into multi lines &amp;&amp; add whitespace"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $ awk '\n&gt; FILENAME~1 { a[$0]; next }\n&gt; FNR==1 { for(i=1; i&lt;=NF; i++) if($i in a) b[i] }\n&gt; { for(j in b) printf(\"%s\\t\",$j); print \"\"}\n&gt; ' file{1,2}.txt\n\nPaul    Ronny   Suzie\n12      11      12\n23      12      5.1\n</code>\n</pre>\n", "senID": 2}], [{"text": ["You can use only bash to do it:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n FIELDS=`head -1 f2.txt | tr \"\\t\" \"\\n\" | nl -ba | grep -f f1.txt | cut -f1 | tr -d \" \" | tr \"\\n\" \",\"`; FIELDS=${FIELDS/%,/}\ncut -f$FIELDS f2.txt \nPaul    Ronny   Ruby    Suzie\n12  11  11  12\n23  12  8.9 5.1\n</code>\n</pre>\n", "senID": 1}], [{"text": ["An example in Python that does the work in stream (ie: don't need to load the full file before starting the output):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # read keys\nwith open('file1', 'r') as fd:\n    keys = fd.read().splitlines()\n\n# output keys\nprint '\\t'.join(keys)\n\n# read data file, with header line and content\nwith open('file2', 'r') as fd:\n    headers = fd.readline().split()\n    while True:\n        line = fd.readline().split()\n        if len(line) == 0:\n            break\n        print '\\t'.join([line[headers.index(x)] for x in keys if x in headers])\n</code>\n</pre>\n", "senID": 1}, {"text": ["Output:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n $ python test.py \nRonny   Ruby    Suzie   Paul\n11      11      12      12\n12      8.9     5.1     23\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Perl solution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #!/usr/bin/perl\nuse warnings;\nuse strict;\n\nopen my $KEYS, '&lt;', 'file1' or die $!;\nmy @keys = &lt;$KEYS&gt;;\nclose $KEYS;\nchomp @keys;\nmy %is_key;\nundef @is_key{@keys};\n\nopen my $TAB, '&lt;', 'file2' or die $!;\n$_ = &lt;$TAB&gt;;\nmy ($i, @columns);\nfor (split) {\n    push @columns, $i if exists $is_key{$_};\n    $i++;\n}\ndo {{\n    my @values = split;\n    print join(\"\\t\", @values[@columns]), \"\\n\";\n}} while &lt;$TAB&gt;;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Something like this could probably work, depending on what you want."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n use strict;\nuse warnings;\n\nmy %names;\nopen ( my $nh, '&lt;', $name_file_path ) or die \"Could not open '$name_file_path'!\";\nwhile ( &lt;$nh&gt; ) { \n    m/^\\s*(.*?\\S)\\s*$/ and $names{ $1 } = 1; \n}\nclose $nh;\n\nmy $coln = -1;\nopen ( my $dh, '&lt;', $data_file_path ) or die \"Could not open '$data_file_path'!\";\n\nmy ( @name_list, @col_list )\nmy @names = split /\\t/, &lt;$dh&gt;;\nforeach my $name ( 0..$#names ) {\n    next unless exists $names{ $names[ $name ] };\n    push @name_list, $name;\n    push @col_list, $coln;\n}\nlocal $\" = \"\\t\";\nprint \"@name_list\\n\";\nprint \"@{[ split /\\t/ ]}[ @col_list ]\\n\"  while &lt;$dh&gt;;\nclose $dh;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This might work for you:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n sed '1{s/\\t/\\n/gp};d' file2 |\n nl |\n grep -f file1 |\n cut -f1 |\n paste -sd, |\n sed 's/ //g;s,.*,cut -f&amp; /tmp/b,' |\n sh\n</code>\n</pre>\n", "senID": 1}, {"text": ["Explanation:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]