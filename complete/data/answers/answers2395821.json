[[{"text": ["If you want to match non-ASCII letters as well, you can do:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if line and line[0].isalpha():\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This is probably the most efficient method:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if line != \"\" and line[0].isalpha():\n    ...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can pass a tuple to startswiths() (in Python 2.5+) to match any of its elements:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "startswiths()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import string\nALPHA = string.ascii_letters\nif line.startswith(tuple(ALPHA)):\n    pass\n</code>\n</pre>\n", "senID": 1}, {"text": ["Of course, for this simple case, a regex test or the in operator would be more readable."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "in", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["An easy solution would be to use the python regex module:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import re\nif re.match(\"^[a-zA-Z]+.*\", line):\n   Do Something\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n if line.startswith((chr(x) for x in range(ord('a'), ord('z')+1)+range(ord('A'), ord('Z')+1)):\n    # do processsing\n    pass\n</code>\n</pre>\n", "senID": 0}], [{"text": ["if you don't care about blanks in front of the string, "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if line and line.lstrip()[0].isalpha():\n</code>\n</pre>\n", "senID": 1}]]