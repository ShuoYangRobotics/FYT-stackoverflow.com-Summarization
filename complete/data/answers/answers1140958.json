[[{"text": ["How about:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n text = os.linesep.join([s for s in text.splitlines() if s])\n</code>\n</pre>\n", "senID": 1}, {"text": ["where text is the string with the possible extraneous lines?"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "text", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n \"\\n\".join([s for s in code.split(\"\\n\") if s])\n</code>\n</pre>\n", "senID": 0}, {"text": ["Edit2:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n text = \"\".join([s for s in code.splitlines(True) if s.strip(\"\\r\\n\")])\n</code>\n</pre>\n", "senID": 2}, {"text": ["I think that's my final version.", "It should work well even with code mixing line endings.", "I don't think that line with spaces should be considered empty, but if so then simple s.strip() will do instead. "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["This one will remove lines of spaces too."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["re.replace(u'(?imu)^\\s*\\n', u'', code)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "re.replace(u'(?imu)^\\s*\\n', u'', code)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n filter(None, code.splitlines())\nfilter(str.strip, code.splitlines())\n</code>\n</pre>\n", "senID": 0}, {"text": ["are equivalent to"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n [s for s in code.splitlines() if s]\n[s for s in code.splitlines() if s.strip()]\n</code>\n</pre>\n", "senID": 2}, {"text": ["and might be useful for readability"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Suprised there's no love for the standard string replace method.", "But maybe it doesn't qualify as a one-liner, since it's just a plain old method call."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; manylines = 'hello\\nworld\\n!'\n&gt;&gt;&gt; print manylines\nhello\nworld\n!\n\n&gt;&gt;&gt; no_linefeeds = manylines.replace('\\n', '')\n&gt;&gt;&gt; print no_linefeeds\nhelloworld!\n</code>\n</pre>\n", "senID": 1}], [{"text": ["And now for something completely different:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n Python 1.5.2 (#0, Apr 13 1999, 10:51:12) [MSC 32 bit (Intel)] on win32\nCopyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam\n&gt;&gt;&gt; import string, re\n&gt;&gt;&gt; tidy = lambda s: string.join(filter(string.strip, re.split(r'[\\r\\n]+', s)), '\\n')\n&gt;&gt;&gt; tidy('\\r\\n   \\n\\ra\\n\\n   b   \\r\\rc\\n\\n')\n'a\\012   b   \\012c'\n</code>\n</pre>\n", "senID": 1}, {"text": ["Episode 2:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["This one doesn't work on 1.5 :-("], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["BUT not only does it handle universal newlines and blank lines, it also removes trailing whitespace (good idea when tidying up code lines IMHO) AND does a repair job if the last meaningful line is not terminated."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n import re\ntidy = lambda c: re.sub(\n    r'(^\\s*[\\r\\n]+|^\\s*\\Z)|(\\s*\\Z|\\s*[\\r\\n]+)',\n    lambda m: '\\n' if m.lastindex == 2 else '',\n    c)\n</code>\n</pre>\n", "senID": 5}]]