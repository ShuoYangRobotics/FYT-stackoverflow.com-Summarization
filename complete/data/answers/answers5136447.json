[[{"text": ["Easiest way: math.factorial(x) (available in 2.6 and above)."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "math.factorial(x)", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/math.html"}]}, {"text": ["If you want/have to write it yourself, use something like"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "something like", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.artima.com/forums/flat.jsp?forum=181&thread=75931"}]}, {"code": "<pre>\n<code>\n def factorial(n):return reduce(lambda x,y:x*y,range(1,n+1))\n</code>\n</pre>\n", "senID": 2}, {"text": ["or something more readable:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n</code>\n</pre>\n", "senID": 4}, {"text": ["As always, Google is your friend ;)"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Try:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import math\nmath.factorial(n)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You mean:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["def fact(n):\n  f = 1\n  for i in range(1, n +1):\n   f *= i\n  return f"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "def fact(n):\n  f = 1\n  for i in range(1, n +1):\n   f *= i\n  return f", "childNum": 1, "tag": "pre", "pos": 0, "childList": [{"text": "def fact(n):\n  f = 1\n  for i in range(1, n +1):\n   f *= i\n  return f", "tag": "code"}]}, {"text": "def fact(n):\n  f = 1\n  for i in range(1, n +1):\n   f *= i\n  return f", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["http://www.google.com/search?aq=0&amp;oq=factorial+py&amp;sourceid=chrome&amp;ie=UTF-8&amp;q=factorial+python"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://www.google.com/search?aq=0&amp;oq=factorial+py&amp;sourceid=chrome&amp;ie=UTF-8&amp;q=factorial+python", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.google.com/search?aq=0&oq=factorial+py&sourceid=chrome&ie=UTF-8&q=factorial+python"}]}, {"code": "<pre>\n<code>\n import math\nmath.factorial( yourInt )\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you are using Python2.5 or older try"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from operator import mul\ndef factorial(n):\n    return reduce(mul, range(1,n+1))\n</code>\n</pre>\n", "senID": 1}, {"text": ["for newer Python, there is factorial in the math module as given in other answers here"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Existing solution"], "childNum": 0, "tag": "h2", "senID": 0, "childList": []}, {"text": ["The shortest and probably the fastest solution is:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from math import factorial\nprint factorial(1000)\n</code>\n</pre>\n", "senID": 2}, {"text": ["Building your own"], "childNum": 0, "tag": "h2", "senID": 3, "childList": []}, {"text": ["You can also build your own solution.", "Generally you have two approaches.", "The one that suits me best is:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from itertools import imap\ndef factorial(x):\n    return reduce(long.__mul__, imap(long, xrange(1, x + 1)))\n\nprint factorial(1000)\n</code>\n</pre>\n", "senID": 5}, {"text": ["(it works also for bigger numbers, when the result becomes long)"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "long", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["The second way of achieving the same is:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n def factorial(x):\n    result = 1\n    for i in xrange(1, x + 1):\n        result *= i\n    return result\n\nprint factorial(1000)\n</code>\n</pre>\n", "senID": 8}]]