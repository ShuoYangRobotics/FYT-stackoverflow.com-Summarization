[[{"text": ["Jython and IronPython are useful if you have an overriding need to interface with existing libraries written in a different platform, like if you have 100,000 lines of Java and you just want to write a 20-line Python script.", "Not particularly useful for anything else, in my opinion, because they are perpetually a few versions behind CPython due to community inertia."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Jython", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "IronPython", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}]}, {"text": ["Stackless is interesting because it has support for green threads, continuations, etc.", "Sort of an Erlang-lite."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Stackless", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["PyPy is an experimental interpreter/compiler that may one day supplant CPython, but for now is more of a testbed for new ideas."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "PyPy", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}], [{"text": ["An additional benefit for Jython, at least for some, is it lacks the GIL (the Global Interpreter Lock) and uses Java's native threads.", "This means that you can run pure Python code in parallel, something not possible with the GIL."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "it lacks the GIL", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://zyasoft.com/pythoneering/2008/06/realizing-jython-25.html"}]}], [{"text": ["Pros: Access to the libraries available for JVM or CLR."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Cons: Both naturally lag behind CPython in terms of features."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["All of the implementations are listed here:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://www.python.org/dev/implementations/"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://www.python.org/dev/implementations/", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.python.org/dev/implementations/"}]}, {"text": ["CPython is the \"reference implementation\" and developed by Guido and the core developers."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["IronPython and Jython use the runtime environment for .NET or Java and with that comes Just In Time compilation and a garbage collector different from the original CPython.", "They might be also faster than CPython thanks to the JIT, but I don't know that for sure."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["A downside in using Jython or IronPython is that you cannot use native C modules, they can be only used in CPython."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["PyPy is a Python implementation written in RPython wich is a Python subset. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyPy", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/pypy/dist/pypy/doc/home.html"}]}, {"text": ["RPython can be translated to run on a VM or, unlike standard Python, RPython can be statically compiled."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]