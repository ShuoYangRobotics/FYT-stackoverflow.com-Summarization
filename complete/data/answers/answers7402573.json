[[{"text": ["As I understand, you already parsed the file, you now just need to get the right type.", "So let's say id, type and value are three strings that contain the values in the file.", "(Note, type should contain 'int' &mdash; for example &mdash;, not '&lt;type 'int'&gt;'."], "childNum": 6, "tag": "p", "senID": 0, "childList": [{"text": "id", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "type", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "value", "childNum": 0, "tag": "code", "childList": []}, {"text": "type", "childNum": 0, "tag": "code", "childList": []}, {"text": "'int'", "childNum": 0, "tag": "code", "childList": []}, {"text": "'&lt;type 'int'&gt;'", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n try:\n    # Check if it's a builtin type\n    cls = getattr(__builtins__, type)\nexcept AttributeError:\n    module = sys.modules[__name__]\n    cls = getattr(module, type)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Note that in that sample I assume the non-builtin is already imported in the current module.", "If not, you'll have to parse the string and include the module yourself.", "Or not, depends exactly on what your program should do."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["After you get the cls object, you do this:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "cls", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n val = cls(value)\n</code>\n</pre>\n", "senID": 4}, {"text": ["Obviously, cls must be initializable from a string."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "cls", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Follow these steps:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I had to deal with a similar situation in a recent program, that had to convert many fields.", "I used a list of tuples, where one element of the tuples was the conversion function to use.", "Sometimes it was int or float; sometimes it was a simple lambda; and sometimes it was the name of a function defined elsewhere."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "int", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "float", "childNum": 0, "tag": "code", "childList": []}, {"text": "lambda", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Instead of having a separate \"type\" file, take your list of tuples of (id, value, date) and just pickle it."], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "(id, value, date)", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"href": "http://docs.python.org/library/pickle.html", "text": "pickle", "childNum": 1, "tag": "a", "childList": [{"text": "pickle", "tag": "code"}]}, {"text": "pickle", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Or you'll have to solve the problem of storing your string-to-type converters as text (in your \"type\" file), which might be a fun problem to solve, but if you're just trying to get something done, go with pickle or cPickle"], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "pickle", "tag": "a", "pos": 0, "childList": [{"text": "pickle", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/pickle.html"}, {"text": "pickle", "childNum": 0, "tag": "code", "childList": []}, {"href": "http://docs.python.org/library/pickle.html", "text": "cPickle", "childNum": 1, "tag": "a", "childList": [{"text": "cPickle", "tag": "code"}]}, {"text": "cPickle", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["First, you cannot write a \"universal\" or \"smart\" conversion that magically handles anything."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Second, trying to summarize a string-to-data conversion in anything other than code never seems to work out well.", "So rather than write a string that names the conversion, just write the conversion.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Finally, trying to write a configuration file in a domain-specific language is silly.", "Just write Python code.", "It's not much more complicated than trying to parse some configuration file."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Don't waste time trying to create a \"type file\" that's not simply Python.", "It doesn't help.", "It is simpler to write the conversion as a Python function.", "You can import that function as if it was your \"type file\"."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n import datetime\n\ndef convert( row ):\n   return dict(\n       id= int(row['id']),\n       value= str(row['value']),\n       date= datetime.datetime.strptime(row['date],\"%Y-%m-%d %H:%M:%S\"),\n   )\n</code>\n</pre>\n", "senID": 4}, {"text": ["That's all you have in your \"type file\""], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["Now you can read (and process) your input like this."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n from type_file import convert\n import csv\n\n with open( \"date\", \"rb\" ) as source:\n     rdr= csv.DictReader( source )\n     for row in rdr:\n         useful_row= convert( row )\n</code>\n</pre>\n", "senID": 7}, {"text": ["This means you are doomed."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"text": ["You must have an actual definition the file content or you cannot do any processing."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}, {"code": "<pre>\n<code>\n \"id\",\"value\",\"other value\"\n1,23507,3\n</code>\n</pre>\n", "senID": 10}, {"text": ["You don't know if \"23507\" should be an integer, a string, a postal code, or a floating-point (which omitted the period), a duration (in days or seconds) or some other more complex thing.", "You can't hope and you can't guess."], "childNum": 0, "tag": "p", "senID": 11, "childList": []}, {"text": ["After getting a definition, you need to write an explicit conversion function based on the actual definition."], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"text": ["After writing the conversion, you need to (a) test the conversion with a simple unit test, and (b) test the data to be sure it really converts."], "childNum": 0, "tag": "p", "senID": 13, "childList": []}, {"text": ["Then you can process the file. "], "childNum": 0, "tag": "p", "senID": 14, "childList": []}], [{"text": ["Your types file can be simpler:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n id=int\nvalue=str\ndate=datetime.datetime\n</code>\n</pre>\n", "senID": 1}, {"text": ["Then in your main program you can"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import datetime\n\ndef convert_datetime(text):\n    return datetime.datetime.strptime(text, \"%Y-%m-%d %H:%M:%S\")\n\ndata_types = {'int':int, 'str':str, 'datetime.datetime':convert_datetime}\nfields = {}\n\nfor line in open('example_types.txt').readlines():\n    key, val = line.strip().split('=')\n    fields[key] = val\n\ndata_file = open('actual_data.txt')\nfield_info = data_file.readline().strip('#\\n ').split(',')\nvalues = [] #store it all here for now\n\nfor line in data_file.readlines():\n    row = []\n    for i, element in enumerate(line.strip().split(',')):\n        element_type = fields[field_info[i]] # will get 'int', 'str', or 'datetime'\n        convert = data_types[element_type]\n        row.append(convert(element))\n    values.append(row)\n\n# to show it working...\nfor row in values:\n    print row\n</code>\n</pre>\n", "senID": 3}], [{"text": ["You might want to look at the xlrd module.", "If you can load your data into excel, and it knows what type is associated with each column, xlrd will give you the type when you read the excel file.", "Of course, if the data is given to you as a csv then someone would have to go into the excel file and change the column types by hand."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Not sure this gets you all the way to where you want to go, but it might help"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]