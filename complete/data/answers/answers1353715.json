[[{"text": ["My answer to that would be :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(Quoting Knuth, Donald.", "Structured Programming with go to Statements, ACM Journal Computing Surveys, Vol 6, No.", "4, Dec. 1974. p.268)"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "(Quoting Knuth, Donald. Structured Programming with go to Statements, ACM Journal Computing Surveys, Vol 6, No. 4, Dec. 1974. p.268)", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"text": ["\nIf your application is doing anything like a query to the database, that one query will take more time than anything you can gain with those kind of small optimizations, anyway..."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}]}, {"text": ["And if running after performances like that, why not code in assembly language, afterall ?", "Because Python is easier/faster to write and maintain ?", "Well, if so, you are right :-)"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["The most important thing is that your code is easy to maintain ; not a couple micro-seconds of CPU-time !", "Well, maybe except if you have thousands of servers -- but is it your case ?"], "childNum": 2, "tag": "p", "senID": 4, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "Well, maybe except if you have thousands of servers -- but is it your case ?", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}], [{"text": ["The answer is really simple :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": "Follow Python best practices, not C++ best practices.", "tag": "none", "senID": 1}, {"text": "Readability in Python is more important that speed.", "tag": "none", "senID": 2}, {"text": "If performance becomes an issue, measure, then start optimizing.", "tag": "none", "senID": 3}]}], [{"text": ["This sort of premature micro-optimisation is usually a waste of time in my experience, even in C and C++.", "Write readable code first.", "If it's running too slowly, run it through a profiler, and if necessary, fix the hot-spots."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Fundamentally, you need to think about return on investment.", "Is it worth the extra effort in reading and maintaining \"optimised\" code for the couple of microseconds it saves you?", "In most cases it isn't."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["(Also, compilers and runtimes are getting cleverer.", "Some micro-optimisations may become micro-pessimisations over time."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["I agree with others: readable code first (\"Performance is not a problem until performance is a problem.", "\")."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I only want to add that when you absolutely need to write some unreadable and/or non-intuitive code, you can generally isolate it in few specific methods, for which you can write detailed comments, and keep the rest of your code highly readable.", "If you do so, you'll end up having easy to maintain code, and you'll only have to go through the unreadable parts when you really need to."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Given this, I'd say that you should take your colleague's advice about writing efficient Python but ignore anything he says that goes against prioritizing readability and maintainability of the code, which will probably be more important than the speed at which it'll execute."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This is generally a good advice, and also depends on the logic of your program.", "If it makes sense that the second statement is not evaluated if the first returns false, then do so.", "Doing the opposite could be a bug otherwise."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I don't really get this point.", "Of course you should use the library provided functions, because they are probably implemented in C, and a pure python implementation is most likely to be slower.", "In any case, no need to reinvent the wheel."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n $ cat withcall.py\ndef square(a):\n        return a*a\n\nfor i in xrange(1,100000):\n        i_square = square(i)\n\n$ cat withoutcall.py\nfor i in xrange(1,100000):\n        i_square = i*i\n\n$ time python2.3 withcall.py\nreal    0m5.769s\nuser    0m4.304s\nsys     0m0.215s\n$ time python2.3 withcall.py\nreal    0m5.884s\nuser    0m4.315s\nsys     0m0.206s\n\n$ time python2.3 withoutcall.py\nreal    0m5.806s\nuser    0m4.172s\nsys     0m0.209s\n$ time python2.3 withoutcall.py\nreal    0m5.613s\nuser    0m4.171s\nsys     0m0.216s\n</code>\n</pre>\n", "senID": 2}, {"text": ["I mean... come on... please."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["I think there are several related 'urban legends' here."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 3, "lis": [{"text": ["False Putting the more often-checked condition first in a conditional and similar optimizations save enough time for a typical program that it is worthy for a typical programmer."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "False", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["True Some, but not many, people are using such styles in Python in the incorrect belief outlined above."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "True", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["True Many people use such style in Python when they think that it improves readability of a Python program."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "True", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "readability", "childNum": 0, "tag": "em", "childList": []}]}]}, {"text": ["About readability: I think it's indeed useful when you give the most useful conditional first, since this is what people notice first anyway.", "You should also use ''.join() if you mean concatenation of strings since it's the most direct way to do it (the s += x operation could mean something different). "], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "''.join()", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "s += x", "childNum": 0, "tag": "code", "childList": []}, {"text": "could", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["\"Call as less functions as possible\" decreases readability and goes against Pythonic principle of code reuse.", "And so it's not a style people use in Python."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["Before introducing performance optimizations at the expense of readability, look into modules like psyco that will do some JIT-ish compiling of distinct functions, often with striking results, with no impairment of readability."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Then if you really want to embark on the optimization path, you must first learn to measure and profile.", "Optimization MUST BE QUANTITATIVE - do not go with your gut.", "The hotspot profiler will show you the functions where your program is burning up the most time."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If optimization turns up a function like this is being frequently called:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n def get_order_qty(ordernumber):\n    # look up order in database and return quantity\n</code>\n</pre>\n", "senID": 3}, {"text": ["If there is any repetition of ordernumbers, then memoization would be a good optimization technique to learn, and it is easily packaged in an @memoize decorator so that there is little impact to program readability.", "The effect of memoizing is that values returned for a given set of input arguments are cached, so that the expensive function can be called only once, with subseqent calls resolved against the cache."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Lastly, consider lifting invariants out of loops.", "For large multi-dimensional structures, this can save a lot of time - in fact in this case, I would argue that this optimization improves readability, as it often serves to make clear that some expression can be computed at a high-level dimension in the nested logic."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "improves", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["(BTW, is this really what you meant?", "\u2022In an if statement with an or always put the condition most likely to fail first, so the second will not be checked."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["I should think this might be the case for \"and\", but an \"or\" will short-circuit if the first value is True, saving the evaluation of the second term of the conditional.", "So I would change this optimization \"rule\" to:"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "If testing \"A and B\", put A first if \nit is more likely to evaluate to", "tag": "none", "senID": 8}, {"text": "If testing \"A or B\", put A first if\nit is more likely to evaluate to\nTrue.", "tag": "none", "senID": 9}]}, {"text": ["But often, the sequence of conditions is driven by the tests themselves:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n if obj is not None and hasattr(obj,\"name\") and obj.name.startswith(\"X\"):\n</code>\n</pre>\n", "senID": 11}, {"text": ["You can't reorder these for optimization - they have to be in this order (or just let the exceptions fly and catch them later:"], "childNum": 1, "tag": "p", "senID": 12, "childList": [{"text": "have", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if obj.name.startswith(\"X\"):\n</code>\n</pre>\n", "senID": 13}], [{"text": ["Sure follow Python best-practices (and in fact I agree with the first two recommendations), but maintainability and efficiency are not opposites, they are mostly togethers (if that's a word)."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Statements like \"always write your IF statements a certain way for performance\" are a-priori, i.e.", "not based on knowledge of what your program spends time on, and are therefore guesses.", "The first (or second, or third, whatever) rule of performance tuning is don't guess."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "don't guess", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}, {"text": ["If after you measure, profile, or in my case do this, you actually know that you can save much time by re-ordering tests, by all means, do.", "My money says that's at the 1% level or less."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "do this", "tag": "a", "pos": 0, "childList": [{"text": "do this", "tag": "em"}], "childNum": 1, "href": "http://stackoverflow.com/questions/926266/performance-optimization-strategies-of-last-resort/927773#927773"}, {"text": "do this", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "know", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["My visceral reaction is this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I've worked with guys like your colleague and in general I wouldn't take advice from them."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Ask him if he's ever even used a profiler."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Is this question even serious?", "It reads like a troll attempt.", "The propositions you described aren't best practices in c++, never-mind python."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]