[[{"text": ["This is a completely subjective question.", "The answer is, \"it depends."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["It depends on the primary use of your data.", "If you continually have to reference the nested structure, then it makes sense to represent it that way.", "And if you never reference the flat representation except when building the nested structure, then why have the flat structure at all?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The \"flat\" representation is one of the basics of the relational database model:  each type of data exists in a table just for that type, and any relationships among the items are contained in separate tables.", "It's a useful abstraction, but at times difficult to work with in code.", "On the other hand, processing all the data of a particular type is trivial."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Consider, for example, if I wanted to find all the descendants of the record with id 2 in your example data.", "If the data is already in the hierarchy (i.e.", "native representation is the \"nested\" structure), then it's trivial to locate record id 2 and then traverse its children, children's children, etc."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["But if the native representation is sequential as you've shown it then I have to pass through the entire data set to create the hierarchical structure and then find record 2 and its children."], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "then", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"text": ["So, as I said, \"it depends."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["I wouldn't inherently prefer either, but rather use whatever seems best suited to the task."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If the structure is important, nesting makes life simple.", "If you're regularly operating over each node, the flat structure makes it easy to use for node in tree.", "Of course, if you define your own class, its easy enough to abstract it so both options are simple; but it may be harder to use with external systems, such as converting to JSON."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "for node in tree", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["Yes, particularly when being explicit prevents you from implicitly shooting yourself in the foot.", "The \"tree\" in your example can have multiple parents claiming to own the same children.", "It can also have multiple root nodes (and it does: 2 is a root node; 4 is a root as well as a leaf node."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["This question can't be answered \"in general\" - there is no right answer.    "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For this particular example, I actually like the tree structure better.", "Without knowing anything about the original application, and just looking at the structure, the relationship between the items is obvious.", "With the flat structure, I have to read some documentation, or application code to \"know\" that your tuple of children refer to id's.  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["The tree structure is self-documenting - the flat structure isn't."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["No."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That's what \"flat is better than nested\" doesn't apply to data.", "Only to code."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["It's not even comparable.", "The \"flat tree\" is a common SQL implementation because SQL can't handle indefinite recursion of a proper tree.  "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Comparing the Zen of Python (the language) with data structure design is nonsensical.", "The two are no more comparable than than the number \"2\" and splitting a brick of cheese into \"2\" pieces.", "One's a thing, the other's an action.  "], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Data structures are things."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["Python describes actions.  "], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["\"Everything should be made as simple as possible, but not simpler.", "\" Flat is simpler than nested.", "If you're dealing with data with relevant nesting, then flattening it probably violates the \"but not simpler\" part.", "I took the Zen of Python instead to be encouraging you not to complicate your life with nesting you don't really need, like an XML config file where a simpler flat format might suffice."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "relevant", "childNum": 0, "tag": "em", "pos": 2, "childList": []}]}]]