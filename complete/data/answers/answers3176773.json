[[{"text": ["I'd do it mathematically:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from math import ceil, log10\nint(pow(10, ceil(log10(abs(x or 0.1)))))\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n def nextPowerOfTen(x):\n  if x in [0, 1]:\n     return x\n  elif x &lt; 1:\n    return -nextPowerOfTen(abs(x))\n  else:\n    return 10**len(str(int(x) - 1))\n\n&gt;&gt;&gt; nextPowerOfTen(83)\n100\n&gt;&gt;&gt; nextPowerOfTen(1350)\n10000\n&gt;&gt;&gt; nextPowerOfTen(1)\n1\n&gt;&gt;&gt; nextPowerOfTen(100)\n100\n&gt;&gt;&gt; nextPowerOfTen(0)\n0\n&gt;&gt;&gt; nextPowerOfTen(-1)\n-1\n&gt;&gt;&gt; nextPowerOfTen(-2)\n-10\n</code>\n</pre>\n", "senID": 0}, {"text": ["It does something sensible with negatives, not sure if that is the behaviour you want or not."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["Why didn't you say so initially?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n new_val = float(\"0.\" + str(old_val))\n</code>\n</pre>\n", "senID": 1}, {"text": ["Unless you need the numbers for something else as well?"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; x = 12345.678\n&gt;&gt;&gt; y = round(x)\n&gt;&gt;&gt; round(10 * y, -len(str(y)))\n100000\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Pseudocode:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n div = input != 1 ? power(10,truncate(log10(abs(input))) + 1) : 1;\npercent = input/div;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Your original code was close, and more easily read than some terse expression.", "The problem with your code is a couple of minor errors: initializing new_value each time in the initial scan, rather than only once; and replacing the max_list with a calculated scalar while looping over it as a list."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "new_value", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "max_list", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["On the final line, you must have intended:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n max_list[i] = float(max_list[i]) / new_value\n</code>\n</pre>\n", "senID": 2}, {"text": ["but you dropped the array index, which would replace the list with a single value.", "On the second iteration of the loop, your Python would give an exception due to the invalid index into a non-list."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Because your code develops greater and greater values of new_value as it progresses, I recommend you not replace the list items during the first scan.", "Make a second scan once you calculate a final value for new_value:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n max_list = [83, 1350, 1, 100]\n\n# Calculate the required \"normalizing\" power-of-ten\nnew_value = 1.0\nfor i in range(len(max_list)):\n    while new_value &lt; max_list[i]:\n        new_value *= 10.0\n\n# Convert the values to fractions in [0.0, 1.0]\nfor i in range(len(max_list)):\n    max_list[i] = max_list[i] / new_value\n\nprint max_list\n# \"[0.0083000000000000001, 0.13500000000000001, 0.0001, 0.01]\"\n</code>\n</pre>\n", "senID": 5}, {"text": ["Notice that I was required to initialize new_value as if it were a floating-point value, in order that it would result in floating-point quotients.", "There are alternative ways to do this, such as using float(max_list[i]) to retrieve the value for normalizing.", "The original calculation of new_value was starting over with each element, so your example would return new_value == 100 because this was based off the final element in the input list, which is 100."], "childNum": 3, "tag": "p", "senID": 6, "childList": [{"text": "float(max_list[i])", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "new_value", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "new_value == 100", "childNum": 0, "tag": "code", "childList": []}]}], [{"code": "<pre>\n<code>\n from math import ceil, log10\n\n# works for floats, too.\nx = [83, 1350, 1, 100, 12.75]\ny = [10**ceil(log10(el)) for el in x]\n\n# alt list-comprehension if integers needed\n# y = [int(10**ceil(log10(el))) for el in x]\n</code>\n</pre>\n", "senID": 0}]]