[[{"code": "<pre>\n<code>\n &gt;&gt;&gt; import struct\n&gt;&gt;&gt; rgbstr='aabbcc'\n&gt;&gt;&gt; struct.unpack('BBB',rgbstr.decode('hex'))\n(170, 187, 204)\n</code>\n</pre>\n", "senID": 0}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; rgb = (50,100,150)\n&gt;&gt;&gt; struct.pack('BBB',*rgb).encode('hex')\n'326496'\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Trying to be pythonic:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "pythonic", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; rgbstr='aabbcc'\n&gt;&gt;&gt; tuple(ord(c) for c in rgbstr.decode('hex'))\n(170, 187, 204)\n&gt;&gt;&gt; tuple(map(ord, rgbstr.decode('hex'))\n(170, 187, 204)\n</code>\n</pre>\n", "senID": 1}, {"text": ["and"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; rgb=(12,50,100)\n&gt;&gt;&gt; \"\".join(map(chr, rgb)).encode('hex')\n'0c3264'\n</code>\n</pre>\n", "senID": 3}], [{"text": ["A very simplistic approach to convert rgb to hex"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; rgb = (255, 255, 255)\n&gt;&gt;&gt; r, g , b = rgb\n&gt;&gt;&gt; hex(r)\n'0xff'\n&gt;&gt;&gt; hex(r) + hex(g)[2:] + hex(b)[2:]\n'0xffffff'\n&gt;&gt;&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["A simplistic approach to convert Hex to rgb "], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; h  = '0xffffff'\n&gt;&gt;&gt; h1, h2, h3 = h[0:4], '0x' + h[4:6], '0x' + h[6:8]\n&gt;&gt;&gt; h1, h2, h3\n('0xff', '0xff', '0xff')\n&gt;&gt;&gt; r, g , b = int(h1, 16), int(h2, 16), int(h3, 16)\n&gt;&gt;&gt; r, g, b\n(255, 255, 255)\n</code>\n</pre>\n", "senID": 3}, {"text": ["Use a module which provides some these facility: webcolors"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "webcolors", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pypi.python.org/pypi/webcolors/1.3"}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; hex_to_rgb('#000080')\n(0, 0, 128)\n&gt;&gt;&gt; rgb_to_hex((255, 255, 255))\n'#ffffff'\n</code>\n</pre>\n", "senID": 5}, {"text": ["Function doc:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"code": "<pre>\n<code>\n import re\n\ndef hex_to_int_color(v):\n  return tuple(int(i,16) for i in re.match(\n    r'^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$', v,\n    flags=re.IGNORECASE).groups())\n\ndef int_to_hex_color(v):\n  return '#%02x%02x%02x' % v\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n HEX = '0123456789abcdef'\n\ndef rgb(triplet):\n    triplet = triplet.lower()\n    return (HEX.index(triplet[0])*16 + HEX.index(triplet[1]),\n            HEX.index(triplet[2])*16 + HEX.index(triplet[3]),\n            HEX.index(triplet[4])*16 + HEX.index(triplet[5]))\n\ndef triplet(rgb):\n    return hex(rgb[0])[2:] + hex(rgb[1])[2:] + hex(rgb[2])[2:]\n\nprint rgb('aabbcc')\n# (170, 187, 204)\nprint triplet((170, 187, 204))\n# aabbcc\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n def hex_to_int_color(v):\n    if (v[0] == '#')\n        v = v[1:]\n    assert(len(v) == 6)\n    return int(v[:2], 16), int(v[2:4], 16), int(v[4:6], 16)\n\ndef int_to_hex_color(v):\n    assert(len(v) == 3)\n    return '#%02x%02x%02x' % v\n</code>\n</pre>\n", "senID": 0}]]