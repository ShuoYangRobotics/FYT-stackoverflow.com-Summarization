[[{"text": ["Edit - based on your comment of dates being needed to be rounded down if there are fewer days in the next month, here is a solution:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Edit", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import datetime\n&gt;&gt;&gt; import calendar\n&gt;&gt;&gt;\n&gt;&gt;&gt; def add_months(sourcedate,months):\n...     month = sourcedate.month - 1 + months\n...     year = sourcedate.year + month / 12\n...     month = month % 12 + 1\n...     day = min(sourcedate.day,calendar.monthrange(year,month)[1])\n...     return datetime.date(year,month,day)\n...\n&gt;&gt;&gt; somedate = datetime.date.today()\n&gt;&gt;&gt; somedate\ndatetime.date(2010, 11, 9)\n&gt;&gt;&gt; add_months(somedate,1)\ndatetime.date(2010, 12, 9)\n&gt;&gt;&gt; add_months(somedate,23)\ndatetime.date(2012, 10, 9)\n&gt;&gt;&gt; otherdate = datetime.date(2010,10,31)\n&gt;&gt;&gt; add_months(otherdate,1)\ndatetime.date(2010, 11, 30)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, if you're not worried about hours, minutes and seconds you could use date rather than datetime.", "If you are worried about hours, minutes and seconds you need to modify my code to use datetime and copy hours, minutes and seconds from the source to the result."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "date", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "datetime", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "datetime", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Well with some tweaks and use of timedelta here we go: "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "timedelta", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/datetime.html#timedelta-objects"}]}, {"code": "<pre>\n<code>\n from datetime import datetime, timedelta\n\n\ndef inc_date(origin_date):\n    day = origin_date.day\n    month = origin_date.month\n    year = origin_date.year\n    if origin_date.month == 12:\n        delta = datetime(year + 1, 1, day) - origin_date\n    else:\n        delta = datetime(year, month + 1, day) - origin_date\n    return origin_date + delta\n\nfinal_date = inc_date(datetime.today())\nprint final_date.date()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["since no one suggested any solution, here is how i solved so far"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n year, month= divmod(mydate.month+1, 12)\nif month == 0: \n      month = 12\n      year = year -1\nnext_month = datetime.datetime(mydate.year + year, month, 1)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Perhaps add the number of days in the current month using calendar.monthrange()?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import calendar, datetime\n\ndef increment_month(when):\n    days = calendar.monthrange(when.year, when.month)[1]\n    return when + datetime.timedelta(days=days)\n\nnow = datetime.datetime.now()\nprint 'It is now %s' % now\nprint 'In a month, it will be %s' % increment_month(now)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Similar in ideal to Dave Webb's solution, but without all of that tricky modulo arithmetic:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import datetime, calendar\n\ndef increment_month(date):\n    # Go to first of this month, and add 32 days to get to the next month\n    next_month = date.replace(day=1) + datetime.timedelta(32)\n    # Get the day of month that corresponds\n    day = min(date.day, calendar.monthrange(next_month.year, next_month.month)[1])\n    return next_month.replace(day=day)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["example using the time object:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n start_time = time.gmtime(time.time())    # start now\n\n#increment one month\nstart_time = time.gmtime(time.mktime([start_time.tm_year, start_time.tm_mon+1, start_time.tm_mday, start_time.tm_hour, start_time.tm_min, start_time.tm_sec, 0, 0, 0]))\n</code>\n</pre>\n", "senID": 1}]]