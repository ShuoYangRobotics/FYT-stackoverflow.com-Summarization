[[{"text": ["There's always SimpleXMLWriter, part of the ElementTree toolkit.", "The interface is dead simple."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "SimpleXMLWriter", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://effbot.org/zone/xml-writer.htm"}]}, {"text": ["Here's an example: "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from elementtree.SimpleXMLWriter import XMLWriter\nimport sys\n\nw = XMLWriter(sys.stdout)\nhtml = w.start(\"html\")\n\nw.start(\"head\")\nw.element(\"title\", \"my document\")\nw.element(\"meta\", name=\"generator\", value=\"my application 1.0\")\nw.end()\n\nw.start(\"body\")\nw.element(\"h1\", \"this is a heading\")\nw.element(\"p\", \"this is a paragraph\")\n\nw.start(\"p\")\nw.data(\"this is \")\nw.element(\"b\", \"bold\")\nw.data(\" and \")\nw.element(\"i\", \"italic\")\nw.data(\".\")\nw.end(\"p\")\n\nw.close(html)\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Another way is using the E Factory builder from lxml (available in Elementtree too)"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "E Factory", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://codespeak.net/lxml/tutorial.html#the-e-factory"}, {"href": "http://effbot.org/zone/element-builder.htm", "text": "Elementtree", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from lxml.builder import E\n\n&gt;&gt;&gt; def CLASS(*args): # class is a reserved word in Python\n...     return {\"class\":' '.join(args)}\n\n&gt;&gt;&gt; html = page = (\n...   E.html(       # create an Element called \"html\"\n...     E.head(\n...       E.title(\"This is a sample document\")\n...     ),\n...     E.body(\n...       E.h1(\"Hello!\", CLASS(\"title\")),\n...       E.p(\"This is a paragraph with \", E.b(\"bold\"), \" text in it!\"),\n...       E.p(\"This is another paragraph, with a\", \"\\n      \",\n...         E.a(\"link\", href=\"http://www.python.org\"), \".\"),\n...       E.p(\"Here are some reservered characters: &lt;spam&amp;egg&gt;.\"),\n...       etree.XML(\"&lt;p&gt;And finally an embedded XHTML fragment.&lt;/p&gt;\"),\n...     )\n...   )\n... )\n\n&gt;&gt;&gt; print(etree.tostring(page, pretty_print=True))\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;This is a sample document&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1 class=\"title\"&gt;Hello!&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph with &lt;b&gt;bold&lt;/b&gt; text in it!&lt;/p&gt;\n    &lt;p&gt;This is another paragraph, with a\n      &lt;a href=\"http://www.python.org\"&gt;link&lt;/a&gt;.&lt;/p&gt;\n    &lt;p&gt;Here are some reservered characters: &amp;lt;spam&amp;amp;egg&amp;gt;.&lt;/p&gt;\n    &lt;p&gt;And finally an embedded XHTML fragment.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Pygenx is the python wrapper for a nice little streaming XML writer called GenX.", "The API is nice and simple:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "Pygenx", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://software.translucentcode.org/pygenx/"}, {"text": "GenX", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.tbray.org/ongoing/When/200x/2004/02/20/GenxStatus"}]}, {"code": "<pre>\n<code>\n w = genx.Writer()\nw.startDocFile(sys.stdout)\nw.startElementLiteral(\"TopLevelElement\")\nw.addText(\"Some Text\")\nw.endElement()\nw.endDocument()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I ended up using saxutils.escape(str) to generate valid XML strings and then validating it with Eli's approach to be sure I didn't miss any tag"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from xml.sax import saxutils\nfrom xml.dom.minidom import parseString\nfrom xml.parsers.expat import ExpatError\n\nxml = '''&lt;?xml version=\"1.0\" encoding=\"%s\"?&gt;\\n\n&lt;contents title=\"%s\" crawl_date=\"%s\" in_text_date=\"%s\" \nurl=\"%s\"&gt;\\n&lt;main_post&gt;%s&lt;/main_post&gt;\\n&lt;/contents&gt;''' %\n(self.encoding, saxutils.escape(title), saxutils.escape(time), \nsaxutils.escape(date), saxutils.escape(url), saxutils.escape(contents))\ntry:\n    minidoc = parseString(xml)\ncatch ExpatError:\n    print \"Invalid xml\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["don't you actually want something like:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n html(head(script(type='text/javascript', content='var a = ...')),\nbody(h1('And I like the fact that 3 &lt; 1'), p('just some paragraph'))\n</code>\n</pre>\n", "senID": 1}, {"text": ["I think I saw something like that somewhere.", "This would be wonderful."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["EDIT: Actually, I went and wrote a library today to do just that: magictree"], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "EDIT:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "just that", "childNum": 0, "tag": "em", "childList": []}, {"href": "http://pypi.python.org/pypi/magictree", "text": "magictree", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["You can use it like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from magictree import html, head, script, body, h1, p\nroot = html(\n         head(\n           script('''var a = 'I love &amp;amp;aacute; letters''', \n                  type='text/javascript')),\n         body(\n           h1('And I like the fact that 3 &gt; 1')))\n\n# root is a plain Element object, like those created with ET.Element...\n# so you can write it out using ElementTree :)\ntree = ET.ElementTree(root)\ntree.write('foo.xhtml')\n</code>\n</pre>\n", "senID": 5}, {"text": ["The magic in magictree lies in how the importing works: The Element factories are created when needed.", "Have a look at the source, it is based on an answer to another StackOverflow question."], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "magictree", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "Element", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "look at the source", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://code.google.com/p/pymagictree/source/browse/trunk/magictree.py"}, {"href": "http://stackoverflow.com/questions/2447353/getattr-on-a-module", "text": "based on an answer to another StackOverflow question", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["I assume that you're actually creating an XML DOM tree, because you want to validate that what goes into this file is valid XML, since otherwise you'd just write a static string to a file.", "If validating your output is indeed your goal, then I'd suggest"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from xml.dom.minidom import parseString\n\ndoc = parseString(\"\"\"&lt;html&gt;\n    &lt;head&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            var a = 'I love &amp;amp;aacute; letters'\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;And I like the fact that 3 &amp;gt; 1&lt;/h1&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\"\"\")\n\nwith open(\"foo.xhtml\", \"w\") as f:\n    f.write( doc.toxml() )\n</code>\n</pre>\n", "senID": 1}, {"text": ["This lets you just write the XML you want to output, validate that it's correct (since parseString will raise an exception if it's invalid) and have your code look much nicer."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Presumably you're not just writing the same static XML every time and want some substitution.", "In this case I'd have lines like"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n var a = '%(message)s'\n</code>\n</pre>\n", "senID": 4}, {"text": ["and then use the % operator to do the substitution, like"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n &lt;/html&gt;\"\"\" % {\"message\": \"I love &amp;amp;aacute; letters\"})\n</code>\n</pre>\n", "senID": 6}], [{"text": ["https://github.com/galvez/xmlwitch:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "https://github.com/galvez/xmlwitch", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "https://github.com/galvez/xmlwitch"}]}, {"code": "<pre>\n<code>\n import xmlwitch\nxml = xmlwitch.Builder(version='1.0', encoding='utf-8')\nwith xml.feed(xmlns='http://www.w3.org/2005/Atom'):\n    xml.title('Example Feed')\n    xml.updated('2003-12-13T18:30:02Z')\n    with xml.author:\n        xml.name('John Doe')\n    xml.id('urn:uuid:60a76c80-d399-11d9-b93C-0003939e0af6')\n    with xml.entry:\n        xml.title('Atom-Powered Robots Run Amok')\n        xml.id('urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a')\n        xml.updated('2003-12-13T18:30:02Z')\n        xml.summary('Some text.')\nprint(xml)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Try http://uche.ogbuji.net/tech/4suite/amara.", "It is quite complete and has a straight forward set of access tools.", "Normal Unicode support, etc. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://uche.ogbuji.net/tech/4suite/amara", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://uche.ogbuji.net/tech/4suite/amara"}]}, {"code": "<pre>\n<code>\n #\n#Output the XML entry\n#\ndef genFileOLD(out,label,term,idval):\n    filename=entryTime() + \".html\"\n    writer=MarkupWriter(out, indent=u\"yes\")\n    writer.startDocument()\n    #Test element and attribute writing\n    ans=namespace=u'http://www.w3.org/2005/Atom'\n    xns=namespace=u'http://www.w3.org/1999/xhtml'\n    writer.startElement(u'entry',\n       ans,\n       extraNss={u'x':u'http://www.w3.org/1999/xhtml' ,\n                 u'dc':u'http://purl.org/dc/elements/1.1'})\n    #u'a':u'http://www.w3.org/2005/Atom',\n    #writer.attribute(u'xml:lang',unicode(\"en-UK\"))\n\n    writer.simpleElement(u'title',ans,content=unicode(label))\n    #writer.simpleElement(u'a:subtitle',ans,content=u' ')\n    id=unicode(\"http://www.dpawson.co.uk/nodesets/\"+afn.split(\".\")[0])\n    writer.simpleElement(u'id',ans,content=id)\n    writer.simpleElement(u'updated',ans,content=unicode(dtime()))\n    writer.startElement(u'author',ans)\n    writer.simpleElement(u'name',ans,content=u'Dave ')\n    writer.simpleElement(u'uri',ans,\n      content=u'http://www.dpawson.co.uk/nodesets/'+afn+\".xml\")\n    writer.endElement(u'author')\n    writer.startElement(u'category', ans)\n    if (prompt):\n        label=unicode(raw_input(\"Enter label \"))\n    writer.attribute(u'label',unicode(label))\n    if (prompt):\n        term = unicode(raw_input(\"Enter term to use \"))\n    writer.attribute(u'term', unicode(term))\n    writer.endElement(u'category')\n    writer.simpleElement(u'rights',ans,content=u'\\u00A9 Dave 2005-2008')\n    writer.startElement(u'link',ans)\n    writer.attribute(u'href',\n         unicode(\"http://www.dpawson.co.uk/nodesets/entries/\"+afn+\".html\"))\n    writer.attribute(u'rel',unicode(\"alternate\"))\n    writer.endElement(u'link')\n    writer.startElement(u'published', ans)\n    dt=dtime()\n    dtu=unicode(dt)\n    writer.text(dtu)\n    writer.endElement(u'published')\n    writer.simpleElement(u'summary',ans,content=unicode(label))\n    writer.startElement(u'content',ans)\n    writer.attribute(u'type',unicode(\"xhtml\"))\n    writer.startElement(u'div',xns)\n    writer.simpleElement(u'h3',xns,content=unicode(label))\n    writer.endElement(u'div')\n    writer.endElement(u'content')\n    writer.endElement(u'entry')\n</code>\n</pre>\n", "senID": 1}]]