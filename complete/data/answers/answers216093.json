[[{"text": ["In the project Wader we use python gtkmvc, that makes much easier to apply the MVC patterns when using pygtk and glade, you can see the file organization of our project in the svn repository:"], "childNum": 3, "tag": "p", "senID": 0, "childList": [{"text": "Wader", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://wader-project.org"}, {"href": "http://pygtkmvc.sourceforge.net/", "text": "python gtkmvc", "childNum": 0, "tag": "a", "childList": []}, {"href": "http://trac.wader-project.org/browser/trunk/wader", "text": "svn repository", "childNum": 0, "tag": "a", "childList": []}]}, {"code": "<pre>\n<code>\n wader/\n  cli/\n  common/\n  contrib/\n  gtk/\n    controllers/\n    models/\n    views/\n  test/\n  utils/\n</code>\n</pre>\n", "senID": 1}], [{"text": ["This has likely nothing to do with PyGTK, but rather a general code organization issue.", "You would probably benefit from applying some MVC (Model-View-Controller) design patterns.", "See Design Patterns, for example."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Design Patterns", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Design_Patterns"}]}], [{"text": ["\"holds the primary application class (most functional routines)\""], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As in singular -- one class?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["I'm not surprised that the One Class Does Everything design isn't working.", "It might not be what I'd call object-oriented.", "It doesn't sound like it follows the typical MVC design pattern if your functionality is piling up in a single class."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "One Class Does Everything", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["What's in this massive class?", "I suggest that you can probably refactor this into pieces.", "You have two candidate dimensions for refactoring your application class -- if, indeed, I've guessed right that you've put everything into a single class."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}], [{"text": ["Sorry to answer so late.", "Kiwi seems to me a far better solution than gtkmvc.", "It is my first dependency for any pygtk project."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Kiwi", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://async.com.br/projects/kiwi"}]}], [{"text": ["Python 2.6 supports explicit relative imports, which make using packages even easier than previous versions.", "I suggest you look into breaking your app into smaller modules inside a package.", "You can organize your application like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "explicit relative imports", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/whatsnew/2.6.html#pep-366-explicit-relative-imports-from-a-main-module"}]}, {"code": "<pre>\n<code>\n myapp/\n  application/\n  gui/\n  command/\n  state/\n</code>\n</pre>\n", "senID": 1}, {"text": ["Where each directory has its own __init__.py.", "You can have a look at any python app or even standard library modules for examples."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["So having not heard back regarding my edit to the original question, I have done some more research and the conclusion I seem to be coming to is that yes, I should break the interface out into several views, each with its own controller.", "Python-gtkmvc provides the ability to this by providing a glade_top_widget_name parameter to the View constructor.", "This all seems to make a good deal of sense although it is going to require a large refactoring of my existing codebase which I may or may not be willing to undertake in the near-term (I know, I know, I should.", ")  Moreover, I'm left to wonder whether should just have a single Model object (my application is fairly simple--no more than twenty-five state vars) or if I should break it out into multiple models and have to deal with controllers observing multiple models and chaining notifications across them.", "(Again, I know I really should do the latter.", ")  If anyone has any further insight, I still don't really feel like I've gotten an answer to the original question, although I have a direction to head in now."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "yes", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "glade_top_widget_name", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "should", "childNum": 0, "tag": "em", "pos": 2, "childList": []}, {"text": "should", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}, {"text": ["(Moreover it seems like their ought to be other architectural choices at hand, given that up until now I had not seen a single Python application coded in the MVC style, but then again many Python applications tend to have the exact problem I've described above."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]