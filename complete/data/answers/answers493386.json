[[{"text": ["Since people may come here looking for it based on the title, Python also supports printf-style substitution:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; strings = [ \"one\", \"two\", \"three\" ]\n&gt;&gt;&gt;\n&gt;&gt;&gt; for i in xrange(3):\n...     print \"Item %d: %s\" % (i, strings[i])\n...\nItem 0: one\nItem 1: two\nItem 2: three\n</code>\n</pre>\n", "senID": 1}, {"text": ["And, you can handily multiply string values:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; print \".\" * 10\n..........\n</code>\n</pre>\n", "senID": 3}, {"text": ["Note: The title of this question used to be something like \"How to printf in python?"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Note: The title of this question used to be something like \"How to printf in python?\"", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"code": "<pre>\n<code>\n import sys\nsys.stdout.write('.')\n</code>\n</pre>\n", "senID": 0}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n print('.'), # this will still print a space, but not a newline\n</code>\n</pre>\n", "senID": 2}], [{"text": ["The new (as of Python 3.0) print function has an optional end parameter that let's you modify the ending character.", "There's also sep for separator."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Use python print function for python2.6+   (will also brake any existing keyworded print statements in the same file."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "(will also brake any existing keyworded print statements in the same file.)", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n # for python2 to use the print() function, removing the print keyword\nfrom __future__ import print_function\nfor x in xrange(10):\n    print('.', end='')\n</code>\n</pre>\n", "senID": 1}, {"text": ["To not ruin all your python2 print keywords, create a separate printf.py file"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "printf.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n # printf.py\n\nfrom __future__ import print_function\n\ndef printf(str, *args):\n    print(str % args, end='')\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then, use it in your file"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n from printf import printf\nfor x in xrange(10):\n    printf('.')\nprint 'done'\n#..........done\n</code>\n</pre>\n", "senID": 5}, {"text": ["More examples showing printf style"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n printf('hello %s', 'world')\nprintf('%i %f', 10, 3.14)\n#hello world10 3.140000\n</code>\n</pre>\n", "senID": 7}], [{"text": ["This is not the answer to the question in the title, but it's the answer on how to print on the same line:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import sys\nfor i in xrange(0,10):\n   sys.stdout.write(\".\")\n   sys.stdout.flush()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can do it with end argument of print.", "In python3 range() returns iterator and xrange() doesn't exist."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "end", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n for i in range(10): print('.', end='')\n</code>\n</pre>\n", "senID": 1}], [{"text": ["If you want to access C++ function, you can do it using built-in DLL function like this:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["from ctypes import *"], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "from ctypes import *", "childNum": 1, "tag": "pre", "pos": 0, "childList": [{"text": "from ctypes import *", "tag": "code"}]}, {"text": "from ctypes import *", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["msvcrt = cdll.msvcrt\nmsvcrt.printf(\"Hello world!\\n\")\n"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["Print without a space or newline on Windows:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n print \"text\" + \"\\r\",\n</code>\n</pre>\n", "senID": 1}]]