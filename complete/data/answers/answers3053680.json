[[{"text": ["If you do that :"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self):\n  self.x = x\n  self.y = y\n</code>\n</pre>\n", "senID": 1}, {"text": ["you assign the gobal vars x and y (it they exists ) to your instance"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["with :"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self, x, y):\n      self.x = x\n      self.y = y\n</code>\n</pre>\n", "senID": 4}, {"text": ["you assign what you give as parameter to the constructor"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["and that is a lot more flexible :-)"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["Just to be clear"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def __init__(self):\n    self.x = x\n    self.y = y\n</code>\n</pre>\n", "senID": 1}, {"text": ["This ^ will only work if x and y can be found at runtime - if they haven't been passed in then they must have been set elsewhere (globally) or it will generate an error."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class c:\n    def __init__(self):\n        self.x = x\n\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; q = c()\n&gt;&gt;&gt; q.x\n1\n&gt;&gt;&gt; del x\n&gt;&gt;&gt; q.x\n1\n&gt;&gt;&gt; w = c()\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#24&gt;\", line 1, in &lt;module&gt;\n    w = c()\n  File \"&lt;pyshell#14&gt;\", line 3, in __init__\n    self.x = x\nNameError: global name 'x' is not defined\n&gt;&gt;&gt; \n&gt;&gt;&gt; w = c(2)\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#19&gt;\", line 1, in &lt;module&gt;\n    w = c(2)\nTypeError: __init__() takes exactly 1 argument (2 given)\n</code>\n</pre>\n", "senID": 3}, {"text": ["This is why you want / need to specify them as parameters - it might work with the global lookup but it would probably violate the \"principle of least astonishment\""], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "principle of least astonishment", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikipedia.org/wiki/Principle_of_least_astonishment"}]}], [{"text": ["self is a \"magic\" name - it can really be anything, but self is used for consistency and clarity.", "To answer your question, each class method/function requires an explicit reference to the class as the first parameter.", "Using Ipython:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Ipython", "tag": "a", "pos": 2, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/moin/"}]}, {"code": "<pre>\n<code>\n In [66]: class Test:\n   ....:     def __init__(self):\n   ....:         pass\n   ....:     def wow(self):\n   ....:         print self\n   ....:\n   ....:\n\nIn [67]: x = Test()\n\nIn [68]: x.wow()\n&lt;__main__.Test instance at 0x0159FDF0&gt;\n</code>\n</pre>\n", "senID": 1}, {"text": ["Your second example won't actually work unless you already have an x and y in your namespace."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["For instance, if you defined your class:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n class Test:\n    def __init__(self):\n        self.x = x\n        self.y = y\n</code>\n</pre>\n", "senID": 4}, {"text": ["and tried"], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"code": "<pre>\n<code>\n x = Test()\n</code>\n</pre>\n", "senID": 6}, {"text": ["it will throw a NameError."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "NameError", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["However if you write:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n x = 3\ny = 4\ntest = Test()\n</code>\n</pre>\n", "senID": 9}, {"text": ["then it will work.", "However, it's not a good idea to do such a thing.", "For the reason why read line 2:"], "childNum": 0, "tag": "p", "senID": 10, "childList": []}, {"code": "<pre>\n<code>\n In [72]: import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code>\n</pre>\n", "senID": 11}], [{"text": ["The instance reference in Python is explicit.", "That way it can be manipulated by e.g.", "decorators before finally being passed to the method."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["We need to declare x and y as arguments to the function so that we can use their names within the function, bound to the arguments passed in the corresponding function call."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "x", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "y", "childNum": 0, "tag": "code", "childList": []}]}], [], [{"text": ["Python is different from languages like C++ and Java in that the object instance reference is passed explicitly."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["That is, if you have an object which is an instance of the class and you want to invoke a method that operates on that instance (e.g., reads its fields), you use the self references as the object."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In c++ and Java, you have an implicit \"this\" reference that is present in the compiled version of your program but not in the source code.", "You use the static keyword to make it into a class method that does not have a \"this\"."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]