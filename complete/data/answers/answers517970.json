[[{"text": ["As you mentioned, you can do a system call:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; clear = lambda: os.system('cls')\n&gt;&gt;&gt; clear()\n</code>\n</pre>\n", "senID": 1}, {"text": ["I am not sure of any other way in Windows."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["here something handy that is a little more cross-platform"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import os\n\ndef cls():\n    os.system(['clear','cls'][os.name == 'nt'])\n\n# now, to clear the screen\ncls()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Well, here's a quick hack:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; clear = \"\\n\" * 100\n&gt;&gt;&gt; print clear\n&gt;&gt;&gt; ...do some other stuff...\n&gt;&gt;&gt; print clear\n</code>\n</pre>\n", "senID": 1}, {"text": ["Or to save some typing, put this file in your python search path:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n # wiper.py\nclass Wipe(object):\n    def __repr__(self):\n        return '\\n'*1000\n\nwipe = Wipe()\n</code>\n</pre>\n", "senID": 3}, {"text": ["Then you can do this from the interpreter all you like :)"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from wiper import wipe\n&gt;&gt;&gt; wipe\n&gt;&gt;&gt; wipe\n&gt;&gt;&gt; wipe\n</code>\n</pre>\n", "senID": 5}], [{"text": ["Although this is an older question, I thought I'd contribute something summing up what I think were the best of the other answers and add a wrinkle of my own by suggesting that you put these command(s) into a file and set your PYTHONSTARTUP environment variable to point to it.", "Since I'm on Windows at the moment, it's slightly biased that way, but could easily be slanted some other direction."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Anyway, here's my take on the code to put (or add to your existing) Python startup script:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n # ==== pythonstartup.py ====\n\n# add something to clear the screen\nclass cls(object):\n    def __repr__(self):\n        import os\n        os.system('cls' if os.name == 'nt' else 'clear')\n        return ''\n\ncls = cls()\n\n# ==== end pythonstartup.py ====\n</code>\n</pre>\n", "senID": 2}, {"text": ["BTW, you can also use @Triptych's __repr__ trick to change exit() into just exit:"], "childNum": 4, "tag": "p", "senID": 3, "childList": [{"text": "Triptych's", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/517970/how-to-clear-python-interpreter-console/517992#517992"}, {"text": "__repr__", "childNum": 0, "tag": "code", "childList": []}, {"text": "exit()", "childNum": 0, "tag": "code", "childList": []}, {"text": "exit", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class exit(object):\n    exit = exit # original object\n    def __repr__(self):\n        self.exit() # call original\n        return ''\n\nexit = exit()\n</code>\n</pre>\n", "senID": 4}, {"text": ["Lastly, here's something else that changes the primary interpreter prompt from &gt;&gt;&gt; to cwd+&gt;&gt;&gt;:"], "childNum": 3, "tag": "p", "senID": 5, "childList": [{"text": "&gt;&gt;&gt;", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "cwd", "childNum": 0, "tag": "em", "childList": []}, {"text": "&gt;&gt;&gt;", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n class Prompt:\n    def __str__(self):\n        import os\n        return '%s &gt;&gt;&gt; ' % os.getcwd()\n\nimport sys\nsys.ps1 = Prompt()\ndel sys\ndel Prompt\n</code>\n</pre>\n", "senID": 6}], [{"text": ["Use idle.", "It has many handy features.", "F6, for example, resets the console.", "Closing and opening the console are good ways to clear it."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Wiper is cool, good thing about it is I don't have to type '()' around it.", "Here is slight variation to it"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n # wiper.py\nimport os\nclass Cls(object):\n    def __repr__(self):\n\u00a0 \u00a0 \u00a0 \u00a0 os.system('cls')\n        return ''\n</code>\n</pre>\n", "senID": 1}, {"text": ["The usage is quite simple:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; cls = Cls()\n&gt;&gt;&gt; cls # this will clear console.\n</code>\n</pre>\n", "senID": 3}], [{"text": ["I'm using MINGW/BASH on Windows XP, SP3."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(stick this in .pythonstartup)\n # My ctrl-l already kind of worked, but this might help someone else\n # leaves prompt at bottom of the window though...\nimport readline\nreadline.parse_and_bind('\\C-l: clear-screen')  "], "childNum": 4, "tag": "p", "senID": 1, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["# This works in BASH because I have it in .inputrc as well, but for some\n # reason it gets dropped when I go into Python\nreadline.parse_and_bind('\\C-y: kill-whole-line')  "], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "", "childNum": 0, "tag": "br", "pos": 0, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "childList": []}]}, {"text": ["I couldn't stand typing 'exit()' anymore and was delighted with martineau's/Triptych's tricks:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I slightly doctored it though (stuck it in .pythonstartup)  "], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class exxxit():\n    \"\"\"Shortcut for exit() function, use 'x' now\"\"\"\n    quit_now = exit # original object\n    def __repr__(self):\n        self.quit_now() # call original\nx = exxxit()\n</code>\n</pre>\n", "senID": 5}, {"code": "<pre>\n<code>\n Py2.7.1&gt;help(x)\nHelp on instance of exxxit in module __main__:\n\nclass exxxit\n |  Shortcut for exit() function, use 'x' now\n |\n |  Methods defined here:\n |\n |  __repr__(self)\n |\n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |\n |  quit_now = Use exit() or Ctrl-Z plus Return to exit\n</code>\n</pre>\n", "senID": 6}], [{"text": ["EDIT: I've just read \"windows\", this is for linux users, sorry."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "hr", "senID": 1}, {"text": ["In bash:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n #!/bin/bash\n\nwhile [ \"0\" == \"0\" ]; do\n    clear\n    $@\n    while [ \"$input\" == \"\" ]; do\n        read -p \"Do you want to quit? (y/n): \" -n 1 -e input\n        if [ \"$input\" == \"y\" ]; then\n            exit 1\n        elif [ \"$input\" == \"n\" ]; then\n            echo \"Ok, keep working ;)\"\n        fi\n    done\n    input=\"\"\ndone\n</code>\n</pre>\n", "senID": 3}, {"text": ["Save it as \"whatyouwant.sh\", chmod +x it then run:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n ./whatyouwant.sh python\n</code>\n</pre>\n", "senID": 5}, {"text": ["or something other than python (idle, whatever).", "This will ask you if you actually want to exit, if not it rerun python (or the command you gave as parameter)."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["This will clear all, the screen and all the variables/object/anything you created/imported in python. "], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["In python just type exit() when you want to exit."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"text": ["This should be cross platform, and also uses the preferred subprocess.call instead of os.system as per theos.systemdocs.", "Should work in Python >= 2.4."], "childNum": 4, "tag": "p", "senID": 0, "childList": [{"text": "subprocess.call", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "os.system", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "theos.systemdocs", "tag": "a", "pos": -1, "childList": [{"text": "os.system", "tag": "code"}], "childNum": 1, "href": "http://docs.python.org/library/os.html#os.system"}, {"text": "os.system", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n import subprocess\nimport os\n\nif os.name == 'nt':\n    def clearscreen():\n        subprocess.call(\"cls\", shell=True)\n        return\nelse:\n    def clearscreen():\n        subprocess.call(\"clear\", shell=True)\n        return\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One small point - This will not work in IDLE is you are using windows. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Here are two nice ways of doing that:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Here are two nice ways of doing that:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["1. "], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "1.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import os\n\n# Clear Windows command prompt.\nif (os.name in ('ce', 'nt', 'dos')) == True:\n    os.system('cls')\n\n# Clear the Linux terminal.\nelif ('posix' in os.name) == True:\n    os.system('clear')\n</code>\n</pre>\n", "senID": 2}, {"text": ["2."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "2.", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import os\n\ndef clear():\n    if os.name == 'posix':\n        os.system('clear')\n\n    elif os.name == ('ce', 'nt', 'dos'):\n        os.system('cls')\n\n\nclear()\n</code>\n</pre>\n", "senID": 4}], [{"text": ["How about this for a clear"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n - os.system('cls')\n</code>\n</pre>\n", "senID": 1}, {"text": ["That is about as short as could be!"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"text": ["The OS command clear in Linux and cls in Windows outputs a \"magic string\" which you can just print.", "To get the string, execute the command with popen and save it in a variable for later use:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "clear", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "cls", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"code": "<pre>\n<code>\n from os import popen\nwith popen('clear') as f:\n    clear = f.read()\n\nprint clear\n</code>\n</pre>\n", "senID": 1}, {"text": ["On my machine the string is '\\x1b[H\\x1b[2J'."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "'\\x1b[H\\x1b[2J'", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}]]