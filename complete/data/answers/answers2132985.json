[[{"text": ["Assuming your import myDict works, you need to do the following:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "import myDict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n from myDict import airportCode\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Well, it doesn't need to be a .py file.", "You could just do:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": ".py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n eval(open(\"myDict\").read())\n</code>\n</pre>\n", "senID": 1}, {"text": ["It's a gaping security hole, though."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["Another module you might want to look at is csv for importing CSV files.", "Then your users could edit it with a spreadsheet and you don't have to teach them Python syntax."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "csv", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Just import it"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import script\nprint script.airportCode\n</code>\n</pre>\n", "senID": 1}, {"text": ["or, better"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n from script import airportCode\nprint airportCode\n</code>\n</pre>\n", "senID": 3}, {"text": ["Just be careful to put both scripts on the same directory (or make a python package, a subdir with __init__.py file; or put the path to script.py on the PYTHONPATH; but these are \"advanced options\", just put it on the same directory and it'll be fine). "], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["If your dict has to be hand-editable by a non-programmer, perhaps it might make more sense using a CSV file for this.", "Then you editor can even use Excel."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["So you can use:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import csv\ncsvfile = csv.reader(open(\"airports.csv\"))\nairportCode = dict(csvfile)\n</code>\n</pre>\n", "senID": 2}, {"text": ["to read a CSV file like"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n \"ABERDEEN\",\"ABZ\"\n\"BELFAST INTERNATIONAL\",\"BFS\"\n\"BIRMINGHAM INTERNATIONAL\",\"BHX\"\n\"BIRMINGHAM INTL\",\"BHX\"\n\"BOURNMOUTH\",\"BOH\"\n\"BRISTOL\",\"BRS\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["Careful: If an airport were in that list twice, the last occurrence would silently \"overwrite\" any previous one(s)."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}], [{"text": ["When you perform an import in python you are really just pulling in names into your current namespace.", "It does not really matter what those names refer to so:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from myDict import airportCode\n</code>\n</pre>\n", "senID": 1}, {"text": ["Will work regardless of whether airportCode is a function, class or just a field as in your case."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "airportCode", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["Use csv.", "Stick import csv with the rest of your module imports,\nand then you can do as follows:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "import csv", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n f = open('somefile.csv')\nreader = csv.DictReader(f, (airport, iatacode))\nfor row in reader:\n   print row\n</code>\n</pre>\n", "senID": 1}, {"text": ["which should give you a list of dictionaries:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n airport | iatacode\n__________________\nAberdeen| ABZ\n</code>\n</pre>\n", "senID": 3}, {"text": ["to create the csv file:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n f = open('somefile.csv', 'w')\nwriter = csv.DictWriter(f, (airport, iatacode))\nfor row in airportcode:\n   writer.writerow()\nf.close()\n</code>\n</pre>\n", "senID": 5}, {"text": ["which will create a csv file with airports and IATA TLAs in two columns with airport and iatacode as the headers."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"text": ["You can also skip the dicts and just have strings by using Reader and Writer rather than DictReader and DictWriter."], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"text": ["By default, the csv module produces excel-style csv, but you can set whatever dialect you like as a kwarg."], "childNum": 0, "tag": "p", "senID": 8, "childList": []}], [{"code": "<pre>\n<code>\n from myDict import airportCode\nairportNode = 'BRISTOL'\nmyAirportCode = airportCode[airportName]\n</code>\n</pre>\n", "senID": 0}, {"text": ["If myDict should get accessed from a Python module in a different directory, you have to provide a __init__.py module."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "__init__.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["For more Information about this topic have a look at the module chapter of the Python documentation."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "the Python documentation", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/tutorial/modules.html#packages"}]}]]