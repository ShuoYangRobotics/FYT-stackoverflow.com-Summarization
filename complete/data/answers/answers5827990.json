[[{"text": ["This seems to be easiest way:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; from itertools import chain\n&gt;&gt;&gt; a = dict(a='b', c='d')\n&gt;&gt;&gt; ','.join(chain(*a.items()))\n'a,b,c,d'\n</code>\n</pre>\n", "senID": 1}], [{"text": ["First, the wrong answer:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "wrong", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n ','.join('%s,%s' % i for i in D.iteritems())\n</code>\n</pre>\n", "senID": 1}, {"text": ["This answer is wrong because, while associative arrays in PHP do have a given order, dictionaries in Python don't.", "The way to compensate for that is to either use an ordered mapping type (such as OrderedDict), or to force an explicit order:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "do", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "don't", "childNum": 0, "tag": "em", "pos": -1, "childList": []}, {"text": "OrderedDict", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n ','.join('%s,%s' % (k, D[k]) for k in ('a', 'c'))\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Use string join on a flattened list of dictionary items like this:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "join", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html?highlight=join#str.join"}]}, {"code": "<pre>\n<code>\n \",\".join(i for p in dict.items() for i in p)\n</code>\n</pre>\n", "senID": 1}, {"text": ["Also, you probably want to use OrderedDict."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "OrderedDict", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/collections.html?highlight=ordereddict#collections.OrderedDict"}]}], [{"text": ["This has quadratic performance, but if the dictionary is always small, that may not matter to you"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; sum({'a':'b','c':'d'}.items(), ())\n('a', 'b', 'c', 'd')\n</code>\n</pre>\n", "senID": 1}, {"text": ["note that the dict.items() does not preserve the order, so ('c', 'd', 'a', 'b') would also be a possible output"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n a=[]\n[ a.extend([i,j]) for i,j in dict.items() ]\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Either"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n [value for pair in {\"a\": \"b\", \"c\" : \"d\"}.iteritems() for value in pair]\n</code>\n</pre>\n", "senID": 1}, {"text": ["or"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n (lambda mydict: [value for pair in mydict.iteritems() for value in pair])({\"a\": \"b\", \"c\" : \"d\"})\n</code>\n</pre>\n", "senID": 3}, {"text": ["Explanation:"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Explanation:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Simplified this example is return each value from each pair in the mydict"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "mydict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Edit: Also put a \",\".join() around these.", "I didn't read your question properly"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "Edit: Also put a \",\".join() around these. I didn't read your question properly", "childNum": 0, "tag": "em", "pos": -1, "childList": []}]}], [{"text": ["This is not very elegant, but works:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n result=list()\nfor ind in g:\n   result.append(ind)\n   for cval in g[ind]:\n       result.append(cval)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["dictList = dict.items()"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["This will return a list of all the items."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]