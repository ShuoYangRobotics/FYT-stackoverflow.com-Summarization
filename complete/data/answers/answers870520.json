[[{"text": ["If you are looking for efficiency.", "Using the translate function is the fastest you can get."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "translate", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/stdtypes.html#str.translate"}]}, {"text": ["It can be used to quickly replace characters and/or delete them."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import string\ndelete_table  = string.maketrans(\n    string.ascii_lowercase, ' ' * len(string.ascii_lowercase)\n)\ntable = string.maketrans('', '')\n\n\"Agh#$%#%2341- -!zdrkfd\".translate(table, delete_table)\n</code>\n</pre>\n", "senID": 2}, {"text": ["In python 2.6: you don't need the second table anymore"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "In python 2.6:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n import string\ndelete_table  = string.maketrans(\n    string.ascii_lowercase, ' ' * len(string.ascii_lowercase)\n)\n\"Agh#$%#%2341- -!zdrkfd\".translate(None, delete_table)\n</code>\n</pre>\n", "senID": 4}, {"text": ["This is method is way faster than any other.", "Of course you need to store the delete_table somewhere and use it.", "But even if you don't store it and build it every time, it is still going to be faster than other suggested methods so far."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["To confirm my claims here are the results:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n for i in xrange(10000):\n    ''.join(c for c in s if c.islower())\n\nreal    0m0.189s\nuser    0m0.176s\nsys 0m0.012s\n</code>\n</pre>\n", "senID": 7}, {"text": ["While running the regular expression solution:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n for i in xrange(10000):\n    re.sub(r'[^a-z]', '', s)\n\nreal    0m0.172s\nuser    0m0.164s\nsys 0m0.004s\n</code>\n</pre>\n", "senID": 9}, {"text": ["[Upon request] If you pre-compile the regular expression:"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "[Upon request]", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n r = re.compile(r'[^a-z]')\nfor i in xrange(10000):\n    r.sub('', s)\n\nreal    0m0.166s\nuser    0m0.144s\nsys 0m0.008s\n</code>\n</pre>\n", "senID": 11}, {"text": ["Running the translate method the same number of times took:"], "childNum": 0, "tag": "p", "senID": 12, "childList": []}, {"code": "<pre>\n<code>\n real    0m0.075s\nuser    0m0.064s\nsys 0m0.012s\n</code>\n</pre>\n", "senID": 13}], [{"code": "<pre>\n<code>\n s = 'Agh#$%#%2341- -!zdrkfd'  \nprint ''.join(c for c in s if c.islower())\n</code>\n</pre>\n", "senID": 0}, {"text": ["String objects are iterable; there is no need to \"explode\" the string into a list.", "You can put whatever condition you want in the list comprehension, and it will filter characters accordingly."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["You could also implement this using a regex, but this will only hide the loop.", "The regular expressions library will still have to loop through the characters of the string in order to filter them."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}], [{"code": "<pre>\n<code>\n &gt;&gt;&gt; s = 'Agh#$%#%2341- -!zdrkfd'\n&gt;&gt;&gt; ''.join(i for i in s if  i in 'qwertyuiopasdfghjklzxcvbnm')\n'ghzdrkfd'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Using a regular expression is easy enough, especially for this scenario:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; s = 'ASDjifjASFJ7364'\n&gt;&gt;&gt; re.sub(r'[^a-z]+', '', s)\n'jifj'\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you plan on doing this many times, it is best to compile the regular expression before hand:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import re\n&gt;&gt;&gt; s = 'ASDjifjASFJ7364'\n&gt;&gt;&gt; r = re.compile(r'[^a-z]+')\n&gt;&gt;&gt; r.sub('', s)\n'jifj'\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n s = 'ASDjifjASFJ7364'\ns_lowercase = ''.join(filter(lambda c: c.islower(), s))\nprint s_lowercase #print 'jifj'\n</code>\n</pre>\n", "senID": 0}], [{"text": ["I'd use a regex.", "For lowercase match  [a-z]."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"code": "<pre>\n<code>\n import string\nprint \"\".join([c for c in \"Agh#$%#%2341- -!zdrkfd\" if c in string.lowercase])\n</code>\n</pre>\n", "senID": 0}], [{"text": ["Here's one solution if you are specifically interested in working on strings:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n s = 'Agh#$%#%2341- -!zdrkfd'\n lowercase_chars = [chr(i) for i in xrange(ord('a'), ord('z') + 1)]\n whitelist = set(lowercase_chars)\n filtered_list = [c for c in s if c in whitelist]\n</code>\n</pre>\n", "senID": 1}, {"text": ["The whitelist is actually a set (not a list) for efficiency."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["If you need a string, use join():"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n filtered_str = ''.join(filtered_list)\n</code>\n</pre>\n", "senID": 4}, {"tag": "hr", "senID": 5}, {"text": ["filter() is a more generic solution.", "From the documentation (http://docs.python.org/library/functions.html):"], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "http://docs.python.org/library/functions.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/functions.html"}]}, {"text": ["This would be one way of using filter():"], "childNum": 0, "tag": "p", "senID": 7, "childList": []}, {"code": "<pre>\n<code>\n filtered_list = filter(lambda c: c.islower(), s)\n</code>\n</pre>\n", "senID": 8}]]