[[{"text": ["R has an external package called VCD which should do what you want.", "The documentation is very good (122 page manual distributed w/ the package); there's also a book by the same name, Visual Display of Quantitative Information, by the package's author (Michael Friendly)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "VCD", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.math.yorku.ca/SCS/vcd/"}, {"text": "Visual Display of Quantitative Information", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["To create ternary plots using vcd, just call 'ternaryplot()' and pass in an n x 3 matrix.", "To generate the diagram below, i just created some fake data to represent four different chemical mixtures, each comprised of varying fractions of three substances (x, y, z).", "I scaled the input (so x + y + z = 1) but the function will do it for you if you pass in a value for its 'scale' parameter (in fact, the default is 1, which i believe is what your question requires).", "I used different colors &amp; symbols to represent the four data points, but you can also just use a single color/symbol and label each point (via the 'id' argument). "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"src": "http://www.freeimagehosting.net/uploads/35393eaba5.png", "tag": "img", "senID": 2}], [{"text": ["Created a very basic script for generating ternary (or more) plots.", "No gridlines or ticklines, but those wouldn't be too hard to add using the vectors in the \"basis\" array."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["(Sorry no image - not a member."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n from pylab import *\n\n\ndef ternaryPlot(\n            data,\n\n            # Scale data for ternary plot (i.e. a + b + c = 1)\n            scaling=True,\n\n            # Direction of first vertex.\n            start_angle=90,\n\n            # Orient labels perpendicular to vertices.\n            rotate_labels=True,\n\n            # Labels for vertices.\n            labels=('one','two','three'),\n\n            # Can accomodate more than 3 dimensions if desired.\n            sides=3,\n\n            # Offset for label from vertex (percent of distance from origin).\n            label_offset=0.10,\n\n            # Any matplotlib keyword args for plots.\n            edge_args={'color':'black','linewidth':2},\n\n            # Any matplotlib keyword args for figures.\n            fig_args = {'figsize':(8,8),'facecolor':'white','edgecolor':'white'},\n        ):\n    '''\n    This will create a basic \"ternary\" plot (or quaternary, etc.)\n    '''\n    basis = array(\n                    [\n                        [\n                            cos(2*_*pi/sides + start_angle*pi/180),\n                            sin(2*_*pi/sides + start_angle*pi/180)\n                        ] \n                        for _ in range(sides)\n                    ]\n                )\n\n    # If data is Nxsides, newdata is Nx2.\n    if scaling:\n        # Scales data for you.\n        newdata = dot((data.T / data.sum(-1)).T,basis)\n    else:\n        # Assumes data already sums to 1.\n        newdata = dot(data,basis)\n\n    fig = figure(**fig_args)\n    ax = fig.add_subplot(111)\n\n    for i,l in enumerate(labels):\n        if i &gt;= sides:\n            break\n        x = basis[i,0]\n        y = basis[i,1]\n        if rotate_labels:\n            angle = 180*arctan(y/x)/pi + 90\n            if angle &gt; 90 and angle &lt;= 270:\n                angle = mod(angle + 180,360)\n        else:\n            angle = 0\n        ax.text(\n                x*(1 + label_offset),\n                y*(1 + label_offset),\n                l,\n                horizontalalignment='center',\n                verticalalignment='center',\n                rotation=angle\n            )\n\n    # Clear normal matplotlib axes graphics.\n    ax.set_xticks(())\n    ax.set_yticks(())\n    ax.set_frame_on(False)\n\n    # Plot border\n    ax.plot(\n        [basis[_,0] for _ in range(sides) + [0,]],\n        [basis[_,1] for _ in range(sides) + [0,]],\n        **edge_args\n    )\n\n    return newdata,ax\n\n\nif __name__ == '__main__':\n    k = 0.5\n    s = 1000\n\n    data = vstack((\n        array([k,0,0]) + rand(s,3), \n        array([0,k,0]) + rand(s,3), \n        array([0,0,k]) + rand(s,3)\n    ))\n    color = array([[1,0,0]]*s + [[0,1,0]]*s + [[0,0,1]]*s)\n\n    newdata,ax = ternaryPlot(data)\n\n    ax.scatter(\n        newdata[:,0],\n        newdata[:,1],\n        s=2,\n        alpha=0.5,\n        color=color\n        )\n    show()\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Chlo\u00eb Lewis developed a triangle-plot general class, meant to support the soil texture triangle\nwith Python and Matplotlib.", "It's available here http://nature.berkeley.edu/~chlewis/Sourcecode.html"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "a triangle-plot general class, meant to support the soil texture triangle", "childNum": 0, "tag": "em", "pos": 0, "childList": []}, {"text": "http://nature.berkeley.edu/~chlewis/Sourcecode.html", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://nature.berkeley.edu/~chlewis/Sourcecode.html"}]}], [{"text": ["There seems to be an implementation at work here in gnuplot:\n"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "here", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://warmada.staff.ugm.ac.id/Graphics/gnuplot/petclass/pearce.html"}, {"text": "", "childNum": 0, "tag": "img", "childList": []}]}], [{"text": ["I just discovered a tool which uses Python/Matplotlib to generate ternary plots called wxTernary.", "It's available via http://wxternary.sourceforge.net/ -- I was able to successfully generate a ternary plot on the first try. "], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "http://wxternary.sourceforge.net/", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://wxternary.sourceforge.net/"}]}], [{"text": ["Find a vector drawing library and draw it from scratch if you can't find an easier way to do it. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["there is a R package named soiltexture (http://cran.r-project.org/web/packages/soiltexture/index.html) it's aimed at soil texture triangle plot, but can be customized for some aspects"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}]]