[[{"text": ["You don't need PyCrypto or PyMe, fine though those packages may be - you will have all kinds of problems building under Windows.", "Instead, why not avoid the rabbit-holes and do what I did?", "Use gnupg 1.4.9.", "You don't need to do a full installation on end-user machines - just gpg.exe and iconv.dll from the distribution are sufficient, and you just need to have them somewhere in the path or accessed from your Python code using a full pathname.", "No changes to the registry are needed, and everything (executables and data files) can be confined to a single folder if you want."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "PyCrypto", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "PyMe", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "gnupg 1.4.9", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "gpg.exe", "childNum": 0, "tag": "code", "pos": 3, "childList": []}, {"text": "iconv.dll", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"text": ["There's a module GPG.py which was originally written by Andrew Kuchling, improved by Richard Jones and improved further by Steve Traugott.", "It's available here, but as-is it's not suitable for Windows because it uses os.fork().", "Although originally part of PyCrypto, it is completely independent of the other parts ofPyCryptoand needs only gpg.exe/iconv.dll in order to work."], "childNum": 6, "tag": "p", "senID": 1, "childList": [{"text": "GPG.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "here", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://trac.t7a.org/isconf/file/trunk/lib/python/isconf/GPG.py"}, {"text": "os.fork()", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "PyCrypto", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "it is completely independent of the other parts ofPyCryptoand needs only gpg.exe/iconv.dll in order to work", "childNum": 1, "tag": "strong", "childList": [{"text": "PyCrypto", "tag": "code"}]}, {"text": "PyCrypto", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["I have a version (gnupg.py) derived from Traugott's GPG.py, which uses the subprocess module.", "It works fine under Windows, at least for my purposes - I use it to do the following:"], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "gnupg.py", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "GPG.py", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "subprocess", "childNum": 0, "tag": "code", "pos": -1, "childList": []}]}, {"tag": "ul", "num": 4, "lis": [{"text": "Key management - generation, listing, export etc.", "tag": "none", "senID": 3}, {"text": "Import keys from an external source (e.g. public keys received from a partner company)", "tag": "none", "senID": 4}, {"text": "Encrypt and decrypt data", "tag": "none", "senID": 5}, {"text": "Sign and verify signatures", "tag": "none", "senID": 6}]}, {"text": ["The module I've got is not ideal to show right now, because it includes some other stuff which shouldn't be there - which means I can't release it as-is at the moment.", "At some point, perhaps in the next couple of weeks, I hope to be able to tidy it up, add some more unit tests (I don't have any unit tests for sign/verify, for example) and release it (either under the original PyCrypto licence or a similar commercial-friendly license).", "If you can't wait, go with Traugott's module and modify it yourself - it wasn't too much work to make it work with the subprocess module."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "PyCrypto", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "subprocess", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"text": ["This approach was a lot less painful than the others (e.g.", "SWIG-based solutions, or solutions which require building with MinGW/MSYS), which I considered and experimented with.", "I've used the same (gpg.exe/iconv.dll) approach with systems written in other languages, e.g.", "C#, with equally painless results."], "childNum": 6, "tag": "p", "senID": 8, "childList": [{"text": "SWIG", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "MinGW", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "MSYS", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "gpg.exe", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "iconv.dll", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "C#", "childNum": 0, "tag": "code", "pos": 3, "childList": []}]}, {"text": ["P.S.", "It works with Python 2.4 as well as Python 2.5 and later.", "Not tested with other versions, though I don't foresee any problems."], "childNum": 0, "tag": "p", "senID": 9, "childList": []}], [{"text": ["PyCrypto supports PGP - albeit you should test it to make sure that it works to your specifications."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Although documentation is hard to come by, if you look through Util/test.py (the module test script), you can find a rudimentary example of their PGP support:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n if verbose: print '  PGP mode:',\nobj1=ciph.new(password, ciph.MODE_PGP, IV)\nobj2=ciph.new(password, ciph.MODE_PGP, IV)\nstart=time.time()\nciphertext=obj1.encrypt(str)\nplaintext=obj2.decrypt(ciphertext)\nend=time.time()\nif (plaintext!=str):\n    die('Error in resulting plaintext from PGP mode')\nprint_timing(256, end-start, verbose)\ndel obj1, obj2\n</code>\n</pre>\n", "senID": 2}, {"text": ["Futhermore, PublicKey/pubkey.py provides for the following relevant methods:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def encrypt(self, plaintext, K)\ndef decrypt(self, ciphertext):\ndef sign(self, M, K):\ndef verify (self, M, signature):\ndef can_sign (self):\n    \"\"\"can_sign() : bool\n    Return a Boolean value recording whether this algorithm can\n    generate signatures.  (This does not imply that this\n    particular key object has the private information required to\n    to generate a signature.)\n    \"\"\"\n    return 1\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Some simple web searching turned up these results:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": ["Pyme"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Pypgp"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}]}], [{"text": ["PyMe does claim full compatibility with Python 2.4, and I quote:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "PyMe", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://pyme.sourceforge.net/"}]}, {"text": ["I'm not sure why you say \"it doesn't seem to be compatible with Python 2.4 which I have to use\" -- specifics please?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["And yes it does exist as a semi-Pythonic (SWIGd) wrapper on GPGME -- that's a popular way to develop Python extensions once you have a C library that basically does the job."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["PyPgp has a much simpler approach -- that's why it's a single, simple Python script: basically it does nothing more than \"shell out\" to command-line PGP commands.", "For example, decryption is just:"], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "PyPgp", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://softlayer.dl.sourceforge.net/sourceforge/pypgp/pgp.py"}]}, {"code": "<pre>\n<code>\n def decrypt(data):\n    \"Decrypt a string - if you have the right key.\"\n    pw,pr = os.popen2('pgpv -f')\n    pw.write(data)\n    pw.close()\n    ptext = pr.read()\n    return ptext\n</code>\n</pre>\n", "senID": 4}, {"text": ["i.e., write the encrypted cyphertext to the standard input of pgpv -f, read pgpv's standard output as the decrypted plaintext."], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "pgpv -f", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["PyPgp is also a very old project, though its simplicity means that making it work with modern Python (e.g., subprocess instead of now-deprecated os.popen2) would not be hard.", "But you still do need PGP installed, or PyPgp won't do anything;-)."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "PGP", "tag": "a", "pos": 1, "childList": [], "childNum": 0, "href": "http://www.pgp.com/"}]}], [{"text": ["M2Crypto has PGP module, but I have actually never tried to use it.", "If you try it, and it works, please let me know (I am the current M2Crypto maintainer).", "Some links:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "M2Crypto", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://chandlerproject.org/Projects/MeTooCrypto"}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["Module sources"], "childNum": 0, "tag": "a", "senID": 1, "childList": []}, {"text": ["Demo Script"], "childNum": 0, "tag": "a", "senID": 2, "childList": []}, {"text": ["unit tests"], "childNum": 0, "tag": "a", "senID": 3, "childList": []}]}, {"text": ["Update: The PGP module does not provide ways to generate keys, but presumably these could be created with the lower level RSA, DSA etc.", "modules.", "I don't know PGP insides, so you'd have to dig up the details.", "Also, if you know how to generate these using openssl command line commands, it should be reasonably easy to convert that to M2Crypto calls."], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "Update:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "RSA", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.heikkitoivonen.net/m2crypto/api/M2Crypto.RSA-module.html"}, {"text": "DSA", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://www.heikkitoivonen.net/m2crypto/api/M2Crypto.DSA-module.html"}]}], [{"text": ["As other have noted, PyMe is the canonical solution for this, since it's based on GpgME, which is part of the GnuPG ecosystem."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["For Windows, I strongly recommend to use Gpg4win as the GnuPG distribution, for two reasons:"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Gpg4win", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.gpg4win.org"}]}, {"text": ["It's based on GnuPG 2, which, among other things, includes gpg2.exe, which can (finally, I might add :) start gpg-agent.exe on-demand (gpg v1.x can't)."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "gpg2.exe", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "gpg-agent.exe", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["And secondly, it's the only official Windows build by the GnuPG developers.", "E.g.", "it's entirely cross-compiled from Linux to Windows, so not a iota of non-free software was used in preparing it (quite important for a  security suite :)."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}]]