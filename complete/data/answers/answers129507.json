[[{"text": ["Use TestCase.assertRaises (or TestCase.FailUnlessRaises) from the unittest module"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["see here:\nhttp://docs.python.org/library/unittest.html#unittest.TestCase.assertRaises"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://docs.python.org/library/unittest.html#unittest.TestCase.assertRaises", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/unittest.html#unittest.TestCase.assertRaises"}]}, {"text": ["for example:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n import mymod\n\nclass MyTestCase(unittest.TestCase):\n    def test1(self):\n        self.assertRaises(SomeCoolException, mymod.myfunc)\n</code>\n</pre>\n", "senID": 3}], [{"text": ["Wow!", "Questions get answered fast on stackoverflow.com!", "I'm glad I asked this."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["The code in my previous answer can be simplified to:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def test_afunction_throws_exception(self):\n    self.assertRaises(ExpectedException, afunction)\n</code>\n</pre>\n", "senID": 2}, {"text": ["And if afunction takes arguments, just pass them into assertRaises like this:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def test_afunction_throws_exception(self):\n    self.assertRaises(ExpectedException, afunction, arg1, arg2)\n</code>\n</pre>\n", "senID": 4}], [{"text": ["Your code should follow this pattern (this is a unittest module style test):"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def test_afunction_throws_exception(self):\n    try:\n        afunction()\n    except ExpectedException:\n        pass\n    except e:\n       self.fail('Unexpected exception thrown:', e)\n    else:\n       self.fail('ExpectedException not thrown')\n</code>\n</pre>\n", "senID": 1}, {"text": ["On Python &lt; 2.7 this construct is useful for checking for specific values in the expected exception.", "The unittest function assertRaises only checks if an exception was raised."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "assertRaises", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}], [{"text": ["I use doctest[1] almost everywhere because I like the fact that I document and test my functions at the same time."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "doctest", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Have a look at this code:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def throw_up(something, gowrong=False):\n    \"\"\"\n    &gt;&gt;&gt; throw_up('Fish n Chips')\n    Traceback (most recent call last):\n    ...\n    Exception: Fish n Chips\n\n    &gt;&gt;&gt; throw_up('Fish n Chips', gowrong=True)\n    'I feel fine!'\n    \"\"\"\n    if gowrong:\n        return \"I feel fine!\"\n    raise Exception(something)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n</code>\n</pre>\n", "senID": 2}, {"text": ["If you put this example in a module and run it from the command line both test cases are evaluated and checked."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["[1] Python documentation: 23.2 doctest -- Test interactive Python examples"], "childNum": 1, "tag": "p", "senID": 4, "childList": [{"text": "Python documentation: 23.2 doctest -- Test interactive Python examples", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/module-doctest.html"}]}], [{"text": ["Since Python 2.7 you can use context manager to get a hold of the actual Exception object thrown, which enables you check for various fields in the exception object, like message:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def broken_function():\n    raise Exception('This is broken')\n\n....\n\n\nwith self.assertRaises(MyException) as context:\n    broken_function()\n\nself.assertEqual(context.exception.message, 'This is broken')\n</code>\n</pre>\n", "senID": 1}, {"text": ["http://docs.python.org/dev/library/unittest.html#unittest.TestCase.assertRaises"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "http://docs.python.org/dev/library/unittest.html#unittest.TestCase.assertRaises", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/dev/library/unittest.html#unittest.TestCase.assertRaises"}]}], [{"text": ["Have a look at the assertRaises method of the unittest module."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "assertRaises", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/lib/testcase-objects.html"}, {"text": "unittest", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["See also: How do I unit test aninit() method of a python class with assertRaises()?"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "How do I unit test aninit() method of a python class with assertRaises()?", "tag": "a", "pos": 0, "childList": [{"text": "init", "tag": "strong"}], "childNum": 1, "href": "http://stackoverflow.com/questions/88325/how-do-i-unit-test-an-init-method-of-a-python-class-with-assertraises#88346"}, {"text": "init", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Which presents some code for using the built in python unit testing framework for testing exception raising, beyond what is possible without extending."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}], [{"text": ["I just discovered that the Mock library provides an assertRaisesWithMessage() method (in its unittest.TestCase subclass), which will check not only that the expected exception is raised, but also that it is raised with the expected message:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Mock library", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.voidspace.org.uk/python/mock.html"}]}, {"code": "<pre>\n<code>\n from testcase import TestCase\n\nimport mymod\n\nclass MyTestCase(TestCase):\n    def test1(self):\n        self.assertRaisesWithMessage(SomeCoolException,\n                                     'expected message',\n                                     mymod.myfunc)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can use assertRaises from the unittest module"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n import unittest\n\nclass TestClass():\n  def raises_exception(self):\n    raise Exception(\"test\")\n\nclass MyTestCase(unittest.TestCase):\n  def test_if_method_raises_correct_exception(self):\n    test_class = TestClass()\n    # note that you dont use () when passing the method to assertRaises\n    self.assertRaises(Exception, test_class.raises_exception)\n</code>\n</pre>\n", "senID": 1}]]