[[{"text": ["The main problem seems to be that it is not possible to use Unicode on Windows using only the standard C library and no platform-dependent or third-party extensions.", "The languages you mentioned originate from Unix platforms, whose method of implementing Unicode blends well with C (they use normal char* strings, the C locale functions, and UTF-8).", "If you want to do Unicode in C, you more or less have to write everything twice: once using nonstandard Microsoft extensions, and once using the standard C API functions for all other operating systems.", "While this can be done, it usually doesn't have high priority because it's cumbersome and most scripting language developers either hate or ignore Windows anyway."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "char*", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["At a more technical level, I think the basic assumption that most standard library designers make is that all I/O streams are inherently byte-based on the OS level, which is true for files on all operating systems, and for all streams on Unix-like systems, with the Windows console being the only exception.", "Thus the architecture many class libraries and programming language standard have to be modified to a great extent if one wants to incorporate Windows console I/O."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["Another more subjective point is that Microsoft just did not enough to promote the use of Unicode.", "The first Windows OS with decent (for its time) Unicode support was Windows NT 3.1, released in 1993, long before Linux and OS X grew Unicode support.", "Still, the transition to Unicode in those OSes has been much more seamless and unproblematic.", "Microsoft once again listened to the sales people instead of the engineers, and kept the technically obsolete Windows 9x around until 2001; instead of forcing developers to use a clean Unicode interface, they still ship the broken and now-unnecessary 8-bit API interface, and invite programmers to use it (look at a few of the recent Windows API questions on Stack Overflow, most newbies still use the horrible legacy API!", ")."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "still", "childNum": 0, "tag": "em", "pos": 3, "childList": []}]}, {"text": ["When Unicode came out, many people realized it was useful.", "Unicode started as a pure 16-bit encoding, so it was natural to use 16-bit code units.", "Microsoft then apparently said \"OK, we have this 16-bit encoding, so we have to create a 16-bit API\", not realizing that nobody would use it.", "The Unix luminaries, however, thought \"how can we integrate this into the current system in an efficient and backward-compatible way so that people will actually use it?", "\" and subsequently invented UTF-8, which is a brilliant piece of engineering.", "Just as when Unix was created, the Unix people thought a bit more, needed a bit longer, has less financially success, but did it eventually right."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["I cannot comment on Perl (but I think that there are more Windows haters in the Perl community than in the Python community), but regarding Python I know that the BDFL (who doesn't like Windows as well) has stated that adequate Unicode support on all platforms is a major goal."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}], [{"text": ["Small contribution to the discussion - I am running Czech localized Windows XP, which almost everywhere uses CP1250 code page.", "Funny thing with console is though that it still uses legacy DOS 852 code page.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I was able to make very simple perl script that prints utf8 encoded data to console using:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n binmode STDOUT, \":utf8:encoding(cp852)\";\n</code>\n</pre>\n", "senID": 2}, {"text": ["Tried various options (including utf16le), but only above settings printed accented Czech characters correctly."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["Edit: I played a little more with the problem and found Win32::Unicode.", "The module exports function printW that works properly both in output and redirected:"], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "Edit:", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "Win32::Unicode", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://search.cpan.org/perldoc?Win32%3a%3aUnicode"}, {"text": "printW", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n use utf8;\nuse Win32::Unicode;\n\nbinmode STDOUT, \":utf8\";\nprintW \"P\u0159\u00edli\u0161 \u017elu\u0165ou\u010dk\u00fd k\u016f\u0148 \u00fap\u011bl \u010f\u00e1belsk\u00e9 \u00f3dy\";\n</code>\n</pre>\n", "senID": 5}], [{"text": ["I have to unask many of your questions."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Did you know that"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"tag": "ul", "num": 4, "lis": [{"text": "Windows uses UTF-16 for its APIs, but still defaults to the various \"fun\" legacy encodings (e.g. Windows-1252, Windows-1251) in userspace, including file names, differently for the many localisations of Windows?", "tag": "none", "senID": 2}, {"text": "you need to encode output, and picking the appropriate encoding for the system is achieved by the ", "tag": "none", "senID": 3}, {"text": ["Perl already supported"], "childNum": 0, "tag": "a", "senID": 4, "childList": []}, {"text": "Microsoft managed to adapt UTF-8 into their codepage system of character encoding, and you can switch your terminal by issuing the appropriate ", "tag": "none", "senID": 5}]}], [{"text": ["Are you sure your script would output Unicode on some other platform correctly?", "\"wide character in print\" warning makes me very suspicious."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I recommend to look over this overview"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "overview", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://en.wikibooks.org/wiki/Perl_Programming/Unicode_UTF-8"}]}], [{"text": ["Michael Kaplan has series of blog posts about the cmd console and Unicode that may be informative (while not really answering your question):"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "cmd", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": ["Conventional wisdom is retarded, aka What the @#%&amp;* is _O_U16TEXT?"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Conventional wisdom is retarded, aka What the @#%&amp;* is _O_U16TEXT?", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blogs.msdn.com/b/michkap/archive/2008/03/18/8306597.aspx"}]}, {"text": ["Anyone who says the console can't do Unicode isn't as smart as they think they are"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "Anyone who says the console can't do Unicode isn't as smart as they think they are", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blogs.msdn.com/b/michkap/archive/2010/04/07/9989346.aspx"}]}, {"text": ["A confluence of circumstances leaves a stone unturned..."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "A confluence of circumstances leaves a stone unturned...", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://blogs.msdn.com/b/michkap/archive/2010/09/23/10066660.aspx"}]}]}], [{"text": ["Because Perl and Python aren't Windows programs.", "They're Unix programs that happen to have been mostly ported to Windows.", "As such, they don't like to call Win32 functions unless necessary.", "For byte-based I/O, it's not necessary; this can be done with the Standard C Libary.", "UTF-16-based I/O is a special case."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["I wouldn't say that the -W APIs are inherently broken as much as I'd say that Microsoft's approach to Unicode in C(++) is inherently broken."], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["No matter how much certain Windows developers insist that programs should use wchar_t instead of char, there are just too many barriers to switching:"], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "wchar_t", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "char", "childNum": 0, "tag": "code", "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "Platform dependence:\n", "tag": "none", "senID": 3}, {"text": "Education.  Everbody learns C with ", "tag": "none", "senID": 4}, {"text": "The existing zillions of lines of code that use ", "tag": "none", "senID": 5}]}], [{"text": ["For Perl to fully support Windows in this way, every call to print printf say warn and die has to be modified."], "childNum": 5, "tag": "p", "senID": 0, "childList": [{"text": "print", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "printf", "childNum": 0, "tag": "code", "childList": []}, {"text": "say", "childNum": 0, "tag": "code", "childList": []}, {"text": "warn", "childNum": 0, "tag": "code", "childList": []}, {"text": "die", "childNum": 0, "tag": "code", "childList": []}]}, {"tag": "ul", "num": 3, "lis": [{"text": "Is this Windows?", "tag": "none", "senID": 1}, {"text": "Which version of Windows?\n", "tag": "none", "senID": 2}, {"text": "Is this going to the console, or somewhere else.", "tag": "none", "senID": 3}]}, {"text": ["Once you have that determined, you then have to use a completely different set of API functions."], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"text": ["If you really want to see everything involved in doing this properly, have a look at the source of Win32::Unicode::Console."], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "source", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://cpansearch.perl.org/src/XAICRON/Win32-Unicode-0.25/lib/Win32/Unicode/Console.pm"}, {"href": "http://search.cpan.org/perldoc/Win32%3a%3aUnicode%3a%3aConsole", "text": "Win32::Unicode::Console", "childNum": 0, "tag": "a", "childList": []}]}, {"text": ["On Linux, OpenBSD, FreeBSD and similar OS's you can usually just call binmode on the STDOUT and STDERR file handles."], "childNum": 4, "tag": "p", "senID": 6, "childList": [{"text": "binmode", "tag": "a", "pos": 0, "childList": [{"text": "binmode", "tag": "code"}], "childNum": 1, "href": "http://perldoc.perl.org/functions/binmode.html"}, {"text": "binmode", "childNum": 0, "tag": "code", "childList": []}, {"text": "STDOUT", "childNum": 0, "tag": "code", "childList": []}, {"text": "STDERR", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n binmode STDOUT, ':utf8';\nbinmode STDERR, ':utf8';\n</code>\n</pre>\n", "senID": 7}, {"text": ["This assumes that the terminal is using the UTF-8 encoding."], "childNum": 2, "tag": "p", "senID": 8, "childList": [{"text": "This assumes that the terminal is using the UTF-8 encoding.", "childNum": 1, "tag": "sup", "pos": 0, "childList": [{"text": "This assumes that the terminal is using the UTF-8 encoding.", "tag": "sub"}]}, {"text": "This assumes that the terminal is using the UTF-8 encoding.", "childNum": 0, "tag": "sub", "childList": []}]}], [{"text": ["Unicode issues in Perl"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "Unicode issues in Perl", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://www.i-programmer.info/programming/other-languages/1973-unicode-issues-in-perl.html"}]}, {"text": ["covers how the Win32 console works with Perl and the transcoding that happens behind the scene from ANSI to Unicode;albeit not just a Perl issue but affects other languages"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]