[[{"text": ["Take a look at 28.", "Custom Python Interpreters."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "28. Custom Python Interpreters", "tag": "a", "pos": -1, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/code.html"}]}, {"text": ["Also, see Scripting inside a Python application."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "Scripting inside a Python application", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://stackoverflow.com/questions/393871/scripting-inside-a-python-application#393921"}]}], [{"text": ["I've had this code for a long time, I hope you can put it to use."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["To inspect/use variables, just put them into the current namespace.", "As an example, I can access var1 and var2 from the command line."], "childNum": 2, "tag": "p", "senID": 1, "childList": [{"text": "var1", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "var2", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n var1 = 5\nvar2 = \"Mike\"\n# Credit to effbot.org/librarybook/code.htm for loading variables into current namespace\ndef keyboard(banner=None):\n    import code, sys\n\n    # use exception trick to pick up the current frame\n    try:\n        raise None\n    except:\n        frame = sys.exc_info()[2].tb_frame.f_back\n\n    # evaluate commands in current namespace\n    namespace = frame.f_globals.copy()\n    namespace.update(frame.f_locals)\n\n    code.interact(banner=banner, local=namespace)\n\n\nif __name__ == '__main__':\n  keyboard()\n</code>\n</pre>\n", "senID": 2}, {"text": ["However if you wanted to strictly debug your application, I'd highly suggest using an IDE or pdb(python debugger)."], "childNum": 3, "tag": "p", "senID": 3, "childList": [{"text": "However", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "highly", "childNum": 0, "tag": "strong", "childList": []}, {"href": "http://docs.python.org/library/pdb.html", "text": "pdb(python debugger)", "childNum": 0, "tag": "a", "childList": []}]}], [{"text": ["The code module provides an interactive console:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "code", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/code.html"}]}, {"code": "<pre>\n<code>\n import code\nvars = globals().copy()\nvars.update(locals())\nshell = code.InteractiveConsole(vars)\nshell.interact()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Using IPython you just have to call:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from IPython.Shell import IPShellEmbed; IPShellEmbed()()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["You can do this using IPython:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://ipython.scipy.org/doc/manual/html/interactive/reference.html#embedding-ipython"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://ipython.scipy.org/doc/manual/html/interactive/reference.html#embedding-ipython", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://ipython.scipy.org/doc/manual/html/interactive/reference.html#embedding-ipython"}]}], [{"text": ["If all you're interested in is inspecting the value of variables, why not put them in a dict and use some kind of regex interface to access them by string?", "This doesn't allow as much freedom which could possibly be a perk."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Another trick (besides the ones already suggested) is opening an interactive shell and importing your (perhaps modified) python script.", "Upon importing, most of the variables, functions, classes and so on (depending on how the whole thing is prepared) are available, and you could even create objects interactively from command line.", "So, if you have a test.py file, you could open Idle or other shell, and type import test (if it is in current working directory)."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "test.py", "childNum": 0, "tag": "code", "pos": 2, "childList": []}, {"text": "import test", "childNum": 0, "tag": "code", "childList": []}]}]]