[[{"text": ["combine the conditions and flatten the nesting:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n a = 2\n\nif ( a &gt; 1 and a == 3 ):\n    print \"yes\"\nelif ( a == 2 ):\n    print \"yes\"\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Considering the example is just indicative but your original question was to understand nested if-else, association, scoping ...."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["In Python, unlike Algol-like languages we don't have demarcated blocks (for ex.", "in C we use '{' to make a block.", "Here all blocks are via proper white-space indentation.", "Its like the philosophy, what you read is what you would get.", "This off-course is to adhere to the design philosophy \"Code Readability\".  "], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["In similar context, whether the subsequent if/else statement would be part of the outer or inner if statement depends on how it was indented."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "if/else", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"text": ["Your example"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n a = 2\n\nif( a &gt; 1 ):\n    if( a == 3 ):\n        print \"yes\"\nelif( a == 2 ):\n    print \"yes\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["Here elif is part of the outer if, because that's what it reads or rather looks and that's how it was indented.", "Instead the below modified version of your code"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "elif", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "if", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n a = 2\n\nif( a &gt; 1 ):\n    if( a == 3 ):\n        print \"yes\"\n    elif( a == 2 ):\n        print \"yes\"\n</code>\n</pre>\n", "senID": 6}, {"text": ["Would make the logic apparently different.", "More because the indented elif block is now aligned with the inner if."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "elif", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["This is now much easier compared to the following C Code"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n if (a &gt; 1) \n   if (a == 3)\n      printf(\"Hello World\\n\");\nelse if (a == 2)\n   printf(\"Yes\");\n</code>\n</pre>\n", "senID": 9}, {"text": ["Can you easily say with which if the else if is associated?"], "childNum": 1, "tag": "p", "senID": 10, "childList": [{"text": "else if", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"code": "<pre>\n<code>\n a = 2\nif a &gt; 1:\n    if a == 3:\n        print \"a is 3\"\n    elif a == 2:\n        print \"a is 2\"\n</code>\n</pre>\n", "senID": 0}], [{"text": ["What outcomes do you want:  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "print \"yes\" when a is 2 or 3", "tag": "none", "senID": 1}, {"text": "otherwise do nothing", "tag": "none", "senID": 2}]}, {"text": ["Translate that into simple code  "], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "simple", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n if a in (2, 3):\n    print \"yes\"\n</code>\n</pre>\n", "senID": 4}, {"text": ["\"deeper\" example: You don't need some of your nesting.", "The following simple code is equivalent to yours:"], "childNum": 1, "tag": "p", "senID": 5, "childList": [{"text": "simple", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n if a == 1:\n    if b == 7:\n        print \"yes 1, 7\"\n    elif b == 8:\n        print \"yes 1, 8\"\nelif a == 2:\n    print \"yes 2\"\nelif a == 3:\n    print \"yes 3\"\nelif a == 4:\n    print \"yes 4\"\nelif a == 5:\n    print \"yes 5\"\n</code>\n</pre>\n", "senID": 6}, {"text": ["By the way, please read PEP 8 and have a look at some of the code written by others... if( foo == 9 ): is an unfamiliar pattern which causes readers to slow down over the speed humps, and possibly avoid that road in future."], "childNum": 2, "tag": "p", "senID": 7, "childList": [{"text": "PEP 8", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://python.org/dev/peps/pep-0008/"}, {"text": "if( foo == 9 ):", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Another way of writing this to make it easier to read and possibly easier to write would be to put the choices for one of the checks into a dictionary.", "This will only work if you actually are checking equality, but may work for you."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n #used when a&gt;1\nbchoices1 = {}\nbchoices1[3] = doSomething\nbchoices1[4] = doSomethingElse\nbchoices1[5] = more\n\n#used when a==1\nbchoices2 = {}\nbchoices2[7] = asdfasdf\nbchoices2[8] = asdfas\n\nif( a &gt; 1 ):\n    bchoices1[b]()\nelif( a == 2 ):\n    asd()\nelif( a == 1 ):\n    bchoices2[b]()\n</code>\n</pre>\n", "senID": 1}], [{"text": ["How do you expect this to be clear to a computer?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if a &gt; 1:\n  # ANYTHING\nelif a == 2:\n  # ANYTHING\n</code>\n</pre>\n", "senID": 1}, {"text": ["by definition will never execute anything in the second block."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"text": ["I believe your intend might be more along this lines:"], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"code": "<pre>\n<code>\n def action():\n  if a &gt; 1:\n    if b == 2:\n      doSomething()\n      return\n    if b == 3:\n      doSomethingElse()\n      return\n if a == 2: # Note: NO elif!\n   doDefaultForA2()\n   return\n showError(\"Unknown command\")\n return\n</code>\n</pre>\n", "senID": 4}, {"text": ["There are multiple ways to achieve this behaviour.", "I like the function+return pattern, because it structures code nicely.", "Another way is to use a handled flag:"], "childNum": 2, "tag": "p", "senID": 5, "childList": [{"text": "function+return", "childNum": 0, "tag": "code", "pos": 1, "childList": []}, {"text": "handled", "childNum": 0, "tag": "code", "pos": 2, "childList": []}]}, {"code": "<pre>\n<code>\n unhandled = True\nif a &gt; 1:\n  if b == 2:\n    doSomething()\n    unhandled = False\n  if unhandled and b == 3:\n    doSomethingElse()\n    unhandled = False\nif unhandled and a == 2: # Note: NO elif!\n  doDefaultForA2()\n  unhandled = False\nif unhandled:\n  showError(\"Unknown command\")\n</code>\n</pre>\n", "senID": 6}, {"text": ["(You can obviously put in a number of shortcuts here by using elif.", "But using explicit \"if unhandled\" makes the code more verbose about the logic and easier to add new options."], "childNum": 1, "tag": "p", "senID": 7, "childList": [{"text": "and", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}]]