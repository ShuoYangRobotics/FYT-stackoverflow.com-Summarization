[[{"text": ["As stated in the documentation, built-in hash() function is not designed for storing resulting hashes somewhere externally.", "It is used to provide object's hash value, to store them in dictionaries and so on.", "It's also implementation-specific (GAE uses a modified version of Python).", "Check out:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "not", "childNum": 0, "tag": "em", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; class Foo:\n...     pass\n... \n&gt;&gt;&gt; a = Foo()\n&gt;&gt;&gt; b = Foo()\n&gt;&gt;&gt; hash(a), hash(b)\n(-1210747828, -1210747892)\n</code>\n</pre>\n", "senID": 1}, {"text": ["As you can see, they are different, as hash() uses object's hash method instead of 'normal' hashing algorithms, such as SHA."], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "hash", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}]}, {"text": ["Given the above, the rational choice is to use the hashlib module."], "childNum": 1, "tag": "p", "senID": 3, "childList": [{"text": "hashlib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/hashlib.html"}]}], [{"text": ["use hashlib"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "hashlib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/hashlib.html?highlight=hash#module-hashlib"}]}], [{"text": ["The response is absolutely no surprise: in fact "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n In [1]: -5768830964305142685L &amp; 0xffffffff\nOut[1]: 1934711907L\n</code>\n</pre>\n", "senID": 1}, {"text": ["so if you want to get reliable responses on ASCII strings, just get the lower 32 bits as uint.", "The hash function for strings is 32-bit-safe and almost portable."], "childNum": 3, "tag": "p", "senID": 2, "childList": [{"text": "on ASCII strings", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "uint", "childNum": 0, "tag": "code", "pos": -1, "childList": []}, {"text": "almost", "childNum": 0, "tag": "em", "pos": 1, "childList": []}]}, {"text": ["On the other side, you can't rely at all on getting the hash() of any object over which you haven't explicitly defined the __hash__ method to be invariant. "], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "hash()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "__hash__", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["Over ASCII strings it works just because the hash is calculated on the single characters forming the string, like the following:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class string:\n    def __hash__(self):\n        if not self:\n            return 0 # empty\n        value = ord(self[0]) &lt;&lt; 7\n        for char in self:\n            value = c_mul(1000003, value) ^ ord(char)\n        value = value ^ len(self)\n        if value == -1:\n            value = -2\n        return value\n</code>\n</pre>\n", "senID": 5}, {"text": ["where the c_mul function is the \"cyclic\" multiplication (without overflow) as in C."], "childNum": 1, "tag": "p", "senID": 6, "childList": [{"text": "c_mul", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}], [{"text": ["At a guess, AppEngine is using a 64-bit implementation of Python (-5768830964305142685 won't fit in 32 bits) and your implementation of Python is 32 bits.", "You can't rely on object hashes being meaningfully comparable between different implementations."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["Hash results varies between 32bit and 64bit platforms"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["If a calculated hash shall be the same on both platforms consider using"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n def hash32(value):\n    return hash(value) &amp; 0xffffffff\n</code>\n</pre>\n", "senID": 2}], [{"text": ["It probably just asks the operating system provided function, rather than its own algorithm. "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["As other comments says, use hashlib or write your own hash function."], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "hashlib", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/hashlib.html?highlight=hash#module-hashlib"}]}], [{"text": ["What about sign bit?", "For example:\nHex value 0xADFE74A5 represents unsigned 2919134373 and signed -1375832923\nCurrect value must be signed (sign bit = 1) but python converts it as unsigned and we have incorrect hash value after translation from 64 to 32 bit."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["Be careful using:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}]]