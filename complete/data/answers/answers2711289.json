[[{"text": ["Maybe something like this would be a little better:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n from itertools import ifilter, islice\n\ndef ello_bruce(limit=None):\n    for i in islice(ifilter(predicate, xrange(10**5)), limit):\n        # do whatever you want with i here\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'd take a good look at the itertools library.", "Using that, I think you'd have something like..."], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "itertools", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://docs.python.org/library/itertools.html"}]}, {"code": "<pre>\n<code>\n # From the itertools examples\ndef tabulate(function, start=0):\n    return imap(function, count(start))\ndef take(n, iterable):\n    return list(islice(iterable, n))\n\n# Then something like:\ndef ello_bruce(limit=None):\n  take(filter(tabulate(predicate)), limit)\n</code>\n</pre>\n", "senID": 1}], [{"text": ["I'd start with"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if limit is None: return\n</code>\n</pre>\n", "senID": 1}, {"text": ["since nothing can ever happen to limit when it starts as None (if there are no desirable side effects in the iteration and in the computation of predicate -- if there are, then, in this case you can just do for i in xrange(10**5): predicate(i))."], "childNum": 4, "tag": "p", "senID": 2, "childList": [{"text": "limit", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}, {"text": "predicate", "childNum": 0, "tag": "code", "childList": []}, {"text": "for i in xrange(10**5): predicate(i)", "childNum": 0, "tag": "code", "childList": []}]}, {"text": ["If limit is not None, then you just want to perform max(limit, 1) computations of predicate that are true, so an itertools.islice of an itertools.ifilter would do:"], "childNum": 6, "tag": "p", "senID": 3, "childList": [{"text": "limit", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "None", "childNum": 0, "tag": "code", "childList": []}, {"text": "max(limit, 1)", "childNum": 0, "tag": "code", "childList": []}, {"text": "predicate", "childNum": 0, "tag": "code", "childList": []}, {"text": "itertools.islice", "childNum": 0, "tag": "code", "childList": []}, {"text": "itertools.ifilter", "childNum": 0, "tag": "code", "childList": []}]}, {"code": "<pre>\n<code>\n import itertools as it\n\ndef ello_bruce(limit=None):\n    if limit is None:\n        for i in xrange(10**5): predicate(i)\n    else:\n        for _ in it.islice(\n          it.ifilter(predicate, xrange(10**5),\n          max(limit, 1)): pass\n</code>\n</pre>\n", "senID": 4}], [{"text": ["You should remove the nested ifs:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n if predicate(i) and not limit is None:\n    ...\n</code>\n</pre>\n", "senID": 1}], [{"text": ["What you want to do seems perfectly suited for a while loop:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n def ello_bruce(limit=None):\n    max = 10**5\n    # if you consider 0 to be an invalid value for limit you can also do\n    # if limit:\n    if limit is None: \n        limit = max\n\n    while max and limit:\n        if predicate(i):\n            limit -= 1\n        max -=1\n</code>\n</pre>\n", "senID": 1}, {"text": ["The loop stops if either max or limit reaches zero."], "childNum": 2, "tag": "p", "senID": 2, "childList": [{"text": "max", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "limit", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["Um.", "As far as I understand it, predicate just computes in segments, and you totally ignore its return value, right?"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "predicate", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"text": ["This is another take:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n import itertools\n\ndef ello_bruce(limit=None):\n    if limit is None:\n        limiter= itertools.repeat(None)\n    else:\n        limiter= xrange(limit)\n\n    # since predicate is a Python function\n    # itertools looping won't be faster, so use plain for.\n    # remember to replace the xrange(100000) with your own iterator\n    for dummy in itertools.izip(xrange(100000), limiter):\n        pass\n</code>\n</pre>\n", "senID": 2}, {"text": ["Also, remove the unneeded return True from the end of predicate."], "childNum": 2, "tag": "p", "senID": 3, "childList": [{"text": "return True", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "predicate", "childNum": 0, "tag": "code", "childList": []}]}]]