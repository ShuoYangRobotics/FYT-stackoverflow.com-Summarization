[[{"text": ["You could go though each of the items (the key value pair) in the dictionary and add them into a result dictionary if the value was not already in the result dictionary.  "], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n input_raw = {112762853378: \n   {'dst': ['10.121.4.136'], \n    'src': ['1.2.3.4'], \n    'alias': ['www.example.com']\n   },\n 112762853385: \n   {'dst': ['10.121.4.136'], \n    'src': ['1.2.3.4'], \n    'alias': ['www.example.com']\n   },\n 112760496444: \n   {'dst': ['10.121.4.136'], \n    'src': ['1.2.3.4']\n   },\n 112760496502: \n   {'dst': ['10.122.195.34'], \n    'src': ['4.3.2.1']\n   }\n}\n\nresult = {}\n\nfor key,value in input_raw.items():\n    if value not in result.values():\n        result[key] = value\n\nprint result\n</code>\n</pre>\n", "senID": 1}], [{"text": ["Another reverse dict variation:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import pprint\n&gt;&gt;&gt; \n&gt;&gt;&gt; data = {\n...   112762853378: \n...    {'dst': ['10.121.4.136'], \n...     'src': ['1.2.3.4'], \n...     'alias': ['www.example.com']\n...    },\n...  112762853385: \n...    {'dst': ['10.121.4.136'], \n...     'src': ['1.2.3.4'], \n...     'alias': ['www.example.com']\n...    },\n...  112760496444: \n...    {'dst': ['10.121.4.136'], \n...     'src': ['1.2.3.4']\n...    },\n...  112760496502: \n...    {'dst': ['10.122.195.34'], \n...     'src': ['4.3.2.1']\n...    },\n... }\n&gt;&gt;&gt; \n&gt;&gt;&gt; keep = set({repr(sorted(value.items())):key\n...             for key,value in data.iteritems()}.values())\n&gt;&gt;&gt; \n&gt;&gt;&gt; for key in data.keys():\n...     if key not in keep:\n...         del data[key]\n... \n&gt;&gt;&gt; \n&gt;&gt;&gt; pprint.pprint(data)\n{112760496444L: {'dst': ['10.121.4.136'], 'src': ['1.2.3.4']},\n 112760496502L: {'dst': ['10.122.195.34'], 'src': ['4.3.2.1']},\n 112762853378L: {'alias': ['www.example.com'],\n                 'dst': ['10.121.4.136'],\n                 'src': ['1.2.3.4']}}\n</code>\n</pre>\n", "senID": 1}], [{"text": ["One simple approach would be to create a reverse dictionary using the concatenation of the string data in each inner dictionary as a key.", "So say you have the above data in a dictionary, d:"], "childNum": 1, "tag": "p", "senID": 0, "childList": [{"text": "d", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; import collections\n&gt;&gt;&gt; reverse_d = collections.defaultdict(list)\n&gt;&gt;&gt; for key, inner_d in d.iteritems():\n...     key_str = ''.join(inner_d[k][0] for k in ['dst', 'src', 'alias'] if k in inner_d)\n...     reverse_d[key_str].append(key)\n... \n&gt;&gt;&gt; duplicates = [keys for key_str, keys in reverse_d.iteritems() if len(keys) &gt; 1]\n&gt;&gt;&gt; duplicates\n[[112762853385, 112762853378]]\n</code>\n</pre>\n", "senID": 1}, {"text": ["If you don't want a list of duplicates or anything like that, but just want to create a duplicate-less dict, you could just use a regular dictionary instead of a defaultdict and re-reverse it like so:"], "childNum": 1, "tag": "p", "senID": 2, "childList": [{"text": "defaultdict", "childNum": 0, "tag": "code", "pos": 0, "childList": []}]}, {"code": "<pre>\n<code>\n &gt;&gt;&gt; for key, inner_d in d.iteritems():\n...     key_str = ''.join(inner_d[k][0] for k in ['dst', 'src', 'alias'] if k in inner_d)\n...     reverse_d[key_str] = key\n&gt;&gt;&gt; new_d = dict((val, d[val]) for val in reverse_d.itervalues())\n</code>\n</pre>\n", "senID": 3}], [{"code": "<pre>\n<code>\n dups={}\n\nfor key,val in dct.iteritems():\n    if val.get('alias') != None:\n        ref = \"%s%s%s\" % (val['dst'] , val['src'] ,val['alias'])# a simple hash\n        dups.setdefault(ref,[]) \n        dups[ref].append(key)\n\nfor k,v in dups.iteritems():\n    if len(v) &gt; 1:\n        for key in v:\n            del dct[key]\n</code>\n</pre>\n", "senID": 0}], [{"code": "<pre>\n<code>\n input_raw = {112762853378:  {'dst': ['10.121.4.136'],\n                             'src': ['1.2.3.4'],\n                             'alias': ['www.example.com']    },\n             112762853385:  {'dst': ['10.121.4.136'],\n                             'src': ['1.2.3.4'],\n                             'alias': ['www.example.com']    },\n             112760496444:  {'dst': ['10.121.4.299'],\n                             'src': ['1.2.3.4']    },\n             112760496502:  {'dst': ['10.122.195.34'],\n                             'src': ['4.3.2.1']    },\n             112758601487:  {'src': ['1.2.3.4'],\n                             'alias': ['www.example.com'],\n                             'dst': ['10.121.4.136']},\n             112757412898:  {'dst': ['10.122.195.34'],\n                             'src': ['4.3.2.1']    },\n             112757354733:  {'dst': ['124.12.13.14'],\n                             'src': ['8.5.6.0']},             \n             }\n\nfor x in input_raw.iteritems():\n    print x\nprint '\\n---------------------------\\n'\n\nseen = []\n\nfor k,val in input_raw.items():\n    if val in seen:\n        del input_raw[k]\n    else:\n        seen.append(val)\n\n\nfor x in input_raw.iteritems():\n    print x\n</code>\n</pre>\n", "senID": 0}, {"text": ["result"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n (112762853385L, {'src': ['1.2.3.4'], 'dst': ['10.121.4.136'], 'alias': ['www.example.com']})\n(112757354733L, {'src': ['8.5.6.0'], 'dst': ['124.12.13.14']})\n(112758601487L, {'src': ['1.2.3.4'], 'dst': ['10.121.4.136'], 'alias': ['www.example.com']})\n(112757412898L, {'src': ['4.3.2.1'], 'dst': ['10.122.195.34']})\n(112760496502L, {'src': ['4.3.2.1'], 'dst': ['10.122.195.34']})\n(112760496444L, {'src': ['1.2.3.4'], 'dst': ['10.121.4.299']})\n(112762853378L, {'src': ['1.2.3.4'], 'dst': ['10.121.4.136'], 'alias': ['www.example.com']})\n\n---------------------------\n\n(112762853385L, {'src': ['1.2.3.4'], 'dst': ['10.121.4.136'], 'alias': ['www.example.com']})\n(112757354733L, {'src': ['8.5.6.0'], 'dst': ['124.12.13.14']})\n(112757412898L, {'src': ['4.3.2.1'], 'dst': ['10.122.195.34']})\n(112760496444L, {'src': ['1.2.3.4'], 'dst': ['10.121.4.299']})\n</code>\n</pre>\n", "senID": 2}, {"text": ["The facts that this solution creates first a list input_raw.iteritems() (as in Andrew's Cox's answer) and requires a growing list seen are drawbacks.", "But the first can't be avoided (using iteritems() doesn't work) and the second is less heavy than re-creating a list result.values() from growing list result for each turn of a loop."], "childNum": 5, "tag": "p", "senID": 3, "childList": [{"text": "input_raw.iteritems()", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "seen", "childNum": 0, "tag": "strong", "pos": -1, "childList": []}, {"text": "", "childNum": 0, "tag": "br", "pos": 1, "childList": []}, {"text": "result.values()", "childNum": 0, "tag": "strong", "childList": []}, {"text": "result", "childNum": 0, "tag": "strong", "childList": []}]}], [{"text": ["Since the way to find uniqueness in correspondences is exactly to use a dictionary, with the desired unique value being the key, the way to go is to create a reversed dict, where your values are composed as the key - then recreate a \"de-reversed\" dictionary using the intermediate result."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"code": "<pre>\n<code>\n dct = {112762853378: \n   {'dst': ['10.121.4.136'], \n    'src': ['1.2.3.4'], \n    'alias': ['www.example.com']\n   },\n 112762853385: \n   {'dst': ['10.121.4.136'], \n    'src': ['1.2.3.4'], \n    'alias': ['www.example.com']\n   },\n 112760496444: \n   {'dst': ['10.121.4.136'], \n    'src': ['1.2.3.4']\n   },\n 112760496502: \n   {'dst': ['10.122.195.34'], \n    'src': ['4.3.2.1']\n   },\n   }\n\ndef remove_dups (dct):\n    reversed_dct = {}\n    for key, val in dct.items():\n        new_key = tuple(val[\"dst\"]) + tuple(val[\"src\"]) + (tuple(val[\"alias\"]) if \"alias\" in val else (None,) ) \n        reversed_dct[new_key] = key\n    result_dct = {}\n    for key, val in reversed_dct.items():\n        result_dct[val] = dct[val]\n    return result_dct\n\nresult = remove_dups(dct)\n</code>\n</pre>\n", "senID": 1}], [{"code": "<pre>\n<code>\n from collections import defaultdict\n\ndups = defaultdict(lambda : defaultdict(list))\n\nfor key, entry in data.iteritems():\n    dups[tuple(entry.keys())][tuple([v[0] for v in entry.values()])].append(key)\n\nfor dup_indexes in dups.values():\n    for keys in dup_indexes.values():\n        for key in keys[1:]:\n            if key in data:\n                del data[key]\n</code>\n</pre>\n", "senID": 0}]]