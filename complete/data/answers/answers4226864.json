[[{"text": ["In order to keep your code maintainable, it's best to go ahead and have your individual ModelAdmin classes inherit from NewModelAdmin.", "This way, other developers who look at your code (and you, perhaps a year or two later) can clearly see where the custom formfield_for_dbfield behavior originates from so that it can be updated if needed.", "If you monkey-patch admin.ModelAdmin, it will make it much more difficult to track down issues or change the behavior if needed later."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}], [{"text": ["I'm not 100% clear with what you want to do, and why you don't want to create a new subclass or have a method of a different name."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["But in general in python you can do something like:"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"code": "<pre>\n<code>\n class MyClass(object):\n    def print_hello(self):\n        print \"not hello\"\n\ndef real_print_hello():\n    print \"hello\"\n\nx = MyClass()\nx.print_hello() # \"not hello\"\nsetattr(x, \"print_hello\", real_print_hello)\nx.print_hello() # \"hello\"\n</code>\n</pre>\n", "senID": 2}], [{"text": ["Are you trying to do 'monkey patching'?"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["http://mail.python.org/pipermail/python-dev/2008-January/076194.html"], "childNum": 1, "tag": "p", "senID": 1, "childList": [{"text": "http://mail.python.org/pipermail/python-dev/2008-January/076194.html", "tag": "a", "pos": 0, "childList": [], "childNum": 0, "href": "http://mail.python.org/pipermail/python-dev/2008-January/076194.html"}]}], [{"text": ["Chances are good that your problem is solvable without monkey-patching, which often can have unintended consequences."], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"text": ["How are you registering models with the django admin?"], "childNum": 0, "tag": "p", "senID": 1, "childList": []}, {"text": ["If you are using this approach:"], "childNum": 0, "tag": "p", "senID": 2, "childList": []}, {"code": "<pre>\n<code>\n admin.site.register(FooModel) #uses generic ModelAdmin\n</code>\n</pre>\n", "senID": 3}, {"text": ["You have the problem of needing to change this to many boilerplate instances of subclasses of NewModelAdmin, which would look like this:"], "childNum": 0, "tag": "p", "senID": 4, "childList": []}, {"code": "<pre>\n<code>\n class FooModelAdmin(NewModelAdmin):\n    pass #does nothing except set up inheritance\nadmin.site.register(FooModel, FooModelAdmin)\n</code>\n</pre>\n", "senID": 5}, {"text": ["This is really wordy and might take a lot of time to implement if you have a lot of models, so do it programmatically by writing a wrapper function:"], "childNum": 0, "tag": "p", "senID": 6, "childList": []}, {"code": "<pre>\n<code>\n def my_admin_register(model):\n    class _newmodeladmin(ModelAdmin):\n        def your_overridden_method(*args, **kwargs):\n            #do whatever here\n    admin.site.register(model, _newmodeladmin)\n</code>\n</pre>\n", "senID": 7}, {"text": ["Then, you can use this like this:"], "childNum": 0, "tag": "p", "senID": 8, "childList": []}, {"code": "<pre>\n<code>\n my_admin_register(FooModel)\n</code>\n</pre>\n", "senID": 9}], [{"text": ["You can change a class method using setattr() on the class - aka monkey patching."], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "setattr()", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "monkey patching", "childNum": 0, "tag": "code", "childList": []}]}], [{"text": ["If you modify a method in a class you modify behavior for:"], "childNum": 0, "tag": "p", "senID": 0, "childList": []}, {"tag": "ul", "num": 2, "lis": [{"text": "all instances which resolve their method to that class", "tag": "none", "senID": 1}, {"text": "all derived classes which resolve their method to that class", "tag": "none", "senID": 2}]}, {"text": ["Your requirements are mutually exclusive.", "You cannot modify the behavior of a class without impacting those object which resolve their methods to the class."], "childNum": 0, "tag": "p", "senID": 3, "childList": []}, {"text": ["In order to not modify the behaviors of these other objects you would want to create the method in your instance so that it doesn't resolve it's method in the class. "], "childNum": 3, "tag": "p", "senID": 4, "childList": [{"text": "not", "childNum": 0, "tag": "strong", "pos": 0, "childList": []}, {"text": "create", "childNum": 0, "tag": "strong", "childList": []}, {"text": "instance", "childNum": 0, "tag": "strong", "childList": []}]}, {"text": ["Another alternative is to rely on Python's duck-typing.", "You don't need the object to be directly related to the one currently used.", "You could reimplement the interface and in the code swap out the calls to the old class for your new one."], "childNum": 0, "tag": "p", "senID": 5, "childList": []}, {"text": ["These techniques have tradeoffs in maintainability and design.", "In other words don't use them unless you have no other options."], "childNum": 0, "tag": "p", "senID": 6, "childList": []}], [{"text": ["I'm not 100% sure what you are trying to achieve, but I suppose you want to behave all admins that inherit from models.ModelAdmin without having to change their declaration.", "The only solution to achieve this will be monkey-patching the original ModelAdmin class, eg.", "something like:"], "childNum": 2, "tag": "p", "senID": 0, "childList": [{"text": "models.ModelAdmin", "childNum": 0, "tag": "code", "pos": 0, "childList": []}, {"text": "ModelAdmin", "childNum": 0, "tag": "code", "pos": 1, "childList": []}]}, {"code": "<pre>\n<code>\n setattr(admin.ModelAdmin, 'form_field_for_dbfield', mymethod)\n</code>\n</pre>\n", "senID": 1}, {"text": ["This for sure not the most recommendable way, because the code will be hard to maintain and other things."], "childNum": 0, "tag": "p", "senID": 2, "childList": []}]]